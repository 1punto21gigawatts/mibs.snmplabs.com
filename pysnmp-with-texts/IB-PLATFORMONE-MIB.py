#
# PySNMP MIB module IB-PLATFORMONE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IB-PLATFORMONE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:50:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
ibPlatformOne, IbString, IbIpAddr = mibBuilder.importSymbols("IB-SMI-MIB", "ibPlatformOne", "IbString", "IbIpAddr")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, iso, IpAddress, enterprises, NotificationType, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter64, Gauge32, Unsigned32, ObjectIdentity, MibIdentifier, Integer32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "iso", "IpAddress", "enterprises", "NotificationType", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter64", "Gauge32", "Unsigned32", "ObjectIdentity", "MibIdentifier", "Integer32", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ibPlatformModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1))
ibPlatformModule.setRevisions(('2010-11-15 00:00', '2010-10-19 00:00', '2010-07-28 00:00', '2009-06-05 00:00', '2008-09-29 00:00', '2005-01-10 00:00', '2004-05-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ibPlatformModule.setRevisionsDescriptions(('Added Bloxtools_move service status info', 'Added BGP service status info', 'Added MIBs for Node status info', 'Added MIBs for CPU, Memory usage', 'Added security counters', 'Added copyright', 'Creation of the MIB file',))
if mibBuilder.loadTexts: ibPlatformModule.setLastUpdated('201011150000Z')
if mibBuilder.loadTexts: ibPlatformModule.setOrganization('Infoblox')
if mibBuilder.loadTexts: ibPlatformModule.setContactInfo('Please See IB-SMI-MIB.')
if mibBuilder.loadTexts: ibPlatformModule.setDescription('This file defines the Infoblox One platform MIB.')
ibCPUTemperature = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 1), IbString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibCPUTemperature.setStatus('current')
if mibBuilder.loadTexts: ibCPUTemperature.setDescription('Infoblox One CPU temperature.')
ibClusterReplicationStatusTable = MibTable((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 2), )
if mibBuilder.loadTexts: ibClusterReplicationStatusTable.setStatus('current')
if mibBuilder.loadTexts: ibClusterReplicationStatusTable.setDescription("A table of Physical Node's Grid Replication Status.")
ibClusterReplicationStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 2, 1), ).setIndexNames((0, "IB-PLATFORMONE-MIB", "ibNodeIPAddress"))
if mibBuilder.loadTexts: ibClusterReplicationStatusEntry.setStatus('current')
if mibBuilder.loadTexts: ibClusterReplicationStatusEntry.setDescription('A conceptual row containing info about a particular grid replication status.')
ibNodeIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 2, 1, 1), IbIpAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNodeIPAddress.setStatus('current')
if mibBuilder.loadTexts: ibNodeIPAddress.setDescription('Physical node IP address.')
ibNodeReplicationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 2, 1, 2), IbString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNodeReplicationStatus.setStatus('current')
if mibBuilder.loadTexts: ibNodeReplicationStatus.setDescription('Replication queue status for this node.')
ibNodeQueueFromMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNodeQueueFromMaster.setStatus('current')
if mibBuilder.loadTexts: ibNodeQueueFromMaster.setDescription('Sent queue size from master.')
ibNodeLastRepTimeFromMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 2, 1, 4), IbString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNodeLastRepTimeFromMaster.setStatus('current')
if mibBuilder.loadTexts: ibNodeLastRepTimeFromMaster.setDescription('Last sent time from master.')
ibNodeQueueToMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNodeQueueToMaster.setStatus('current')
if mibBuilder.loadTexts: ibNodeQueueToMaster.setDescription('Receive queue size to master.')
ibNodeLastRepTimeToMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 2, 1, 6), IbString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNodeLastRepTimeToMaster.setStatus('current')
if mibBuilder.loadTexts: ibNodeLastRepTimeToMaster.setDescription('Last receive time to master.')
ibNetworkMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3))
ibHardwareType = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 4), IbString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibHardwareType.setStatus('current')
if mibBuilder.loadTexts: ibHardwareType.setDescription('Infoblox One hardware type')
ibHardwareId = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 5), IbString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibHardwareId.setStatus('current')
if mibBuilder.loadTexts: ibHardwareId.setDescription('Infoblox One hardware id')
ibSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 6), IbString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibSerialNumber.setStatus('current')
if mibBuilder.loadTexts: ibSerialNumber.setDescription('Infoblox One device serial number')
ibNiosVersion = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 7), IbString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNiosVersion.setStatus('current')
if mibBuilder.loadTexts: ibNiosVersion.setDescription('Infoblox One NIOS version')
ibSystemMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8))
ibSystemMonitorCpu = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 1))
ibSystemMonitorMem = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 2))
ibSystemMonitorCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibSystemMonitorCpuUsage.setStatus('current')
if mibBuilder.loadTexts: ibSystemMonitorCpuUsage.setDescription('Current average CPU usage')
ibSystemMonitorMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 8, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibSystemMonitorMemUsage.setStatus('current')
if mibBuilder.loadTexts: ibSystemMonitorMemUsage.setDescription('Current Memory usage')
ibNetworkMonitorDNS = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1))
ibNetworkMonitorDNSActive = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nonactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSActive.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSActive.setDescription('Equal to 1 if monitoring is active. No other data is likely to be correct if not active')
ibNetworkMonitorDNSNonAA = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2))
ibNetworkMonitorDNSNonAAT1 = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 1))
ibNetworkMonitorDNSNonAAT5 = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 2))
ibNetworkMonitorDNSNonAAT15 = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 3))
ibNetworkMonitorDNSNonAAT60 = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 4))
ibNetworkMonitorDNSNonAAT1440 = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 5))
ibNetworkMonitorDNSAA = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3))
ibNetworkMonitorDNSAAT1 = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 1))
ibNetworkMonitorDNSAAT5 = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 2))
ibNetworkMonitorDNSAAT15 = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 3))
ibNetworkMonitorDNSAAT60 = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 4))
ibNetworkMonitorDNSAAT1440 = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 5))
ibNetworkMonitorDNSNonAAT1AvgLatency = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT1AvgLatency.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT1AvgLatency.setDescription('Average Latencies (in microseconds) for incoming DNS queries during the last 1 minute where the reply was non authoritative')
ibNetworkMonitorDNSNonAAT1Count = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT1Count.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT1Count.setDescription('Number of queries used to calculate the average latencies during the last 1 minute where the reply was non authoritative')
ibNetworkMonitorDNSNonAAT5AvgLatency = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT5AvgLatency.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT5AvgLatency.setDescription('Average Latencies (in microseconds) for incoming DNS queries during the last 5 minutes where the reply was non authoritative')
ibNetworkMonitorDNSNonAAT5Count = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT5Count.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT5Count.setDescription('Number of queries used to calculate the average latencies during the last 5 minutes where the reply was non authoritative')
ibNetworkMonitorDNSNonAAT15AvgLatency = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT15AvgLatency.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT15AvgLatency.setDescription('Average Latencies (in microseconds) for incoming DNS queries during the last 15 minutes where the reply was non authoritative')
ibNetworkMonitorDNSNonAAT15Count = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT15Count.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT15Count.setDescription('Number of queries used to calculate the average latencies during the last 15 minutes where the reply was non authoritative')
ibNetworkMonitorDNSNonAAT60AvgLatency = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT60AvgLatency.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT60AvgLatency.setDescription('Average Latencies (in microseconds) for incoming DNS queries during the last 60 minutes where the reply was non authoritative')
ibNetworkMonitorDNSNonAAT60Count = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT60Count.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT60Count.setDescription('Number of queries used to calculate the average latencies during the last 60 minutes where the reply was non authoritative')
ibNetworkMonitorDNSNonAAT1440AvgLatency = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT1440AvgLatency.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT1440AvgLatency.setDescription('Average Latencies (in microseconds) for incoming DNS queries during the last 1440 minutes (24 hours) where the reply was non authoritative')
ibNetworkMonitorDNSNonAAT1440Count = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 2, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT1440Count.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSNonAAT1440Count.setDescription('Number of queries used to calculate the average latencies during the last 1440 minutes (24 hours) where the reply was non authoritative')
ibNetworkMonitorDNSAAT1AvgLatency = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT1AvgLatency.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT1AvgLatency.setDescription('Average Latencies (in microseconds) for incoming DNS queries during the last 1 minute where the reply was authoritative')
ibNetworkMonitorDNSAAT1Count = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT1Count.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT1Count.setDescription('Number of queries used to calculate the average latencies during the last 1 minute where the reply was authoritative')
ibNetworkMonitorDNSAAT5AvgLatency = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT5AvgLatency.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT5AvgLatency.setDescription('Average Latencies (in microseconds) for incoming DNS queries during the last 5 minutes where the reply was authoritative')
ibNetworkMonitorDNSAAT5Count = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT5Count.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT5Count.setDescription('Number of queries used to calculate the average latencies during the last 5 minutes where the reply was authoritative')
ibNetworkMonitorDNSAAT15AvgLatency = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT15AvgLatency.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT15AvgLatency.setDescription('Average Latencies (in microseconds) for incoming DNS queries during the last 15 minutes where the reply was authoritative')
ibNetworkMonitorDNSAAT15Count = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT15Count.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT15Count.setDescription('Number of queries used to calculate the average latencies during the last 15 minutes where the reply was authoritative')
ibNetworkMonitorDNSAAT60AvgLatency = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT60AvgLatency.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT60AvgLatency.setDescription('Average Latencies (in microseconds) for incoming DNS queries during the last 60 minutes where the reply was authoritative')
ibNetworkMonitorDNSAAT60Count = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT60Count.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT60Count.setDescription('Number of queries used to calculate the average latencies during the last 60 minutes where the reply was authoritative')
ibNetworkMonitorDNSAAT1440AvgLatency = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT1440AvgLatency.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT1440AvgLatency.setDescription('Average Latencies (in microseconds) for incoming DNS queries during the last 1440 minutes (24 hours) where the reply was authoritative')
ibNetworkMonitorDNSAAT1440Count = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 3, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT1440Count.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSAAT1440Count.setDescription('Number of queries used to calculate the average latencies during the last 1440 minutes (24 hours) where the reply was authoritative')
ibNetworkMonitorDNSSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4))
ibNetworkMonitorDNSSecurityInvalidPort = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 1))
ibNetworkMonitorDNSSecurityInvalidPort1 = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidPort1.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidPort1.setDescription('Number of DNS responses to invalid ports during the last 1 minute')
ibNetworkMonitorDNSSecurityInvalidPort5 = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidPort5.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidPort5.setDescription('Number of DNS responses to invalid ports during the last 5 minutes')
ibNetworkMonitorDNSSecurityInvalidPort15 = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidPort15.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidPort15.setDescription('Number of DNS responses to invalid ports during the last 15 minutes')
ibNetworkMonitorDNSSecurityInvalidPort60 = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidPort60.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidPort60.setDescription('Number of DNS responses to invalid ports during the last 60 minutes')
ibNetworkMonitorDNSSecurityInvalidPort1440 = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidPort1440.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidPort1440.setDescription('Number of DNS responses to invalid ports during the last 1440 minutes (24 hours)')
ibNetworkMonitorDNSSecurityInvalidPortCount = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidPortCount.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidPortCount.setDescription('Number of DNS responses to invalid ports')
ibNetworkMonitorDNSSecurityInvalidTxid = MibIdentifier((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 2))
ibNetworkMonitorDNSSecurityInvalidTxid1 = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidTxid1.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidTxid1.setDescription('Number of DNS responses with an invalid TXID during the last 1 minute')
ibNetworkMonitorDNSSecurityInvalidTxid5 = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidTxid5.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidTxid5.setDescription('Number of DNS responses with an invalid TXID during the last 5 minutes')
ibNetworkMonitorDNSSecurityInvalidTxid15 = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidTxid15.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidTxid15.setDescription('Number of DNS responses with an invalid TXID during the last 15 minutes')
ibNetworkMonitorDNSSecurityInvalidTxid60 = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidTxid60.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidTxid60.setDescription('Number of DNS responses with an invalid TXID during the last 60 minutes')
ibNetworkMonitorDNSSecurityInvalidTxid1440 = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidTxid1440.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidTxid1440.setDescription('Number of DNS responses with an invalid TXID during the last 1440 minutes (24 hours)')
ibNetworkMonitorDNSSecurityInvalidTxidCount = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidTxidCount.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidTxidCount.setDescription('Number of DNS responses with an invalid TXID')
ibNetworkMonitorDNSSecurityInvalidPortOnly = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidPortOnly.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidPortOnly.setDescription('Number of DNS responses to invalid ports with a valid TXID')
ibNetworkMonitorDNSSecurityInvalidTxidOnly = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidTxidOnly.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidTxidOnly.setDescription('Number of DNS responses to valid ports with an invalid TXID')
ibNetworkMonitorDNSSecurityInvalidTxidAndPort = MibScalar((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 3, 1, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidTxidAndPort.setStatus('current')
if mibBuilder.loadTexts: ibNetworkMonitorDNSSecurityInvalidTxidAndPort.setDescription('Number of DNS responses to an invalid port and with an invalid TXID')
class IbServiceStates(TextualConvention, Integer32):
    description = 'It defines the states for infoblox services Note: NTP service will always be running on NIOS, even when disabled in the GUI.This is for internal grid operations.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("working", 1), ("warning", 2), ("failed", 3), ("inactive", 4), ("unknown", 5))

class IbServiceNames(TextualConvention, Integer32):
    description = 'It defines the names for infoblox services.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36))
    namedValues = NamedValues(("dhcp", 1), ("dns", 2), ("ntp", 3), ("radius", 4), ("tftp", 5), ("http-file-dist", 6), ("ftp", 7), ("bloxtools-move", 8), ("bloxtools", 9), ("node-status", 10), ("disk-usage", 11), ("enet-lan", 12), ("enet-lan2", 13), ("enet-ha", 14), ("enet-mgmt", 15), ("lcd", 16), ("memory", 17), ("replication", 18), ("db-object", 19), ("raid-summary", 20), ("raid-disk1", 21), ("raid-disk2", 22), ("raid-disk3", 23), ("raid-disk4", 24), ("fan1", 25), ("fan2", 26), ("fan3", 27), ("power-supply", 28), ("ntp-sync", 29), ("cpu1-temp", 30), ("cpu2-temp", 31), ("sys-temp", 32), ("raid-battery", 33), ("cpu-usage", 34), ("ospf", 35), ("bgp", 36))

ibMemberServiceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 9), )
if mibBuilder.loadTexts: ibMemberServiceStatusTable.setStatus('current')
if mibBuilder.loadTexts: ibMemberServiceStatusTable.setDescription('A table of member service status.')
ibMemberServiceStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 9, 1), ).setIndexNames((0, "IB-PLATFORMONE-MIB", "ibServiceName"))
if mibBuilder.loadTexts: ibMemberServiceStatusEntry.setStatus('current')
if mibBuilder.loadTexts: ibMemberServiceStatusEntry.setDescription('A conceptual row containing info about a particular service status.')
ibServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 9, 1, 1), IbServiceNames()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibServiceName.setStatus('current')
if mibBuilder.loadTexts: ibServiceName.setDescription('Service Name.')
ibServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 9, 1, 2), IbServiceStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibServiceStatus.setStatus('current')
if mibBuilder.loadTexts: ibServiceStatus.setDescription('Service Status.')
ibServiceDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 9, 1, 3), IbString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibServiceDesc.setStatus('current')
if mibBuilder.loadTexts: ibServiceDesc.setDescription('Service Description.')
ibMemberNode1ServiceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 10), )
if mibBuilder.loadTexts: ibMemberNode1ServiceStatusTable.setStatus('current')
if mibBuilder.loadTexts: ibMemberNode1ServiceStatusTable.setDescription("A table of Physical Node's Service Status.")
ibMemberNode1ServiceStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 10, 1), ).setIndexNames((0, "IB-PLATFORMONE-MIB", "ibNode1ServiceName"))
if mibBuilder.loadTexts: ibMemberNode1ServiceStatusEntry.setStatus('current')
if mibBuilder.loadTexts: ibMemberNode1ServiceStatusEntry.setDescription('A conceptual row containing info about a particular service status.')
ibNode1ServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 10, 1, 1), IbServiceNames()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNode1ServiceName.setStatus('current')
if mibBuilder.loadTexts: ibNode1ServiceName.setDescription('Service Name.')
ibNode1ServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 10, 1, 2), IbServiceStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNode1ServiceStatus.setStatus('current')
if mibBuilder.loadTexts: ibNode1ServiceStatus.setDescription('Service Status.')
ibNode1ServiceDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 10, 1, 3), IbString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNode1ServiceDesc.setStatus('current')
if mibBuilder.loadTexts: ibNode1ServiceDesc.setDescription('Service Description.')
ibMemberNode2ServiceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 11), )
if mibBuilder.loadTexts: ibMemberNode2ServiceStatusTable.setStatus('current')
if mibBuilder.loadTexts: ibMemberNode2ServiceStatusTable.setDescription("A table of Physical Node's Service Status.")
ibMemberNode2ServiceStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 11, 1), ).setIndexNames((0, "IB-PLATFORMONE-MIB", "ibNode2ServiceName"))
if mibBuilder.loadTexts: ibMemberNode2ServiceStatusEntry.setStatus('current')
if mibBuilder.loadTexts: ibMemberNode2ServiceStatusEntry.setDescription('A conceptual row containing info about a particular service status.')
ibNode2ServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 11, 1, 1), IbServiceNames()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNode2ServiceName.setStatus('current')
if mibBuilder.loadTexts: ibNode2ServiceName.setDescription('Service Name.')
ibNode2ServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 11, 1, 2), IbServiceStates()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNode2ServiceStatus.setStatus('current')
if mibBuilder.loadTexts: ibNode2ServiceStatus.setDescription('Service Status.')
ibNode2ServiceDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 7779, 3, 1, 1, 2, 1, 11, 1, 3), IbString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ibNode2ServiceDesc.setStatus('current')
if mibBuilder.loadTexts: ibNode2ServiceDesc.setDescription('Service Description.')
mibBuilder.exportSymbols("IB-PLATFORMONE-MIB", ibNetworkMonitorDNSNonAAT15=ibNetworkMonitorDNSNonAAT15, ibNetworkMonitorDNSAAT5Count=ibNetworkMonitorDNSAAT5Count, ibCPUTemperature=ibCPUTemperature, ibNetworkMonitorDNSAAT60AvgLatency=ibNetworkMonitorDNSAAT60AvgLatency, ibNetworkMonitorDNSSecurityInvalidPort1=ibNetworkMonitorDNSSecurityInvalidPort1, ibNetworkMonitorDNSAAT1=ibNetworkMonitorDNSAAT1, ibNetworkMonitorDNSNonAAT1440=ibNetworkMonitorDNSNonAAT1440, ibNetworkMonitorDNSAAT60Count=ibNetworkMonitorDNSAAT60Count, ibNetworkMonitorDNSSecurityInvalidTxid5=ibNetworkMonitorDNSSecurityInvalidTxid5, ibNode2ServiceDesc=ibNode2ServiceDesc, ibNetworkMonitorDNSAAT1Count=ibNetworkMonitorDNSAAT1Count, ibNetworkMonitorDNSNonAAT1=ibNetworkMonitorDNSNonAAT1, ibSystemMonitorCpuUsage=ibSystemMonitorCpuUsage, ibMemberNode2ServiceStatusEntry=ibMemberNode2ServiceStatusEntry, ibHardwareType=ibHardwareType, ibNetworkMonitorDNSAAT60=ibNetworkMonitorDNSAAT60, ibNetworkMonitorDNSNonAAT1440AvgLatency=ibNetworkMonitorDNSNonAAT1440AvgLatency, ibNetworkMonitorDNSNonAAT1AvgLatency=ibNetworkMonitorDNSNonAAT1AvgLatency, ibNiosVersion=ibNiosVersion, PYSNMP_MODULE_ID=ibPlatformModule, ibNetworkMonitorDNSSecurityInvalidTxid1440=ibNetworkMonitorDNSSecurityInvalidTxid1440, ibNodeQueueToMaster=ibNodeQueueToMaster, ibMemberNode1ServiceStatusEntry=ibMemberNode1ServiceStatusEntry, ibServiceDesc=ibServiceDesc, ibNetworkMonitorDNSSecurityInvalidTxidCount=ibNetworkMonitorDNSSecurityInvalidTxidCount, ibNetworkMonitorDNSAAT5AvgLatency=ibNetworkMonitorDNSAAT5AvgLatency, ibNetworkMonitorDNSNonAAT60=ibNetworkMonitorDNSNonAAT60, ibNodeIPAddress=ibNodeIPAddress, ibNetworkMonitorDNSNonAAT1440Count=ibNetworkMonitorDNSNonAAT1440Count, ibClusterReplicationStatusTable=ibClusterReplicationStatusTable, ibNetworkMonitorDNSAAT1440AvgLatency=ibNetworkMonitorDNSAAT1440AvgLatency, ibNetworkMonitorDNSNonAAT15AvgLatency=ibNetworkMonitorDNSNonAAT15AvgLatency, ibNetworkMonitorDNSAAT15=ibNetworkMonitorDNSAAT15, ibServiceName=ibServiceName, ibNetworkMonitorDNS=ibNetworkMonitorDNS, ibNetworkMonitorDNSSecurityInvalidPort=ibNetworkMonitorDNSSecurityInvalidPort, ibNetworkMonitorDNSSecurityInvalidPort1440=ibNetworkMonitorDNSSecurityInvalidPort1440, ibNetworkMonitorDNSSecurityInvalidTxid60=ibNetworkMonitorDNSSecurityInvalidTxid60, ibNodeLastRepTimeFromMaster=ibNodeLastRepTimeFromMaster, ibNetworkMonitorDNSAAT5=ibNetworkMonitorDNSAAT5, ibSystemMonitor=ibSystemMonitor, ibServiceStatus=ibServiceStatus, ibMemberNode1ServiceStatusTable=ibMemberNode1ServiceStatusTable, ibNetworkMonitorDNSNonAAT15Count=ibNetworkMonitorDNSNonAAT15Count, ibNetworkMonitorDNSNonAAT60AvgLatency=ibNetworkMonitorDNSNonAAT60AvgLatency, ibNetworkMonitorDNSNonAA=ibNetworkMonitorDNSNonAA, ibNetworkMonitorDNSNonAAT5=ibNetworkMonitorDNSNonAAT5, ibSystemMonitorCpu=ibSystemMonitorCpu, ibClusterReplicationStatusEntry=ibClusterReplicationStatusEntry, ibNodeReplicationStatus=ibNodeReplicationStatus, ibNetworkMonitorDNSAAT1AvgLatency=ibNetworkMonitorDNSAAT1AvgLatency, ibNetworkMonitorDNSAAT1440Count=ibNetworkMonitorDNSAAT1440Count, ibNetworkMonitorDNSActive=ibNetworkMonitorDNSActive, ibNetworkMonitorDNSSecurityInvalidPort60=ibNetworkMonitorDNSSecurityInvalidPort60, ibMemberServiceStatusTable=ibMemberServiceStatusTable, ibNetworkMonitor=ibNetworkMonitor, ibNetworkMonitorDNSAAT15Count=ibNetworkMonitorDNSAAT15Count, ibMemberServiceStatusEntry=ibMemberServiceStatusEntry, ibNetworkMonitorDNSNonAAT5AvgLatency=ibNetworkMonitorDNSNonAAT5AvgLatency, IbServiceStates=IbServiceStates, ibNetworkMonitorDNSNonAAT5Count=ibNetworkMonitorDNSNonAAT5Count, ibNetworkMonitorDNSSecurityInvalidTxid15=ibNetworkMonitorDNSSecurityInvalidTxid15, ibNetworkMonitorDNSNonAAT60Count=ibNetworkMonitorDNSNonAAT60Count, ibNetworkMonitorDNSSecurityInvalidPort15=ibNetworkMonitorDNSSecurityInvalidPort15, ibNetworkMonitorDNSAA=ibNetworkMonitorDNSAA, ibNetworkMonitorDNSAAT1440=ibNetworkMonitorDNSAAT1440, ibNetworkMonitorDNSAAT15AvgLatency=ibNetworkMonitorDNSAAT15AvgLatency, ibNode2ServiceStatus=ibNode2ServiceStatus, ibHardwareId=ibHardwareId, ibNodeLastRepTimeToMaster=ibNodeLastRepTimeToMaster, ibSerialNumber=ibSerialNumber, ibSystemMonitorMem=ibSystemMonitorMem, ibNetworkMonitorDNSSecurityInvalidTxidAndPort=ibNetworkMonitorDNSSecurityInvalidTxidAndPort, ibPlatformModule=ibPlatformModule, ibNetworkMonitorDNSSecurityInvalidTxidOnly=ibNetworkMonitorDNSSecurityInvalidTxidOnly, ibNode2ServiceName=ibNode2ServiceName, ibNetworkMonitorDNSSecurityInvalidPort5=ibNetworkMonitorDNSSecurityInvalidPort5, ibNetworkMonitorDNSNonAAT1Count=ibNetworkMonitorDNSNonAAT1Count, ibNetworkMonitorDNSSecurityInvalidTxid1=ibNetworkMonitorDNSSecurityInvalidTxid1, ibNetworkMonitorDNSSecurityInvalidPortOnly=ibNetworkMonitorDNSSecurityInvalidPortOnly, ibNode1ServiceStatus=ibNode1ServiceStatus, ibMemberNode2ServiceStatusTable=ibMemberNode2ServiceStatusTable, ibNetworkMonitorDNSSecurityInvalidPortCount=ibNetworkMonitorDNSSecurityInvalidPortCount, ibNode1ServiceDesc=ibNode1ServiceDesc, ibNodeQueueFromMaster=ibNodeQueueFromMaster, ibNode1ServiceName=ibNode1ServiceName, IbServiceNames=IbServiceNames, ibSystemMonitorMemUsage=ibSystemMonitorMemUsage, ibNetworkMonitorDNSSecurityInvalidTxid=ibNetworkMonitorDNSSecurityInvalidTxid, ibNetworkMonitorDNSSecurity=ibNetworkMonitorDNSSecurity)
