#
# PySNMP MIB module ASCEND-MIBCLTMRSLT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-MIBCLTMRSLT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:26:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
configuration, = mibBuilder.importSymbols("ASCEND-MIB", "configuration")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, TimeTicks, Bits, Counter64, iso, IpAddress, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ObjectIdentity, Unsigned32, NotificationType, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "TimeTicks", "Bits", "Counter64", "iso", "IpAddress", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ObjectIdentity", "Unsigned32", "NotificationType", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DisplayString(OctetString):
    pass

mibcltmRslt = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 68))
mibcltmRsltTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 68, 1), )
if mibBuilder.loadTexts: mibcltmRsltTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibcltmRsltTable.setDescription('A list of mibcltmRslt profile entries.')
mibcltmRsltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1), ).setIndexNames((0, "ASCEND-MIBCLTMRSLT-MIB", "cltmRslt-Index-o"))
if mibBuilder.loadTexts: mibcltmRsltEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibcltmRsltEntry.setDescription('A mibcltmRslt entry containing objects that maps to the parameters of mibcltmRslt profile.')
cltmRslt_Index_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 1), Integer32()).setLabel("cltmRslt-Index-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_Index_o.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_Index_o.setDescription('')
cltmRslt_CltmSlot = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("anySlot", 1), ("slot1", 2), ("slot2", 3), ("slot3", 4), ("slot4", 5), ("slot5", 6), ("slot6", 7), ("slot7", 8), ("slot10", 11), ("slot11", 12), ("slot12", 13), ("slot13", 14), ("slot14", 15), ("slot15", 16), ("slot16", 17)))).setLabel("cltmRslt-CltmSlot").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_CltmSlot.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_CltmSlot.setDescription('Identify the CLTM slot within the system.')
cltmRslt_TestResultTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 3), Integer32()).setLabel("cltmRslt-TestResultTimeStamp").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_TestResultTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_TestResultTimeStamp.setDescription('Value of the sysUpTime when the test result was obtained.')
cltmRslt_TestResultSequence = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 4), Integer32()).setLabel("cltmRslt-TestResultSequence").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_TestResultSequence.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_TestResultSequence.setDescription('Sequence of the last test result.')
cltmRslt_TestResultStatus = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notReady", 1), ("notValid", 2), ("overRange", 3), ("valid", 4)))).setLabel("cltmRslt-TestResultStatus").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_TestResultStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_TestResultStatus.setDescription('This parameter indicates whether the test result is valid.')
cltmRslt_DmmResult = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 6), Integer32()).setLabel("cltmRslt-DmmResult").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_DmmResult.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_DmmResult.setDescription('DMM Measurement result. The units are Ohm for resistance, dc/av milli Volt for voltage and pico Farad for capacitance.')
cltmRslt_LoopResistance = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 7), Integer32()).setLabel("cltmRslt-LoopResistance").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_LoopResistance.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_LoopResistance.setDescription('Resistance in Kohm for Loop Resistance Test.')
cltmRslt_LoopResistanceLength1 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 8), Integer32()).setLabel("cltmRslt-LoopResistanceLength1").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_LoopResistanceLength1.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_LoopResistanceLength1.setDescription('Length in feet of 22AWG or meter of 0.644mm for Loop Resistance Test.')
cltmRslt_LoopResistanceLength2 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 9), Integer32()).setLabel("cltmRslt-LoopResistanceLength2").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_LoopResistanceLength2.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_LoopResistanceLength2.setDescription('Length in feet of 24AWG or meter of 0.511mm Loop Resistance Test.')
cltmRslt_LoopResistanceLength3 = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 10), Integer32()).setLabel("cltmRslt-LoopResistanceLength3").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_LoopResistanceLength3.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_LoopResistanceLength3.setDescription('Length in feet of 26AWG or meter of 0.405mm Loop Resistance Test.')
cltmRslt_CoilDetectionCoilCount = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 11), Integer32()).setLabel("cltmRslt-CoilDetectionCoilCount").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_CoilDetectionCoilCount.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_CoilDetectionCoilCount.setDescription('Number of coil detected for Coil Detection Test.')
cltmRslt_ImpulseNoiseReadLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 12), Integer32()).setLabel("cltmRslt-ImpulseNoiseReadLowThreshold").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_ImpulseNoiseReadLowThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_ImpulseNoiseReadLowThreshold.setDescription('Impulse Read Counter over low Db threshold.')
cltmRslt_ImpulseNoiseReadMidThreshold = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 13), Integer32()).setLabel("cltmRslt-ImpulseNoiseReadMidThreshold").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_ImpulseNoiseReadMidThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_ImpulseNoiseReadMidThreshold.setDescription('Impulse Read Counter over mid Db threshold.')
cltmRslt_ImpulseNoiseReadHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 14), Integer32()).setLabel("cltmRslt-ImpulseNoiseReadHighThreshold").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_ImpulseNoiseReadHighThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_ImpulseNoiseReadHighThreshold.setDescription('Impulse Read Counter over high Db threshold.')
cltmRslt_RcvToneFrequency = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 15), Integer32()).setLabel("cltmRslt-RcvToneFrequency").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_RcvToneFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_RcvToneFrequency.setDescription('Receive Tone Frequency.')
cltmRslt_RcvToneLevel = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 16), Integer32()).setLabel("cltmRslt-RcvToneLevel").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_RcvToneLevel.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_RcvToneLevel.setDescription('Receive Tone Level.')
cltmRslt_TdrManualSampleCount = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 17), Integer32()).setLabel("cltmRslt-TdrManualSampleCount").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_TdrManualSampleCount.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_TdrManualSampleCount.setDescription('Number of detectde sample pairs via manual TDR test.')
cltmRslt_TdrAutomaticFaultDistance = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 18), Integer32()).setLabel("cltmRslt-TdrAutomaticFaultDistance").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_TdrAutomaticFaultDistance.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_TdrAutomaticFaultDistance.setDescription('Distance of the detected fault via automatic TDR test.')
cltmRslt_HardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 19), Integer32()).setLabel("cltmRslt-HardwareRevision").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_HardwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_HardwareRevision.setDescription('Hardware revision number.')
cltmRslt_SofwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 20), Integer32()).setLabel("cltmRslt-SofwareRevision").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_SofwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_SofwareRevision.setDescription('Software revision number.')
cltmRslt_DcDeltaResistanceTR = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 21), Integer32()).setLabel("cltmRslt-DcDeltaResistanceTR").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_DcDeltaResistanceTR.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_DcDeltaResistanceTR.setDescription('dc delta resistance T-R.')
cltmRslt_DcDeltaResistanceTS = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 22), Integer32()).setLabel("cltmRslt-DcDeltaResistanceTS").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_DcDeltaResistanceTS.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_DcDeltaResistanceTS.setDescription('dc delta resistance T-S.')
cltmRslt_DcDeltaResistanceRS = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 23), Integer32()).setLabel("cltmRslt-DcDeltaResistanceRS").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_DcDeltaResistanceRS.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_DcDeltaResistanceRS.setDescription('dc delta resistance R-S.')
cltmRslt_DcDeltaVoltageTS = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 24), Integer32()).setLabel("cltmRslt-DcDeltaVoltageTS").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_DcDeltaVoltageTS.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_DcDeltaVoltageTS.setDescription('dc delta voltage T-S.')
cltmRslt_DcDeltaVoltageRS = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 25), Integer32()).setLabel("cltmRslt-DcDeltaVoltageRS").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_DcDeltaVoltageRS.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_DcDeltaVoltageRS.setDescription('dc delta voltage R-S.')
cltmRslt_CapEquivalentTR = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 26), Integer32()).setLabel("cltmRslt-CapEquivalentTR").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_CapEquivalentTR.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_CapEquivalentTR.setDescription('capacitance T-R.')
cltmRslt_CapEquivalentTS = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 27), Integer32()).setLabel("cltmRslt-CapEquivalentTS").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_CapEquivalentTS.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_CapEquivalentTS.setDescription('capacitance T-S.')
cltmRslt_CapEquivalentRS = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 28), Integer32()).setLabel("cltmRslt-CapEquivalentRS").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_CapEquivalentRS.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_CapEquivalentRS.setDescription('capacitance R-S.')
cltmRslt_DmmAllTR = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 29), Integer32()).setLabel("cltmRslt-DmmAllTR").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_DmmAllTR.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_DmmAllTR.setDescription('dmm all T-R.')
cltmRslt_DmmAllTS = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 30), Integer32()).setLabel("cltmRslt-DmmAllTS").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_DmmAllTS.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_DmmAllTS.setDescription('dmm all T-S.')
cltmRslt_DmmAllRS = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 31), Integer32()).setLabel("cltmRslt-DmmAllRS").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_DmmAllRS.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_DmmAllRS.setDescription('dmm all R-S.')
cltmRslt_Ringer = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 32), Integer32()).setLabel("cltmRslt-Ringer").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_Ringer.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_Ringer.setDescription('detect ringer.')
cltmRslt_AtuR = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 33), Integer32()).setLabel("cltmRslt-AtuR").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_AtuR.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_AtuR.setDescription('detect ATU-R.')
cltmRslt_BridgeTapNumber = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 34), Integer32()).setLabel("cltmRslt-BridgeTapNumber").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_BridgeTapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_BridgeTapNumber.setDescription('bridge-tap number.')
cltmRslt_BridgeTapLength = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 35), Integer32()).setLabel("cltmRslt-BridgeTapLength").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_BridgeTapLength.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_BridgeTapLength.setDescription('bridge-tap-loop-len.')
cltmRslt_VoiceDetection = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 37), Integer32()).setLabel("cltmRslt-VoiceDetection").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_VoiceDetection.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_VoiceDetection.setDescription('Voice Detection: 1: Voice signal not detected. 2: Voice signal detected. 3: Steady state - possible data traffic. 4: Interrupted tone detected - 60 or 120 IPM.')
cltmRslt_FirstCoilLocation = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 38), Integer32()).setLabel("cltmRslt-FirstCoilLocation").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_FirstCoilLocation.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_FirstCoilLocation.setDescription('First Coil Location in 0.01 feet or cm.')
cltmRslt_ShortLocation = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 39), Integer32()).setLabel("cltmRslt-ShortLocation").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_ShortLocation.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_ShortLocation.setDescription('Short Location in 0.01 feet or cm.')
cltmRslt_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("cltmRslt-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: cltmRslt_Action_o.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_Action_o.setDescription('')
mibcltmRslt_BridgeTapTableTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 68, 2), ).setLabel("mibcltmRslt-BridgeTapTableTable")
if mibBuilder.loadTexts: mibcltmRslt_BridgeTapTableTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibcltmRslt_BridgeTapTableTable.setDescription('A list of mibcltmRslt__bridge_tap_table profile entries.')
mibcltmRslt_BridgeTapTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 68, 2, 1), ).setLabel("mibcltmRslt-BridgeTapTableEntry").setIndexNames((0, "ASCEND-MIBCLTMRSLT-MIB", "cltmRslt-BridgeTapTable-Index-o"), (0, "ASCEND-MIBCLTMRSLT-MIB", "cltmRslt-BridgeTapTable-Index1-o"))
if mibBuilder.loadTexts: mibcltmRslt_BridgeTapTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibcltmRslt_BridgeTapTableEntry.setDescription('A mibcltmRslt__bridge_tap_table entry containing objects that maps to the parameters of mibcltmRslt__bridge_tap_table profile.')
cltmRslt_BridgeTapTable_Index_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 2, 1, 1), Integer32()).setLabel("cltmRslt-BridgeTapTable-Index-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_BridgeTapTable_Index_o.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_BridgeTapTable_Index_o.setDescription('')
cltmRslt_BridgeTapTable_Index1_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 2, 1, 2), Integer32()).setLabel("cltmRslt-BridgeTapTable-Index1-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_BridgeTapTable_Index1_o.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_BridgeTapTable_Index1_o.setDescription('')
cltmRslt_BridgeTapTable_Distance = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 2, 1, 3), Integer32()).setLabel("cltmRslt-BridgeTapTable-Distance").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_BridgeTapTable_Distance.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_BridgeTapTable_Distance.setDescription('Bridge-Tap Distance in Feet or Meter')
cltmRslt_BridgeTapTable_Length = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 2, 1, 4), Integer32()).setLabel("cltmRslt-BridgeTapTable-Length").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_BridgeTapTable_Length.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_BridgeTapTable_Length.setDescription('Bridge-Tap length(in Feet or Meter)')
cltmRslt_BridgeTapTable_Confidence = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 2, 1, 5), Integer32()).setLabel("cltmRslt-BridgeTapTable-Confidence").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_BridgeTapTable_Confidence.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_BridgeTapTable_Confidence.setDescription('confidence Level in percentage(33 or 55)')
mibcltmRslt_TdrDistanceLevelTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 68, 3), ).setLabel("mibcltmRslt-TdrDistanceLevelTable")
if mibBuilder.loadTexts: mibcltmRslt_TdrDistanceLevelTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibcltmRslt_TdrDistanceLevelTable.setDescription('A list of mibcltmRslt__tdr_distance_level profile entries.')
mibcltmRslt_TdrDistanceLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 68, 3, 1), ).setLabel("mibcltmRslt-TdrDistanceLevelEntry").setIndexNames((0, "ASCEND-MIBCLTMRSLT-MIB", "cltmRslt-TdrDistanceLevel-Index-o"), (0, "ASCEND-MIBCLTMRSLT-MIB", "cltmRslt-TdrDistanceLevel-Index1-o"))
if mibBuilder.loadTexts: mibcltmRslt_TdrDistanceLevelEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibcltmRslt_TdrDistanceLevelEntry.setDescription('A mibcltmRslt__tdr_distance_level entry containing objects that maps to the parameters of mibcltmRslt__tdr_distance_level profile.')
cltmRslt_TdrDistanceLevel_Index_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 3, 1, 1), Integer32()).setLabel("cltmRslt-TdrDistanceLevel-Index-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_TdrDistanceLevel_Index_o.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_TdrDistanceLevel_Index_o.setDescription('')
cltmRslt_TdrDistanceLevel_Index1_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 3, 1, 2), Integer32()).setLabel("cltmRslt-TdrDistanceLevel-Index1-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_TdrDistanceLevel_Index1_o.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_TdrDistanceLevel_Index1_o.setDescription('')
cltmRslt_TdrDistanceLevel_Distance = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 3, 1, 3), Integer32()).setLabel("cltmRslt-TdrDistanceLevel-Distance").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_TdrDistanceLevel_Distance.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_TdrDistanceLevel_Distance.setDescription('Distance.')
cltmRslt_TdrDistanceLevel_Level = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 3, 1, 4), Integer32()).setLabel("cltmRslt-TdrDistanceLevel-Level").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_TdrDistanceLevel_Level.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_TdrDistanceLevel_Level.setDescription('Level.')
mibcltmRslt_PsdFrequencyLevelTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 68, 4), ).setLabel("mibcltmRslt-PsdFrequencyLevelTable")
if mibBuilder.loadTexts: mibcltmRslt_PsdFrequencyLevelTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibcltmRslt_PsdFrequencyLevelTable.setDescription('A list of mibcltmRslt__psd_frequency_level profile entries.')
mibcltmRslt_PsdFrequencyLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 68, 4, 1), ).setLabel("mibcltmRslt-PsdFrequencyLevelEntry").setIndexNames((0, "ASCEND-MIBCLTMRSLT-MIB", "cltmRslt-PsdFrequencyLevel-Index-o"), (0, "ASCEND-MIBCLTMRSLT-MIB", "cltmRslt-PsdFrequencyLevel-Index1-o"))
if mibBuilder.loadTexts: mibcltmRslt_PsdFrequencyLevelEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibcltmRslt_PsdFrequencyLevelEntry.setDescription('A mibcltmRslt__psd_frequency_level entry containing objects that maps to the parameters of mibcltmRslt__psd_frequency_level profile.')
cltmRslt_PsdFrequencyLevel_Index_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 4, 1, 1), Integer32()).setLabel("cltmRslt-PsdFrequencyLevel-Index-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_PsdFrequencyLevel_Index_o.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_PsdFrequencyLevel_Index_o.setDescription('')
cltmRslt_PsdFrequencyLevel_Index1_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 4, 1, 2), Integer32()).setLabel("cltmRslt-PsdFrequencyLevel-Index1-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_PsdFrequencyLevel_Index1_o.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_PsdFrequencyLevel_Index1_o.setDescription('')
cltmRslt_PsdFrequencyLevel_Frequency = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 4, 1, 3), Integer32()).setLabel("cltmRslt-PsdFrequencyLevel-Frequency").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_PsdFrequencyLevel_Frequency.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_PsdFrequencyLevel_Frequency.setDescription('Test frequency.')
cltmRslt_PsdFrequencyLevel_Level = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 68, 4, 1, 4), Integer32()).setLabel("cltmRslt-PsdFrequencyLevel-Level").setMaxAccess("readonly")
if mibBuilder.loadTexts: cltmRslt_PsdFrequencyLevel_Level.setStatus('mandatory')
if mibBuilder.loadTexts: cltmRslt_PsdFrequencyLevel_Level.setDescription('Db Level.')
mibBuilder.exportSymbols("ASCEND-MIBCLTMRSLT-MIB", cltmRslt_LoopResistance=cltmRslt_LoopResistance, cltmRslt_CoilDetectionCoilCount=cltmRslt_CoilDetectionCoilCount, cltmRslt_PsdFrequencyLevel_Level=cltmRslt_PsdFrequencyLevel_Level, cltmRslt_LoopResistanceLength2=cltmRslt_LoopResistanceLength2, cltmRslt_ImpulseNoiseReadHighThreshold=cltmRslt_ImpulseNoiseReadHighThreshold, cltmRslt_DcDeltaVoltageTS=cltmRslt_DcDeltaVoltageTS, cltmRslt_BridgeTapTable_Index1_o=cltmRslt_BridgeTapTable_Index1_o, cltmRslt_TdrManualSampleCount=cltmRslt_TdrManualSampleCount, cltmRslt_LoopResistanceLength1=cltmRslt_LoopResistanceLength1, cltmRslt_DcDeltaResistanceTR=cltmRslt_DcDeltaResistanceTR, cltmRslt_TestResultSequence=cltmRslt_TestResultSequence, cltmRslt_PsdFrequencyLevel_Index1_o=cltmRslt_PsdFrequencyLevel_Index1_o, cltmRslt_RcvToneFrequency=cltmRslt_RcvToneFrequency, cltmRslt_DmmAllTR=cltmRslt_DmmAllTR, mibcltmRslt_PsdFrequencyLevelTable=mibcltmRslt_PsdFrequencyLevelTable, cltmRslt_Index_o=cltmRslt_Index_o, mibcltmRsltTable=mibcltmRsltTable, cltmRslt_HardwareRevision=cltmRslt_HardwareRevision, cltmRslt_CltmSlot=cltmRslt_CltmSlot, mibcltmRslt_BridgeTapTableEntry=mibcltmRslt_BridgeTapTableEntry, cltmRslt_TestResultTimeStamp=cltmRslt_TestResultTimeStamp, cltmRslt_TdrDistanceLevel_Level=cltmRslt_TdrDistanceLevel_Level, cltmRslt_Ringer=cltmRslt_Ringer, mibcltmRslt_BridgeTapTableTable=mibcltmRslt_BridgeTapTableTable, cltmRslt_DmmAllTS=cltmRslt_DmmAllTS, cltmRslt_ImpulseNoiseReadMidThreshold=cltmRslt_ImpulseNoiseReadMidThreshold, cltmRslt_CapEquivalentTS=cltmRslt_CapEquivalentTS, cltmRslt_BridgeTapTable_Length=cltmRslt_BridgeTapTable_Length, cltmRslt_ShortLocation=cltmRslt_ShortLocation, mibcltmRslt_PsdFrequencyLevelEntry=mibcltmRslt_PsdFrequencyLevelEntry, cltmRslt_CapEquivalentTR=cltmRslt_CapEquivalentTR, cltmRslt_DmmAllRS=cltmRslt_DmmAllRS, cltmRslt_BridgeTapTable_Confidence=cltmRslt_BridgeTapTable_Confidence, mibcltmRsltEntry=mibcltmRsltEntry, mibcltmRslt=mibcltmRslt, cltmRslt_VoiceDetection=cltmRslt_VoiceDetection, cltmRslt_TdrDistanceLevel_Index_o=cltmRslt_TdrDistanceLevel_Index_o, cltmRslt_PsdFrequencyLevel_Index_o=cltmRslt_PsdFrequencyLevel_Index_o, cltmRslt_TdrAutomaticFaultDistance=cltmRslt_TdrAutomaticFaultDistance, cltmRslt_LoopResistanceLength3=cltmRslt_LoopResistanceLength3, cltmRslt_TdrDistanceLevel_Distance=cltmRslt_TdrDistanceLevel_Distance, cltmRslt_SofwareRevision=cltmRslt_SofwareRevision, DisplayString=DisplayString, cltmRslt_ImpulseNoiseReadLowThreshold=cltmRslt_ImpulseNoiseReadLowThreshold, cltmRslt_TestResultStatus=cltmRslt_TestResultStatus, cltmRslt_AtuR=cltmRslt_AtuR, cltmRslt_PsdFrequencyLevel_Frequency=cltmRslt_PsdFrequencyLevel_Frequency, cltmRslt_BridgeTapLength=cltmRslt_BridgeTapLength, cltmRslt_Action_o=cltmRslt_Action_o, cltmRslt_DcDeltaResistanceTS=cltmRslt_DcDeltaResistanceTS, cltmRslt_CapEquivalentRS=cltmRslt_CapEquivalentRS, cltmRslt_DmmResult=cltmRslt_DmmResult, cltmRslt_BridgeTapNumber=cltmRslt_BridgeTapNumber, cltmRslt_BridgeTapTable_Index_o=cltmRslt_BridgeTapTable_Index_o, cltmRslt_BridgeTapTable_Distance=cltmRslt_BridgeTapTable_Distance, mibcltmRslt_TdrDistanceLevelEntry=mibcltmRslt_TdrDistanceLevelEntry, cltmRslt_DcDeltaVoltageRS=cltmRslt_DcDeltaVoltageRS, mibcltmRslt_TdrDistanceLevelTable=mibcltmRslt_TdrDistanceLevelTable, cltmRslt_TdrDistanceLevel_Index1_o=cltmRslt_TdrDistanceLevel_Index1_o, cltmRslt_FirstCoilLocation=cltmRslt_FirstCoilLocation, cltmRslt_DcDeltaResistanceRS=cltmRslt_DcDeltaResistanceRS, cltmRslt_RcvToneLevel=cltmRslt_RcvToneLevel)
