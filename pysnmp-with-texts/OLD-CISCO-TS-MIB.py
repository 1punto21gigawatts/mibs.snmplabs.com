#
# PySNMP MIB module OLD-CISCO-TS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OLD-CISCO-TS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:24:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
local, = mibBuilder.importSymbols("CISCO-SMI", "local")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, iso, Gauge32, ModuleIdentity, Counter64, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Unsigned32, Integer32, Bits, NotificationType, Counter32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "iso", "Gauge32", "ModuleIdentity", "Counter64", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Unsigned32", "Integer32", "Bits", "NotificationType", "Counter32", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
lts = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 2, 9))
tsLines = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLines.setStatus('mandatory')
if mibBuilder.loadTexts: tsLines.setDescription('Number of terminal lines on this device. Includes virtual lines.')
ltsLineTable = MibTable((1, 3, 6, 1, 4, 1, 9, 2, 9, 2), )
if mibBuilder.loadTexts: ltsLineTable.setStatus('mandatory')
if mibBuilder.loadTexts: ltsLineTable.setDescription('A list of terminal server line entries.')
ltsLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1), ).setIndexNames((0, "OLD-CISCO-TS-MIB", "tsLineNumber"))
if mibBuilder.loadTexts: ltsLineEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ltsLineEntry.setDescription('A collection of per TTY objects in the cisco Terminal Server implementation.')
tsLineActive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineActive.setStatus('mandatory')
if mibBuilder.loadTexts: tsLineActive.setDescription('Boolean whether this line is active or not.')
tsLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("console", 2), ("terminal", 3), ("line-printer", 4), ("virtual-terminal", 5), ("auxiliary", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineType.setStatus('mandatory')
if mibBuilder.loadTexts: tsLineType.setDescription('Type of line.')
tsLineAutobaud = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineAutobaud.setStatus('mandatory')
if mibBuilder.loadTexts: tsLineAutobaud.setDescription('Boolean whether line will autobaud or not.')
tsLineSpeedin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineSpeedin.setStatus('mandatory')
if mibBuilder.loadTexts: tsLineSpeedin.setDescription('What input speed the line is running at.')
tsLineSpeedout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineSpeedout.setStatus('mandatory')
if mibBuilder.loadTexts: tsLineSpeedout.setDescription('What output speed the line is running at.')
tsLineFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("none", 2), ("software-input", 3), ("software-output", 4), ("software-both", 5), ("hardware-input", 6), ("hardware-output", 7), ("hardware-both", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineFlow.setStatus('mandatory')
if mibBuilder.loadTexts: tsLineFlow.setDescription('What kind of flow control the line is using.')
tsLineModem = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("none", 2), ("call-in", 3), ("call-out", 4), ("cts-required", 5), ("ri-is-cd", 6), ("inout", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineModem.setStatus('mandatory')
if mibBuilder.loadTexts: tsLineModem.setDescription('What kind of modem control the line is using.')
tsLineLoc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineLoc.setStatus('mandatory')
if mibBuilder.loadTexts: tsLineLoc.setDescription("Describes the line's physical location.")
tsLineTerm = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineTerm.setStatus('mandatory')
if mibBuilder.loadTexts: tsLineTerm.setDescription("Describes the line's terminal type.")
tsLineScrlen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineScrlen.setStatus('mandatory')
if mibBuilder.loadTexts: tsLineScrlen.setDescription('Length in lines of the screen of terminal attached to this line.')
tsLineScrwid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineScrwid.setStatus('mandatory')
if mibBuilder.loadTexts: tsLineScrwid.setDescription('Width in characters of the screen of terminal attached to this line.')
tsLineEsc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineEsc.setStatus('mandatory')
if mibBuilder.loadTexts: tsLineEsc.setDescription('Escape character used to break out of active sessions.')
tsLineTmo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineTmo.setStatus('mandatory')
if mibBuilder.loadTexts: tsLineTmo.setDescription('Line idleness timeout in seconds.')
tsLineSestmo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineSestmo.setStatus('mandatory')
if mibBuilder.loadTexts: tsLineSestmo.setDescription('Session idleness timeout in seconds.')
tsLineRotary = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineRotary.setStatus('mandatory')
if mibBuilder.loadTexts: tsLineRotary.setDescription('Rotary group number the line belongs in.')
tsLineUses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineUses.setStatus('mandatory')
if mibBuilder.loadTexts: tsLineUses.setDescription('Number of times a connection has been made to or from this line.')
tsLineNses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineNses.setStatus('mandatory')
if mibBuilder.loadTexts: tsLineNses.setDescription('Current number of sessions in use on this line.')
tsLineUser = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineUser.setStatus('mandatory')
if mibBuilder.loadTexts: tsLineUser.setDescription('TACACS user name, if TACACS enabled, of user on this line.')
tsLineNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineNoise.setStatus('mandatory')
if mibBuilder.loadTexts: tsLineNoise.setDescription('Count of garbage characters received when line inactive.')
tsLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: tsLineNumber.setDescription("The line i've been talking about.")
tsLineTimeActive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tsLineTimeActive.setStatus('mandatory')
if mibBuilder.loadTexts: tsLineTimeActive.setDescription('The time in seconds since line was activated.')
ltsLineSessionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 2, 9, 3), )
if mibBuilder.loadTexts: ltsLineSessionTable.setStatus('mandatory')
if mibBuilder.loadTexts: ltsLineSessionTable.setDescription('A list of terminal server line and session entries.')
ltsLineSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 2, 9, 3, 1), ).setIndexNames((0, "OLD-CISCO-TS-MIB", "tslineSesLine"), (0, "OLD-CISCO-TS-MIB", "tslineSesSession"))
if mibBuilder.loadTexts: ltsLineSessionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ltsLineSessionEntry.setDescription('A collection of per session and per TTY objects in the cisco Terminal Server implementation.')
tslineSesType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("unknown", 1), ("pad", 2), ("stream", 3), ("rlogin", 4), ("telnet", 5), ("tcp", 6), ("lat", 7), ("mop", 8), ("slip", 9), ("xremote", 10), ("rshell", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tslineSesType.setStatus('mandatory')
if mibBuilder.loadTexts: tslineSesType.setDescription('Type of session.')
tslineSesDir = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("incoming", 2), ("outgoing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tslineSesDir.setStatus('mandatory')
if mibBuilder.loadTexts: tslineSesDir.setDescription('Direction of session.')
tslineSesAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tslineSesAddr.setStatus('mandatory')
if mibBuilder.loadTexts: tslineSesAddr.setDescription('Remote host address of session. [What about PAD connections?]')
tslineSesName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tslineSesName.setStatus('mandatory')
if mibBuilder.loadTexts: tslineSesName.setDescription('Remote host name of session.')
tslineSesCur = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tslineSesCur.setStatus('mandatory')
if mibBuilder.loadTexts: tslineSesCur.setDescription('Boolean whether session is the currently active one.')
tslineSesIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tslineSesIdle.setStatus('mandatory')
if mibBuilder.loadTexts: tslineSesIdle.setDescription('Time in seconds session has been idle.')
tslineSesLine = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tslineSesLine.setStatus('mandatory')
if mibBuilder.loadTexts: tslineSesLine.setDescription('Table index 1.')
tslineSesSession = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 9, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tslineSesSession.setStatus('mandatory')
if mibBuilder.loadTexts: tslineSesSession.setDescription('Table index 2.')
tsMsgTtyLine = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 9, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsMsgTtyLine.setStatus('mandatory')
if mibBuilder.loadTexts: tsMsgTtyLine.setDescription('tty line to send the message to. -1 will send it to all tty lines')
tsMsgIntervaltim = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 9, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsMsgIntervaltim.setStatus('mandatory')
if mibBuilder.loadTexts: tsMsgIntervaltim.setDescription('Interval between reissuing message in milliseconds. Minimum non-zero setting is 10000. 0 will cause the routine to choose its own intervals becoming more frequent as MessageDuration gets close to expiring. 2hr, 1hr, 30min, 5min, 1min')
tsMsgDuration = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 9, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsMsgDuration.setStatus('mandatory')
if mibBuilder.loadTexts: tsMsgDuration.setDescription('Length of time to reissue message in milliseconds. Minimum non-zero setting is 10000. A setting of 0 will not repeat the message.')
tsMsgText = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 9, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsMsgText.setStatus('mandatory')
if mibBuilder.loadTexts: tsMsgText.setDescription('Up to 256 characters that will make up the message')
tsMsgTmpBanner = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 9, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("additive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsMsgTmpBanner.setStatus('mandatory')
if mibBuilder.loadTexts: tsMsgTmpBanner.setDescription('Should the message be used as a temporary banner. 1 - No. 2 - In addition to the normal banner')
tsMsgSend = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("nothing", 1), ("reload", 2), ("messagedone", 3), ("abort", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsMsgSend.setStatus('mandatory')
if mibBuilder.loadTexts: tsMsgSend.setDescription('Sends the message. The value determines what to do after the message has completed.')
tsClrTtyLine = MibScalar((1, 3, 6, 1, 4, 1, 9, 2, 9, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tsClrTtyLine.setStatus('mandatory')
if mibBuilder.loadTexts: tsClrTtyLine.setDescription('tty line to clear. Read returns the last line cleared. A value of -1 indicates no lines have been cleared.')
mibBuilder.exportSymbols("OLD-CISCO-TS-MIB", tsLineAutobaud=tsLineAutobaud, tslineSesCur=tslineSesCur, lts=lts, tsLineTmo=tsLineTmo, ltsLineSessionEntry=ltsLineSessionEntry, tslineSesDir=tslineSesDir, tsLineSestmo=tsLineSestmo, tsLineRotary=tsLineRotary, tsMsgSend=tsMsgSend, tslineSesAddr=tslineSesAddr, tsLineLoc=tsLineLoc, tsLineUses=tsLineUses, tslineSesIdle=tslineSesIdle, tsLineNumber=tsLineNumber, tsLineEsc=tsLineEsc, tsMsgDuration=tsMsgDuration, tsLineNses=tsLineNses, tsLineScrwid=tsLineScrwid, ltsLineEntry=ltsLineEntry, tsLineFlow=tsLineFlow, tsLineActive=tsLineActive, tslineSesLine=tslineSesLine, tsClrTtyLine=tsClrTtyLine, tsLineTerm=tsLineTerm, ltsLineTable=ltsLineTable, tsLineSpeedin=tsLineSpeedin, tsMsgTtyLine=tsMsgTtyLine, tsLines=tsLines, tsLineModem=tsLineModem, tsLineSpeedout=tsLineSpeedout, ltsLineSessionTable=ltsLineSessionTable, tslineSesName=tslineSesName, tsMsgText=tsMsgText, tslineSesType=tslineSesType, tslineSesSession=tslineSesSession, tsMsgTmpBanner=tsMsgTmpBanner, tsMsgIntervaltim=tsMsgIntervaltim, tsLineScrlen=tsLineScrlen, tsLineNoise=tsLineNoise, tsLineTimeActive=tsLineTimeActive, tsLineUser=tsLineUser, tsLineType=tsLineType)
