#
# PySNMP MIB module HUAWEI-IF-QOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-IF-QOS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:45:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, ObjectIdentity, NotificationType, Integer32, ModuleIdentity, Gauge32, IpAddress, TimeTicks, iso, MibIdentifier, Bits, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ObjectIdentity", "NotificationType", "Integer32", "ModuleIdentity", "Gauge32", "IpAddress", "TimeTicks", "iso", "MibIdentifier", "Bits", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
hwIfQoSMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2))
if mibBuilder.loadTexts: hwIfQoSMib.setLastUpdated('200409150000Z')
if mibBuilder.loadTexts: hwIfQoSMib.setOrganization('Huawei Technologies co.,Ltd.')
if mibBuilder.loadTexts: hwIfQoSMib.setContactInfo(' R&D BeiJing, Huawei Technologies co.,Ltd. Huawei Bld.,NO.3 Xinxi Rd., Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China Zip:100085 Http://www.huawei.com E-mail:support@huawei.com ')
if mibBuilder.loadTexts: hwIfQoSMib.setDescription('The HUAWEI-IF-QOS-MIB contains objects to apply on interface for congestion management. ')
hwQoS = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32))
qosFIFOTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 1), )
if mibBuilder.loadTexts: qosFIFOTable.setStatus('mandatory')
if mibBuilder.loadTexts: qosFIFOTable.setDescription("FIFO(First In First Out) queuing table. FIFO is a kind of queuing strategy applied on interface for congestion management. And It's the default queuing strategy when other queuing strategy not configured on interface. This table is about the FIFO configuration and running infomation.")
qosFIFOEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 1, 1), ).setIndexNames((0, "HUAWEI-IF-QOS-MIB", "qosFIFOIfIndex"))
if mibBuilder.loadTexts: qosFIFOEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qosFIFOEntry.setDescription('FIFO configuration and running information Command:qos fifo queue-length')
qosFIFOIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosFIFOIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qosFIFOIfIndex.setDescription('The index of interface applying FIFO queuing strategy. The interface identified by the value of this index is the same interface as identified by the same value of ifIndex.')
qosFIFOIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosFIFOIfName.setStatus('mandatory')
if mibBuilder.loadTexts: qosFIFOIfName.setDescription("The description of interface identified by the value of qosFIFOIfIndex. It's a textual string containing information about the interface type and the interface number.")
qosFIFOMaxQueueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosFIFOMaxQueueLen.setStatus('mandatory')
if mibBuilder.loadTexts: qosFIFOMaxQueueLen.setDescription('The maximum length of fifo queue which means the maximum count of packets that can be cached in the fifo queue.')
qosFIFOCurQueueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosFIFOCurQueueLen.setStatus('mandatory')
if mibBuilder.loadTexts: qosFIFOCurQueueLen.setDescription('The current length of queue which means the count of packets cached in the fifo queue when the interface is congesting.')
qosFIFODiscardPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosFIFODiscardPkt.setStatus('mandatory')
if mibBuilder.loadTexts: qosFIFODiscardPkt.setDescription("The count of discarded packets which can't be enqueued fifo queue because the fifo queue is full.")
qosUndoFIFO = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("qosFIFO", 0), ("qosNoFIFO", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosUndoFIFO.setStatus('mandatory')
if mibBuilder.loadTexts: qosUndoFIFO.setDescription('0: Only for get. 1: Set default value of the maximum length of fifo queue.')
qosPqlDefaultTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 2), )
if mibBuilder.loadTexts: qosPqlDefaultTable.setStatus('mandatory')
if mibBuilder.loadTexts: qosPqlDefaultTable.setDescription('PQL(Priority Queue List) default-queue table. There are four priority queues:top,middle,normal,bottom. The priority level of these queues is from high to low. A type of priority queue is assigned for those packets that do not match any other rule in each PQL whose number is from 1 to 16. Such queue is the default queue. For each PQL the default queue may be different. The default queue is normal if other type of queue is not configured.')
qosPqlDefaultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 2, 1), ).setIndexNames((0, "HUAWEI-IF-QOS-MIB", "qosPqlDefaultListNum"))
if mibBuilder.loadTexts: qosPqlDefaultEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qosPqlDefaultEntry.setDescription('PQL default-queue configuration information. Command:qos pql group-number default-queue { top | middle | normal | bottom }')
qosPqlDefaultListNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPqlDefaultListNum.setStatus('mandatory')
if mibBuilder.loadTexts: qosPqlDefaultListNum.setDescription('The index of table, which is the PQL number. Any number from 1 to 16 identifies the priority queue list.')
qosPqlDefaultQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("top", 0), ("middle", 1), ("normal", 2), ("bottom", 3))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPqlDefaultQueueType.setStatus('mandatory')
if mibBuilder.loadTexts: qosPqlDefaultQueueType.setDescription('The type of default priority queue,the default value is normal.')
qosUndoPqlDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("qosPqlDefault", 0), ("qosNoPqlDefault", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosUndoPqlDefault.setStatus('mandatory')
if mibBuilder.loadTexts: qosUndoPqlDefault.setDescription('0: Only for get. 1: Set default value of the defualt priority queue.')
qosPqlQueueLenTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 3), )
if mibBuilder.loadTexts: qosPqlQueueLenTable.setStatus('mandatory')
if mibBuilder.loadTexts: qosPqlQueueLenTable.setDescription('PQL(Priority Queue List) queue-length table There are four priority queues:top,middle,normal,bottom. The priority level of these queues is from high to low. The maximum queue length of each queue can be configured in each PQL whose number is from 1 to 16. Each priority queue has individual default maximum queue length.')
qosPqlQueueLenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 3, 1), ).setIndexNames((0, "HUAWEI-IF-QOS-MIB", "qosPqlQueLenListNum"), (0, "HUAWEI-IF-QOS-MIB", "qosPqlQueLenQueueType"))
if mibBuilder.loadTexts: qosPqlQueueLenEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qosPqlQueueLenEntry.setDescription('PQL queue-length configuration information. Command:qos pql pql-index queue { top | middle | normal | bottom } queue-length queue-length')
qosPqlQueLenListNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPqlQueLenListNum.setStatus('mandatory')
if mibBuilder.loadTexts: qosPqlQueLenListNum.setDescription('The index of table, which is the PQL number. Any number from 1 to 16 identifies the priority queue list.')
qosPqlQueLenQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("top", 0), ("middle", 1), ("normal", 2), ("bottom", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPqlQueLenQueueType.setStatus('mandatory')
if mibBuilder.loadTexts: qosPqlQueLenQueueType.setDescription('The index of table, which is the type of priority queue.')
qosPqlQueLenValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPqlQueLenValue.setStatus('mandatory')
if mibBuilder.loadTexts: qosPqlQueLenValue.setDescription('The maximum length of specified queue. Each priority queue has individual default maximum queue length: Top : 20 Middle: 40 Normal: 60 Bottom: 80')
qosUndoPqlQueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("qosPqlQueLen", 0), ("qosNoPqlQueLen", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosUndoPqlQueLen.setStatus('mandatory')
if mibBuilder.loadTexts: qosUndoPqlQueLen.setDescription('0: Only for get. 1: Set default value of the maximum length of specified queue.')
qosPqlIfTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 4), )
if mibBuilder.loadTexts: qosPqlIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: qosPqlIfTable.setDescription('PQL(Priority Queue List) inbound-interface table There are four priority queues:top,middle,normal,bottom. The priority level of these queues is from high to low. The packets received from the specified interface can be configured to enqueue specified priority queue in each PQL whose number is from 1 to 16.')
qosPqlIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 4, 1), ).setIndexNames((0, "HUAWEI-IF-QOS-MIB", "qosPqlIfListNum"), (0, "HUAWEI-IF-QOS-MIB", "qosPqlIfIndex"))
if mibBuilder.loadTexts: qosPqlIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qosPqlIfEntry.setDescription('PQL inbound-interface configuration information. Command:qos pql pql-index inbound-interface interface-type interface-number queue { top | middle | normal | bottom }')
qosPqlIfListNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPqlIfListNum.setStatus('mandatory')
if mibBuilder.loadTexts: qosPqlIfListNum.setDescription('The index of table, which is the PQL number. Any number from 1 to 16 identifies the priority queue list.')
qosPqlIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPqlIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qosPqlIfIndex.setDescription('The index of table, which is the index of interface that the enqueuing packets are received from. The interface identified by the value of this index is the same interface as identified by the same value of ifIndex.')
qosPqlIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 4, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPqlIfName.setStatus('mandatory')
if mibBuilder.loadTexts: qosPqlIfName.setDescription("The description of interface identified by the value of qosPqlIfIndex. It's a textual string containing information about the interface type and the interface number.")
qosPqlIfQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("top", 0), ("middle", 1), ("normal", 2), ("bottom", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPqlIfQueueType.setStatus('mandatory')
if mibBuilder.loadTexts: qosPqlIfQueueType.setDescription('The type of priority queue which the packets received from the specified interface will be put in.')
qosUndoPqlIf = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("qosPqlIF", 0), ("qosNoPqlIF", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosUndoPqlIf.setStatus('mandatory')
if mibBuilder.loadTexts: qosUndoPqlIf.setDescription('0: Only for get. 1: delete the corresponding inbound-interface rule of the specified PQL number')
qosPqlProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 5), )
if mibBuilder.loadTexts: qosPqlProtocolTable.setStatus('mandatory')
if mibBuilder.loadTexts: qosPqlProtocolTable.setDescription('PQL(Priority Queue List) protocol table There are four priority queues:top,middle,normal,bottom. The priority level of these queues is from high to low. The packets which belong to the specified protocol type and match the specified traffic-classifying rule can be configured to enqueue specified priority queue in each PQL whose number is from 1 to 16.')
qosPqlProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 5, 1), ).setIndexNames((0, "HUAWEI-IF-QOS-MIB", "qosPqlProListNum"), (0, "HUAWEI-IF-QOS-MIB", "qosPqlProName"), (0, "HUAWEI-IF-QOS-MIB", "qosPqlProQueKey"), (0, "HUAWEI-IF-QOS-MIB", "qosPqlProQueKeyValue"))
if mibBuilder.loadTexts: qosPqlProtocolEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qosPqlProtocolEntry.setDescription('PQL protocol configuration information. Command:qos pql pql-index protocol protocol-name queue-key key-value queue { top | middle | normal | bottom }')
qosPqlProListNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPqlProListNum.setStatus('mandatory')
if mibBuilder.loadTexts: qosPqlProListNum.setDescription('The index of table, which is the PQL number. Any number from 1 to 16 identifies the priority queue list.')
qosPqlProName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ip", 1), ("mpls", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPqlProName.setStatus('mandatory')
if mibBuilder.loadTexts: qosPqlProName.setDescription('The index of table, which is the protocol type the enqueuing packets having.')
qosPqlProQueKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("null", 1), ("fragment", 2), ("acl", 3), ("less-than", 4), ("greater-than", 5), ("tcp", 6), ("udp", 7), ("exp-mask", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPqlProQueKey.setStatus('mandatory')
if mibBuilder.loadTexts: qosPqlProQueKey.setDescription('The index of table, which is the key words of traffic-classify rule.')
qosPqlProQueKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPqlProQueKeyValue.setStatus('mandatory')
if mibBuilder.loadTexts: qosPqlProQueKeyValue.setDescription('The index of table, which is the value of key words. for greater-than,less-than,tcp,udp:0~65535 for acl:2000~3999 for NULL and fragment: 0 for exp-mask: 0~255')
qosPqlProQueType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("top", 0), ("middle", 1), ("normal", 2), ("bottom", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPqlProQueType.setStatus('mandatory')
if mibBuilder.loadTexts: qosPqlProQueType.setDescription('The type of priority queue which the packets belong to the specified protocol type and match the specified traffic-classifying rule will be put in.')
qosUndoPqlProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("qosPqlProtocol", 0), ("qosNoPqlProtocol", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosUndoPqlProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: qosUndoPqlProtocol.setDescription('0: Only for get. 1: delete the corresponding protocol rule of the specified PQL number')
qosPQTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 6), )
if mibBuilder.loadTexts: qosPQTable.setStatus('mandatory')
if mibBuilder.loadTexts: qosPQTable.setDescription('PQ(Priority Queuing) table PQ is a kind of queuing strategy applied on interface for congestion management. PQ provides a mechanism to prioritize packets sent on an interface. If the specified priority list is applied to an interface the Priority Queuing strategy is applied on this interface. Only one list can be assigned per interface. This table is about the PQ configuration and running infomation.')
qosPQEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 6, 1), ).setIndexNames((0, "HUAWEI-IF-QOS-MIB", "qosPQIfIndex"))
if mibBuilder.loadTexts: qosPQEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qosPQEntry.setDescription('PQ configuration and running infomation Command:qos pq pql display qos pq interface')
qosPQIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPQIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qosPQIfIndex.setDescription('The index of table, which is the index of interface applying Priority Queuing strategy. The interface identified by the value of this index is the same interface as identified by the same value of ifIndex.')
qosPQListNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosPQListNum.setStatus('mandatory')
if mibBuilder.loadTexts: qosPQListNum.setDescription('The number of PQL applied to an interface identified by the value of qosPQIfIndex.')
qosPQIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 6, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPQIfName.setStatus('mandatory')
if mibBuilder.loadTexts: qosPQIfName.setDescription("The description of the interface by the value of qosPQIfIndex. It's a textual string containing information about the interface type and the interface number.")
qosPQTopPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPQTopPkt.setStatus('mandatory')
if mibBuilder.loadTexts: qosPQTopPkt.setDescription('The count of packets enqueued the top priority queue when congestion occoured in the interface.')
qosPQTopDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPQTopDiscard.setStatus('mandatory')
if mibBuilder.loadTexts: qosPQTopDiscard.setDescription("The count of discarded packets which can't be enqueued top priority queue because the top priority queue is full.")
qosPQTopMaxQueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPQTopMaxQueLen.setStatus('mandatory')
if mibBuilder.loadTexts: qosPQTopMaxQueLen.setDescription('The maximum length of top priority queue. The default value of maximum queue length is 20.')
qosPQMiddlePkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPQMiddlePkt.setStatus('mandatory')
if mibBuilder.loadTexts: qosPQMiddlePkt.setDescription('The count of packets enqueued the middle priority queue when congestion occoured in the interface.')
qosPQMiddleDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPQMiddleDiscard.setStatus('mandatory')
if mibBuilder.loadTexts: qosPQMiddleDiscard.setDescription("The count of discarded packets which can't be enqueued middle priority queue because the middle priority queue is full.")
qosPQMiddleMaxQueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPQMiddleMaxQueLen.setStatus('mandatory')
if mibBuilder.loadTexts: qosPQMiddleMaxQueLen.setDescription('The maximum length of middle priority queue. The default value of maximum queue length is 40.')
qosPQNormalPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPQNormalPkt.setStatus('mandatory')
if mibBuilder.loadTexts: qosPQNormalPkt.setDescription('The count of packets enqueued the normal priority queue when congestion occoured in the interface.')
qosPQNormalDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPQNormalDiscard.setStatus('mandatory')
if mibBuilder.loadTexts: qosPQNormalDiscard.setDescription("The count of discarded packets which can't be enqueued normal priority queue because the normal priority queue is full.")
qosPQNormalMaxQueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPQNormalMaxQueLen.setStatus('mandatory')
if mibBuilder.loadTexts: qosPQNormalMaxQueLen.setDescription('The maximum length of normal priority queue. The default value of maximum queue length is 60.')
qosPQBottomPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 6, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPQBottomPkt.setStatus('mandatory')
if mibBuilder.loadTexts: qosPQBottomPkt.setDescription('The count of packets enqueued the bottom priority queue when congestion occoured in the interface.')
qosPQBottomDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPQBottomDiscard.setStatus('mandatory')
if mibBuilder.loadTexts: qosPQBottomDiscard.setDescription("The count of discarded packets which can't be enqueued bottom priority queue because the bottom priority queue is full.")
qosPQBottomMaxQueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 6, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPQBottomMaxQueLen.setStatus('mandatory')
if mibBuilder.loadTexts: qosPQBottomMaxQueLen.setDescription('The maximum length of bottom priority queue. The default value of maximum queue length is 80.')
qosUndoPQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("qosPQ", 0), ("qosNoPQ", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosUndoPQ.setStatus('mandatory')
if mibBuilder.loadTexts: qosUndoPQ.setDescription('0:Only for get. 1:Set the default queuing on interface: FIFO.')
qosCqlDefaultTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 7), )
if mibBuilder.loadTexts: qosCqlDefaultTable.setStatus('mandatory')
if mibBuilder.loadTexts: qosCqlDefaultTable.setDescription('CQL(Custom Queue List) default-queue table. There are sixteen custom queues whose queue number is from 1 to 16. A custom queue is assigned for those packets that do not match any other rule in each CQL whose number is from 1 to 16. Such queue is the default queue. For each CQL the default queue may be different. The default queue is queue number 1 if other queue is not configured.')
qosCqlDefaultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 7, 1), ).setIndexNames((0, "HUAWEI-IF-QOS-MIB", "qosCqlListNum"))
if mibBuilder.loadTexts: qosCqlDefaultEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qosCqlDefaultEntry.setDescription('CQL default-queue configuration information. Command:qos cql group-number default-queue queue-number')
qosCqlListNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCqlListNum.setStatus('mandatory')
if mibBuilder.loadTexts: qosCqlListNum.setDescription('The index of table, which is the CQL number. Any number from 1 to 16 identifies the custom queue list.')
qosCqlQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosCqlQueueNum.setStatus('mandatory')
if mibBuilder.loadTexts: qosCqlQueueNum.setDescription('The number of default custom queue,the default value is queue number 1.')
qosUndoCqlDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("qosCqlDefault", 0), ("qosNoCqlDefault", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosUndoCqlDefault.setStatus('mandatory')
if mibBuilder.loadTexts: qosUndoCqlDefault.setDescription('0: Only for get. 1: Set default value of the defualt custom queue.')
qosCqlIfTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 8), )
if mibBuilder.loadTexts: qosCqlIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: qosCqlIfTable.setDescription('CQL(Custom Queue List) inbound-interface table There are sixteen custom queues whose queue number is from 1 to 16. The packets received from the specified interface can be configured to enqueue specified custom queue in each CQL whose number is from 1 to 16.')
qosCqlIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 8, 1), ).setIndexNames((0, "HUAWEI-IF-QOS-MIB", "qosCqlIfListNum"), (0, "HUAWEI-IF-QOS-MIB", "qosCqlIfIndex"))
if mibBuilder.loadTexts: qosCqlIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qosCqlIfEntry.setDescription('CQL inbound-interface configuration information. Command:qos cql cql-index inbound-interface interface-type interface-number queue queue-number')
qosCqlIfListNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCqlIfListNum.setStatus('mandatory')
if mibBuilder.loadTexts: qosCqlIfListNum.setDescription('The index of table, which is the CQL number. Any number from 1 to 16 identifies the custom queue list.')
qosCqlIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCqlIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qosCqlIfIndex.setDescription('The index of table, which is the index of interface that the enqueuing packets are received from. The interface identified by the value of this index is the same interface as identified by the same value of ifIndex.')
qosCqlIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 8, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCqlIfName.setStatus('mandatory')
if mibBuilder.loadTexts: qosCqlIfName.setDescription("The description of interface identified by the value of qosCqlIfIndex. It's a textual string containing information about the interface type and the interface number.")
qosCqlIfQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosCqlIfQueueNum.setStatus('mandatory')
if mibBuilder.loadTexts: qosCqlIfQueueNum.setDescription('The number of custom queue which the packets received from the specified interface will be put in.')
qosUndoCqlIf = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("qosCqlIf", 0), ("qosNoCqlIf", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosUndoCqlIf.setStatus('mandatory')
if mibBuilder.loadTexts: qosUndoCqlIf.setDescription('0: Only for get. 1: delete the corresponding inbound-interface rule of the specified CQL number')
qosCqlProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 9), )
if mibBuilder.loadTexts: qosCqlProtocolTable.setStatus('mandatory')
if mibBuilder.loadTexts: qosCqlProtocolTable.setDescription('CQL(Custom Queue List) protocol table. There are sixteen custom queues whose queue number is from 1 to 16. The packets which belong to the specified protocol type and match the specified traffic-classifying rule can be configured to enqueue specified custom queue in each CQL whose number is from 1 to 16.')
qosCqlProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 9, 1), ).setIndexNames((0, "HUAWEI-IF-QOS-MIB", "qosCqlProListNum"), (0, "HUAWEI-IF-QOS-MIB", "qosCqlProName"), (0, "HUAWEI-IF-QOS-MIB", "qosCqlProQueKey"), (0, "HUAWEI-IF-QOS-MIB", "qosCqlProQueKeyValue"))
if mibBuilder.loadTexts: qosCqlProtocolEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qosCqlProtocolEntry.setDescription('CQL protocol configuration information. Command:qos cql cql-index protocol protocol-name queue-key key-value queue queue-number.')
qosCqlProListNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCqlProListNum.setStatus('mandatory')
if mibBuilder.loadTexts: qosCqlProListNum.setDescription('The index of table, which is the CQL number. Any number from 1 to 16 identifies the custom queue list.')
qosCqlProName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ip", 1), ("mpls", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCqlProName.setStatus('mandatory')
if mibBuilder.loadTexts: qosCqlProName.setDescription('The index of table, which is the protocol type the enqueuing packets having.')
qosCqlProQueKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("null", 1), ("fragment", 2), ("acl", 3), ("less-than", 4), ("greater-than", 5), ("tcp", 6), ("udp", 7), ("exp-mask", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCqlProQueKey.setStatus('mandatory')
if mibBuilder.loadTexts: qosCqlProQueKey.setDescription('The index of table, which is the key words of traffic-classify rule.')
qosCqlProQueKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCqlProQueKeyValue.setStatus('mandatory')
if mibBuilder.loadTexts: qosCqlProQueKeyValue.setDescription('The index of table, which is the value of key words. for greater-than,less-than,tcp,udp:0~65535 for acl:2000~3999 for NULL and fragment: null for exp-mask: 0~255 ')
qosCqlProQueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosCqlProQueNum.setStatus('mandatory')
if mibBuilder.loadTexts: qosCqlProQueNum.setDescription('The number of custom queue which the packets belong to the specified protocol type and match the specified traffic-classifying rule will be put in.')
qosUndoCqlProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("qosCqlProtocol", 0), ("qosNoCqlProtocol", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosUndoCqlProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: qosUndoCqlProtocol.setDescription('0: Only for get. 1: delete the corresponding protocol rule of the specified CQL number')
qosCqlQueParaTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 10), )
if mibBuilder.loadTexts: qosCqlQueParaTable.setStatus('mandatory')
if mibBuilder.loadTexts: qosCqlQueParaTable.setDescription('CQL(Custom Queue List) serving/queue-length table There are sixteen custom queues whose queue number is from 1 to 16. The maximum queue length of each queue and serving can be configured in each CQL whose number is from 1 to 16. Each custom queue has individual default maximum queue length and serving.')
qosCqlQueParaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 10, 1), ).setIndexNames((0, "HUAWEI-IF-QOS-MIB", "qosCqlQueParaListNum"), (0, "HUAWEI-IF-QOS-MIB", "qosCqlQueParaQueNum"))
if mibBuilder.loadTexts: qosCqlQueParaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qosCqlQueParaEntry.setDescription('CQL serving/queue-length configuration information. Command:qos cql cql-index queue queue-number serving byte-number qos cql cql-index queue queue-number queue-length queue-length')
qosCqlQueParaListNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCqlQueParaListNum.setStatus('mandatory')
if mibBuilder.loadTexts: qosCqlQueParaListNum.setDescription('The index of table, which is the CQL number. Any number from 1 to 16 identifies the custom queue list.')
qosCqlQueParaQueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCqlQueParaQueNum.setStatus('mandatory')
if mibBuilder.loadTexts: qosCqlQueParaQueNum.setDescription('The index of table, which is the queue number.')
qosCqlQueParaServing = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215)).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosCqlQueParaServing.setStatus('mandatory')
if mibBuilder.loadTexts: qosCqlQueParaServing.setDescription('The maximum bytes that the specified queue can transmit in each turn. The default value is 1500.')
qosCqlQueParaMaxQueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosCqlQueParaMaxQueLen.setStatus('mandatory')
if mibBuilder.loadTexts: qosCqlQueParaMaxQueLen.setDescription('The maximum length of the specified queue.')
qosUndoCqlQueParaServing = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("qosCqlQueParaServing", 0), ("qosNoCqlQueParaServing", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosUndoCqlQueParaServing.setStatus('mandatory')
if mibBuilder.loadTexts: qosUndoCqlQueParaServing.setDescription('0: Only for get. 1: Set the defualt value of the maximum bytes that the specified queue can transmit in each turn.')
qosUndoCqlQueParaMaxQueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("qosCqlQueParaMaxQueLen", 0), ("qosNoCqlQueParaMaxQueLen", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosUndoCqlQueParaMaxQueLen.setStatus('mandatory')
if mibBuilder.loadTexts: qosUndoCqlQueParaMaxQueLen.setDescription('0: Only for get. 1: Set the defualt value of the maximum length of the specified queue.')
qosCQTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 11), )
if mibBuilder.loadTexts: qosCQTable.setStatus('mandatory')
if mibBuilder.loadTexts: qosCQTable.setDescription('CQ(Custom Queuing) table CQ is a kind of queuing strategy applied on interface for congestion management. CQ allows a fairness not provided with PQ. Associated with each custom queue is a configurable serving, which specifies how many bytes of data should be delivered from the current queue by the system before the system moves on to the next queue. When a particular queue is being processed, packets are sent until the number of bytes sent exceeds the queue serving or until the queue is empty. If the specified custom list is applied to an interface the Custom Queuing strategy is applied on this interface. Only one list can be assigned per interface. This table is about the CQ configuration infomation.')
qosCQEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 11, 1), ).setIndexNames((0, "HUAWEI-IF-QOS-MIB", "qosCQIfIndex"))
if mibBuilder.loadTexts: qosCQEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qosCQEntry.setDescription('CQ configuration infomation Command:qos cq cql')
qosCQIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCQIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qosCQIfIndex.setDescription('The index of table, which is the index of interface applying Custom Queuing strategy. The interface identified by the value of this index is the same interface as identified by the same value of ifIndex.')
qosCQListNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosCQListNum.setStatus('mandatory')
if mibBuilder.loadTexts: qosCQListNum.setDescription('The number of CQL applied to an interface identified by the value of qosCQIfIndex.')
qosCQIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 11, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCQIfName.setStatus('mandatory')
if mibBuilder.loadTexts: qosCQIfName.setDescription("The description of the interface by the value of qosCQIfIndex. It's a textual string containing information about the interface type and the interface number.")
qosUndoCQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("qosCQ", 0), ("qosNoCQ", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosUndoCQ.setStatus('mandatory')
if mibBuilder.loadTexts: qosUndoCQ.setDescription('0:Only for get. 1:Set the default queuing on interface: FIFO')
qosCQRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 12), )
if mibBuilder.loadTexts: qosCQRunInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: qosCQRunInfoTable.setDescription('CQ(Custom Queuing) statistics table This table is about the running infomation of CQ applied on interface for congestion management.')
qosCQRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 12, 1), ).setIndexNames((0, "HUAWEI-IF-QOS-MIB", "qosCQRunInfoIfIndex"), (0, "HUAWEI-IF-QOS-MIB", "qosCQRunInfoQueNum"))
if mibBuilder.loadTexts: qosCQRunInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qosCQRunInfoEntry.setDescription('CQ running infomation Command:display qos cq interface')
qosCQRunInfoIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCQRunInfoIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qosCQRunInfoIfIndex.setDescription('The index of the table, which is the index of interface applying Custom Queuing strategy. The interface identified by the value of this index is the same interface as identified by the same value of ifIndex.')
qosCQRunInfoQueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCQRunInfoQueNum.setStatus('mandatory')
if mibBuilder.loadTexts: qosCQRunInfoQueNum.setDescription('The index of the table, which is the custom queue number')
qosCQRunInfoIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 12, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCQRunInfoIfName.setStatus('mandatory')
if mibBuilder.loadTexts: qosCQRunInfoIfName.setDescription("The description of the interface by the value of qosCQRunInfoIfIndex. It's a textual string containing information about the interface type and the interface number.")
qosCQRunInfoQuePkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCQRunInfoQuePkt.setStatus('mandatory')
if mibBuilder.loadTexts: qosCQRunInfoQuePkt.setDescription('The count of packets enqueued the spceified custom queue when congestion occoured in the interface.')
qosCQRunInfoQueDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCQRunInfoQueDiscard.setStatus('mandatory')
if mibBuilder.loadTexts: qosCQRunInfoQueDiscard.setDescription("The count of discarded packets which can't be enqueued the specified custom queue because the custom queue is full.")
qosCQRunInfoMaxQueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 12, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCQRunInfoMaxQueLen.setStatus('mandatory')
if mibBuilder.loadTexts: qosCQRunInfoMaxQueLen.setDescription('The maximum length of the specified queue. The default value of maximum queue length is 20.')
qosWFQTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 13), )
if mibBuilder.loadTexts: qosWFQTable.setStatus('mandatory')
if mibBuilder.loadTexts: qosWFQTable.setDescription('WFQ(Weighted Fair Queuing) table WFQ is a kind of queuing strategy applied on interface for congestion management. With WFQ, packets are classified by flow. For example, packets with the same source IP address, destination IP address, source TCP or UDP port, destination TCP or UDP port, and protocol belong to the same flow. When enabled for an interface, WFQ provides traffic priority management that automatically sorts among individual traffic flows without requiring first defined match rule lists. This table is about the WFQ configuration and running infomation.')
qosWFQEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 13, 1), ).setIndexNames((0, "HUAWEI-IF-QOS-MIB", "qosWFQIfIndex"))
if mibBuilder.loadTexts: qosWFQEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qosWFQEntry.setDescription('WFQ configuration and running infomation Command:qos wfq [ queue-length max-queue-length [ queue-number total-queue-number ] ] display qos wfq interface')
qosWFQIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWFQIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qosWFQIfIndex.setDescription('The index of the table, which is the index of interface applying Weighted Fair Queuing strategy. The interface identified by the value of this index is the same interface as identified by the same value of ifIndex.')
qosWFQIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 13, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWFQIfName.setStatus('mandatory')
if mibBuilder.loadTexts: qosWFQIfName.setDescription("The description of the interface by the value of qosWFQIfIndex. It's a textual string containing information about the interface type and the interface number.")
qosWFQMaxQueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosWFQMaxQueLen.setStatus('mandatory')
if mibBuilder.loadTexts: qosWFQMaxQueLen.setDescription('The maximum length of the queue.')
qosWFQTotalQueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 32, 64, 128, 256, 512, 1024, 2048, 4096))).clone(namedValues=NamedValues(("a16", 16), ("a32", 32), ("a64", 64), ("a128", 128), ("a256", 256), ("a512", 512), ("a1024", 1024), ("a2048", 2048), ("a4096", 4096)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosWFQTotalQueNum.setStatus('mandatory')
if mibBuilder.loadTexts: qosWFQTotalQueNum.setDescription('The total number of queues. The default value is a256(256).')
qosWFQCurQueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWFQCurQueLen.setStatus('mandatory')
if mibBuilder.loadTexts: qosWFQCurQueLen.setDescription('The count of packets enqueued all the queues when congestion occoured in the interface.')
qosWFQTotalDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWFQTotalDiscard.setStatus('mandatory')
if mibBuilder.loadTexts: qosWFQTotalDiscard.setDescription("The count of discarded packets which can't be enqueued all the queues because the queue is full.")
qosWFQActiveQueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 13, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWFQActiveQueNum.setStatus('mandatory')
if mibBuilder.loadTexts: qosWFQActiveQueNum.setDescription('A queue becomes active when the queue is not empty. The count of current active queues when WFQ was enabled in the interface.')
qosWFQMaxActiveQueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 13, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWFQMaxActiveQueNum.setStatus('mandatory')
if mibBuilder.loadTexts: qosWFQMaxActiveQueNum.setDescription('The maximum count of active queues. It is the count of active queues that have occurred since WFQ was enabled in the interface.')
qosUndoWFQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("qosWFQ", 0), ("qosNoWFQ", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosUndoWFQ.setStatus('mandatory')
if mibBuilder.loadTexts: qosUndoWFQ.setDescription('0:Only for get. 1:Set the default queuing on interface: FIFO')
qosWREDTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 14), )
if mibBuilder.loadTexts: qosWREDTable.setStatus('mandatory')
if mibBuilder.loadTexts: qosWREDTable.setDescription('WRED(Weighted Random Early Detect) table. WRED is a congestion avoidance mechanism that slows traffic by randomly dropping packets when congestion exists. WRED can be enabled only when Weighted Fair Queuing strategy was enable on the interface. This table is about the WRED configuration infomation.')
qosWREDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 14, 1), ).setIndexNames((0, "HUAWEI-IF-QOS-MIB", "qosWREDIfIndex"))
if mibBuilder.loadTexts: qosWREDEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qosWREDEntry.setDescription('WRED configuration infomation Command:qos wred qos wred weighting-constant exponent')
qosWREDIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWREDIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qosWREDIfIndex.setDescription('The index of the table, which is the index of interface applying Weighted Random Early Detection. The interface identified by the value of this index is the same interface as identified by the same value of qosWFQIfIndex.')
qosWREDIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 14, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWREDIfName.setStatus('mandatory')
if mibBuilder.loadTexts: qosWREDIfName.setDescription("The description of the interface by the value of qosWREDIfIndex. It's a textual string containing information about the interface type and the interface number.")
qosWREDWeightConstant = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(9)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosWREDWeightConstant.setStatus('mandatory')
if mibBuilder.loadTexts: qosWREDWeightConstant.setDescription('Weighted factor in formula for calculating the mean length of queue. From 1 to 16, the default value is 9')
qosWREDEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosWREDEnable.setStatus('mandatory')
if mibBuilder.loadTexts: qosWREDEnable.setDescription('0: Disable WRED feature. Recover to tail-drop. 1: Enable WRED feature for the specified interface.')
qosUndoWREDWeightConstant = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("qosWREDExponent", 0), ("qosNoWREDExponent", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosUndoWREDWeightConstant.setStatus('mandatory')
if mibBuilder.loadTexts: qosUndoWREDWeightConstant.setDescription('0:Only for get. 1:Recover the default value of weighted factor: 9')
qosWREDPreTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 15), )
if mibBuilder.loadTexts: qosWREDPreTable.setStatus('mandatory')
if mibBuilder.loadTexts: qosWREDPreTable.setDescription('WRED(Weighted Random Early Detect) precedence table. Weighted Random Early Detection(WRED) parameters for a particular IP Precedence can be configured. This table is about the WRED precedence configuration and running infomation.')
qosWREDPreEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 15, 1), ).setIndexNames((0, "HUAWEI-IF-QOS-MIB", "qosWREDPreIfIndex"), (0, "HUAWEI-IF-QOS-MIB", "qosWREDPrecedence"))
if mibBuilder.loadTexts: qosWREDPreEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qosWREDPreEntry.setDescription('WRED precedence configuration infomation Command:qos wred ip-precedence ip-precedence low-limit low-limit high-limit high-limit discard-probability discard-prob')
qosWREDPreIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWREDPreIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qosWREDPreIfIndex.setDescription('The index of the table, which is the index of interface applying Weighted Random Early Detection. The interface identified by the value of this index is the same interface as identified by the same value of qosWREDIfIndex.')
qosWREDPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWREDPrecedence.setStatus('mandatory')
if mibBuilder.loadTexts: qosWREDPrecedence.setDescription('IP precedence, from 0 to 7')
qosWREDPreIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 15, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWREDPreIfName.setStatus('mandatory')
if mibBuilder.loadTexts: qosWREDPreIfName.setDescription("The description of the interface by the value of qosWREDPreIfIndex. It's a textual string containing information about the interface type and the interface number.")
qosWREDPreLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 15, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosWREDPreLowLimit.setStatus('mandatory')
if mibBuilder.loadTexts: qosWREDPreLowLimit.setDescription('Low Limit in number of packets. When the average queue length reaches the low limit, WRED randomly drops some packets with the specified IP Precedence. For all precedences, the default value is 10.')
qosWREDPreHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 15, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosWREDPreHighLimit.setStatus('mandatory')
if mibBuilder.loadTexts: qosWREDPreHighLimit.setDescription('High limit in number of packets. When the average queue length exceeds the high limit, WRED drops all packets with the specified IP Precedence. For all precedences, the default value is 30.')
qosWREDPreDiscardProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 15, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosWREDPreDiscardProbability.setStatus('mandatory')
if mibBuilder.loadTexts: qosWREDPreDiscardProbability.setDescription('Discard probability denominator. It is for the fraction of packets dropped when the average queue depth is at the high limit. For example, if the denominator is 128, 1 out of every 128 packets is dropped when the average queue is at the high limit. For all precedences, the default value is 10.')
qosWREDPreRandomDropNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 15, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWREDPreRandomDropNum.setStatus('mandatory')
if mibBuilder.loadTexts: qosWREDPreRandomDropNum.setDescription('Number of packets random-dropped for WRED')
qosWREDPreTailDropNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 15, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosWREDPreTailDropNum.setStatus('mandatory')
if mibBuilder.loadTexts: qosWREDPreTailDropNum.setDescription('Number of packets tail-dropped for WRED')
qosUndoWREDPre = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("qosWREDPre", 0), ("qosNoWREDPre", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosUndoWREDPre.setStatus('mandatory')
if mibBuilder.loadTexts: qosUndoWREDPre.setDescription('0:Only for get. 1:Recover the default value of low-limit,high-limit and discard-probability on relevant precedence.')
qosCarlTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 16), )
if mibBuilder.loadTexts: qosCarlTable.setStatus('mandatory')
if mibBuilder.loadTexts: qosCarlTable.setDescription('CARL(Committed Access Rate List) table')
qosCarlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 16, 1), ).setIndexNames((0, "HUAWEI-IF-QOS-MIB", "qosCarlListNum"))
if mibBuilder.loadTexts: qosCarlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qosCarlEntry.setDescription('CARL configuration infomation Command:qos carl carl-index { precedence precedence-value | mac mac-address }')
qosCarlListNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCarlListNum.setStatus('mandatory')
if mibBuilder.loadTexts: qosCarlListNum.setDescription('The index of the CARL table, which is the CARL number')
qosCarlParaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mac-address", 1), ("prec-mask", 2), ("dscp-mask", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosCarlParaType.setStatus('mandatory')
if mibBuilder.loadTexts: qosCarlParaType.setDescription('The matching type of the CARL. The types are as follows: Mac-address(1) -- matching the MAC address of the ethernet frame. prec-mask(2) -- matching the IP precedence of the IP packet. dscp-mask(3) -- matching the IP DSCP of the IP packet. ')
qosCarlParaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 16, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosCarlParaValue.setStatus('mandatory')
if mibBuilder.loadTexts: qosCarlParaValue.setDescription('The parameter value of CARL. When CarlParaType=mac-address(1), this value is the MAC address with the format HHHHHH(hex). When CarlParaType=prec-mask(2), this value is the IP precedence mask. The value range is 0x00000000 ~ 0x11111111. The bit is corresponding to IP precedence. For example, in value 0x00100010, the bit 0 and bit 5 is set, that means IP precedenc 1 and 5.')
qosUndoCarl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("qosCARL", 0), ("qosNoCARL", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosUndoCarl.setStatus('mandatory')
if mibBuilder.loadTexts: qosUndoCarl.setDescription('0:Only for get. 1:Delete the specified CARL')
qosCARTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 17), )
if mibBuilder.loadTexts: qosCARTable.setStatus('mandatory')
if mibBuilder.loadTexts: qosCARTable.setDescription('CAR(Committed Access Rate) table')
qosCAREntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 17, 1), ).setIndexNames((0, "HUAWEI-IF-QOS-MIB", "qosCARIfIndex"), (0, "HUAWEI-IF-QOS-MIB", "qosCARPktDirection"), (0, "HUAWEI-IF-QOS-MIB", "qosCARType"), (0, "HUAWEI-IF-QOS-MIB", "qosCARListNum"), (0, "HUAWEI-IF-QOS-MIB", "qosCARCIR"), (0, "HUAWEI-IF-QOS-MIB", "qosCARBurstSize"), (0, "HUAWEI-IF-QOS-MIB", "qosCARExcessBurstSize"))
if mibBuilder.loadTexts: qosCAREntry.setStatus('mandatory')
if mibBuilder.loadTexts: qosCAREntry.setDescription('CAR configuration and running infomation. Command:qos car { inbound | outbound } { any | acl acl-index | carl carl-index } cir committed-rate cbs burst-size ebs excess-burst-size conform action exceed action display qos car interface')
qosCARIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCARIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qosCARIfIndex.setDescription('One of the index of the CAR table. This is the index of the interface on which CAR policy applied.')
qosCARIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 17, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCARIfName.setStatus('mandatory')
if mibBuilder.loadTexts: qosCARIfName.setDescription('The description of the interface.')
qosCARPktDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCARPktDirection.setStatus('mandatory')
if mibBuilder.loadTexts: qosCARPktDirection.setDescription('One of the index of the CAR table. This is the direction of traffic. There are two directions: inbound(1) and outbound(2) ')
qosCARType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("acl", 1), ("carl", 2), ("all", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCARType.setStatus('mandatory')
if mibBuilder.loadTexts: qosCARType.setDescription('One of the index of the CAR table. This is the matching type for the traffic. The value acl(1) means that the traffic matching the configured ACL is applicable to the CAR policy. The value carl(2) means that the traffic matching the configured CARL is applicable to the CAR policy. The value all(3) means that all the traffic passing the interface is applicable to the CAR policy.')
qosCARListNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 199), ValueRangeConstraint(2000, 3999), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCARListNum.setStatus('mandatory')
if mibBuilder.loadTexts: qosCARListNum.setDescription('One of the index of the CAR table. This is the ACL number or CARL number. When CARType=1,this number is ACL number, the range is 2000..3999; When CARType=2,this number is CARL number, the range is 1..199; When CARType=3,this parameter is invalid')
qosCARCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 17, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8000, 155000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCARCIR.setStatus('mandatory')
if mibBuilder.loadTexts: qosCARCIR.setDescription('One of the index of the CAR table. The Committed Information Rate. Unit: bps. This is the target rate which the CAR policy limits. ')
qosCARBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 17, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15000, 155000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCARBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: qosCARBurstSize.setDescription('One of the index of the CAR table. Burst traffic size. Unit: bit. This is the amount of traffic in excess of the committed information rate that will be permitted by the CAR policy.')
qosCARExcessBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 17, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 155000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCARExcessBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: qosCARExcessBurstSize.setDescription('One of the index of the CAR table. Excess Burst Size. Unit: bit. This is the amount of traffic in excess of the burst size, which may be conditionally permitted by the CAR policy.')
qosCARConformAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 17, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("continue", 1), ("discard", 2), ("remark-prec-continue", 3), ("remark-prec-pass", 4), ("pass", 5), ("remark-mplsexp-continue", 6), ("remark-mplsexp-pass", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosCARConformAction.setStatus('mandatory')
if mibBuilder.loadTexts: qosCARConformAction.setDescription('Action to be taken by the traffic, when the traffic conforms CIR. There are the following actions: Continue(1) -- Continue to be processed by the following CAR policy which applied on the interface. Discard(2) -- Discard the packet. remark-prec-continue(3) -- Remark the IP precedence of IP packet, and then continue to be processed by the following CAR policy. remark-prec-pass(4) -- Remark the IP precedence of IP packet, and then send the packet. pass(5) -- Send the packet directly. remark-mplsexp-continue(6) -- Remark the mpls exp field of mpls packet, and then continue to be processed by the following CAR policy. remark-mplsexp-pass(7) -- Remark the mpls exp field of mpls packet, and then send the packet. ')
qosCARExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 17, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("continue", 1), ("discard", 2), ("remark-prec-continue", 3), ("remark-prec-pass", 4), ("pass", 5), ("remark-mplsexp-continue", 6), ("remark-mplsexp-pass", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosCARExceedAction.setStatus('mandatory')
if mibBuilder.loadTexts: qosCARExceedAction.setDescription('Action to be taken by the traffic, when the traffic is exceeds the CIR. There are the following actions: Continue(1) -- Continue to be processed by the following CAR policy which applied on the interface. Discard(2) -- Discard the packet. remark-prec-continue(3) -- Remark the IP precedence of IP packet, and then continue to be processed by the following CAR policy. remark-prec-pass(4) -- Remark the IP precedence of IP packet, and then send the packet. pass(5) -- Send the packet directly. remark-mplsexp-continue(6) -- Remark the mpls exp field of mpls packet, and then continue to be processed by the following CAR policy. remark-mplsexp-pass(7) -- Remark the mpls exp field of mpls packet, and then send the packet. ')
qosCARConformNewPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 17, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosCARConformNewPrec.setStatus('mandatory')
if mibBuilder.loadTexts: qosCARConformNewPrec.setDescription('Rewrite the precedence value on packets when traffic is within the CIR')
qosCARExceedNewPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 17, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosCARExceedNewPrec.setStatus('mandatory')
if mibBuilder.loadTexts: qosCARExceedNewPrec.setDescription('Rewrite the precedence value on packets when traffic is out of CIR')
qosCARConformPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 17, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCARConformPkt.setStatus('mandatory')
if mibBuilder.loadTexts: qosCARConformPkt.setDescription('The number of packets which conformed CIR.')
qosCARConformByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 17, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCARConformByte.setStatus('mandatory')
if mibBuilder.loadTexts: qosCARConformByte.setDescription('The bytes of packets which conformed CIR.')
qosCARExceedPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 17, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCARExceedPkt.setStatus('mandatory')
if mibBuilder.loadTexts: qosCARExceedPkt.setDescription('The number of packets which exceeded CIR.')
qosCARExceedByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 17, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCARExceedByte.setStatus('mandatory')
if mibBuilder.loadTexts: qosCARExceedByte.setDescription('the bytes of packets which exceeded CIR.')
qosUndoCAR = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 17, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("qosCAR", 0), ("qosNoCAR", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosUndoCAR.setStatus('mandatory')
if mibBuilder.loadTexts: qosUndoCAR.setDescription('0:Only for get. 1:Cancel the CAR policy applied on the interface.')
qosGTSTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 18), )
if mibBuilder.loadTexts: qosGTSTable.setStatus('mandatory')
if mibBuilder.loadTexts: qosGTSTable.setDescription('GTS(Generic Traffic Shaping) table')
qosGTSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 18, 1), ).setIndexNames((0, "HUAWEI-IF-QOS-MIB", "qosGTSIfIndex"), (0, "HUAWEI-IF-QOS-MIB", "qosGTSType"), (0, "HUAWEI-IF-QOS-MIB", "qosGTSACLNum"))
if mibBuilder.loadTexts: qosGTSEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qosGTSEntry.setDescription('GTS configuration and running information Command:qos gts { any | acl acl-index } cir committed-rate [ cbs burst-size [ ebs excess-burst-size [ queue-length queue-length ] ] ] display qos gts interface')
qosGTSIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosGTSIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qosGTSIfIndex.setDescription('One of the index of the GTS table. This is the index of the interface on which GTS policy applied.')
qosGTSIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 18, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosGTSIfName.setStatus('mandatory')
if mibBuilder.loadTexts: qosGTSIfName.setDescription('The description of the interface on which GTS policy applied.')
qosGTSType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("acl", 1), ("all", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosGTSType.setStatus('mandatory')
if mibBuilder.loadTexts: qosGTSType.setDescription('One of the index of the GTS table. This is the matching type for the traffic. The value acl(1) means that the traffic matching the configured ACL is applicable to the GTS policy. The value all(2) means that all the traffic passing the interface is applicable to the GTS policy.')
qosGTSACLNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2000, 3999), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosGTSACLNum.setStatus('mandatory')
if mibBuilder.loadTexts: qosGTSACLNum.setDescription('One of the index of the GTS table. This is the ACL number for the shaping traffic to match. ')
qosGTSCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 18, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8000, 155000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosGTSCIR.setStatus('mandatory')
if mibBuilder.loadTexts: qosGTSCIR.setDescription('The Committed Information Rate. This is the target sustained rate which the GTS policy will shape. Unit: bps.')
qosGTSBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 18, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15000, 155000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosGTSBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: qosGTSBurstSize.setDescription('Burst traffic size. Unit: bit. This is the amount of traffic in excess of the committed information rate that will be permitted by the GTS policy.')
qosGTSExcessBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 18, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 155000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosGTSExcessBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: qosGTSExcessBurstSize.setDescription('Excess Burst Size. Unit: bit. This is the amount of traffic in excess of the burst size, which may be conditionally permitted by the GTS policy.')
qosGTSMaxQueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 18, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosGTSMaxQueLen.setStatus('mandatory')
if mibBuilder.loadTexts: qosGTSMaxQueLen.setDescription('The maximum queue length for the GTS buffer.')
qosGTSCurQueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 18, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosGTSCurQueLen.setStatus('mandatory')
if mibBuilder.loadTexts: qosGTSCurQueLen.setDescription('The current queue length for the GTS buffer, i.e. the number of packets queuing in the GTS buffer.')
qosGTSPassPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 18, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosGTSPassPkt.setStatus('mandatory')
if mibBuilder.loadTexts: qosGTSPassPkt.setDescription('The number of packets which passed by the GTS policy.')
qosGTSPassByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 18, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosGTSPassByte.setStatus('mandatory')
if mibBuilder.loadTexts: qosGTSPassByte.setDescription('The bytes of packets which passed by the GTS policy.')
qosGTSDelayPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 18, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosGTSDelayPkt.setStatus('mandatory')
if mibBuilder.loadTexts: qosGTSDelayPkt.setDescription('The number of packets which delayed by the GTS policy.')
qosGTSDelayByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 18, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosGTSDelayByte.setStatus('mandatory')
if mibBuilder.loadTexts: qosGTSDelayByte.setDescription('The bytes of packets which delayed by the GTS policy.')
qosGTSDiscardPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 18, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosGTSDiscardPkt.setStatus('mandatory')
if mibBuilder.loadTexts: qosGTSDiscardPkt.setDescription('The number of packets which discarded by the GTS policy.')
qosGTSDiscardByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 18, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosGTSDiscardByte.setStatus('mandatory')
if mibBuilder.loadTexts: qosGTSDiscardByte.setDescription('The bytes of packets which discarded by the GTS policy.')
qosUndoGTS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 18, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("qosGTS", 0), ("qosNoGTS", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosUndoGTS.setStatus('mandatory')
if mibBuilder.loadTexts: qosUndoGTS.setDescription('0:Only for get. 1:Cancel the GTS policy applied on the interface.')
qosLRTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 19), )
if mibBuilder.loadTexts: qosLRTable.setStatus('mandatory')
if mibBuilder.loadTexts: qosLRTable.setDescription('LR(Line Rate) table.')
qosLREntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 19, 1), ).setIndexNames((0, "HUAWEI-IF-QOS-MIB", "qosLRIfIndex"))
if mibBuilder.loadTexts: qosLREntry.setStatus('mandatory')
if mibBuilder.loadTexts: qosLREntry.setDescription('LR configuration and running information. Command:qos lr display qos lr interface')
qosLRIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 19, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosLRIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qosLRIfIndex.setDescription('The index of the LR table, which is the index of the interface on which LR policy is applied.')
qosLRIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 19, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosLRIfName.setStatus('mandatory')
if mibBuilder.loadTexts: qosLRIfName.setDescription('The description of the interface on which LR policy is applied.')
qosLRCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 19, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8000, 155000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosLRCIR.setStatus('mandatory')
if mibBuilder.loadTexts: qosLRCIR.setDescription('The Committed Information Rate on the physical port. This is the target sustained rate which the LR policy limits. Unit: bps.')
qosLRBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 19, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15000, 155000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosLRBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: qosLRBurstSize.setDescription('Burst traffic size. Unit: bit. This is the amount of traffic in excess of the committed information rate that will be permitted by the LR policy.')
qosLRExcessBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 19, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 155000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosLRExcessBurstSize.setStatus('mandatory')
if mibBuilder.loadTexts: qosLRExcessBurstSize.setDescription('Excess Burst Size. Unit: bit. This is the amount of traffic in excess of the burst size, which may be conditionally permitted by the LR policy.')
qosLRPassPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 19, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosLRPassPkt.setStatus('mandatory')
if mibBuilder.loadTexts: qosLRPassPkt.setDescription('The Number of packets which passed by LR policy.')
qosLRPassByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 19, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosLRPassByte.setStatus('mandatory')
if mibBuilder.loadTexts: qosLRPassByte.setDescription('The bytes of packets which passed by LR policy.')
qosLRDelayPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 19, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosLRDelayPkt.setStatus('mandatory')
if mibBuilder.loadTexts: qosLRDelayPkt.setDescription('The number of packets which delayed by LR policy.')
qosLRDelayByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 19, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosLRDelayByte.setStatus('mandatory')
if mibBuilder.loadTexts: qosLRDelayByte.setDescription('The bytes of packets which delayed by LR policy.')
qosUndoLR = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 19, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("qosLR", 0), ("qosNoLR", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosUndoLR.setStatus('mandatory')
if mibBuilder.loadTexts: qosUndoLR.setDescription('0:Only for get. 1:Cancel the LR policy applied on the interface.')
qosIfBandwidthTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 20), )
if mibBuilder.loadTexts: qosIfBandwidthTable.setStatus('current')
if mibBuilder.loadTexts: qosIfBandwidthTable.setDescription('A table of bandwidth parameter on interface. ')
qosIfBandwidthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 20, 1), ).setIndexNames((0, "HUAWEI-IF-QOS-MIB", "qosIfBandwidthIfIndex"))
if mibBuilder.loadTexts: qosIfBandwidthEntry.setStatus('current')
if mibBuilder.loadTexts: qosIfBandwidthEntry.setDescription('Bandwidth parameter applied on Interface.')
qosIfBandwidthIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIfBandwidthIfIndex.setStatus('current')
if mibBuilder.loadTexts: qosIfBandwidthIfIndex.setDescription('Interface Index, equal to ifIndex.')
qosIFBandwidthMaxBW = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 20, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosIFBandwidthMaxBW.setStatus('current')
if mibBuilder.loadTexts: qosIFBandwidthMaxBW.setDescription('Max bandwidth Value (Unit: Kbps) applied on the interface.')
qosIFBandwidthMaxReservedBWPct = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 20, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosIFBandwidthMaxReservedBWPct.setStatus('current')
if mibBuilder.loadTexts: qosIFBandwidthMaxReservedBWPct.setDescription('Max reserved bandwidth as percent of the interface bandwidth (Unit: percent).')
qosIFBandwidthMaxReservedBW = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 20, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIFBandwidthMaxReservedBW.setStatus('current')
if mibBuilder.loadTexts: qosIFBandwidthMaxReservedBW.setDescription('Max reserved bandwidth. Unit : Kbps')
qosIFBandwidthAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 20, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosIFBandwidthAvailable.setStatus('current')
if mibBuilder.loadTexts: qosIFBandwidthAvailable.setDescription('Available bandwidth. Unit : Kbps')
qosIFBandwidthRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 20, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosIFBandwidthRowStatus.setStatus('current')
if mibBuilder.loadTexts: qosIFBandwidthRowStatus.setDescription('RowStatus for qosIfBandwidthTable Table. Three actions are used: active, createAndGo, destroy')
qosRTPIfApplyTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 21), )
if mibBuilder.loadTexts: qosRTPIfApplyTable.setStatus('current')
if mibBuilder.loadTexts: qosRTPIfApplyTable.setDescription('A table of QoS rtpq instance.')
qosRTPIfApplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 21, 1), ).setIndexNames((0, "HUAWEI-IF-QOS-MIB", "qosRTPIfApplyIfIndex"))
if mibBuilder.loadTexts: qosRTPIfApplyEntry.setStatus('current')
if mibBuilder.loadTexts: qosRTPIfApplyEntry.setDescription('Rtpq Configuration Information Entry.')
qosRTPIfApplyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 21, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosRTPIfApplyIfIndex.setStatus('current')
if mibBuilder.loadTexts: qosRTPIfApplyIfIndex.setDescription('Interface Index, equal to ifIndex.')
qosRTPIfApplyStartPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 21, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosRTPIfApplyStartPort.setStatus('current')
if mibBuilder.loadTexts: qosRTPIfApplyStartPort.setDescription(' RTP-PORT(3): start-port: 2000~65535 ')
qosRTPIfApplyEndPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 21, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosRTPIfApplyEndPort.setStatus('current')
if mibBuilder.loadTexts: qosRTPIfApplyEndPort.setDescription(' RTP-PORT(3): end-port: 2000~65535 ')
qosRTPIfApplyBandWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 21, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 1000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosRTPIfApplyBandWidth.setStatus('current')
if mibBuilder.loadTexts: qosRTPIfApplyBandWidth.setDescription('Max bandwidth Value: Absolute value: 8..1000000. Unit: Kbps ')
qosRTPIfApplyCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 21, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1500, 2000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosRTPIfApplyCbs.setStatus('current')
if mibBuilder.loadTexts: qosRTPIfApplyCbs.setDescription(' Committed Burst Size: 1500..2000000. Unit: bytes ')
qosRTPIfApplyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 21, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: qosRTPIfApplyRowStatus.setStatus('current')
if mibBuilder.loadTexts: qosRTPIfApplyRowStatus.setDescription('RowStatus for RTPQoSIfApply Table. Three actions are used: active, createAndGo, destroy')
qosRTPIfQueueRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 22), )
if mibBuilder.loadTexts: qosRTPIfQueueRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: qosRTPIfQueueRunInfoTable.setDescription('A table of Running statistics for RTP(Realtime Transport Protocol) Queue applied on the interface.')
qosRTPIfQueueRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 22, 1), ).setIndexNames((0, "HUAWEI-IF-QOS-MIB", "qosRTPIfApplyIfIndex"))
if mibBuilder.loadTexts: qosRTPIfQueueRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: qosRTPIfQueueRunInfoEntry.setDescription('RTP(Realtime Transport Protocol) Queue statistics entry.')
qosRTPIfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 22, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosRTPIfQueueSize.setStatus('current')
if mibBuilder.loadTexts: qosRTPIfQueueSize.setDescription('Size of Rtpq Queue.')
qosRTPIfQueueMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 22, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosRTPIfQueueMaxSize.setStatus('current')
if mibBuilder.loadTexts: qosRTPIfQueueMaxSize.setDescription(' Max packet number of RTP(Realtime Transport Protocol) Queue.')
qosRTPIfQueueOutputs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 22, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosRTPIfQueueOutputs.setStatus('current')
if mibBuilder.loadTexts: qosRTPIfQueueOutputs.setDescription('Output packet number of RTP(Realtime Transport Protocol) Queue.')
qosRTPIfQueueDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 32, 2, 22, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosRTPIfQueueDiscards.setStatus('current')
if mibBuilder.loadTexts: qosRTPIfQueueDiscards.setDescription('Discarded packet number of RTP(Realtime Transport Protocol) Queue.')
mibBuilder.exportSymbols("HUAWEI-IF-QOS-MIB", qosPQBottomDiscard=qosPQBottomDiscard, qosPqlDefaultListNum=qosPqlDefaultListNum, qosCqlQueParaListNum=qosCqlQueParaListNum, qosFIFOIfName=qosFIFOIfName, qosGTSIfName=qosGTSIfName, qosUndoGTS=qosUndoGTS, qosPqlIfListNum=qosPqlIfListNum, qosCQRunInfoIfName=qosCQRunInfoIfName, qosCarlTable=qosCarlTable, qosGTSDiscardPkt=qosGTSDiscardPkt, qosPqlIfQueueType=qosPqlIfQueueType, qosPqlProListNum=qosPqlProListNum, qosCarlParaValue=qosCarlParaValue, qosCARExcessBurstSize=qosCARExcessBurstSize, qosLRExcessBurstSize=qosLRExcessBurstSize, qosRTPIfQueueRunInfoTable=qosRTPIfQueueRunInfoTable, qosPqlDefaultEntry=qosPqlDefaultEntry, qosCqlIfIndex=qosCqlIfIndex, qosPqlIfTable=qosPqlIfTable, qosCqlProQueKey=qosCqlProQueKey, qosPqlQueLenListNum=qosPqlQueLenListNum, qosPQMiddlePkt=qosPQMiddlePkt, qosWFQCurQueLen=qosWFQCurQueLen, qosUndoCarl=qosUndoCarl, qosPQMiddleDiscard=qosPQMiddleDiscard, qosWREDPreEntry=qosWREDPreEntry, qosLREntry=qosLREntry, qosCARConformAction=qosCARConformAction, qosGTSMaxQueLen=qosGTSMaxQueLen, qosIFBandwidthMaxBW=qosIFBandwidthMaxBW, qosUndoCAR=qosUndoCAR, qosWREDWeightConstant=qosWREDWeightConstant, qosRTPIfApplyRowStatus=qosRTPIfApplyRowStatus, qosGTSDelayPkt=qosGTSDelayPkt, qosPQNormalMaxQueLen=qosPQNormalMaxQueLen, qosPqlProQueKey=qosPqlProQueKey, qosWFQMaxActiveQueNum=qosWFQMaxActiveQueNum, qosCARExceedByte=qosCARExceedByte, qosCQRunInfoQuePkt=qosCQRunInfoQuePkt, qosWFQTable=qosWFQTable, qosRTPIfApplyStartPort=qosRTPIfApplyStartPort, qosCARExceedNewPrec=qosCARExceedNewPrec, qosGTSExcessBurstSize=qosGTSExcessBurstSize, qosCarlParaType=qosCarlParaType, qosWFQMaxQueLen=qosWFQMaxQueLen, qosPQTopPkt=qosPQTopPkt, qosWREDEnable=qosWREDEnable, qosFIFODiscardPkt=qosFIFODiscardPkt, qosGTSBurstSize=qosGTSBurstSize, PYSNMP_MODULE_ID=hwIfQoSMib, qosPQBottomMaxQueLen=qosPQBottomMaxQueLen, qosCqlProName=qosCqlProName, qosCQRunInfoIfIndex=qosCQRunInfoIfIndex, qosUndoWREDWeightConstant=qosUndoWREDWeightConstant, qosWREDPreDiscardProbability=qosWREDPreDiscardProbability, qosCARExceedAction=qosCARExceedAction, qosLRIfIndex=qosLRIfIndex, qosWFQTotalDiscard=qosWFQTotalDiscard, qosPQIfName=qosPQIfName, qosWREDPreRandomDropNum=qosWREDPreRandomDropNum, qosFIFOEntry=qosFIFOEntry, qosPqlQueLenValue=qosPqlQueLenValue, qosGTSPassPkt=qosGTSPassPkt, qosCqlDefaultEntry=qosCqlDefaultEntry, qosUndoCqlDefault=qosUndoCqlDefault, qosCqlProQueNum=qosCqlProQueNum, qosCqlQueParaMaxQueLen=qosCqlQueParaMaxQueLen, qosGTSACLNum=qosGTSACLNum, qosPqlIfEntry=qosPqlIfEntry, qosWFQEntry=qosWFQEntry, qosCARBurstSize=qosCARBurstSize, qosRTPIfQueueDiscards=qosRTPIfQueueDiscards, qosPqlProtocolEntry=qosPqlProtocolEntry, qosUndoPqlIf=qosUndoPqlIf, qosGTSCIR=qosGTSCIR, qosLRDelayPkt=qosLRDelayPkt, qosCQRunInfoMaxQueLen=qosCQRunInfoMaxQueLen, qosFIFOIfIndex=qosFIFOIfIndex, hwIfQoSMib=hwIfQoSMib, qosUndoCqlQueParaMaxQueLen=qosUndoCqlQueParaMaxQueLen, qosPQTopMaxQueLen=qosPQTopMaxQueLen, qosWREDPreIfName=qosWREDPreIfName, qosCQRunInfoTable=qosCQRunInfoTable, qosCqlQueParaEntry=qosCqlQueParaEntry, qosRTPIfQueueSize=qosRTPIfQueueSize, qosWREDPreHighLimit=qosWREDPreHighLimit, qosPqlDefaultQueueType=qosPqlDefaultQueueType, qosCqlQueParaQueNum=qosCqlQueParaQueNum, qosCQIfIndex=qosCQIfIndex, qosLRCIR=qosLRCIR, qosUndoPqlDefault=qosUndoPqlDefault, qosCARIfName=qosCARIfName, qosCqlQueParaServing=qosCqlQueParaServing, qosUndoCqlProtocol=qosUndoCqlProtocol, qosIFBandwidthAvailable=qosIFBandwidthAvailable, qosGTSType=qosGTSType, qosPQNormalPkt=qosPQNormalPkt, qosCQListNum=qosCQListNum, qosLRBurstSize=qosLRBurstSize, qosGTSEntry=qosGTSEntry, qosCarlListNum=qosCarlListNum, qosPQIfIndex=qosPQIfIndex, qosWREDEntry=qosWREDEntry, qosRTPIfApplyEndPort=qosRTPIfApplyEndPort, qosUndoFIFO=qosUndoFIFO, qosUndoPqlQueLen=qosUndoPqlQueLen, qosPQTable=qosPQTable, qosCARExceedPkt=qosCARExceedPkt, qosFIFOTable=qosFIFOTable, qosWREDPreTailDropNum=qosWREDPreTailDropNum, qosWREDPreIfIndex=qosWREDPreIfIndex, qosCQRunInfoEntry=qosCQRunInfoEntry, qosWFQTotalQueNum=qosWFQTotalQueNum, qosRTPIfQueueOutputs=qosRTPIfQueueOutputs, qosLRPassByte=qosLRPassByte, qosUndoWREDPre=qosUndoWREDPre, qosIFBandwidthMaxReservedBWPct=qosIFBandwidthMaxReservedBWPct, qosWFQIfName=qosWFQIfName, qosWFQActiveQueNum=qosWFQActiveQueNum, qosLRPassPkt=qosLRPassPkt, qosGTSDiscardByte=qosGTSDiscardByte, qosWREDPreTable=qosWREDPreTable, qosUndoLR=qosUndoLR, qosLRDelayByte=qosLRDelayByte, qosCqlProListNum=qosCqlProListNum, qosPQNormalDiscard=qosPQNormalDiscard, qosLRTable=qosLRTable, qosRTPIfApplyIfIndex=qosRTPIfApplyIfIndex, qosCARTable=qosCARTable, qosCqlQueParaTable=qosCqlQueParaTable, qosCARType=qosCARType, qosUndoCqlIf=qosUndoCqlIf, qosCqlProtocolEntry=qosCqlProtocolEntry, qosCQIfName=qosCQIfName, qosPqlQueueLenEntry=qosPqlQueueLenEntry, qosCqlDefaultTable=qosCqlDefaultTable, qosPqlProName=qosPqlProName, qosCARPktDirection=qosCARPktDirection, qosPqlIfName=qosPqlIfName, qosPQTopDiscard=qosPQTopDiscard, qosCARConformByte=qosCARConformByte, qosUndoPqlProtocol=qosUndoPqlProtocol, qosRTPIfQueueMaxSize=qosRTPIfQueueMaxSize, qosCqlListNum=qosCqlListNum, qosCARConformNewPrec=qosCARConformNewPrec, qosCQTable=qosCQTable, qosUndoCQ=qosUndoCQ, qosPqlProQueKeyValue=qosPqlProQueKeyValue, qosCARCIR=qosCARCIR, qosPQBottomPkt=qosPQBottomPkt, qosIfBandwidthEntry=qosIfBandwidthEntry, qosIFBandwidthMaxReservedBW=qosIFBandwidthMaxReservedBW, qosWREDIfName=qosWREDIfName, qosCqlProtocolTable=qosCqlProtocolTable, qosLRIfName=qosLRIfName, qosRTPIfApplyCbs=qosRTPIfApplyCbs, qosGTSCurQueLen=qosGTSCurQueLen, qosWFQIfIndex=qosWFQIfIndex, qosUndoPQ=qosUndoPQ, qosPqlProtocolTable=qosPqlProtocolTable, qosWREDPrecedence=qosWREDPrecedence, qosCarlEntry=qosCarlEntry, qosRTPIfApplyEntry=qosRTPIfApplyEntry, qosCqlIfQueueNum=qosCqlIfQueueNum, qosUndoCqlQueParaServing=qosUndoCqlQueParaServing, qosCQEntry=qosCQEntry, qosGTSDelayByte=qosGTSDelayByte, qosIfBandwidthTable=qosIfBandwidthTable, qosPQListNum=qosPQListNum, qosPqlQueueLenTable=qosPqlQueueLenTable, qosUndoWFQ=qosUndoWFQ, qosRTPIfQueueRunInfoEntry=qosRTPIfQueueRunInfoEntry, qosFIFOMaxQueueLen=qosFIFOMaxQueueLen, qosWREDIfIndex=qosWREDIfIndex, qosCqlQueueNum=qosCqlQueueNum, qosCqlIfEntry=qosCqlIfEntry, qosWREDTable=qosWREDTable, qosCARConformPkt=qosCARConformPkt, qosCARListNum=qosCARListNum, qosRTPIfApplyTable=qosRTPIfApplyTable, qosRTPIfApplyBandWidth=qosRTPIfApplyBandWidth, qosCqlProQueKeyValue=qosCqlProQueKeyValue, qosGTSIfIndex=qosGTSIfIndex, qosWREDPreLowLimit=qosWREDPreLowLimit, qosPQEntry=qosPQEntry, qosGTSTable=qosGTSTable, qosIfBandwidthIfIndex=qosIfBandwidthIfIndex, hwQoS=hwQoS, qosCqlIfName=qosCqlIfName, qosCQRunInfoQueNum=qosCQRunInfoQueNum, qosFIFOCurQueueLen=qosFIFOCurQueueLen, qosCqlIfTable=qosCqlIfTable, qosCQRunInfoQueDiscard=qosCQRunInfoQueDiscard, qosPqlProQueType=qosPqlProQueType, qosIFBandwidthRowStatus=qosIFBandwidthRowStatus, qosCqlIfListNum=qosCqlIfListNum, qosPqlIfIndex=qosPqlIfIndex, qosPqlDefaultTable=qosPqlDefaultTable, qosCARIfIndex=qosCARIfIndex, qosPqlQueLenQueueType=qosPqlQueLenQueueType, qosPQMiddleMaxQueLen=qosPQMiddleMaxQueLen, qosCAREntry=qosCAREntry, qosGTSPassByte=qosGTSPassByte)
