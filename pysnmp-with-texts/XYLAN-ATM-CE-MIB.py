#
# PySNMP MIB module XYLAN-ATM-CE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XYLAN-ATM-CE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:44:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, TimeTicks, ObjectIdentity, Integer32, Unsigned32, Counter32, iso, ModuleIdentity, MibIdentifier, NotificationType, Gauge32, Counter64, Bits, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "TimeTicks", "ObjectIdentity", "Integer32", "Unsigned32", "Counter32", "iso", "ModuleIdentity", "MibIdentifier", "NotificationType", "Gauge32", "Counter64", "Bits", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
xylanAtmArch, = mibBuilder.importSymbols("XYLAN-BASE-MIB", "xylanAtmArch")
atmxCesGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 4, 10))
atmxCesMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1))
atmxCesMIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 2))
atmxCesService = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 1))
atmxCesVccGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 2))
atmxCesVccStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 3))
atmxCesSvcConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 4))
atmxCesServiceTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 1, 1), )
if mibBuilder.loadTexts: atmxCesServiceTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesServiceTable.setDescription('This table defines ATM circuit emulation service configuration.')
atmxCesServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 1, 1, 1), ).setIndexNames((0, "XYLAN-ATM-CE-MIB", "atmxCesServiceSlotIndex"), (0, "XYLAN-ATM-CE-MIB", "atmxCesServicePortIndex"))
if mibBuilder.loadTexts: atmxCesServiceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesServiceEntry.setDescription('An entry in the table, containing information about service configuration of a service interface.')
atmxCesServiceSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCesServiceSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesServiceSlotIndex.setDescription('A unique value which identifies this HSM board slot.')
atmxCesServicePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCesServicePortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesServicePortIndex.setDescription('A unique value which identifies this port.')
atmxCesServiceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxCesServiceDescription.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesServiceDescription.setDescription('A description for this port.')
atmxCesServiceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxCesServiceAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesServiceAdminStatus.setDescription('The desired state of this interface.')
atmxCesServiceOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCesServiceOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesServiceOperStatus.setDescription('The current operational state of this interface.')
atmxCesServiceServiceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unstructured", 1), ("structured", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxCesServiceServiceMode.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesServiceServiceMode.setDescription('Define if this interface as structured or not. A structured(2) interface is some nx64 Kbps and passes data bits and signalling bits through the ATM network. An unstructured(2) passes all bits including framing bits through the ATM network.')
atmxCesServiceServiceClock = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("synchronous", 1), ("srts", 2), ("adaptive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxCesServiceServiceClock.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesServiceServiceClock.setDescription('This object defines service clocking mode of this interface.')
atmxCesServiceAvailTimeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 1, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCesServiceAvailTimeSlot.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesServiceAvailTimeSlot.setDescription("The availiable time slots of this interface. Each octet indicates an available time slot (1 to 32 decimal). It's terminated by an octet 0xFF if less than 32 time slots available.")
atmxCesVccTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 2, 1), )
if mibBuilder.loadTexts: atmxCesVccTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccTable.setDescription('A table of ATM virtual channel connections status and parameter information.')
atmxCesVccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 2, 1, 1), ).setIndexNames((0, "XYLAN-ATM-CE-MIB", "atmxCesVccSlotIndex"), (0, "XYLAN-ATM-CE-MIB", "atmxCesVccPortIndex"), (0, "XYLAN-ATM-CE-MIB", "atmxCesVccVci"))
if mibBuilder.loadTexts: atmxCesVccEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccEntry.setDescription('An entry in the table, containing information about the ATM circuit emulation virtual channel connections.')
atmxCesVccSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxCesVccSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccSlotIndex.setDescription('A unique value which identifies the HSM board slot of the service interface.')
atmxCesVccPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxCesVccPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccPortIndex.setDescription('A unique value which identifies the service interface port.')
atmxCesVccVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxCesVccVpi.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccVpi.setDescription('The virtual path identifier associated with this virtual connection.')
atmxCesVccVci = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxCesVccVci.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccVci.setDescription('The virtual channel identifier associated with the virtual connection.')
atmxCesVccAtmUplinkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxCesVccAtmUplinkSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccAtmUplinkSlotIndex.setDescription('A unique value which identifies the HSM board slot of the ATM uplink port.')
atmxCesVccAtmUplinkPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxCesVccAtmUplinkPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccAtmUplinkPortIndex.setDescription('A unique value which identifies the the ATM uplink port.')
atmxCesVccDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxCesVccDescription.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccDescription.setDescription('A description for this virtual connection.')
atmxCesVccAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxCesVccAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccAdminStatus.setDescription('The desired state of this virtual circuit. Status delete(3) deletes the virtual circuit.')
atmxCesVccOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCesVccOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccOperStatus.setDescription('The current operational state of this virtual circuit.')
atmxCesVccConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("pvc", 2), ("activeSvc", 3), ("passiveSvc", 4), ("initialSvc", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxCesVccConnType.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccConnType.setDescription("The type of ATM connectivity between associated CES IWF's. Valid values are: other - none of the types specified below. pvc - supporting connectivity is permanent virtual connection. activeSvc - attempt calls whenever non is established, passiveSvc - accept calls. initialSvc - attempt calls initially, but eventually cease")
atmxCesVccPartialFill = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 47))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxCesVccPartialFill.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccPartialFill.setDescription('If partial cell fill is used, the number of user octets per cell must be set with this parameter. Setting this parameter to zero disables partial cell fill, and causes all cells to be completely filled before they are sent.')
atmxCesVccBufMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxCesVccBufMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccBufMaxSize.setDescription('The maximum size of reassembly buffer in frames. In unstructured mode, a frame is 256 bits. In structured mode, a frame is number of time slots assigned to this virtual circuit. For examples, if 5 time slots assigned to this virtual circuit and this object is set to 50 then buffer size is 250 octets.')
atmxCesVccCDVT = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxCesVccCDVT.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccCDVT.setDescription('This object defines the maximum cell delay variation delay in frame increments that the reassembly process will tolerate in the cell stream without producing errors on the Circuit Emulation interface. In structured mode, a frame equates to 125 microseconds in T1 or E1. In unstructured mode, a frame equates to 256/rate seconds; where rate is the line rate of the Circuit Emulation interface.')
atmxCesVccCellLossIntegrationPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxCesVccCellLossIntegrationPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccCellLossIntegrationPeriod.setDescription('The time in seconds for the cell loss integration period. If one of more cells is lost for this period of time, then atmxCesVccCellLossStatus is set to loss(2).')
atmxCesVccIdleCode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxCesVccIdleCode.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccIdleCode.setDescription('The idle character sent to service emulation interface or to ATM uplink if data is not available.')
atmxCesVccTimeSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 2, 1, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxCesVccTimeSlots.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccTimeSlots.setDescription("The list of time slots configured for this virtual circuit. Each octet indicates an available time slot (1 to 32 decimal). It's terminated by an octet 0xFF if less than 32 time slots. If this object only contains octet 0xff then all free time slots of this port are assigned.")
atmxCesVccAtmUplinkVccVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxCesVccAtmUplinkVccVpi.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccAtmUplinkVccVpi.setDescription("The virtual path identifier associated with the ATM uplink port's virtual connection.")
atmxCesVccAtmUplinkVccVci = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxCesVccAtmUplinkVccVci.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccAtmUplinkVccVci.setDescription("The virtual channel identifier associated with the ATM uplink port's virtual connection.")
atmxCesVccLocalAtmAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 2, 1, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxCesVccLocalAtmAddr.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccLocalAtmAddr.setDescription('The ATM address of the local CES IWF process. This object is a 20 bytes hex number.')
atmxCesVccStatsTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 3, 1), )
if mibBuilder.loadTexts: atmxCesVccStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccStatsTable.setDescription('The Circuit Emulation Service statistical data table for virtual circuits.')
atmxCesVccStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 3, 1, 1), ).setIndexNames((0, "XYLAN-ATM-CE-MIB", "atmxCesVccStatsSlotIndex"), (0, "XYLAN-ATM-CE-MIB", "atmxCesVccStatsPortIndex"), (0, "XYLAN-ATM-CE-MIB", "atmCesVccStatsVci"))
if mibBuilder.loadTexts: atmxCesVccStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccStatsEntry.setDescription('An entry in the table, containing statistics of CES virtual connection.')
atmxCesVccStatsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCesVccStatsSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccStatsSlotIndex.setDescription('A unique value which identifies this HSM board slot.')
atmxCesVccStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCesVccStatsPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccStatsPortIndex.setDescription('A unique value which identifies this port.')
atmCesVccStatsVci = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmCesVccStatsVci.setStatus('mandatory')
if mibBuilder.loadTexts: atmCesVccStatsVci.setDescription('The virtual channel identifier associated with the virtual connection.')
atmxCesVccStatsTxDataCells = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCesVccStatsTxDataCells.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccStatsTxDataCells.setDescription('The total number of successfully transmitted cells which assembled from actual data instead of conditioned data.')
atmxCesVccStatsTxCondCells = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCesVccStatsTxCondCells.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccStatsTxCondCells.setDescription('The total number of successfully transmitted cells which assembled from conditioned data.')
atmxCesVccStatsSuppressedTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCesVccStatsSuppressedTxCells.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccStatsSuppressedTxCells.setDescription('The total number of cells that are not sent because of line resynchronization.')
atmxCesVccStatsRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCesVccStatsRxCells.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccStatsRxCells.setDescription('The total number of cells received and played out to circuit emulation port.')
atmxCesVccStatsSnpErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCesVccStatsSnpErrors.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccStatsSnpErrors.setDescription('The total number of cells received with uncorrectable Sequence Number Protection (SNP).')
atmxCesVccStatsSeqNumErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCesVccStatsSeqNumErrors.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccStatsSeqNumErrors.setDescription('The total number of cells received with unexpected sequence number.')
atmxCesVccStatsDroppedRxCellUnderrun = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCesVccStatsDroppedRxCellUnderrun.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccStatsDroppedRxCellUnderrun.setDescription('The total number of cells dropped due to receive queue underrun.')
atmxCesVccStatsDroppedRxCellOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCesVccStatsDroppedRxCellOverrun.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccStatsDroppedRxCellOverrun.setDescription('The total number of cells dropped due to receive queue overrun.')
atmxCesVccStatsCellLossStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noLoss", 1), ("loss", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCesVccStatsCellLossStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccStatsCellLossStatus.setDescription('When cells are lost for the number of milliseconds specified be atmxCesVccCellLossIntegrationPeriod, the value is set to loss(2). When cells are no longer lost, the value is set to noLoss(1).')
atmxCesVccRateTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 3, 2), )
if mibBuilder.loadTexts: atmxCesVccRateTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccRateTable.setDescription('The Circuit Emulation Service statistical rate for virtual circuits.')
atmxCesVccRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 3, 2, 1), ).setIndexNames((0, "XYLAN-ATM-CE-MIB", "atmxCesVccRateSlotIndex"), (0, "XYLAN-ATM-CE-MIB", "atmxCesVccRatePortIndex"), (0, "XYLAN-ATM-CE-MIB", "atmCesVccRateVci"))
if mibBuilder.loadTexts: atmxCesVccRateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccRateEntry.setDescription('An entry in the table, containing statistical rate of CES virtual connection.')
atmxCesVccRateSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCesVccRateSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccRateSlotIndex.setDescription('A unique value which identifies this HSM board slot.')
atmxCesVccRatePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCesVccRatePortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccRatePortIndex.setDescription('A unique value which identifies this port.')
atmCesVccRateVci = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmCesVccRateVci.setStatus('mandatory')
if mibBuilder.loadTexts: atmCesVccRateVci.setDescription('The virtual channel identifier associated with the virtual connection.')
atmxCesVccRateTxDataCells = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCesVccRateTxDataCells.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccRateTxDataCells.setDescription('The rate of successfully transmitted cells which assembled from actual data instead of conditioned data.')
atmxCesVccRateTxCondCells = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCesVccRateTxCondCells.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccRateTxCondCells.setDescription('The rate of successfully transmitted cells which assembled from conditioned data.')
atmxCesVccRateSuppressedTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCesVccRateSuppressedTxCells.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccRateSuppressedTxCells.setDescription('The rate of cells that are not sent because of line resynchronization.')
atmxCesVccRateRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCesVccRateRxCells.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccRateRxCells.setDescription('The rate of cells received and played out to circuit emulation port.')
atmxCesVccRateSnpErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCesVccRateSnpErrors.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccRateSnpErrors.setDescription('The rate of cells received with uncorrectable Sequence Number Protection (SNP).')
atmxCesVccRateSeqNumErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCesVccRateSeqNumErrors.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccRateSeqNumErrors.setDescription('The rate of cells received with unexpected sequence number.')
atmxCesVccRateDroppedRxCellUnderrun = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCesVccRateDroppedRxCellUnderrun.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccRateDroppedRxCellUnderrun.setDescription('The rate of cells dropped due to receive queue underrun.')
atmxCesVccRateDroppedRxCellOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCesVccRateDroppedRxCellOverrun.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesVccRateDroppedRxCellOverrun.setDescription('The rate of cells dropped due to receive queue overrun.')
atmxCesSvcConfigTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 4, 1), )
if mibBuilder.loadTexts: atmxCesSvcConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesSvcConfigTable.setDescription('The table used to manage SVCs established across ATM networks between CES entities.')
atmxCesSvcConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 4, 1, 1), ).setIndexNames((0, "XYLAN-ATM-CE-MIB", "atmxCesSvcSlotIndex"), (0, "XYLAN-ATM-CE-MIB", "atmxCesSvcPortIndex"), (0, "XYLAN-ATM-CE-MIB", "atmxCesSvcVciIndex"))
if mibBuilder.loadTexts: atmxCesSvcConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesSvcConfigEntry.setDescription('An entry in the CES SVC table.')
atmxCesSvcSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCesSvcSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesSvcSlotIndex.setDescription('A unique value which identifies this HSM board slot.')
atmxCesSvcPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCesSvcPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesSvcPortIndex.setDescription('A unique value which identifies this port.')
atmxCesSvcVciIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCesSvcVciIndex.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesSvcVciIndex.setDescription('The virtual channel identifier associated with the virtual connection.')
atmxCesSvcRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 4, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxCesSvcRemoteAddr.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesSvcRemoteAddr.setDescription('The ATM address supporting the corresponding far end CES IWF process. If no address is supplied, no attempts to establish the active SVC are initiated.')
atmxCesSvcRemoteVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 4, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxCesSvcRemoteVpi.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesSvcRemoteVpi.setDescription('The VPI number of the corresponding far end CES IWF process')
atmxCesSvcRemoteVci = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 4, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxCesSvcRemoteVci.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesSvcRemoteVci.setDescription('The VCI number of the corresponding far end CES IWF process')
atmxCesSvcFirstRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 36000)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxCesSvcFirstRetryInterval.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesSvcFirstRetryInterval.setDescription('The time (in 10ths of a second unit) to wait before attempting to establish the SVC after the first failed call attempt. Zero represents an infinite interval indicating no retries.')
atmxCesSvcRetryTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCesSvcRetryTimer.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesSvcRetryTimer.setDescription('Indicates the current value of the retry timer (in seconds) for this connection. When the value reaches zero an attempt will be made to establish the active SVC. When the timer is not running, the value zero shall be returned.')
atmxCesSvcRetryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxCesSvcRetryLimit.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesSvcRetryLimit.setDescription("Sets a maximum limit on how many consecutive unsuccessful call setup attempts can be made before stopping the attempt to set up the connection. If this limit is reached then management action will be required (e.g. setting atmxCesSvcConfigRestart to 'restart') to initiate a new attempt to establish the connection. A value of zero indicates no limit - the attempts will continue until successful. If this object is not present, no limit on call attempts is assumed.")
atmxCesSvcRetryFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 4, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCesSvcRetryFailures.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesSvcRetryFailures.setDescription('Indicates how many attempts to establish the connection have failed. This count is reset whenever a connection is successfully established or the active SVC is restarted.')
atmxCesSvcConfigRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atmxCesSvcConfigRestart.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesSvcConfigRestart.setDescription("When the value is set to 'restart' the active SVC is released if necessary and a new setup procedure is begun. As a result of this action, the atmxCesSvcConfigOperStatus object transitions to 'establishmentInProgress' (if not already in this state) and the atmxCesRetryFailures object is cleared. When the value is set to 'noop' no operation is performed. When read, the value 'noop' is returned.")
atmxCesSvcConfigOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("establishmentInProgress", 2), ("connected", 3), ("retriesExhausted", 4), ("noAddressSupplied", 5), ("lowerLayerDown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCesSvcConfigOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesSvcConfigOperStatus.setDescription("Describes the status of the active SVC. Valid values are: other - none of the types specified below establishmentInProgress - connection is not operational, but call attempts are ongoing connected - connection is currently operational retriesExhausted - retry limit has been reached and call attempts have ceased noAddressSupplied - no remote address has been configured, so no call attempts are initiated lowerLayerDown - underlying CES IWF is not operational When the entry is not 'active', the value of this object is 'other'.")
atmxCesSvcLastReleaseCause = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCesSvcLastReleaseCause.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesSvcLastReleaseCause.setDescription('Value of the Cause field of the Cause information element in the last RELEASE signalling message received for this SVC. Indicates the reason for the release.')
atmxCesSvcLastReleaseDiagnostics = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 1, 4, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: atmxCesSvcLastReleaseDiagnostics.setStatus('mandatory')
if mibBuilder.loadTexts: atmxCesSvcLastReleaseDiagnostics.setDescription('Value of the first 8 bytes of diagnostic information from the Cause field of the Cause information element in the last RELEASE signalling message received for this active SVC.')
atmxCesVccTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 2, 1))
atmCesVccCreate = NotificationType((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 2, 1) + (0,1)).setObjects(("XYLAN-ATM-CE-MIB", "atmxCesVccSlotIndex"), ("XYLAN-ATM-CE-MIB", "atmxCesVccPortIndex"), ("XYLAN-ATM-CE-MIB", "atmxCesVccVpi"), ("XYLAN-ATM-CE-MIB", "atmxCesVccVci"), ("XYLAN-ATM-CE-MIB", "atmxCesVccAtmUplinkSlotIndex"), ("XYLAN-ATM-CE-MIB", "atmxCesVccAtmUplinkPortIndex"))
if mibBuilder.loadTexts: atmCesVccCreate.setDescription('The ATM circuit emulation virtual circuit is created.')
atmCesVccDelete = NotificationType((1, 3, 6, 1, 4, 1, 800, 2, 4, 10, 2, 1) + (0,2)).setObjects(("XYLAN-ATM-CE-MIB", "atmxCesVccSlotIndex"), ("XYLAN-ATM-CE-MIB", "atmxCesVccPortIndex"), ("XYLAN-ATM-CE-MIB", "atmxCesVccVpi"), ("XYLAN-ATM-CE-MIB", "atmxCesVccVci"), ("XYLAN-ATM-CE-MIB", "atmxCesVccAtmUplinkSlotIndex"), ("XYLAN-ATM-CE-MIB", "atmxCesVccAtmUplinkPortIndex"))
if mibBuilder.loadTexts: atmCesVccDelete.setDescription('The ATM circuit emulation virtual circuit is deleted.')
mibBuilder.exportSymbols("XYLAN-ATM-CE-MIB", atmxCesVccStatsRxCells=atmxCesVccStatsRxCells, atmxCesServiceTable=atmxCesServiceTable, atmxCesVccConnType=atmxCesVccConnType, atmxCesVccStatsTable=atmxCesVccStatsTable, atmCesVccCreate=atmCesVccCreate, atmxCesSvcLastReleaseCause=atmxCesSvcLastReleaseCause, atmxCesServiceAvailTimeSlot=atmxCesServiceAvailTimeSlot, atmxCesVccRateDroppedRxCellOverrun=atmxCesVccRateDroppedRxCellOverrun, atmxCesMIBTraps=atmxCesMIBTraps, atmxCesVccStatsGroup=atmxCesVccStatsGroup, atmxCesVccAdminStatus=atmxCesVccAdminStatus, atmCesVccRateVci=atmCesVccRateVci, atmxCesVccAtmUplinkVccVpi=atmxCesVccAtmUplinkVccVpi, atmxCesVccRateSuppressedTxCells=atmxCesVccRateSuppressedTxCells, atmCesVccStatsVci=atmCesVccStatsVci, atmxCesVccCellLossIntegrationPeriod=atmxCesVccCellLossIntegrationPeriod, atmxCesVccCDVT=atmxCesVccCDVT, atmxCesVccBufMaxSize=atmxCesVccBufMaxSize, atmxCesVccRateTxCondCells=atmxCesVccRateTxCondCells, atmxCesServiceDescription=atmxCesServiceDescription, atmxCesVccIdleCode=atmxCesVccIdleCode, atmxCesVccStatsEntry=atmxCesVccStatsEntry, atmxCesVccRateEntry=atmxCesVccRateEntry, atmxCesVccRateRxCells=atmxCesVccRateRxCells, atmxCesSvcFirstRetryInterval=atmxCesSvcFirstRetryInterval, atmxCesVccStatsSlotIndex=atmxCesVccStatsSlotIndex, atmxCesServiceSlotIndex=atmxCesServiceSlotIndex, atmxCesGroup=atmxCesGroup, atmxCesServiceOperStatus=atmxCesServiceOperStatus, atmxCesServiceServiceMode=atmxCesServiceServiceMode, atmCesVccDelete=atmCesVccDelete, atmxCesSvcRemoteVci=atmxCesSvcRemoteVci, atmxCesVccStatsSnpErrors=atmxCesVccStatsSnpErrors, atmxCesVccRatePortIndex=atmxCesVccRatePortIndex, atmxCesVccTimeSlots=atmxCesVccTimeSlots, atmxCesVccOperStatus=atmxCesVccOperStatus, atmxCesSvcPortIndex=atmxCesSvcPortIndex, atmxCesSvcConfigEntry=atmxCesSvcConfigEntry, atmxCesSvcRetryFailures=atmxCesSvcRetryFailures, atmxCesMIBObjects=atmxCesMIBObjects, atmxCesSvcConfigOperStatus=atmxCesSvcConfigOperStatus, atmxCesVccAtmUplinkPortIndex=atmxCesVccAtmUplinkPortIndex, atmxCesVccStatsCellLossStatus=atmxCesVccStatsCellLossStatus, atmxCesSvcLastReleaseDiagnostics=atmxCesSvcLastReleaseDiagnostics, atmxCesVccRateSeqNumErrors=atmxCesVccRateSeqNumErrors, atmxCesSvcRetryLimit=atmxCesSvcRetryLimit, atmxCesVccAtmUplinkSlotIndex=atmxCesVccAtmUplinkSlotIndex, atmxCesVccSlotIndex=atmxCesVccSlotIndex, atmxCesVccVci=atmxCesVccVci, atmxCesSvcSlotIndex=atmxCesSvcSlotIndex, atmxCesVccLocalAtmAddr=atmxCesVccLocalAtmAddr, atmxCesVccStatsDroppedRxCellOverrun=atmxCesVccStatsDroppedRxCellOverrun, atmxCesVccAtmUplinkVccVci=atmxCesVccAtmUplinkVccVci, atmxCesVccTable=atmxCesVccTable, atmxCesSvcVciIndex=atmxCesSvcVciIndex, atmxCesServiceAdminStatus=atmxCesServiceAdminStatus, atmxCesVccStatsTxDataCells=atmxCesVccStatsTxDataCells, atmxCesVccRateTable=atmxCesVccRateTable, atmxCesServicePortIndex=atmxCesServicePortIndex, atmxCesVccPartialFill=atmxCesVccPartialFill, atmxCesSvcRetryTimer=atmxCesSvcRetryTimer, atmxCesService=atmxCesService, atmxCesServiceEntry=atmxCesServiceEntry, atmxCesSvcConfigTable=atmxCesSvcConfigTable, atmxCesVccStatsSeqNumErrors=atmxCesVccStatsSeqNumErrors, atmxCesVccStatsSuppressedTxCells=atmxCesVccStatsSuppressedTxCells, atmxCesVccRateSnpErrors=atmxCesVccRateSnpErrors, atmxCesServiceServiceClock=atmxCesServiceServiceClock, atmxCesSvcRemoteVpi=atmxCesSvcRemoteVpi, atmxCesVccTraps=atmxCesVccTraps, atmxCesVccPortIndex=atmxCesVccPortIndex, atmxCesVccRateDroppedRxCellUnderrun=atmxCesVccRateDroppedRxCellUnderrun, atmxCesVccRateSlotIndex=atmxCesVccRateSlotIndex, atmxCesSvcRemoteAddr=atmxCesSvcRemoteAddr, atmxCesVccGroup=atmxCesVccGroup, atmxCesVccDescription=atmxCesVccDescription, atmxCesVccStatsTxCondCells=atmxCesVccStatsTxCondCells, atmxCesSvcConfigGroup=atmxCesSvcConfigGroup, atmxCesVccStatsPortIndex=atmxCesVccStatsPortIndex, atmxCesSvcConfigRestart=atmxCesSvcConfigRestart, atmxCesVccStatsDroppedRxCellUnderrun=atmxCesVccStatsDroppedRxCellUnderrun, atmxCesVccRateTxDataCells=atmxCesVccRateTxDataCells, atmxCesVccVpi=atmxCesVccVpi, atmxCesVccEntry=atmxCesVccEntry)
