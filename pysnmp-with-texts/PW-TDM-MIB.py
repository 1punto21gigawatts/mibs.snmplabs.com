#
# PySNMP MIB module PW-TDM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PW-TDM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:42:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
pwIndex, = mibBuilder.importSymbols("PW-STD-MIB", "pwIndex")
PwCfgIndexOrzero, = mibBuilder.importSymbols("PW-TC-STD-MIB", "PwCfgIndexOrzero")
PerfCurrentCount, PerfIntervalCount = mibBuilder.importSymbols("PerfHist-TC-MIB", "PerfCurrentCount", "PerfIntervalCount")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Integer32, Unsigned32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, mib_2, Gauge32, TimeTicks, Bits, Counter32, ObjectIdentity, Counter64, IpAddress, NotificationType, MibIdentifier, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Unsigned32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "mib-2", "Gauge32", "TimeTicks", "Bits", "Counter32", "ObjectIdentity", "Counter64", "IpAddress", "NotificationType", "MibIdentifier", "ModuleIdentity")
RowStatus, DisplayString, TimeStamp, TextualConvention, StorageType, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TimeStamp", "TextualConvention", "StorageType", "TruthValue")
pwTDMMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 186))
pwTDMMIB.setRevisions(('2009-06-15 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: pwTDMMIB.setRevisionsDescriptions(('Initial version published as part of RFC 5604.',))
if mibBuilder.loadTexts: pwTDMMIB.setLastUpdated('200906150000Z')
if mibBuilder.loadTexts: pwTDMMIB.setOrganization('Pseudo-Wire Emulation Edge-to-Edge (PWE3) Working Group')
if mibBuilder.loadTexts: pwTDMMIB.setContactInfo(' Orly Nicklass Postal: RADVISION Ltd. 24Raul Wallenberg St. Tel Aviv, Israel Email: orlyn@radvision.com The PWE3 Working Group (email distribution pwe3@ietf.org, http://www.ietf.org/html.charters/pwe3-charter.html) ')
if mibBuilder.loadTexts: pwTDMMIB.setDescription("This MIB contains managed object definitions for encapsulating TDM (T1,E1, T3, E3, NxDS0) as pseudo-wires over packet-switching networks (PSN). This MIB supplements the PW-STD-MIB as in: Zelig, D., Nadeau, T. 'Pseudowire (PW) Management Information Base'. The PW-STD-MIB contains structures and MIB associations generic to pseudowire (PW) emulation. PW-specific MIBs (such as this) contain config and stats for specific PW types. Copyright (c) 2009 IETF Trust and the persons identified as authors of the code. All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met: - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. - Neither the name of Internet Society, IETF or IETF Trust, nor the names of specific contributors, may be used to endorse or promote products derived from this software without specific prior written permission. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. This version of this MIB module is part of RFC 5604; see the RFC itself for full legal notices. ")
class PwTDMCfgIndex(TextualConvention, Unsigned32):
    description = 'Index into the relevant pwXXXCfgTable.'
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

pwTDMNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 186, 0))
pwTDMObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 186, 1))
pwTDMConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 186, 2))
pwTDMTable = MibTable((1, 3, 6, 1, 2, 1, 186, 1, 1), )
if mibBuilder.loadTexts: pwTDMTable.setStatus('current')
if mibBuilder.loadTexts: pwTDMTable.setDescription('This table contains basic information including the ifIndex and pointers to entries in the relevant TDM config tables for this TDM PW.')
pwTDMEntry = MibTableRow((1, 3, 6, 1, 2, 1, 186, 1, 1, 1), ).setIndexNames((0, "PW-STD-MIB", "pwIndex"))
if mibBuilder.loadTexts: pwTDMEntry.setStatus('current')
if mibBuilder.loadTexts: pwTDMEntry.setDescription('This table is indexed by the same index that was created for the associated entry in the PW Table (in the PW-STD-MIB). - The PwIndex. An entry is created in this table by the agent for every entry in the pwTable with a pwType equal to one of the following: e1Satop(17), t1Satop(18), e3Satop(19), t3Satop(20), basicCesPsn(21), basicTdmIp(22), tdmCasCesPsn(23), or tdmCasTdmIp(24). Unless otherwise specified, all writeable objects in this table MUST NOT be changed after row activation in the generic pwTable (see [PWMIB]) and values must persist after reboot.')
pwTDMRate = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 1, 1, 1), Integer32().clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwTDMRate.setReference('TDMCP-EXT')
if mibBuilder.loadTexts: pwTDMRate.setStatus('current')
if mibBuilder.loadTexts: pwTDMRate.setDescription("The parameter represents the bit-rate of the TDM service in multiples of the 'basic' 64 Kbit/s rate [TDMCP-EXT]. It complements the definition of pwType used in PW-STD-MIB. For structure-agnostic mode, the following should be used: a) (Structure-Agnostic TDM over Packet) Satop E1 - 32 b) Satop T1 emulation: i) MUST be set to 24 in the basic emulation mode ii) MUST be set to 25 for the 'Octet-aligned T1' emulation mode c) Satop E3 - 535 d) Satop T3 - 699 For all kinds of structure-aware emulation, this parameter MUST be set to N where N is the number of DS0 channels in the corresponding attachment circuit.")
pwTDMIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 1, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwTDMIfIndex.setStatus('current')
if mibBuilder.loadTexts: pwTDMIfIndex.setDescription('This is a unique index within the ifTable. It represents the interface index of the full link or the interface index for the bundle holding the group of time slots to be transmitted via this PW connection. A value of zero indicates an interface index that has yet to be determined. Once set, if the TDM ifIndex is (for some reason) later removed, the agent SHOULD delete the associated PW rows (e.g., this pwTDMTable entry). If the agent does not delete the rows, the agent MUST set this object to zero.')
pwGenTDMCfgIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 1, 1, 3), PwCfgIndexOrzero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwGenTDMCfgIndex.setStatus('current')
if mibBuilder.loadTexts: pwGenTDMCfgIndex.setDescription('Index to the generic parameters in the TDM configuration table that appears in this MIB module. It is likely that multiple TDM PWs of the same characteristic will share a single TDM Cfg entry.')
pwRelTDMCfgIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 1, 1, 4), PwCfgIndexOrzero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwRelTDMCfgIndex.setStatus('current')
if mibBuilder.loadTexts: pwRelTDMCfgIndex.setDescription('Index to the relevant TDM configuration table entry that appears in one of the related MIB modules such as TDMoIP or CESoPSN. It is likely that multiple TDM PWs of the same characteristic will share a single configuration entry of the relevant type. The value 0 implies no entry in other related MIBs.')
pwTDMConfigError = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 1, 1, 5), Bits().clone(namedValues=NamedValues(("notApplicable", 0), ("tdmTypeIncompatible", 1), ("peerRtpIncompatible", 2), ("peerPayloadSizeIncompatible", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTDMConfigError.setStatus('current')
if mibBuilder.loadTexts: pwTDMConfigError.setDescription('Any of the bits are set if the local configuration is not compatible with the peer configuration as available from the various parameters options. Setting is done based on signaling, or else value (0) will be set. -tdmTypeIncompatible bit is set if the local configuration is not carrying the same TDM type as the peer configuration. -peerRtpIncompatible bit is set if the local configuration is configured to send RTP packets for this PW, and the remote is not capable of accepting RTP packets. -peerPayloadSizeIncompatible bit is set if the local configuration is not carrying the same Payload Size as the peer configuration.')
pwTDMTimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTDMTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: pwTDMTimeElapsed.setDescription("The number of seconds, including partial seconds, that have elapsed since the beginning of the current measurement period. If, for some reason, such as an adjustment in the system's time-of-day clock, the current interval exceeds the maximum value, the agent will return the maximum value.")
pwTDMValidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTDMValidIntervals.setStatus('current')
if mibBuilder.loadTexts: pwTDMValidIntervals.setDescription('The number of previous 15-minute intervals for which data was collected. An agent with TDM capability must be capable of supporting at least n intervals. The minimum value of n is 4. The default of n is 32 and the maximum value of n is 96. The value will be n unless the measurement was (re-) started within the last (n*15) minutes, in which case, the value will be the number of complete 15-minute intervals for which the agent has at least some data. In certain cases (e.g., in the case where the agent is a proxy), it is possible that some intervals are unavailable. In this case, this interval is the maximum interval number for which data is available.')
pwTDMValidDayIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTDMValidDayIntervals.setStatus('current')
if mibBuilder.loadTexts: pwTDMValidDayIntervals.setDescription('The number of previous days for which data was collected. An agent with TDM capability must be capable of supporting at least n intervals. The minimum value of n is 1. The default of n is 1 and the maximum value of n is 30.')
pwTDMLastEsTimeStamp = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 1, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTDMLastEsTimeStamp.setStatus('current')
if mibBuilder.loadTexts: pwTDMLastEsTimeStamp.setDescription('The value of sysUpTime at the most recent occasion at which the TDM PW entered the ES or SES state.')
pwTDMCfgIndexNext = MibScalar((1, 3, 6, 1, 2, 1, 186, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTDMCfgIndexNext.setStatus('current')
if mibBuilder.loadTexts: pwTDMCfgIndexNext.setDescription('This object contains the value to be used for pwTDMCfgIndex when creating entries in the pwTDMCfgTable. The value 0 indicates that no unassigned entries are available. To obtain the value of pwTDMCfgIndexNext for a new entry in the pwTDMCfgTable, the manager issues a management protocol retrieval operation. The agent will determine through its local policy when this index value will be made available for reuse.')
pwTDMCfgTable = MibTable((1, 3, 6, 1, 2, 1, 186, 1, 3), )
if mibBuilder.loadTexts: pwTDMCfgTable.setStatus('current')
if mibBuilder.loadTexts: pwTDMCfgTable.setDescription('This table contains a set of parameters that may be referenced by one or more TDM PWs in pwTDMTable.')
pwTDMCfgEntry = MibTableRow((1, 3, 6, 1, 2, 1, 186, 1, 3, 1), ).setIndexNames((0, "PW-TDM-MIB", "pwTDMCfgIndex"))
if mibBuilder.loadTexts: pwTDMCfgEntry.setStatus('current')
if mibBuilder.loadTexts: pwTDMCfgEntry.setDescription('These parameters define the characteristics of a TDM PW. They are grouped here to ease NMS burden. Once an entry is created here it may be re-used by many PWs. Unless otherwise specified, all objects in this table MUST NOT be changed after row activation (see [PWMIB]).')
pwTDMCfgIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 3, 1, 1), PwTDMCfgIndex())
if mibBuilder.loadTexts: pwTDMCfgIndex.setStatus('current')
if mibBuilder.loadTexts: pwTDMCfgIndex.setDescription('Index to an entry in this table. When an NMS creates a new entry/row in this table, it best makes use of the value of the pwTDMCfgIndexNext object in order to find a free or available index value.')
pwTDMCfgRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTDMCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: pwTDMCfgRowStatus.setDescription('Object used for creating, modifying, and deleting a row from this table. The following objects cannot be modified if the entry is in use and the status is active: pwTDMCfgPayloadSize, pwTDMCfgRtpHdrUsed, pwTDMCfgJtrBfrDepth, and pwTDMCfgPayloadSuppression. The row cannot be deleted if the entry is in use.')
pwTDMCfgPayloadSize = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTDMCfgPayloadSize.setStatus('current')
if mibBuilder.loadTexts: pwTDMCfgPayloadSize.setDescription('The value of this object indicates the PayLoad Size (in bytes) to be defined during the PW setUp. Upon TX, implementation must be capable of carrying that amount of bytes. Upon RX, when the Low Entry Networking (LEN) field is set to 0, the payload of packet MUST assume this size, and if the actual packet size is inconsistent with this length, the packet MUST be considered to be malformed.')
pwTDMCfgPktReorder = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 3, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTDMCfgPktReorder.setStatus('current')
if mibBuilder.loadTexts: pwTDMCfgPktReorder.setDescription('If set to True: as CE-bound packets are queued in the jitter buffer, out of order packets are re-ordered. The maximum sequence number differential (i.e., the range in which re-sequencing can occur) is dependant on the depth of the jitter buffer. See pwTDMCfgJtrBfrDepth. NOTE: Some implementations may not support this feature. The agent should then reject a SET request for true.')
pwTDMCfgRtpHdrUsed = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 3, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTDMCfgRtpHdrUsed.setReference('SATOP')
if mibBuilder.loadTexts: pwTDMCfgRtpHdrUsed.setStatus('current')
if mibBuilder.loadTexts: pwTDMCfgRtpHdrUsed.setDescription('If set to False: an RTP header is not pre-pended to the TDM packet.')
pwTDMCfgJtrBfrDepth = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 3, 1, 7), Unsigned32().clone(3000)).setUnits('microsecond').setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTDMCfgJtrBfrDepth.setStatus('current')
if mibBuilder.loadTexts: pwTDMCfgJtrBfrDepth.setDescription("The size of this buffer SHOULD be locally configured to allow accommodation to the PSN-specific packet delay variation. If configured to a value not supported by the implementation, the agent MUST return an error code 'jtrBfrDepth' in 'pwTDMConfigError'. NOTE: jitter buffers are a limited resource to be managed. The actual size should be at least twice as big as the value of pwTDMCfgJtrBfrDepth.")
pwTDMCfgPayloadSuppression = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTDMCfgPayloadSuppression.setStatus('current')
if mibBuilder.loadTexts: pwTDMCfgPayloadSuppression.setDescription("Selecting 'enable' means: Payload suppression is allowed. Payload MAY be omitted in order to conserve bandwidth. Selecting 'disable' means: No suppression under any condition. Object MAY be changed at any time.")
pwTDMCfgConsecPktsInSynch = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 3, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTDMCfgConsecPktsInSynch.setReference('SATOP')
if mibBuilder.loadTexts: pwTDMCfgConsecPktsInSynch.setStatus('current')
if mibBuilder.loadTexts: pwTDMCfgConsecPktsInSynch.setDescription('The number of consecutive packets with sequential sequence numbers that are required to exit the LOPS. Object MAY be changed only when the related PW is defined as not active.')
pwTDMCfgConsecMissPktsOutSynch = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 3, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTDMCfgConsecMissPktsOutSynch.setReference('SATOP')
if mibBuilder.loadTexts: pwTDMCfgConsecMissPktsOutSynch.setStatus('current')
if mibBuilder.loadTexts: pwTDMCfgConsecMissPktsOutSynch.setDescription('The number of consecutive missing packets that are required to enter the LOPS. Object MAY be changed only when the related PW is defined as not active.')
pwTDMCfgSetUp2SynchTimeOut = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 3, 1, 11), Unsigned32().clone(5000)).setUnits('millisecond').setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTDMCfgSetUp2SynchTimeOut.setStatus('current')
if mibBuilder.loadTexts: pwTDMCfgSetUp2SynchTimeOut.setDescription("The amount of time the host should wait before declaring the pseudowire in a down state, if the number of consecutive TDM packets that have been received after changing the administrative status to up and after finalization of signaling (if supported) between the two PEs is smaller than pwTDMCfgConsecPktsInSynch. Once the PW has OperStatus of 'up', this parameter is no longer valid. This parameter is defined to ensure that the host does not prematurely inform failure of the PW. In particular, PW 'down' notifications should not be sent before expiration of this timer. This parameter is valid only after administrative changes of the status of the PW. If the PW fails due to network impairments, a 'down' notification should be sent. Object MAY be changed only when the related PW is defined as not active.")
pwTDMCfgPktReplacePolicy = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("allOnes", 1), ("implementationSpecific", 2), ("filler", 3))).clone('allOnes')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTDMCfgPktReplacePolicy.setStatus('current')
if mibBuilder.loadTexts: pwTDMCfgPktReplacePolicy.setDescription('This parameter determines the value to be played when CE bound packets over/underflow the jitter buffer, or are missing for any reason. This byte pattern is sent (played) on the TDM line. Selecting implementationSpecific(2) implies an agent-specific algorithm. Selecting filler(3) requires the setting of pwTDMCfgPktFiller. Object MAY be changed only when the related PW is defined as not active.')
pwTDMCfgAvePktLossTimeWindow = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 3, 1, 13), Integer32()).setUnits('millisecond').setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTDMCfgAvePktLossTimeWindow.setStatus('current')
if mibBuilder.loadTexts: pwTDMCfgAvePktLossTimeWindow.setDescription('The length of time over which the average packet loss rate should be computed to detect excessive packet loss rate. Object MAY be changed only when the related PW is defined as not active.')
pwTDMCfgExcessivePktLossThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 3, 1, 14), Unsigned32()).setUnits('Percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTDMCfgExcessivePktLossThreshold.setStatus('current')
if mibBuilder.loadTexts: pwTDMCfgExcessivePktLossThreshold.setDescription('Excessive packet loss rate is detected by computing the average packet-loss rate over a pwTDMCfgAvePktLossTimeWindow amount of time and comparing it with this threshold value. The rate is expressed in percentage. Object MAY be changed only when the related PW is defined as not active.')
pwTDMCfgAlarmThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 3, 1, 15), Unsigned32().clone(2500)).setUnits('milisec').setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTDMCfgAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: pwTDMCfgAlarmThreshold.setDescription('Alarms are only reported when the defect state persists for the length of time specified by this object. Object MAY be changed only when the related PW is defined as not active.')
pwTDMCfgClearAlarmThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 3, 1, 16), Unsigned32().clone(10000)).setUnits('milisec').setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTDMCfgClearAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: pwTDMCfgClearAlarmThreshold.setDescription('Alarm MUST be cleared after the corresponding defect is undetected for the amount of time specified by this object. Object MAY be changed only when the related PW is defined as not active.')
pwTDMCfgMissingPktsToSes = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 3, 1, 17), Unsigned32().clone(30)).setUnits('Percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTDMCfgMissingPktsToSes.setStatus('current')
if mibBuilder.loadTexts: pwTDMCfgMissingPktsToSes.setDescription('Percent of missing packets detected (consecutive or not) within a 1-second window to cause a Severely Error Second (SES) to be counted. Object MAY be changed only when the related PW is defined as not active.')
pwTDMCfgTimestampMode = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("absolute", 2), ("differential", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTDMCfgTimestampMode.setStatus('current')
if mibBuilder.loadTexts: pwTDMCfgTimestampMode.setDescription('Timestamp generation MAY be used in one of the following modes: 1. Absolute mode: The PSN-bound IWF sets timestamps using the clock recovered from the incoming TDM attachment circuit. As a consequence, the timestamps are closely correlated with the sequence numbers. All TDM implementations that support usage of the RTP header MUST support this mode. 2. Differential mode: Both IWFs have access to a common high- quality timing source, and this source is used for timestamp generation. Support of this mode is OPTIONAL. Object MAY be changed only when the related PW is defined as not active.')
pwTDMCfgStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 3, 1, 19), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTDMCfgStorageType.setStatus('current')
if mibBuilder.loadTexts: pwTDMCfgStorageType.setDescription('This variable indicates the storage type for this row. Conceptual rows having the value permanent(4) must allow write-access to all columnar objects.')
pwTDMCfgPktFiller = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 3, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTDMCfgPktFiller.setStatus('current')
if mibBuilder.loadTexts: pwTDMCfgPktFiller.setDescription('Filler byte pattern played out on the TDM interface if pwTDMCfgPktReplacePolicy was set to filler(3). Object MAY be changed only when the related PW is defined as not active.')
pwTDMCfgName = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 3, 1, 21), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pwTDMCfgName.setStatus('current')
if mibBuilder.loadTexts: pwTDMCfgName.setDescription('A descriptive string, preferably a unique name, to an entry in this table. Object MAY be changed at any time.')
pwTDMPerfCurrentTable = MibTable((1, 3, 6, 1, 2, 1, 186, 1, 5), )
if mibBuilder.loadTexts: pwTDMPerfCurrentTable.setStatus('current')
if mibBuilder.loadTexts: pwTDMPerfCurrentTable.setDescription('The current 15-minute interval counts are in this table. This table provides per TDM PW performance information.')
pwTDMPerfCurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 186, 1, 5, 1), ).setIndexNames((0, "PW-STD-MIB", "pwIndex"))
if mibBuilder.loadTexts: pwTDMPerfCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: pwTDMPerfCurrentEntry.setDescription('An entry in this table is created by the agent for every pwTDMTable entry. After 15 minutes, the contents of this table entry are copied to a new entry in the pwTDMPerfInterval table, and the counts in this entry are reset to zero.')
pwTDMPerfCurrentMissingPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 5, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTDMPerfCurrentMissingPkts.setStatus('current')
if mibBuilder.loadTexts: pwTDMPerfCurrentMissingPkts.setDescription('Number of missing packets (as detected via control word sequence number gaps).')
pwTDMPerfCurrentPktsReOrder = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 5, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTDMPerfCurrentPktsReOrder.setStatus('current')
if mibBuilder.loadTexts: pwTDMPerfCurrentPktsReOrder.setDescription('Number of packets detected out of sequence (via control word sequence number) but successfully re-ordered. Note: some implementations may not support this feature.')
pwTDMPerfCurrentJtrBfrUnderruns = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 5, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTDMPerfCurrentJtrBfrUnderruns.setStatus('current')
if mibBuilder.loadTexts: pwTDMPerfCurrentJtrBfrUnderruns.setDescription('Number of times a packet needed to be played out and the jitter buffer was empty.')
pwTDMPerfCurrentMisOrderDropped = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 5, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTDMPerfCurrentMisOrderDropped.setStatus('current')
if mibBuilder.loadTexts: pwTDMPerfCurrentMisOrderDropped.setDescription('Number of packets detected out of order (via control word sequence numbers) that could not be re-ordered or could not fit in the jitter buffer.')
pwTDMPerfCurrentMalformedPkt = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 5, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTDMPerfCurrentMalformedPkt.setStatus('current')
if mibBuilder.loadTexts: pwTDMPerfCurrentMalformedPkt.setDescription("Number of packets detected with unexpected size or bad headers' stack.")
pwTDMPerfCurrentESs = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 5, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTDMPerfCurrentESs.setStatus('current')
if mibBuilder.loadTexts: pwTDMPerfCurrentESs.setDescription('The counter associated with the number of Error Seconds encountered. Any malformed packet, sequence error, LOPS, and the like are considered as Error Seconds.')
pwTDMPerfCurrentSESs = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 5, 1, 7), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTDMPerfCurrentSESs.setStatus('current')
if mibBuilder.loadTexts: pwTDMPerfCurrentSESs.setDescription('The counter associated with the number of Severely Error Seconds encountered.')
pwTDMPerfCurrentUASs = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 5, 1, 8), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTDMPerfCurrentUASs.setStatus('current')
if mibBuilder.loadTexts: pwTDMPerfCurrentUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered. Any consecutive ten seconds of SES are counted as one Unavailable Seconds (UAS).')
pwTDMPerfCurrentFC = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 5, 1, 9), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTDMPerfCurrentFC.setStatus('current')
if mibBuilder.loadTexts: pwTDMPerfCurrentFC.setDescription('TDM Failure Counts (FC-TDM). The number of TDM failure events. A failure event begins when the LOPS failure is declared, and it ends when the failure is cleared. A failure event that begins in one period and ends in another period is counted only in the period in which it begins.')
pwTDMPerfIntervalTable = MibTable((1, 3, 6, 1, 2, 1, 186, 1, 6), )
if mibBuilder.loadTexts: pwTDMPerfIntervalTable.setStatus('current')
if mibBuilder.loadTexts: pwTDMPerfIntervalTable.setDescription('This table provides performance information per TDM PW similar to the pwTDMPerfCurrentTable above. However, these counts represent historical 15-minute intervals. Typically, this table will have a maximum of 96 entries for a 24 hour period, but is not limited to this.')
pwTDMPerfIntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 186, 1, 6, 1), ).setIndexNames((0, "PW-STD-MIB", "pwIndex"), (0, "PW-TDM-MIB", "pwTDMPerfIntervalNumber"))
if mibBuilder.loadTexts: pwTDMPerfIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: pwTDMPerfIntervalEntry.setDescription('An entry in this table is created by the agent for every pwTDMPerfCurrentEntry that is 15 minutes old. The contents of the Current entry are copied to the new entry here. The Current entry then resets its counts to zero for the next current 15-minute interval.')
pwTDMPerfIntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: pwTDMPerfIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: pwTDMPerfIntervalNumber.setDescription('A number (normally between 1 and 96 to cover a 24 hour period) that identifies the interval for which the set of statistics is available. The interval identified by 1 is the most recently completed 15-minute interval, and the interval identified by N is the interval immediately preceding the one identified by N-1. The minimum range of N is 1 through 4. The default range is 1 through 32. The maximum value of N is 1 through 96.')
pwTDMPerfIntervalValidData = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 6, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTDMPerfIntervalValidData.setStatus('current')
if mibBuilder.loadTexts: pwTDMPerfIntervalValidData.setDescription('This variable indicates if the data for this interval is valid.')
pwTDMPerfIntervalDuration = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 6, 1, 3), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTDMPerfIntervalDuration.setStatus('current')
if mibBuilder.loadTexts: pwTDMPerfIntervalDuration.setDescription("The duration of a particular interval in seconds. Adjustments in the system's time-of-day clock may cause the interval to be greater or less than the normal value. Therefore, this actual interval value is provided.")
pwTDMPerfIntervalMissingPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 6, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTDMPerfIntervalMissingPkts.setStatus('current')
if mibBuilder.loadTexts: pwTDMPerfIntervalMissingPkts.setDescription('Number of missing packets (as detected via control word sequence number gaps).')
pwTDMPerfIntervalPktsReOrder = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 6, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTDMPerfIntervalPktsReOrder.setStatus('current')
if mibBuilder.loadTexts: pwTDMPerfIntervalPktsReOrder.setDescription('Number of packets detected out of sequence (via control word sequence number) but successfully re-ordered. Note: some implementations may not support this feature.')
pwTDMPerfIntervalJtrBfrUnderruns = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 6, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTDMPerfIntervalJtrBfrUnderruns.setStatus('current')
if mibBuilder.loadTexts: pwTDMPerfIntervalJtrBfrUnderruns.setDescription('Number of times a packet needed to be played out and the jitter buffer was empty.')
pwTDMPerfIntervalMisOrderDropped = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 6, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTDMPerfIntervalMisOrderDropped.setStatus('current')
if mibBuilder.loadTexts: pwTDMPerfIntervalMisOrderDropped.setDescription('Number of packets detected out of order (via control word sequence numbers) that could not be re-ordered or could not fit in the jitter buffer.')
pwTDMPerfIntervalMalformedPkt = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 6, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTDMPerfIntervalMalformedPkt.setStatus('current')
if mibBuilder.loadTexts: pwTDMPerfIntervalMalformedPkt.setDescription("Number of packets detected with unexpected size, or bad headers' stack")
pwTDMPerfIntervalESs = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 6, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTDMPerfIntervalESs.setStatus('current')
if mibBuilder.loadTexts: pwTDMPerfIntervalESs.setDescription('The counter associated with the number of Error Seconds encountered.')
pwTDMPerfIntervalSESs = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 6, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTDMPerfIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: pwTDMPerfIntervalSESs.setDescription('The counter associated with the number of Severely Error Seconds encountered.')
pwTDMPerfIntervalUASs = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 6, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTDMPerfIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: pwTDMPerfIntervalUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered.')
pwTDMPerfIntervalFC = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 6, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTDMPerfIntervalFC.setStatus('current')
if mibBuilder.loadTexts: pwTDMPerfIntervalFC.setDescription('TDM Failure Counts (FC-TDM). The number of TDM failure events. A failure event begins when the LOPS failure is declared, and it ends when the failure is cleared. A failure event that begins in one period and ends in another period is counted only in the period in which it begins.')
pwTDMPerf1DayIntervalTable = MibTable((1, 3, 6, 1, 2, 1, 186, 1, 7), )
if mibBuilder.loadTexts: pwTDMPerf1DayIntervalTable.setStatus('current')
if mibBuilder.loadTexts: pwTDMPerf1DayIntervalTable.setDescription('This table provides performance information per TDM PW similar to the pwTDMPerfIntervalTable above. However, these counters represent historical one-day intervals up to one full month. The table consists of real-time data, as such it is not persistence across re-boot.')
pwTDMPerf1DayIntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 186, 1, 7, 1), ).setIndexNames((0, "PW-STD-MIB", "pwIndex"), (0, "PW-TDM-MIB", "pwTDMPerf1DayIntervalNumber"))
if mibBuilder.loadTexts: pwTDMPerf1DayIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: pwTDMPerf1DayIntervalEntry.setDescription('An entry is created in this table by the agent for every entry in the pwTDMTable table.')
pwTDMPerf1DayIntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)))
if mibBuilder.loadTexts: pwTDMPerf1DayIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: pwTDMPerf1DayIntervalNumber.setDescription('The number of intervals where 1 indicates the current day measured period and 2 and above indicate previous days, respectively.')
pwTDMPerf1DayIntervalValidData = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 7, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTDMPerf1DayIntervalValidData.setStatus('current')
if mibBuilder.loadTexts: pwTDMPerf1DayIntervalValidData.setDescription('This variable indicates if the data for this interval is valid.')
pwTDMPerf1DayIntervalDuration = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 7, 1, 3), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTDMPerf1DayIntervalDuration.setStatus('current')
if mibBuilder.loadTexts: pwTDMPerf1DayIntervalDuration.setDescription("The duration of a particular interval in seconds. Adjustments in the system's time-of-day clock may cause the interval to be greater or less than the normal value. Therefore, this actual interval value is provided.")
pwTDMPerf1DayIntervalMissingPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTDMPerf1DayIntervalMissingPkts.setStatus('current')
if mibBuilder.loadTexts: pwTDMPerf1DayIntervalMissingPkts.setDescription('Number of missing packets (as detected via control word sequence number gaps).')
pwTDMPerf1DayIntervalPktsReOrder = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTDMPerf1DayIntervalPktsReOrder.setStatus('current')
if mibBuilder.loadTexts: pwTDMPerf1DayIntervalPktsReOrder.setDescription('Number of packets detected out of sequence (via control word sequence number) but successfully re-ordered. Note: some implementations may not support this feature.')
pwTDMPerf1DayIntervalJtrBfrUnderruns = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTDMPerf1DayIntervalJtrBfrUnderruns.setStatus('current')
if mibBuilder.loadTexts: pwTDMPerf1DayIntervalJtrBfrUnderruns.setDescription('Number of times a packet needed to be played out and the jitter buffer was empty.')
pwTDMPerf1DayIntervalMisOrderDropped = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTDMPerf1DayIntervalMisOrderDropped.setStatus('current')
if mibBuilder.loadTexts: pwTDMPerf1DayIntervalMisOrderDropped.setDescription('Number of packets detected out of order (via control word sequence numbers) that could not be re-ordered or could not fit in the jitter buffer.')
pwTDMPerf1DayIntervalMalformedPkt = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTDMPerf1DayIntervalMalformedPkt.setStatus('current')
if mibBuilder.loadTexts: pwTDMPerf1DayIntervalMalformedPkt.setDescription("Number of packets detected with unexpected size or bad headers' stack.")
pwTDMPerf1DayIntervalESs = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTDMPerf1DayIntervalESs.setStatus('current')
if mibBuilder.loadTexts: pwTDMPerf1DayIntervalESs.setDescription('The counter associated with the number of Error Seconds encountered.')
pwTDMPerf1DayIntervalSESs = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTDMPerf1DayIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: pwTDMPerf1DayIntervalSESs.setDescription('The counter associated with the number of Severely Error Seconds.')
pwTDMPerf1DayIntervalUASs = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTDMPerf1DayIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: pwTDMPerf1DayIntervalUASs.setDescription('The counter associated with the number of UnAvailable Seconds. NOTE: When first entering the UAS state, the number of SES to UAS is added to this object, then as each additional UAS occurs, this object increments by one.')
pwTDMPerf1DayIntervalFC = MibTableColumn((1, 3, 6, 1, 2, 1, 186, 1, 7, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTDMPerf1DayIntervalFC.setStatus('current')
if mibBuilder.loadTexts: pwTDMPerf1DayIntervalFC.setDescription('TDM Failure Counts (FC-TDM). The number of TDM failure events. A failure event begins when the LOPS failure is declared, and it ends when the failure is cleared.')
pwTDMCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 186, 2, 1))
pwTDMGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 186, 2, 2))
pwTDMModuleCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 186, 2, 1, 1)).setObjects(("PW-TDM-MIB", "pwTDMGroup"), ("PW-TDM-MIB", "pwTDMPerfCurrentGroup"), ("PW-TDM-MIB", "pwTDMPerfIntervalGroup"), ("PW-TDM-MIB", "pwTDMPerf1DayIntervalGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pwTDMModuleCompliance = pwTDMModuleCompliance.setStatus('current')
if mibBuilder.loadTexts: pwTDMModuleCompliance.setDescription('The compliance statement for agent that support TDM PW over PSN operation.')
pwTDMGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 186, 2, 2, 1)).setObjects(("PW-TDM-MIB", "pwTDMRate"), ("PW-TDM-MIB", "pwTDMIfIndex"), ("PW-TDM-MIB", "pwGenTDMCfgIndex"), ("PW-TDM-MIB", "pwRelTDMCfgIndex"), ("PW-TDM-MIB", "pwTDMConfigError"), ("PW-TDM-MIB", "pwTDMTimeElapsed"), ("PW-TDM-MIB", "pwTDMValidIntervals"), ("PW-TDM-MIB", "pwTDMValidDayIntervals"), ("PW-TDM-MIB", "pwTDMLastEsTimeStamp"), ("PW-TDM-MIB", "pwTDMCfgIndexNext"), ("PW-TDM-MIB", "pwTDMCfgRowStatus"), ("PW-TDM-MIB", "pwTDMCfgPayloadSize"), ("PW-TDM-MIB", "pwTDMCfgPktReorder"), ("PW-TDM-MIB", "pwTDMCfgRtpHdrUsed"), ("PW-TDM-MIB", "pwTDMCfgJtrBfrDepth"), ("PW-TDM-MIB", "pwTDMCfgPayloadSuppression"), ("PW-TDM-MIB", "pwTDMCfgConsecPktsInSynch"), ("PW-TDM-MIB", "pwTDMCfgConsecMissPktsOutSynch"), ("PW-TDM-MIB", "pwTDMCfgSetUp2SynchTimeOut"), ("PW-TDM-MIB", "pwTDMCfgPktReplacePolicy"), ("PW-TDM-MIB", "pwTDMCfgAvePktLossTimeWindow"), ("PW-TDM-MIB", "pwTDMCfgExcessivePktLossThreshold"), ("PW-TDM-MIB", "pwTDMCfgAlarmThreshold"), ("PW-TDM-MIB", "pwTDMCfgClearAlarmThreshold"), ("PW-TDM-MIB", "pwTDMCfgMissingPktsToSes"), ("PW-TDM-MIB", "pwTDMCfgTimestampMode"), ("PW-TDM-MIB", "pwTDMCfgStorageType"), ("PW-TDM-MIB", "pwTDMCfgPktFiller"), ("PW-TDM-MIB", "pwTDMCfgName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pwTDMGroup = pwTDMGroup.setStatus('current')
if mibBuilder.loadTexts: pwTDMGroup.setDescription('Collection of objects for basic TDM PW config and status.')
pwTDMPerfCurrentGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 186, 2, 2, 2)).setObjects(("PW-TDM-MIB", "pwTDMPerfCurrentMissingPkts"), ("PW-TDM-MIB", "pwTDMPerfCurrentPktsReOrder"), ("PW-TDM-MIB", "pwTDMPerfCurrentJtrBfrUnderruns"), ("PW-TDM-MIB", "pwTDMPerfCurrentMisOrderDropped"), ("PW-TDM-MIB", "pwTDMPerfCurrentMalformedPkt"), ("PW-TDM-MIB", "pwTDMPerfCurrentESs"), ("PW-TDM-MIB", "pwTDMPerfCurrentSESs"), ("PW-TDM-MIB", "pwTDMPerfCurrentUASs"), ("PW-TDM-MIB", "pwTDMPerfCurrentFC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pwTDMPerfCurrentGroup = pwTDMPerfCurrentGroup.setStatus('current')
if mibBuilder.loadTexts: pwTDMPerfCurrentGroup.setDescription('Collection of current statistics objects for TDM PWs.')
pwTDMPerfIntervalGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 186, 2, 2, 3)).setObjects(("PW-TDM-MIB", "pwTDMPerfIntervalValidData"), ("PW-TDM-MIB", "pwTDMPerfIntervalDuration"), ("PW-TDM-MIB", "pwTDMPerfIntervalMissingPkts"), ("PW-TDM-MIB", "pwTDMPerfIntervalPktsReOrder"), ("PW-TDM-MIB", "pwTDMPerfIntervalJtrBfrUnderruns"), ("PW-TDM-MIB", "pwTDMPerfIntervalMisOrderDropped"), ("PW-TDM-MIB", "pwTDMPerfIntervalMalformedPkt"), ("PW-TDM-MIB", "pwTDMPerfIntervalESs"), ("PW-TDM-MIB", "pwTDMPerfIntervalSESs"), ("PW-TDM-MIB", "pwTDMPerfIntervalUASs"), ("PW-TDM-MIB", "pwTDMPerfIntervalFC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pwTDMPerfIntervalGroup = pwTDMPerfIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: pwTDMPerfIntervalGroup.setDescription('Collection of Interval statistics objects for TDM PWs.')
pwTDMPerf1DayIntervalGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 186, 2, 2, 4)).setObjects(("PW-TDM-MIB", "pwTDMPerf1DayIntervalValidData"), ("PW-TDM-MIB", "pwTDMPerf1DayIntervalDuration"), ("PW-TDM-MIB", "pwTDMPerf1DayIntervalMissingPkts"), ("PW-TDM-MIB", "pwTDMPerf1DayIntervalPktsReOrder"), ("PW-TDM-MIB", "pwTDMPerf1DayIntervalJtrBfrUnderruns"), ("PW-TDM-MIB", "pwTDMPerf1DayIntervalMisOrderDropped"), ("PW-TDM-MIB", "pwTDMPerf1DayIntervalMalformedPkt"), ("PW-TDM-MIB", "pwTDMPerf1DayIntervalESs"), ("PW-TDM-MIB", "pwTDMPerf1DayIntervalSESs"), ("PW-TDM-MIB", "pwTDMPerf1DayIntervalUASs"), ("PW-TDM-MIB", "pwTDMPerf1DayIntervalFC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pwTDMPerf1DayIntervalGroup = pwTDMPerf1DayIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: pwTDMPerf1DayIntervalGroup.setDescription('Collection of Daily statistics objects for TDM PWs.')
mibBuilder.exportSymbols("PW-TDM-MIB", pwTDMPerf1DayIntervalMalformedPkt=pwTDMPerf1DayIntervalMalformedPkt, pwTDMCfgAlarmThreshold=pwTDMCfgAlarmThreshold, pwTDMPerf1DayIntervalMisOrderDropped=pwTDMPerf1DayIntervalMisOrderDropped, pwTDMValidIntervals=pwTDMValidIntervals, pwTDMCfgMissingPktsToSes=pwTDMCfgMissingPktsToSes, pwTDMPerfIntervalUASs=pwTDMPerfIntervalUASs, pwTDMPerfIntervalTable=pwTDMPerfIntervalTable, pwTDMPerf1DayIntervalEntry=pwTDMPerf1DayIntervalEntry, pwTDMGroups=pwTDMGroups, pwTDMPerf1DayIntervalDuration=pwTDMPerf1DayIntervalDuration, pwTDMPerfCurrentTable=pwTDMPerfCurrentTable, pwTDMCfgName=pwTDMCfgName, pwTDMCfgExcessivePktLossThreshold=pwTDMCfgExcessivePktLossThreshold, pwTDMPerf1DayIntervalPktsReOrder=pwTDMPerf1DayIntervalPktsReOrder, pwTDMPerfCurrentMisOrderDropped=pwTDMPerfCurrentMisOrderDropped, pwTDMCfgRtpHdrUsed=pwTDMCfgRtpHdrUsed, PwTDMCfgIndex=PwTDMCfgIndex, pwTDMCfgPktReplacePolicy=pwTDMCfgPktReplacePolicy, pwTDMPerfIntervalMisOrderDropped=pwTDMPerfIntervalMisOrderDropped, pwTDMPerf1DayIntervalESs=pwTDMPerf1DayIntervalESs, pwTDMGroup=pwTDMGroup, pwTDMCfgTimestampMode=pwTDMCfgTimestampMode, pwTDMIfIndex=pwTDMIfIndex, pwTDMConformance=pwTDMConformance, pwTDMPerfIntervalValidData=pwTDMPerfIntervalValidData, pwTDMPerfCurrentMissingPkts=pwTDMPerfCurrentMissingPkts, pwTDMPerf1DayIntervalFC=pwTDMPerf1DayIntervalFC, pwTDMCfgSetUp2SynchTimeOut=pwTDMCfgSetUp2SynchTimeOut, pwTDMCfgStorageType=pwTDMCfgStorageType, pwTDMTable=pwTDMTable, pwTDMPerfIntervalFC=pwTDMPerfIntervalFC, pwTDMPerfCurrentJtrBfrUnderruns=pwTDMPerfCurrentJtrBfrUnderruns, pwTDMPerf1DayIntervalMissingPkts=pwTDMPerf1DayIntervalMissingPkts, pwTDMPerfCurrentMalformedPkt=pwTDMPerfCurrentMalformedPkt, pwTDMPerf1DayIntervalValidData=pwTDMPerf1DayIntervalValidData, pwTDMPerfIntervalJtrBfrUnderruns=pwTDMPerfIntervalJtrBfrUnderruns, pwTDMCfgConsecPktsInSynch=pwTDMCfgConsecPktsInSynch, pwTDMPerfIntervalNumber=pwTDMPerfIntervalNumber, pwTDMObjects=pwTDMObjects, pwTDMPerf1DayIntervalSESs=pwTDMPerf1DayIntervalSESs, pwTDMCfgPktReorder=pwTDMCfgPktReorder, pwTDMPerfIntervalGroup=pwTDMPerfIntervalGroup, pwTDMPerfCurrentEntry=pwTDMPerfCurrentEntry, pwTDMPerfIntervalESs=pwTDMPerfIntervalESs, pwTDMPerfCurrentUASs=pwTDMPerfCurrentUASs, pwTDMCfgClearAlarmThreshold=pwTDMCfgClearAlarmThreshold, pwTDMPerfIntervalEntry=pwTDMPerfIntervalEntry, pwTDMEntry=pwTDMEntry, pwTDMPerf1DayIntervalJtrBfrUnderruns=pwTDMPerf1DayIntervalJtrBfrUnderruns, pwTDMCfgEntry=pwTDMCfgEntry, pwTDMPerfIntervalMalformedPkt=pwTDMPerfIntervalMalformedPkt, pwTDMConfigError=pwTDMConfigError, pwTDMPerfIntervalSESs=pwTDMPerfIntervalSESs, pwTDMTimeElapsed=pwTDMTimeElapsed, pwTDMCfgAvePktLossTimeWindow=pwTDMCfgAvePktLossTimeWindow, pwTDMPerfIntervalMissingPkts=pwTDMPerfIntervalMissingPkts, pwTDMCompliances=pwTDMCompliances, pwTDMNotifications=pwTDMNotifications, PYSNMP_MODULE_ID=pwTDMMIB, pwTDMPerfCurrentGroup=pwTDMPerfCurrentGroup, pwTDMModuleCompliance=pwTDMModuleCompliance, pwTDMCfgPayloadSuppression=pwTDMCfgPayloadSuppression, pwRelTDMCfgIndex=pwRelTDMCfgIndex, pwTDMPerfCurrentSESs=pwTDMPerfCurrentSESs, pwTDMCfgConsecMissPktsOutSynch=pwTDMCfgConsecMissPktsOutSynch, pwTDMRate=pwTDMRate, pwTDMCfgPayloadSize=pwTDMCfgPayloadSize, pwTDMPerf1DayIntervalTable=pwTDMPerf1DayIntervalTable, pwTDMCfgRowStatus=pwTDMCfgRowStatus, pwTDMCfgIndexNext=pwTDMCfgIndexNext, pwTDMMIB=pwTDMMIB, pwGenTDMCfgIndex=pwGenTDMCfgIndex, pwTDMPerfIntervalDuration=pwTDMPerfIntervalDuration, pwTDMPerfCurrentFC=pwTDMPerfCurrentFC, pwTDMPerf1DayIntervalGroup=pwTDMPerf1DayIntervalGroup, pwTDMCfgPktFiller=pwTDMCfgPktFiller, pwTDMLastEsTimeStamp=pwTDMLastEsTimeStamp, pwTDMValidDayIntervals=pwTDMValidDayIntervals, pwTDMCfgIndex=pwTDMCfgIndex, pwTDMPerfCurrentESs=pwTDMPerfCurrentESs, pwTDMCfgJtrBfrDepth=pwTDMCfgJtrBfrDepth, pwTDMCfgTable=pwTDMCfgTable, pwTDMPerf1DayIntervalNumber=pwTDMPerf1DayIntervalNumber, pwTDMPerfCurrentPktsReOrder=pwTDMPerfCurrentPktsReOrder, pwTDMPerfIntervalPktsReOrder=pwTDMPerfIntervalPktsReOrder, pwTDMPerf1DayIntervalUASs=pwTDMPerf1DayIntervalUASs)
