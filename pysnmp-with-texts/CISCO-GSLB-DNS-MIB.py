#
# PySNMP MIB module CISCO-GSLB-DNS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-GSLB-DNS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:59:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
CiscoGslbAnswerStatus, CiscoGslbAnswerAdminState, CiscoGslbAnswerType, CiscoGslbBalanceMethod = mibBuilder.importSymbols("CISCO-GSLB-TC-MIB", "CiscoGslbAnswerStatus", "CiscoGslbAnswerAdminState", "CiscoGslbAnswerType", "CiscoGslbBalanceMethod")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InetAddressDNS, InetAddressPrefixLength, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressDNS", "InetAddressPrefixLength", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
NotificationType, Bits, ModuleIdentity, Integer32, ObjectIdentity, Counter32, Counter64, TimeTicks, iso, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, IpAddress, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Bits", "ModuleIdentity", "Integer32", "ObjectIdentity", "Counter32", "Counter64", "TimeTicks", "iso", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "IpAddress", "MibIdentifier")
DisplayString, TextualConvention, StorageType, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "StorageType", "RowStatus", "TruthValue")
ciscoGslbDnsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 595))
ciscoGslbDnsMIB.setRevisions(('2007-04-09 00:00', '2006-11-28 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoGslbDnsMIB.setRevisionsDescriptions(('-Added the following objects to cgdGlobal: cgdAnsTrapRateLimit cgdDnsClauseTrapRateLimit -Added the following objects to cgdGlobalStats: cgdDroppedAnsNotifs cgdDroppedDnsClauseNotifs -Added the following groups: ciscoGslbDnsGlobalRateLimitGroup, ciscoGslbDnsGlobalNotifStatsGroup', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoGslbDnsMIB.setLastUpdated('200704090000Z')
if mibBuilder.loadTexts: ciscoGslbDnsMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoGslbDnsMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-slb@cisco.com')
if mibBuilder.loadTexts: ciscoGslbDnsMIB.setDescription('The MIB defines objects for status and statistics information of DNS related operations of Global Server Load Balancer(GSLB). The MIB defines objects for global statistical information like DNS queries received, DNS responses sent, etc. Further it defines objects for answer, answer group, domain list, source address list, proximity rule and DNS rule statistics. It also defines related notifications. Acronyms and terminology: DNS : Domain Name System (RFC1035) D-proxy : Local DNS name server of the client. Answer : Refers to resources to which the GSLB device resolves DNS requests that it receives. There are three possible types of answers: Virtual IP (VIP) : Addresses associated with a server load balancer device, a web server, a cache, etc. Name Server (NS) : Configured DNS name server on the network that can answer queries that the GSLB device can not resolve. Content Routing Agent (CRA) : A device which uses a resolution process called DNS race to send identical and simultaneous responses back to a client D-proxy for proximity determination. Answer group : A logical grouping of answers. It is a set of virtual IP address (VIP), name server (NS), or content routing agent (CRA) addresses from which an individual answer is selected and used to reply to a content request. Answers are grouped together as resource pools. The GSLB device, using one of a number of available balance methods, can choose the most appropriate resource to serve each user request from the answers in an answer group. Balance method : A balance method is an algorithm for selecting the best server for replying to a DNS query. Domain list : A collection of domain names for Internet or intranet resources that have been delegated to the GSLB device for DNS query responses. Domain lists either contain complete domain names or regular expression that specifies a pattern by which the GSLB device matches incoming DNS requests. Source address list : A collection of IP addresses or address blocks meant to hold information about known D-proxies. This information is used by the GSLB device while answering DNS queries. DNS rule : A rule which controls the operation of GSLB device. It identifies the actions to be performed by the GSLB device when it receives a DNS request from a known source (a member of a source address list) for a known domain (a member of a domain list) by specifying which response (answer) is to be given to the requesting D-proxy and how that answer is chosen. Proximity : Refers to the distance or delay, in terms of network topology and not geographic distance, between the requesting client D-proxy and the resources corresponding to that request. Proximity probing : To respond to DNS requests with the most proximate answers, the GSLB device communicates with a probing device located in each proximity zone to gather round-trip time (RTT) metric information measured between the requesting client D-proxy and the zone. The GSLB device then directs client requests to an available resource with the lowest RTT value. Proximity subsystem : Component within the GSLB device responsible for proximity determination. Clause : A clause specifies that a particular answer group serve the request and a specific balance method be used to select the best resource from that answer group. Boomerang server : A method of proximity routing used by GSLB device with CRAs. It is also known as DNS race. The boomerang method is based on the concept that instantaneous proximity can be determined if a CRA within each data center sends a DNS A-record (IP address) at the exact same time to the requesting D-proxy. This gives all CRAs a chance at resolving a client request and allows for proximity to be determined without probing the client D-proxy. Whichever DNS A-record is received first by the D-proxy is, by default, considered to be the most proximate. For the GSLB device to initiate a DNS race, it needs to establish the following two pieces of information for each CRA: (a) The delay between the GSLB device and each of the CRAs in each data center. With this data, the GSLB device computes how long to delay the race from each data center, so that each CRA starts the race simultaneously. (b) The online status of the CRAs. With this data, the GSLB device knows not to forward requests to any CRA that is not responding. The boomerang server on the GSLB device gathers this information by sending keepalive messages at predetermined intervals. The boomerang server uses this data, along with the IP addresses of the CRAs, to request the exact start time of the DNS race. If the CRA response is to be accepted by the D-proxy, each CRA must spoof the IP address of the GSLB device to which the original DNS request was sent.')
ciscoGslbDnsMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 595, 0))
ciscoGslbDnsMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 595, 1))
ciscoGslbDnsMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 595, 2))
cgdNotifControl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 1))
cgdNotifObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 2))
cgdGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 3))
cgdGlobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 4))
cgdAnswer = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 5))
cgdDomain = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 6))
cgdSourceAdd = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 7))
cgdDnsRule = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 8))
cgdTotalDomains = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdTotalDomains.setStatus('current')
if mibBuilder.loadTexts: cgdTotalDomains.setDescription('This object specifies the total number of domains configured. The value of this object corresponds to the number of entries in the cgdDomainTable.')
cgdTotalDomainLists = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 3, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdTotalDomainLists.setStatus('current')
if mibBuilder.loadTexts: cgdTotalDomainLists.setDescription('This object specifies the total number of domain lists configured. The value of this object corresponds to the number of entries in the cgdDomainListTable.')
cgdTotalSourceAddresses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 3, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdTotalSourceAddresses.setStatus('current')
if mibBuilder.loadTexts: cgdTotalSourceAddresses.setDescription('This object specifies the total number of source addresses configured. The value of this object corresponds to the number of entries in the cgdSourceAddressTable.')
cgdTotalSourceAddressLists = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 3, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdTotalSourceAddressLists.setStatus('current')
if mibBuilder.loadTexts: cgdTotalSourceAddressLists.setDescription('This object specifies the total number of source address lists configured. The value of this object corresponds to the number of entries in the cgdSourceAddressListTable.')
cgdTotalAnswers = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 3, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdTotalAnswers.setStatus('current')
if mibBuilder.loadTexts: cgdTotalAnswers.setDescription('This object specifies the total number of answers configured. The value of this object corresponds to the number of entries in the cgdAnswerTable.')
cgdTotalAnswerGroups = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 3, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdTotalAnswerGroups.setStatus('current')
if mibBuilder.loadTexts: cgdTotalAnswerGroups.setDescription('This object specifies the total number of answer groups configured. The value of this object corresponds to the number of entries in the cgdAnswerGroupTable.')
cgdTotalRules = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 3, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdTotalRules.setStatus('current')
if mibBuilder.loadTexts: cgdTotalRules.setDescription('This object specifies the total number of DNS rules configured. The value of this object corresponds to the number of entries in the cgdDnsRuleTable.')
cgdAnsTrapRateLimit = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 3, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(25)).setUnits('traps per minute').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdAnsTrapRateLimit.setStatus('current')
if mibBuilder.loadTexts: cgdAnsTrapRateLimit.setDescription('This object specifies the maximum rate at which the ciscoGslbAnswerEventStatusChange notifications can be sent.')
cgdDnsClauseTrapRateLimit = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 3, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(25)).setUnits('traps per minute').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdDnsClauseTrapRateLimit.setStatus('current')
if mibBuilder.loadTexts: cgdDnsClauseTrapRateLimit.setDescription('This object specifies the maximum rate at which the ciscoGslbDnsEventClause notifications can be sent.')
cgdDnsRcvdQueries = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 4, 1), Counter32()).setUnits('queries').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdDnsRcvdQueries.setStatus('current')
if mibBuilder.loadTexts: cgdDnsRcvdQueries.setDescription('This object specifies the number of DNS queries received.')
cgdDnsRcvdHostAddrQueries = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 4, 2), Counter32()).setUnits('queries').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdDnsRcvdHostAddrQueries.setReference('RFC1035 section 3.2.3.')
if mibBuilder.loadTexts: cgdDnsRcvdHostAddrQueries.setStatus('current')
if mibBuilder.loadTexts: cgdDnsRcvdHostAddrQueries.setDescription('This object specifies the number of DNS queries with QTYPE value 1(A) or 255(*) received.')
cgdDnsUnmatchedQueries = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 4, 3), Counter32()).setUnits('queries').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdDnsUnmatchedQueries.setStatus('current')
if mibBuilder.loadTexts: cgdDnsUnmatchedQueries.setDescription('This object specifies the number of DNS queries received for which no answer could be found.')
cgdDnsDroppedQueries = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 4, 4), Counter32()).setUnits('queries').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdDnsDroppedQueries.setStatus('current')
if mibBuilder.loadTexts: cgdDnsDroppedQueries.setDescription('This object specifies the number of DNS queries dropped.')
cgdNSFwdSentQueries = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 4, 5), Counter32()).setUnits('queries').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdNSFwdSentQueries.setStatus('current')
if mibBuilder.loadTexts: cgdNSFwdSentQueries.setDescription('This object specifies the number of queries forwarded to an external DNS name server for resolution.')
cgdNSFwdRcvdResps = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 4, 6), Counter32()).setUnits('responses').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdNSFwdRcvdResps.setStatus('current')
if mibBuilder.loadTexts: cgdNSFwdRcvdResps.setDescription('This object specifies the number of responses received for queries that were forwarded to an external DNS name server for resolution.')
cgdBoomServSentReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 4, 7), Counter32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdBoomServSentReqs.setStatus('current')
if mibBuilder.loadTexts: cgdBoomServSentReqs.setDescription('This object specifies the number of requests sent by the Boomerang server to initiate a DNS race.')
cgdProxLkupSentReqs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 4, 8), Counter32()).setUnits('requests').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdProxLkupSentReqs.setStatus('current')
if mibBuilder.loadTexts: cgdProxLkupSentReqs.setDescription('This object specifies the number of proximity lookup requests sent to the proximity subsystem.')
cgdProxLkupRcvdResps = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 4, 9), Counter32()).setUnits('responses').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdProxLkupRcvdResps.setStatus('current')
if mibBuilder.loadTexts: cgdProxLkupRcvdResps.setDescription('This object specifies the number of proximity lookup responses received from the proximity subsystem.')
cgdDnsQueryRateCurrent = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 4, 10), Gauge32()).setUnits('requests per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdDnsQueryRateCurrent.setStatus('current')
if mibBuilder.loadTexts: cgdDnsQueryRateCurrent.setDescription('This object specifies the current rate at which DNS queries are being received.')
cgdDnsQueryRatePeak = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 4, 11), Unsigned32()).setUnits('requests per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdDnsQueryRatePeak.setStatus('current')
if mibBuilder.loadTexts: cgdDnsQueryRatePeak.setDescription('This object specifies the peak rate at which DNS queries have been received.')
cgdDnsUdpSrcPortErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 4, 12), Counter32()).setUnits('errors').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdDnsUdpSrcPortErrs.setStatus('current')
if mibBuilder.loadTexts: cgdDnsUdpSrcPortErrs.setDescription('This object specifies the number of DNS queries received with UDP source port value as zero.')
cgdDnsTcpSrcPortErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 4, 13), Counter32()).setUnits('errors').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdDnsTcpSrcPortErrs.setStatus('current')
if mibBuilder.loadTexts: cgdDnsTcpSrcPortErrs.setDescription('This object specifies the number of DNS queries received with TCP source port value as zero.')
cgdDnsPollSockErrs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 4, 14), Counter32()).setUnits('errors').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdDnsPollSockErrs.setStatus('current')
if mibBuilder.loadTexts: cgdDnsPollSockErrs.setDescription('The value of this object is the sum of socket errors, of all the gslb processes running on the gslb device. Examples of socket errors: Connection refused, No route to host, Communication error on send, Protocol not available, Network is unreachable.')
cgdDroppedAnsNotifs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 4, 15), Unsigned32()).setUnits('traps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdDroppedAnsNotifs.setStatus('current')
if mibBuilder.loadTexts: cgdDroppedAnsNotifs.setDescription('The value of this object is the total number of ciscoGslbAnswerEventStatusChange notifications dropped since the network management portion of the system was last re-initialized. These notifications are dropped when the limit configured in cgdAnsTrapRateLimit is reached.')
cgdDroppedDnsClauseNotifs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 4, 16), Unsigned32()).setUnits('traps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdDroppedDnsClauseNotifs.setStatus('current')
if mibBuilder.loadTexts: cgdDroppedDnsClauseNotifs.setDescription('The value of this object is the total number of ciscoGslbDnsEventClause notifications dropped since the network management portion of the system was last re-initialized. These notifications are dropped when the limit configured in cgdDnsClauseTrapRateLimit is reached.')
cgdAnswerGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 5, 1), )
if mibBuilder.loadTexts: cgdAnswerGroupTable.setStatus('current')
if mibBuilder.loadTexts: cgdAnswerGroupTable.setDescription('This table is used to configure answer groups. This table consists a list of answer groups that are configured and the number of hits on that answer.')
cgdAnswerGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-GSLB-DNS-MIB", "cgdAnswerGroupName"))
if mibBuilder.loadTexts: cgdAnswerGroupEntry.setStatus('current')
if mibBuilder.loadTexts: cgdAnswerGroupEntry.setDescription('Each entry contains answer group specific statistics. Entries can be added/deleted by administrator action.')
cgdAnswerGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 5, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 80)))
if mibBuilder.loadTexts: cgdAnswerGroupName.setStatus('current')
if mibBuilder.loadTexts: cgdAnswerGroupName.setDescription('This object specifies the name given uniquely for an answer group.')
cgdAnswerGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 5, 1, 1, 2), CiscoGslbAnswerType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgdAnswerGroupType.setStatus('current')
if mibBuilder.loadTexts: cgdAnswerGroupType.setDescription("This object specifies the type of answers contained in this answer group. The value of this object can not be modified when cgdAnswerGroupRowStatus is 'active'. This object is mandatory for a row creation.")
cgdAnswerGroupHits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 5, 1, 1, 3), Counter32()).setUnits('number of hits').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdAnswerGroupHits.setStatus('current')
if mibBuilder.loadTexts: cgdAnswerGroupHits.setDescription('This object specifies the number of times the answers in this group were sent as a reply for a DNS query since the GSLB device was last started.')
cgdAnswerGroupStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 5, 1, 1, 4), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgdAnswerGroupStorageType.setStatus('current')
if mibBuilder.loadTexts: cgdAnswerGroupStorageType.setDescription('This object specifies the storage type for this conceptual row.')
cgdAnswerGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 5, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgdAnswerGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: cgdAnswerGroupRowStatus.setDescription('This object is used to create/delete an entry in the cgdAnswerGroupTable')
cgdAnswerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 5, 2), )
if mibBuilder.loadTexts: cgdAnswerTable.setStatus('current')
if mibBuilder.loadTexts: cgdAnswerTable.setDescription('This table is used to configure the answers. This table contains the configurable parameters for an answer as well as the statistics for each answer.')
cgdAnswerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 5, 2, 1), ).setIndexNames((0, "CISCO-GSLB-DNS-MIB", "cgdAnswerId"))
if mibBuilder.loadTexts: cgdAnswerEntry.setStatus('current')
if mibBuilder.loadTexts: cgdAnswerEntry.setDescription('Each entry contains answer specific statistics and status information. Entries can be added/deleted/modified by administrator action. The following objects are mandatory for a row creation: cgdAnswerType cgdAnswerAddress')
cgdAnswerId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 5, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cgdAnswerId.setStatus('current')
if mibBuilder.loadTexts: cgdAnswerId.setDescription('This object uniquely identifies an answer.')
cgdAnswerType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 5, 2, 1, 2), CiscoGslbAnswerType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgdAnswerType.setStatus('current')
if mibBuilder.loadTexts: cgdAnswerType.setDescription("This object specifies the type value for the answer. The value of this object can not be modified when cgdAnswerRowStatus is 'active'.")
cgdAnswerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 5, 2, 1, 3), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgdAnswerAddressType.setStatus('current')
if mibBuilder.loadTexts: cgdAnswerAddressType.setDescription('This object specifies the type for answer IP address that is returned to DNS client or used for NS query or CRA DNS race.')
cgdAnswerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 5, 2, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgdAnswerAddress.setStatus('current')
if mibBuilder.loadTexts: cgdAnswerAddress.setDescription('This object specifies the answer IP address that is returned to client or used for NS query or CRA DNS race. The type of IP address is identified by cgdAnswerAddressType.')
cgdAnswerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 5, 2, 1, 5), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgdAnswerName.setStatus('current')
if mibBuilder.loadTexts: cgdAnswerName.setDescription('This object specifies the name given uniquely for an answer.')
cgdAnswerGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 5, 2, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgdAnswerGrpName.setStatus('current')
if mibBuilder.loadTexts: cgdAnswerGrpName.setDescription('This object specifies the answer group list, to which an answer is associated. Its value must be same as the value configured in cgdAnswerGroupTable.')
cgdAnswerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 5, 2, 1, 7), CiscoGslbAnswerAdminState().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgdAnswerAdminState.setStatus('current')
if mibBuilder.loadTexts: cgdAnswerAdminState.setDescription('This object is used to administratively activate/suspend an answer.')
cgdAnswerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 5, 2, 1, 8), CiscoGslbAnswerStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdAnswerStatus.setStatus('current')
if mibBuilder.loadTexts: cgdAnswerStatus.setDescription("This object specifies the most recently known status of an answer. If cgdAnswerAdminState is changed to 'suspended' then cgdAnswerStatus should change to 'suspended'. If cgdAnswerAdminState is changed to 'active' then the cgdAnswerStatus should change to 'online'/'offline' depending on whether the answer is avialable or not.")
cgdAnswerHits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 5, 2, 1, 9), Counter32()).setUnits('number of hits').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdAnswerHits.setStatus('current')
if mibBuilder.loadTexts: cgdAnswerHits.setDescription('This object specifies the number of times this answer was used in replying for a DNS query the DNS reply since the GSLB device was last started.')
cgdAnswerRate1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 5, 2, 1, 10), Gauge32()).setUnits('hits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdAnswerRate1Min.setStatus('current')
if mibBuilder.loadTexts: cgdAnswerRate1Min.setDescription('This object specifies the average per second hit count for the answer, calculated during the last one minute.')
cgdAnswerRate5Min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 5, 2, 1, 11), Gauge32()).setUnits('hits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdAnswerRate5Min.setStatus('current')
if mibBuilder.loadTexts: cgdAnswerRate5Min.setDescription('This object specifies the average per second hit count for the answer, calculated during the last 5 minute interval.')
cgdAnswerRate30Min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 5, 2, 1, 12), Gauge32()).setUnits('hits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdAnswerRate30Min.setStatus('current')
if mibBuilder.loadTexts: cgdAnswerRate30Min.setDescription('This object specifies the average per second hit count for the answer, calculated during the last 30 minute interval.')
cgdAnswerRate4Hr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 5, 2, 1, 13), Gauge32()).setUnits('hits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdAnswerRate4Hr.setStatus('current')
if mibBuilder.loadTexts: cgdAnswerRate4Hr.setDescription('This object specifies the average per second hit count for the answer, calculated during the last 4 hour interval.')
cgdAnswerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 5, 2, 1, 14), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgdAnswerStorageType.setStatus('current')
if mibBuilder.loadTexts: cgdAnswerStorageType.setDescription('This object specifies the storage type for this conceptual row.')
cgdAnswerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 5, 2, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgdAnswerRowStatus.setStatus('current')
if mibBuilder.loadTexts: cgdAnswerRowStatus.setDescription('This object is used to create/delete an entry in the cgdAnswerTable')
cgdDomainListTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 6, 1), )
if mibBuilder.loadTexts: cgdDomainListTable.setStatus('current')
if mibBuilder.loadTexts: cgdDomainListTable.setDescription('This table is used to create domain lists. This table consists the domain lists configured and its associated hits.')
cgdDomainListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 6, 1, 1), ).setIndexNames((0, "CISCO-GSLB-DNS-MIB", "cgdDomainListName"))
if mibBuilder.loadTexts: cgdDomainListEntry.setStatus('current')
if mibBuilder.loadTexts: cgdDomainListEntry.setDescription('Each entry contains domain list specific statistics and status information. Entries can be added/deleted by administrator action.')
cgdDomainListName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 6, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 80)))
if mibBuilder.loadTexts: cgdDomainListName.setStatus('current')
if mibBuilder.loadTexts: cgdDomainListName.setDescription('This object specifies the name given uniquely for a domain list.')
cgdDomainListHits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 6, 1, 1, 2), Counter32()).setUnits('number of hits').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdDomainListHits.setStatus('current')
if mibBuilder.loadTexts: cgdDomainListHits.setDescription('This object specifies the number of times the domains in this domain list was queried since the GSLB device was last started.')
cgdDomainListStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 6, 1, 1, 3), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgdDomainListStorageType.setStatus('current')
if mibBuilder.loadTexts: cgdDomainListStorageType.setDescription('This object specifies the storage type for this conceptual row.')
cgdDomainListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 6, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgdDomainListRowStatus.setStatus('current')
if mibBuilder.loadTexts: cgdDomainListRowStatus.setDescription('This object is used to create/delete an entry in the cgdDomainListTable.')
cgdDomainTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 6, 2), )
if mibBuilder.loadTexts: cgdDomainTable.setStatus('current')
if mibBuilder.loadTexts: cgdDomainTable.setDescription('This table is used to configure domain entries. This table consists the domain names and its association to the domain lists.')
cgdDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 6, 2, 1), ).setIndexNames((0, "CISCO-GSLB-DNS-MIB", "cgdDomainId"))
if mibBuilder.loadTexts: cgdDomainEntry.setStatus('current')
if mibBuilder.loadTexts: cgdDomainEntry.setDescription('Each entry contains domain specific statistics and status information. Entries can be added/deleted/modified by administrator action. The following objects are mandatory for the creation of a row: cgdDomainName cgdDomainList')
cgdDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 6, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cgdDomainId.setStatus('current')
if mibBuilder.loadTexts: cgdDomainId.setDescription('This object uniquely identifies a domain.')
cgdDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 6, 2, 1, 2), InetAddressDNS()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgdDomainName.setStatus('current')
if mibBuilder.loadTexts: cgdDomainName.setDescription('This object specifies, the user assigned DNS name or regular expression for the domain.')
cgdDomainList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 6, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgdDomainList.setStatus('current')
if mibBuilder.loadTexts: cgdDomainList.setDescription('This object specifies the domain list to which this domain is associated. Its value must be same as the value configured in cgdDomainListTable.')
cgdDomainHits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 6, 2, 1, 4), Counter32()).setUnits('number of hits').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdDomainHits.setStatus('current')
if mibBuilder.loadTexts: cgdDomainHits.setDescription('This object specifies the number of times this domain name was queried since the GSLB device was last started.')
cgdDomainRate1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 6, 2, 1, 5), Gauge32()).setUnits('hits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdDomainRate1Min.setStatus('current')
if mibBuilder.loadTexts: cgdDomainRate1Min.setDescription('This object specifies the average per second hit count for the domain, calculated during the last minute.')
cgdDomainRate5Min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 6, 2, 1, 6), Gauge32()).setUnits('hits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdDomainRate5Min.setStatus('current')
if mibBuilder.loadTexts: cgdDomainRate5Min.setDescription('This object specifies the average per second hit count for the domain, calculated during the last 5 minute interval.')
cgdDomainRate30Min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 6, 2, 1, 7), Gauge32()).setUnits('hits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdDomainRate30Min.setStatus('current')
if mibBuilder.loadTexts: cgdDomainRate30Min.setDescription('This object specifies the average per second hit count for the domain, calculated during the last 30 minute interval.')
cgdDomainRate4Hr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 6, 2, 1, 8), Gauge32()).setUnits('hits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdDomainRate4Hr.setStatus('current')
if mibBuilder.loadTexts: cgdDomainRate4Hr.setDescription('This object specifies the average per second hit count for the domain, calculated during the last 4 hour interval.')
cgdDomainStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 6, 2, 1, 9), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgdDomainStorageType.setStatus('current')
if mibBuilder.loadTexts: cgdDomainStorageType.setDescription('This object specifies the storage type for this conceptual row.')
cgdDomainRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 6, 2, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgdDomainRowStatus.setStatus('current')
if mibBuilder.loadTexts: cgdDomainRowStatus.setDescription('This object is used to create/delete an entry in the cgdDomainTable.')
cgdSourceAddressListTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 7, 1), )
if mibBuilder.loadTexts: cgdSourceAddressListTable.setStatus('current')
if mibBuilder.loadTexts: cgdSourceAddressListTable.setDescription('This table is used to configure source address lists. This table consists the source address lists configured and their statistics.')
cgdSourceAddressListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 7, 1, 1), ).setIndexNames((0, "CISCO-GSLB-DNS-MIB", "cgdSourceAddressListName"))
if mibBuilder.loadTexts: cgdSourceAddressListEntry.setStatus('current')
if mibBuilder.loadTexts: cgdSourceAddressListEntry.setDescription('Each entry contains source address lists configured and their corresponding statistics. Entries can be added/deleted/modified by administrator action.')
cgdSourceAddressListName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 7, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 80)))
if mibBuilder.loadTexts: cgdSourceAddressListName.setStatus('current')
if mibBuilder.loadTexts: cgdSourceAddressListName.setDescription('This object specifies the user assigned name for the source address list.')
cgdSourceAddressListHits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 7, 1, 1, 2), Counter32()).setUnits('number of hits').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdSourceAddressListHits.setStatus('current')
if mibBuilder.loadTexts: cgdSourceAddressListHits.setDescription('This object specifies the number of times a DNS query originated from the source addresses configured in this source address list since the GSLB device was last started.')
cgdSourceAddressListStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 7, 1, 1, 3), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgdSourceAddressListStorageType.setStatus('current')
if mibBuilder.loadTexts: cgdSourceAddressListStorageType.setDescription('This object specifies the storage type for this conceptual row.')
cgdSourceAddressListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 7, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgdSourceAddressListRowStatus.setStatus('current')
if mibBuilder.loadTexts: cgdSourceAddressListRowStatus.setDescription('This object is used to create/delete an entry in the cgdSourceAddressListTable.')
cgdSourceAddressTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 7, 2), )
if mibBuilder.loadTexts: cgdSourceAddressTable.setStatus('current')
if mibBuilder.loadTexts: cgdSourceAddressTable.setDescription('This table is used to configure source addresses on the GSLB device. It consists of the source addresses configured and its statistics.')
cgdSourceAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 7, 2, 1), ).setIndexNames((0, "CISCO-GSLB-DNS-MIB", "cgdSourceAddressId"))
if mibBuilder.loadTexts: cgdSourceAddressEntry.setStatus('current')
if mibBuilder.loadTexts: cgdSourceAddressEntry.setDescription('Each entry contains source address specific statistics and status information. Entries can be added/deleted/modified by administrator action. The following objects are mandatory for a row creation: cgdSourceAddressAddress cgdSourceAddressPrefixLength cgdSourceAddressList')
cgdSourceAddressId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 7, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cgdSourceAddressId.setStatus('current')
if mibBuilder.loadTexts: cgdSourceAddressId.setDescription('This object uniquely identifies a source address instance.')
cgdSourceAddressAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 7, 2, 1, 2), InetAddressType().clone('ipv4')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdSourceAddressAddressType.setStatus('current')
if mibBuilder.loadTexts: cgdSourceAddressAddressType.setDescription('This object specifies the source address subnet IP address type to match incoming client requests.')
cgdSourceAddressAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 7, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdSourceAddressAddress.setStatus('current')
if mibBuilder.loadTexts: cgdSourceAddressAddress.setDescription('This object specifies the source address subnet IP address to match incoming client requests.')
cgdSourceAddressPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 7, 2, 1, 4), InetAddressPrefixLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdSourceAddressPrefixLength.setStatus('current')
if mibBuilder.loadTexts: cgdSourceAddressPrefixLength.setDescription('This object specifies the source address subnet IP mask to match incoming client requests.')
cgdSourceAddressList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 7, 2, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgdSourceAddressList.setStatus('current')
if mibBuilder.loadTexts: cgdSourceAddressList.setDescription('This object specifies the source address list to which this source address is associated. Its value must be same as the value configured in cgdSourceAddressListTable.')
cgdSourceAddressHits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 7, 2, 1, 6), Counter32()).setUnits('number of hits').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdSourceAddressHits.setStatus('current')
if mibBuilder.loadTexts: cgdSourceAddressHits.setDescription('This object specifies the number of times a DNS query was originated from this source address since the GSLB device was last started.')
cgdSourceAddressRate1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 7, 2, 1, 7), Gauge32()).setUnits('hits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdSourceAddressRate1Min.setStatus('current')
if mibBuilder.loadTexts: cgdSourceAddressRate1Min.setDescription('This object specifies the average per second hit count for the source address, calculated during the last minute.')
cgdSourceAddressRate5Min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 7, 2, 1, 8), Gauge32()).setUnits('hits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdSourceAddressRate5Min.setStatus('current')
if mibBuilder.loadTexts: cgdSourceAddressRate5Min.setDescription('This object specifies the average per second hit count for the source address, calculated during the last 5 minute interval.')
cgdSourceAddressRate30Min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 7, 2, 1, 9), Gauge32()).setUnits('hits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdSourceAddressRate30Min.setStatus('current')
if mibBuilder.loadTexts: cgdSourceAddressRate30Min.setDescription('This object specifies the average per second hit count for the source address, calculated during the last 30 minute interval.')
cgdSourceAddressRate4Hr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 7, 2, 1, 10), Gauge32()).setUnits('hits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdSourceAddressRate4Hr.setStatus('current')
if mibBuilder.loadTexts: cgdSourceAddressRate4Hr.setDescription('This object specifies the averaged per second hit count for the source address, calculated during the last 4 hour interval.')
cgdSourceAddressStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 7, 2, 1, 11), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgdSourceAddressStorageType.setStatus('current')
if mibBuilder.loadTexts: cgdSourceAddressStorageType.setDescription('This object specifies the storage type for this conceptual row.')
cgdSourceAddressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 7, 2, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgdSourceAddressRowStatus.setStatus('current')
if mibBuilder.loadTexts: cgdSourceAddressRowStatus.setDescription('This object is used to create/delete an entry in the cgdSourceAddressTable.')
cgdClauseTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 8, 1), )
if mibBuilder.loadTexts: cgdClauseTable.setStatus('current')
if mibBuilder.loadTexts: cgdClauseTable.setDescription('This table is used to configure the clauses. This table contains entries for each clause configured and their statistics.')
cgdClauseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 8, 1, 1), ).setIndexNames((0, "CISCO-GSLB-DNS-MIB", "cgdClauseId"))
if mibBuilder.loadTexts: cgdClauseEntry.setStatus('current')
if mibBuilder.loadTexts: cgdClauseEntry.setDescription('An entry in cgdClauseTable. Each entry contains information on answer group, balance method and also the number of hits on the clause. Entries can be added/deleted by administrator action. The following objects are mandatory for a row creation: cgdClauseAnsGrpName cgdClauseBalanceMethod')
cgdClauseId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 8, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cgdClauseId.setStatus('current')
if mibBuilder.loadTexts: cgdClauseId.setDescription('This object uniquely identifies a clause.')
cgdClauseAnsGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 8, 1, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgdClauseAnsGrpName.setStatus('current')
if mibBuilder.loadTexts: cgdClauseAnsGrpName.setDescription('This object specifies the answer group associated with the clause. Its value must be same as the value configured in cgdAnswerGroupTable.')
cgdClauseBalanceMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 8, 1, 1, 3), CiscoGslbBalanceMethod()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgdClauseBalanceMethod.setStatus('current')
if mibBuilder.loadTexts: cgdClauseBalanceMethod.setDescription('This object specifies the balance method associated with the clause.')
cgdClauseHits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 8, 1, 1, 4), Counter32()).setUnits('number of hits').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdClauseHits.setStatus('current')
if mibBuilder.loadTexts: cgdClauseHits.setDescription('This object specifies the number of times this clause was used in repling for a DNS query since the GSLB device was last started.')
cgdClauseStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 8, 1, 1, 5), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgdClauseStorageType.setStatus('current')
if mibBuilder.loadTexts: cgdClauseStorageType.setDescription('This object specifies the storage type for this conceptual row.')
cgdClauseRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 8, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgdClauseRowStatus.setStatus('current')
if mibBuilder.loadTexts: cgdClauseRowStatus.setDescription('This object is used to create/delete an entry in the cgdClauseTable.')
cgdDnsRuleTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 8, 2), )
if mibBuilder.loadTexts: cgdDnsRuleTable.setStatus('current')
if mibBuilder.loadTexts: cgdDnsRuleTable.setDescription('This table is used to configure DNS rule. This table consists the DNS rules configured and also the statistics for each rule.')
cgdDnsRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 8, 2, 1), ).setIndexNames((0, "CISCO-GSLB-DNS-MIB", "cgdDnsRuleName"))
if mibBuilder.loadTexts: cgdDnsRuleEntry.setStatus('current')
if mibBuilder.loadTexts: cgdDnsRuleEntry.setDescription('An entry in the cgdDnsRuleTable. Each entry contains DNS rule name and clauses associsted with it. Entries can be added/deleted by administrator action.')
cgdDnsRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 8, 2, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 80)))
if mibBuilder.loadTexts: cgdDnsRuleName.setStatus('current')
if mibBuilder.loadTexts: cgdDnsRuleName.setDescription('This object specifies the user assigned name for the DNS rule.')
cgdFirstClauseId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 8, 2, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgdFirstClauseId.setStatus('current')
if mibBuilder.loadTexts: cgdFirstClauseId.setDescription('This object is used to associate a clause with the first clause of the DNS rule. The answer will be expected from the clause identified by the value of this object. If not available, value identified in cgdSecondClauseId will be used. Its value must be same as the value configured in cgdClauseTable.')
cgdSecondClauseId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 8, 2, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgdSecondClauseId.setStatus('current')
if mibBuilder.loadTexts: cgdSecondClauseId.setDescription('This object is used to associate a clause with the second clause of the DNS rule. If the answer is not available in the first clause, identified by cgdFirstClauseId, then the second clause is picked, identified by this object. Its value must be same as the value configured in cgdClauseTable.')
cgdThirdClauseId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 8, 2, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgdThirdClauseId.setStatus('current')
if mibBuilder.loadTexts: cgdThirdClauseId.setDescription('This object is used to associate a clause with the third clause of the DNS rule. If the answer is not available in the first and the second clause, identified by cgdFirstClauseId and cgdThirdClauseId respectively, then the third clause is picked, identified by the object. Its value must be same as the value configured in cgdClauseTable.')
cgdSourceAddList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 8, 2, 1, 5), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgdSourceAddList.setStatus('current')
if mibBuilder.loadTexts: cgdSourceAddList.setDescription('This object is used to associate a source address list with the DNS rule. Its value must be same as the value configured in cgdSourceAddressListTable. This object is mandatory for a row creation.')
cgdDNSRuleDomainList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 8, 2, 1, 6), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgdDNSRuleDomainList.setStatus('current')
if mibBuilder.loadTexts: cgdDNSRuleDomainList.setDescription('This object is used to associate a domain list with the DNS rule. Its value must be same as the value configured in cgdDomainListTable. This object is mandatory for a row creation.')
cgdDnsRuleHits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 8, 2, 1, 7), Counter32()).setUnits('number of hits').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdDnsRuleHits.setStatus('current')
if mibBuilder.loadTexts: cgdDnsRuleHits.setDescription('This object specifies the number of times this DNS rule was used in replying for a DNS query since the GSLB device was last started.')
cgdDnsRuleSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 8, 2, 1, 8), Counter32()).setUnits('number of hits').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgdDnsRuleSuccesses.setStatus('current')
if mibBuilder.loadTexts: cgdDnsRuleSuccesses.setDescription('This object specifies the number of successes for the DNS rule instance since the GSLB device was last started.')
cgdDnsRuleStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 8, 2, 1, 9), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgdDnsRuleStorageType.setStatus('current')
if mibBuilder.loadTexts: cgdDnsRuleStorageType.setDescription('This object specifies the storage type for this conceptual row.')
cgdDnsRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 8, 2, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgdDnsRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: cgdDnsRuleRowStatus.setDescription('This object is used to create/delete an entry in the cgdRuleTable.')
cgdDnsClauseNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgdDnsClauseNotifEnable.setStatus('current')
if mibBuilder.loadTexts: cgdDnsClauseNotifEnable.setDescription('This object is used for administratively enabling/disabling the ciscoGslbDnsEventClause notification.')
cgdDnsAnswerNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgdDnsAnswerNotifEnable.setStatus('current')
if mibBuilder.loadTexts: cgdDnsAnswerNotifEnable.setDescription('This object is used for administratively enabling/disabling the ciscoGslbAnswerEventStatusChange notification.')
cgdAnswerPrevStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 595, 1, 2, 1), CiscoGslbAnswerStatus()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cgdAnswerPrevStatus.setStatus('current')
if mibBuilder.loadTexts: cgdAnswerPrevStatus.setDescription('This object is used for sending the value of cgdAnswerStatus before transitioning to new state.')
ciscoGslbDnsEventClause = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 595, 0, 1)).setObjects(("SNMPv2-MIB", "sysName"), ("CISCO-GSLB-DNS-MIB", "cgdFirstClauseId"), ("CISCO-GSLB-DNS-MIB", "cgdSecondClauseId"), ("CISCO-GSLB-DNS-MIB", "cgdDroppedDnsClauseNotifs"))
if mibBuilder.loadTexts: ciscoGslbDnsEventClause.setStatus('current')
if mibBuilder.loadTexts: ciscoGslbDnsEventClause.setDescription('This notification is sent when transition occurs from use of one clause to another for selecting an answer on a DNS rule match. For example a transition is said to have occured, when a DNS rule uses a clause identified by cgdSecondClauseId instead of cgdFirstClauseId. -cgdFirstClauseId contains the clause number used for selecting the most recent answer for a DNS rule. -cgdSecondClauseId contains the clause number that was previously used to select an answer for the DNS rule.')
ciscoGslbAnswerEventStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 595, 0, 2)).setObjects(("SNMPv2-MIB", "sysName"), ("CISCO-GSLB-DNS-MIB", "cgdAnswerName"), ("CISCO-GSLB-DNS-MIB", "cgdAnswerType"), ("CISCO-GSLB-DNS-MIB", "cgdAnswerAddressType"), ("CISCO-GSLB-DNS-MIB", "cgdAnswerAddress"), ("CISCO-GSLB-DNS-MIB", "cgdAnswerStatus"), ("CISCO-GSLB-DNS-MIB", "cgdAnswerPrevStatus"), ("CISCO-GSLB-DNS-MIB", "cgdDroppedAnsNotifs"))
if mibBuilder.loadTexts: ciscoGslbAnswerEventStatusChange.setStatus('current')
if mibBuilder.loadTexts: ciscoGslbAnswerEventStatusChange.setDescription('This notification is sent when the value of cgdAnswerStatus changes from one state to another.')
ciscoGslbDnsMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 595, 2, 1))
ciscoGslbDnsMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 595, 2, 2))
ciscoGslbDnsMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 595, 2, 1, 1)).setObjects(("CISCO-GSLB-DNS-MIB", "ciscoGslbDnsGlobalGroup"), ("CISCO-GSLB-DNS-MIB", "ciscoGslbDnsGlobalStatsGroup"), ("CISCO-GSLB-DNS-MIB", "ciscoGslbDnsAnswerGroup"), ("CISCO-GSLB-DNS-MIB", "ciscoGslbDnsDomainGroup"), ("CISCO-GSLB-DNS-MIB", "ciscoGslbDnsSourceAddGroup"), ("CISCO-GSLB-DNS-MIB", "ciscoGslbDnsRuleGroup"), ("CISCO-GSLB-DNS-MIB", "ciscoGslbDnsNotifControlGroup"), ("CISCO-GSLB-DNS-MIB", "ciscoGslbDnsNotifObjectsGroup"), ("CISCO-GSLB-DNS-MIB", "ciscoGslbDnsNotifGroup"), ("CISCO-GSLB-DNS-MIB", "ciscoGslbDnsGlobalRateLimitGroup"), ("CISCO-GSLB-DNS-MIB", "ciscoGslbDnsGlobalNotifStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGslbDnsMIBCompliance = ciscoGslbDnsMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoGslbDnsMIBCompliance.setDescription('Compliance statement for entities which implement the Cisco GSLB DNS MIB')
ciscoGslbDnsGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 595, 2, 2, 1)).setObjects(("CISCO-GSLB-DNS-MIB", "cgdTotalDomains"), ("CISCO-GSLB-DNS-MIB", "cgdTotalDomainLists"), ("CISCO-GSLB-DNS-MIB", "cgdTotalSourceAddresses"), ("CISCO-GSLB-DNS-MIB", "cgdTotalSourceAddressLists"), ("CISCO-GSLB-DNS-MIB", "cgdTotalAnswers"), ("CISCO-GSLB-DNS-MIB", "cgdTotalAnswerGroups"), ("CISCO-GSLB-DNS-MIB", "cgdTotalRules"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGslbDnsGlobalGroup = ciscoGslbDnsGlobalGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGslbDnsGlobalGroup.setDescription('A collection of objects that provide general configuration information.')
ciscoGslbDnsGlobalStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 595, 2, 2, 2)).setObjects(("CISCO-GSLB-DNS-MIB", "cgdDnsRcvdQueries"), ("CISCO-GSLB-DNS-MIB", "cgdDnsRcvdHostAddrQueries"), ("CISCO-GSLB-DNS-MIB", "cgdDnsUnmatchedQueries"), ("CISCO-GSLB-DNS-MIB", "cgdDnsDroppedQueries"), ("CISCO-GSLB-DNS-MIB", "cgdNSFwdSentQueries"), ("CISCO-GSLB-DNS-MIB", "cgdNSFwdRcvdResps"), ("CISCO-GSLB-DNS-MIB", "cgdBoomServSentReqs"), ("CISCO-GSLB-DNS-MIB", "cgdProxLkupSentReqs"), ("CISCO-GSLB-DNS-MIB", "cgdProxLkupRcvdResps"), ("CISCO-GSLB-DNS-MIB", "cgdDnsQueryRateCurrent"), ("CISCO-GSLB-DNS-MIB", "cgdDnsQueryRatePeak"), ("CISCO-GSLB-DNS-MIB", "cgdDnsUdpSrcPortErrs"), ("CISCO-GSLB-DNS-MIB", "cgdDnsTcpSrcPortErrs"), ("CISCO-GSLB-DNS-MIB", "cgdDnsPollSockErrs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGslbDnsGlobalStatsGroup = ciscoGslbDnsGlobalStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGslbDnsGlobalStatsGroup.setDescription('A collection of objects that provide general statistics.')
ciscoGslbDnsAnswerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 595, 2, 2, 3)).setObjects(("CISCO-GSLB-DNS-MIB", "cgdAnswerGroupType"), ("CISCO-GSLB-DNS-MIB", "cgdAnswerGroupHits"), ("CISCO-GSLB-DNS-MIB", "cgdAnswerGroupStorageType"), ("CISCO-GSLB-DNS-MIB", "cgdAnswerGroupRowStatus"), ("CISCO-GSLB-DNS-MIB", "cgdAnswerType"), ("CISCO-GSLB-DNS-MIB", "cgdAnswerAddressType"), ("CISCO-GSLB-DNS-MIB", "cgdAnswerAddress"), ("CISCO-GSLB-DNS-MIB", "cgdAnswerName"), ("CISCO-GSLB-DNS-MIB", "cgdAnswerGrpName"), ("CISCO-GSLB-DNS-MIB", "cgdAnswerAdminState"), ("CISCO-GSLB-DNS-MIB", "cgdAnswerStatus"), ("CISCO-GSLB-DNS-MIB", "cgdAnswerHits"), ("CISCO-GSLB-DNS-MIB", "cgdAnswerRate1Min"), ("CISCO-GSLB-DNS-MIB", "cgdAnswerRate5Min"), ("CISCO-GSLB-DNS-MIB", "cgdAnswerRate30Min"), ("CISCO-GSLB-DNS-MIB", "cgdAnswerRate4Hr"), ("CISCO-GSLB-DNS-MIB", "cgdAnswerStorageType"), ("CISCO-GSLB-DNS-MIB", "cgdAnswerRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGslbDnsAnswerGroup = ciscoGslbDnsAnswerGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGslbDnsAnswerGroup.setDescription('A collection of objects that provide per answer instance status and statistics.')
ciscoGslbDnsDomainGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 595, 2, 2, 4)).setObjects(("CISCO-GSLB-DNS-MIB", "cgdDomainListHits"), ("CISCO-GSLB-DNS-MIB", "cgdDomainListStorageType"), ("CISCO-GSLB-DNS-MIB", "cgdDomainListRowStatus"), ("CISCO-GSLB-DNS-MIB", "cgdDomainName"), ("CISCO-GSLB-DNS-MIB", "cgdDomainList"), ("CISCO-GSLB-DNS-MIB", "cgdDomainHits"), ("CISCO-GSLB-DNS-MIB", "cgdDomainRate1Min"), ("CISCO-GSLB-DNS-MIB", "cgdDomainRate5Min"), ("CISCO-GSLB-DNS-MIB", "cgdDomainRate30Min"), ("CISCO-GSLB-DNS-MIB", "cgdDomainRate4Hr"), ("CISCO-GSLB-DNS-MIB", "cgdDomainStorageType"), ("CISCO-GSLB-DNS-MIB", "cgdDomainRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGslbDnsDomainGroup = ciscoGslbDnsDomainGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGslbDnsDomainGroup.setDescription('A collection of objects that provide per domain instance status and statistics.')
ciscoGslbDnsSourceAddGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 595, 2, 2, 5)).setObjects(("CISCO-GSLB-DNS-MIB", "cgdSourceAddressListHits"), ("CISCO-GSLB-DNS-MIB", "cgdSourceAddressListStorageType"), ("CISCO-GSLB-DNS-MIB", "cgdSourceAddressListRowStatus"), ("CISCO-GSLB-DNS-MIB", "cgdSourceAddressAddressType"), ("CISCO-GSLB-DNS-MIB", "cgdSourceAddressAddress"), ("CISCO-GSLB-DNS-MIB", "cgdSourceAddressPrefixLength"), ("CISCO-GSLB-DNS-MIB", "cgdSourceAddressList"), ("CISCO-GSLB-DNS-MIB", "cgdSourceAddressHits"), ("CISCO-GSLB-DNS-MIB", "cgdSourceAddressRate1Min"), ("CISCO-GSLB-DNS-MIB", "cgdSourceAddressRate5Min"), ("CISCO-GSLB-DNS-MIB", "cgdSourceAddressRate30Min"), ("CISCO-GSLB-DNS-MIB", "cgdSourceAddressRate4Hr"), ("CISCO-GSLB-DNS-MIB", "cgdSourceAddressStorageType"), ("CISCO-GSLB-DNS-MIB", "cgdSourceAddressRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGslbDnsSourceAddGroup = ciscoGslbDnsSourceAddGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGslbDnsSourceAddGroup.setDescription('A collection of objects that provide per proximity rule instance status and statistics.')
ciscoGslbDnsRuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 595, 2, 2, 6)).setObjects(("CISCO-GSLB-DNS-MIB", "cgdFirstClauseId"), ("CISCO-GSLB-DNS-MIB", "cgdSecondClauseId"), ("CISCO-GSLB-DNS-MIB", "cgdThirdClauseId"), ("CISCO-GSLB-DNS-MIB", "cgdSourceAddList"), ("CISCO-GSLB-DNS-MIB", "cgdDNSRuleDomainList"), ("CISCO-GSLB-DNS-MIB", "cgdDnsRuleHits"), ("CISCO-GSLB-DNS-MIB", "cgdDnsRuleSuccesses"), ("CISCO-GSLB-DNS-MIB", "cgdDnsRuleStorageType"), ("CISCO-GSLB-DNS-MIB", "cgdDnsRuleRowStatus"), ("CISCO-GSLB-DNS-MIB", "cgdClauseAnsGrpName"), ("CISCO-GSLB-DNS-MIB", "cgdClauseBalanceMethod"), ("CISCO-GSLB-DNS-MIB", "cgdClauseHits"), ("CISCO-GSLB-DNS-MIB", "cgdClauseStorageType"), ("CISCO-GSLB-DNS-MIB", "cgdClauseRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGslbDnsRuleGroup = ciscoGslbDnsRuleGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGslbDnsRuleGroup.setDescription('A collection of objects that provide per DNS rule instance status and statistics.')
ciscoGslbDnsNotifControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 595, 2, 2, 7)).setObjects(("CISCO-GSLB-DNS-MIB", "cgdDnsClauseNotifEnable"), ("CISCO-GSLB-DNS-MIB", "cgdDnsAnswerNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGslbDnsNotifControlGroup = ciscoGslbDnsNotifControlGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGslbDnsNotifControlGroup.setDescription('A collection of objects that control the sending of notifications defined in this MIB module.')
ciscoGslbDnsNotifObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 595, 2, 2, 8)).setObjects(("CISCO-GSLB-DNS-MIB", "cgdAnswerPrevStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGslbDnsNotifObjectsGroup = ciscoGslbDnsNotifObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGslbDnsNotifObjectsGroup.setDescription('A collection of objects that convey information for notifications defined in this MIB module.')
ciscoGslbDnsNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 595, 2, 2, 9)).setObjects(("CISCO-GSLB-DNS-MIB", "ciscoGslbDnsEventClause"), ("CISCO-GSLB-DNS-MIB", "ciscoGslbAnswerEventStatusChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGslbDnsNotifGroup = ciscoGslbDnsNotifGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGslbDnsNotifGroup.setDescription('A collection of objects used for notifications defined in this MIB module.')
ciscoGslbDnsGlobalRateLimitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 595, 2, 2, 10)).setObjects(("CISCO-GSLB-DNS-MIB", "cgdAnsTrapRateLimit"), ("CISCO-GSLB-DNS-MIB", "cgdDnsClauseTrapRateLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGslbDnsGlobalRateLimitGroup = ciscoGslbDnsGlobalRateLimitGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGslbDnsGlobalRateLimitGroup.setDescription('A collection of objects that provides information on Rate Limit configuration for notifications.')
ciscoGslbDnsGlobalNotifStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 595, 2, 2, 11)).setObjects(("CISCO-GSLB-DNS-MIB", "cgdDroppedAnsNotifs"), ("CISCO-GSLB-DNS-MIB", "cgdDroppedDnsClauseNotifs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGslbDnsGlobalNotifStatsGroup = ciscoGslbDnsGlobalNotifStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGslbDnsGlobalNotifStatsGroup.setDescription('A collection of objects that provide statistics related to dropped connections.')
mibBuilder.exportSymbols("CISCO-GSLB-DNS-MIB", cgdDomainListRowStatus=cgdDomainListRowStatus, cgdProxLkupRcvdResps=cgdProxLkupRcvdResps, ciscoGslbDnsNotifControlGroup=ciscoGslbDnsNotifControlGroup, cgdAnswerGroupRowStatus=cgdAnswerGroupRowStatus, cgdSourceAddressHits=cgdSourceAddressHits, cgdAnswerTable=cgdAnswerTable, cgdDomainList=cgdDomainList, cgdDnsRuleHits=cgdDnsRuleHits, cgdSourceAddressList=cgdSourceAddressList, ciscoGslbDnsMIBConform=ciscoGslbDnsMIBConform, cgdClauseStorageType=cgdClauseStorageType, cgdAnsTrapRateLimit=cgdAnsTrapRateLimit, cgdTotalDomainLists=cgdTotalDomainLists, cgdDomainTable=cgdDomainTable, cgdDomainId=cgdDomainId, cgdTotalRules=cgdTotalRules, cgdSourceAddressListStorageType=cgdSourceAddressListStorageType, cgdClauseEntry=cgdClauseEntry, cgdDnsUdpSrcPortErrs=cgdDnsUdpSrcPortErrs, cgdSourceAddressRate5Min=cgdSourceAddressRate5Min, cgdDnsRuleName=cgdDnsRuleName, cgdAnswerStorageType=cgdAnswerStorageType, cgdSourceAddressAddressType=cgdSourceAddressAddressType, cgdSourceAddressListName=cgdSourceAddressListName, cgdDroppedDnsClauseNotifs=cgdDroppedDnsClauseNotifs, cgdAnswerEntry=cgdAnswerEntry, cgdDomainName=cgdDomainName, cgdGlobalStats=cgdGlobalStats, ciscoGslbDnsGlobalStatsGroup=ciscoGslbDnsGlobalStatsGroup, ciscoGslbDnsGlobalRateLimitGroup=ciscoGslbDnsGlobalRateLimitGroup, cgdDomainHits=cgdDomainHits, ciscoGslbDnsSourceAddGroup=ciscoGslbDnsSourceAddGroup, cgdDroppedAnsNotifs=cgdDroppedAnsNotifs, cgdAnswerRate30Min=cgdAnswerRate30Min, cgdDnsQueryRatePeak=cgdDnsQueryRatePeak, cgdDnsAnswerNotifEnable=cgdDnsAnswerNotifEnable, cgdAnswer=cgdAnswer, ciscoGslbDnsMIBGroups=ciscoGslbDnsMIBGroups, cgdClauseBalanceMethod=cgdClauseBalanceMethod, cgdDnsClauseNotifEnable=cgdDnsClauseNotifEnable, cgdDnsQueryRateCurrent=cgdDnsQueryRateCurrent, cgdAnswerAdminState=cgdAnswerAdminState, cgdAnswerGroupEntry=cgdAnswerGroupEntry, cgdTotalSourceAddresses=cgdTotalSourceAddresses, cgdTotalDomains=cgdTotalDomains, cgdSourceAddressEntry=cgdSourceAddressEntry, cgdDomainEntry=cgdDomainEntry, cgdSourceAddressListTable=cgdSourceAddressListTable, ciscoGslbDnsDomainGroup=ciscoGslbDnsDomainGroup, cgdSourceAddressId=cgdSourceAddressId, cgdClauseId=cgdClauseId, cgdTotalSourceAddressLists=cgdTotalSourceAddressLists, cgdAnswerGroupHits=cgdAnswerGroupHits, cgdAnswerRate4Hr=cgdAnswerRate4Hr, cgdDomainListEntry=cgdDomainListEntry, cgdGlobal=cgdGlobal, cgdDnsRcvdQueries=cgdDnsRcvdQueries, cgdAnswerName=cgdAnswerName, cgdClauseHits=cgdClauseHits, cgdClauseTable=cgdClauseTable, cgdFirstClauseId=cgdFirstClauseId, cgdAnswerStatus=cgdAnswerStatus, ciscoGslbDnsNotifGroup=ciscoGslbDnsNotifGroup, cgdSourceAddressStorageType=cgdSourceAddressStorageType, cgdDomain=cgdDomain, cgdSourceAddressListEntry=cgdSourceAddressListEntry, cgdAnswerGroupStorageType=cgdAnswerGroupStorageType, ciscoGslbDnsRuleGroup=ciscoGslbDnsRuleGroup, cgdClauseAnsGrpName=cgdClauseAnsGrpName, cgdDnsTcpSrcPortErrs=cgdDnsTcpSrcPortErrs, cgdDomainListStorageType=cgdDomainListStorageType, cgdDnsRcvdHostAddrQueries=cgdDnsRcvdHostAddrQueries, cgdDnsRuleStorageType=cgdDnsRuleStorageType, cgdNSFwdSentQueries=cgdNSFwdSentQueries, cgdSourceAddressRate30Min=cgdSourceAddressRate30Min, cgdDnsRuleEntry=cgdDnsRuleEntry, cgdAnswerAddress=cgdAnswerAddress, cgdSourceAddressPrefixLength=cgdSourceAddressPrefixLength, PYSNMP_MODULE_ID=ciscoGslbDnsMIB, ciscoGslbDnsMIBCompliance=ciscoGslbDnsMIBCompliance, ciscoGslbDnsAnswerGroup=ciscoGslbDnsAnswerGroup, ciscoGslbDnsNotifObjectsGroup=ciscoGslbDnsNotifObjectsGroup, cgdDnsRule=cgdDnsRule, cgdSourceAddressRowStatus=cgdSourceAddressRowStatus, ciscoGslbDnsMIBObjects=ciscoGslbDnsMIBObjects, cgdDomainRate5Min=cgdDomainRate5Min, cgdDomainRowStatus=cgdDomainRowStatus, cgdClauseRowStatus=cgdClauseRowStatus, cgdDomainRate30Min=cgdDomainRate30Min, cgdTotalAnswerGroups=cgdTotalAnswerGroups, cgdSourceAddressTable=cgdSourceAddressTable, ciscoGslbAnswerEventStatusChange=ciscoGslbAnswerEventStatusChange, cgdAnswerGroupType=cgdAnswerGroupType, cgdSourceAddList=cgdSourceAddList, cgdSecondClauseId=cgdSecondClauseId, cgdNotifObjects=cgdNotifObjects, cgdAnswerHits=cgdAnswerHits, ciscoGslbDnsGlobalGroup=ciscoGslbDnsGlobalGroup, ciscoGslbDnsMIBNotifs=ciscoGslbDnsMIBNotifs, cgdAnswerRate1Min=cgdAnswerRate1Min, cgdDomainStorageType=cgdDomainStorageType, cgdSourceAddressRate1Min=cgdSourceAddressRate1Min, ciscoGslbDnsMIBCompliances=ciscoGslbDnsMIBCompliances, cgdSourceAddressRate4Hr=cgdSourceAddressRate4Hr, cgdTotalAnswers=cgdTotalAnswers, cgdAnswerGrpName=cgdAnswerGrpName, cgdDnsDroppedQueries=cgdDnsDroppedQueries, ciscoGslbDnsGlobalNotifStatsGroup=ciscoGslbDnsGlobalNotifStatsGroup, cgdNotifControl=cgdNotifControl, cgdAnswerAddressType=cgdAnswerAddressType, cgdProxLkupSentReqs=cgdProxLkupSentReqs, cgdAnswerGroupName=cgdAnswerGroupName, ciscoGslbDnsEventClause=ciscoGslbDnsEventClause, cgdThirdClauseId=cgdThirdClauseId, cgdSourceAddressAddress=cgdSourceAddressAddress, cgdAnswerPrevStatus=cgdAnswerPrevStatus, cgdAnswerId=cgdAnswerId, cgdSourceAddressListRowStatus=cgdSourceAddressListRowStatus, cgdDnsRuleRowStatus=cgdDnsRuleRowStatus, ciscoGslbDnsMIB=ciscoGslbDnsMIB, cgdDnsPollSockErrs=cgdDnsPollSockErrs, cgdAnswerRate5Min=cgdAnswerRate5Min, cgdNSFwdRcvdResps=cgdNSFwdRcvdResps, cgdDomainRate4Hr=cgdDomainRate4Hr, cgdDnsRuleSuccesses=cgdDnsRuleSuccesses, cgdDomainListTable=cgdDomainListTable, cgdDNSRuleDomainList=cgdDNSRuleDomainList, cgdDnsUnmatchedQueries=cgdDnsUnmatchedQueries, cgdDnsRuleTable=cgdDnsRuleTable, cgdAnswerGroupTable=cgdAnswerGroupTable, cgdAnswerType=cgdAnswerType, cgdBoomServSentReqs=cgdBoomServSentReqs, cgdSourceAddressListHits=cgdSourceAddressListHits, cgdSourceAdd=cgdSourceAdd, cgdAnswerRowStatus=cgdAnswerRowStatus, cgdDomainRate1Min=cgdDomainRate1Min, cgdDomainListName=cgdDomainListName, cgdDomainListHits=cgdDomainListHits, cgdDnsClauseTrapRateLimit=cgdDnsClauseTrapRateLimit)
