#
# PySNMP MIB module PWG-IMAGING-COUNTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PWG-IMAGING-COUNTER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:42:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
TimeTicks, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, iso, Counter64, MibIdentifier, IpAddress, NotificationType, Integer32, Gauge32, Unsigned32, enterprises, ObjectIdentity, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "iso", "Counter64", "MibIdentifier", "IpAddress", "NotificationType", "Integer32", "Gauge32", "Unsigned32", "enterprises", "ObjectIdentity", "ModuleIdentity")
TruthValue, DisplayString, DateAndTime, TextualConvention, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "DateAndTime", "TextualConvention", "TimeStamp")
imagingCounterMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2699, 1, 3))
imagingCounterMIB.setRevisions(('2008-03-18 00:00', '2005-12-23 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: imagingCounterMIB.setRevisionsDescriptions(('PWG Approved Version - PWG Candidate Standard - PWG 5106.3-2008 Imaging System State and Counter MIB v2. Revised MODULE-IDENTITY macro: LAST-UPDATED clause, to show current version date. CONTACT-INFO clause, to show current contact info. DESCRIPTION clause, to support state monitoring (in addition to counters). REVISION clauses, to concatenate intermediate working draft versions. Added two new textual conventions: IcServiceStateTC, per WIMS Protocol (PWG 5106.2), based on IPP/1.1 (RFC 2911) and Host Resources MIB (RFC 2790). IcSubunitStatusTC, per WIMS Protocol (PWG 5106.2), based on PrtSubUnitStatusTC in Printer MIB (RFC 3805). Added one new conceptual table: icSubunitMapTable, to map services to their associated subunits. Added six new columnar objects to existing conceptual tables: icServiceState and icServiceStateMessage, appended to icServiceTable, per PWG 5106.2. icServicePrtAlertIndex, appended to icServiceTable, per RFC 3805. icSubunitStatus and icSubunitStatusMessage, appended to icSubunitTable, per PWG 5106.2. icMediaUsedMediaAccountingKey, appended to icMediaUsedTable, per PWG 5106.1. Added numerous new DEFVAL clauses: for initialization, per IETF MIB Guidelines (RFC 4181). Revised two existing textual conventions: IcCounterEventTypeTC, to add serviceStateChanged, subunitStatusChanged, counterInterval,and counterThreshold. IcSubunitTypeTC, to add finishing device types, per FinDeviceTypeTC in Finisher MIB (RFC 3806), and to add specific scanner device types. Revised numerous existing DESCRIPTION clauses: to clarify usage, per IETF MIB Guidelines (RFC 4181). Revised (increased) SIZE of two existing columnar objects: icMediaUsedMediaSizeName and icMediaUsedMediaName, to align with IPP/1.1 (RFC 2911). Revised DESCRIPTION of three existing columnar objects: icAlertCounterEventType, icAlertCounterName, and icAlertCounterValue, for expanded scope (state events, objects, and values). Revised DESCRIPTION of eleven existing columnar objects: icServiceState, icTimeTotalSeconds, icTimeDownSeconds, icTimeMaintenanceSeconds, icTimeProcessingSeconds, icMonitorStorageAllocErrors, icMonitorStorageAllocWarnings, icMonitorLocalStorageKOctets, icMonitorRemoteStorageKOctets, icTrafficInputKOctets, icTrafficOutputKOctets, to add mapping from existing MIB objects as Usage. Revised DESCRIPTION of four existing columnar objects: icMonitorMemoryAllocWarnings, icMonitorStorageAllocWarnings, icTrafficInputMessages, and icTrafficOutputMessages, to replace erroneous Usage with informative Note. Added one new ASN.1 comment at start of conformance section: for two MODULE-COMPLIANCE macros (for counters and state). Added four new optional OBJECT-GROUP macros: icServiceV2Group and icSubunitV2Group, for new state objects. icSubunitMapV2Group, to map services to their associated subunits. icMediaUsedV2Group, for unambiguous media accounting key. Revised one existing MODULE-COMPLIANCE macro: icMIBCompliance, to add new GROUP clauses for optional objects, and to clarify use of icKeyServiceIndex and icServiceIndex. Added one new MODULE-COMPLIANCE macro: icMIBStateCompliance, for service and subunit state monitoring.', 'PWG Approved Version - PWG Informational - December 2005 Imaging Counter MIB v1.',))
if mibBuilder.loadTexts: imagingCounterMIB.setLastUpdated('200803180000Z')
if mibBuilder.loadTexts: imagingCounterMIB.setOrganization('Printer Working Group, a Program of IEEE/ISTO')
if mibBuilder.loadTexts: imagingCounterMIB.setContactInfo('Web-based Imaging Management Service (WIMS) Project Web: http://www.pwg.org FTP: ftp://ftp.pwg.org/pub/pwg/wims Email: wims@pwg.org (subscribers only - see Web page above) Editor: Ira McDonald Postal: High North Inc PO Box 221 - E21761 Ridge Ave Grand Marais, MI 49839 USA Tel: +1 906-494-2434 or 906-494-2697 Email: blueroofmusic@gmail.com')
if mibBuilder.loadTexts: imagingCounterMIB.setDescription('The MIB module for passive monitoring of imaging services and imaging subunits and their associated state and/or counters for availability, monitoring, media used, and work performed (when processing Imaging Jobs) on an Imaging System. Copyright (C) IEEE/ISTO PWG (2008).')
icMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2699, 1, 3, 0))
icMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1))
icMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2699, 1, 3, 2))
icMIBObjectGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2699, 1, 3, 2, 2))
icMIBNotificationGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2699, 1, 3, 2, 3))
class IcCounter32(TextualConvention, Integer32):
    reference = "Section 5 'Counters' in PWG Imaging System Counters (PWG 5106.1); Section 4.1.12 'integer' datatype in IPP/1.1 (RFC 2911)."
    description = "The 32-bit counter syntax (datatype), restricted to a 31-bit positive integer range (i.e., high-order bit MUST NOT be set), that conforms to the PWG Imaging System Counters specification and is used in all counter object definitions in this MIB. Each counter object instance MUST be initialized to zero '0'."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class IcCounterEventTypeTC(TextualConvention, Integer32):
    reference = "Section 5 'Counters' in PWG Imaging System Counters (PWG 5106.1); prtAlertCode in Printer MIB (RFC 1759/3805); PrtAlertCodeTC in IANA Printer MIB (RFC 3805 and http://www.iana.org/assignments/ianaprinter-mib)."
    description = "The type of counter or state event in this 'icAlertTable' entry. The applicable properties (values of icAlertCounterName) are listed below each event type in comments."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("counterCreated", 3), ("counterForErrors", 4), ("counterForWarnings", 5), ("counterReset", 6), ("counterWrap", 7), ("serviceCreated", 8), ("subunitCreated", 9), ("mediaUsedCreated", 10), ("serviceStateChanged", 11), ("subunitStatusChanged", 12), ("counterInterval", 13), ("counterThreshold", 14))

class IcPersistenceTC(TextualConvention, Integer32):
    reference = "Section 5.1.3 'Persistence' in PWG Imaging System Counters (PWG 5106.1); prtMarkerLifeCount and prtMarkerPowerOnCount in Printer MIB (RFC 1759/3805)."
    description = 'The persistence for these counters.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("lifetime", 3), ("powerOn", 4), ("reset", 5))

class IcServiceStateTC(TextualConvention, Integer32):
    reference = 'printer-state in IPP/1.1 Model (RFC 2911); hrDeviceStatus in Host Resources MIB (RFC 2790).'
    description = 'The state of this managed service on this Imaging System.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("idle", 3), ("processing", 4), ("stopped", 5), ("testing", 6), ("down", 7))

class IcServiceTypeTC(TextualConvention, Integer32):
    reference = "Section 4.2 'Imaging System Services' in PWG Imaging System Counters (PWG 5106.1); JmJobServiceTypesTC and jobServiceTypes in Job Mon MIB (RFC 2707)."
    description = 'The type of this managed service on this Imaging System.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("systemTotals", 3), ("copy", 4), ("emailIn", 5), ("emailOut", 6), ("faxIn", 7), ("faxOut", 8), ("networkFaxIn", 9), ("networkFaxOut", 10), ("print", 11), ("scan", 12), ("transform", 13))

class IcSubunitStatusTC(TextualConvention, Integer32):
    reference = "Section 2.2 'Printer Sub-Units' in Printer MIB v2 (RFC 3805); PrtSubUnitStatusTC in IANA Printer MIB (RFC 3805 and http://www.iana.org/assignments/ianaprinter-mib)."
    description = 'The status of this managed subunit on this Imaging System, expressed as a bit-mask that conforms to the PrtSubUnitStatusTC textual convention defined in IANA Printer MIB (originally published in RFC 3805).'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 126)

class IcSubunitTypeTC(TextualConvention, Integer32):
    reference = "Section 4.4 'Counter Overview' in PWG Imaging System Counters (PWG 5106.1); Section 2.2 'Printer Sub-Units' and ptrAlertGroup in Printer MIB (RFC 1759/3805); PrtAlertGroupTC in IANA Printer MIB (RFC 3805 and http://www.iana.org/assignments/ianaprinter-mib); finDeviceType in Finisher MIB (RFC 3806); FinDeviceTypeTC in IANA Finisher MIB (RFC 3806 and http://www.iana.org/assignments/ianafinisher-mib)."
    description = 'The type of this managed subunit on this Imaging System.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 4, 6, 8, 9, 10, 13, 14, 15, 30, 40, 50, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 503, 504))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("console", 4), ("cover", 6), ("inputTray", 8), ("outputTray", 9), ("marker", 10), ("mediaPath", 13), ("channel", 14), ("interpreter", 15), ("finisher", 30), ("interface", 40), ("scanner", 50), ("stapler", 302), ("stitcher", 303), ("folder", 304), ("binder", 305), ("trimmer", 306), ("dieCutter", 307), ("puncher", 308), ("perforater", 309), ("slitter", 310), ("separationCutter", 311), ("imprinter", 312), ("wrapper", 313), ("bander", 314), ("makeEnvelope", 315), ("stacker", 316), ("sheetRotator", 317), ("inserter", 318), ("scannerADF", 503), ("scannerPlaten", 504))

class IcWorkTypeTC(TextualConvention, Integer32):
    reference = "Section 5.2 'Work Counters' in PWG Imaging System Counters (PWG 5106.1)."
    description = 'The type of work for these counters.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("workTotals", 3), ("datastream", 4), ("auxiliary", 5), ("waste", 6), ("maintenance", 7))

icGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 1))
icGeneralNaturalLanguage = MibScalar((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: icGeneralNaturalLanguage.setReference('Tags for Identifying Languages (RFC 4646); jobNaturalLanguageTag attribute in Job Mon MIB (RFC 2707); prtGeneralCurrentLocalization in Printer MIB (RFC 1759/3805); attributes-natural-language in IPP/1.1 (RFC 2911).')
if mibBuilder.loadTexts: icGeneralNaturalLanguage.setStatus('current')
if mibBuilder.loadTexts: icGeneralNaturalLanguage.setDescription("The natural language tag (RFC 4646) for all localized text string objects (syntax of 'SnmpAdminString') defined in this MIB specified as a visible US-ASCII string (ANSI X.3-1968) that MUST NOT contain any US-ASCII control characters (0x00 to 0x1F inclusive, or 0x7F). If this object is empty, then the natural language for all localized text string objects defined in this MIB MUST default to 'en-US' (US English).")
icGeneralTotalServiceRecords = MibScalar((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 1, 2), IcCounter32()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: icGeneralTotalServiceRecords.setStatus('current')
if mibBuilder.loadTexts: icGeneralTotalServiceRecords.setDescription("Total managed services configured on this Imaging System, and therefore the number of entries in 'icServiceTable'.")
icGeneralTotalSubunitRecords = MibScalar((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 1, 3), IcCounter32()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: icGeneralTotalSubunitRecords.setStatus('current')
if mibBuilder.loadTexts: icGeneralTotalSubunitRecords.setDescription("Total managed subunits configured on this Imaging System, and therefore the number of entries in 'icSubunitTable'.")
icGeneralTotalMediaUsedRecords = MibScalar((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 1, 4), IcCounter32()).setUnits('records').setMaxAccess("readonly")
if mibBuilder.loadTexts: icGeneralTotalMediaUsedRecords.setStatus('current')
if mibBuilder.loadTexts: icGeneralTotalMediaUsedRecords.setDescription("Total records of specific media used by some managed service or managed subunit on this Imaging System, and therefore the number of entries in 'icMediaUsedTable'.")
icKey = MibIdentifier((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 2))
icKeyTable = MibTable((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 2, 1), )
if mibBuilder.loadTexts: icKeyTable.setStatus('current')
if mibBuilder.loadTexts: icKeyTable.setDescription('A table of the local unique integer keys for managed services and managed subunits on this Imaging System.')
icKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 2, 1, 1), ).setIndexNames((0, "PWG-IMAGING-COUNTER-MIB", "icKeyIndex"))
if mibBuilder.loadTexts: icKeyEntry.setStatus('current')
if mibBuilder.loadTexts: icKeyEntry.setDescription('A entry of one local unique integer key for a managed service or a managed subunit on this Imaging System.')
icKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: icKeyIndex.setStatus('current')
if mibBuilder.loadTexts: icKeyIndex.setDescription("Local key of this managed service (value of 'icServiceKey') or managed subunit (value of 'icSubunitKey') on this Imaging System. Usage: The value of this key can be used in 'icXxxKeyIndex' for lookup of counters on this Imaging System. DEFVAL intentionally omitted - index object.")
icKeyServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 2, 1, 1, 2), IcServiceTypeTC().clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: icKeyServiceType.setStatus('current')
if mibBuilder.loadTexts: icKeyServiceType.setDescription("The type of this managed service on this Imaging System (e.g., print, copy, etc.) or 'unknown' if not a service key.")
icKeyServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: icKeyServiceIndex.setStatus('current')
if mibBuilder.loadTexts: icKeyServiceIndex.setDescription("Local unique integer identifier of this managed service on this Imaging System, or zero if not a service key. If an Imaging System also implements the 'hrSWRunTable' and/or the 'hrSWInstalledTable' in the Host Resources MIB (RFC 1514/2790) then the value of 'icKeyServiceIndex' for each configured managed service SHOULD be the same as the value of 'hrSWRunIndex' and/or 'hrSWInstalledIndex' for that service.")
icKeySubunitType = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 2, 1, 1, 4), IcSubunitTypeTC().clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: icKeySubunitType.setStatus('current')
if mibBuilder.loadTexts: icKeySubunitType.setDescription("The type of this managed subunit on this Imaging System (e.g., input, marker, etc.) or 'unknown' if not a subunit key.")
icKeySubunitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: icKeySubunitIndex.setStatus('current')
if mibBuilder.loadTexts: icKeySubunitIndex.setDescription("Local unique integer identifier of this managed subunit on this Imaging System, or zero if not a subunit key. If an Imaging System also implements the Printer MIB (RFC 1759/3805) then the value of 'icKeySubunitIndex' for each configured managed subunit SHOULD be the same as the value of 'prtXxxIndex' for that subunit (if it is print-related).")
icService = MibIdentifier((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 3))
icServiceTable = MibTable((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 3, 1), )
if mibBuilder.loadTexts: icServiceTable.setStatus('current')
if mibBuilder.loadTexts: icServiceTable.setDescription('A table of managed services on this Imaging System.')
icServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 3, 1, 1), ).setIndexNames((0, "PWG-IMAGING-COUNTER-MIB", "icServiceType"), (0, "PWG-IMAGING-COUNTER-MIB", "icServiceIndex"))
if mibBuilder.loadTexts: icServiceEntry.setStatus('current')
if mibBuilder.loadTexts: icServiceEntry.setDescription('An entry for a managed service on this Imaging System.')
icServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 3, 1, 1, 1), IcServiceTypeTC())
if mibBuilder.loadTexts: icServiceType.setStatus('current')
if mibBuilder.loadTexts: icServiceType.setDescription('The type of this managed service on this Imaging System (e.g., print, copy, etc.). DEFVAL intentionally omitted - index object.')
icServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: icServiceIndex.setStatus('current')
if mibBuilder.loadTexts: icServiceIndex.setDescription("Local unique integer identifier of this managed service on this Imaging System. If an Imaging System also implements the 'hrSWRunTable' and/or the 'hrSWInstalledTable' in the Host Resources MIB (RFC 1514/2790) then the value of 'icServiceIndex' for each configured managed service SHOULD be the same as the value of 'hrSWRunIndex' and/or 'hrSWInstalledIndex' for that service. DEFVAL intentionally omitted - index object.")
icServiceKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: icServiceKey.setStatus('current')
if mibBuilder.loadTexts: icServiceKey.setDescription('Local key of this managed service (for lookup of counters) on this Imaging System. DEFVAL intentionally omitted - valid service key is REQUIRED.')
icServiceInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 3, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: icServiceInfo.setStatus('current')
if mibBuilder.loadTexts: icServiceInfo.setDescription("The description of this managed service on this Imaging System, for use with remote network management scripts and GUIs, specified as a Unicode string encoded in UTF-8 (RFC 3629) in the language specified in 'icGeneralNaturalLanguage'. For example: 'Print service supporting IPP and PSI'.")
icServiceJobSetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: icServiceJobSetIndex.setStatus('current')
if mibBuilder.loadTexts: icServiceJobSetIndex.setDescription("The value of 'jmGeneralJobSetIndex' in Job Mon MIB (RFC 2707) for this managed service, if the Job Mon MIB is implemented and this managed service is represented there, or zero if none.")
icServiceState = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 3, 1, 1, 6), IcServiceStateTC().clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: icServiceState.setReference('hrDeviceStatus, hrPrinterStatus, and hrSWRunStatus in Host Resources MIB (RFC 2790); printer-state in IPP/1.1 Model (RFC 2911).')
if mibBuilder.loadTexts: icServiceState.setStatus('current')
if mibBuilder.loadTexts: icServiceState.setDescription('The state of this managed service on this Imaging System. Usage: State may be mapped from values of hrDeviceStatus and either hrPrinterStatus or hrSWRunStatus in Host Resources MIB (RFC 2790). Note: Simple print service state is also available from printer-state in IPP/1.1 Model (RFC 2911).')
icServiceStateMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 3, 1, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: icServiceStateMessage.setStatus('current')
if mibBuilder.loadTexts: icServiceStateMessage.setDescription("The description of the current state of this managed service, for use with remote network management scripts and GUIs, specified as a Unicode string encoded in UTF-8 (RFC 3629) in the language specified in 'icGeneralNaturalLanguage'. For example: 'Testing - warning alerts pending'.")
icServicePrtAlertIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: icServicePrtAlertIndex.setStatus('current')
if mibBuilder.loadTexts: icServicePrtAlertIndex.setDescription("If an Imaging System also implements the Printer MIB (RFC 1759/3805) then the value of 'icServicePrtAlertIndex' MUST be equal to: (a) the value of 'prtAlertIndex' for the most important critical alert that affects this managed service; or (b) the value of 'prtAlertIndex' for the most important warning alert that affects this managed service; or (c) zero, if no critical or warning alert currently affects this managed service. If an Imaging System does NOT also implement the Printer MIB (RFC 1759/3805) then the value of 'icServicePrtAlertIndex' MUST be equal to zero.")
icSubunit = MibIdentifier((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 4))
icSubunitTable = MibTable((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 4, 1), )
if mibBuilder.loadTexts: icSubunitTable.setReference('prtGeneralTable in Printer MIB (RFC 1759/3805).')
if mibBuilder.loadTexts: icSubunitTable.setStatus('current')
if mibBuilder.loadTexts: icSubunitTable.setDescription('A table of managed subunits on this Imaging System.')
icSubunitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 4, 1, 1), ).setIndexNames((0, "PWG-IMAGING-COUNTER-MIB", "icSubunitType"), (0, "PWG-IMAGING-COUNTER-MIB", "icSubunitIndex"))
if mibBuilder.loadTexts: icSubunitEntry.setStatus('current')
if mibBuilder.loadTexts: icSubunitEntry.setDescription('An entry for a managed subunit on this Imaging System.')
icSubunitType = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 4, 1, 1, 1), IcSubunitTypeTC())
if mibBuilder.loadTexts: icSubunitType.setStatus('current')
if mibBuilder.loadTexts: icSubunitType.setDescription('The type of this managed subunit on this Imaging System (e.g., channel, marker, etc.). DEFVAL intentionally omitted - index object.')
icSubunitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: icSubunitIndex.setStatus('current')
if mibBuilder.loadTexts: icSubunitIndex.setDescription("Local unique integer identifier of this managed subunit on this Imaging System. If an Imaging System also implements the Printer MIB (RFC 1759/3805) then the value of 'icSubunitIndex' for each configured managed subunit SHOULD be the same as the value of 'prtXxxIndex' for that subunit (if it is print-related). DEFVAL intentionally omitted - index object.")
icSubunitKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: icSubunitKey.setStatus('current')
if mibBuilder.loadTexts: icSubunitKey.setDescription('Local key of this managed subunit (for lookup of counters) on this Imaging System. DEFVAL intentionally omitted - valid subunit key is REQUIRED.')
icSubunitInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 4, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: icSubunitInfo.setStatus('current')
if mibBuilder.loadTexts: icSubunitInfo.setDescription("The description of this managed subunit on this Imaging System, for use with remote network management scripts and GUIs, specified as a Unicode string encoded in UTF-8 (RFC 3629) in the language specified in 'icGeneralNaturalLanguage'. For example: 'Marker subunit supporting simplex and duplex'.")
icSubunitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 4, 1, 1, 5), IcSubunitStatusTC().clone(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: icSubunitStatus.setReference("Section 2.2 'Printer Sub-Units' and PrtSubUnitStatusTC in Printer MIB v2 (RFC 3805).")
if mibBuilder.loadTexts: icSubunitStatus.setStatus('current')
if mibBuilder.loadTexts: icSubunitStatus.setDescription('The status of this managed subunit on this Imaging System, expressed as a bit-mask that conforms to the PrtSubUnitStatusTC textual convention defined in Printer MIB v2 (RFC 3805).')
icSubunitStatusMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 4, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: icSubunitStatusMessage.setStatus('current')
if mibBuilder.loadTexts: icSubunitStatusMessage.setDescription("The description of the current status of this managed subunit, for use with remote network management scripts and GUIs, specified as a Unicode string encoded in UTF-8 (RFC 3629) in the language specified in 'icGeneralNaturalLanguage'. For example: 'Available and Busy - no alerts pending'.")
icTime = MibIdentifier((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 5))
icTimeTable = MibTable((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 5, 1), )
if mibBuilder.loadTexts: icTimeTable.setReference('icServiceTable and icSubunitTable in this MIB.')
if mibBuilder.loadTexts: icTimeTable.setStatus('current')
if mibBuilder.loadTexts: icTimeTable.setDescription('A table of availability counters for managed services and managed subunits on this Imaging System.')
icTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 5, 1, 1), ).setIndexNames((0, "PWG-IMAGING-COUNTER-MIB", "icTimeKeyIndex"), (0, "PWG-IMAGING-COUNTER-MIB", "icTimePersistence"))
if mibBuilder.loadTexts: icTimeEntry.setStatus('current')
if mibBuilder.loadTexts: icTimeEntry.setDescription('An entry of availability counters for a managed service or a managed subunit on this Imaging System.')
icTimeKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: icTimeKeyIndex.setStatus('current')
if mibBuilder.loadTexts: icTimeKeyIndex.setDescription("Local key of this managed service (value of 'icServiceKey') or managed subunit (value of 'icSubunitKey') on this Imaging System. DEFVAL intentionally omitted - index object.")
icTimePersistence = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 5, 1, 1, 2), IcPersistenceTC())
if mibBuilder.loadTexts: icTimePersistence.setStatus('current')
if mibBuilder.loadTexts: icTimePersistence.setDescription('The persistence of these counters. DEFVAL intentionally omitted - index object.')
icTimeTotalSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 5, 1, 1, 3), IcCounter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: icTimeTotalSeconds.setReference('hrSystemUptime in Host Resources MIB (RFC 1514/2790); sysUpTime in MIB-II (RFC 1213); printer-up-time in IPP/1.1 Model (RFC 2911).')
if mibBuilder.loadTexts: icTimeTotalSeconds.setStatus('current')
if mibBuilder.loadTexts: icTimeTotalSeconds.setDescription('Total time in seconds since this managed service or managed subunit was installed. Usage: Total time may be mapped from values of hrSystemUptime in Host Resources MIB (RFC2790) or sysUpTime in MIB-II (RFC 1213), but these 32-bit tick (1/100th second) counters can roll over in 15 months, so an agent MUST account for roll over. If implemented, hrSystemUptime (main system running time) SHOULD be used instead of sysUpTime (SNMP Agent running time), to avoid undetected roll over or restart discontinuities. Note: Time in seconds is also available from printer-up-time in IPP/1.1 Model (RFC 2911).')
icTimeDownSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 5, 1, 1, 4), IcCounter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: icTimeDownSeconds.setReference("hrDeviceStatus of 'down' and hrSystemUptime in Host Resources MIB (RFC 1514/2790); sysUpTime in MIB-II (RFC 1213); printer-up-time in IPP/1.1 Model (RFC 2911).")
if mibBuilder.loadTexts: icTimeDownSeconds.setStatus('current')
if mibBuilder.loadTexts: icTimeDownSeconds.setDescription("Time in seconds that this managed service or managed subunit has spent in down mode (i.e., cannot process jobs), due to an error that requires intervention or to administrative action, since it was installed. Usage: Down time may be mapped from hrDeviceStatus of 'down' and snapshots of hrSystemUptime in Host Resources MIB (RFC2790) or sysUpTime in MIB-II (RFC 1213), but these 32-bit tick (1/100th second) counters can roll over in 15 months, so an agent MUST account for roll over. If implemented, hrSystemUptime (main system running time) SHOULD be used instead of sysUpTime (SNMP Agent running time), to avoid undetected roll over or restart discontinuities. Note: Time in seconds is also available from printer-up-time in IPP/1.1 Model (RFC 2911).")
icTimeMaintenanceSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 5, 1, 1, 5), IcCounter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: icTimeMaintenanceSeconds.setReference("hrDeviceStatus of 'testing' and hrSystemUptime in Host Resources MIB (RFC 1514/2790); sysUpTime in MIB-II (RFC 1213); printer-up-time in IPP/1.1 Model (RFC 2911).")
if mibBuilder.loadTexts: icTimeMaintenanceSeconds.setStatus('current')
if mibBuilder.loadTexts: icTimeMaintenanceSeconds.setDescription("Time in seconds that this managed service or managed subunit has spent in maintenance mode (testing, field service, calibration, etc.) since it was installed Usage: Maintenance may be mapped from hrDeviceStatus 'testing' and snapshots of hrSystemUptime in Host Resources MIB (RFC2790) or sysUpTime in MIB-II (RFC 1213), but these 32-bit tick (1/100th second) counters can roll over in 15 months, so an agent MUST account for roll over. If implemented, hrSystemUptime (main system running time) SHOULD be used instead of sysUpTime (SNMP Agent running time), to avoid undetected roll over or restart discontinuities. Note: Time in seconds is also available in printer-up-time in IPP/1.1 Model (RFC 2911).")
icTimeProcessingSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 5, 1, 1, 6), IcCounter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: icTimeProcessingSeconds.setReference("hrDeviceStatus of 'running' or 'warning' and hrPrinterStatus or hrSWRunStatus in Host Resources MIB (RFC 1514/2790); sysUpTime in MIB-II (RFC 1213); printer-up-time in IPP/1.1 Model (RFC 2911).")
if mibBuilder.loadTexts: icTimeProcessingSeconds.setStatus('current')
if mibBuilder.loadTexts: icTimeProcessingSeconds.setDescription("Time in seconds that this managed service or managed subunit has spent processing jobs in user mode since it was installed. Usage: Processing may be mapped from hrDeviceStatus of 'running' or 'warning' and either hrPrinterStatus of 'printing' or hrSWRunStatus of 'running' (vs 'runnable' or 'notRunnable') and snapshots of hrSystemUptime in Host Resources MIB (RFC2790) or sysUpTime in MIB-II (RFC 1213), but these 32-bit tick (1/100th second) counters can roll over in 15 months, so an agent MUST account for roll over. If implemented, hrSystemUptime (main system running time) SHOULD be used instead of sysUpTime (SNMP Agent running time), to avoid undetected roll over or restart discontinuities. Note: Time in seconds is also available in printer-up-time in IPP/1.1 Model (RFC 2911).")
icMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 6))
icMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 6, 1), )
if mibBuilder.loadTexts: icMonitorTable.setReference('icServiceTable and icSubunitTable in this MIB.')
if mibBuilder.loadTexts: icMonitorTable.setStatus('current')
if mibBuilder.loadTexts: icMonitorTable.setDescription('A table of monitoring counters for managed services and managed subunits on this Imaging System.')
icMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 6, 1, 1), ).setIndexNames((0, "PWG-IMAGING-COUNTER-MIB", "icMonitorKeyIndex"), (0, "PWG-IMAGING-COUNTER-MIB", "icMonitorPersistence"))
if mibBuilder.loadTexts: icMonitorEntry.setStatus('current')
if mibBuilder.loadTexts: icMonitorEntry.setDescription('An entry of monitoring counters for a managed service or a managed subunit on this Imaging System.')
icMonitorKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: icMonitorKeyIndex.setStatus('current')
if mibBuilder.loadTexts: icMonitorKeyIndex.setDescription("Local key of this managed service (value of 'icServiceKey') or managed subunit (value of 'icSubunitKey') on this Imaging System. DEFVAL intentionally omitted - index object.")
icMonitorPersistence = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 6, 1, 1, 2), IcPersistenceTC())
if mibBuilder.loadTexts: icMonitorPersistence.setStatus('current')
if mibBuilder.loadTexts: icMonitorPersistence.setDescription('The persistence of these counters. DEFVAL intentionally omitted - index object.')
icMonitorConfigChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 6, 1, 1, 3), IcCounter32()).setUnits('changes').setMaxAccess("readonly")
if mibBuilder.loadTexts: icMonitorConfigChanges.setReference('prtGeneralConfigChanges in Printer MIB (RFC 1759/3805).')
if mibBuilder.loadTexts: icMonitorConfigChanges.setStatus('current')
if mibBuilder.loadTexts: icMonitorConfigChanges.setDescription('Total configuration changes that have occurred on this managed service or managed subunit (e.g., changes to attributes).')
icMonitorTotalAlerts = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 6, 1, 1, 4), IcCounter32()).setUnits('alerts').setMaxAccess("readonly")
if mibBuilder.loadTexts: icMonitorTotalAlerts.setReference('prtAlertAllEvents in Printer MIB v2 (RFC 3805).')
if mibBuilder.loadTexts: icMonitorTotalAlerts.setStatus('current')
if mibBuilder.loadTexts: icMonitorTotalAlerts.setDescription('Total alerts that have occurred on this managed service or managed subunit.')
icMonitorCriticalAlerts = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 6, 1, 1, 5), IcCounter32()).setUnits('alerts').setMaxAccess("readonly")
if mibBuilder.loadTexts: icMonitorCriticalAlerts.setReference('prtAlertCriticalEvents in Printer MIB v2 (RFC 3805).')
if mibBuilder.loadTexts: icMonitorCriticalAlerts.setStatus('current')
if mibBuilder.loadTexts: icMonitorCriticalAlerts.setDescription('Critical alerts that have occurred on this managed service or managed subunit.')
icMonitorAbortedJobs = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 6, 1, 1, 6), IcCounter32()).setUnits('jobs').setMaxAccess("readonly")
if mibBuilder.loadTexts: icMonitorAbortedJobs.setReference('jmJobState and JmJobStateTC in Job Mon MIB (RFC 2707).')
if mibBuilder.loadTexts: icMonitorAbortedJobs.setStatus('current')
if mibBuilder.loadTexts: icMonitorAbortedJobs.setDescription('Total jobs that have been aborted (by the system software) on this managed service or managed subunit.')
icMonitorCanceledJobs = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 6, 1, 1, 7), IcCounter32()).setUnits('jobs').setMaxAccess("readonly")
if mibBuilder.loadTexts: icMonitorCanceledJobs.setReference('jmJobState and JmJobStateTC in Job Mon MIB (RFC 2707).')
if mibBuilder.loadTexts: icMonitorCanceledJobs.setStatus('current')
if mibBuilder.loadTexts: icMonitorCanceledJobs.setDescription('Total jobs that have been canceled (by an authorized user) on this managed service or managed subunit.')
icMonitorCompletedJobs = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 6, 1, 1, 8), IcCounter32()).setUnits('jobs').setMaxAccess("readonly")
if mibBuilder.loadTexts: icMonitorCompletedJobs.setReference('jmJobState and JmJobStateTC in Job Mon MIB (RFC 2707).')
if mibBuilder.loadTexts: icMonitorCompletedJobs.setStatus('current')
if mibBuilder.loadTexts: icMonitorCompletedJobs.setDescription('Total jobs that have been completed (successfully or with warnings/errors) on this managed service or managed subunit.')
icMonitorCompletedFinisherJobs = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 6, 1, 1, 9), IcCounter32()).setUnits('jobs').setMaxAccess("readonly")
if mibBuilder.loadTexts: icMonitorCompletedFinisherJobs.setReference('finishing and JmFinishingTC in Job Mon MIB (RFC 2707).')
if mibBuilder.loadTexts: icMonitorCompletedFinisherJobs.setStatus('current')
if mibBuilder.loadTexts: icMonitorCompletedFinisherJobs.setDescription('Total jobs that have been completed (successfully or with warnings and errors) and for which any finishing process was performed on this managed service or managed subunit.')
icMonitorMemoryAllocErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 6, 1, 1, 10), IcCounter32()).setUnits('errors').setMaxAccess("readonly")
if mibBuilder.loadTexts: icMonitorMemoryAllocErrors.setReference('hrStorageType, hrStorageSize, hrStorageUsed, and hrStorageAllocationFailures in Host Resources MIB (RFC 1514/2790).')
if mibBuilder.loadTexts: icMonitorMemoryAllocErrors.setStatus('current')
if mibBuilder.loadTexts: icMonitorMemoryAllocErrors.setDescription("Total times that data stored by this managed service or managed subunit to local Imaging System memory caused a memory allocation failure. Usage: Memory allocation errors may be mapped from values of hrStorageAllocationFailures and hrStorageType of 'hrStorageRam' in Host Resources MIB (RFC 1514/2790).")
icMonitorMemoryAllocWarnings = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 6, 1, 1, 11), IcCounter32()).setUnits('warnings').setMaxAccess("readonly")
if mibBuilder.loadTexts: icMonitorMemoryAllocWarnings.setReference('hrStorageType, hrStorageSize, and hrStorageUsed in Host Resources MIB (RFC 1514/2790).')
if mibBuilder.loadTexts: icMonitorMemoryAllocWarnings.setStatus('current')
if mibBuilder.loadTexts: icMonitorMemoryAllocWarnings.setDescription("Total times that data stored by this managed service or managed subunit to local Imaging System memory exceeded an implementation-defined or administratively configured memory allocation threshold. Note: This counter is intended to support increasing available memory on an Imaging System before job failures occur. At this time, there is no support for detection of memory allocation warnings (as opposed to errors) in any IETF standards-track MIB, except for the generic 'subunitRecoverableFailure(29)' value of PrtAlertCodeTC defined in the IANA Printer MIB (originally published in RFC 3805).")
icMonitorStorageAllocErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 6, 1, 1, 12), IcCounter32()).setUnits('errors').setMaxAccess("readonly")
if mibBuilder.loadTexts: icMonitorStorageAllocErrors.setReference('hrStorageSize, hrStorageUsed, and hrStorageAllocationFailures in Host Resources MIB (RFC 1514/2790).')
if mibBuilder.loadTexts: icMonitorStorageAllocErrors.setStatus('current')
if mibBuilder.loadTexts: icMonitorStorageAllocErrors.setDescription("Total times that data stored by this managed service or managed subunit to a local or remote file system caused a storage allocation failure. Usage: Storage allocation errors may be mapped from values of hrStorageAllocationFailures and hrStorageType of 'hrStorageFixedDisk', 'hrStorageRemovableDisk', 'hrStorageFloppyDisk', 'hrStorageFlashMemory', or ' 'hrStorageNetworkDisk' in Host Resources MIB (RFC 1514/2790).")
icMonitorStorageAllocWarnings = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 6, 1, 1, 13), IcCounter32()).setUnits('warnings').setMaxAccess("readonly")
if mibBuilder.loadTexts: icMonitorStorageAllocWarnings.setReference('hrStorageType, hrStorageSize, and hrStorageUsed in Host Resources MIB (RFC 1514/2790).')
if mibBuilder.loadTexts: icMonitorStorageAllocWarnings.setStatus('current')
if mibBuilder.loadTexts: icMonitorStorageAllocWarnings.setDescription("Total times that data stored by this managed service or managed subunit to a local or remote file system exceeded an implementation-defined or administratively configured storage allocation threshold. Note: This counter is intended to support increasing available storage on an Imaging System before job failures occur. At this time, there is no support for detection of storage allocation warnings (as opposed to errors) in any IETF standards-track MIB, except for the generic 'subunitRecoverableFailure(29)' value of PrtAlertCodeTC defined in the IANA Printer MIB (originally published in RFC 3805).")
icMonitorLocalStorageKOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 6, 1, 1, 14), IcCounter32()).setUnits('koctets').setMaxAccess("readonly")
if mibBuilder.loadTexts: icMonitorLocalStorageKOctets.setReference('hrStorageType, hrStorageSize, and hrStorageUsed in Host Resources MIB (RFC 1514/2790).')
if mibBuilder.loadTexts: icMonitorLocalStorageKOctets.setStatus('current')
if mibBuilder.loadTexts: icMonitorLocalStorageKOctets.setDescription("Total amount of data stored by this managed service or managed subunit to the local file system of this Imaging System. Usage: Local storage may be mapped from hrStorageType of 'hrStorageFixedDisk', 'hrStorageRemovableDisk', 'hrStorageFloppyDisk', or 'hrStorageFlashMemory' and hrStorageUsed in Host Resources MIB (RFC 1514/2790).")
icMonitorRemoteStorageKOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 6, 1, 1, 15), IcCounter32()).setUnits('koctets').setMaxAccess("readonly")
if mibBuilder.loadTexts: icMonitorRemoteStorageKOctets.setReference('hrStorageType, hrStorageSize, and hrStorageUsed in Host Resources MIB (RFC 1514/2790).')
if mibBuilder.loadTexts: icMonitorRemoteStorageKOctets.setStatus('current')
if mibBuilder.loadTexts: icMonitorRemoteStorageKOctets.setDescription("Total amount of data stored by this managed service or managed subunit to a remote file system from this Imaging System. Usage: Remote storage may be mapped from hrStorageType of 'hrStorageNetworkDisk' and hrStorageUsed in Host Resources MIB (RFC 1514/2790).")
icImage = MibIdentifier((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 7))
icImageTable = MibTable((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 7, 1), )
if mibBuilder.loadTexts: icImageTable.setReference('icServiceTable and icSubunitTable in this MIB.')
if mibBuilder.loadTexts: icImageTable.setStatus('current')
if mibBuilder.loadTexts: icImageTable.setDescription('A table of work counters in images for managed services and managed subunits on this Imaging System.')
icImageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 7, 1, 1), ).setIndexNames((0, "PWG-IMAGING-COUNTER-MIB", "icImageKeyIndex"), (0, "PWG-IMAGING-COUNTER-MIB", "icImageWorkType"), (0, "PWG-IMAGING-COUNTER-MIB", "icImagePersistence"))
if mibBuilder.loadTexts: icImageEntry.setStatus('current')
if mibBuilder.loadTexts: icImageEntry.setDescription('An entry of work counters in images for a managed service or a managed subunit on this Imaging System.')
icImageKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: icImageKeyIndex.setStatus('current')
if mibBuilder.loadTexts: icImageKeyIndex.setDescription("Local key of this managed service (value of 'icServiceKey') or managed subunit (value of 'icSubunitKey') on this Imaging System. DEFVAL intentionally omitted - index object.")
icImageWorkType = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 7, 1, 1, 2), IcWorkTypeTC())
if mibBuilder.loadTexts: icImageWorkType.setStatus('current')
if mibBuilder.loadTexts: icImageWorkType.setDescription('The type of work for these counters. DEFVAL intentionally omitted - index object.')
icImagePersistence = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 7, 1, 1, 3), IcPersistenceTC())
if mibBuilder.loadTexts: icImagePersistence.setStatus('current')
if mibBuilder.loadTexts: icImagePersistence.setDescription('The persistence of these counters. DEFVAL intentionally omitted - index object.')
icImageTotalImages = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 7, 1, 1, 4), IcCounter32()).setUnits('images').setMaxAccess("readonly")
if mibBuilder.loadTexts: icImageTotalImages.setStatus('current')
if mibBuilder.loadTexts: icImageTotalImages.setDescription("Total images input (e.g., 'icServiceType' of 'scan') or output (e.g., 'icServiceType' of 'faxOut') by this managed service or managed subunit.")
icImageMonochromeImages = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 7, 1, 1, 5), IcCounter32()).setUnits('images').setMaxAccess("readonly")
if mibBuilder.loadTexts: icImageMonochromeImages.setStatus('current')
if mibBuilder.loadTexts: icImageMonochromeImages.setDescription("Monochrome images input (e.g., 'icServiceType' of 'scan') or output (e.g., 'icServiceType' of 'faxOut') by this managed service or managed subunit.")
icImageFullColorImages = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 7, 1, 1, 6), IcCounter32()).setUnits('images').setMaxAccess("readonly")
if mibBuilder.loadTexts: icImageFullColorImages.setStatus('current')
if mibBuilder.loadTexts: icImageFullColorImages.setDescription("Full color images input (e.g., 'icServiceType' of 'scan') or output (e.g., 'icServiceType' of 'faxOut') by this managed service or managed subunit.")
icImpression = MibIdentifier((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 8))
icImpressionTable = MibTable((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 8, 1), )
if mibBuilder.loadTexts: icImpressionTable.setReference('icServiceTable and icSubunitTable in this MIB.')
if mibBuilder.loadTexts: icImpressionTable.setStatus('current')
if mibBuilder.loadTexts: icImpressionTable.setDescription('A table of work counters in impressions for managed services and managed subunits on this Imaging System.')
icImpressionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 8, 1, 1), ).setIndexNames((0, "PWG-IMAGING-COUNTER-MIB", "icImpressionKeyIndex"), (0, "PWG-IMAGING-COUNTER-MIB", "icImpressionWorkType"), (0, "PWG-IMAGING-COUNTER-MIB", "icImpressionPersistence"))
if mibBuilder.loadTexts: icImpressionEntry.setStatus('current')
if mibBuilder.loadTexts: icImpressionEntry.setDescription('An entry of work counters in impressions for a managed service or a managed subunit on this Imaging System.')
icImpressionKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: icImpressionKeyIndex.setStatus('current')
if mibBuilder.loadTexts: icImpressionKeyIndex.setDescription("Local key of this managed service (value of 'icServiceKey') or managed subunit (value of 'icSubunitKey') on this Imaging System. DEFVAL intentionally omitted - index object.")
icImpressionWorkType = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 8, 1, 1, 2), IcWorkTypeTC())
if mibBuilder.loadTexts: icImpressionWorkType.setStatus('current')
if mibBuilder.loadTexts: icImpressionWorkType.setDescription('The type of work for these counters. DEFVAL intentionally omitted - index object.')
icImpressionPersistence = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 8, 1, 1, 3), IcPersistenceTC())
if mibBuilder.loadTexts: icImpressionPersistence.setStatus('current')
if mibBuilder.loadTexts: icImpressionPersistence.setDescription('The persistence of these counters. DEFVAL intentionally omitted - index object.')
icImpressionTotalImps = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 8, 1, 1, 4), IcCounter32()).setUnits('impressions').setMaxAccess("readonly")
if mibBuilder.loadTexts: icImpressionTotalImps.setReference('jmJobImpressionsCompleted in Job Mon MIB (RFC 2707); job-impressions-completed in IPP/1.1 (RFC 2911).')
if mibBuilder.loadTexts: icImpressionTotalImps.setStatus('current')
if mibBuilder.loadTexts: icImpressionTotalImps.setDescription("Total hardcopy impressions printed by this managed service (e.g., 'icServiceType' of 'print') or managed subunit (e.g., 'icSubunitType' of 'marker').")
icImpressionMonochromeImps = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 8, 1, 1, 5), IcCounter32()).setUnits('impressions').setMaxAccess("readonly")
if mibBuilder.loadTexts: icImpressionMonochromeImps.setStatus('current')
if mibBuilder.loadTexts: icImpressionMonochromeImps.setDescription("Monochrome hardcopy impressions printed by this managed service (e.g., 'icServiceType' of 'print') or managed subunit (e.g., 'icSubunitType' of 'marker').")
icImpressionBlankImps = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 8, 1, 1, 6), IcCounter32()).setUnits('impressions').setMaxAccess("readonly")
if mibBuilder.loadTexts: icImpressionBlankImps.setStatus('current')
if mibBuilder.loadTexts: icImpressionBlankImps.setDescription("Blank hardcopy impressions printed by this managed service (e.g., 'icServiceType' of 'print') or managed subunit (e.g., 'icSubunitType' of 'marker').")
icImpressionFullColorImps = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 8, 1, 1, 7), IcCounter32()).setUnits('impressions').setMaxAccess("readonly")
if mibBuilder.loadTexts: icImpressionFullColorImps.setReference('fullColorImpressionsCompleted in Job Mon MIB (RFC 2707).')
if mibBuilder.loadTexts: icImpressionFullColorImps.setStatus('current')
if mibBuilder.loadTexts: icImpressionFullColorImps.setDescription("Full color hardcopy impressions printed by this managed service (e.g., 'icServiceType' of 'print') or managed subunit (e.g., 'icSubunitType' of 'marker').")
icImpressionHighlightColorImps = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 8, 1, 1, 8), IcCounter32()).setUnits('impressions').setMaxAccess("readonly")
if mibBuilder.loadTexts: icImpressionHighlightColorImps.setReference('highlightColorImpressionsCompleted in Job Mon MIB (RFC 2707).')
if mibBuilder.loadTexts: icImpressionHighlightColorImps.setStatus('current')
if mibBuilder.loadTexts: icImpressionHighlightColorImps.setDescription("Highlight color hardcopy impressions printed by this managed service (e.g., 'icServiceType' of 'print') or managed subunit (e.g., 'icSubunitType' of 'marker').")
icTwoSided = MibIdentifier((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 9))
icTwoSidedTable = MibTable((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 9, 1), )
if mibBuilder.loadTexts: icTwoSidedTable.setReference('icServiceTable and icSubunitTable in this MIB.')
if mibBuilder.loadTexts: icTwoSidedTable.setStatus('current')
if mibBuilder.loadTexts: icTwoSidedTable.setDescription('A table of work counters in two-sided impressions for managed services and managed subunits on this Imaging System.')
icTwoSidedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 9, 1, 1), ).setIndexNames((0, "PWG-IMAGING-COUNTER-MIB", "icTwoSidedKeyIndex"), (0, "PWG-IMAGING-COUNTER-MIB", "icTwoSidedWorkType"), (0, "PWG-IMAGING-COUNTER-MIB", "icTwoSidedPersistence"))
if mibBuilder.loadTexts: icTwoSidedEntry.setStatus('current')
if mibBuilder.loadTexts: icTwoSidedEntry.setDescription('An entry of work counters in two-sided impressions for a managed service or managed subunit on this Imaging System.')
icTwoSidedKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: icTwoSidedKeyIndex.setStatus('current')
if mibBuilder.loadTexts: icTwoSidedKeyIndex.setDescription("Local key of this managed service (value of 'icServiceKey') or managed subunit (value of 'icSubunitKey') on this Imaging System. DEFVAL intentionally omitted - index object.")
icTwoSidedWorkType = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 9, 1, 1, 2), IcWorkTypeTC())
if mibBuilder.loadTexts: icTwoSidedWorkType.setStatus('current')
if mibBuilder.loadTexts: icTwoSidedWorkType.setDescription('The type of work for these counters. DEFVAL intentionally omitted - index object.')
icTwoSidedPersistence = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 9, 1, 1, 3), IcPersistenceTC())
if mibBuilder.loadTexts: icTwoSidedPersistence.setStatus('current')
if mibBuilder.loadTexts: icTwoSidedPersistence.setDescription('The persistence of these counters. DEFVAL intentionally omitted - index object.')
icTwoSidedTotalImps = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 9, 1, 1, 4), IcCounter32()).setUnits('impressions').setMaxAccess("readonly")
if mibBuilder.loadTexts: icTwoSidedTotalImps.setReference('jmJobImpressionsCompleted in Job Mon MIB (RFC 2707); job-impressions-completed in IPP/1.1 (RFC 2911).')
if mibBuilder.loadTexts: icTwoSidedTotalImps.setStatus('current')
if mibBuilder.loadTexts: icTwoSidedTotalImps.setDescription("Total hardcopy impressions printed two-sided by this managed service (e.g., 'icServiceType' of 'print') or managed subunit (e.g., 'icSubunitType' of 'marker').")
icTwoSidedMonochromeImps = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 9, 1, 1, 5), IcCounter32()).setUnits('impressions').setMaxAccess("readonly")
if mibBuilder.loadTexts: icTwoSidedMonochromeImps.setStatus('current')
if mibBuilder.loadTexts: icTwoSidedMonochromeImps.setDescription("Monochrome hardcopy impressions printed two-sided by this managed service (e.g., 'icServiceType' of 'print') or managed subunit (e.g., 'icSubunitType' of 'marker').")
icTwoSidedBlankImps = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 9, 1, 1, 6), IcCounter32()).setUnits('impressions').setMaxAccess("readonly")
if mibBuilder.loadTexts: icTwoSidedBlankImps.setStatus('current')
if mibBuilder.loadTexts: icTwoSidedBlankImps.setDescription("Blank hardcopy impressions printed two-sided by this managed service (e.g., 'icServiceType' of 'print') or managed subunit (e.g., 'icSubunitType' of 'marker').")
icTwoSidedFullColorImps = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 9, 1, 1, 7), IcCounter32()).setUnits('impressions').setMaxAccess("readonly")
if mibBuilder.loadTexts: icTwoSidedFullColorImps.setReference('fullColorImpressionsCompleted in Job Mon MIB (RFC 2707).')
if mibBuilder.loadTexts: icTwoSidedFullColorImps.setStatus('current')
if mibBuilder.loadTexts: icTwoSidedFullColorImps.setDescription("Full color hardcopy impressions printed two-sided by this managed service (e.g., 'icServiceType' of 'print') or managed subunit (e.g., 'icSubunitType' of 'marker').")
icTwoSidedHighlightColorImps = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 9, 1, 1, 8), IcCounter32()).setUnits('impressions').setMaxAccess("readonly")
if mibBuilder.loadTexts: icTwoSidedHighlightColorImps.setReference('highlightColorImpressionsCompleted in Job Mon MIB (RFC 2707).')
if mibBuilder.loadTexts: icTwoSidedHighlightColorImps.setStatus('current')
if mibBuilder.loadTexts: icTwoSidedHighlightColorImps.setDescription("Highlight color hardcopy impressions printed two-sided by this managed service (e.g., 'icServiceType' of 'print') or managed subunit (e.g., 'icSubunitType' of 'marker').")
icSheet = MibIdentifier((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 10))
icSheetTable = MibTable((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 10, 1), )
if mibBuilder.loadTexts: icSheetTable.setReference('icServiceTable and icSubunitTable in this MIB.')
if mibBuilder.loadTexts: icSheetTable.setStatus('current')
if mibBuilder.loadTexts: icSheetTable.setDescription('A table of work counters in sheets for managed services and managed subunits on this Imaging System.')
icSheetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 10, 1, 1), ).setIndexNames((0, "PWG-IMAGING-COUNTER-MIB", "icSheetKeyIndex"), (0, "PWG-IMAGING-COUNTER-MIB", "icSheetWorkType"), (0, "PWG-IMAGING-COUNTER-MIB", "icSheetPersistence"))
if mibBuilder.loadTexts: icSheetEntry.setStatus('current')
if mibBuilder.loadTexts: icSheetEntry.setDescription('An entry of work counters in sheets for a managed service or a managed subunit on this Imaging System.')
icSheetKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: icSheetKeyIndex.setStatus('current')
if mibBuilder.loadTexts: icSheetKeyIndex.setDescription("Local key of this managed service (value of 'icServiceKey') or managed subunit (value of 'icSubunitKey') on this Imaging System. DEFVAL intentionally omitted - index object.")
icSheetWorkType = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 10, 1, 1, 2), IcWorkTypeTC())
if mibBuilder.loadTexts: icSheetWorkType.setStatus('current')
if mibBuilder.loadTexts: icSheetWorkType.setDescription('The type of work for these counters. DEFVAL intentionally omitted - index object.')
icSheetPersistence = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 10, 1, 1, 3), IcPersistenceTC())
if mibBuilder.loadTexts: icSheetPersistence.setStatus('current')
if mibBuilder.loadTexts: icSheetPersistence.setDescription('The persistence of these counters. DEFVAL intentionally omitted - index object.')
icSheetTotalSheets = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 10, 1, 1, 4), IcCounter32()).setUnits('sheets').setMaxAccess("readonly")
if mibBuilder.loadTexts: icSheetTotalSheets.setReference('sheetsCompleted in Job Mon MIB (RFC 2707); job-media-sheets-completed in IPP/1.1 (RFC 2911).')
if mibBuilder.loadTexts: icSheetTotalSheets.setStatus('current')
if mibBuilder.loadTexts: icSheetTotalSheets.setDescription("Total media sheets consumed by this managed service (e.g., 'icServiceType' of 'print') or managed subunit (e.g., 'icSubunitType' of 'marker').")
icSheetMonochromeSheets = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 10, 1, 1, 5), IcCounter32()).setUnits('sheets').setMaxAccess("readonly")
if mibBuilder.loadTexts: icSheetMonochromeSheets.setStatus('current')
if mibBuilder.loadTexts: icSheetMonochromeSheets.setDescription("Monochrome media sheets consumed by this managed service (e.g., 'icServiceType' of 'print') or managed subunit (e.g., 'icSubunitType' of 'marker').")
icSheetBlankSheets = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 10, 1, 1, 6), IcCounter32()).setUnits('sheets').setMaxAccess("readonly")
if mibBuilder.loadTexts: icSheetBlankSheets.setStatus('current')
if mibBuilder.loadTexts: icSheetBlankSheets.setDescription("Blank media sheets consumed by this managed service (e.g., 'icServiceType' of 'print') or managed subunit (e.g., 'icSubunitType' of 'marker').")
icSheetFullColorSheets = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 10, 1, 1, 7), IcCounter32()).setUnits('sheets').setMaxAccess("readonly")
if mibBuilder.loadTexts: icSheetFullColorSheets.setStatus('current')
if mibBuilder.loadTexts: icSheetFullColorSheets.setDescription("Full color media sheets consumed by this managed service (e.g., 'icServiceType' of 'print') or managed subunit (e.g., 'icSubunitType' of 'marker').")
icSheetHighlightColorSheets = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 10, 1, 1, 8), IcCounter32()).setUnits('sheets').setMaxAccess("readonly")
if mibBuilder.loadTexts: icSheetHighlightColorSheets.setStatus('current')
if mibBuilder.loadTexts: icSheetHighlightColorSheets.setDescription("Highlight color media sheets consumed by this managed service (e.g., 'icServiceType' of 'print') or managed subunit (e.g., 'icSubunitType' of 'marker').")
icTraffic = MibIdentifier((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 11))
icTrafficTable = MibTable((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 11, 1), )
if mibBuilder.loadTexts: icTrafficTable.setReference('icServiceTable and icSubunitTable in this MIB.')
if mibBuilder.loadTexts: icTrafficTable.setStatus('current')
if mibBuilder.loadTexts: icTrafficTable.setDescription('A table of work counters for traffic on managed services and managed subunits on this Imaging System.')
icTrafficEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 11, 1, 1), ).setIndexNames((0, "PWG-IMAGING-COUNTER-MIB", "icTrafficKeyIndex"), (0, "PWG-IMAGING-COUNTER-MIB", "icTrafficWorkType"), (0, "PWG-IMAGING-COUNTER-MIB", "icTrafficPersistence"))
if mibBuilder.loadTexts: icTrafficEntry.setStatus('current')
if mibBuilder.loadTexts: icTrafficEntry.setDescription('An entry of work counters for traffic on a managed service or a managed subunit on this Imaging System.')
icTrafficKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: icTrafficKeyIndex.setStatus('current')
if mibBuilder.loadTexts: icTrafficKeyIndex.setDescription("Local key of this managed service (value of 'icServiceKey') or managed subunit (value of 'icSubunitKey') on this Imaging System. DEFVAL intentionally omitted - index object.")
icTrafficWorkType = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 11, 1, 1, 2), IcWorkTypeTC())
if mibBuilder.loadTexts: icTrafficWorkType.setStatus('current')
if mibBuilder.loadTexts: icTrafficWorkType.setDescription('The type of work for these counters. DEFVAL intentionally omitted - index object.')
icTrafficPersistence = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 11, 1, 1, 3), IcPersistenceTC())
if mibBuilder.loadTexts: icTrafficPersistence.setStatus('current')
if mibBuilder.loadTexts: icTrafficPersistence.setDescription('The persistence of these counters. DEFVAL intentionally omitted - index object.')
icTrafficInputKOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 11, 1, 1, 4), IcCounter32()).setUnits('koctets').setMaxAccess("readonly")
if mibBuilder.loadTexts: icTrafficInputKOctets.setReference('ifInOctets in MIB-II (RFC 1213).')
if mibBuilder.loadTexts: icTrafficInputKOctets.setStatus('current')
if mibBuilder.loadTexts: icTrafficInputKOctets.setDescription("Total amount of data received on ALL supported job channels by this managed service (e.g., 'icServiceType' of 'faxIn') or managed subunit. Usage: System input traffic may be mapped from ifInOctets in MIB-II (RFC 1213) by dividing by 1024, but input octet counters can roll over quickly at modern enterprise network data rates, so an agent MUST account for roll over.")
icTrafficOutputKOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 11, 1, 1, 5), IcCounter32()).setUnits('koctets').setMaxAccess("readonly")
if mibBuilder.loadTexts: icTrafficOutputKOctets.setReference('ifOutOctets in MIB-II (RFC 1213).')
if mibBuilder.loadTexts: icTrafficOutputKOctets.setStatus('current')
if mibBuilder.loadTexts: icTrafficOutputKOctets.setDescription("Total amount of data sent on ALL supported job channels by this managed service (e.g., 'icServiceType' of 'faxOut') or managed subunit. Usage: System output traffic may be mapped from ifOutOctets in MIB-II (RFC 1213) by dividing by 1024, but output octet counters can roll over quickly at modern enterprise network data rates, so an agent MUST account for roll over.")
icTrafficInputMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 11, 1, 1, 6), IcCounter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: icTrafficInputMessages.setStatus('current')
if mibBuilder.loadTexts: icTrafficInputMessages.setDescription("Total messages received on ALL supported job channels by this managed service (e.g., 'icServiceType' of 'emailIn') or managed subunit. Note: At this time, there is no support for counting input messages (instead of packets) in any IETF standards-track MIB. A single application protocol request or response message may be composed of one or more network protocol packets.")
icTrafficOutputMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 11, 1, 1, 7), IcCounter32()).setUnits('messages').setMaxAccess("readonly")
if mibBuilder.loadTexts: icTrafficOutputMessages.setStatus('current')
if mibBuilder.loadTexts: icTrafficOutputMessages.setDescription("Total messages sent on ALL supported job channels by this managed service (e.g., 'icServiceType' of 'emailOut') or managed subunit. Note: At this time, there is no support for counting output messages (instead of packets) in any IETF standards-track MIB. A single application protocol request or response message may be composed of one or more network protocol packets.")
icMediaUsed = MibIdentifier((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 12))
icMediaUsedTable = MibTable((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 12, 1), )
if mibBuilder.loadTexts: icMediaUsedTable.setStatus('current')
if mibBuilder.loadTexts: icMediaUsedTable.setDescription('A table of counters for each specific media consumed by one of the managed services or managed subunits configured on this Imaging System.')
icMediaUsedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 12, 1, 1), ).setIndexNames((0, "PWG-IMAGING-COUNTER-MIB", "icMediaUsedKeyIndex"), (0, "PWG-IMAGING-COUNTER-MIB", "icMediaUsedIndex"), (0, "PWG-IMAGING-COUNTER-MIB", "icMediaUsedPersistence"))
if mibBuilder.loadTexts: icMediaUsedEntry.setStatus('current')
if mibBuilder.loadTexts: icMediaUsedEntry.setDescription('An entry of counters for one specific media consumed by one of the managed services or managed subunits configured on this Imaging System.')
icMediaUsedKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: icMediaUsedKeyIndex.setStatus('current')
if mibBuilder.loadTexts: icMediaUsedKeyIndex.setDescription("Local key of this managed service (value of 'icServiceKey') or managed subunit (value of 'icSubunitKey') on this Imaging System. DEFVAL intentionally omitted - index object.")
icMediaUsedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: icMediaUsedIndex.setReference('icMediaUsedSizeName and icMediaUsedMediaInfo in this MIB.')
if mibBuilder.loadTexts: icMediaUsedIndex.setStatus('current')
if mibBuilder.loadTexts: icMediaUsedIndex.setDescription('The instance of this specific media size. DEFVAL intentionally omitted - index object.')
icMediaUsedPersistence = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 12, 1, 1, 3), IcPersistenceTC())
if mibBuilder.loadTexts: icMediaUsedPersistence.setStatus('current')
if mibBuilder.loadTexts: icMediaUsedPersistence.setDescription('The persistence of these counters. DEFVAL intentionally omitted - index object.')
icMediaUsedTotalSheets = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 12, 1, 1, 4), IcCounter32()).setUnits('sheets').setMaxAccess("readonly")
if mibBuilder.loadTexts: icMediaUsedTotalSheets.setReference('sheetsCompleted in Job Mon MIB (RFC 2707); job-media-sheets-completed in IPP/1.1 (RFC 2911).')
if mibBuilder.loadTexts: icMediaUsedTotalSheets.setStatus('current')
if mibBuilder.loadTexts: icMediaUsedTotalSheets.setDescription("Total sheets of this specific media printed by this managed service (e.g., 'icServiceType' of 'print') or managed subunit (e.g., 'icSubunitType' of 'marker').")
icMediaUsedMonochromeSheets = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 12, 1, 1, 5), IcCounter32()).setUnits('sheets').setMaxAccess("readonly")
if mibBuilder.loadTexts: icMediaUsedMonochromeSheets.setStatus('current')
if mibBuilder.loadTexts: icMediaUsedMonochromeSheets.setDescription("Monochrome sheets of this specific media printed by this managed service (e.g., 'icServiceType' of 'print') or managed subunit (e.g., 'icSubunitType' of 'marker').")
icMediaUsedBlankSheets = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 12, 1, 1, 6), IcCounter32()).setUnits('sheets').setMaxAccess("readonly")
if mibBuilder.loadTexts: icMediaUsedBlankSheets.setStatus('current')
if mibBuilder.loadTexts: icMediaUsedBlankSheets.setDescription("Blank sheets of this specific media printed by this managed service (e.g., 'icServiceType' of 'print') or managed subunit (e.g., 'icSubunitType' of 'marker').")
icMediaUsedFullColorSheets = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 12, 1, 1, 7), IcCounter32()).setUnits('sheets').setMaxAccess("readonly")
if mibBuilder.loadTexts: icMediaUsedFullColorSheets.setReference('fullColorImpressionsCompleted in Job Mon MIB (RFC 2707).')
if mibBuilder.loadTexts: icMediaUsedFullColorSheets.setStatus('current')
if mibBuilder.loadTexts: icMediaUsedFullColorSheets.setDescription("Full color sheets of this specific media printed by this managed service (e.g., 'icServiceType' of 'print') or managed subunit (e.g., 'icSubunitType' of 'marker').")
icMediaUsedHighlightColorSheets = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 12, 1, 1, 8), IcCounter32()).setUnits('sheets').setMaxAccess("readonly")
if mibBuilder.loadTexts: icMediaUsedHighlightColorSheets.setReference('highlightColorImpressionsCompleted in Job Mon MIB (RFC 2707).')
if mibBuilder.loadTexts: icMediaUsedHighlightColorSheets.setStatus('current')
if mibBuilder.loadTexts: icMediaUsedHighlightColorSheets.setDescription("Highlight color sheets of this specific media printed by this managed service (e.g., 'icServiceType' of 'print') or managed subunit (e.g., 'icSubunitType' of 'marker').")
icMediaUsedMediaSizeName = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 12, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: icMediaUsedMediaSizeName.setReference('PWG Media Standardized Names (IEEE/ISTO PWG 5101.1); icMediaUsedIndex and icMediaUsedMediaInfo in this MIB.')
if mibBuilder.loadTexts: icMediaUsedMediaSizeName.setStatus('current')
if mibBuilder.loadTexts: icMediaUsedMediaSizeName.setDescription("The media size self-describing name for this specific media, for use with remote network management scripts and GUIs, specified as a visible US-ASCII string (ANSI X.3-1968) that MUST NOT contain any US-ASCII control characters (0x00 to 0x1F inclusive, or 0x7F). This media size name MUST NOT be localized by the agent, unlike the corresponding localized 'icMediaUsedMediaInfo' object. For example: 'na_letter_8.5x11in'. DEFVAL intentionally omitted - valid media size is REQUIRED.")
icMediaUsedMediaInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 12, 1, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: icMediaUsedMediaInfo.setReference('icMediaUsedSizeName and icMediaUsedIndex in this MIB.')
if mibBuilder.loadTexts: icMediaUsedMediaInfo.setStatus('current')
if mibBuilder.loadTexts: icMediaUsedMediaInfo.setDescription("The description of this specific media, for use with remote network management scripts and GUIs, specified as a Unicode string encoded in UTF-8 (RFC 3629) in the language specified in 'icGeneralNaturalLanguage'. For example: 'Light blue deckle-edge letter stock'. This media description SHOULD clearly distinguish different instances of the same media size in 'icMediaUsedTable' (for example, by including specific media color, weight, etc.).")
icMediaUsedMediaName = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 12, 1, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: icMediaUsedMediaName.setReference("PWG Media Standardized Names (IEEE/ISTO PWG 5101.1); Sections 4.1.2 'name', 4.1.3 'keyword', and 4.2.11 'media' in IPP/1.1 (RFC2911); Appendix C: 'media' keyword values in IPP/1.1 (RFC2911); mediumRequested and mediumConsumed in Job Mon MIB (RFC 2707).")
if mibBuilder.loadTexts: icMediaUsedMediaName.setStatus('current')
if mibBuilder.loadTexts: icMediaUsedMediaName.setDescription("The friendly locally unique name for this specific media, for use with remote network management scripts and GUIs, specified as a Unicode string encoded in UTF-8 (RFC 3629). This non-localized media name MAY be specified in any natural language, but MUST NOT be localized by the agent, unlike the corresponding localized 'icMediaUsedMediaInfo' object. For example: 'customer-reply' or 'na-letter-colored'. Usage: PWG Media Standardized Names (PWG 5101.1) restricts even custom media names to use US-ASCII strings (ANSI X.3-1968), although they MAY be specified in any natural language that can be represented in or transliterated into a US-ASCII string. On the other hand, IPP/1.1 (RFC 2911) and Job Mon MIB (RFC 2707) allow custom media names to use UTF-8 strings (RFC 3629). Therefore, this object's syntax is 'SnmpAdminString' (UTF-8), for interoperability.")
icMediaUsedMediaAccountingKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 12, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: icMediaUsedMediaAccountingKey.setReference("Appendix A 'Media Accounting Key Format' in this specification; icMediaUsedMediaSizeName and icMediaUsedMediaInfo in this MIB; media-key in section 3.13.1 of IPP Production Printing Set1 (IEEE/ISTO PWG 5100.3).")
if mibBuilder.loadTexts: icMediaUsedMediaAccountingKey.setStatus('current')
if mibBuilder.loadTexts: icMediaUsedMediaAccountingKey.setDescription("The locally unique accounting key for this specific media, for use with remote accounting systems, network management systems, fleet management based on SLAs (service level agreements), etc., specified as a visible US-ASCII string (ANSI X.3-1968) that MUST NOT contain any US-ASCII control characters (0x00 to 0x1F inclusive, or 0x7F). This non-localized media accounting key MAY be specified in any natural language that can be represented in or transliterated into US-ASCII, but MUST NOT be localized by the agent, unlike the corresponding localized 'icMediaUsedMediaInfo' object. This media accounting key SHOULD conform to the ABNF in Appendix A 'Media Accounting Key Format', for interoperability. This media accounting key MAY contain characters not permitted in IPP 'keyword' or 'name' datatypes, unlike the corresponding (but more restricted) IPP 'media-key' attribute defined in IPP Production Printing Set1 (IEEE/ISTO PWG 5100.3).")
icAlert = MibIdentifier((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 13))
icAlertTable = MibTable((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 13, 1), )
if mibBuilder.loadTexts: icAlertTable.setReference('icServiceTable and icSubunitTable in this MIB.')
if mibBuilder.loadTexts: icAlertTable.setStatus('current')
if mibBuilder.loadTexts: icAlertTable.setDescription('A table of counter or state event alerts for managed services and managed subunits on this Imaging System.')
icAlertEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 13, 1, 1), ).setIndexNames((0, "PWG-IMAGING-COUNTER-MIB", "icAlertKeyIndex"), (0, "PWG-IMAGING-COUNTER-MIB", "icAlertIndex"), (0, "PWG-IMAGING-COUNTER-MIB", "icAlertPersistence"))
if mibBuilder.loadTexts: icAlertEntry.setStatus('current')
if mibBuilder.loadTexts: icAlertEntry.setDescription('An entry for a counter or state event alert for a managed service or a managed subunit on this Imaging System.')
icAlertKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: icAlertKeyIndex.setStatus('current')
if mibBuilder.loadTexts: icAlertKeyIndex.setDescription("Local key of this managed service (value of 'icServiceKey') or managed subunit (value of 'icSubunitKey') on this Imaging System. DEFVAL intentionally omitted - index object.")
icAlertIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: icAlertIndex.setStatus('current')
if mibBuilder.loadTexts: icAlertIndex.setDescription("The instance of counter or state event in this 'icAlertTable' entry. DEFVAL intentionally omitted - index object.")
icAlertPersistence = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 13, 1, 1, 3), IcPersistenceTC())
if mibBuilder.loadTexts: icAlertPersistence.setStatus('current')
if mibBuilder.loadTexts: icAlertPersistence.setDescription('The persistence for this alert. DEFVAL intentionally omitted - index object.')
icAlertCounterEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 13, 1, 1, 4), IcCounterEventTypeTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icAlertCounterEventType.setReference('prtAlertCode in Printer MIB (RFC 1759/3805).')
if mibBuilder.loadTexts: icAlertCounterEventType.setStatus('current')
if mibBuilder.loadTexts: icAlertCounterEventType.setDescription("The type of counter or state event in this 'icAlertTable' entry. DEFVAL clause intentionally omitted on this type object.")
icAlertCounterName = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 13, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: icAlertCounterName.setReference('prtAlertDescription in Printer MIB (RFC 1759/3805).')
if mibBuilder.loadTexts: icAlertCounterName.setStatus('current')
if mibBuilder.loadTexts: icAlertCounterName.setDescription("The name of the counter or state object in this 'icAlertTable' entry specified as a visible US-ASCII string (ANSI X.3-1968) that MUST NOT contain any US-ASCII control characters (0x00 to 0x1F inclusive, or 0x7F). DEFVAL clause intentionally omitted - valid name is REQUIRED.")
icAlertCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 13, 1, 1, 6), IcCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icAlertCounterValue.setReference('prtAlertLocation in Printer MIB (RFC 1759/3805).')
if mibBuilder.loadTexts: icAlertCounterValue.setStatus('current')
if mibBuilder.loadTexts: icAlertCounterValue.setDescription("The value of the counter or state object in this 'icAlertTable' entry. DEFVAL clause intentionally omitted - actual value is REQUIRED.")
icAlertDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 13, 1, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icAlertDateAndTime.setReference('hrSystemDate in Host Resources MIB (RFC 1514/2790); prtAlertTime in Printer MIB (RFC 1759/3805).')
if mibBuilder.loadTexts: icAlertDateAndTime.setStatus('current')
if mibBuilder.loadTexts: icAlertDateAndTime.setDescription("The date and time of creation of this 'icAlertTable' entry. DEFVAL clause intentionally omitted - valid date is REQUIRED.")
icAlertTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 13, 1, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icAlertTimeStamp.setReference('sysUpTime in MIB-II (RFC 1213); prtAlertTime in Printer MIB (RFC 1759/3805).')
if mibBuilder.loadTexts: icAlertTimeStamp.setStatus('current')
if mibBuilder.loadTexts: icAlertTimeStamp.setDescription("The timestamp of creation of this 'icAlertTable' entry. DEFVAL clause intentionally omitted - valid time is REQUIRED.")
icAlertV2Trap = NotificationType((1, 3, 6, 1, 4, 1, 2699, 1, 3, 0, 1)).setObjects(("PWG-IMAGING-COUNTER-MIB", "icAlertCounterEventType"), ("PWG-IMAGING-COUNTER-MIB", "icAlertCounterName"), ("PWG-IMAGING-COUNTER-MIB", "icAlertCounterValue"), ("PWG-IMAGING-COUNTER-MIB", "icAlertDateAndTime"))
if mibBuilder.loadTexts: icAlertV2Trap.setStatus('current')
if mibBuilder.loadTexts: icAlertV2Trap.setDescription("This trap is sent (to registered or configured notification receivers) when a new counter or state event is added to the 'icAlertTable'. Note: The values of the icAlertKeyIndex, icAlertIndex, and icAlertPersistence index objects are included in the instance qualifiers of the explicit variable bindings in this trap. The value of icAlertTime (i.e., sysUpTime in IETF MIB-II, RFC 1213) is always included in SNMP traps, per RFC 3416.")
icSubunitMap = MibIdentifier((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 14))
icSubunitMapTable = MibTable((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 14, 1), )
if mibBuilder.loadTexts: icSubunitMapTable.setReference('jmJobIDTable in Job Monitoring MIB (RFC 2707).')
if mibBuilder.loadTexts: icSubunitMapTable.setStatus('current')
if mibBuilder.loadTexts: icSubunitMapTable.setDescription('A table that maps every managed service to each of its associated managed subunits on this Imaging System.')
icSubunitMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 14, 1, 1), ).setIndexNames((0, "PWG-IMAGING-COUNTER-MIB", "icSubunitMapServiceKeyIndex"), (0, "PWG-IMAGING-COUNTER-MIB", "icSubunitMapSubunitKeyIndex"))
if mibBuilder.loadTexts: icSubunitMapEntry.setStatus('current')
if mibBuilder.loadTexts: icSubunitMapEntry.setDescription('An entry that maps one managed service to one of its associated managed subunits on this Imaging System.')
icSubunitMapServiceKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: icSubunitMapServiceKeyIndex.setStatus('current')
if mibBuilder.loadTexts: icSubunitMapServiceKeyIndex.setDescription("Local key of this managed service (value of 'icServiceKey') on this Imaging System. DEFVAL intentionally omitted - index object.")
icSubunitMapSubunitKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: icSubunitMapSubunitKeyIndex.setStatus('current')
if mibBuilder.loadTexts: icSubunitMapSubunitKeyIndex.setDescription("Local key of this managed subunit (value of 'icSubunitKey') on this Imaging System. DEFVAL intentionally omitted - index object.")
icSubunitMapSubunitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2699, 1, 3, 1, 14, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: icSubunitMapSubunitEnabled.setStatus('current')
if mibBuilder.loadTexts: icSubunitMapSubunitEnabled.setDescription("The state of this managed subunit on this managed service. If this object is 'true', then this managed subunit is currently enabled for use by this managed service. If this object is 'false', then this managed subunit is currently disabled for use by this managed service.")
icMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2699, 1, 3, 2, 1)).setObjects(("PWG-IMAGING-COUNTER-MIB", "icGeneralGroup"), ("PWG-IMAGING-COUNTER-MIB", "icKeyGroup"), ("PWG-IMAGING-COUNTER-MIB", "icServiceGroup"), ("PWG-IMAGING-COUNTER-MIB", "icTimeGroup"), ("PWG-IMAGING-COUNTER-MIB", "icMonitorGroup"), ("PWG-IMAGING-COUNTER-MIB", "icSubunitGroup"), ("PWG-IMAGING-COUNTER-MIB", "icImageGroup"), ("PWG-IMAGING-COUNTER-MIB", "icImpressionGroup"), ("PWG-IMAGING-COUNTER-MIB", "icTwoSidedGroup"), ("PWG-IMAGING-COUNTER-MIB", "icSheetGroup"), ("PWG-IMAGING-COUNTER-MIB", "icTrafficGroup"), ("PWG-IMAGING-COUNTER-MIB", "icMediaUsedGroup"), ("PWG-IMAGING-COUNTER-MIB", "icAlertGroup"), ("PWG-IMAGING-COUNTER-MIB", "icAlertTrapGroup"), ("PWG-IMAGING-COUNTER-MIB", "icSubunitMapV2Group"), ("PWG-IMAGING-COUNTER-MIB", "icServiceV2Group"), ("PWG-IMAGING-COUNTER-MIB", "icSubunitV2Group"), ("PWG-IMAGING-COUNTER-MIB", "icMediaUsedV2Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icMIBCompliance = icMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: icMIBCompliance.setDescription("The counter compliance statement for Imaging Systems that implement the PWG Imaging System State and Counter MIB. An Imaging System MUST support and implement the General group. An Imaging System MUST support and implement the Key group for 'icKeyServiceType' of 'systemTotals' (overall counters). An Imaging System MAY support and implement the Key group for individual managed services and managed subunits. An Imaging System MUST support and implement the Service group for 'icServiceType' of 'systemTotals' (overall counters). An Imaging System MAY support and implement the Service group for individual managed services. An Imaging System MUST support and implement the Time group for 'icServiceType' of 'systemTotals' (overall counters). An Imaging System MAY support and implement the Time group for individual managed services and managed subunits. An Imaging System MUST support and implement the Monitor group for 'icServiceType' of 'systemTotals' (overall counters). An Imaging System MAY support and implement the Monitor group for individual managed services and managed subunits. If an Imaging System also implements the 'hrSWRunTable' and/or the 'hrSWInstalledTable' in the Host Resources MIB (RFC 1514/2790) then the value of 'icServiceIndex' for each configured managed service SHOULD be the same as the value of 'hrSWRunIndex' and/or 'hrSWInstalledIndex' for that service. If an Imaging System also implements the Printer MIB (RFC 1759/3805) then the value of 'icSubunitIndex' for each configured managed subunit SHOULD be the same as the value of 'prtXxxIndex' for that subunit (if it is print-related).")
icMIBStateCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2699, 1, 3, 2, 4)).setObjects(("PWG-IMAGING-COUNTER-MIB", "icGeneralGroup"), ("PWG-IMAGING-COUNTER-MIB", "icKeyGroup"), ("PWG-IMAGING-COUNTER-MIB", "icServiceGroup"), ("PWG-IMAGING-COUNTER-MIB", "icServiceV2Group"), ("PWG-IMAGING-COUNTER-MIB", "icSubunitGroup"), ("PWG-IMAGING-COUNTER-MIB", "icSubunitV2Group"), ("PWG-IMAGING-COUNTER-MIB", "icSubunitMapV2Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icMIBStateCompliance = icMIBStateCompliance.setStatus('current')
if mibBuilder.loadTexts: icMIBStateCompliance.setDescription("The state compliance statement for Imaging Systems that implement the PWG Imaging System State and Counter MIB. An Imaging System MUST support and implement the General group. An Imaging System MUST support and implement the Key group for individual managed services. An Imaging System MUST support and implement the Service and Service V2 groups for individual managed services. An Imaging System MAY support and implement the Subunit and Subunit V2 groups for individual managed subunits. An Imaging System MAY support and implement the Subunit Map V2 group for individual managed subunits. If an Imaging System also implements the 'hrSWRunTable' and/or the 'hrSWInstalledTable' in the Host Resources MIB (RFC 1514/2790) then the value of 'icServiceIndex' for each configured managed service SHOULD be the same as the value of 'hrSWRunIndex' and/or 'hrSWInstalledIndex' for that service. If an Imaging System also implements the Printer MIB (RFC 1759/3805) then the value of 'icSubunitIndex' for each configured managed subunit SHOULD be the same as the value of 'prtXxxIndex' for that subunit (if it is print-related).")
icGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2699, 1, 3, 2, 2, 1)).setObjects(("PWG-IMAGING-COUNTER-MIB", "icGeneralNaturalLanguage"), ("PWG-IMAGING-COUNTER-MIB", "icGeneralTotalServiceRecords"), ("PWG-IMAGING-COUNTER-MIB", "icGeneralTotalSubunitRecords"), ("PWG-IMAGING-COUNTER-MIB", "icGeneralTotalMediaUsedRecords"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icGeneralGroup = icGeneralGroup.setStatus('current')
if mibBuilder.loadTexts: icGeneralGroup.setDescription('General group - scalar objects.')
icKeyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2699, 1, 3, 2, 2, 2)).setObjects(("PWG-IMAGING-COUNTER-MIB", "icKeyServiceType"), ("PWG-IMAGING-COUNTER-MIB", "icKeyServiceIndex"), ("PWG-IMAGING-COUNTER-MIB", "icKeySubunitType"), ("PWG-IMAGING-COUNTER-MIB", "icKeySubunitIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icKeyGroup = icKeyGroup.setStatus('current')
if mibBuilder.loadTexts: icKeyGroup.setDescription('Key group - columnar objects.')
icServiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2699, 1, 3, 2, 2, 3)).setObjects(("PWG-IMAGING-COUNTER-MIB", "icServiceKey"), ("PWG-IMAGING-COUNTER-MIB", "icServiceInfo"), ("PWG-IMAGING-COUNTER-MIB", "icServiceJobSetIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icServiceGroup = icServiceGroup.setStatus('current')
if mibBuilder.loadTexts: icServiceGroup.setDescription('Service group - columnar objects.')
icSubunitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2699, 1, 3, 2, 2, 4)).setObjects(("PWG-IMAGING-COUNTER-MIB", "icSubunitKey"), ("PWG-IMAGING-COUNTER-MIB", "icSubunitInfo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icSubunitGroup = icSubunitGroup.setStatus('current')
if mibBuilder.loadTexts: icSubunitGroup.setDescription('Subunit group - columnar objects.')
icTimeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2699, 1, 3, 2, 2, 5)).setObjects(("PWG-IMAGING-COUNTER-MIB", "icTimeTotalSeconds"), ("PWG-IMAGING-COUNTER-MIB", "icTimeDownSeconds"), ("PWG-IMAGING-COUNTER-MIB", "icTimeMaintenanceSeconds"), ("PWG-IMAGING-COUNTER-MIB", "icTimeProcessingSeconds"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icTimeGroup = icTimeGroup.setStatus('current')
if mibBuilder.loadTexts: icTimeGroup.setDescription('Time group - columnar objects.')
icMonitorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2699, 1, 3, 2, 2, 6)).setObjects(("PWG-IMAGING-COUNTER-MIB", "icMonitorConfigChanges"), ("PWG-IMAGING-COUNTER-MIB", "icMonitorTotalAlerts"), ("PWG-IMAGING-COUNTER-MIB", "icMonitorCriticalAlerts"), ("PWG-IMAGING-COUNTER-MIB", "icMonitorAbortedJobs"), ("PWG-IMAGING-COUNTER-MIB", "icMonitorCanceledJobs"), ("PWG-IMAGING-COUNTER-MIB", "icMonitorCompletedJobs"), ("PWG-IMAGING-COUNTER-MIB", "icMonitorCompletedFinisherJobs"), ("PWG-IMAGING-COUNTER-MIB", "icMonitorMemoryAllocErrors"), ("PWG-IMAGING-COUNTER-MIB", "icMonitorMemoryAllocWarnings"), ("PWG-IMAGING-COUNTER-MIB", "icMonitorStorageAllocErrors"), ("PWG-IMAGING-COUNTER-MIB", "icMonitorStorageAllocWarnings"), ("PWG-IMAGING-COUNTER-MIB", "icMonitorLocalStorageKOctets"), ("PWG-IMAGING-COUNTER-MIB", "icMonitorRemoteStorageKOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icMonitorGroup = icMonitorGroup.setStatus('current')
if mibBuilder.loadTexts: icMonitorGroup.setDescription('Monitor group - columnar objects.')
icImageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2699, 1, 3, 2, 2, 7)).setObjects(("PWG-IMAGING-COUNTER-MIB", "icImageTotalImages"), ("PWG-IMAGING-COUNTER-MIB", "icImageMonochromeImages"), ("PWG-IMAGING-COUNTER-MIB", "icImageFullColorImages"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icImageGroup = icImageGroup.setStatus('current')
if mibBuilder.loadTexts: icImageGroup.setDescription('Image group - columnar objects.')
icImpressionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2699, 1, 3, 2, 2, 8)).setObjects(("PWG-IMAGING-COUNTER-MIB", "icImpressionTotalImps"), ("PWG-IMAGING-COUNTER-MIB", "icImpressionMonochromeImps"), ("PWG-IMAGING-COUNTER-MIB", "icImpressionBlankImps"), ("PWG-IMAGING-COUNTER-MIB", "icImpressionFullColorImps"), ("PWG-IMAGING-COUNTER-MIB", "icImpressionHighlightColorImps"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icImpressionGroup = icImpressionGroup.setStatus('current')
if mibBuilder.loadTexts: icImpressionGroup.setDescription('Impression group - columnar objects.')
icTwoSidedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2699, 1, 3, 2, 2, 9)).setObjects(("PWG-IMAGING-COUNTER-MIB", "icTwoSidedTotalImps"), ("PWG-IMAGING-COUNTER-MIB", "icTwoSidedMonochromeImps"), ("PWG-IMAGING-COUNTER-MIB", "icTwoSidedBlankImps"), ("PWG-IMAGING-COUNTER-MIB", "icTwoSidedFullColorImps"), ("PWG-IMAGING-COUNTER-MIB", "icTwoSidedHighlightColorImps"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icTwoSidedGroup = icTwoSidedGroup.setStatus('current')
if mibBuilder.loadTexts: icTwoSidedGroup.setDescription('Two Sided group - columnar objects.')
icSheetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2699, 1, 3, 2, 2, 10)).setObjects(("PWG-IMAGING-COUNTER-MIB", "icSheetTotalSheets"), ("PWG-IMAGING-COUNTER-MIB", "icSheetMonochromeSheets"), ("PWG-IMAGING-COUNTER-MIB", "icSheetBlankSheets"), ("PWG-IMAGING-COUNTER-MIB", "icSheetFullColorSheets"), ("PWG-IMAGING-COUNTER-MIB", "icSheetHighlightColorSheets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icSheetGroup = icSheetGroup.setStatus('current')
if mibBuilder.loadTexts: icSheetGroup.setDescription('Sheet group - columnar objects.')
icTrafficGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2699, 1, 3, 2, 2, 11)).setObjects(("PWG-IMAGING-COUNTER-MIB", "icTrafficInputKOctets"), ("PWG-IMAGING-COUNTER-MIB", "icTrafficOutputKOctets"), ("PWG-IMAGING-COUNTER-MIB", "icTrafficInputMessages"), ("PWG-IMAGING-COUNTER-MIB", "icTrafficOutputMessages"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icTrafficGroup = icTrafficGroup.setStatus('current')
if mibBuilder.loadTexts: icTrafficGroup.setDescription('Traffic group - columnar objects.')
icMediaUsedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2699, 1, 3, 2, 2, 12)).setObjects(("PWG-IMAGING-COUNTER-MIB", "icMediaUsedTotalSheets"), ("PWG-IMAGING-COUNTER-MIB", "icMediaUsedMonochromeSheets"), ("PWG-IMAGING-COUNTER-MIB", "icMediaUsedBlankSheets"), ("PWG-IMAGING-COUNTER-MIB", "icMediaUsedFullColorSheets"), ("PWG-IMAGING-COUNTER-MIB", "icMediaUsedHighlightColorSheets"), ("PWG-IMAGING-COUNTER-MIB", "icMediaUsedMediaSizeName"), ("PWG-IMAGING-COUNTER-MIB", "icMediaUsedMediaInfo"), ("PWG-IMAGING-COUNTER-MIB", "icMediaUsedMediaName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icMediaUsedGroup = icMediaUsedGroup.setStatus('current')
if mibBuilder.loadTexts: icMediaUsedGroup.setDescription('Media Used group - columnar objects.')
icAlertGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2699, 1, 3, 2, 2, 13)).setObjects(("PWG-IMAGING-COUNTER-MIB", "icAlertCounterEventType"), ("PWG-IMAGING-COUNTER-MIB", "icAlertCounterName"), ("PWG-IMAGING-COUNTER-MIB", "icAlertCounterValue"), ("PWG-IMAGING-COUNTER-MIB", "icAlertDateAndTime"), ("PWG-IMAGING-COUNTER-MIB", "icAlertTimeStamp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icAlertGroup = icAlertGroup.setStatus('current')
if mibBuilder.loadTexts: icAlertGroup.setDescription('Alert group - columnar objects.')
icAlertTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2699, 1, 3, 2, 3, 1)).setObjects(("PWG-IMAGING-COUNTER-MIB", "icAlertV2Trap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icAlertTrapGroup = icAlertTrapGroup.setStatus('current')
if mibBuilder.loadTexts: icAlertTrapGroup.setDescription('Alert Trap group - notifications.')
icSubunitMapV2Group = ObjectGroup((1, 3, 6, 1, 4, 1, 2699, 1, 3, 2, 2, 14)).setObjects(("PWG-IMAGING-COUNTER-MIB", "icSubunitMapSubunitEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icSubunitMapV2Group = icSubunitMapV2Group.setStatus('current')
if mibBuilder.loadTexts: icSubunitMapV2Group.setDescription('Subunit Map V2 group - columnar objects.')
icServiceV2Group = ObjectGroup((1, 3, 6, 1, 4, 1, 2699, 1, 3, 2, 2, 15)).setObjects(("PWG-IMAGING-COUNTER-MIB", "icServiceState"), ("PWG-IMAGING-COUNTER-MIB", "icServiceStateMessage"), ("PWG-IMAGING-COUNTER-MIB", "icServicePrtAlertIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icServiceV2Group = icServiceV2Group.setStatus('current')
if mibBuilder.loadTexts: icServiceV2Group.setDescription('Service V2 group - columnar objects.')
icSubunitV2Group = ObjectGroup((1, 3, 6, 1, 4, 1, 2699, 1, 3, 2, 2, 16)).setObjects(("PWG-IMAGING-COUNTER-MIB", "icSubunitStatus"), ("PWG-IMAGING-COUNTER-MIB", "icSubunitStatusMessage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icSubunitV2Group = icSubunitV2Group.setStatus('current')
if mibBuilder.loadTexts: icSubunitV2Group.setDescription('Subunit V2 group - columnar objects.')
icMediaUsedV2Group = ObjectGroup((1, 3, 6, 1, 4, 1, 2699, 1, 3, 2, 2, 17)).setObjects(("PWG-IMAGING-COUNTER-MIB", "icMediaUsedMediaAccountingKey"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icMediaUsedV2Group = icMediaUsedV2Group.setStatus('current')
if mibBuilder.loadTexts: icMediaUsedV2Group.setDescription('Media Used V2 group - columnar objects.')
mibBuilder.exportSymbols("PWG-IMAGING-COUNTER-MIB", icServiceState=icServiceState, icImpressionTotalImps=icImpressionTotalImps, icMediaUsedTotalSheets=icMediaUsedTotalSheets, icAlertV2Trap=icAlertV2Trap, icImageEntry=icImageEntry, icSheetEntry=icSheetEntry, icSubunitEntry=icSubunitEntry, icGeneralTotalSubunitRecords=icGeneralTotalSubunitRecords, IcSubunitStatusTC=IcSubunitStatusTC, icAlertDateAndTime=icAlertDateAndTime, icMediaUsedV2Group=icMediaUsedV2Group, icMonitorPersistence=icMonitorPersistence, icImageFullColorImages=icImageFullColorImages, icGeneral=icGeneral, icImpressionWorkType=icImpressionWorkType, icTwoSidedMonochromeImps=icTwoSidedMonochromeImps, icKeySubunitType=icKeySubunitType, icServiceGroup=icServiceGroup, IcWorkTypeTC=IcWorkTypeTC, icMonitorTotalAlerts=icMonitorTotalAlerts, icMonitorGroup=icMonitorGroup, icImpressionHighlightColorImps=icImpressionHighlightColorImps, PYSNMP_MODULE_ID=imagingCounterMIB, icTimeMaintenanceSeconds=icTimeMaintenanceSeconds, icTwoSided=icTwoSided, icGeneralNaturalLanguage=icGeneralNaturalLanguage, icMIBNotifications=icMIBNotifications, icImpression=icImpression, icTimePersistence=icTimePersistence, icTrafficInputKOctets=icTrafficInputKOctets, icTrafficKeyIndex=icTrafficKeyIndex, icTimeTotalSeconds=icTimeTotalSeconds, icMediaUsedMonochromeSheets=icMediaUsedMonochromeSheets, icImpressionKeyIndex=icImpressionKeyIndex, icMIBStateCompliance=icMIBStateCompliance, icAlert=icAlert, icSheetKeyIndex=icSheetKeyIndex, icMonitorCanceledJobs=icMonitorCanceledJobs, icImpressionTable=icImpressionTable, icServicePrtAlertIndex=icServicePrtAlertIndex, icMediaUsedIndex=icMediaUsedIndex, icServiceInfo=icServiceInfo, icMIBObjects=icMIBObjects, icSheetTotalSheets=icSheetTotalSheets, icMonitorCompletedJobs=icMonitorCompletedJobs, icSubunit=icSubunit, icTwoSidedKeyIndex=icTwoSidedKeyIndex, icKeyServiceIndex=icKeyServiceIndex, icSubunitMapTable=icSubunitMapTable, icImpressionPersistence=icImpressionPersistence, icMediaUsedMediaName=icMediaUsedMediaName, icSubunitType=icSubunitType, icTwoSidedEntry=icTwoSidedEntry, icTrafficTable=icTrafficTable, icAlertCounterEventType=icAlertCounterEventType, icGeneralTotalServiceRecords=icGeneralTotalServiceRecords, icMonitorCriticalAlerts=icMonitorCriticalAlerts, icImageTotalImages=icImageTotalImages, icServiceType=icServiceType, icMediaUsedBlankSheets=icMediaUsedBlankSheets, icSubunitMapEntry=icSubunitMapEntry, icAlertCounterValue=icAlertCounterValue, IcServiceStateTC=IcServiceStateTC, icMonitorStorageAllocWarnings=icMonitorStorageAllocWarnings, icTwoSidedBlankImps=icTwoSidedBlankImps, icTwoSidedHighlightColorImps=icTwoSidedHighlightColorImps, icKeyEntry=icKeyEntry, icAlertCounterName=icAlertCounterName, icTime=icTime, icMediaUsed=icMediaUsed, icMediaUsedGroup=icMediaUsedGroup, icMediaUsedMediaSizeName=icMediaUsedMediaSizeName, icMIBObjectGroups=icMIBObjectGroups, icTimeEntry=icTimeEntry, icKeyGroup=icKeyGroup, icTimeProcessingSeconds=icTimeProcessingSeconds, icAlertGroup=icAlertGroup, icSheetWorkType=icSheetWorkType, icService=icService, icAlertKeyIndex=icAlertKeyIndex, icTwoSidedTable=icTwoSidedTable, icMonitorEntry=icMonitorEntry, icSheetFullColorSheets=icSheetFullColorSheets, icTimeDownSeconds=icTimeDownSeconds, icTrafficOutputKOctets=icTrafficOutputKOctets, icMediaUsedMediaInfo=icMediaUsedMediaInfo, icSubunitKey=icSubunitKey, icAlertIndex=icAlertIndex, icMediaUsedEntry=icMediaUsedEntry, icImageKeyIndex=icImageKeyIndex, icMonitorCompletedFinisherJobs=icMonitorCompletedFinisherJobs, icTwoSidedGroup=icTwoSidedGroup, icAlertTable=icAlertTable, icMediaUsedKeyIndex=icMediaUsedKeyIndex, IcServiceTypeTC=IcServiceTypeTC, icAlertEntry=icAlertEntry, icMediaUsedHighlightColorSheets=icMediaUsedHighlightColorSheets, icKeyServiceType=icKeyServiceType, icMonitor=icMonitor, icImpressionFullColorImps=icImpressionFullColorImps, icAlertPersistence=icAlertPersistence, icSubunitStatus=icSubunitStatus, icImageMonochromeImages=icImageMonochromeImages, icMediaUsedPersistence=icMediaUsedPersistence, icImpressionGroup=icImpressionGroup, icKey=icKey, icMIBNotificationGroups=icMIBNotificationGroups, icSubunitIndex=icSubunitIndex, icSheet=icSheet, icMonitorAbortedJobs=icMonitorAbortedJobs, icImage=icImage, icSubunitMapServiceKeyIndex=icSubunitMapServiceKeyIndex, icSubunitMapSubunitKeyIndex=icSubunitMapSubunitKeyIndex, icSubunitGroup=icSubunitGroup, icServiceStateMessage=icServiceStateMessage, icSubunitMap=icSubunitMap, icMIBCompliance=icMIBCompliance, icKeyIndex=icKeyIndex, icTimeKeyIndex=icTimeKeyIndex, IcCounter32=IcCounter32, icImpressionMonochromeImps=icImpressionMonochromeImps, icMonitorLocalStorageKOctets=icMonitorLocalStorageKOctets, icAlertTimeStamp=icAlertTimeStamp, icTimeGroup=icTimeGroup, icSubunitTable=icSubunitTable, icMIBConformance=icMIBConformance, icTrafficEntry=icTrafficEntry, icTrafficPersistence=icTrafficPersistence, icSheetGroup=icSheetGroup, IcSubunitTypeTC=IcSubunitTypeTC, icTwoSidedWorkType=icTwoSidedWorkType, icTimeTable=icTimeTable, icTraffic=icTraffic, icSheetTable=icSheetTable, icMonitorConfigChanges=icMonitorConfigChanges, icServiceJobSetIndex=icServiceJobSetIndex, icSheetMonochromeSheets=icSheetMonochromeSheets, icServiceKey=icServiceKey, IcPersistenceTC=IcPersistenceTC, icGeneralTotalMediaUsedRecords=icGeneralTotalMediaUsedRecords, icMonitorTable=icMonitorTable, icKeyTable=icKeyTable, icServiceTable=icServiceTable, icSubunitStatusMessage=icSubunitStatusMessage, icTwoSidedFullColorImps=icTwoSidedFullColorImps, icMonitorKeyIndex=icMonitorKeyIndex, icSheetBlankSheets=icSheetBlankSheets, icSheetHighlightColorSheets=icSheetHighlightColorSheets, icMediaUsedMediaAccountingKey=icMediaUsedMediaAccountingKey, icTrafficGroup=icTrafficGroup, icMonitorStorageAllocErrors=icMonitorStorageAllocErrors, icServiceV2Group=icServiceV2Group, icMonitorMemoryAllocErrors=icMonitorMemoryAllocErrors, icGeneralGroup=icGeneralGroup, icMediaUsedFullColorSheets=icMediaUsedFullColorSheets, icSubunitMapV2Group=icSubunitMapV2Group, icMonitorRemoteStorageKOctets=icMonitorRemoteStorageKOctets, icSubunitInfo=icSubunitInfo, imagingCounterMIB=imagingCounterMIB, icImageWorkType=icImageWorkType, icTrafficWorkType=icTrafficWorkType, icSubunitMapSubunitEnabled=icSubunitMapSubunitEnabled, icImageGroup=icImageGroup, icImpressionEntry=icImpressionEntry, icSheetPersistence=icSheetPersistence, icTrafficInputMessages=icTrafficInputMessages, icImagePersistence=icImagePersistence, icServiceEntry=icServiceEntry, icImpressionBlankImps=icImpressionBlankImps, icTwoSidedPersistence=icTwoSidedPersistence, icSubunitV2Group=icSubunitV2Group, IcCounterEventTypeTC=IcCounterEventTypeTC, icImageTable=icImageTable, icAlertTrapGroup=icAlertTrapGroup, icMediaUsedTable=icMediaUsedTable, icTwoSidedTotalImps=icTwoSidedTotalImps, icTrafficOutputMessages=icTrafficOutputMessages, icServiceIndex=icServiceIndex, icMonitorMemoryAllocWarnings=icMonitorMemoryAllocWarnings, icKeySubunitIndex=icKeySubunitIndex)
