#
# PySNMP MIB module CISCO-SCTP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SCTP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:11:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibIdentifier, Unsigned32, Bits, ObjectIdentity, Counter64, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Integer32, ModuleIdentity, NotificationType, TimeTicks, Counter32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Unsigned32", "Bits", "ObjectIdentity", "Counter64", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Integer32", "ModuleIdentity", "NotificationType", "TimeTicks", "Counter32", "IpAddress")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
ceSctpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 74))
ceSctpMIB.setRevisions(('2005-12-21 00:00', '2001-06-07 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ceSctpMIB.setRevisionsDescriptions(('Updated the imports such that Unsigned32 is imported from SNMPv2-SMI instead of CISCO-TC.', 'MIB module developed for the SIGTRAN IETF group. Based on SCTP, RFC2960',))
if mibBuilder.loadTexts: ceSctpMIB.setLastUpdated('200512210000Z')
if mibBuilder.loadTexts: ceSctpMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ceSctpMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: tac@cisco.com')
if mibBuilder.loadTexts: ceSctpMIB.setDescription('The MIB module for managing SCTP implementation.')
class InetAddressType(TextualConvention, Integer32):
    description = 'A value that represents a type of Internet address. unknown(0) An unknown address type. This value MUST be used if the value of the corresponding InetAddress object is a zero-length string. It may also be used to indicate an IP address which is not in one of the formats defined below. ipv4(1) An IPv4 address as defined by the InetAddressIPv4 textual convention. ipv6(2) An IPv6 address as defined by the InetAddressIPv6 textual convention. dns(16) A DNS domain name as defined by the InetAddressDNS textual convention. Each definition of a concrete InetAddressType value must be accompanied by a definition of a textual convention for use with that InetAddressType. The InetAddressType textual convention SHOULD NOT be subtyped in object type definitions to support future extensions. It MAY be subtyped in compliance statements in order to require only a subset of these address types for a compliant implementation.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 16))
    namedValues = NamedValues(("unknown", 0), ("ipv4", 1), ("ipv6", 2), ("dns", 16))

class InetAddress(TextualConvention, OctetString):
    description = "Denotes a generic Internet address. An InetAddress value is always interpreted within the context of an InetAddressType value. The InetAddressType object which defines the context must be registered immediately before the object which uses the InetAddress textual convention. In other words, the object identifiers for the InetAddressType object and the InetAddress object MUST have the same length and the last sub-identifier of the InetAddressType object MUST be 1 less than the last sub-identifier of the InetAddress object. When this textual convention is used as the syntax of an index object, there may be issues with the limit of 128 sub-identifiers specified in SMIv2, STD 58. In this case, the OBJECT-TYPE declaration MUST include a 'SIZE' clause to limit the number of potential instance sub-identifiers."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

ceSctpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 74, 1))
ceSctpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 74, 2))
ceSctpScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 1))
ceSctpTables = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2))
ceSctpRtoAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("vanj", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpRtoAlgorithm.setStatus('current')
if mibBuilder.loadTexts: ceSctpRtoAlgorithm.setDescription('The algorithm used to determine the timeout value (T3-rtx) used for re-transmitting unacknowledged chunks.')
ceSctpMaxAssociations = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpMaxAssociations.setStatus('current')
if mibBuilder.loadTexts: ceSctpMaxAssociations.setDescription('The maximum number of associations that can be supported by this implementation. set to zero to indicate unlimited.')
ceSctpCurrEstab = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpCurrEstab.setStatus('current')
if mibBuilder.loadTexts: ceSctpCurrEstab.setDescription('The number of SCTP associations for which the current state is either ESTABLISHED, SHUTDOWN-RECEIVED or SHUTDOWN-PENDING.')
ceSctpActiveEstab = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpActiveEstab.setStatus('current')
if mibBuilder.loadTexts: ceSctpActiveEstab.setDescription('The number of times that SCTP associations have made a direct transition to the ESTABLISH state from the COOKIE-ECHOED state: COOKIE-ECHOED -> ESTABLISHED. The upper layer has initiated the association attempt.')
ceSctpPassiveEstab = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpPassiveEstab.setStatus('current')
if mibBuilder.loadTexts: ceSctpPassiveEstab.setDescription('The number of times that SCTP associations have made a direct transition to the ESTABLISHED state from the CLOSED state: CLOSED -> ESTABLISHED. The remote endpoint has initiated the association attempt.')
ceSctpAborted = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAborted.setStatus('current')
if mibBuilder.loadTexts: ceSctpAborted.setDescription("The number of times that SCTP associations have made a direct transition to the CLOSED state from any state using the primitive 'ABORT': AnyState --Abort--> CLOSED. Ungraceful termination of the association.")
ceSctpShutdowns = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpShutdowns.setStatus('current')
if mibBuilder.loadTexts: ceSctpShutdowns.setDescription('The number of times that SCTP associations have made a direct transition to the CLOSE state from either the SHUTDOWN-SENT state or the SHUTDOWN-ACK-SENT state. Graceful termination of the association.')
ceSctpStatBytesRec = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpStatBytesRec.setStatus('current')
if mibBuilder.loadTexts: ceSctpStatBytesRec.setDescription('Number of bytes received(does not include retransmissions).')
ceSctpStatBytesSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpStatBytesSent.setStatus('current')
if mibBuilder.loadTexts: ceSctpStatBytesSent.setDescription('Number of bytes sent(does not include retransmissions).')
ceSctpStatChunksDiscard = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpStatChunksDiscard.setStatus('current')
if mibBuilder.loadTexts: ceSctpStatChunksDiscard.setDescription('Number of chunks that were discarded.')
ceSctpStatChunksSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpStatChunksSent.setStatus('current')
if mibBuilder.loadTexts: ceSctpStatChunksSent.setDescription('Number of SCTP control and data chunks, sent to the peers (no retransmissions included).')
ceSctpStatChunksSentControl = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpStatChunksSentControl.setStatus('current')
if mibBuilder.loadTexts: ceSctpStatChunksSentControl.setDescription('Number of SCTP control chunks sent to the peers (no retransmissions included).')
ceSctpStatChunksSentOrdered = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpStatChunksSentOrdered.setStatus('current')
if mibBuilder.loadTexts: ceSctpStatChunksSentOrdered.setDescription('Number of SCTP data chunks sent that required order to be maintained. (no retransmissions included).')
ceSctpStatChunksSentUnOrdered = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpStatChunksSentUnOrdered.setStatus('current')
if mibBuilder.loadTexts: ceSctpStatChunksSentUnOrdered.setDescription('Number of SCTP data chunks sent that do not required order to be maintained. (no retransmissions included).')
ceSctpStatChunksRec = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpStatChunksRec.setStatus('current')
if mibBuilder.loadTexts: ceSctpStatChunksRec.setDescription('Number of SCTP control and data chunks, received from the peers (no retransmissions included).')
ceSctpStatChunksRecControl = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpStatChunksRecControl.setStatus('current')
if mibBuilder.loadTexts: ceSctpStatChunksRecControl.setDescription('Number of SCTP control chucks received from peers (no retransmissions included).')
ceSctpStatChunksRecOrdered = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpStatChunksRecOrdered.setStatus('current')
if mibBuilder.loadTexts: ceSctpStatChunksRecOrdered.setDescription('Number of SCTP data chunks received that required order to be maintained. (no retransmissions included).')
ceSctpStatChunksRecUnOrdered = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpStatChunksRecUnOrdered.setStatus('current')
if mibBuilder.loadTexts: ceSctpStatChunksRecUnOrdered.setDescription('Number of SCTP data chunks received that do not required order to be maintained. (no retransmissions included).')
ceSctpStatDatagramsRec = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpStatDatagramsRec.setStatus('current')
if mibBuilder.loadTexts: ceSctpStatDatagramsRec.setDescription('Number datagrams sent(does not include retransmissions).')
ceSctpStatDatagramsSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpStatDatagramsSent.setStatus('current')
if mibBuilder.loadTexts: ceSctpStatDatagramsSent.setDescription('Number datagrams sent(does not include retransmissions).')
ceSctpStatFragmentedUsrMessages = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpStatFragmentedUsrMessages.setStatus('current')
if mibBuilder.loadTexts: ceSctpStatFragmentedUsrMessages.setDescription('Number of user messages that have to be fragmented because of the MTU.')
ceSctpStatReassembledUsrMessages = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpStatReassembledUsrMessages.setStatus('current')
if mibBuilder.loadTexts: ceSctpStatReassembledUsrMessages.setDescription('Number of user messages reassembled.')
ceSctpStatChunksReTrans = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpStatChunksReTrans.setStatus('current')
if mibBuilder.loadTexts: ceSctpStatChunksReTrans.setDescription('Number of chunks that were re-transmitted.')
ceSctpStatOutOfBlue = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpStatOutOfBlue.setStatus('current')
if mibBuilder.loadTexts: ceSctpStatOutOfBlue.setDescription('Number of out of the blue packets (SCTP packet correctly formed -right checksum- but the receiver is not able to identify the association to which this packet belongs) received by the host.')
ceSctpStatT1expired = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpStatT1expired.setStatus('current')
if mibBuilder.loadTexts: ceSctpStatT1expired.setDescription('Number of times that T1 timer expired (timer for sending either INIT or COOKIE-ECHO chunks and receiving an acknowledgment).')
ceSctpStatT2expired = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpStatT2expired.setStatus('current')
if mibBuilder.loadTexts: ceSctpStatT2expired.setDescription('Number of times that T2-shutdown timer expired (shutdown timer).')
ceSctpAssocTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1), )
if mibBuilder.loadTexts: ceSctpAssocTable.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocTable.setDescription('A table containing SCTP association-specific information.')
ceSctpAssocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-SCTP-MIB", "ceSctpAssocId"))
if mibBuilder.loadTexts: ceSctpAssocEntry.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocEntry.setDescription('General common variables and statistics for the whole association.')
ceSctpAssocId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024)))
if mibBuilder.loadTexts: ceSctpAssocId.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocId.setDescription('Association Identification. Value identifying the association (typically the Initiate Verification Tag).')
ceSctpAssocState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("closed", 1), ("cookieWait", 2), ("cookieEchoed", 3), ("established", 4), ("shutdownPending", 5), ("shutdownSent", 6), ("shutdownReceived", 7), ("shutdownAckSent", 8), ("deleteTCB", 9), ("retrieval", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocState.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocState.setDescription("The state of this SCTP association. As in TCP, the only value which may be set by a management station is deleteTCB. Accordingly, it is appropriate for an agent to return a 'badValue' response if a management station attempts to set this object to any other value. If a management station sets this object to the value deleteTCB(9), then this has the effect of deleting the TCB (as defined in SCTP) of the corresponding association on the managed node, resulting in immediate termination of the association. As an implementation-specific option, an ABORT chunk may be sent from the managed node to the other SCTP endpoint.")
ceSctpAssocUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocUpTime.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocUpTime.setDescription('Time association has been in established state.')
ceSctpAssocRtoMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 3600000))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocRtoMin.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocRtoMin.setDescription('The minimum value permitted by a SCTP implementation for the retransmission timeout, measured in milliseconds. More refined semantics for objects of this type depend upon the algorithm used to determine the retransmission timeout. Minimum recommended value is 1000 milliseconds. Some telephone applications could require less than 1 second.')
ceSctpAssocRtoMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 3600000))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocRtoMax.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocRtoMax.setDescription('The maximum value permitted by a SCTP implementation for the retransmission timeout, measured in milliseconds. More refined semantics for objects of this type depend upon the algorithm used to determine the retransmission timeout. Recommended value is 60000 milliseconds.')
ceSctpAssocRtoInitial = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 3600000))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocRtoInitial.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocRtoInitial.setDescription('Initial value for the Retransmission timer. Recommended value is 3000 milliseconds.')
ceSctpAssocValCookieLife = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 3600000))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocValCookieLife.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocValCookieLife.setDescription('Valid cookie life in the 4-way start-up handshake procedure. Recommended value: 60000 milliseconds.')
ceSctpAssocMaxInitRetr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 3600000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocMaxInitRetr.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocMaxInitRetr.setDescription('The maximum number of retransmissions at the start-up phase (INIT and COOKIE ECHO chunks). Recommended value: 8 attempts.')
ceSctpAssocInitialT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 3600000))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocInitialT1.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocInitialT1.setDescription('Initial value for the Start-up T1 timer.')
ceSctpAssocInitialT2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 3600000))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocInitialT2.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocInitialT2.setDescription('Initial value for the Shutdown T2-shutdown timer.')
ceSctpAssocRemHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocRemHostName.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocRemHostName.setDescription("Peer's DNS name. If no DNS domain name was received at init time (embedded in the INIT or INIT-ACK chunk) from the peer, this entry will be meaningless, therefore it will contain a NULL value. Otherwise, the remote host name received at init time will be stored.")
ceSctpAssocLocalSCTPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4096, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocLocalSCTPPort.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocLocalSCTPPort.setDescription('Local SCTP port number used for this association.')
ceSctpAssocRemSCTPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4096, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocRemSCTPPort.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocRemSCTPPort.setDescription('Remote SCTP port number used for this association.')
ceSctpAssocRemPrimaryAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 14), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocRemPrimaryAddressType.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocRemPrimaryAddressType.setDescription('Internet type of primary destination IP address. - unknown (0) An unknown address type. This value MUST be used if the value of the corresponding InetAddress object is a zero-length string. It may also be used to indicate an IP address different from IPv4 or IPv6. This value is used in this MIB for error conditions. - ipv4 (1): An IPv4 address as defined by the InetAddressIPv4 textual convention [RFC2851]. - ipv6 (2): An IPv6 address as defined by the InetAddressIPv6 textual convention [RFC2851].')
ceSctpAssocRemPrimaryAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 15), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocRemPrimaryAddress.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocRemPrimaryAddress.setDescription('Primary destination IP address. An InetAddress value is always interpreted within the context of an InetAddressType value. This value will be filled in after INIT or INIT ACK messages have been received (when the primary path is selected by SCTP).')
ceSctpAssocCongestionLevels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocCongestionLevels.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocCongestionLevels.setDescription('Number of supported congestion Levels.')
ceSctpAssocCongestionLevelsCur = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocCongestionLevelsCur.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocCongestionLevelsCur.setDescription('Current congestion level.')
ceSctpAssocCongestionAbate1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocCongestionAbate1.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocCongestionAbate1.setDescription('Threshold used to abate congestion level 1.')
ceSctpAssocCongestionAbate2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocCongestionAbate2.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocCongestionAbate2.setDescription('Threshold used to abate congestion level 2.')
ceSctpAssocCongestionAbate3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocCongestionAbate3.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocCongestionAbate3.setDescription('Threshold used to abate congestion level 3.')
ceSctpAssocCongestionOnset1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocCongestionOnset1.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocCongestionOnset1.setDescription('Threshold used to mark onset of congestion level 1.')
ceSctpAssocCongestionOnset2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocCongestionOnset2.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocCongestionOnset2.setDescription('Threshold used to mark onset of congestion level 2.')
ceSctpAssocCongestionOnset3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocCongestionOnset3.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocCongestionOnset3.setDescription('Threshold used to mark onset of congestion level 3.')
ceSctpAssocInStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocInStreams.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocInStreams.setDescription('Inbound Streams according to the negotiation at association start up. This parameter has to be read-only by the manager.')
ceSctpAssocOutStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocOutStreams.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocOutStreams.setDescription('Outbound Streams according to the negotiation at association start up. This parameter has to be read-only by the manager.')
ceSctpAssocMaxRetr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocMaxRetr.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocMaxRetr.setDescription('The maximum number of data retransmissions. This value is specific for each association and the upper layer can be able to change it calling the appropriate primitives. This value has to be smaller than the addition of all the maximum number for all the paths (sctpAssocRemAddressMaxPathRetran). Recommended value: 10 attempts.')
ceSctpAssocMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocMTU.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocMTU.setDescription('The Maximum Transmission Size to be used by this association. The size will the smallest MTU size supported by any of the IP Addresses used by the association.')
ceSctpAssocLocRecWnd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocLocRecWnd.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocLocRecWnd.setDescription('The current local receive window size for this association.')
ceSctpAssocLocRecWndLowMark = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocLocRecWndLowMark.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocLocRecWndLowMark.setDescription('Low water mark for Local Receive Window Size.')
ceSctpAssocLocRecWndZeroCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocLocRecWndZeroCnt.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocLocRecWndZeroCnt.setDescription('Number of times the Local Receive window reached zero bytes.')
ceSctpAssocRemRecWnd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocRemRecWnd.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocRemRecWnd.setDescription('The Remote Receive Window Size for this association.')
ceSctpAssocRemRecWndLowMark = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocRemRecWndLowMark.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocRemRecWndLowMark.setDescription('Low water mark for Remote Receive Window Size.')
ceSctpAssocRemRecWndZeroCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocRemRecWndZeroCnt.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocRemRecWndZeroCnt.setDescription('Number of times the Remote Receive window reached zero bytes.')
ceSctpAssocULPDatagramsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 34), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('DataGrams').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocULPDatagramsQueued.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocULPDatagramsQueued.setDescription('Number of data grams waiting to be sent.')
ceSctpAssocULPDatagramsQueuedHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 35), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('DataGrams').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocULPDatagramsQueuedHigh.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocULPDatagramsQueuedHigh.setDescription('High water mark for data grams waiting to be sent.')
ceSctpAssocChecksumErrorCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocChecksumErrorCounter.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocChecksumErrorCounter.setDescription('Number of SCTP packets received from the peers with an invalid checksum.')
ceSctpAssocBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocBytesSent.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocBytesSent.setDescription('Number of bytes sent by this association.')
ceSctpAssocBytesRec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocBytesRec.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocBytesRec.setDescription('Number of bytes received by this association.')
ceSctpAssocChunksDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocChunksDiscarded.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocChunksDiscarded.setDescription('Total number of Chucks discarded by this association.')
ceSctpAssocChunksRec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocChunksRec.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocChunksRec.setDescription('Total number of Chucks received by this association.')
ceSctpAssocChunksRecControl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocChunksRecControl.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocChunksRecControl.setDescription('Number of control Chucks received by this association.')
ceSctpAssocChunksRecOrdered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocChunksRecOrdered.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocChunksRecOrdered.setDescription('Number of Chucks received by this association where order is required.')
ceSctpAssocChunksRecUnOrdered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocChunksRecUnOrdered.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocChunksRecUnOrdered.setDescription('Number of Chucks received by this association where order is not required.')
ceSctpAssocChunksRecOutOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocChunksRecOutOrder.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocChunksRecOutOrder.setDescription('Number of Chucks received out of order by this association.')
ceSctpAssocChunksReTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocChunksReTrans.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocChunksReTrans.setDescription('Total number of Chucks retransmitted by this association.')
ceSctpAssocChunksSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocChunksSent.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocChunksSent.setDescription('Total number of Chucks sent by this association.')
ceSctpAssocChunksSentControl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocChunksSentControl.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocChunksSentControl.setDescription('Number of control Chucks sent by this association.')
ceSctpAssocChunksSentOrdered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocChunksSentOrdered.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocChunksSentOrdered.setDescription('Number of Chucks sent by this association where order is required.')
ceSctpAssocChunksSentUnOrdered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocChunksSentUnOrdered.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocChunksSentUnOrdered.setDescription('Number of Chucks sent by this association where order is not required.')
ceSctpAssocDatagramsRec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocDatagramsRec.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocDatagramsRec.setDescription('Number of packets received by this association.')
ceSctpAssocDatagramsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocDatagramsSent.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocDatagramsSent.setDescription('Number of packets sent by this association.')
ceSctpAssocRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 1, 1, 52), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocRowStatus.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocRowStatus.setDescription('An object that allows entries in this table to be created and deleted using the RowStatus convention. A row in this table will be created after creating the TCB in both sides of the association. The creation of this row implies the creation of at least another row (depending on the number of local and remote addresses) in the tables sctpAssocLocalAddressTable and sctpAssocRemAddressTable. A row is deleted in sctpAssocTable when an association turns down (i.e., when the TCB is deleted according to [sctp] in both sides of the association). The deletion of a row in sctpAssocTable implies the deletion of the tables related to this association (sctpAssocLocalAddressTable and sctpAssocRemAddressTable). Also, a row is deleted in sctpAssocTable when a set operation is received from the manager with destroy option.')
ceSctpAssocLocalAddressTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 2), )
if mibBuilder.loadTexts: ceSctpAssocLocalAddressTable.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocLocalAddressTable.setDescription('Expanded table of ceSctpAssocTable based on the AssocId index. It shows several interesting data for each local address which takes part in this association.')
ceSctpAssocLocalAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-SCTP-MIB", "ceSctpAssocId"), (0, "CISCO-SCTP-MIB", "ceSctpAssocLocalAddressIPType"), (0, "CISCO-SCTP-MIB", "ceSctpAssocLocalAddressIP"))
if mibBuilder.loadTexts: ceSctpAssocLocalAddressEntry.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocLocalAddressEntry.setDescription('Local information about the available addresses.')
ceSctpAssocLocalAddressIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ceSctpAssocLocalAddressIPType.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocLocalAddressIPType.setDescription('Internet type of local IP address used for this association. - unknown (0) An unknown address type. This value MUST be used if the value of the corresponding InetAddress object is a zero-length string. It may also be used to indicate an IP address different from IPv4 or IPv6. This value is used in this MIB for error conditions. - ipv4 (1): An IPv4 address as defined by the InetAddressIPv4 textual convention [RFC2851]. - ipv6 (2): An IPv6 address as defined by the InetAddressIPv6 textual convention [RFC2851].')
ceSctpAssocLocalAddressIP = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 2, 1, 2), InetAddress())
if mibBuilder.loadTexts: ceSctpAssocLocalAddressIP.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocLocalAddressIP.setDescription('The value of a local IP address available for this association. An InetAddress value is always interpreted within the context of an InetAddressType value. If SCTP are using DNS names, the mapping to IP address-es will be done at reception of INIT or INIT_ACK messages.')
ceSctpAssocLocalAddressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 2, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocLocalAddressRowStatus.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocLocalAddressRowStatus.setDescription('An object that allows entries in this table to be created and deleted using the RowStatus convention. A row in this table will be created per local IP address defined for this association. The creation takes part when a new row in the sctpAssocTable is created or when a new IP address is added in the local interface (if this function is enabled by the SCTP layer). A row in this table will be deleted per local IP address reserved for the association when the corresponding row in sctpAssocTable is deleted or when an IP address is removed from the local interface (if this function is enabled by the SCTP layer).')
ceSctpAssocRemAddressTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 3), )
if mibBuilder.loadTexts: ceSctpAssocRemAddressTable.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocRemAddressTable.setDescription('Expanded table of ceSctpAssocTable based on the AssocId index. It shows several interesting data for each remote peer IP address which is used in this association.')
ceSctpAssocRemAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 3, 1), ).setIndexNames((0, "CISCO-SCTP-MIB", "ceSctpAssocId"), (0, "CISCO-SCTP-MIB", "ceSctpAssocRemAddressIPType"), (0, "CISCO-SCTP-MIB", "ceSctpAssocRemAddressIP"))
if mibBuilder.loadTexts: ceSctpAssocRemAddressEntry.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocRemAddressEntry.setDescription('Information about THE most important variables for every remote IP address ')
ceSctpAssocRemAddressIPType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 3, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ceSctpAssocRemAddressIPType.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocRemAddressIPType.setDescription('Internet type of a remote IP address available for this association. - unknown (0) An unknown address type. This value MUST be used if the value of the corresponding InetAddress object is a zero-length string. It may also be used to indicate an IP address different from IPv4 or IPv6. This value is used in this MIB for error conditions. - ipv4 (1): An IPv4 address as defined by the InetAddressIPv4 textual convention [RFC2851]. - ipv6 (2): An IPv6 address as defined by the InetAddressIPv6 textual convention [RFC2851].')
ceSctpAssocRemAddressIP = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 3, 1, 2), InetAddress())
if mibBuilder.loadTexts: ceSctpAssocRemAddressIP.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocRemAddressIP.setDescription('The value of a remote IP address available for this association. An InetAddress value is always interpreted within the context of an InetAddressType value.')
ceSctpAssocRemAddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("active", 0), ("inactive", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocRemAddressStatus.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocRemAddressStatus.setDescription('The current status of the remote transport address, according to [SCTP]. active - Destination is alive and active inActive - Destination used as source address only failed - Destination has failed')
ceSctpAssocRemAddressRTO = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocRemAddressRTO.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocRemAddressRTO.setDescription('The current Retransmision Time-Out. T3-rtx timer as defined in the protocol SCTP.')
ceSctpAssocRemAddressHtBtFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("active", 0), ("inactive", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocRemAddressHtBtFlag.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocRemAddressHtBtFlag.setDescription('The optional Heartbeat associated to one destination transport address could be active or not (value equal to 1 or 0, respectively). An active destination transport address is the one considered available by a peer endpoint for receiving SCTP packets, as it is described in [sctp].')
ceSctpAssocRemAddressHtBtTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 3, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocRemAddressHtBtTime.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocRemAddressHtBtTime.setDescription('The current heartbeat time-out. The recommended default value is 30000 milliseconds.')
ceSctpAssocRemAddressMaxRetran = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 3, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocRemAddressMaxRetran.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocRemAddressMaxRetran.setDescription('Maximum number of DATA retransmissions allowed to a remote IP address before it is considered inactive, as defined in [sctp]. Recommended value 5 attempts.')
ceSctpAssocRemAddressRetransCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocRemAddressRetransCnt.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocRemAddressRetransCnt.setDescription('Number of DATA retransmissions as defined in [sctp].')
ceSctpAssocRemAddressSRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 3, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocRemAddressSRTT.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocRemAddressSRTT.setDescription('Smoothed Round Trip Time in milliseconds.')
ceSctpAssocRemAddressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 74, 1, 2, 3, 1, 10), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceSctpAssocRemAddressRowStatus.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocRemAddressRowStatus.setDescription('An object that allows entries in this table to be created and deleted using the RowStatus convention. A row in this table will be created per remote IP address defined for this association. The creation takes part when a new row in the sctpAssocTable is created or when a new IP address is added in the remote interface (if this function is enabled by the SCTP layer). A row in this table will be deleted per remote IP address reserved for the association when the corresponding row in sctpAssocTable is deleted or when an IP address is removed from the local interface (if this function is enabled by the SCTP layer).')
ceSctpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 74, 2, 1))
ceSctpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 74, 2, 2))
ceSctpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 74, 2, 2, 1)).setObjects(("CISCO-SCTP-MIB", "ceSctpGeneralVariablesGroup"), ("CISCO-SCTP-MIB", "ceSctpAssocTablesVariablesGroup"), ("CISCO-SCTP-MIB", "ceSctpStateStatGroup"), ("CISCO-SCTP-MIB", "ceSctpOtherStatGroup"), ("CISCO-SCTP-MIB", "ceSctpAssocStatGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceSctpCompliance = ceSctpCompliance.setStatus('current')
if mibBuilder.loadTexts: ceSctpCompliance.setDescription('The compliance statement for SNMPv3 entities which implement SCTP.')
ceSctpGeneralVariablesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 74, 2, 1, 1)).setObjects(("CISCO-SCTP-MIB", "ceSctpRtoAlgorithm"), ("CISCO-SCTP-MIB", "ceSctpMaxAssociations"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceSctpGeneralVariablesGroup = ceSctpGeneralVariablesGroup.setStatus('current')
if mibBuilder.loadTexts: ceSctpGeneralVariablesGroup.setDescription('The sctp group of objects providing for management of SCTP entities. Common parameters for the protocol.')
ceSctpStateStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 74, 2, 1, 2)).setObjects(("CISCO-SCTP-MIB", "ceSctpCurrEstab"), ("CISCO-SCTP-MIB", "ceSctpActiveEstab"), ("CISCO-SCTP-MIB", "ceSctpPassiveEstab"), ("CISCO-SCTP-MIB", "ceSctpAborted"), ("CISCO-SCTP-MIB", "ceSctpShutdowns"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceSctpStateStatGroup = ceSctpStateStatGroup.setStatus('current')
if mibBuilder.loadTexts: ceSctpStateStatGroup.setDescription('The sctp group of objects to control state changes in the SCTP protocol.')
ceSctpOtherStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 74, 2, 1, 3)).setObjects(("CISCO-SCTP-MIB", "ceSctpStatBytesRec"), ("CISCO-SCTP-MIB", "ceSctpStatBytesSent"), ("CISCO-SCTP-MIB", "ceSctpStatChunksDiscard"), ("CISCO-SCTP-MIB", "ceSctpStatChunksSent"), ("CISCO-SCTP-MIB", "ceSctpStatChunksSentControl"), ("CISCO-SCTP-MIB", "ceSctpStatChunksSentOrdered"), ("CISCO-SCTP-MIB", "ceSctpStatChunksSentUnOrdered"), ("CISCO-SCTP-MIB", "ceSctpStatChunksRec"), ("CISCO-SCTP-MIB", "ceSctpStatChunksRecControl"), ("CISCO-SCTP-MIB", "ceSctpStatChunksRecOrdered"), ("CISCO-SCTP-MIB", "ceSctpStatChunksRecUnOrdered"), ("CISCO-SCTP-MIB", "ceSctpStatChunksReTrans"), ("CISCO-SCTP-MIB", "ceSctpStatDatagramsRec"), ("CISCO-SCTP-MIB", "ceSctpStatDatagramsSent"), ("CISCO-SCTP-MIB", "ceSctpStatFragmentedUsrMessages"), ("CISCO-SCTP-MIB", "ceSctpStatReassembledUsrMessages"), ("CISCO-SCTP-MIB", "ceSctpStatOutOfBlue"), ("CISCO-SCTP-MIB", "ceSctpStatT1expired"), ("CISCO-SCTP-MIB", "ceSctpStatT2expired"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceSctpOtherStatGroup = ceSctpOtherStatGroup.setStatus('current')
if mibBuilder.loadTexts: ceSctpOtherStatGroup.setDescription('The sctp group of objects providing for management of SCTP general statistics.')
ceSctpAssocTablesVariablesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 74, 2, 1, 4)).setObjects(("CISCO-SCTP-MIB", "ceSctpAssocState"), ("CISCO-SCTP-MIB", "ceSctpAssocUpTime"), ("CISCO-SCTP-MIB", "ceSctpAssocRtoMin"), ("CISCO-SCTP-MIB", "ceSctpAssocRtoMax"), ("CISCO-SCTP-MIB", "ceSctpAssocRtoInitial"), ("CISCO-SCTP-MIB", "ceSctpAssocValCookieLife"), ("CISCO-SCTP-MIB", "ceSctpAssocMaxInitRetr"), ("CISCO-SCTP-MIB", "ceSctpAssocInitialT1"), ("CISCO-SCTP-MIB", "ceSctpAssocInitialT2"), ("CISCO-SCTP-MIB", "ceSctpAssocRemHostName"), ("CISCO-SCTP-MIB", "ceSctpAssocLocalSCTPPort"), ("CISCO-SCTP-MIB", "ceSctpAssocRemSCTPPort"), ("CISCO-SCTP-MIB", "ceSctpAssocRemPrimaryAddressType"), ("CISCO-SCTP-MIB", "ceSctpAssocRemPrimaryAddress"), ("CISCO-SCTP-MIB", "ceSctpAssocCongestionLevels"), ("CISCO-SCTP-MIB", "ceSctpAssocCongestionLevelsCur"), ("CISCO-SCTP-MIB", "ceSctpAssocCongestionAbate1"), ("CISCO-SCTP-MIB", "ceSctpAssocCongestionAbate2"), ("CISCO-SCTP-MIB", "ceSctpAssocCongestionAbate3"), ("CISCO-SCTP-MIB", "ceSctpAssocCongestionOnset1"), ("CISCO-SCTP-MIB", "ceSctpAssocCongestionOnset2"), ("CISCO-SCTP-MIB", "ceSctpAssocCongestionOnset3"), ("CISCO-SCTP-MIB", "ceSctpAssocInStreams"), ("CISCO-SCTP-MIB", "ceSctpAssocOutStreams"), ("CISCO-SCTP-MIB", "ceSctpAssocMaxRetr"), ("CISCO-SCTP-MIB", "ceSctpAssocMTU"), ("CISCO-SCTP-MIB", "ceSctpAssocLocRecWnd"), ("CISCO-SCTP-MIB", "ceSctpAssocLocRecWndLowMark"), ("CISCO-SCTP-MIB", "ceSctpAssocLocRecWndZeroCnt"), ("CISCO-SCTP-MIB", "ceSctpAssocRemRecWnd"), ("CISCO-SCTP-MIB", "ceSctpAssocRemRecWndLowMark"), ("CISCO-SCTP-MIB", "ceSctpAssocRemRecWndZeroCnt"), ("CISCO-SCTP-MIB", "ceSctpAssocULPDatagramsQueued"), ("CISCO-SCTP-MIB", "ceSctpAssocULPDatagramsQueuedHigh"), ("CISCO-SCTP-MIB", "ceSctpAssocChecksumErrorCounter"), ("CISCO-SCTP-MIB", "ceSctpAssocBytesRec"), ("CISCO-SCTP-MIB", "ceSctpAssocBytesSent"), ("CISCO-SCTP-MIB", "ceSctpAssocChunksDiscarded"), ("CISCO-SCTP-MIB", "ceSctpAssocChunksRec"), ("CISCO-SCTP-MIB", "ceSctpAssocChunksRecControl"), ("CISCO-SCTP-MIB", "ceSctpAssocChunksRecOrdered"), ("CISCO-SCTP-MIB", "ceSctpAssocChunksRecUnOrdered"), ("CISCO-SCTP-MIB", "ceSctpAssocChunksRecOutOrder"), ("CISCO-SCTP-MIB", "ceSctpAssocChunksReTrans"), ("CISCO-SCTP-MIB", "ceSctpAssocChunksSent"), ("CISCO-SCTP-MIB", "ceSctpAssocChunksSentControl"), ("CISCO-SCTP-MIB", "ceSctpAssocChunksSentOrdered"), ("CISCO-SCTP-MIB", "ceSctpAssocChunksSentUnOrdered"), ("CISCO-SCTP-MIB", "ceSctpAssocDatagramsRec"), ("CISCO-SCTP-MIB", "ceSctpAssocDatagramsSent"), ("CISCO-SCTP-MIB", "ceSctpAssocRowStatus"), ("CISCO-SCTP-MIB", "ceSctpAssocLocalAddressRowStatus"), ("CISCO-SCTP-MIB", "ceSctpAssocRemAddressStatus"), ("CISCO-SCTP-MIB", "ceSctpAssocRemAddressRTO"), ("CISCO-SCTP-MIB", "ceSctpAssocRemAddressHtBtFlag"), ("CISCO-SCTP-MIB", "ceSctpAssocRemAddressHtBtTime"), ("CISCO-SCTP-MIB", "ceSctpAssocRemAddressMaxRetran"), ("CISCO-SCTP-MIB", "ceSctpAssocRemAddressSRTT"), ("CISCO-SCTP-MIB", "ceSctpAssocRemAddressRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceSctpAssocTablesVariablesGroup = ceSctpAssocTablesVariablesGroup.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocTablesVariablesGroup.setDescription('The sctp group of objects to manage specific local and remote SCTP variables (local and remote tables).')
ceSctpAssocStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 74, 2, 1, 5)).setObjects(("CISCO-SCTP-MIB", "ceSctpAssocRemAddressRetransCnt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceSctpAssocStatGroup = ceSctpAssocStatGroup.setStatus('current')
if mibBuilder.loadTexts: ceSctpAssocStatGroup.setDescription('The sctp group of objects to manage SCTP statistics related to the remote endpoint.')
mibBuilder.exportSymbols("CISCO-SCTP-MIB", ceSctpAssocBytesRec=ceSctpAssocBytesRec, ceSctpStatChunksSentControl=ceSctpStatChunksSentControl, ceSctpAssocCongestionAbate1=ceSctpAssocCongestionAbate1, ceSctpRtoAlgorithm=ceSctpRtoAlgorithm, ceSctpAssocChecksumErrorCounter=ceSctpAssocChecksumErrorCounter, ceSctpAssocRtoMin=ceSctpAssocRtoMin, ceSctpStatT2expired=ceSctpStatT2expired, ceSctpAssocId=ceSctpAssocId, ceSctpAssocInitialT1=ceSctpAssocInitialT1, ceSctpAssocCongestionOnset3=ceSctpAssocCongestionOnset3, ceSctpAssocRemSCTPPort=ceSctpAssocRemSCTPPort, ceSctpStatDatagramsRec=ceSctpStatDatagramsRec, ceSctpAssocLocalAddressRowStatus=ceSctpAssocLocalAddressRowStatus, ceSctpGeneralVariablesGroup=ceSctpGeneralVariablesGroup, ceSctpCompliances=ceSctpCompliances, ceSctpAssocChunksSentOrdered=ceSctpAssocChunksSentOrdered, ceSctpCompliance=ceSctpCompliance, ceSctpStatChunksRecControl=ceSctpStatChunksRecControl, InetAddressType=InetAddressType, ceSctpAssocCongestionLevels=ceSctpAssocCongestionLevels, ceSctpAssocRemRecWndLowMark=ceSctpAssocRemRecWndLowMark, ceSctpAssocValCookieLife=ceSctpAssocValCookieLife, ceSctpPassiveEstab=ceSctpPassiveEstab, ceSctpAssocLocalAddressIP=ceSctpAssocLocalAddressIP, ceSctpAssocRemAddressStatus=ceSctpAssocRemAddressStatus, ceSctpStatBytesSent=ceSctpStatBytesSent, ceSctpAssocULPDatagramsQueuedHigh=ceSctpAssocULPDatagramsQueuedHigh, ceSctpAssocChunksSentControl=ceSctpAssocChunksSentControl, ceSctpAssocChunksRecControl=ceSctpAssocChunksRecControl, ceSctpScalars=ceSctpScalars, ceSctpStatChunksSentUnOrdered=ceSctpStatChunksSentUnOrdered, ceSctpAssocChunksRecUnOrdered=ceSctpAssocChunksRecUnOrdered, ceSctpAssocInitialT2=ceSctpAssocInitialT2, ceSctpAssocChunksSent=ceSctpAssocChunksSent, ceSctpStatChunksSentOrdered=ceSctpStatChunksSentOrdered, ceSctpAssocOutStreams=ceSctpAssocOutStreams, ceSctpAssocCongestionAbate3=ceSctpAssocCongestionAbate3, ceSctpAssocMTU=ceSctpAssocMTU, ceSctpAssocRemAddressRTO=ceSctpAssocRemAddressRTO, InetAddress=InetAddress, ceSctpStatChunksRecUnOrdered=ceSctpStatChunksRecUnOrdered, ceSctpAssocLocalAddressTable=ceSctpAssocLocalAddressTable, ceSctpAssocChunksDiscarded=ceSctpAssocChunksDiscarded, ceSctpAssocDatagramsSent=ceSctpAssocDatagramsSent, ceSctpAssocRemAddressIPType=ceSctpAssocRemAddressIPType, ceSctpAssocInStreams=ceSctpAssocInStreams, ceSctpAssocULPDatagramsQueued=ceSctpAssocULPDatagramsQueued, ceSctpTables=ceSctpTables, ceSctpAssocRemAddressHtBtFlag=ceSctpAssocRemAddressHtBtFlag, ceSctpAssocState=ceSctpAssocState, ceSctpAssocCongestionOnset2=ceSctpAssocCongestionOnset2, ceSctpAssocChunksReTrans=ceSctpAssocChunksReTrans, ceSctpStatReassembledUsrMessages=ceSctpStatReassembledUsrMessages, ceSctpAssocRemAddressIP=ceSctpAssocRemAddressIP, ceSctpAssocLocalAddressIPType=ceSctpAssocLocalAddressIPType, ceSctpAssocRemPrimaryAddress=ceSctpAssocRemPrimaryAddress, ceSctpAssocDatagramsRec=ceSctpAssocDatagramsRec, ceSctpAssocRemAddressHtBtTime=ceSctpAssocRemAddressHtBtTime, ceSctpStateStatGroup=ceSctpStateStatGroup, ceSctpAssocCongestionLevelsCur=ceSctpAssocCongestionLevelsCur, ceSctpAssocBytesSent=ceSctpAssocBytesSent, ceSctpActiveEstab=ceSctpActiveEstab, ceSctpAssocCongestionAbate2=ceSctpAssocCongestionAbate2, ceSctpShutdowns=ceSctpShutdowns, ceSctpAssocLocalAddressEntry=ceSctpAssocLocalAddressEntry, ceSctpAssocStatGroup=ceSctpAssocStatGroup, ceSctpStatChunksRecOrdered=ceSctpStatChunksRecOrdered, ceSctpAssocRowStatus=ceSctpAssocRowStatus, ceSctpAssocRemAddressRetransCnt=ceSctpAssocRemAddressRetransCnt, ceSctpAssocLocRecWnd=ceSctpAssocLocRecWnd, ceSctpAssocMaxRetr=ceSctpAssocMaxRetr, ceSctpAssocRemAddressRowStatus=ceSctpAssocRemAddressRowStatus, ceSctpStatT1expired=ceSctpStatT1expired, ceSctpAssocCongestionOnset1=ceSctpAssocCongestionOnset1, ceSctpAssocTable=ceSctpAssocTable, ceSctpOtherStatGroup=ceSctpOtherStatGroup, ceSctpAssocRtoMax=ceSctpAssocRtoMax, ceSctpStatChunksSent=ceSctpStatChunksSent, ceSctpAssocRemAddressEntry=ceSctpAssocRemAddressEntry, ceSctpStatChunksRec=ceSctpStatChunksRec, ceSctpStatChunksReTrans=ceSctpStatChunksReTrans, ceSctpAssocLocalSCTPPort=ceSctpAssocLocalSCTPPort, ceSctpMIB=ceSctpMIB, ceSctpObjects=ceSctpObjects, ceSctpAssocLocRecWndLowMark=ceSctpAssocLocRecWndLowMark, ceSctpCurrEstab=ceSctpCurrEstab, ceSctpAssocRemRecWnd=ceSctpAssocRemRecWnd, ceSctpAborted=ceSctpAborted, ceSctpStatOutOfBlue=ceSctpStatOutOfBlue, ceSctpMaxAssociations=ceSctpMaxAssociations, ceSctpAssocTablesVariablesGroup=ceSctpAssocTablesVariablesGroup, ceSctpGroups=ceSctpGroups, ceSctpAssocRemAddressTable=ceSctpAssocRemAddressTable, ceSctpAssocRemAddressSRTT=ceSctpAssocRemAddressSRTT, ceSctpAssocRtoInitial=ceSctpAssocRtoInitial, ceSctpAssocLocRecWndZeroCnt=ceSctpAssocLocRecWndZeroCnt, ceSctpAssocChunksRecOrdered=ceSctpAssocChunksRecOrdered, ceSctpStatDatagramsSent=ceSctpStatDatagramsSent, ceSctpAssocUpTime=ceSctpAssocUpTime, ceSctpAssocRemPrimaryAddressType=ceSctpAssocRemPrimaryAddressType, ceSctpAssocRemRecWndZeroCnt=ceSctpAssocRemRecWndZeroCnt, ceSctpAssocRemHostName=ceSctpAssocRemHostName, PYSNMP_MODULE_ID=ceSctpMIB, ceSctpAssocMaxInitRetr=ceSctpAssocMaxInitRetr, ceSctpAssocRemAddressMaxRetran=ceSctpAssocRemAddressMaxRetran, ceSctpAssocChunksRecOutOrder=ceSctpAssocChunksRecOutOrder, ceSctpAssocChunksSentUnOrdered=ceSctpAssocChunksSentUnOrdered, ceSctpAssocChunksRec=ceSctpAssocChunksRec, ceSctpStatFragmentedUsrMessages=ceSctpStatFragmentedUsrMessages, ceSctpStatBytesRec=ceSctpStatBytesRec, ceSctpStatChunksDiscard=ceSctpStatChunksDiscard, ceSctpAssocEntry=ceSctpAssocEntry, ceSctpConformance=ceSctpConformance)
