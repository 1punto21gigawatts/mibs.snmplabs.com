#
# PySNMP MIB module ASCEND-ADSL-CAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-ADSL-CAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:25:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
wanTypeAdslCap, = mibBuilder.importSymbols("ASCEND-WAN-MIB", "wanTypeAdslCap")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Counter32, MibIdentifier, iso, Bits, Counter64, ModuleIdentity, ObjectIdentity, Unsigned32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, IpAddress, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter32", "MibIdentifier", "iso", "Bits", "Counter64", "ModuleIdentity", "ObjectIdentity", "Unsigned32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "IpAddress", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
adslCapLineStatusTable = MibTable((1, 3, 6, 1, 4, 1, 529, 4, 9, 1), )
if mibBuilder.loadTexts: adslCapLineStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: adslCapLineStatusTable.setDescription('ADSL CAP status parameters.')
adslCapLineStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 4, 9, 1, 1), ).setIndexNames((0, "ASCEND-ADSL-CAP-MIB", "adslCapStatusIfEntryIndex"))
if mibBuilder.loadTexts: adslCapLineStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: adslCapLineStatusEntry.setDescription('A interface status entry containing objects to describe the interface.')
adslCapStatusIfEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslCapStatusIfEntryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adslCapStatusIfEntryIndex.setDescription('Index into the Status Table via the interface group ifIndex value.')
adslCapStatusShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslCapStatusShelfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adslCapStatusShelfIndex.setDescription("TNT's ADSL CAP modules Shelf ID.")
adslCapStatusSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslCapStatusSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adslCapStatusSlotIndex.setDescription("TNT's ADSL CAP modules Slot ID.")
adslCapStatusLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslCapStatusLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adslCapStatusLineIndex.setDescription('ADSL CAP modules line ID.')
adslCapStatusUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("coe", 2), ("cpe", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslCapStatusUnitType.setStatus('mandatory')
if mibBuilder.loadTexts: adslCapStatusUnitType.setDescription('Unit type defines if the unit is operating either as a Central Office Equipment (COE) or Customer Premiss equipment (CPE).')
adslCapStatusLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("other", 1), ("configure", 2), ("deactivate", 3), ("deactive-lost", 4), ("start-up", 5), ("pend-port-up", 6), ("up", 7), ("pend-deactivate", 8), ("out-of-service", 9), ("analog-loopback", 10), ("digital-loopback", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslCapStatusLineState.setStatus('mandatory')
if mibBuilder.loadTexts: adslCapStatusLineState.setDescription('Interface state describes the current ports operating state. States are: Config, Pend Down, Up, Down, Start-up, or N/A.')
adslCapStatusUpRate = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1088000, 952000, 816000, 680000, 544000, 408000, 272000))).clone(namedValues=NamedValues(("m1088000", 1088000), ("k952000", 952000), ("k816000", 816000), ("k680000", 680000), ("k544000", 544000), ("k408000", 408000), ("k272000", 272000)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslCapStatusUpRate.setStatus('mandatory')
if mibBuilder.loadTexts: adslCapStatusUpRate.setDescription('When parameter is read, it displays the current up stream (cpe to coe) rate which can differ from the written value.')
adslCapStatusDownRate = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7168000, 6272000, 5120000, 4480000, 3200000, 2688000, 2560000, 2240000, 1920000, 1600000, 1280000, 960000, 640000))).clone(namedValues=NamedValues(("m7168000", 7168000), ("m6272000", 6272000), ("m5120000", 5120000), ("m4480000", 4480000), ("m3200000", 3200000), ("m2688000", 2688000), ("m2560000", 2560000), ("m2240000", 2240000), ("m1920000", 1920000), ("m1600000", 1600000), ("m1280000", 1280000), ("k960000", 960000), ("k640000", 640000)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslCapStatusDownRate.setStatus('mandatory')
if mibBuilder.loadTexts: adslCapStatusDownRate.setDescription('When parameter is read, it displays the current down stream (coe to cpe) rate which can differ from the written value.')
adslCapStatusVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 9, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslCapStatusVendorId.setStatus('mandatory')
if mibBuilder.loadTexts: adslCapStatusVendorId.setDescription('Vendor identification.')
adslCapStatusMajorFirmWareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 9, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslCapStatusMajorFirmWareVer.setStatus('mandatory')
if mibBuilder.loadTexts: adslCapStatusMajorFirmWareVer.setDescription('Major firmware version.')
adslCapStatusMinorFirmWareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 9, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslCapStatusMinorFirmWareVer.setStatus('mandatory')
if mibBuilder.loadTexts: adslCapStatusMinorFirmWareVer.setDescription('Minor firmware version.')
adslCapStatusHardWareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 9, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslCapStatusHardWareVer.setStatus('mandatory')
if mibBuilder.loadTexts: adslCapStatusHardWareVer.setDescription('Hardware version.')
adslCapLineStatisticTable = MibTable((1, 3, 6, 1, 4, 1, 529, 4, 9, 2), )
if mibBuilder.loadTexts: adslCapLineStatisticTable.setStatus('mandatory')
if mibBuilder.loadTexts: adslCapLineStatisticTable.setDescription('ADSL CAP statistical parameters.')
adslCapLineStatisticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 4, 9, 2, 1), ).setIndexNames((0, "ASCEND-ADSL-CAP-MIB", "adslCapStatIfEntryIndex"))
if mibBuilder.loadTexts: adslCapLineStatisticEntry.setStatus('mandatory')
if mibBuilder.loadTexts: adslCapLineStatisticEntry.setDescription('A interface statistical entry containing objects to describe the interface.')
adslCapStatIfEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslCapStatIfEntryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adslCapStatIfEntryIndex.setDescription('Index into the Status Table via the interface group ifIndex value.')
adslCapStatShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslCapStatShelfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adslCapStatShelfIndex.setDescription('ADSL CAP modules Shelf ID.')
adslCapStatSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 9, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslCapStatSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adslCapStatSlotIndex.setDescription('ADSL CAP modules Slot ID.')
adslCapStatLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 9, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslCapStatLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adslCapStatLineIndex.setDescription('ADSL CAP modules interface ID.')
adslCapStatConnUpDays = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 9, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslCapStatConnUpDays.setStatus('mandatory')
if mibBuilder.loadTexts: adslCapStatConnUpDays.setDescription('Connection up day count.')
adslCapStatConnUpHours = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 9, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslCapStatConnUpHours.setStatus('mandatory')
if mibBuilder.loadTexts: adslCapStatConnUpHours.setDescription('Connection Up 24 hour count.')
adslCapStatConnUpMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 9, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslCapStatConnUpMinutes.setStatus('mandatory')
if mibBuilder.loadTexts: adslCapStatConnUpMinutes.setDescription('Connection up minute count.')
adslCapStatRxSignalPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 9, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslCapStatRxSignalPresent.setStatus('mandatory')
if mibBuilder.loadTexts: adslCapStatRxSignalPresent.setDescription('Receive signal present detection.')
adslCapStatLineQualityDb = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 9, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslCapStatLineQualityDb.setStatus('mandatory')
if mibBuilder.loadTexts: adslCapStatLineQualityDb.setDescription('Lines noise margin. Reliable data will transfer with a reading of -5db or greater.')
adslCapStatUpDwnCntr = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 9, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslCapStatUpDwnCntr.setStatus('mandatory')
if mibBuilder.loadTexts: adslCapStatUpDwnCntr.setDescription('Line Up Down counter value displays the number of times the interface transitions from a down to up state.')
adslCapStatLineSelfTest = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 9, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 1, 2, 3))).clone(namedValues=NamedValues(("other", 4), ("selfTestFailed", 1), ("localLoopBackFailed", 2), ("passed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslCapStatLineSelfTest.setStatus('mandatory')
if mibBuilder.loadTexts: adslCapStatLineSelfTest.setDescription('Line hardware self test results (Passed or Failed).')
adslCapStatBertTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 9, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("one-minute", 1), ("two-minutes", 2), ("three-minutes", 3), ("four-minutes", 4), ("five-minutes", 5), ("ten-minutes", 6), ("fifteen-minutes", 7), ("twenty-minutes", 8), ("thirty-minutes", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslCapStatBertTimer.setStatus('mandatory')
if mibBuilder.loadTexts: adslCapStatBertTimer.setDescription('BER test duration configuration. When two nodes are physically connected, the BER test lasts for the duration of this timer.')
adslCapStatBertEna = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 9, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslCapStatBertEna.setStatus('mandatory')
if mibBuilder.loadTexts: adslCapStatBertEna.setDescription('Enable/disable of the BER test. If nodes are connected, then the BER test is ran between the units. If this node is not connected to a remote node, then the interface is placed into analog loopback and the BER test is started.')
adslCapStatBertState = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 9, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("waiting-for-511-sync", 1), ("local-loop-active", 2), ("active", 3), ("stopped", 4), ("loop-back-setup", 5), ("start-up", 6), ("data-overflow", 7), ("ber-sync-loss", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslCapStatBertState.setStatus('mandatory')
if mibBuilder.loadTexts: adslCapStatBertState.setDescription('BER test states. When this node is not connected to anyother node, then the state enters local-loop-active. When two nodes are conneced then different states are transistioned through. If this is the first node to enable the BER test, the state will transistion from stopped to waiting-for-511-sync. Now this node is waiting for the remote node to enable its BER test. Once the remote node enables its BER test, then both nodes enter the active state. At this point the BER test starts collecting bit errors.')
adslCapStatBertErrorCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 529, 4, 9, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslCapStatBertErrorCounter.setStatus('mandatory')
if mibBuilder.loadTexts: adslCapStatBertErrorCounter.setDescription('BER test bit error counter.')
mibBuilder.exportSymbols("ASCEND-ADSL-CAP-MIB", adslCapStatRxSignalPresent=adslCapStatRxSignalPresent, adslCapLineStatusTable=adslCapLineStatusTable, adslCapStatusVendorId=adslCapStatusVendorId, adslCapStatusSlotIndex=adslCapStatusSlotIndex, adslCapStatusDownRate=adslCapStatusDownRate, adslCapStatBertState=adslCapStatBertState, adslCapStatConnUpHours=adslCapStatConnUpHours, adslCapLineStatisticEntry=adslCapLineStatisticEntry, adslCapStatBertErrorCounter=adslCapStatBertErrorCounter, adslCapStatusUnitType=adslCapStatusUnitType, adslCapStatusLineState=adslCapStatusLineState, adslCapStatusUpRate=adslCapStatusUpRate, adslCapStatusMinorFirmWareVer=adslCapStatusMinorFirmWareVer, adslCapStatLineSelfTest=adslCapStatLineSelfTest, adslCapStatusMajorFirmWareVer=adslCapStatusMajorFirmWareVer, adslCapStatusIfEntryIndex=adslCapStatusIfEntryIndex, adslCapStatusShelfIndex=adslCapStatusShelfIndex, adslCapStatShelfIndex=adslCapStatShelfIndex, adslCapStatusLineIndex=adslCapStatusLineIndex, adslCapStatIfEntryIndex=adslCapStatIfEntryIndex, adslCapStatSlotIndex=adslCapStatSlotIndex, adslCapStatUpDwnCntr=adslCapStatUpDwnCntr, adslCapStatusHardWareVer=adslCapStatusHardWareVer, adslCapStatLineQualityDb=adslCapStatLineQualityDb, adslCapStatLineIndex=adslCapStatLineIndex, adslCapLineStatisticTable=adslCapLineStatisticTable, adslCapStatConnUpDays=adslCapStatConnUpDays, adslCapStatBertTimer=adslCapStatBertTimer, adslCapStatBertEna=adslCapStatBertEna, adslCapStatConnUpMinutes=adslCapStatConnUpMinutes, adslCapLineStatusEntry=adslCapLineStatusEntry)
