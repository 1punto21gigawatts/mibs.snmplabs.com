#
# PySNMP MIB module FOUNDRY-SN-IPX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FOUNDRY-SN-IPX-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:15:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
snIpx, = mibBuilder.importSymbols("FOUNDRY-SN-ROOT-MIB", "snIpx")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, iso, NotificationType, Counter64, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Gauge32, Counter32, TimeTicks, ModuleIdentity, Integer32, IpAddress, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "iso", "NotificationType", "Counter64", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Gauge32", "Counter32", "TimeTicks", "ModuleIdentity", "Integer32", "IpAddress", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class RtrStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("disabled", 0), ("enabled", 1))

class ClearStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("normal", 0), ("clear", 1))

class PortIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 3900)

class Action(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("deny", 0), ("permit", 1))

class PhysAddress(OctetString):
    pass

class NetNumber(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

snIpxGen = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 1))
snIpxCache = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 2))
snIpxRoute = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 3))
snIpxServer = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 4))
snIpxFwdFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 5))
snIpxRipFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 6))
snIpxSapFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 7))
snIpxIfFwdAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 8))
snIpxIfRipAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 9))
snIpxIfSapAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 10))
snIpxPortAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 11))
snIpxPortCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 12))
snIpxRoutingMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 1, 1), RtrStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpxRoutingMode.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxRoutingMode.setDescription('Enabled/Disabled System IPX Routing Mode status.')
snIpxNetBiosFilterMode = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 1, 2), RtrStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpxNetBiosFilterMode.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxNetBiosFilterMode.setDescription('Enabled/Disabled NetBios Filter Mode status.')
snIpxClearCache = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 1, 3), ClearStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpxClearCache.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxClearCache.setDescription('clear(1) will clear cache table.')
snIpxClearRoute = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 1, 4), ClearStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpxClearRoute.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxClearRoute.setDescription('clear(1) will clear ipx route table.')
snIpxClearTrafficCnts = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 1, 5), ClearStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpxClearTrafficCnts.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxClearTrafficCnts.setDescription('clear(1) will clear ipx all traffic counters. - snIpxRcvPktsCnt, snIpxFwdPktsCnt, snIpxRcvDropPktsCnt, snIpxTxDropPktsCnt, snIpxRcvFiltPktsCnt, snIpxTxFiltPktsCnt.')
snIpxRcvPktsCnt = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxRcvPktsCnt.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxRcvPktsCnt.setDescription('IPX incoming packets counter.')
snIpxTxPktsCnt = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxTxPktsCnt.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxTxPktsCnt.setDescription('IPX Outgoing packets counter.')
snIpxFwdPktsCnt = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxFwdPktsCnt.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxFwdPktsCnt.setDescription('IPX forwarding packets counter.')
snIpxRcvDropPktsCnt = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxRcvDropPktsCnt.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxRcvDropPktsCnt.setDescription('IPX receiving drop packets counter.')
snIpxRcvFiltPktsCnt = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxRcvFiltPktsCnt.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxRcvFiltPktsCnt.setDescription('IPX receiving filter packets counter.')
snIpxRipGblFiltList = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpxRipGblFiltList.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxRipGblFiltList.setDescription('An IPX RIP Global Filter List.')
snIpxRipFiltOnAllPort = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("valid", 1), ("deleteAllInBound", 2), ("deleteAllOutBound", 3), ("addAllInBound", 4), ("addAllOutBound", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpxRipFiltOnAllPort.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxRipFiltOnAllPort.setDescription("Apply the IPX RIP Global filter list snIpxRipGblFiltList to all interfaces. This object is used to add all RIP filter lists and delete all RIP filter lists to/from all ports. Prior to sending this command, snIpxRipGblFiltList must be ready. The values that can be written are: deleteAllInBound(2)...delete all in-bound filter lists from all ports. deleteAllOutBound(3)..delete all out-bound filter lists from all ports. addAllInBound(4)......add all in-bound filter lists to all ports. addAllOutBound(5).....add all out-bound filter lists to all ports. If set operation is failed, then a SET with value of (2)or(3) returns error 'GenError'. Deleted(2)&(3) go away immediately. The following values can be returned on reads: noSuch(0)...no such operation yet. valid(1)....set operation is done and is valid")
snIpxSapGblFiltList = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpxSapGblFiltList.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxSapGblFiltList.setDescription('An IPX SAP Global Filter List.')
snIpxSapFiltOnAllPort = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("valid", 1), ("deleteAllInBound", 2), ("deleteAllOutBound", 3), ("addAllInBound", 4), ("addAllOutBound", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpxSapFiltOnAllPort.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxSapFiltOnAllPort.setDescription("Apply the IPX SAP Global filter list snIpxSapGblFiltList to all interfaces. This object is used to add all RIP filter lists and delete all SAP filter lists to/from all ports. Prior to sending this command, snIpxSapGblFiltList must be ready. The values that can be written are: deleteAllInBound(2)...delete all in-bound filter lists from all ports. deleteAllOutBound(3)..delete all out-bound filter lists from all ports. addAllInBound(4)......add all in-bound filter lists to all ports. addAllOutBound(5).....add all out-bound filter lists to all ports. If set operation is failed, then a SET with value of (2)or(3) returns error 'GenError'. Deleted(2)&(3) go away immediately. The following values can be returned on reads: noSuch(0)...no such operation yet. valid(1)....set operation is done and is valid")
snIpxTxDropPktsCnt = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxTxDropPktsCnt.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxTxDropPktsCnt.setDescription('IPX transmitting drop packets counter.')
snIpxTxFiltPktsCnt = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxTxFiltPktsCnt.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxTxFiltPktsCnt.setDescription('IPX transmitting filter packets counter.')
snIpxCacheTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 2, 1), )
if mibBuilder.loadTexts: snIpxCacheTable.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxCacheTable.setDescription('IPX Cache table.')
snIpxCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 2, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-IPX-MIB", "snIpxCacheIndex"))
if mibBuilder.loadTexts: snIpxCacheEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxCacheEntry.setDescription('An entry in the IPX Cache table.')
snIpxCacheIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxCacheIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxCacheIndex.setDescription('The table index for a IPX Cache entry.')
snIpxCacheNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 2, 1, 1, 2), NetNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxCacheNetNum.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxCacheNetNum.setDescription('Cache Network number.')
snIpxCacheNode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 2, 1, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxCacheNode.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxCacheNode.setDescription('Cache Node Number.')
snIpxCacheOutFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 2, 1, 1, 4), RtrStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxCacheOutFilter.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxCacheOutFilter.setDescription('Cache Outbound Filter is ether disabled(0) or enabled(1).')
snIpxCacheEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ethernetII", 1), ("ethernet8022", 2), ("ethernet8023", 3), ("ethernetSnap", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxCacheEncap.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxCacheEncap.setDescription('The IPX encapsulation frame type.')
snIpxCachePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 2, 1, 1, 6), PortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxCachePort.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxCachePort.setDescription('IPX Router Port number.')
snIpxRouteTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 3, 1), )
if mibBuilder.loadTexts: snIpxRouteTable.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxRouteTable.setDescription('IPX route table.')
snIpxRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 3, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-IPX-MIB", "snIpxRouteIndex"))
if mibBuilder.loadTexts: snIpxRouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxRouteEntry.setDescription('An entry in the IPX route table.')
snIpxRouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxRouteIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxRouteIndex.setDescription('The table index for a IPX route entry.')
snIpxDestNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 3, 1, 1, 2), NetNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxDestNetNum.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxDestNetNum.setDescription('Destination Network number.')
snIpxFwdRouterNode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 3, 1, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxFwdRouterNode.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxFwdRouterNode.setDescription('Forward Router Node Number.')
snIpxDestHopCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxDestHopCnts.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxDestHopCnts.setDescription('Number of hops to reach the destination.')
snIpxRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxRouteMetric.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxRouteMetric.setDescription('The metrics to next hop router.')
snIpxDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxDestPort.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxDestPort.setDescription('The destination port.')
snIpxServerTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 4, 1), )
if mibBuilder.loadTexts: snIpxServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxServerTable.setDescription('IPX Server table.')
snIpxServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 4, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-IPX-MIB", "snIpxServerIndex"))
if mibBuilder.loadTexts: snIpxServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxServerEntry.setDescription('An entry in the IPX Server table.')
snIpxServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxServerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxServerIndex.setDescription('The table index for a IPX Server entry.')
snIpxServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxServerType.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxServerType.setDescription('IPX Server Type.')
snIpxServerNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 4, 1, 1, 3), NetNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxServerNetNum.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxServerNetNum.setDescription('Server Network number.')
snIpxServerNode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 4, 1, 1, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxServerNode.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxServerNode.setDescription('Server Node Number.')
snIpxServerSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxServerSocket.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxServerSocket.setDescription('Server Socket Number.')
snIpxServerHopCnts = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxServerHopCnts.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxServerHopCnts.setDescription('Number of intervening networks to reach the server.')
snIpxServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 4, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxServerName.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxServerName.setDescription('IPX Server Name.')
snIpxFwdFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 5, 1), )
if mibBuilder.loadTexts: snIpxFwdFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxFwdFilterTable.setDescription('IPX Forward Filter table.')
snIpxFwdFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 5, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-IPX-MIB", "snIpxFwdFilterId"))
if mibBuilder.loadTexts: snIpxFwdFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxFwdFilterEntry.setDescription('An entry in the IPX Forward Filter table.')
snIpxFwdFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxFwdFilterId.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxFwdFilterId.setDescription('The filter ID for a filter entry.')
snIpxFwdFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 5, 1, 1, 2), Action()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpxFwdFilterAction.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxFwdFilterAction.setDescription('Action to take if the ipx packet match with this filter.')
snIpxFwdFilterSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 5, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpxFwdFilterSocket.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxFwdFilterSocket.setDescription('IPX Forward Filter Socket Number.')
snIpxFwdFilterSrcNet = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 5, 1, 1, 4), NetNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpxFwdFilterSrcNet.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxFwdFilterSrcNet.setDescription('Source Network Number.')
snIpxFwdFilterSrcNode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 5, 1, 1, 5), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpxFwdFilterSrcNode.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxFwdFilterSrcNode.setDescription('Source Node Number.')
snIpxFwdFilterDestNet = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 5, 1, 1, 6), NetNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpxFwdFilterDestNet.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxFwdFilterDestNet.setDescription('Destination Network Number.')
snIpxFwdFilterDestNode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 5, 1, 1, 7), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpxFwdFilterDestNode.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxFwdFilterDestNode.setDescription('Destination Node Number.')
snIpxFwdFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpxFwdFilterRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxFwdFilterRowStatus.setDescription("This object is used to create and delete row in the table and control if they are used. The values that can be written are: delete(3)...deletes the row create(4)...creates a new row modify(5)...modifies an exsisting row If the row exists, then a SET with value of create(4) returns error 'badValue'. Deleted rows go away immediately. The following values can be returned on reads: noSuch(0)...no such row invalid(1)...Setting it to 'invalid' has the effect of rendering it inoperative.. valid(2)....the row exists and is valid")
snIpxRipFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 6, 1), )
if mibBuilder.loadTexts: snIpxRipFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxRipFilterTable.setDescription('IPX RIP Filter table.')
snIpxRipFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 6, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-IPX-MIB", "snIpxRipFilterId"))
if mibBuilder.loadTexts: snIpxRipFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxRipFilterEntry.setDescription('An entry in the IPX RIP Filter table.')
snIpxRipFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxRipFilterId.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxRipFilterId.setDescription('The filter ID for a filter entry.')
snIpxRipFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 6, 1, 1, 2), Action()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpxRipFilterAction.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxRipFilterAction.setDescription('Action to take if the ipx packet match with this filter.')
snIpxRipFilterNet = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 6, 1, 1, 3), NetNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpxRipFilterNet.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxRipFilterNet.setDescription('IPX RIP Filter Network number.')
snIpxRipFilterMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 6, 1, 1, 4), NetNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpxRipFilterMask.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxRipFilterMask.setDescription('IPX RIP Filter Network/Subnet Mask.')
snIpxRipFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpxRipFilterRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxRipFilterRowStatus.setDescription("This object is used to create and delete row in the table and control if they are used. The values that can be written are: delete(3)...deletes the row create(4)...creates a new row modify(5)...modifies an exsisting row If the row exists, then a SET with value of create(4) returns error 'badValue'. Deleted rows go away immediately. The following values can be returned on reads: noSuch(0)...no such row invalid(1)...Setting it to 'invalid' has the effect of rendering it inoperative.. valid(2)....the row exists and is valid")
snIpxSapFilterTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 7, 1), )
if mibBuilder.loadTexts: snIpxSapFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxSapFilterTable.setDescription('IPX SAP Filter table.')
snIpxSapFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 7, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-IPX-MIB", "snIpxSapFilterId"))
if mibBuilder.loadTexts: snIpxSapFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxSapFilterEntry.setDescription('An entry in the IPX SAP Filter table.')
snIpxSapFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxSapFilterId.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxSapFilterId.setDescription('The filter ID for a filter entry.')
snIpxSapFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 7, 1, 1, 2), Action()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpxSapFilterAction.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxSapFilterAction.setDescription('Action to take if the ipx packet match with this filter.')
snIpxSapFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 7, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpxSapFilterType.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxSapFilterType.setDescription('IPX SAP Filter type to be matched.')
snIpxSapFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 7, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 47))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpxSapFilterName.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxSapFilterName.setDescription('IPX SAP Filter Name.')
snIpxSapFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpxSapFilterRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxSapFilterRowStatus.setDescription("This object is used to create and delete row in the table and control if they are used. The values that can be written are: delete(3)...deletes the row create(4)...creates a new row modify(5)...modifies an exsisting row If the row exists, then a SET with value of create(4) returns error 'badValue'. Deleted rows go away immediately. The following values can be returned on reads: noSuch(0)...no such row invalid(1)...Setting it to 'invalid' has the effect of rendering it inoperative.. valid(2)....the row exists and is valid")
snIpxIfFwdAccessTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 8, 1), )
if mibBuilder.loadTexts: snIpxIfFwdAccessTable.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxIfFwdAccessTable.setDescription('IPX IF Forward Access table.')
snIpxIfFwdAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 8, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-IPX-MIB", "snIpxIfFwdAccessPort"), (0, "FOUNDRY-SN-IPX-MIB", "snIpxIfFwdAccessDir"))
if mibBuilder.loadTexts: snIpxIfFwdAccessEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxIfFwdAccessEntry.setDescription('An entry in the IPX Forward Access table.')
snIpxIfFwdAccessPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxIfFwdAccessPort.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxIfFwdAccessPort.setDescription('The IPX interface to which the Forward Filter applies.')
snIpxIfFwdAccessDir = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxIfFwdAccessDir.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxIfFwdAccessDir.setDescription('The access direction of incoming packet filter or outgoing packet filter.')
snIpxIfFwdAccessFilterList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 8, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpxIfFwdAccessFilterList.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxIfFwdAccessFilterList.setDescription('An IPX IF Forward Filter List.')
snIpxIfFwdAccessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpxIfFwdAccessRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxIfFwdAccessRowStatus.setDescription("This object is used to create and delete row in the table and control if they are used. The values that can be written are: delete(3)...deletes the row create(4)...creates a new row modify(5)...modifies an exsisting row If the row exists, then a SET with value of create(4) returns error 'badValue'. Deleted rows go away immediately. The following values can be returned on reads: noSuch(0)...no such row invalid(1)...Setting it to 'invalid' has the effect of rendering it inoperative.. valid(2)....the row exists and is valid")
snIpxIfRipAccessTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 9, 1), )
if mibBuilder.loadTexts: snIpxIfRipAccessTable.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxIfRipAccessTable.setDescription('IPX IF RIP Access table.')
snIpxIfRipAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 9, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-IPX-MIB", "snIpxIfRipAccessPort"), (0, "FOUNDRY-SN-IPX-MIB", "snIpxIfRipAccessDir"))
if mibBuilder.loadTexts: snIpxIfRipAccessEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxIfRipAccessEntry.setDescription('An entry in the IPX Forward Access table.')
snIpxIfRipAccessPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxIfRipAccessPort.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxIfRipAccessPort.setDescription('The IPX interface to which the RIP Filter applies.')
snIpxIfRipAccessDir = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxIfRipAccessDir.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxIfRipAccessDir.setDescription('The access direction of incoming packet filter or outgoing packet filter.')
snIpxIfRipAccessFilterList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 9, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpxIfRipAccessFilterList.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxIfRipAccessFilterList.setDescription('An IPX IF RIP Access Filter List.')
snIpxIfRipAccessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpxIfRipAccessRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxIfRipAccessRowStatus.setDescription("This object is used to create and delete row in the table and control if they are used. The values that can be written are: delete(3)...deletes the row create(4)...creates a new row modify(5)...modifies an exsisting row If the row exists, then a SET with value of create(4) returns error 'badValue'. Deleted rows go away immediately. The following values can be returned on reads: noSuch(0)...no such row invalid(1)...Setting it to 'invalid' has the effect of rendering it inoperative.. valid(2)....the row exists and is valid")
snIpxIfSapAccessTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 10, 1), )
if mibBuilder.loadTexts: snIpxIfSapAccessTable.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxIfSapAccessTable.setDescription('IPX IF RIP Access table.')
snIpxIfSapAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 10, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-IPX-MIB", "snIpxIfSapAccessPort"), (0, "FOUNDRY-SN-IPX-MIB", "snIpxIfSapAccessDir"))
if mibBuilder.loadTexts: snIpxIfSapAccessEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxIfSapAccessEntry.setDescription('An entry in the IPX Forward Access table.')
snIpxIfSapAccessPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxIfSapAccessPort.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxIfSapAccessPort.setDescription('The IPX interface to which the SAP Filter applies.')
snIpxIfSapAccessDir = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxIfSapAccessDir.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxIfSapAccessDir.setDescription('The access direction of incoming packet filter or outgoing packet filter.')
snIpxIfSapAccessFilterList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 10, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpxIfSapAccessFilterList.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxIfSapAccessFilterList.setDescription('An IPX IF SAP Access Filter List.')
snIpxIfSapAccessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpxIfSapAccessRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxIfSapAccessRowStatus.setDescription("This object is used to create and delete row in the table and control if they are used. The values that can be written are: delete(3)...deletes the row create(4)...creates a new row modify(5)...modifies an exsisting row If the row exists, then a SET with value of create(4) returns error 'badValue'. Deleted rows go away immediately. The following values can be returned on reads: noSuch(0)...no such row invalid(1)...Setting it to 'invalid' has the effect of rendering it inoperative.. valid(2)....the row exists and is valid")
snIpxPortAddrTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 11, 1), )
if mibBuilder.loadTexts: snIpxPortAddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxPortAddrTable.setDescription('IPX port address table.')
snIpxPortAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 11, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-IPX-MIB", "snIpxPortAddrPort"), (0, "FOUNDRY-SN-IPX-MIB", "snIpxPortAddrEncap"))
if mibBuilder.loadTexts: snIpxPortAddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxPortAddrEntry.setDescription('An entry in the IPX Port Address table.')
snIpxPortAddrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 11, 1, 1, 1), PortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxPortAddrPort.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxPortAddrPort.setDescription('The port index for port address entry.')
snIpxPortAddrEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ethernet8022", 1), ("ethernet8023", 2), ("ethernetII", 3), ("ethernetSnap", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxPortAddrEncap.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxPortAddrEncap.setDescription('The IPX encapsulation type. ethernet8022(1), ethernet8023(2), ethernetII(3), ethernetSnap(4) Note: Each Network Number can be assigned with one unique Frame type; Otherwise, a SNMP-SET error will be returned.')
snIpxPortAddrNetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 11, 1, 1, 3), NetNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpxPortAddrNetNum.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxPortAddrNetNum.setDescription('An unique Network number for the IPX interface port.')
snIpxPortAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2), ("delete", 3), ("create", 4), ("modify", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpxPortAddrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxPortAddrRowStatus.setDescription("This object is used to create and delete row in the table and control if they are used. The values that can be written are: delete(3)...deletes the row create(4)...creates a new row modify(5)...modifies an exsisting row If the row exists, then a SET with value of create(4) returns error 'badValue'. Deleted rows go away immediately. The following values can be returned on reads: noSuch(0)...no such row invalid(1)...Setting it to 'invalid' has the effect of rendering it inoperative.. valid(2)....the row exists and is valid")
snIpxPortAddrNetBiosFilterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 11, 1, 1, 5), RtrStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snIpxPortAddrNetBiosFilterMode.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxPortAddrNetBiosFilterMode.setDescription('Enabled/Disabled NetBios Filter Mode status per Port Address entry.')
snIpxPortCountersTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 12, 1), )
if mibBuilder.loadTexts: snIpxPortCountersTable.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxPortCountersTable.setDescription('IPX port Counters table.')
snIpxPortCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 12, 1, 1), ).setIndexNames((0, "FOUNDRY-SN-IPX-MIB", "snIpxPortCountersPort"))
if mibBuilder.loadTexts: snIpxPortCountersEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxPortCountersEntry.setDescription('An entry in the IPX Port Counters table.')
snIpxPortCountersPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 12, 1, 1, 1), PortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxPortCountersPort.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxPortCountersPort.setDescription('The port index for port Counters entry.')
snIpxPortCountersRcvPktsCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 12, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxPortCountersRcvPktsCnt.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxPortCountersRcvPktsCnt.setDescription('IPX incoming packets counter for the interface.')
snIpxPortCountersTxPktsCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 12, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxPortCountersTxPktsCnt.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxPortCountersTxPktsCnt.setDescription('IPX Outgoing packets counter for the interface.')
snIpxPortCountersFwdPktsCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 12, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxPortCountersFwdPktsCnt.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxPortCountersFwdPktsCnt.setDescription('IPX forwarding packets counter for the interface.')
snIpxPortCountersRcvDropPktsCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 12, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxPortCountersRcvDropPktsCnt.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxPortCountersRcvDropPktsCnt.setDescription('IPX receiving drop packets counter for the interface.')
snIpxPortCountersTxDropPktsCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 12, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxPortCountersTxDropPktsCnt.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxPortCountersTxDropPktsCnt.setDescription('IPX transmitting drop packets counter for the interface.')
snIpxPortCountersRcvFiltPktsCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 12, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxPortCountersRcvFiltPktsCnt.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxPortCountersRcvFiltPktsCnt.setDescription('IPX receiving filter packets counter for the interface.')
snIpxPortCountersTxFiltPktsCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 1, 12, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snIpxPortCountersTxFiltPktsCnt.setStatus('mandatory')
if mibBuilder.loadTexts: snIpxPortCountersTxFiltPktsCnt.setDescription('IPX transmitting filter packets counter for the interface.')
mibBuilder.exportSymbols("FOUNDRY-SN-IPX-MIB", snIpxSapFilterName=snIpxSapFilterName, snIpxRipFilterRowStatus=snIpxRipFilterRowStatus, snIpxIfFwdAccessPort=snIpxIfFwdAccessPort, ClearStatus=ClearStatus, snIpxRipFilterMask=snIpxRipFilterMask, snIpxDestPort=snIpxDestPort, snIpxServerName=snIpxServerName, snIpxPortCountersTxFiltPktsCnt=snIpxPortCountersTxFiltPktsCnt, snIpxClearRoute=snIpxClearRoute, snIpxRipFiltOnAllPort=snIpxRipFiltOnAllPort, snIpxIfSapAccessRowStatus=snIpxIfSapAccessRowStatus, snIpxRipFilterId=snIpxRipFilterId, snIpxFwdFilterDestNode=snIpxFwdFilterDestNode, snIpxIfRipAccessPort=snIpxIfRipAccessPort, snIpxIfSapAccessPort=snIpxIfSapAccessPort, snIpxFwdFilterEntry=snIpxFwdFilterEntry, Action=Action, snIpxIfFwdAccessEntry=snIpxIfFwdAccessEntry, snIpxDestNetNum=snIpxDestNetNum, snIpxIfRipAccess=snIpxIfRipAccess, snIpxServerHopCnts=snIpxServerHopCnts, snIpxIfFwdAccessTable=snIpxIfFwdAccessTable, snIpxPortCountersRcvDropPktsCnt=snIpxPortCountersRcvDropPktsCnt, snIpxIfRipAccessRowStatus=snIpxIfRipAccessRowStatus, snIpxCacheEntry=snIpxCacheEntry, snIpxCacheOutFilter=snIpxCacheOutFilter, snIpxSapFilterId=snIpxSapFilterId, snIpxServerSocket=snIpxServerSocket, snIpxCacheIndex=snIpxCacheIndex, PortIndex=PortIndex, snIpxIfRipAccessFilterList=snIpxIfRipAccessFilterList, snIpxFwdRouterNode=snIpxFwdRouterNode, snIpxPortAddrNetBiosFilterMode=snIpxPortAddrNetBiosFilterMode, snIpxGen=snIpxGen, snIpxSapFilterRowStatus=snIpxSapFilterRowStatus, snIpxRouteTable=snIpxRouteTable, snIpxFwdFilterSrcNode=snIpxFwdFilterSrcNode, snIpxClearTrafficCnts=snIpxClearTrafficCnts, snIpxRcvPktsCnt=snIpxRcvPktsCnt, snIpxRipGblFiltList=snIpxRipGblFiltList, snIpxPortCountersTable=snIpxPortCountersTable, snIpxPortCountersRcvPktsCnt=snIpxPortCountersRcvPktsCnt, snIpxServerNode=snIpxServerNode, snIpxDestHopCnts=snIpxDestHopCnts, snIpxRouteEntry=snIpxRouteEntry, snIpxFwdPktsCnt=snIpxFwdPktsCnt, snIpxIfSapAccessTable=snIpxIfSapAccessTable, snIpxServer=snIpxServer, snIpxTxDropPktsCnt=snIpxTxDropPktsCnt, snIpxFwdFilterId=snIpxFwdFilterId, snIpxIfFwdAccessDir=snIpxIfFwdAccessDir, NetNumber=NetNumber, snIpxRipFilterNet=snIpxRipFilterNet, snIpxCache=snIpxCache, snIpxNetBiosFilterMode=snIpxNetBiosFilterMode, snIpxTxFiltPktsCnt=snIpxTxFiltPktsCnt, snIpxIfFwdAccessFilterList=snIpxIfFwdAccessFilterList, snIpxRouteIndex=snIpxRouteIndex, snIpxClearCache=snIpxClearCache, snIpxCacheEncap=snIpxCacheEncap, snIpxRipFilter=snIpxRipFilter, snIpxPortCountersFwdPktsCnt=snIpxPortCountersFwdPktsCnt, snIpxSapFilterAction=snIpxSapFilterAction, snIpxPortCountersEntry=snIpxPortCountersEntry, snIpxIfRipAccessDir=snIpxIfRipAccessDir, snIpxPortAddrEntry=snIpxPortAddrEntry, snIpxRouteMetric=snIpxRouteMetric, snIpxFwdFilterRowStatus=snIpxFwdFilterRowStatus, snIpxPortAddr=snIpxPortAddr, snIpxCacheNode=snIpxCacheNode, snIpxPortAddrRowStatus=snIpxPortAddrRowStatus, snIpxServerIndex=snIpxServerIndex, snIpxServerType=snIpxServerType, snIpxSapGblFiltList=snIpxSapGblFiltList, snIpxSapFilterEntry=snIpxSapFilterEntry, snIpxPortCountersTxDropPktsCnt=snIpxPortCountersTxDropPktsCnt, snIpxFwdFilterDestNet=snIpxFwdFilterDestNet, snIpxPortCountersPort=snIpxPortCountersPort, snIpxRcvDropPktsCnt=snIpxRcvDropPktsCnt, snIpxRoutingMode=snIpxRoutingMode, snIpxPortCountersTxPktsCnt=snIpxPortCountersTxPktsCnt, snIpxCachePort=snIpxCachePort, snIpxRipFilterEntry=snIpxRipFilterEntry, snIpxIfRipAccessEntry=snIpxIfRipAccessEntry, snIpxPortAddrTable=snIpxPortAddrTable, PhysAddress=PhysAddress, snIpxFwdFilterSrcNet=snIpxFwdFilterSrcNet, snIpxPortAddrNetNum=snIpxPortAddrNetNum, snIpxPortCounters=snIpxPortCounters, snIpxRipFilterAction=snIpxRipFilterAction, snIpxSapFilterType=snIpxSapFilterType, snIpxFwdFilterSocket=snIpxFwdFilterSocket, snIpxSapFiltOnAllPort=snIpxSapFiltOnAllPort, snIpxIfRipAccessTable=snIpxIfRipAccessTable, snIpxSapFilter=snIpxSapFilter, snIpxIfSapAccess=snIpxIfSapAccess, snIpxFwdFilterTable=snIpxFwdFilterTable, snIpxServerNetNum=snIpxServerNetNum, snIpxRcvFiltPktsCnt=snIpxRcvFiltPktsCnt, snIpxIfSapAccessEntry=snIpxIfSapAccessEntry, snIpxPortAddrPort=snIpxPortAddrPort, snIpxCacheTable=snIpxCacheTable, snIpxRoute=snIpxRoute, snIpxSapFilterTable=snIpxSapFilterTable, snIpxServerTable=snIpxServerTable, snIpxRipFilterTable=snIpxRipFilterTable, snIpxIfFwdAccessRowStatus=snIpxIfFwdAccessRowStatus, snIpxFwdFilterAction=snIpxFwdFilterAction, RtrStatus=RtrStatus, snIpxCacheNetNum=snIpxCacheNetNum, snIpxPortCountersRcvFiltPktsCnt=snIpxPortCountersRcvFiltPktsCnt, snIpxServerEntry=snIpxServerEntry, snIpxPortAddrEncap=snIpxPortAddrEncap, snIpxIfSapAccessFilterList=snIpxIfSapAccessFilterList, snIpxIfSapAccessDir=snIpxIfSapAccessDir, snIpxTxPktsCnt=snIpxTxPktsCnt, snIpxIfFwdAccess=snIpxIfFwdAccess, snIpxFwdFilter=snIpxFwdFilter)
