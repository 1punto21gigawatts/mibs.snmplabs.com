#
# PySNMP MIB module Nortel-Magellan-Passport-BaseSnmpMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-BaseSnmpMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:26:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
DisplayString, Status, StorageType, RowStatus, Integer32, TruthValue, Unsigned32 = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "DisplayString", "Status", "StorageType", "RowStatus", "Integer32", "TruthValue", "Unsigned32")
AsciiString, HexString, NonReplicated = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "AsciiString", "HexString", "NonReplicated")
passportMIBs, = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "passportMIBs")
vrIndex, vr = mibBuilder.importSymbols("Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex", "vr")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Bits, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, iso, TimeTicks, Gauge32, Counter32, MibIdentifier, Integer32, IpAddress, Unsigned32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Bits", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "iso", "TimeTicks", "Gauge32", "Counter32", "MibIdentifier", "Integer32", "IpAddress", "Unsigned32", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
baseSnmpMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 36))
vrSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8))
vrSnmpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 1), )
if mibBuilder.loadTexts: vrSnmpRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpRowStatusTable.setDescription('This entry controls the addition and deletion of vrSnmp components.')
vrSnmpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpIndex"))
if mibBuilder.loadTexts: vrSnmpRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpRowStatusEntry.setDescription('A single entry in the table represents a single vrSnmp component.')
vrSnmpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpRowStatus.setDescription('This variable is used as the basis for SNMP naming of vrSnmp components. These components can be added and deleted.')
vrSnmpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vrSnmpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpStorageType.setDescription('This variable represents the storage type value for the vrSnmp tables.')
vrSnmpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: vrSnmpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpIndex.setDescription('This variable represents the index for the vrSnmp tables.')
vrSnmpProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 20), )
if mibBuilder.loadTexts: vrSnmpProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpProvTable.setDescription("This group contains provisionable attributes defining the SNMP management entity's capabilities, particularly in regards to standardV1 and V2 traps.")
vrSnmpProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 20, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpIndex"))
if mibBuilder.loadTexts: vrSnmpProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpProvEntry.setDescription('An entry in the vrSnmpProvTable.')
vrSnmpV1EnableAuthenTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 20, 1, 1), Status()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpV1EnableAuthenTraps.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpV1EnableAuthenTraps.setDescription('This attribute controls whether the Snmp component will generate V1 authentication failure traps or not. The attribute is derived from rfc1213.')
vrSnmpV2EnableAuthenTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 20, 1, 2), Status()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpV2EnableAuthenTraps.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpV2EnableAuthenTraps.setDescription('This attribute controls whether the Snmp component will generate V2 authentication failure traps or not. The attribute is derived from rfc1450.')
vrSnmpAlarmsAsTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 20, 1, 3), Status()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpAlarmsAsTraps.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpAlarmsAsTraps.setDescription('This attribute controls whether the Snmp component will send Alarms as SNMPv1 and SNMPv2 Traps. If enabled, Alarms will be sent as SNMPv2 Traps to target Parties identified in AccessPrivileges components where v2Trap privileges are allowed, and as SNMPv1 Traps to Managers with v1Trap privileges allowed.')
vrSnmpIpStack = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vrIp", 1), ("ipiFrIpiVc", 2))).clone('vrIp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpIpStack.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpIpStack.setDescription('This attribute controls which IP stack the Snmp component will use to send and receive Snmp traffic for Communites and Parties whose tdomain attribute specifies snmpUdpDomain as the transport protocol. If the value of this attribute is vrIp then Snmp Udp traffic will be sent and received using Ip as provisioned under the VirtualRouter. This requires provisioning of the ip feature. If the value of this attribute is ipiFrIpiVc then Snmp Udp traffic will be sent and received using IpiFr (Ip over Frame Relay) or IpiVc (Ip over Vc), whichever is provisioned. This requires provisioning of one of the ipiVc or ipiFr features.')
vrSnmpCidInEntTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 20, 1, 5), Status()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpCidInEntTraps.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpCidInEntTraps.setDescription('This attribute controls whether the Customer Identifier (CID) will be included in the SNMP Enterprise Traps. If enabled, the CID will be included in the SNMP Enterprise traps.')
vrSnmpStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 21), )
if mibBuilder.loadTexts: vrSnmpStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpStateTable.setDescription('This group contains the three OSI State attributes and the six OSI Status attributes. The descriptions generically indicate what each attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241- 7001-150, Passport Operations and Maintenance Guide.')
vrSnmpStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 21, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpIndex"))
if mibBuilder.loadTexts: vrSnmpStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpStateEntry.setDescription('An entry in the vrSnmpStateTable.')
vrSnmpAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 21, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component. The OSI Status attributes, if supported by the component, may provide more details, qualifying the state of the component.')
vrSnmpOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle. The OSI Status attributes, if supported by the component, may provide more details, qualifying the state of the component.')
vrSnmpUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time. The OSI Status attributes, if supported by the component, may provide more details, qualifying the state of the component.')
vrSnmpAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 21, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpAvailabilityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpAvailabilityStatus.setDescription('If supported by the component, this attribute indicates the OSI Availability status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value inTest indicates that the resource is undergoing a test procedure. If adminState is locked or shuttingDown, the normal users are precluded from using the resource and controlStatus is reservedForTest. Tests that do not exclude additional users can be present in any operational or administrative state but the reservedForTest condition should not be present. The value failed indicates that the component has an internal fault that prevents it from operating. The operationalState is disabled. The value dependency indicates that the component cannot operate because some other resource on which it depends is unavailable. The operationalState is disabled. The value powerOff indicates the resource requires power to be applied and it is not powered on. The operationalState is disabled. The value offLine indicates the resource requires a routine operation (either manual, automatic, or both) to be performed to place it on-line and make it available for use. The operationalState is disabled. The value offDuty indicates the resource is inactive in accordance with a predetermined time schedule. In the absence of other disabling conditions, the operationalState is enabled or disabled. The value degraded indicates the service provided by the component is degraded in some way, such as in speed or operating capacity. However, the resource remains available for service. The operationalState is enabled. The value notInstalled indicates the resource is not present. The operationalState is disabled. The value logFull is not used. Description of bits: inTest(0) failed(1) powerOff(2) offLine(3) offDuty(4) dependency(5) degraded(6) notInstalled(7) logFull(8)')
vrSnmpProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 21, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpProceduralStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpProceduralStatus.setDescription("If supported by the component, this attribute indicates the OSI Procedural status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value initializationRequired indicates (for a resource which doesn't initialize autonomously) that initialization is required before it can perform its normal functions, and this procedure has not been initiated. The operationalState is disabled. The value notInitialized indicates (for a resource which does initialize autonomously) that initialization is required before it can perform its normal functions, and this procedure has not been initiated. The operationalState may be enabled or disabled. The value initializing indicates that initialization has been initiated but is not yet complete. The operationalState may be enabled or disabled. The value reporting indicates the resource has completed some processing operation and is notifying the results. The operationalState is enabled. The value terminating indicates the component is in a termination phase. If the resource doesn't reinitialize autonomously, operationalState is disabled; otherwise it is enabled or disabled. Description of bits: initializationRequired(0) notInitialized(1) initializing(2) reporting(3) terminating(4)")
vrSnmpControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 21, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpControlStatus.setDescription('If supported by the component, this attribute indicates the OSI Control status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value subjectToTest indicates the resource is available but tests may be conducted simultaneously at unpredictable times, which may cause it to exhibit unusual characteristics. The value partOfServicesLocked indicates that part of the service is restricted from users of a resource. The adminState is unlocked. The value reservedForTest indicates that the component is administratively unavailable because it is undergoing a test procedure. The adminState is locked. The value suspended indicates that the service has been administratively suspended. Description of bits: subjectToTest(0) partOfServicesLocked(1) reservedForTest(2) suspended(3)')
vrSnmpAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 21, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpAlarmStatus.setDescription('If supported by the component, this attribute indicates the OSI Alarm status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value underRepair indicates the component is currently being repaired. The operationalState is enabled or disabled. The value critical indicates one or more critical alarms are outstanding against the component. Other, less severe, alarms may also be outstanding. The operationalState is enabled or disabled. The value major indicates one or more major alarms are outstanding against the component. Other, less severe, alarms may also be outstanding. The operationalState is enabled or disabled. The value minor indicates one or more minor alarms are outstanding against the component. Other, less severe, alarms may also be outstanding. The operationalState is enabled or disabled. The value alarmOutstanding generically indicates that an alarm of some severity is outstanding against the component. Description of bits: underRepair(0) critical(1) major(2) minor(3) alarmOutstanding(4)')
vrSnmpStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 21, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpStandbyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpStandbyStatus.setDescription('If supported by the component, this attribute indicates the OSI Standby status of the component. The value notSet indicates that either the attribute is not supported or that none of the status conditions described below are present. Note that this is a non-standard value, used because the original specification indicated this attribute was set-valued and thus, did not provide a value to indicate that none of the other three are applicable. The value hotStandby indicates that the resource is not providing service but will be immediately able to take over the role of the resource to be backed up, without initialization activity, and containing the same information as the resource to be backed up. The value coldStandby indicates the resource is a backup for another resource but will not be immediately able to take over the role of the backed up resource and will require some initialization activity. The value providingService indicates that this component, as a backup resource, is currently backing up another resource.')
vrSnmpUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 21, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpUnknownStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpUnknownStatus.setDescription('This attribute indicates the OSI Unknown status of the component. The value false indicates that all of the other OSI State and Status attribute values can be considered accurate. The value true indicates that the actual state of the component is not known for sure.')
vrSnmpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 22), )
if mibBuilder.loadTexts: vrSnmpStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpStatsTable.setDescription('This attribute group contains miscellaneous SNMP management entity operational attributes. Statistics in the group are derived from rfc 1450 and rfc 1213. Also included in the group are statistics due to non-SNMP authorization errors, and non-SNMP statistics.')
vrSnmpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 22, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpIndex"))
if mibBuilder.loadTexts: vrSnmpStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpStatsEntry.setDescription('An entry in the vrSnmpStatsTable.')
vrSnmpLastOrChange = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 22, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpLastOrChange.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpLastOrChange.setDescription("This attribute indicates the value of sysUpTime (in 1/100's of a second) at the time of the most recent change to a SNMPv2 Object Resource entry. The attribute forms part of the SNMPv2 MIB Base Object Resource Group found in rfc1450.")
vrSnmpTrapsProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 22, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpTrapsProcessed.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpTrapsProcessed.setDescription('This counter contains the cumulative number of Trap Indications and Alarm Indications received from the DCS Collectors since the processor last restarted. These Traps and Alarms are sent to SNMPv1 Managers and SNMPv2 Parties which are configured to receive Traps. This total includes the number discarded by the Snmp component when it was locked or disabled.')
vrSnmpTrapsDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 22, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpTrapsDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpTrapsDiscarded.setDescription('This counter contains the cumulative number of Trap Indications and Alarm Indications discarded since the processor last restarted. They are discarded when the Snmp component is locked or disabled.')
vrSnmpLastAuthFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 22, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpLastAuthFailure.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpLastAuthFailure.setDescription("This attribute indicates the value of sysUpTime (in 1/100's of a second) at the time the last authentication failure. This attribute is a non-SNMP statistic.")
vrSnmpMgrOfLastAuthFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 22, 1, 5), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpMgrOfLastAuthFailure.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpMgrOfLastAuthFailure.setDescription('This attribute indicates the IP address of the manager station that caused the last authentication failure. This attribute is a non-SNMP statistic.')
vrSnmpSys = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 2))
vrSnmpSysRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 2, 1), )
if mibBuilder.loadTexts: vrSnmpSysRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpSysRowStatusTable.setDescription('This entry controls the addition and deletion of vrSnmpSys components.')
vrSnmpSysRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpSysIndex"))
if mibBuilder.loadTexts: vrSnmpSysRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpSysRowStatusEntry.setDescription('A single entry in the table represents a single vrSnmpSys component.')
vrSnmpSysRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpSysRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpSysRowStatus.setDescription('This variable is used as the basis for SNMP naming of vrSnmpSys components. These components cannot be added nor deleted.')
vrSnmpSysComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpSysComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpSysComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vrSnmpSysStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpSysStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpSysStorageType.setDescription('This variable represents the storage type value for the vrSnmpSys tables.')
vrSnmpSysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: vrSnmpSysIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpSysIndex.setDescription('This variable represents the index for the vrSnmpSys tables.')
vrSnmpSysProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 2, 10), )
if mibBuilder.loadTexts: vrSnmpSysProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpSysProvTable.setDescription('The group contains provisionable attributes relating to the SNMP System Group. The attributes are derived from rfc1213.')
vrSnmpSysProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpSysIndex"))
if mibBuilder.loadTexts: vrSnmpSysProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpSysProvEntry.setDescription('An entry in the vrSnmpSysProvTable.')
vrSnmpSysContact = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 2, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpSysContact.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpSysContact.setDescription('This attribute identifies the contact person for this managed node, together with information on how to contact this person.')
vrSnmpSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 2, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpSysName.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpSysName.setDescription("This attribute identifies the administratively assigned name for this managed node. By convention, it is the node's fully qualified domain name.")
vrSnmpSysLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 2, 10, 1, 3), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpSysLocation.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpSysLocation.setDescription("This attribute identifies the physical location of this node. For example, 'telephone closet, third floor'.")
vrSnmpSysOpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 2, 11), )
if mibBuilder.loadTexts: vrSnmpSysOpTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpSysOpTable.setDescription('The group contains operational attributes relating to the SNMP System Group. The attributes are derived from rfc1213.')
vrSnmpSysOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpSysIndex"))
if mibBuilder.loadTexts: vrSnmpSysOpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpSysOpEntry.setDescription('An entry in the vrSnmpSysOpTable.')
vrSnmpSysDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 2, 11, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpSysDescription.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpSysDescription.setDescription("This attribute presents a textual description of the entity. This value should include the full name and version identification of the system's hardware type, software operating-system, and networking software.")
vrSnmpSysObjectId = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 2, 11, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpSysObjectId.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpSysObjectId.setDescription("This attribute identifies the vendor's authoritative identification of the network management subsystem contained in the entity. This value is allocated within the Structure of Management Information (SMI) enterprises subtree (1.3.6.1.4.1) and provides an easy and unambiguous means for determining 'what kind of box' is being managed.")
vrSnmpSysUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 2, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpSysUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpSysUpTime.setDescription('This attribute represents the time (in hundredths of a second) since the network management portion of the system was last re- initialized.')
vrSnmpSysServices = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 2, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpSysServices.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpSysServices.setDescription('This attribute indicates the set of services that this entity primarily offers. The value is a sum. This sum initially takes the value zero, then, for each layer, L, in the range 1 through 7, that this node performs transactions for, 2 raised to (L-1) is added to the sum. For example, a node which performs primarily routing functions would have a value of 4 (2^(3-1)). In contrast, a node which is a host offering application services would have a value of 72 ((2^4-1) + 2^(7-1)). Note that in the context of the Internet suite of protocols, values should be calculated accordingly: layer 1 - physical (for example, repeaters) layer 2 - datalink/subnetwork (for example, bridges) layer 3 - internet (for example, IP gateways) layer 4 - end-to-end (for example, IP hosts) layer 7 - applications (for example, mail relays) For systems including OSI protocols, layers 5 and 6 may also be counted.')
vrSnmpCom = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 3))
vrSnmpComRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 3, 1), )
if mibBuilder.loadTexts: vrSnmpComRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpComRowStatusTable.setDescription('This entry controls the addition and deletion of vrSnmpCom components.')
vrSnmpComRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 3, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpComIndex"))
if mibBuilder.loadTexts: vrSnmpComRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpComRowStatusEntry.setDescription('A single entry in the table represents a single vrSnmpCom component.')
vrSnmpComRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpComRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpComRowStatus.setDescription('This variable is used as the basis for SNMP naming of vrSnmpCom components. These components can be added and deleted.')
vrSnmpComComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpComComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpComComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vrSnmpComStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpComStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpComStorageType.setDescription('This variable represents the storage type value for the vrSnmpCom tables.')
vrSnmpComIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: vrSnmpComIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpComIndex.setDescription('This variable represents the index for the vrSnmpCom tables.')
vrSnmpComProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 3, 10), )
if mibBuilder.loadTexts: vrSnmpComProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpComProvTable.setDescription('The group contains provisionable attributes relating to SNMPv1 Communities.')
vrSnmpComProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 3, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpComIndex"))
if mibBuilder.loadTexts: vrSnmpComProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpComProvEntry.setDescription('An entry in the vrSnmpComProvTable.')
vrSnmpComCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 3, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)).clone(hexValue="7075626c6963")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpComCommunityString.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpComCommunityString.setDescription("This attribute is the SNMPv1 Community name. The value of this attribute is used to authenticate SNMP messages received from SNMPv1 management entities, and is placed in SNMP messages sent out by the SNMPv1 network management entity. The string 'public' is commonly used. When an SNMPv1 message is received, the community name in the message is checked to ensure that it matches a Community string. If there are no Manager subcomponents for that Community then the level of access is determined by the accessMode attribute. If there are Manager subcomponents for the Community then the originating transport address in the message must match the transportAddress of one of the Manager subcomponents, and the level of access of the sending entity is determined by the privileges attribute for that Manager. The combination of communityString and tDomain attributes must be unique across all Communies.")
vrSnmpComAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2))).clone('readOnly')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpComAccessMode.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpComAccessMode.setDescription('Once the sending SNMP entity is authenticated as a member of a community, the community access mode determines what level of access it has for each object in its view.')
vrSnmpComViewIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 3, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpComViewIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpComViewIndex.setDescription('The community view index selects an entry in the SnmpViewTable that this community will use. This index must correspond to the first index of one of the SnmpView entries. Note that SNMPv2 Views are used for SNMPv1 communities, as the SNMPv2 View model is sufficiently general to handle the SNMPv1 case.')
vrSnmpComTDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 3, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("snmpUdpDomain", 1))).clone('snmpUdpDomain')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpComTDomain.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpComTDomain.setDescription('This attribute indicates the kind of transport service by which the community receives and sends network management traffic. The combination of communityString and tDomain attributes must be unique across all Communies')
vrSnmpComMan = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 3, 2))
vrSnmpComManRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 3, 2, 1), )
if mibBuilder.loadTexts: vrSnmpComManRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpComManRowStatusTable.setDescription('This entry controls the addition and deletion of vrSnmpComMan components.')
vrSnmpComManRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 3, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpComIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpComManIndex"))
if mibBuilder.loadTexts: vrSnmpComManRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpComManRowStatusEntry.setDescription('A single entry in the table represents a single vrSnmpComMan component.')
vrSnmpComManRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 3, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpComManRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpComManRowStatus.setDescription('This variable is used as the basis for SNMP naming of vrSnmpComMan components. These components can be added and deleted.')
vrSnmpComManComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpComManComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpComManComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vrSnmpComManStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 3, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpComManStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpComManStorageType.setDescription('This variable represents the storage type value for the vrSnmpComMan tables.')
vrSnmpComManIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)))
if mibBuilder.loadTexts: vrSnmpComManIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpComManIndex.setDescription('This variable represents the index for the vrSnmpComMan tables.')
vrSnmpComManProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 3, 2, 10), )
if mibBuilder.loadTexts: vrSnmpComManProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpComManProvTable.setDescription('The group contains provisionable attributes relating to an SNMPv1 Community Manager.')
vrSnmpComManProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 3, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpComIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpComManIndex"))
if mibBuilder.loadTexts: vrSnmpComManProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpComManProvEntry.setDescription('An entry in the vrSnmpComManProvTable.')
vrSnmpComManTransportAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 3, 2, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpComManTransportAddress.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpComManTransportAddress.setDescription("This attribute is the transport service address of SNMPv1 Manager, formatted according to the value of SnmpV1Community tDomain. The only currently supported format is that of a UDP Transport Address. It must be of the form 'IpAddress-UDP Port', where UDP Port = 162. For example, 23.45.67.89-162 is a suitable UDP Transport Address. The value of transportAddress must be unique for all Manager components under the same Community.")
vrSnmpComManPrivileges = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 3, 2, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="40")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpComManPrivileges.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpComManPrivileges.setDescription('This attribute identifies the access privileges which govern what management operations the SNMPv1 Manager may perform. v1trap operations are only allowed if the Community accessMode is readOnly or readWrite. set operations are only allowed if the Community accessMode is readWrite. get operations are only allowed if the Community accessMode is readOnly or readWrite. Description of bits: sets(0) gets(1) v1trap(2)')
vrSnmpAcl = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 4))
vrSnmpAclRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 4, 1), )
if mibBuilder.loadTexts: vrSnmpAclRowStatusTable.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpAclRowStatusTable.setDescription('This entry controls the addition and deletion of vrSnmpAcl components.')
vrSnmpAclRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 4, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpAclTargetIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpAclSubjectIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpAclResourcesIndex"))
if mibBuilder.loadTexts: vrSnmpAclRowStatusEntry.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpAclRowStatusEntry.setDescription('A single entry in the table represents a single vrSnmpAcl component.')
vrSnmpAclRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 4, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpAclRowStatus.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpAclRowStatus.setDescription('This variable is used as the basis for SNMP naming of vrSnmpAcl components. These components can be added and deleted.')
vrSnmpAclComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpAclComponentName.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpAclComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vrSnmpAclStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpAclStorageType.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpAclStorageType.setDescription('This variable represents the storage type value for the vrSnmpAcl tables.')
vrSnmpAclTargetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048)))
if mibBuilder.loadTexts: vrSnmpAclTargetIndex.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpAclTargetIndex.setDescription('This variable represents an index for the vrSnmpAcl tables.')
vrSnmpAclSubjectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048)))
if mibBuilder.loadTexts: vrSnmpAclSubjectIndex.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpAclSubjectIndex.setDescription('This variable represents an index for the vrSnmpAcl tables.')
vrSnmpAclResourcesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048)))
if mibBuilder.loadTexts: vrSnmpAclResourcesIndex.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpAclResourcesIndex.setDescription('This variable represents an index for the vrSnmpAcl tables.')
vrSnmpAclProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 4, 10), )
if mibBuilder.loadTexts: vrSnmpAclProvTable.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpAclProvTable.setDescription('This group contains provisionable attributes relating to SNMPv2 Access Privilege Table Entries. The provisionable attributes are derived from rfc1445, and rfc1447.')
vrSnmpAclProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 4, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpAclTargetIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpAclSubjectIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpAclResourcesIndex"))
if mibBuilder.loadTexts: vrSnmpAclProvEntry.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpAclProvEntry.setDescription('An entry in the vrSnmpAclProvTable.')
vrSnmpAclPrivileges = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 4, 10, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="60")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpAclPrivileges.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpAclPrivileges.setDescription('This attribute identifies the access privileges which govern what management operations a particular target part may perform with respect to a particular SNMPv2 context when requested by a particular subject party. Gets and set operations are only permitted if the target Party is local (SnmpV2PartyEntryProv local = true). Response and v2trap operations are only permitted if the target Party is non-local (SnmpV2PartyEntryProv local = false). Description of bits: response(0) set(1) gets(2) v2trap(3)')
vrSnmpAclRowStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 4, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3))).clone(namedValues=NamedValues(("nonVolatile", 3))).clone('nonVolatile')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpAclRowStorageType.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpAclRowStorageType.setDescription('This attribute indicates the storage type for this conceptual row in the SNMPv2 aclTable. This is a constant - nonVolatile.')
vrSnmpAclStdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 4, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("active", 1))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpAclStdRowStatus.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpAclStdRowStatus.setDescription('This attribute indicates the status of this conceptual row in the SNMPv2 aclTable. This is a constant - active.')
vrSnmpParty = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 5))
vrSnmpPartyRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 5, 1), )
if mibBuilder.loadTexts: vrSnmpPartyRowStatusTable.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpPartyRowStatusTable.setDescription('This entry controls the addition and deletion of vrSnmpParty components.')
vrSnmpPartyRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 5, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpPartyIdentityIndex"))
if mibBuilder.loadTexts: vrSnmpPartyRowStatusEntry.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpPartyRowStatusEntry.setDescription('A single entry in the table represents a single vrSnmpParty component.')
vrSnmpPartyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 5, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpPartyRowStatus.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpPartyRowStatus.setDescription('This variable is used as the basis for SNMP naming of vrSnmpParty components. These components can be added and deleted.')
vrSnmpPartyComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpPartyComponentName.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpPartyComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vrSnmpPartyStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpPartyStorageType.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpPartyStorageType.setDescription('This variable represents the storage type value for the vrSnmpParty tables.')
vrSnmpPartyIdentityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 5, 1, 1, 10), ObjectIdentifier())
if mibBuilder.loadTexts: vrSnmpPartyIdentityIndex.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpPartyIdentityIndex.setDescription('This variable represents the index for the vrSnmpParty tables.')
vrSnmpPartyProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 5, 10), )
if mibBuilder.loadTexts: vrSnmpPartyProvTable.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpPartyProvTable.setDescription('This group contains provisionable attributes relating to SNMPv2 Party Table Entries.The attributes are derived from rfc1321, rfc1445, rfc1446, rfc1447, and rfc1450.')
vrSnmpPartyProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 5, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpPartyIdentityIndex"))
if mibBuilder.loadTexts: vrSnmpPartyProvEntry.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpPartyProvEntry.setDescription('An entry in the vrSnmpPartyProvTable.')
vrSnmpPartyStdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 5, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpPartyStdIndex.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpPartyStdIndex.setDescription('This attribute represents the SNMPv2 Party table partyIndex. This index is unique and its value is automatically selected for you.')
vrSnmpPartyTDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 5, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("snmpUdpDomain", 1))).clone('snmpUdpDomain')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpPartyTDomain.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpPartyTDomain.setDescription('This attribute indicates the kind of transport service by which the party receives and sends network management traffic.')
vrSnmpPartyTransportAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 5, 10, 1, 3), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpPartyTransportAddress.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpPartyTransportAddress.setDescription("This attribute is the transport service address by which the party receives network management traffic, formatted according to the corresponding value of tDomain. For local (Agent) Parties (SnmpV2PartyEntryProv local = true) this is the address of the Virtual Router. For non-local (Manager) Parties (SnmpV2PartyEntryProv local = false) this is the address of the SNMP Manager. The only currently supported format is that of a UDP Transport Address. It must be of the form 'IpAddress-UDP Port', where UDP Port = 161 for a local Party and UDP Port = 162 for a non-local Party. For example, 23.45.67.89-161 or 23.45.67.89-162 are suitable UDP Transport Addresses.")
vrSnmpPartyMaxMessageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 5, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(484, 65507)).clone(1400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpPartyMaxMessageSize.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpPartyMaxMessageSize.setDescription('This attribute is the maximum length in octets of a SNMPv2 message that this party will accept. For local (Agent) Parties (SnmpV2PartyEntryProv local = true) this cannot be set to greater than the fixed Agent maximum of 1400. For non-local (Manager) Parties (SnmpV2PartyEntryProv local = false) the maximum is 65507.')
vrSnmpPartyLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 5, 10, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpPartyLocal.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpPartyLocal.setDescription('This attribute indicates whether this party executes at this SNMPv2 entity. If this attribute has a value of true, then the SNMPv2 entity is an Agent, and will listen for SNMPv2 messages on the ipAddress associated with this party. If this attribute has the value false, then the SNMPv2 entity is a Manager.')
vrSnmpPartyAuthProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 5, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("noAuth", 1), ("v2Md5AuthProtocol", 4))).clone('noAuth')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpPartyAuthProtocol.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpPartyAuthProtocol.setDescription('This attribute indicates the authentication protocol by which all messages generated by the party are authenticated as to origin and integrity. The value noAuth signifies that messages generated by the party are not authenticated.')
vrSnmpPartyAuthPrivate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 5, 10, 1, 7), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone(hexValue="")).setMaxAccess("writeonly")
if mibBuilder.loadTexts: vrSnmpPartyAuthPrivate.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpPartyAuthPrivate.setDescription("This attribute is the Party's private authentication key. As with passwords this attribute cannot be displayed by the display command and is stored in encoded form. For Parties with an authentication protocol, this key must be provisioned.")
vrSnmpPartyAuthPublic = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 5, 10, 1, 8), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpPartyAuthPublic.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpPartyAuthPublic.setDescription("This attribute is the Party's public authentication key. It is the 'public information' used by the Party's authentication protocol.")
vrSnmpPartyAuthLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 5, 10, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpPartyAuthLifetime.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpPartyAuthLifetime.setDescription('This attribute represents the maximum acceptable delivery delay (lifetime) in seconds for messages from this Party.')
vrSnmpPartyPrivProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 5, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("noPriv", 2))).clone('noPriv')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpPartyPrivProtocol.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpPartyPrivProtocol.setDescription('This attribute identifies the privacy protocol by which all protocol messages received by the party are protected from disclosure. The value noPriv signifies that messages received by the party are not protected. As DES is not supported, this is a constant noPriv.')
vrSnmpPartyRowStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 5, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3))).clone(namedValues=NamedValues(("nonVolatile", 3))).clone('nonVolatile')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpPartyRowStorageType.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpPartyRowStorageType.setDescription('The attribute indicates the storage type for this conceptual row in the SNMPv2 aclTable. This is a constant - nonVolatile.')
vrSnmpPartyStdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 5, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("active", 1))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpPartyStdRowStatus.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpPartyStdRowStatus.setDescription('This attribute indicates the status of this conceptual row in the SNMPv2 partyTable. This is a constant - active.')
vrSnmpPartyOpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 5, 11), )
if mibBuilder.loadTexts: vrSnmpPartyOpTable.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpPartyOpTable.setDescription('This group contains Operational Attributes relating SNMPv2 parties. based upon rfc1321, rfc1445, rfc1446, rfc1447, and rfc1450.')
vrSnmpPartyOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 5, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpPartyIdentityIndex"))
if mibBuilder.loadTexts: vrSnmpPartyOpEntry.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpPartyOpEntry.setDescription('An entry in the vrSnmpPartyOpTable.')
vrSnmpPartyTrapNumbers = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 5, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpPartyTrapNumbers.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpPartyTrapNumbers.setDescription('This attribute is a count of the total number of SNMPv2 traps sent to a SNMPv2 non-Local (Manager) party (SnmpV2PartyEntryProv local = false). This counter is never incremented for Local (Agent) parties (SnmpV2PartyEntryProv local = true).')
vrSnmpPartyAuthClock = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 5, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpPartyAuthClock.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpPartyAuthClock.setDescription("This attribute is the authentication clock which represents the notion of current time specific to a Party. This value is not permitted to 'roll-over'. In other words once it reaches the maximum it stays there, unless explicitly decremented.")
vrSnmpCon = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 6))
vrSnmpConRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 6, 1), )
if mibBuilder.loadTexts: vrSnmpConRowStatusTable.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpConRowStatusTable.setDescription('This entry controls the addition and deletion of vrSnmpCon components.')
vrSnmpConRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 6, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpConIdentityIndex"))
if mibBuilder.loadTexts: vrSnmpConRowStatusEntry.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpConRowStatusEntry.setDescription('A single entry in the table represents a single vrSnmpCon component.')
vrSnmpConRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 6, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpConRowStatus.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpConRowStatus.setDescription('This variable is used as the basis for SNMP naming of vrSnmpCon components. These components can be added and deleted.')
vrSnmpConComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpConComponentName.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpConComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vrSnmpConStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpConStorageType.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpConStorageType.setDescription('This variable represents the storage type value for the vrSnmpCon tables.')
vrSnmpConIdentityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 6, 1, 1, 10), ObjectIdentifier())
if mibBuilder.loadTexts: vrSnmpConIdentityIndex.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpConIdentityIndex.setDescription('This variable represents the index for the vrSnmpCon tables.')
vrSnmpConProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 6, 10), )
if mibBuilder.loadTexts: vrSnmpConProvTable.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpConProvTable.setDescription('This group contains provisionable attributes relating to SNMPv2 Contexts Table Entries. The attributes are derived from rfc1445, and rfc1447.')
vrSnmpConProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 6, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpConIdentityIndex"))
if mibBuilder.loadTexts: vrSnmpConProvEntry.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpConProvEntry.setDescription('An entry in the vrSnmpConProvTable.')
vrSnmpConStdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 6, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpConStdIndex.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpConStdIndex.setDescription('This attribute represents the SNMPv2 Contexts table contextIndex. This index is unique and its value is automatically selected for you.')
vrSnmpConLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 6, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("true", 1))).clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpConLocal.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpConLocal.setDescription('This attribute indicates whether this context is realized by this SNMPv2 entity. This is a constant - true.')
vrSnmpConViewIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 6, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpConViewIndex.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpConViewIndex.setDescription('The SNMPv2 Contexts view index selects a particular MIB view entry in the SNMPv2 viewTable. This index must correspond to the first replication index (index) of one of the entries in the SnmpView. The value of the localTime attribute provides further information on the temporal domain of the MIB view.')
vrSnmpConLocalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 6, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("currentTime", 1))).clone('currentTime')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpConLocalTime.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpConLocalTime.setDescription('This attribute identifies the temporal context of the management information in the MIB view identified by the viewIndex attribute. This is a constant - currentTime. The SNMPv2 alternatives restartTime and cacheTime are not currently supported.')
vrSnmpConRowStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 6, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3))).clone(namedValues=NamedValues(("nonVolatile", 3))).clone('nonVolatile')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpConRowStorageType.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpConRowStorageType.setDescription('The attribute indicates the storage type for this conceptual row in the SNMPv2 contextTable. This is a constant - nonVolatile.')
vrSnmpConStdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 6, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("active", 1))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpConStdRowStatus.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpConStdRowStatus.setDescription('This attribute indicates the status of this conceptual row in the SNMPv2 aclTable. This is a constant - active.')
vrSnmpView = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 7))
vrSnmpViewRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 7, 1), )
if mibBuilder.loadTexts: vrSnmpViewRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpViewRowStatusTable.setDescription('This entry controls the addition and deletion of vrSnmpView components.')
vrSnmpViewRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 7, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpViewIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpViewSubtreeIndex"))
if mibBuilder.loadTexts: vrSnmpViewRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpViewRowStatusEntry.setDescription('A single entry in the table represents a single vrSnmpView component.')
vrSnmpViewRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 7, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpViewRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpViewRowStatus.setDescription('This variable is used as the basis for SNMP naming of vrSnmpView components. These components can be added and deleted.')
vrSnmpViewComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpViewComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpViewComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vrSnmpViewStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpViewStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpViewStorageType.setDescription('This variable represents the storage type value for the vrSnmpView tables.')
vrSnmpViewIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: vrSnmpViewIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpViewIndex.setDescription('This variable represents an index for the vrSnmpView tables.')
vrSnmpViewSubtreeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 7, 1, 1, 11), ObjectIdentifier())
if mibBuilder.loadTexts: vrSnmpViewSubtreeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpViewSubtreeIndex.setDescription('This variable represents an index for the vrSnmpView tables.')
vrSnmpViewProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 7, 10), )
if mibBuilder.loadTexts: vrSnmpViewProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpViewProvTable.setDescription('This group contains provisionable attributes relating to SNMPv2 View Table SubTrees. The attributes are derived from rfc1445, and rfc1447.')
vrSnmpViewProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 7, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpViewIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpViewSubtreeIndex"))
if mibBuilder.loadTexts: vrSnmpViewProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpViewProvEntry.setDescription('An entry in the vrSnmpViewProvTable.')
vrSnmpViewMask = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 7, 10, 1, 1), HexString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpViewMask.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpViewMask.setDescription("This attribute is the View mask which, in combination with the corresponding instance of SnmpView subTree, defines a family of view subtrees. Each bit of this bit mask corresponds to a subindentifier of SnmpView subTree, with the most significant bit of the i-th octet of this octet string value (extended if necessary, see below) corresponding to the (8*i - 7)-th sub-identifier, and the least significant bit of the i-th octet of this octet string corresponding to the (8*i)-th sub-identifier, where i is in the range 1 through 16. Each bit of this bit mask specifies whether or not the corresponding sub-identifiers must match when determining if an OBJECT IDENTIFIER is in this family of view subtrees; a '1' indicates that an exact match must occur; a '0' indicates 'wild card', meaning that any sub-identifier value matches. Thus, the OBJECT IDENTIFIER X of an object instance is contained in a family of view subtrees if the following criteria are met: For each sub-identifier of the value of SnmpView subTree, either the i-th bit of mask is 0, or the i-th sub-identifier of X is equal to the i-th sub-identifier of the value of SnmpView subTree. If the value of this bit mask is M bits long and there are more than M sub-identifiers in the corresponding instance of SnmpView subTree, then the bit mask is extended with 1's to be the required length. Note that when the value of this object is the zero-length string, this extension rule results in a mask of all 1's being used (no wild card) and the family of SnmpView subTrees is the one snmpView subTree uniquely identified by the corresponding instance of subTree.")
vrSnmpViewType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 7, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("includedSubtree", 1), ("excludedSubtree", 2))).clone('includedSubtree')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpViewType.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpViewType.setDescription("This attribute indicates whether the particular family of view subtrees is included or excluded in the SNMPv2 context's (or SNMPv1 community's) MIB view. The value 'includedSubtree' indicates that the corresponding instances of subTree and mask define a family of view subtrees included in the MIB view. The value 'excludedSubtree' indicates that the corresponding instances of subTree and mask define a family of view subtrees excluded in the MIB view.")
vrSnmpViewRowStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 7, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3))).clone(namedValues=NamedValues(("nonVolatile", 3))).clone('nonVolatile')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpViewRowStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpViewRowStorageType.setDescription('The attribute indicates the storage type for this conceptual row in the SNMPv2 viewTable. This is a constant - nonVolatile.')
vrSnmpViewStdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 7, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("active", 1))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrSnmpViewStdRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpViewStdRowStatus.setDescription('This attribute indicates the status of this conceptual row in the SNMPv2 snmpViewTable. This is a constant - active.')
vrSnmpOr = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 8))
vrSnmpOrRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 8, 1), )
if mibBuilder.loadTexts: vrSnmpOrRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpOrRowStatusTable.setDescription('This entry controls the addition and deletion of vrSnmpOr components.')
vrSnmpOrRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 8, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpOrIndex"))
if mibBuilder.loadTexts: vrSnmpOrRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpOrRowStatusEntry.setDescription('A single entry in the table represents a single vrSnmpOr component.')
vrSnmpOrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 8, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpOrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpOrRowStatus.setDescription('This variable is used as the basis for SNMP naming of vrSnmpOr components. These components cannot be added nor deleted.')
vrSnmpOrComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpOrComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpOrComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vrSnmpOrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 8, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpOrStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpOrStorageType.setDescription('This variable represents the storage type value for the vrSnmpOr tables.')
vrSnmpOrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: vrSnmpOrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpOrIndex.setDescription('This variable represents the index for the vrSnmpOr tables.')
vrSnmpOrOrTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 8, 10), )
if mibBuilder.loadTexts: vrSnmpOrOrTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpOrOrTable.setDescription('The attributes of this group describe a MIB currently supported by the SNMP agent. SNMP managers make use of these entries to determine what is supported. The group is derived from rfc 1450.')
vrSnmpOrOrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 8, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpOrIndex"))
if mibBuilder.loadTexts: vrSnmpOrOrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpOrOrEntry.setDescription('An entry in the vrSnmpOrOrTable.')
vrSnmpOrId = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 8, 10, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpOrId.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpOrId.setDescription('This attribute represents the authoritative identification of a dynamically-configurable management entity object resource. This is a MIB Object Identifier.')
vrSnmpOrDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 8, 10, 1, 3), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpOrDescr.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpOrDescr.setDescription('This attribute represents the textual description of a dynamically- configurable management entity object resource. This is an ASCII description of a supported MIB.')
vrSnmpV2Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 9))
vrSnmpV2StatsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 9, 1), )
if mibBuilder.loadTexts: vrSnmpV2StatsRowStatusTable.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpV2StatsRowStatusTable.setDescription('This entry controls the addition and deletion of vrSnmpV2Stats components.')
vrSnmpV2StatsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 9, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpV2StatsIndex"))
if mibBuilder.loadTexts: vrSnmpV2StatsRowStatusEntry.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpV2StatsRowStatusEntry.setDescription('A single entry in the table represents a single vrSnmpV2Stats component.')
vrSnmpV2StatsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 9, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpV2StatsRowStatus.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpV2StatsRowStatus.setDescription('This variable is used as the basis for SNMP naming of vrSnmpV2Stats components. These components cannot be added nor deleted.')
vrSnmpV2StatsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpV2StatsComponentName.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpV2StatsComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vrSnmpV2StatsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 9, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpV2StatsStorageType.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpV2StatsStorageType.setDescription('This variable represents the storage type value for the vrSnmpV2Stats tables.')
vrSnmpV2StatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 9, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: vrSnmpV2StatsIndex.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpV2StatsIndex.setDescription('This variable represents the index for the vrSnmpV2Stats tables.')
vrSnmpV2StatsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 9, 10), )
if mibBuilder.loadTexts: vrSnmpV2StatsStatsTable.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpV2StatsStatsTable.setDescription('This attribute group contains the collection of statistics as defined by SNMPv2 providing basic instrumentation of a SNMPv2 Agent. The group is derived from rfc 1450. As the implementation is fully bilingual in regards to Snmp V2/V1, statistics which apply only to unilingual V2 Agents do not appear as attributes. Similarly as privacy protocols are not supported, the relevant statistics have no corresponding attributes.')
vrSnmpV2StatsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 9, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpV2StatsIndex"))
if mibBuilder.loadTexts: vrSnmpV2StatsStatsEntry.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpV2StatsStatsEntry.setDescription('An entry in the vrSnmpV2StatsStatsTable.')
vrSnmpV2StatsPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 9, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpV2StatsPackets.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpV2StatsPackets.setDescription('This attribute represents the total number of SNMP messages received by the SNMP management entity from the transport service. This has the same value as inPackets in the SnmpMibIIStatsOp group.')
vrSnmpV2StatsEncodingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 9, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpV2StatsEncodingErrors.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpV2StatsEncodingErrors.setDescription('This attribute represents the total number of SNMP messages received by the SNMP management entity which were improperly BER encoded or had an invalid ASN.1 syntax. This has the same value as inAsnParseErrs in the SnmpMibIIStatsOp group.')
vrSnmpV2StatsUnknownSrcParties = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 9, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpV2StatsUnknownSrcParties.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpV2StatsUnknownSrcParties.setDescription('This attribute represents the total number of SNMPv2 messages received by the SNMP management entity for which the message source Party was not locally recognized.')
vrSnmpV2StatsBadAuths = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 9, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpV2StatsBadAuths.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpV2StatsBadAuths.setDescription('This attribute represents the total number of SNMPv2 messages received by the SNMP management entity for which the message authentication protocol did not match that of the local source Party.')
vrSnmpV2StatsNotInLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 9, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpV2StatsNotInLifetime.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpV2StatsNotInLifetime.setDescription("This attribute represents the total number of SNMPv2 messages received by the SNMP management entity for which the message source TimeStamp was less than the combination of the local source Party's clock and lifetime.")
vrSnmpV2StatsWrongDigestValues = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 9, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpV2StatsWrongDigestValues.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpV2StatsWrongDigestValues.setDescription('This attribute represents the total number of SNMPv2 messages received by the SNMP management entity for which the message authentication Digest Value was invalid.')
vrSnmpV2StatsUnknownContexts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 9, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpV2StatsUnknownContexts.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpV2StatsUnknownContexts.setDescription('This attribute represents the total number of SNMPv2 messages received by the SNMP management entity for which the message Context was not locally known.')
vrSnmpV2StatsBadOperations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 9, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpV2StatsBadOperations.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpV2StatsBadOperations.setDescription('This attribute represents the total number of SNMPv2 messages received by the SNMP management entity for which the PDU type was not allowed in the local Access Privileges Entry.')
vrSnmpV2StatsSilentDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 9, 10, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpV2StatsSilentDrops.setStatus('obsolete')
if mibBuilder.loadTexts: vrSnmpV2StatsSilentDrops.setDescription("This attribute represents the total number of SNMPv2 messages received by the SNMP management entity which were silently ignored because an alternate response message was greater than a local constraint or greater than the maximum message size allowed for the source Party. In other words, this attribute counts the number of error responses pdu's which could not be generated due to size constraints.")
vrSnmpV1Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 10))
vrSnmpV1StatsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 10, 1), )
if mibBuilder.loadTexts: vrSnmpV1StatsRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpV1StatsRowStatusTable.setDescription('This entry controls the addition and deletion of vrSnmpV1Stats components.')
vrSnmpV1StatsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 10, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpV1StatsIndex"))
if mibBuilder.loadTexts: vrSnmpV1StatsRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpV1StatsRowStatusEntry.setDescription('A single entry in the table represents a single vrSnmpV1Stats component.')
vrSnmpV1StatsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 10, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpV1StatsRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpV1StatsRowStatus.setDescription('This variable is used as the basis for SNMP naming of vrSnmpV1Stats components. These components cannot be added nor deleted.')
vrSnmpV1StatsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 10, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpV1StatsComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpV1StatsComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vrSnmpV1StatsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 10, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpV1StatsStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpV1StatsStorageType.setDescription('This variable represents the storage type value for the vrSnmpV1Stats tables.')
vrSnmpV1StatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 10, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: vrSnmpV1StatsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpV1StatsIndex.setDescription('This variable represents the index for the vrSnmpV1Stats tables.')
vrSnmpV1StatsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 10, 10), )
if mibBuilder.loadTexts: vrSnmpV1StatsStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpV1StatsStatsTable.setDescription('This attribute group contains the collection of statistics as defined by SNMPv2 providing basic instrumentation of a SNMPv2 Agent which also implements SNMPv1. The group is derived from rfc 1450.')
vrSnmpV1StatsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 10, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpV1StatsIndex"))
if mibBuilder.loadTexts: vrSnmpV1StatsStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpV1StatsStatsEntry.setDescription('An entry in the vrSnmpV1StatsStatsTable.')
vrSnmpV1StatsBadCommunityNames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 10, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpV1StatsBadCommunityNames.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpV1StatsBadCommunityNames.setDescription('This attribute counts the SNMPv1 messages received by the SNMP management entity which had an unknown SNMPv1 Community string. This has the same value as the attribute inBadCommunityNames under the SnmpMibIIStats component.')
vrSnmpV1StatsBadCommunityUses = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 10, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpV1StatsBadCommunityUses.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpV1StatsBadCommunityUses.setDescription('This attribute counts the SNMPv1 messages received by the SNMP management entity which attempted to perform an operation not allowed for the indicated SNMPv1 Community. This has the same value as the attribute inBadCommunityUses under the SnmpMibIIStats component.')
vrSnmpMibIIStats = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 11))
vrSnmpMibIIStatsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 11, 1), )
if mibBuilder.loadTexts: vrSnmpMibIIStatsRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpMibIIStatsRowStatusTable.setDescription('This entry controls the addition and deletion of vrSnmpMibIIStats components.')
vrSnmpMibIIStatsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 11, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpMibIIStatsIndex"))
if mibBuilder.loadTexts: vrSnmpMibIIStatsRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpMibIIStatsRowStatusEntry.setDescription('A single entry in the table represents a single vrSnmpMibIIStats component.')
vrSnmpMibIIStatsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 11, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpMibIIStatsRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpMibIIStatsRowStatus.setDescription('This variable is used as the basis for SNMP naming of vrSnmpMibIIStats components. These components cannot be added nor deleted.')
vrSnmpMibIIStatsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 11, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpMibIIStatsComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpMibIIStatsComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vrSnmpMibIIStatsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 11, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpMibIIStatsStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpMibIIStatsStorageType.setDescription('This variable represents the storage type value for the vrSnmpMibIIStats tables.')
vrSnmpMibIIStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 11, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: vrSnmpMibIIStatsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpMibIIStatsIndex.setDescription('This variable represents the index for the vrSnmpMibIIStats tables.')
vrSnmpMibIIStatsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 11, 10), )
if mibBuilder.loadTexts: vrSnmpMibIIStatsStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpMibIIStatsStatsTable.setDescription('This attribute group contains the collection of statistics as defined by MIB II providing basic instrumentation of a SNMP Agent. The group is derived from rfc 1213. Statistics which are only relevant for SNMP Managers do not appear.')
vrSnmpMibIIStatsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 11, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrSnmpMibIIStatsIndex"))
if mibBuilder.loadTexts: vrSnmpMibIIStatsStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpMibIIStatsStatsEntry.setDescription('An entry in the vrSnmpMibIIStatsStatsTable.')
vrSnmpMibIIStatsInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 11, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpMibIIStatsInPackets.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpMibIIStatsInPackets.setDescription('This attribute represents the total number of SNMP messages received by the SNMP management entity.')
vrSnmpMibIIStatsInBadCommunityNames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 11, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpMibIIStatsInBadCommunityNames.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpMibIIStatsInBadCommunityNames.setDescription('This attribute counts the SNMPv1 messages received by the SNMP management entity which had an unknown SNMPv1 Community string. This has the same value as the attribute badCommunityNames under the SnmpV1Stats component.')
vrSnmpMibIIStatsInBadCommunityUses = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 11, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpMibIIStatsInBadCommunityUses.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpMibIIStatsInBadCommunityUses.setDescription('This attribute counts the SNMPv1 messages received by the SNMP management entity which attempted to perform an operation not allowed for the indicated SNMPv1 Community. This has the same value as the attribute badCommunityUses under the SnmpV1Stats component.')
vrSnmpMibIIStatsInAsnParseErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 11, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpMibIIStatsInAsnParseErrs.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpMibIIStatsInAsnParseErrs.setDescription('This attribute counts the SNMP messages received by the SNMP management entity which were improperly BER encoded or had an invalid ASN.1 syntax.')
vrSnmpMibIIStatsOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 11, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpMibIIStatsOutPackets.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpMibIIStatsOutPackets.setDescription('This attribute counts the SNMP messages transmitted by the SNMP management entity.')
vrSnmpMibIIStatsInBadVersions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 11, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpMibIIStatsInBadVersions.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpMibIIStatsInBadVersions.setDescription('This attribute counts the SNMPv1 messages received by the SNMP management entity with an invalid SNMP version number.')
vrSnmpMibIIStatsInTotalReqVars = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 11, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpMibIIStatsInTotalReqVars.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpMibIIStatsInTotalReqVars.setDescription('This attribute counts the MIB objects successfully retrieved by Get, and Get-Next requests.')
vrSnmpMibIIStatsInTotalSetVars = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 11, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpMibIIStatsInTotalSetVars.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpMibIIStatsInTotalSetVars.setDescription('This attribute counts the MIB objects successfully Set by SNMP requests.')
vrSnmpMibIIStatsInGetRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 11, 10, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpMibIIStatsInGetRequests.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpMibIIStatsInGetRequests.setDescription('This attribute counts the Get requests accepted and processed by the SNMP management entity.')
vrSnmpMibIIStatsInGetNexts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 11, 10, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpMibIIStatsInGetNexts.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpMibIIStatsInGetNexts.setDescription('This attribute counts the Get-Next requests accepted and processed by the SNMP management entity.')
vrSnmpMibIIStatsInSetRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 11, 10, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpMibIIStatsInSetRequests.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpMibIIStatsInSetRequests.setDescription('This attribute counts the Set requests accepted and processed by the SNMP management entity.')
vrSnmpMibIIStatsOutTooBigs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 11, 10, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpMibIIStatsOutTooBigs.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpMibIIStatsOutTooBigs.setDescription('This attribute counts the responses generated by the SNMP management entity with an error-status field of tooBig.')
vrSnmpMibIIStatsOutNoSuchNames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 11, 10, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpMibIIStatsOutNoSuchNames.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpMibIIStatsOutNoSuchNames.setDescription('This attribute counts the SNMPv1 responses generated by the SNMP management entity with an error status field of noSuchName.')
vrSnmpMibIIStatsOutBadValues = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 11, 10, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpMibIIStatsOutBadValues.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpMibIIStatsOutBadValues.setDescription('This attribute counts the SNMPv1 responses generated by the SNMP management entity with an error status field of badValue.')
vrSnmpMibIIStatsOutGenErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 11, 10, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpMibIIStatsOutGenErrs.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpMibIIStatsOutGenErrs.setDescription('This attribute counts the SNMP responses generated by the SNMP management entity with an error-status field of genErr.')
vrSnmpMibIIStatsOutGetResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 11, 10, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpMibIIStatsOutGetResponses.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpMibIIStatsOutGetResponses.setDescription('This attribute counts the Get responses generated by the SNMP management entity.')
vrSnmpMibIIStatsOutTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 8, 11, 10, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSnmpMibIIStatsOutTraps.setStatus('mandatory')
if mibBuilder.loadTexts: vrSnmpMibIIStatsOutTraps.setDescription('This attribute counts the Traps generated by the SNMP management entity.')
vrInitSnmpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 9))
vrInitSnmpConfigRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 9, 1), )
if mibBuilder.loadTexts: vrInitSnmpConfigRowStatusTable.setStatus('obsolete')
if mibBuilder.loadTexts: vrInitSnmpConfigRowStatusTable.setDescription('This entry controls the addition and deletion of vrInitSnmpConfig components.')
vrInitSnmpConfigRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 9, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrInitSnmpConfigIndex"))
if mibBuilder.loadTexts: vrInitSnmpConfigRowStatusEntry.setStatus('obsolete')
if mibBuilder.loadTexts: vrInitSnmpConfigRowStatusEntry.setDescription('A single entry in the table represents a single vrInitSnmpConfig component.')
vrInitSnmpConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 9, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrInitSnmpConfigRowStatus.setStatus('obsolete')
if mibBuilder.loadTexts: vrInitSnmpConfigRowStatus.setDescription('This variable is used as the basis for SNMP naming of vrInitSnmpConfig components. These components can be added and deleted.')
vrInitSnmpConfigComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrInitSnmpConfigComponentName.setStatus('obsolete')
if mibBuilder.loadTexts: vrInitSnmpConfigComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
vrInitSnmpConfigStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 9, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrInitSnmpConfigStorageType.setStatus('obsolete')
if mibBuilder.loadTexts: vrInitSnmpConfigStorageType.setDescription('This variable represents the storage type value for the vrInitSnmpConfig tables.')
vrInitSnmpConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 9, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: vrInitSnmpConfigIndex.setStatus('obsolete')
if mibBuilder.loadTexts: vrInitSnmpConfigIndex.setDescription('This variable represents the index for the vrInitSnmpConfig tables.')
vrInitSnmpConfigProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 9, 10), )
if mibBuilder.loadTexts: vrInitSnmpConfigProvTable.setStatus('obsolete')
if mibBuilder.loadTexts: vrInitSnmpConfigProvTable.setDescription('This group contains provisionable attributes required for the definition of initial SNMPv2 parties, contexts, views, and access control policies, as defined in rfc1447.')
vrInitSnmpConfigProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 9, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-VirtualRouterMIB", "vrIndex"), (0, "Nortel-Magellan-Passport-BaseSnmpMIB", "vrInitSnmpConfigIndex"))
if mibBuilder.loadTexts: vrInitSnmpConfigProvEntry.setStatus('obsolete')
if mibBuilder.loadTexts: vrInitSnmpConfigProvEntry.setDescription('An entry in the vrInitSnmpConfigProvTable.')
vrInitSnmpConfigAgentAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 9, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrInitSnmpConfigAgentAddress.setStatus('obsolete')
if mibBuilder.loadTexts: vrInitSnmpConfigAgentAddress.setDescription('This attribute is the address of the Virtual Router where the initial Agent parties will receive network management traffic. It is used to initialize the transport address of the initial local parties and also is used to define initial party and context identifiers. The format of the agentAddress is an IpAddress.')
vrInitSnmpConfigManagerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 100, 9, 10, 1, 2), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrInitSnmpConfigManagerAddress.setStatus('obsolete')
if mibBuilder.loadTexts: vrInitSnmpConfigManagerAddress.setDescription('This attribute is the address of the SNMPv2 manager. It is used to initialize the transport address of the initial non-local parties. The format of the managerAddress is an IpAddress.')
baseSnmpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 36, 1))
baseSnmpGroupBD = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 36, 1, 4))
baseSnmpGroupBD01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 36, 1, 4, 2))
baseSnmpGroupBD01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 36, 1, 4, 2, 2))
baseSnmpCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 36, 3))
baseSnmpCapabilitiesBD = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 36, 3, 4))
baseSnmpCapabilitiesBD01 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 36, 3, 4, 2))
baseSnmpCapabilitiesBD01A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 36, 3, 4, 2, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-BaseSnmpMIB", vrSnmpOrOrEntry=vrSnmpOrOrEntry, baseSnmpGroupBD01=baseSnmpGroupBD01, vrSnmpV2StatsStatsEntry=vrSnmpV2StatsStatsEntry, vrSnmpV2StatsBadAuths=vrSnmpV2StatsBadAuths, vrSnmpComStorageType=vrSnmpComStorageType, vrSnmpComComponentName=vrSnmpComComponentName, vrSnmpSysOpEntry=vrSnmpSysOpEntry, vrSnmpViewStdRowStatus=vrSnmpViewStdRowStatus, baseSnmpMIB=baseSnmpMIB, vrSnmpSysObjectId=vrSnmpSysObjectId, vrSnmpComProvTable=vrSnmpComProvTable, vrSnmpComManStorageType=vrSnmpComManStorageType, vrSnmpViewMask=vrSnmpViewMask, vrSnmpSysName=vrSnmpSysName, baseSnmpGroupBD=baseSnmpGroupBD, vrSnmpCidInEntTraps=vrSnmpCidInEntTraps, vrSnmpMibIIStatsRowStatusEntry=vrSnmpMibIIStatsRowStatusEntry, vrSnmpParty=vrSnmpParty, vrSnmpStatsEntry=vrSnmpStatsEntry, vrSnmpV2StatsEncodingErrors=vrSnmpV2StatsEncodingErrors, vrSnmpStandbyStatus=vrSnmpStandbyStatus, vrSnmpConRowStatusEntry=vrSnmpConRowStatusEntry, vrSnmpProvTable=vrSnmpProvTable, vrSnmpAclRowStorageType=vrSnmpAclRowStorageType, vrSnmpAclProvEntry=vrSnmpAclProvEntry, vrSnmpConStdIndex=vrSnmpConStdIndex, baseSnmpCapabilitiesBD01A=baseSnmpCapabilitiesBD01A, vrSnmpRowStatusEntry=vrSnmpRowStatusEntry, vrSnmpSysStorageType=vrSnmpSysStorageType, vrSnmpV2StatsPackets=vrSnmpV2StatsPackets, vrSnmpPartyLocal=vrSnmpPartyLocal, vrSnmpViewProvTable=vrSnmpViewProvTable, vrSnmpSys=vrSnmpSys, vrSnmpViewRowStorageType=vrSnmpViewRowStorageType, baseSnmpGroupBD01A=baseSnmpGroupBD01A, vrSnmpV2StatsStatsTable=vrSnmpV2StatsStatsTable, vrSnmpAclPrivileges=vrSnmpAclPrivileges, vrSnmpMibIIStatsInTotalSetVars=vrSnmpMibIIStatsInTotalSetVars, vrSnmpAvailabilityStatus=vrSnmpAvailabilityStatus, vrSnmpAclRowStatusEntry=vrSnmpAclRowStatusEntry, vrSnmpConLocalTime=vrSnmpConLocalTime, vrSnmpV2StatsComponentName=vrSnmpV2StatsComponentName, vrSnmpConProvEntry=vrSnmpConProvEntry, vrSnmpProceduralStatus=vrSnmpProceduralStatus, vrSnmpPartyRowStatusEntry=vrSnmpPartyRowStatusEntry, vrInitSnmpConfigRowStatus=vrInitSnmpConfigRowStatus, vrSnmpComMan=vrSnmpComMan, vrSnmpCom=vrSnmpCom, vrSnmpOrComponentName=vrSnmpOrComponentName, vrSnmpV1StatsRowStatusTable=vrSnmpV1StatsRowStatusTable, vrSnmpV1StatsStatsEntry=vrSnmpV1StatsStatsEntry, vrSnmpSysDescription=vrSnmpSysDescription, vrSnmpComManRowStatusTable=vrSnmpComManRowStatusTable, vrSnmpSysProvTable=vrSnmpSysProvTable, vrSnmpOr=vrSnmpOr, vrSnmpV2StatsRowStatusEntry=vrSnmpV2StatsRowStatusEntry, vrSnmpPartyProvEntry=vrSnmpPartyProvEntry, vrSnmpComProvEntry=vrSnmpComProvEntry, vrSnmpLastAuthFailure=vrSnmpLastAuthFailure, vrSnmpOrRowStatusTable=vrSnmpOrRowStatusTable, vrSnmpRowStatus=vrSnmpRowStatus, vrSnmpIpStack=vrSnmpIpStack, vrSnmpMibIIStatsStatsEntry=vrSnmpMibIIStatsStatsEntry, vrSnmpComManProvEntry=vrSnmpComManProvEntry, vrSnmpViewComponentName=vrSnmpViewComponentName, vrSnmpViewRowStatus=vrSnmpViewRowStatus, vrSnmpViewIndex=vrSnmpViewIndex, vrSnmpPartyComponentName=vrSnmpPartyComponentName, vrSnmpComManComponentName=vrSnmpComManComponentName, vrSnmpAlarmStatus=vrSnmpAlarmStatus, vrSnmpTrapsProcessed=vrSnmpTrapsProcessed, vrSnmpAclRowStatusTable=vrSnmpAclRowStatusTable, vrSnmpStorageType=vrSnmpStorageType, vrSnmpPartyAuthClock=vrSnmpPartyAuthClock, vrSnmpLastOrChange=vrSnmpLastOrChange, vrSnmpView=vrSnmpView, vrSnmpConIdentityIndex=vrSnmpConIdentityIndex, vrSnmpRowStatusTable=vrSnmpRowStatusTable, vrSnmpUsageState=vrSnmpUsageState, vrSnmpPartyAuthLifetime=vrSnmpPartyAuthLifetime, vrSnmpAclComponentName=vrSnmpAclComponentName, vrSnmpPartyRowStorageType=vrSnmpPartyRowStorageType, vrSnmpComManProvTable=vrSnmpComManProvTable, vrSnmpV1EnableAuthenTraps=vrSnmpV1EnableAuthenTraps, vrSnmpV2StatsBadOperations=vrSnmpV2StatsBadOperations, vrSnmpV1StatsStorageType=vrSnmpV1StatsStorageType, vrSnmpSysComponentName=vrSnmpSysComponentName, vrSnmpSysUpTime=vrSnmpSysUpTime, vrSnmpAclStdRowStatus=vrSnmpAclStdRowStatus, vrSnmpViewStorageType=vrSnmpViewStorageType, vrSnmpAclSubjectIndex=vrSnmpAclSubjectIndex, vrSnmpV2StatsNotInLifetime=vrSnmpV2StatsNotInLifetime, vrSnmpPartyRowStatus=vrSnmpPartyRowStatus, vrSnmpV1StatsBadCommunityNames=vrSnmpV1StatsBadCommunityNames, vrSnmpV1StatsBadCommunityUses=vrSnmpV1StatsBadCommunityUses, vrSnmpViewRowStatusTable=vrSnmpViewRowStatusTable, vrSnmpMibIIStatsOutPackets=vrSnmpMibIIStatsOutPackets, vrSnmpConProvTable=vrSnmpConProvTable, vrSnmpMibIIStatsOutTooBigs=vrSnmpMibIIStatsOutTooBigs, vrSnmpSysIndex=vrSnmpSysIndex, vrSnmpStateEntry=vrSnmpStateEntry, vrSnmpConRowStatus=vrSnmpConRowStatus, baseSnmpCapabilitiesBD=baseSnmpCapabilitiesBD, vrSnmpMibIIStatsInBadCommunityNames=vrSnmpMibIIStatsInBadCommunityNames, vrInitSnmpConfigRowStatusEntry=vrInitSnmpConfigRowStatusEntry, vrSnmpPartyAuthPublic=vrSnmpPartyAuthPublic, vrInitSnmpConfigComponentName=vrInitSnmpConfigComponentName, vrSnmpV2StatsIndex=vrSnmpV2StatsIndex, vrSnmpUnknownStatus=vrSnmpUnknownStatus, vrSnmpPartyProvTable=vrSnmpPartyProvTable, vrSnmpConStorageType=vrSnmpConStorageType, vrSnmpV1Stats=vrSnmpV1Stats, vrSnmpSysRowStatusEntry=vrSnmpSysRowStatusEntry, vrSnmpIndex=vrSnmpIndex, vrSnmpAclRowStatus=vrSnmpAclRowStatus, vrInitSnmpConfigManagerAddress=vrInitSnmpConfigManagerAddress, vrInitSnmpConfigStorageType=vrInitSnmpConfigStorageType, vrSnmpPartyStdIndex=vrSnmpPartyStdIndex, vrSnmpMibIIStatsRowStatus=vrSnmpMibIIStatsRowStatus, vrSnmpMibIIStatsComponentName=vrSnmpMibIIStatsComponentName, vrSnmpStatsTable=vrSnmpStatsTable, vrSnmpV2StatsRowStatus=vrSnmpV2StatsRowStatus, vrSnmpOrIndex=vrSnmpOrIndex, vrSnmpOrId=vrSnmpOrId, baseSnmpCapabilitiesBD01=baseSnmpCapabilitiesBD01, vrSnmpStateTable=vrSnmpStateTable, vrSnmpAdminState=vrSnmpAdminState, vrSnmpPartyStdRowStatus=vrSnmpPartyStdRowStatus, vrSnmpComAccessMode=vrSnmpComAccessMode, vrSnmpMibIIStatsOutBadValues=vrSnmpMibIIStatsOutBadValues, vrInitSnmpConfigProvEntry=vrInitSnmpConfigProvEntry, vrSnmpMibIIStatsInGetNexts=vrSnmpMibIIStatsInGetNexts, vrSnmpMibIIStatsOutGenErrs=vrSnmpMibIIStatsOutGenErrs, vrSnmpOperationalState=vrSnmpOperationalState, vrSnmpComCommunityString=vrSnmpComCommunityString, vrSnmpViewType=vrSnmpViewType, vrSnmpMibIIStatsInPackets=vrSnmpMibIIStatsInPackets, vrSnmpSysRowStatusTable=vrSnmpSysRowStatusTable, vrSnmpOrDescr=vrSnmpOrDescr, vrSnmpComManIndex=vrSnmpComManIndex, vrSnmpComRowStatusEntry=vrSnmpComRowStatusEntry, vrSnmpConStdRowStatus=vrSnmpConStdRowStatus, vrSnmpV1StatsIndex=vrSnmpV1StatsIndex, vrSnmpAclTargetIndex=vrSnmpAclTargetIndex, vrSnmpPartyIdentityIndex=vrSnmpPartyIdentityIndex, vrSnmpMibIIStatsStatsTable=vrSnmpMibIIStatsStatsTable, vrSnmpSysContact=vrSnmpSysContact, vrSnmpPartyOpTable=vrSnmpPartyOpTable, vrSnmpProvEntry=vrSnmpProvEntry, vrSnmpV1StatsStatsTable=vrSnmpV1StatsStatsTable, vrSnmpPartyTrapNumbers=vrSnmpPartyTrapNumbers, vrInitSnmpConfigRowStatusTable=vrInitSnmpConfigRowStatusTable, vrSnmpComManTransportAddress=vrSnmpComManTransportAddress, vrSnmpMibIIStatsRowStatusTable=vrSnmpMibIIStatsRowStatusTable, vrInitSnmpConfigProvTable=vrInitSnmpConfigProvTable, vrSnmpMgrOfLastAuthFailure=vrSnmpMgrOfLastAuthFailure, vrSnmpPartyAuthProtocol=vrSnmpPartyAuthProtocol, vrSnmpAcl=vrSnmpAcl, vrSnmpOrRowStatusEntry=vrSnmpOrRowStatusEntry, vrSnmpV2StatsStorageType=vrSnmpV2StatsStorageType, vrSnmpV2StatsUnknownSrcParties=vrSnmpV2StatsUnknownSrcParties, vrSnmpV2StatsWrongDigestValues=vrSnmpV2StatsWrongDigestValues, vrSnmpPartyOpEntry=vrSnmpPartyOpEntry, vrSnmpMibIIStatsStorageType=vrSnmpMibIIStatsStorageType, vrSnmpAclProvTable=vrSnmpAclProvTable, vrSnmpAclResourcesIndex=vrSnmpAclResourcesIndex, vrSnmpAclStorageType=vrSnmpAclStorageType, vrSnmpMibIIStatsIndex=vrSnmpMibIIStatsIndex, vrSnmpOrRowStatus=vrSnmpOrRowStatus, vrSnmpComponentName=vrSnmpComponentName, vrSnmpOrOrTable=vrSnmpOrOrTable, vrSnmpPartyAuthPrivate=vrSnmpPartyAuthPrivate, vrSnmpCon=vrSnmpCon, vrSnmpPartyTDomain=vrSnmpPartyTDomain, vrSnmpV2StatsUnknownContexts=vrSnmpV2StatsUnknownContexts, vrSnmpConViewIndex=vrSnmpConViewIndex, vrSnmpSysServices=vrSnmpSysServices, vrSnmpPartyTransportAddress=vrSnmpPartyTransportAddress, vrSnmpV1StatsRowStatus=vrSnmpV1StatsRowStatus, vrSnmpComManRowStatusEntry=vrSnmpComManRowStatusEntry, vrSnmpPartyRowStatusTable=vrSnmpPartyRowStatusTable, vrSnmpViewRowStatusEntry=vrSnmpViewRowStatusEntry, vrSnmpOrStorageType=vrSnmpOrStorageType, vrInitSnmpConfigAgentAddress=vrInitSnmpConfigAgentAddress, vrSnmpConLocal=vrSnmpConLocal, vrSnmpConRowStatusTable=vrSnmpConRowStatusTable, vrSnmpComIndex=vrSnmpComIndex, vrSnmpV2Stats=vrSnmpV2Stats, vrSnmpV2StatsSilentDrops=vrSnmpV2StatsSilentDrops, vrSnmpConRowStorageType=vrSnmpConRowStorageType, vrInitSnmpConfigIndex=vrInitSnmpConfigIndex, vrInitSnmpConfig=vrInitSnmpConfig, baseSnmpGroup=baseSnmpGroup, baseSnmpCapabilities=baseSnmpCapabilities, vrSnmpComRowStatus=vrSnmpComRowStatus, vrSnmpViewProvEntry=vrSnmpViewProvEntry, vrSnmpSysRowStatus=vrSnmpSysRowStatus, vrSnmpMibIIStatsOutTraps=vrSnmpMibIIStatsOutTraps, vrSnmpMibIIStatsInAsnParseErrs=vrSnmpMibIIStatsInAsnParseErrs, vrSnmpMibIIStatsOutNoSuchNames=vrSnmpMibIIStatsOutNoSuchNames, vrSnmpMibIIStatsInGetRequests=vrSnmpMibIIStatsInGetRequests, vrSnmpViewSubtreeIndex=vrSnmpViewSubtreeIndex, vrSnmpV1StatsComponentName=vrSnmpV1StatsComponentName, vrSnmpPartyPrivProtocol=vrSnmpPartyPrivProtocol, vrSnmpMibIIStatsInTotalReqVars=vrSnmpMibIIStatsInTotalReqVars, vrSnmpV1StatsRowStatusEntry=vrSnmpV1StatsRowStatusEntry, vrSnmpComManRowStatus=vrSnmpComManRowStatus, vrSnmpAlarmsAsTraps=vrSnmpAlarmsAsTraps, vrSnmpComTDomain=vrSnmpComTDomain, vrSnmp=vrSnmp, vrSnmpPartyStorageType=vrSnmpPartyStorageType, vrSnmpComRowStatusTable=vrSnmpComRowStatusTable, vrSnmpV2EnableAuthenTraps=vrSnmpV2EnableAuthenTraps, vrSnmpConComponentName=vrSnmpConComponentName, vrSnmpMibIIStatsInBadCommunityUses=vrSnmpMibIIStatsInBadCommunityUses, vrSnmpSysLocation=vrSnmpSysLocation, vrSnmpMibIIStatsInBadVersions=vrSnmpMibIIStatsInBadVersions, vrSnmpControlStatus=vrSnmpControlStatus, vrSnmpSysOpTable=vrSnmpSysOpTable, vrSnmpMibIIStats=vrSnmpMibIIStats, vrSnmpTrapsDiscarded=vrSnmpTrapsDiscarded, vrSnmpComViewIndex=vrSnmpComViewIndex, vrSnmpSysProvEntry=vrSnmpSysProvEntry, vrSnmpV2StatsRowStatusTable=vrSnmpV2StatsRowStatusTable, vrSnmpComManPrivileges=vrSnmpComManPrivileges, vrSnmpPartyMaxMessageSize=vrSnmpPartyMaxMessageSize, vrSnmpMibIIStatsOutGetResponses=vrSnmpMibIIStatsOutGetResponses, vrSnmpMibIIStatsInSetRequests=vrSnmpMibIIStatsInSetRequests)
