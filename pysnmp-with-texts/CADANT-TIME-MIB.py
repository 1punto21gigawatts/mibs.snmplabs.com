#
# PySNMP MIB module CADANT-TIME-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CADANT-TIME-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:46:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
cadSystem, = mibBuilder.importSymbols("CADANT-PRODUCTS-MIB", "cadSystem")
CadDouble, = mibBuilder.importSymbols("CADANT-TC", "CadDouble")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Counter64, Gauge32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Unsigned32, Bits, ObjectIdentity, TimeTicks, MibIdentifier, NotificationType, Counter32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter64", "Gauge32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Unsigned32", "Bits", "ObjectIdentity", "TimeTicks", "MibIdentifier", "NotificationType", "Counter32", "IpAddress")
RowStatus, TruthValue, DisplayString, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "DisplayString", "TextualConvention", "DateAndTime")
cadTimeMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4998, 1, 1, 5, 2))
cadTimeMib.setRevisions(('2015-10-19 00:00', '2011-02-07 00:00', '2006-03-07 00:00', '2005-07-26 00:00', '2003-09-11 00:00', '2003-04-29 00:00', '2002-10-28 00:00', '2002-10-23 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cadTimeMib.setRevisionsDescriptions(('Changed the typos in the wording of the description of cadTZAbbrev.', 'Changed the cadNtpSourceMaxPollDefault from 10 to 7 representing a change from 1024 seconds to 128 seconds.', 'Changed the size of cadNtpAuthKeyValue from exact 16 to (1..16) character long.', 'Added cadNtpAuthKeyTable. Removed cadNtpMaster objects.', 'Changed ranged objects from Unsigned32 to Integer32', 'Promoted cadTimeMib from cadExperimental.13 to cadSystem.2', 'Removed manycastPeer(6) value from cadNtpSourceEntryType.', 'created and Temporarily removed all master scalar objects.',))
if mibBuilder.loadTexts: cadTimeMib.setLastUpdated('201510190000Z')
if mibBuilder.loadTexts: cadTimeMib.setOrganization('Arris International, Inc.')
if mibBuilder.loadTexts: cadTimeMib.setContactInfo('Arris Technical Support Postal: ARRIS Phone: +1 770 622 8530 E-Mail: support@arrisi.com')
if mibBuilder.loadTexts: cadTimeMib.setDescription('This MIB contains objects for controlling and reporting on the various Time of Day Services in the Cadant C4 CMTS. These Time of Day services include the TOD protocol, the NTP protocol, and manual configuration.')
cadClock = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 5, 2, 1))
cadTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 5, 2, 1, 1), DisplayString().clone('GMT')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadTimeZone.setStatus('current')
if mibBuilder.loadTexts: cadTimeZone.setDescription('Canonical TZ location name or GMT offset in hours and optionally minutes. Setting this object causes the active TZ and DST rules to change in the local time of day clock.')
cadIsDST = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 5, 2, 1, 2), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIsDST.setStatus('current')
if mibBuilder.loadTexts: cadIsDST.setDescription('If true, then cadLocalDateAndTime is in Daylight Savings Time mode. If false, then cadLocalDateAndTime is expressed in standard time.')
cadTZAbbrev = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 5, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadTZAbbrev.setStatus('current')
if mibBuilder.loadTexts: cadTZAbbrev.setDescription('Current TZ abbreviation based on either the TZ rules or a GMT offset, e.g. CST, CDT, GMT+2, GMT-3:30, GMT')
cadLocalDateAndTime = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 5, 2, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadLocalDateAndTime.setStatus('current')
if mibBuilder.loadTexts: cadLocalDateAndTime.setDescription('CMTS local date and time displayed as yyyy-mm-dd,hh:mm:ss.d,+/-hh:mm, where the date is yyyy-mmmm-dd and time in deci-seconds is hh:mm:ss.d, adn teh current offset from GMT is +/-hh:mm. This object is adjusted by teh TZ and DST rules. E.g. 2002-5-26,13;30:15.0,-4:0')
cadLocalTime = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 5, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadLocalTime.setStatus('current')
if mibBuilder.loadTexts: cadLocalTime.setDescription('CMTS local date and time displayed as a 32-bit number of seconds since teh epoch Jan. 1, 1970. This object is adjusted by the current TZ and DST rules.')
cadUTCtime = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 5, 2, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadUTCtime.setStatus('current')
if mibBuilder.loadTexts: cadUTCtime.setDescription('UTC (GMT) time mainted by the CMTS local time of day clock represented as a 32-bit number of seconds since the epoch Jan. 1, 1970. If NetTimeSyncProto is TOD(1) or NTP(2) then this value is maintained by the network time sync protocol and any attempt to change this object is ignored. If NetTimeSyncProto is None(0), then the local time of day clock may be set manually via this object.')
cadNetTimeSyncProto = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("tod", 1), ("ntp", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadNetTimeSyncProto.setStatus('current')
if mibBuilder.loadTexts: cadNetTimeSyncProto.setDescription('Active network time synchronization protocol to be used by this managed device.')
cadTod = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 5, 2, 2))
cadTodServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 5, 2, 2, 1), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadTodServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: cadTodServerIpAddress.setDescription('If cadNetTimeSyncProto is tod(1), then this object is used as to provide the IPv4 address of the network TOD server.')
cadTodServerConnType = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 5, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2))).clone('udp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadTodServerConnType.setStatus('current')
if mibBuilder.loadTexts: cadTodServerConnType.setDescription('If cadNetTimeSyncProto is tod(1), then this object is used as to provide the connection type for communitcating with the server specified in cadTodServerIpAddress.')
cadNtp = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 5, 2, 3))
cadNtpVersionDefault = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 5, 2, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadNtpVersionDefault.setStatus('current')
if mibBuilder.loadTexts: cadNtpVersionDefault.setDescription('Default NTP version used when sending messages to NTP clients, servers, or peers.')
cadNtpAuthenticate = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 5, 2, 3, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadNtpAuthenticate.setStatus('current')
if mibBuilder.loadTexts: cadNtpAuthenticate.setDescription('If set to true(1), then all NTP operations will require authentication keys. Otherwise, if false(2), then NTP authentication is not required.')
cadNtpClockDrift = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 5, 2, 3, 3), CadDouble()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadNtpClockDrift.setStatus('current')
if mibBuilder.loadTexts: cadNtpClockDrift.setDescription('The latest SCM local clock drift value. This value is used when restarting the NTP daemon process.')
cadNtpSource = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 5, 2, 3, 10))
cadNtpSourceMinPollDefault = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 5, 2, 3, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 11)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadNtpSourceMinPollDefault.setStatus('current')
if mibBuilder.loadTexts: cadNtpSourceMinPollDefault.setDescription('Default minimum polling interval for NTP clients and peers. This object is expressed is powers of 2 seconds in the range of 4 through 11, for an effective minimum polling interval of between 16 and 2048 seconds. This object may not be set to a value greater than cadNtpSourceMaxPollDefault. The value in this object is ignored if cadNtpSourceMinPoll is non-zero.')
cadNtpSourceMaxPollDefault = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 5, 2, 3, 10, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 11)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadNtpSourceMaxPollDefault.setStatus('current')
if mibBuilder.loadTexts: cadNtpSourceMaxPollDefault.setDescription('Default maximum polling interval for NTP clients and peers. This object is expressed is powers of 2 seconds in the range of 4 through 11, for an effective minimum polling interval of between 16 and 2048 seconds. This object may not be set to a value less than cadNtpSourceMinPollDefault. The value in this object is ignored if cadNtpSourceMaxPoll is non-zero.')
cadNtpSourceTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 5, 2, 3, 10, 10), )
if mibBuilder.loadTexts: cadNtpSourceTable.setStatus('current')
if mibBuilder.loadTexts: cadNtpSourceTable.setDescription('Configuration and display table for NTP servers and/or peers.')
cadNtpSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 5, 2, 3, 10, 10, 1), ).setIndexNames((0, "CADANT-TIME-MIB", "cadNtpSourceIpAddress"))
if mibBuilder.loadTexts: cadNtpSourceEntry.setStatus('current')
if mibBuilder.loadTexts: cadNtpSourceEntry.setDescription('Each entry represents an association this device has with an NTP server or peer.')
cadNtpSourceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 5, 2, 3, 10, 10, 1, 1), IpAddress())
if mibBuilder.loadTexts: cadNtpSourceIpAddress.setStatus('current')
if mibBuilder.loadTexts: cadNtpSourceIpAddress.setDescription('The IPv4 address associated with this NTP server or peer.')
cadNtpSourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 5, 2, 3, 10, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unicastServer", 1), ("broadcastServer", 2), ("multicastServer", 3), ("manycastServer", 4), ("unicastPeer", 5), ("manycastPeer", 6))).clone('unicastServer')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadNtpSourceType.setStatus('current')
if mibBuilder.loadTexts: cadNtpSourceType.setDescription('This table may only contain entries of one type. Attempts to create additional rows which have a cadNtpSourceType different from the other rows will fail.')
cadNtpSourceBurstEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 5, 2, 3, 10, 10, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadNtpSourceBurstEnabled.setStatus('current')
if mibBuilder.loadTexts: cadNtpSourceBurstEnabled.setDescription('If set to true(1), then burst mode is enabled. If set to false(2), then burst mode is disabled.')
cadNtpSourcePreferred = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 5, 2, 3, 10, 10, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadNtpSourcePreferred.setStatus('current')
if mibBuilder.loadTexts: cadNtpSourcePreferred.setDescription('If set to true(1), then this NTP server or peer entry is a preferred server or peer and will be considered before other non-preferred servers or peers, even if those other servers or peers have a better/lower Stratum value.')
cadNtpSourceAuthKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 5, 2, 3, 10, 10, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadNtpSourceAuthKeyId.setStatus('current')
if mibBuilder.loadTexts: cadNtpSourceAuthKeyId.setDescription('The id-id of the MD5 authentication key-string as stored in the cadNtpAuthKeyTable. A value of 0 for this object denotes that no authentication is to be used for communication.')
cadNtpSourceMinPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 5, 2, 3, 10, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4, 11), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadNtpSourceMinPoll.setStatus('current')
if mibBuilder.loadTexts: cadNtpSourceMinPoll.setDescription('If non-zero, this will override cadNtpMinPoll. See the DESCRIPTION of cadNtpMinPoll for more details.')
cadNtpSourceMaxPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 5, 2, 3, 10, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(4, 11), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadNtpSourceMaxPoll.setStatus('current')
if mibBuilder.loadTexts: cadNtpSourceMaxPoll.setDescription('If non-zero, this will override cadNtpMaxPoll. See the DESCRIPTION of cadNtpMaxPoll for more details.')
cadNtpSourceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 5, 2, 3, 10, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 4), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadNtpSourceVersion.setStatus('current')
if mibBuilder.loadTexts: cadNtpSourceVersion.setDescription('The version of NTP used when sending messages to this server or peer. Setting this to 2, 3, or 4 will override the cadNtpVersion default value. Setting this object to 0 will cause the value in cadNtpVersion to be used for this server or peer.')
cadNtpSourceTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 5, 2, 3, 10, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadNtpSourceTtl.setStatus('current')
if mibBuilder.loadTexts: cadNtpSourceTtl.setDescription('The Time-To-Live (TTL) value used in the IP header when trying to locate nearby members of its manycast group. This object is only applicable for rows which have a cadNtpSourceType value of either manycastServer(4) or manycastPeer(6).')
cadNtpSourceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 5, 2, 3, 10, 10, 1, 10), RowStatus().clone('createAndGo')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadNtpSourceRowStatus.setStatus('current')
if mibBuilder.loadTexts: cadNtpSourceRowStatus.setDescription('Control object for this row. The only values supported by the C4 CMTS are active(1), createAndGo(4), and destroy(6). Setting this object to createAndGo(4) will cause the row to be created. Reading this object should always return active(1). Setting this object to destroy(6) will remove the row from the C4 CMTS.')
cadNtpAuthKeyTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 5, 2, 3, 30), )
if mibBuilder.loadTexts: cadNtpAuthKeyTable.setStatus('current')
if mibBuilder.loadTexts: cadNtpAuthKeyTable.setDescription('Table for provisioning NTP authentication keys')
cadNtpAuthKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 5, 2, 3, 30, 1), ).setIndexNames((0, "CADANT-TIME-MIB", "cadNtpAuthKeyId"))
if mibBuilder.loadTexts: cadNtpAuthKeyEntry.setStatus('current')
if mibBuilder.loadTexts: cadNtpAuthKeyEntry.setDescription('Each entry represents an NTP authentication key.')
cadNtpAuthKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 5, 2, 3, 30, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534)))
if mibBuilder.loadTexts: cadNtpAuthKeyId.setStatus('current')
if mibBuilder.loadTexts: cadNtpAuthKeyId.setDescription('The ID of this NTP authentication key')
cadNtpAuthKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 5, 2, 3, 30, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("md5", 1))).clone('md5')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadNtpAuthKeyType.setStatus('current')
if mibBuilder.loadTexts: cadNtpAuthKeyType.setDescription('The type of key this row represents. Future versions may support more authentication algorithms than MD5.')
cadNtpAuthKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 5, 2, 3, 30, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadNtpAuthKeyValue.setStatus('current')
if mibBuilder.loadTexts: cadNtpAuthKeyValue.setDescription('The ASCII value of this key')
cadNtpAuthKeyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 5, 2, 3, 30, 1, 4), RowStatus().clone('createAndGo')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadNtpAuthKeyRowStatus.setStatus('current')
if mibBuilder.loadTexts: cadNtpAuthKeyRowStatus.setDescription('Control object for this row')
mibBuilder.exportSymbols("CADANT-TIME-MIB", cadNtpAuthKeyTable=cadNtpAuthKeyTable, cadNtpSourceEntry=cadNtpSourceEntry, cadNtpSource=cadNtpSource, cadNtpClockDrift=cadNtpClockDrift, cadNtpAuthenticate=cadNtpAuthenticate, cadNtpSourceType=cadNtpSourceType, cadNtpSourceMaxPoll=cadNtpSourceMaxPoll, cadNtpSourceRowStatus=cadNtpSourceRowStatus, cadNtpAuthKeyRowStatus=cadNtpAuthKeyRowStatus, cadLocalDateAndTime=cadLocalDateAndTime, cadTZAbbrev=cadTZAbbrev, cadNtpSourceAuthKeyId=cadNtpSourceAuthKeyId, cadNtpVersionDefault=cadNtpVersionDefault, cadTodServerIpAddress=cadTodServerIpAddress, cadTodServerConnType=cadTodServerConnType, cadTimeMib=cadTimeMib, cadNetTimeSyncProto=cadNetTimeSyncProto, cadNtp=cadNtp, cadClock=cadClock, cadNtpSourceVersion=cadNtpSourceVersion, cadTimeZone=cadTimeZone, cadNtpSourceMinPoll=cadNtpSourceMinPoll, cadNtpSourceMinPollDefault=cadNtpSourceMinPollDefault, cadIsDST=cadIsDST, cadNtpAuthKeyValue=cadNtpAuthKeyValue, cadNtpAuthKeyType=cadNtpAuthKeyType, cadLocalTime=cadLocalTime, cadNtpSourceMaxPollDefault=cadNtpSourceMaxPollDefault, cadNtpAuthKeyId=cadNtpAuthKeyId, cadUTCtime=cadUTCtime, cadTod=cadTod, cadNtpAuthKeyEntry=cadNtpAuthKeyEntry, cadNtpSourceTable=cadNtpSourceTable, PYSNMP_MODULE_ID=cadTimeMib, cadNtpSourceIpAddress=cadNtpSourceIpAddress, cadNtpSourcePreferred=cadNtpSourcePreferred, cadNtpSourceTtl=cadNtpSourceTtl, cadNtpSourceBurstEnabled=cadNtpSourceBurstEnabled)
