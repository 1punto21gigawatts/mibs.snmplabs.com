#
# PySNMP MIB module TIMETRA-MSDP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TIMETRA-MSDP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:19:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
InetAddress, InetAddressPrefixLength, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressPrefixLength", "InetAddressType")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Unsigned32, TimeTicks, ObjectIdentity, Integer32, NotificationType, iso, ModuleIdentity, Counter32, Counter64, MibIdentifier, IpAddress, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Unsigned32", "TimeTicks", "ObjectIdentity", "Integer32", "NotificationType", "iso", "ModuleIdentity", "Counter32", "Counter64", "MibIdentifier", "IpAddress", "Gauge32")
TimeStamp, TextualConvention, RowStatus, TimeInterval, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TextualConvention", "RowStatus", "TimeInterval", "DisplayString", "TruthValue")
tmnxSRNotifyPrefix, tmnxSRConfs, timetraSRMIBModules, tmnxSRObjs = mibBuilder.importSymbols("TIMETRA-GLOBAL-MIB", "tmnxSRNotifyPrefix", "tmnxSRConfs", "timetraSRMIBModules", "tmnxSRObjs")
TmnxAdminState, TNamedItemOrEmpty, TNamedItem, TPolicyStatementNameOrEmpty = mibBuilder.importSymbols("TIMETRA-TC-MIB", "TmnxAdminState", "TNamedItemOrEmpty", "TNamedItem", "TPolicyStatementNameOrEmpty")
timetraMsdpMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 43))
timetraMsdpMIBModule.setRevisions(('2011-08-01 00:00', '1909-02-28 00:00', '2006-08-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: timetraMsdpMIBModule.setRevisionsDescriptions(('Rev 10.0 1 Aug 2011 00:00 10.0 release of the TIMETRA-MSDP-MIB.', 'Rev 7.0 28 Feb 2009 00:00 7.0 release of the TIMETRA-MSDP-MIB.', 'Rev 0.1 1 Aug 2006 00:00 Initial version of the TIMETRA-MSDP-MIB.',))
if mibBuilder.loadTexts: timetraMsdpMIBModule.setLastUpdated('201108010000Z')
if mibBuilder.loadTexts: timetraMsdpMIBModule.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: timetraMsdpMIBModule.setContactInfo('Alcatel-Lucent SROS Support Web: http://support.alcatel-lucent.com')
if mibBuilder.loadTexts: timetraMsdpMIBModule.setDescription("This is the SNMP MIB module to manage and provision MSDP protocol on Alcatel SROS equipment. The Multicast Source Discovery Protocol (MSDP) is used to connect multicast routing domains. It typically runs on the same router as the Protocol Independent Multicast (PIM) sparse-mode rendezvous point (RP). Each MSDP router establishes adjacencies with internal and external MSDP peers similar to the Border Gateway Protocol (BGP). These peer routers inform each other about active sources within the domain. When they detect active sources, the routers can send PIM sparse-mode explicit join messages to the active source. Copyright 2006-2011 Alcatel-Lucent. All rights reserved. Reproduction of this document is authorized on the condition that the foregoing copyright notice is included. This SNMP MIB module (Specification) embodies Alcatel-Lucent's proprietary intellectual property. Alcatel-Lucent retains all title and ownership in the Specification, including any revisions. Alcatel-Lucent grants all interested parties a non-exclusive license to use and distribute an unmodified copy of this Specification in connection with management of Alcatel-Lucent products, and without fee, provided this copyright notice and license appear on all copies. This Specification is supplied 'as is', and Alcatel-Lucent makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
tmnxMsdpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43))
tmnxMsdpGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 1))
tmnxMsdpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 43))
tmnxMsdpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 43, 1))
tmnxMsdpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 43, 2))
tmnxMsdpNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 43))
tmnxMsdpNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 43, 0))
tmnxMsdpMaxActiveSources = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 1000000), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpMaxActiveSources.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpMaxActiveSources.setDescription("The value of tmnxMsdpMaxActiveSources specifies the maximum number of source active messages that will be accepted by MSDP. This effectively controls the number of source active messages that can be stored on the system. By default, no limit is placed on the number of source active messages and this is specified by the value '-1'. A value of 0 means that no source active messages will be accepted.")
tmnxMsdpMsgRcvRate = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(10, 10000), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpMsgRcvRate.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpMsgRcvRate.setDescription('The value of tmnxMsdpMsgRcvRate specifies the number of MSDP messages (including source active messages) that are read from the TCP session per tmnxMsdpMsgRcvRateTime seconds. By default, no MSDP messages are read from the TCP session and this is specified by the value 0. Once the number of MSDP packets defined in tmnxMsdpMsgRcvRateThd have been processed the rate of all other MSDP packets is rate limited by no longer accepting messages from the TCP session until tmnxMsdpMsgRcvRateTime seconds have elapsed.')
tmnxMsdpMsgRcvRateTime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 600), ))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpMsgRcvRateTime.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpMsgRcvRateTime.setDescription('The value of tmnxMsdpMsgRcvRateTime specifies the time in seconds that together with tmnxMsdpMsgRcvRate defines the number of MSDP messages (including source active messages) that are read from the TCP session within the configured number of seconds. By default, no MSDP messages are read from the TCP session and this is specified by the value 0. Once the number of MSDP packets defined in tmnxMsdpMsgRcvRateThd have been processed the rate of all other MSDP packets is rate limited by no longer accepting messages from the TCP session until tmnxMsdpMsgRcvRateTime seconds have elapsed.')
tmnxMsdpMsgRcvRateThd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 1, 4), Gauge32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1000000), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpMsgRcvRateThd.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpMsgRcvRateThd.setDescription('The value of tmnxMsdpMsgRcvRateThd specifies the number of MSDP messages that can be processed before tmnxMsdpMsgRcvRate is set. This is useful during system startup and initialization. By default, no MSDP messages are read from the TCP session and this is specified by the value 0. Once the number of MSDP packets defined in tmnxMsdpMsgRcvRateThd have been processed the rate of all other MSDP packets is rate limited by no longer accepting messages from the TCP session until tmnxMsdpMsgRcvRateTime seconds have elapsed.')
tmnxMsdpDataEncapsulation = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 1, 5), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpDataEncapsulation.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpDataEncapsulation.setDescription('The value of tmnxMsdpDataEncapsulation is used to configure a rendezvous point (RP) using MSDP to encapsulate multicast data received in MSDP register messages inside forwarded MSDP source-active messages. By default data encapsulation is enabled.')
tmnxMsdpAdminState = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 1, 6), TmnxAdminState().clone('inService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpAdminState.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpAdminState.setDescription("The value of tmnxMsdpAdminState specifies the desired administrative state for MSDP. When MSDP is 'outOfService' the operational state of MSDP as well as the operational state of other entities under it, like peer or peer group is also disabled. By default, state of MSDP is 'inService'.")
tmnxMsdpExportPolicy1 = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 1, 7), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpExportPolicy1.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpExportPolicy1.setDescription('The value of tmnxMsdpExportPolicy1 specifies the export policy to export Source Active (SA) state from the SA list into MSDP. A maximum of five policy names can be specified. tmnxMsdpExportPolicy1 specifies policy number 1 at the protocol level. By default no export policies are applied and all SA entries are announced.')
tmnxMsdpExportPolicy2 = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 1, 8), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpExportPolicy2.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpExportPolicy2.setDescription('The value of tmnxMsdpExportPolicy2 specifies the export policy to export Source Active (SA) state from the SA list into MSDP. tmnxMsdpExportPolicy2 specifies policy number 2 at the protocol level. By default no export policies are applied and all SA entries are announced.')
tmnxMsdpExportPolicy3 = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 1, 9), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpExportPolicy3.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpExportPolicy3.setDescription('The value of tmnxMsdpExportPolicy3 specifies the export policy to export Source Active (SA) state from the SA list into MSDP. tmnxMsdpExportPolicy3 specifies policy number 3 at the protocol level. By default no export policies are applied and all SA entries are announced.')
tmnxMsdpExportPolicy4 = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 1, 10), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpExportPolicy4.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpExportPolicy4.setDescription('The value of tmnxMsdpExportPolicy4 specifies the export policy to export Source Active (SA) state from the SA list into MSDP. tmnxMsdpExportPolicy4 specifies policy number 4 at the protocol level. By default no export policies are applied and all SA entries are announced.')
tmnxMsdpExportPolicy5 = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 1, 11), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpExportPolicy5.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpExportPolicy5.setDescription('The value of tmnxMsdpExportPolicy5 specifies the export policy to export Source Active (SA) state from the SA list into MSDP. tmnxMsdpExportPolicy1 specifies policy number 5 at the protocol level. By default no export policies are applied and all SA entries are announced.')
tmnxMsdpImportPolicy1 = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 1, 12), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpImportPolicy1.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpImportPolicy1.setDescription('The value of tmnxMsdpImportPolicy1 specifies the import policy to import Source Active (SA) state from the SA list into MSDP. A maximum of five policy names can be specified. tmnxMsdpImportPolicy1 specifies policy number 1 at the protocol level. By default no import policies are applied and all SA entries are announced.')
tmnxMsdpImportPolicy2 = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 1, 13), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpImportPolicy2.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpImportPolicy2.setDescription('The value of tmnxMsdpImportPolicy2 specifies the import policy to import Source Active (SA) state from the SA list into MSDP. tmnxMsdpImportPolicy2 specifies policy number 2 at the protocol level. By default no import policies are applied and all SA entries are announced.')
tmnxMsdpImportPolicy3 = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 1, 14), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpImportPolicy3.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpImportPolicy3.setDescription('The value of tmnxMsdpImportPolicy3 specifies the import policy to import Source Active (SA) state from the SA list into MSDP. tmnxMsdpImportPolicy3 specifies policy number 3 at the protocol level. By default no import policies are applied and all SA entries are announced.')
tmnxMsdpImportPolicy4 = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 1, 15), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpImportPolicy4.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpImportPolicy4.setDescription('The value of tmnxMsdpImportPolicy4 specifies the import policy to import Source Active (SA) state from the SA list into MSDP. tmnxMsdpImportPolicy4 specifies policy number 4 at the protocol level. By default no import policies are applied and all SA entries are announced.')
tmnxMsdpImportPolicy5 = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 1, 16), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpImportPolicy5.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpImportPolicy5.setDescription('The value of tmnxMsdpImportPolicy5 specifies the import policy to import Source Active (SA) state from the SA list into MSDP. tmnxMsdpImportPolicy5 specifies policy number 5 at the protocol level. By default no import policies are applied and all SA entries are announced.')
tmnxMsdpLocalAddressType = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 1, 17), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpLocalAddressType.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpLocalAddressType.setDescription('The value of tmnxMsdpLocalAddressType indicates the type of tmnxMsdpLocalAddress.')
tmnxMsdpLocalAddress = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 1, 18), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpLocalAddress.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpLocalAddress.setDescription('The value of tmnxMsdpLocalAddress is used to configure the local end of a MSDP session. In order for MSDP to function at least one peer must be configured. When configuring a peer, the local end of the MSDP session must be configured. This address is used to validate incoming connections to the peer and to establish connections to the remote peer. By default no local address is configured.')
tmnxMsdpStatusPeerCount = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpStatusPeerCount.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpStatusPeerCount.setDescription('The value of tmnxMsdpStatusPeerCount indicates the number of configured peers.')
tmnxMsdpStatusPeersEstablished = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpStatusPeersEstablished.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpStatusPeersEstablished.setDescription('The value of tmnxMsdpStatusPeersEstablished indicates the number of peers in established state')
tmnxMsdpStatusSACount = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpStatusSACount.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpStatusSACount.setDescription('The value of tmnxMsdpStatusSACount indicates the number of source active configured in cache. ')
tmnxMsdpStatusLastTimeUp = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 1, 22), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpStatusLastTimeUp.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpStatusLastTimeUp.setDescription('The value of tmnxMsdpStatusLastTimeUp indicates the last time the protocol was enabled.')
tmnxMsdpStatusActSrcLimExceeded = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpStatusActSrcLimExceeded.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpStatusActSrcLimExceeded.setDescription('The value of tmnxMsdpStatusActSrcLimExceeded indicates the number of times the global active source limit has been exceeded')
tmnxMsdpRpfLookupSequence = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("mucastRouteTable", 0), ("ucastRouteTable", 1), ("both", 2))).clone('ucastRouteTable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpRpfLookupSequence.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpRpfLookupSequence.setDescription("tmnxMsdpRpfLookupSequence is used to configure the sequence of route tables that MSDP uses for finding a Reverse Path Forwarding(RPF) interface for a particular multicast route. 'mucastRouteTable' is the unicast route table to be used only by multicast protocols(MSDP) which will contain routes submitted by multi-protocol BGP, ISIS and OSPF. 'ucastRouteTable' is the regular unicast route table which will contain routes submitted by all the unicast routing protocols. By default, only the 'ucastRouteTable' is looked up by MSDP for calculating RPF interface towards the source/rendezvous point. However the operator can specify the following: a) Use unicast route table only b) Use multicast unicast route table only or c) Use both the route tables. In case of (c), MSDP will always lookup first in the 'mucastRouteTable' and if there is a route, it will use it. If MSDP does not find a route in the first lookup, it will try to find it in the 'ucastRouteTable'.")
tmnxMsdpSACacheLifetime = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(90, 600)).clone(90)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxMsdpSACacheLifetime.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpSACacheLifetime.setDescription('The value of tmnxMsdpSACacheLifetime specifies lifetime given to SA cache entries in seconds when created or refreshed. This object does not measure time per se; instead, it is the delta from the time at which an SA message is received at which it should be expired if not refreshed. (i.e., it is the value of tmnxMsdpSrcActiveExpiryTime immediately after receiving an SA message applying to that row.)')
tmnxMsdpSARejectExportPolicy = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpSARejectExportPolicy.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpSARejectExportPolicy.setDescription('The value of tmnxMsdpSARejectExportPolicy indicates number of SA messages that were not sent due to export policy.')
tmnxMsdpSARejectImportPolicy = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpSARejectImportPolicy.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpSARejectImportPolicy.setDescription('The value of tmnxMsdpSARejectImportPolicy indicates number of SA messages that were rejected due to import policy.')
tmnxMsdpPeerTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 2), )
if mibBuilder.loadTexts: tmnxMsdpPeerTable.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerTable.setDescription('The tmnxMsdpPeerTable table provides information on the properties of a MSDP peer.')
tmnxMsdpPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 2, 1), ).setIndexNames((0, "TIMETRA-MSDP-MIB", "tmnxMsdpPeerAddressType"), (0, "TIMETRA-MSDP-MIB", "tmnxMsdpPeerAddress"))
if mibBuilder.loadTexts: tmnxMsdpPeerEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerEntry.setDescription('tmnxMsdpPeerEntry represents a row entry in tmnxMsdpPeerTable for a MSDP peer. Entries can be created and deleted via SNMP SET operations through tmnxMsdpPeerRowStatus. ')
tmnxMsdpPeerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: tmnxMsdpPeerAddressType.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerAddressType.setDescription('The value of tmnxMsdpPeerAddressType indicates the type of tmnxMsdpPeerAddress.')
tmnxMsdpPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 2, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: tmnxMsdpPeerAddress.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerAddress.setDescription('The value of tmnxMsdpPeerAddress indicates the address of the MSDP peer.')
tmnxMsdpPeerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerRowStatus.setDescription('tmnxMsdpPeerRowStatus is the object used for creating and deleting row entries in this table.')
tmnxMsdpPeerMaxActiveSources = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 1000000), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerMaxActiveSources.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerMaxActiveSources.setDescription("The value of tmnxMsdpPeerMaxActiveSources specifies the maximum number of source active messages that will be accepted by MSDP. This effectively controls the number of active sources that can be stored on the system. By default, no limit is placed on the number of source active messages and this is specified by the value '-1'. A value of 0 means that no source active messages will be accepted.")
tmnxMsdpPeerMsgRcvRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(10, 10000), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerMsgRcvRate.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerMsgRcvRate.setDescription('The value of tmnxMsdpPeerMsgRcvRate specifies the number of MSDP messages (including source active messages) that are read from the TCP session per tmnxMsdpPeerMsgRcvRateTime seconds. By default, no MSDP messages are read from the TCP session and this is specified by the value 0. Once the number of MSDP packets defined in tmnxMsdpPeerMsgRcvRateThd have been processed the rate of all other MSDP packets is rate limited by no longer accepting messages from the TCP session until tmnxMsdpPeerMsgRcvRateTime seconds have elapsed.')
tmnxMsdpPeerMsgRcvRateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 600), ))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerMsgRcvRateTime.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerMsgRcvRateTime.setDescription('The value of tmnxMsdpPeerMsgRcvRateTime specifies the time in seconds that together with tmnxMsdpPeerMsgRcvRate defines the number of MSDP messages (including source active messages) that are read from the TCP session within the configured number of seconds. By default, no MSDP messages are read from the TCP session and this is specified by the value 0. Once the number of MSDP packets defined in tmnxMsdpPeerMsgRcvRateThd have been processed the rate of all other MSDP packets is rate limited by no longer accepting messages from the TCP session until tmnxMsdpPeerMsgRcvRateTime seconds have elapsed.')
tmnxMsdpPeerMsgRcvRateThd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 2, 1, 7), Gauge32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1000000), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerMsgRcvRateThd.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerMsgRcvRateThd.setDescription('The value of tmnxMsdpPeerMsgRcvRateThd specifies the number of MSDP messages that can be processed before tmnxMsdpPeerMsgRcvRate is set. This is useful during system startup and initialization. By default, no MSDP messages are read from the TCP session and this is specified by the value 0. Once the number of MSDP packets defined in tmnxMsdpPeerMsgRcvRateThd have been processed the rate of all other MSDP packets is rate limited by no longer accepting messages from the TCP session until tmnxMsdpPeerMsgRcvRateTime seconds have elapsed.')
tmnxMsdpPeerAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerAuthKey.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerAuthKey.setDescription('The value of tmnxMsdpPeerAuthKey specifies the authentication key to be used for a specific MSDP peering session. Authentication is done using the MD-5 message based digest protocol. Authentication cannot be configured globally and can be applied per peer only. The authentication key can be any combination of letters or numbers. Note that the string may contain embedded nulls. By default, all MSDP messages are accepted and the MD5 signature option authentication key is disabled')
tmnxMsdpPeerAuthKeyEncrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 2, 1, 9), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerAuthKeyEncrypted.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerAuthKeyEncrypted.setDescription("When the value of tmnxMsdpPeerAuthKeyEncrypted is 'true', the password specified by tmnxMsdpPeerAuthKey is in the encrypted form. When the value of tmnxMsdpPeerAuthKeyEncrypted is 'false', the password specified by tmnxMsdpPeerAuthKey is in plain text. tmnxMsdpPeerAuthKey and tmnxMsdpPeerAuthKeyEncrypted, which indicates whether or not the password string is encrypted, must be set together in the same SNMP request PDU or else the set request will fail with an inconsistentValue error.")
tmnxMsdpPeerDefaultPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 2, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerDefaultPeer.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerDefaultPeer.setDescription('The value of tmnxMsdpPeerDefaultPeer is used to configure a peer as the default Msdp peer due to which all source-active messages from the peer will be accepted without the usual peer-reverse-path-forwarding (RPF) check.')
tmnxMsdpPeerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 2, 1, 11), TmnxAdminState().clone('inService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerAdminState.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerAdminState.setDescription("The value of tmnxMsdpPeerAdminState specifies the desired administrative state for a MSDP peer. When a MSDP peer is 'outOfService' the operational state of MSDP as well as the operational state of other entities under it, like peer group is also disabled. By default, the state of a MSDP peer is 'inService'.")
tmnxMsdpPeerExportPolicy1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 2, 1, 12), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerExportPolicy1.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerExportPolicy1.setDescription('The value of tmnxMsdpPeerExportPolicy1 specifies the export policy to export Source Active (SA) state from the SA list into MSDP. A maximum of five policy names can be specified. tmnxMsdpPeerExportPolicy1 specifies policy number 1 at the protocol level. By default no export policies are applied and all SA entries are announced.')
tmnxMsdpPeerExportPolicy2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 2, 1, 13), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerExportPolicy2.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerExportPolicy2.setDescription('The value of tmnxMsdpPeerExportPolicy2 specifies the export policy to export Source Active (SA) state from the SA list into MSDP. tmnxMsdpPeerExportPolicy2 specifies policy number 2 at the protocol level. By default no export policies are applied and all SA entries are announced.')
tmnxMsdpPeerExportPolicy3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 2, 1, 14), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerExportPolicy3.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerExportPolicy3.setDescription('The value of tmnxMsdpPeerExportPolicy3 specifies the export policy to export Source Active (SA) state from the SA list into MSDP. tmnxMsdpPeerExportPolicy3 specifies policy number 3 at the protocol level. By default no export policies are applied and all SA entries are announced.')
tmnxMsdpPeerExportPolicy4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 2, 1, 15), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerExportPolicy4.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerExportPolicy4.setDescription('The value of tmnxMsdpPeerExportPolicy4 specifies the export policy to export Source Active (SA) state from the SA list into MSDP. tmnxMsdpPeerExportPolicy4 specifies policy number 4 at the protocol level. By default no export policies are applied and all SA entries are announced.')
tmnxMsdpPeerExportPolicy5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 2, 1, 16), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerExportPolicy5.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerExportPolicy5.setDescription('The value of tmnxMsdpPeerExportPolicy5 specifies the export policy to export Source Active (SA) state from the SA list into MSDP. tmnxMsdpPeerExportPolicy1 specifies policy number 5 at the protocol level. By default no export policies are applied and all SA entries are announced.')
tmnxMsdpPeerImportPolicy1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 2, 1, 17), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerImportPolicy1.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerImportPolicy1.setDescription('The value of tmnxMsdpPeerImportPolicy1 specifies the import policy to import Source Active (SA) state from the SA list into MSDP. A maximum of five policy names can be specified. tmnxMsdpPeerImportPolicy1 specifies policy number 1 at the protocol level. By default no import policies are applied and all SA entries are announced.')
tmnxMsdpPeerImportPolicy2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 2, 1, 18), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerImportPolicy2.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerImportPolicy2.setDescription('The value of tmnxMsdpPeerImportPolicy2 specifies the import policy to import Source Active (SA) state from the SA list into MSDP. tmnxMsdpPeerImportPolicy2 specifies policy number 2 at the protocol level. By default no import policies are applied and all SA entries are announced.')
tmnxMsdpPeerImportPolicy3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 2, 1, 19), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerImportPolicy3.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerImportPolicy3.setDescription('The value of tmnxMsdpPeerImportPolicy3 specifies the import policy to import Source Active (SA) state from the SA list into MSDP. tmnxMsdpPeerImportPolicy3 specifies policy number 3 at the protocol level. By default no import policies are applied and all SA entries are announced.')
tmnxMsdpPeerImportPolicy4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 2, 1, 20), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerImportPolicy4.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerImportPolicy4.setDescription('The value of tmnxMsdpPeerImportPolicy4 specifies the import policy to import Source Active (SA) state from the SA list into MSDP. tmnxMsdpPeerImportPolicy4 specifies policy number 4 at the protocol level. By default no import policies are applied and all SA entries are announced.')
tmnxMsdpPeerImportPolicy5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 2, 1, 21), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerImportPolicy5.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerImportPolicy5.setDescription('The value of tmnxMsdpPeerImportPolicy5 specifies the import policy to import Source Active (SA) state from the SA list into MSDP. tmnxMsdpPeerImportPolicy5 specifies policy number 5 at the protocol level. By default no import policies are applied and all SA entries are announced.')
tmnxMsdpPeerLocalAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 2, 1, 22), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerLocalAddressType.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerLocalAddressType.setDescription('The value of tmnxMsdpPeerLocalAddressType is used to configure the type of tmnxMsdpPeerLocalAddress.')
tmnxMsdpPeerLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 2, 1, 23), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerLocalAddress.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerLocalAddress.setDescription('The value of tmnxMsdpPeerLocalAddress is used to configure the local end of a MSDP session. In order for MSDP to function at least one peer must be configured. When configuring a peer, the local end of the MSDP session must be configured. This address is used to validate incoming connections to the peer and to establish connections to the remote peer. By default no local address is configured.')
tmnxMsdpPeerState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("listen", 0), ("established", 1), ("inactive", 2), ("disabled", 3), ("connecting", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpPeerState.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerState.setDescription('The value of tmnxMsdpPeerState indicates the status of the connection.')
tmnxMsdpPeerLastUpOrDown = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 2, 1, 25), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpPeerLastUpOrDown.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerLastUpOrDown.setDescription('The value of tmnxMsdpPeerLastUpOrDown indicates the time at which the most recent peer-state change occurred.')
tmnxMsdpPeerConRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpPeerConRetry.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerConRetry.setDescription('The value of tmnxMsdpPeerConRetry indicates number of peer connection retry attempts.')
tmnxMsdpPeerStateTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 2, 1, 27), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpPeerStateTimer.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerStateTimer.setDescription('The value of tmnxMsdpPeerStateTimer indicates the number of seconds to wait before another message is sent to a peer.')
tmnxMsdpPeerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 2, 1, 28), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpPeerTimeout.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerTimeout.setDescription('The value of tmnxMsdpPeerTimeout indicates the number of seconds to wait for a response from the peer before declaring the peer unavailable.')
tmnxMsdpPeerSAAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 2, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpPeerSAAccepted.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerSAAccepted.setDescription('The value of tmnxMsdpPeerSAAccepted indicates the number of entries in the source-active cache accepted from the peer.')
tmnxMsdpPeerSARecvd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 2, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpPeerSARecvd.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerSARecvd.setDescription('The value of tmnxMsdpPeerSARecvd indicates the number of entries in the source-active cache received by the peer.')
tmnxMsdpPeerLastASLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 2, 1, 31), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpPeerLastASLimit.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerLastASLimit.setDescription('The value of tmnxMsdpPeerLastASLimit indicates the time that the last active source limit was triggered.')
tmnxMsdpPeerGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 3), )
if mibBuilder.loadTexts: tmnxMsdpPeerGroupTable.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGroupTable.setDescription('The tmnxMsdpPeerGroupTable provides a listing of all MSDP Peer Groups.')
tmnxMsdpPeerGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 3, 1), ).setIndexNames((0, "TIMETRA-MSDP-MIB", "tmnxMsdpPeerGroupName"))
if mibBuilder.loadTexts: tmnxMsdpPeerGroupEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGroupEntry.setDescription('tmnxMsdpPeerGroupEntry represents a MSDP Peer Group. Entries can be created and deleted via SNMP SET operations.')
tmnxMsdpPeerGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 3, 1, 1), TNamedItem())
if mibBuilder.loadTexts: tmnxMsdpPeerGroupName.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGroupName.setDescription('The value of tmnxMsdpPeerGroupName indicates the peer group name.')
tmnxMsdpPeerGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGroupRowStatus.setDescription('tmnxMsdpPeerGroupRowStatus is the object used for creating and deleting row entries in this table.')
tmnxMsdpPeerGroupMsgRcvRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(10, 10000), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerGroupMsgRcvRate.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGroupMsgRcvRate.setDescription('The value of tmnxMsdpPeerGroupMsgRcvRate specifies the number of MSDP messages (including source active messages) that are read from the TCP session per tmnxMsdpMsgRcvRateTime seconds By default, no MSDP messages are read from the TCP session and this is specified by the value 0. Once the number of MSDP packets defined in tmnxMsdpMsgRcvRateThd have been processed the rate of all other MSDP packets is rate limited by no longer accepting messages from the TCP session until tmnxMsdpMsgRcvRateTime seconds have elapsed.')
tmnxMsdpPeerGroupMsgRcvRateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 600), ))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerGroupMsgRcvRateTime.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGroupMsgRcvRateTime.setDescription('The value of tmnxMsdpPeerGroupMsgRcvRateTime specifies the maximum number of source active messages that will be accepted by MSDP. This effectively controls the number of source active messages that can be stored on the system. By default, no MSDP messages are read from the TCP session and this is specified by the value 0. Once the number of MSDP packets defined in tmnxMsdpPeerGroupMsgRcvRateThd have been processed the rate of all other MSDP packets is rate limited by no longer accepting messages from the TCP session until tmnxMsdpPeerGroupMsgRcvRateTime seconds have elapsed.')
tmnxMsdpPeerGroupMsgRcvRateThd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 3, 1, 5), Gauge32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1000000), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerGroupMsgRcvRateThd.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGroupMsgRcvRateThd.setDescription('The value of tmnxMsdpPeerGroupMsgRcvRateThd specifies the number of MSDP messages that can be processed before tmnxMsdpPeerGroupMsgRcvRate is set. This is useful during system startup and initialization. By default, no MSDP messages are read from the TCP session and this is specified by the value 0. Once the number of MSDP packets defined in tmnxMsdpPeerGroupMsgRcvRateThd have been processed the rate of all other MSDP packets is rate limited by no longer accepting messages from the TCP session until tmnxMsdpPeerGroupMsgRcvRateTime seconds have elapsed.')
tmnxMsdpPeerGroupAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 3, 1, 6), TmnxAdminState().clone('inService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerGroupAdminState.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGroupAdminState.setDescription("The value of tmnxMsdpPeerGroupAdminState specifies the desired administrative state for a MSDP peer group. When tmnxMsdpPeerGroupAdminState is 'outOfService' the operational state of the MSDP peer group as well as the operational state of other entities under it, like other peers is also disabled. By default, the state of a MSDP peer group is 'inService'.")
tmnxMsdpPeerGroupExportPolicy1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 3, 1, 7), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerGroupExportPolicy1.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGroupExportPolicy1.setDescription('The value of tmnxMsdpPeerGroupExportPolicy1 specifies the export policy number 1 at peer group level.')
tmnxMsdpPeerGroupExportPolicy2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 3, 1, 8), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerGroupExportPolicy2.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGroupExportPolicy2.setDescription('The value of tmnxMsdpPeerGroupExportPolicy2 specifies the export policy number 2 at peer group protocol level.')
tmnxMsdpPeerGroupExportPolicy3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 3, 1, 9), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerGroupExportPolicy3.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGroupExportPolicy3.setDescription('The value of tmnxMsdpPeerGroupExportPolicy3 specifies the export policy number 3 at peer group protocol level.')
tmnxMsdpPeerGroupExportPolicy4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 3, 1, 10), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerGroupExportPolicy4.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGroupExportPolicy4.setDescription('The value of tmnxMsdpPeerGroupExportPolicy4 specifies the export policy number 4 at peer group protocol level.')
tmnxMsdpPeerGroupExportPolicy5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 3, 1, 11), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerGroupExportPolicy5.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGroupExportPolicy5.setDescription('The value of tmnxMsdpPeerGroupExportPolicy5 specifies the export policy number 5 at peer group protocol level.')
tmnxMsdpPeerGroupImportPolicy1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 3, 1, 12), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerGroupImportPolicy1.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGroupImportPolicy1.setDescription('The value of tmnxMsdpPeerGroupImportPolicy1 specifies the import policy number 1 at peer group level.')
tmnxMsdpPeerGroupImportPolicy2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 3, 1, 13), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerGroupImportPolicy2.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGroupImportPolicy2.setDescription('The value of tmnxMsdpPeerGroupImportPolicy2 specifies the import policy number 2 at peer group level.')
tmnxMsdpPeerGroupImportPolicy3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 3, 1, 14), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerGroupImportPolicy3.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGroupImportPolicy3.setDescription('The value of tmnxMsdpPeerGroupImportPolicy3 specifies the import policy number 3 at peer group level.')
tmnxMsdpPeerGroupImportPolicy4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 3, 1, 15), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerGroupImportPolicy4.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGroupImportPolicy4.setDescription('The value of tmnxMsdpPeerGroupImportPolicy4 specifies the import policy number 4 at peer group level.')
tmnxMsdpPeerGroupImportPolicy5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 3, 1, 16), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerGroupImportPolicy5.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGroupImportPolicy5.setDescription('The value of tmnxMsdpPeerGroupImportPolicy5 specifies the import policy number 5 at peer group level.')
tmnxMsdpPeerGroupLocalAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 3, 1, 17), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerGroupLocalAddrType.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGroupLocalAddrType.setDescription('The value of tmnxMsdpPeerGroupLocalAddrType is used to configure the type of tmnxMsdpPeerGroupLocalAddress.')
tmnxMsdpPeerGroupLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 3, 1, 18), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerGroupLocalAddress.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGroupLocalAddress.setDescription('The value of tmnxMsdpPeerGroupLocalAddress is used to configure the local end of a MSDP session. In order for MSDP to function at least one peer must be configured. When configuring a peer, the local end of the MSDP session must be configured. This address is used to validate incoming connections to the peer and to establish connections to the remote peer. By default no local address is configured.')
tmnxMsdpPeerGroupMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standard", 1), ("mesh-group", 2))).clone('standard')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerGroupMode.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGroupMode.setDescription("The value of tmnxMsdpPeerGroupMode is used to configure groups of peers in a full mesh topology. MSDP peers can be grouped in a full-mesh topology that prevents excessive flooding of source-active messages to neighboring peers. When operating in meshed mode, source-active messages received from a mesh group member are always accepted but are not flooded to other members of the same mesh group. As a result, these source-active messages are only flooded to non-mesh group peers or members of other mesh groups. By default 'standard' (non-meshed) mode is used.")
tmnxMsdpPeerGroupMaxActSources = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 1000000), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerGroupMaxActSources.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGroupMaxActSources.setDescription("The value of tmnxMsdpPeerGroupMaxActSources specifies the maximum number of source active messages that will be accepted by this MSDP peer group. This effectively controls the number of active sources that can be stored on the system. By default, no limit is placed on the number of source active messages and this is specified by the value '-1'. A value of 0 means that no source active messages will be accepted.")
tmnxMsdpPeerGroupActMsgsExMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpPeerGroupActMsgsExMax.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGroupActMsgsExMax.setDescription('The value of tmnxMsdpPeerGroupActMsgsExMax indicates the number of source active messages received from this group that exceeded the established maximum number.')
tmnxMsdpPeerGrpSARejExpPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpPeerGrpSARejExpPolicy.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGrpSARejExpPolicy.setDescription('The value of tmnxMsdpPeerGrpSARejExpPolicy indicates the number of source active messages received from this group that were were not sent due to export policy.')
tmnxMsdpPeerGrpSARejImpPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpPeerGrpSARejImpPolicy.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGrpSARejImpPolicy.setDescription('The value of tmnxMsdpPeerGrpSARejImpPolicy indicates the number of source active messages received from this group that were rejected due to import policy.')
tmnxMsdpPeerGrpPeerTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 4), )
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerTable.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerTable.setDescription('The tmnxMsdpPeerGrpPeerTable table provides a listing of all peers under MSDP Peer Groups.')
tmnxMsdpPeerGrpPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 4, 1), ).setIndexNames((0, "TIMETRA-MSDP-MIB", "tmnxMsdpPeerGroupName"), (0, "TIMETRA-MSDP-MIB", "tmnxMsdpPeerGrpPeerAddressType"), (0, "TIMETRA-MSDP-MIB", "tmnxMsdpPeerGrpPeerAddress"))
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerEntry.setDescription('An entry representing a peer in an MSDP Peer Group. Entries can be created and deleted via SNMP SET operations.')
tmnxMsdpPeerGrpPeerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 4, 1, 1), InetAddressType())
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerAddressType.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerAddressType.setDescription('The value of tmnxMsdpPeerGrpPeerAddressType indicates the type of address of the MSDP peer.')
tmnxMsdpPeerGrpPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 4, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerAddress.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerAddress.setDescription('The value of tmnxMsdpPeerGrpPeerAddress indicates the address of the MSDP peer.')
tmnxMsdpPeerGrpPeerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerRowStatus.setDescription('tmnxMsdpPeerGrpPeerRowStatus is the object used for creating and deleting row entries in this table.')
tmnxMsdpPeerGrpPeerMaxActSrcs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 1000000), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerMaxActSrcs.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerMaxActSrcs.setDescription("The value of tmnxMsdpPeerGrpPeerMaxActSrcs specifies the maximum number of source active messages that will be accepted by MSDP peer group peer. This effectively controls the number of active sources that can be stored on the system. By default, no limit is placed on the number of source active messages and this is specified by the value '-1'. A value of 0 means that no source active messages will be accepted.")
tmnxMsdpPeerGrpPeerMsgRcvRt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 4, 1, 5), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(10, 10000), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerMsgRcvRt.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerMsgRcvRt.setDescription('The value of tmnxMsdpPeerGrpPeerMsgRcvRt specifies the number of MSDP messages (including source active messages) that are read from the TCP session per tmnxMsdpPeerGrpPeerMsgRcvRtTime seconds. By default, no MSDP messages are read from the TCP session and this is specified by the value 0. Once the number of MSDP packets defined in tmnxMsdpPeerGrpPeerMsgRcvRtThd have been processed the rate of all other MSDP packets is rate limited by no longer accepting messages from the TCP session until tmnxMsdpPeerGrpPeerMsgRcvRtTime seconds have elapsed.')
tmnxMsdpPeerGrpPeerMsgRcvRtTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 4, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 600), ))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerMsgRcvRtTime.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerMsgRcvRtTime.setDescription('The value of tmnxMsdpPeerGrpPeerMsgRcvRtTime specifies the time in seconds that together with tmnxMsdpPeerGrpPeerMsgRcvRt defines the number of MSDP messages (including source active messages) that are read from the TCP session within the configured number of seconds. By default, no MSDP messages are read from the TCP session and this is specified by the value 0. Once the number of MSDP packets defined in tmnxMsdpPeerGrpPeerMsgRcvRtThd have been processed the rate of all other MSDP packets is rate limited by no longer accepting messages from the TCP session until tmnxMsdpPeerGrpPeerMsgRcvRtTime seconds have elapsed.')
tmnxMsdpPeerGrpPeerMsgRcvRtThd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 4, 1, 7), Gauge32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1000000), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerMsgRcvRtThd.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerMsgRcvRtThd.setDescription('The value of tmnxMsdpPeerGrpPeerMsgRcvRtThd specifies the number of MSDP messages that can be processed before tmnxMsdpPeerGrpPeerMsgRcvRt is set. This is useful during system startup and initialization. By default, no MSDP messages are read from the TCP session and this is specified by the value 0. Once the number of MSDP packets defined in tmnxMsdpPeerGrpPeerMsgRcvRtThd have been processed the rate of all other MSDP packets is rate limited by no longer accepting messages from the TCP session until tmnxMsdpPeerGrpPeerMsgRcvRtTime seconds have elapsed.')
tmnxMsdpPeerGrpPeerAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 4, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerAuthKey.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerAuthKey.setDescription('The value of tmnxMsdpPeerGrpPeerAuthKey specifies the authentication key to be used for a specific MSDP peer group peering session. Authentication is done using the MD-5 message based digest protocol. Authentication cannot be configured globally and can be applied per peer only. The authentication key can be any combination of letters or numbers. Note that the string may contain embedded nulls. By default all MSDP messages are accepted and the MD5 signature option authentication key is disabled')
tmnxMsdpPeerGrpPeerAKeyEncrypt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 4, 1, 9), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerAKeyEncrypt.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerAKeyEncrypt.setDescription("When the value of tmnxMsdpPeerGrpPeerAKeyEncrypt is 'true', the password specified by tmnxMsdpPeerGrpPeerAuthKey is in the encrypted form. When the value of tmnxMsdpPeerGrpPeerAKeyEncrypt is 'false', the password specified by tmnxMsdpPeerGrpPeerAuthKey is in plain text. tmnxMsdpPeerGrpPeerAuthKey and tmnxMsdpPeerGrpPeerAKeyEncrypt, which indicates whether or not the password string is encrypted, must be set together in the same SNMP request PDU or else the set request will fail with an inconsistentValue error.")
tmnxMsdpPeerGrpPeerDefaultPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 4, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerDefaultPeer.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerDefaultPeer.setDescription('The value of tmnxMsdpPeerGrpPeerDefaultPeer is used to configure a peer as the default MSDP peer due to which all source-active messages from the peer will be accepted without the usual peer-reverse-path-forwarding (RPF) check.')
tmnxMsdpPeerGrpPeerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 4, 1, 11), TmnxAdminState().clone('inService')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerAdminState.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerAdminState.setDescription("The value of tmnxMsdpPeerGrpPeerAdminState specifies the desired administrative state for a peer under a MSDP peer group. When tmnxMsdpPeerGrpPeerAdminState is 'outOfService' the operational state of the MSDP peer is disabled. By default, tmnxMsdpPeerGrpPeerAdminState is 'inService'.")
tmnxMsdpPeerGrpPeerExportPolicy1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 4, 1, 12), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerExportPolicy1.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerExportPolicy1.setDescription('The value of tmnxMsdpPeerGrpPeerExportPolicy1 specifies the export policy to export Source Active (SA) state from the SA list into MSDP. A maximum of five policy names can be specified. tmnxMsdpPeerGrpPeerExportPolicy1 specifies policy number 1 at the protocol level. By default no export policies are applied and all SA entries are announced.')
tmnxMsdpPeerGrpPeerExportPolicy2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 4, 1, 13), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerExportPolicy2.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerExportPolicy2.setDescription('The value of tmnxMsdpPeerGrpPeerExportPolicy2 specifies the export policy to export Source Active (SA) state from the SA list into MSDP. tmnxMsdpPeerGrpPeerExportPolicy2 specifies policy number 2 at the protocol level. By default no export policies are applied and all SA entries are announced.')
tmnxMsdpPeerGrpPeerExportPolicy3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 4, 1, 14), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerExportPolicy3.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerExportPolicy3.setDescription('The value of tmnxMsdpPeerGrpPeerExportPolicy3 specifies the export policy to export Source Active (SA) state from the SA list into MSDP. tmnxMsdpPeerGrpPeerExportPolicy3 specifies policy number 3 at the protocol level. By default no export policies are applied and all SA entries are announced.')
tmnxMsdpPeerGrpPeerExportPolicy4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 4, 1, 15), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerExportPolicy4.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerExportPolicy4.setDescription('The value of tmnxMsdpPeerGrpPeerExportPolicy4 specifies the export policy to export Source Active (SA) state from the SA list into MSDP. tmnxMsdpPeerGrpPeerExportPolicy4 specifies policy number 4 at the protocol level. By default no export policies are applied and all SA entries are announced.')
tmnxMsdpPeerGrpPeerExportPolicy5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 4, 1, 16), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerExportPolicy5.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerExportPolicy5.setDescription('The value of tmnxMsdpPeerGrpPeerExportPolicy5 specifies the export policy to export Source Active (SA) state from the SA list into MSDP. tmnxMsdpPeerGrpPeerExportPolicy1 specifies policy number 5 at the protocol level. By default no export policies are applied and all SA entries are announced.')
tmnxMsdpPeerGrpPeerImportPolicy1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 4, 1, 17), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerImportPolicy1.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerImportPolicy1.setDescription('The value of tmnxMsdpPeerGrpPeerImportPolicy1 specifies the import policy to import Source Active (SA) state from the SA list into MSDP. A maximum of five policy names can be specified. tmnxMsdpPeerGrpPeerImportPolicy1 specifies policy number 1 at the protocol level. By default no import policies are applied and all SA entries are announced.')
tmnxMsdpPeerGrpPeerImportPolicy2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 4, 1, 18), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerImportPolicy2.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerImportPolicy2.setDescription('The value of tmnxMsdpPeerGrpPeerImportPolicy2 specifies the import policy to import Source Active (SA) state from the SA list into MSDP. tmnxMsdpPeerGrpPeerImportPolicy2 specifies policy number 2 at the protocol level. By default no import policies are applied and all SA entries are announced.')
tmnxMsdpPeerGrpPeerImportPolicy3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 4, 1, 19), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerImportPolicy3.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerImportPolicy3.setDescription('The value of tmnxMsdpPeerGrpPeerImportPolicy3 specifies the import policy to import Source Active (SA) state from the SA list into MSDP. tmnxMsdpPeerGrpPeerImportPolicy3 specifies policy number 3 at the protocol level. By default no import policies are applied and all SA entries are announced.')
tmnxMsdpPeerGrpPeerImportPolicy4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 4, 1, 20), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerImportPolicy4.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerImportPolicy4.setDescription('The value of tmnxMsdpPeerGrpPeerImportPolicy4 specifies the import policy to import Source Active (SA) state from the SA list into MSDP. tmnxMsdpPeerGrpPeerImportPolicy4 specifies policy number 4 at the protocol level. By default no import policies are applied and all SA entries are announced.')
tmnxMsdpPeerGrpPeerImportPolicy5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 4, 1, 21), TPolicyStatementNameOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerImportPolicy5.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerImportPolicy5.setDescription('The value of tmnxMsdpPeerGrpPeerImportPolicy5 specifies the import policy to import Source Active (SA) state from the SA list into MSDP. tmnxMsdpPeerGrpPeerImportPolicy5 specifies policy number 5 at the protocol level. By default no import policies are applied and all SA entries are announced.')
tmnxMsdpPeerGrpPeerLocAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 4, 1, 22), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerLocAddrType.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerLocAddrType.setDescription('The value of tmnxMsdpPeerGrpPeerLocAddrType indicates the type of tmnxMsdpPeerGrpPeerLocalAddress.')
tmnxMsdpPeerGrpPeerLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 4, 1, 23), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerLocalAddress.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerLocalAddress.setDescription('The value of tmnxMsdpPeerGrpPeerLocalAddress is used to configure the local end of a MSDP session. In order for MSDP to function at least one peer must be configured. When configuring a peer, the local end of the MSDP session must be configured. This address is used to validate incoming connections to the peer and to establish connections to the remote peer. By default no local address is configured.')
tmnxMsdpPeerGrpPeerState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 4, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("listen", 0), ("established", 1), ("inactive", 2), ("disabled", 3), ("connecting", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerState.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerState.setDescription('The value of tmnxMsdpPeerGrpPeerState indicates the status of the connection.')
tmnxMsdpPeerGrpPeerLastUpOrDown = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 4, 1, 25), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerLastUpOrDown.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerLastUpOrDown.setDescription('The value of tmnxMsdpPeerGrpPeerLastUpOrDown indicates the time at which the most recent peer-state change occurred.')
tmnxMsdpPeerGrpPeerConRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 4, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerConRetry.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerConRetry.setDescription('The value of tmnxMsdpPeerGrpPeerConRetry indicates number of peer connection retry attempts.')
tmnxMsdpPeerGrpPeerStateTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 4, 1, 27), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerStateTimer.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerStateTimer.setDescription('The value of tmnxMsdpPeerGrpPeerStateTimer indicates the number of seconds to wait before another message is sent to a peer.')
tmnxMsdpPeerGrpPeerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 4, 1, 28), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerTimeout.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerTimeout.setDescription('The value of tmnxMsdpPeerGrpPeerTimeout indicates the number of seconds to wait for a response from the peer before declaring the peer unavailable.')
tmnxMsdpPeerGrpPeerSAAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 4, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerSAAccepted.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerSAAccepted.setDescription('The value of tmnxMsdpPeerGrpPeerSAAccepted indicates the number of entries in the source-active cache accepted from the peer.')
tmnxMsdpPeerGrpPeerSARecvd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 4, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerSARecvd.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerSARecvd.setDescription('The value of tmnxMsdpPeerGrpPeerSARecvd indicates the number of entries in the source-active cache received by the peer.')
tmnxMsdpPeerGrpPeerLastASLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 4, 1, 31), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerLastASLimit.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGrpPeerLastASLimit.setDescription('The value of tmnxMsdpPeerGrpPeerLastASLimit indicates the time that the last active source limit was triggered.')
tmnxMsdpSourceTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 5), )
if mibBuilder.loadTexts: tmnxMsdpSourceTable.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpSourceTable.setDescription('The tmnxMsdpSourceTable provides a listing of all MSDP Source configuration.')
tmnxMsdpSourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 5, 1), ).setIndexNames((0, "TIMETRA-MSDP-MIB", "tmnxMsdpSourcePrefixType"), (0, "TIMETRA-MSDP-MIB", "tmnxMsdpSourcePrefix"), (0, "TIMETRA-MSDP-MIB", "tmnxMsdpSourceMask"))
if mibBuilder.loadTexts: tmnxMsdpSourceEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpSourceEntry.setDescription('An tmnxMsdpSourceEntry represents a MSDP Source configuration. Entries can be created and deleted via SNMP SET operations.')
tmnxMsdpSourcePrefixType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 5, 1, 1), InetAddressType())
if mibBuilder.loadTexts: tmnxMsdpSourcePrefixType.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpSourcePrefixType.setDescription('The value of tmnxMsdpSourcePrefixType indicates the type of tmnxMsdpSourcePrefix.')
tmnxMsdpSourcePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 5, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: tmnxMsdpSourcePrefix.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpSourcePrefix.setDescription('The value of tmnxMsdpSourcePrefix indicates the IP address of the sources from which the source active messages would be accepted.')
tmnxMsdpSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 5, 1, 3), InetAddressPrefixLength())
if mibBuilder.loadTexts: tmnxMsdpSourceMask.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpSourceMask.setDescription('The value of tmnxMsdpSourceMask indicates the mask to be used along with tmnxMsdpSourcePrefix to obtain the range of addresses from which the router can accept source active messages. ')
tmnxMsdpSourceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpSourceRowStatus.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpSourceRowStatus.setDescription('tmnxMsdpSourceRowStatus is the object used for creating and deleting row entries in this table.')
tmnxMsdpSourceMaxActiveSources = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 1000000), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxMsdpSourceMaxActiveSources.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpSourceMaxActiveSources.setDescription("The value of tmnxMsdpSourceMaxActiveSources specifies the maximum number of source active messages that will be accepted by MSDP. This effectively controls the number of active sources that can be stored on the system. By default, no limit is placed on the number of source active messages and this is specified by the value '-1'. A value of 0 means that no source active messages will be accepted.")
tmnxMsdpSourceDiscMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dynamic", 0), ("configured", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpSourceDiscMethod.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpSourceDiscMethod.setDescription("The value of tmnxMsdpSourceDiscMethod indicates the discovery method for this multicast source. If the source entry was created by an user, the value of this field is 'configured'. If the source was created dynamically, the value is 'dynamic'")
tmnxMsdpSourceSrcActMsgsExMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpSourceSrcActMsgsExMax.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpSourceSrcActMsgsExMax.setDescription('The value of tmnxMsdpSourceSrcActMsgsExMax indicates the number of source active messages received from this source that exceeded the established maximum number.')
tmnxMsdpSourceLastExEventTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 5, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpSourceLastExEventTime.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpSourceLastExEventTime.setDescription('The value of tmnxMsdpSourceLastExEventTime indicates the time the last exceed event was triggered.')
tmnxMsdpSrcActiveTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 6), )
if mibBuilder.loadTexts: tmnxMsdpSrcActiveTable.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpSrcActiveTable.setDescription("The tmnxMsdpSrcActiveTable table stores the MSDP Source Active(SA) advertisements currently in the MSDP speaker's cache.")
tmnxMsdpSrcActiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 6, 1), ).setIndexNames((0, "TIMETRA-MSDP-MIB", "tmnxMsdpSrcActiveGroupAddrType"), (0, "TIMETRA-MSDP-MIB", "tmnxMsdpSrcActiveGroupAddr"), (0, "TIMETRA-MSDP-MIB", "tmnxMsdpSrcActiveSourceAddrType"), (0, "TIMETRA-MSDP-MIB", "tmnxMsdpSrcActiveSourceAddr"), (0, "TIMETRA-MSDP-MIB", "tmnxMsdpSrcActiveOriginRPType"), (0, "TIMETRA-MSDP-MIB", "tmnxMsdpSrcActiveOriginRP"))
if mibBuilder.loadTexts: tmnxMsdpSrcActiveEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpSrcActiveEntry.setDescription('An entry representing an MSDP SA advertisement. The INDEX to this table includes msdpSACacheOriginRP for diagnosing incorrect MSDP advertisements; normally a Source and Group pair would be unique. This is a read-only table.')
tmnxMsdpSrcActiveGroupAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 6, 1, 1), InetAddressType())
if mibBuilder.loadTexts: tmnxMsdpSrcActiveGroupAddrType.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpSrcActiveGroupAddrType.setDescription('The value of tmnxMsdpSrcActiveGroupAddrType indicates the address type of tmnxMsdpSrcActiveGroupAddr.')
tmnxMsdpSrcActiveGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 6, 1, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: tmnxMsdpSrcActiveGroupAddr.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpSrcActiveGroupAddr.setDescription('The value of tmnxMsdpSrcActiveGroupAddr indicates the group address of the Source Active entry.')
tmnxMsdpSrcActiveSourceAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 6, 1, 3), InetAddressType())
if mibBuilder.loadTexts: tmnxMsdpSrcActiveSourceAddrType.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpSrcActiveSourceAddrType.setDescription('The value of tmnxMsdpSrcActiveSourceAddrType indicates the address type of tmnxMsdpSrcActiveSourceAddr.')
tmnxMsdpSrcActiveSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 6, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: tmnxMsdpSrcActiveSourceAddr.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpSrcActiveSourceAddr.setDescription('The value of tmnxMsdpSrcActiveSourceAddr indicates the source address of the Source Active entry.')
tmnxMsdpSrcActiveOriginRPType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 6, 1, 5), InetAddressType())
if mibBuilder.loadTexts: tmnxMsdpSrcActiveOriginRPType.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpSrcActiveOriginRPType.setDescription('The value of tmnxMsdpSrcActiveOriginRPType indicates the address type of tmnxMsdpSrcActiveOriginRP.')
tmnxMsdpSrcActiveOriginRP = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 6, 1, 6), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: tmnxMsdpSrcActiveOriginRP.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpSrcActiveOriginRP.setDescription('The value of tmnxMsdpSrcActiveOriginRP indicates the origin RP address of the Source Active entry.')
tmnxMsdpSrcActivePrLearnFrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 6, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpSrcActivePrLearnFrType.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpSrcActivePrLearnFrType.setDescription('The value of tmnxMsdpSrcActivePrLearnFrType indicates the address type of tmnxMsdpSrcActivePeerLearntFrom.')
tmnxMsdpSrcActivePeerLearntFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 6, 1, 8), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpSrcActivePeerLearntFrom.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpSrcActivePeerLearntFrom.setDescription('The value of tmnxMsdpSrcActivePeerLearntFrom indicates the peer from which this Source Active entry was last accepted.')
tmnxMsdpSrcActiveRPFPeerType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 6, 1, 9), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpSrcActiveRPFPeerType.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpSrcActiveRPFPeerType.setDescription('The value of tmnxMsdpSrcActiveRPFPeerType indicates the address type of tmnxMsdpSrcActiveRPFPeer.')
tmnxMsdpSrcActiveRPFPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 6, 1, 10), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpSrcActiveRPFPeer.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpSrcActiveRPFPeer.setDescription('The value of tmnxMsdpSrcActiveRPFPeer indicates the peer from which an SA message corresponding to this cache entry would be accepted (i.e. the RPF peer for tmnxMsdpSrcActiveOriginRP). This may be different than tmnxMsdpSrcActivePeerLearntFrom if this entry was created by an MSDP SA-Response.')
tmnxMsdpSrcActiveUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 6, 1, 11), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpSrcActiveUpTime.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpSrcActiveUpTime.setDescription('The value of tmnxMsdpSrcActiveUpTime indicates the time since this entry was first placed in the Source Active (SA) cache. It is the difference between the time that the entry was first placed in the SA cache and the current time.')
tmnxMsdpSrcActiveExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 6, 1, 12), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpSrcActiveExpiryTime.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpSrcActiveExpiryTime.setDescription('The value of tmnxMsdpSrcActiveExpiryTime indicates the time remaining before this entry will expire from the Source Active (SA) cache. It is difference between the current time and the time that the entry will expire.')
tmnxMsdpPeerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 7), )
if mibBuilder.loadTexts: tmnxMsdpPeerStatsTable.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerStatsTable.setDescription('The table tmnxMsdpPeerStatsTable is the statistics information related to a MSDP peer.')
tmnxMsdpPeerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 7, 1), )
tmnxMsdpPeerEntry.registerAugmentions(("TIMETRA-MSDP-MIB", "tmnxMsdpPeerStatsEntry"))
tmnxMsdpPeerStatsEntry.setIndexNames(*tmnxMsdpPeerEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxMsdpPeerStatsEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerStatsEntry.setDescription('tmnxMsdpPeerStatsEntry is an entry (conceptual row) in the tmnxMsdpPeerStatsTable. Each entry represents a MSDP peer related statistics information.')
tmnxMsdpPeerStatsActSrcLimExcd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpPeerStatsActSrcLimExcd.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerStatsActSrcLimExcd.setDescription('The value of tmnxMsdpPeerStatsActSrcLimExcd indicates the number of times the global active source limit has been exceeded by this peer instance.')
tmnxMsdpPeerStatsLastStChange = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 7, 1, 2), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpPeerStatsLastStChange.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerStatsLastStChange.setDescription('The value of tmnxMsdpPeerStatsLastStChange indicates how long ago the peer state changed.')
tmnxMsdpPeerStatsLastMsgPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 7, 1, 3), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpPeerStatsLastMsgPeer.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerStatsLastMsgPeer.setDescription('The value of tmnxMsdpPeerStatsLastMsgPeer indicates how long ago the last message was received from this peer instance.')
tmnxMsdpPeerStatsRPFFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpPeerStatsRPFFailures.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerStatsRPFFailures.setDescription('The value of tmnxMsdpPeerStatsRPFFailures indicates number of reverse path forwarding (RPF) failures.')
tmnxMsdpPeerStatsRemoteCloses = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpPeerStatsRemoteCloses.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerStatsRemoteCloses.setDescription('The value of tmnxMsdpPeerStatsRemoteCloses indicates the number of times the remote peer closed.')
tmnxMsdpPeerStatsPeerTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpPeerStatsPeerTimeouts.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerStatsPeerTimeouts.setDescription('The value of tmnxMsdpPeerStatsPeerTimeouts indicates the number of peer timeouts.')
tmnxMsdpPeerStatsSAMsgsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpPeerStatsSAMsgsSent.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerStatsSAMsgsSent.setDescription('The value of tmnxMsdpPeerStatsSAMsgsSent indicates the number of source-active messages sent.')
tmnxMsdpPeerStatsSAMsgsRecvd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpPeerStatsSAMsgsRecvd.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerStatsSAMsgsRecvd.setDescription('The value of tmnxMsdpPeerStatsSAMsgsRecvd indicates the number of source-active messages received.')
tmnxMsdpPeerStatsSAReqMsgsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpPeerStatsSAReqMsgsSent.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerStatsSAReqMsgsSent.setDescription('The value of tmnxMsdpPeerStatsSAReqMsgsSent indicates the number of source-active request messages sent.')
tmnxMsdpPeerStatsSAReqMsgsRecvd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpPeerStatsSAReqMsgsRecvd.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerStatsSAReqMsgsRecvd.setDescription('The value of tmnxMsdpPeerStatsSAReqMsgsRecvd indicates the number of source-active request messages received.')
tmnxMsdpPeerStatsSAResMsgsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpPeerStatsSAResMsgsSent.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerStatsSAResMsgsSent.setDescription('The value of tmnxMsdpPeerStatsSAResMsgsSent indicates the number of source-active response messages sent.')
tmnxMsdpPeerStatsSAResMsgsRecvd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 7, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpPeerStatsSAResMsgsRecvd.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerStatsSAResMsgsRecvd.setDescription('The value of tmnxMsdpPeerStatsSAResMsgsRecvd indicates the number of source-active response messages received.')
tmnxMsdpPeerStatsKAMsgsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 7, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpPeerStatsKAMsgsSent.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerStatsKAMsgsSent.setDescription('The value of tmnxMsdpPeerStatsKAMsgsSent indicates the number of keep-alive messages sent.')
tmnxMsdpPeerStatsKAMsgsRecvd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 7, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpPeerStatsKAMsgsRecvd.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerStatsKAMsgsRecvd.setDescription('The value of tmnxMsdpPeerStatsKAMsgsRecvd indicates the number of keep-alive messages received.')
tmnxMsdpPeerStatsUnknMsgsRecvd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 7, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpPeerStatsUnknMsgsRecvd.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerStatsUnknMsgsRecvd.setDescription('The value of tmnxMsdpPeerStatsUnknMsgsRecvd indicates the number of unknown messages received.')
tmnxMsdpPeerStatsErrorMsgsRecvd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 7, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpPeerStatsErrorMsgsRecvd.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerStatsErrorMsgsRecvd.setDescription('The value of tmnxMsdpPeerStatsErrorMsgsRecvd indicates number of error messages received.')
tmnxMsdpPeerStatsSALearnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 7, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpPeerStatsSALearnt.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerStatsSALearnt.setDescription('The value of tmnxMsdpPeerStatsSALearnt indicates the number of unique source active entries in the cache learned from the peer.')
tmnxMsdpPeerStatsSARejExpPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 7, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpPeerStatsSARejExpPolicy.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerStatsSARejExpPolicy.setDescription('The value of tmnxMsdpPeerStatsSARejExpPolicy indicates the number of source active messages from the peer that were not sent due to export policy.')
tmnxMsdpPeerStatsSARejImpPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 7, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpPeerStatsSARejImpPolicy.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerStatsSARejImpPolicy.setDescription('The value of tmnxMsdpPeerStatsSARejImpPolicy indicates the number of source active messages from the peer that were rejected due to import policy.')
tmnxMsdpPeerStatsResvMsgsRecvd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 7, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpPeerStatsResvMsgsRecvd.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerStatsResvMsgsRecvd.setDescription("The value of tmnxMsdpPeerStatsResvMsgsRecvd indicates the number of MSDP messages received with type 'Reserved'.")
tmnxMsdpSrcActRejTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 8), )
if mibBuilder.loadTexts: tmnxMsdpSrcActRejTable.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpSrcActRejTable.setDescription("The tmnxMsdpSrcActRejTable table stores the MSDP Source Active(SA) advertisements rejected from the MSDP speaker's cache.")
tmnxMsdpSrcActRejEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 8, 1), ).setIndexNames((0, "TIMETRA-MSDP-MIB", "tmnxMsdpSrcActRejPeerGroupName"), (0, "TIMETRA-MSDP-MIB", "tmnxMsdpSrcActRejGroupAddrType"), (0, "TIMETRA-MSDP-MIB", "tmnxMsdpSrcActRejGroupAddr"), (0, "TIMETRA-MSDP-MIB", "tmnxMsdpSrcActRejSourceAddrType"), (0, "TIMETRA-MSDP-MIB", "tmnxMsdpSrcActRejSourceAddr"), (0, "TIMETRA-MSDP-MIB", "tmnxMsdpSrcActRejOriginRPType"), (0, "TIMETRA-MSDP-MIB", "tmnxMsdpSrcActRejOriginRP"), (0, "TIMETRA-MSDP-MIB", "tmnxMsdpSrcActRejPeerAddrType"), (0, "TIMETRA-MSDP-MIB", "tmnxMsdpSrcActRejPeerAddr"))
if mibBuilder.loadTexts: tmnxMsdpSrcActRejEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpSrcActRejEntry.setDescription('An entry representing an MSDP SA advertisement that is rejected. This is a read-only table.')
tmnxMsdpSrcActRejPeerGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 8, 1, 1), TNamedItemOrEmpty())
if mibBuilder.loadTexts: tmnxMsdpSrcActRejPeerGroupName.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpSrcActRejPeerGroupName.setDescription('The value of tmnxMsdpSrcActRejPeerGroupName indicates the peer group name of the Source Active entry that is rejected.')
tmnxMsdpSrcActRejGroupAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 8, 1, 2), InetAddressType())
if mibBuilder.loadTexts: tmnxMsdpSrcActRejGroupAddrType.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpSrcActRejGroupAddrType.setDescription('The value of tmnxMsdpSrcActRejGroupAddrType indicates the address type of tmnxMsdpSrcActRejGroupAddr.')
tmnxMsdpSrcActRejGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 8, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: tmnxMsdpSrcActRejGroupAddr.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpSrcActRejGroupAddr.setDescription('The value of tmnxMsdpSrcActRejGroupAddr indicates the group address of the Source Active entry that is rejected.')
tmnxMsdpSrcActRejSourceAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 8, 1, 4), InetAddressType())
if mibBuilder.loadTexts: tmnxMsdpSrcActRejSourceAddrType.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpSrcActRejSourceAddrType.setDescription('The value of tmnxMsdpSrcActRejSourceAddrType indicates the address type of tmnxMsdpSrcActRejSourceAddr.')
tmnxMsdpSrcActRejSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 8, 1, 5), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: tmnxMsdpSrcActRejSourceAddr.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpSrcActRejSourceAddr.setDescription('The value of tmnxMsdpSrcActRejSourceAddr indicates the source address of the Source Active entry that is rejected.')
tmnxMsdpSrcActRejOriginRPType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 8, 1, 6), InetAddressType())
if mibBuilder.loadTexts: tmnxMsdpSrcActRejOriginRPType.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpSrcActRejOriginRPType.setDescription('The value of tmnxMsdpSrcActRejOriginRPType indicates the address type of tmnxMsdpSrcActRejOriginRP.')
tmnxMsdpSrcActRejOriginRP = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 8, 1, 7), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: tmnxMsdpSrcActRejOriginRP.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpSrcActRejOriginRP.setDescription('The value of tmnxMsdpSrcActRejOriginRP indicates the origin rendezvous point (RP) address of the Source Active entry that is rejected.')
tmnxMsdpSrcActRejPeerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 8, 1, 8), InetAddressType())
if mibBuilder.loadTexts: tmnxMsdpSrcActRejPeerAddrType.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpSrcActRejPeerAddrType.setDescription('The value of tmnxMsdpSrcActRejPeerAddrType indicates the address type of tmnxMsdpSrcActRejPeerAddr.')
tmnxMsdpSrcActRejPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 8, 1, 9), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), )))
if mibBuilder.loadTexts: tmnxMsdpSrcActRejPeerAddr.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpSrcActRejPeerAddr.setDescription('The value of tmnxMsdpSrcActRejPeerAddr indicates the peer from which this rejected Source Active entry was last received.')
tmnxMsdpSrcActRejFailureReason = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 43, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("importPolicyFailure", 1), ("exportPolicyFailure", 2), ("rpfFailure", 3), ("actSrcLimitExceeded", 4), ("srcActSrcLimitExceeded", 5), ("peerActSrcLimitExceeded", 6), ("groupActSrcLimitExceeded", 7), ("groupPeerActSrcLimitExceeded", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxMsdpSrcActRejFailureReason.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpSrcActRejFailureReason.setDescription('The value of tmnxMsdpSrcActRejFailureReason indicates the reason why this Source Active entry is rejected.')
tmnxMsdpActSrcLimExcd = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 43, 0, 1)).setObjects(("TIMETRA-MSDP-MIB", "tmnxMsdpMaxActiveSources"), ("TIMETRA-MSDP-MIB", "tmnxMsdpStatusActSrcLimExceeded"))
if mibBuilder.loadTexts: tmnxMsdpActSrcLimExcd.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpActSrcLimExcd.setDescription('The tmnxMsdpActSrcLimExcd event is generated whenever the global active source limit has been exceeded.')
tmnxMsdpPeerActSrcLimExcd = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 43, 0, 2)).setObjects(("TIMETRA-MSDP-MIB", "tmnxMsdpPeerStatsActSrcLimExcd"))
if mibBuilder.loadTexts: tmnxMsdpPeerActSrcLimExcd.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerActSrcLimExcd.setDescription('The tmnxMsdpPeerActSrcLimExcd event is generated whenever the active source limit has been exceeded for the peer.')
tmnxMsdpRPFFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 43, 0, 3)).setObjects(("TIMETRA-MSDP-MIB", "tmnxMsdpSrcActiveRPFPeerType"), ("TIMETRA-MSDP-MIB", "tmnxMsdpSrcActiveRPFPeer"))
if mibBuilder.loadTexts: tmnxMsdpRPFFailure.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpRPFFailure.setDescription('The tmnxMsdpRPFFailure event is generated whenever a RPF(Reverse Path Forwarding) failure occurs for a source configured by user.')
tmnxMsdpSourceSrcActMsgsExcd = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 43, 0, 4)).setObjects(("TIMETRA-MSDP-MIB", "tmnxMsdpSourceMaxActiveSources"), ("TIMETRA-MSDP-MIB", "tmnxMsdpSourceSrcActMsgsExMax"))
if mibBuilder.loadTexts: tmnxMsdpSourceSrcActMsgsExcd.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpSourceSrcActMsgsExcd.setDescription('The tmnxMsdpSourceSrcActMsgsExcd event is generated when the source active messages received from this source has exceeded the established maximum number.')
tmnxMsdpGroupSrcActMsgsExcd = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 43, 0, 5)).setObjects(("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGroupMaxActSources"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGroupActMsgsExMax"))
if mibBuilder.loadTexts: tmnxMsdpGroupSrcActMsgsExcd.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpGroupSrcActMsgsExcd.setDescription('The tmnxMsdpGroupSrcActMsgsExcd event is generated when the source active messages received from this group has exceeded the established maximum number.')
tmnxMsdpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 43, 1, 1)).setObjects(("TIMETRA-MSDP-MIB", "tmnxMsdpGlobalGroup"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGroup"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGroupGroup"), ("TIMETRA-MSDP-MIB", "tmnxMsdpSourceGroup"), ("TIMETRA-MSDP-MIB", "tmnxMsdpSrcActiveGroup"), ("TIMETRA-MSDP-MIB", "tmnxMsdpNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMsdpCompliance = tmnxMsdpCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: tmnxMsdpCompliance.setDescription('The compliance statement for management of MSDP features on Alcatel 7x50 SR series systems.')
tmnxMsdpV10v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 43, 1, 2)).setObjects(("TIMETRA-MSDP-MIB", "tmnxMsdpGlobalGroup"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGroup"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGroupGroup"), ("TIMETRA-MSDP-MIB", "tmnxMsdpSourceGroup"), ("TIMETRA-MSDP-MIB", "tmnxMsdpSrcActiveGroup"), ("TIMETRA-MSDP-MIB", "tmnxMsdpSrcActiveRejGroup"), ("TIMETRA-MSDP-MIB", "tmnxMsdpNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMsdpV10v0Compliance = tmnxMsdpV10v0Compliance.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpV10v0Compliance.setDescription('The compliance statement for management of MSDP features on Alcatel 7x50 SR series systems.')
tmnxMsdpGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 43, 2, 1)).setObjects(("TIMETRA-MSDP-MIB", "tmnxMsdpMaxActiveSources"), ("TIMETRA-MSDP-MIB", "tmnxMsdpMsgRcvRate"), ("TIMETRA-MSDP-MIB", "tmnxMsdpMsgRcvRateTime"), ("TIMETRA-MSDP-MIB", "tmnxMsdpMsgRcvRateThd"), ("TIMETRA-MSDP-MIB", "tmnxMsdpDataEncapsulation"), ("TIMETRA-MSDP-MIB", "tmnxMsdpAdminState"), ("TIMETRA-MSDP-MIB", "tmnxMsdpExportPolicy1"), ("TIMETRA-MSDP-MIB", "tmnxMsdpExportPolicy2"), ("TIMETRA-MSDP-MIB", "tmnxMsdpExportPolicy3"), ("TIMETRA-MSDP-MIB", "tmnxMsdpExportPolicy4"), ("TIMETRA-MSDP-MIB", "tmnxMsdpExportPolicy5"), ("TIMETRA-MSDP-MIB", "tmnxMsdpImportPolicy1"), ("TIMETRA-MSDP-MIB", "tmnxMsdpImportPolicy2"), ("TIMETRA-MSDP-MIB", "tmnxMsdpImportPolicy3"), ("TIMETRA-MSDP-MIB", "tmnxMsdpImportPolicy4"), ("TIMETRA-MSDP-MIB", "tmnxMsdpImportPolicy5"), ("TIMETRA-MSDP-MIB", "tmnxMsdpLocalAddress"), ("TIMETRA-MSDP-MIB", "tmnxMsdpLocalAddressType"), ("TIMETRA-MSDP-MIB", "tmnxMsdpStatusPeerCount"), ("TIMETRA-MSDP-MIB", "tmnxMsdpStatusPeersEstablished"), ("TIMETRA-MSDP-MIB", "tmnxMsdpStatusSACount"), ("TIMETRA-MSDP-MIB", "tmnxMsdpStatusLastTimeUp"), ("TIMETRA-MSDP-MIB", "tmnxMsdpStatusActSrcLimExceeded"), ("TIMETRA-MSDP-MIB", "tmnxMsdpRpfLookupSequence"), ("TIMETRA-MSDP-MIB", "tmnxMsdpSACacheLifetime"), ("TIMETRA-MSDP-MIB", "tmnxMsdpSARejectExportPolicy"), ("TIMETRA-MSDP-MIB", "tmnxMsdpSARejectImportPolicy"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMsdpGlobalGroup = tmnxMsdpGlobalGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpGlobalGroup.setDescription('A collection of global objects supporting management of MSDP protocol on Alcatel 7x50 SR series systems.')
tmnxMsdpPeerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 43, 2, 2)).setObjects(("TIMETRA-MSDP-MIB", "tmnxMsdpPeerRowStatus"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerMaxActiveSources"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerMsgRcvRate"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerMsgRcvRateTime"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerMsgRcvRateThd"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerAuthKey"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerAuthKeyEncrypted"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerDefaultPeer"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerAdminState"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerExportPolicy1"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerExportPolicy2"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerExportPolicy3"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerExportPolicy4"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerExportPolicy5"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerImportPolicy1"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerImportPolicy2"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerImportPolicy3"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerImportPolicy4"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerImportPolicy5"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerLocalAddressType"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerLocalAddress"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGrpPeerRowStatus"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGrpPeerMaxActSrcs"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGrpPeerMsgRcvRt"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGrpPeerMsgRcvRtTime"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGrpPeerMsgRcvRtThd"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGrpPeerAuthKey"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGrpPeerAKeyEncrypt"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGrpPeerDefaultPeer"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGrpPeerAdminState"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGrpPeerExportPolicy1"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGrpPeerExportPolicy2"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGrpPeerExportPolicy3"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGrpPeerExportPolicy4"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGrpPeerExportPolicy5"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGrpPeerImportPolicy1"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGrpPeerImportPolicy2"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGrpPeerImportPolicy3"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGrpPeerImportPolicy4"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGrpPeerImportPolicy5"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGrpPeerLocAddrType"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGrpPeerLocalAddress"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerStatsActSrcLimExcd"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerStatsLastStChange"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerStatsLastMsgPeer"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerStatsRPFFailures"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerStatsRemoteCloses"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerStatsPeerTimeouts"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerStatsSAMsgsSent"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerStatsSAMsgsRecvd"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerStatsSAReqMsgsSent"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerStatsSAReqMsgsRecvd"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerStatsSAResMsgsSent"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerStatsSAResMsgsRecvd"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerStatsKAMsgsSent"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerStatsKAMsgsRecvd"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerStatsUnknMsgsRecvd"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerStatsErrorMsgsRecvd"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerStatsSALearnt"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerStatsSARejExpPolicy"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerStatsSARejImpPolicy"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerStatsResvMsgsRecvd"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerState"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerLastUpOrDown"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerConRetry"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerStateTimer"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerTimeout"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerSAAccepted"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerSARecvd"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerLastASLimit"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGrpPeerState"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGrpPeerLastUpOrDown"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGrpPeerConRetry"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGrpPeerStateTimer"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGrpPeerTimeout"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGrpPeerSAAccepted"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGrpPeerSARecvd"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGrpPeerLastASLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMsdpPeerGroup = tmnxMsdpPeerGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGroup.setDescription('A collection of objects supporting management of MSDP peers on Alcatel 7x50 SR series systems.')
tmnxMsdpPeerGroupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 43, 2, 3)).setObjects(("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGroupRowStatus"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGroupMsgRcvRate"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGroupMsgRcvRateTime"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGroupMsgRcvRateThd"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGroupAdminState"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGroupExportPolicy1"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGroupExportPolicy2"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGroupExportPolicy3"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGroupExportPolicy4"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGroupExportPolicy5"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGroupImportPolicy1"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGroupImportPolicy2"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGroupImportPolicy3"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGroupImportPolicy4"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGroupImportPolicy5"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGroupLocalAddrType"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGroupLocalAddress"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGroupMode"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGroupMaxActSources"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGroupActMsgsExMax"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGrpSARejExpPolicy"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerGrpSARejImpPolicy"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMsdpPeerGroupGroup = tmnxMsdpPeerGroupGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpPeerGroupGroup.setDescription('A collection of objects supporting management of MSDP peer groups on Alcatel 7x50 SR series systems.')
tmnxMsdpSourceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 43, 2, 4)).setObjects(("TIMETRA-MSDP-MIB", "tmnxMsdpSourceRowStatus"), ("TIMETRA-MSDP-MIB", "tmnxMsdpSourceMaxActiveSources"), ("TIMETRA-MSDP-MIB", "tmnxMsdpSourceDiscMethod"), ("TIMETRA-MSDP-MIB", "tmnxMsdpSourceSrcActMsgsExMax"), ("TIMETRA-MSDP-MIB", "tmnxMsdpSourceLastExEventTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMsdpSourceGroup = tmnxMsdpSourceGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpSourceGroup.setDescription('A collection of objects supporting management of MSDP sources on Alcatel 7x50 SR series systems.')
tmnxMsdpSrcActiveGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 43, 2, 5)).setObjects(("TIMETRA-MSDP-MIB", "tmnxMsdpSrcActivePrLearnFrType"), ("TIMETRA-MSDP-MIB", "tmnxMsdpSrcActivePeerLearntFrom"), ("TIMETRA-MSDP-MIB", "tmnxMsdpSrcActiveRPFPeerType"), ("TIMETRA-MSDP-MIB", "tmnxMsdpSrcActiveRPFPeer"), ("TIMETRA-MSDP-MIB", "tmnxMsdpSrcActiveUpTime"), ("TIMETRA-MSDP-MIB", "tmnxMsdpSrcActiveExpiryTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMsdpSrcActiveGroup = tmnxMsdpSrcActiveGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpSrcActiveGroup.setDescription('A collection of objects supporting management of MSDP source active information on Alcatel 7x50 SR series systems.')
tmnxMsdpNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 43, 2, 6)).setObjects(("TIMETRA-MSDP-MIB", "tmnxMsdpActSrcLimExcd"), ("TIMETRA-MSDP-MIB", "tmnxMsdpPeerActSrcLimExcd"), ("TIMETRA-MSDP-MIB", "tmnxMsdpRPFFailure"), ("TIMETRA-MSDP-MIB", "tmnxMsdpSourceSrcActMsgsExcd"), ("TIMETRA-MSDP-MIB", "tmnxMsdpGroupSrcActMsgsExcd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMsdpNotificationGroup = tmnxMsdpNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpNotificationGroup.setDescription('The group of notifications supporting management of the MSDP operations on Alcatel 7x50 SR series systems.')
tmnxMsdpSrcActiveRejGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 43, 2, 7)).setObjects(("TIMETRA-MSDP-MIB", "tmnxMsdpSrcActRejFailureReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tmnxMsdpSrcActiveRejGroup = tmnxMsdpSrcActiveRejGroup.setStatus('current')
if mibBuilder.loadTexts: tmnxMsdpSrcActiveRejGroup.setDescription('A collection of objects supporting management of MSDP rejected source active information on Alcatel 7x50 SR series systems.')
mibBuilder.exportSymbols("TIMETRA-MSDP-MIB", tmnxMsdpPeerStatsSAReqMsgsSent=tmnxMsdpPeerStatsSAReqMsgsSent, tmnxMsdpSrcActiveUpTime=tmnxMsdpSrcActiveUpTime, tmnxMsdpRpfLookupSequence=tmnxMsdpRpfLookupSequence, tmnxMsdpGlobalGroup=tmnxMsdpGlobalGroup, tmnxMsdpPeerStatsSAMsgsSent=tmnxMsdpPeerStatsSAMsgsSent, tmnxMsdpPeerLastUpOrDown=tmnxMsdpPeerLastUpOrDown, tmnxMsdpPeerGroupMode=tmnxMsdpPeerGroupMode, tmnxMsdpMsgRcvRateTime=tmnxMsdpMsgRcvRateTime, tmnxMsdpPeerSAAccepted=tmnxMsdpPeerSAAccepted, tmnxMsdpPeerGroupActMsgsExMax=tmnxMsdpPeerGroupActMsgsExMax, tmnxMsdpPeerGrpPeerLocalAddress=tmnxMsdpPeerGrpPeerLocalAddress, tmnxMsdpSARejectExportPolicy=tmnxMsdpSARejectExportPolicy, tmnxMsdpPeerExportPolicy4=tmnxMsdpPeerExportPolicy4, tmnxMsdpSourceEntry=tmnxMsdpSourceEntry, tmnxMsdpPeerState=tmnxMsdpPeerState, tmnxMsdpNotificationGroup=tmnxMsdpNotificationGroup, tmnxMsdpSrcActiveTable=tmnxMsdpSrcActiveTable, tmnxMsdpPeerStatsSAResMsgsSent=tmnxMsdpPeerStatsSAResMsgsSent, tmnxMsdpPeerGroupImportPolicy3=tmnxMsdpPeerGroupImportPolicy3, tmnxMsdpGroups=tmnxMsdpGroups, tmnxMsdpPeerGrpPeerImportPolicy2=tmnxMsdpPeerGrpPeerImportPolicy2, tmnxMsdpPeerGrpPeerRowStatus=tmnxMsdpPeerGrpPeerRowStatus, tmnxMsdpPeerGrpPeerSARecvd=tmnxMsdpPeerGrpPeerSARecvd, tmnxMsdpSrcActRejOriginRPType=tmnxMsdpSrcActRejOriginRPType, tmnxMsdpSrcActiveOriginRPType=tmnxMsdpSrcActiveOriginRPType, tmnxMsdpPeerGrpPeerTimeout=tmnxMsdpPeerGrpPeerTimeout, tmnxMsdpPeerGrpPeerImportPolicy4=tmnxMsdpPeerGrpPeerImportPolicy4, tmnxMsdpPeerGroupEntry=tmnxMsdpPeerGroupEntry, tmnxMsdpPeerGroupRowStatus=tmnxMsdpPeerGroupRowStatus, tmnxMsdpStatusSACount=tmnxMsdpStatusSACount, tmnxMsdpPeerGrpPeerImportPolicy1=tmnxMsdpPeerGrpPeerImportPolicy1, tmnxMsdpPeerStatsEntry=tmnxMsdpPeerStatsEntry, tmnxMsdpPeerSARecvd=tmnxMsdpPeerSARecvd, tmnxMsdpSACacheLifetime=tmnxMsdpSACacheLifetime, tmnxMsdpPeerAdminState=tmnxMsdpPeerAdminState, tmnxMsdpSrcActRejSourceAddr=tmnxMsdpSrcActRejSourceAddr, tmnxMsdpV10v0Compliance=tmnxMsdpV10v0Compliance, tmnxMsdpSrcActiveRPFPeerType=tmnxMsdpSrcActiveRPFPeerType, tmnxMsdpPeerStatsSARejImpPolicy=tmnxMsdpPeerStatsSARejImpPolicy, tmnxMsdpGlobals=tmnxMsdpGlobals, tmnxMsdpPeerGroupExportPolicy4=tmnxMsdpPeerGroupExportPolicy4, tmnxMsdpExportPolicy5=tmnxMsdpExportPolicy5, tmnxMsdpPeerStatsResvMsgsRecvd=tmnxMsdpPeerStatsResvMsgsRecvd, tmnxMsdpPeerGroupGroup=tmnxMsdpPeerGroupGroup, tmnxMsdpPeerStatsUnknMsgsRecvd=tmnxMsdpPeerStatsUnknMsgsRecvd, tmnxMsdpActSrcLimExcd=tmnxMsdpActSrcLimExcd, tmnxMsdpPeerLocalAddressType=tmnxMsdpPeerLocalAddressType, PYSNMP_MODULE_ID=timetraMsdpMIBModule, tmnxMsdpDataEncapsulation=tmnxMsdpDataEncapsulation, tmnxMsdpPeerGrpPeerTable=tmnxMsdpPeerGrpPeerTable, tmnxMsdpPeerGroupExportPolicy3=tmnxMsdpPeerGroupExportPolicy3, tmnxMsdpPeerExportPolicy1=tmnxMsdpPeerExportPolicy1, tmnxMsdpPeerGroupMaxActSources=tmnxMsdpPeerGroupMaxActSources, tmnxMsdpPeerGrpPeerDefaultPeer=tmnxMsdpPeerGrpPeerDefaultPeer, tmnxMsdpImportPolicy4=tmnxMsdpImportPolicy4, tmnxMsdpPeerExportPolicy3=tmnxMsdpPeerExportPolicy3, tmnxMsdpSrcActiveRPFPeer=tmnxMsdpSrcActiveRPFPeer, tmnxMsdpSrcActRejSourceAddrType=tmnxMsdpSrcActRejSourceAddrType, tmnxMsdpSourceTable=tmnxMsdpSourceTable, tmnxMsdpMaxActiveSources=tmnxMsdpMaxActiveSources, tmnxMsdpSrcActRejEntry=tmnxMsdpSrcActRejEntry, tmnxMsdpPeerStatsErrorMsgsRecvd=tmnxMsdpPeerStatsErrorMsgsRecvd, tmnxMsdpPeerAuthKeyEncrypted=tmnxMsdpPeerAuthKeyEncrypted, tmnxMsdpPeerMsgRcvRateTime=tmnxMsdpPeerMsgRcvRateTime, tmnxMsdpSourcePrefix=tmnxMsdpSourcePrefix, tmnxMsdpPeerActSrcLimExcd=tmnxMsdpPeerActSrcLimExcd, tmnxMsdpPeerGroupExportPolicy5=tmnxMsdpPeerGroupExportPolicy5, tmnxMsdpSrcActiveGroupAddr=tmnxMsdpSrcActiveGroupAddr, tmnxMsdpPeerImportPolicy4=tmnxMsdpPeerImportPolicy4, tmnxMsdpSrcActiveSourceAddrType=tmnxMsdpSrcActiveSourceAddrType, tmnxMsdpPeerGroupMsgRcvRate=tmnxMsdpPeerGroupMsgRcvRate, tmnxMsdpPeerStateTimer=tmnxMsdpPeerStateTimer, tmnxMsdpRPFFailure=tmnxMsdpRPFFailure, tmnxMsdpPeerStatsTable=tmnxMsdpPeerStatsTable, tmnxMsdpPeerGrpPeerExportPolicy4=tmnxMsdpPeerGrpPeerExportPolicy4, tmnxMsdpPeerGroupExportPolicy2=tmnxMsdpPeerGroupExportPolicy2, tmnxMsdpPeerGroupImportPolicy1=tmnxMsdpPeerGroupImportPolicy1, tmnxMsdpPeerImportPolicy3=tmnxMsdpPeerImportPolicy3, tmnxMsdpPeerGrpPeerMsgRcvRtThd=tmnxMsdpPeerGrpPeerMsgRcvRtThd, tmnxMsdpPeerStatsLastStChange=tmnxMsdpPeerStatsLastStChange, tmnxMsdpPeerDefaultPeer=tmnxMsdpPeerDefaultPeer, tmnxMsdpPeerGrpPeerAuthKey=tmnxMsdpPeerGrpPeerAuthKey, tmnxMsdpPeerGrpPeerStateTimer=tmnxMsdpPeerGrpPeerStateTimer, tmnxMsdpPeerGrpPeerExportPolicy3=tmnxMsdpPeerGrpPeerExportPolicy3, tmnxMsdpSourceSrcActMsgsExMax=tmnxMsdpSourceSrcActMsgsExMax, tmnxMsdpPeerGroupExportPolicy1=tmnxMsdpPeerGroupExportPolicy1, tmnxMsdpStatusActSrcLimExceeded=tmnxMsdpStatusActSrcLimExceeded, tmnxMsdpPeerMsgRcvRateThd=tmnxMsdpPeerMsgRcvRateThd, tmnxMsdpSrcActivePrLearnFrType=tmnxMsdpSrcActivePrLearnFrType, tmnxMsdpPeerTimeout=tmnxMsdpPeerTimeout, tmnxMsdpPeerGrpPeerExportPolicy2=tmnxMsdpPeerGrpPeerExportPolicy2, tmnxMsdpPeerGroupLocalAddress=tmnxMsdpPeerGroupLocalAddress, tmnxMsdpSourceRowStatus=tmnxMsdpSourceRowStatus, tmnxMsdpSrcActivePeerLearntFrom=tmnxMsdpSrcActivePeerLearntFrom, tmnxMsdpPeerGrpPeerAddressType=tmnxMsdpPeerGrpPeerAddressType, tmnxMsdpPeerExportPolicy2=tmnxMsdpPeerExportPolicy2, tmnxMsdpPeerGrpPeerMsgRcvRtTime=tmnxMsdpPeerGrpPeerMsgRcvRtTime, tmnxMsdpPeerGrpPeerExportPolicy5=tmnxMsdpPeerGrpPeerExportPolicy5, tmnxMsdpPeerLocalAddress=tmnxMsdpPeerLocalAddress, tmnxMsdpPeerGroupImportPolicy4=tmnxMsdpPeerGroupImportPolicy4, tmnxMsdpPeerGrpPeerLastUpOrDown=tmnxMsdpPeerGrpPeerLastUpOrDown, tmnxMsdpSARejectImportPolicy=tmnxMsdpSARejectImportPolicy, tmnxMsdpExportPolicy4=tmnxMsdpExportPolicy4, tmnxMsdpImportPolicy1=tmnxMsdpImportPolicy1, tmnxMsdpImportPolicy3=tmnxMsdpImportPolicy3, tmnxMsdpPeerGrpPeerAddress=tmnxMsdpPeerGrpPeerAddress, tmnxMsdpPeerStatsPeerTimeouts=tmnxMsdpPeerStatsPeerTimeouts, tmnxMsdpPeerGroupImportPolicy5=tmnxMsdpPeerGroupImportPolicy5, tmnxMsdpPeerGrpPeerConRetry=tmnxMsdpPeerGrpPeerConRetry, tmnxMsdpStatusPeersEstablished=tmnxMsdpStatusPeersEstablished, tmnxMsdpPeerEntry=tmnxMsdpPeerEntry, tmnxMsdpPeerLastASLimit=tmnxMsdpPeerLastASLimit, tmnxMsdpPeerConRetry=tmnxMsdpPeerConRetry, tmnxMsdpGroupSrcActMsgsExcd=tmnxMsdpGroupSrcActMsgsExcd, tmnxMsdpSourceGroup=tmnxMsdpSourceGroup, tmnxMsdpPeerGrpSARejExpPolicy=tmnxMsdpPeerGrpSARejExpPolicy, tmnxMsdpExportPolicy3=tmnxMsdpExportPolicy3, tmnxMsdpPeerStatsRPFFailures=tmnxMsdpPeerStatsRPFFailures, tmnxMsdpPeerGroupAdminState=tmnxMsdpPeerGroupAdminState, tmnxMsdpSrcActRejGroupAddr=tmnxMsdpSrcActRejGroupAddr, tmnxMsdpCompliance=tmnxMsdpCompliance, tmnxMsdpSrcActiveRejGroup=tmnxMsdpSrcActiveRejGroup, tmnxMsdpPeerGrpPeerAdminState=tmnxMsdpPeerGrpPeerAdminState, tmnxMsdpSrcActRejFailureReason=tmnxMsdpSrcActRejFailureReason, tmnxMsdpPeerAuthKey=tmnxMsdpPeerAuthKey, tmnxMsdpPeerGroupLocalAddrType=tmnxMsdpPeerGroupLocalAddrType, tmnxMsdpSrcActRejPeerGroupName=tmnxMsdpSrcActRejPeerGroupName, tmnxMsdpSourceDiscMethod=tmnxMsdpSourceDiscMethod, tmnxMsdpNotifyPrefix=tmnxMsdpNotifyPrefix, tmnxMsdpPeerStatsKAMsgsRecvd=tmnxMsdpPeerStatsKAMsgsRecvd, tmnxMsdpSourceLastExEventTime=tmnxMsdpSourceLastExEventTime, tmnxMsdpPeerStatsSARejExpPolicy=tmnxMsdpPeerStatsSARejExpPolicy, tmnxMsdpSrcActRejTable=tmnxMsdpSrcActRejTable, tmnxMsdpPeerStatsActSrcLimExcd=tmnxMsdpPeerStatsActSrcLimExcd, tmnxMsdpObjects=tmnxMsdpObjects, tmnxMsdpPeerAddressType=tmnxMsdpPeerAddressType, tmnxMsdpSrcActRejGroupAddrType=tmnxMsdpSrcActRejGroupAddrType, tmnxMsdpSrcActiveGroupAddrType=tmnxMsdpSrcActiveGroupAddrType, tmnxMsdpPeerStatsRemoteCloses=tmnxMsdpPeerStatsRemoteCloses, tmnxMsdpPeerExportPolicy5=tmnxMsdpPeerExportPolicy5, tmnxMsdpNotifications=tmnxMsdpNotifications, tmnxMsdpSrcActiveExpiryTime=tmnxMsdpSrcActiveExpiryTime, tmnxMsdpSourceMaxActiveSources=tmnxMsdpSourceMaxActiveSources, tmnxMsdpSrcActiveEntry=tmnxMsdpSrcActiveEntry, tmnxMsdpSrcActRejOriginRP=tmnxMsdpSrcActRejOriginRP, tmnxMsdpPeerStatsSAMsgsRecvd=tmnxMsdpPeerStatsSAMsgsRecvd, timetraMsdpMIBModule=timetraMsdpMIBModule, tmnxMsdpPeerGroupMsgRcvRateThd=tmnxMsdpPeerGroupMsgRcvRateThd, tmnxMsdpSrcActRejPeerAddr=tmnxMsdpSrcActRejPeerAddr, tmnxMsdpImportPolicy2=tmnxMsdpImportPolicy2, tmnxMsdpPeerStatsSAReqMsgsRecvd=tmnxMsdpPeerStatsSAReqMsgsRecvd, tmnxMsdpPeerStatsSAResMsgsRecvd=tmnxMsdpPeerStatsSAResMsgsRecvd, tmnxMsdpPeerAddress=tmnxMsdpPeerAddress, tmnxMsdpPeerGroupTable=tmnxMsdpPeerGroupTable, tmnxMsdpSrcActRejPeerAddrType=tmnxMsdpSrcActRejPeerAddrType, tmnxMsdpPeerImportPolicy2=tmnxMsdpPeerImportPolicy2, tmnxMsdpMsgRcvRate=tmnxMsdpMsgRcvRate, tmnxMsdpLocalAddressType=tmnxMsdpLocalAddressType, tmnxMsdpExportPolicy1=tmnxMsdpExportPolicy1, tmnxMsdpSourceSrcActMsgsExcd=tmnxMsdpSourceSrcActMsgsExcd, tmnxMsdpPeerGrpPeerEntry=tmnxMsdpPeerGrpPeerEntry, tmnxMsdpLocalAddress=tmnxMsdpLocalAddress, tmnxMsdpPeerTable=tmnxMsdpPeerTable, tmnxMsdpPeerGrpPeerImportPolicy3=tmnxMsdpPeerGrpPeerImportPolicy3, tmnxMsdpSrcActiveSourceAddr=tmnxMsdpSrcActiveSourceAddr, tmnxMsdpPeerGrpPeerLocAddrType=tmnxMsdpPeerGrpPeerLocAddrType, tmnxMsdpPeerGroup=tmnxMsdpPeerGroup, tmnxMsdpConformance=tmnxMsdpConformance, tmnxMsdpPeerGroupMsgRcvRateTime=tmnxMsdpPeerGroupMsgRcvRateTime, tmnxMsdpPeerMaxActiveSources=tmnxMsdpPeerMaxActiveSources, tmnxMsdpStatusPeerCount=tmnxMsdpStatusPeerCount, tmnxMsdpPeerStatsLastMsgPeer=tmnxMsdpPeerStatsLastMsgPeer, tmnxMsdpPeerGroupImportPolicy2=tmnxMsdpPeerGroupImportPolicy2, tmnxMsdpPeerGrpPeerExportPolicy1=tmnxMsdpPeerGrpPeerExportPolicy1, tmnxMsdpPeerRowStatus=tmnxMsdpPeerRowStatus, tmnxMsdpPeerGrpPeerSAAccepted=tmnxMsdpPeerGrpPeerSAAccepted, tmnxMsdpSrcActiveGroup=tmnxMsdpSrcActiveGroup, tmnxMsdpMsgRcvRateThd=tmnxMsdpMsgRcvRateThd, tmnxMsdpPeerStatsSALearnt=tmnxMsdpPeerStatsSALearnt, tmnxMsdpPeerImportPolicy1=tmnxMsdpPeerImportPolicy1, tmnxMsdpPeerGrpPeerState=tmnxMsdpPeerGrpPeerState, tmnxMsdpPeerGrpSARejImpPolicy=tmnxMsdpPeerGrpSARejImpPolicy, tmnxMsdpPeerGrpPeerAKeyEncrypt=tmnxMsdpPeerGrpPeerAKeyEncrypt, tmnxMsdpPeerGrpPeerMaxActSrcs=tmnxMsdpPeerGrpPeerMaxActSrcs, tmnxMsdpExportPolicy2=tmnxMsdpExportPolicy2, tmnxMsdpPeerGrpPeerImportPolicy5=tmnxMsdpPeerGrpPeerImportPolicy5, tmnxMsdpSrcActiveOriginRP=tmnxMsdpSrcActiveOriginRP, tmnxMsdpAdminState=tmnxMsdpAdminState, tmnxMsdpCompliances=tmnxMsdpCompliances, tmnxMsdpImportPolicy5=tmnxMsdpImportPolicy5, tmnxMsdpPeerImportPolicy5=tmnxMsdpPeerImportPolicy5, tmnxMsdpSourcePrefixType=tmnxMsdpSourcePrefixType, tmnxMsdpPeerGroupName=tmnxMsdpPeerGroupName, tmnxMsdpStatusLastTimeUp=tmnxMsdpStatusLastTimeUp, tmnxMsdpPeerGrpPeerMsgRcvRt=tmnxMsdpPeerGrpPeerMsgRcvRt, tmnxMsdpPeerStatsKAMsgsSent=tmnxMsdpPeerStatsKAMsgsSent, tmnxMsdpPeerMsgRcvRate=tmnxMsdpPeerMsgRcvRate, tmnxMsdpPeerGrpPeerLastASLimit=tmnxMsdpPeerGrpPeerLastASLimit, tmnxMsdpSourceMask=tmnxMsdpSourceMask)
