#
# PySNMP MIB module JUNIPER-RPF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-RPF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:00:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
jnxMibs, = mibBuilder.importSymbols("JUNIPER-SMI", "jnxMibs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Integer32, Counter32, Gauge32, MibIdentifier, Counter64, Bits, Unsigned32, NotificationType, iso, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Integer32", "Counter32", "Gauge32", "MibIdentifier", "Counter64", "Bits", "Unsigned32", "NotificationType", "iso", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
jnxRpf = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 17))
jnxRpf.setRevisions(('2002-02-25 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxRpf.setRevisionsDescriptions(('Initial revision',))
if mibBuilder.loadTexts: jnxRpf.setLastUpdated('200307182153Z')
if mibBuilder.loadTexts: jnxRpf.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxRpf.setContactInfo('Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net')
if mibBuilder.loadTexts: jnxRpf.setDescription("This is Juniper Networks' enterprise-specific MIB for Reverse Path Forwarding (RPF)")
jnxRpfStats = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 17, 1))
jnxRpfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 17, 1, 1), )
if mibBuilder.loadTexts: jnxRpfStatsTable.setStatus('current')
if mibBuilder.loadTexts: jnxRpfStatsTable.setDescription('This table contains statistics for traffic that is rejected due to RPF processing.')
jnxRpfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 17, 1, 1, 1), ).setIndexNames((0, "JUNIPER-RPF-MIB", "jnxRpfStatsIfIndex"), (0, "JUNIPER-RPF-MIB", "jnxRpfStatsAddrFamily"))
if mibBuilder.loadTexts: jnxRpfStatsEntry.setStatus('current')
if mibBuilder.loadTexts: jnxRpfStatsEntry.setDescription('Each entry in this table counts RPF-rejected traffic that is received on a particular interface and belongs to a particular address family.')
jnxRpfStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 17, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: jnxRpfStatsIfIndex.setStatus('current')
if mibBuilder.loadTexts: jnxRpfStatsIfIndex.setDescription('The ingress interface for traffic that is counted in this RpfStats entry.')
jnxRpfStatsAddrFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 17, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))))
if mibBuilder.loadTexts: jnxRpfStatsAddrFamily.setStatus('current')
if mibBuilder.loadTexts: jnxRpfStatsAddrFamily.setDescription("The address family of this entry's traffic.")
jnxRpfStatsPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 17, 1, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpfStatsPackets.setStatus('current')
if mibBuilder.loadTexts: jnxRpfStatsPackets.setDescription('The number of packets received on this interface, belonging to this address family, that have been rejected due to RPF processing.')
jnxRpfStatsBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 17, 1, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxRpfStatsBytes.setStatus('current')
if mibBuilder.loadTexts: jnxRpfStatsBytes.setDescription('The number of bytes received on this interface, belonging to this address family, that have been rejected due to RPF processing.')
mibBuilder.exportSymbols("JUNIPER-RPF-MIB", jnxRpfStatsBytes=jnxRpfStatsBytes, jnxRpfStatsEntry=jnxRpfStatsEntry, jnxRpfStatsPackets=jnxRpfStatsPackets, jnxRpfStatsTable=jnxRpfStatsTable, jnxRpfStats=jnxRpfStats, jnxRpf=jnxRpf, jnxRpfStatsAddrFamily=jnxRpfStatsAddrFamily, jnxRpfStatsIfIndex=jnxRpfStatsIfIndex, PYSNMP_MODULE_ID=jnxRpf)
