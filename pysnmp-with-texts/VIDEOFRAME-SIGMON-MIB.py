#
# PySNMP MIB module VIDEOFRAME-SIGMON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VIDEOFRAME-SIGMON-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:34:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ObjectIdentity, Counter32, Gauge32, Counter64, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Bits, NotificationType, TimeTicks, IpAddress, Integer32, ModuleIdentity, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter32", "Gauge32", "Counter64", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Bits", "NotificationType", "TimeTicks", "IpAddress", "Integer32", "ModuleIdentity", "MibIdentifier")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
vfBoxId, = mibBuilder.importSymbols("VIDEOFRAME-GENERIC-MIB", "vfBoxId")
vfMIBModules, vfProducts, vfProductsReg = mibBuilder.importSymbols("VIDEOFRAME-REGISTRATIONS-MIB", "vfMIBModules", "vfProducts", "vfProductsReg")
videoframeSigmonMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4596, 6, 1, 3))
videoframeSigmonMIB.setRevisions(('1901-08-30 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: videoframeSigmonMIB.setRevisionsDescriptions(('First release.',))
if mibBuilder.loadTexts: videoframeSigmonMIB.setLastUpdated('0101190000Z')
if mibBuilder.loadTexts: videoframeSigmonMIB.setOrganization('Videoframe Systems')
if mibBuilder.loadTexts: videoframeSigmonMIB.setContactInfo('Videoframe Systems P.O. Box 1991, Grass Valley, CA 95945, USA. +1 (530) 477-2000 http://www.videoframesystems.com')
if mibBuilder.loadTexts: videoframeSigmonMIB.setDescription('This MIB describes the device specific objects of the Videoframe Signal Monitoring Frame, and augments MIB-2 and VF-GENERIC in the identification of this Videoframe Systems managed device. This module will be extended, or modified as required. Videoframe Systems reserves the right to make changes in specification and other information contained in this document without prior notice. The reader should consult Videoframe Systems to determine whether any such changes have been made. In no event shall Videoframe Systems be liable for any incidental, indirect, special, or consequential damages whatsoever (including but not limited to lost profits) arising out of or related to this document or the information contained in it. Videoframe Systems grants vendors, end-users, and other interested parties a non-exclusive license to use this specification in connection with the management of Videoframe Systems products. Copyright 2001 Videoframe, Inc.')
vfProductsSignalMonitoringFrameReg = ObjectIdentity((1, 3, 6, 1, 4, 1, 4596, 6, 2, 4))
if mibBuilder.loadTexts: vfProductsSignalMonitoringFrameReg.setStatus('current')
if mibBuilder.loadTexts: vfProductsSignalMonitoringFrameReg.setDescription('Videoframe signal monitoring frame with hot-swappable modules, and monitoring via SNMP and gvg modular protocol.')
vfProductsVF200Reg = ObjectIdentity((1, 3, 6, 1, 4, 1, 4596, 6, 2, 5))
if mibBuilder.loadTexts: vfProductsVF200Reg.setStatus('current')
if mibBuilder.loadTexts: vfProductsVF200Reg.setDescription('VF200 2RU modular frame for Signal Monitoring and machine control functions.')
vfSigmonFrame = MibIdentifier((1, 3, 6, 1, 4, 1, 4596, 4, 2))
vfSigmonFrameModuleTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 4596, 4, 2, 1))
vfSigmonFrameEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 4596, 4, 2, 8))
vfSigmonFrameEventsV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 4596, 4, 2, 8, 0))
vfSigmonFrameDerivedEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 4596, 4, 2, 9))
vfSigmonFrameDerivedEventsV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 4596, 4, 2, 9, 0))
vfFrameSlotTable = MibTable((1, 3, 6, 1, 4, 1, 4596, 4, 2, 2), )
if mibBuilder.loadTexts: vfFrameSlotTable.setStatus('current')
if mibBuilder.loadTexts: vfFrameSlotTable.setDescription('Each row contains information about one slot in the managed VF200 frame.')
vfFrameSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4596, 4, 2, 2, 1), ).setIndexNames((0, "VIDEOFRAME-SIGMON-MIB", "vfFrameSlotNumber"))
if mibBuilder.loadTexts: vfFrameSlotEntry.setStatus('current')
if mibBuilder.loadTexts: vfFrameSlotEntry.setDescription('Information about one slot in the managed VF200 frame.')
vfFrameSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfFrameSlotNumber.setStatus('current')
if mibBuilder.loadTexts: vfFrameSlotNumber.setDescription('Slot number in frame.')
vfFrameSlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("empty", 1), ("moduleUninitialized", 2), ("moduleValid", 3), ("illegalSlot", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfFrameSlotStatus.setStatus('current')
if mibBuilder.loadTexts: vfFrameSlotStatus.setDescription('State of this slot. Illegal means the slot does not exist. moduleValid means the correct firmware has been loaded to the module and it is ready for operation.')
vfModuleTypeRegObjectID = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 2, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfModuleTypeRegObjectID.setStatus('current')
if mibBuilder.loadTexts: vfModuleTypeRegObjectID.setDescription('MIB-registered identification of the module currently installed in this slot.')
vfModuleTypeRootOID = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 2, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfModuleTypeRootOID.setStatus('current')
if mibBuilder.loadTexts: vfModuleTypeRootOID.setDescription('Root OID of the module-specific managed information for the module currently installed in this slot.')
vfModulePartNo = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfModulePartNo.setStatus('current')
if mibBuilder.loadTexts: vfModulePartNo.setDescription('Videoframe part no. of module currently installed in slot - should match module nameplate.')
vfModuleDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfModuleDescription.setStatus('current')
if mibBuilder.loadTexts: vfModuleDescription.setDescription('Description of module currently installed in slot - should match module nameplate.')
vfModuleTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vfModuleTrapEnable.setStatus('current')
if mibBuilder.loadTexts: vfModuleTrapEnable.setDescription('Enables or disables the Trap that is associated with a slot status change event or module event.')
vfModuleAlarmAutoReArm = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vfModuleAlarmAutoReArm.setStatus('current')
if mibBuilder.loadTexts: vfModuleAlarmAutoReArm.setDescription('Enables or disables automatic re-arming of alarms from signal monitoring modules.')
vfFrameOfflineSwitch = MibScalar((1, 3, 6, 1, 4, 1, 4596, 4, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfFrameOfflineSwitch.setStatus('current')
if mibBuilder.loadTexts: vfFrameOfflineSwitch.setDescription("Indicates the state of the 'offline' switch for the frame. 'offline' indicates the switch is set to take the frame offline.")
vfFrameLocateIndicator = MibScalar((1, 3, 6, 1, 4, 1, 4596, 4, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flash", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vfFrameLocateIndicator.setStatus('current')
if mibBuilder.loadTexts: vfFrameLocateIndicator.setDescription('Set to flash (1) to cause the locate LED on the front of the frame to begin flashing. Set to off to stop flashing. This is used to verify the identity of a particular unit among racks of units.')
vfFrameAdminState = MibScalar((1, 3, 6, 1, 4, 1, 4596, 4, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vfFrameOnline", 1), ("vfFrameInMaintenance", 2), ("vfFrameDisabled", 3), ("vfFrameResetting", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vfFrameAdminState.setStatus('current')
if mibBuilder.loadTexts: vfFrameAdminState.setDescription('The desired operational state of this device. Use this object to command the frame to a different operational state (vfBoxState from the vf-generic MIB module). NOTE: It is mandatory that a managed device support all of the enumerated device states. vfFrameOnline(1) - The device is running and ready to process load. vfFrameInMaintenance(2) - The device is online, but either the device as a whole, or one or more of its components are in maintenance mode. Maintenance mode could be described as a mode where diagnostics are being run on the device, or some tasks such as device configuration are being excuted on the device that has inhibited its normal operation. vfFrameDisabled(3) - The device has been explicitly disabled from its normal mode of operation, such as when selected as the backup of a redundant pair. vfFrameResetting(4) - The device is in a reset cycle. Any information collected, or dynamic configuration of the device prior to this state may be lost.')
vfNumDerivedNotifications = MibScalar((1, 3, 6, 1, 4, 1, 4596, 4, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfNumDerivedNotifications.setStatus('current')
if mibBuilder.loadTexts: vfNumDerivedNotifications.setDescription('Number of derived notifications defined in vf200 configuration file for this unit. Gives size of derived notifications table.')
vfDerivedNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 4596, 4, 2, 7), )
if mibBuilder.loadTexts: vfDerivedNotificationTable.setStatus('current')
if mibBuilder.loadTexts: vfDerivedNotificationTable.setDescription('Each row contains information about one derived notification defined for the managed VF200 frame.')
vfDerivedNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4596, 4, 2, 7, 1), ).setIndexNames((0, "VIDEOFRAME-SIGMON-MIB", "vfDnFunctionNumber"))
if mibBuilder.loadTexts: vfDerivedNotificationEntry.setStatus('current')
if mibBuilder.loadTexts: vfDerivedNotificationEntry.setDescription('A row in the derived notification table.')
vfDnFunctionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfDnFunctionNumber.setStatus('current')
if mibBuilder.loadTexts: vfDnFunctionNumber.setDescription('Derived Notification Function Number. Identifies derived notification function, define in frame config. file.')
vfDnFunctionDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfDnFunctionDescription.setStatus('current')
if mibBuilder.loadTexts: vfDnFunctionDescription.setDescription('Derived Notification Description. Describes derived notification function for the operator. Set in frame config. file.')
vfDnNotificationLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("levelA", 1), ("levelB", 2), ("levelC", 3), ("levelD", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vfDnNotificationLevel.setStatus('current')
if mibBuilder.loadTexts: vfDnNotificationLevel.setDescription('Notification level for this derived notification. selects which trap will be sent for the notification, out of four possible.')
vfDnNotificationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vfDnNotificationEnable.setStatus('current')
if mibBuilder.loadTexts: vfDnNotificationEnable.setDescription('Use to enable or disable this derived notification function.')
vfDnNotificationAutoReArm = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vfDnNotificationAutoReArm.setStatus('current')
if mibBuilder.loadTexts: vfDnNotificationAutoReArm.setDescription('Use to enable or disable automatic re-arming of this derived notification function. Auto re-arming allows multiple unacknowledged activations of the derived notification. It re-arms the function after notification so that the specified alarms are again monitored according to the logic function.')
vfDnNotificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("triggered", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vfDnNotificationState.setStatus('current')
if mibBuilder.loadTexts: vfDnNotificationState.setDescription('The current state of this derived notification function.')
vfDnNotificationAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 4596, 4, 2, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("unacknowledged", 2), ("acknowledge", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vfDnNotificationAcknowledge.setStatus('current')
if mibBuilder.loadTexts: vfDnNotificationAcknowledge.setDescription('Use to acknowledge a derived notification. If notificationAutoReArm is disabled, this will re-arm the notification. Otherwise, it is automatically re-armed, and this object is not used.')
vfFrameSlotStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 4596, 4, 2, 8, 0, 1)).setObjects(("VIDEOFRAME-GENERIC-MIB", "vfBoxId"), ("VIDEOFRAME-SIGMON-MIB", "vfFrameSlotStatus"), ("VIDEOFRAME-SIGMON-MIB", "vfModulePartNo"), ("VIDEOFRAME-SIGMON-MIB", "vfModuleDescription"))
if mibBuilder.loadTexts: vfFrameSlotStatusChange.setStatus('current')
if mibBuilder.loadTexts: vfFrameSlotStatusChange.setDescription('A slot status change occurred.')
derivedNotificationLevelA = NotificationType((1, 3, 6, 1, 4, 1, 4596, 4, 2, 9, 0, 1)).setObjects(("VIDEOFRAME-GENERIC-MIB", "vfBoxId"), ("VIDEOFRAME-SIGMON-MIB", "vfDnFunctionNumber"), ("VIDEOFRAME-SIGMON-MIB", "vfDnFunctionDescription"))
if mibBuilder.loadTexts: derivedNotificationLevelA.setStatus('current')
if mibBuilder.loadTexts: derivedNotificationLevelA.setDescription('A LevelA derived notification was triggered.')
derivedNotificationLevelB = NotificationType((1, 3, 6, 1, 4, 1, 4596, 4, 2, 9, 0, 2)).setObjects(("VIDEOFRAME-GENERIC-MIB", "vfBoxId"), ("VIDEOFRAME-SIGMON-MIB", "vfDnFunctionNumber"), ("VIDEOFRAME-SIGMON-MIB", "vfDnFunctionDescription"))
if mibBuilder.loadTexts: derivedNotificationLevelB.setStatus('current')
if mibBuilder.loadTexts: derivedNotificationLevelB.setDescription('A LevelB derived notification was triggered.')
derivedNotificationLevelC = NotificationType((1, 3, 6, 1, 4, 1, 4596, 4, 2, 9, 0, 3)).setObjects(("VIDEOFRAME-GENERIC-MIB", "vfBoxId"), ("VIDEOFRAME-SIGMON-MIB", "vfDnFunctionNumber"), ("VIDEOFRAME-SIGMON-MIB", "vfDnFunctionDescription"))
if mibBuilder.loadTexts: derivedNotificationLevelC.setStatus('current')
if mibBuilder.loadTexts: derivedNotificationLevelC.setDescription('A LevelC derived notification was triggered.')
derivedNotificationLevelD = NotificationType((1, 3, 6, 1, 4, 1, 4596, 4, 2, 9, 0, 4)).setObjects(("VIDEOFRAME-GENERIC-MIB", "vfBoxId"), ("VIDEOFRAME-SIGMON-MIB", "vfDnFunctionNumber"), ("VIDEOFRAME-SIGMON-MIB", "vfDnFunctionDescription"))
if mibBuilder.loadTexts: derivedNotificationLevelD.setStatus('current')
if mibBuilder.loadTexts: derivedNotificationLevelD.setDescription('A LevelD derived notification was triggered.')
mibBuilder.exportSymbols("VIDEOFRAME-SIGMON-MIB", vfFrameLocateIndicator=vfFrameLocateIndicator, vfNumDerivedNotifications=vfNumDerivedNotifications, vfDnNotificationEnable=vfDnNotificationEnable, vfDerivedNotificationTable=vfDerivedNotificationTable, vfDnFunctionNumber=vfDnFunctionNumber, vfSigmonFrameEventsV2=vfSigmonFrameEventsV2, videoframeSigmonMIB=videoframeSigmonMIB, vfDnNotificationAcknowledge=vfDnNotificationAcknowledge, vfModuleTrapEnable=vfModuleTrapEnable, derivedNotificationLevelA=derivedNotificationLevelA, vfModuleTypeRootOID=vfModuleTypeRootOID, vfDerivedNotificationEntry=vfDerivedNotificationEntry, vfProductsSignalMonitoringFrameReg=vfProductsSignalMonitoringFrameReg, vfDnNotificationAutoReArm=vfDnNotificationAutoReArm, vfSigmonFrameDerivedEventsV2=vfSigmonFrameDerivedEventsV2, PYSNMP_MODULE_ID=videoframeSigmonMIB, vfSigmonFrameModuleTypes=vfSigmonFrameModuleTypes, vfFrameAdminState=vfFrameAdminState, vfModuleDescription=vfModuleDescription, derivedNotificationLevelC=derivedNotificationLevelC, vfModuleAlarmAutoReArm=vfModuleAlarmAutoReArm, derivedNotificationLevelD=derivedNotificationLevelD, vfSigmonFrameEvents=vfSigmonFrameEvents, vfFrameSlotStatusChange=vfFrameSlotStatusChange, derivedNotificationLevelB=derivedNotificationLevelB, vfProductsVF200Reg=vfProductsVF200Reg, vfSigmonFrameDerivedEvents=vfSigmonFrameDerivedEvents, vfFrameSlotTable=vfFrameSlotTable, vfFrameOfflineSwitch=vfFrameOfflineSwitch, vfSigmonFrame=vfSigmonFrame, vfFrameSlotEntry=vfFrameSlotEntry, vfDnNotificationLevel=vfDnNotificationLevel, vfModuleTypeRegObjectID=vfModuleTypeRegObjectID, vfDnFunctionDescription=vfDnFunctionDescription, vfFrameSlotStatus=vfFrameSlotStatus, vfModulePartNo=vfModulePartNo, vfFrameSlotNumber=vfFrameSlotNumber, vfDnNotificationState=vfDnNotificationState)
