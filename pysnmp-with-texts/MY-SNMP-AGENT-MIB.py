#
# PySNMP MIB module MY-SNMP-AGENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MY-SNMP-AGENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:16:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
myMgmt, = mibBuilder.importSymbols("MY-SMI", "myMgmt")
MyTrapType, ConfigStatus = mibBuilder.importSymbols("MY-TC", "MyTrapType", "ConfigStatus")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, NotificationType, MibIdentifier, Gauge32, Bits, iso, Counter64, TimeTicks, ModuleIdentity, ObjectIdentity, Counter32, Integer32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "NotificationType", "MibIdentifier", "Gauge32", "Bits", "iso", "Counter64", "TimeTicks", "ModuleIdentity", "ObjectIdentity", "Counter32", "Integer32", "IpAddress")
DisplayString, TextualConvention, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue", "RowStatus")
mySnmpAgentMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 5))
mySnmpAgentMIB.setRevisions(('2002-03-20 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: mySnmpAgentMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: mySnmpAgentMIB.setLastUpdated('200203200000Z')
if mibBuilder.loadTexts: mySnmpAgentMIB.setOrganization('D-Link Crop.')
if mibBuilder.loadTexts: mySnmpAgentMIB.setContactInfo(' http://support.dlink.com')
if mibBuilder.loadTexts: mySnmpAgentMIB.setDescription('This module defines my SNMP agent mibs.')
mySnmpAgentMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 5, 1))
mySnmpCommunityObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 5, 1, 1))
mySnmpTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 5, 1, 2))
class Community(DisplayString):
    description = 'community string for the implementation, maximum length of community strings limited to 32 octets.'
    status = 'current'
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(1, 32)

myCommunityMaxNum = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myCommunityMaxNum.setStatus('current')
if mibBuilder.loadTexts: myCommunityMaxNum.setDescription('Number of Max of communities which the SNMP Agent support.')
myCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 5, 1, 1, 2), )
if mibBuilder.loadTexts: myCommunityTable.setStatus('current')
if mibBuilder.loadTexts: myCommunityTable.setDescription('A list of SNMP Community configurations.')
myCommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 5, 1, 1, 2, 1), ).setIndexNames((0, "MY-SNMP-AGENT-MIB", "myCommunityName"))
if mibBuilder.loadTexts: myCommunityEntry.setStatus('current')
if mibBuilder.loadTexts: myCommunityEntry.setDescription('Obtain information of SNMP Community configuration.')
myCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 5, 1, 1, 2, 1, 1), Community()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myCommunityName.setStatus('current')
if mibBuilder.loadTexts: myCommunityName.setDescription('Community used by this entry.This value is unique for every entry. When this string be used as an index,Value of a sub-identifier equal ASCII value of corresponding character(first sub-identifier corresponds first character of string). The number of sub-identifiers of this string must be 32,If length of string is less than 32 the sub-identifier(0x0) will be filled in tail.')
myCommunityWritable = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 5, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readonly", 1), ("writable", 2))).clone('readonly')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myCommunityWritable.setStatus('current')
if mibBuilder.loadTexts: myCommunityWritable.setDescription('Authority of this community')
myCommunityUserIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 5, 1, 1, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myCommunityUserIpAddr.setStatus('current')
if mibBuilder.loadTexts: myCommunityUserIpAddr.setDescription("IP address use for the authentication of a user, if the associated object myCommunityEnableIpAddrAuthen status is enable(1), the all messages send to the agent will be authened by community and this IP address. messages that can't pass the authentication will be discarded.")
myCommunityEnableIpAddrAuthen = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 5, 1, 1, 2, 1, 4), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myCommunityEnableIpAddrAuthen.setStatus('current')
if mibBuilder.loadTexts: myCommunityEnableIpAddrAuthen.setDescription('this object offer the means to enable of disable the IP authentications of SNMP message.')
myCommunityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 5, 1, 1, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: myCommunityStatus.setStatus('current')
if mibBuilder.loadTexts: myCommunityStatus.setDescription('entry status of this entry. and the means in this enviraments can reffer to the text-convention definition of the RowStatus.')
myTrapDstMaxNumber = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 5, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myTrapDstMaxNumber.setStatus('current')
if mibBuilder.loadTexts: myTrapDstMaxNumber.setDescription('Number of destination address table entries.')
myTrapDstTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 5, 1, 2, 2), )
if mibBuilder.loadTexts: myTrapDstTable.setStatus('current')
if mibBuilder.loadTexts: myTrapDstTable.setDescription('table of destination hosts that the trap will be sent to.')
myTrapDstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 5, 1, 2, 2, 1), ).setIndexNames((0, "MY-SNMP-AGENT-MIB", "myTrapDstAddr"))
if mibBuilder.loadTexts: myTrapDstEntry.setStatus('current')
if mibBuilder.loadTexts: myTrapDstEntry.setDescription('list of hosts.')
myTrapDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 5, 1, 2, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myTrapDstAddr.setStatus('current')
if mibBuilder.loadTexts: myTrapDstAddr.setDescription('the destination address of a host the trap will be sent to.')
myTrapDstCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 5, 1, 2, 2, 1, 2), Community().clone('public')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myTrapDstCommunity.setStatus('current')
if mibBuilder.loadTexts: myTrapDstCommunity.setDescription("the destination host's SNMP Client wish to receive the community in the trap send by agent.")
myTrapDstSendTrapClass = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 5, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("snmpv1-Trap", 1), ("snmpv2c-Trap", 2))).clone('snmpv1-Trap')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myTrapDstSendTrapClass.setStatus('current')
if mibBuilder.loadTexts: myTrapDstSendTrapClass.setDescription('Indicates that the SNMP entity will send which kind of trap SNMPv1-Trap and SNMPv2-Trap')
myTrapDstEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 5, 1, 2, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: myTrapDstEntryStatus.setStatus('current')
if mibBuilder.loadTexts: myTrapDstEntryStatus.setDescription('entry status of this entry. and the means in this enviraments can reffer to the text-convention definition of the RowStatus.')
myTrapActionTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 5, 1, 2, 3), )
if mibBuilder.loadTexts: myTrapActionTable.setStatus('current')
if mibBuilder.loadTexts: myTrapActionTable.setDescription("This table of the trap's action.")
myTrapActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 5, 1, 2, 3, 1), ).setIndexNames((0, "MY-SNMP-AGENT-MIB", "myTrapType"))
if mibBuilder.loadTexts: myTrapActionEntry.setStatus('current')
if mibBuilder.loadTexts: myTrapActionEntry.setDescription("List of of the trap's action.")
myTrapType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 5, 1, 2, 3, 1, 1), MyTrapType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: myTrapType.setStatus('current')
if mibBuilder.loadTexts: myTrapType.setDescription('Trap type identifier, every kind of trap which the system support will has one entry in this table.')
myTrapAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 5, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("sendtrap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: myTrapAction.setStatus('current')
if mibBuilder.loadTexts: myTrapAction.setDescription('This value decide how to deal with when this type trap has happened.')
mySnmpAgentMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 5, 2))
mySnmpAgentMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 5, 2, 1))
mySnmpAgentMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 5, 2, 2))
mySnmpAgentMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 5, 2, 1, 1)).setObjects(("MY-SNMP-AGENT-MIB", "myCommunityMIBGroup"), ("MY-SNMP-AGENT-MIB", "mySnmpTrapMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mySnmpAgentMIBCompliance = mySnmpAgentMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: mySnmpAgentMIBCompliance.setDescription('The compliance statement for entities which implement the My SnmpAgent MIB')
myCommunityMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 5, 2, 2, 1)).setObjects(("MY-SNMP-AGENT-MIB", "myCommunityMaxNum"), ("MY-SNMP-AGENT-MIB", "myCommunityName"), ("MY-SNMP-AGENT-MIB", "myCommunityWritable"), ("MY-SNMP-AGENT-MIB", "myCommunityUserIpAddr"), ("MY-SNMP-AGENT-MIB", "myCommunityEnableIpAddrAuthen"), ("MY-SNMP-AGENT-MIB", "myCommunityStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    myCommunityMIBGroup = myCommunityMIBGroup.setStatus('current')
if mibBuilder.loadTexts: myCommunityMIBGroup.setDescription('A collection of objects providing community management to a My agent.')
mySnmpTrapMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 10, 97, 2, 5, 2, 2, 2)).setObjects(("MY-SNMP-AGENT-MIB", "myTrapDstSendTrapClass"), ("MY-SNMP-AGENT-MIB", "myTrapDstMaxNumber"), ("MY-SNMP-AGENT-MIB", "myTrapDstAddr"), ("MY-SNMP-AGENT-MIB", "myTrapDstCommunity"), ("MY-SNMP-AGENT-MIB", "myTrapDstEntryStatus"), ("MY-SNMP-AGENT-MIB", "myTrapType"), ("MY-SNMP-AGENT-MIB", "myTrapAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mySnmpTrapMIBGroup = mySnmpTrapMIBGroup.setStatus('current')
if mibBuilder.loadTexts: mySnmpTrapMIBGroup.setDescription('A collection of objects providing trap information to a My agent.')
mibBuilder.exportSymbols("MY-SNMP-AGENT-MIB", myTrapDstEntry=myTrapDstEntry, Community=Community, mySnmpAgentMIBCompliances=mySnmpAgentMIBCompliances, myTrapDstCommunity=myTrapDstCommunity, myTrapDstEntryStatus=myTrapDstEntryStatus, myCommunityEntry=myCommunityEntry, myTrapActionEntry=myTrapActionEntry, mySnmpAgentMIBGroups=mySnmpAgentMIBGroups, myCommunityWritable=myCommunityWritable, myCommunityName=myCommunityName, myTrapDstMaxNumber=myTrapDstMaxNumber, myCommunityTable=myCommunityTable, myCommunityStatus=myCommunityStatus, myTrapActionTable=myTrapActionTable, myTrapAction=myTrapAction, mySnmpAgentMIBConformance=mySnmpAgentMIBConformance, mySnmpAgentMIBObjects=mySnmpAgentMIBObjects, mySnmpAgentMIBCompliance=mySnmpAgentMIBCompliance, mySnmpTrapObjects=mySnmpTrapObjects, myTrapDstSendTrapClass=myTrapDstSendTrapClass, PYSNMP_MODULE_ID=mySnmpAgentMIB, myTrapDstTable=myTrapDstTable, myCommunityMaxNum=myCommunityMaxNum, myCommunityUserIpAddr=myCommunityUserIpAddr, mySnmpAgentMIB=mySnmpAgentMIB, myCommunityEnableIpAddrAuthen=myCommunityEnableIpAddrAuthen, myCommunityMIBGroup=myCommunityMIBGroup, myTrapType=myTrapType, mySnmpTrapMIBGroup=mySnmpTrapMIBGroup, myTrapDstAddr=myTrapDstAddr, mySnmpCommunityObjects=mySnmpCommunityObjects)
