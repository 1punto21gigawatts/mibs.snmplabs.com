#
# PySNMP MIB module LINKSYS-MODEL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LINKSYS-MODEL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:07:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
OwnerString, = mibBuilder.importSymbols("IF-MIB", "OwnerString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Unsigned32, Counter64, NotificationType, ModuleIdentity, iso, TimeTicks, Integer32, ObjectIdentity, MibIdentifier, Counter32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Unsigned32", "Counter64", "NotificationType", "ModuleIdentity", "iso", "TimeTicks", "Integer32", "ObjectIdentity", "MibIdentifier", "Counter32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32")
TextualConvention, DisplayString, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "PhysAddress")
internet = MibIdentifier((1, 3, 6, 1))
directory = MibIdentifier((1, 3, 6, 1, 1))
mgmt = MibIdentifier((1, 3, 6, 1, 2))
experimental = MibIdentifier((1, 3, 6, 1, 3))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
linksys = MibIdentifier((1, 3, 6, 1, 4, 1, 3955))
common = MibIdentifier((1, 3, 6, 1, 4, 1, 3955, 1))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 3955, 2))
snmpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3955, 3))
commonMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3955, 3, 1))
internetAccessMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3955, 3, 4))
broadbandGateway = MibIdentifier((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1))
commonModelId = MibScalar((1, 3, 6, 1, 4, 1, 3955, 1, 1), OwnerString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonModelId.setStatus('mandatory')
if mibBuilder.loadTexts: commonModelId.setDescription(' The hardware model ID of this managed node. ')
commonSoftwareVer = MibScalar((1, 3, 6, 1, 4, 1, 3955, 1, 2), OwnerString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonSoftwareVer.setStatus('mandatory')
if mibBuilder.loadTexts: commonSoftwareVer.setDescription(' The software version of this managed node. ')
commonFirmwareVer = MibScalar((1, 3, 6, 1, 4, 1, 3955, 1, 3), OwnerString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: commonFirmwareVer.setStatus('mandatory')
if mibBuilder.loadTexts: commonFirmwareVer.setDescription(' The firmware version of this managed node. ')
mgtWarmStart = MibScalar((1, 3, 6, 1, 4, 1, 3955, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgtWarmStart.setStatus('mandatory')
if mibBuilder.loadTexts: mgtWarmStart.setDescription(' ')
mgtFactoryReset = MibScalar((1, 3, 6, 1, 4, 1, 3955, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgtFactoryReset.setStatus('mandatory')
if mibBuilder.loadTexts: mgtFactoryReset.setDescription(' ')
mgtAdministrator = MibScalar((1, 3, 6, 1, 4, 1, 3955, 3, 1, 3), OwnerString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgtAdministrator.setStatus('mandatory')
if mibBuilder.loadTexts: mgtAdministrator.setDescription(' ')
mgtBootStatus = MibScalar((1, 3, 6, 1, 4, 1, 3955, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("abnormal", 0), ("normal", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtBootStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mgtBootStatus.setDescription(' ')
mgtRefreshMIB = MibScalar((1, 3, 6, 1, 4, 1, 3955, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("apply", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgtRefreshMIB.setStatus('mandatory')
if mibBuilder.loadTexts: mgtRefreshMIB.setDescription('Refresh Enterprise MIB object data from RAM NV.')
mgtUpdateNV = MibScalar((1, 3, 6, 1, 4, 1, 3955, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("apply", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgtUpdateNV.setStatus('mandatory')
if mibBuilder.loadTexts: mgtUpdateNV.setDescription('Save Enterprise MIB Object data to RAM NV and Flash, and reboot system.')
mgtCommunityTable = MibTable((1, 3, 6, 1, 4, 1, 3955, 3, 1, 7), )
if mibBuilder.loadTexts: mgtCommunityTable.setStatus('mandatory')
if mibBuilder.loadTexts: mgtCommunityTable.setDescription(' Table of access community. ')
mgtCommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3955, 3, 1, 7, 1), ).setIndexNames((0, "LINKSYS-MODEL-MIB", "mgtCommunityIndex"))
if mibBuilder.loadTexts: mgtCommunityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mgtCommunityEntry.setDescription(' An entry in the table, containing read/write community names. ')
mgtCommunityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgtCommunityIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mgtCommunityIndex.setDescription(' ')
mgtCommunityName = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 1, 7, 1, 2), OwnerString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgtCommunityName.setStatus('mandatory')
if mibBuilder.loadTexts: mgtCommunityName.setDescription(' ')
mgtCommunityType = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("read-only", 1), ("read-write", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgtCommunityType.setStatus('mandatory')
if mibBuilder.loadTexts: mgtCommunityType.setDescription(' ')
hostName = MibScalar((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 1), OwnerString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostName.setStatus('mandatory')
if mibBuilder.loadTexts: hostName.setDescription(' ')
domainName = MibScalar((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 2), OwnerString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: domainName.setStatus('mandatory')
if mibBuilder.loadTexts: domainName.setDescription(' ')
netAddressLAN = MibScalar((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netAddressLAN.setStatus('mandatory')
if mibBuilder.loadTexts: netAddressLAN.setDescription(' ')
physicalAddrLAN = MibScalar((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physicalAddrLAN.setStatus('mandatory')
if mibBuilder.loadTexts: physicalAddrLAN.setDescription(' ')
subnetMaskLAN = MibScalar((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetMaskLAN.setStatus('mandatory')
if mibBuilder.loadTexts: subnetMaskLAN.setDescription(' ')
dhcpStatusWAN = MibScalar((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("specific", 1), ("dynamic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpStatusWAN.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpStatusWAN.setDescription(' ')
netAddressWAN = MibScalar((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netAddressWAN.setStatus('mandatory')
if mibBuilder.loadTexts: netAddressWAN.setDescription(' ')
physicalAddrWAN = MibScalar((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 8), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: physicalAddrWAN.setStatus('mandatory')
if mibBuilder.loadTexts: physicalAddrWAN.setDescription(' ')
subnetMaskWAN = MibScalar((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetMaskWAN.setStatus('mandatory')
if mibBuilder.loadTexts: subnetMaskWAN.setDescription(' ')
defaultbroadbandGatewayWAN = MibScalar((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: defaultbroadbandGatewayWAN.setStatus('mandatory')
if mibBuilder.loadTexts: defaultbroadbandGatewayWAN.setDescription(' ')
loginStatus = MibScalar((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("pppoe", 1), ("ras", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loginStatus.setStatus('mandatory')
if mibBuilder.loadTexts: loginStatus.setDescription(' ')
loginUserName = MibScalar((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 12), OwnerString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loginUserName.setStatus('mandatory')
if mibBuilder.loadTexts: loginUserName.setDescription(' ')
loginPassword = MibScalar((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 13), OwnerString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loginPassword.setStatus('mandatory')
if mibBuilder.loadTexts: loginPassword.setDescription(' ')
rasPlan = MibScalar((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ethernet-512k", 0), ("ethernet-256k", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rasPlan.setStatus('mandatory')
if mibBuilder.loadTexts: rasPlan.setDescription(' ')
connectedState = MibScalar((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("keepAlive", 0), ("onDemand", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectedState.setStatus('mandatory')
if mibBuilder.loadTexts: connectedState.setDescription(' ')
connectedIdleTime = MibScalar((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: connectedIdleTime.setStatus('mandatory')
if mibBuilder.loadTexts: connectedIdleTime.setDescription(' ')
dhcpStatusLAN = MibScalar((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpStatusLAN.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpStatusLAN.setDescription(' ')
dhcpStartNetAddr = MibScalar((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 18), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpStartNetAddr.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpStartNetAddr.setDescription(' ')
dhcpNumberUsers = MibScalar((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpNumberUsers.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpNumberUsers.setDescription(' ')
workingMode = MibScalar((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("broadbandGateway", 1), ("router", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: workingMode.setStatus('mandatory')
if mibBuilder.loadTexts: workingMode.setDescription(' ')
dynamicRoutingTX = MibScalar((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("rip1", 1), ("rip1-compatible", 2), ("rip2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicRoutingTX.setStatus('mandatory')
if mibBuilder.loadTexts: dynamicRoutingTX.setDescription(' ')
dynamicRoutingRX = MibScalar((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("rip1", 1), ("rip2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicRoutingRX.setStatus('mandatory')
if mibBuilder.loadTexts: dynamicRoutingRX.setDescription(' ')
spiStatus = MibScalar((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: spiStatus.setStatus('mandatory')
if mibBuilder.loadTexts: spiStatus.setDescription(' ')
wanReqBlockStatus = MibScalar((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wanReqBlockStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wanReqBlockStatus.setDescription(' ')
ipSecPassThroughStatus = MibScalar((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSecPassThroughStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ipSecPassThroughStatus.setDescription(' ')
pptpPassThroughStatus = MibScalar((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pptpPassThroughStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pptpPassThroughStatus.setDescription(' ')
remoteMgtStatus = MibScalar((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteMgtStatus.setStatus('mandatory')
if mibBuilder.loadTexts: remoteMgtStatus.setDescription(' ')
remoteUpgradeStatus = MibScalar((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteUpgradeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: remoteUpgradeStatus.setDescription(' ')
accessLogStatus = MibScalar((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessLogStatus.setStatus('mandatory')
if mibBuilder.loadTexts: accessLogStatus.setDescription(' Trap Status')
dmzHostIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 30), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmzHostIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dmzHostIPAddress.setDescription(' ')
qosStatus = MibScalar((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosStatus.setStatus('mandatory')
if mibBuilder.loadTexts: qosStatus.setDescription(' ')
dhcpActiveTable = MibTable((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 32), )
if mibBuilder.loadTexts: dhcpActiveTable.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpActiveTable.setDescription(' ')
dhcpActiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 32, 1), ).setIndexNames((0, "LINKSYS-MODEL-MIB", "dhcpActiveIndex"))
if mibBuilder.loadTexts: dhcpActiveEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpActiveEntry.setDescription(' ')
dhcpActiveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 32, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpActiveIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpActiveIndex.setDescription(' ')
dhcpClientHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 32, 1, 2), OwnerString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpClientHostName.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpClientHostName.setDescription(' ')
dhcpNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 32, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpNetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpNetAddress.setDescription(' ')
dhcpPhysicalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 32, 1, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpPhysicalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpPhysicalAddress.setDescription(' ')
staticRoutingTable = MibTable((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 33), )
if mibBuilder.loadTexts: staticRoutingTable.setStatus('mandatory')
if mibBuilder.loadTexts: staticRoutingTable.setDescription(' ')
staticRoutingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 33, 1), ).setIndexNames((0, "LINKSYS-MODEL-MIB", "staticRoutingIndex"))
if mibBuilder.loadTexts: staticRoutingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: staticRoutingEntry.setDescription(' ')
staticRoutingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 33, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staticRoutingIndex.setStatus('mandatory')
if mibBuilder.loadTexts: staticRoutingIndex.setDescription(' ')
destinationNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 33, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: destinationNetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: destinationNetAddress.setDescription(' ')
routingSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 33, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routingSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: routingSubnetMask.setDescription(' ')
routingDefaultbroadbandGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 33, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routingDefaultbroadbandGateway.setStatus('mandatory')
if mibBuilder.loadTexts: routingDefaultbroadbandGateway.setDescription(' ')
routingHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 33, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routingHopCount.setStatus('mandatory')
if mibBuilder.loadTexts: routingHopCount.setDescription(' ')
routingInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 33, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lan", 1), ("wan", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routingInterface.setStatus('mandatory')
if mibBuilder.loadTexts: routingInterface.setDescription(' ')
nFlagStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 33, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("free", 0), ("ready", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nFlagStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nFlagStatus.setDescription(' ')
filterIPRangeTable = MibTable((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 34), )
if mibBuilder.loadTexts: filterIPRangeTable.setStatus('mandatory')
if mibBuilder.loadTexts: filterIPRangeTable.setDescription(' ')
filterIPRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 34, 1), ).setIndexNames((0, "LINKSYS-MODEL-MIB", "filterIPRangeIndex"))
if mibBuilder.loadTexts: filterIPRangeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: filterIPRangeEntry.setDescription(' ')
filterIPRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 34, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterIPRangeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: filterIPRangeIndex.setDescription(' ')
filterIPStart = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 34, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterIPStart.setStatus('mandatory')
if mibBuilder.loadTexts: filterIPStart.setDescription(' ')
filterIPEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 34, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterIPEnd.setStatus('mandatory')
if mibBuilder.loadTexts: filterIPEnd.setDescription(' ')
filterPortRangeTable = MibTable((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 35), )
if mibBuilder.loadTexts: filterPortRangeTable.setStatus('mandatory')
if mibBuilder.loadTexts: filterPortRangeTable.setDescription(' ')
filterPortRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 35, 1), ).setIndexNames((0, "LINKSYS-MODEL-MIB", "filterPortRangeIndex"))
if mibBuilder.loadTexts: filterPortRangeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: filterPortRangeEntry.setDescription(' ')
filterPortRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 35, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterPortRangeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: filterPortRangeIndex.setDescription(' ')
filterPortProto = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 35, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("both", 0), ("udp", 1), ("tcp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterPortProto.setStatus('mandatory')
if mibBuilder.loadTexts: filterPortProto.setDescription(' ')
filterPortStart = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 35, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterPortStart.setStatus('mandatory')
if mibBuilder.loadTexts: filterPortStart.setDescription(' ')
filterPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 35, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterPortEnd.setStatus('mandatory')
if mibBuilder.loadTexts: filterPortEnd.setDescription(' ')
filterMACTable = MibTable((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 36), )
if mibBuilder.loadTexts: filterMACTable.setStatus('mandatory')
if mibBuilder.loadTexts: filterMACTable.setDescription(' ')
filterMACEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 36, 1), ).setIndexNames((0, "LINKSYS-MODEL-MIB", "filterMACIndex"))
if mibBuilder.loadTexts: filterMACEntry.setStatus('mandatory')
if mibBuilder.loadTexts: filterMACEntry.setDescription(' ')
filterMACIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 36, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterMACIndex.setStatus('mandatory')
if mibBuilder.loadTexts: filterMACIndex.setDescription(' ')
filterMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 36, 1, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterMAC.setStatus('mandatory')
if mibBuilder.loadTexts: filterMAC.setDescription(' ')
forwardTable = MibTable((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 37), )
if mibBuilder.loadTexts: forwardTable.setStatus('mandatory')
if mibBuilder.loadTexts: forwardTable.setDescription(' ')
forwardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 37, 1), ).setIndexNames((0, "LINKSYS-MODEL-MIB", "forwardIndex"))
if mibBuilder.loadTexts: forwardEntry.setStatus('mandatory')
if mibBuilder.loadTexts: forwardEntry.setDescription(' ')
forwardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 37, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: forwardIndex.setStatus('mandatory')
if mibBuilder.loadTexts: forwardIndex.setDescription(' ')
servicePortStart = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 37, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: servicePortStart.setStatus('mandatory')
if mibBuilder.loadTexts: servicePortStart.setDescription(' ')
servicePortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 37, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: servicePortEnd.setStatus('mandatory')
if mibBuilder.loadTexts: servicePortEnd.setDescription(' ')
servicePortProto = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 37, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("both", 0), ("udp", 1), ("tcp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: servicePortProto.setStatus('mandatory')
if mibBuilder.loadTexts: servicePortProto.setDescription(' ')
forwardIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 37, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forwardIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: forwardIPAddress.setDescription(' ')
dnsNetAddressWANTable = MibTable((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 38), )
if mibBuilder.loadTexts: dnsNetAddressWANTable.setStatus('mandatory')
if mibBuilder.loadTexts: dnsNetAddressWANTable.setDescription(' ')
dnsNetAddressWANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 38, 1), ).setIndexNames((0, "LINKSYS-MODEL-MIB", "dnsNetAddressWANIndex"))
if mibBuilder.loadTexts: dnsNetAddressWANEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dnsNetAddressWANEntry.setDescription(' ')
dnsNetAddressWANIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 38, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsNetAddressWANIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dnsNetAddressWANIndex.setDescription(' ')
dnsNetAddressWAN = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 38, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsNetAddressWAN.setStatus('mandatory')
if mibBuilder.loadTexts: dnsNetAddressWAN.setDescription(' ')
outgoingLogTable = MibTable((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 39), )
if mibBuilder.loadTexts: outgoingLogTable.setStatus('mandatory')
if mibBuilder.loadTexts: outgoingLogTable.setDescription(' ')
outgoingLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 39, 1), ).setIndexNames((0, "LINKSYS-MODEL-MIB", "outgoingLogIndex"))
if mibBuilder.loadTexts: outgoingLogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: outgoingLogEntry.setDescription(' ')
outgoingLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 39, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outgoingLogIndex.setStatus('mandatory')
if mibBuilder.loadTexts: outgoingLogIndex.setDescription(' ')
sourceIPLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 39, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceIPLAN.setStatus('mandatory')
if mibBuilder.loadTexts: sourceIPLAN.setDescription(' ')
destinationIP = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 39, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: destinationIP.setStatus('mandatory')
if mibBuilder.loadTexts: destinationIP.setDescription(' ')
servicePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 39, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: servicePortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: servicePortNumber.setDescription(' ')
incomingLogTable = MibTable((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 40), )
if mibBuilder.loadTexts: incomingLogTable.setStatus('mandatory')
if mibBuilder.loadTexts: incomingLogTable.setDescription(' ')
incomingLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 40, 1), ).setIndexNames((0, "LINKSYS-MODEL-MIB", "incomingLogIndex"))
if mibBuilder.loadTexts: incomingLogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: incomingLogEntry.setDescription(' ')
incomingLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 40, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: incomingLogIndex.setStatus('mandatory')
if mibBuilder.loadTexts: incomingLogIndex.setDescription(' ')
sourceIP = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 40, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sourceIP.setStatus('mandatory')
if mibBuilder.loadTexts: sourceIP.setDescription(' ')
destinationPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 40, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: destinationPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: destinationPortNumber.setDescription(' ')
trapManagerTable = MibTable((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 41), )
if mibBuilder.loadTexts: trapManagerTable.setStatus('mandatory')
if mibBuilder.loadTexts: trapManagerTable.setDescription(' ')
trapManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 41, 1), ).setIndexNames((0, "LINKSYS-MODEL-MIB", "trapManagerIndex"))
if mibBuilder.loadTexts: trapManagerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: trapManagerEntry.setDescription(' ')
trapManagerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 41, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapManagerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: trapManagerIndex.setDescription(' ')
trapMgrNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 41, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapMgrNetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: trapMgrNetAddress.setDescription(' ')
qosAppTable = MibTable((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 42), )
if mibBuilder.loadTexts: qosAppTable.setStatus('mandatory')
if mibBuilder.loadTexts: qosAppTable.setDescription(' ')
qosAppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 42, 1), ).setIndexNames((0, "LINKSYS-MODEL-MIB", "qosAppIndex"))
if mibBuilder.loadTexts: qosAppEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qosAppEntry.setDescription(' ')
qosAppIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 42, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosAppIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qosAppIndex.setDescription(' ')
appPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 42, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appPort.setStatus('mandatory')
if mibBuilder.loadTexts: appPort.setDescription(' ')
appPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 42, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("low", 1), ("high", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appPriority.setStatus('mandatory')
if mibBuilder.loadTexts: appPriority.setDescription(' ')
qosPortTable = MibTable((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 43), )
if mibBuilder.loadTexts: qosPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: qosPortTable.setDescription(' ')
qosPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 43, 1), ).setIndexNames((0, "LINKSYS-MODEL-MIB", "qosPortIndex"))
if mibBuilder.loadTexts: qosPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: qosPortEntry.setDescription(' ')
qosPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 43, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: qosPortIndex.setDescription(' ')
lanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 43, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanPort.setStatus('mandatory')
if mibBuilder.loadTexts: lanPort.setDescription(' ')
portPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 43, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("low", 1), ("high", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPriority.setStatus('mandatory')
if mibBuilder.loadTexts: portPriority.setDescription(' ')
multicastPassStatus = MibScalar((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multicastPassStatus.setStatus('mandatory')
if mibBuilder.loadTexts: multicastPassStatus.setDescription(' ')
mtuStatus = MibScalar((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtuStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mtuStatus.setDescription(' ')
mtuSize = MibScalar((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 46), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtuSize.setStatus('mandatory')
if mibBuilder.loadTexts: mtuSize.setDescription(' ')
redialPeriod = MibScalar((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 47), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redialPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: redialPeriod.setDescription(' ')
portTriggering = MibTable((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 48), )
if mibBuilder.loadTexts: portTriggering.setStatus('mandatory')
if mibBuilder.loadTexts: portTriggering.setDescription(' ')
portTriggerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 48, 1), ).setIndexNames((0, "LINKSYS-MODEL-MIB", "portTriggerIndex"))
if mibBuilder.loadTexts: portTriggerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: portTriggerEntry.setDescription(' ')
portTriggerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 48, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTriggerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: portTriggerIndex.setDescription(' ')
appName = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 48, 1, 2), OwnerString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appName.setStatus('mandatory')
if mibBuilder.loadTexts: appName.setDescription(' ')
triggerPortStart = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 48, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: triggerPortStart.setStatus('mandatory')
if mibBuilder.loadTexts: triggerPortStart.setDescription(' ')
triggerPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 48, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: triggerPortEnd.setStatus('mandatory')
if mibBuilder.loadTexts: triggerPortEnd.setDescription(' ')
incomingPortStart = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 48, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: incomingPortStart.setStatus('mandatory')
if mibBuilder.loadTexts: incomingPortStart.setDescription(' ')
incomingPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 3955, 3, 4, 1, 48, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: incomingPortEnd.setStatus('mandatory')
if mibBuilder.loadTexts: incomingPortEnd.setDescription(' ')
mibBuilder.exportSymbols("LINKSYS-MODEL-MIB", filterIPEnd=filterIPEnd, directory=directory, filterMACIndex=filterMACIndex, filterPortStart=filterPortStart, trapManagerTable=trapManagerTable, dnsNetAddressWANEntry=dnsNetAddressWANEntry, dmzHostIPAddress=dmzHostIPAddress, multicastPassStatus=multicastPassStatus, qosAppEntry=qosAppEntry, filterIPRangeIndex=filterIPRangeIndex, servicePortProto=servicePortProto, portPriority=portPriority, dynamicRoutingRX=dynamicRoutingRX, dnsNetAddressWANTable=dnsNetAddressWANTable, dhcpStartNetAddr=dhcpStartNetAddr, filterMACTable=filterMACTable, mgtCommunityIndex=mgtCommunityIndex, loginUserName=loginUserName, physicalAddrLAN=physicalAddrLAN, filterMAC=filterMAC, remoteMgtStatus=remoteMgtStatus, broadbandGateway=broadbandGateway, products=products, dhcpNetAddress=dhcpNetAddress, filterPortProto=filterPortProto, mgtWarmStart=mgtWarmStart, staticRoutingTable=staticRoutingTable, dhcpActiveTable=dhcpActiveTable, outgoingLogTable=outgoingLogTable, pptpPassThroughStatus=pptpPassThroughStatus, redialPeriod=redialPeriod, routingInterface=routingInterface, subnetMaskWAN=subnetMaskWAN, private=private, snmpMgt=snmpMgt, mgtCommunityEntry=mgtCommunityEntry, mgtCommunityName=mgtCommunityName, filterPortRangeTable=filterPortRangeTable, internetAccessMgt=internetAccessMgt, servicePortStart=servicePortStart, incomingLogIndex=incomingLogIndex, servicePortEnd=servicePortEnd, incomingPortStart=incomingPortStart, nFlagStatus=nFlagStatus, experimental=experimental, workingMode=workingMode, routingDefaultbroadbandGateway=routingDefaultbroadbandGateway, trapMgrNetAddress=trapMgrNetAddress, triggerPortEnd=triggerPortEnd, filterPortRangeEntry=filterPortRangeEntry, sourceIPLAN=sourceIPLAN, dhcpNumberUsers=dhcpNumberUsers, lanPort=lanPort, mgtBootStatus=mgtBootStatus, mgtUpdateNV=mgtUpdateNV, qosPortIndex=qosPortIndex, spiStatus=spiStatus, filterIPRangeEntry=filterIPRangeEntry, outgoingLogEntry=outgoingLogEntry, dhcpStatusLAN=dhcpStatusLAN, filterIPRangeTable=filterIPRangeTable, outgoingLogIndex=outgoingLogIndex, subnetMaskLAN=subnetMaskLAN, netAddressLAN=netAddressLAN, dhcpActiveIndex=dhcpActiveIndex, commonMgt=commonMgt, filterPortEnd=filterPortEnd, mtuSize=mtuSize, accessLogStatus=accessLogStatus, incomingLogTable=incomingLogTable, enterprises=enterprises, mgtCommunityTable=mgtCommunityTable, mgtCommunityType=mgtCommunityType, qosAppIndex=qosAppIndex, trapManagerEntry=trapManagerEntry, triggerPortStart=triggerPortStart, commonFirmwareVer=commonFirmwareVer, trapManagerIndex=trapManagerIndex, forwardTable=forwardTable, defaultbroadbandGatewayWAN=defaultbroadbandGatewayWAN, appPort=appPort, netAddressWAN=netAddressWAN, sourceIP=sourceIP, commonModelId=commonModelId, loginStatus=loginStatus, filterMACEntry=filterMACEntry, ipSecPassThroughStatus=ipSecPassThroughStatus, dhcpPhysicalAddress=dhcpPhysicalAddress, portTriggerIndex=portTriggerIndex, servicePortNumber=servicePortNumber, connectedIdleTime=connectedIdleTime, mgtRefreshMIB=mgtRefreshMIB, dhcpActiveEntry=dhcpActiveEntry, staticRoutingEntry=staticRoutingEntry, common=common, mgtFactoryReset=mgtFactoryReset, loginPassword=loginPassword, hostName=hostName, dnsNetAddressWANIndex=dnsNetAddressWANIndex, linksys=linksys, physicalAddrWAN=physicalAddrWAN, qosAppTable=qosAppTable, rasPlan=rasPlan, routingHopCount=routingHopCount, qosPortTable=qosPortTable, mgtAdministrator=mgtAdministrator, routingSubnetMask=routingSubnetMask, incomingPortEnd=incomingPortEnd, destinationPortNumber=destinationPortNumber, connectedState=connectedState, internet=internet, qosPortEntry=qosPortEntry, forwardIPAddress=forwardIPAddress, dhcpStatusWAN=dhcpStatusWAN, filterPortRangeIndex=filterPortRangeIndex, appPriority=appPriority, destinationIP=destinationIP, wanReqBlockStatus=wanReqBlockStatus, dhcpClientHostName=dhcpClientHostName, qosStatus=qosStatus, mgmt=mgmt, mtuStatus=mtuStatus, portTriggering=portTriggering, forwardIndex=forwardIndex, dnsNetAddressWAN=dnsNetAddressWAN, domainName=domainName, dynamicRoutingTX=dynamicRoutingTX, destinationNetAddress=destinationNetAddress, filterIPStart=filterIPStart, remoteUpgradeStatus=remoteUpgradeStatus, appName=appName, incomingLogEntry=incomingLogEntry, staticRoutingIndex=staticRoutingIndex, forwardEntry=forwardEntry, portTriggerEntry=portTriggerEntry, commonSoftwareVer=commonSoftwareVer)
