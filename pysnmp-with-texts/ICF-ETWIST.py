#
# PySNMP MIB module ICF-ETWIST (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ICF-ETWIST
# Produced by pysmi-0.3.4 at Wed May  1 13:51:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
hubIntruderPort, hubIntruderAddress = mibBuilder.importSymbols("HP-ICF-GENERIC-RPTR", "hubIntruderPort", "hubIntruderAddress")
bridge1010, etherTwist48, fiberOptic, icfConfig, advStackU8, thinLAN, advStack12, advStack24, repeaterAgent, hpicfEnetSMM, advStack48, icfBridge, advStackU16, etherTwist24S, etherTwist12, bridgeRemote, icfHub, icfCommon = mibBuilder.importSymbols("HP-ICF-OID", "bridge1010", "etherTwist48", "fiberOptic", "icfConfig", "advStackU8", "thinLAN", "advStack12", "advStack24", "repeaterAgent", "hpicfEnetSMM", "advStack48", "icfBridge", "advStackU16", "etherTwist24S", "etherTwist12", "bridgeRemote", "icfHub", "icfCommon")
ifAdminStatus, = mibBuilder.importSymbols("IF-MIB", "ifAdminStatus")
rptrPortAdminStatus, rptrAddrTrackLastSourceAddress = mibBuilder.importSymbols("SNMP-REPEATER-MIB", "rptrPortAdminStatus", "rptrAddrTrackLastSourceAddress")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Unsigned32, Gauge32, TimeTicks, Bits, MibIdentifier, Integer32, Counter64, ModuleIdentity, ObjectIdentity, iso, Counter32, NotificationType, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Gauge32", "TimeTicks", "Bits", "MibIdentifier", "Integer32", "Counter64", "ModuleIdentity", "ObjectIdentity", "iso", "Counter32", "NotificationType", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "MacAddress")
icfEtwistMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 1))
icfEtwistMib.setRevisions(('2000-11-03 22:20', '1996-09-06 02:58', '1994-02-25 00:00', '1993-07-09 00:00', '1992-04-16 00:00', '1991-04-24 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: icfEtwistMib.setRevisionsDescriptions(('Updated division name. Changed most of the remaining objects to obsolete.', 'Split this MIB module from the former monolithic hp-icf MIB. Obsoleted most of the objects in this module.', 'Version of MIB module that provided support for the first release AdvanceStack hubs, HPJ2600A, HPJ2601A and HPJ2602A and agent module HPJ2603A. Released with agent for HPJ2603A version A.01.00. This version obsoleted the objects in the icfDownloadGroup, and deprecated most of the other objects in this module. It also added support for the late event monitor capability.', 'Version of MIB module that provided support for the EtherTwist Secure Hub, HPJ2355A. Released with HPJ2355A version E.01.02. This version obsoleted the objects in the icfEncryptedPassword group. It added support for the hub polarity reversed detection capability, the address movement log, and the icfConfig group, as well as the address movement and new address traps.', 'Version of MIB module that provided support for the HP ThinLAN Hub, HP28692A. Released with agent version D.01.05 for the HP28682A, HP28688B, HP28692A, and HP28699A, agent versions D.01.00 (IP) and D.02.00 (IPX) for the HP28688A, and agent version D.01.02 for the HP28673A and HP28674A. This version of the MIB added IPX and network download support. It also added the hub address table, backup links, and SQE detect.', 'Initial version of this MIB module. Released with the HP28688B 12 Port EtherTwist Hub Plus, the HP28699A 48 Port EtherTwist Hub Plus, the HP28682A Fiber Optic Hub, the HP28673A 10:10 Bridge, and the HP28674A Remote Bridge. Initially released with agent version C.01.01 for the HP28682A, HP28688B, and HP28699A, agent version C.01.02 for the HP28688A, and agent version C.01.00 for the HP28673A and HP28674A.',))
if mibBuilder.loadTexts: icfEtwistMib.setLastUpdated('200011032220Z')
if mibBuilder.loadTexts: icfEtwistMib.setOrganization('Hewlett Packard Company, Network Infrastructure Solutions')
if mibBuilder.loadTexts: icfEtwistMib.setContactInfo('Hewlett Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: icfEtwistMib.setDescription('This MIB module describes devices in the HP Integrated Communication Facility product line.')
icfCommonAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11))
icfETwistConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2))
lastSetError = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111))).clone(namedValues=NamedValues(("unexpectedError", 100), ("resourceLimitExceeded", 101), ("disallowedSTPPortState", 102), ("incompleteSetlet", 103), ("invalidEventObject", 104), ("disallowedRemoteDevice", 105), ("disallowedLAPBAdrsPair", 106), ("adrsAlreadyPresent", 107), ("staticSectionFull", 108), ("cantDeletePermAdrs", 109), ("inconsistentValues", 110), ("downloadInProgress", 111)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastSetError.setStatus('obsolete')
if mibBuilder.loadTexts: lastSetError.setDescription("********* THIS OBJECT IS OBSOLETE ********* Provide more detailed, enterprise specific error type. Any error resulting from a SET request will cause this object to be updated, and the previous value overwritten. A management entity may retrieve more detailed error information than that implied by the pdu's ErrorStatus, especially in the case of a genErr.")
password = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: password.setStatus('obsolete')
if mibBuilder.loadTexts: password.setDescription("********* THIS OBJECT IS OBSOLETE ********* This is the encrypted password for the device. The algorithm used for the encryption process is HP proprietary. Third party vendor support is provided by not setting a password on the device, and using the community name 'public'.")
reset = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reset.setStatus('obsolete')
if mibBuilder.loadTexts: reset.setDescription("********* THIS OBJECT IS OBSOLETE ********* When the reset object is set to to 'warm' it results in a 'warm' reset, which does not clear the parameters in NOVRAM to factory defaults. When set to 'cold', it results in NOVRAM being set to factory defaults. When this object is set, the agent replies, dallies a short time to allow the reply to be emitted from the device, then performs the reset. When read, this object always returns 0.")
selfTest = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: selfTest.setStatus('obsolete')
if mibBuilder.loadTexts: selfTest.setDescription("********* THIS OBJECT IS OBSOLETE ********* Self test is invoked by setting this flag to 'stExecute. When the object changes to 'stSuccess', the test has completed successfully. Icf devices will 'hard-fail' if the test does not succeed.")
semaphore = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: semaphore.setStatus('obsolete')
if mibBuilder.loadTexts: semaphore.setDescription("********* THIS OBJECT IS OBSOLETE ********* This object allows a set of objects to be locked. The lock is only assured by the 'cooperation' of other management entities; they must wait until the lock is cleared (to value zero) prior to setting the lock. When this object is set to a management entity's IP address, if no other management entity has previously set the lock, the set will succeed. Otherwise, an error (BadValue) will be returned. It is the responsibility of the owning management entity to clear the lock when the transactions complete. To protect against a management entity failure during a locked transaction, the agent is NOT responsible for verifying which management entity is performing transactions on locked objects; thus, any management entity can clear this object at any time. The agent does not do anything with this object except disallow multiple sets of different IP addresses (unless the object has been cleared to zero). This means management entities can use this for locking any valid transactions on defined sets of objects. This object can also be used on IPX networks by specifying the low 4 bytes of the station address for the IpAddress.")
discovery = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 6))
pollResponse = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pollResponse.setStatus('obsolete')
if mibBuilder.loadTexts: pollResponse.setDescription("********* THIS OBJECT IS OBSOLETE ********* Flag indicating whether device should respond to multicast SNMP PDUs. When set 'true', the device will respond to multicast SNMP PDU's. Otherwise, the response is discarded.")
announceAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 6, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: announceAddress.setStatus('obsolete')
if mibBuilder.loadTexts: announceAddress.setDescription("********* THIS OBJECT IS OBSOLETE ********* When set to any MAC address, the device will transmit three identical packets, each with the MAC source set to the device's MAC address, the MAC destination to the value of this object, the destination SAP is F8, and the destination HP XSAP is 165D. These packets will traverse other ICF devices, allowing them to learn the port connectivity of the transmitting device.")
mapAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 6, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mapAddress.setStatus('obsolete')
if mibBuilder.loadTexts: mapAddress.setDescription('********* THIS OBJECT IS OBSOLETE ********* When this object is set a map address search begins. If the address is detected on only one port, then the mapPort object is set to the port number on which the address was detected. This object is obsolete. This functionality has now been incorporated into the IETF 802.3 Repeater MIB. Agents and management applications should implement that MIB.')
mapState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mapState.setStatus('obsolete')
if mibBuilder.loadTexts: mapState.setDescription("********* THIS OBJECT IS OBSOLETE ********* This object will be set to 'psNone' if the address set in the mapAddress object has not been received on any of the device's interface/ports. It will be set to 'psSingle' if the mapAddress has been detected on only one interface/port. It will be set to 'psMany' if the mapAddress has been detected on more than one interface/port. This object is obsolete. This functionality has now been incorporated into the IETF 802.3 Repeater MIB. Agents and management applications should implement that MIB.")
mapPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mapPort.setStatus('obsolete')
if mibBuilder.loadTexts: mapPort.setDescription("********* THIS OBJECT IS OBSOLETE ********* The port number on which the map address was detected. If map state is 'psNone' or 'psMany' then this object is not valid. This object is obsolete. This functionality has now been incorporated into the IETF 802.3 Repeater MIB. Agents and management applications should implement that MIB.")
ipSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 6, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSubnetMask.setStatus('obsolete')
if mibBuilder.loadTexts: ipSubnetMask.setDescription('********* THIS OBJECT IS OBSOLETE ********* This object is the IP subnet mask.')
icfEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 7))
eventNotificationNode = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 7, 1))
evtIpNotify = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 7, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evtIpNotify.setStatus('obsolete')
if mibBuilder.loadTexts: evtIpNotify.setDescription('********* THIS OBJECT IS OBSOLETE ********* The network address of the manager node which is to receive the event notification trap.')
evtIpxNotify = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evtIpxNotify.setStatus('obsolete')
if mibBuilder.loadTexts: evtIpxNotify.setDescription('********* THIS OBJECT IS OBSOLETE ********* The IPX address of the manager node which is to receive the event notification trap.')
evtTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 7, 2), )
if mibBuilder.loadTexts: evtTable.setStatus('obsolete')
if mibBuilder.loadTexts: evtTable.setDescription('********* THIS OBJECT IS OBSOLETE ********* A list of event entries for event processing.')
evtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 7, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("warmStartEvent", 1), ("coldStartEvent", 2), ("spanTreeOrLinkBeatEvent", 3), ("temperatureOrSegmentationEvent", 4), ("backupLinkEvent", 5), ("intrusionEvent", 6), ("addressMovedEvent", 7), ("newAddressEvent", 8), ("rptrHealthEvent", 9), ("rptrResetEvent", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: evtIndex.setStatus('obsolete')
if mibBuilder.loadTexts: evtIndex.setDescription('********* THIS OBJECT IS OBSOLETE ********* The index value which uniquely identifies the event to which this entry is applicable.')
evtArm = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 7, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evtArm.setStatus('obsolete')
if mibBuilder.loadTexts: evtArm.setDescription('********* THIS OBJECT IS OBSOLETE ********* This object arms and disarms events. Events are implicitly rearmed, that is, once an event occurs, it is rearmed. Sets to the intrusionEvent instance of this object are ignored, since intrusion events are actually armed through the hubSecPtAlarmEnable object.')
evtTimeSinceOccurrence = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 7, 2, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evtTimeSinceOccurrence.setStatus('obsolete')
if mibBuilder.loadTexts: evtTimeSinceOccurrence.setDescription('********* THIS OBJECT IS OBSOLETE ********* This object specifies the number of centiseconds since this event last occurred.')
evtThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 7, 3), )
if mibBuilder.loadTexts: evtThresholdTable.setStatus('obsolete')
if mibBuilder.loadTexts: evtThresholdTable.setDescription('********* THIS OBJECT IS OBSOLETE ********* A list of event entries for event processing.')
evthIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 7, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: evthIndex.setStatus('obsolete')
if mibBuilder.loadTexts: evthIndex.setDescription('********* THIS OBJECT IS OBSOLETE ********* The index value which uniquely identifies the event to which this entry is applicable.')
evthArm = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 7, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evthArm.setStatus('obsolete')
if mibBuilder.loadTexts: evthArm.setDescription("********* THIS OBJECT IS OBSOLETE ********* This object arms and disarms events. The notification node, the associated event object, threshold, hysteresis, and time interval should all be set before an event is armed. The objects do not need to be re-set if the existing values are acceptable. The device will refuse to arm an event with uninitialized objects. Once armed, if the threshold is met or exceeded during the event time interval, a trap PDU is sent to the eventNotificationNode. Subsequently, the monitored object must fall to or below the hysteresis before another trap can be sent via the threshold mechanism. The hysteresis may equal threshold. Events are implicitly rearmed, that is, once an event occurs, it is rearmed. Setting this object to 'on' will result in a genErr in any of the following cases: object not set; cannot set an event on this object; time interval not set; threshold not set.")
evthObject = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 7, 3, 3), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evthObject.setStatus('obsolete')
if mibBuilder.loadTexts: evthObject.setDescription('********* THIS OBJECT IS OBSOLETE ********* The data of this object is itself an OBJECT IDENTIFIER which selects the mib object and instance that is to be monitored for the event. Only types INTEGER and Counter are allowed.')
evthThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 7, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evthThreshold.setStatus('obsolete')
if mibBuilder.loadTexts: evthThreshold.setDescription('********* THIS OBJECT IS OBSOLETE ********* The threshold against which the variable specified in evthObject is tested over the time interval specified in the evthTimeInterval When the threshold is met or exceeded, the event is triggered. The event will not trigger again until the variable falls to or below the evthHysteresis value, and then meets or exceeds the threshold.')
evthHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 7, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evthHysteresis.setStatus('obsolete')
if mibBuilder.loadTexts: evthHysteresis.setDescription('********* THIS OBJECT IS OBSOLETE ********* The low value which the variable specified in evthObject must fall to or below after exceeding evthThreshold before the event can re-occur when the threshold is met or exceeded.')
evthTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 7, 3, 6), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: evthTimeInterval.setStatus('obsolete')
if mibBuilder.loadTexts: evthTimeInterval.setDescription('********* THIS OBJECT IS OBSOLETE ********* The time interval over which the variable specified in the evthObject is sampled.')
evthTimeSinceOccurrence = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 7, 3, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: evthTimeSinceOccurrence.setStatus('obsolete')
if mibBuilder.loadTexts: evthTimeSinceOccurrence.setDescription('********* THIS OBJECT IS OBSOLETE ********* This object specifies the number of centiseconds since this event was last triggered.')
linkTest = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 8))
linkTestAddress = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 8, 1))
linkTest802MacAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 8, 1, 1), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTest802MacAddress.setStatus('obsolete')
if mibBuilder.loadTexts: linkTest802MacAddress.setDescription('********* THIS OBJECT IS OBSOLETE ********* If this object is set to the MAC address of a node to link test in the same PDU that sets linkTestRepetitions to a nonzero value, the link test performed will use IEEE 802 Test frames. Note that setting more than one of linkTest802MacAddress, linkTestIpAddress, and linkTestIpxAddress to a non-null value in the same PDU will result in a genErr. This object is now obsolete. Is functionality is being replaced by the hpicfLinktest objects.')
linkTestIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 8, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestIpAddress.setStatus('obsolete')
if mibBuilder.loadTexts: linkTestIpAddress.setDescription('********* THIS OBJECT IS OBSOLETE ********* If this object is set to the network address of a node to link test in the same PDU that sets linkTestRepetitions to a nonzero value, the link test performed will use ICMP Echo packets. Note that setting more than one of linkTest802MacAddress, linkTestIpAddress, and linkTestIpxAddress to a non-null value in the same PDU will result in a genErr. This object is now obsolete. Is functionality is being replaced by the hpicfLinktest objects.')
linkTestIpxAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 8, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestIpxAddress.setStatus('obsolete')
if mibBuilder.loadTexts: linkTestIpxAddress.setDescription('********* THIS OBJECT IS OBSOLETE ********* If this object is set to the IPX address of a node to link test in the same PDU that sets linkTestRepetitions to a nonzero value, the link test performed will use IPX diagnostic packets. Note that setting more than one of linkTest802MacAddress, linkTestIpAddress, and linkTestIpxAddress to a non-null value in the same PDU will result in a genErr. This object is now obsolete. Is functionality is being replaced by the hpicfLinktest objects.')
linkTestRepetitions = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestRepetitions.setStatus('obsolete')
if mibBuilder.loadTexts: linkTestRepetitions.setDescription("********* THIS OBJECT IS OBSOLETE ********* The number of link tests that the device is to complete. When this object is set to a non-zero value, the linkTestSuccess object is zeroed and the device begins a link test using IEEE 802.2 Test frames, ICMP Echo packets, or IPX diagnostic packets depending on the address selected. Link test results are contained in the link test success object. This object's value decrements (to zero) as the test proceeds. The test may be canceled at any point by setting this object to 0. This object is now obsolete. Is functionality is being replaced by the hpicfLinktest objects.")
linkTestSuccess = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTestSuccess.setStatus('obsolete')
if mibBuilder.loadTexts: linkTestSuccess.setDescription('********* THIS OBJECT IS OBSOLETE ********* For every successful link test, this counter is incremented. When link tests are completed, this counter contains the total number of successful tests. This object is now obsolete. Is functionality is being replaced by the hpicfLinktest objects.')
linkTestTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 8, 4), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTestTimeout.setStatus('obsolete')
if mibBuilder.loadTexts: linkTestTimeout.setDescription('********* THIS OBJECT IS OBSOLETE ********* The time interval over which a link test response must be received, or the test is counted as failed. This object is now obsolete. Is functionality is being replaced by the hpicfLinktest objects.')
icf8023MacTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 9), )
if mibBuilder.loadTexts: icf8023MacTable.setStatus('obsolete')
if mibBuilder.loadTexts: icf8023MacTable.setDescription('********* THIS OBJECT IS OBSOLETE ********* A list of icf8023Mac entries.')
icf8023MacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: icf8023MacIndex.setStatus('obsolete')
if mibBuilder.loadTexts: icf8023MacIndex.setDescription('********* THIS OBJECT IS OBSOLETE ********* The index value which uniquely identifies the port to which this entry is applicable. The port identified by a particular value of this index on a hub is the same port as identified by the same value of rptrPortIndex. Note that since this hub always has exactly 1 port group, there is no group index for this table. For a bridge, the port identified by a particular value of this index is the same port identified by the same value of ifIndex.')
icf8023MacInBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 9, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icf8023MacInBroadcastPkts.setStatus('obsolete')
if mibBuilder.loadTexts: icf8023MacInBroadcastPkts.setDescription('********* THIS OBJECT IS OBSOLETE ********* Count of the broadcast packets received.')
icf8023MacOutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 9, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icf8023MacOutBroadcastPkts.setStatus('obsolete')
if mibBuilder.loadTexts: icf8023MacOutBroadcastPkts.setDescription('********* THIS OBJECT IS OBSOLETE ********* Count of the broadcast packets transmitted.')
icf8023MacInMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 9, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icf8023MacInMulticastPkts.setStatus('obsolete')
if mibBuilder.loadTexts: icf8023MacInMulticastPkts.setDescription('********* THIS OBJECT IS OBSOLETE ********* Count of the multicast packets received.')
icf8023MacOutMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 9, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icf8023MacOutMulticastPkts.setStatus('obsolete')
if mibBuilder.loadTexts: icf8023MacOutMulticastPkts.setDescription('********* THIS OBJECT IS OBSOLETE ********* Count of the multicast packets transmitted.')
icf8023MacRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 9, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icf8023MacRunts.setStatus('obsolete')
if mibBuilder.loadTexts: icf8023MacRunts.setDescription('********* THIS OBJECT IS OBSOLETE ********* The number of media frames encountered that were too short (by ethernet/802.3 standards).')
icf8023MacGiants = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 9, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icf8023MacGiants.setStatus('obsolete')
if mibBuilder.loadTexts: icf8023MacGiants.setDescription('********* THIS OBJECT IS OBSOLETE ********* The number of media frames encountered that were too long (by ethernet/802.3 standards).')
icf8023MacMissedPktErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 9, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icf8023MacMissedPktErrors.setStatus('obsolete')
if mibBuilder.loadTexts: icf8023MacMissedPktErrors.setDescription('********* THIS OBJECT IS OBSOLETE ********* The number of frames lost due to lack of resources (e.g. ring buffers, memory buffers, etc).')
icf8023MacExcessDeferrals = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 9, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icf8023MacExcessDeferrals.setStatus('obsolete')
if mibBuilder.loadTexts: icf8023MacExcessDeferrals.setDescription('********* THIS OBJECT IS OBSOLETE ********* The number of times a frame could not be sent due to excess deferrals because another node was transmitting continually.')
icf8023MacTotalMediaErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 9, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icf8023MacTotalMediaErrors.setStatus('obsolete')
if mibBuilder.loadTexts: icf8023MacTotalMediaErrors.setDescription('********* THIS OBJECT IS OBSOLETE ********* Count of all possible medium transmit and receive errors, such as crc, alignment, sequence, length, excess etc. The purpose of this object is to support aggregate LAN medium errors for event processing. Collisions and runts are not considered an error.')
icf8023MacSpuriousIntrs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 9, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icf8023MacSpuriousIntrs.setStatus('obsolete')
if mibBuilder.loadTexts: icf8023MacSpuriousIntrs.setDescription('********* THIS OBJECT IS OBSOLETE ********* The number of times that the network interface for this port generated a spurious hardware interrupt. A non-zero value for this object indicates a potential hardware problem.')
icfDownload = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 10))
icfDownloadAddress = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 10, 1))
icfDownloadIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 10, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icfDownloadIpAddress.setStatus('obsolete')
if mibBuilder.loadTexts: icfDownloadIpAddress.setDescription('********* THIS OBJECT IS OBSOLETE ********* The IP address of the TFTP server to download firmware from.')
icfDownloadIpxAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icfDownloadIpxAddress.setStatus('obsolete')
if mibBuilder.loadTexts: icfDownloadIpxAddress.setDescription('********* THIS OBJECT IS OBSOLETE ********* The IPX address of the TFTP server to download firmware from.')
icfDownloadFilename = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 10, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icfDownloadFilename.setStatus('obsolete')
if mibBuilder.loadTexts: icfDownloadFilename.setDescription('********* THIS OBJECT IS OBSOLETE ********* Filename and path of file to download (maximum length of 63 characters + NULL).')
hubThinlanFault = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hubThinlanFault.setStatus('obsolete')
if mibBuilder.loadTexts: hubThinlanFault.setDescription("********* THIS OBJECT IS OBSOLETE ********* When set to 'true' this object causes the Fault LED to blink if the ThinLan Port is segmented.")
hubGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 2))
hubGlobalErrors = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubGlobalErrors.setStatus('obsolete')
if mibBuilder.loadTexts: hubGlobalErrors.setDescription('********* THIS OBJECT IS OBSOLETE ********* This counter is incremented for each packet with an error received on any port. This counter does not include runts, as they are a normal media condition.')
hubGlobalCollisions = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubGlobalCollisions.setStatus('obsolete')
if mibBuilder.loadTexts: hubGlobalCollisions.setDescription('********* THIS OBJECT IS OBSOLETE ********* This counter is incremented for each collision between any two or more ports (or AUI) detected by the hub.')
hubGlobalPktFragments = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubGlobalPktFragments.setStatus('obsolete')
if mibBuilder.loadTexts: hubGlobalPktFragments.setDescription('********* THIS OBJECT IS OBSOLETE ********* This counter is the sum of hubPortPktFragments for all ports.')
hubGlobalRunts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubGlobalRunts.setStatus('obsolete')
if mibBuilder.loadTexts: hubGlobalRunts.setDescription('********* THIS OBJECT IS OBSOLETE ********* This counter is incremented for each runt frame received on any port.')
hubGlobalGiants = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubGlobalGiants.setStatus('obsolete')
if mibBuilder.loadTexts: hubGlobalGiants.setDescription('********* THIS OBJECT IS OBSOLETE ********* This counter is incremented for each giant frame received on any port.')
hubGlobalCrcErrors = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubGlobalCrcErrors.setStatus('obsolete')
if mibBuilder.loadTexts: hubGlobalCrcErrors.setDescription('********* THIS OBJECT IS OBSOLETE ********* This counter is incremented for each frame with a CRC error received on any port.')
hubGlobalAlignmentErrors = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubGlobalAlignmentErrors.setStatus('obsolete')
if mibBuilder.loadTexts: hubGlobalAlignmentErrors.setDescription('********* THIS OBJECT IS OBSOLETE ********* This counter is incremented for each frame with an alignment error received on any port.')
hubGlobalInOctets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubGlobalInOctets.setStatus('obsolete')
if mibBuilder.loadTexts: hubGlobalInOctets.setDescription('********* THIS OBJECT IS OBSOLETE ********* This counter is incremented for each octet received on any port.')
hubGlobalInUcastPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubGlobalInUcastPkts.setStatus('obsolete')
if mibBuilder.loadTexts: hubGlobalInUcastPkts.setDescription('********* THIS OBJECT IS OBSOLETE ********* This counter is incremented for each unicast packet received on any port.')
hubGlobalInNUcastPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubGlobalInNUcastPkts.setStatus('obsolete')
if mibBuilder.loadTexts: hubGlobalInNUcastPkts.setDescription('********* THIS OBJECT IS OBSOLETE ********* This counter is incremented for each non-unicast packet received on any port.')
hubGlobalInBroadcastPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubGlobalInBroadcastPkts.setStatus('obsolete')
if mibBuilder.loadTexts: hubGlobalInBroadcastPkts.setDescription('********* THIS OBJECT IS OBSOLETE ********* This counter is incremented for each broadcast packet received on any port.')
hubPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 3), )
if mibBuilder.loadTexts: hubPortTable.setStatus('obsolete')
if mibBuilder.loadTexts: hubPortTable.setDescription('********* THIS OBJECT IS OBSOLETE ********* A list of hubPort entries.')
hubPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubPortIndex.setStatus('obsolete')
if mibBuilder.loadTexts: hubPortIndex.setDescription('********* THIS OBJECT IS OBSOLETE ********* The index value which uniquely identifies the port to which this entry is applicable. The port identified by a particular value of this index is the same port as identified by the same value of rptrPortIndex.')
hubPortPktFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubPortPktFragments.setStatus('obsolete')
if mibBuilder.loadTexts: hubPortPktFragments.setDescription('********* THIS OBJECT IS OBSOLETE ********* This counter is incremented when a packet or packet fragment is encountered for a port instance.')
hubPortCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubPortCollisions.setStatus('obsolete')
if mibBuilder.loadTexts: hubPortCollisions.setDescription('********* THIS OBJECT IS OBSOLETE ********* This counter is incremented when a port is involved in a collision.')
hubPortSegmentation = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubPortSegmentation.setStatus('obsolete')
if mibBuilder.loadTexts: hubPortSegmentation.setDescription("********* THIS OBJECT IS OBSOLETE ********* This is a flag which is 'true' if the port is currently segmented and 'false' otherwise.")
hubPortLinkBeatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubPortLinkBeatStatus.setStatus('obsolete')
if mibBuilder.loadTexts: hubPortLinkBeatStatus.setDescription("********* THIS OBJECT IS OBSOLETE ********* This is a flag which is 'true' if link beat is detected on the port and 'false' otherwise. The value of this variable will always be 'true' when the corresponding instance of hubPortLinkBeatEnable is 'false'.")
hubPortLinkBeatEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hubPortLinkBeatEnable.setStatus('obsolete')
if mibBuilder.loadTexts: hubPortLinkBeatEnable.setDescription("********* THIS OBJECT IS OBSOLETE ********* When this flag is set to 'true' the port's link beat is enabled and when set to 'false' it is disabled.")
hubPortMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 3, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubPortMacAddress.setStatus('obsolete')
if mibBuilder.loadTexts: hubPortMacAddress.setDescription("********* THIS OBJECT IS OBSOLETE ********* Each port maintains the MAC address of the node currently attached to it. This address is valid only when the port state flag is set to 'psSingle'.")
hubPortAddressState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 3, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hubPortAddressState.setStatus('obsolete')
if mibBuilder.loadTexts: hubPortAddressState.setDescription("********* THIS OBJECT IS OBSOLETE ********* The port state object may take on three values. 'psNone' means no packets have been received on the port. 'psSingle' means all packets received on the port have originated from a single MAC address. 'psMany' means that packets originating from more than one node have been received on the port. To (re)start a search for a MAC address set the port state to 'psNone'.")
hubPortPolarityReversed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubPortPolarityReversed.setStatus('obsolete')
if mibBuilder.loadTexts: hubPortPolarityReversed.setDescription('********* THIS OBJECT IS OBSOLETE ********* This object is used to indicate that the hub port was wired with the positive/negative polarity of its transmit and receive pairs reversed. Note that the port will continue to operate in this state, with the hub inverting the polarity internally.')
hubPortLateEventDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubPortLateEventDisable.setStatus('obsolete')
if mibBuilder.loadTexts: hubPortLateEventDisable.setDescription("********* THIS OBJECT IS OBSOLETE ********* This object indicates that the hub port was disabled as a result of excessive late collisions being caused by the end node attached to this port. This flag is cleared when the port is reenabled by setting rptrPortAdminStatus to 'enabled'.")
hubBitmaps = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 4))
hubPortsOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 4, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubPortsOperStatus.setStatus('obsolete')
if mibBuilder.loadTexts: hubPortsOperStatus.setDescription('********* THIS OBJECT IS OBSOLETE ********* The hubPortsOperStatus is a bit map of the state of all hub ports. The object has a 1 bit for each port that is enabled, not segmented, and linkbeat is detected. Ports on which these conditions are not true have a 0 bit. The bits are placed into the OCTET STRING in the following order: octet 0 octet 1 octet 2 ... bits 7-0 bits 7-0 bits 7-0 ... ports 1-8 ports 9-16 ports 17-24 ... Values of unused bits in the last octet are undefined.')
hubAddressTableMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 5), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hubAddressTableMaxAge.setStatus('obsolete')
if mibBuilder.loadTexts: hubAddressTableMaxAge.setDescription('********* THIS OBJECT IS OBSOLETE ********* The hubAddressTableMaxAge is the time beyond which an inactive MAC address will be removed from the hubPortMacAddress table and the hubAddressTable. Although hubAddressTableMaxAge is specified in units of 10ms time ticks, the actual resolution of this timer is 10 seconds. A value of 65535000 indicates no aging shall take place.')
hubAddressTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 6), )
if mibBuilder.loadTexts: hubAddressTable.setStatus('obsolete')
if mibBuilder.loadTexts: hubAddressTable.setDescription('********* THIS OBJECT IS OBSOLETE ********* A list of entries present in the hub address table.')
hubAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubAddressIndex.setStatus('obsolete')
if mibBuilder.loadTexts: hubAddressIndex.setDescription('********* THIS OBJECT IS OBSOLETE ********* The index value which uniquely identifies the chunk to which this entry is applicable.')
hubAddressChunk = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 6, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(408, 408)).setFixedLength(408)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubAddressChunk.setStatus('obsolete')
if mibBuilder.loadTexts: hubAddressChunk.setDescription("********* THIS OBJECT IS OBSOLETE ********* The hubAddressChunk object returns an opaque chunk of the address table. Each chunk can be interpreted as an array of records in the form: mac address [6 bytes], port number [2 bytes], inactivity time [4 bytes] On a Get, the returned chunk can include empty (unused) entries. Instances are chunk numbers, which start at 1 and go to 52. Each chunk can hold 34 addresses. A returned chunk might look like: Address Port Inactivity Time 080009001234 1 0 080009002345 2 10000 080009003456 1 20000 000000000000 1 0 080009009876 EMPTY 0 080009004567 EMPTY 15000 . . . 080009005678 EOL 959000 A value of EMPTY in the Port field indicates an unused (i.e. aged out) entry in the table. When the EOL (End Of List) bit is set in the Port field, that entry is the last entry in the table. It is possible for EOL to be seen in any entry. EOL (0x4000) and EMPTY (0x8000) are bit masks which are ORed with the port number in the port field of the entry. It is possible for both the EOL and EMPTY bits to be set in the same entry. The remainder of the chunk after the EOL entry will be zeroed. The inactivityTime and Address fields are meaningless if the EMPTY bit is set in the Port field. In this case, inactivityTime and Address are not guaranteed to be zeroed. The Manager may start with any chunk it likes and request the chunks in any order. It may perform multiple requests for the same chunk. The agent does not save state from previous requests. A request of chunk #1 would return the contents of the first 34 address table entries, whether they are all full, all empty, or some full and the rest empty. A request of chunk #2 will return entries #35 through #68. And so on. The address table can change between Get requests. An address' location can change, or an address could age out and then be added back in at a different location in the table. Thus, the Manager could see the address twice in the table.")
hubNumBkpLinks = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubNumBkpLinks.setStatus('obsolete')
if mibBuilder.loadTexts: hubNumBkpLinks.setDescription('********* THIS OBJECT IS OBSOLETE ********* The number of backup links configurable on this hub.')
hubBkpLinkTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 8), )
if mibBuilder.loadTexts: hubBkpLinkTable.setStatus('obsolete')
if mibBuilder.loadTexts: hubBkpLinkTable.setDescription('********* THIS OBJECT IS OBSOLETE ********* A list of backup link configuration entries. For a given backup link, the hub will periodically send a test packet to the device at the end of the link. If there are no responses (the number is configurable), the hub will enable the backup port and disable the primary port. After the primary link is fixed, the user must turn the primary port on to resume normal operation. At any time, the management station can look at rptrPortAdminStatus for the backup port to determine if it is currently in use. The backup link algorithm enables and disables the backup port by modifying rptrPortAdminStatus for that port. After the backup port has been enabled by the backup link algorithm, if the primary port is subsequently enabled via the hub console port or by a set of rptrPortAdminStatus, the backup port will be turned off and the periodic test packets will begin again. When the backup link objects are set, the backup port will be turned off, the primary port will be turned on, and the periodic test packets will be sent. The time between test packets is configurable by setting hubBackupTestTime. The number of failures needed to switch to the backup link is configured by setting hubBackupConsecutiveFails. The backup link function can be turned off by setting hubBackupPort to 0. All five of the backup link objects must be set together in a single PDU except for the case of setting hubBackupPort to 0, in which case, the hubBackupPort can be set without setting the other objects. Currently, the size of the backup link table is one; future releases may provide the ability to monitor more than one backup link.')
hubBkpLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubBkpLinkIndex.setStatus('obsolete')
if mibBuilder.loadTexts: hubBkpLinkIndex.setDescription('********* THIS OBJECT IS OBSOLETE ********* The index value which uniquely identifies the backup link configuration entry to which the instance is applicable.')
hubBackupPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hubBackupPort.setStatus('obsolete')
if mibBuilder.loadTexts: hubBackupPort.setDescription('********* THIS OBJECT IS OBSOLETE ********* The port number of the backup link. Setting this object to zero removes the backup link configuration.')
hubPrimaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hubPrimaryPort.setStatus('obsolete')
if mibBuilder.loadTexts: hubPrimaryPort.setDescription('********* THIS OBJECT IS OBSOLETE ********* The port number of the primary link. It can only be set to zero if the hubBackupPort is also zero.')
hubBackupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 8, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hubBackupAddress.setStatus('obsolete')
if mibBuilder.loadTexts: hubBackupAddress.setDescription('********* THIS OBJECT IS OBSOLETE ********* The MAC address of the device at the other end of the primary link which will respond to the periodic test packets sent by this hub.')
hubBackupTestTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 8, 5), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hubBackupTestTime.setStatus('obsolete')
if mibBuilder.loadTexts: hubBackupTestTime.setDescription('********* THIS OBJECT IS OBSOLETE ********* The frequency, in time ticks, between sending the periodic test packets. The actual resolution of this timer is in seconds. The test packet response timeout is fixed at 500ms.')
hubBackupConsecutiveFails = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 8, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hubBackupConsecutiveFails.setStatus('obsolete')
if mibBuilder.loadTexts: hubBackupConsecutiveFails.setDescription('********* THIS OBJECT IS OBSOLETE ********* The number of test packet failures which will cause the hub to switch to the backup link (i.e., backup port turned on, primary port turned off). A value of one is generally not recomended and will cause the backup link to be enabled upon the first failure.')
hubSqeEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubSqeEnabled.setStatus('obsolete')
if mibBuilder.loadTexts: hubSqeEnabled.setDescription("********* THIS OBJECT IS OBSOLETE ********* When 'true', this flag indicates that SQE has been detected for the last ten agent transmits and there is a high probability that the SQE switch on the transceiver attached to the AUI port is set to Enabled, when it should be Disabled.")
hubAddressMoveLogTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 11), )
if mibBuilder.loadTexts: hubAddressMoveLogTable.setStatus('obsolete')
if mibBuilder.loadTexts: hubAddressMoveLogTable.setDescription('********* THIS OBJECT IS OBSOLETE ********* A log of the 20 most recent times that the agent detected that a source MAC address which had been heard on one port had moved to a different port.')
hubAddressMoveLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 11, 1), ).setIndexNames((0, "ICF-ETWIST", "hubAddrMoveIndex"))
if mibBuilder.loadTexts: hubAddressMoveLogEntry.setStatus('obsolete')
if mibBuilder.loadTexts: hubAddressMoveLogEntry.setDescription('********* THIS OBJECT IS OBSOLETE ********* A row in the hubAddressMoveLogTable containing information about a single address movement.')
hubAddrMoveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubAddrMoveIndex.setStatus('obsolete')
if mibBuilder.loadTexts: hubAddrMoveIndex.setDescription('********* THIS OBJECT IS OBSOLETE ********* The index of this entry in the address movement log table. Index 1 will always contain the oldest entry. If the table is full when a new address movement occurs, the new entry becomes index 20, and all earlier entries are shifted down by one entry, removing the old index 1.')
hubAddrMoveAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 11, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubAddrMoveAddress.setStatus('obsolete')
if mibBuilder.loadTexts: hubAddrMoveAddress.setDescription('********* THIS OBJECT IS OBSOLETE ********* The MAC address of the station that moved to a new port.')
hubAddrMoveOldGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubAddrMoveOldGroup.setStatus('obsolete')
if mibBuilder.loadTexts: hubAddrMoveOldGroup.setDescription('********* THIS OBJECT IS OBSOLETE ********* The group containing the port on which this address had been operating before it moved.')
hubAddrMoveOldPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubAddrMoveOldPort.setStatus('obsolete')
if mibBuilder.loadTexts: hubAddrMoveOldPort.setDescription('********* THIS OBJECT IS OBSOLETE ********* The port within the group on which this address had been operating before it moved.')
hubAddrMoveNewGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubAddrMoveNewGroup.setStatus('obsolete')
if mibBuilder.loadTexts: hubAddrMoveNewGroup.setDescription('********* THIS OBJECT IS OBSOLETE ********* The group containing the port that the address moved to.')
hubAddrMoveNewPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hubAddrMoveNewPort.setStatus('obsolete')
if mibBuilder.loadTexts: hubAddrMoveNewPort.setDescription('********* THIS OBJECT IS OBSOLETE ********* The port within the group that the address moved to.')
hubLateEventMonitor = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("onSingle", 2), ("onAll", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hubLateEventMonitor.setStatus('obsolete')
if mibBuilder.loadTexts: hubLateEventMonitor.setDescription("********* THIS OBJECT IS OBSOLETE ********* This object configures the late event monitoring functionality for the hub. This mode periodically samples the rptrMonitorPortLateEvents value for each port. If the agent detects excessive late events on a port, the port will be disabled by setting the rptrPortAdminStatus for that port to 'disabled', and the hubPortLateEventDisable flag for that port will be set to 'true'. This mode is 'off' by default. Setting it to 'onSingle' enables the mode for all non-cascaded hub ports. Setting it to 'onAll' enables the mode for all hub ports, including cascaded ports.")
operationalState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: operationalState.setStatus('obsolete')
if mibBuilder.loadTexts: operationalState.setDescription('********* THIS OBJECT IS OBSOLETE ********* This object controls the forwarding nature of the bridge. In the Learning state the bridge will learn new MAC addresses, and it ages out older MAC addresses. Statically configured addresses are discarded (they do not age). In the Secure state, the bridge will not learn new MAC addresses. Statically configured addresses are forwarded (they do not age).')
forwardDbMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 2), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forwardDbMaxAge.setStatus('obsolete')
if mibBuilder.loadTexts: forwardDbMaxAge.setDescription("********* THIS OBJECT IS OBSOLETE ********* The value of this object controls how long a MAC address stays in the forwarding database. See 802.1d, section 3.9.2 'Dynamic Entries'.")
addressTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 3), )
if mibBuilder.loadTexts: addressTable.setStatus('obsolete')
if mibBuilder.loadTexts: addressTable.setDescription('********* THIS OBJECT IS OBSOLETE ********* A list of address entries.')
addressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: addressIndex.setStatus('obsolete')
if mibBuilder.loadTexts: addressIndex.setDescription('********* THIS OBJECT IS OBSOLETE ********* The index value which uniquely identifies the chunk to which this entry is applicable.')
addressChunk = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 3, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(410, 410)).setFixedLength(410)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addressChunk.setStatus('obsolete')
if mibBuilder.loadTexts: addressChunk.setDescription('********* THIS OBJECT IS OBSOLETE ********* This object returns an opaque chunk of the address table. The instance specifies a chunk of the address table. Each chunk can be interpreted as an array of 41 records of the form: { macAddress[6bytes], port number[2bytes], permanence[2bytes] }. Address Port Perm 00 080009001234 1 Dynamic(0x0000) 01 080009002345 2 Dynamic(0x0000) 02 000000000000 EMPTY(0x8000) Dynamic(0x0000) 03 080009003456 1 Dynamic(0x0000) 04 000000000000 1 Dynamic(0x0000) 05 080009009876 EMPTY(0x8000) Dynamic(0x0000) 06 080009004567 EMPTY(0x8000) Static(0x0008) 07 080009041d08 ... ... ... 40 080009005678 EOL(0x4000) Permanent(0x0000) A value of EMPTY in the Port field indicates an aged out table entry. A value of EOL in the Port field indicates that it is the last entry in the table. Of course, EOL will only be seen in the last entry. EOL and EMPTY are AND-able bit fields. The Disposition and Address are meaningless if Port is EMPTY. When instance=1 is used on a Set, the agent clears the table prior to setting any addresses. On subsequent Sets, the agent adds the specified addresses. If a Set starts at instance > 1, the specified addresses will be added to the table without first clearing the table. Addresses are already in the table are deleted and then readded.')
brgPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 4), )
if mibBuilder.loadTexts: brgPortTable.setStatus('obsolete')
if mibBuilder.loadTexts: brgPortTable.setDescription('********* THIS OBJECT IS OBSOLETE ********* A list of brgPort entries.')
brgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brgPortIndex.setStatus('obsolete')
if mibBuilder.loadTexts: brgPortIndex.setDescription('********* THIS OBJECT IS OBSOLETE ********* The index value which uniquely identifies the interface/port to which this entry is applicable. The interface/port identified by a particular value of this index is the same interface/port as identified by the same value of ifIndex.')
brgPortCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brgPortCacheHits.setStatus('obsolete')
if mibBuilder.loadTexts: brgPortCacheHits.setDescription('********* THIS OBJECT IS OBSOLETE ********* Count of the successful cache matches when looking up a destination MAC address.')
brgPortCacheMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brgPortCacheMisses.setStatus('obsolete')
if mibBuilder.loadTexts: brgPortCacheMisses.setDescription('********* THIS OBJECT IS OBSOLETE ********* Count of the unsuccessful cache matches when looking up a destination MAC address.')
brgPortForwardedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brgPortForwardedPkts.setStatus('obsolete')
if mibBuilder.loadTexts: brgPortForwardedPkts.setDescription('********* THIS OBJECT IS OBSOLETE ********* Count of the packets received on this port and forwarded to the other port.')
brgPortFilteredPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brgPortFilteredPkts.setStatus('obsolete')
if mibBuilder.loadTexts: brgPortFilteredPkts.setDescription('********* THIS OBJECT IS OBSOLETE ********* Count of the frames that were received on this port and filtered.')
wildcardTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 5), )
if mibBuilder.loadTexts: wildcardTable.setStatus('obsolete')
if mibBuilder.loadTexts: wildcardTable.setDescription('********* THIS OBJECT IS OBSOLETE ********* A list of wildcard entries.')
wildcardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wildcardIndex.setStatus('obsolete')
if mibBuilder.loadTexts: wildcardIndex.setDescription('********* THIS OBJECT IS OBSOLETE ********* The index value which uniquely identifies the interface/port to which this entry is applicable. The interface/port identified by a particular value of this index is the same interface/port as identified by the same value of ifIndex.')
wildcardFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 5, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wildcardFilter.setStatus('obsolete')
if mibBuilder.loadTexts: wildcardFilter.setDescription("********* THIS OBJECT IS OBSOLETE ********* This object contains the binary value used to filter frames. The data in the frame at the offset specified by the Wildcard offsets is XOR'ed with this object after AND'ing with the Wildcard Mask. If zero result occurs, the packet is discarded (filtered). Suppose the user specifies the following values: data: 11001010 10101010 10101010 10101010 mask: 11100000 00000000 00000000 00000000 filter: 11100000 00000000 00000000 00000000 AND'ing data with the mask gives: 11000000 00000000 00000000 00000000 XOR'ing that value with the filter gives: 00100000 00000000 00000000 00000000 The non-zero result indicates no match (don't discard). Another example: data: 10011010 10101010 10101010 10101010 mask: 10010000 00000000 00000000 00000000 filter: 10010000 00000000 00000000 00000000 AND'ing data with the mask gives: 10010000 00000000 00000000 00000000 XOR'ing that value with the filter gives: 00000000 00000000 00000000 00000000 A zero result indicates a match, so we discard (filter) the packet. The filter AND'ed with the mask must equal the filter. This is an example of a legal filter/mask pair: filter: 00010000 00000000 00000000 00000000 mask: 10010000 00000000 00000000 00000000 AND'ed: 00010000 00000000 00000000 00000000 (equals filter) Another way of saying this: if a mask bit is zero, the corresponding filter bit must be zero. The following would be an illegal pair: filter: 01110000 00000000 00000000 00000000 mask: 10010000 00000000 00000000 00000000 AND'ed: 00010000 00000000 00000000 00000000 ( != filter)")
wildcardMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 5, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wildcardMask.setStatus('obsolete')
if mibBuilder.loadTexts: wildcardMask.setDescription("********* THIS OBJECT IS OBSOLETE ********* This object indicates which portion of the wildcardFilter is to be used in filtering. The data in the frame at the offset specified by Wildcard offsets is AND'ed with this object. The result is XOR'ed with the Wildcard Filter object. If a zero result is obtained, the packet is discarded. If an all-zeros wildcardMask is specified, a genErr is returned. Also, see mask/filter constraints in the description of the wildcardFilter object.")
wildcardOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wildcardOffset.setStatus('obsolete')
if mibBuilder.loadTexts: wildcardOffset.setDescription('********* THIS OBJECT IS OBSOLETE ********* Indicates the position in a received frame which is to have the Wildcard Mask/Filter applied. The indicated packet byte is aligned with the 0th byte of the wildcard mask/filter held in network byte order. The MAC destination address starts at byte position (wildcardOffset) zero. The wildcardOffset must fall on a 2-byte boundary, 0,2,4,...,1512 (violations of this constraint result in a genErr). Filters can be aligned on non 2-byte boundaries through use of the wildcardUserOffset.')
wildcardUserOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wildcardUserOffset.setStatus('obsolete')
if mibBuilder.loadTexts: wildcardUserOffset.setDescription('********* THIS OBJECT IS OBSOLETE ********* This value is a byte offset from the beginning of the packet. If this offset is such that any portion of the filter extends past the end of the packet (for wildcard filtering purposes, the FCS is part of the packet), then the filter is considered not to match, and the packet is not filtered. For a particular filter, the wildcardUserOffset must be greater than or equal to the wildcardOffset. wildcardUserOffset must be between 0 and 1514, inclusive. The wildcardUserOffset, wildcardOffset pair must conform to one of the following four relationships and also be subject to the range restrictions listed above. For n = 0,..,378 Offset 4n 4n 4n 4n+2 UserOffset 4n 4n+1 4n+2 4n+3 As an example, consider four examples in the following table for locating the filter at or near the beginning of a packet: - 6 filter/mask bytes - - desired - 0 1 2 3 4 5 6 - position - A|f/m0 f/m1 f/m2 f/m3 00 00 00 |0,4,8,12,... B| 00 f/m0 f/m1 f/m2 f/m3 00 00 |1,5,9,13,... C| 00 00 f/m0 f/m1 f/m2 f/m3 00 |2,6,10,14,... D| 00 00 00 f/m0 f/m1 f/m2 f/m3|3,7,11,15,... Example A corresponds to a UserOffset/Offset pair such as 0/0 (4n/4n). Example B represents a pair such as 0/1 (4n/4n+1). Example C is 0/2 (4n/4n+2). Finally, example D is 2/3 (4n+2/4n+3). If any of the above constraints is not honored, the SET Response will indicate genErr.')
wildcardArm = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 5, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wildcardArm.setStatus('obsolete')
if mibBuilder.loadTexts: wildcardArm.setDescription('********* THIS OBJECT IS OBSOLETE ********* This object arms (enables) the Wildcard Filter provided all of the other wildcard objects have been set to proper values. To disarm a wildcard, only the wildcardArm object need be set.')
stp = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6))
stpBridgeId = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpBridgeId.setStatus('obsolete')
if mibBuilder.loadTexts: stpBridgeId.setDescription("********* THIS OBJECT IS OBSOLETE ********* A 64 bit binary bridge id composed of bridge priority and the bridge's mac address fields. see: IEEE 802.1(d) 6.8.1.1.3(1), 4.5.3.7")
stpTopoChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpTopoChangeTime.setStatus('obsolete')
if mibBuilder.loadTexts: stpTopoChangeTime.setDescription('********* THIS OBJECT IS OBSOLETE ********* The time since the last topology change. see: IEEE 802.1(d) 6.8.1.1.3(2), 4.5.3.12')
stpTopoNumChanges = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpTopoNumChanges.setStatus('obsolete')
if mibBuilder.loadTexts: stpTopoNumChanges.setDescription('********* THIS OBJECT IS OBSOLETE ********* The number of topo changes since initialization of STP. see: IEEE 802.1(d) 6.8.1.1.3(3)')
stpTopoChange = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpTopoChange.setStatus('obsolete')
if mibBuilder.loadTexts: stpTopoChange.setDescription('********* THIS OBJECT IS OBSOLETE ********* A 1 bit flag broadcast by the root bridge indicating that a topology change is underway, and Stp bridges should use short term aging. see: IEEE 802.1(d) 6.8.1.1.3(4), 4.5.3.12')
stpDesignatedRoot = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpDesignatedRoot.setStatus('obsolete')
if mibBuilder.loadTexts: stpDesignatedRoot.setDescription('********* THIS OBJECT IS OBSOLETE ********* The binary bridge id that this bridge believes to be the root bridge for the bridged Lan. see: IEEE 802.1(d) 6.8.1.1.3(5), 4.5.3.1')
stpRootCost = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpRootCost.setStatus('obsolete')
if mibBuilder.loadTexts: stpRootCost.setDescription('********* THIS OBJECT IS OBSOLETE ********* The cost of the path to the root bridge from this bridge; equal to the sum of the designated cost and the path cost held for the root port. see: IEEE 802.1(d) 6.8.1.1.3(6), 4.5.3.2')
stpRootPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpRootPort.setStatus('obsolete')
if mibBuilder.loadTexts: stpRootPort.setDescription("********* THIS OBJECT IS OBSOLETE ********* The port id that this bridge believes to be the root bridge's root port for the bridged Lan. see: IEEE 802.1(d) 6.8.1.1.3(7), 4.5.3.3")
stpCurrentMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpCurrentMaxAge.setStatus('obsolete')
if mibBuilder.loadTexts: stpCurrentMaxAge.setDescription('********* THIS OBJECT IS OBSOLETE ********* The Max Age value received from the Root Bridge (in seconds); the Stp is currently using the value. see: IEEE 802.1(d) 6.8.1.1.3(8), 4.5.3.4')
stpCurrentHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpCurrentHelloTime.setStatus('obsolete')
if mibBuilder.loadTexts: stpCurrentHelloTime.setDescription('********* THIS OBJECT IS OBSOLETE ********* The Hello time value received from the Root Bridge (in seconds); the Stp records the value. see: IEEE 802.1(d) 6.8.1.1.3(9), 4.5.3.5')
stpCurrentForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpCurrentForwardDelay.setStatus('obsolete')
if mibBuilder.loadTexts: stpCurrentForwardDelay.setDescription('********* THIS OBJECT IS OBSOLETE ********* The forward delay value received from the Root Bridge (in seconds); the Stp is currently using the value. see: IEEE 802.1(d) 6.8.1.1.3(10), 4.5.3.6')
stpMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpMaxAge.setStatus('obsolete')
if mibBuilder.loadTexts: stpMaxAge.setDescription('********* THIS OBJECT IS OBSOLETE ********* The maximum age allowed of Config information for a port before a bridge will attempt to become the root (in seconds). Transmitted by this bridge when it is, or is attempting to become the root. see: IEEE 802.1(d) 6.8.1.1.3(11), 6.8.1.2.2(1), 4.5.3.8')
stpHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpHelloTime.setStatus('obsolete')
if mibBuilder.loadTexts: stpHelloTime.setDescription('********* THIS OBJECT IS OBSOLETE ********* The time between Config packet transmission when this bridge is, or is attempting to become the root (in seconds). Transmitted by this bridge when it is, or is attempting to become the root. see: IEEE 802.1(d) 6.8.1.1.3(12), 6.8.1.2.2(2), 4.5.3.9')
stpForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpForwardDelay.setStatus('obsolete')
if mibBuilder.loadTexts: stpForwardDelay.setDescription('********* THIS OBJECT IS OBSOLETE ********* The time spent in the Listening and Learning states used when this bridge is, or is attempting to become the root (in seconds). Transmitted by this bridge when it is, or is attempting to become the root. see: IEEE 802.1(d) 6.8.1.1.3(13), 6.8.1.2.2(3), 4.5.3.10')
stpPriority = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPriority.setStatus('obsolete')
if mibBuilder.loadTexts: stpPriority.setDescription("********* THIS OBJECT IS OBSOLETE ********* The upper 16 bits of the 64 bit BridgeId composed of priority and the bridge's mac address fields. see: IEEE 802.1(d) 6.8.1.2.2(4), 4.5.3.7")
stpPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 15), )
if mibBuilder.loadTexts: stpPortTable.setStatus('obsolete')
if mibBuilder.loadTexts: stpPortTable.setDescription('********* THIS OBJECT IS OBSOLETE ********* A list of stpPort entries.')
stpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortIndex.setStatus('obsolete')
if mibBuilder.loadTexts: stpPortIndex.setDescription('********* THIS OBJECT IS OBSOLETE ********* The index value which uniquely identifies the port to which this entry is applicable. The port identified by a particular value of this index is the same interface/port as identified by the same value of ifIndex. Not an IEEE 802.1(d) reqmt.')
stpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 15, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortState.setStatus('obsolete')
if mibBuilder.loadTexts: stpPortState.setDescription("********* THIS OBJECT IS OBSOLETE ********* The state of a port on a 2 port bridge is really the state of the bridge itself. Management is only allowed to set this object to 'stpDisabled' or 'stpBlocking'. Setting the object to 'stpDisabled' will turn off spanning tree only if the state is not 'stpBlocking' (to prevent loops). Setting the object to 'stpBlocking' will turn on spanning tree only if it was previously disabled. see: IEEE 802.1(d) 6.8.2.1.3(2), 4.4, 4.5.5.2")
stpPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 15, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortId.setStatus('obsolete')
if mibBuilder.loadTexts: stpPortId.setDescription("********* THIS OBJECT IS OBSOLETE ********* The 16 bit port id composed of priority and the port's unique id fields. see: IEEE 802.1(d) 6.8.2.1.3(3), 4.5.5.1")
stpPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 15, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortPathCost.setStatus('obsolete')
if mibBuilder.loadTexts: stpPortPathCost.setDescription('********* THIS OBJECT IS OBSOLETE ********* The contribution of the path through this port, when the port is the root port, to the total cost of the path to the root for this bridge. see: IEEE 802.1(d) 6.8.2.1.3(4), 6.8.2.3.2(2), 4.5.5.3')
stpPortRootId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 15, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortRootId.setStatus('obsolete')
if mibBuilder.loadTexts: stpPortRootId.setDescription('********* THIS OBJECT IS OBSOLETE ********* The bridge id that this port believes to be the root bridge for the bridged Lan. see: IEEE 802.1(d) 6.8.2.1.3(5), 4.5.5.4')
stpPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 15, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortDesignatedCost.setStatus('obsolete')
if mibBuilder.loadTexts: stpPortDesignatedCost.setDescription('********* THIS OBJECT IS OBSOLETE ********* The cost of the path to the root offered by the Designated Port on the LAN to which this Port is attached. see: IEEE 802.1(d) 6.8.2.1.3(6), 4.5.5.5')
stpPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 15, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortDesignatedBridge.setStatus('obsolete')
if mibBuilder.loadTexts: stpPortDesignatedBridge.setDescription('********* THIS OBJECT IS OBSOLETE ********* The Bridge Id of the designated bridge for the LAN associated with the port. see: IEEE 802.1(d) 6.8.2.1.3(7), 4.5.5.6')
stpPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 15, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpPortDesignatedPort.setStatus('obsolete')
if mibBuilder.loadTexts: stpPortDesignatedPort.setDescription('********* THIS OBJECT IS OBSOLETE ********* The port id of the bridge believed to be the designated port of the LAN associated with the port. see: IEEE 802.1(d) 6.8.2.1.3(8), 4.5.5.7')
stpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 6, 15, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPortPriority.setStatus('obsolete')
if mibBuilder.loadTexts: stpPortPriority.setDescription("********* THIS OBJECT IS OBSOLETE ********* The upper 8 bits of the 16 bit PortId composed of priority and the port's unique id fields. see: IEEE 802.1(d) 6.8.2.3.2(3), 4.5.5.1")
hdlcErrorTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 7), )
if mibBuilder.loadTexts: hdlcErrorTable.setStatus('obsolete')
if mibBuilder.loadTexts: hdlcErrorTable.setDescription('********* THIS OBJECT IS OBSOLETE ********* A list of hdlcError entries.')
hdlcErrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcErrorIndex.setStatus('obsolete')
if mibBuilder.loadTexts: hdlcErrorIndex.setDescription("********* THIS OBJECT IS OBSOLETE ********* The index value which uniquely identifies the port to which this entry is applicable. The port identified by a particular value of this index is the same interface/port as identified by the same value of ifIndex. IcfBridge.HP28674: There is only one 'real' instance of this object on port 2.")
hdlcErrorIndications = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 7, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcErrorIndications.setStatus('obsolete')
if mibBuilder.loadTexts: hdlcErrorIndications.setDescription('********* THIS OBJECT IS OBSOLETE ********* Errors occurring during information transfer which required instruction from CPU for recovery. This is a serious link problem. The local node will either reset or disconnect after receiving this message.')
hdlcT1Timeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 7, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcT1Timeouts.setStatus('obsolete')
if mibBuilder.loadTexts: hdlcT1Timeouts.setDescription('********* THIS OBJECT IS OBSOLETE ********* The number of times the retransmission timer (x25T1Timer) timed out.')
hdlcMissedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 7, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcMissedPackets.setStatus('obsolete')
if mibBuilder.loadTexts: hdlcMissedPackets.setDescription("********* THIS OBJECT IS OBSOLETE ********* Count of the frames lost by the receiver because there wasn't a receive buffer.")
hdlcRcvOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 7, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcRcvOverruns.setStatus('obsolete')
if mibBuilder.loadTexts: hdlcRcvOverruns.setDescription("********* THIS OBJECT IS OBSOLETE ********* Count of the number of times the reciever's FIFO was full when the receiver was ready to put new data into the FIFO.")
hdlcXmtUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 7, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcXmtUnderruns.setStatus('obsolete')
if mibBuilder.loadTexts: hdlcXmtUnderruns.setDescription('********* THIS OBJECT IS OBSOLETE ********* Count of the number of times the transmitter has aborted a frame transmission because data was late from memory.')
hdlcProviderLostPrimitives = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 7, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcProviderLostPrimitives.setStatus('obsolete')
if mibBuilder.loadTexts: hdlcProviderLostPrimitives.setDescription('********* THIS OBJECT IS OBSOLETE ********* Count of the number of lost control frames due to 802.3 priority processing on receive.')
hdlcRuntFrameReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 7, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcRuntFrameReceives.setStatus('obsolete')
if mibBuilder.loadTexts: hdlcRuntFrameReceives.setDescription('********* THIS OBJECT IS OBSOLETE ********* Count of the HDLC frames received that were less than the minimum legal HDLC size.')
hdlcGiantFrameReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 7, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcGiantFrameReceives.setStatus('obsolete')
if mibBuilder.loadTexts: hdlcGiantFrameReceives.setDescription('********* THIS OBJECT IS OBSOLETE ********* Count of the HDLC frames received that were larger than the maximum legal size that can be sent on the 802.3 LAN link.')
hdlcBadFrameReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 7, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcBadFrameReceives.setStatus('obsolete')
if mibBuilder.loadTexts: hdlcBadFrameReceives.setDescription('********* THIS OBJECT IS OBSOLETE ********* Count of the sum of: HDLC frames with bad checksum, and misaligned HDLC frames.')
hdlcRejectFrameReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 7, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcRejectFrameReceives.setStatus('obsolete')
if mibBuilder.loadTexts: hdlcRejectFrameReceives.setDescription('********* THIS OBJECT IS OBSOLETE ********* Count of the HDLC reject frames received.')
hdlcRejectFrameSends = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 7, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcRejectFrameSends.setStatus('obsolete')
if mibBuilder.loadTexts: hdlcRejectFrameSends.setDescription('********* THIS OBJECT IS OBSOLETE ********* Count of the HDLC reject frames sent.')
hdlcFrameRejectFrameRecs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 7, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcFrameRejectFrameRecs.setStatus('obsolete')
if mibBuilder.loadTexts: hdlcFrameRejectFrameRecs.setDescription('********* THIS OBJECT IS OBSOLETE ********* Count of the HDLC frame reject frames (FRMR) received.')
hdlcLocalTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 8), )
if mibBuilder.loadTexts: hdlcLocalTable.setStatus('obsolete')
if mibBuilder.loadTexts: hdlcLocalTable.setDescription('********* THIS OBJECT IS OBSOLETE ********* A list of hdlcLocal entries.')
hdlcLocalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcLocalIndex.setStatus('obsolete')
if mibBuilder.loadTexts: hdlcLocalIndex.setDescription("********* THIS OBJECT IS OBSOLETE ********* Index into Hdlc local statistics table on a per port basis. bridge.HP28674: There is only one 'real' instance of this object on port 2.")
hdlcLocalResetRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 8, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcLocalResetRequests.setStatus('obsolete')
if mibBuilder.loadTexts: hdlcLocalResetRequests.setDescription('********* THIS OBJECT IS OBSOLETE ********* Count of local HDLC requests to reset current logical link.')
hdlcLocalResetConfirms = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 8, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcLocalResetConfirms.setStatus('obsolete')
if mibBuilder.loadTexts: hdlcLocalResetConfirms.setDescription('********* THIS OBJECT IS OBSOLETE ********* Count of local HDLC node link reset confirmations.')
hdlcLocalConnectRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 8, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcLocalConnectRequests.setStatus('obsolete')
if mibBuilder.loadTexts: hdlcLocalConnectRequests.setDescription('********* THIS OBJECT IS OBSOLETE ********* Count of local HDLC node attempts to establish logical link.')
hdlcLocalConnectConfirms = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 8, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcLocalConnectConfirms.setStatus('obsolete')
if mibBuilder.loadTexts: hdlcLocalConnectConfirms.setDescription('********* THIS OBJECT IS OBSOLETE ********* Count of local HDLC node connect request acceptances.')
hdlcLocalDisconnectRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 8, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcLocalDisconnectRequests.setStatus('obsolete')
if mibBuilder.loadTexts: hdlcLocalDisconnectRequests.setDescription('********* THIS OBJECT IS OBSOLETE ********* Count of local HDLC node disconnect requests.')
hdlcLocalDisconnectConfirms = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 8, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcLocalDisconnectConfirms.setStatus('obsolete')
if mibBuilder.loadTexts: hdlcLocalDisconnectConfirms.setDescription('********* THIS OBJECT IS OBSOLETE ********* Count of local HDLC node disconnects granted.')
hdlcLocalState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 8, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcLocalState.setStatus('obsolete')
if mibBuilder.loadTexts: hdlcLocalState.setDescription('********* THIS OBJECT IS OBSOLETE ********* Current local HDLC operational state.')
hdlcLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 8, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("hdlcDTEAddress", 1), ("hdlcDCEAddress", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdlcLocalAddress.setStatus('obsolete')
if mibBuilder.loadTexts: hdlcLocalAddress.setDescription("********* THIS OBJECT IS OBSOLETE ********* The local HDLC address during communication with the remote node. This object is valid only if a brouter is on the remote end of the HDLC link. It can only be set to one of the two values: 'hdlcDTEAddress' or 'hdlcDTEAddress'. Furthermore, the setting of this object must be different from the setting of the hdlcRemoteHdlcAddress object. This object, along with hdlcRemoteAddress and hdlcRemoteNodeId, constitute a superobject. See hdlcRemoteNodeId for more details.")
hdlcLocalPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 8, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcLocalPhase.setStatus('obsolete')
if mibBuilder.loadTexts: hdlcLocalPhase.setDescription('********* THIS OBJECT IS OBSOLETE ********* Current HDLC operational phase.')
hdlcRemoteTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 9), )
if mibBuilder.loadTexts: hdlcRemoteTable.setStatus('obsolete')
if mibBuilder.loadTexts: hdlcRemoteTable.setDescription('********* THIS OBJECT IS OBSOLETE ********* A list of hdlcRemote entries.')
hdlcRemoteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcRemoteIndex.setStatus('obsolete')
if mibBuilder.loadTexts: hdlcRemoteIndex.setDescription("********* THIS OBJECT IS OBSOLETE ********* Index into Hdlc remote statistics table on a per port basis. bridge.HP28674: There is only one 'real' instance of this object on port 2.")
hdlcRemoteResetRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 9, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcRemoteResetRequests.setStatus('obsolete')
if mibBuilder.loadTexts: hdlcRemoteResetRequests.setDescription('********* THIS OBJECT IS OBSOLETE ********* Count of remote HDLC requests to reset current logical link.')
hdlcRemoteResetConfirms = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 9, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcRemoteResetConfirms.setStatus('obsolete')
if mibBuilder.loadTexts: hdlcRemoteResetConfirms.setDescription('********* THIS OBJECT IS OBSOLETE ********* Count of remote HDLC node link reset confirmations.')
hdlcRemoteConnectRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 9, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcRemoteConnectRequests.setStatus('obsolete')
if mibBuilder.loadTexts: hdlcRemoteConnectRequests.setDescription('********* THIS OBJECT IS OBSOLETE ********* Count of remote HDLC node attempts to establish logical link.')
hdlcRemoteConnectConfirms = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 9, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcRemoteConnectConfirms.setStatus('obsolete')
if mibBuilder.loadTexts: hdlcRemoteConnectConfirms.setDescription('********* THIS OBJECT IS OBSOLETE ********* Count of remote HDLC node connect request acceptances.')
hdlcRemoteDisconnectRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 9, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcRemoteDisconnectRequests.setStatus('obsolete')
if mibBuilder.loadTexts: hdlcRemoteDisconnectRequests.setDescription('********* THIS OBJECT IS OBSOLETE ********* Count of remote HDLC node disconnect requests.')
hdlcRemoteState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 9, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcRemoteState.setStatus('obsolete')
if mibBuilder.loadTexts: hdlcRemoteState.setDescription('********* THIS OBJECT IS OBSOLETE ********* Current remote HDLC operational state.')
hdlcRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 9, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("hdlcDTEAddress", 1), ("hdlcDCEAddress", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdlcRemoteAddress.setStatus('obsolete')
if mibBuilder.loadTexts: hdlcRemoteAddress.setDescription("********* THIS OBJECT IS OBSOLETE ********* The remote HDLC address during communication with the local node. This object is valid only if a brouter is on the remote end of the HDLC link. It can only be set to one of the two values: 'hdlcDCEAddress' or 'hdlcDTEAddress'. Furthermore, the setting of this object must be different from the setting of the hdlcLocalAddress object. This object, along with hdlcLocalAddress and hdlcRemoteNodeId, constitute a superobject. See hdlcRemoteNodeId for more details.")
hdlcRemoteXidCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 9, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcRemoteXidCommands.setStatus('obsolete')
if mibBuilder.loadTexts: hdlcRemoteXidCommands.setDescription('********* THIS OBJECT IS OBSOLETE ********* Count of XID commands issued by remote node.')
hdlcRemoteXidResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 9, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcRemoteXidResponses.setStatus('obsolete')
if mibBuilder.loadTexts: hdlcRemoteXidResponses.setDescription('********* THIS OBJECT IS OBSOLETE ********* Count of XID responses issued by remote node.')
hdlcRemoteTestCommands = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 9, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcRemoteTestCommands.setStatus('obsolete')
if mibBuilder.loadTexts: hdlcRemoteTestCommands.setDescription('********* THIS OBJECT IS OBSOLETE ********* Count of Test commands issued by remote node.')
hdlcRemoteTestResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 9, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdlcRemoteTestResponses.setStatus('obsolete')
if mibBuilder.loadTexts: hdlcRemoteTestResponses.setDescription('********* THIS OBJECT IS OBSOLETE ********* Count of Test responses issued by remote node.')
hdlcRemoteNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 9, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdlcRemoteNodeId.setStatus('obsolete')
if mibBuilder.loadTexts: hdlcRemoteNodeId.setDescription("********* THIS OBJECT IS OBSOLETE ********* Identification of the node at the opposite end of the HDLC link (eg. brouter or bridge). This object, along with hdlcLocalAddress and hdlcRemoteAddress, constitute a superobject. This object may only be set to one of the two values: 'remoteNodeBridge' or 'remoteNodeRouter'. If this object is set to 'remoteNodeUnknown', then hdlcLocalAddress and hdlcRemoteAddress need not be supplied, and will be ignored if provided. In a get, this object may report 'remoteNodeBridge', but attempts to set this object to 'remoteNodeBridge' will result in an error pdu with error type invalidData. If this object is set to 'remoteNodeRouter', then hdlcLocalAddress and hdlcRemoteAddress must be present and contiguous in the pdu in order to properly complete the superobject. The three objects may be in any order within the pdu.")
x25Table = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 10), )
if mibBuilder.loadTexts: x25Table.setStatus('obsolete')
if mibBuilder.loadTexts: x25Table.setDescription('********* THIS OBJECT IS OBSOLETE ********* A list of X25 entries.')
x25Index = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25Index.setStatus('obsolete')
if mibBuilder.loadTexts: x25Index.setDescription("********* THIS OBJECT IS OBSOLETE ********* Index into X25 remote timer table on a per port basis. bridge.HP28674: There is only one 'real' instance of this object on port 2.")
x25T1Timer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 10, 2), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25T1Timer.setStatus('obsolete')
if mibBuilder.loadTexts: x25T1Timer.setDescription('********* THIS OBJECT IS OBSOLETE ********* Period of time used to timeout retransmits for X25.')
x25N2Count = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 10, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25N2Count.setStatus('obsolete')
if mibBuilder.loadTexts: x25N2Count.setDescription('********* THIS OBJECT IS OBSOLETE ********* Number of retries to be performed during X.25 communication.')
x25T3Timer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 3, 10, 4), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25T3Timer.setStatus('obsolete')
if mibBuilder.loadTexts: x25T3Timer.setDescription('********* THIS OBJECT IS OBSOLETE ********* Period of idle time before a disconnect is executed for X25.')
icfConfigIfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 5, 1), )
if mibBuilder.loadTexts: icfConfigIfTable.setStatus('obsolete')
if mibBuilder.loadTexts: icfConfigIfTable.setDescription('********* THIS OBJECT IS OBSOLETE ********* This table contains per-interface configuration information that will take effect after the next reset of the device.')
icfConfigIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 5, 1, 1), ).setIndexNames((0, "ICF-ETWIST", "icfConfigIfIndex"))
if mibBuilder.loadTexts: icfConfigIfEntry.setStatus('obsolete')
if mibBuilder.loadTexts: icfConfigIfEntry.setDescription('********* THIS OBJECT IS OBSOLETE ********* An entry in the icfConfigIfTable containing information about a single interface.')
icfConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icfConfigIfIndex.setStatus('obsolete')
if mibBuilder.loadTexts: icfConfigIfIndex.setDescription('********* THIS OBJECT IS OBSOLETE ********* The index of the interface which this information contains configuration information for. The interface identified by a particular value of this index is the same interface identified by the same value of ifIndex.')
icfConfigIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 5, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icfConfigIfIpAddress.setStatus('obsolete')
if mibBuilder.loadTexts: icfConfigIfIpAddress.setDescription('********* THIS OBJECT IS OBSOLETE ********* This variable contains the IP address for this interface which will be used after the next reset of the device.')
icfConfigIfNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 5, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icfConfigIfNetMask.setStatus('obsolete')
if mibBuilder.loadTexts: icfConfigIfNetMask.setDescription('********* THIS OBJECT IS OBSOLETE ********* This variable contains the IP subnet mask for this interface which will be used after the next reset of the device.')
icfConfigIfDefaultGate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 5, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icfConfigIfDefaultGate.setStatus('obsolete')
if mibBuilder.loadTexts: icfConfigIfDefaultGate.setDescription('********* THIS OBJECT IS OBSOLETE ********* This variable contains the IP address of the default router for this interface which will be used after the next reset of the device.')
icfConfigIpTTL = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icfConfigIpTTL.setStatus('obsolete')
if mibBuilder.loadTexts: icfConfigIpTTL.setDescription('********* THIS OBJECT IS OBSOLETE ********* This variable contains the default IP time to live which will be used after the next reset of the device.')
icfConfigBootpEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icfConfigBootpEnable.setStatus('obsolete')
if mibBuilder.loadTexts: icfConfigBootpEnable.setDescription("********* THIS OBJECT IS OBSOLETE ********* Setting this flag to 'enabled' (the default) will clear any existing IP address configuration for this device, and will cause the device to use the Bootp protocol to obtain its IP configuration after the next reset. This flag must be set to 'disabled' in order to configure an IP address for the device. Setting this flag to 'disabled' will prevent the Bootp protocol from running. Setting this flag to 'disabled' when there is no IP address configured will disable the IP protocol stack on this device.")
bridge1010TrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 1, 1, 0))
bridgeRemoteTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 1, 2, 0))
etherTwist12TrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 1, 0))
fiberOpticTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 3, 0))
etherTwist48TrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 4, 0))
thinLANTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 5, 0))
etherTwist24STrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 6, 0))
advStack12TrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 7, 0))
advStack24TrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 8, 0))
advStack48TrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 9, 0))
advStackU8TrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 11, 0))
advStackU16TrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 12, 0))
repeaterAgentTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 1, 0))
hpicfEnetSMMTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 2, 4, 0))
thresholdTrap1010 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 1, 1, 0, 0)).setObjects(("ICF-ETWIST", "evthObject"), ("ICF-ETWIST", "evthThreshold"), ("ICF-ETWIST", "evthHysteresis"), ("ICF-ETWIST", "evthTimeInterval"))
if mibBuilder.loadTexts: thresholdTrap1010.setStatus('obsolete')
if mibBuilder.loadTexts: thresholdTrap1010.setDescription('********* THIS NOTIFICATION IS OBSOLETE ********* A thresholdTrap(0) is specific to ICF devices. It signifies that the threshold entity in the device has detected that the object identified by evthObject has exceeded the threshold identified by evthThreshold during the time interval evthTimeInterval. After this condition occurs, it will not reoccur until the the object identified by evthObject falls below evthHysteresis for the duration of evthTimeInterval.')
thresholdTrapRem = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 1, 2, 0, 0)).setObjects(("ICF-ETWIST", "evthObject"), ("ICF-ETWIST", "evthThreshold"), ("ICF-ETWIST", "evthHysteresis"), ("ICF-ETWIST", "evthTimeInterval"))
if mibBuilder.loadTexts: thresholdTrapRem.setStatus('obsolete')
if mibBuilder.loadTexts: thresholdTrapRem.setDescription('********* THIS NOTIFICATION IS OBSOLETE ********* A thresholdTrap(0) is specific to ICF devices. It signifies that the threshold entity in the device has detected that the object identified by evthObject has exceeded the threshold identified by evthThreshold during the time interval evthTimeInterval. After this condition occurs, it will not reoccur until the the object identified by evthObject falls below evthHysteresis for the duration of evthTimeInterval.')
thresholdTrapET12 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 1, 0, 0)).setObjects(("ICF-ETWIST", "evthObject"), ("ICF-ETWIST", "evthThreshold"), ("ICF-ETWIST", "evthHysteresis"), ("ICF-ETWIST", "evthTimeInterval"))
if mibBuilder.loadTexts: thresholdTrapET12.setStatus('obsolete')
if mibBuilder.loadTexts: thresholdTrapET12.setDescription('********* THIS NOTIFICATION IS OBSOLETE ********* A thresholdTrap(0) is specific to ICF devices. It signifies that the threshold entity in the device has detected that the object identified by evthObject has exceeded the threshold identified by evthThreshold during the time interval evthTimeInterval. After this condition occurs, it will not reoccur until the the object identified by evthObject falls below evthHysteresis for the duration of evthTimeInterval.')
thresholdTrapET48 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 4, 0, 0)).setObjects(("ICF-ETWIST", "evthObject"), ("ICF-ETWIST", "evthThreshold"), ("ICF-ETWIST", "evthHysteresis"), ("ICF-ETWIST", "evthTimeInterval"))
if mibBuilder.loadTexts: thresholdTrapET48.setStatus('obsolete')
if mibBuilder.loadTexts: thresholdTrapET48.setDescription('********* THIS NOTIFICATION IS OBSOLETE ********* A thresholdTrap(0) is specific to ICF devices. It signifies that the threshold entity in the device has detected that the object identified by evthObject has exceeded the threshold identified by evthThreshold during the time interval evthTimeInterval. After this condition occurs, it will not reoccur until the the object identified by evthObject falls below evthHysteresis for the duration of evthTimeInterval.')
thresholdTrapTLAN = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 5, 0, 0)).setObjects(("ICF-ETWIST", "evthObject"), ("ICF-ETWIST", "evthThreshold"), ("ICF-ETWIST", "evthHysteresis"), ("ICF-ETWIST", "evthTimeInterval"))
if mibBuilder.loadTexts: thresholdTrapTLAN.setStatus('obsolete')
if mibBuilder.loadTexts: thresholdTrapTLAN.setDescription('********* THIS NOTIFICATION IS OBSOLETE ********* A thresholdTrap(0) is specific to ICF devices. It signifies that the threshold entity in the device has detected that the object identified by evthObject has exceeded the threshold identified by evthThreshold during the time interval evthTimeInterval. After this condition occurs, it will not reoccur until the the object identified by evthObject falls below evthHysteresis for the duration of evthTimeInterval.')
thresholdTrapFiber = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 3, 0, 0)).setObjects(("ICF-ETWIST", "evthObject"), ("ICF-ETWIST", "evthThreshold"), ("ICF-ETWIST", "evthHysteresis"), ("ICF-ETWIST", "evthTimeInterval"))
if mibBuilder.loadTexts: thresholdTrapFiber.setStatus('obsolete')
if mibBuilder.loadTexts: thresholdTrapFiber.setDescription('********* THIS NOTIFICATION IS OBSOLETE ********* A thresholdTrap(0) is specific to ICF devices. It signifies that the threshold entity in the device has detected that the object identified by evthObject has exceeded the threshold identified by evthThreshold during the time interval evthTimeInterval. After this condition occurs, it will not reoccur until the the object identified by evthObject falls below evthHysteresis for the duration of evthTimeInterval.')
thresholdTrapET24S = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 6, 0, 0)).setObjects(("ICF-ETWIST", "evthObject"), ("ICF-ETWIST", "evthThreshold"), ("ICF-ETWIST", "evthHysteresis"), ("ICF-ETWIST", "evthTimeInterval"))
if mibBuilder.loadTexts: thresholdTrapET24S.setStatus('obsolete')
if mibBuilder.loadTexts: thresholdTrapET24S.setDescription('********* THIS NOTIFICATION IS OBSOLETE ********* A thresholdTrap(0) is specific to ICF devices. It signifies that the threshold entity in the device has detected that the object identified by evthObject has exceeded the threshold identified by evthThreshold during the time interval evthTimeInterval. After this condition occurs, it will not reoccur until the the object identified by evthObject falls below evthHysteresis for the duration of evthTimeInterval.')
thresholdTrapAS12 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 7, 0, 0)).setObjects(("ICF-ETWIST", "evthObject"), ("ICF-ETWIST", "evthThreshold"), ("ICF-ETWIST", "evthHysteresis"), ("ICF-ETWIST", "evthTimeInterval"))
if mibBuilder.loadTexts: thresholdTrapAS12.setStatus('obsolete')
if mibBuilder.loadTexts: thresholdTrapAS12.setDescription('********* THIS NOTIFICATION IS OBSOLETE ********* A thresholdTrap(0) is specific to ICF devices. It signifies that the threshold entity in the device has detected that the object identified by evthObject has exceeded the threshold identified by evthThreshold during the time interval evthTimeInterval. After this condition occurs, it will not reoccur until the the object identified by evthObject falls below evthHysteresis for the duration of evthTimeInterval.')
thresholdTrapAS24 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 8, 0, 0)).setObjects(("ICF-ETWIST", "evthObject"), ("ICF-ETWIST", "evthThreshold"), ("ICF-ETWIST", "evthHysteresis"), ("ICF-ETWIST", "evthTimeInterval"))
if mibBuilder.loadTexts: thresholdTrapAS24.setStatus('obsolete')
if mibBuilder.loadTexts: thresholdTrapAS24.setDescription('********* THIS NOTIFICATION IS OBSOLETE ********* A thresholdTrap(0) is specific to ICF devices. It signifies that the threshold entity in the device has detected that the object identified by evthObject has exceeded the threshold identified by evthThreshold during the time interval evthTimeInterval. After this condition occurs, it will not reoccur until the the object identified by evthObject falls below evthHysteresis for the duration of evthTimeInterval.')
thresholdTrapAS48 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 9, 0, 0)).setObjects(("ICF-ETWIST", "evthObject"), ("ICF-ETWIST", "evthThreshold"), ("ICF-ETWIST", "evthHysteresis"), ("ICF-ETWIST", "evthTimeInterval"))
if mibBuilder.loadTexts: thresholdTrapAS48.setStatus('obsolete')
if mibBuilder.loadTexts: thresholdTrapAS48.setDescription('********* THIS NOTIFICATION IS OBSOLETE ********* A thresholdTrap(0) is specific to ICF devices. It signifies that the threshold entity in the device has detected that the object identified by evthObject has exceeded the threshold identified by evthThreshold during the time interval evthTimeInterval. After this condition occurs, it will not reoccur until the the object identified by evthObject falls below evthHysteresis for the duration of evthTimeInterval.')
thresholdTrapASU8 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 11, 0, 0)).setObjects(("ICF-ETWIST", "evthObject"), ("ICF-ETWIST", "evthThreshold"), ("ICF-ETWIST", "evthHysteresis"), ("ICF-ETWIST", "evthTimeInterval"))
if mibBuilder.loadTexts: thresholdTrapASU8.setStatus('obsolete')
if mibBuilder.loadTexts: thresholdTrapASU8.setDescription('********* THIS NOTIFICATION IS OBSOLETE ********* A thresholdTrap(0) is specific to ICF devices. It signifies that the threshold entity in the device has detected that the object identified by evthObject has exceeded the threshold identified by evthThreshold during the time interval evthTimeInterval. After this condition occurs, it will not reoccur until the the object identified by evthObject falls below evthHysteresis for the duration of evthTimeInterval.')
thresholdTrapASU16 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 12, 0, 0)).setObjects(("ICF-ETWIST", "evthObject"), ("ICF-ETWIST", "evthThreshold"), ("ICF-ETWIST", "evthHysteresis"), ("ICF-ETWIST", "evthTimeInterval"))
if mibBuilder.loadTexts: thresholdTrapASU16.setStatus('obsolete')
if mibBuilder.loadTexts: thresholdTrapASU16.setDescription('********* THIS NOTIFICATION IS OBSOLETE ********* A thresholdTrap(0) is specific to ICF devices. It signifies that the threshold entity in the device has detected that the object identified by evthObject has exceeded the threshold identified by evthThreshold during the time interval evthTimeInterval. After this condition occurs, it will not reoccur until the the object identified by evthObject falls below evthHysteresis for the duration of evthTimeInterval.')
thresholdTrapASEN = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 1, 0, 0)).setObjects(("ICF-ETWIST", "evthObject"), ("ICF-ETWIST", "evthThreshold"), ("ICF-ETWIST", "evthHysteresis"), ("ICF-ETWIST", "evthTimeInterval"))
if mibBuilder.loadTexts: thresholdTrapASEN.setStatus('obsolete')
if mibBuilder.loadTexts: thresholdTrapASEN.setDescription('********* THIS NOTIFICATION IS OBSOLETE ********* A thresholdTrap(0) is specific to ICF devices. It signifies that the threshold entity in the device has detected that the object identified by evthObject has exceeded the threshold identified by evthThreshold during the time interval evthTimeInterval. After this condition occurs, it will not reoccur until the the object identified by evthObject falls below evthHysteresis for the duration of evthTimeInterval.')
thresholdTrapSMM = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 2, 4, 0, 0)).setObjects(("ICF-ETWIST", "evthObject"), ("ICF-ETWIST", "evthThreshold"), ("ICF-ETWIST", "evthHysteresis"), ("ICF-ETWIST", "evthTimeInterval"))
if mibBuilder.loadTexts: thresholdTrapSMM.setStatus('obsolete')
if mibBuilder.loadTexts: thresholdTrapSMM.setDescription('********* THIS NOTIFICATION IS OBSOLETE ********* A thresholdTrap(0) is specific to ICF devices. It signifies that the threshold entity in the device has detected that the object identified by evthObject has exceeded the threshold identified by evthThreshold during the time interval evthTimeInterval. After this condition occurs, it will not reoccur until the the object identified by evthObject falls below evthHysteresis for the duration of evthTimeInterval.')
linkBeatTrapET12 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 1, 0, 3)).setObjects(("ICF-ETWIST", "hubPortLinkBeatStatus"))
if mibBuilder.loadTexts: linkBeatTrapET12.setStatus('obsolete')
if mibBuilder.loadTexts: linkBeatTrapET12.setDescription("********* THIS NOTIFICATION IS OBSOLETE ********* A linkBeatTrap(3) is device type specific to ICF hubs. It signifies that the hub hardware has detected a change of state in a port's link beat status. The current value of the port's link beat status is returned in the PDU.")
linkBeatTrapET48 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 4, 0, 3)).setObjects(("ICF-ETWIST", "hubPortLinkBeatStatus"))
if mibBuilder.loadTexts: linkBeatTrapET48.setStatus('obsolete')
if mibBuilder.loadTexts: linkBeatTrapET48.setDescription("********* THIS NOTIFICATION IS OBSOLETE ********* A linkBeatTrap(3) is device type specific to ICF hubs. It signifies that the hub hardware has detected a change of state in a port's link beat status. The current value of the port's link beat status is returned in the PDU.")
linkBeatTrapTLAN = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 5, 0, 3)).setObjects(("ICF-ETWIST", "hubPortLinkBeatStatus"))
if mibBuilder.loadTexts: linkBeatTrapTLAN.setStatus('obsolete')
if mibBuilder.loadTexts: linkBeatTrapTLAN.setDescription("********* THIS NOTIFICATION IS OBSOLETE ********* A linkBeatTrap(3) is device type specific to ICF hubs. It signifies that the hub hardware has detected a change of state in a port's link beat status. The current value of the port's link beat status is returned in the PDU.")
linkBeatTrapFiber = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 3, 0, 3)).setObjects(("ICF-ETWIST", "hubPortLinkBeatStatus"))
if mibBuilder.loadTexts: linkBeatTrapFiber.setStatus('obsolete')
if mibBuilder.loadTexts: linkBeatTrapFiber.setDescription("********* THIS NOTIFICATION IS OBSOLETE ********* A linkBeatTrap(3) is device type specific to ICF hubs. It signifies that the hub hardware has detected a change of state in a port's link beat status. The current value of the port's link beat status is returned in the PDU.")
linkBeatTrapET24S = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 6, 0, 3)).setObjects(("ICF-ETWIST", "hubPortLinkBeatStatus"))
if mibBuilder.loadTexts: linkBeatTrapET24S.setStatus('obsolete')
if mibBuilder.loadTexts: linkBeatTrapET24S.setDescription("********* THIS NOTIFICATION IS OBSOLETE ********* A linkBeatTrap(3) is device type specific to ICF hubs. It signifies that the hub hardware has detected a change of state in a port's link beat status. The current value of the port's link beat status is returned in the PDU.")
linkBeatTrapASEN = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 1, 0, 3)).setObjects(("ICF-ETWIST", "hubPortLinkBeatStatus"))
if mibBuilder.loadTexts: linkBeatTrapASEN.setStatus('obsolete')
if mibBuilder.loadTexts: linkBeatTrapASEN.setDescription("********* THIS NOTIFICATION IS OBSOLETE ********* A linkBeatTrap(3) is device type specific to ICF hubs. It signifies that the hub hardware has detected a change of state in a port's link beat status. The current value of the port's link beat status is returned in the PDU.")
linkBeatTrapSMM = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 2, 4, 0, 3)).setObjects(("ICF-ETWIST", "hubPortLinkBeatStatus"))
if mibBuilder.loadTexts: linkBeatTrapSMM.setStatus('obsolete')
if mibBuilder.loadTexts: linkBeatTrapSMM.setDescription("********* THIS NOTIFICATION IS OBSOLETE ********* A linkBeatTrap(3) is device type specific to ICF hubs. It signifies that the hub hardware has detected a change of state in a port's link beat status. The current value of the port's link beat status is returned in the PDU.")
segmentationTrapET12 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 1, 0, 4)).setObjects(("ICF-ETWIST", "hubPortSegmentation"))
if mibBuilder.loadTexts: segmentationTrapET12.setStatus('obsolete')
if mibBuilder.loadTexts: segmentationTrapET12.setDescription("********* THIS NOTIFICATION IS OBSOLETE ********* A segmentationTrap(4) is device type specific to ICF hubs. It signifies that the hub hardware has detected a change of state in a port's segmentation status. The current value of the port's segmentation status is returned in the PDU.")
segmentationTrapET48 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 4, 0, 4)).setObjects(("ICF-ETWIST", "hubPortSegmentation"))
if mibBuilder.loadTexts: segmentationTrapET48.setStatus('obsolete')
if mibBuilder.loadTexts: segmentationTrapET48.setDescription("********* THIS NOTIFICATION IS OBSOLETE ********* A segmentationTrap(4) is device type specific to ICF hubs. It signifies that the hub hardware has detected a change of state in a port's segmentation status. The current value of the port's segmentation status is returned in the PDU.")
segmentationTrapTLAN = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 5, 0, 4)).setObjects(("ICF-ETWIST", "hubPortSegmentation"))
if mibBuilder.loadTexts: segmentationTrapTLAN.setStatus('obsolete')
if mibBuilder.loadTexts: segmentationTrapTLAN.setDescription("********* THIS NOTIFICATION IS OBSOLETE ********* A segmentationTrap(4) is device type specific to ICF hubs. It signifies that the hub hardware has detected a change of state in a port's segmentation status. The current value of the port's segmentation status is returned in the PDU.")
segmentationTrapFiber = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 3, 0, 4)).setObjects(("ICF-ETWIST", "hubPortSegmentation"))
if mibBuilder.loadTexts: segmentationTrapFiber.setStatus('obsolete')
if mibBuilder.loadTexts: segmentationTrapFiber.setDescription("********* THIS NOTIFICATION IS OBSOLETE ********* A segmentationTrap(4) is device type specific to ICF hubs. It signifies that the hub hardware has detected a change of state in a port's segmentation status. The current value of the port's segmentation status is returned in the PDU.")
segmentationTrapET24S = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 6, 0, 4)).setObjects(("ICF-ETWIST", "hubPortSegmentation"))
if mibBuilder.loadTexts: segmentationTrapET24S.setStatus('obsolete')
if mibBuilder.loadTexts: segmentationTrapET24S.setDescription("********* THIS NOTIFICATION IS OBSOLETE ********* A segmentationTrap(4) is device type specific to ICF hubs. It signifies that the hub hardware has detected a change of state in a port's segmentation status. The current value of the port's segmentation status is returned in the PDU.")
segmentationTrapASEN = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 1, 0, 4)).setObjects(("ICF-ETWIST", "hubPortSegmentation"))
if mibBuilder.loadTexts: segmentationTrapASEN.setStatus('obsolete')
if mibBuilder.loadTexts: segmentationTrapASEN.setDescription("********* THIS NOTIFICATION IS OBSOLETE ********* A segmentationTrap(4) is device type specific to ICF hubs. It signifies that the hub hardware has detected a change of state in a port's segmentation status. The current value of the port's segmentation status is returned in the PDU.")
segmentationTrapSMM = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 2, 4, 0, 4)).setObjects(("ICF-ETWIST", "hubPortSegmentation"))
if mibBuilder.loadTexts: segmentationTrapSMM.setStatus('obsolete')
if mibBuilder.loadTexts: segmentationTrapSMM.setDescription("********* THIS NOTIFICATION IS OBSOLETE ********* A segmentationTrap(4) is device type specific to ICF hubs. It signifies that the hub hardware has detected a change of state in a port's segmentation status. The current value of the port's segmentation status is returned in the PDU.")
backupLinkTrapET12 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 1, 0, 5)).setObjects(("IF-MIB", "ifAdminStatus"))
if mibBuilder.loadTexts: backupLinkTrapET12.setStatus('obsolete')
if mibBuilder.loadTexts: backupLinkTrapET12.setDescription('********* THIS NOTIFICATION IS OBSOLETE ********* A backupLinkTrap(5) is device type specific to most ICF hubs. It signifies that there has been a change in state of ifAdminStatus for a backup port on the hub. The new value of ifAdminStatus is returned in the PDU. Backup links are not supported on the HP28688A hub.')
backupLinkTrapET48 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 4, 0, 5)).setObjects(("IF-MIB", "ifAdminStatus"))
if mibBuilder.loadTexts: backupLinkTrapET48.setStatus('obsolete')
if mibBuilder.loadTexts: backupLinkTrapET48.setDescription('********* THIS NOTIFICATION IS OBSOLETE ********* A backupLinkTrap(5) is device type specific to most ICF hubs. It signifies that there has been a change in state of ifAdminStatus for a backup port on the hub. The new value of ifAdminStatus is returned in the PDU.')
backupLinkTrapTLAN = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 5, 0, 5)).setObjects(("IF-MIB", "ifAdminStatus"))
if mibBuilder.loadTexts: backupLinkTrapTLAN.setStatus('obsolete')
if mibBuilder.loadTexts: backupLinkTrapTLAN.setDescription('********* THIS NOTIFICATION IS OBSOLETE ********* A backupLinkTrap(5) is device type specific to most ICF hubs. It signifies that there has been a change in state of ifAdminStatus for a backup port on the hub. The new value of ifAdminStatus is returned in the PDU.')
backupLinkTrapFiber = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 3, 0, 5)).setObjects(("IF-MIB", "ifAdminStatus"))
if mibBuilder.loadTexts: backupLinkTrapFiber.setStatus('obsolete')
if mibBuilder.loadTexts: backupLinkTrapFiber.setDescription('********* THIS NOTIFICATION IS OBSOLETE ********* A backupLinkTrap(5) is device type specific to most ICF hubs. It signifies that there has been a change in state of ifAdminStatus for a backup port on the hub. The new value of ifAdminStatus is returned in the PDU.')
backupLinkTrapET24S = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 6, 0, 5)).setObjects(("SNMP-REPEATER-MIB", "rptrPortAdminStatus"))
if mibBuilder.loadTexts: backupLinkTrapET24S.setStatus('obsolete')
if mibBuilder.loadTexts: backupLinkTrapET24S.setDescription('********* THIS NOTIFICATION IS OBSOLETE ********* A backupLinkTrap(5) is device type specific to most ICF hubs. It signifies that there has been a change in state of rptrPortAdminStatus for a backup port on the hub. The new value of rptrPortAdminStatus is returned in the PDU.')
backupLinkTrapASEN = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 1, 0, 5)).setObjects(("SNMP-REPEATER-MIB", "rptrPortAdminStatus"))
if mibBuilder.loadTexts: backupLinkTrapASEN.setStatus('obsolete')
if mibBuilder.loadTexts: backupLinkTrapASEN.setDescription('********* THIS NOTIFICATION IS OBSOLETE ********* A backupLinkTrap(5) is device type specific to most ICF hubs. It signifies that there has been a change in state of rptrPortAdminStatus for a backup port on the hub. The new value of rptrPortAdminStatus is returned in the PDU.')
backupLinkTrapSMM = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 2, 4, 0, 5)).setObjects(("SNMP-REPEATER-MIB", "rptrPortAdminStatus"))
if mibBuilder.loadTexts: backupLinkTrapSMM.setStatus('obsolete')
if mibBuilder.loadTexts: backupLinkTrapSMM.setDescription('********* THIS NOTIFICATION IS OBSOLETE ********* A backupLinkTrap(5) is device type specific to most ICF hubs. It signifies that there has been a change in state of rptrPortAdminStatus for a backup port on the hub. The new value of rptrPortAdminStatus is returned in the PDU.')
intrusionTrapET24S = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 6, 0, 6)).setObjects(("HP-ICF-GENERIC-RPTR", "hubIntruderAddress"), ("HP-ICF-GENERIC-RPTR", "hubIntruderPort"))
if mibBuilder.loadTexts: intrusionTrapET24S.setStatus('obsolete')
if mibBuilder.loadTexts: intrusionTrapET24S.setDescription("********* THIS NOTIFICATION IS OBSOLETE ********* An intrusionTrap(6) is device type specific to EtherTwist hubs with revision 'E' firmware or later and AdvanceStack hubs. It signifies that a port security violation has been detected on a port which has the hubSecPtAlarmEnable flag set to 'enabled'. The MAC address of the intruder and the port on which the intrusion occurred are returned in the PDU.")
intrusionTrapASEN = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 1, 0, 6)).setObjects(("HP-ICF-GENERIC-RPTR", "hubIntruderAddress"), ("HP-ICF-GENERIC-RPTR", "hubIntruderPort"))
if mibBuilder.loadTexts: intrusionTrapASEN.setStatus('obsolete')
if mibBuilder.loadTexts: intrusionTrapASEN.setDescription("********* THIS NOTIFICATION IS OBSOLETE ********* An intrusionTrap(6) is device type specific to EtherTwist hubs with revision 'E' firmware or later and AdvanceStack hubs. It signifies that a port security violation has been detected on a port which has the hubSecPtAlarmEnable flag set to 'enabled'. The MAC address of the intruder and the port on which the intrusion occurred are returned in the PDU.")
intrusionTrapSMM = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 2, 4, 0, 6)).setObjects(("HP-ICF-GENERIC-RPTR", "hubIntruderAddress"), ("HP-ICF-GENERIC-RPTR", "hubIntruderPort"))
if mibBuilder.loadTexts: intrusionTrapSMM.setStatus('obsolete')
if mibBuilder.loadTexts: intrusionTrapSMM.setDescription("********* THIS NOTIFICATION IS OBSOLETE ********* An intrusionTrap(6) is device type specific to EtherTwist hubs with revision 'E' firmware or later and AdvanceStack hubs. It signifies that a port security violation has been detected on a port which has the hubSecPtAlarmEnable flag set to 'enabled'. The MAC address of the intruder and the port on which the intrusion occurred are returned in the PDU.")
addressMovedTrapET24S = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 6, 0, 7)).setObjects(("ICF-ETWIST", "hubAddrMoveAddress"), ("ICF-ETWIST", "hubAddrMoveOldGroup"), ("ICF-ETWIST", "hubAddrMoveOldPort"), ("ICF-ETWIST", "hubAddrMoveNewGroup"), ("ICF-ETWIST", "hubAddrMoveNewPort"))
if mibBuilder.loadTexts: addressMovedTrapET24S.setStatus('obsolete')
if mibBuilder.loadTexts: addressMovedTrapET24S.setDescription("********* THIS NOTIFICATION IS OBSOLETE ********* An addressMovedTrap(7) is device type specific to EtherTwist hubs with revision 'E' firmware or later and AdvanceStack hubs. It signifies that a source MAC address which had been operating at one port has moved to a new port. The MAC address that moved, the group and port that the address moved from, and the group and port that the address moved to are returned in the PDU.")
addressMovedTrapASEN = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 1, 0, 7)).setObjects(("ICF-ETWIST", "hubAddrMoveAddress"), ("ICF-ETWIST", "hubAddrMoveOldGroup"), ("ICF-ETWIST", "hubAddrMoveOldPort"), ("ICF-ETWIST", "hubAddrMoveNewGroup"), ("ICF-ETWIST", "hubAddrMoveNewPort"))
if mibBuilder.loadTexts: addressMovedTrapASEN.setStatus('obsolete')
if mibBuilder.loadTexts: addressMovedTrapASEN.setDescription("********* THIS NOTIFICATION IS OBSOLETE ********* An addressMovedTrap(7) is device type specific to EtherTwist hubs with revision 'E' firmware or later and AdvanceStack hubs. It signifies that a source MAC address which had been operating at one port has moved to a new port. The MAC address that moved, the group and port that the address moved from, and the group and port that the address moved to are returned in the PDU.")
addressMovedTrapSMM = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 2, 4, 0, 7)).setObjects(("ICF-ETWIST", "hubAddrMoveAddress"), ("ICF-ETWIST", "hubAddrMoveOldGroup"), ("ICF-ETWIST", "hubAddrMoveOldPort"), ("ICF-ETWIST", "hubAddrMoveNewGroup"), ("ICF-ETWIST", "hubAddrMoveNewPort"))
if mibBuilder.loadTexts: addressMovedTrapSMM.setStatus('obsolete')
if mibBuilder.loadTexts: addressMovedTrapSMM.setDescription("********* THIS NOTIFICATION IS OBSOLETE ********* An addressMovedTrap(7) is device type specific to EtherTwist hubs with revision 'E' firmware or later and AdvanceStack hubs. It signifies that a source MAC address which had been operating at one port has moved to a new port. The MAC address that moved, the group and port that the address moved from, and the group and port that the address moved to are returned in the PDU.")
newAddressTrapET24S = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 5, 6, 0, 8)).setObjects(("SNMP-REPEATER-MIB", "rptrAddrTrackLastSourceAddress"))
if mibBuilder.loadTexts: newAddressTrapET24S.setStatus('obsolete')
if mibBuilder.loadTexts: newAddressTrapET24S.setDescription("********* THIS NOTIFICATION IS OBSOLETE ********* A newAddressTrap(8) is device type specific to EtherTwist hubs with revision 'E' firmware or later and AdvanceStack hubs. It signifies that a new MAC address has been detected on one of the hub's ports. The instance of rptrAddrTrackLastSourceAddress for the port with the new address is returned in the PDU.")
newAddressTrapASEN = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 1, 0, 8)).setObjects(("SNMP-REPEATER-MIB", "rptrAddrTrackLastSourceAddress"))
if mibBuilder.loadTexts: newAddressTrapASEN.setStatus('obsolete')
if mibBuilder.loadTexts: newAddressTrapASEN.setDescription("********* THIS NOTIFICATION IS OBSOLETE ********* A newAddressTrap(8) is device type specific to EtherTwist hubs with revision 'E' firmware or later and AdvanceStack hubs. It signifies that a new MAC address has been detected on one of the hub's ports. The instance of rptrAddrTrackLastSourceAddress for the port with the new address is returned in the PDU.")
newAddressTrapSMM = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 8, 2, 4, 0, 8)).setObjects(("SNMP-REPEATER-MIB", "rptrAddrTrackLastSourceAddress"))
if mibBuilder.loadTexts: newAddressTrapSMM.setStatus('obsolete')
if mibBuilder.loadTexts: newAddressTrapSMM.setDescription("********* THIS NOTIFICATION IS OBSOLETE ********* A newAddressTrap(8) is device type specific to EtherTwist hubs with revision 'E' firmware or later and AdvanceStack hubs. It signifies that a new MAC address has been detected on one of the hub's ports. The instance of rptrAddrTrackLastSourceAddress for the port with the new address is returned in the PDU.")
stpTrap1010 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 1, 1, 0, 3)).setObjects(("ICF-ETWIST", "stpPortState"))
if mibBuilder.loadTexts: stpTrap1010.setStatus('obsolete')
if mibBuilder.loadTexts: stpTrap1010.setDescription('********* THIS NOTIFICATION IS OBSOLETE ********* A stpTrap(3) is device type specific to ICF bridges. It signifies that the Spanning Tree entity in the bridge has detected a change of state to either Blocking or Forwarding.')
stpTrapRem = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 1, 2, 0, 3)).setObjects(("ICF-ETWIST", "stpPortState"))
if mibBuilder.loadTexts: stpTrapRem.setStatus('obsolete')
if mibBuilder.loadTexts: stpTrapRem.setDescription('********* THIS NOTIFICATION IS OBSOLETE ********* A stpTrap(3) is device type specific to ICF bridges. It signifies that the Spanning Tree entity in the bridge has detected a change of state to either Blocking or Forwarding.')
temperatureTrap1010 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 1, 1, 0, 4))
if mibBuilder.loadTexts: temperatureTrap1010.setStatus('obsolete')
if mibBuilder.loadTexts: temperatureTrap1010.setDescription('********* THIS NOTIFICATION IS OBSOLETE ********* A temperatureTrap(4) is device type specific to ICF bridges. It signifies that the bridge hardware has detected an overheated condition.')
temperatureTrapRem = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 1, 2, 0, 4))
if mibBuilder.loadTexts: temperatureTrapRem.setStatus('obsolete')
if mibBuilder.loadTexts: temperatureTrapRem.setDescription('********* THIS NOTIFICATION IS OBSOLETE ********* A temperatureTrap(4) is device type specific to ICF bridges. It signifies that the bridge hardware has detected an overheated condition.')
icfETCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 1))
icfETGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2))
icfETwistHubCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 1, 1)).setObjects(("ICF-ETWIST", "icfCommonBasicGroup"), ("ICF-ETWIST", "icfCommonIpGroup"), ("ICF-ETWIST", "icfMappingGroup"), ("ICF-ETWIST", "icfIpMappingGroup"), ("ICF-ETWIST", "icf8023MacGroup"), ("ICF-ETWIST", "icfEncryptedPasswordGroup"), ("ICF-ETWIST", "hubBasicGroup"), ("ICF-ETWIST", "hubMappingGroup"), ("ICF-ETWIST", "hubLinkBeatControlGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icfETwistHubCompliance = icfETwistHubCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: icfETwistHubCompliance.setDescription('********* THIS COMPLIANCE IS OBSOLETE ********* The compliance statement for EtherTwist hub devices.')
icfETwistBridgeCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 1, 2)).setObjects(("ICF-ETWIST", "icfCommonBasicGroup"), ("ICF-ETWIST", "icfCommonIpGroup"), ("ICF-ETWIST", "icfMappingGroup"), ("ICF-ETWIST", "icfIpMappingGroup"), ("ICF-ETWIST", "icf8023MacGroup"), ("ICF-ETWIST", "icfEncryptedPasswordGroup"), ("ICF-ETWIST", "icfBridgeBasicGroup"), ("ICF-ETWIST", "icfBridgeSpanningTreeGroup"), ("ICF-ETWIST", "icfRemoteBridgeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icfETwistBridgeCompliance = icfETwistBridgeCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: icfETwistBridgeCompliance.setDescription('********* THIS COMPLIANCE IS OBSOLETE ********* The compliance statement for EtherTwist bridge devices.')
icfETwistHubDCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 1, 3)).setObjects(("ICF-ETWIST", "icfCommonBasicGroup"), ("ICF-ETWIST", "icfMappingGroup"), ("ICF-ETWIST", "icf8023MacGroup"), ("ICF-ETWIST", "icfEncryptedPasswordGroup"), ("ICF-ETWIST", "hubBasicGroup"), ("ICF-ETWIST", "hubMappingGroup"), ("ICF-ETWIST", "hubBasicAddrTableGroup"), ("ICF-ETWIST", "icfCommonIpGroup"), ("ICF-ETWIST", "icfCommonIpxGroup"), ("ICF-ETWIST", "icfIpMappingGroup"), ("ICF-ETWIST", "icfIpxMappingGroup"), ("ICF-ETWIST", "icfDownloadGroup"), ("ICF-ETWIST", "hubLinkBeatControlGroup"), ("ICF-ETWIST", "hubBasicEnhancementsGroup"), ("ICF-ETWIST", "hubReadableAddrTableGroup"), ("ICF-ETWIST", "hubBackupLinkGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icfETwistHubDCompliance = icfETwistHubDCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: icfETwistHubDCompliance.setDescription('********* THIS COMPLIANCE IS OBSOLETE ********* The compliance statement for EtherTwist hub devices updated for Revision D firmware features.')
icfETwistBridgeDCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 1, 4)).setObjects(("ICF-ETWIST", "icfCommonBasicGroup"), ("ICF-ETWIST", "icfCommonIpGroup"), ("ICF-ETWIST", "icfCommonIpxGroup"), ("ICF-ETWIST", "icfMappingGroup"), ("ICF-ETWIST", "icfIpMappingGroup"), ("ICF-ETWIST", "icfIpxMappingGroup"), ("ICF-ETWIST", "icf8023MacGroup"), ("ICF-ETWIST", "icfDownloadGroup"), ("ICF-ETWIST", "icfEncryptedPasswordGroup"), ("ICF-ETWIST", "icfBridgeBasicGroup"), ("ICF-ETWIST", "icfBridgeSpanningTreeGroup"), ("ICF-ETWIST", "icfRemoteBridgeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icfETwistBridgeDCompliance = icfETwistBridgeDCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: icfETwistBridgeDCompliance.setDescription('********* THIS COMPLIANCE IS OBSOLETE ********* The compliance statement for EtherTwist hub devices updated for Revision D firmware features.')
icfETwistHub24SCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 1, 5)).setObjects(("ICF-ETWIST", "icfCommonBasicGroup"), ("ICF-ETWIST", "icfCommonIpGroup"), ("ICF-ETWIST", "icfCommonIpxGroup"), ("ICF-ETWIST", "icfMappingGroup"), ("ICF-ETWIST", "icfIpMappingGroup"), ("ICF-ETWIST", "icfIpxMappingGroup"), ("ICF-ETWIST", "icf8023MacGroup"), ("ICF-ETWIST", "icfDownloadGroup"), ("ICF-ETWIST", "hubBasicGroup"), ("ICF-ETWIST", "hubBasicEnhancementsGroup"), ("ICF-ETWIST", "hubNewEnhancementsGroup"), ("ICF-ETWIST", "hubLinkBeatControlGroup"), ("ICF-ETWIST", "hubMappingGroup"), ("ICF-ETWIST", "hubBasicAddrTableGroup"), ("ICF-ETWIST", "hubReadableAddrTableGroup"), ("ICF-ETWIST", "hubBackupLinkGroup"), ("ICF-ETWIST", "hubAddressMoveGroup"), ("ICF-ETWIST", "icfConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icfETwistHub24SCompliance = icfETwistHub24SCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: icfETwistHub24SCompliance.setDescription('********* THIS COMPLIANCE IS OBSOLETE ********* The compliance statement for secure EtherTwist hubs,updated to reflect the new features of the EtherTwist Hub/24S.')
icfAdvStkCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 1, 6)).setObjects(("ICF-ETWIST", "icfCommonBasicGroup"), ("ICF-ETWIST", "icfCommonIpGroup"), ("ICF-ETWIST", "icfCommonIpxGroup"), ("ICF-ETWIST", "icfMappingGroup"), ("ICF-ETWIST", "icfIpMappingGroup"), ("ICF-ETWIST", "icfIpxMappingGroup"), ("ICF-ETWIST", "icf8023MacGroup"), ("ICF-ETWIST", "hubBasicGroup"), ("ICF-ETWIST", "hubBasicEnhancementsGroup"), ("ICF-ETWIST", "hubNewEnhancementsGroup"), ("ICF-ETWIST", "hubLinkBeatControlGroup"), ("ICF-ETWIST", "hubMappingGroup"), ("ICF-ETWIST", "hubBasicAddrTableGroup"), ("ICF-ETWIST", "hubReadableAddrTableGroup"), ("ICF-ETWIST", "hubBackupLinkGroup"), ("ICF-ETWIST", "hubAddressMoveGroup"), ("ICF-ETWIST", "hubLateEventMonitorGroup"), ("ICF-ETWIST", "icfConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icfAdvStkCompliance = icfAdvStkCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: icfAdvStkCompliance.setDescription('********* THIS COMPLIANCE IS OBSOLETE ********* The compliance statement for AdvanceStack 10Mbit hubs.')
icfAdvStkSlaveCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 1, 7)).setObjects(("ICF-ETWIST", "icfSlaveMappingGroup"), ("ICF-ETWIST", "icf8023MacSlaveGroup"), ("ICF-ETWIST", "hubBasicSlaveGroup"), ("ICF-ETWIST", "hubMappingGroup"), ("ICF-ETWIST", "hubLinkBeatControlGroup"), ("ICF-ETWIST", "hubBasicEnhancementsGroup"), ("ICF-ETWIST", "hubNewEnhancementsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icfAdvStkSlaveCompliance = icfAdvStkSlaveCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: icfAdvStkSlaveCompliance.setDescription('********* THIS COMPLIANCE IS OBSOLETE ********* The compliance statement for AdvanceStack 10BaseT slave hubs.')
icfAdvStkVGCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 1, 8)).setObjects(("ICF-ETWIST", "icfMappingGroup"), ("ICF-ETWIST", "icfIpMappingGroup"), ("ICF-ETWIST", "icfIpxMappingGroup"), ("ICF-ETWIST", "icfConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icfAdvStkVGCompliance = icfAdvStkVGCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: icfAdvStkVGCompliance.setDescription('********* THIS COMPLIANCE IS OBSOLETE ********* The compliance statement for AdvanceStack 100VG hubs.')
icfAdvStkVGSlaveCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 1, 9)).setObjects(("ICF-ETWIST", "icfSlaveMappingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icfAdvStkVGSlaveCompliance = icfAdvStkVGSlaveCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: icfAdvStkVGSlaveCompliance.setDescription('********* THIS COMPLIANCE IS OBSOLETE ********* The compliance statement for AdvanceStack 100VG slave hubs.')
icfCommonBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 1)).setObjects(("ICF-ETWIST", "lastSetError"), ("ICF-ETWIST", "reset"), ("ICF-ETWIST", "selfTest"), ("ICF-ETWIST", "semaphore"), ("ICF-ETWIST", "pollResponse"), ("ICF-ETWIST", "evtIndex"), ("ICF-ETWIST", "evtArm"), ("ICF-ETWIST", "evtTimeSinceOccurrence"), ("ICF-ETWIST", "evthIndex"), ("ICF-ETWIST", "evthArm"), ("ICF-ETWIST", "evthObject"), ("ICF-ETWIST", "evthThreshold"), ("ICF-ETWIST", "evthHysteresis"), ("ICF-ETWIST", "evthTimeInterval"), ("ICF-ETWIST", "evthTimeSinceOccurrence"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icfCommonBasicGroup = icfCommonBasicGroup.setStatus('obsolete')
if mibBuilder.loadTexts: icfCommonBasicGroup.setDescription('********* THIS GROUP IS OBSOLETE ********* A collection of obsolete objects thate were shared by EtherTwist hubs, EtherTwist bridges, and AdvanceStack 10BaseT hubs.')
icfCommonIpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 2)).setObjects(("ICF-ETWIST", "ipSubnetMask"), ("ICF-ETWIST", "evtIpNotify"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icfCommonIpGroup = icfCommonIpGroup.setStatus('obsolete')
if mibBuilder.loadTexts: icfCommonIpGroup.setDescription('********* THIS GROUP IS OBSOLETE ********* A collection of obsolete objects thate were shared by EtherTwist hubs, EtherTwist bridges, and AdvanceStack 10BaseT hubs that support IP.')
icfCommonIpxGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 3)).setObjects(("ICF-ETWIST", "evtIpxNotify"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icfCommonIpxGroup = icfCommonIpxGroup.setStatus('obsolete')
if mibBuilder.loadTexts: icfCommonIpxGroup.setDescription('********* THIS GROUP IS OBSOLETE ********* A collection of obsolete objects thate were shared by EtherTwist hubs, EtherTwist bridges, and AdvanceStack 10BaseT hubs that support IPX.')
icfEncryptedPasswordGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 4)).setObjects(("ICF-ETWIST", "password"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icfEncryptedPasswordGroup = icfEncryptedPasswordGroup.setStatus('obsolete')
if mibBuilder.loadTexts: icfEncryptedPasswordGroup.setDescription('********* THIS GROUP IS OBSOLETE ********* A collection of obsolete objects that were shared by EtherTwist hubs and EtherTwist bridges. Was not implemented on EtherTwist Hub/24S or on any AdvanceStack product.')
icfMappingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 5)).setObjects(("ICF-ETWIST", "announceAddress"), ("ICF-ETWIST", "mapAddress"), ("ICF-ETWIST", "mapState"), ("ICF-ETWIST", "mapPort"), ("ICF-ETWIST", "linkTest802MacAddress"), ("ICF-ETWIST", "linkTestRepetitions"), ("ICF-ETWIST", "linkTestSuccess"), ("ICF-ETWIST", "linkTestTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icfMappingGroup = icfMappingGroup.setStatus('obsolete')
if mibBuilder.loadTexts: icfMappingGroup.setDescription('********* THIS GROUP IS OBSOLETE ********* A collection of objects for mapping MAC addresses to device ports.')
icfIpMappingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 6)).setObjects(("ICF-ETWIST", "linkTestIpAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icfIpMappingGroup = icfIpMappingGroup.setStatus('obsolete')
if mibBuilder.loadTexts: icfIpMappingGroup.setDescription('********* THIS GROUP IS OBSOLETE ********* A collection of objects for using IP-layer addresses in mapping operations.')
icfIpxMappingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 7)).setObjects(("ICF-ETWIST", "linkTestIpxAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icfIpxMappingGroup = icfIpxMappingGroup.setStatus('obsolete')
if mibBuilder.loadTexts: icfIpxMappingGroup.setDescription('********* THIS GROUP IS OBSOLETE ********* A collection of objects for using IPX-layer addresses in mapping operations.')
icfSlaveMappingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 8)).setObjects(("ICF-ETWIST", "mapAddress"), ("ICF-ETWIST", "mapState"), ("ICF-ETWIST", "mapPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icfSlaveMappingGroup = icfSlaveMappingGroup.setStatus('obsolete')
if mibBuilder.loadTexts: icfSlaveMappingGroup.setDescription('********* THIS GROUP IS OBSOLETE ********* A collection of objects for mapping MAC addresses to device ports on slave AdvanceStack devices.')
icf8023MacGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 9)).setObjects(("ICF-ETWIST", "icf8023MacIndex"), ("ICF-ETWIST", "icf8023MacInBroadcastPkts"), ("ICF-ETWIST", "icf8023MacOutBroadcastPkts"), ("ICF-ETWIST", "icf8023MacInMulticastPkts"), ("ICF-ETWIST", "icf8023MacOutMulticastPkts"), ("ICF-ETWIST", "icf8023MacRunts"), ("ICF-ETWIST", "icf8023MacGiants"), ("ICF-ETWIST", "icf8023MacMissedPktErrors"), ("ICF-ETWIST", "icf8023MacExcessDeferrals"), ("ICF-ETWIST", "icf8023MacTotalMediaErrors"), ("ICF-ETWIST", "icf8023MacSpuriousIntrs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icf8023MacGroup = icf8023MacGroup.setStatus('obsolete')
if mibBuilder.loadTexts: icf8023MacGroup.setDescription('********* THIS GROUP IS OBSOLETE ********* A collection of 802.3 specific statistics for device ports.')
icf8023MacSlaveGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 10)).setObjects(("ICF-ETWIST", "icf8023MacIndex"), ("ICF-ETWIST", "icf8023MacRunts"), ("ICF-ETWIST", "icf8023MacGiants"), ("ICF-ETWIST", "icf8023MacMissedPktErrors"), ("ICF-ETWIST", "icf8023MacExcessDeferrals"), ("ICF-ETWIST", "icf8023MacTotalMediaErrors"), ("ICF-ETWIST", "icf8023MacSpuriousIntrs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icf8023MacSlaveGroup = icf8023MacSlaveGroup.setStatus('obsolete')
if mibBuilder.loadTexts: icf8023MacSlaveGroup.setDescription('********* THIS GROUP IS OBSOLETE ********* A collection of 802.3 specific statistics for device ports. on slave AdvanceStack devices.')
icfDownloadGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 11)).setObjects(("ICF-ETWIST", "icfDownloadIpAddress"), ("ICF-ETWIST", "icfDownloadIpxAddress"), ("ICF-ETWIST", "icfDownloadFilename"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icfDownloadGroup = icfDownloadGroup.setStatus('obsolete')
if mibBuilder.loadTexts: icfDownloadGroup.setDescription('********* THIS GROUP IS OBSOLETE ********* A collection of objects for initiating a network download of device firmware on EtherTwist devices.')
hubBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 12)).setObjects(("ICF-ETWIST", "hubThinlanFault"), ("ICF-ETWIST", "hubGlobalErrors"), ("ICF-ETWIST", "hubGlobalCollisions"), ("ICF-ETWIST", "hubGlobalPktFragments"), ("ICF-ETWIST", "hubGlobalRunts"), ("ICF-ETWIST", "hubGlobalGiants"), ("ICF-ETWIST", "hubGlobalCrcErrors"), ("ICF-ETWIST", "hubGlobalAlignmentErrors"), ("ICF-ETWIST", "hubGlobalInOctets"), ("ICF-ETWIST", "hubGlobalInUcastPkts"), ("ICF-ETWIST", "hubGlobalInNUcastPkts"), ("ICF-ETWIST", "hubGlobalInBroadcastPkts"), ("ICF-ETWIST", "hubPortPktFragments"), ("ICF-ETWIST", "hubPortCollisions"), ("ICF-ETWIST", "hubPortSegmentation"), ("ICF-ETWIST", "hubPortLinkBeatStatus"), ("ICF-ETWIST", "hubPortsOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hubBasicGroup = hubBasicGroup.setStatus('obsolete')
if mibBuilder.loadTexts: hubBasicGroup.setDescription('********* THIS GROUP IS OBSOLETE ********* A collection of objects for managing ICF hubs.')
hubBasicSlaveGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 13)).setObjects(("ICF-ETWIST", "hubThinlanFault"), ("ICF-ETWIST", "hubGlobalErrors"), ("ICF-ETWIST", "hubGlobalCollisions"), ("ICF-ETWIST", "hubGlobalPktFragments"), ("ICF-ETWIST", "hubGlobalRunts"), ("ICF-ETWIST", "hubGlobalGiants"), ("ICF-ETWIST", "hubGlobalCrcErrors"), ("ICF-ETWIST", "hubGlobalAlignmentErrors"), ("ICF-ETWIST", "hubGlobalInOctets"), ("ICF-ETWIST", "hubPortPktFragments"), ("ICF-ETWIST", "hubPortCollisions"), ("ICF-ETWIST", "hubPortSegmentation"), ("ICF-ETWIST", "hubPortLinkBeatStatus"), ("ICF-ETWIST", "hubPortsOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hubBasicSlaveGroup = hubBasicSlaveGroup.setStatus('obsolete')
if mibBuilder.loadTexts: hubBasicSlaveGroup.setDescription('********* THIS GROUP IS OBSOLETE ********* A collection of objects for managing slave ICF hubs.')
hubMappingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 14)).setObjects(("ICF-ETWIST", "hubPortIndex"), ("ICF-ETWIST", "hubPortMacAddress"), ("ICF-ETWIST", "hubPortAddressState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hubMappingGroup = hubMappingGroup.setStatus('obsolete')
if mibBuilder.loadTexts: hubMappingGroup.setDescription('********* THIS GROUP IS OBSOLETE ********* A collection of objects used for mapping MAC addresses to hub ports.')
hubLinkBeatControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 15)).setObjects(("ICF-ETWIST", "hubPortLinkBeatEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hubLinkBeatControlGroup = hubLinkBeatControlGroup.setStatus('obsolete')
if mibBuilder.loadTexts: hubLinkBeatControlGroup.setDescription('********* THIS GROUP IS OBSOLETE ********* A collection of objects for enabling or disabling the link beat detection function on hub ports.')
hubBasicEnhancementsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 16)).setObjects(("ICF-ETWIST", "hubSqeEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hubBasicEnhancementsGroup = hubBasicEnhancementsGroup.setStatus('obsolete')
if mibBuilder.loadTexts: hubBasicEnhancementsGroup.setDescription('********* THIS GROUP IS OBSOLETE ********* A collection of objects adding simple enhancements to the basic hub management objects.')
hubBasicAddrTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 17)).setObjects(("ICF-ETWIST", "hubAddressTableMaxAge"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hubBasicAddrTableGroup = hubBasicAddrTableGroup.setStatus('obsolete')
if mibBuilder.loadTexts: hubBasicAddrTableGroup.setDescription('********* THIS GROUP IS OBSOLETE ********* A collection of objects for controlling the hub address table, even when the table itself is not readable.')
hubReadableAddrTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 18)).setObjects(("ICF-ETWIST", "hubAddressIndex"), ("ICF-ETWIST", "hubAddressChunk"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hubReadableAddrTableGroup = hubReadableAddrTableGroup.setStatus('obsolete')
if mibBuilder.loadTexts: hubReadableAddrTableGroup.setDescription('********* THIS GROUP IS OBSOLETE ********* A collection of objects for accessing a MAC address to port number table on ICF hubs.')
hubBackupLinkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 19)).setObjects(("ICF-ETWIST", "hubNumBkpLinks"), ("ICF-ETWIST", "hubBkpLinkIndex"), ("ICF-ETWIST", "hubBackupPort"), ("ICF-ETWIST", "hubPrimaryPort"), ("ICF-ETWIST", "hubBackupAddress"), ("ICF-ETWIST", "hubBackupTestTime"), ("ICF-ETWIST", "hubBackupConsecutiveFails"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hubBackupLinkGroup = hubBackupLinkGroup.setStatus('obsolete')
if mibBuilder.loadTexts: hubBackupLinkGroup.setDescription('********* THIS GROUP IS OBSOLETE ********* A collection of objects for configuring backup links on ICF hubs.')
hubNewEnhancementsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 20)).setObjects(("ICF-ETWIST", "hubPortPolarityReversed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hubNewEnhancementsGroup = hubNewEnhancementsGroup.setStatus('obsolete')
if mibBuilder.loadTexts: hubNewEnhancementsGroup.setDescription('********* THIS GROUP IS OBSOLETE ********* A collection of objects providing new enhancements to the basic hub management objects.')
hubAddressMoveGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 21)).setObjects(("ICF-ETWIST", "hubAddrMoveIndex"), ("ICF-ETWIST", "hubAddrMoveAddress"), ("ICF-ETWIST", "hubAddrMoveOldGroup"), ("ICF-ETWIST", "hubAddrMoveOldPort"), ("ICF-ETWIST", "hubAddrMoveNewGroup"), ("ICF-ETWIST", "hubAddrMoveNewPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hubAddressMoveGroup = hubAddressMoveGroup.setStatus('obsolete')
if mibBuilder.loadTexts: hubAddressMoveGroup.setDescription('********* THIS GROUP IS OBSOLETE ********* A collection of objects for tracking station address movement between ports on a hub.')
hubLateEventMonitorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 22)).setObjects(("ICF-ETWIST", "hubPortLateEventDisable"), ("ICF-ETWIST", "hubLateEventMonitor"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hubLateEventMonitorGroup = hubLateEventMonitorGroup.setStatus('obsolete')
if mibBuilder.loadTexts: hubLateEventMonitorGroup.setDescription('********* THIS GROUP IS OBSOLETE ********* A collection of objects to control the late event monitor function of ICF hubs.')
icfBridgeBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 23)).setObjects(("ICF-ETWIST", "operationalState"), ("ICF-ETWIST", "forwardDbMaxAge"), ("ICF-ETWIST", "addressIndex"), ("ICF-ETWIST", "addressChunk"), ("ICF-ETWIST", "brgPortIndex"), ("ICF-ETWIST", "brgPortCacheHits"), ("ICF-ETWIST", "brgPortCacheMisses"), ("ICF-ETWIST", "brgPortForwardedPkts"), ("ICF-ETWIST", "brgPortFilteredPkts"), ("ICF-ETWIST", "wildcardIndex"), ("ICF-ETWIST", "wildcardFilter"), ("ICF-ETWIST", "wildcardMask"), ("ICF-ETWIST", "wildcardOffset"), ("ICF-ETWIST", "wildcardUserOffset"), ("ICF-ETWIST", "wildcardArm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icfBridgeBasicGroup = icfBridgeBasicGroup.setStatus('obsolete')
if mibBuilder.loadTexts: icfBridgeBasicGroup.setDescription('********* THIS GROUP IS OBSOLETE ********* A collection of objects for managing ICF bridges.')
icfBridgeSpanningTreeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 24)).setObjects(("ICF-ETWIST", "stpBridgeId"), ("ICF-ETWIST", "stpTopoChangeTime"), ("ICF-ETWIST", "stpTopoNumChanges"), ("ICF-ETWIST", "stpTopoChange"), ("ICF-ETWIST", "stpDesignatedRoot"), ("ICF-ETWIST", "stpRootCost"), ("ICF-ETWIST", "stpRootPort"), ("ICF-ETWIST", "stpCurrentMaxAge"), ("ICF-ETWIST", "stpCurrentHelloTime"), ("ICF-ETWIST", "stpCurrentForwardDelay"), ("ICF-ETWIST", "stpMaxAge"), ("ICF-ETWIST", "stpHelloTime"), ("ICF-ETWIST", "stpForwardDelay"), ("ICF-ETWIST", "stpPriority"), ("ICF-ETWIST", "stpPortIndex"), ("ICF-ETWIST", "stpPortState"), ("ICF-ETWIST", "stpPortId"), ("ICF-ETWIST", "stpPortPathCost"), ("ICF-ETWIST", "stpPortRootId"), ("ICF-ETWIST", "stpPortDesignatedCost"), ("ICF-ETWIST", "stpPortDesignatedBridge"), ("ICF-ETWIST", "stpPortDesignatedPort"), ("ICF-ETWIST", "stpPortPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icfBridgeSpanningTreeGroup = icfBridgeSpanningTreeGroup.setStatus('obsolete')
if mibBuilder.loadTexts: icfBridgeSpanningTreeGroup.setDescription('********* THIS GROUP IS OBSOLETE ********* A collection of objects for managing the Spanning Tree Protocol on ICF bridges.')
icfRemoteBridgeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 25)).setObjects(("ICF-ETWIST", "hdlcErrorIndex"), ("ICF-ETWIST", "hdlcErrorIndications"), ("ICF-ETWIST", "hdlcT1Timeouts"), ("ICF-ETWIST", "hdlcMissedPackets"), ("ICF-ETWIST", "hdlcRcvOverruns"), ("ICF-ETWIST", "hdlcXmtUnderruns"), ("ICF-ETWIST", "hdlcProviderLostPrimitives"), ("ICF-ETWIST", "hdlcRuntFrameReceives"), ("ICF-ETWIST", "hdlcGiantFrameReceives"), ("ICF-ETWIST", "hdlcBadFrameReceives"), ("ICF-ETWIST", "hdlcRejectFrameReceives"), ("ICF-ETWIST", "hdlcRejectFrameSends"), ("ICF-ETWIST", "hdlcFrameRejectFrameRecs"), ("ICF-ETWIST", "hdlcLocalIndex"), ("ICF-ETWIST", "hdlcLocalResetRequests"), ("ICF-ETWIST", "hdlcLocalResetConfirms"), ("ICF-ETWIST", "hdlcLocalConnectRequests"), ("ICF-ETWIST", "hdlcLocalConnectConfirms"), ("ICF-ETWIST", "hdlcLocalDisconnectRequests"), ("ICF-ETWIST", "hdlcLocalDisconnectConfirms"), ("ICF-ETWIST", "hdlcLocalState"), ("ICF-ETWIST", "hdlcLocalAddress"), ("ICF-ETWIST", "hdlcLocalPhase"), ("ICF-ETWIST", "hdlcRemoteIndex"), ("ICF-ETWIST", "hdlcRemoteResetRequests"), ("ICF-ETWIST", "hdlcRemoteResetConfirms"), ("ICF-ETWIST", "hdlcRemoteConnectRequests"), ("ICF-ETWIST", "hdlcRemoteConnectConfirms"), ("ICF-ETWIST", "hdlcRemoteDisconnectRequests"), ("ICF-ETWIST", "hdlcRemoteState"), ("ICF-ETWIST", "hdlcRemoteAddress"), ("ICF-ETWIST", "hdlcRemoteXidCommands"), ("ICF-ETWIST", "hdlcRemoteXidResponses"), ("ICF-ETWIST", "hdlcRemoteTestCommands"), ("ICF-ETWIST", "hdlcRemoteTestResponses"), ("ICF-ETWIST", "hdlcRemoteNodeId"), ("ICF-ETWIST", "x25Index"), ("ICF-ETWIST", "x25T1Timer"), ("ICF-ETWIST", "x25N2Count"), ("ICF-ETWIST", "x25T3Timer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icfRemoteBridgeGroup = icfRemoteBridgeGroup.setStatus('obsolete')
if mibBuilder.loadTexts: icfRemoteBridgeGroup.setDescription('********* THIS GROUP IS OBSOLETE ********* A collection of objects for managing the remote link on ICF remote bridges.')
icfConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 1, 11, 2, 2, 26)).setObjects(("ICF-ETWIST", "icfConfigIfIndex"), ("ICF-ETWIST", "icfConfigIfIpAddress"), ("ICF-ETWIST", "icfConfigIfNetMask"), ("ICF-ETWIST", "icfConfigIfDefaultGate"), ("ICF-ETWIST", "icfConfigIpTTL"), ("ICF-ETWIST", "icfConfigBootpEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    icfConfigGroup = icfConfigGroup.setStatus('obsolete')
if mibBuilder.loadTexts: icfConfigGroup.setDescription('********* THIS GROUP IS OBSOLETE ********* A collection of objects for configuring the IP protocol stack in ICF agents.')
mibBuilder.exportSymbols("ICF-ETWIST", repeaterAgentTrapPrefix=repeaterAgentTrapPrefix, stpPortPathCost=stpPortPathCost, hubGlobalInBroadcastPkts=hubGlobalInBroadcastPkts, evtThresholdTable=evtThresholdTable, hubAddrMoveNewPort=hubAddrMoveNewPort, hubAddressIndex=hubAddressIndex, linkBeatTrapET48=linkBeatTrapET48, icfConfigIfEntry=icfConfigIfEntry, intrusionTrapSMM=intrusionTrapSMM, icfEvent=icfEvent, linkTestIpxAddress=linkTestIpxAddress, hubAddrMoveIndex=hubAddrMoveIndex, backupLinkTrapET24S=backupLinkTrapET24S, hubGlobalInUcastPkts=hubGlobalInUcastPkts, stpRootPort=stpRootPort, segmentationTrapSMM=segmentationTrapSMM, icfConfigIfIpAddress=icfConfigIfIpAddress, icfCommonIpxGroup=icfCommonIpxGroup, hubBasicSlaveGroup=hubBasicSlaveGroup, newAddressTrapASEN=newAddressTrapASEN, hubSqeEnabled=hubSqeEnabled, hdlcRuntFrameReceives=hdlcRuntFrameReceives, hubAddrMoveAddress=hubAddrMoveAddress, icfDownloadAddress=icfDownloadAddress, brgPortForwardedPkts=brgPortForwardedPkts, evthThreshold=evthThreshold, stpTopoChange=stpTopoChange, hdlcXmtUnderruns=hdlcXmtUnderruns, hubPortPktFragments=hubPortPktFragments, icfETwistHubDCompliance=icfETwistHubDCompliance, icf8023MacTable=icf8023MacTable, hubReadableAddrTableGroup=hubReadableAddrTableGroup, mapAddress=mapAddress, advStackU16TrapPrefix=advStackU16TrapPrefix, hubAddressMoveLogTable=hubAddressMoveLogTable, hubAddrMoveNewGroup=hubAddrMoveNewGroup, backupLinkTrapSMM=backupLinkTrapSMM, icfAdvStkVGSlaveCompliance=icfAdvStkVGSlaveCompliance, icfETwistConformance=icfETwistConformance, icf8023MacIndex=icf8023MacIndex, PYSNMP_MODULE_ID=icfEtwistMib, hubPortLinkBeatEnable=hubPortLinkBeatEnable, icfDownloadGroup=icfDownloadGroup, linkTestTimeout=linkTestTimeout, temperatureTrap1010=temperatureTrap1010, icfEtwistMib=icfEtwistMib, hdlcRemoteTestCommands=hdlcRemoteTestCommands, newAddressTrapSMM=newAddressTrapSMM, brgPortCacheMisses=brgPortCacheMisses, hdlcRemoteNodeId=hdlcRemoteNodeId, newAddressTrapET24S=newAddressTrapET24S, icf8023MacSlaveGroup=icf8023MacSlaveGroup, lastSetError=lastSetError, stpPriority=stpPriority, addressMovedTrapASEN=addressMovedTrapASEN, icfConfigGroup=icfConfigGroup, hdlcProviderLostPrimitives=hdlcProviderLostPrimitives, etherTwist48TrapPrefix=etherTwist48TrapPrefix, linkTest=linkTest, hdlcFrameRejectFrameRecs=hdlcFrameRejectFrameRecs, hdlcRemoteTestResponses=hdlcRemoteTestResponses, advStack24TrapPrefix=advStack24TrapPrefix, ipSubnetMask=ipSubnetMask, hdlcRemoteState=hdlcRemoteState, stpForwardDelay=stpForwardDelay, thresholdTrapASU16=thresholdTrapASU16, stpTopoNumChanges=stpTopoNumChanges, hubBitmaps=hubBitmaps, hdlcLocalDisconnectRequests=hdlcLocalDisconnectRequests, stpPortDesignatedBridge=stpPortDesignatedBridge, hdlcRemoteConnectRequests=hdlcRemoteConnectRequests, evtArm=evtArm, stp=stp, linkTestIpAddress=linkTestIpAddress, stpTrapRem=stpTrapRem, hdlcRemoteTable=hdlcRemoteTable, hubNewEnhancementsGroup=hubNewEnhancementsGroup, hdlcLocalDisconnectConfirms=hdlcLocalDisconnectConfirms, hdlcRemoteXidResponses=hdlcRemoteXidResponses, hdlcRemoteXidCommands=hdlcRemoteXidCommands, hdlcRejectFrameSends=hdlcRejectFrameSends, icfIpMappingGroup=icfIpMappingGroup, advStack12TrapPrefix=advStack12TrapPrefix, icfCommonBasicGroup=icfCommonBasicGroup, hubAddressMoveGroup=hubAddressMoveGroup, thresholdTrap1010=thresholdTrap1010, addressTable=addressTable, hubPortPolarityReversed=hubPortPolarityReversed, hubBkpLinkIndex=hubBkpLinkIndex, hubPortsOperStatus=hubPortsOperStatus, brgPortCacheHits=brgPortCacheHits, etherTwist12TrapPrefix=etherTwist12TrapPrefix, stpPortRootId=stpPortRootId, hubGlobalRunts=hubGlobalRunts, hubBkpLinkTable=hubBkpLinkTable, stpPortIndex=stpPortIndex, hdlcGiantFrameReceives=hdlcGiantFrameReceives, hpicfEnetSMMTrapPrefix=hpicfEnetSMMTrapPrefix, hubPortLateEventDisable=hubPortLateEventDisable, hdlcRemoteResetRequests=hdlcRemoteResetRequests, brgPortIndex=brgPortIndex, icfConfigIfIndex=icfConfigIfIndex, evthTimeInterval=evthTimeInterval, icf8023MacMissedPktErrors=icf8023MacMissedPktErrors, addressChunk=addressChunk, wildcardUserOffset=wildcardUserOffset, icfConfigIfTable=icfConfigIfTable, icf8023MacRunts=icf8023MacRunts, hdlcLocalResetRequests=hdlcLocalResetRequests, advStackU8TrapPrefix=advStackU8TrapPrefix, thresholdTrapAS24=thresholdTrapAS24, thresholdTrapASU8=thresholdTrapASU8, icf8023MacInMulticastPkts=icf8023MacInMulticastPkts, operationalState=operationalState, hubAddressTable=hubAddressTable, addressIndex=addressIndex, linkBeatTrapET12=linkBeatTrapET12, icf8023MacSpuriousIntrs=icf8023MacSpuriousIntrs, hubBackupConsecutiveFails=hubBackupConsecutiveFails, icfCommonIpGroup=icfCommonIpGroup, icfConfigIpTTL=icfConfigIpTTL, stpCurrentMaxAge=stpCurrentMaxAge, hubBasicEnhancementsGroup=hubBasicEnhancementsGroup, icfConfigIfNetMask=icfConfigIfNetMask, password=password, hdlcErrorIndications=hdlcErrorIndications, icfETwistBridgeDCompliance=icfETwistBridgeDCompliance, evthObject=evthObject, hubPortMacAddress=hubPortMacAddress, hdlcErrorIndex=hdlcErrorIndex, icf8023MacExcessDeferrals=icf8023MacExcessDeferrals, thresholdTrapFiber=thresholdTrapFiber, backupLinkTrapET48=backupLinkTrapET48, backupLinkTrapFiber=backupLinkTrapFiber, icfEncryptedPasswordGroup=icfEncryptedPasswordGroup, selfTest=selfTest, hubGlobalInOctets=hubGlobalInOctets, hubBackupTestTime=hubBackupTestTime, hdlcRejectFrameReceives=hdlcRejectFrameReceives, evthHysteresis=evthHysteresis, hubPortSegmentation=hubPortSegmentation, reset=reset, hubThinlanFault=hubThinlanFault, hubGlobalErrors=hubGlobalErrors, hubGlobalPktFragments=hubGlobalPktFragments, evtTable=evtTable, hubGlobalAlignmentErrors=hubGlobalAlignmentErrors, segmentationTrapET12=segmentationTrapET12, announceAddress=announceAddress, stpPortPriority=stpPortPriority, backupLinkTrapET12=backupLinkTrapET12, thresholdTrapASEN=thresholdTrapASEN, evtIpxNotify=evtIpxNotify, hubLateEventMonitorGroup=hubLateEventMonitorGroup, etherTwist24STrapPrefix=etherTwist24STrapPrefix, thresholdTrapET48=thresholdTrapET48, linkBeatTrapFiber=linkBeatTrapFiber, hubGlobalCollisions=hubGlobalCollisions, hubPortCollisions=hubPortCollisions, hubPortAddressState=hubPortAddressState, hdlcLocalTable=hdlcLocalTable, icfConfigBootpEnable=icfConfigBootpEnable, icfDownloadIpAddress=icfDownloadIpAddress, icf8023MacTotalMediaErrors=icf8023MacTotalMediaErrors, evtIndex=evtIndex, thresholdTrapRem=thresholdTrapRem, wildcardTable=wildcardTable, hubMappingGroup=hubMappingGroup, icfDownloadIpxAddress=icfDownloadIpxAddress, hubNumBkpLinks=hubNumBkpLinks, hdlcLocalAddress=hdlcLocalAddress, linkTest802MacAddress=linkTest802MacAddress, x25N2Count=x25N2Count, segmentationTrapET48=segmentationTrapET48, icfETCompliances=icfETCompliances, hdlcRemoteDisconnectRequests=hdlcRemoteDisconnectRequests, hubPortLinkBeatStatus=hubPortLinkBeatStatus, hubAddressMoveLogEntry=hubAddressMoveLogEntry, icfAdvStkVGCompliance=icfAdvStkVGCompliance, hdlcLocalConnectConfirms=hdlcLocalConnectConfirms, icfConfigIfDefaultGate=icfConfigIfDefaultGate, hubGlobalGiants=hubGlobalGiants, icf8023MacInBroadcastPkts=icf8023MacInBroadcastPkts, wildcardIndex=wildcardIndex, thresholdTrapSMM=thresholdTrapSMM, backupLinkTrapTLAN=backupLinkTrapTLAN, stpBridgeId=stpBridgeId, linkBeatTrapTLAN=linkBeatTrapTLAN, icf8023MacOutBroadcastPkts=icf8023MacOutBroadcastPkts, hubBasicGroup=hubBasicGroup, stpCurrentHelloTime=stpCurrentHelloTime, stpMaxAge=stpMaxAge, stpPortId=stpPortId, hdlcErrorTable=hdlcErrorTable, hdlcLocalConnectRequests=hdlcLocalConnectRequests, hdlcLocalPhase=hdlcLocalPhase, icfETwistHub24SCompliance=icfETwistHub24SCompliance, hubBackupPort=hubBackupPort, linkBeatTrapSMM=linkBeatTrapSMM, intrusionTrapET24S=intrusionTrapET24S, hubBasicAddrTableGroup=hubBasicAddrTableGroup, wildcardMask=wildcardMask, hdlcRcvOverruns=hdlcRcvOverruns, hubBackupAddress=hubBackupAddress, linkBeatTrapET24S=linkBeatTrapET24S, evtIpNotify=evtIpNotify, evtTimeSinceOccurrence=evtTimeSinceOccurrence, intrusionTrapASEN=intrusionTrapASEN, hubAddrMoveOldGroup=hubAddrMoveOldGroup, icfSlaveMappingGroup=icfSlaveMappingGroup, icfDownload=icfDownload, hubLateEventMonitor=hubLateEventMonitor, stpCurrentForwardDelay=stpCurrentForwardDelay, brgPortFilteredPkts=brgPortFilteredPkts, hdlcMissedPackets=hdlcMissedPackets, hdlcRemoteIndex=hdlcRemoteIndex, icfCommonAdmin=icfCommonAdmin, hubGlobalInNUcastPkts=hubGlobalInNUcastPkts, evthTimeSinceOccurrence=evthTimeSinceOccurrence, linkTestSuccess=linkTestSuccess, icf8023MacOutMulticastPkts=icf8023MacOutMulticastPkts, hdlcRemoteConnectConfirms=hdlcRemoteConnectConfirms, bridgeRemoteTrapPrefix=bridgeRemoteTrapPrefix, hubAddrMoveOldPort=hubAddrMoveOldPort, icfMappingGroup=icfMappingGroup, icf8023MacGiants=icf8023MacGiants, icfETwistHubCompliance=icfETwistHubCompliance, thresholdTrapET12=thresholdTrapET12, segmentationTrapTLAN=segmentationTrapTLAN, pollResponse=pollResponse, hdlcLocalState=hdlcLocalState, icfETwistBridgeCompliance=icfETwistBridgeCompliance, hubAddressTableMaxAge=hubAddressTableMaxAge, hubPortTable=hubPortTable, brgPortTable=brgPortTable, advStack48TrapPrefix=advStack48TrapPrefix, addressMovedTrapET24S=addressMovedTrapET24S, stpTrap1010=stpTrap1010, icfBridgeSpanningTreeGroup=icfBridgeSpanningTreeGroup, hubGlobalCrcErrors=hubGlobalCrcErrors, x25T3Timer=x25T3Timer, evthIndex=evthIndex, stpTopoChangeTime=stpTopoChangeTime, hdlcRemoteAddress=hdlcRemoteAddress, thresholdTrapAS12=thresholdTrapAS12, linkBeatTrapASEN=linkBeatTrapASEN, segmentationTrapFiber=segmentationTrapFiber, segmentationTrapET24S=segmentationTrapET24S, icfDownloadFilename=icfDownloadFilename, discovery=discovery, semaphore=semaphore, hubPortIndex=hubPortIndex, wildcardOffset=wildcardOffset, linkTestAddress=linkTestAddress)
mibBuilder.exportSymbols("ICF-ETWIST", hdlcBadFrameReceives=hdlcBadFrameReceives, hdlcRemoteResetConfirms=hdlcRemoteResetConfirms, thresholdTrapET24S=thresholdTrapET24S, mapPort=mapPort, icfIpxMappingGroup=icfIpxMappingGroup, stpPortTable=stpPortTable, wildcardFilter=wildcardFilter, stpPortState=stpPortState, evthArm=evthArm, hdlcT1Timeouts=hdlcT1Timeouts, forwardDbMaxAge=forwardDbMaxAge, thresholdTrapTLAN=thresholdTrapTLAN, wildcardArm=wildcardArm, icfETGroups=icfETGroups, stpRootCost=stpRootCost, bridge1010TrapPrefix=bridge1010TrapPrefix, icfBridgeBasicGroup=icfBridgeBasicGroup, linkTestRepetitions=linkTestRepetitions, x25Index=x25Index, backupLinkTrapASEN=backupLinkTrapASEN, hdlcLocalIndex=hdlcLocalIndex, fiberOpticTrapPrefix=fiberOpticTrapPrefix, addressMovedTrapSMM=addressMovedTrapSMM, icfAdvStkSlaveCompliance=icfAdvStkSlaveCompliance, icfRemoteBridgeGroup=icfRemoteBridgeGroup, thinLANTrapPrefix=thinLANTrapPrefix, hdlcLocalResetConfirms=hdlcLocalResetConfirms, thresholdTrapAS48=thresholdTrapAS48, mapState=mapState, stpHelloTime=stpHelloTime, stpDesignatedRoot=stpDesignatedRoot, hubPrimaryPort=hubPrimaryPort, eventNotificationNode=eventNotificationNode, stpPortDesignatedCost=stpPortDesignatedCost, icf8023MacGroup=icf8023MacGroup, hubAddressChunk=hubAddressChunk, x25T1Timer=x25T1Timer, hubLinkBeatControlGroup=hubLinkBeatControlGroup, hubGlobal=hubGlobal, temperatureTrapRem=temperatureTrapRem, icfAdvStkCompliance=icfAdvStkCompliance, segmentationTrapASEN=segmentationTrapASEN, x25Table=x25Table, stpPortDesignatedPort=stpPortDesignatedPort, hubBackupLinkGroup=hubBackupLinkGroup)
