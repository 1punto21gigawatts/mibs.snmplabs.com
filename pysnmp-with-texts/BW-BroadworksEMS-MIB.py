#
# PySNMP MIB module BW-BroadworksEMS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BW-BroadworksEMS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:42:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, IpAddress, Unsigned32, TimeTicks, Gauge32, Counter32, MibIdentifier, Bits, Counter64, enterprises, ObjectIdentity, ModuleIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "IpAddress", "Unsigned32", "TimeTicks", "Gauge32", "Counter32", "MibIdentifier", "Bits", "Counter64", "enterprises", "ObjectIdentity", "ModuleIdentity", "NotificationType")
DisplayString, TruthValue, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "DateAndTime", "TextualConvention")
class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
adventnet = MibIdentifier((1, 3, 6, 1, 4, 1, 2162))
webNMS = MibIdentifier((1, 3, 6, 1, 4, 1, 2162, 4))
webNMSSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 2162, 4, 1))
webNMSTopoMib = MibIdentifier((1, 3, 6, 1, 4, 1, 2162, 4, 2))
webNMSFaultMib = MibIdentifier((1, 3, 6, 1, 4, 1, 2162, 4, 3))
webNMSPerformanceMib = MibIdentifier((1, 3, 6, 1, 4, 1, 2162, 4, 4))
persistentTrapsMib = MibIdentifier((1, 3, 6, 1, 4, 1, 2162, 4, 5))
tftpMib = MibIdentifier((1, 3, 6, 1, 4, 1, 2162, 4, 6))
proxyService = MibIdentifier((1, 3, 6, 1, 4, 1, 2162, 4, 7))
subagents = MibIdentifier((1, 3, 6, 1, 4, 1, 2162, 4, 8))
trapForwardingModule = MibIdentifier((1, 3, 6, 1, 4, 1, 2162, 4, 9))
nmsConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2162, 4, 10))
agentConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2162, 4, 11))
webNMSVersion = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: webNMSVersion.setStatus('current')
if mibBuilder.loadTexts: webNMSVersion.setDescription('The version number of the AdventNet WebNMS System.')
webNMSHost = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: webNMSHost.setStatus('current')
if mibBuilder.loadTexts: webNMSHost.setDescription('The hostname of the system in which the AdventNet WebNMS system is executed on.')
webNMSIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webNMSIpAddress.setStatus('current')
if mibBuilder.loadTexts: webNMSIpAddress.setDescription('The ipaddress of the system in which the AdventNet WebNMS system is executed on.')
webNMSTotalMemory = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webNMSTotalMemory.setStatus('current')
if mibBuilder.loadTexts: webNMSTotalMemory.setDescription('The Total memory of the device in which the WebNMS is running')
webNMSFreeMemory = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webNMSFreeMemory.setStatus('current')
if mibBuilder.loadTexts: webNMSFreeMemory.setDescription('The Free memory available in the device in which the WebNMS is running')
webNMSStartTime = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webNMSStartTime.setStatus('current')
if mibBuilder.loadTexts: webNMSStartTime.setDescription('This variable states the time at which the NMS Server started')
webNMSUpTime = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webNMSUpTime.setStatus('current')
if mibBuilder.loadTexts: webNMSUpTime.setDescription('This variable states the duration for which the NMS Server has been running')
webNMSShutdown = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: webNMSShutdown.setStatus('current')
if mibBuilder.loadTexts: webNMSShutdown.setDescription('This variable is used to shutdown the NMS from the manager. The user needs to give the login name and the password.Once,the user gives the loginname and the password,the NMS Server shuts down. SYNTAX: loginName,password')
webNMSPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 2162, 4, 1, 9))
webNMSSchedulerTable = MibTable((1, 3, 6, 1, 4, 1, 2162, 4, 1, 10), )
if mibBuilder.loadTexts: webNMSSchedulerTable.setStatus('optional')
if mibBuilder.loadTexts: webNMSSchedulerTable.setDescription('A table of WebNMS scheduler instances')
webNMSSchedulerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2162, 4, 1, 10, 1), ).setIndexNames((0, "BW-BroadworksEMS-MIB", "webNMSSchedulerIndex"))
if mibBuilder.loadTexts: webNMSSchedulerEntry.setStatus('current')
if mibBuilder.loadTexts: webNMSSchedulerEntry.setDescription('A collection of objects specific to the WebNMS system Scheduler')
webNMSSchedulerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 1, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webNMSSchedulerIndex.setStatus('current')
if mibBuilder.loadTexts: webNMSSchedulerIndex.setDescription('The index for the WebNMS Scheduler instance')
webNMSSchedulerDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 1, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: webNMSSchedulerDesc.setStatus('current')
if mibBuilder.loadTexts: webNMSSchedulerDesc.setDescription('A description of the WebNMS Scheduler instance')
webNMSSchedulerNumTasks = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 1, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webNMSSchedulerNumTasks.setStatus('current')
if mibBuilder.loadTexts: webNMSSchedulerNumTasks.setDescription('The number of tasks scheduled in this WebNMS Scheduler instance')
webNMSSchedulerNumThreads = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 1, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webNMSSchedulerNumThreads.setStatus('current')
if mibBuilder.loadTexts: webNMSSchedulerNumThreads.setDescription('Total number of Worker threads available')
webNMSSchedulerActiveThreads = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 1, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webNMSSchedulerActiveThreads.setStatus('current')
if mibBuilder.loadTexts: webNMSSchedulerActiveThreads.setDescription('The number of active Worker threads')
webNMSSchedulerIdleThreads = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 1, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webNMSSchedulerIdleThreads.setStatus('current')
if mibBuilder.loadTexts: webNMSSchedulerIdleThreads.setDescription('The number of idle Worker threads')
webNMSNumObjects = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webNMSNumObjects.setStatus('current')
if mibBuilder.loadTexts: webNMSNumObjects.setDescription('The number of objects being managed by the AdventNet WebNMS system.')
webNMSNumNetworks = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webNMSNumNetworks.setStatus('current')
if mibBuilder.loadTexts: webNMSNumNetworks.setDescription('The number of networks being managed by the AdventNet WebNMS system.')
webNMSNumNodes = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webNMSNumNodes.setStatus('current')
if mibBuilder.loadTexts: webNMSNumNodes.setDescription('The number of nodes being managed by the AdventNet WebNMS system.')
webNMSNumInterfaces = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webNMSNumInterfaces.setStatus('current')
if mibBuilder.loadTexts: webNMSNumInterfaces.setDescription('The number of interfaces being managed by the AdventNet WebNMS system.')
moUserPropNames = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moUserPropNames.setStatus('current')
if mibBuilder.loadTexts: moUserPropNames.setDescription("This variable indicates to the agent what all user property values the user would like to see in the moUserProp variable of the MoTable. This also provides for the facility of viewing all the user property-values by specifying the word 'all' . If the user needs to see only a few specific user property values ,then he needs to specify them explicitly SYNTAX1 all SYNTAX2 userPropName1,userPropName2,... The values for the properties will be in the following format: userPropName1=value1,userPopName2=value2..")
moTable = MibTable((1, 3, 6, 1, 4, 1, 2162, 4, 2, 6), )
if mibBuilder.loadTexts: moTable.setStatus('current')
if mibBuilder.loadTexts: moTable.setDescription('This describes the details of Managed Objects')
moEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2162, 4, 2, 6, 1), ).setIndexNames((0, "BW-BroadworksEMS-MIB", "moNameIndex"), (0, "BW-BroadworksEMS-MIB", "moOwnerName"))
if mibBuilder.loadTexts: moEntry.setStatus('current')
if mibBuilder.loadTexts: moEntry.setDescription('An entry of the Mo Table')
moNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moNameIndex.setStatus('current')
if mibBuilder.loadTexts: moNameIndex.setDescription('This variable represents the name of the Network Element. This name should uniquely represent the MO in the network domain across all MO types.This entry corresponds to the Name field of the ManagedObject table in the database')
moOwnerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moOwnerName.setStatus('current')
if mibBuilder.loadTexts: moOwnerName.setDescription('This variable represents the Ownername of the Network Element. This name also uniquely represents the MO in the network domain across all MO types. This entry corresponds to the OwnerName field of the ManagedObject table in the database')
moType = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moType.setStatus('current')
if mibBuilder.loadTexts: moType.setDescription('This variable represents the type of the Network Element whose attributes are presented in this specific row of the MO table.This entry corresponds to the Type field of the ManagedObject table in the database')
moFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moFailureCount.setStatus('current')
if mibBuilder.loadTexts: moFailureCount.setDescription('This variable represents the number of failures occuring in the network element. This entry corresponds to the FailureCount field of the ManagedObject table in the database')
moFailureThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moFailureThreshold.setStatus('current')
if mibBuilder.loadTexts: moFailureThreshold.setDescription('This variable represents the minimum value for failures which acts as the threshold.This entry corresponds to the FailureThreshold field of the ManagedObject table in the database')
moManaged = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 6, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moManaged.setStatus('current')
if mibBuilder.loadTexts: moManaged.setDescription('This variable states whether the mo is managed or not.This entry corresponds to the Managed field of the ManagedObject table in the database')
moStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moStatus.setStatus('current')
if mibBuilder.loadTexts: moStatus.setDescription('This value gives the current status of the MO.This entry corresponds to the Status field of the ManagedObject table in the database')
moStatusChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 6, 1, 8), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moStatusChangeTime.setStatus('current')
if mibBuilder.loadTexts: moStatusChangeTime.setDescription('This variable represents the time at which the status of the mo was formally acknowledged to have changed.This entry corresponds to the StatusChangeTime field of the ManagedObject table in the database')
moStatusUpdateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 6, 1, 9), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moStatusUpdateTime.setStatus('current')
if mibBuilder.loadTexts: moStatusUpdateTime.setDescription('This variable represents the time at which the status of the mo was formally acknowledged to have been updated.This entry corresponds to the StatusUpdateTime field of the ManagedObject table in the database')
moPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 6, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moPollInterval.setStatus('current')
if mibBuilder.loadTexts: moPollInterval.setDescription('This variable states the polling interval of the mo.This entry corresponds to the PollInterval field of the ManagedObject table in the database')
moUserProperties = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 6, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moUserProperties.setStatus('current')
if mibBuilder.loadTexts: moUserProperties.setDescription('The values for the user properties which the user specifies in the moUserPropNames variable are displayed The values will be displayed in the folloing formate propName1=value1,porpName2=vaule2,....')
moDerivedProperties = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 6, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moDerivedProperties.setStatus('current')
if mibBuilder.loadTexts: moDerivedProperties.setDescription("This variable displays the values of the user defined objects ' properties which the user specifies in the derivedPropNames variable in the moDerivedPropNamesTable. The values will be displayed in the following formate propName1=value1,propName2=value2,....")
inheritingOid1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 6, 1, 13), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inheritingOid1.setStatus('current')
if mibBuilder.loadTexts: inheritingOid1.setDescription('This variable states the oid of the table. For example,if the discovered object is derived from TopoObject, then, the oid of the TopoObjectTable in this MIB will be filled here.If the oid is .0.0 then it implies that there is no further inheritance.')
inheritingTableName1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 6, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inheritingTableName1.setStatus('current')
if mibBuilder.loadTexts: inheritingTableName1.setDescription('This variable states the name of the table. For example,if the discovered object is derived from TopoObject, then, the table name TopoObjectTable will be filled here.If the tablename is empty then it implies that there is no further inheritance.')
topoObjTable = MibTable((1, 3, 6, 1, 4, 1, 2162, 4, 2, 7), )
if mibBuilder.loadTexts: topoObjTable.setStatus('current')
if mibBuilder.loadTexts: topoObjTable.setDescription('This table contains the various topo Objects')
topoObjEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2162, 4, 2, 7, 1), ).setIndexNames((0, "BW-BroadworksEMS-MIB", "moNameIndex"), (0, "BW-BroadworksEMS-MIB", "moOwnerName"))
if mibBuilder.loadTexts: topoObjEntry.setStatus('current')
if mibBuilder.loadTexts: topoObjEntry.setDescription('An entry of the topoObject Table')
ipAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 7, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAddress.setStatus('current')
if mibBuilder.loadTexts: ipAddress.setDescription('This variable states the ipAddress of the Object.This entry corresponds to the IpAddress field of the TopoObject table in the database')
netmask = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 7, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netmask.setStatus('current')
if mibBuilder.loadTexts: netmask.setDescription('This variable states the net mask of the object.This entry corresponds to the NetMask field of the TopoObject table in the database')
moCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moCommunity.setStatus('current')
if mibBuilder.loadTexts: moCommunity.setDescription('This variable states the read community String used by the Snmp Agent in the Network Element. This field is valid only if the Network Element is also an SnmpNode.This entry corresponds to the Community field of the TopoObject table in the database')
moWriteCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moWriteCommunity.setStatus('current')
if mibBuilder.loadTexts: moWriteCommunity.setDescription('This variable states the write community String used by the Snmp Agent in the Network Element. This field is valid only if the Network Element is also an SnmpNode.This entry corresponds to the WriteCommunity field of the TopoObject table in the database')
snmpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpPort.setStatus('current')
if mibBuilder.loadTexts: snmpPort.setDescription('This variable states the Snmp port used by the Snmp Agent in the Network Element. This field is valid only if the Network Element is also an Snmp Node.This entry corresponds to the SnmpPort field of the TopoObject table in the database')
isDHCP = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 7, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isDHCP.setStatus('current')
if mibBuilder.loadTexts: isDHCP.setDescription('This variable states whether the network element supports DHCP (i.e is the ipaddress for the network element assigned by DHCP protocol). This entry corresponds to the IsDHCP field of the TopoObject table in the database')
baseMibs = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 7, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseMibs.setStatus('current')
if mibBuilder.loadTexts: baseMibs.setDescription('This variable states the Mibs implemented by the Snmp Agent in the Network Element. This field is valid only if the Network Element is also an Snmp Node.This entry corresponds to the BaseMibs field of the TopoObject table in the database')
version = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 7, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: version.setStatus('current')
if mibBuilder.loadTexts: version.setDescription('This variable states the version used by the Snmp Agent in the Network Element. This entry corresponds to the Version field of the TopoObject table in the database.')
userName = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 7, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userName.setStatus('current')
if mibBuilder.loadTexts: userName.setDescription('This variable states the userName used by the SNMPv3 Agent in the Network Element. This entry corresponds to the UserName field of the TopoObject table in the database.')
contextName = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 7, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextName.setStatus('current')
if mibBuilder.loadTexts: contextName.setDescription('This variable states the contextName used by the SNMPv3 Agent in the Network Element. This entry corresponds to the ContextName field of the TopoObject table in the database.')
inheritingOid2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 7, 1, 11), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inheritingOid2.setStatus('current')
if mibBuilder.loadTexts: inheritingOid2.setDescription("This variable states the oid of the table. For example,if the discovered object's type is either Node or any of its child, then, the oid of the NodeTable in this MIB will be filled here.If the oid is .0.0 then it implies that there is no further inheritance.")
inheritingTableName2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 7, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inheritingTableName2.setStatus('current')
if mibBuilder.loadTexts: inheritingTableName2.setDescription("This variable states the name of the table. For example,if the discovered object's type is either Node or any of its child, then, the table name NodeTable will be filled here.If the table name is empty then it implies that there is no further inheritance.")
networkTable = MibTable((1, 3, 6, 1, 4, 1, 2162, 4, 2, 8), )
if mibBuilder.loadTexts: networkTable.setStatus('current')
if mibBuilder.loadTexts: networkTable.setDescription('This table contains information about the various networks supported by the NMS')
networkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2162, 4, 2, 8, 1), ).setIndexNames((0, "BW-BroadworksEMS-MIB", "moNameIndex"), (0, "BW-BroadworksEMS-MIB", "moOwnerName"))
if mibBuilder.loadTexts: networkEntry.setStatus('current')
if mibBuilder.loadTexts: networkEntry.setDescription('An entry of the Network table')
discover = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 8, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: discover.setStatus('current')
if mibBuilder.loadTexts: discover.setDescription('This variable states whether disocvery is being done on this network or not. This entry corresponds to the Discover field of the Network table in the database')
discoverStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: discoverStatus.setStatus('current')
if mibBuilder.loadTexts: discoverStatus.setDescription('This variable states the discovery status for the network. This entry corresponds to the DiscoveryStatus field of the Network table in the database')
inheritingOid3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 8, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inheritingOid3.setStatus('current')
if mibBuilder.loadTexts: inheritingOid3.setDescription("This variable states the oid of the table. For example,if the discovered object is any direct child( e.g. MyNetworkChild) of Network (or any child of MyNetworkChild),then, the oid of the direct child's table (e.g. MyNetworkChildTable) in this MIB will be filled here, If the oid is .0.0 then it implies that there is no further inheritance.")
inheritingTableName3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 8, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inheritingTableName3.setStatus('current')
if mibBuilder.loadTexts: inheritingTableName3.setDescription("This variable states the name of the table. For example,if the discovered object is any direct child( e.g. MyNetworkChild) of Network (or any child of MyNetworkChild),then, the tablename of the direct child's table (e.g. MyNetworkChildTable) in this MIB will be filled here, If the table name is empty then it implies that there is no further inheritance.")
nodeTable = MibTable((1, 3, 6, 1, 4, 1, 2162, 4, 2, 9), )
if mibBuilder.loadTexts: nodeTable.setStatus('current')
if mibBuilder.loadTexts: nodeTable.setDescription('This table describes the nodes in the NMS')
nodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2162, 4, 2, 9, 1), ).setIndexNames((0, "BW-BroadworksEMS-MIB", "moNameIndex"), (0, "BW-BroadworksEMS-MIB", "moOwnerName"))
if mibBuilder.loadTexts: nodeEntry.setStatus('current')
if mibBuilder.loadTexts: nodeEntry.setDescription('An entry of the Node table')
isRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 9, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: isRouter.setStatus('current')
if mibBuilder.loadTexts: isRouter.setDescription('This variable states whether the node is a router or not. This entry corresponds to the isRouter field of the Node table in the database')
inheritingOid4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 9, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inheritingOid4.setStatus('current')
if mibBuilder.loadTexts: inheritingOid4.setDescription("This variable states the oid of the table. For example,if the discovered object's type is either SnmpNode or any of its child, then, the oid of the SnmpNodeTable in this MIB will be filled here. If the oid is .0.0 then it implies that there is no further inheritance.")
inheritingTableName4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inheritingTableName4.setStatus('current')
if mibBuilder.loadTexts: inheritingTableName4.setDescription("This variable states the name of the table. For example,if the discovered object's type is either SnmpNode or any of its child, then, the tabel name SnmpNodeTable will be filled here. If the table name is empty then it implies that there is no further inheritance.")
ipAddressTable = MibTable((1, 3, 6, 1, 4, 1, 2162, 4, 2, 10), )
if mibBuilder.loadTexts: ipAddressTable.setStatus('current')
if mibBuilder.loadTexts: ipAddressTable.setDescription('This table describes the ipAddress objects')
ipAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2162, 4, 2, 10, 1), ).setIndexNames((0, "BW-BroadworksEMS-MIB", "moNameIndex"), (0, "BW-BroadworksEMS-MIB", "moOwnerName"))
if mibBuilder.loadTexts: ipAddressEntry.setStatus('current')
if mibBuilder.loadTexts: ipAddressEntry.setDescription('An entry of the ipAddress table')
parentNode = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 10, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parentNode.setStatus('current')
if mibBuilder.loadTexts: parentNode.setDescription('This variable states the parent Node of this Interface.This entry corresponds to the ParentNode field of the IpAddress table in the database.')
parentNet = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 10, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: parentNet.setStatus('current')
if mibBuilder.loadTexts: parentNet.setDescription('This variable states the name of the parent network to which this Interface belongs. This entry corresponds to the ParentNode field of the IpAddress table in the database.')
inheritingOid5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 10, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inheritingOid5.setStatus('current')
if mibBuilder.loadTexts: inheritingOid5.setDescription("This variable states the oid of the table. For example,if the discovered object's type is either SnmpInterface or any of its child.Then,the oid of the SnmpInterfaceTable in this MIB will be filled here. If the oid is .0.0 then it implies that there is no further inheritance.")
inheritingTableName5 = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 10, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inheritingTableName5.setStatus('current')
if mibBuilder.loadTexts: inheritingTableName5.setDescription("This variable states the name of the table. For example,if the discovered object's type is either SnmpInterface or any of its child.Then,the tabelname SnmpInterfaceTable will be filled here. If the table name is empty then it implies that there is no further inheritance.")
snmpNodeTable = MibTable((1, 3, 6, 1, 4, 1, 2162, 4, 2, 11), )
if mibBuilder.loadTexts: snmpNodeTable.setStatus('current')
if mibBuilder.loadTexts: snmpNodeTable.setDescription('This table describes the SNMP nodes in the WebNMS')
snmpNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2162, 4, 2, 11, 1), ).setIndexNames((0, "BW-BroadworksEMS-MIB", "moNameIndex"), (0, "BW-BroadworksEMS-MIB", "moOwnerName"))
if mibBuilder.loadTexts: snmpNodeEntry.setStatus('current')
if mibBuilder.loadTexts: snmpNodeEntry.setDescription('An entry of the snmpNode table')
hostNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 11, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostNetMask.setStatus('current')
if mibBuilder.loadTexts: hostNetMask.setDescription('This variable states the netmask of the primary interface reported by the snmp agent. This entry corresponds to the HostNetMask field of the SnmpNode table in the database')
sysDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDesc.setStatus('current')
if mibBuilder.loadTexts: sysDesc.setDescription('This variable states the System Descriptor of this node as reported by the snmp agent. This entry corresponds to the SysDescr field of the SnmpNode table in the database')
sysName = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysName.setStatus('current')
if mibBuilder.loadTexts: sysName.setDescription('This variable states the System Name of this node as reported by the snmp agent. This entry corresponds to the SysName field of the SnmpNode table in the database')
sysOid = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 11, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysOid.setStatus('current')
if mibBuilder.loadTexts: sysOid.setDescription('This variable states the System Object Identifier of this node as reported by the snmp agent. This entry corresponds to the SysOid field of the SnmpNode table in the database')
inheritingOid6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 11, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inheritingOid6.setStatus('current')
if mibBuilder.loadTexts: inheritingOid6.setDescription("This variable states the oid of the table. For example,if the discovered object is any direct child ( e.g. MySnmpNodeChild) of SnmpNode (or any child of MySnmpNodeChild),then, the oid of the direct child's table(e.g. MySnmpNodeChildTable) in this MIB will be filled here. If the oid is .0.0 then it implies that there is no further inheritance.")
inheritingTableName6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 11, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inheritingTableName6.setStatus('current')
if mibBuilder.loadTexts: inheritingTableName6.setDescription("This variable states the name of the table. For example,if the discovered object is any direct child ( e.g. MySnmpNodeChild) of SnmpNode (or any child of MySnmpNodeChild),then, the table name of the direct child's table(e.g. MySnmpNodeChildTable) in this MIB will be filled here. If the table name is empty then it implies that there is no further inheritance.")
snmpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2162, 4, 2, 12), )
if mibBuilder.loadTexts: snmpInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: snmpInterfaceTable.setDescription('This table describes the properties of the snmp interfaces attached to a Snmp node disocvered by the WebNMS system.')
snmpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2162, 4, 2, 12, 1), ).setIndexNames((0, "BW-BroadworksEMS-MIB", "moNameIndex"), (0, "BW-BroadworksEMS-MIB", "moOwnerName"))
if mibBuilder.loadTexts: snmpInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: snmpInterfaceEntry.setDescription('An entry of the snmpInterfaceTable')
hostnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 12, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostnetMask.setStatus('current')
if mibBuilder.loadTexts: hostnetMask.setDescription('This variable states the netmask of this interface reported by the snmp agent in the node to which this interface object is attahced. This entry corresponds to the HostNetMask field of the SnmpInterface table in the database')
ifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifIndex.setStatus('current')
if mibBuilder.loadTexts: ifIndex.setDescription('This variable states the interface index reported by the snmp agent in the node to which this interface object is attached. This entry corresponds to the IfIndex field of the SnmpInterface table in the database')
physMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 12, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physMedia.setStatus('current')
if mibBuilder.loadTexts: physMedia.setDescription('This variable states the physical media of this inetrface as reported by the snmp agent. This entry corresponds to the PhysMedia field of the SnmpInterface table in the database')
physAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 12, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: physAddress.setStatus('current')
if mibBuilder.loadTexts: physAddress.setDescription('This variable states the Physical address of the interface as reported by the snmp agent. This entry corresponds to the PhysAddr field of the SnmpInterface table in the database')
ifSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifSpeed.setStatus('current')
if mibBuilder.loadTexts: ifSpeed.setDescription('This variable states the speed of this interface as reported by the snmp agent.This entry corresponds to the IfSpeed field of the SnmpInterface table in the database')
ifDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 12, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifDesc.setStatus('current')
if mibBuilder.loadTexts: ifDesc.setDescription('This variable states the descriptor of this inetrface as reported by the snmp agent. This entry corresponds to the IfDescr field of the SnmpInterface table in the database')
sysOID = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 12, 1, 7), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysOID.setStatus('current')
if mibBuilder.loadTexts: sysOID.setDescription('This variable states the System Object Identifier of this node as reported by the snmp agent.This entry corresponds to the SysOid field of the SnmpInterface table in the database')
inheritingOid7 = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 12, 1, 8), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inheritingOid7.setStatus('current')
if mibBuilder.loadTexts: inheritingOid7.setDescription("This variable states the oid of the table. For example,if the discovered object is any direct child( e.g. MySnmpInterfaceChild) of SnmpInterface (or any child of MySnmpInterfaceChild),then, the oid of the direct child's table(e.g. MySnmpInterfaceChildTable) in this MIB will be filled here. If the oid is .0.0 then it implies that there is no further inheritance.")
inheritingTableName7 = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 12, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inheritingTableName7.setStatus('current')
if mibBuilder.loadTexts: inheritingTableName7.setDescription("This variable states the name of the table. For example,if the discovered object is any direct child( e.g. MySnmpInterfaceChild) of SnmpInterface (or any child of MySnmpInterfaceChild),then, the table name of the direct child's table(e.g. MySnmpInterfaceChildTable) in this MIB will be filled here. If the table name is empty then it implies that there is no further inheritance.")
moDerivedPropNameTable = MibTable((1, 3, 6, 1, 4, 1, 2162, 4, 2, 13), )
if mibBuilder.loadTexts: moDerivedPropNameTable.setStatus('current')
if mibBuilder.loadTexts: moDerivedPropNameTable.setDescription("This table contains the type of the user-defined objects and the properties of the user defined objects. The user can specify what all user-object's properties he wants to be displayed in the moDerivedProperties in MO table.")
moDerivedPropNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2162, 4, 2, 13, 1), ).setIndexNames((0, "BW-BroadworksEMS-MIB", "indexNum"))
if mibBuilder.loadTexts: moDerivedPropNameEntry.setStatus('current')
if mibBuilder.loadTexts: moDerivedPropNameEntry.setDescription('An entry of the User Object Table.')
indexNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: indexNum.setStatus('current')
if mibBuilder.loadTexts: indexNum.setDescription('This variable is an incremental integer which uniquely identifies each entry of the table.')
objClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 13, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: objClassName.setStatus('current')
if mibBuilder.loadTexts: objClassName.setDescription('This variable indicates the class name of the user defined objects and identifies them uniquely.The user needs to specify the full package name of the object For example : com.adventnet.nms.topodb.Node')
derivedPropNames = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 13, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: derivedPropNames.setStatus('current')
if mibBuilder.loadTexts: derivedPropNames.setDescription('This variable indicates the names of the derived properties of user defined objects which will be displayed in the moDerivedProperties variable in the MoTable. The user must specify the names of derived properties in the following format .SYNTAX: propName1,propName2,...')
tableOid = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 13, 1, 4), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tableOid.setStatus('current')
if mibBuilder.loadTexts: tableOid.setDescription('This variable states the oid of the table for the particular mo-type')
tableName = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 2, 13, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tableName.setStatus('current')
if mibBuilder.loadTexts: tableName.setDescription('This variable describes the table name')
moNotificationMib = MibIdentifier((1, 3, 6, 1, 4, 1, 2162, 4, 2, 14))
webNMSNumEvents = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webNMSNumEvents.setStatus('current')
if mibBuilder.loadTexts: webNMSNumEvents.setDescription('The total Number of Events in the AdventNet WebNMS system')
webNMSNumAlerts = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webNMSNumAlerts.setStatus('current')
if mibBuilder.loadTexts: webNMSNumAlerts.setDescription('The total Number of Alerts in the AdventNet WebNMS system')
webNMSEventsInBuffer = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webNMSEventsInBuffer.setStatus('current')
if mibBuilder.loadTexts: webNMSEventsInBuffer.setDescription('The Size of the Event Queue in the AdventNet WebNMS system')
webNMSAlertsInBuffer = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webNMSAlertsInBuffer.setStatus('current')
if mibBuilder.loadTexts: webNMSAlertsInBuffer.setDescription('The Size of the Alert Queue in the AdventNet WebNMS system')
alertUserPropNames = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alertUserPropNames.setStatus('current')
if mibBuilder.loadTexts: alertUserPropNames.setDescription("This variable indicates to the agent what all user property values the user would like to see in the alertUserProperties variable of the AlertTable This also provides for the facility of viewing all the user property-values by specifying the word 'all' . If the user needs to see only a few specific user property values ,then he needs to specify them explicitly SYNTAX1 all SYNTAX2 userPropName1,userPropName2,... The values for the properties will be in the following format: userPropName1=value1,userPropName2=value2..")
eventUserPropNames = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eventUserPropNames.setStatus('current')
if mibBuilder.loadTexts: eventUserPropNames.setDescription("This variable indicates to the agent what all user properties value the user would like to see in the eventUserProperties variable in the EventTable This also provides for the facility of viewing all the user property-values by specifying the word 'all' . If the user needs to see only a few specific user property values ,then he needs to specify them explicitly SYNTAX1 all SYNTAX2 userPropName1,userPropName2,... The values for the properties will be in the following format: userPropName1=value1,userPropName2=value2..")
alertTable = MibTable((1, 3, 6, 1, 4, 1, 2162, 4, 3, 7), )
if mibBuilder.loadTexts: alertTable.setStatus('deprecated')
if mibBuilder.loadTexts: alertTable.setDescription('This table describes all the elements of the alert. This table has been deprecated since the AlertSource column is not an index column. This table has been replaced by AlarmTable.')
alertEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2162, 4, 3, 7, 1), ).setIndexNames((0, "BW-BroadworksEMS-MIB", "alertEntity"), (0, "BW-BroadworksEMS-MIB", "alertOwnerName"))
if mibBuilder.loadTexts: alertEntry.setStatus('deprecated')
if mibBuilder.loadTexts: alertEntry.setDescription('An entry of the alert table')
alertEntity = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 3, 7, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertEntity.setStatus('deprecated')
if mibBuilder.loadTexts: alertEntity.setDescription('This variable states the unique source of the alert which uniquely identifies any alert in the table.This corresponds to the Entity entry in the Alert Table in the database')
alertOwnerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 3, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertOwnerName.setStatus('deprecated')
if mibBuilder.loadTexts: alertOwnerName.setDescription('This variable states the name of the owner of the alert.This corresponds to the OwnerName entry in the Alert Table in the database')
alertCreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 3, 7, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertCreateTime.setStatus('deprecated')
if mibBuilder.loadTexts: alertCreateTime.setDescription('This variable states the time of creation of the alert.This corresponds to the CreateTime entry in the Alert Table in the database')
alertSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 3, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertSource.setStatus('deprecated')
if mibBuilder.loadTexts: alertSource.setDescription('This variable indicates the source of the alert i.e., from where the alert generated.This corresponds to the Source entry in the Alert Table in the database')
alertModTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 3, 7, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertModTime.setStatus('deprecated')
if mibBuilder.loadTexts: alertModTime.setDescription('This variable states the latest time at which the alert status was modified.This corresponds to the ModTime entry in the Alert Table in the database')
alertSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 3, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertSeverity.setStatus('deprecated')
if mibBuilder.loadTexts: alertSeverity.setDescription('This variable describes the severity of the alert in integer format.This corresponds to the Severity entry in the Alert Table in the database')
alertPreviousSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 3, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertPreviousSeverity.setStatus('deprecated')
if mibBuilder.loadTexts: alertPreviousSeverity.setDescription('This variable states the previous severity of the alert.This corresponds to the PreviousSeverity entry in the Alert Table in the database')
alertCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 3, 7, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertCategory.setStatus('deprecated')
if mibBuilder.loadTexts: alertCategory.setDescription('This variable describes the category to which the alert belongs to, in a string form.This corresponds to the Category entry in the Alert Table in the database')
alertUserProperties = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 3, 7, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertUserProperties.setStatus('deprecated')
if mibBuilder.loadTexts: alertUserProperties.setDescription('This variable describes the values ot the user properties which the user specifies in the alertUserPropNames variable in the WebNMSFaultMib module. The values will be displayed in the following format: userPropName1=value1,userPropName2=value2,...')
alertNotificationMib = MibIdentifier((1, 3, 6, 1, 4, 1, 2162, 4, 3, 8))
eventTable = MibTable((1, 3, 6, 1, 4, 1, 2162, 4, 3, 9), )
if mibBuilder.loadTexts: eventTable.setStatus('current')
if mibBuilder.loadTexts: eventTable.setDescription('This table describes the events in the event database')
eventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2162, 4, 3, 9, 1), ).setIndexNames((0, "BW-BroadworksEMS-MIB", "evtID"))
if mibBuilder.loadTexts: eventEntry.setStatus('current')
if mibBuilder.loadTexts: eventEntry.setDescription('An entry of the event Table')
evtID = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 3, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: evtID.setStatus('current')
if mibBuilder.loadTexts: evtID.setDescription('This variable is the unique id (primary key) of this event object.This corresponds to the Id entry in the Event Table in the database')
evtSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 3, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: evtSource.setStatus('current')
if mibBuilder.loadTexts: evtSource.setDescription('This variable is the source of the event.This corresponds to the Source entry in the Event Table in the database')
evtEntity = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 3, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: evtEntity.setStatus('current')
if mibBuilder.loadTexts: evtEntity.setDescription('This variable is the Entity (also known as Failure Object) of the Event.This corresponds to the Entity entry in the Event Table in the database')
evtSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 3, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: evtSeverity.setStatus('current')
if mibBuilder.loadTexts: evtSeverity.setDescription('This variable is the Severity of the Event object.This corresponds to the Severity entry in the Event Table in the database')
evtCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 3, 9, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: evtCategory.setStatus('current')
if mibBuilder.loadTexts: evtCategory.setDescription('This variable gives the category of the event, like Topology events or Threshold event etc. This corresponds to the Category entry in the Event Table in the database')
evtTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 3, 9, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: evtTime.setStatus('current')
if mibBuilder.loadTexts: evtTime.setDescription('This variable is the time of occurrence (creation), in milliseconds, of this Event object. This corresponds to the Ttime entry in the Event Table in the database')
evtText = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 3, 9, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: evtText.setStatus('current')
if mibBuilder.loadTexts: evtText.setDescription('This variable gives the descriptive text message of the event.This corresponds to the Text entry in the Event Table in the database')
eventUserProperties = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 3, 9, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventUserProperties.setStatus('current')
if mibBuilder.loadTexts: eventUserProperties.setDescription('This variable describes the values ot the user properties which the user specifies in the eventUserPropNames variable The values will be displayed in the following format: userPropName1=value1,userPropName2=value2,...')
webNMSSeverityTable = MibTable((1, 3, 6, 1, 4, 1, 2162, 4, 3, 10), )
if mibBuilder.loadTexts: webNMSSeverityTable.setStatus('current')
if mibBuilder.loadTexts: webNMSSeverityTable.setDescription('This table shows the number of alarms of a particular severity.')
webNMSSeverityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2162, 4, 3, 10, 1), ).setIndexNames((0, "BW-BroadworksEMS-MIB", "severityName"))
if mibBuilder.loadTexts: webNMSSeverityEntry.setStatus('current')
if mibBuilder.loadTexts: webNMSSeverityEntry.setDescription('An entry of the table')
severityName = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 3, 10, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: severityName.setStatus('current')
if mibBuilder.loadTexts: severityName.setDescription('This variable displays the name of severity like critical,major,minor etc.')
numberOfAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberOfAlarms.setStatus('current')
if mibBuilder.loadTexts: numberOfAlarms.setDescription('This variable displays the number of alarms of a particular severity.')
alarmTable = MibTable((1, 3, 6, 1, 4, 1, 2162, 4, 3, 11), )
if mibBuilder.loadTexts: alarmTable.setStatus('current')
if mibBuilder.loadTexts: alarmTable.setDescription('This table describes various attributes of the NMS alarms. This is the replacement table for alertTable.This table has the following features other than those found in alertTable: 1. AlarmSource added as the first index along with AlarmOwnerName and AlarmEntity. 2. AlarmAssignedTo - a new column to describe the owner to whom the alarm assigned.')
alarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2162, 4, 3, 11, 1), ).setIndexNames((0, "BW-BroadworksEMS-MIB", "alarmSource"), (0, "BW-BroadworksEMS-MIB", "alarmOwnerName"), (0, "BW-BroadworksEMS-MIB", "alarmEntity"))
if mibBuilder.loadTexts: alarmEntry.setStatus('current')
if mibBuilder.loadTexts: alarmEntry.setDescription('An entry of the alarmTable')
alarmSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 3, 11, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmSource.setStatus('current')
if mibBuilder.loadTexts: alarmSource.setDescription('This variable indicates the source of the alarm i.e.,from where the alarm generated. This corresponds to the Source entry in the Alert Table in the database')
alarmOwnerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 3, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmOwnerName.setStatus('current')
if mibBuilder.loadTexts: alarmOwnerName.setDescription('This variable states the OwnerName for the alarm.This corresponds to the OwnerName entry in the Alert Table in the database')
alarmEntity = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 3, 11, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmEntity.setStatus('current')
if mibBuilder.loadTexts: alarmEntity.setDescription('This variable states the unique name of each alarm which is used to identifies any alarm. This corresponds to the Entity field in the Alert Table in the database')
alarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 3, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmSeverity.setStatus('current')
if mibBuilder.loadTexts: alarmSeverity.setDescription('This variable describes the severity of the alarm in integer format. This corresponds to the Severity entry in the Alert Table in the database')
alarmPreviousSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 3, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmPreviousSeverity.setStatus('current')
if mibBuilder.loadTexts: alarmPreviousSeverity.setDescription('This variable states the previous severity of the alarm. This corresponds to the PreviousSeverity entry in the Alert Table in the database')
alarmCreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 3, 11, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCreateTime.setStatus('current')
if mibBuilder.loadTexts: alarmCreateTime.setDescription('This variable states the time at which the alarm has been created. This corresponds to the CreateTime entry in the Alert Table in the database')
alarmModTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 3, 11, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmModTime.setStatus('current')
if mibBuilder.loadTexts: alarmModTime.setDescription('This variable states the latest time at which the alarm status was modified. This corresponds to the ModTime entry in the Alert Table in the database')
alarmCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 3, 11, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmCategory.setStatus('current')
if mibBuilder.loadTexts: alarmCategory.setDescription('This variable describes the category to which the alarm belongs to, in a string form. This corresponds to the Category entry in the Alert Table in the database')
alarmAssignedTo = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 3, 11, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmAssignedTo.setStatus('current')
if mibBuilder.loadTexts: alarmAssignedTo.setDescription('This variable describes the owner to whom the alarm has assigned. This corresponds to the Who entry in the Alert Table in the database')
alarmUserProperties = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 3, 11, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmUserProperties.setStatus('current')
if mibBuilder.loadTexts: alarmUserProperties.setDescription('This variable describes the values of the user properties which the user specifies in the alertUserPropNames variable in the WebNMSFaultMib module. The values will be displayed in the following format: userPropName1=value1,userPropName2=value2,...')
numPollObjects = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numPollObjects.setStatus('current')
if mibBuilder.loadTexts: numPollObjects.setDescription('This variable displays the total number of PolledData objects currently present in the Polling engine.')
numActivePollers = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: numActivePollers.setStatus('current')
if mibBuilder.loadTexts: numActivePollers.setDescription('This variable displays the total number of active pollers at that time.')
numThresholdObjects = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numThresholdObjects.setStatus('current')
if mibBuilder.loadTexts: numThresholdObjects.setDescription('This variable displays the total number of threshold objects available')
pollTable = MibTable((1, 3, 6, 1, 4, 1, 2162, 4, 4, 4), )
if mibBuilder.loadTexts: pollTable.setStatus('current')
if mibBuilder.loadTexts: pollTable.setDescription('The table describes the polleddatas in the database')
pollEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2162, 4, 4, 4, 1), ).setIndexNames((0, "BW-BroadworksEMS-MIB", "pollid"))
if mibBuilder.loadTexts: pollEntry.setStatus('current')
if mibBuilder.loadTexts: pollEntry.setDescription('It describes the various entries of the performance table')
pollid = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 4, 4, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pollid.setStatus('current')
if mibBuilder.loadTexts: pollid.setDescription('This variable represents the id of the PolledData. It is assigned by the poll engine when the PolledData is created and it is a unique value for every PolledData.This corresponds to the Id entry in the PolledDataTable in the database')
polldataName = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 4, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polldataName.setStatus('current')
if mibBuilder.loadTexts: polldataName.setDescription('This variable represents the name of the PolledData, which is a user assigned name for identification purposes.This corresponds to the Name entry in the PolledData Table in the database')
oid = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 4, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oid.setStatus('current')
if mibBuilder.loadTexts: oid.setDescription('This variable represents the OID that is being polled for on the agent.This corresponds to the oid entry in the PolledData Table in the database')
pollingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 4, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pollingInterval.setStatus('current')
if mibBuilder.loadTexts: pollingInterval.setDescription('This variable represents the polling interval of this PolledData.This corresponds to the Period entry in the PolledData Table in the database')
failureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: failureCount.setStatus('current')
if mibBuilder.loadTexts: failureCount.setDescription('This variable represents the failureCount for this PolledData.This corresponds to the FailureCount entry in the PolledData Table in the database')
failureThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: failureThreshold.setStatus('current')
if mibBuilder.loadTexts: failureThreshold.setDescription('This variable represents the failureThreshold for this PolledData.This corresponds to the FailureThreshold entry in the PolledData Table in the database')
timeToPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 4, 4, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeToPoll.setStatus('current')
if mibBuilder.loadTexts: timeToPoll.setDescription('This variable states the time at which polling has to be done again.This corresponds to the TimeVal entry in the PolledData Table in the database')
polledTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 4, 4, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: polledTime.setStatus('current')
if mibBuilder.loadTexts: polledTime.setDescription('This variable states the time at which the polling was done.This corresponds to the LastTimeValue entry in the PolledData Table in the database')
agentName = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 4, 4, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentName.setStatus('current')
if mibBuilder.loadTexts: agentName.setDescription('This variable represents the Agent Name')
thresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2162, 4, 4, 5), )
if mibBuilder.loadTexts: thresholdTable.setStatus('current')
if mibBuilder.loadTexts: thresholdTable.setDescription('A table showing all data related to threshold objects')
thresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2162, 4, 4, 5, 1), ).setIndexNames((0, "BW-BroadworksEMS-MIB", "thresholdObjectName"))
if mibBuilder.loadTexts: thresholdEntry.setStatus('current')
if mibBuilder.loadTexts: thresholdEntry.setDescription('All the entries of the threshold table')
thresholdObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 4, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdObjectName.setStatus('current')
if mibBuilder.loadTexts: thresholdObjectName.setDescription('This variable states the name of the threshold object.')
thresholdKind = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 4, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdKind.setStatus('current')
if mibBuilder.loadTexts: thresholdKind.setDescription('This variable states whether the threshold is of type long,string or percentage.')
thresholdMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 4, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdMessage.setStatus('current')
if mibBuilder.loadTexts: thresholdMessage.setDescription('This variable displays the message generated when the threshold occurs.')
thresholdClearMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 4, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdClearMessage.setStatus('current')
if mibBuilder.loadTexts: thresholdClearMessage.setDescription('This variable displays the message to be generated on clearing of the threshold .')
thresholdSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdSeverity.setStatus('current')
if mibBuilder.loadTexts: thresholdSeverity.setDescription('The severity of the event generated.')
thresholdCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 4, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: thresholdCategory.setStatus('current')
if mibBuilder.loadTexts: thresholdCategory.setDescription('This variable displays the category of this ThresholdObject. Category of the ThresholdObject represents the category in which the events will be generated in case of thresholds.')
statsdata = MibIdentifier((1, 3, 6, 1, 4, 1, 2162, 4, 4, 6))
perfNotificationMib = MibIdentifier((1, 3, 6, 1, 4, 1, 2162, 4, 4, 7))
maxRows = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxRows.setStatus('current')
if mibBuilder.loadTexts: maxRows.setDescription('This variable states the maximum number of rows that can be stored in the notilog table of the database.Once it exceeds the limit, the oldest row will be deleted from the database and the new row will be added.We can retrieve only that many number of rows from the notilog table as specified.')
sequenceNum = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sequenceNum.setStatus('current')
if mibBuilder.loadTexts: sequenceNum.setDescription('This variable represents the index number of the last transmitted notification and is incremented by 1 whenever a notification is emitted from the agent. This would be included as a varbind for all notification.')
notiLogTable = MibTable((1, 3, 6, 1, 4, 1, 2162, 4, 5, 3), )
if mibBuilder.loadTexts: notiLogTable.setStatus('current')
if mibBuilder.loadTexts: notiLogTable.setDescription('This table contains the general information about the logged notifications.')
notiLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2162, 4, 5, 3, 1), ).setIndexNames((0, "BW-BroadworksEMS-MIB", "notiLogIndex"))
if mibBuilder.loadTexts: notiLogEntry.setStatus('current')
if mibBuilder.loadTexts: notiLogEntry.setDescription('An entry in the notiLog table.')
notiLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: notiLogIndex.setStatus('current')
if mibBuilder.loadTexts: notiLogIndex.setDescription("This variable's purpose is to index the entries / distinguish the rows within this table. The value of this variable is the same as that of the sequenceNum defined in the mib. This table backs up all the transmitted notifications and facilitates selective recovery of lost notifications via their sequence numbers.")
notiLogTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 5, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notiLogTime.setStatus('current')
if mibBuilder.loadTexts: notiLogTime.setDescription('This variable represents the value of sysUpTime when the entry occurred')
notiLogNumVarBinds = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: notiLogNumVarBinds.setStatus('current')
if mibBuilder.loadTexts: notiLogNumVarBinds.setDescription('This column indicates the number of variable bindings in the logged notification.')
notiLogOid = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 5, 3, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notiLogOid.setStatus('current')
if mibBuilder.loadTexts: notiLogOid.setDescription('This column indicates the OID of the Notification definition.')
varbindLogTable = MibTable((1, 3, 6, 1, 4, 1, 2162, 4, 5, 4), )
if mibBuilder.loadTexts: varbindLogTable.setStatus('current')
if mibBuilder.loadTexts: varbindLogTable.setDescription('This table contains the information of the varbinds sent during sending a notification. All the varbinds to the notifications are logged in this table except for the sequence number of the notification which serves as an index for this table.')
varbindLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2162, 4, 5, 4, 1), ).setIndexNames((0, "BW-BroadworksEMS-MIB", "notiLogIndex"), (0, "BW-BroadworksEMS-MIB", "varbindIndex"))
if mibBuilder.loadTexts: varbindLogEntry.setStatus('current')
if mibBuilder.loadTexts: varbindLogEntry.setDescription('An entry in the Notification Log variable table.')
varbindIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: varbindIndex.setStatus('current')
if mibBuilder.loadTexts: varbindIndex.setDescription("This variable's purpose is to provide the second level index to distinguish the entries / rows within this table. This value always starts at 1 and goes upto the maximum number of varbinds for a notification as indicated by in the notification log table.")
varbindType = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("displayString", 1), ("gauge32", 2), ("timeTicks", 3), ("integer32", 4), ("ipAddress", 5), ("objectId", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: varbindType.setStatus('current')
if mibBuilder.loadTexts: varbindType.setDescription('This specifies the type of the varbind that was sent as part of a Notification.')
varbindValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 5, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: varbindValue.setStatus('current')
if mibBuilder.loadTexts: varbindValue.setDescription('This variable provides the value of the corresponding varbind')
serverName = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serverName.setStatus('current')
if mibBuilder.loadTexts: serverName.setDescription('This variable describes the name of the TFTP-server to or from which a file has to be sent or obtained')
portNum = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portNum.setStatus('current')
if mibBuilder.loadTexts: portNum.setDescription('This variable states the port at which the file has to sent or obtained to or from the server respectively.')
sourceFile = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 6, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sourceFile.setStatus('current')
if mibBuilder.loadTexts: sourceFile.setDescription('This variable states the name of the file to be obtained from the server [GET(1)] or sent to the server [PUT(2)].')
destinationFile = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 6, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: destinationFile.setStatus('current')
if mibBuilder.loadTexts: destinationFile.setDescription('This variable states the name of the file to be sent to the device [GET(1)] or obtained from the device [PUT(2)].')
tftpMode = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("netascii", 1), ("octet", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpMode.setStatus('current')
if mibBuilder.loadTexts: tftpMode.setDescription('This variable states the mode of file-transfer')
request = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("get", 1), ("put", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: request.setStatus('current')
if mibBuilder.loadTexts: request.setDescription('This variable states the operation to be performed .The operations that can be performed are: sending the file to a tftp server or getting a file from a tftp server. This variable takes two values indicating the type of operation performed. The value that this variable takes are :- (1) getting a file from a tftp server (2) sending a file to a tftp server')
proxyTable = MibTable((1, 3, 6, 1, 4, 1, 2162, 4, 7, 1), )
if mibBuilder.loadTexts: proxyTable.setStatus('current')
if mibBuilder.loadTexts: proxyTable.setDescription('This table is used to obtain the current value of an oid from a device .The values that the user needs to set are : IpAddress, Port,Community, OID and service. When the last value is set,the value for the oid is obtained')
proxyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2162, 4, 7, 1, 1), ).setIndexNames((0, "BW-BroadworksEMS-MIB", "serialNumber"))
if mibBuilder.loadTexts: proxyEntry.setStatus('current')
if mibBuilder.loadTexts: proxyEntry.setDescription('An entry of the table')
serialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumber.setStatus('current')
if mibBuilder.loadTexts: serialNumber.setDescription('An incremental integer for the purpose of identifying the row')
hostName = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 7, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostName.setStatus('current')
if mibBuilder.loadTexts: hostName.setDescription('This states the DNS name or IpAddress of the device from which the value needs to be obtained')
devicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devicePort.setStatus('current')
if mibBuilder.loadTexts: devicePort.setDescription('The port of the device from which the value needs to be obtained')
requestOid = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 7, 1, 1, 4), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: requestOid.setStatus('current')
if mibBuilder.loadTexts: requestOid.setDescription('This states the oid in the device whose value is needs to be obtained.')
community = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 7, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: community.setStatus('current')
if mibBuilder.loadTexts: community.setDescription("The community which may be specified.It is an optional field.If the community value is not specified,the default community 'public' will be taken")
service = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("wait", 0), ("get", 1), ("getNext", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: service.setStatus('current')
if mibBuilder.loadTexts: service.setDescription('This variable takes two values ,1 and 2,which when set carry out SNMP operations: 1 for snmpGet 2 for snmpGetNext')
result = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 7, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: result.setStatus('current')
if mibBuilder.loadTexts: result.setDescription('This variable displays the result of the service :snmpGet/snmpGetNext of the specified oid in the specified device.If any of the specified data is not correct or if the host is not functioning properly then an exception Error in Data will be filled')
subAgentTable = MibTable((1, 3, 6, 1, 4, 1, 2162, 4, 8, 1), )
if mibBuilder.loadTexts: subAgentTable.setStatus('current')
if mibBuilder.loadTexts: subAgentTable.setDescription('The table having the details of sub-agents')
subAgentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2162, 4, 8, 1, 1), ).setIndexNames((0, "BW-BroadworksEMS-MIB", "subAgentoid"))
if mibBuilder.loadTexts: subAgentEntry.setStatus('current')
if mibBuilder.loadTexts: subAgentEntry.setDescription('An entry in the table')
subAgentoid = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 8, 1, 1, 1), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subAgentoid.setStatus('current')
if mibBuilder.loadTexts: subAgentoid.setDescription('This states the oid of the sub-agent whose value is to be obtained from the sub-agent')
subAgent = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 8, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: subAgent.setStatus('current')
if mibBuilder.loadTexts: subAgent.setDescription('This variable states the sub-agent name to whom the request is sent.')
subAgentPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 8, 1, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: subAgentPort.setStatus('current')
if mibBuilder.loadTexts: subAgentPort.setDescription("This states the sub- Agent's Port number at which the value has to be got.")
subAgentVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 8, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: subAgentVersion.setStatus('current')
if mibBuilder.loadTexts: subAgentVersion.setDescription('Description')
subAgentCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 8, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: subAgentCommunity.setStatus('current')
if mibBuilder.loadTexts: subAgentCommunity.setDescription('This specifies the sub- Agent community to which the request is sent.')
timeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 8, 1, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeout.setStatus('current')
if mibBuilder.loadTexts: timeout.setDescription('This specifies the time period one has to wait for,to get a response from the sub agent.')
subAgentRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 8, 1, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: subAgentRetries.setStatus('current')
if mibBuilder.loadTexts: subAgentRetries.setDescription('Description')
rowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 8, 1, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rowStatus.setStatus('current')
if mibBuilder.loadTexts: rowStatus.setDescription("This specifies the process by which the data have to be entered. This is the first value which needs to be set.. the value of 1 specifies 'active' the value of 2 specifies 'notInService' the value of 3 specifies 'notReady' the value of 4 specifies 'createAndGo'. the value of 5 specifies 'createAndWait' the value of 6 specifies 'destroy'")
v1v2TrapForwardingTable = MibTable((1, 3, 6, 1, 4, 1, 2162, 4, 9, 1), )
if mibBuilder.loadTexts: v1v2TrapForwardingTable.setStatus('current')
if mibBuilder.loadTexts: v1v2TrapForwardingTable.setDescription('This table maintains the SNMP v1 and v2c managers information like manager IP address, port number,community, time out, retires, etc which are used in trap generation. Timeout and retires are used in the case of SNMPv2c INFORM.')
v1v2TrapForwardingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2162, 4, 9, 1, 1), ).setIndexNames((0, "BW-BroadworksEMS-MIB", "v1v2ManagerHost"), (0, "BW-BroadworksEMS-MIB", "v1v2ManagerPort"))
if mibBuilder.loadTexts: v1v2TrapForwardingEntry.setStatus('current')
if mibBuilder.loadTexts: v1v2TrapForwardingEntry.setDescription('Each entry in this table refers one manager information who is registered to receive traps fromt the agent.')
v1v2ManagerHost = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 9, 1, 1, 1), IpAddress().clone(hexValue="7F000001"))
if mibBuilder.loadTexts: v1v2ManagerHost.setStatus('current')
if mibBuilder.loadTexts: v1v2ManagerHost.setDescription('IP address where the manager is listening to receive traps from the agent.')
v1v2ManagerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 9, 1, 1, 2), Integer32().clone(162))
if mibBuilder.loadTexts: v1v2ManagerPort.setStatus('current')
if mibBuilder.loadTexts: v1v2ManagerPort.setDescription('The port at which manager is listening for the traps from the agent.')
v1v2ManagerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 9, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v1v2ManagerVersion.setStatus('current')
if mibBuilder.loadTexts: v1v2ManagerVersion.setDescription('Description')
v1v2ManagerCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 9, 1, 1, 4), DisplayString().clone('public')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v1v2ManagerCommunity.setStatus('current')
if mibBuilder.loadTexts: v1v2ManagerCommunity.setDescription('The community used by the agent to send trap or inform to this manager.')
v1v2ManagerTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 9, 1, 1, 5), Unsigned32().clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v1v2ManagerTimeOut.setStatus('current')
if mibBuilder.loadTexts: v1v2ManagerTimeOut.setDescription('The time out value in seconds for SNMPv2c INFORM.')
v1v2ManagerRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 9, 1, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v1v2ManagerRetries.setStatus('current')
if mibBuilder.loadTexts: v1v2ManagerRetries.setDescription('The number of retries in the case of SNMPV2c INFORM.')
v1v2ManagerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 9, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v1v2ManagerStatus.setStatus('current')
if mibBuilder.loadTexts: v1v2ManagerStatus.setDescription("The status of this conceptual row.Until instances of all corresponding columns are appropriately configured, the value of the corresponding instance of the usmUserStatus column is 'notReady'")
v3TrapForwardingTable = MibTable((1, 3, 6, 1, 4, 1, 2162, 4, 9, 2), )
if mibBuilder.loadTexts: v3TrapForwardingTable.setStatus('current')
if mibBuilder.loadTexts: v3TrapForwardingTable.setDescription('This table maintains the SNMP v3 managers information like manager IP address, port number, user name,security model, context name, community, time out,retires, etc which are used in trap generation. Timeout and retires are used in the case of INFORM.')
v3TrapForwardingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2162, 4, 9, 2, 1), ).setIndexNames((0, "BW-BroadworksEMS-MIB", "v3ManagerHost"), (0, "BW-BroadworksEMS-MIB", "v3ManagerPort"))
if mibBuilder.loadTexts: v3TrapForwardingEntry.setStatus('current')
if mibBuilder.loadTexts: v3TrapForwardingEntry.setDescription('Each entry in this table refers one SNMPv3 manager who will listen for TRAP or INFORM.')
v3ManagerHost = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 9, 2, 1, 1), IpAddress().clone(hexValue="7F000001"))
if mibBuilder.loadTexts: v3ManagerHost.setStatus('current')
if mibBuilder.loadTexts: v3ManagerHost.setDescription('The IP address where the manager is listening for TRAPS or INFORMS.')
v3ManagerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(162))
if mibBuilder.loadTexts: v3ManagerPort.setStatus('current')
if mibBuilder.loadTexts: v3ManagerPort.setDescription('The UDP port at which manager is listening for TRAPS or INFORMS.')
v3ManagerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 9, 2, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v3ManagerVersion.setStatus('current')
if mibBuilder.loadTexts: v3ManagerVersion.setDescription('Description')
v3ManagerCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 9, 2, 1, 4), DisplayString().clone('public')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v3ManagerCommunity.setStatus('current')
if mibBuilder.loadTexts: v3ManagerCommunity.setDescription('The community string used by the agent when sending SNMP v1/v2c TRAPS or INFORMS to the manager.It used to support backward compatability,i.e. without any change in the table,user can send both SNMPv1 and v2c TARPS and INFORMS.')
v3ManagerUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 9, 2, 1, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v3ManagerUserName.setReference('RFC 2574 USM table .')
if mibBuilder.loadTexts: v3ManagerUserName.setStatus('current')
if mibBuilder.loadTexts: v3ManagerUserName.setDescription('This user name is same as in USM MIB RFC 2574.')
v3ManagerUserSecModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 9, 2, 1, 6), Unsigned32().clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v3ManagerUserSecModel.setReference('RFC 2574 USM table')
if mibBuilder.loadTexts: v3ManagerUserSecModel.setStatus('current')
if mibBuilder.loadTexts: v3ManagerUserSecModel.setDescription('This security model value is same as in USM table of USM MIB RFC2574.')
v3ManagerUserSecLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 9, 2, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v3ManagerUserSecLevel.setStatus('current')
if mibBuilder.loadTexts: v3ManagerUserSecLevel.setDescription('Description')
v3ManagerUserContextName = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 9, 2, 1, 8), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v3ManagerUserContextName.setReference('RFC 2575')
if mibBuilder.loadTexts: v3ManagerUserContextName.setStatus('current')
if mibBuilder.loadTexts: v3ManagerUserContextName.setDescription('This context name is same as in VacmAccessTable of VACM MIB RFC2575.')
v3ManagerTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 9, 2, 1, 9), Unsigned32().clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v3ManagerTimeOut.setStatus('current')
if mibBuilder.loadTexts: v3ManagerTimeOut.setDescription('The time out value in seconds for INFORM request.')
v3ManagerRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 9, 2, 1, 10), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v3ManagerRetries.setStatus('current')
if mibBuilder.loadTexts: v3ManagerRetries.setDescription('The number of retries for a failed INFORM reqeust.')
v3ManagerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 9, 2, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: v3ManagerStatus.setStatus('current')
if mibBuilder.loadTexts: v3ManagerStatus.setDescription("The status of this conceptual row.Until instances of all corresponding columns are appropriately configured, the value of the corresponding instance of the usmUserStatus column is 'notReady'")
topologyConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1))
faultConfIguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2162, 4, 10, 2))
performanceConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2162, 4, 10, 3))
logConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2162, 4, 10, 4))
v1v2AuthenticationTables = MibIdentifier((1, 3, 6, 1, 4, 1, 2162, 4, 11, 1))
httpPort = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 1, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: httpPort.setStatus('current')
if mibBuilder.loadTexts: httpPort.setDescription('This describes the http port.This port can be used to open an html client connection to the WebNMS Server')
nmsSocketPort = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 1, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsSocketPort.setStatus('current')
if mibBuilder.loadTexts: nmsSocketPort.setDescription('This describes the NMS-Socket port')
rmiRegistryPort = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 1, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmiRegistryPort.setStatus('current')
if mibBuilder.loadTexts: rmiRegistryPort.setDescription('This describes the RMI-Registry port.This port can be used to open a RMI client connection to the WebNMS Server')
trapPortTable = MibTable((1, 3, 6, 1, 4, 1, 2162, 4, 1, 9, 4), )
if mibBuilder.loadTexts: trapPortTable.setStatus('current')
if mibBuilder.loadTexts: trapPortTable.setDescription('This table describes the ports at which the traps are being received by the WebNMS')
trapPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2162, 4, 1, 9, 4, 1), ).setIndexNames((0, "BW-BroadworksEMS-MIB", "seqNum"))
if mibBuilder.loadTexts: trapPortEntry.setStatus('current')
if mibBuilder.loadTexts: trapPortEntry.setDescription('It describes an entry in the trap-port table')
seqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 1, 9, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: seqNum.setStatus('current')
if mibBuilder.loadTexts: seqNum.setDescription('An incremental integer number')
port = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 1, 9, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: port.setStatus('current')
if mibBuilder.loadTexts: port.setDescription('This describes the port number')
moExtraPropNames = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 2, 14, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: moExtraPropNames.setStatus('current')
if mibBuilder.loadTexts: moExtraPropNames.setDescription('The extra properties which the user wants to be sent with the pre-defined notificaiton varbinds. It should be in the following format. SYNTAX: propName1,propName2,... The values for the properties will be in the following format: propName1=value1,propName2=value2...')
moNotiPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2162, 4, 2, 14, 2))
moNotiVarbinds = MibIdentifier((1, 3, 6, 1, 4, 1, 2162, 4, 2, 14, 3))
alertExtraPropNames = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 3, 8, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alertExtraPropNames.setStatus('current')
if mibBuilder.loadTexts: alertExtraPropNames.setDescription('The extra properties which the user wants to be sent with the pre-defined notificaiton varbinds. It should be in the following format. SYNTAX: propName1,propName2,... The values for the properties will be in the following format: propName1=value1,propName2=value2..')
alertNotiPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2162, 4, 3, 8, 2))
alertNotiVarbinds = MibIdentifier((1, 3, 6, 1, 4, 1, 2162, 4, 3, 8, 3))
perfNotiConfigPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2162, 4, 4, 7, 1))
perfNotiVarbinds = MibIdentifier((1, 3, 6, 1, 4, 1, 2162, 4, 4, 7, 2))
statsdataTableName = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 4, 6, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: statsdataTableName.setStatus('current')
if mibBuilder.loadTexts: statsdataTableName.setDescription('This variable states the name of the table of the statsdata table, the details of which,the user wants to view.The user needs to enter values in the form of statsdata% or statsdataMM-DD-YY.If the user gives statsdata%,then the current day is taken.')
statsDataTable = MibTable((1, 3, 6, 1, 4, 1, 2162, 4, 4, 6, 2), )
if mibBuilder.loadTexts: statsDataTable.setStatus('current')
if mibBuilder.loadTexts: statsDataTable.setDescription('This table exposes the statsdata table of the database for the day')
statsDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2162, 4, 4, 6, 2, 1), ).setIndexNames((0, "BW-BroadworksEMS-MIB", "pollID"), (0, "BW-BroadworksEMS-MIB", "oidindex"), (0, "BW-BroadworksEMS-MIB", "time"))
if mibBuilder.loadTexts: statsDataEntry.setStatus('current')
if mibBuilder.loadTexts: statsDataEntry.setDescription('Each entry contains the data like time,oidindex and value for a particular pollid')
pollID = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 4, 6, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pollID.setStatus('current')
if mibBuilder.loadTexts: pollID.setDescription('This variable states the id value of the polldata')
time = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 4, 6, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: time.setStatus('current')
if mibBuilder.loadTexts: time.setDescription('This variable states the time at which the data was collected')
oidindex = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 4, 6, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oidindex.setStatus('current')
if mibBuilder.loadTexts: oidindex.setDescription('This variable states the instance of the collected data')
value = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 4, 6, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: value.setStatus('current')
if mibBuilder.loadTexts: value.setDescription('This variable states the value of the collected data')
autoDiscover = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoDiscover.setStatus('current')
if mibBuilder.loadTexts: autoDiscover.setDescription('This variable takes integer values like 1 for true and 2 for false.This variable states whether the auto discovery process should start or not')
discoverLocalNet = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: discoverLocalNet.setStatus('current')
if mibBuilder.loadTexts: discoverLocalNet.setDescription('This variable states whether the local network should be discovered or not')
discoverInterval = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: discoverInterval.setStatus('current')
if mibBuilder.loadTexts: discoverInterval.setDescription('The time interval in which the discovery process should occur')
enablelog = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enablelog.setStatus('current')
if mibBuilder.loadTexts: enablelog.setDescription('This variable states whether the logging should be enabled or not')
rediscoveryConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 5))
snmpPingConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 6))
icmpPingConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 7))
nativePingConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 8))
networkDiscoveryTable = MibTable((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 9), )
if mibBuilder.loadTexts: networkDiscoveryTable.setStatus('current')
if mibBuilder.loadTexts: networkDiscoveryTable.setDescription('This table stores the criteria for the discovery of networks in the NMS')
networkDiscoveryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 9, 1), ).setIndexNames((0, "BW-BroadworksEMS-MIB", "networkDiscoveryIndex"))
if mibBuilder.loadTexts: networkDiscoveryEntry.setStatus('current')
if mibBuilder.loadTexts: networkDiscoveryEntry.setDescription('Each entry states the discovery criteria for a network')
networkDiscoveryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkDiscoveryIndex.setStatus('current')
if mibBuilder.loadTexts: networkDiscoveryIndex.setDescription('This variable states the index of the network discovery table')
netIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 9, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netIPAddress.setStatus('current')
if mibBuilder.loadTexts: netIPAddress.setDescription('This variable states the ipaddress of the network which has to be discovered')
netMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 9, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netMask.setStatus('current')
if mibBuilder.loadTexts: netMask.setDescription('This provides for the net-mask of the network to be discovered')
startIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 9, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: startIPAddress.setStatus('current')
if mibBuilder.loadTexts: startIPAddress.setDescription('This variable states the ipaddress from which the discovery process should start for the network')
endIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 9, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endIPAddress.setStatus('current')
if mibBuilder.loadTexts: endIPAddress.setDescription('This variable states the ipaddress till which the discovery process should proceed for the network')
doDiscovery = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 9, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: doDiscovery.setStatus('current')
if mibBuilder.loadTexts: doDiscovery.setDescription('This variable states whether a particular network should be discovered or not')
dhcp = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 9, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcp.setStatus('current')
if mibBuilder.loadTexts: dhcp.setDescription('This variable states whether the network supports DHCP or not')
nodeDiscoveryTable = MibTable((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 10), )
if mibBuilder.loadTexts: nodeDiscoveryTable.setStatus('current')
if mibBuilder.loadTexts: nodeDiscoveryTable.setDescription('This table contains the node discovery criteria')
nodeDiscoveryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 10, 1), ).setIndexNames((0, "BW-BroadworksEMS-MIB", "nodeIP"))
if mibBuilder.loadTexts: nodeDiscoveryEntry.setStatus('current')
if mibBuilder.loadTexts: nodeDiscoveryEntry.setDescription('`This contains the entry of NodeDiscTable which has the criteria for discovery of a node')
nodeIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 10, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeIP.setStatus('current')
if mibBuilder.loadTexts: nodeIP.setDescription('This variable states the ipaddress of the node to be discovered')
nodeNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 10, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeNetMask.setStatus('current')
if mibBuilder.loadTexts: nodeNetMask.setDescription('This variable states the net mask for the discovery of the node')
nodeDiscoverEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 10, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeDiscoverEnable.setStatus('current')
if mibBuilder.loadTexts: nodeDiscoverEnable.setDescription('This variable states whether a particular node should be discovered or not')
snmpAgentPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 10, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentPort.setStatus('current')
if mibBuilder.loadTexts: snmpAgentPort.setDescription('This variable states the port at which the snmp agent is listening')
nodeCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 10, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodeCommunity.setStatus('current')
if mibBuilder.loadTexts: nodeCommunity.setDescription('This variable states the community of the node to be discovered')
snmpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("snmpV1", 1), ("snmpV2c", 2), ("snmpV3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpVersion.setStatus('current')
if mibBuilder.loadTexts: snmpVersion.setDescription('This variable states the version of snmp')
v3UserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 10, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: v3UserName.setStatus('current')
if mibBuilder.loadTexts: v3UserName.setDescription('This variable states the v3userName. If the snmp version is v3 then the user name has to be given to access the node')
v3ContextName = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 10, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: v3ContextName.setStatus('current')
if mibBuilder.loadTexts: v3ContextName.setDescription('This variable states the v3contextName. If the snmp version is v3 then the context name has to be given to access the node')
moCriteriaTable = MibTable((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 11), )
if mibBuilder.loadTexts: moCriteriaTable.setStatus('current')
if mibBuilder.loadTexts: moCriteriaTable.setDescription('This table contains the various criteria for discovery in order to further refine the search')
moCriteriaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 11, 1), ).setIndexNames((0, "BW-BroadworksEMS-MIB", "criteriaIndex"))
if mibBuilder.loadTexts: moCriteriaEntry.setStatus('current')
if mibBuilder.loadTexts: moCriteriaEntry.setDescription('Each entry of this table contains some criteria for making the discovery process further refined')
criteriaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: criteriaIndex.setStatus('current')
if mibBuilder.loadTexts: criteriaIndex.setDescription('This variable uniquely identifies each entry of the table')
propertyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("name", 1), ("type", 2), ("ipAddress", 3), ("sysOID", 4), ("isSNMP", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: propertyName.setReference('name ( 1 )')
if mibBuilder.loadTexts: propertyName.setStatus('current')
if mibBuilder.loadTexts: propertyName.setDescription('This variable states the property name on which basis the discovery should be done')
propertyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 11, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: propertyValue.setStatus('current')
if mibBuilder.loadTexts: propertyValue.setDescription('This variable states the value for a property,on which basis discovery should be done')
allow = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 11, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: allow.setStatus('current')
if mibBuilder.loadTexts: allow.setDescription('This variable states whether the criteria for discovery should be considered or not')
discoveryFilterTable = MibTable((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 12), )
if mibBuilder.loadTexts: discoveryFilterTable.setStatus('current')
if mibBuilder.loadTexts: discoveryFilterTable.setDescription('This table has the discovery filter class names')
discoveryFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 12, 1), ).setIndexNames((0, "BW-BroadworksEMS-MIB", "discFilterIndex"))
if mibBuilder.loadTexts: discoveryFilterEntry.setStatus('current')
if mibBuilder.loadTexts: discoveryFilterEntry.setDescription('Each entry of this table has the discovery filter class name')
discFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: discFilterIndex.setStatus('current')
if mibBuilder.loadTexts: discFilterIndex.setDescription('An incremental integer for uniquely identifying each element of the table')
discFilterClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 12, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: discFilterClassName.setStatus('current')
if mibBuilder.loadTexts: discFilterClassName.setDescription('This variable states the class Name of the discovery filter file')
trapFilterTable = MibTable((1, 3, 6, 1, 4, 1, 2162, 4, 10, 2, 1), )
if mibBuilder.loadTexts: trapFilterTable.setStatus('current')
if mibBuilder.loadTexts: trapFilterTable.setDescription('This table states the class names of the various trap filters')
trapFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2162, 4, 10, 2, 1, 1), ).setIndexNames((0, "BW-BroadworksEMS-MIB", "trapFilterIndex"))
if mibBuilder.loadTexts: trapFilterEntry.setStatus('current')
if mibBuilder.loadTexts: trapFilterEntry.setDescription('Each entry of the table contains the name of the class of a trap filter')
trapFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 10, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapFilterIndex.setStatus('current')
if mibBuilder.loadTexts: trapFilterIndex.setDescription('The user defined name for the trap filter')
alertFilterClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 10, 2, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alertFilterClassName.setStatus('current')
if mibBuilder.loadTexts: alertFilterClassName.setDescription('The class name of the trap filter')
trapFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 10, 2, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapFilterName.setStatus('current')
if mibBuilder.loadTexts: trapFilterName.setDescription('This variable states the name of the trap filter')
trapFilterEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 10, 2, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapFilterEnable.setStatus('current')
if mibBuilder.loadTexts: trapFilterEnable.setDescription('This variable states if the trap filter should be enabled or not')
genericType = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 10, 2, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: genericType.setStatus('current')
if mibBuilder.loadTexts: genericType.setDescription('A property of snmp')
specificType = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 10, 2, 1, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: specificType.setStatus('current')
if mibBuilder.loadTexts: specificType.setDescription('A property of snmp')
enterpriseOID = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 10, 2, 1, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enterpriseOID.setStatus('current')
if mibBuilder.loadTexts: enterpriseOID.setDescription('When the snmp version is v3,this variable needs to be stated')
trapOID = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 10, 2, 1, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapOID.setStatus('current')
if mibBuilder.loadTexts: trapOID.setDescription('This variable states the oid of the trap to be sent')
setFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 10, 2, 1, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setFilter.setStatus('current')
if mibBuilder.loadTexts: setFilter.setDescription('0: Do nothing 1: To set trap filter')
pollingFiltersTable = MibTable((1, 3, 6, 1, 4, 1, 2162, 4, 10, 3, 1), )
if mibBuilder.loadTexts: pollingFiltersTable.setStatus('current')
if mibBuilder.loadTexts: pollingFiltersTable.setDescription('This table contains various poll-filters')
pollingFiltersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2162, 4, 10, 3, 1, 1), ).setIndexNames((0, "BW-BroadworksEMS-MIB", "pollingFilterIndex"))
if mibBuilder.loadTexts: pollingFiltersEntry.setStatus('current')
if mibBuilder.loadTexts: pollingFiltersEntry.setDescription('Each entry of the table contains a poll-filter')
pollingFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 10, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pollingFilterIndex.setStatus('current')
if mibBuilder.loadTexts: pollingFilterIndex.setDescription('An incremental integer to uniquely identify each entry of the table')
pollingFilterClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 10, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pollingFilterClassName.setStatus('current')
if mibBuilder.loadTexts: pollingFilterClassName.setDescription('This variable states the class names of the polling filters used')
stdout = MibIdentifier((1, 3, 6, 1, 4, 1, 2162, 4, 10, 4, 1))
stderr = MibIdentifier((1, 3, 6, 1, 4, 1, 2162, 4, 10, 4, 2))
logTable = MibTable((1, 3, 6, 1, 4, 1, 2162, 4, 10, 4, 3), )
if mibBuilder.loadTexts: logTable.setStatus('current')
if mibBuilder.loadTexts: logTable.setDescription('This table contains data regarding the logging of values')
logEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2162, 4, 10, 4, 3, 1), ).setIndexNames((0, "BW-BroadworksEMS-MIB", "logIndex"))
if mibBuilder.loadTexts: logEntry.setStatus('current')
if mibBuilder.loadTexts: logEntry.setDescription('Each entry of this table states the log name and the data regarding its storage')
logIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 10, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logIndex.setStatus('current')
if mibBuilder.loadTexts: logIndex.setDescription('This is an incremental integer which uniquely identifies each entry of the table')
logFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 10, 4, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logFileName.setStatus('current')
if mibBuilder.loadTexts: logFileName.setDescription('This variable states the file name of the log file')
logDirName = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 10, 4, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logDirName.setStatus('current')
if mibBuilder.loadTexts: logDirName.setDescription('This variable states the directory name of the log file')
maxLines = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 10, 4, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxLines.setStatus('current')
if mibBuilder.loadTexts: maxLines.setDescription('This variable states the number of lines that can be stored in a single file')
maxFiles = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 10, 4, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxFiles.setStatus('current')
if mibBuilder.loadTexts: maxFiles.setDescription('This variable states the number of files of the same type can be formed')
linesCached = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 10, 4, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linesCached.setStatus('current')
if mibBuilder.loadTexts: linesCached.setDescription('This variable states the number of lines that can be cached')
timeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 10, 4, 3, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeStamp.setStatus('current')
if mibBuilder.loadTexts: timeStamp.setDescription('This variable states whether time-stamping need be done or not')
logUserTable = MibTable((1, 3, 6, 1, 4, 1, 2162, 4, 10, 4, 4), )
if mibBuilder.loadTexts: logUserTable.setStatus('current')
if mibBuilder.loadTexts: logUserTable.setDescription('This table states the name of the log users')
logUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2162, 4, 10, 4, 4, 1), ).setIndexNames((0, "BW-BroadworksEMS-MIB", "logIndex"), (0, "BW-BroadworksEMS-MIB", "logUserIndex"))
if mibBuilder.loadTexts: logUserEntry.setStatus('current')
if mibBuilder.loadTexts: logUserEntry.setDescription('Each entry of the table states the user name and the display name of the file')
logUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 10, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: logUserIndex.setStatus('current')
if mibBuilder.loadTexts: logUserIndex.setDescription('An incremental integer which uniquely identifies each entry of the table')
logUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 10, 4, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logUserName.setStatus('current')
if mibBuilder.loadTexts: logUserName.setDescription('This variable states the name of the log user')
displayName = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 10, 4, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: displayName.setStatus('current')
if mibBuilder.loadTexts: displayName.setDescription('This variable states the name which is displayed for each log user')
logLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 10, 4, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logLevel.setStatus('current')
if mibBuilder.loadTexts: logLevel.setDescription('This variable states the level at which the logging needs to be done')
enableLog = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 10, 4, 4, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableLog.setStatus('current')
if mibBuilder.loadTexts: enableLog.setDescription('This variable states whether logging should be enabled or not')
moName = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 2, 14, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moName.setStatus('current')
if mibBuilder.loadTexts: moName.setDescription('This variable indicates the name of the MO.')
moownerName = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 2, 14, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moownerName.setStatus('current')
if mibBuilder.loadTexts: moownerName.setDescription('This variable represents the Ownername of the Network Element. This name also uniquely represents the MO in the network domain across all MO types.')
moNodeType = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 2, 14, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moNodeType.setStatus('current')
if mibBuilder.loadTexts: moNodeType.setDescription('This variable describes the type of the MO ie whether it is node, motwork,interface,etc.')
moEnrolTime = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 2, 14, 3, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moEnrolTime.setStatus('current')
if mibBuilder.loadTexts: moEnrolTime.setDescription('This variable represents the time at which the MO was formally enrolled in the management domain')
moDeEnrolTime = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 2, 14, 3, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moDeEnrolTime.setStatus('current')
if mibBuilder.loadTexts: moDeEnrolTime.setDescription('This variable represents the time at which the MO was formally deenrolled in the management domain')
moDataChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 2, 14, 3, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moDataChangeTime.setStatus('current')
if mibBuilder.loadTexts: moDataChangeTime.setDescription("This variable indicates when a particular value's time of change is formally acknowleged by the NMS.")
moExtraProperties = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 2, 14, 3, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moExtraProperties.setStatus('current')
if mibBuilder.loadTexts: moExtraProperties.setDescription('The values for the user properties which the user specifies in the moExtraPropNames variable are sent as part of the notifications The values will be displayed in the folloing formate propName1=value1,porpName2=vaule2,....')
moEnrolNotification = NotificationType((1, 3, 6, 1, 4, 1, 2162, 4, 2, 14, 2, 1)).setObjects(("BW-BroadworksEMS-MIB", "sequenceNum"), ("BW-BroadworksEMS-MIB", "moName"), ("BW-BroadworksEMS-MIB", "moownerName"), ("BW-BroadworksEMS-MIB", "moType"), ("BW-BroadworksEMS-MIB", "moEnrolTime"), ("BW-BroadworksEMS-MIB", "moExtraProperties"))
if mibBuilder.loadTexts: moEnrolNotification.setStatus('current')
if mibBuilder.loadTexts: moEnrolNotification.setDescription('The NMS-Agent sends a moEnrolNotification to the manager when an MO has been enrolled/added into management domain.')
moDeenrolNotification = NotificationType((1, 3, 6, 1, 4, 1, 2162, 4, 2, 14, 2, 2)).setObjects(("BW-BroadworksEMS-MIB", "sequenceNum"), ("BW-BroadworksEMS-MIB", "moName"), ("BW-BroadworksEMS-MIB", "moownerName"), ("BW-BroadworksEMS-MIB", "moType"), ("BW-BroadworksEMS-MIB", "moDeEnrolTime"), ("BW-BroadworksEMS-MIB", "moExtraProperties"))
if mibBuilder.loadTexts: moDeenrolNotification.setStatus('current')
if mibBuilder.loadTexts: moDeenrolNotification.setDescription('The NMSAgent sends a moDeenrolNotification to the manager when an MO has been deenrolled/deleted from the management domain')
moAttrChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 2162, 4, 2, 14, 2, 3)).setObjects(("BW-BroadworksEMS-MIB", "sequenceNum"), ("BW-BroadworksEMS-MIB", "moName"), ("BW-BroadworksEMS-MIB", "moownerName"), ("BW-BroadworksEMS-MIB", "moType"), ("BW-BroadworksEMS-MIB", "moDataChangeTime"), ("BW-BroadworksEMS-MIB", "moExtraProperties"))
if mibBuilder.loadTexts: moAttrChangeNotification.setStatus('current')
if mibBuilder.loadTexts: moAttrChangeNotification.setDescription("The NMSAgent sends a moAttrChangeNotification to the manager when any discoverd MO's one or more attributes are changed.")
alertentity = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 3, 8, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertentity.setStatus('current')
if mibBuilder.loadTexts: alertentity.setDescription('This variable states the unique source of the alert which uniquely identifies any alert in the table')
alertownerName = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 3, 8, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertownerName.setStatus('current')
if mibBuilder.loadTexts: alertownerName.setDescription('This variable states the name of the owner of the alert')
alertDescription = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 3, 8, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertDescription.setStatus('current')
if mibBuilder.loadTexts: alertDescription.setDescription('This variable describes the alert')
alertTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 3, 8, 3, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertTimeStamp.setStatus('current')
if mibBuilder.loadTexts: alertTimeStamp.setDescription('This variable indicates the time at which the alert was last modified')
alertNotificationId = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 3, 8, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertNotificationId.setStatus('current')
if mibBuilder.loadTexts: alertNotificationId.setDescription('This variable indicates the id of the generated alert')
alertcategory = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 3, 8, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertcategory.setStatus('current')
if mibBuilder.loadTexts: alertcategory.setDescription('This variable provides a string representation of the category of the alert')
alertClearNotification = NotificationType((1, 3, 6, 1, 4, 1, 2162, 4, 3, 8, 2, 1)).setObjects(("BW-BroadworksEMS-MIB", "sequenceNum"), ("BW-BroadworksEMS-MIB", "alertentity"), ("BW-BroadworksEMS-MIB", "alertownerName"), ("BW-BroadworksEMS-MIB", "alertDescription"), ("BW-BroadworksEMS-MIB", "alertTimeStamp"), ("BW-BroadworksEMS-MIB", "alertcategory"), ("BW-BroadworksEMS-MIB", "alertNotificationId"), ("BW-BroadworksEMS-MIB", "alertExtraProperties"))
if mibBuilder.loadTexts: alertClearNotification.setStatus('current')
if mibBuilder.loadTexts: alertClearNotification.setDescription('The NMS-Agent sends an alertClearNotification to the manager indicating that one or more previously reported alerts have been cleared')
alertWarningNotification = NotificationType((1, 3, 6, 1, 4, 1, 2162, 4, 3, 8, 2, 2)).setObjects(("BW-BroadworksEMS-MIB", "alertcategory"), ("BW-BroadworksEMS-MIB", "alertentity"), ("BW-BroadworksEMS-MIB", "alertownerName"), ("BW-BroadworksEMS-MIB", "alertDescription"), ("BW-BroadworksEMS-MIB", "sequenceNum"), ("BW-BroadworksEMS-MIB", "alertTimeStamp"), ("BW-BroadworksEMS-MIB", "alertNotificationId"), ("BW-BroadworksEMS-MIB", "alertExtraProperties"))
if mibBuilder.loadTexts: alertWarningNotification.setStatus('current')
if mibBuilder.loadTexts: alertWarningNotification.setDescription("The NMS-Agent sends an alertWarningNotification to the manager indicating that an alert of 'Warning' severity has been raised on a MO")
alertMinorNotification = NotificationType((1, 3, 6, 1, 4, 1, 2162, 4, 3, 8, 2, 3)).setObjects(("BW-BroadworksEMS-MIB", "sequenceNum"), ("BW-BroadworksEMS-MIB", "alertcategory"), ("BW-BroadworksEMS-MIB", "alertentity"), ("BW-BroadworksEMS-MIB", "alertownerName"), ("BW-BroadworksEMS-MIB", "alertDescription"), ("BW-BroadworksEMS-MIB", "alertTimeStamp"), ("BW-BroadworksEMS-MIB", "alertNotificationId"), ("BW-BroadworksEMS-MIB", "alertExtraProperties"))
if mibBuilder.loadTexts: alertMinorNotification.setStatus('current')
if mibBuilder.loadTexts: alertMinorNotification.setDescription("The NMS-Agent sends an alertMinorNotification to the manager indicating that a an alert of 'Minor' severity has been raised on a MO")
alertMajorNotification = NotificationType((1, 3, 6, 1, 4, 1, 2162, 4, 3, 8, 2, 4)).setObjects(("BW-BroadworksEMS-MIB", "sequenceNum"), ("BW-BroadworksEMS-MIB", "alertcategory"), ("BW-BroadworksEMS-MIB", "alertentity"), ("BW-BroadworksEMS-MIB", "alertownerName"), ("BW-BroadworksEMS-MIB", "alertDescription"), ("BW-BroadworksEMS-MIB", "alertNotificationId"), ("BW-BroadworksEMS-MIB", "alertTimeStamp"), ("BW-BroadworksEMS-MIB", "alertExtraProperties"))
if mibBuilder.loadTexts: alertMajorNotification.setStatus('current')
if mibBuilder.loadTexts: alertMajorNotification.setDescription("The NMS-Agent sends an alertMajorNotification to the manager indicating that an alert of 'Major' severity has been raised on a MO")
alertCriticalNotification = NotificationType((1, 3, 6, 1, 4, 1, 2162, 4, 3, 8, 2, 5)).setObjects(("BW-BroadworksEMS-MIB", "sequenceNum"), ("BW-BroadworksEMS-MIB", "alertentity"), ("BW-BroadworksEMS-MIB", "alertownerName"), ("BW-BroadworksEMS-MIB", "alertcategory"), ("BW-BroadworksEMS-MIB", "alertDescription"), ("BW-BroadworksEMS-MIB", "alertTimeStamp"), ("BW-BroadworksEMS-MIB", "alertNotificationId"), ("BW-BroadworksEMS-MIB", "alertExtraProperties"))
if mibBuilder.loadTexts: alertCriticalNotification.setStatus('current')
if mibBuilder.loadTexts: alertCriticalNotification.setDescription("The NMS-Agent sends an alertCriticalNotification to the manager indicating that an alert of 'Critical' severity has been raised on a MO")
thresholdNotification = NotificationType((1, 3, 6, 1, 4, 1, 2162, 4, 4, 7, 1, 1)).setObjects(("BW-BroadworksEMS-MIB", "thresholdObjectName"), ("BW-BroadworksEMS-MIB", "thresholdKind"), ("BW-BroadworksEMS-MIB", "thresholdMessage"), ("BW-BroadworksEMS-MIB", "thresholdSeverity"))
if mibBuilder.loadTexts: thresholdNotification.setStatus('current')
if mibBuilder.loadTexts: thresholdNotification.setDescription('This notification is generated for the threshold objects which return a string value, when they exceed or fall below a particular threshold value.')
eventid = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 4, 7, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventid.setStatus('current')
if mibBuilder.loadTexts: eventid.setDescription('This variable is the unique id (primary key) of this event object.')
eventsource = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 4, 7, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventsource.setStatus('current')
if mibBuilder.loadTexts: eventsource.setDescription('This variable is the source of the event')
eventEntity = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 4, 7, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventEntity.setStatus('current')
if mibBuilder.loadTexts: eventEntity.setDescription('This variable is the Entity (also known as Failure Object) of the Event.')
eventGenTime = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 4, 7, 2, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventGenTime.setStatus('current')
if mibBuilder.loadTexts: eventGenTime.setDescription('This variable is the time of occurrence (creation), in milliseconds, of this Event object.')
eventSeverity = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 4, 7, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventSeverity.setStatus('current')
if mibBuilder.loadTexts: eventSeverity.setDescription('This variable is the Severity of the Event object.')
alertExtraProperties = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 3, 8, 3, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alertExtraProperties.setStatus('current')
if mibBuilder.loadTexts: alertExtraProperties.setDescription('The values for the user properties which the user specifies in the alertExtraPropNames variable are sent as part of the notifications The values will be displayed in the folloing format: propName1=value1,porpName2=vaule2,....')
reDiscover = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 5, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reDiscover.setStatus('current')
if mibBuilder.loadTexts: reDiscover.setDescription('This variable states whether the node which is already discovered should be discovered again or not')
reDiscoverInterval = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reDiscoverInterval.setStatus('current')
if mibBuilder.loadTexts: reDiscoverInterval.setDescription('The time interval in which the rediscovery takes place')
hour = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 5, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hour.setStatus('current')
if mibBuilder.loadTexts: hour.setDescription('This variable states the time in hours at whicgh the discovery should be done again')
dayOfWeek = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 5, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dayOfWeek.setStatus('current')
if mibBuilder.loadTexts: dayOfWeek.setDescription('This variable states the time in terms of the days of the week when the rediscovery is scheduled to be done')
dayOfMonth = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 5, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dayOfMonth.setStatus('current')
if mibBuilder.loadTexts: dayOfMonth.setDescription('This variable states the time in terms of the days of the month when the rediscovery is scheduled to be done')
enableSnmpPing = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 6, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableSnmpPing.setStatus('current')
if mibBuilder.loadTexts: enableSnmpPing.setDescription('This variable states if the snmp ping should be enabled or not')
snmpPingRetries = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpPingRetries.setStatus('current')
if mibBuilder.loadTexts: snmpPingRetries.setDescription('The number of retries for snmp-ping while discovery')
snmpPingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 6, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpPingTimeout.setStatus('current')
if mibBuilder.loadTexts: snmpPingTimeout.setDescription('The maximum time taken to wait for a response')
snmpport = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 6, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpport.setStatus('current')
if mibBuilder.loadTexts: snmpport.setDescription('This variable states the snmp port')
readCommunity = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 6, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: readCommunity.setStatus('current')
if mibBuilder.loadTexts: readCommunity.setDescription('This variable states the read community')
writeCommunity = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 6, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: writeCommunity.setStatus('current')
if mibBuilder.loadTexts: writeCommunity.setDescription('This variable states the writed community')
snmpV3Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 6, 7))
enableIcmp = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 7, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableIcmp.setStatus('current')
if mibBuilder.loadTexts: enableIcmp.setDescription('This variable states whether icmp ping be enabled or not')
icmpPingRetries = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icmpPingRetries.setStatus('current')
if mibBuilder.loadTexts: icmpPingRetries.setDescription('The number of retries for icmp-ping while discovery')
nativePingRetries = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nativePingRetries.setStatus('current')
if mibBuilder.loadTexts: nativePingRetries.setDescription('The number of time native-ping must be done while discovery')
nativePingTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nativePingTimeOut.setStatus('current')
if mibBuilder.loadTexts: nativePingTimeOut.setDescription('This variable states the max time that need be waited for to get a response back')
debugLevel = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: debugLevel.setStatus('current')
if mibBuilder.loadTexts: debugLevel.setDescription('This variable states the debug level')
enableSweep = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 8, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableSweep.setStatus('current')
if mibBuilder.loadTexts: enableSweep.setDescription('This variable states whether sweep be enabled or not')
sweepPkts = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 8, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sweepPkts.setStatus('current')
if mibBuilder.loadTexts: sweepPkts.setDescription('This variable states the number of sweep packets')
sweepSleepInterval = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 8, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sweepSleepInterval.setStatus('current')
if mibBuilder.loadTexts: sweepSleepInterval.setDescription('This variable states the interval at which sweep must be done')
name = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 10, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: name.setStatus('current')
if mibBuilder.loadTexts: name.setDescription('This states the name of the file')
directory = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 10, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: directory.setStatus('current')
if mibBuilder.loadTexts: directory.setDescription('This states the directory in which the file will be present')
numFiles = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 10, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: numFiles.setStatus('current')
if mibBuilder.loadTexts: numFiles.setDescription('This states the number of files of the same type may exist')
numLines = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 10, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: numLines.setStatus('current')
if mibBuilder.loadTexts: numLines.setDescription('This states the number of lines that will be prresent in the file')
logging = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 10, 4, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logging.setStatus('current')
if mibBuilder.loadTexts: logging.setDescription('This variable takes in a truth value where 1(True) implies that the file be logged and 2(False) which implies that the file may not be logged')
timestamp = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 10, 4, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timestamp.setStatus('current')
if mibBuilder.loadTexts: timestamp.setDescription('This variable also takes in a truth value where 1(True) implies that the time be noted during logging and 2(False) which denotes that the time not be noted')
filename = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 10, 4, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: filename.setStatus('current')
if mibBuilder.loadTexts: filename.setDescription('This states the name of the file in which the logging has to be done')
logDirectory = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 10, 4, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: logDirectory.setStatus('current')
if mibBuilder.loadTexts: logDirectory.setDescription('This states the directory in which the file will be present')
filenum = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 10, 4, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filenum.setStatus('current')
if mibBuilder.loadTexts: filenum.setDescription('This variable describes the number of files that may exist')
linenum = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 10, 4, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linenum.setStatus('current')
if mibBuilder.loadTexts: linenum.setDescription('This variable states the number of lines that will be present in each file')
log = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 10, 4, 2, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: log.setStatus('current')
if mibBuilder.loadTexts: log.setDescription('This variable takes in a truth value where 1(True) implies that the file be logged and 2(False) which implies that the file may not be logged')
logTime = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 10, 4, 2, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logTime.setStatus('current')
if mibBuilder.loadTexts: logTime.setDescription('This variable also takes in a truth value where 1(True) implies that the time be noted during logging and 2(False) which denotes that the time not be noted')
enableV3 = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 6, 7, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableV3.setStatus('current')
if mibBuilder.loadTexts: enableV3.setDescription('This variable states whether v3 be enabled or not')
v3Username = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 6, 7, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: v3Username.setStatus('current')
if mibBuilder.loadTexts: v3Username.setDescription('Whenever v3 is enabled, the user needs to give the user name')
v3Contextname = MibScalar((1, 3, 6, 1, 4, 1, 2162, 4, 10, 1, 6, 7, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: v3Contextname.setStatus('current')
if mibBuilder.loadTexts: v3Contextname.setDescription('Whenever v3 is enabled, the user needs to give the context name')
aclTable = MibTable((1, 3, 6, 1, 4, 1, 2162, 4, 11, 1, 1), )
if mibBuilder.loadTexts: aclTable.setStatus('current')
if mibBuilder.loadTexts: aclTable.setDescription('The table maintains a set of authentication parameters like community and its maximum access. It also has facility for specifying the manager list for access control. This table will be referred by the v1/v2c agent for authentication of any incoming request.')
aclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2162, 4, 11, 1, 1, 1), ).setIndexNames((0, "BW-BroadworksEMS-MIB", "aclCommunity"))
if mibBuilder.loadTexts: aclEntry.setStatus('current')
if mibBuilder.loadTexts: aclEntry.setDescription('Each entry in this table describes one valid authentication property.')
aclCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 11, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone('public'))
if mibBuilder.loadTexts: aclCommunity.setStatus('current')
if mibBuilder.loadTexts: aclCommunity.setDescription('Community string used by the manager to communicate with the agent.')
aclAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 11, 1, 1, 1, 2), Integer32().clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclAccess.setStatus('current')
if mibBuilder.loadTexts: aclAccess.setDescription('The maximum access allowed for the corresponding community.')
aclManagers = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 11, 1, 1, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclManagers.setStatus('current')
if mibBuilder.loadTexts: aclManagers.setDescription("This variable has the managers list allowed for specified access with specified community. The format of the string is 'managerName1;managerName2.....' with a list of manager IpAddress/name corresponding to each additional information separated via ';' as the delimiter between any two managers. The default value is '0:0:0:0' which states access for all managers for the corresponding community.")
aclStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 11, 1, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclStatus.setStatus('current')
if mibBuilder.loadTexts: aclStatus.setDescription('The status of this conceptual row in the aclTable.')
vaclTable = MibTable((1, 3, 6, 1, 4, 1, 2162, 4, 11, 1, 2), )
if mibBuilder.loadTexts: vaclTable.setStatus('current')
if mibBuilder.loadTexts: vaclTable.setDescription('This table furnishes the View Based Access Control Entries for the SNMP Version 1 and Version 2 Agents (V1/V2C Agents).')
vaclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2162, 4, 11, 1, 2, 1), ).setIndexNames((0, "BW-BroadworksEMS-MIB", "aclCommunity"))
if mibBuilder.loadTexts: vaclEntry.setStatus('current')
if mibBuilder.loadTexts: vaclEntry.setDescription('Each Entry is based upon the Community and its allowed views for the View Based Access Control.')
vaclmibViews = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 11, 1, 2, 1, 1), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vaclmibViews.setStatus('current')
if mibBuilder.loadTexts: vaclmibViews.setDescription("This column represents the Mib View or Views furnished for the corresponding communities. More Mib Views can be set by giving a ';' as a separator.")
vaclviewStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2162, 4, 11, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vaclviewStatus.setStatus('current')
if mibBuilder.loadTexts: vaclviewStatus.setDescription('The Status of the View Set.')
mibBuilder.exportSymbols("BW-BroadworksEMS-MIB", netMask=netMask, inheritingTableName2=inheritingTableName2, icmpPingRetries=icmpPingRetries, log=log, startIPAddress=startIPAddress, persistentTrapsMib=persistentTrapsMib, webNMSStartTime=webNMSStartTime, moExtraProperties=moExtraProperties, alertCreateTime=alertCreateTime, oid=oid, varbindValue=varbindValue, timestamp=timestamp, logFileName=logFileName, logUserEntry=logUserEntry, v3UserName=v3UserName, alarmEntity=alarmEntity, endIPAddress=endIPAddress, alarmSeverity=alarmSeverity, hostnetMask=hostnetMask, v3ManagerHost=v3ManagerHost, snmpNodeTable=snmpNodeTable, webNMSSchedulerTable=webNMSSchedulerTable, moFailureCount=moFailureCount, webNMSNumInterfaces=webNMSNumInterfaces, networkDiscoveryIndex=networkDiscoveryIndex, pollingFilterClassName=pollingFilterClassName, logConfiguration=logConfiguration, webNMS=webNMS, parentNode=parentNode, stderr=stderr, trapPortEntry=trapPortEntry, webNMSSchedulerActiveThreads=webNMSSchedulerActiveThreads, polledTime=polledTime, failureCount=failureCount, inheritingOid2=inheritingOid2, indexNum=indexNum, v3Contextname=v3Contextname, moCommunity=moCommunity, alertSource=alertSource, topoObjEntry=topoObjEntry, moDerivedPropNameEntry=moDerivedPropNameEntry, snmpV3Configuration=snmpV3Configuration, timeStamp=timeStamp, networkEntry=networkEntry, nodeDiscoveryEntry=nodeDiscoveryEntry, v3Username=v3Username, webNMSVersion=webNMSVersion, alertClearNotification=alertClearNotification, rowStatus=rowStatus, hostName=hostName, notiLogOid=notiLogOid, sweepPkts=sweepPkts, seqNum=seqNum, subAgentEntry=subAgentEntry, serialNumber=serialNumber, webNMSPorts=webNMSPorts, webNMSFaultMib=webNMSFaultMib, discoverStatus=discoverStatus, statsdataTableName=statsdataTableName, alarmSource=alarmSource, private=private, portNum=portNum, isDHCP=isDHCP, nodeDiscoverEnable=nodeDiscoverEnable, discFilterClassName=discFilterClassName, setFilter=setFilter, webNMSSchedulerNumTasks=webNMSSchedulerNumTasks, webNMSFreeMemory=webNMSFreeMemory, hostNetMask=hostNetMask, v3ManagerRetries=v3ManagerRetries, tableOid=tableOid, webNMSSchedulerNumThreads=webNMSSchedulerNumThreads, tableName=tableName, nmsConfiguration=nmsConfiguration, alarmModTime=alarmModTime, port=port, v3ManagerUserContextName=v3ManagerUserContextName, v1v2ManagerHost=v1v2ManagerHost, adventnet=adventnet, vaclTable=vaclTable, maxFiles=maxFiles, dod=dod, snmpport=snmpport, aclCommunity=aclCommunity, webNMSSchedulerDesc=webNMSSchedulerDesc, moExtraPropNames=moExtraPropNames, moDerivedProperties=moDerivedProperties, v1v2AuthenticationTables=v1v2AuthenticationTables, v3TrapForwardingTable=v3TrapForwardingTable, subAgentTable=subAgentTable, httpPort=httpPort, varbindType=varbindType, filename=filename, webNMSNumNodes=webNMSNumNodes, pollid=pollid, userName=userName, eventsource=eventsource, discoveryFilterEntry=discoveryFilterEntry, criteriaIndex=criteriaIndex, numActivePollers=numActivePollers, moWriteCommunity=moWriteCommunity, webNMSNumAlerts=webNMSNumAlerts, numberOfAlarms=numberOfAlarms, aclAccess=aclAccess, alarmTable=alarmTable, v1v2ManagerStatus=v1v2ManagerStatus, inheritingOid1=inheritingOid1, nodeEntry=nodeEntry, moNodeType=moNodeType, autoDiscover=autoDiscover, numThresholdObjects=numThresholdObjects, moType=moType, topoObjTable=topoObjTable, aclTable=aclTable, stdout=stdout, RowStatus=RowStatus, alertcategory=alertcategory, sysName=sysName, alertNotiVarbinds=alertNotiVarbinds, v3ManagerUserSecModel=v3ManagerUserSecModel, networkDiscoveryTable=networkDiscoveryTable, discFilterIndex=discFilterIndex, logTime=logTime, sysOid=sysOid, snmpPingRetries=snmpPingRetries, webNMSNumNetworks=webNMSNumNetworks, alertExtraProperties=alertExtraProperties, alertMinorNotification=alertMinorNotification, physAddress=physAddress, enterprises=enterprises, alertNotificationId=alertNotificationId, proxyTable=proxyTable, moNotiPrefix=moNotiPrefix, notiLogEntry=notiLogEntry, eventGenTime=eventGenTime, pollID=pollID, ipAddress=ipAddress, inheritingTableName7=inheritingTableName7, logDirectory=logDirectory, parentNet=parentNet, name=name, trapOID=trapOID, topologyConfiguration=topologyConfiguration, contextName=contextName, alertPreviousSeverity=alertPreviousSeverity, pollingFiltersTable=pollingFiltersTable, moPollInterval=moPollInterval, moUserPropNames=moUserPropNames, alertOwnerName=alertOwnerName, timeToPoll=timeToPoll, webNMSIpAddress=webNMSIpAddress, trapFilterEnable=trapFilterEnable, genericType=genericType, linesCached=linesCached, sequenceNum=sequenceNum, internet=internet, alertWarningNotification=alertWarningNotification, sweepSleepInterval=sweepSleepInterval, v3ManagerPort=v3ManagerPort, varbindIndex=varbindIndex, snmpInterfaceEntry=snmpInterfaceEntry, thresholdMessage=thresholdMessage, alertExtraPropNames=alertExtraPropNames, networkDiscoveryEntry=networkDiscoveryEntry, subAgentoid=subAgentoid, perfNotiConfigPrefix=perfNotiConfigPrefix, allow=allow, netIPAddress=netIPAddress, moOwnerName=moOwnerName, webNMSTopoMib=webNMSTopoMib, enablelog=enablelog, moManaged=moManaged, nativePingRetries=nativePingRetries, trapForwardingModule=trapForwardingModule, moFailureThreshold=moFailureThreshold, tftpMode=tftpMode, eventUserProperties=eventUserProperties, subAgentCommunity=subAgentCommunity, v3ManagerUserName=v3ManagerUserName, pollingFilterIndex=pollingFilterIndex, eventSeverity=eventSeverity, discoverInterval=discoverInterval, tftpMib=tftpMib, enableSnmpPing=enableSnmpPing, service=service, logTable=logTable, webNMSSystem=webNMSSystem, faultConfIguration=faultConfIguration, version=version, trapFilterIndex=trapFilterIndex, hour=hour, time=time, ipAddressTable=ipAddressTable, moEntry=moEntry, pollingFiltersEntry=pollingFiltersEntry, v3ManagerStatus=v3ManagerStatus, alertTable=alertTable, webNMSSchedulerIndex=webNMSSchedulerIndex, pollTable=pollTable, snmpPingConfiguration=snmpPingConfiguration, snmpPingTimeout=snmpPingTimeout, evtSource=evtSource, oidindex=oidindex, nodeTable=nodeTable, v3TrapForwardingEntry=v3TrapForwardingEntry, trapFilterEntry=trapFilterEntry, ipAddressEntry=ipAddressEntry, v1v2ManagerVersion=v1v2ManagerVersion, subAgent=subAgent, logging=logging, ifIndex=ifIndex, moCriteriaTable=moCriteriaTable, value=value, moDeEnrolTime=moDeEnrolTime, alarmAssignedTo=alarmAssignedTo, moCriteriaEntry=moCriteriaEntry, webNMSSchedulerEntry=webNMSSchedulerEntry, perfNotificationMib=perfNotificationMib, thresholdCategory=thresholdCategory, result=result, moEnrolTime=moEnrolTime, ifSpeed=ifSpeed, displayName=displayName, inheritingOid6=inheritingOid6, derivedPropNames=derivedPropNames, readCommunity=readCommunity, proxyEntry=proxyEntry, inheritingTableName6=inheritingTableName6, polldataName=polldataName, aclStatus=aclStatus, alertCategory=alertCategory, inheritingOid3=inheritingOid3, devicePort=devicePort, enterpriseOID=enterpriseOID, thresholdSeverity=thresholdSeverity, networkTable=networkTable, rmiRegistryPort=rmiRegistryPort, moNameIndex=moNameIndex, numFiles=numFiles, webNMSTotalMemory=webNMSTotalMemory, varbindLogTable=varbindLogTable, numLines=numLines, alarmEntry=alarmEntry, snmpAgentPort=snmpAgentPort, discoverLocalNet=discoverLocalNet, subagents=subagents, trapFilterTable=trapFilterTable, serverName=serverName, inheritingTableName3=inheritingTableName3, thresholdTable=thresholdTable, numPollObjects=numPollObjects, requestOid=requestOid, inheritingTableName4=inheritingTableName4, logUserTable=logUserTable)
mibBuilder.exportSymbols("BW-BroadworksEMS-MIB", alertentity=alertentity, alertownerName=alertownerName, alertFilterClassName=alertFilterClassName, inheritingTableName1=inheritingTableName1, moNotificationMib=moNotificationMib, eventEntry=eventEntry, org=org, alertUserPropNames=alertUserPropNames, webNMSEventsInBuffer=webNMSEventsInBuffer, snmpInterfaceTable=snmpInterfaceTable, moStatusChangeTime=moStatusChangeTime, rediscoveryConfiguration=rediscoveryConfiguration, physMedia=physMedia, maxLines=maxLines, nodeIP=nodeIP, nodeNetMask=nodeNetMask, destinationFile=destinationFile, moownerName=moownerName, vaclmibViews=vaclmibViews, alarmOwnerName=alarmOwnerName, alertSeverity=alertSeverity, doDiscovery=doDiscovery, thresholdClearMessage=thresholdClearMessage, alertEntry=alertEntry, proxyService=proxyService, webNMSShutdown=webNMSShutdown, moNotiVarbinds=moNotiVarbinds, thresholdObjectName=thresholdObjectName, community=community, logUserIndex=logUserIndex, dhcp=dhcp, netmask=netmask, nodeDiscoveryTable=nodeDiscoveryTable, trapPortTable=trapPortTable, subAgentVersion=subAgentVersion, moStatus=moStatus, moUserProperties=moUserProperties, eventEntity=eventEntity, moStatusUpdateTime=moStatusUpdateTime, dayOfMonth=dayOfMonth, request=request, enableIcmp=enableIcmp, moAttrChangeNotification=moAttrChangeNotification, sysOID=sysOID, subAgentRetries=subAgentRetries, moTable=moTable, logUserName=logUserName, v1v2TrapForwardingEntry=v1v2TrapForwardingEntry, logLevel=logLevel, notiLogTime=notiLogTime, inheritingOid5=inheritingOid5, webNMSPerformanceMib=webNMSPerformanceMib, discover=discover, v3ManagerCommunity=v3ManagerCommunity, moDataChangeTime=moDataChangeTime, alertDescription=alertDescription, notiLogTable=notiLogTable, nativePingConfiguration=nativePingConfiguration, filenum=filenum, vaclEntry=vaclEntry, trapFilterName=trapFilterName, webNMSHost=webNMSHost, inheritingOid4=inheritingOid4, failureThreshold=failureThreshold, evtEntity=evtEntity, directory=directory, aclManagers=aclManagers, statsdata=statsdata, snmpNodeEntry=snmpNodeEntry, moEnrolNotification=moEnrolNotification, perfNotiVarbinds=perfNotiVarbinds, reDiscoverInterval=reDiscoverInterval, maxRows=maxRows, webNMSUpTime=webNMSUpTime, evtID=evtID, enableLog=enableLog, snmpPort=snmpPort, thresholdNotification=thresholdNotification, v3ManagerVersion=v3ManagerVersion, severityName=severityName, thresholdKind=thresholdKind, pollEntry=pollEntry, nodeCommunity=nodeCommunity, nmsSocketPort=nmsSocketPort, v3ManagerTimeOut=v3ManagerTimeOut, ifDesc=ifDesc, varbindLogEntry=varbindLogEntry, agentName=agentName, webNMSSchedulerIdleThreads=webNMSSchedulerIdleThreads, webNMSNumEvents=webNMSNumEvents, subAgentPort=subAgentPort, alertTimeStamp=alertTimeStamp, enableSweep=enableSweep, sysDesc=sysDesc, enableV3=enableV3, propertyValue=propertyValue, evtTime=evtTime, notiLogIndex=notiLogIndex, eventUserPropNames=eventUserPropNames, alertEntity=alertEntity, alarmCreateTime=alarmCreateTime, v1v2ManagerTimeOut=v1v2ManagerTimeOut, evtCategory=evtCategory, timeout=timeout, alertMajorNotification=alertMajorNotification, v3ContextName=v3ContextName, writeCommunity=writeCommunity, agentConfiguration=agentConfiguration, pollingInterval=pollingInterval, specificType=specificType, statsDataTable=statsDataTable, icmpPingConfiguration=icmpPingConfiguration, sourceFile=sourceFile, webNMSNumObjects=webNMSNumObjects, eventid=eventid, statsDataEntry=statsDataEntry, v1v2ManagerPort=v1v2ManagerPort, webNMSSeverityEntry=webNMSSeverityEntry, reDiscover=reDiscover, alarmUserProperties=alarmUserProperties, logIndex=logIndex, webNMSSeverityTable=webNMSSeverityTable, debugLevel=debugLevel, linenum=linenum, moName=moName, alertCriticalNotification=alertCriticalNotification, alarmCategory=alarmCategory, alertNotiPrefix=alertNotiPrefix, alertNotificationMib=alertNotificationMib, eventTable=eventTable, alertUserProperties=alertUserProperties, logEntry=logEntry, logDirName=logDirName, thresholdEntry=thresholdEntry, evtText=evtText, inheritingOid7=inheritingOid7, inheritingTableName5=inheritingTableName5, webNMSAlertsInBuffer=webNMSAlertsInBuffer, dayOfWeek=dayOfWeek, objClassName=objClassName, v3ManagerUserSecLevel=v3ManagerUserSecLevel, performanceConfiguration=performanceConfiguration, moDeenrolNotification=moDeenrolNotification, v1v2ManagerRetries=v1v2ManagerRetries, notiLogNumVarBinds=notiLogNumVarBinds, discoveryFilterTable=discoveryFilterTable, vaclviewStatus=vaclviewStatus, evtSeverity=evtSeverity, moDerivedPropNameTable=moDerivedPropNameTable, nativePingTimeOut=nativePingTimeOut, snmpVersion=snmpVersion, alertModTime=alertModTime, baseMibs=baseMibs, isRouter=isRouter, v1v2ManagerCommunity=v1v2ManagerCommunity, aclEntry=aclEntry, propertyName=propertyName, v1v2TrapForwardingTable=v1v2TrapForwardingTable, alarmPreviousSeverity=alarmPreviousSeverity)
