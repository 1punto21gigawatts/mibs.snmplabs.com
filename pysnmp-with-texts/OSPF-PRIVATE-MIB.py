#
# PySNMP MIB module OSPF-PRIVATE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OSPF-PRIVATE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:35:37 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
cjnProtocol, = mibBuilder.importSymbols("Cajun-ROOT", "cjnProtocol")
AreaID, Metric, TOSType, RouterID = mibBuilder.importSymbols("OSPF-MIB", "AreaID", "Metric", "TOSType", "RouterID")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Counter64, iso, TimeTicks, Bits, NotificationType, Unsigned32, Integer32, Gauge32, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter64", "iso", "TimeTicks", "Bits", "NotificationType", "Unsigned32", "Integer32", "Gauge32", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter32")
RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention")
cjnOspf = ModuleIdentity((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9))
if mibBuilder.loadTexts: cjnOspf.setLastUpdated('9903020000Z')
if mibBuilder.loadTexts: cjnOspf.setOrganization("Lucent's Concord Technology Center (CTC)")
if mibBuilder.loadTexts: cjnOspf.setContactInfo('Alia Haider -- aliahaider@lucent.com Raj Duggal(Group Leader) -- rduggal@lucent.com Erick Crowell -- ecrowell@lucent.com Ira Steckler (MIB GOD) -- isteckler@lucent.com')
if mibBuilder.loadTexts: cjnOspf.setDescription('Cajun Private OSPF mibs')
cjnOspfGblConfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 1))
cjnOspfRouterId = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 1, 1), RouterID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnOspfRouterId.setStatus('current')
if mibBuilder.loadTexts: cjnOspfRouterId.setDescription('OSPF router-id unique within an autonomous system')
cjnOspfPathSplit = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnOspfPathSplit.setStatus('current')
if mibBuilder.loadTexts: cjnOspfPathSplit.setDescription('The number of OSPF path splits.')
cjnOspfPeMax = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnOspfPeMax.setStatus('current')
if mibBuilder.loadTexts: cjnOspfPeMax.setDescription('Maximum number of path entries supported by OSPF ')
cjnOspfSpfState = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnOspfSpfState.setStatus('current')
if mibBuilder.loadTexts: cjnOspfSpfState.setDescription('Sets state of OSPF to enabled/disabled')
cjnOspfAsbdrStatus = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnOspfAsbdrStatus.setStatus('current')
if mibBuilder.loadTexts: cjnOspfAsbdrStatus.setDescription('Sets flag for router to be as an Autonomous system boundary router enabled/disabled')
cjnOspfAutoVLinkCreate = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnOspfAutoVLinkCreate.setStatus('current')
if mibBuilder.loadTexts: cjnOspfAutoVLinkCreate.setDescription('Sets flag for automatic creation of virtual link enabled/disabled')
cjnOspfSpfHold = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 1, 7), Integer32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnOspfSpfHold.setStatus('current')
if mibBuilder.loadTexts: cjnOspfSpfHold.setDescription('Time between two consecutive SPF chunks in seconds')
cjnOspfSpfSuspendTime = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 1, 8), Integer32().clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnOspfSpfSuspendTime.setStatus('current')
if mibBuilder.loadTexts: cjnOspfSpfSuspendTime.setDescription('Sets the maximum number of LSAs to be used in each SPF chunk')
cjnOspfLocalExtType = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnOspfLocalExtType.setStatus('current')
if mibBuilder.loadTexts: cjnOspfLocalExtType.setDescription('Sets the metric type for local ext routes to 1 or 2')
cjnOspfRipExtType = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnOspfRipExtType.setStatus('current')
if mibBuilder.loadTexts: cjnOspfRipExtType.setDescription('Sets the metric type for RIP ext routes to 1 or 2')
cjnOspfSpfStaticExtType = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnOspfSpfStaticExtType.setStatus('current')
if mibBuilder.loadTexts: cjnOspfSpfStaticExtType.setDescription('Sets the metric type for static ext routes to 1 or 2')
cjnOspfLowExtType = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnOspfLowExtType.setStatus('current')
if mibBuilder.loadTexts: cjnOspfLowExtType.setDescription('Sets the metric type for low preference static routes ext routes to 1 or 2')
cjnOspfTraceFlags = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnOspfTraceFlags.setStatus('current')
if mibBuilder.loadTexts: cjnOspfTraceFlags.setDescription('Sets packet tracing for OSPF to on/off')
cjnOspfGlobalStatsReset = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cjnOspfGlobalStatsReset.setStatus('current')
if mibBuilder.loadTexts: cjnOspfGlobalStatsReset.setDescription('When set to the value enable (1) all OSPF statistics are reset to zero after which the value of this MIB object returns to disable(2)')
cjnOspfGblStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 2))
cjnOspfTOSCount = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfTOSCount.setStatus('current')
if mibBuilder.loadTexts: cjnOspfTOSCount.setDescription('The number of types of services supported by OSPF.')
cjnOspfRunSpf = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfRunSpf.setStatus('current')
if mibBuilder.loadTexts: cjnOspfRunSpf.setDescription('Number of times the SPF calculation has been run ')
cjnOspfAbdrStatus = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfAbdrStatus.setStatus('current')
if mibBuilder.loadTexts: cjnOspfAbdrStatus.setDescription('Shows the state of the router as an Area border router enabled/disabled')
cjnOspfTxNewLsa = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfTxNewLsa.setStatus('current')
if mibBuilder.loadTexts: cjnOspfTxNewLsa.setDescription('Shows the number of new link State Advertisements transmitted')
cjnOspfRxNewLsa = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfRxNewLsa.setStatus('current')
if mibBuilder.loadTexts: cjnOspfRxNewLsa.setDescription('Shows the number of new lsas received')
cjnOspfRxHelloCnt = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfRxHelloCnt.setStatus('current')
if mibBuilder.loadTexts: cjnOspfRxHelloCnt.setDescription('Shows number of hello messages received')
cjnOspfTxHelloCnt = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfTxHelloCnt.setStatus('current')
if mibBuilder.loadTexts: cjnOspfTxHelloCnt.setDescription('Shows number of hello messages transmitted')
cjnOspfRxDBDescCnt = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfRxDBDescCnt.setStatus('current')
if mibBuilder.loadTexts: cjnOspfRxDBDescCnt.setDescription('Shows number of data base description packets received')
cjnOspfTxDBDescCnt = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfTxDBDescCnt.setStatus('current')
if mibBuilder.loadTexts: cjnOspfTxDBDescCnt.setDescription('Shows number of data base description packets transmitted')
cjnOspfRxLsaAckCnt = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfRxLsaAckCnt.setStatus('current')
if mibBuilder.loadTexts: cjnOspfRxLsaAckCnt.setDescription('Shows number of LSA ack packets received')
cjnOspfTxLsaAckCnt = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfTxLsaAckCnt.setStatus('current')
if mibBuilder.loadTexts: cjnOspfTxLsaAckCnt.setDescription('Shows number of LSA ack packets transmitted')
cjnOspfRxLsaUpdCnt = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfRxLsaUpdCnt.setStatus('current')
if mibBuilder.loadTexts: cjnOspfRxLsaUpdCnt.setDescription('Shows number of LSA update packets received')
cjnOspfTxLsaUpdCnt = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfTxLsaUpdCnt.setStatus('current')
if mibBuilder.loadTexts: cjnOspfTxLsaUpdCnt.setDescription('Shows number of LSA update packets transmitted')
cjnOspfRxLsaReqCnt = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfRxLsaReqCnt.setStatus('current')
if mibBuilder.loadTexts: cjnOspfRxLsaReqCnt.setDescription('Shows number of LSA request packets received')
cjnOspfTxLsaReqCnt = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfTxLsaReqCnt.setStatus('current')
if mibBuilder.loadTexts: cjnOspfTxLsaReqCnt.setDescription('Shows number of LSA request packets transmitted')
cjnOspfIfTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 3), )
if mibBuilder.loadTexts: cjnOspfIfTable.setStatus('current')
if mibBuilder.loadTexts: cjnOspfIfTable.setDescription('')
cjnOspfIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 3, 1), ).setIndexNames((0, "OSPF-PRIVATE-MIB", "cjnOspfIfIpAddress"))
if mibBuilder.loadTexts: cjnOspfIfEntry.setStatus('current')
if mibBuilder.loadTexts: cjnOspfIfEntry.setDescription('')
cjnOspfIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfIfIpAddress.setStatus('current')
if mibBuilder.loadTexts: cjnOspfIfIpAddress.setDescription('The interface ip address')
cjnOspfIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnOspfIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: cjnOspfIfRowStatus.setDescription('The Status of this entry in the table. Note the available states: active(1), -- Obviously Active on this interface. notInService(2) -- Configured on Interface but disabled. notReady(3), -- Interface entry NOT FULLY configured. createAndGo(4), -- NOT SUPPORTED. createAndWait(5) or destroy(6) ')
cjnOspfIfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 3, 1, 3), AreaID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnOspfIfAreaId.setStatus('current')
if mibBuilder.loadTexts: cjnOspfIfAreaId.setDescription('The id of the area in which interface has been configured')
cjnOspfIfMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfIfMask.setStatus('current')
if mibBuilder.loadTexts: cjnOspfIfMask.setDescription('The network mask for the ip network the interface belongs to')
cjnOspfIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bcast", 1), ("nbma", 2), ("pointToPoint", 3), ("pointToMultiPoint", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfIfType.setStatus('current')
if mibBuilder.loadTexts: cjnOspfIfType.setDescription('The media type of the interface ( bcast, point to point, point to multipoint )')
cjnOspfIfCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 3, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnOspfIfCost.setStatus('current')
if mibBuilder.loadTexts: cjnOspfIfCost.setDescription('The cost associted with the interface used to determine the path cost when interface is used as a next hop')
cjnOspfIfDrRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 3, 1, 7), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfIfDrRouterId.setStatus('current')
if mibBuilder.loadTexts: cjnOspfIfDrRouterId.setDescription('The router id of the designated router on the network the interface belongs to')
cjnOspfIfDrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 3, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfIfDrIpAddr.setStatus('current')
if mibBuilder.loadTexts: cjnOspfIfDrIpAddr.setDescription('The ip address of the interface on which packets are received from the designated router for the network the interface belongs to')
cjnOspfIfBDrRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfIfBDrRouterId.setStatus('current')
if mibBuilder.loadTexts: cjnOspfIfBDrRouterId.setDescription('The router id of the back up designated router on the network the interface belongs to')
cjnOspfIfDrState = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfIfDrState.setStatus('current')
if mibBuilder.loadTexts: cjnOspfIfDrState.setDescription('The designated router status of the interface ( DR, BDR or NoDR )')
cjnOspfIfHelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 3, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnOspfIfHelloTimer.setStatus('current')
if mibBuilder.loadTexts: cjnOspfIfHelloTimer.setDescription('The value of Hello timer for the interface with a default value of 10 seconds')
cjnOspfIfDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 3, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnOspfIfDeadInterval.setStatus('current')
if mibBuilder.loadTexts: cjnOspfIfDeadInterval.setDescription('The value of dead interval timer for the interface with a default value of 40 seconds')
cjnOspfIfRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 3, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnOspfIfRtrPriority.setStatus('current')
if mibBuilder.loadTexts: cjnOspfIfRtrPriority.setDescription('The interface priority used in the designated router election on the network the interface belongs to')
cjnOspfIfRxmtTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 3, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnOspfIfRxmtTimer.setStatus('current')
if mibBuilder.loadTexts: cjnOspfIfRxmtTimer.setDescription('The value of retransmit timer for the interface used to retransmit all the data description packets and link state advertisements packets requiring an ack or response with a default value of 5 seconds')
cjnOspfIfTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 3, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnOspfIfTransitDelay.setStatus('current')
if mibBuilder.loadTexts: cjnOspfIfTransitDelay.setDescription('The delay in the packet transmission via the interface (default value is 1 second)')
cjnOspfIfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 3, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnOspfIfAuthKey.setStatus('current')
if mibBuilder.loadTexts: cjnOspfIfAuthKey.setDescription('An eight character long simple password used for simple authentication type on an interface if authentication type is set to one. All the interfacew with OSPF enabled need to have the same authentication type to form adjacencies or exchange OSPF traffic')
cjnOspfIfMd5KeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 3, 1, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnOspfIfMd5KeyId.setStatus('current')
if mibBuilder.loadTexts: cjnOspfIfMd5KeyId.setDescription('MD5 key id used for type 2 authentication on an OSPF interface')
cjnOspfIfMd5KeyFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 3, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnOspfIfMd5KeyFlags.setStatus('current')
if mibBuilder.loadTexts: cjnOspfIfMd5KeyFlags.setDescription('flags used for type 2 authentication on an OSPF interface')
cjnOspfIfMd5Key = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 3, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnOspfIfMd5Key.setStatus('current')
if mibBuilder.loadTexts: cjnOspfIfMd5Key.setDescription('The 16 character long MD5 key used for type 2 authentication on an OSPF interface')
cjnOspfIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("simple", 1), ("md5", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnOspfIfAuthType.setStatus('current')
if mibBuilder.loadTexts: cjnOspfIfAuthType.setDescription('The OSPF authentication type( 0, 1 or 2 )')
cjnOspfIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfIfMtu.setStatus('current')
if mibBuilder.loadTexts: cjnOspfIfMtu.setDescription('The maximum length of the packet transmitted on an OSPF interface')
cjnOspfIfPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 3, 1, 22), Integer32().clone(120)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnOspfIfPollInterval.setStatus('current')
if mibBuilder.loadTexts: cjnOspfIfPollInterval.setDescription('The value of Poll timer for the interface with a default value of 120 seconds')
cjnOspfVirtIfTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 4), )
if mibBuilder.loadTexts: cjnOspfVirtIfTable.setStatus('current')
if mibBuilder.loadTexts: cjnOspfVirtIfTable.setDescription("Information about this router's virtual inter- faces.")
cjnOspfVirtIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 4, 1), ).setIndexNames((0, "OSPF-PRIVATE-MIB", "cjnOspfVirtIfAreaId"), (0, "OSPF-PRIVATE-MIB", "cjnOspfVirtIfNbrRtrId"))
if mibBuilder.loadTexts: cjnOspfVirtIfEntry.setStatus('current')
if mibBuilder.loadTexts: cjnOspfVirtIfEntry.setDescription('Information about a single Virtual Interface.')
cjnOspfVirtIfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 4, 1, 1), AreaID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnOspfVirtIfAreaId.setStatus('current')
if mibBuilder.loadTexts: cjnOspfVirtIfAreaId.setDescription("The virtual link's transit area area-id")
cjnOspfVirtIfNbrRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 4, 1, 2), RouterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnOspfVirtIfNbrRtrId.setStatus('current')
if mibBuilder.loadTexts: cjnOspfVirtIfNbrRtrId.setDescription('The router id of the router on the other end of the virtual link')
cjnOspfVirtIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnOspfVirtIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: cjnOspfVirtIfRowStatus.setDescription('The Status of this entry in the table. Note the available states: active(1), -- Obviously Active on this interface. notInService(2) -- Configured on Interface but disabled. notReady(3), -- Interface entry NOT FULLY configured. createAndGo(4), -- NOT SUPPORTED. createAndWait(5) or destroy(6) ')
cjnOspfVirtIfDrRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 4, 1, 4), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfVirtIfDrRouterId.setStatus('current')
if mibBuilder.loadTexts: cjnOspfVirtIfDrRouterId.setDescription('The router id of the designated router on the network the virtual interface belongs to')
cjnOspfVirtIfDrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 4, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfVirtIfDrIpAddr.setStatus('current')
if mibBuilder.loadTexts: cjnOspfVirtIfDrIpAddr.setDescription('The ip address of the interface on which packets are received from the designated router on the network the virtual interfcae belongs to')
cjnOspfVirtIfBDrRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 4, 1, 6), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfVirtIfBDrRouterId.setStatus('current')
if mibBuilder.loadTexts: cjnOspfVirtIfBDrRouterId.setDescription('The router id of the backup designated router on the network the virtual interface belongs to')
cjnOspfVirtIfDrState = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notDesignatedRouter", 1), ("desigatedRouter", 2), ("backupDesignatedRouter", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfVirtIfDrState.setStatus('current')
if mibBuilder.loadTexts: cjnOspfVirtIfDrState.setDescription('The designated router state of the virtual interface ( DR, BDR, NoDR )')
cjnOspfVirtIfHelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 4, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnOspfVirtIfHelloTimer.setStatus('current')
if mibBuilder.loadTexts: cjnOspfVirtIfHelloTimer.setDescription('The value of the periodic timer used to retransmit hello packets( default value set to 10 seconds )')
cjnOspfVirtIfDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 4, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnOspfVirtIfDeadInterval.setStatus('current')
if mibBuilder.loadTexts: cjnOspfVirtIfDeadInterval.setDescription('The value of the one shot timer used to detect if the neighbor is gone with a default value set to 40 seconds')
cjnOspfVirtIfRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 4, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnOspfVirtIfRtrPriority.setStatus('current')
if mibBuilder.loadTexts: cjnOspfVirtIfRtrPriority.setDescription('The virtual interface priority used during the DR/BDR election with a default value of 1')
cjnOspfVirtIfRxmtTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 4, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnOspfVirtIfRxmtTimer.setStatus('current')
if mibBuilder.loadTexts: cjnOspfVirtIfRxmtTimer.setDescription('The retransmit timer used to retarnsmit all OSPF packets requiring a response or ack with a default value set to 5 seconds')
cjnOspfVirtIfTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 4, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnOspfVirtIfTransitDelay.setStatus('current')
if mibBuilder.loadTexts: cjnOspfVirtIfTransitDelay.setDescription('The delay in transmission of the via the virtual interface with a default value set to 1 second')
cjnOspfVirtIfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 4, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnOspfVirtIfAuthKey.setStatus('current')
if mibBuilder.loadTexts: cjnOspfVirtIfAuthKey.setDescription('The eight character long simple password on a virtual link')
cjnOspfVirtIfMd5Key = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 4, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnOspfVirtIfMd5Key.setStatus('current')
if mibBuilder.loadTexts: cjnOspfVirtIfMd5Key.setDescription('The 16 character long password for type 2 authentication on a virtual link')
cjnOspfVirtIfMd5KeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 4, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnOspfVirtIfMd5KeyId.setStatus('current')
if mibBuilder.loadTexts: cjnOspfVirtIfMd5KeyId.setDescription('The key id used in md5 authentication type on a virtual link')
cjnOspfVirtIfMd5KeyFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 4, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnOspfVirtIfMd5KeyFlags.setStatus('current')
if mibBuilder.loadTexts: cjnOspfVirtIfMd5KeyFlags.setDescription('The flags used in defining type 2 authentication on a virtual interface')
cjnOspfVirtIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("simple", 1), ("md5", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnOspfVirtIfAuthType.setStatus('current')
if mibBuilder.loadTexts: cjnOspfVirtIfAuthType.setDescription('The types of authentication supported on a virtual interface( 0, 1, 2 ) ')
cjnOspfAreaTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 5), )
if mibBuilder.loadTexts: cjnOspfAreaTable.setStatus('current')
if mibBuilder.loadTexts: cjnOspfAreaTable.setDescription('The OSPF Area Table')
cjnOspfAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 5, 1), ).setIndexNames((0, "OSPF-PRIVATE-MIB", "cjnOspfAreaId"))
if mibBuilder.loadTexts: cjnOspfAreaEntry.setStatus('current')
if mibBuilder.loadTexts: cjnOspfAreaEntry.setDescription('Each entry decsribes an OSPF Area that is part of the autonomous system')
cjnOspfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 5, 1, 1), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfAreaId.setStatus('current')
if mibBuilder.loadTexts: cjnOspfAreaId.setDescription('Defines id number for an OSPF area')
cjnOspfAreaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnOspfAreaRowStatus.setStatus('current')
if mibBuilder.loadTexts: cjnOspfAreaRowStatus.setDescription('The Status of this entry in the table. Note the available states: active(1), -- Obviously Active on this interface. notInService(2) -- Configured on Interface but disabled. notReady(3), -- Interface entry NOT FULLY configured. createAndGo(4), -- NOT SUPPORTED. createAndWait(5) or destroy(6) ')
cjnOspfAreaType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("nonStub", 0), ("stub", 1), ("nssa", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnOspfAreaType.setStatus('current')
if mibBuilder.loadTexts: cjnOspfAreaType.setDescription('Sets stub flag for an OSPF area to on/off')
cjnOspfAreaTranslate = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noTranslation", 0), ("translate", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnOspfAreaTranslate.setStatus('current')
if mibBuilder.loadTexts: cjnOspfAreaTranslate.setDescription('Turns the flag to translate type 7 lsa into type 5 to on/off for an OSPF area')
cjnOspfAreaStubCost = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 5, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnOspfAreaStubCost.setStatus('current')
if mibBuilder.loadTexts: cjnOspfAreaStubCost.setDescription('Defines the cost for defaults routes advertised into stub area by an area border router')
cjnOspfAreaT3Filter = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noFiltering", 0), ("filter", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnOspfAreaT3Filter.setStatus('current')
if mibBuilder.loadTexts: cjnOspfAreaT3Filter.setDescription('sets the filtering of type 3 ase lsa into an OSPF area to on/off')
cjnOspfAreaSpfRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfAreaSpfRuns.setStatus('current')
if mibBuilder.loadTexts: cjnOspfAreaSpfRuns.setDescription('The number of times SPF has been run in an OSPF area')
cjnOspfAreaAbdrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfAreaAbdrCnt.setStatus('current')
if mibBuilder.loadTexts: cjnOspfAreaAbdrCnt.setDescription('The number of area border routers in an OSPF area')
cjnOspfAreaAsbdrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfAreaAsbdrCnt.setStatus('current')
if mibBuilder.loadTexts: cjnOspfAreaAsbdrCnt.setDescription('The number of autonomous system boundary routers in an OSPF area')
cjnOspfAreaNetCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfAreaNetCnt.setStatus('current')
if mibBuilder.loadTexts: cjnOspfAreaNetCnt.setDescription('The number networks configured in an OSPF area')
cjnOspfCnfgRangeTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 6), )
if mibBuilder.loadTexts: cjnOspfCnfgRangeTable.setStatus('obsolete')
if mibBuilder.loadTexts: cjnOspfCnfgRangeTable.setDescription('')
cjnOspfCnfgRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 6, 1), ).setIndexNames((0, "OSPF-PRIVATE-MIB", "cjnOspfCnfgRangeAreaId"), (0, "OSPF-PRIVATE-MIB", "cjnOspfCnfgRangeIpAddr"), (0, "OSPF-PRIVATE-MIB", "cjnOspfCnfgRangeMask"))
if mibBuilder.loadTexts: cjnOspfCnfgRangeEntry.setStatus('obsolete')
if mibBuilder.loadTexts: cjnOspfCnfgRangeEntry.setDescription('Each entry describes an address range summary')
cjnOspfCnfgRangeAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 6, 1, 1), AreaID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnOspfCnfgRangeAreaId.setStatus('current')
if mibBuilder.loadTexts: cjnOspfCnfgRangeAreaId.setDescription('OSPF area id for an area in which the range of ip addresses is to be configured')
cjnOspfCnfgRangeIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 6, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnOspfCnfgRangeIpAddr.setStatus('current')
if mibBuilder.loadTexts: cjnOspfCnfgRangeIpAddr.setDescription('The starting network number for a range of ip addresses to be configured')
cjnOspfCnfgRangeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 6, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnOspfCnfgRangeMask.setStatus('current')
if mibBuilder.loadTexts: cjnOspfCnfgRangeMask.setDescription('The ip network mask for a range of ip addresses to be configured')
cjnOspfCnfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 6, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnOspfCnfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: cjnOspfCnfgRowStatus.setDescription('The Status of this entry in the table. Note the available states: active(1), -- Obviously Active on this entry. notInService(2) -- Configured on Interface but disabled. notReady(3), -- entry NOT FULLY configured. createAndGo(4), createAndWait(5) or destroy(6) ')
cjnOspfCnfgRangeAdv = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notAdvertising", 0), ("advertising", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnOspfCnfgRangeAdv.setStatus('current')
if mibBuilder.loadTexts: cjnOspfCnfgRangeAdv.setDescription('Flag to set the advertisement of a given ip netwoks range to on/off')
cjnOspfNbrTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 7), )
if mibBuilder.loadTexts: cjnOspfNbrTable.setStatus('current')
if mibBuilder.loadTexts: cjnOspfNbrTable.setDescription('')
cjnOspfNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 7, 1), ).setIndexNames((0, "OSPF-PRIVATE-MIB", "cjnOspfNbrIpAddr"))
if mibBuilder.loadTexts: cjnOspfNbrEntry.setStatus('current')
if mibBuilder.loadTexts: cjnOspfNbrEntry.setDescription('Each entry describes a reachable neighbor, per interface, per area')
cjnOspfNbrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 7, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfNbrIpAddr.setStatus('current')
if mibBuilder.loadTexts: cjnOspfNbrIpAddr.setDescription('The ip address of the router on which the neighbor exists')
cjnOspfNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("down", 1), ("attempt", 2), ("init", 3), ("twoWay", 4), ("exchangeStart", 5), ("exchange", 6), ("loading", 7), ("full", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfNbrState.setStatus('current')
if mibBuilder.loadTexts: cjnOspfNbrState.setDescription('ospf state with respect to the router during and after the data base description process')
cjnOspfNbrRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 7, 1, 3), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfNbrRtrId.setStatus('current')
if mibBuilder.loadTexts: cjnOspfNbrRtrId.setDescription('OSPF router id of the neighbor')
cjnOspfNbrMasterSlave = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("slave", 0), ("master", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfNbrMasterSlave.setStatus('current')
if mibBuilder.loadTexts: cjnOspfNbrMasterSlave.setDescription('The OSPF neighbor master-slave state')
cjnOspfNbrDrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfNbrDrIpAddr.setStatus('current')
if mibBuilder.loadTexts: cjnOspfNbrDrIpAddr.setDescription('The ip address of the interface on which the designated router for the Neighbor router exists')
cjnOspfNbrBackUpIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 7, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfNbrBackUpIpAddr.setStatus('current')
if mibBuilder.loadTexts: cjnOspfNbrBackUpIpAddr.setDescription('The ip address of the interface on which the backup designated router for the Neighbor router exists')
cjnOspfNbrDDNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfNbrDDNum.setStatus('current')
if mibBuilder.loadTexts: cjnOspfNbrDDNum.setDescription('The sequence number in the data description packet received from the neighbor during the data base description process')
cjnOspfLsaHdrTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 8), )
if mibBuilder.loadTexts: cjnOspfLsaHdrTable.setStatus('current')
if mibBuilder.loadTexts: cjnOspfLsaHdrTable.setDescription("The OSPF Process's Link State Database.")
cjnOspfLsaHdrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 8, 1), ).setIndexNames((0, "OSPF-PRIVATE-MIB", "cjnOspfLsaHdrAreaId"), (0, "OSPF-PRIVATE-MIB", "cjnOspfLsaHdrLsaType"), (0, "OSPF-PRIVATE-MIB", "cjnOspfLsaHdrAdvRtrId"), (0, "OSPF-PRIVATE-MIB", "cjnOspfLsaHdrLsId"))
if mibBuilder.loadTexts: cjnOspfLsaHdrEntry.setStatus('current')
if mibBuilder.loadTexts: cjnOspfLsaHdrEntry.setDescription('A single Link State Advertisement.')
cjnOspfLsaHdrAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 8, 1, 1), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfLsaHdrAreaId.setStatus('current')
if mibBuilder.loadTexts: cjnOspfLsaHdrAreaId.setDescription('The type (1..11) of link state advertisement in the link state advertisement packet header')
cjnOspfLsaHdrLsaType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfLsaHdrLsaType.setStatus('current')
if mibBuilder.loadTexts: cjnOspfLsaHdrLsaType.setDescription('The type (1..11) of link state advertisement in the link state advertisement packet header')
cjnOspfLsaHdrAdvRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 8, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfLsaHdrAdvRtrId.setStatus('current')
if mibBuilder.loadTexts: cjnOspfLsaHdrAdvRtrId.setDescription('The router id of the advertising router in the link state advertisement header')
cjnOspfLsaHdrLsId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 8, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfLsaHdrLsId.setStatus('current')
if mibBuilder.loadTexts: cjnOspfLsaHdrLsId.setDescription('The four byte link state id in a link state advertisement header')
cjnOspfLsaHdrLsaAge = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfLsaHdrLsaAge.setStatus('current')
if mibBuilder.loadTexts: cjnOspfLsaHdrLsaAge.setDescription('The link state advertisement age in the link state advertisement header')
cjnOspfLsaHdrChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfLsaHdrChecksum.setStatus('current')
if mibBuilder.loadTexts: cjnOspfLsaHdrChecksum.setDescription('The link state advertisement checksum in the link state advertisement header')
cjnOspfLsaHdrSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfLsaHdrSequence.setStatus('current')
if mibBuilder.loadTexts: cjnOspfLsaHdrSequence.setDescription('The 32 bit link state advertisement sequence number in the link state advertisement header')
cjnOspfExtLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 9), )
if mibBuilder.loadTexts: cjnOspfExtLsdbTable.setStatus('current')
if mibBuilder.loadTexts: cjnOspfExtLsdbTable.setDescription("The OSPF Process's Link State Database.")
cjnOspfExtLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 9, 1), ).setIndexNames((0, "OSPF-PRIVATE-MIB", "cjnOspfExtLsdbType"), (0, "OSPF-PRIVATE-MIB", "cjnOspfExtLsdbAdvRtrId"), (0, "OSPF-PRIVATE-MIB", "cjnOspfExtLsdbLsId"))
if mibBuilder.loadTexts: cjnOspfExtLsdbEntry.setStatus('current')
if mibBuilder.loadTexts: cjnOspfExtLsdbEntry.setDescription('A single Ext Link State Advertisement.')
cjnOspfExtLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfExtLsdbType.setStatus('current')
if mibBuilder.loadTexts: cjnOspfExtLsdbType.setDescription('The type of external link state advertisement in the link state advertisement packet header')
cjnOspfExtLsdbAdvRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 9, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfExtLsdbAdvRtrId.setStatus('current')
if mibBuilder.loadTexts: cjnOspfExtLsdbAdvRtrId.setDescription('The router id of the router advertising the external link state advertisement')
cjnOspfExtLsdbLsId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 9, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfExtLsdbLsId.setStatus('current')
if mibBuilder.loadTexts: cjnOspfExtLsdbLsId.setDescription('The link state id in the external link state advertisement packet header')
cjnOspfExtLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfExtLsdbAge.setStatus('current')
if mibBuilder.loadTexts: cjnOspfExtLsdbAge.setDescription('The link state advertisement age of the external link state advertisement')
cjnOspfExtLsdbLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfExtLsdbLsdbChecksum.setStatus('current')
if mibBuilder.loadTexts: cjnOspfExtLsdbLsdbChecksum.setDescription('The link state advertisement checksum of the external link state advertisement')
cjnOspfExtLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfExtLsdbSequence.setStatus('current')
if mibBuilder.loadTexts: cjnOspfExtLsdbSequence.setDescription('The link state advertisement sequence number of the external link state advertisement')
cjnOspfExtLsdNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 9, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfExtLsdNetMask.setStatus('current')
if mibBuilder.loadTexts: cjnOspfExtLsdNetMask.setDescription('The network mask of the network being advertised in the external link state advertisement')
cjnOspfExtLsdbTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 9, 1, 8), TOSType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfExtLsdbTOS.setStatus('current')
if mibBuilder.loadTexts: cjnOspfExtLsdbTOS.setDescription('The type of service advertised in the external link state advertisement')
cjnOspfExtLsdbMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 9, 1, 9), Metric()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfExtLsdbMetric.setStatus('current')
if mibBuilder.loadTexts: cjnOspfExtLsdbMetric.setDescription('The metric associated for the network being advertised in the external link state advertisement')
cjnOspfExtLsdForwardingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 9, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfExtLsdForwardingAddress.setStatus('current')
if mibBuilder.loadTexts: cjnOspfExtLsdForwardingAddress.setDescription('The next hop address in the external link state advertisement for the network being advertised')
cjnOspfExtLsdbRouteTag = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 9, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfExtLsdbRouteTag.setStatus('current')
if mibBuilder.loadTexts: cjnOspfExtLsdbRouteTag.setDescription('The 32 bit tag associated with the network being advertised in the external link state advertisement')
cjnOspfNetLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 10), )
if mibBuilder.loadTexts: cjnOspfNetLsdbTable.setStatus('current')
if mibBuilder.loadTexts: cjnOspfNetLsdbTable.setDescription("The OSPF Process's Link State Database.")
cjnOspfNetLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 10, 1), ).setIndexNames((0, "OSPF-PRIVATE-MIB", "cjnOspfNetLsdbAreaId"), (0, "OSPF-PRIVATE-MIB", "cjnOspfNetLsdbType"), (0, "OSPF-PRIVATE-MIB", "cjnOspfNetLsdbAdvRtrId"), (0, "OSPF-PRIVATE-MIB", "cjnOspfNetLsdbLsId"))
if mibBuilder.loadTexts: cjnOspfNetLsdbEntry.setStatus('current')
if mibBuilder.loadTexts: cjnOspfNetLsdbEntry.setDescription('A single Link State Advertisement.')
cjnOspfNetLsdbAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 10, 1, 1), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfNetLsdbAreaId.setStatus('current')
if mibBuilder.loadTexts: cjnOspfNetLsdbAreaId.setDescription('The type of netwok link state advertisement (2) in the link state advertisement packet header')
cjnOspfNetLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfNetLsdbType.setStatus('current')
if mibBuilder.loadTexts: cjnOspfNetLsdbType.setDescription('The type of netwok link state advertisement (2) in the link state advertisement packet header')
cjnOspfNetLsdbAdvRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 10, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfNetLsdbAdvRtrId.setStatus('current')
if mibBuilder.loadTexts: cjnOspfNetLsdbAdvRtrId.setDescription('The router id of the router advertising the network link state advertisement')
cjnOspfNetLsdbLsId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 10, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfNetLsdbLsId.setStatus('current')
if mibBuilder.loadTexts: cjnOspfNetLsdbLsId.setDescription('The link state id in the network link state advertisement packet header')
cjnOspfNetLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfNetLsdbAge.setStatus('current')
if mibBuilder.loadTexts: cjnOspfNetLsdbAge.setDescription('The age of the network link state advertisement')
cjnOspfNetLsdbLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfNetLsdbLsdbChecksum.setStatus('current')
if mibBuilder.loadTexts: cjnOspfNetLsdbLsdbChecksum.setDescription('The checksum of the external link state advertisemen')
cjnOspfNetLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfNetLsdbSequence.setStatus('current')
if mibBuilder.loadTexts: cjnOspfNetLsdbSequence.setDescription('The sequence number of the external link state advertisemen')
cjnOspfNetLsdNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 10, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfNetLsdNetMask.setStatus('current')
if mibBuilder.loadTexts: cjnOspfNetLsdNetMask.setDescription('The ip mask of the network being advertised by the network link state advertisement')
cjnOspfRouterLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 11), )
if mibBuilder.loadTexts: cjnOspfRouterLsdbTable.setStatus('current')
if mibBuilder.loadTexts: cjnOspfRouterLsdbTable.setDescription("The OSPF Process's Link State Database.")
cjnOspfRouterLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 11, 1), ).setIndexNames((0, "OSPF-PRIVATE-MIB", "cjnOspfRouterLsdbAreaId"), (0, "OSPF-PRIVATE-MIB", "cjnOspfRouterLsdbType"), (0, "OSPF-PRIVATE-MIB", "cjnOspfRouterLsdbRtrId"), (0, "OSPF-PRIVATE-MIB", "cjnOspfRouterLsdbLsId"))
if mibBuilder.loadTexts: cjnOspfRouterLsdbEntry.setStatus('current')
if mibBuilder.loadTexts: cjnOspfRouterLsdbEntry.setDescription('A single Link State Advertisement.')
cjnOspfRouterLsdbAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 11, 1, 1), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfRouterLsdbAreaId.setStatus('current')
if mibBuilder.loadTexts: cjnOspfRouterLsdbAreaId.setDescription('')
cjnOspfRouterLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bcast", 1), ("nbma", 2), ("pointToPoint", 3), ("pointToMultiPoint", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfRouterLsdbType.setStatus('current')
if mibBuilder.loadTexts: cjnOspfRouterLsdbType.setDescription('The type of the link being advertised in the router link state advertisement')
cjnOspfRouterLsdbRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 11, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfRouterLsdbRtrId.setStatus('current')
if mibBuilder.loadTexts: cjnOspfRouterLsdbRtrId.setDescription('')
cjnOspfRouterLsdbLsId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 11, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfRouterLsdbLsId.setStatus('current')
if mibBuilder.loadTexts: cjnOspfRouterLsdbLsId.setDescription('The link state id (1) associated with links advertised in the router link state advertisement')
cjnOspfRouterLsdbLinkData = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfRouterLsdbLinkData.setStatus('current')
if mibBuilder.loadTexts: cjnOspfRouterLsdbLinkData.setDescription('The link data associated with links advertised in the router link state advertisement')
cjnOspfRouterLsdbNumOfTos = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfRouterLsdbNumOfTos.setStatus('current')
if mibBuilder.loadTexts: cjnOspfRouterLsdbNumOfTos.setDescription('The type of service for the link being advertised in the router link state advertisement')
cjnOspfRouterLsdbMet = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfRouterLsdbMet.setStatus('current')
if mibBuilder.loadTexts: cjnOspfRouterLsdbMet.setDescription('The metric type associated with the link being advertised in the router link state advertisement')
cjnOspfRouterLsaHdrTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 12), )
if mibBuilder.loadTexts: cjnOspfRouterLsaHdrTable.setStatus('current')
if mibBuilder.loadTexts: cjnOspfRouterLsaHdrTable.setDescription("The OSPF Process's Router LSA header Database.")
cjnOspfRouterLsaHdrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 12, 1), ).setIndexNames((0, "OSPF-PRIVATE-MIB", "cjnOspfRouterLsaHdrAreaId"), (0, "OSPF-PRIVATE-MIB", "cjnOspfRouterLsaHdrType"), (0, "OSPF-PRIVATE-MIB", "cjnOspfRouterLsaHdrAdvRtrId"), (0, "OSPF-PRIVATE-MIB", "cjnOspfRouterLsaHdrLsId"))
if mibBuilder.loadTexts: cjnOspfRouterLsaHdrEntry.setStatus('current')
if mibBuilder.loadTexts: cjnOspfRouterLsaHdrEntry.setDescription('A single Link State Advertisement.')
cjnOspfRouterLsaHdrAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 12, 1, 1), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfRouterLsaHdrAreaId.setStatus('current')
if mibBuilder.loadTexts: cjnOspfRouterLsaHdrAreaId.setDescription('')
cjnOspfRouterLsaHdrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfRouterLsaHdrType.setStatus('current')
if mibBuilder.loadTexts: cjnOspfRouterLsaHdrType.setDescription('The router link type( 1 )')
cjnOspfRouterLsaHdrAdvRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 12, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfRouterLsaHdrAdvRtrId.setStatus('current')
if mibBuilder.loadTexts: cjnOspfRouterLsaHdrAdvRtrId.setDescription('The router id of the router advertising of the router link state advertisement')
cjnOspfRouterLsaHdrLsId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 12, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfRouterLsaHdrLsId.setStatus('current')
if mibBuilder.loadTexts: cjnOspfRouterLsaHdrLsId.setDescription('The link state id in the router link state advertisement packet header')
cjnOspfRouterLsaHdrAge = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfRouterLsaHdrAge.setStatus('current')
if mibBuilder.loadTexts: cjnOspfRouterLsaHdrAge.setDescription('The age of the router link state advertisement')
cjnOspfRouterLsaHdrChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfRouterLsaHdrChecksum.setStatus('current')
if mibBuilder.loadTexts: cjnOspfRouterLsaHdrChecksum.setDescription('The checksum of the router link state advertisemen')
cjnOspfRouterLsaHdrSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 12, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfRouterLsaHdrSequence.setStatus('current')
if mibBuilder.loadTexts: cjnOspfRouterLsaHdrSequence.setDescription('The sequence number of the router link state advertisement')
cjnOspfRouterLsaHdrFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 12, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfRouterLsaHdrFlags.setStatus('current')
if mibBuilder.loadTexts: cjnOspfRouterLsaHdrFlags.setDescription('The flags in the router link state advertisement')
cjnOspfRouterLsaHdrLinkCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 12, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfRouterLsaHdrLinkCount.setStatus('current')
if mibBuilder.loadTexts: cjnOspfRouterLsaHdrLinkCount.setDescription('number of links being advertised in the router link state advertisement')
cjnOspfSumLsaTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 13), )
if mibBuilder.loadTexts: cjnOspfSumLsaTable.setStatus('current')
if mibBuilder.loadTexts: cjnOspfSumLsaTable.setDescription("The OSPF Process's Link State Database.")
cjnOspfSumLsaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 13, 1), ).setIndexNames((0, "OSPF-PRIVATE-MIB", "cjnOspfSumLsaType"), (0, "OSPF-PRIVATE-MIB", "cjnOspfSumLsaAdvRtrId"), (0, "OSPF-PRIVATE-MIB", "cjnOspfSumLsaLsId"))
if mibBuilder.loadTexts: cjnOspfSumLsaEntry.setStatus('current')
if mibBuilder.loadTexts: cjnOspfSumLsaEntry.setDescription('A single Ext Link State Advertisement.')
cjnOspfSumLsaType = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfSumLsaType.setStatus('current')
if mibBuilder.loadTexts: cjnOspfSumLsaType.setDescription('The type of summary link state advertisement (3 or 4) in the link state advertisement packet header')
cjnOspfSumLsaAdvRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 13, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfSumLsaAdvRtrId.setStatus('current')
if mibBuilder.loadTexts: cjnOspfSumLsaAdvRtrId.setDescription('The router id of the router advertising the summary link state advertisement')
cjnOspfSumLsaLsId = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 13, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfSumLsaLsId.setStatus('current')
if mibBuilder.loadTexts: cjnOspfSumLsaLsId.setDescription('The link state id of the summary link state advertisement packet header')
cjnOspfSumLsaLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 13, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfSumLsaLsdbAge.setStatus('current')
if mibBuilder.loadTexts: cjnOspfSumLsaLsdbAge.setDescription('The age of the summary link state advertisement')
cjnOspfSumLsaChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfSumLsaChecksum.setStatus('current')
if mibBuilder.loadTexts: cjnOspfSumLsaChecksum.setDescription('The checksum of the summary link state advertisement')
cjnOspfSumLsaSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 13, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfSumLsaSequence.setStatus('current')
if mibBuilder.loadTexts: cjnOspfSumLsaSequence.setDescription('The checksum of the summary link state advertisement')
cjnOspfSumLsaMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 13, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfSumLsaMask.setStatus('current')
if mibBuilder.loadTexts: cjnOspfSumLsaMask.setDescription('The network mask of the type 3 summay link state advertisement')
cjnOspfSumLsaTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 13, 1, 8), TOSType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfSumLsaTOS.setStatus('current')
if mibBuilder.loadTexts: cjnOspfSumLsaTOS.setDescription('The type of service for the network advertised by the type 3 summary link state advertisement')
cjnOspfSumLsaMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 2, 9, 13, 1, 9), Metric()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnOspfSumLsaMetric.setStatus('current')
if mibBuilder.loadTexts: cjnOspfSumLsaMetric.setDescription('The metric type for the network advertised by the type 3 summary link state advertisemen')
mibBuilder.exportSymbols("OSPF-PRIVATE-MIB", cjnOspfIfCost=cjnOspfIfCost, cjnOspfSumLsaTable=cjnOspfSumLsaTable, cjnOspfVirtIfHelloTimer=cjnOspfVirtIfHelloTimer, cjnOspfLsaHdrAreaId=cjnOspfLsaHdrAreaId, cjnOspfNetLsdbEntry=cjnOspfNetLsdbEntry, cjnOspfSumLsaEntry=cjnOspfSumLsaEntry, cjnOspfCnfgRowStatus=cjnOspfCnfgRowStatus, cjnOspfVirtIfMd5Key=cjnOspfVirtIfMd5Key, cjnOspfAsbdrStatus=cjnOspfAsbdrStatus, cjnOspfNbrRtrId=cjnOspfNbrRtrId, cjnOspfRouterLsdbTable=cjnOspfRouterLsdbTable, cjnOspfIfMtu=cjnOspfIfMtu, cjnOspfRouterLsdbMet=cjnOspfRouterLsdbMet, cjnOspfTOSCount=cjnOspfTOSCount, cjnOspfVirtIfTable=cjnOspfVirtIfTable, cjnOspfNetLsdbType=cjnOspfNetLsdbType, cjnOspfExtLsdbType=cjnOspfExtLsdbType, cjnOspfVirtIfRxmtTimer=cjnOspfVirtIfRxmtTimer, cjnOspfCnfgRangeTable=cjnOspfCnfgRangeTable, cjnOspfSumLsaChecksum=cjnOspfSumLsaChecksum, cjnOspfNetLsdbLsdbChecksum=cjnOspfNetLsdbLsdbChecksum, cjnOspfTxLsaAckCnt=cjnOspfTxLsaAckCnt, cjnOspfRouterId=cjnOspfRouterId, cjnOspfAreaNetCnt=cjnOspfAreaNetCnt, cjnOspfExtLsdbSequence=cjnOspfExtLsdbSequence, cjnOspfLsaHdrAdvRtrId=cjnOspfLsaHdrAdvRtrId, cjnOspfAbdrStatus=cjnOspfAbdrStatus, cjnOspfTxDBDescCnt=cjnOspfTxDBDescCnt, cjnOspfLsaHdrTable=cjnOspfLsaHdrTable, cjnOspfAreaType=cjnOspfAreaType, cjnOspfTxHelloCnt=cjnOspfTxHelloCnt, cjnOspfRxLsaAckCnt=cjnOspfRxLsaAckCnt, cjnOspfRouterLsaHdrAreaId=cjnOspfRouterLsaHdrAreaId, cjnOspfRouterLsdbEntry=cjnOspfRouterLsdbEntry, cjnOspfIfHelloTimer=cjnOspfIfHelloTimer, PYSNMP_MODULE_ID=cjnOspf, cjnOspfVirtIfNbrRtrId=cjnOspfVirtIfNbrRtrId, cjnOspfAreaTable=cjnOspfAreaTable, cjnOspfIfMd5KeyFlags=cjnOspfIfMd5KeyFlags, cjnOspfSumLsaMetric=cjnOspfSumLsaMetric, cjnOspfLsaHdrLsId=cjnOspfLsaHdrLsId, cjnOspfTxLsaReqCnt=cjnOspfTxLsaReqCnt, cjnOspfLsaHdrChecksum=cjnOspfLsaHdrChecksum, cjnOspfAreaTranslate=cjnOspfAreaTranslate, cjnOspfRouterLsaHdrType=cjnOspfRouterLsaHdrType, cjnOspfSpfStaticExtType=cjnOspfSpfStaticExtType, cjnOspfIfEntry=cjnOspfIfEntry, cjnOspfRxNewLsa=cjnOspfRxNewLsa, cjnOspfVirtIfDrState=cjnOspfVirtIfDrState, cjnOspfSumLsaSequence=cjnOspfSumLsaSequence, cjnOspfNbrDDNum=cjnOspfNbrDDNum, cjnOspfExtLsdbRouteTag=cjnOspfExtLsdbRouteTag, cjnOspfNetLsdbTable=cjnOspfNetLsdbTable, cjnOspfNetLsdbAdvRtrId=cjnOspfNetLsdbAdvRtrId, cjnOspfAreaSpfRuns=cjnOspfAreaSpfRuns, cjnOspfAreaAsbdrCnt=cjnOspfAreaAsbdrCnt, cjnOspfVirtIfDrIpAddr=cjnOspfVirtIfDrIpAddr, cjnOspfIfDrState=cjnOspfIfDrState, cjnOspfNetLsdbAge=cjnOspfNetLsdbAge, cjnOspfSumLsaLsId=cjnOspfSumLsaLsId, cjnOspfVirtIfDrRouterId=cjnOspfVirtIfDrRouterId, cjnOspfIfPollInterval=cjnOspfIfPollInterval, cjnOspfNbrEntry=cjnOspfNbrEntry, cjnOspfExtLsdbLsId=cjnOspfExtLsdbLsId, cjnOspfIfRowStatus=cjnOspfIfRowStatus, cjnOspfCnfgRangeEntry=cjnOspfCnfgRangeEntry, cjnOspfAutoVLinkCreate=cjnOspfAutoVLinkCreate, cjnOspfSumLsaAdvRtrId=cjnOspfSumLsaAdvRtrId, cjnOspfPathSplit=cjnOspfPathSplit, cjnOspfExtLsdbAge=cjnOspfExtLsdbAge, cjnOspfRouterLsdbType=cjnOspfRouterLsdbType, cjnOspfVirtIfRtrPriority=cjnOspfVirtIfRtrPriority, cjnOspfRxLsaUpdCnt=cjnOspfRxLsaUpdCnt, cjnOspfIfAuthType=cjnOspfIfAuthType, cjnOspfIfDrRouterId=cjnOspfIfDrRouterId, cjnOspfVirtIfRowStatus=cjnOspfVirtIfRowStatus, cjnOspfCnfgRangeAdv=cjnOspfCnfgRangeAdv, cjnOspfNetLsdbSequence=cjnOspfNetLsdbSequence, cjnOspfRouterLsaHdrTable=cjnOspfRouterLsaHdrTable, cjnOspfRouterLsaHdrChecksum=cjnOspfRouterLsaHdrChecksum, cjnOspfNetLsdbAreaId=cjnOspfNetLsdbAreaId, cjnOspfIfTable=cjnOspfIfTable, cjnOspfExtLsdForwardingAddress=cjnOspfExtLsdForwardingAddress, cjnOspfSumLsaType=cjnOspfSumLsaType, cjnOspfNbrState=cjnOspfNbrState, cjnOspfCnfgRangeIpAddr=cjnOspfCnfgRangeIpAddr, cjnOspfExtLsdbTable=cjnOspfExtLsdbTable, cjnOspfVirtIfMd5KeyFlags=cjnOspfVirtIfMd5KeyFlags, cjnOspfRouterLsdbLinkData=cjnOspfRouterLsdbLinkData, cjnOspfAreaT3Filter=cjnOspfAreaT3Filter, cjnOspfIfMask=cjnOspfIfMask, cjnOspfAreaEntry=cjnOspfAreaEntry, cjnOspfRouterLsaHdrEntry=cjnOspfRouterLsaHdrEntry, cjnOspfIfTransitDelay=cjnOspfIfTransitDelay, cjnOspfRxHelloCnt=cjnOspfRxHelloCnt, cjnOspfIfMd5Key=cjnOspfIfMd5Key, cjnOspfCnfgRangeMask=cjnOspfCnfgRangeMask, cjnOspfExtLsdbEntry=cjnOspfExtLsdbEntry, cjnOspfGblStatsGroup=cjnOspfGblStatsGroup, cjnOspfVirtIfAuthKey=cjnOspfVirtIfAuthKey, cjnOspfIfIpAddress=cjnOspfIfIpAddress, cjnOspfCnfgRangeAreaId=cjnOspfCnfgRangeAreaId, cjnOspfExtLsdbTOS=cjnOspfExtLsdbTOS, cjnOspfLowExtType=cjnOspfLowExtType, cjnOspfRouterLsaHdrSequence=cjnOspfRouterLsaHdrSequence, cjnOspfVirtIfAreaId=cjnOspfVirtIfAreaId, cjnOspfRouterLsaHdrLsId=cjnOspfRouterLsaHdrLsId, cjnOspfSpfSuspendTime=cjnOspfSpfSuspendTime, cjnOspfIfType=cjnOspfIfType, cjnOspfRxDBDescCnt=cjnOspfRxDBDescCnt, cjnOspfAreaStubCost=cjnOspfAreaStubCost, cjnOspfIfMd5KeyId=cjnOspfIfMd5KeyId, cjnOspf=cjnOspf, cjnOspfSpfState=cjnOspfSpfState, cjnOspfIfBDrRouterId=cjnOspfIfBDrRouterId, cjnOspfNbrDrIpAddr=cjnOspfNbrDrIpAddr, cjnOspfVirtIfMd5KeyId=cjnOspfVirtIfMd5KeyId, cjnOspfTraceFlags=cjnOspfTraceFlags, cjnOspfGblConfGroup=cjnOspfGblConfGroup, cjnOspfAreaRowStatus=cjnOspfAreaRowStatus, cjnOspfAreaAbdrCnt=cjnOspfAreaAbdrCnt, cjnOspfExtLsdNetMask=cjnOspfExtLsdNetMask, cjnOspfRipExtType=cjnOspfRipExtType, cjnOspfIfAreaId=cjnOspfIfAreaId, cjnOspfVirtIfDeadInterval=cjnOspfVirtIfDeadInterval, cjnOspfNbrMasterSlave=cjnOspfNbrMasterSlave, cjnOspfLsaHdrSequence=cjnOspfLsaHdrSequence, cjnOspfVirtIfTransitDelay=cjnOspfVirtIfTransitDelay, cjnOspfNetLsdbLsId=cjnOspfNetLsdbLsId, cjnOspfIfRtrPriority=cjnOspfIfRtrPriority, cjnOspfSumLsaMask=cjnOspfSumLsaMask, cjnOspfIfAuthKey=cjnOspfIfAuthKey, cjnOspfNbrIpAddr=cjnOspfNbrIpAddr, cjnOspfPeMax=cjnOspfPeMax, cjnOspfLsaHdrEntry=cjnOspfLsaHdrEntry, cjnOspfLocalExtType=cjnOspfLocalExtType, cjnOspfIfDeadInterval=cjnOspfIfDeadInterval, cjnOspfTxNewLsa=cjnOspfTxNewLsa, cjnOspfIfDrIpAddr=cjnOspfIfDrIpAddr, cjnOspfNbrTable=cjnOspfNbrTable, cjnOspfExtLsdbMetric=cjnOspfExtLsdbMetric, cjnOspfRouterLsdbNumOfTos=cjnOspfRouterLsdbNumOfTos, cjnOspfVirtIfEntry=cjnOspfVirtIfEntry, cjnOspfRouterLsaHdrAge=cjnOspfRouterLsaHdrAge, cjnOspfIfRxmtTimer=cjnOspfIfRxmtTimer, cjnOspfExtLsdbAdvRtrId=cjnOspfExtLsdbAdvRtrId, cjnOspfSumLsaTOS=cjnOspfSumLsaTOS, cjnOspfLsaHdrLsaType=cjnOspfLsaHdrLsaType, cjnOspfSumLsaLsdbAge=cjnOspfSumLsaLsdbAge, cjnOspfRouterLsdbAreaId=cjnOspfRouterLsdbAreaId, cjnOspfNbrBackUpIpAddr=cjnOspfNbrBackUpIpAddr, cjnOspfRouterLsaHdrFlags=cjnOspfRouterLsaHdrFlags, cjnOspfRouterLsdbLsId=cjnOspfRouterLsdbLsId, cjnOspfRouterLsaHdrAdvRtrId=cjnOspfRouterLsaHdrAdvRtrId, cjnOspfSpfHold=cjnOspfSpfHold, cjnOspfRxLsaReqCnt=cjnOspfRxLsaReqCnt, cjnOspfVirtIfBDrRouterId=cjnOspfVirtIfBDrRouterId, cjnOspfRouterLsaHdrLinkCount=cjnOspfRouterLsaHdrLinkCount, cjnOspfAreaId=cjnOspfAreaId, cjnOspfNetLsdNetMask=cjnOspfNetLsdNetMask, cjnOspfVirtIfAuthType=cjnOspfVirtIfAuthType, cjnOspfRouterLsdbRtrId=cjnOspfRouterLsdbRtrId, cjnOspfLsaHdrLsaAge=cjnOspfLsaHdrLsaAge, cjnOspfTxLsaUpdCnt=cjnOspfTxLsaUpdCnt, cjnOspfRunSpf=cjnOspfRunSpf, cjnOspfExtLsdbLsdbChecksum=cjnOspfExtLsdbLsdbChecksum, cjnOspfGlobalStatsReset=cjnOspfGlobalStatsReset)
