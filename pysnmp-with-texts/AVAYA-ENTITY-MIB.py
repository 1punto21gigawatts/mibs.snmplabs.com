#
# PySNMP MIB module AVAYA-ENTITY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AVAYA-ENTITY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:32:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
lsg, = mibBuilder.importSymbols("AVAYAGEN-MIB", "lsg")
entPhysicalIndex, entPhysicalParentRelPos, entPhysicalDescr, PhysicalIndex = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex", "entPhysicalParentRelPos", "entPhysicalDescr", "PhysicalIndex")
EntitySensorValue, entPhySensorValue = mibBuilder.importSymbols("ENTITY-SENSOR-MIB", "EntitySensorValue", "entPhySensorValue")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibIdentifier, Bits, ObjectIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter32, TimeTicks, Unsigned32, Counter64, Integer32, ModuleIdentity, NotificationType, IpAddress, mib_2 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Bits", "ObjectIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter32", "TimeTicks", "Unsigned32", "Counter64", "Integer32", "ModuleIdentity", "NotificationType", "IpAddress", "mib-2")
TextualConvention, TimeStamp, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeStamp", "DisplayString")
avayaEntity = ModuleIdentity((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99))
if mibBuilder.loadTexts: avayaEntity.setLastUpdated('200612251800Z')
if mibBuilder.loadTexts: avayaEntity.setOrganization('Avaya Inc.')
if mibBuilder.loadTexts: avayaEntity.setContactInfo(' Dan Gluskin Avaya Inc. Tel: +972-3-645-7561 Email: dgluskin@avaya.com Postal: Atidim technology Park, Bldg. #3 Tel Aviv, Israel, 61131 Dan Romascanu Avaya Inc. Tel: +972-3-645-8414 Email: dromasca@avaya.com Postal: Atidim technology Park, Bldg. #3 Tel Aviv, Israel, 61131 ')
if mibBuilder.loadTexts: avayaEntity.setDescription('This module defines private extensions for Entity MIB')
class AvEntPhyItuPerceivedSeverity(TextualConvention, Integer32):
    reference = "ITU Recommendation M.3100, 'Generic Network Information Model', 1995 ITU Recommendation X.733, 'Information Technology - Open Systems Interconnection - System Management: Alarm Reporting Function', 1992"
    description = 'ITU perceived severity values'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("cleared", 1), ("indeterminate", 2), ("critical", 3), ("major", 4), ("minor", 5), ("warning", 6))

avEntPhySensorTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 1), )
if mibBuilder.loadTexts: avEntPhySensorTable.setStatus('current')
if mibBuilder.loadTexts: avEntPhySensorTable.setDescription('This table extends entPhySensorTable with thresholds on the sensors.')
avEntPhySensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: avEntPhySensorEntry.setStatus('current')
if mibBuilder.loadTexts: avEntPhySensorEntry.setDescription('Thresholds for sensors described in entPhySensorTable. The Threshold values correspond to entPhySensorValue. Entries are created in this table by the agent. An entry for each physical sensor SHOULD be created at the same time as the associated entPhysicalEntry. An entry SHOULD be destroyed if the associated entPhysicalEntry is destroyed. No entry means that no thresholds are defined for the corresponding sensor')
avEntPhySensorHiShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 1, 1, 1), EntitySensorValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avEntPhySensorHiShutdown.setStatus('current')
if mibBuilder.loadTexts: avEntPhySensorHiShutdown.setDescription('The system shuts down when the sensor reading reaches this value')
avEntPhySensorHiWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 1, 1, 2), EntitySensorValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avEntPhySensorHiWarning.setStatus('current')
if mibBuilder.loadTexts: avEntPhySensorHiWarning.setDescription('The system generates a warning event when the sensor reading rises and crosses this value')
avEntPhySensorHiWarningClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 1, 1, 3), EntitySensorValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avEntPhySensorHiWarningClear.setStatus('current')
if mibBuilder.loadTexts: avEntPhySensorHiWarningClear.setDescription('The system generates a warning-clear event when the sensor reading falls and crosses below this value')
avEntPhySensorLoWarningClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 1, 1, 4), EntitySensorValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avEntPhySensorLoWarningClear.setStatus('current')
if mibBuilder.loadTexts: avEntPhySensorLoWarningClear.setDescription('The system generates a warning-clear event when the sensor reading rises and crosses this value ')
avEntPhySensorLoWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 1, 1, 5), EntitySensorValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avEntPhySensorLoWarning.setStatus('current')
if mibBuilder.loadTexts: avEntPhySensorLoWarning.setDescription('The system generates a warning event when the sensor reading falls and crosses this value')
avEntPhySensorLoShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 1, 1, 6), EntitySensorValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avEntPhySensorLoShutdown.setStatus('current')
if mibBuilder.loadTexts: avEntPhySensorLoShutdown.setDescription('The system shuts down if the sensor reaches this value')
avEntPhySensorEventSupportMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avEntPhySensorEventSupportMask.setStatus('current')
if mibBuilder.loadTexts: avEntPhySensorEventSupportMask.setDescription(' A trap and an event is generated upon threshold crossing if the correspond bit is set. Note that there may be other trap filtering mechanisms. 0/0: hiShutdown(0) 0/1: hiWarning(1) 0/2: hiWarningClear(2) 0/3: loWarningClear(3) 0/4: loWarning(4) 0/5: loShowdown(5)')
avEntTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 2))
avEntTrapsV3separator = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 2, 0))
avEntFanFlt = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 2, 0, 1)).setObjects(("AVAYA-ENTITY-MIB", "avEntPhysicalIndex"), ("ENTITY-MIB", "entPhysicalDescr"), ("ENTITY-SENSOR-MIB", "entPhySensorValue"), ("AVAYA-ENTITY-MIB", "avEntPhySensorLoWarning"))
if mibBuilder.loadTexts: avEntFanFlt.setStatus('current')
if mibBuilder.loadTexts: avEntFanFlt.setDescription('Fan Fault')
avEntFanOk = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 2, 0, 2)).setObjects(("AVAYA-ENTITY-MIB", "avEntPhysicalIndex"), ("ENTITY-MIB", "entPhysicalDescr"), ("ENTITY-SENSOR-MIB", "entPhySensorValue"), ("AVAYA-ENTITY-MIB", "avEntPhySensorLoWarningClear"))
if mibBuilder.loadTexts: avEntFanOk.setStatus('current')
if mibBuilder.loadTexts: avEntFanOk.setDescription('Fan Fault')
avEnt48vPwrFlt = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 2, 0, 4)).setObjects(("AVAYA-ENTITY-MIB", "avEntPhysicalIndex"), ("ENTITY-MIB", "entPhysicalDescr"), ("ENTITY-SENSOR-MIB", "entPhySensorValue"), ("AVAYA-ENTITY-MIB", "avEntPhySensorHiWarning"), ("AVAYA-ENTITY-MIB", "avEntPhySensorLoWarning"), ("ENTITY-MIB", "entPhysicalParentRelPos"))
if mibBuilder.loadTexts: avEnt48vPwrFlt.setStatus('current')
if mibBuilder.loadTexts: avEnt48vPwrFlt.setDescription('48V power supply fault')
avEnt48vPwrFltOk = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 2, 0, 5)).setObjects(("AVAYA-ENTITY-MIB", "avEntPhysicalIndex"), ("ENTITY-MIB", "entPhysicalDescr"), ("ENTITY-SENSOR-MIB", "entPhySensorValue"), ("AVAYA-ENTITY-MIB", "avEntPhySensorHiWarningClear"), ("AVAYA-ENTITY-MIB", "avEntPhySensorLoWarningClear"), ("ENTITY-MIB", "entPhysicalParentRelPos"))
if mibBuilder.loadTexts: avEnt48vPwrFltOk.setStatus('current')
if mibBuilder.loadTexts: avEnt48vPwrFltOk.setDescription('48V power supply fault clear')
avEnt5vPwrFlt = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 2, 0, 7)).setObjects(("AVAYA-ENTITY-MIB", "avEntPhysicalIndex"), ("ENTITY-MIB", "entPhysicalDescr"), ("ENTITY-SENSOR-MIB", "entPhySensorValue"), ("AVAYA-ENTITY-MIB", "avEntPhySensorHiWarning"), ("AVAYA-ENTITY-MIB", "avEntPhySensorLoWarning"), ("ENTITY-MIB", "entPhysicalParentRelPos"))
if mibBuilder.loadTexts: avEnt5vPwrFlt.setStatus('current')
if mibBuilder.loadTexts: avEnt5vPwrFlt.setDescription('5V power supply fault')
avEnt5vPwrFltOk = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 2, 0, 8)).setObjects(("AVAYA-ENTITY-MIB", "avEntPhysicalIndex"), ("ENTITY-MIB", "entPhysicalDescr"), ("ENTITY-SENSOR-MIB", "entPhySensorValue"), ("AVAYA-ENTITY-MIB", "avEntPhySensorHiWarningClear"), ("AVAYA-ENTITY-MIB", "avEntPhySensorLoWarningClear"), ("ENTITY-MIB", "entPhysicalParentRelPos"))
if mibBuilder.loadTexts: avEnt5vPwrFltOk.setStatus('current')
if mibBuilder.loadTexts: avEnt5vPwrFltOk.setDescription('5V power supply fault clear')
avEnt3300mvPwrFlt = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 2, 0, 10)).setObjects(("AVAYA-ENTITY-MIB", "avEntPhysicalIndex"), ("ENTITY-MIB", "entPhysicalDescr"), ("ENTITY-SENSOR-MIB", "entPhySensorValue"), ("AVAYA-ENTITY-MIB", "avEntPhySensorHiWarning"), ("AVAYA-ENTITY-MIB", "avEntPhySensorLoWarning"), ("ENTITY-MIB", "entPhysicalParentRelPos"))
if mibBuilder.loadTexts: avEnt3300mvPwrFlt.setStatus('current')
if mibBuilder.loadTexts: avEnt3300mvPwrFlt.setDescription('3.3V (3300mv) power supply fault')
avEnt3300mvPwrFltOk = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 2, 0, 11)).setObjects(("AVAYA-ENTITY-MIB", "avEntPhysicalIndex"), ("ENTITY-MIB", "entPhysicalDescr"), ("ENTITY-SENSOR-MIB", "entPhySensorValue"), ("AVAYA-ENTITY-MIB", "avEntPhySensorHiWarningClear"), ("AVAYA-ENTITY-MIB", "avEntPhySensorLoWarningClear"), ("ENTITY-MIB", "entPhysicalParentRelPos"))
if mibBuilder.loadTexts: avEnt3300mvPwrFltOk.setStatus('current')
if mibBuilder.loadTexts: avEnt3300mvPwrFltOk.setDescription('3.3V (3300mv) power supply fault clear')
avEnt2500mvPwrFlt = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 2, 0, 13)).setObjects(("AVAYA-ENTITY-MIB", "avEntPhysicalIndex"), ("ENTITY-MIB", "entPhysicalDescr"), ("ENTITY-SENSOR-MIB", "entPhySensorValue"), ("AVAYA-ENTITY-MIB", "avEntPhySensorHiWarning"), ("AVAYA-ENTITY-MIB", "avEntPhySensorLoWarning"), ("ENTITY-MIB", "entPhysicalParentRelPos"))
if mibBuilder.loadTexts: avEnt2500mvPwrFlt.setStatus('current')
if mibBuilder.loadTexts: avEnt2500mvPwrFlt.setDescription('2.5V (2500mv) power supply fault')
avEnt2500mvPwrFltOk = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 2, 0, 14)).setObjects(("AVAYA-ENTITY-MIB", "avEntPhysicalIndex"), ("ENTITY-MIB", "entPhysicalDescr"), ("ENTITY-SENSOR-MIB", "entPhySensorValue"), ("AVAYA-ENTITY-MIB", "avEntPhySensorHiWarningClear"), ("AVAYA-ENTITY-MIB", "avEntPhySensorLoWarningClear"), ("ENTITY-MIB", "entPhysicalParentRelPos"))
if mibBuilder.loadTexts: avEnt2500mvPwrFltOk.setStatus('current')
if mibBuilder.loadTexts: avEnt2500mvPwrFltOk.setDescription('2.5V (2500mv) power supply fault clear')
avEnt1800mvPwrFlt = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 2, 0, 16)).setObjects(("AVAYA-ENTITY-MIB", "avEntPhysicalIndex"), ("ENTITY-MIB", "entPhysicalDescr"), ("ENTITY-SENSOR-MIB", "entPhySensorValue"), ("AVAYA-ENTITY-MIB", "avEntPhySensorHiWarning"), ("AVAYA-ENTITY-MIB", "avEntPhySensorLoWarning"), ("ENTITY-MIB", "entPhysicalParentRelPos"))
if mibBuilder.loadTexts: avEnt1800mvPwrFlt.setStatus('current')
if mibBuilder.loadTexts: avEnt1800mvPwrFlt.setDescription('1.8V (1800mv) power supply fault')
avEnt1800mvPwrFltOk = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 2, 0, 17)).setObjects(("AVAYA-ENTITY-MIB", "avEntPhysicalIndex"), ("ENTITY-MIB", "entPhysicalDescr"), ("ENTITY-SENSOR-MIB", "entPhySensorValue"), ("AVAYA-ENTITY-MIB", "avEntPhySensorHiWarningClear"), ("AVAYA-ENTITY-MIB", "avEntPhySensorLoWarningClear"), ("ENTITY-MIB", "entPhysicalParentRelPos"))
if mibBuilder.loadTexts: avEnt1800mvPwrFltOk.setStatus('current')
if mibBuilder.loadTexts: avEnt1800mvPwrFltOk.setDescription('1.8V (1800mv) power supply fault clear')
avEnt1600mvPwrFlt = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 2, 0, 19)).setObjects(("AVAYA-ENTITY-MIB", "avEntPhysicalIndex"), ("ENTITY-MIB", "entPhysicalDescr"), ("ENTITY-SENSOR-MIB", "entPhySensorValue"), ("AVAYA-ENTITY-MIB", "avEntPhySensorHiWarning"), ("AVAYA-ENTITY-MIB", "avEntPhySensorLoWarning"), ("ENTITY-MIB", "entPhysicalParentRelPos"))
if mibBuilder.loadTexts: avEnt1600mvPwrFlt.setStatus('current')
if mibBuilder.loadTexts: avEnt1600mvPwrFlt.setDescription('1.6V (1600mv) power supply fault')
avEnt1600mvPwrFltOk = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 2, 0, 20)).setObjects(("AVAYA-ENTITY-MIB", "avEntPhysicalIndex"), ("ENTITY-MIB", "entPhysicalDescr"), ("ENTITY-SENSOR-MIB", "entPhySensorValue"), ("AVAYA-ENTITY-MIB", "avEntPhySensorHiWarningClear"), ("AVAYA-ENTITY-MIB", "avEntPhySensorLoWarningClear"), ("ENTITY-MIB", "entPhysicalParentRelPos"))
if mibBuilder.loadTexts: avEnt1600mvPwrFltOk.setStatus('current')
if mibBuilder.loadTexts: avEnt1600mvPwrFltOk.setDescription('1.6V (1600mv) power supply fault clear')
avEntAmbientHiTempFlt = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 2, 0, 22)).setObjects(("AVAYA-ENTITY-MIB", "avEntPhysicalIndex"), ("ENTITY-MIB", "entPhysicalDescr"), ("ENTITY-SENSOR-MIB", "entPhySensorValue"), ("AVAYA-ENTITY-MIB", "avEntPhySensorHiWarning"), ("ENTITY-MIB", "entPhysicalParentRelPos"))
if mibBuilder.loadTexts: avEntAmbientHiTempFlt.setStatus('current')
if mibBuilder.loadTexts: avEntAmbientHiTempFlt.setDescription('Ambient High Temprature fault')
avEntAmbientHiTempFltOk = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 2, 0, 23)).setObjects(("AVAYA-ENTITY-MIB", "avEntPhysicalIndex"), ("ENTITY-MIB", "entPhysicalDescr"), ("ENTITY-SENSOR-MIB", "entPhySensorValue"), ("AVAYA-ENTITY-MIB", "avEntPhySensorHiWarningClear"), ("ENTITY-MIB", "entPhysicalParentRelPos"))
if mibBuilder.loadTexts: avEntAmbientHiTempFltOk.setStatus('current')
if mibBuilder.loadTexts: avEntAmbientHiTempFltOk.setDescription('Ambient High Temprature clear')
avEntAmbientLoTempFlt = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 2, 0, 24)).setObjects(("AVAYA-ENTITY-MIB", "avEntPhysicalIndex"), ("ENTITY-MIB", "entPhysicalDescr"), ("ENTITY-SENSOR-MIB", "entPhySensorValue"), ("AVAYA-ENTITY-MIB", "avEntPhySensorLoWarning"), ("ENTITY-MIB", "entPhysicalParentRelPos"))
if mibBuilder.loadTexts: avEntAmbientLoTempFlt.setStatus('current')
if mibBuilder.loadTexts: avEntAmbientLoTempFlt.setDescription('Ambient Low Temprature fault')
avEntAmbientLoTempFltOk = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 2, 0, 25)).setObjects(("AVAYA-ENTITY-MIB", "avEntPhysicalIndex"), ("ENTITY-MIB", "entPhysicalDescr"), ("ENTITY-SENSOR-MIB", "entPhySensorValue"), ("AVAYA-ENTITY-MIB", "avEntPhySensorLoWarningClear"), ("ENTITY-MIB", "entPhysicalParentRelPos"))
if mibBuilder.loadTexts: avEntAmbientLoTempFltOk.setStatus('current')
if mibBuilder.loadTexts: avEntAmbientLoTempFltOk.setDescription('Ambient High Temprature clear')
avEntPhyUSBDevices = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 3))
avEntPhyUSBDevicesTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 3, 0))
avEntPhyUSBDeviceRemovalOnBackupRestoreOperation = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 3, 0, 1)).setObjects(("AVAYA-ENTITY-MIB", "avEntPhyProductId"), ("AVAYA-ENTITY-MIB", "avEntPhySeverity"))
if mibBuilder.loadTexts: avEntPhyUSBDeviceRemovalOnBackupRestoreOperation.setStatus('current')
if mibBuilder.loadTexts: avEntPhyUSBDeviceRemovalOnBackupRestoreOperation.setDescription('The notification is based on usb mass storage device removal during backup/restore operation to it. If other usb devices are removed during this operation then no harm/syslog. ')
avEntPhyUSBDeviceInsecureRemoval = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 3, 0, 2)).setObjects(("AVAYA-ENTITY-MIB", "avEntPhysicalIndex"), ("ENTITY-MIB", "entPhysicalDescr"), ("AVAYA-ENTITY-MIB", "avEntPhyUSBDeviceUSBSupportVersion"), ("AVAYA-ENTITY-MIB", "avEntPhyUSBDeviceSpeed"), ("AVAYA-ENTITY-MIB", "avEntPhyUSBDevicePower"), ("AVAYA-ENTITY-MIB", "avEntPhyProductId"), ("AVAYA-ENTITY-MIB", "avEntPhySeverity"))
if mibBuilder.loadTexts: avEntPhyUSBDeviceInsecureRemoval.setStatus('current')
if mibBuilder.loadTexts: avEntPhyUSBDeviceInsecureRemoval.setDescription('The notification is based on usb device insecurely removal. ')
avEntPhyUSBDevicePowerFailure = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 3, 0, 3)).setObjects(("AVAYA-ENTITY-MIB", "avEntPhysicalIndex"), ("ENTITY-MIB", "entPhysicalDescr"), ("AVAYA-ENTITY-MIB", "avEntPhyUSBDeviceUSBSupportVersion"), ("AVAYA-ENTITY-MIB", "avEntPhyUSBDeviceSpeed"), ("AVAYA-ENTITY-MIB", "avEntPhyUSBDevicePower"), ("AVAYA-ENTITY-MIB", "avEntPhyProductId"), ("AVAYA-ENTITY-MIB", "avEntPhySeverity"))
if mibBuilder.loadTexts: avEntPhyUSBDevicePowerFailure.setStatus('current')
if mibBuilder.loadTexts: avEntPhyUSBDevicePowerFailure.setDescription('The notification is based on usb device lack of power. For cases as: a. Connecting device which requires more power then gateway can supply. b. Connecting USB device to non power hub which has not enough power. C. Disconnecting power from the USB HUB and there is not enough power to drive the usb devices. D. Disconnecting power from a usb device which requires external power. E. Disconnecting power from USB device and the gateway/USB Hub can not supply power to it. ')
avEntPhyUSBDeviceNotSupported = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 3, 0, 4)).setObjects(("AVAYA-ENTITY-MIB", "avEntPhysicalIndex"), ("ENTITY-MIB", "entPhysicalDescr"), ("AVAYA-ENTITY-MIB", "avEntPhyUSBDeviceUSBSupportVersion"), ("AVAYA-ENTITY-MIB", "avEntPhyUSBDeviceSpeed"), ("AVAYA-ENTITY-MIB", "avEntPhyUSBDevicePower"), ("AVAYA-ENTITY-MIB", "avEntPhyProductId"), ("AVAYA-ENTITY-MIB", "avEntPhySeverity"))
if mibBuilder.loadTexts: avEntPhyUSBDeviceNotSupported.setStatus('current')
if mibBuilder.loadTexts: avEntPhyUSBDeviceNotSupported.setDescription('The notification is based on attaching non supported usb device to the gateway. The Gateways supports usb mass storage devices based on flash drives that their sub class is SCSI and their protocol is Bulk Only Transport. The Gateways supports usb modems that complies to sub class SFF-8020i, MMC-2 (ATAPI) and protocol Control/Bulk/Interrupt protocol (with no command completion Interrupt). ')
avEntPhyUSBDeviceExceedMaxNumber = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 3, 0, 5)).setObjects(("AVAYA-ENTITY-MIB", "avEntPhysicalIndex"), ("ENTITY-MIB", "entPhysicalDescr"), ("AVAYA-ENTITY-MIB", "avEntPhyUSBDeviceUSBSupportVersion"), ("AVAYA-ENTITY-MIB", "avEntPhyUSBDeviceSpeed"), ("AVAYA-ENTITY-MIB", "avEntPhyUSBDevicePower"), ("AVAYA-ENTITY-MIB", "avEntPhyProductId"), ("AVAYA-ENTITY-MIB", "avEntPhySeverity"))
if mibBuilder.loadTexts: avEntPhyUSBDeviceExceedMaxNumber.setStatus('current')
if mibBuilder.loadTexts: avEntPhyUSBDeviceExceedMaxNumber.setDescription('The notification is based on reaching the max number of usb devices connected to the gateway. G250/G350 allows only USB Modem with only one usb mass storage device at the same time. ')
avEntPhyUSBFileSystemNotSupported = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 3, 0, 6)).setObjects(("AVAYA-ENTITY-MIB", "avEntPhysicalIndex"), ("ENTITY-MIB", "entPhysicalDescr"), ("AVAYA-ENTITY-MIB", "avEntPhyUSBDeviceUSBSupportVersion"), ("AVAYA-ENTITY-MIB", "avEntPhyUSBDeviceSpeed"), ("AVAYA-ENTITY-MIB", "avEntPhyUSBDevicePower"), ("AVAYA-ENTITY-MIB", "avEntPhyProductId"), ("AVAYA-ENTITY-MIB", "avEntPhySeverity"))
if mibBuilder.loadTexts: avEntPhyUSBFileSystemNotSupported.setStatus('current')
if mibBuilder.loadTexts: avEntPhyUSBFileSystemNotSupported.setDescription('The notification is based on reaching connecting USB mass storage device with file system that is not supported. ')
avEntPhyUSBDevicesTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 3, 1), )
if mibBuilder.loadTexts: avEntPhyUSBDevicesTable.setStatus('current')
if mibBuilder.loadTexts: avEntPhyUSBDevicesTable.setDescription('This table extends entPhysicalTable with USB devices parameters.')
avEntPhyUSBDevicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 3, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: avEntPhyUSBDevicesEntry.setStatus('current')
if mibBuilder.loadTexts: avEntPhyUSBDevicesEntry.setDescription('This table includes extension to entPhysicalTable with usb devices parameters.')
avEntPhyUSBDeviceUSBSupportVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avEntPhyUSBDeviceUSBSupportVersion.setStatus('current')
if mibBuilder.loadTexts: avEntPhyUSBDeviceUSBSupportVersion.setDescription('The USB standard version. Possible values are: 1.1 and 2.0.')
avEntPhyUSBDeviceClassCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avEntPhyUSBDeviceClassCode.setStatus('current')
if mibBuilder.loadTexts: avEntPhyUSBDeviceClassCode.setDescription('The usb device class code. Value Hex Value Descriptor 1 1 Audio 2 2 CDC-Control 3 3 HID 5 5 Physical 6 6 Image (subclass & protocol must be 1) 7 7 Printer 8 8 Mass-Storage 9 9 HUB 10 A CDC-Data 11 B Chip/Smart Card 13 D Content-Security 14 E Video 220 DC Diagnostic Device (see below for details) 224 E0 Wireless Controller (see below for details) 254 FE Application-Specific (see below for details) 255 FF Vendor-Specific The G250/G350 supports usb mass storage devices of class code of 0x8 and usb modem with class 0x2. ')
avEntPhyUSBDeviceSubClassCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avEntPhyUSBDeviceSubClassCode.setStatus('current')
if mibBuilder.loadTexts: avEntPhyUSBDeviceSubClassCode.setDescription('The usb device subclass code. USB standard describe the following class codes: 0x01 - RBC (Reduced Block Commands) 0x02 - SFF-8020i, MMC-2 (ATAPI) 0x03 - QIC-157 0x04 - UFI 0x05 - SFF-8070i 0x06 - SCSI The G250/G350 supports 0x06 - SCSI for USB mass storage devices and 0x2 - SFF-8020i, MMC-2 (ATAPI) for USB modem. ')
avEntPhyUSBDeviceProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avEntPhyUSBDeviceProtocol.setStatus('current')
if mibBuilder.loadTexts: avEntPhyUSBDeviceProtocol.setDescription('The usb device protocol code. 0x0 - Control/Bulk/Interrupt protocol (with command completion Interrupt). 0x1 - Control/Bulk/Interrupt protocol (with no command completion Interrupt). 0x50 - Bulk Only Transport. The G250/G350 supports 0x50 protocol for usb mass storage devices and 0x1 for USB modem. ')
avEntPhyUSBDeviceVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 3, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avEntPhyUSBDeviceVendorId.setStatus('current')
if mibBuilder.loadTexts: avEntPhyUSBDeviceVendorId.setDescription('The USB device vendor HEX-formatted string as it is provided to the USB host by the USB device')
avEntPhyUSBDeviceSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 3, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avEntPhyUSBDeviceSpeed.setStatus('current')
if mibBuilder.loadTexts: avEntPhyUSBDeviceSpeed.setDescription("The USB device speed. Possible values: 'Low', 'Full' and 'High'. G250/G350 supports 'Full' and 'High'")
avEntPhyUSBDevicePower = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 3, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avEntPhyUSBDevicePower.setStatus('current')
if mibBuilder.loadTexts: avEntPhyUSBDevicePower.setDescription("The USB device power. Possible values: 'Unknown', 'Self Powered' and 'Bus Powered'. ")
avEntPhyUSBDeviceCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avEntPhyUSBDeviceCurrent.setStatus('current')
if mibBuilder.loadTexts: avEntPhyUSBDeviceCurrent.setDescription('The USB current consumption in mA.')
avEntPhyUSBMassStorageDevicesTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 3, 2), )
if mibBuilder.loadTexts: avEntPhyUSBMassStorageDevicesTable.setStatus('current')
if mibBuilder.loadTexts: avEntPhyUSBMassStorageDevicesTable.setDescription('This table extends entPhysicalTable with USB mass storage devices parameters.')
avEntPhyUSBMassStorageDevicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 3, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: avEntPhyUSBMassStorageDevicesEntry.setStatus('current')
if mibBuilder.loadTexts: avEntPhyUSBMassStorageDevicesEntry.setDescription('This table includes extension to entPhysicalTable with usb mass storage devices parameters.')
avEntPhyUSBMassStorageDeviceFileSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 3, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avEntPhyUSBMassStorageDeviceFileSystemName.setStatus('current')
if mibBuilder.loadTexts: avEntPhyUSBMassStorageDeviceFileSystemName.setDescription('The usb mass storage device File system name. An exmaple for one usb mass storage device on the gateway is mapped to /usbdevice0/. ')
avEntPhyUSBMassStorageDeviceCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avEntPhyUSBMassStorageDeviceCapacity.setStatus('current')
if mibBuilder.loadTexts: avEntPhyUSBMassStorageDeviceCapacity.setDescription('Capacity of USB Mass storage device in KBytes.')
avEntPhyUSBMassStorageDeviceFreeMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avEntPhyUSBMassStorageDeviceFreeMemory.setStatus('current')
if mibBuilder.loadTexts: avEntPhyUSBMassStorageDeviceFreeMemory.setDescription('Free memory of USB Mass storage device in KB. For R/O USB mass storage devices (as CDROM) this value returns 0. Note that this MIB item shall be updated according backup operations that may consume memory space. ')
avEntPhyUSBMassStorageDeviceFs = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 3, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avEntPhyUSBMassStorageDeviceFs.setStatus('current')
if mibBuilder.loadTexts: avEntPhyUSBMassStorageDeviceFs.setDescription("The file system supported by the USB device. Possible values: 'FAT16' and 'FAT32'.")
avEntPhyNotificationDefinitions = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 4))
avEntPhySeverity = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 4, 1), AvEntPhyItuPerceivedSeverity()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: avEntPhySeverity.setStatus('current')
if mibBuilder.loadTexts: avEntPhySeverity.setDescription('The severity of the notification.')
avEntPhyProductId = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: avEntPhyProductId.setStatus('current')
if mibBuilder.loadTexts: avEntPhyProductId.setDescription('The Product Id of Avaya Device - 10 characters.')
avEntPhysicalIndex = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 4, 3), PhysicalIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: avEntPhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: avEntPhysicalIndex.setDescription('The index for this entry.')
avEntPhyChFru = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 5))
avEntPhyChFruNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 5, 0))
avEntPhyChFruRemoval = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 5, 0, 1)).setObjects(("AVAYA-ENTITY-MIB", "avEntPhysicalIndex"), ("ENTITY-MIB", "entPhysicalDescr"), ("AVAYA-ENTITY-MIB", "avEntPhyProductId"), ("AVAYA-ENTITY-MIB", "avEntPhySeverity"))
if mibBuilder.loadTexts: avEntPhyChFruRemoval.setStatus('current')
if mibBuilder.loadTexts: avEntPhyChFruRemoval.setDescription('FRU unit was removed from chassis')
avEntPhyChFruInsertion = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 5, 0, 2)).setObjects(("AVAYA-ENTITY-MIB", "avEntPhysicalIndex"), ("ENTITY-MIB", "entPhysicalDescr"), ("AVAYA-ENTITY-MIB", "avEntPhyProductId"), ("AVAYA-ENTITY-MIB", "avEntPhySeverity"))
if mibBuilder.loadTexts: avEntPhyChFruInsertion.setStatus('current')
if mibBuilder.loadTexts: avEntPhyChFruInsertion.setDescription('FRU unit was inserted into chassis')
avEntPhyChFruPsuFlt = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 5, 0, 3)).setObjects(("AVAYA-ENTITY-MIB", "avEntPhysicalIndex"), ("ENTITY-MIB", "entPhysicalDescr"), ("AVAYA-ENTITY-MIB", "avEntPhyChFruOperStat"), ("AVAYA-ENTITY-MIB", "avEntPhyChFruFault"), ("AVAYA-ENTITY-MIB", "avEntPhyProductId"), ("AVAYA-ENTITY-MIB", "avEntPhySeverity"))
if mibBuilder.loadTexts: avEntPhyChFruPsuFlt.setStatus('current')
if mibBuilder.loadTexts: avEntPhyChFruPsuFlt.setDescription('Power Supply unit failed')
avEntPhyChFruPsuFltOk = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 5, 0, 4)).setObjects(("AVAYA-ENTITY-MIB", "avEntPhysicalIndex"), ("ENTITY-MIB", "entPhysicalDescr"), ("AVAYA-ENTITY-MIB", "avEntPhyChFruOperStat"), ("AVAYA-ENTITY-MIB", "avEntPhyChFruFault"), ("AVAYA-ENTITY-MIB", "avEntPhyProductId"), ("AVAYA-ENTITY-MIB", "avEntPhySeverity"))
if mibBuilder.loadTexts: avEntPhyChFruPsuFltOk.setStatus('current')
if mibBuilder.loadTexts: avEntPhyChFruPsuFltOk.setDescription('Power Supply unit resumed operation ')
avEntPhyChFruExpansionTestFailure = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 5, 0, 5)).setObjects(("AVAYA-ENTITY-MIB", "avEntPhysicalIndex"), ("ENTITY-MIB", "entPhysicalDescr"), ("AVAYA-ENTITY-MIB", "avEntPhyChFruOperStat"), ("AVAYA-ENTITY-MIB", "avEntPhyChFruFault"), ("AVAYA-ENTITY-MIB", "avEntPhyProductId"), ("AVAYA-ENTITY-MIB", "avEntPhySeverity"))
if mibBuilder.loadTexts: avEntPhyChFruExpansionTestFailure.setStatus('current')
if mibBuilder.loadTexts: avEntPhyChFruExpansionTestFailure.setDescription('Cable Test Failure on Expansion module')
avEntPhyChFruExpansionTestClear = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 5, 0, 6)).setObjects(("AVAYA-ENTITY-MIB", "avEntPhysicalIndex"), ("ENTITY-MIB", "entPhysicalDescr"), ("AVAYA-ENTITY-MIB", "avEntPhyChFruOperStat"), ("AVAYA-ENTITY-MIB", "avEntPhyChFruFault"), ("AVAYA-ENTITY-MIB", "avEntPhyProductId"), ("AVAYA-ENTITY-MIB", "avEntPhySeverity"))
if mibBuilder.loadTexts: avEntPhyChFruExpansionTestClear.setStatus('current')
if mibBuilder.loadTexts: avEntPhyChFruExpansionTestClear.setDescription('Cable Test Passed OK on Expansion module')
avEntPhyChFruTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 5, 1), )
if mibBuilder.loadTexts: avEntPhyChFruTable.setStatus('current')
if mibBuilder.loadTexts: avEntPhyChFruTable.setDescription('Table depicting the status of chassis FRU units such as Power-Supplies and Fan-Tray')
avEntPhyChFruEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 5, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: avEntPhyChFruEntry.setStatus('current')
if mibBuilder.loadTexts: avEntPhyChFruEntry.setDescription('Table entry depicting the status of chassis FRU units such as Power-Supplies and Fan-Tray')
avEntPhyChFruOperStat = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("ok", 1), ("fault", 2), ("notPresent", 3), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avEntPhyChFruOperStat.setStatus('current')
if mibBuilder.loadTexts: avEntPhyChFruOperStat.setDescription('Operational status of the chassis FRU unit.')
avEntPhyChFruFault = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 255))).clone(namedValues=NamedValues(("none", 1), ("mulfunction", 2), ("acFault", 3), ("malfunctionAndAcFault", 4), ("singleFanFault", 5), ("multipleFanFault", 6), ("badExpansionCable", 7), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avEntPhyChFruFault.setStatus('current')
if mibBuilder.loadTexts: avEntPhyChFruFault.setDescription('Description of fault, in case an FRU has failed')
avEntPhyChFruGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 5, 2)).setObjects(("AVAYA-ENTITY-MIB", "avEntPhyChFruOperStat"), ("AVAYA-ENTITY-MIB", "avEntPhyChFruFault"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    avEntPhyChFruGroup = avEntPhyChFruGroup.setStatus('current')
if mibBuilder.loadTexts: avEntPhyChFruGroup.setDescription('avEntPhyChFruGroup')
avEntPhyChFruNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6889, 2, 1, 99, 5, 3)).setObjects(("AVAYA-ENTITY-MIB", "avEntPhyChFruRemoval"), ("AVAYA-ENTITY-MIB", "avEntPhyChFruInsertion"), ("AVAYA-ENTITY-MIB", "avEntPhyChFruPsuFlt"), ("AVAYA-ENTITY-MIB", "avEntPhyChFruPsuFltOk"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    avEntPhyChFruNotificationGroup = avEntPhyChFruNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: avEntPhyChFruNotificationGroup.setDescription('avEntPhyChFruNotificationGroup')
mibBuilder.exportSymbols("AVAYA-ENTITY-MIB", avEntPhyUSBDeviceSubClassCode=avEntPhyUSBDeviceSubClassCode, avEntPhySensorEntry=avEntPhySensorEntry, avEnt48vPwrFltOk=avEnt48vPwrFltOk, avEntPhySensorEventSupportMask=avEntPhySensorEventSupportMask, avEnt1600mvPwrFltOk=avEnt1600mvPwrFltOk, avEntPhyUSBDevicesTraps=avEntPhyUSBDevicesTraps, avEntPhyChFruInsertion=avEntPhyChFruInsertion, avEntFanOk=avEntFanOk, avEntPhyChFruGroup=avEntPhyChFruGroup, avEntPhyUSBDeviceNotSupported=avEntPhyUSBDeviceNotSupported, avEnt1800mvPwrFltOk=avEnt1800mvPwrFltOk, avEntPhyChFruPsuFlt=avEntPhyChFruPsuFlt, avEntPhyChFruOperStat=avEntPhyChFruOperStat, avEntPhySensorHiShutdown=avEntPhySensorHiShutdown, avEntTrapsV3separator=avEntTrapsV3separator, avEntFanFlt=avEntFanFlt, avEntPhySensorLoShutdown=avEntPhySensorLoShutdown, avEntPhyUSBDeviceUSBSupportVersion=avEntPhyUSBDeviceUSBSupportVersion, avEntPhyProductId=avEntPhyProductId, avayaEntity=avayaEntity, avEntPhyUSBDeviceRemovalOnBackupRestoreOperation=avEntPhyUSBDeviceRemovalOnBackupRestoreOperation, avEntPhyUSBDevicesTable=avEntPhyUSBDevicesTable, avEntPhyChFruNotifications=avEntPhyChFruNotifications, avEntPhyChFruEntry=avEntPhyChFruEntry, avEnt5vPwrFlt=avEnt5vPwrFlt, AvEntPhyItuPerceivedSeverity=AvEntPhyItuPerceivedSeverity, avEntAmbientLoTempFlt=avEntAmbientLoTempFlt, avEntPhyUSBDevicesEntry=avEntPhyUSBDevicesEntry, avEntPhyUSBDeviceProtocol=avEntPhyUSBDeviceProtocol, avEntPhysicalIndex=avEntPhysicalIndex, avEntPhyUSBDeviceCurrent=avEntPhyUSBDeviceCurrent, avEntPhySensorLoWarningClear=avEntPhySensorLoWarningClear, avEnt2500mvPwrFltOk=avEnt2500mvPwrFltOk, avEnt1600mvPwrFlt=avEnt1600mvPwrFlt, avEntPhyUSBDevices=avEntPhyUSBDevices, avEntPhyUSBDevicePowerFailure=avEntPhyUSBDevicePowerFailure, avEntPhySeverity=avEntPhySeverity, avEntPhySensorTable=avEntPhySensorTable, avEntPhySensorHiWarningClear=avEntPhySensorHiWarningClear, avEntAmbientHiTempFlt=avEntAmbientHiTempFlt, avEntPhySensorHiWarning=avEntPhySensorHiWarning, avEntPhyUSBMassStorageDeviceCapacity=avEntPhyUSBMassStorageDeviceCapacity, avEnt1800mvPwrFlt=avEnt1800mvPwrFlt, avEntPhyNotificationDefinitions=avEntPhyNotificationDefinitions, avEntPhyUSBMassStorageDeviceFileSystemName=avEntPhyUSBMassStorageDeviceFileSystemName, avEntPhyUSBDeviceInsecureRemoval=avEntPhyUSBDeviceInsecureRemoval, avEnt48vPwrFlt=avEnt48vPwrFlt, avEntPhyChFruExpansionTestFailure=avEntPhyChFruExpansionTestFailure, avEntPhyUSBDeviceSpeed=avEntPhyUSBDeviceSpeed, avEntTraps=avEntTraps, avEnt3300mvPwrFltOk=avEnt3300mvPwrFltOk, avEntPhySensorLoWarning=avEntPhySensorLoWarning, avEntPhyChFruTable=avEntPhyChFruTable, avEntPhyChFruNotificationGroup=avEntPhyChFruNotificationGroup, avEntPhyChFruFault=avEntPhyChFruFault, avEntPhyUSBMassStorageDeviceFreeMemory=avEntPhyUSBMassStorageDeviceFreeMemory, avEntPhyChFruPsuFltOk=avEntPhyChFruPsuFltOk, PYSNMP_MODULE_ID=avayaEntity, avEntAmbientHiTempFltOk=avEntAmbientHiTempFltOk, avEntPhyChFruRemoval=avEntPhyChFruRemoval, avEnt5vPwrFltOk=avEnt5vPwrFltOk, avEntPhyUSBDeviceClassCode=avEntPhyUSBDeviceClassCode, avEntPhyUSBMassStorageDevicesTable=avEntPhyUSBMassStorageDevicesTable, avEntPhyUSBDevicePower=avEntPhyUSBDevicePower, avEntPhyChFruExpansionTestClear=avEntPhyChFruExpansionTestClear, avEntPhyUSBDeviceVendorId=avEntPhyUSBDeviceVendorId, avEntPhyUSBMassStorageDevicesEntry=avEntPhyUSBMassStorageDevicesEntry, avEntPhyChFru=avEntPhyChFru, avEntAmbientLoTempFltOk=avEntAmbientLoTempFltOk, avEntPhyUSBFileSystemNotSupported=avEntPhyUSBFileSystemNotSupported, avEntPhyUSBDeviceExceedMaxNumber=avEntPhyUSBDeviceExceedMaxNumber, avEnt3300mvPwrFlt=avEnt3300mvPwrFlt, avEntPhyUSBMassStorageDeviceFs=avEntPhyUSBMassStorageDeviceFs, avEnt2500mvPwrFlt=avEnt2500mvPwrFlt)
