#
# PySNMP MIB module DWL-3200 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DWL-3200
# Produced by pysmi-0.3.4 at Wed May  1 12:55:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Gauge32, Unsigned32, ModuleIdentity, Integer32, TimeTicks, Counter64, MibIdentifier, iso, Bits, Counter32, NotificationType, private = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Gauge32", "Unsigned32", "ModuleIdentity", "Integer32", "TimeTicks", "Counter64", "MibIdentifier", "iso", "Bits", "Counter32", "NotificationType", "private")
TextualConvention, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "DisplayString")
class DisplayString(OctetString):
    pass

enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
dlink = MibIdentifier((1, 3, 6, 1, 4, 1, 171))
dlink_products = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10)).setLabel("dlink-products")
dlink_dwlfamily = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37)).setLabel("dlink-dwlfamily")
dwl_3200AP = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20)).setLabel("dwl-3200AP")
systemInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 1))
systemDescr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemDescr.setStatus('mandatory')
if mibBuilder.loadTexts: systemDescr.setDescription("A textual description of the entity. This value should include the full name and version identification of the system's hardware type, software operating-system, and networking software. It is mandatory that this only contain printable ASCII characters.")
systemUpTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: systemUpTime.setDescription('The time (in hundredths of a second) since the network management portion of the system was last re-initialized.')
systemContact = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemContact.setStatus('mandatory')
if mibBuilder.loadTexts: systemContact.setDescription('The textual identification of the contact person for this managed node, together with information on how to contact this person.')
systemLocation = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLocation.setStatus('mandatory')
if mibBuilder.loadTexts: systemLocation.setDescription("The physical location of this node (e.g., `telephone closet, 3rd floor').")
systemModelName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemModelName.setStatus('mandatory')
if mibBuilder.loadTexts: systemModelName.setDescription('')
systemFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemFirmwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: systemFirmwareVersion.setDescription('')
systemIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: systemIpAddress.setDescription('')
systemTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemTime.setStatus('mandatory')
if mibBuilder.loadTexts: systemTime.setDescription('')
interface = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2))
lan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1))
lanIfSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 1))
lanIfSettingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 1, 1), )
if mibBuilder.loadTexts: lanIfSettingTable.setStatus('mandatory')
if mibBuilder.loadTexts: lanIfSettingTable.setDescription('')
lanIfSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: lanIfSettingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lanIfSettingEntry.setDescription('')
lanIfGetIpAddressFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanIfGetIpAddressFrom.setStatus('mandatory')
if mibBuilder.loadTexts: lanIfGetIpAddressFrom.setDescription('')
lanIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 1, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanIfIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: lanIfIpAddress.setDescription('')
lanIfSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 1, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanIfSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: lanIfSubnetMask.setDescription('')
lanIfDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 1, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanIfDefaultGateway.setStatus('mandatory')
if mibBuilder.loadTexts: lanIfDefaultGateway.setDescription('')
lanIfMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 1, 1, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lanIfMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: lanIfMacAddress.setDescription('')
wirelesslan = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3))
wirelessLanIfNumber = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessLanIfNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wirelessLanIfNumber.setDescription('')
ieee802dot11 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3))
dot11Parameters = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1))
dot11ParametersTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1), )
if mibBuilder.loadTexts: dot11ParametersTable.setStatus('mandatory')
if mibBuilder.loadTexts: dot11ParametersTable.setDescription('')
dot11ParametersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11ParametersEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dot11ParametersEntry.setDescription('')
dot11Ssid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11Ssid.setStatus('mandatory')
if mibBuilder.loadTexts: dot11Ssid.setDescription('')
dot11SsidBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11SsidBroadcast.setStatus('mandatory')
if mibBuilder.loadTexts: dot11SsidBroadcast.setDescription('')
dot11Channel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11Channel.setStatus('mandatory')
if mibBuilder.loadTexts: dot11Channel.setDescription('')
dot11ChannelList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ChannelList.setStatus('mandatory')
if mibBuilder.loadTexts: dot11ChannelList.setDescription('')
dot11DynamicChannelList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11DynamicChannelList.setStatus('mandatory')
if mibBuilder.loadTexts: dot11DynamicChannelList.setDescription('')
dot11WdsChannelList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11WdsChannelList.setStatus('mandatory')
if mibBuilder.loadTexts: dot11WdsChannelList.setDescription('')
dot11WdsDynamicChannelList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11WdsDynamicChannelList.setStatus('mandatory')
if mibBuilder.loadTexts: dot11WdsDynamicChannelList.setDescription('')
dot11Frequency = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11Frequency.setStatus('mandatory')
if mibBuilder.loadTexts: dot11Frequency.setDescription('')
dot11DataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DataRate.setStatus('mandatory')
if mibBuilder.loadTexts: dot11DataRate.setDescription('')
dot11bModeDataRateList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11bModeDataRateList.setStatus('mandatory')
if mibBuilder.loadTexts: dot11bModeDataRateList.setDescription('')
dot11gModeDataRateList = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11gModeDataRateList.setStatus('mandatory')
if mibBuilder.loadTexts: dot11gModeDataRateList.setDescription('')
dot11WifiMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 6))).clone(namedValues=NamedValues(("dot11b", 2), ("dot11g", 4), ("dot11b-dot11g", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11WifiMode.setStatus('mandatory')
if mibBuilder.loadTexts: dot11WifiMode.setDescription('')
dot11BeaconInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11BeaconInterval.setStatus('mandatory')
if mibBuilder.loadTexts: dot11BeaconInterval.setDescription('')
dot11Dtim = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11Dtim.setStatus('mandatory')
if mibBuilder.loadTexts: dot11Dtim.setDescription('')
dot11FragmentLength = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 2346))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11FragmentLength.setStatus('mandatory')
if mibBuilder.loadTexts: dot11FragmentLength.setDescription('')
dot11RtsLength = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 2346))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RtsLength.setStatus('mandatory')
if mibBuilder.loadTexts: dot11RtsLength.setDescription('')
dot11TransmitPower = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("full", 1), ("half", 2), ("quarter", 3), ("eighth", 4), ("min", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11TransmitPower.setStatus('mandatory')
if mibBuilder.loadTexts: dot11TransmitPower.setDescription('')
dot11SuperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("super", 1), ("dynamic", 3), ("disabled", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11SuperMode.setStatus('mandatory')
if mibBuilder.loadTexts: dot11SuperMode.setDescription('')
dot11RadioWave = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RadioWave.setStatus('mandatory')
if mibBuilder.loadTexts: dot11RadioWave.setDescription('')
dot11AutoChannelScan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11AutoChannelScan.setStatus('mandatory')
if mibBuilder.loadTexts: dot11AutoChannelScan.setDescription('')
dot11Wmm = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11Wmm.setStatus('mandatory')
if mibBuilder.loadTexts: dot11Wmm.setDescription('')
dot11Preamble = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("longOnly", 0), ("longAndShort", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11Preamble.setStatus('mandatory')
if mibBuilder.loadTexts: dot11Preamble.setDescription('')
dot11Antenna = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("auto", 0), ("ant1", 1), ("ant2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11Antenna.setStatus('mandatory')
if mibBuilder.loadTexts: dot11Antenna.setDescription('')
dot11ApMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ap", 1), ("wdsWithAp", 2), ("wdsWithoutAp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ApMode.setStatus('mandatory')
if mibBuilder.loadTexts: dot11ApMode.setDescription('')
dot11IgmpSnooping = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11IgmpSnooping.setStatus('mandatory')
if mibBuilder.loadTexts: dot11IgmpSnooping.setDescription('Primary Dynamic Vlan status setting')
dot11RemoteApMacAddressTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 2), )
if mibBuilder.loadTexts: dot11RemoteApMacAddressTable.setStatus('mandatory')
if mibBuilder.loadTexts: dot11RemoteApMacAddressTable.setDescription('')
dot11RemoteApMacAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DWL-3200", "dot11RemoteApMacAddressIndex"))
if mibBuilder.loadTexts: dot11RemoteApMacAddressEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dot11RemoteApMacAddressEntry.setDescription('')
dot11RemoteApMacAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: dot11RemoteApMacAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dot11RemoteApMacAddressIndex.setDescription('')
dot11RemoteApMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 2, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RemoteApMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dot11RemoteApMacAddress.setDescription('')
dot11SiteSurvey = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 3))
dot11SiteSurveyRefreshTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 3, 1), )
if mibBuilder.loadTexts: dot11SiteSurveyRefreshTable.setStatus('mandatory')
if mibBuilder.loadTexts: dot11SiteSurveyRefreshTable.setDescription('')
dot11SiteSurveyRefreshEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11SiteSurveyRefreshEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dot11SiteSurveyRefreshEntry.setDescription('')
dot11SiteSurveyRefresh = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("refresh", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11SiteSurveyRefresh.setStatus('mandatory')
if mibBuilder.loadTexts: dot11SiteSurveyRefresh.setDescription('')
dot11SiteSurveyTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 3, 2), )
if mibBuilder.loadTexts: dot11SiteSurveyTable.setStatus('mandatory')
if mibBuilder.loadTexts: dot11SiteSurveyTable.setDescription('')
dot11SiteSurveyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DWL-3200", "dot11SiteSurveyIndex"))
if mibBuilder.loadTexts: dot11SiteSurveyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dot11SiteSurveyEntry.setDescription('')
dot11SiteSurveyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 3, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: dot11SiteSurveyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dot11SiteSurveyIndex.setDescription('')
dot11SiteSurveyBssType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 3, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11SiteSurveyBssType.setStatus('mandatory')
if mibBuilder.loadTexts: dot11SiteSurveyBssType.setDescription('')
dot11SiteSurveyChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11SiteSurveyChannel.setStatus('mandatory')
if mibBuilder.loadTexts: dot11SiteSurveyChannel.setDescription('')
dot11SiteSurveyRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11SiteSurveyRssi.setStatus('mandatory')
if mibBuilder.loadTexts: dot11SiteSurveyRssi.setDescription('')
dot11SiteSurveyBssid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 3, 2, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11SiteSurveyBssid.setStatus('mandatory')
if mibBuilder.loadTexts: dot11SiteSurveyBssid.setDescription('')
dot11SiteSurveyEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 3, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11SiteSurveyEncryption.setStatus('mandatory')
if mibBuilder.loadTexts: dot11SiteSurveyEncryption.setDescription('')
dot11SiteSurveySsid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 3, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11SiteSurveySsid.setStatus('mandatory')
if mibBuilder.loadTexts: dot11SiteSurveySsid.setDescription('')
dot11SiteSurveyWirelessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("dot11b", 2), ("dot11g", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11SiteSurveyWirelessMode.setStatus('mandatory')
if mibBuilder.loadTexts: dot11SiteSurveyWirelessMode.setDescription('')
dot11SiteSurveySupportWds = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 1, 3, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11SiteSurveySupportWds.setStatus('mandatory')
if mibBuilder.loadTexts: dot11SiteSurveySupportWds.setDescription('')
dot11Securities = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2))
dot11SecuritiesTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 1), )
if mibBuilder.loadTexts: dot11SecuritiesTable.setStatus('mandatory')
if mibBuilder.loadTexts: dot11SecuritiesTable.setDescription('')
dot11SecuritiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11SecuritiesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dot11SecuritiesEntry.setDescription('')
dot11Authentication = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("opensystem", 1), ("sharedkey", 2), ("opensystem-sharedkey", 3), ("wpa-psk", 4), ("wpa-eap", 5), ("wpa2-psk", 6), ("wpa2-eap", 7), ("wpa-auto-psk", 8), ("wpa-auto-eap", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11Authentication.setStatus('mandatory')
if mibBuilder.loadTexts: dot11Authentication.setDescription('')
dot11Encryption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11Encryption.setStatus('mandatory')
if mibBuilder.loadTexts: dot11Encryption.setDescription('')
dot11KeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("first", 1), ("second", 2), ("third", 3), ("fourth", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11KeyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dot11KeyIndex.setDescription('')
dot11PassPhrase = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11PassPhrase.setStatus('mandatory')
if mibBuilder.loadTexts: dot11PassPhrase.setDescription('')
dot11CipherType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("aes", 2), ("tkip", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11CipherType.setStatus('mandatory')
if mibBuilder.loadTexts: dot11CipherType.setDescription('')
dot11GroupKeyUpdateInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 9999999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11GroupKeyUpdateInterval.setStatus('mandatory')
if mibBuilder.loadTexts: dot11GroupKeyUpdateInterval.setDescription('')
dot11KeyEntryMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ascii", 1), ("hex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11KeyEntryMethod.setStatus('mandatory')
if mibBuilder.loadTexts: dot11KeyEntryMethod.setDescription('')
dot11RadiusServer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RadiusServer.setStatus('mandatory')
if mibBuilder.loadTexts: dot11RadiusServer.setDescription('')
dot11RadiusPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RadiusPort.setStatus('mandatory')
if mibBuilder.loadTexts: dot11RadiusPort.setDescription('')
dot11RadiusSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RadiusSecret.setStatus('mandatory')
if mibBuilder.loadTexts: dot11RadiusSecret.setDescription('')
dot11SecRADIUSServer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11SecRADIUSServer.setStatus('mandatory')
if mibBuilder.loadTexts: dot11SecRADIUSServer.setDescription('RADIUS Server IP Address')
dot11SecRADIUSPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11SecRADIUSPort.setStatus('mandatory')
if mibBuilder.loadTexts: dot11SecRADIUSPort.setDescription('RADIUS Port')
dot11SecRADIUSSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 1, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11SecRADIUSSecret.setStatus('mandatory')
if mibBuilder.loadTexts: dot11SecRADIUSSecret.setDescription('RADIUS Secret')
dot11SecRADIUSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11SecRADIUSStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dot11SecRADIUSStatus.setDescription('Sec RADIUS Status')
dot11WepKeyTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 2), )
if mibBuilder.loadTexts: dot11WepKeyTable.setStatus('mandatory')
if mibBuilder.loadTexts: dot11WepKeyTable.setDescription('')
dot11WepKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DWL-3200", "dot11wepKeyIndex"))
if mibBuilder.loadTexts: dot11WepKeyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dot11WepKeyEntry.setDescription('')
dot11wepKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: dot11wepKeyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dot11wepKeyIndex.setDescription('')
dot11WepKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 2, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11WepKey.setStatus('mandatory')
if mibBuilder.loadTexts: dot11WepKey.setDescription('')
dot11Filter = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 3))
dot11PartionTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 3, 1), )
if mibBuilder.loadTexts: dot11PartionTable.setStatus('mandatory')
if mibBuilder.loadTexts: dot11PartionTable.setDescription('')
dot11LanPartionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11LanPartionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dot11LanPartionEntry.setDescription('')
dot11InternalStationConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11InternalStationConnection.setStatus('mandatory')
if mibBuilder.loadTexts: dot11InternalStationConnection.setDescription('')
dot11EthernetToWlanAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11EthernetToWlanAccess.setStatus('mandatory')
if mibBuilder.loadTexts: dot11EthernetToWlanAccess.setDescription('')
dot11MacAccessControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 3, 2), )
if mibBuilder.loadTexts: dot11MacAccessControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: dot11MacAccessControlTable.setDescription('')
dot11MacAccessControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11MacAccessControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dot11MacAccessControlEntry.setDescription('')
dot11MacAccessControl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("accept", 1), ("reject", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MacAccessControl.setStatus('mandatory')
if mibBuilder.loadTexts: dot11MacAccessControl.setDescription('')
dot11MacAccessControlListTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 3, 3), )
if mibBuilder.loadTexts: dot11MacAccessControlListTable.setStatus('mandatory')
if mibBuilder.loadTexts: dot11MacAccessControlListTable.setDescription('')
dot11MacAccessControlListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DWL-3200", "dot11MacAccessControlListIndex"))
if mibBuilder.loadTexts: dot11MacAccessControlListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dot11MacAccessControlListEntry.setDescription('')
dot11MacAccessControlListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: dot11MacAccessControlListIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dot11MacAccessControlListIndex.setDescription('')
dot11MacAccessControlListMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 2, 3, 3, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MacAccessControlListMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dot11MacAccessControlListMacAddress.setDescription('')
dot11Accounting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 3))
dot11AccountingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 3, 1), )
if mibBuilder.loadTexts: dot11AccountingTable.setStatus('mandatory')
if mibBuilder.loadTexts: dot11AccountingTable.setDescription('')
dot11AccountingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11AccountingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dot11AccountingEntry.setDescription('')
dot11AccountingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11AccountingStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dot11AccountingStatus.setDescription('')
dot11AccountingServer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 3, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11AccountingServer.setStatus('mandatory')
if mibBuilder.loadTexts: dot11AccountingServer.setDescription('')
dot11AccountingServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 3, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11AccountingServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: dot11AccountingServerPort.setDescription('')
dot11SecAccountingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 3, 2), )
if mibBuilder.loadTexts: dot11SecAccountingTable.setStatus('mandatory')
if mibBuilder.loadTexts: dot11SecAccountingTable.setDescription('')
dot11SecAccountingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11SecAccountingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dot11SecAccountingEntry.setDescription('')
dot11SecAccountingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11SecAccountingStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dot11SecAccountingStatus.setDescription('')
dot11SecAccountingServer = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 3, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11SecAccountingServer.setStatus('mandatory')
if mibBuilder.loadTexts: dot11SecAccountingServer.setDescription('')
dot11SecAccountingServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11SecAccountingServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: dot11SecAccountingServerPort.setDescription('')
dot11ClientInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 4))
dot11GetClientInformationTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 4, 1), )
if mibBuilder.loadTexts: dot11GetClientInformationTable.setStatus('mandatory')
if mibBuilder.loadTexts: dot11GetClientInformationTable.setDescription('')
dot11GetClientInformationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11GetClientInformationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dot11GetClientInformationEntry.setDescription('')
dot11ClientInformationRefresh = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("get", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11ClientInformationRefresh.setStatus('mandatory')
if mibBuilder.loadTexts: dot11ClientInformationRefresh.setDescription('')
dot11ClientInformationAssNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ClientInformationAssNum.setStatus('mandatory')
if mibBuilder.loadTexts: dot11ClientInformationAssNum.setDescription('')
dot11ClientInformationTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 4, 2), )
if mibBuilder.loadTexts: dot11ClientInformationTable.setStatus('mandatory')
if mibBuilder.loadTexts: dot11ClientInformationTable.setDescription('')
dot11ClientInformationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DWL-3200", "dot11ClinetIndex"))
if mibBuilder.loadTexts: dot11ClientInformationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dot11ClientInformationEntry.setDescription('')
dot11ClinetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 4, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: dot11ClinetIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dot11ClinetIndex.setDescription('')
dot11ClientMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 4, 2, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ClientMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dot11ClientMacAddress.setDescription('')
dot11ClientBand = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dot11b", 1), ("dot11g", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ClientBand.setStatus('mandatory')
if mibBuilder.loadTexts: dot11ClientBand.setDescription('')
dot11ClientAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("opensystem", 1), ("sharedkey", 2), ("opensystem-sharedkey", 3), ("wpa-psk", 4), ("wpa-eap", 5), ("wpa2-psk", 6), ("wpa2-eap", 7), ("wpa-auto-psk", 8), ("wpa-auto-eap", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ClientAuthentication.setStatus('mandatory')
if mibBuilder.loadTexts: dot11ClientAuthentication.setDescription('')
dot11ClientRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ClientRssi.setStatus('mandatory')
if mibBuilder.loadTexts: dot11ClientRssi.setDescription('')
dot11ClientPsm = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ClientPsm.setStatus('mandatory')
if mibBuilder.loadTexts: dot11ClientPsm.setDescription('')
dot11SSIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 4, 2, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11SSIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dot11SSIDIndex.setDescription('')
dot11ClientKickOff = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 4, 3))
dot11KickOffClientMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 4, 3, 1), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11KickOffClientMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dot11KickOffClientMacAddress.setDescription('')
dot11KickOff = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 2, 1, 3, 3, 4, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11KickOff.setStatus('mandatory')
if mibBuilder.loadTexts: dot11KickOff.setDescription('')
advance = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3))
dhcpServer = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1))
dhcpServerControl = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerControl.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpServerControl.setDescription('')
dhcpServerDynamicTable = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 2))
dynamicIpPoolStart = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicIpPoolStart.setStatus('mandatory')
if mibBuilder.loadTexts: dynamicIpPoolStart.setDescription('')
dynamicIpPoolRange = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicIpPoolRange.setStatus('mandatory')
if mibBuilder.loadTexts: dynamicIpPoolRange.setDescription('')
dynamicMask = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicMask.setStatus('mandatory')
if mibBuilder.loadTexts: dynamicMask.setDescription('')
dynamicGateway = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicGateway.setStatus('mandatory')
if mibBuilder.loadTexts: dynamicGateway.setDescription('')
dynamicWins = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 2, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicWins.setStatus('mandatory')
if mibBuilder.loadTexts: dynamicWins.setDescription('')
dynamicDns = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 2, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDns.setStatus('mandatory')
if mibBuilder.loadTexts: dynamicDns.setDescription('')
dynamicDomainName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 2, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicDomainName.setStatus('mandatory')
if mibBuilder.loadTexts: dynamicDomainName.setDescription('')
dynamicLeaseTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 31536000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicLeaseTime.setStatus('mandatory')
if mibBuilder.loadTexts: dynamicLeaseTime.setDescription('')
dynamicFunction = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dynamicFunction.setStatus('mandatory')
if mibBuilder.loadTexts: dynamicFunction.setDescription('')
dhcpServerStaticTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 3), )
if mibBuilder.loadTexts: dhcpServerStaticTable.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpServerStaticTable.setDescription('')
dhcpServerStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 3, 1), ).setIndexNames((0, "DWL-3200", "staticIndex"))
if mibBuilder.loadTexts: dhcpServerStaticEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpServerStaticEntry.setDescription('')
staticIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: staticIndex.setStatus('mandatory')
if mibBuilder.loadTexts: staticIndex.setDescription('')
staticIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticIP.setStatus('mandatory')
if mibBuilder.loadTexts: staticIP.setDescription('')
staticMac = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 3, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticMac.setStatus('mandatory')
if mibBuilder.loadTexts: staticMac.setDescription('')
staticMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticMask.setStatus('mandatory')
if mibBuilder.loadTexts: staticMask.setDescription('')
staticGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 3, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticGateway.setStatus('mandatory')
if mibBuilder.loadTexts: staticGateway.setDescription('')
staticDns = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 3, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticDns.setStatus('mandatory')
if mibBuilder.loadTexts: staticDns.setDescription('')
staticWins = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 3, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticWins.setStatus('mandatory')
if mibBuilder.loadTexts: staticWins.setDescription('')
staticDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 3, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticDomainName.setStatus('mandatory')
if mibBuilder.loadTexts: staticDomainName.setDescription('')
staticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticStatus.setStatus('mandatory')
if mibBuilder.loadTexts: staticStatus.setDescription('')
dhcpServerCurrentListTable = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 4))
currentDynamicTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 4, 1), )
if mibBuilder.loadTexts: currentDynamicTable.setStatus('mandatory')
if mibBuilder.loadTexts: currentDynamicTable.setDescription('')
currentDynamicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 4, 1, 1), ).setIndexNames((0, "DWL-3200", "currentDynamicIndex"))
if mibBuilder.loadTexts: currentDynamicEntry.setStatus('mandatory')
if mibBuilder.loadTexts: currentDynamicEntry.setDescription('')
currentDynamicIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 4, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: currentDynamicIndex.setStatus('mandatory')
if mibBuilder.loadTexts: currentDynamicIndex.setDescription('')
currentDynamicMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 4, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentDynamicMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: currentDynamicMacAddress.setDescription('')
currentDynamicAssignedIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 4, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentDynamicAssignedIP.setStatus('mandatory')
if mibBuilder.loadTexts: currentDynamicAssignedIP.setDescription('')
currentDynamicLease = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentDynamicLease.setStatus('mandatory')
if mibBuilder.loadTexts: currentDynamicLease.setDescription('')
currentStaticTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 4, 2), )
if mibBuilder.loadTexts: currentStaticTable.setStatus('mandatory')
if mibBuilder.loadTexts: currentStaticTable.setDescription('')
currentStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 4, 2, 1), ).setIndexNames((0, "DWL-3200", "currentStaticIndex"))
if mibBuilder.loadTexts: currentStaticEntry.setStatus('mandatory')
if mibBuilder.loadTexts: currentStaticEntry.setDescription('')
currentStaticIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 4, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: currentStaticIndex.setStatus('mandatory')
if mibBuilder.loadTexts: currentStaticIndex.setDescription('')
currentStaticMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 4, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentStaticMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: currentStaticMacAddress.setDescription('')
currentStaticAssignedIP = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 1, 4, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentStaticAssignedIP.setStatus('mandatory')
if mibBuilder.loadTexts: currentStaticAssignedIP.setDescription('')
ieee802dot11Grouping = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 2))
ieee802dot11GroupingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 2, 1), )
if mibBuilder.loadTexts: ieee802dot11GroupingTable.setStatus('mandatory')
if mibBuilder.loadTexts: ieee802dot11GroupingTable.setDescription('')
ieee802dot11GroupingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ieee802dot11GroupingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ieee802dot11GroupingEntry.setDescription('')
dot11LoadBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11LoadBalance.setStatus('mandatory')
if mibBuilder.loadTexts: dot11LoadBalance.setDescription('')
dot11UserLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11UserLimit.setStatus('mandatory')
if mibBuilder.loadTexts: dot11UserLimit.setDescription('')
dot11LinkIntegrate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11LinkIntegrate.setStatus('mandatory')
if mibBuilder.loadTexts: dot11LinkIntegrate.setDescription('')
ieee802dot11MultiSsid = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3))
ieee802dot11MssidStateTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 1), )
if mibBuilder.loadTexts: ieee802dot11MssidStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: ieee802dot11MssidStateTable.setDescription('')
ieee802dot11MssidStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ieee802dot11MssidStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ieee802dot11MssidStateEntry.setDescription('')
dot11MssidState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidState.setStatus('mandatory')
if mibBuilder.loadTexts: dot11MssidState.setDescription('')
ieee802dot11VlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 2), )
if mibBuilder.loadTexts: ieee802dot11VlanTable.setStatus('mandatory')
if mibBuilder.loadTexts: ieee802dot11VlanTable.setDescription('')
ieee802dot11VlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ieee802dot11VlanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ieee802dot11VlanEntry.setDescription('')
dot11VlanState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11VlanState.setStatus('mandatory')
if mibBuilder.loadTexts: dot11VlanState.setDescription('')
ieee802dot11MssidTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 3), )
if mibBuilder.loadTexts: ieee802dot11MssidTable.setStatus('mandatory')
if mibBuilder.loadTexts: ieee802dot11MssidTable.setDescription('')
ieee802dot11MssidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DWL-3200", "dot11MssidIndex"))
if mibBuilder.loadTexts: ieee802dot11MssidEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ieee802dot11MssidEntry.setDescription('')
dot11MssidIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: dot11MssidIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dot11MssidIndex.setDescription('')
dot11MssIndividualState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssIndividualState.setStatus('mandatory')
if mibBuilder.loadTexts: dot11MssIndividualState.setDescription('')
dot11MssidSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidSsid.setStatus('mandatory')
if mibBuilder.loadTexts: dot11MssidSsid.setDescription('')
dot11MssidSuppress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidSuppress.setStatus('mandatory')
if mibBuilder.loadTexts: dot11MssidSuppress.setDescription('')
dot11MssidAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("opensystem", 1), ("sharedkey", 2), ("opensystem-sharedkey", 3), ("wpa-psk", 4), ("wpa-eap", 5), ("wpa2-psk", 6), ("wpa2-eap", 7), ("wpa-auto-psk", 8), ("wpa-auto-eap", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidAuthentication.setStatus('mandatory')
if mibBuilder.loadTexts: dot11MssidAuthentication.setDescription('')
dot11MssidEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidEncryption.setStatus('mandatory')
if mibBuilder.loadTexts: dot11MssidEncryption.setDescription('')
dot11MssidWepKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("first", 1), ("second", 2), ("third", 3), ("fourth", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidWepKeyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dot11MssidWepKeyIndex.setDescription('')
dot11MssidWepKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 3, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidWepKey.setStatus('mandatory')
if mibBuilder.loadTexts: dot11MssidWepKey.setDescription('')
dot11MssidVlanTagID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidVlanTagID.setStatus('mandatory')
if mibBuilder.loadTexts: dot11MssidVlanTagID.setDescription('')
dot11MssidCipherType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("aes", 2), ("tkip", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidCipherType.setStatus('mandatory')
if mibBuilder.loadTexts: dot11MssidCipherType.setDescription('')
dot11MssidPassPhrase = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 3, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidPassPhrase.setStatus('mandatory')
if mibBuilder.loadTexts: dot11MssidPassPhrase.setDescription('')
dot11MssidKeyType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ascii", 1), ("hex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidKeyType.setStatus('mandatory')
if mibBuilder.loadTexts: dot11MssidKeyType.setDescription('')
dot11MssidAccountingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidAccountingStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dot11MssidAccountingStatus.setDescription('')
dot11MssidWMM = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidWMM.setStatus('mandatory')
if mibBuilder.loadTexts: dot11MssidWMM.setDescription('')
dot11MssidDynamicVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("dynamic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidDynamicVlan.setStatus('mandatory')
if mibBuilder.loadTexts: dot11MssidDynamicVlan.setDescription('')
dot11MssidEthNoTag = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidEthNoTag.setStatus('mandatory')
if mibBuilder.loadTexts: dot11MssidEthNoTag.setDescription('')
dot11MssidPriorityBySsid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidPriorityBySsid.setStatus('mandatory')
if mibBuilder.loadTexts: dot11MssidPriorityBySsid.setDescription('')
dot11MssidInternalStationConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11MssidInternalStationConnection.setStatus('mandatory')
if mibBuilder.loadTexts: dot11MssidInternalStationConnection.setDescription('')
ieee802dot11functionTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 4), )
if mibBuilder.loadTexts: ieee802dot11functionTable.setStatus('mandatory')
if mibBuilder.loadTexts: ieee802dot11functionTable.setDescription('')
ieee802dot11functionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ieee802dot11functionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ieee802dot11functionEntry.setDescription('')
dot11PrioritySsidState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11PrioritySsidState.setStatus('mandatory')
if mibBuilder.loadTexts: dot11PrioritySsidState.setDescription('')
ieee802dot11RogueApDetection = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4))
dot11RogueApBssType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("infrastructure", 1), ("independent", 2), ("any", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RogueApBssType.setStatus('mandatory')
if mibBuilder.loadTexts: dot11RogueApBssType.setDescription('')
dot11RogueApBandType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RogueApBandType.setStatus('mandatory')
if mibBuilder.loadTexts: dot11RogueApBandType.setDescription('The Selection of Band Type {none(0), a(1), b(4), g(8), all(13)}')
dot11RogueApSecurityType = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RogueApSecurityType.setStatus('mandatory')
if mibBuilder.loadTexts: dot11RogueApSecurityType.setDescription('The state of security type none(0), off(1), wep(2), wpa-eap(4), wpa-psk(8), wpa2-eap(16), wpa2-psk(32), wpa-auto-eap(64), wpa-auto-psk(128), all(255)}')
ieee802dot11RogueApSurvey = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 4))
dot11RogueApSurveyRefresh = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("refresh", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RogueApSurveyRefresh.setStatus('mandatory')
if mibBuilder.loadTexts: dot11RogueApSurveyRefresh.setDescription('')
dot11RogueApAddtoApList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RogueApAddtoApList.setStatus('mandatory')
if mibBuilder.loadTexts: dot11RogueApAddtoApList.setDescription('')
dot11RrogueApDelete = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RrogueApDelete.setStatus('mandatory')
if mibBuilder.loadTexts: dot11RrogueApDelete.setDescription('')
ieee802dot11RogueApSurveyTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 4, 4), )
if mibBuilder.loadTexts: ieee802dot11RogueApSurveyTable.setStatus('mandatory')
if mibBuilder.loadTexts: ieee802dot11RogueApSurveyTable.setDescription('')
dot11RogueApSurveyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 4, 4, 1), ).setIndexNames((0, "DWL-3200", "dot11RogueApSurveyIndex"))
if mibBuilder.loadTexts: dot11RogueApSurveyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dot11RogueApSurveyEntry.setDescription('')
dot11RogueApSurveyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 4, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: dot11RogueApSurveyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dot11RogueApSurveyIndex.setDescription('')
dot11RogueApSurveyBssType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 4, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApSurveyBssType.setStatus('mandatory')
if mibBuilder.loadTexts: dot11RogueApSurveyBssType.setDescription('')
dot11RogueApSurveyChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 4, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApSurveyChannel.setStatus('mandatory')
if mibBuilder.loadTexts: dot11RogueApSurveyChannel.setDescription('')
dot11RogueApSurveyRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 4, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApSurveyRssi.setStatus('mandatory')
if mibBuilder.loadTexts: dot11RogueApSurveyRssi.setDescription('')
dot11RogueApSurveyBssid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 4, 4, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApSurveyBssid.setStatus('mandatory')
if mibBuilder.loadTexts: dot11RogueApSurveyBssid.setDescription('')
dot11RogueApSurveyAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("off", 0), ("wep", 1), ("wpa-eap", 2), ("wpa-psk", 3), ("wpa2-eap", 4), ("wpa2-psk", 5), ("wpa-auto-eap", 6), ("wpa-auto-psk", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApSurveyAuthentication.setStatus('mandatory')
if mibBuilder.loadTexts: dot11RogueApSurveyAuthentication.setDescription('')
dot11RogueApSurveyEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 4, 4, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApSurveyEncryption.setStatus('mandatory')
if mibBuilder.loadTexts: dot11RogueApSurveyEncryption.setDescription('Encrypt Status of Rogue AP {WEP off(0), WEP on(1)}')
dot11RogueApSurveyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 4, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("dot11b", 2), ("dot11g", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApSurveyMode.setStatus('mandatory')
if mibBuilder.loadTexts: dot11RogueApSurveyMode.setDescription('')
dot11RogueApSurveySsid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 4, 4, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApSurveySsid.setStatus('mandatory')
if mibBuilder.loadTexts: dot11RogueApSurveySsid.setDescription('')
dot11RogueApListRecord = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 5))
dot11RogueApDeleteFromRecord = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RogueApDeleteFromRecord.setStatus('mandatory')
if mibBuilder.loadTexts: dot11RogueApDeleteFromRecord.setDescription('')
dot11RogueApListRecordTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 5, 2), )
if mibBuilder.loadTexts: dot11RogueApListRecordTable.setStatus('mandatory')
if mibBuilder.loadTexts: dot11RogueApListRecordTable.setDescription('')
dot11RogueApListRecordEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 5, 2, 1), ).setIndexNames((0, "DWL-3200", "dot11RogueApListRecordIndex"))
if mibBuilder.loadTexts: dot11RogueApListRecordEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dot11RogueApListRecordEntry.setDescription('')
dot11RogueApListRecordIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 5, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: dot11RogueApListRecordIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dot11RogueApListRecordIndex.setDescription('')
dot11RogueApListRecordBssType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 5, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApListRecordBssType.setStatus('mandatory')
if mibBuilder.loadTexts: dot11RogueApListRecordBssType.setDescription('Type of AP in AP List (1:infrastructure 2:Ad-hoc)')
dot11RogueApListRecordChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApListRecordChannel.setStatus('mandatory')
if mibBuilder.loadTexts: dot11RogueApListRecordChannel.setDescription('')
dot11RogueApListRecordRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApListRecordRssi.setStatus('mandatory')
if mibBuilder.loadTexts: dot11RogueApListRecordRssi.setDescription('')
dot11RogueApListRecordBssid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 5, 2, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApListRecordBssid.setStatus('mandatory')
if mibBuilder.loadTexts: dot11RogueApListRecordBssid.setDescription('')
dot11RogueApListRecordAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("off", 0), ("wep", 1), ("wpa-eap", 2), ("wpa-psk", 3), ("wpa2-eap", 4), ("wpa2-psk", 5), ("wpa-auto-eap", 6), ("wpa-auto-psk", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApListRecordAuthentication.setStatus('mandatory')
if mibBuilder.loadTexts: dot11RogueApListRecordAuthentication.setDescription('')
dot11RogueApListRecordEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 5, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApListRecordEncryption.setStatus('mandatory')
if mibBuilder.loadTexts: dot11RogueApListRecordEncryption.setDescription('Encrypt Status of AP in AP List {WEP off(0), WEP on(1)}')
dot11RogueApListRecordMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("dot11b", 2), ("dot11g", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApListRecordMode.setStatus('mandatory')
if mibBuilder.loadTexts: dot11RogueApListRecordMode.setDescription('')
dot11RogueApListRecordSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 5, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RogueApListRecordSsid.setStatus('mandatory')
if mibBuilder.loadTexts: dot11RogueApListRecordSsid.setDescription('')
dot11RogueApProtection = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11RogueApProtection.setStatus('mandatory')
if mibBuilder.loadTexts: dot11RogueApProtection.setDescription('')
ieee802dot11DataRateControl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 5))
ieee802dot11DataRateControlTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 5, 1), )
if mibBuilder.loadTexts: ieee802dot11DataRateControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: ieee802dot11DataRateControlTable.setDescription('')
ieee802dot11DataRateControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ieee802dot11DataRateControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ieee802dot11DataRateControlEntry.setDescription('')
dot11DataRateControl = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DataRateControl.setStatus('mandatory')
if mibBuilder.loadTexts: dot11DataRateControl.setDescription('')
dot11DataRateSetDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("set", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DataRateSetDefault.setStatus('mandatory')
if mibBuilder.loadTexts: dot11DataRateSetDefault.setDescription('')
ieee802dot11DataRateTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 5, 2), )
if mibBuilder.loadTexts: ieee802dot11DataRateTable.setStatus('mandatory')
if mibBuilder.loadTexts: ieee802dot11DataRateTable.setDescription('')
ieee802dot11DataRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 5, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ieee802dot11DataRateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ieee802dot11DataRateEntry.setDescription('')
dot11DataRate1Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DataRate1Mb.setStatus('mandatory')
if mibBuilder.loadTexts: dot11DataRate1Mb.setDescription('')
dot11DataRate2Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DataRate2Mb.setStatus('mandatory')
if mibBuilder.loadTexts: dot11DataRate2Mb.setDescription('')
dot11DataRate5dot5Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DataRate5dot5Mb.setStatus('mandatory')
if mibBuilder.loadTexts: dot11DataRate5dot5Mb.setDescription('')
dot11DataRate6Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DataRate6Mb.setStatus('mandatory')
if mibBuilder.loadTexts: dot11DataRate6Mb.setDescription('')
dot11DataRate9Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DataRate9Mb.setStatus('mandatory')
if mibBuilder.loadTexts: dot11DataRate9Mb.setDescription('')
dot11DataRate11Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DataRate11Mb.setStatus('mandatory')
if mibBuilder.loadTexts: dot11DataRate11Mb.setDescription('')
dot11DataRate12Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DataRate12Mb.setStatus('mandatory')
if mibBuilder.loadTexts: dot11DataRate12Mb.setDescription('')
dot11DataRate18Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DataRate18Mb.setStatus('mandatory')
if mibBuilder.loadTexts: dot11DataRate18Mb.setDescription('')
dot11DataRate24Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DataRate24Mb.setStatus('mandatory')
if mibBuilder.loadTexts: dot11DataRate24Mb.setDescription('')
dot11DataRate36Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DataRate36Mb.setStatus('mandatory')
if mibBuilder.loadTexts: dot11DataRate36Mb.setDescription('')
dot11DataRate48Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 5, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DataRate48Mb.setStatus('mandatory')
if mibBuilder.loadTexts: dot11DataRate48Mb.setDescription('')
dot11DataRate54Mb = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 3, 5, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot11DataRate54Mb.setStatus('mandatory')
if mibBuilder.loadTexts: dot11DataRate54Mb.setDescription('')
administration = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4))
users = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 1))
usersTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 1, 1), )
if mibBuilder.loadTexts: usersTable.setStatus('mandatory')
if mibBuilder.loadTexts: usersTable.setDescription('')
usersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 1, 1, 1), ).setIndexNames((0, "DWL-3200", "usersIndex"))
if mibBuilder.loadTexts: usersEntry.setStatus('mandatory')
if mibBuilder.loadTexts: usersEntry.setDescription('')
usersIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 1, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: usersIndex.setStatus('mandatory')
if mibBuilder.loadTexts: usersIndex.setDescription('')
usersName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usersName.setStatus('mandatory')
if mibBuilder.loadTexts: usersName.setDescription('')
usersPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usersPassword.setStatus('mandatory')
if mibBuilder.loadTexts: usersPassword.setDescription('')
device = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 2))
deviceRestart = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("reboot", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceRestart.setStatus('mandatory')
if mibBuilder.loadTexts: deviceRestart.setDescription('')
deviceFactoryDefault = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deviceFactoryDefault.setStatus('mandatory')
if mibBuilder.loadTexts: deviceFactoryDefault.setDescription('')
update = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 3))
updateFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 3, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: updateFirmwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: updateFirmwareVersion.setDescription('')
tftp = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 3, 2))
tftpServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 3, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpServerIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: tftpServerIPAddress.setDescription('')
tftpRemoteFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 3, 2, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpRemoteFileName.setStatus('mandatory')
if mibBuilder.loadTexts: tftpRemoteFileName.setDescription('')
tftpCommand = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("connect", 1), ("get", 2), ("put", 3), ("nothing", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpCommand.setStatus('mandatory')
if mibBuilder.loadTexts: tftpCommand.setDescription('')
tftpUpgradeSettingCommand = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 6))).clone(namedValues=NamedValues(("firmwareUpdate", 1), ("configSave", 3), ("reboot", 4), ("factoryReset", 5), ("nothing", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpUpgradeSettingCommand.setStatus('mandatory')
if mibBuilder.loadTexts: tftpUpgradeSettingCommand.setDescription('')
ftp = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 3, 3))
ftpServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 3, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpServerIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ftpServerIPAddress.setDescription('')
ftpUserName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 3, 3, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpUserName.setStatus('mandatory')
if mibBuilder.loadTexts: ftpUserName.setDescription('')
ftpPassword = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 3, 3, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPassword.setStatus('mandatory')
if mibBuilder.loadTexts: ftpPassword.setDescription('')
ftpRemoteFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 3, 3, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpRemoteFileName.setStatus('mandatory')
if mibBuilder.loadTexts: ftpRemoteFileName.setDescription('')
ftpCommand = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 3, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("connect", 1), ("get", 2), ("put", 3), ("nothing", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpCommand.setStatus('mandatory')
if mibBuilder.loadTexts: ftpCommand.setDescription('')
discardChanges = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("discard", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: discardChanges.setStatus('mandatory')
if mibBuilder.loadTexts: discardChanges.setDescription('')
ftpUpgradeSettingCommand = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 3, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("firmwareUpdate", 1), ("configSetting", 2), ("configSave", 3), ("reboot", 4), ("factoryReset", 5), ("nothing", 6), ("certificateFileUpdate", 7), ("keyFileUpdate", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpUpgradeSettingCommand.setStatus('mandatory')
if mibBuilder.loadTexts: ftpUpgradeSettingCommand.setDescription('')
console = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 4))
telnet = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnet.setStatus('mandatory')
if mibBuilder.loadTexts: telnet.setDescription('')
ssh = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssh.setStatus('mandatory')
if mibBuilder.loadTexts: ssh.setDescription('')
timeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("never", 0), ("s60", 1), ("s180", 2), ("s300", 3), ("s600", 4), ("s900", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeout.setStatus('mandatory')
if mibBuilder.loadTexts: timeout.setDescription('')
web = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 5))
ssl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 7))
sntp = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 8))
sntpServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 8, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpServerIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sntpServerIpAddress.setDescription('')
sntpTimeZoneIndex = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 75))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpTimeZoneIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sntpTimeZoneIndex.setDescription('')
sntpDayLightSaving = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpDayLightSaving.setStatus('mandatory')
if mibBuilder.loadTexts: sntpDayLightSaving.setDescription('')
sntpTimeofDay = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 8, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpTimeofDay.setStatus('mandatory')
if mibBuilder.loadTexts: sntpTimeofDay.setDescription('')
smtp = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 9))
smtpStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: smtpStatus.setDescription('')
smtpServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 9, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpServerIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: smtpServerIpAddress.setDescription('')
smtpSender = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 9, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpSender.setStatus('mandatory')
if mibBuilder.loadTexts: smtpSender.setDescription('')
smtpRecipient = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 9, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpRecipient.setStatus('mandatory')
if mibBuilder.loadTexts: smtpRecipient.setDescription('')
managerIpAddressSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 10))
managerIpAddressStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managerIpAddressStatus.setStatus('mandatory')
if mibBuilder.loadTexts: managerIpAddressStatus.setDescription('')
managerIpAddressTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 10, 2), )
if mibBuilder.loadTexts: managerIpAddressTable.setStatus('mandatory')
if mibBuilder.loadTexts: managerIpAddressTable.setDescription('')
managerIpAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 10, 2, 1), ).setIndexNames((0, "DWL-3200", "managerIpAddressIndex"))
if mibBuilder.loadTexts: managerIpAddressEntry.setStatus('mandatory')
if mibBuilder.loadTexts: managerIpAddressEntry.setDescription('')
managerIpAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 10, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: managerIpAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: managerIpAddressIndex.setDescription('')
managerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 10, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managerIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: managerIpAddress.setDescription('')
managerIpRangeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 10, 3), )
if mibBuilder.loadTexts: managerIpRangeTable.setStatus('mandatory')
if mibBuilder.loadTexts: managerIpRangeTable.setDescription('')
managerIpRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 10, 3, 1), ).setIndexNames((0, "DWL-3200", "managerIpRangeIndex"))
if mibBuilder.loadTexts: managerIpRangeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: managerIpRangeEntry.setDescription('')
managerIpRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 10, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: managerIpRangeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: managerIpRangeIndex.setDescription('')
managerStartIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 10, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managerStartIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: managerStartIpAddress.setDescription('')
managerEndIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 10, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managerEndIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: managerEndIpAddress.setDescription('')
control = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 11))
pingcontrol = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingcontrol.setStatus('mandatory')
if mibBuilder.loadTexts: pingcontrol.setDescription(' ping control ')
adminAPwithWlan = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 11, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminAPwithWlan.setStatus('mandatory')
if mibBuilder.loadTexts: adminAPwithWlan.setDescription(' Administrate AP with WLAN setting ')
managerVLANIDSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 12))
managerVLANIDStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managerVLANIDStatus.setStatus('mandatory')
if mibBuilder.loadTexts: managerVLANIDStatus.setDescription('')
managerVLANID = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 4, 12, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managerVLANID.setStatus('mandatory')
if mibBuilder.loadTexts: managerVLANID.setDescription('')
report = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5))
deviceInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 1))
deviceInformationFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceInformationFirmwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: deviceInformationFirmwareVersion.setDescription('')
interfaceInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 1, 2))
interfaceInformationTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 1, 2, 1), )
if mibBuilder.loadTexts: interfaceInformationTable.setStatus('mandatory')
if mibBuilder.loadTexts: interfaceInformationTable.setDescription('')
interfaceInformationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: interfaceInformationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: interfaceInformationEntry.setDescription('')
ifGetIpAddressFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifGetIpAddressFrom.setStatus('mandatory')
if mibBuilder.loadTexts: ifGetIpAddressFrom.setDescription('')
ifIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 1, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ifIpAddress.setDescription('')
ifSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 1, 2, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: ifSubnetMask.setDescription('')
ifDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 1, 2, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifDefaultGateway.setStatus('mandatory')
if mibBuilder.loadTexts: ifDefaultGateway.setDescription('')
ifMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 1, 2, 1, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ifMacAddress.setDescription('')
apstatus = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 1, 3))
deviceInformationCpuUtilization = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceInformationCpuUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: deviceInformationCpuUtilization.setDescription('AP status :CPU utilization')
deviceInformationMemUtilization = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceInformationMemUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: deviceInformationMemUtilization.setDescription('AP status :Memory utilization')
trafficStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2))
trafficStatisticsWired = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 1))
dot3TrafficStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 1, 1))
dot3TrafficStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 1, 1, 1), )
if mibBuilder.loadTexts: dot3TrafficStatisticsTable.setStatus('mandatory')
if mibBuilder.loadTexts: dot3TrafficStatisticsTable.setDescription('')
dot3TrafficStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot3TrafficStatisticsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dot3TrafficStatisticsEntry.setDescription('')
dot3TransmittedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3TransmittedFrameCount.setStatus('mandatory')
if mibBuilder.loadTexts: dot3TransmittedFrameCount.setDescription('')
dot3ReceivedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 1, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3ReceivedFrameCount.setStatus('mandatory')
if mibBuilder.loadTexts: dot3ReceivedFrameCount.setDescription('')
dot3TransmittedByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3TransmittedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: dot3TransmittedByteCount.setDescription('')
dot3ReceivedByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot3ReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: dot3ReceivedByteCount.setDescription('')
trafficStatisticsWireless = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2))
dot11TrafficStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1))
dot11TrafficStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1, 1), )
if mibBuilder.loadTexts: dot11TrafficStatisticsTable.setStatus('mandatory')
if mibBuilder.loadTexts: dot11TrafficStatisticsTable.setDescription('')
dot11TrafficStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11TrafficStatisticsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dot11TrafficStatisticsEntry.setDescription('')
dot11TransmitSuccessRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TransmitSuccessRate.setStatus('mandatory')
if mibBuilder.loadTexts: dot11TransmitSuccessRate.setDescription('')
dot11TransmitRetryRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TransmitRetryRate.setStatus('mandatory')
if mibBuilder.loadTexts: dot11TransmitRetryRate.setDescription('')
dot11ReceiveSuccessRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ReceiveSuccessRate.setStatus('mandatory')
if mibBuilder.loadTexts: dot11ReceiveSuccessRate.setDescription('')
dot11ReceiveDuplicateRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ReceiveDuplicateRate.setStatus('mandatory')
if mibBuilder.loadTexts: dot11ReceiveDuplicateRate.setDescription('')
dot11RtsSuccessCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RtsSuccessCount.setStatus('mandatory')
if mibBuilder.loadTexts: dot11RtsSuccessCount.setDescription('')
dot11RtsFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11RtsFailureCount.setStatus('mandatory')
if mibBuilder.loadTexts: dot11RtsFailureCount.setDescription('')
dot11TransmittedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TransmittedFrameCount.setStatus('mandatory')
if mibBuilder.loadTexts: dot11TransmittedFrameCount.setDescription('')
dot11MulticastTransmittedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11MulticastTransmittedFrameCount.setStatus('mandatory')
if mibBuilder.loadTexts: dot11MulticastTransmittedFrameCount.setDescription('')
dot11TransmittedErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TransmittedErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: dot11TransmittedErrorCount.setDescription('')
dot11TransmittedTotalRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TransmittedTotalRetryCount.setStatus('mandatory')
if mibBuilder.loadTexts: dot11TransmittedTotalRetryCount.setDescription('')
dot11TransmittedMultipleRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TransmittedMultipleRetryCount.setStatus('mandatory')
if mibBuilder.loadTexts: dot11TransmittedMultipleRetryCount.setDescription('')
dot11ReceivedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ReceivedFrameCount.setStatus('mandatory')
if mibBuilder.loadTexts: dot11ReceivedFrameCount.setDescription('')
dot11MulticastReceivedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11MulticastReceivedFrameCount.setStatus('mandatory')
if mibBuilder.loadTexts: dot11MulticastReceivedFrameCount.setDescription('')
dot11ReceivedFrameFcsErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ReceivedFrameFcsErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: dot11ReceivedFrameFcsErrorCount.setDescription('')
dot11ReceivedFrameDuplicateCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ReceivedFrameDuplicateCount.setStatus('mandatory')
if mibBuilder.loadTexts: dot11ReceivedFrameDuplicateCount.setDescription('')
dot11AckReceivedFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11AckReceivedFailureCount.setStatus('mandatory')
if mibBuilder.loadTexts: dot11AckReceivedFailureCount.setDescription('')
dot11WepExcludedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11WepExcludedFrameCount.setStatus('mandatory')
if mibBuilder.loadTexts: dot11WepExcludedFrameCount.setDescription('')
dot11WepIcvErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11WepIcvErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: dot11WepIcvErrorCount.setDescription('')
dot11TransmitedByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11TransmitedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: dot11TransmitedByteCount.setDescription('')
dot11ReceivedByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 1, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot11ReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: dot11ReceivedByteCount.setDescription('')
dot16TrafficStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 3))
trafficStatisticsOn11aEverySSID = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4))
trafficStatisticsOn11APrimarySSID = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 1))
onPrimarySSIDdot11aReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onPrimarySSIDdot11aReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onPrimarySSIDdot11aReceivedByteCount.setDescription('')
onPrimarySSIDdot11aTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onPrimarySSIDdot11aTransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onPrimarySSIDdot11aTransmitByteCount.setDescription('')
on11aPrimarySSIDdot3ReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aPrimarySSIDdot3ReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11aPrimarySSIDdot3ReceivedByteCount.setDescription('')
on11aPrimarySSIDdot3TransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aPrimarySSIDdot3TransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11aPrimarySSIDdot3TransmitByteCount.setDescription('')
onPrimarySSIDdot11aCRCErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onPrimarySSIDdot11aCRCErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onPrimarySSIDdot11aCRCErrorCount.setDescription('')
onPrimarySSIDdot11aPHYErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onPrimarySSIDdot11aPHYErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onPrimarySSIDdot11aPHYErrorCount.setDescription('')
onPrimarySSIDdot11aMICErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onPrimarySSIDdot11aMICErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onPrimarySSIDdot11aMICErrorCount.setDescription('')
onPrimarySSIDdot11aKEYDecrErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onPrimarySSIDdot11aKEYDecrErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onPrimarySSIDdot11aKEYDecrErrorCount.setDescription('')
on11aPrimarySSIDdot3ReceivedPKTCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aPrimarySSIDdot3ReceivedPKTCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11aPrimarySSIDdot3ReceivedPKTCount.setDescription('')
onPrimarySSIDdot11aUserReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onPrimarySSIDdot11aUserReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onPrimarySSIDdot11aUserReceivedByteCount.setDescription('')
onPrimarySSIDdot11aUserTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onPrimarySSIDdot11aUserTransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onPrimarySSIDdot11aUserTransmitByteCount.setDescription('')
dot11aTrafficStatisticsByTimeOnPrimarySSIDTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 1, 12), )
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnPrimarySSIDTable.setStatus('mandatory')
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnPrimarySSIDTable.setDescription('')
dot11aTrafficStatisticsByTimeOnPrimarySSIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 1, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnPrimarySSIDEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnPrimarySSIDEntry.setDescription('')
onPrimarySSIDdot11aAssociatedMACCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 1, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onPrimarySSIDdot11aAssociatedMACCount.setStatus('mandatory')
if mibBuilder.loadTexts: onPrimarySSIDdot11aAssociatedMACCount.setDescription('')
onPrimarySSIDdot11aErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 1, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onPrimarySSIDdot11aErrorFrameRate.setStatus('mandatory')
if mibBuilder.loadTexts: onPrimarySSIDdot11aErrorFrameRate.setDescription('')
on11aPrimarySSIDdot3ErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 1, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aPrimarySSIDdot3ErrorFrameRate.setStatus('mandatory')
if mibBuilder.loadTexts: on11aPrimarySSIDdot3ErrorFrameRate.setDescription('')
onPrimarySSIDdot11aWirelessUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 1, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onPrimarySSIDdot11aWirelessUsage.setStatus('mandatory')
if mibBuilder.loadTexts: onPrimarySSIDdot11aWirelessUsage.setDescription('')
trafficStatisticsOn11aSSID1 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 2))
onSSID1dot11aReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID1dot11aReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID1dot11aReceivedByteCount.setDescription('')
onSSID1dot11aTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID1dot11aTransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID1dot11aTransmitByteCount.setDescription('')
on11aSSID1dot3ReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID1dot3ReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11aSSID1dot3ReceivedByteCount.setDescription('')
on11aSSID1dot3TransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID1dot3TransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11aSSID1dot3TransmitByteCount.setDescription('')
onSSID1dot11aCRCErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID1dot11aCRCErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID1dot11aCRCErrorCount.setDescription('')
onSSID1dot11aPHYErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID1dot11aPHYErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID1dot11aPHYErrorCount.setDescription('')
onSSID1dot11aMICErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID1dot11aMICErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID1dot11aMICErrorCount.setDescription('')
onSSID1dot11aKEYDecrErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID1dot11aKEYDecrErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID1dot11aKEYDecrErrorCount.setDescription('')
on11aSSID1dot3ReceivedPKTCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID1dot3ReceivedPKTCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11aSSID1dot3ReceivedPKTCount.setDescription('')
onSSID1dot11aUserReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID1dot11aUserReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID1dot11aUserReceivedByteCount.setDescription('')
onSSID1dot11aUserTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID1dot11aUserTransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID1dot11aUserTransmitByteCount.setDescription('')
dot11aTrafficStatisticsByTimeOnSSID1Table = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 2, 12), )
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnSSID1Table.setStatus('mandatory')
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnSSID1Table.setDescription('')
dot11aTrafficStatisticsByTimeOnSSID1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 2, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnSSID1Entry.setStatus('mandatory')
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnSSID1Entry.setDescription('')
onSSID1dot11AssociatedMACCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 2, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID1dot11AssociatedMACCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID1dot11AssociatedMACCount.setDescription('')
onSSID1dot11aErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 2, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID1dot11aErrorFrameRate.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID1dot11aErrorFrameRate.setDescription('')
on11aSSID1dot3ErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 2, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID1dot3ErrorFrameRate.setStatus('mandatory')
if mibBuilder.loadTexts: on11aSSID1dot3ErrorFrameRate.setDescription('')
onSSID1dot11aWirelessUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 2, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID1dot11aWirelessUsage.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID1dot11aWirelessUsage.setDescription('')
trafficStatisticsOn11aSSID2 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 3))
onSSID2dot11aReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID2dot11aReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID2dot11aReceivedByteCount.setDescription('')
onSSID2dot11aTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID2dot11aTransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID2dot11aTransmitByteCount.setDescription('')
on11aSSID2dot3ReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID2dot3ReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11aSSID2dot3ReceivedByteCount.setDescription('')
on11aSSID2dot3TransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID2dot3TransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11aSSID2dot3TransmitByteCount.setDescription('')
onSSID2dot11aCRCErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID2dot11aCRCErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID2dot11aCRCErrorCount.setDescription('')
onSSID2dot11aPHYErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID2dot11aPHYErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID2dot11aPHYErrorCount.setDescription('')
onSSID2dot11aMICErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID2dot11aMICErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID2dot11aMICErrorCount.setDescription('')
onSSID2dot11aKEYDecrErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID2dot11aKEYDecrErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID2dot11aKEYDecrErrorCount.setDescription('')
on11aSSID2dot3ReceivedPKTCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID2dot3ReceivedPKTCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11aSSID2dot3ReceivedPKTCount.setDescription('')
onSSID2dot11aUserReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID2dot11aUserReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID2dot11aUserReceivedByteCount.setDescription('')
onSSID2dot11aUserTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID2dot11aUserTransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID2dot11aUserTransmitByteCount.setDescription('')
dot11aTrafficStatisticsByTimeOnSSID2Table = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 3, 12), )
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnSSID2Table.setStatus('mandatory')
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnSSID2Table.setDescription('')
dot11aTrafficStatisticsByTimeOnSSID2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 3, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnSSID2Entry.setStatus('mandatory')
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnSSID2Entry.setDescription('')
onSSID2dot11associatedMACCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 3, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID2dot11associatedMACCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID2dot11associatedMACCount.setDescription('')
onSSID2dot11aErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 3, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID2dot11aErrorFrameRate.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID2dot11aErrorFrameRate.setDescription('')
on11aSSID2dot3ErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 3, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID2dot3ErrorFrameRate.setStatus('mandatory')
if mibBuilder.loadTexts: on11aSSID2dot3ErrorFrameRate.setDescription('')
onSSID2dot11aWirelessUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 3, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID2dot11aWirelessUsage.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID2dot11aWirelessUsage.setDescription('')
trafficStatisticsOn11aSSID3 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 4))
onSSID3dot11aReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID3dot11aReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID3dot11aReceivedByteCount.setDescription('')
onSSID3dot11aTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID3dot11aTransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID3dot11aTransmitByteCount.setDescription('')
on11aSSID3dot3ReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID3dot3ReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11aSSID3dot3ReceivedByteCount.setDescription('')
on11aSSID3dot3TransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID3dot3TransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11aSSID3dot3TransmitByteCount.setDescription('')
onSSID3dot11aCRCErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID3dot11aCRCErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID3dot11aCRCErrorCount.setDescription('')
onSSID3dot11aPHYErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID3dot11aPHYErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID3dot11aPHYErrorCount.setDescription('')
onSSID3dot11aMICErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID3dot11aMICErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID3dot11aMICErrorCount.setDescription('')
onSSID3dot11aKEYDecrErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID3dot11aKEYDecrErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID3dot11aKEYDecrErrorCount.setDescription('')
on11aSSID3dot3ReceivedPKTCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID3dot3ReceivedPKTCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11aSSID3dot3ReceivedPKTCount.setDescription('')
onSSID3dot11aUserReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID3dot11aUserReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID3dot11aUserReceivedByteCount.setDescription('')
onSSID3dot11aUserTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID3dot11aUserTransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID3dot11aUserTransmitByteCount.setDescription('')
dot11aTrafficStatisticsByTimeOnSSID3Table = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 4, 12), )
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnSSID3Table.setStatus('mandatory')
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnSSID3Table.setDescription('')
dot11aTrafficStatisticsByTimeOnSSID3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 4, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnSSID3Entry.setStatus('mandatory')
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnSSID3Entry.setDescription('')
onSSID3dot11associatedMACCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 4, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID3dot11associatedMACCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID3dot11associatedMACCount.setDescription('')
onSSID3dot11aErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 4, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID3dot11aErrorFrameRate.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID3dot11aErrorFrameRate.setDescription('')
on11aSSID3dot3ErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 4, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID3dot3ErrorFrameRate.setStatus('mandatory')
if mibBuilder.loadTexts: on11aSSID3dot3ErrorFrameRate.setDescription('')
onSSID3dot11aWirelessUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 4, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID3dot11aWirelessUsage.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID3dot11aWirelessUsage.setDescription('')
trafficStatisticsOn11aSSID4 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 5))
onSSID4dot11aReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID4dot11aReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID4dot11aReceivedByteCount.setDescription('')
onSSID4dot11aTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID4dot11aTransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID4dot11aTransmitByteCount.setDescription('')
on11aSSID4dot3ReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID4dot3ReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11aSSID4dot3ReceivedByteCount.setDescription('')
on11aSSID4dot3TransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID4dot3TransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11aSSID4dot3TransmitByteCount.setDescription('')
onSSID4dot11aCRCErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID4dot11aCRCErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID4dot11aCRCErrorCount.setDescription('')
onSSID4dot11aPHYErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID4dot11aPHYErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID4dot11aPHYErrorCount.setDescription('')
onSSID4dot11aMICErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID4dot11aMICErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID4dot11aMICErrorCount.setDescription('')
onSSID4dot11aKEYDecrErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID4dot11aKEYDecrErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID4dot11aKEYDecrErrorCount.setDescription('')
on11aSSID4dot3ReceivedPKTCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID4dot3ReceivedPKTCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11aSSID4dot3ReceivedPKTCount.setDescription('')
onSSID4dot11aUserReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID4dot11aUserReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID4dot11aUserReceivedByteCount.setDescription('')
onSSID4dot11aUserTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 5, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID4dot11aUserTransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID4dot11aUserTransmitByteCount.setDescription('')
dot11aTrafficStatisticsByTimeOnSSID4Table = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 5, 12), )
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnSSID4Table.setStatus('mandatory')
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnSSID4Table.setDescription('')
dot11aTrafficStatisticsByTimeOnSSID4Entry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 5, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnSSID4Entry.setStatus('mandatory')
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnSSID4Entry.setDescription('')
onSSID4dot11associatedMACCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 5, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID4dot11associatedMACCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID4dot11associatedMACCount.setDescription('')
onSSID4dot11aErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 5, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID4dot11aErrorFrameRate.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID4dot11aErrorFrameRate.setDescription('')
on11aSSID4dot3ErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 5, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID4dot3ErrorFrameRate.setStatus('mandatory')
if mibBuilder.loadTexts: on11aSSID4dot3ErrorFrameRate.setDescription('')
onSSID4dot11aWirelessUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 5, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID4dot11aWirelessUsage.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID4dot11aWirelessUsage.setDescription('')
trafficStatisticsOn11aSSID5 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 6))
onSSID5dot11aReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID5dot11aReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID5dot11aReceivedByteCount.setDescription('')
onSSID5dot11aTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID5dot11aTransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID5dot11aTransmitByteCount.setDescription('')
on11aSSID5dot3ReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID5dot3ReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11aSSID5dot3ReceivedByteCount.setDescription('')
on11aSSID5dot3TransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID5dot3TransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11aSSID5dot3TransmitByteCount.setDescription('')
onSSID5dot11aCRCErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID5dot11aCRCErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID5dot11aCRCErrorCount.setDescription('')
onSSID5dot11aPHYErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID5dot11aPHYErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID5dot11aPHYErrorCount.setDescription('')
onSSID5dot11aMICErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID5dot11aMICErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID5dot11aMICErrorCount.setDescription('')
onSSID5dot11aKEYDecrErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID5dot11aKEYDecrErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID5dot11aKEYDecrErrorCount.setDescription('')
on11aSSID5dot3ReceivedPKTCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID5dot3ReceivedPKTCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11aSSID5dot3ReceivedPKTCount.setDescription('')
onSSID5dot11aUserReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID5dot11aUserReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID5dot11aUserReceivedByteCount.setDescription('')
onSSID5dot11aUserTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 6, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID5dot11aUserTransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID5dot11aUserTransmitByteCount.setDescription('')
dot11aTrafficStatisticsByTimeOnSSID5Table = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 6, 12), )
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnSSID5Table.setStatus('mandatory')
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnSSID5Table.setDescription('')
dot11aTrafficStatisticsByTimeOnSSID5Entry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 6, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnSSID5Entry.setStatus('mandatory')
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnSSID5Entry.setDescription('')
onSSID5dot11associatedMACCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 6, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID5dot11associatedMACCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID5dot11associatedMACCount.setDescription('')
onSSID5dot11aErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 6, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID5dot11aErrorFrameRate.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID5dot11aErrorFrameRate.setDescription('')
on11aSSID5dot3ErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 6, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID5dot3ErrorFrameRate.setStatus('mandatory')
if mibBuilder.loadTexts: on11aSSID5dot3ErrorFrameRate.setDescription('')
onSSID5dot11aWirelessUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 6, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID5dot11aWirelessUsage.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID5dot11aWirelessUsage.setDescription('')
trafficStatisticsOn11aSSID6 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 7))
onSSID6dot11aReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID6dot11aReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID6dot11aReceivedByteCount.setDescription('')
onSSID6dot11aTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID6dot11aTransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID6dot11aTransmitByteCount.setDescription('')
on11aSSID6dot3ReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID6dot3ReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11aSSID6dot3ReceivedByteCount.setDescription('')
on11aSSID6dot3TransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID6dot3TransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11aSSID6dot3TransmitByteCount.setDescription('')
onSSID6dot11aCRCErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID6dot11aCRCErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID6dot11aCRCErrorCount.setDescription('')
onSSID6dot11aPHYErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID6dot11aPHYErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID6dot11aPHYErrorCount.setDescription('')
onSSID6dot11aMICErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID6dot11aMICErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID6dot11aMICErrorCount.setDescription('')
onSSID6dot11aKEYDecrErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 7, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID6dot11aKEYDecrErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID6dot11aKEYDecrErrorCount.setDescription('')
on11aSSID6dot3ReceivedPKTCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 7, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID6dot3ReceivedPKTCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11aSSID6dot3ReceivedPKTCount.setDescription('')
onSSID6dot11aUserReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 7, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID6dot11aUserReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID6dot11aUserReceivedByteCount.setDescription('')
onSSID6dot11aUserTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 7, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID6dot11aUserTransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID6dot11aUserTransmitByteCount.setDescription('')
dot11aTrafficStatisticsByTimeOnSSID6Table = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 7, 12), )
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnSSID6Table.setStatus('mandatory')
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnSSID6Table.setDescription('')
dot11aTrafficStatisticsByTimeOnSSID6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 7, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnSSID6Entry.setStatus('mandatory')
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnSSID6Entry.setDescription('')
onSSID6dot11associatedMACCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 7, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID6dot11associatedMACCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID6dot11associatedMACCount.setDescription('')
onSSID6dot11aErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 7, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID6dot11aErrorFrameRate.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID6dot11aErrorFrameRate.setDescription('')
on11aSSID6dot3ErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 7, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID6dot3ErrorFrameRate.setStatus('mandatory')
if mibBuilder.loadTexts: on11aSSID6dot3ErrorFrameRate.setDescription('')
onSSID6dot11aWirelessUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 7, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID6dot11aWirelessUsage.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID6dot11aWirelessUsage.setDescription('')
trafficStatisticsOn11aSSID7 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 8))
onSSID7dot11aReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID7dot11aReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID7dot11aReceivedByteCount.setDescription('')
onSSID7dot11aTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID7dot11aTransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID7dot11aTransmitByteCount.setDescription('')
on11aSSID7dot3ReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID7dot3ReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11aSSID7dot3ReceivedByteCount.setDescription('')
on11aSSID7dot3TransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID7dot3TransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11aSSID7dot3TransmitByteCount.setDescription('')
onSSID7dot11aCRCErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID7dot11aCRCErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID7dot11aCRCErrorCount.setDescription('')
onSSID7dot11aPHYErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 8, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID7dot11aPHYErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID7dot11aPHYErrorCount.setDescription('')
onSSID7dot11aMICErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 8, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID7dot11aMICErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID7dot11aMICErrorCount.setDescription('')
onSSID7dot11aKEYDecrErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 8, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID7dot11aKEYDecrErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID7dot11aKEYDecrErrorCount.setDescription('')
on11aSSID7dot3ReceivedPKTCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 8, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID7dot3ReceivedPKTCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11aSSID7dot3ReceivedPKTCount.setDescription('')
onSSID7dot11aUserReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 8, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID7dot11aUserReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID7dot11aUserReceivedByteCount.setDescription('')
onSSID7dot11aUserTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 8, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID7dot11aUserTransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID7dot11aUserTransmitByteCount.setDescription('')
dot11aTrafficStatisticsByTimeOnSSID7Table = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 8, 12), )
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnSSID7Table.setStatus('mandatory')
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnSSID7Table.setDescription('')
dot11aTrafficStatisticsByTimeOnSSID7Entry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 8, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnSSID7Entry.setStatus('mandatory')
if mibBuilder.loadTexts: dot11aTrafficStatisticsByTimeOnSSID7Entry.setDescription('')
onSSID7dot11associatedMACCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 8, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID7dot11associatedMACCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID7dot11associatedMACCount.setDescription('')
onSSID7dot11aErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 8, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID7dot11aErrorFrameRate.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID7dot11aErrorFrameRate.setDescription('')
on11aSSID7dot3ErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 8, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11aSSID7dot3ErrorFrameRate.setStatus('mandatory')
if mibBuilder.loadTexts: on11aSSID7dot3ErrorFrameRate.setDescription('')
onSSID7dot11aWirelessUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 4, 8, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID7dot11aWirelessUsage.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID7dot11aWirelessUsage.setDescription('')
trafficStatisticsOn11gEverySSID = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5))
trafficStatisticson11gPrimarySSID = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 1))
onPrimarySSIDdot11gReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onPrimarySSIDdot11gReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onPrimarySSIDdot11gReceivedByteCount.setDescription('')
onPrimarySSIDdot11gTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onPrimarySSIDdot11gTransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onPrimarySSIDdot11gTransmitByteCount.setDescription('')
on11gPrimarySSIDdot3ReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gPrimarySSIDdot3ReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11gPrimarySSIDdot3ReceivedByteCount.setDescription('')
on11gPrimarySSIDdot3TransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gPrimarySSIDdot3TransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11gPrimarySSIDdot3TransmitByteCount.setDescription('')
onPrimarySSIDdot11gCRCErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onPrimarySSIDdot11gCRCErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onPrimarySSIDdot11gCRCErrorCount.setDescription('')
onPrimarySSIDdot11gPHYErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onPrimarySSIDdot11gPHYErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onPrimarySSIDdot11gPHYErrorCount.setDescription('')
onPrimarySSIDdot11gMICErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onPrimarySSIDdot11gMICErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onPrimarySSIDdot11gMICErrorCount.setDescription('')
onPrimarySSIDdot11gKEYDecrErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onPrimarySSIDdot11gKEYDecrErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onPrimarySSIDdot11gKEYDecrErrorCount.setDescription('')
on11gPrimarySSIDdot3ReceivedPKTCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gPrimarySSIDdot3ReceivedPKTCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11gPrimarySSIDdot3ReceivedPKTCount.setDescription('')
onPrimarySSIDdot11gUserReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onPrimarySSIDdot11gUserReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onPrimarySSIDdot11gUserReceivedByteCount.setDescription('')
onPrimarySSIDdot11gUserTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onPrimarySSIDdot11gUserTransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onPrimarySSIDdot11gUserTransmitByteCount.setDescription('')
dot11gTrafficStatisticsByTimeOnPrimarySSIDTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 1, 12), )
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnPrimarySSIDTable.setStatus('mandatory')
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnPrimarySSIDTable.setDescription('')
dot11gTrafficStatisticsByTimeOnPrimarySSIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 1, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnPrimarySSIDEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnPrimarySSIDEntry.setDescription('')
onPrimarySSIDdot11gAssociatedMACCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 1, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onPrimarySSIDdot11gAssociatedMACCount.setStatus('mandatory')
if mibBuilder.loadTexts: onPrimarySSIDdot11gAssociatedMACCount.setDescription('')
onPrimarySSIDdot11gErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 1, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onPrimarySSIDdot11gErrorFrameRate.setStatus('mandatory')
if mibBuilder.loadTexts: onPrimarySSIDdot11gErrorFrameRate.setDescription('')
on11gPrimarySSIDdot3ErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 1, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gPrimarySSIDdot3ErrorFrameRate.setStatus('mandatory')
if mibBuilder.loadTexts: on11gPrimarySSIDdot3ErrorFrameRate.setDescription('')
onPrimarySSIDdot11gWirelessUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 1, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onPrimarySSIDdot11gWirelessUsage.setStatus('mandatory')
if mibBuilder.loadTexts: onPrimarySSIDdot11gWirelessUsage.setDescription('')
trafficStatisticson11gSSID1 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 2))
onSSID1dot11gReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID1dot11gReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID1dot11gReceivedByteCount.setDescription('')
onSSID1dot11gTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID1dot11gTransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID1dot11gTransmitByteCount.setDescription('')
on11gSSID1dot3ReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID1dot3ReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11gSSID1dot3ReceivedByteCount.setDescription('')
on11gSSID1dot3TransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID1dot3TransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11gSSID1dot3TransmitByteCount.setDescription('')
onSSID1dot11gCRCErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID1dot11gCRCErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID1dot11gCRCErrorCount.setDescription('')
onSSID1dot11gPHYErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID1dot11gPHYErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID1dot11gPHYErrorCount.setDescription('')
onSSID1dot11gMICErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID1dot11gMICErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID1dot11gMICErrorCount.setDescription('')
onSSID1dot11gKEYDecrErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID1dot11gKEYDecrErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID1dot11gKEYDecrErrorCount.setDescription('')
on11gSSID1dot3ReceivedPKTCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID1dot3ReceivedPKTCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11gSSID1dot3ReceivedPKTCount.setDescription('')
onSSID1dot11gUserReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID1dot11gUserReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID1dot11gUserReceivedByteCount.setDescription('')
onSSID1dot11gUserTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID1dot11gUserTransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID1dot11gUserTransmitByteCount.setDescription('')
dot11gTrafficStatisticsByTimeOnSSID1Table = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 2, 12), )
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnSSID1Table.setStatus('mandatory')
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnSSID1Table.setDescription('')
dot11gTrafficStatisticsByTimeOnSSID1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 2, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnSSID1Entry.setStatus('mandatory')
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnSSID1Entry.setDescription('')
onSSID1dot11gssociatedMACCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 2, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID1dot11gssociatedMACCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID1dot11gssociatedMACCount.setDescription('')
onSSID1dot11gErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 2, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID1dot11gErrorFrameRate.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID1dot11gErrorFrameRate.setDescription('')
on11gSSID1dot3ErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 2, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID1dot3ErrorFrameRate.setStatus('mandatory')
if mibBuilder.loadTexts: on11gSSID1dot3ErrorFrameRate.setDescription('')
onSSID1dot11gWirelessUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 2, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID1dot11gWirelessUsage.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID1dot11gWirelessUsage.setDescription('')
trafficStatisticson11gSSID2 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 3))
onSSID2dot11gReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID2dot11gReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID2dot11gReceivedByteCount.setDescription('')
onSSID2dot11gTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID2dot11gTransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID2dot11gTransmitByteCount.setDescription('')
on11gSSID2dot3ReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID2dot3ReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11gSSID2dot3ReceivedByteCount.setDescription('')
on11gSSID2dot3TransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID2dot3TransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11gSSID2dot3TransmitByteCount.setDescription('')
onSSID2dot11gCRCErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID2dot11gCRCErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID2dot11gCRCErrorCount.setDescription('')
onSSID2dot11gPHYErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID2dot11gPHYErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID2dot11gPHYErrorCount.setDescription('')
onSSID2dot11gMICErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID2dot11gMICErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID2dot11gMICErrorCount.setDescription('')
onSSID2dot11gKEYDecrErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID2dot11gKEYDecrErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID2dot11gKEYDecrErrorCount.setDescription('')
on11gSSID2dot3ReceivedPKTCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID2dot3ReceivedPKTCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11gSSID2dot3ReceivedPKTCount.setDescription('')
onSSID2dot11gUserReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID2dot11gUserReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID2dot11gUserReceivedByteCount.setDescription('')
onSSID2dot11gUserTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID2dot11gUserTransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID2dot11gUserTransmitByteCount.setDescription('')
dot11gTrafficStatisticsByTimeOnSSID2Table = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 3, 12), )
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnSSID2Table.setStatus('mandatory')
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnSSID2Table.setDescription('')
dot11gTrafficStatisticsByTimeOnSSID2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 3, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnSSID2Entry.setStatus('mandatory')
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnSSID2Entry.setDescription('')
onSSID2dot11gssociatedMACCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 3, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID2dot11gssociatedMACCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID2dot11gssociatedMACCount.setDescription('')
onSSID2dot11gErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 3, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID2dot11gErrorFrameRate.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID2dot11gErrorFrameRate.setDescription('')
on11gSSID2dot3ErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 3, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID2dot3ErrorFrameRate.setStatus('mandatory')
if mibBuilder.loadTexts: on11gSSID2dot3ErrorFrameRate.setDescription('')
onSSID2dot11gWirelessUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 3, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID2dot11gWirelessUsage.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID2dot11gWirelessUsage.setDescription('')
trafficStatisticson11gSSID3 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 4))
onSSID3dot11gReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID3dot11gReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID3dot11gReceivedByteCount.setDescription('')
onSSID3dot11gTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID3dot11gTransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID3dot11gTransmitByteCount.setDescription('')
on11gSSID3dot3ReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID3dot3ReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11gSSID3dot3ReceivedByteCount.setDescription('')
on11gSSID3dot3TransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID3dot3TransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11gSSID3dot3TransmitByteCount.setDescription('')
onSSID3dot11gCRCErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID3dot11gCRCErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID3dot11gCRCErrorCount.setDescription('')
onSSID3dot11gPHYErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID3dot11gPHYErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID3dot11gPHYErrorCount.setDescription('')
onSSID3dot11gMICErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID3dot11gMICErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID3dot11gMICErrorCount.setDescription('')
onSSID3dot11gKEYDecrErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID3dot11gKEYDecrErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID3dot11gKEYDecrErrorCount.setDescription('')
on11gSSID3dot3ReceivedPKTCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID3dot3ReceivedPKTCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11gSSID3dot3ReceivedPKTCount.setDescription('')
onSSID3dot11gUserReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID3dot11gUserReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID3dot11gUserReceivedByteCount.setDescription('')
onSSID3dot11gUserTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID3dot11gUserTransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID3dot11gUserTransmitByteCount.setDescription('')
dot11gTrafficStatisticsByTimeOnSSID3Table = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 4, 12), )
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnSSID3Table.setStatus('mandatory')
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnSSID3Table.setDescription('')
dot11gTrafficStatisticsByTimeOnSSID3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 4, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnSSID3Entry.setStatus('mandatory')
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnSSID3Entry.setDescription('')
onSSID3dot11gssociatedMACCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 4, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID3dot11gssociatedMACCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID3dot11gssociatedMACCount.setDescription('')
onSSID3dot11gErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 4, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID3dot11gErrorFrameRate.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID3dot11gErrorFrameRate.setDescription('')
on11gSSID3dot3ErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 4, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID3dot3ErrorFrameRate.setStatus('mandatory')
if mibBuilder.loadTexts: on11gSSID3dot3ErrorFrameRate.setDescription('')
onSSID3dot11gWirelessUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 4, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID3dot11gWirelessUsage.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID3dot11gWirelessUsage.setDescription('')
trafficStatisticson11gSSID4 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 5))
onSSID4dot11gReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID4dot11gReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID4dot11gReceivedByteCount.setDescription('')
onSSID4dot11gTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID4dot11gTransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID4dot11gTransmitByteCount.setDescription('')
on11gSSID4dot3ReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID4dot3ReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11gSSID4dot3ReceivedByteCount.setDescription('')
on11gSSID4dot3TransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID4dot3TransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11gSSID4dot3TransmitByteCount.setDescription('')
onSSID4dot11gCRCErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID4dot11gCRCErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID4dot11gCRCErrorCount.setDescription('')
onSSID4dot11gPHYErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID4dot11gPHYErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID4dot11gPHYErrorCount.setDescription('')
onSSID4dot11gMICErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID4dot11gMICErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID4dot11gMICErrorCount.setDescription('')
onSSID4dot11gKEYDecrErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID4dot11gKEYDecrErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID4dot11gKEYDecrErrorCount.setDescription('')
on11gSSID4dot3ReceivedPKTCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID4dot3ReceivedPKTCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11gSSID4dot3ReceivedPKTCount.setDescription('')
onSSID4dot11gUserReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID4dot11gUserReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID4dot11gUserReceivedByteCount.setDescription('')
onSSID4dot11gUserTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 5, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID4dot11gUserTransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID4dot11gUserTransmitByteCount.setDescription('')
dot11gTrafficStatisticsByTimeOnSSID4Table = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 5, 12), )
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnSSID4Table.setStatus('mandatory')
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnSSID4Table.setDescription('')
dot11gTrafficStatisticsByTimeOnSSID4Entry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 5, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnSSID4Entry.setStatus('mandatory')
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnSSID4Entry.setDescription('')
onSSID4dot11gssociatedMACCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 5, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID4dot11gssociatedMACCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID4dot11gssociatedMACCount.setDescription('')
onSSID4dot11gErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 5, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID4dot11gErrorFrameRate.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID4dot11gErrorFrameRate.setDescription('')
on11gSSID4dot3ErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 5, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID4dot3ErrorFrameRate.setStatus('mandatory')
if mibBuilder.loadTexts: on11gSSID4dot3ErrorFrameRate.setDescription('')
onSSID4dot11gWirelessUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 5, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID4dot11gWirelessUsage.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID4dot11gWirelessUsage.setDescription('')
trafficStatisticson11gSSID5 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 6))
onSSID5dot11gReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID5dot11gReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID5dot11gReceivedByteCount.setDescription('')
onSSID5dot11gTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID5dot11gTransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID5dot11gTransmitByteCount.setDescription('')
on11gSSID5dot3ReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID5dot3ReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11gSSID5dot3ReceivedByteCount.setDescription('')
on11gSSID5dot3TransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID5dot3TransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11gSSID5dot3TransmitByteCount.setDescription('')
onSSID5dot11gCRCErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID5dot11gCRCErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID5dot11gCRCErrorCount.setDescription('')
onSSID5dot11gPHYErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID5dot11gPHYErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID5dot11gPHYErrorCount.setDescription('')
onSSID5dot11gMICErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID5dot11gMICErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID5dot11gMICErrorCount.setDescription('')
onSSID5dot11gKEYDecrErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID5dot11gKEYDecrErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID5dot11gKEYDecrErrorCount.setDescription('')
on11gSSID5dot3ReceivedPKTCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID5dot3ReceivedPKTCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11gSSID5dot3ReceivedPKTCount.setDescription('')
onSSID5dot11gUserReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID5dot11gUserReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID5dot11gUserReceivedByteCount.setDescription('')
onSSID5dot11gUserTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 6, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID5dot11gUserTransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID5dot11gUserTransmitByteCount.setDescription('')
dot11gTrafficStatisticsByTimeOnSSID5Table = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 6, 12), )
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnSSID5Table.setStatus('mandatory')
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnSSID5Table.setDescription('')
dot11gTrafficStatisticsByTimeOnSSID5Entry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 6, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnSSID5Entry.setStatus('mandatory')
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnSSID5Entry.setDescription('')
onSSID5dot11gssociatedMACCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 6, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID5dot11gssociatedMACCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID5dot11gssociatedMACCount.setDescription('')
onSSID5dot11gErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 6, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID5dot11gErrorFrameRate.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID5dot11gErrorFrameRate.setDescription('')
on11gSSID5dot3ErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 6, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID5dot3ErrorFrameRate.setStatus('mandatory')
if mibBuilder.loadTexts: on11gSSID5dot3ErrorFrameRate.setDescription('')
onSSID5dot11gWirelessUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 6, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID5dot11gWirelessUsage.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID5dot11gWirelessUsage.setDescription('')
trafficStatisticson11gSSID6 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 7))
onSSID6dot11gReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID6dot11gReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID6dot11gReceivedByteCount.setDescription('')
onSSID6dot11gTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID6dot11gTransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID6dot11gTransmitByteCount.setDescription('')
on11gSSID6dot3ReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID6dot3ReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11gSSID6dot3ReceivedByteCount.setDescription('')
on11gSSID6dot3TransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID6dot3TransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11gSSID6dot3TransmitByteCount.setDescription('')
onSSID6dot11gCRCErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID6dot11gCRCErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID6dot11gCRCErrorCount.setDescription('')
onSSID6dot11gPHYErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID6dot11gPHYErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID6dot11gPHYErrorCount.setDescription('')
onSSID6dot11gMICErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID6dot11gMICErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID6dot11gMICErrorCount.setDescription('')
onSSID6dot11gKEYDecrErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 7, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID6dot11gKEYDecrErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID6dot11gKEYDecrErrorCount.setDescription('')
on11gSSID6dot3ReceivedPKTCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 7, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID6dot3ReceivedPKTCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11gSSID6dot3ReceivedPKTCount.setDescription('')
onSSID6dot11gUserReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 7, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID6dot11gUserReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID6dot11gUserReceivedByteCount.setDescription('')
onSSID6dot11gUserTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 7, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID6dot11gUserTransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID6dot11gUserTransmitByteCount.setDescription('')
dot11gTrafficStatisticsByTimeOnSSID6Table = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 7, 12), )
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnSSID6Table.setStatus('mandatory')
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnSSID6Table.setDescription('')
dot11gTrafficStatisticsByTimeOnSSID6Entry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 7, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnSSID6Entry.setStatus('mandatory')
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnSSID6Entry.setDescription('')
onSSID6dot11gssociatedMACCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 7, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID6dot11gssociatedMACCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID6dot11gssociatedMACCount.setDescription('')
onSSID6dot11gErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 7, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID6dot11gErrorFrameRate.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID6dot11gErrorFrameRate.setDescription('')
on11gSSID6dot3ErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 7, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID6dot3ErrorFrameRate.setStatus('mandatory')
if mibBuilder.loadTexts: on11gSSID6dot3ErrorFrameRate.setDescription('')
onSSID6dot11gWirelessUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 7, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID6dot11gWirelessUsage.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID6dot11gWirelessUsage.setDescription('')
trafficStatisticson11gSSID7 = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 8))
onSSID7dot11gReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID7dot11gReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID7dot11gReceivedByteCount.setDescription('')
onSSID7dot11gTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID7dot11gTransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID7dot11gTransmitByteCount.setDescription('')
on11gSSID7dot3ReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID7dot3ReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11gSSID7dot3ReceivedByteCount.setDescription('')
on11gSSID7dot3TransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID7dot3TransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11gSSID7dot3TransmitByteCount.setDescription('')
onSSID7dot11gCRCErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID7dot11gCRCErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID7dot11gCRCErrorCount.setDescription('')
onSSID7dot11gPHYErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 8, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID7dot11gPHYErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID7dot11gPHYErrorCount.setDescription('')
onSSID7dot11gMICErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 8, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID7dot11gMICErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID7dot11gMICErrorCount.setDescription('')
onSSID7dot11gKEYDecrErrorCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 8, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID7dot11gKEYDecrErrorCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID7dot11gKEYDecrErrorCount.setDescription('')
on11gSSID7dot3ReceivedPKTCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 8, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID7dot3ReceivedPKTCount.setStatus('mandatory')
if mibBuilder.loadTexts: on11gSSID7dot3ReceivedPKTCount.setDescription('')
onSSID7dot11gUserReceivedByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 8, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID7dot11gUserReceivedByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID7dot11gUserReceivedByteCount.setDescription('')
onSSID7dot11gUserTransmitByteCount = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 8, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID7dot11gUserTransmitByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID7dot11gUserTransmitByteCount.setDescription('')
dot11gTrafficStatisticsByTimeOnSSID7Table = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 8, 12), )
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnSSID7Table.setStatus('mandatory')
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnSSID7Table.setDescription('')
dot11gTrafficStatisticsByTimeOnSSID7Entry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 8, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnSSID7Entry.setStatus('mandatory')
if mibBuilder.loadTexts: dot11gTrafficStatisticsByTimeOnSSID7Entry.setDescription('')
onSSID7dot11gssociatedMACCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 8, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID7dot11gssociatedMACCount.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID7dot11gssociatedMACCount.setDescription('')
onSSID7dot11gErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 8, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID7dot11gErrorFrameRate.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID7dot11gErrorFrameRate.setDescription('')
on11gSSID7dot3ErrorFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 8, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: on11gSSID7dot3ErrorFrameRate.setStatus('mandatory')
if mibBuilder.loadTexts: on11gSSID7dot3ErrorFrameRate.setDescription('')
onSSID7dot11gWirelessUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 2, 2, 5, 8, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onSSID7dot11gWirelessUsage.setStatus('mandatory')
if mibBuilder.loadTexts: onSSID7dot11gWirelessUsage.setDescription('')
systemLog = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 4))
systemLogSystemLevel = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLogSystemLevel.setStatus('mandatory')
if mibBuilder.loadTexts: systemLogSystemLevel.setDescription('')
systemLogWirelessLevel = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLogWirelessLevel.setStatus('mandatory')
if mibBuilder.loadTexts: systemLogWirelessLevel.setDescription('')
systemLogNoticeLevel = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLogNoticeLevel.setStatus('mandatory')
if mibBuilder.loadTexts: systemLogNoticeLevel.setDescription('')
systemLogTFTPServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 4, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLogTFTPServerIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: systemLogTFTPServerIPAddress.setDescription('')
systemLogFileName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 4, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLogFileName.setStatus('mandatory')
if mibBuilder.loadTexts: systemLogFileName.setDescription('')
systemLogGetLog = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("get", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLogGetLog.setStatus('mandatory')
if mibBuilder.loadTexts: systemLogGetLog.setDescription('')
systemLogLocalLogState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLogLocalLogState.setStatus('mandatory')
if mibBuilder.loadTexts: systemLogLocalLogState.setDescription('')
systemLogRemoteLogState = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLogRemoteLogState.setStatus('mandatory')
if mibBuilder.loadTexts: systemLogRemoteLogState.setDescription('')
systemLogServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 4, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLogServerIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: systemLogServerIPAddress.setDescription('')
systemLogClearLocalLog = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nothing", 0), ("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLogClearLocalLog.setStatus('mandatory')
if mibBuilder.loadTexts: systemLogClearLocalLog.setDescription('')
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7))
trapsNotify = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 1))
trapSSHLogin = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 1, 1)).setObjects(("DWL-3200", "trapAPMACaddr"), ("DWL-3200", "trapAlarmLevel"), ("DWL-3200", "trapPCIPAddr"), ("DWL-3200", "swNotiResult"))
if mibBuilder.loadTexts: trapSSHLogin.setStatus('current')
if mibBuilder.loadTexts: trapSSHLogin.setDescription('When SSH login, the trap should send.')
trapWebLogin = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 1, 2)).setObjects(("DWL-3200", "trapAPMACaddr"), ("DWL-3200", "trapAlarmLevel"), ("DWL-3200", "trapPCIPAddr"), ("DWL-3200", "swNotiResult"))
if mibBuilder.loadTexts: trapWebLogin.setStatus('current')
if mibBuilder.loadTexts: trapWebLogin.setDescription('When Wen login, the trap should send.')
trapTelLogin = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 1, 3)).setObjects(("DWL-3200", "trapAPMACaddr"), ("DWL-3200", "trapAlarmLevel"), ("DWL-3200", "trapPCIPAddr"), ("DWL-3200", "swNotiResult"))
if mibBuilder.loadTexts: trapTelLogin.setStatus('current')
if mibBuilder.loadTexts: trapTelLogin.setDescription('When Telnet Login, the trap should send.')
trapCPULoad = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 1, 4)).setObjects(("DWL-3200", "trapAPMACaddr"), ("DWL-3200", "trapAlarmLevel"))
if mibBuilder.loadTexts: trapCPULoad.setStatus('current')
if mibBuilder.loadTexts: trapCPULoad.setDescription('When CPU load override, the trap should send.')
trapMEMPoor = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 1, 5)).setObjects(("DWL-3200", "trapAPMACaddr"), ("DWL-3200", "trapAlarmLevel"))
if mibBuilder.loadTexts: trapMEMPoor.setStatus('current')
if mibBuilder.loadTexts: trapMEMPoor.setDescription('When MEM poor, the trap should send.')
trapAuthFail = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 1, 6)).setObjects(("DWL-3200", "trapAPMACaddr"), ("DWL-3200", "trapAlarmLevel"), ("DWL-3200", "trapSTAMACaddr"))
if mibBuilder.loadTexts: trapAuthFail.setStatus('current')
if mibBuilder.loadTexts: trapAuthFail.setDescription('When authentication failed, the trap should send.')
trapWirelessLinkUP = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 1, 7)).setObjects(("DWL-3200", "trapAlarmLevel"), ("DWL-3200", "trapBand"))
if mibBuilder.loadTexts: trapWirelessLinkUP.setStatus('current')
if mibBuilder.loadTexts: trapWirelessLinkUP.setDescription('When STA assoced , the trap should send.')
trapDeAuthAttack = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 1, 8)).setObjects(("DWL-3200", "trapAPMACaddr"), ("DWL-3200", "trapAlarmLevel"))
if mibBuilder.loadTexts: trapDeAuthAttack.setStatus('current')
if mibBuilder.loadTexts: trapDeAuthAttack.setDescription('When under De-Authentication attack , the trap should send.')
trapDeAssocAttack = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 1, 9)).setObjects(("DWL-3200", "trapAPMACaddr"), ("DWL-3200", "trapAlarmLevel"))
if mibBuilder.loadTexts: trapDeAssocAttack.setStatus('current')
if mibBuilder.loadTexts: trapDeAssocAttack.setDescription('When under De-association attack , the trap should send.')
trapBCastAttack = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 1, 10)).setObjects(("DWL-3200", "trapAPMACaddr"), ("DWL-3200", "trapAlarmLevel"))
if mibBuilder.loadTexts: trapBCastAttack.setStatus('current')
if mibBuilder.loadTexts: trapBCastAttack.setDescription('When under broad cast attack , the trap should send.')
trapWebLogout = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 1, 11)).setObjects(("DWL-3200", "trapAPMACaddr"), ("DWL-3200", "trapAlarmLevel"), ("DWL-3200", "trapPCIPAddr"), ("DWL-3200", "swNotiResult"))
if mibBuilder.loadTexts: trapWebLogout.setStatus('current')
if mibBuilder.loadTexts: trapWebLogout.setDescription('When Wen logout, the trap should send.')
trapFWUpdate = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 1, 12)).setObjects(("DWL-3200", "swNotiResult"))
if mibBuilder.loadTexts: trapFWUpdate.setStatus('current')
if mibBuilder.loadTexts: trapFWUpdate.setDescription('When fw update, the trap should send.')
trapWirelessLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 1, 13)).setObjects(("DWL-3200", "trapAlarmLevel"), ("DWL-3200", "trapBand"))
if mibBuilder.loadTexts: trapWirelessLinkDown.setStatus('current')
if mibBuilder.loadTexts: trapWirelessLinkDown.setDescription('When fw update, the trap should send.')
trapSTALinkUP = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 1, 14)).setObjects(("DWL-3200", "trapAPMACaddr"), ("DWL-3200", "trapAlarmLevel"), ("DWL-3200", "trapSTAMACaddr"), ("DWL-3200", "swNotiResult"))
if mibBuilder.loadTexts: trapSTALinkUP.setStatus('current')
if mibBuilder.loadTexts: trapSTALinkUP.setDescription('When STA assoced , the trap should send.')
trapSTALinkDown = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 1, 15)).setObjects(("DWL-3200", "trapAPMACaddr"), ("DWL-3200", "trapAlarmLevel"), ("DWL-3200", "trapSTAMACaddr"), ("DWL-3200", "swNotiResult"))
if mibBuilder.loadTexts: trapSTALinkDown.setStatus('current')
if mibBuilder.loadTexts: trapSTALinkDown.setDescription('When fw update, the trap should send.')
trapsNotifyBiding = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 2))
trapAPMACaddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 2, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapAPMACaddr.setStatus('mandatory')
if mibBuilder.loadTexts: trapAPMACaddr.setDescription('The AP MAC address.')
trapSTAMACaddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 2, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapSTAMACaddr.setStatus('mandatory')
if mibBuilder.loadTexts: trapSTAMACaddr.setDescription('The STA MAC address.')
trapAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("system", 1), ("wlan", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapAlarmLevel.setStatus('mandatory')
if mibBuilder.loadTexts: trapAlarmLevel.setDescription('This object indicates the alarm status.')
trapPCIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 2, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapPCIPAddr.setStatus('mandatory')
if mibBuilder.loadTexts: trapPCIPAddr.setDescription('This object indicates the Operating PC address.')
swNotiResult = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("success", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swNotiResult.setStatus('mandatory')
if mibBuilder.loadTexts: swNotiResult.setDescription('This object indicates the result of operating .')
trapBand = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 5, 7, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("wlan0", 0), ("wlan1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapBand.setStatus('mandatory')
if mibBuilder.loadTexts: trapBand.setDescription('This object indicates the wlan0 /wlan1 .')
miscellaneous = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6))
compatible = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1))
compatibleTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1), )
if mibBuilder.loadTexts: compatibleTable.setStatus('mandatory')
if mibBuilder.loadTexts: compatibleTable.setDescription('Wireless Interface Table')
compatibleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: compatibleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: compatibleEntry.setDescription('Wireless Interface Entry')
apmodes = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apmodes.setStatus('mandatory')
if mibBuilder.loadTexts: apmodes.setDescription('AP Mode option (bit used: 5): LSB: AP Client AP Repeater PtmP Bridge PtP Bridge Normal AP PtmP Bridge without AP MSB: PtP Bridge without AP')
turbomodes = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noTurbo", 0), ("allTurbo", 1), ("onlyDynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: turbomodes.setStatus('mandatory')
if mibBuilder.loadTexts: turbomodes.setDescription('options of Turbo Mode 0: Turbo mode are not allowed (enable and disable) 1: All Turbo mode are allowed (super mode without turbo, super mode with static turbo, super mode with dynamic turbo and disable ) 2: Dynamic Turbo is allowed (super mode without turbo, super mode with dynamic turbo and disable) ')
aclnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclnumber.setStatus('mandatory')
if mibBuilder.loadTexts: aclnumber.setDescription('Max Number of ACL Entries 256 : 256 16 : 16 ')
xrsupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xrsupported.setStatus('mandatory')
if mibBuilder.loadTexts: xrsupported.setDescription('XR Function Support 1 : Supported 0 : Not Supported ')
codebase = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: codebase.setStatus('mandatory')
if mibBuilder.loadTexts: codebase.setDescription('Code Base ')
countrycode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: countrycode.setStatus('mandatory')
if mibBuilder.loadTexts: countrycode.setDescription('Country code ')
clientinfosupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clientinfosupported.setStatus('mandatory')
if mibBuilder.loadTexts: clientinfosupported.setDescription('Client Information Function Supported: 1 : Supported 0 : Not Supported')
singlefirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: singlefirmware.setStatus('mandatory')
if mibBuilder.loadTexts: singlefirmware.setDescription('Single Firmware Function Supported: 1 : Supported 0 : Not Supported')
mssidsupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssidsupported.setStatus('mandatory')
if mibBuilder.loadTexts: mssidsupported.setDescription('Multiple SSID Function Supported: 1 : Supported 0 : Not Supported')
rogueapsupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rogueapsupported.setStatus('mandatory')
if mibBuilder.loadTexts: rogueapsupported.setDescription('Rogue AP Detection Function Supported: 1 : Supported 0 : Not Supported')
syslogsupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogsupported.setStatus('mandatory')
if mibBuilder.loadTexts: syslogsupported.setDescription('System Log Function Supported: 1 : Supported 0 : Not Supported')
wmmsupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmmsupported.setStatus('mandatory')
if mibBuilder.loadTexts: wmmsupported.setDescription('WMM Function Supported: 1 : Supported 0 : Not Supported')
mssidisolatedsecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssidisolatedsecurity.setStatus('mandatory')
if mibBuilder.loadTexts: mssidisolatedsecurity.setDescription('MSSID Isolated Security Supported: 1 : Supported 0 : Not Supported')
mssidindication = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssidindication.setStatus('mandatory')
if mibBuilder.loadTexts: mssidindication.setDescription('MSSID Indication of Client Information: 1 : Supported 0 : Not Supported')
keytypeselection = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: keytypeselection.setStatus('mandatory')
if mibBuilder.loadTexts: keytypeselection.setDescription('Key Type Selection: 1 : Supported 0 : Not Supported')
clustersupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clustersupported.setStatus('mandatory')
if mibBuilder.loadTexts: clustersupported.setDescription('Cluster function supported: 1 : Supported 0 : Not Supported')
greenpacketsupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: greenpacketsupported.setStatus('mandatory')
if mibBuilder.loadTexts: greenpacketsupported.setDescription('Trap Server IP and User Status Notification: 1 : Supported 0 : Not Supported')
sshsupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshsupported.setStatus('mandatory')
if mibBuilder.loadTexts: sshsupported.setDescription('SSH: 1 : Supported 0 : Not Supported')
wdschannellist = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdschannellist.setStatus('mandatory')
if mibBuilder.loadTexts: wdschannellist.setDescription('Indication of WDS channel list: 1 : Supported 0 : Not Supported')
mSSIDSuppress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mSSIDSuppress.setStatus('mandatory')
if mibBuilder.loadTexts: mSSIDSuppress.setDescription('Indication of support for MSSID suppress: 1 : Supported 0 : Not Supported')
antennasupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: antennasupported.setStatus('mandatory')
if mibBuilder.loadTexts: antennasupported.setDescription('Indication of support for MSSID suppress: 1 : Supported 0 : Not Supported')
vlan = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlan.setStatus('mandatory')
if mibBuilder.loadTexts: vlan.setDescription('Indication of support for vlan: 1 : Supported 0 : Not Supported')
bgmodesupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bgmodesupported.setStatus('mandatory')
if mibBuilder.loadTexts: bgmodesupported.setDescription('Indication of support for vlan: 1 : Supported 0 : Not Supported')
wdssitesurvey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdssitesurvey.setStatus('mandatory')
if mibBuilder.loadTexts: wdssitesurvey.setDescription('Indication of support for vlan: 1 : Supported 0 : Not Supported')
accounting = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accounting.setStatus('mandatory')
if mibBuilder.loadTexts: accounting.setDescription('Indication of support Accounting: 1 : Supported 0 : Not Supported')
mssidaccounting = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mssidaccounting.setStatus('mandatory')
if mibBuilder.loadTexts: mssidaccounting.setDescription('Indication of support MSSID Accounting: 1 : Supported 0 : Not Supported')
mSSIDWmmSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mSSIDWmmSupported.setStatus('mandatory')
if mibBuilder.loadTexts: mSSIDWmmSupported.setDescription('Indication of support MSSID WMM : 1 : Supported 0 : Not Supported')
sMTPSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sMTPSupported.setStatus('mandatory')
if mibBuilder.loadTexts: sMTPSupported.setDescription('Indication of support SMTP : 1 : Supported 0 : Not Supported')
dfsSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dfsSupported.setStatus('mandatory')
if mibBuilder.loadTexts: dfsSupported.setDescription('Indication of support DFS : 1 : Supported DFS 0 : Not Supported the DFS')
wmmOverWDSSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wmmOverWDSSupported.setStatus('mandatory')
if mibBuilder.loadTexts: wmmOverWDSSupported.setDescription('Indication of support DFS : 1 : Supported THE FUNCTION WMM OVER WDS 0 : Not Supported THE FUNCTION WMM OVER WDS')
priorityBySsidSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 37, 20, 6, 1, 1, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: priorityBySsidSupported.setStatus('mandatory')
if mibBuilder.loadTexts: priorityBySsidSupported.setDescription('Indication of support DFS : 1 :supported priority by ssid or Eth no tag 0 : Not Supported ')
mibBuilder.exportSymbols("DWL-3200", miscellaneous=miscellaneous, systemLog=systemLog, dlink_dwlfamily=dlink_dwlfamily, onSSID3dot11aReceivedByteCount=onSSID3dot11aReceivedByteCount, dot11DataRate18Mb=dot11DataRate18Mb, xrsupported=xrsupported, dot11KickOffClientMacAddress=dot11KickOffClientMacAddress, onSSID2dot11aUserTransmitByteCount=onSSID2dot11aUserTransmitByteCount, dot11gTrafficStatisticsByTimeOnSSID2Entry=dot11gTrafficStatisticsByTimeOnSSID2Entry, onSSID4dot11gWirelessUsage=onSSID4dot11gWirelessUsage, trafficStatisticsOn11aSSID1=trafficStatisticsOn11aSSID1, dot11DynamicChannelList=dot11DynamicChannelList, dot11KeyIndex=dot11KeyIndex, on11aSSID5dot3ErrorFrameRate=on11aSSID5dot3ErrorFrameRate, onSSID4dot11gssociatedMACCount=onSSID4dot11gssociatedMACCount, dot11TrafficStatisticsEntry=dot11TrafficStatisticsEntry, onPrimarySSIDdot11aMICErrorCount=onPrimarySSIDdot11aMICErrorCount, ieee802dot11RogueApDetection=ieee802dot11RogueApDetection, dot11RadioWave=dot11RadioWave, trafficStatisticson11gSSID5=trafficStatisticson11gSSID5, onSSID1dot11aKEYDecrErrorCount=onSSID1dot11aKEYDecrErrorCount, onSSID2dot11aMICErrorCount=onSSID2dot11aMICErrorCount, dot11TransmittedMultipleRetryCount=dot11TransmittedMultipleRetryCount, dot11gTrafficStatisticsByTimeOnSSID5Table=dot11gTrafficStatisticsByTimeOnSSID5Table, dot11SiteSurveyTable=dot11SiteSurveyTable, aclnumber=aclnumber, dot11DataRate=dot11DataRate, dot11RogueApSurveyAuthentication=dot11RogueApSurveyAuthentication, dot11MacAccessControl=dot11MacAccessControl, dot11InternalStationConnection=dot11InternalStationConnection, dot11RtsFailureCount=dot11RtsFailureCount, on11gSSID6dot3TransmitByteCount=on11gSSID6dot3TransmitByteCount, onSSID3dot11aPHYErrorCount=onSSID3dot11aPHYErrorCount, dot11gTrafficStatisticsByTimeOnSSID7Entry=dot11gTrafficStatisticsByTimeOnSSID7Entry, dot11MssidIndex=dot11MssidIndex, trapWebLogout=trapWebLogout, trapDeAssocAttack=trapDeAssocAttack, on11aSSID6dot3ErrorFrameRate=on11aSSID6dot3ErrorFrameRate, onSSID2dot11associatedMACCount=onSSID2dot11associatedMACCount, onSSID2dot11gTransmitByteCount=onSSID2dot11gTransmitByteCount, onSSID5dot11gUserReceivedByteCount=onSSID5dot11gUserReceivedByteCount, dot11RtsSuccessCount=dot11RtsSuccessCount, on11aSSID7dot3ErrorFrameRate=on11aSSID7dot3ErrorFrameRate, dot11Accounting=dot11Accounting, on11gSSID1dot3ReceivedByteCount=on11gSSID1dot3ReceivedByteCount, onSSID3dot11gCRCErrorCount=onSSID3dot11gCRCErrorCount, dot11gTrafficStatisticsByTimeOnSSID4Table=dot11gTrafficStatisticsByTimeOnSSID4Table, onSSID2dot11aTransmitByteCount=onSSID2dot11aTransmitByteCount, dot11MssidWepKey=dot11MssidWepKey, dot11ReceiveSuccessRate=dot11ReceiveSuccessRate, dot11aTrafficStatisticsByTimeOnPrimarySSIDTable=dot11aTrafficStatisticsByTimeOnPrimarySSIDTable, dot11TransmitSuccessRate=dot11TransmitSuccessRate, dot11DataRate24Mb=dot11DataRate24Mb, onPrimarySSIDdot11aWirelessUsage=onPrimarySSIDdot11aWirelessUsage, dot11RogueApProtection=dot11RogueApProtection, onSSID5dot11aErrorFrameRate=onSSID5dot11aErrorFrameRate, sntpTimeofDay=sntpTimeofDay, keytypeselection=keytypeselection, dot11gTrafficStatisticsByTimeOnSSID7Table=dot11gTrafficStatisticsByTimeOnSSID7Table, onSSID7dot11gCRCErrorCount=onSSID7dot11gCRCErrorCount, onPrimarySSIDdot11gUserReceivedByteCount=onPrimarySSIDdot11gUserReceivedByteCount, dot11RemoteApMacAddressIndex=dot11RemoteApMacAddressIndex, dot11ClientBand=dot11ClientBand, onSSID3dot11aUserReceivedByteCount=onSSID3dot11aUserReceivedByteCount, dot11AckReceivedFailureCount=dot11AckReceivedFailureCount, dlink=dlink, onSSID7dot11aKEYDecrErrorCount=onSSID7dot11aKEYDecrErrorCount, priorityBySsidSupported=priorityBySsidSupported, on11gSSID4dot3ReceivedPKTCount=on11gSSID4dot3ReceivedPKTCount, wmmOverWDSSupported=wmmOverWDSSupported, systemLogFileName=systemLogFileName, onSSID6dot11aMICErrorCount=onSSID6dot11aMICErrorCount, on11gSSID4dot3ErrorFrameRate=on11gSSID4dot3ErrorFrameRate, dot11MssidWMM=dot11MssidWMM, dot11ClientKickOff=dot11ClientKickOff, dot11TrafficStatistics=dot11TrafficStatistics, on11aSSID2dot3ReceivedByteCount=on11aSSID2dot3ReceivedByteCount, onSSID1dot11gWirelessUsage=onSSID1dot11gWirelessUsage, dot11VlanState=dot11VlanState, onSSID2dot11gKEYDecrErrorCount=onSSID2dot11gKEYDecrErrorCount, managerIpAddressIndex=managerIpAddressIndex, onSSID6dot11gReceivedByteCount=onSSID6dot11gReceivedByteCount, on11gSSID3dot3ReceivedPKTCount=on11gSSID3dot3ReceivedPKTCount, onPrimarySSIDdot11gWirelessUsage=onPrimarySSIDdot11gWirelessUsage, systemLogNoticeLevel=systemLogNoticeLevel, onSSID5dot11aUserReceivedByteCount=onSSID5dot11aUserReceivedByteCount, currentDynamicEntry=currentDynamicEntry, dot11SiteSurveyBssid=dot11SiteSurveyBssid, dot11gTrafficStatisticsByTimeOnSSID1Table=dot11gTrafficStatisticsByTimeOnSSID1Table, dot11DataRate54Mb=dot11DataRate54Mb, on11gSSID5dot3ErrorFrameRate=on11gSSID5dot3ErrorFrameRate, on11gSSID6dot3ErrorFrameRate=on11gSSID6dot3ErrorFrameRate, onSSID7dot11gssociatedMACCount=onSSID7dot11gssociatedMACCount, on11aSSID2dot3ReceivedPKTCount=on11aSSID2dot3ReceivedPKTCount, onSSID1dot11gErrorFrameRate=onSSID1dot11gErrorFrameRate, deviceInformationMemUtilization=deviceInformationMemUtilization, onSSID1dot11aCRCErrorCount=onSSID1dot11aCRCErrorCount, dot11Wmm=dot11Wmm, onSSID2dot11gReceivedByteCount=onSSID2dot11gReceivedByteCount, trapAPMACaddr=trapAPMACaddr, dot11DataRate48Mb=dot11DataRate48Mb, onPrimarySSIDdot11gErrorFrameRate=onPrimarySSIDdot11gErrorFrameRate, usersIndex=usersIndex, onSSID3dot11gUserReceivedByteCount=onSSID3dot11gUserReceivedByteCount, usersName=usersName, systemContact=systemContact, dot11TransmitPower=dot11TransmitPower, control=control, systemLogSystemLevel=systemLogSystemLevel, onSSID3dot11aMICErrorCount=onSSID3dot11aMICErrorCount, onSSID5dot11aCRCErrorCount=onSSID5dot11aCRCErrorCount, onSSID1dot11aPHYErrorCount=onSSID1dot11aPHYErrorCount, onSSID5dot11aUserTransmitByteCount=onSSID5dot11aUserTransmitByteCount, onSSID7dot11gTransmitByteCount=onSSID7dot11gTransmitByteCount, ieee802dot11functionTable=ieee802dot11functionTable, systemLocation=systemLocation, dot11RadiusSecret=dot11RadiusSecret, dot11Authentication=dot11Authentication, dot11SiteSurveyRssi=dot11SiteSurveyRssi, dot11RogueApSecurityType=dot11RogueApSecurityType, onSSID1dot11gUserTransmitByteCount=onSSID1dot11gUserTransmitByteCount, dot11WepKeyEntry=dot11WepKeyEntry, on11aSSID4dot3TransmitByteCount=on11aSSID4dot3TransmitByteCount, dot11RtsLength=dot11RtsLength, dynamicDomainName=dynamicDomainName, managerIpAddressStatus=managerIpAddressStatus, dot11WepExcludedFrameCount=dot11WepExcludedFrameCount, dot11WdsChannelList=dot11WdsChannelList, dhcpServerDynamicTable=dhcpServerDynamicTable, staticGateway=staticGateway, tftpServerIPAddress=tftpServerIPAddress, onSSID4dot11aTransmitByteCount=onSSID4dot11aTransmitByteCount, on11aSSID7dot3ReceivedByteCount=on11aSSID7dot3ReceivedByteCount, onSSID3dot11associatedMACCount=onSSID3dot11associatedMACCount, dot11ReceivedByteCount=dot11ReceivedByteCount, managerVLANID=managerVLANID, trafficStatisticsOn11APrimarySSID=trafficStatisticsOn11APrimarySSID, dlink_products=dlink_products, trafficStatisticsOn11aEverySSID=trafficStatisticsOn11aEverySSID, systemLogRemoteLogState=systemLogRemoteLogState, dot11MulticastTransmittedFrameCount=dot11MulticastTransmittedFrameCount, systemTime=systemTime, onSSID3dot11aCRCErrorCount=onSSID3dot11aCRCErrorCount, onSSID1dot11gCRCErrorCount=onSSID1dot11gCRCErrorCount, dot11SecRADIUSSecret=dot11SecRADIUSSecret, trapSTALinkDown=trapSTALinkDown, on11gSSID3dot3ErrorFrameRate=on11gSSID3dot3ErrorFrameRate, ieee802dot11Grouping=ieee802dot11Grouping, ifSubnetMask=ifSubnetMask, onSSID3dot11gUserTransmitByteCount=onSSID3dot11gUserTransmitByteCount, ieee802dot11RogueApSurveyTable=ieee802dot11RogueApSurveyTable, dot11Securities=dot11Securities, dot11MssidAuthentication=dot11MssidAuthentication, dot11MssidCipherType=dot11MssidCipherType, accounting=accounting, onPrimarySSIDdot11gUserTransmitByteCount=onPrimarySSIDdot11gUserTransmitByteCount, on11gSSID5dot3ReceivedByteCount=on11gSSID5dot3ReceivedByteCount, on11gPrimarySSIDdot3ReceivedByteCount=on11gPrimarySSIDdot3ReceivedByteCount, apmodes=apmodes, on11aSSID6dot3ReceivedByteCount=on11aSSID6dot3ReceivedByteCount, mssidindication=mssidindication, dot11MssidSuppress=dot11MssidSuppress, dot11AccountingStatus=dot11AccountingStatus, trafficStatisticsOn11aSSID5=trafficStatisticsOn11aSSID5, dot11DataRate36Mb=dot11DataRate36Mb, on11aPrimarySSIDdot3ErrorFrameRate=on11aPrimarySSIDdot3ErrorFrameRate, dot3TransmittedByteCount=dot3TransmittedByteCount, onSSID6dot11aKEYDecrErrorCount=onSSID6dot11aKEYDecrErrorCount, onSSID6dot11gWirelessUsage=onSSID6dot11gWirelessUsage, dot11RogueApSurveyRefresh=dot11RogueApSurveyRefresh, smtpServerIpAddress=smtpServerIpAddress, on11gSSID5dot3ReceivedPKTCount=on11gSSID5dot3ReceivedPKTCount, ieee802dot11DataRateEntry=ieee802dot11DataRateEntry, onSSID5dot11aReceivedByteCount=onSSID5dot11aReceivedByteCount, onSSID6dot11aReceivedByteCount=onSSID6dot11aReceivedByteCount, dot11TransmitRetryRate=dot11TransmitRetryRate, dot11KeyEntryMethod=dot11KeyEntryMethod, dot11MssIndividualState=dot11MssIndividualState, dot11RogueApDeleteFromRecord=dot11RogueApDeleteFromRecord, dot11RemoteApMacAddressEntry=dot11RemoteApMacAddressEntry, onPrimarySSIDdot11aAssociatedMACCount=onPrimarySSIDdot11aAssociatedMACCount, usersPassword=usersPassword, onSSID2dot11aWirelessUsage=onSSID2dot11aWirelessUsage, wdssitesurvey=wdssitesurvey, dot11gTrafficStatisticsByTimeOnSSID3Table=dot11gTrafficStatisticsByTimeOnSSID3Table, dot11MacAccessControlListTable=dot11MacAccessControlListTable, on11gSSID1dot3ErrorFrameRate=on11gSSID1dot3ErrorFrameRate, onPrimarySSIDdot11aKEYDecrErrorCount=onPrimarySSIDdot11aKEYDecrErrorCount, ftpUpgradeSettingCommand=ftpUpgradeSettingCommand, dot11gTrafficStatisticsByTimeOnSSID6Entry=dot11gTrafficStatisticsByTimeOnSSID6Entry, managerIpAddressSetting=managerIpAddressSetting, dot11WepIcvErrorCount=dot11WepIcvErrorCount, dynamicFunction=dynamicFunction, ieee802dot11MssidEntry=ieee802dot11MssidEntry, ftpRemoteFileName=ftpRemoteFileName, dot11bModeDataRateList=dot11bModeDataRateList, greenpacketsupported=greenpacketsupported, onSSID4dot11aUserTransmitByteCount=onSSID4dot11aUserTransmitByteCount, dot11SiteSurveyRefreshTable=dot11SiteSurveyRefreshTable, onSSID4dot11gCRCErrorCount=onSSID4dot11gCRCErrorCount, onSSID7dot11aMICErrorCount=onSSID7dot11aMICErrorCount, dot11MssidSsid=dot11MssidSsid, dot11SiteSurveyEncryption=dot11SiteSurveyEncryption, onSSID7dot11gWirelessUsage=onSSID7dot11gWirelessUsage, dot11RogueApSurveyBssType=dot11RogueApSurveyBssType, singlefirmware=singlefirmware, dot11RogueApListRecordBssType=dot11RogueApListRecordBssType, trafficStatisticsOn11aSSID2=trafficStatisticsOn11aSSID2, onSSID5dot11gMICErrorCount=onSSID5dot11gMICErrorCount, onSSID6dot11associatedMACCount=onSSID6dot11associatedMACCount, onSSID3dot11aTransmitByteCount=onSSID3dot11aTransmitByteCount, dot11MssidVlanTagID=dot11MssidVlanTagID, dot11MssidDynamicVlan=dot11MssidDynamicVlan, on11gPrimarySSIDdot3TransmitByteCount=on11gPrimarySSIDdot3TransmitByteCount, lanIfSetting=lanIfSetting, dot11RadiusServer=dot11RadiusServer, dot11RogueApSurveyRssi=dot11RogueApSurveyRssi, onSSID3dot11gPHYErrorCount=onSSID3dot11gPHYErrorCount, wmmsupported=wmmsupported, on11aSSID4dot3ReceivedPKTCount=on11aSSID4dot3ReceivedPKTCount, dot11TransmittedFrameCount=dot11TransmittedFrameCount, managerVLANIDSetting=managerVLANIDSetting, onSSID6dot11aPHYErrorCount=onSSID6dot11aPHYErrorCount, dot11ClientRssi=dot11ClientRssi, onSSID1dot11gMICErrorCount=onSSID1dot11gMICErrorCount, timeout=timeout, currentDynamicMacAddress=currentDynamicMacAddress, interfaceInformationTable=interfaceInformationTable, onSSID3dot11gTransmitByteCount=onSSID3dot11gTransmitByteCount, staticMask=staticMask, dynamicWins=dynamicWins, managerIpRangeIndex=managerIpRangeIndex, dot11aTrafficStatisticsByTimeOnSSID1Table=dot11aTrafficStatisticsByTimeOnSSID1Table, dot11Ssid=dot11Ssid, dot11Antenna=dot11Antenna, dot11SecRADIUSStatus=dot11SecRADIUSStatus, trapWebLogin=trapWebLogin, on11gSSID4dot3TransmitByteCount=on11gSSID4dot3TransmitByteCount, ieee802dot11functionEntry=ieee802dot11functionEntry, dot11gTrafficStatisticsByTimeOnSSID3Entry=dot11gTrafficStatisticsByTimeOnSSID3Entry, ftp=ftp, managerIpRangeTable=managerIpRangeTable, dot11gTrafficStatisticsByTimeOnSSID4Entry=dot11gTrafficStatisticsByTimeOnSSID4Entry, wirelessLanIfNumber=wirelessLanIfNumber, onSSID7dot11gErrorFrameRate=onSSID7dot11gErrorFrameRate, ieee802dot11DataRateControlTable=ieee802dot11DataRateControlTable, trapsNotify=trapsNotify, on11gSSID1dot3TransmitByteCount=on11gSSID1dot3TransmitByteCount, dot11Channel=dot11Channel, onSSID6dot11aWirelessUsage=onSSID6dot11aWirelessUsage, dot11ClientInformationRefresh=dot11ClientInformationRefresh, staticIndex=staticIndex, compatible=compatible, usersEntry=usersEntry)
mibBuilder.exportSymbols("DWL-3200", dot11WdsDynamicChannelList=dot11WdsDynamicChannelList, tftpRemoteFileName=tftpRemoteFileName, dot11gTrafficStatisticsByTimeOnSSID5Entry=dot11gTrafficStatisticsByTimeOnSSID5Entry, onSSID1dot11aErrorFrameRate=onSSID1dot11aErrorFrameRate, DisplayString=DisplayString, on11aSSID1dot3ReceivedByteCount=on11aSSID1dot3ReceivedByteCount, onSSID4dot11gKEYDecrErrorCount=onSSID4dot11gKEYDecrErrorCount, lanIfDefaultGateway=lanIfDefaultGateway, onSSID5dot11aWirelessUsage=onSSID5dot11aWirelessUsage, dot11RogueApListRecordIndex=dot11RogueApListRecordIndex, staticDns=staticDns, onSSID6dot11gUserTransmitByteCount=onSSID6dot11gUserTransmitByteCount, dot11SuperMode=dot11SuperMode, dot11gModeDataRateList=dot11gModeDataRateList, dot11IgmpSnooping=dot11IgmpSnooping, ieee802dot11DataRateControl=ieee802dot11DataRateControl, onSSID5dot11gCRCErrorCount=onSSID5dot11gCRCErrorCount, clustersupported=clustersupported, onSSID5dot11aMICErrorCount=onSSID5dot11aMICErrorCount, staticWins=staticWins, dot11aTrafficStatisticsByTimeOnSSID7Table=dot11aTrafficStatisticsByTimeOnSSID7Table, dot11wepKeyIndex=dot11wepKeyIndex, dot11MssidWepKeyIndex=dot11MssidWepKeyIndex, dot11PrioritySsidState=dot11PrioritySsidState, onSSID2dot11gCRCErrorCount=onSSID2dot11gCRCErrorCount, onSSID4dot11gMICErrorCount=onSSID4dot11gMICErrorCount, onSSID7dot11gMICErrorCount=onSSID7dot11gMICErrorCount, systemLogGetLog=systemLogGetLog, dynamicLeaseTime=dynamicLeaseTime, on11gSSID2dot3TransmitByteCount=on11gSSID2dot3TransmitByteCount, onSSID6dot11aTransmitByteCount=onSSID6dot11aTransmitByteCount, dot11ParametersTable=dot11ParametersTable, dot11ClientInformationEntry=dot11ClientInformationEntry, onSSID6dot11gCRCErrorCount=onSSID6dot11gCRCErrorCount, onSSID2dot11gWirelessUsage=onSSID2dot11gWirelessUsage, dot11Frequency=dot11Frequency, ieee802dot11RogueApSurvey=ieee802dot11RogueApSurvey, onSSID7dot11aTransmitByteCount=onSSID7dot11aTransmitByteCount, dot11Parameters=dot11Parameters, dhcpServerStaticTable=dhcpServerStaticTable, systemUpTime=systemUpTime, dot11DataRate1Mb=dot11DataRate1Mb, onSSID2dot11gssociatedMACCount=onSSID2dot11gssociatedMACCount, ftpCommand=ftpCommand, trafficStatisticsOn11aSSID3=trafficStatisticsOn11aSSID3, dot11SiteSurveyRefreshEntry=dot11SiteSurveyRefreshEntry, trapFWUpdate=trapFWUpdate, dot11TransmittedTotalRetryCount=dot11TransmittedTotalRetryCount, onSSID6dot11aErrorFrameRate=onSSID6dot11aErrorFrameRate, onSSID2dot11aPHYErrorCount=onSSID2dot11aPHYErrorCount, onSSID4dot11aMICErrorCount=onSSID4dot11aMICErrorCount, onPrimarySSIDdot11gReceivedByteCount=onPrimarySSIDdot11gReceivedByteCount, dot11MacAccessControlTable=dot11MacAccessControlTable, onSSID4dot11aKEYDecrErrorCount=onSSID4dot11aKEYDecrErrorCount, dot11DataRate5dot5Mb=dot11DataRate5dot5Mb, dot3ReceivedByteCount=dot3ReceivedByteCount, dot11SecuritiesTable=dot11SecuritiesTable, onSSID4dot11aReceivedByteCount=onSSID4dot11aReceivedByteCount, dot11MssidKeyType=dot11MssidKeyType, onSSID6dot11gKEYDecrErrorCount=onSSID6dot11gKEYDecrErrorCount, apstatus=apstatus, onSSID3dot11aKEYDecrErrorCount=onSSID3dot11aKEYDecrErrorCount, dot11MacAccessControlListEntry=dot11MacAccessControlListEntry, on11aPrimarySSIDdot3TransmitByteCount=on11aPrimarySSIDdot3TransmitByteCount, dot11GetClientInformationEntry=dot11GetClientInformationEntry, onSSID4dot11aWirelessUsage=onSSID4dot11aWirelessUsage, wirelesslan=wirelesslan, dynamicIpPoolStart=dynamicIpPoolStart, dhcpServerCurrentListTable=dhcpServerCurrentListTable, dot11DataRate9Mb=dot11DataRate9Mb, onSSID7dot11gUserReceivedByteCount=onSSID7dot11gUserReceivedByteCount, dot11ClinetIndex=dot11ClinetIndex, onSSID1dot11AssociatedMACCount=onSSID1dot11AssociatedMACCount, onSSID1dot11gTransmitByteCount=onSSID1dot11gTransmitByteCount, tftp=tftp, dot11SiteSurveyChannel=dot11SiteSurveyChannel, dot11ClientMacAddress=dot11ClientMacAddress, dot11RemoteApMacAddress=dot11RemoteApMacAddress, currentDynamicIndex=currentDynamicIndex, managerIpRangeEntry=managerIpRangeEntry, trafficStatisticson11gSSID6=trafficStatisticson11gSSID6, dot11MssidInternalStationConnection=dot11MssidInternalStationConnection, interface=interface, onPrimarySSIDdot11aTransmitByteCount=onPrimarySSIDdot11aTransmitByteCount, onSSID7dot11aUserReceivedByteCount=onSSID7dot11aUserReceivedByteCount, dot11SiteSurveyWirelessMode=dot11SiteSurveyWirelessMode, mSSIDWmmSupported=mSSIDWmmSupported, managerStartIpAddress=managerStartIpAddress, dot11aTrafficStatisticsByTimeOnSSID5Entry=dot11aTrafficStatisticsByTimeOnSSID5Entry, onSSID6dot11aUserTransmitByteCount=onSSID6dot11aUserTransmitByteCount, vlan=vlan, trapPCIPAddr=trapPCIPAddr, on11aSSID3dot3ReceivedPKTCount=on11aSSID3dot3ReceivedPKTCount, on11gSSID5dot3TransmitByteCount=on11gSSID5dot3TransmitByteCount, onSSID4dot11gTransmitByteCount=onSSID4dot11gTransmitByteCount, onSSID6dot11gMICErrorCount=onSSID6dot11gMICErrorCount, trapSTAMACaddr=trapSTAMACaddr, dot11LoadBalance=dot11LoadBalance, dot11gTrafficStatisticsByTimeOnSSID2Table=dot11gTrafficStatisticsByTimeOnSSID2Table, dot11RogueApSurveyBssid=dot11RogueApSurveyBssid, on11gSSID2dot3ReceivedPKTCount=on11gSSID2dot3ReceivedPKTCount, on11aSSID4dot3ReceivedByteCount=on11aSSID4dot3ReceivedByteCount, dot11ClientAuthentication=dot11ClientAuthentication, dot11DataRate6Mb=dot11DataRate6Mb, dot11AutoChannelScan=dot11AutoChannelScan, dot11RogueApAddtoApList=dot11RogueApAddtoApList, dot11RogueApListRecord=dot11RogueApListRecord, dhcpServerStaticEntry=dhcpServerStaticEntry, ieee802dot11DataRateTable=ieee802dot11DataRateTable, onSSID4dot11gUserTransmitByteCount=onSSID4dot11gUserTransmitByteCount, onSSID2dot11gPHYErrorCount=onSSID2dot11gPHYErrorCount, trapsNotifyBiding=trapsNotifyBiding, dot11LanPartionEntry=dot11LanPartionEntry, dot11SecAccountingTable=dot11SecAccountingTable, discardChanges=discardChanges, on11aSSID1dot3TransmitByteCount=on11aSSID1dot3TransmitByteCount, trapMEMPoor=trapMEMPoor, dot11ReceivedFrameCount=dot11ReceivedFrameCount, dot11SecAccountingEntry=dot11SecAccountingEntry, dot3TrafficStatisticsEntry=dot3TrafficStatisticsEntry, dot11SiteSurveyRefresh=dot11SiteSurveyRefresh, deviceFactoryDefault=deviceFactoryDefault, onSSID1dot11aUserReceivedByteCount=onSSID1dot11aUserReceivedByteCount, onSSID2dot11gErrorFrameRate=onSSID2dot11gErrorFrameRate, dot11aTrafficStatisticsByTimeOnSSID3Entry=dot11aTrafficStatisticsByTimeOnSSID3Entry, ieee802dot11MssidStateTable=ieee802dot11MssidStateTable, onSSID4dot11gErrorFrameRate=onSSID4dot11gErrorFrameRate, onSSID4dot11gReceivedByteCount=onSSID4dot11gReceivedByteCount, onSSID7dot11gKEYDecrErrorCount=onSSID7dot11gKEYDecrErrorCount, dot11GroupKeyUpdateInterval=dot11GroupKeyUpdateInterval, dot11RogueApListRecordSsid=dot11RogueApListRecordSsid, trapAlarmLevel=trapAlarmLevel, dot11DataRateControl=dot11DataRateControl, ieee802dot11=ieee802dot11, dynamicIpPoolRange=dynamicIpPoolRange, dot11AccountingTable=dot11AccountingTable, dot11Filter=dot11Filter, sntpTimeZoneIndex=sntpTimeZoneIndex, onPrimarySSIDdot11aUserReceivedByteCount=onPrimarySSIDdot11aUserReceivedByteCount, lan=lan, dot11SiteSurveyBssType=dot11SiteSurveyBssType, dot11DataRate11Mb=dot11DataRate11Mb, dot11TransmitedByteCount=dot11TransmitedByteCount, systemInformation=systemInformation, report=report, onSSID1dot11gKEYDecrErrorCount=onSSID1dot11gKEYDecrErrorCount, onSSID1dot11gPHYErrorCount=onSSID1dot11gPHYErrorCount, dot11EthernetToWlanAccess=dot11EthernetToWlanAccess, managerEndIpAddress=managerEndIpAddress, on11aSSID1dot3ReceivedPKTCount=on11aSSID1dot3ReceivedPKTCount, mSSIDSuppress=mSSIDSuppress, bgmodesupported=bgmodesupported, on11gSSID1dot3ReceivedPKTCount=on11gSSID1dot3ReceivedPKTCount, onSSID3dot11gssociatedMACCount=onSSID3dot11gssociatedMACCount, dot11SiteSurveySupportWds=dot11SiteSurveySupportWds, lanIfSubnetMask=lanIfSubnetMask, onSSID4dot11aCRCErrorCount=onSSID4dot11aCRCErrorCount, systemLogWirelessLevel=systemLogWirelessLevel, dot11SecRADIUSServer=dot11SecRADIUSServer, trafficStatisticsOn11gEverySSID=trafficStatisticsOn11gEverySSID, dot11RogueApListRecordChannel=dot11RogueApListRecordChannel, ieee802dot11MssidTable=ieee802dot11MssidTable, smtpRecipient=smtpRecipient, onPrimarySSIDdot11gTransmitByteCount=onPrimarySSIDdot11gTransmitByteCount, dot11LinkIntegrate=dot11LinkIntegrate, ifGetIpAddressFrom=ifGetIpAddressFrom, dot11RemoteApMacAddressTable=dot11RemoteApMacAddressTable, dot11KickOff=dot11KickOff, dot11ReceivedFrameDuplicateCount=dot11ReceivedFrameDuplicateCount, onPrimarySSIDdot11aUserTransmitByteCount=onPrimarySSIDdot11aUserTransmitByteCount, onSSID2dot11aReceivedByteCount=onSSID2dot11aReceivedByteCount, onPrimarySSIDdot11gKEYDecrErrorCount=onPrimarySSIDdot11gKEYDecrErrorCount, sntp=sntp, on11gSSID7dot3ReceivedByteCount=on11gSSID7dot3ReceivedByteCount, dot11ParametersEntry=dot11ParametersEntry, systemLogTFTPServerIPAddress=systemLogTFTPServerIPAddress, ieee802dot11DataRateControlEntry=ieee802dot11DataRateControlEntry, dot11SiteSurvey=dot11SiteSurvey, onSSID3dot11gMICErrorCount=onSSID3dot11gMICErrorCount, onSSID1dot11aMICErrorCount=onSSID1dot11aMICErrorCount, onSSID2dot11aUserReceivedByteCount=onSSID2dot11aUserReceivedByteCount, onSSID2dot11gUserTransmitByteCount=onSSID2dot11gUserTransmitByteCount, trafficStatisticsOn11aSSID4=trafficStatisticsOn11aSSID4, dot11aTrafficStatisticsByTimeOnSSID1Entry=dot11aTrafficStatisticsByTimeOnSSID1Entry, dot11SSIDIndex=dot11SSIDIndex, dot3TrafficStatistics=dot3TrafficStatistics, deviceRestart=deviceRestart, dot11DataRate12Mb=dot11DataRate12Mb, dot11DataRateSetDefault=dot11DataRateSetDefault, on11gSSID4dot3ReceivedByteCount=on11gSSID4dot3ReceivedByteCount, dhcpServer=dhcpServer, trafficStatisticsWireless=trafficStatisticsWireless, ieee802dot11GroupingEntry=ieee802dot11GroupingEntry, dot11ApMode=dot11ApMode, onSSID1dot11aReceivedByteCount=onSSID1dot11aReceivedByteCount, on11aSSID3dot3ReceivedByteCount=on11aSSID3dot3ReceivedByteCount, lanIfIpAddress=lanIfIpAddress, dot11MssidEthNoTag=dot11MssidEthNoTag, dot11aTrafficStatisticsByTimeOnSSID6Table=dot11aTrafficStatisticsByTimeOnSSID6Table, currentStaticMacAddress=currentStaticMacAddress, dot11RogueApListRecordEncryption=dot11RogueApListRecordEncryption, dot11aTrafficStatisticsByTimeOnSSID4Entry=dot11aTrafficStatisticsByTimeOnSSID4Entry, on11gPrimarySSIDdot3ReceivedPKTCount=on11gPrimarySSIDdot3ReceivedPKTCount, on11aSSID6dot3TransmitByteCount=on11aSSID6dot3TransmitByteCount, currentStaticTable=currentStaticTable, dot11PassPhrase=dot11PassPhrase, dot11ClientInformationTable=dot11ClientInformationTable, dot11TrafficStatisticsTable=dot11TrafficStatisticsTable, dot11aTrafficStatisticsByTimeOnSSID4Table=dot11aTrafficStatisticsByTimeOnSSID4Table, trafficStatistics=trafficStatistics, dot11FragmentLength=dot11FragmentLength, dot11MacAccessControlEntry=dot11MacAccessControlEntry, onSSID6dot11gPHYErrorCount=onSSID6dot11gPHYErrorCount, lanIfSettingEntry=lanIfSettingEntry, lanIfSettingTable=lanIfSettingTable, ieee802dot11MssidStateEntry=ieee802dot11MssidStateEntry, sntpDayLightSaving=sntpDayLightSaving, onSSID1dot11gssociatedMACCount=onSSID1dot11gssociatedMACCount, onSSID1dot11aUserTransmitByteCount=onSSID1dot11aUserTransmitByteCount, on11aSSID4dot3ErrorFrameRate=on11aSSID4dot3ErrorFrameRate, trapWirelessLinkDown=trapWirelessLinkDown, dot11gTrafficStatisticsByTimeOnPrimarySSIDTable=dot11gTrafficStatisticsByTimeOnPrimarySSIDTable, currentDynamicAssignedIP=currentDynamicAssignedIP, dot11Encryption=dot11Encryption, dot11SiteSurveyIndex=dot11SiteSurveyIndex, dot11MulticastReceivedFrameCount=dot11MulticastReceivedFrameCount, systemFirmwareVersion=systemFirmwareVersion, sMTPSupported=sMTPSupported, wdschannellist=wdschannellist, dot11MssidEncryption=dot11MssidEncryption, onSSID4dot11aUserReceivedByteCount=onSSID4dot11aUserReceivedByteCount, onSSID5dot11gWirelessUsage=onSSID5dot11gWirelessUsage, dot11gTrafficStatisticsByTimeOnSSID1Entry=dot11gTrafficStatisticsByTimeOnSSID1Entry, ifDefaultGateway=ifDefaultGateway, onSSID7dot11aReceivedByteCount=onSSID7dot11aReceivedByteCount, onSSID3dot11aErrorFrameRate=onSSID3dot11aErrorFrameRate, dot11TransmittedErrorCount=dot11TransmittedErrorCount, systemLogClearLocalLog=systemLogClearLocalLog, onSSID4dot11associatedMACCount=onSSID4dot11associatedMACCount, on11aPrimarySSIDdot3ReceivedByteCount=on11aPrimarySSIDdot3ReceivedByteCount, dot11WepKeyTable=dot11WepKeyTable, deviceInformation=deviceInformation, currentDynamicLease=currentDynamicLease, dot11RogueApSurveyIndex=dot11RogueApSurveyIndex, trapBCastAttack=trapBCastAttack, onSSID2dot11aCRCErrorCount=onSSID2dot11aCRCErrorCount, on11aSSID7dot3TransmitByteCount=on11aSSID7dot3TransmitByteCount, dot11RogueApListRecordTable=dot11RogueApListRecordTable, dot11MssidAccountingStatus=dot11MssidAccountingStatus, dot11RogueApListRecordMode=dot11RogueApListRecordMode, dot11ReceiveDuplicateRate=dot11ReceiveDuplicateRate, dot11aTrafficStatisticsByTimeOnSSID5Table=dot11aTrafficStatisticsByTimeOnSSID5Table, lanIfGetIpAddressFrom=lanIfGetIpAddressFrom, dot11WepKey=dot11WepKey)
mibBuilder.exportSymbols("DWL-3200", onSSID5dot11associatedMACCount=onSSID5dot11associatedMACCount, onSSID7dot11associatedMACCount=onSSID7dot11associatedMACCount, dwl_3200AP=dwl_3200AP, smtpStatus=smtpStatus, codebase=codebase, systemIpAddress=systemIpAddress, onSSID5dot11gReceivedByteCount=onSSID5dot11gReceivedByteCount, onSSID2dot11gUserReceivedByteCount=onSSID2dot11gUserReceivedByteCount, tftpUpgradeSettingCommand=tftpUpgradeSettingCommand, onSSID1dot11aWirelessUsage=onSSID1dot11aWirelessUsage, administration=administration, dhcpServerControl=dhcpServerControl, trapSTALinkUP=trapSTALinkUP, dot11RogueApListRecordRssi=dot11RogueApListRecordRssi, compatibleTable=compatibleTable, dot11SiteSurveySsid=dot11SiteSurveySsid, usersTable=usersTable, onSSID4dot11gUserReceivedByteCount=onSSID4dot11gUserReceivedByteCount, ifIpAddress=ifIpAddress, on11aSSID5dot3ReceivedPKTCount=on11aSSID5dot3ReceivedPKTCount, dot11MssidPriorityBySsid=dot11MssidPriorityBySsid, compatibleEntry=compatibleEntry, on11gSSID2dot3ReceivedByteCount=on11gSSID2dot3ReceivedByteCount, turbomodes=turbomodes, systemLogLocalLogState=systemLogLocalLogState, currentDynamicTable=currentDynamicTable, staticDomainName=staticDomainName, onSSID6dot11aCRCErrorCount=onSSID6dot11aCRCErrorCount, dot11RogueApSurveySsid=dot11RogueApSurveySsid, onSSID5dot11gUserTransmitByteCount=onSSID5dot11gUserTransmitByteCount, dot11Dtim=dot11Dtim, dot3TrafficStatisticsTable=dot3TrafficStatisticsTable, dot11ClientInformation=dot11ClientInformation, dot11RrogueApDelete=dot11RrogueApDelete, managerIpAddressTable=managerIpAddressTable, systemModelName=systemModelName, smtpSender=smtpSender, trafficStatisticsOn11aSSID7=trafficStatisticsOn11aSSID7, dot11AccountingServer=dot11AccountingServer, trapAuthFail=trapAuthFail, antennasupported=antennasupported, sntpServerIpAddress=sntpServerIpAddress, dot11aTrafficStatisticsByTimeOnSSID7Entry=dot11aTrafficStatisticsByTimeOnSSID7Entry, ssh=ssh, dot11RogueApSurveyMode=dot11RogueApSurveyMode, interfaceInformation=interfaceInformation, ieee802dot11VlanEntry=ieee802dot11VlanEntry, onPrimarySSIDdot11gMICErrorCount=onPrimarySSIDdot11gMICErrorCount, interfaceInformationEntry=interfaceInformationEntry, onSSID7dot11gUserTransmitByteCount=onSSID7dot11gUserTransmitByteCount, trapDeAuthAttack=trapDeAuthAttack, onSSID7dot11aCRCErrorCount=onSSID7dot11aCRCErrorCount, onSSID7dot11aUserTransmitByteCount=onSSID7dot11aUserTransmitByteCount, device=device, dot11aTrafficStatisticsByTimeOnPrimarySSIDEntry=dot11aTrafficStatisticsByTimeOnPrimarySSIDEntry, on11aSSID2dot3ErrorFrameRate=on11aSSID2dot3ErrorFrameRate, on11aSSID3dot3ErrorFrameRate=on11aSSID3dot3ErrorFrameRate, mssidisolatedsecurity=mssidisolatedsecurity, dot11SecRADIUSPort=dot11SecRADIUSPort, staticStatus=staticStatus, trafficStatisticson11gSSID2=trafficStatisticson11gSSID2, countrycode=countrycode, onSSID7dot11gReceivedByteCount=onSSID7dot11gReceivedByteCount, onSSID2dot11gMICErrorCount=onSSID2dot11gMICErrorCount, tftpCommand=tftpCommand, rogueapsupported=rogueapsupported, dot11SecAccountingStatus=dot11SecAccountingStatus, trapSSHLogin=trapSSHLogin, dot11MacAccessControlListIndex=dot11MacAccessControlListIndex, on11gSSID3dot3TransmitByteCount=on11gSSID3dot3TransmitByteCount, onSSID5dot11gssociatedMACCount=onSSID5dot11gssociatedMACCount, ieee802dot11GroupingTable=ieee802dot11GroupingTable, lanIfMacAddress=lanIfMacAddress, on11aSSID5dot3TransmitByteCount=on11aSSID5dot3TransmitByteCount, mssidaccounting=mssidaccounting, ftpServerIPAddress=ftpServerIPAddress, dot11aTrafficStatisticsByTimeOnSSID2Table=dot11aTrafficStatisticsByTimeOnSSID2Table, on11aSSID1dot3ErrorFrameRate=on11aSSID1dot3ErrorFrameRate, clientinfosupported=clientinfosupported, dfsSupported=dfsSupported, console=console, onSSID4dot11aPHYErrorCount=onSSID4dot11aPHYErrorCount, onSSID3dot11aWirelessUsage=onSSID3dot11aWirelessUsage, onSSID5dot11gErrorFrameRate=onSSID5dot11gErrorFrameRate, dot11PartionTable=dot11PartionTable, dynamicDns=dynamicDns, ifMacAddress=ifMacAddress, onPrimarySSIDdot11gPHYErrorCount=onPrimarySSIDdot11gPHYErrorCount, on11gSSID7dot3TransmitByteCount=on11gSSID7dot3TransmitByteCount, dot11RogueApSurveyEncryption=dot11RogueApSurveyEncryption, advance=advance, dot11aTrafficStatisticsByTimeOnSSID3Table=dot11aTrafficStatisticsByTimeOnSSID3Table, dot11SiteSurveyEntry=dot11SiteSurveyEntry, trafficStatisticson11gSSID3=trafficStatisticson11gSSID3, dot11MacAccessControlListMacAddress=dot11MacAccessControlListMacAddress, onSSID6dot11aUserReceivedByteCount=onSSID6dot11aUserReceivedByteCount, dot11RogueApBandType=dot11RogueApBandType, onSSID1dot11gUserReceivedByteCount=onSSID1dot11gUserReceivedByteCount, trapWirelessLinkUP=trapWirelessLinkUP, syslogsupported=syslogsupported, on11aSSID5dot3ReceivedByteCount=on11aSSID5dot3ReceivedByteCount, ssl=ssl, dot11SecAccountingServerPort=dot11SecAccountingServerPort, ieee802dot11MultiSsid=ieee802dot11MultiSsid, onPrimarySSIDdot11gCRCErrorCount=onPrimarySSIDdot11gCRCErrorCount, onPrimarySSIDdot11aErrorFrameRate=onPrimarySSIDdot11aErrorFrameRate, onSSID6dot11gssociatedMACCount=onSSID6dot11gssociatedMACCount, dot11Preamble=dot11Preamble, onSSID5dot11gPHYErrorCount=onSSID5dot11gPHYErrorCount, on11gSSID7dot3ReceivedPKTCount=on11gSSID7dot3ReceivedPKTCount, dot11MssidState=dot11MssidState, dot11aTrafficStatisticsByTimeOnSSID6Entry=dot11aTrafficStatisticsByTimeOnSSID6Entry, swNotiResult=swNotiResult, dot11ClientInformationAssNum=dot11ClientInformationAssNum, dot11ReceivedFrameFcsErrorCount=dot11ReceivedFrameFcsErrorCount, dot11RogueApListRecordBssid=dot11RogueApListRecordBssid, dot11GetClientInformationTable=dot11GetClientInformationTable, trafficStatisticsOn11aSSID6=trafficStatisticsOn11aSSID6, onSSID7dot11aErrorFrameRate=onSSID7dot11aErrorFrameRate, adminAPwithWlan=adminAPwithWlan, currentStaticIndex=currentStaticIndex, onSSID7dot11aWirelessUsage=onSSID7dot11aWirelessUsage, ftpUserName=ftpUserName, on11gSSID2dot3ErrorFrameRate=on11gSSID2dot3ErrorFrameRate, onSSID1dot11aTransmitByteCount=onSSID1dot11aTransmitByteCount, onSSID6dot11gErrorFrameRate=onSSID6dot11gErrorFrameRate, systemDescr=systemDescr, dot11SsidBroadcast=dot11SsidBroadcast, systemLogServerIPAddress=systemLogServerIPAddress, currentStaticAssignedIP=currentStaticAssignedIP, on11gSSID6dot3ReceivedPKTCount=on11gSSID6dot3ReceivedPKTCount, on11aSSID3dot3TransmitByteCount=on11aSSID3dot3TransmitByteCount, dynamicGateway=dynamicGateway, updateFirmwareVersion=updateFirmwareVersion, onSSID4dot11aErrorFrameRate=onSSID4dot11aErrorFrameRate, onSSID2dot11aErrorFrameRate=onSSID2dot11aErrorFrameRate, dot11RogueApListRecordEntry=dot11RogueApListRecordEntry, trapTelLogin=trapTelLogin, dot11RadiusPort=dot11RadiusPort, onSSID5dot11gKEYDecrErrorCount=onSSID5dot11gKEYDecrErrorCount, dot11AccountingEntry=dot11AccountingEntry, dot11aTrafficStatisticsByTimeOnSSID2Entry=dot11aTrafficStatisticsByTimeOnSSID2Entry, onSSID5dot11aKEYDecrErrorCount=onSSID5dot11aKEYDecrErrorCount, onSSID6dot11gUserReceivedByteCount=onSSID6dot11gUserReceivedByteCount, dot11RogueApSurveyChannel=dot11RogueApSurveyChannel, dot11MssidPassPhrase=dot11MssidPassPhrase, trafficStatisticson11gSSID1=trafficStatisticson11gSSID1, dot11UserLimit=dot11UserLimit, smtp=smtp, on11aSSID6dot3ReceivedPKTCount=on11aSSID6dot3ReceivedPKTCount, onSSID3dot11gWirelessUsage=onSSID3dot11gWirelessUsage, dot3ReceivedFrameCount=dot3ReceivedFrameCount, dot11BeaconInterval=dot11BeaconInterval, trafficStatisticson11gPrimarySSID=trafficStatisticson11gPrimarySSID, on11gPrimarySSIDdot3ErrorFrameRate=on11gPrimarySSIDdot3ErrorFrameRate, pingcontrol=pingcontrol, managerIpAddressEntry=managerIpAddressEntry, onPrimarySSIDdot11aReceivedByteCount=onPrimarySSIDdot11aReceivedByteCount, dot11gTrafficStatisticsByTimeOnSSID6Table=dot11gTrafficStatisticsByTimeOnSSID6Table, trapCPULoad=trapCPULoad, onSSID1dot11gReceivedByteCount=onSSID1dot11gReceivedByteCount, mssidsupported=mssidsupported, dot11RogueApSurveyEntry=dot11RogueApSurveyEntry, on11gSSID6dot3ReceivedByteCount=on11gSSID6dot3ReceivedByteCount, deviceInformationFirmwareVersion=deviceInformationFirmwareVersion, on11gSSID3dot3ReceivedByteCount=on11gSSID3dot3ReceivedByteCount, dot3TransmittedFrameCount=dot3TransmittedFrameCount, on11aPrimarySSIDdot3ReceivedPKTCount=on11aPrimarySSIDdot3ReceivedPKTCount, dot11ClientPsm=dot11ClientPsm, trafficStatisticson11gSSID4=trafficStatisticson11gSSID4, onSSID5dot11gTransmitByteCount=onSSID5dot11gTransmitByteCount, onSSID3dot11aUserTransmitByteCount=onSSID3dot11aUserTransmitByteCount, dot11SecAccountingServer=dot11SecAccountingServer, enterprises=enterprises, onSSID5dot11aPHYErrorCount=onSSID5dot11aPHYErrorCount, dot11CipherType=dot11CipherType, onSSID4dot11gPHYErrorCount=onSSID4dot11gPHYErrorCount, dynamicMask=dynamicMask, onSSID7dot11gPHYErrorCount=onSSID7dot11gPHYErrorCount, on11aSSID7dot3ReceivedPKTCount=on11aSSID7dot3ReceivedPKTCount, onSSID3dot11gReceivedByteCount=onSSID3dot11gReceivedByteCount, onSSID3dot11gErrorFrameRate=onSSID3dot11gErrorFrameRate, on11gSSID7dot3ErrorFrameRate=on11gSSID7dot3ErrorFrameRate, dot11WifiMode=dot11WifiMode, users=users, web=web, dot16TrafficStatistics=dot16TrafficStatistics, dot11gTrafficStatisticsByTimeOnPrimarySSIDEntry=dot11gTrafficStatisticsByTimeOnPrimarySSIDEntry, dot11AccountingServerPort=dot11AccountingServerPort, managerIpAddress=managerIpAddress, onPrimarySSIDdot11gAssociatedMACCount=onPrimarySSIDdot11gAssociatedMACCount, traps=traps, onPrimarySSIDdot11aCRCErrorCount=onPrimarySSIDdot11aCRCErrorCount, update=update, dot11DataRate2Mb=dot11DataRate2Mb, ieee802dot11VlanTable=ieee802dot11VlanTable, telnet=telnet, managerVLANIDStatus=managerVLANIDStatus, currentStaticEntry=currentStaticEntry, ftpPassword=ftpPassword, staticIP=staticIP, dot11SecuritiesEntry=dot11SecuritiesEntry, deviceInformationCpuUtilization=deviceInformationCpuUtilization, onPrimarySSIDdot11aPHYErrorCount=onPrimarySSIDdot11aPHYErrorCount, staticMac=staticMac, on11aSSID2dot3TransmitByteCount=on11aSSID2dot3TransmitByteCount, onSSID6dot11gTransmitByteCount=onSSID6dot11gTransmitByteCount, sshsupported=sshsupported, trafficStatisticsWired=trafficStatisticsWired, trafficStatisticson11gSSID7=trafficStatisticson11gSSID7, onSSID7dot11aPHYErrorCount=onSSID7dot11aPHYErrorCount, dot11RogueApListRecordAuthentication=dot11RogueApListRecordAuthentication, trapBand=trapBand, onSSID2dot11aKEYDecrErrorCount=onSSID2dot11aKEYDecrErrorCount, dot11RogueApBssType=dot11RogueApBssType, onSSID5dot11aTransmitByteCount=onSSID5dot11aTransmitByteCount, onSSID3dot11gKEYDecrErrorCount=onSSID3dot11gKEYDecrErrorCount, dot11ChannelList=dot11ChannelList)
