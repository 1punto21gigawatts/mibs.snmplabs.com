#
# PySNMP MIB module CISCO-ISCSI-GW-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ISCSI-GW-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:02:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
cIscsiSessionAttributesEntry, cIscsiInstanceAttributesEntry, cIscsiInstIndex, cIscsiNodeAttributesEntry = mibBuilder.importSymbols("CISCO-ISCSI-MIB", "cIscsiSessionAttributesEntry", "cIscsiInstanceAttributesEntry", "cIscsiInstIndex", "cIscsiNodeAttributesEntry")
ciscoScsiLuEntry, ScsiLUNOrZero, ScsiName = mibBuilder.importSymbols("CISCO-SCSI-MIB", "ciscoScsiLuEntry", "ScsiLUNOrZero", "ScsiName")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
VsanIndex, FcNameIdOrZero, FcNameId = mibBuilder.importSymbols("CISCO-ST-TC", "VsanIndex", "FcNameIdOrZero", "FcNameId")
ListIndex, CiscoPort, ListIndexOrZero = mibBuilder.importSymbols("CISCO-TC", "ListIndex", "CiscoPort", "ListIndexOrZero")
FcList, = mibBuilder.importSymbols("CISCO-ZS-MIB", "FcList")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
IpAddress, Gauge32, NotificationType, TimeTicks, ModuleIdentity, Bits, Counter64, MibIdentifier, Unsigned32, ObjectIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Gauge32", "NotificationType", "TimeTicks", "ModuleIdentity", "Bits", "Counter64", "MibIdentifier", "Unsigned32", "ObjectIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Integer32")
TextualConvention, RowStatus, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString", "TruthValue")
ciscoIscsiGwMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 317))
ciscoIscsiGwMIB.setRevisions(('2005-04-29 00:00', '2004-11-16 00:00', '2003-12-08 00:00', '2003-11-14 00:00', '2003-08-18 00:00', '2003-05-22 00:00', '2003-04-10 00:00', '2003-02-11 00:00', '2002-10-05 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoIscsiGwMIB.setRevisionsDescriptions(('Added new table ciscsiConnectionStatsTable. Added new group cigConnectionStatsGroup. Added new objects to IscsiIfEntry - iscsiIfNumNormalConnections iscsiIfNumDiscovConnections iscsiIfTcpCWMEnable iscsiIfTcpCWMBurstSize iscsiIfTcpMaxJitter Added new objects to Iscsi2FcNodeEntry - iscsi2FcTargetUserName iscsi2FcTargetPassword Added new objects - iscsiTargetUserName and iscsiTargetPassword to ciScsiConfig, global Scsi configuration.', 'Added new objects iscsiIfTcpRndTrpTimeEst. Added new group cigIscsiIfGroupRev4. Added new object iscsiIfTcpLocalTcpPort. Deprecated iscsiIfTcpLocalPort. Added a new compliance ciscoiScsiGwMIBCompliance4.', 'Added new objects iscsiIfIntrIdentificationMode, iscsiIntrIdentificationMode and iscsiInitiatorIdleTimeout. Added a new compliance ciscoiScsiGwMIBCompliance3.', 'Added new objects iscsiAuthMethod,iscsi2FcNodeAuthUser, iscsiIfForwardingMode, and iscsiIfIntrProxyMode. Added new compliance ciscoiScsiGwMIBCompliance1. Added new table iscsiGigEIfTable and new comformance group cigIscsiGigEIfGroup. Added new objects fc2IscsiNodeTrespassMode and fc2IscsiNodeRevertToPrimaryPort to fc2IscsiNodeTable.', 'Added a new table iscsiSessionAttributesExtTable. Added iscsiIfTable. Added scsiLuExtRemoteSecLun to scsiLyExtTable. Added new object iscsi2FcNodeFcAddrAssignment to iscsi2FcNodeTable. Changed MAX-ACCESS of iscsi2FcNodeDiscovered to read-create. Added a MIN-ACCESS to to this object to be backward compatible. Added new conformance groups cigLuConfigurationGroupRev1 and cigConfigurationGroupRev1. Also added a new compliance ciscoiScsiGwMIBCompliance1.', 'Fixed the MIB compile errors during MIB release.', 'Changed the syntax of CIscsiTargetDomains to BITS from INTEGER. Added a new table iscsiImprtExprtTgtsConfTable instead of the two scalar objects iscsiImportTargets and iscsiExportTargets. Added two new objects iscsi2FcNodeDiscovered and fc2IscsiNodeDiscovered to iscsi2FcNodeTable and fc2IscsiNodeTable respectively. Added new object fc2IscsiNodeAllIntrAccessAllowed. Changed the range of iscsi2FcPortNumFCAddr to 0-64 from 0-255.', "Added an enumeration 'none' to the CIscsiTargetDomains TC. Changed the DESCRIPTION of iscsiImportTargets and iscsiExportTargets to reflect this change.", 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoIscsiGwMIB.setLastUpdated('200504290000Z')
if mibBuilder.loadTexts: ciscoIscsiGwMIB.setOrganization('Cisco Systems Inc. ')
if mibBuilder.loadTexts: ciscoIscsiGwMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553 -NETS E-mail: cs-san@cisco.com')
if mibBuilder.loadTexts: ciscoIscsiGwMIB.setDescription('MIB module for monitoring and configuring iSCSI gateway functions. An iSCSI gateway represents FC (Fibre Channel) targets/initiators as iSCSI targets/initiators respectively and vice versa. It means that an iSCSI target/initiator is presented to the FC network as a virtual FC target/initiator which can be accessed by the real FC initiators or can access real FC targets, respectively. It is up to the gateway implementation how to represent the targets/initiators in each of the domains. For example, a gateway implementation may choose to represent multiple FC targets either as one iSCSI target or multiple iSCSI targets (one to one). Same applies to initiators also.')
ciscoiScsiGwMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 317, 0))
ciscoiScsiGwMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 317, 1))
ciscoiScsiGwMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 317, 2))
ciScsiConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1))
ciScsiStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 2))
class CIscsiTargetDomains(TextualConvention, Bits):
    description = 'A value which identifies zero or more target domains. One bit is defined for each defined domain, and a domain is identified if its bit is set.'
    status = 'current'
    namedValues = NamedValues(("fibreChannel", 0))

class CIscsiNodeRoles(TextualConvention, Bits):
    description = 'Role of the iSCSI node. A node can operate as in one or both of two roles: a target role and/or an initiator role. An initiator starts a iSCSI session with a target to to do any iSCSI transaction.'
    status = 'current'
    namedValues = NamedValues(("targetTypeNode", 0), ("initiatorTypeNode", 1))

class IscsiName(TextualConvention, OctetString):
    reference = 'iSCSI Protocol Specification, Section 3.2.6, iSCSI Names.'
    description = 'This data type is a local refinement of the SnmpAdminString used to define an iSCSI Name.'
    status = 'current'
    displayHint = '223a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(16, 223)

class IscsiAuthMethod(TextualConvention, Bits):
    description = 'The authentication method.'
    status = 'current'
    namedValues = NamedValues(("none", 0), ("chap", 1))

class CIscsiIntrIdentificationMode(TextualConvention, Integer32):
    description = 'The initiator identification mode. An initiator is identified either by its iSCSI name (name) or by its IP address (ipaddress).'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("name", 1), ("ipaddress", 2))

iscsiImprtExprtTgtsConfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 1), )
if mibBuilder.loadTexts: iscsiImprtExprtTgtsConfTable.setStatus('current')
if mibBuilder.loadTexts: iscsiImprtExprtTgtsConfTable.setDescription('This table lists the configuration of automatic importing and exporting of targets into and from iSCSI domain. If a targets is discovered in other domains, it is automatically imported if it is configured for automatic importing. Similarly, if an iSCSI target is discovered, it is automatically exported to other domains if it is configured to do so.')
iscsiImprtExprtTgtsConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 1, 1), )
cIscsiInstanceAttributesEntry.registerAugmentions(("CISCO-ISCSI-GW-MIB", "iscsiImprtExprtTgtsConfEntry"))
iscsiImprtExprtTgtsConfEntry.setIndexNames(*cIscsiInstanceAttributesEntry.getIndexNames())
if mibBuilder.loadTexts: iscsiImprtExprtTgtsConfEntry.setStatus('current')
if mibBuilder.loadTexts: iscsiImprtExprtTgtsConfEntry.setDescription('An entry containing information on configuration of importing/exporting of the targets into/from iSCSI domain.')
iscsiImprtExprtTgtsConfImport = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 1, 1, 1), CIscsiTargetDomains()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iscsiImprtExprtTgtsConfImport.setStatus('current')
if mibBuilder.loadTexts: iscsiImprtExprtTgtsConfImport.setDescription("The value of this object identifies zero or more target domains. If a target domain is identified, then all the targets in that domain are automatically imported into iSCSI domain. Note that a target is not imported if it is already in the iSCSI domain. If value of this object is '00'H, then no targets are automatically imported.")
iscsiImprtExprtTgtsConfExport = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 1, 1, 2), CIscsiTargetDomains()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iscsiImprtExprtTgtsConfExport.setStatus('current')
if mibBuilder.loadTexts: iscsiImprtExprtTgtsConfExport.setDescription("The value of this object identifies zero or more target domains. If a target domain is identified, then all the targets in the iSCSI domain are automatically exported to that domain. Note that only the real iSCSI targets are exported. No targets are exported if the value of the object is '00'H.")
iscsiAuthMethod = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 2), IscsiAuthMethod()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iscsiAuthMethod.setStatus('current')
if mibBuilder.loadTexts: iscsiAuthMethod.setDescription('The global authentication method for iSCSI.')
iscsi2FcNodeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 3), )
if mibBuilder.loadTexts: iscsi2FcNodeTable.setStatus('current')
if mibBuilder.loadTexts: iscsi2FcNodeTable.setDescription("This table lists all the nodes in the iSCSI domain which are currently represented in the FC domain. Entries in this table are automatically created when an iSCSI initiator logs (starts a session) into a target or an iSCSI target is discovered. Entries are also created when targets are exported from the iSCSI domain into FC. Entries in this table are automatically removed when an iSCSI initiator logs out of all targets or an iSCSI target disappears. Entries also can be created and deleted using the iscsi2FcNodeRowStatus object. If the entry created in this table exposes either iSCSI initiator or iSCSI target or both from the local device, then a entry has to be created implicitly by the agent in the cIscsiNodeAttributesTable when an entry is created in this table. A row in this table can not be made 'active' until values are explicitly provided for that row's instances of iscsi2FcNodeName and iscsi2FcNodeRole. The following objects cannot be modified when the iscsi2FcNodeRowStatus is 'active' : iscsi2FcNodeName iscsi2FcNodeRole To modify the above objects, the entry must be deleted and re-created with new values of above objects. Every node in this table is associated with a iSCSI instance which is uniquely identified by cIscsiInstIndex.")
iscsi2FcNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-ISCSI-MIB", "cIscsiInstIndex"), (0, "CISCO-ISCSI-GW-MIB", "iscsi2FcNodeIndex"))
if mibBuilder.loadTexts: iscsi2FcNodeEntry.setStatus('current')
if mibBuilder.loadTexts: iscsi2FcNodeEntry.setDescription('An entry representing an iSCSI node which is presented as a FC node to the FC domain.')
iscsi2FcNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: iscsi2FcNodeIndex.setStatus('current')
if mibBuilder.loadTexts: iscsi2FcNodeIndex.setDescription('An arbitrary integer value, which identifies an iSCSI node in a FC domain.')
iscsi2FcNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 3, 1, 2), IscsiName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iscsi2FcNodeName.setStatus('current')
if mibBuilder.loadTexts: iscsi2FcNodeName.setDescription('A character string that is a globally unique identifier for the node represented by this entry. The node name is independent of the location of the node, and can be resolved into a set of addresses through various discovery services.')
iscsi2FcNodeRole = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 3, 1, 3), CIscsiNodeRoles()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iscsi2FcNodeRole.setStatus('current')
if mibBuilder.loadTexts: iscsi2FcNodeRole.setDescription('The role of the node represented by this entry. Note that a gateway implementation may choose not to allow a node to operate in both roles.')
iscsi2FcNodePersistentFCAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 3, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iscsi2FcNodePersistentFCAddr.setStatus('current')
if mibBuilder.loadTexts: iscsi2FcNodePersistentFCAddr.setDescription("This object indicates if the node FC Address (iscsi2FcNodeFCAddr) is made persistent or not. If this object is 'true', then the same FC address is assigned to the node if it were to be represented again in the FC domain with the same node name. Note that the node FC address is either automatically assigned or manually configured.")
iscsi2FcPortPersistentFCAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 3, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iscsi2FcPortPersistentFCAddr.setStatus('current')
if mibBuilder.loadTexts: iscsi2FcPortPersistentFCAddr.setDescription("This object indicates if the port FC addresses (given by iscsi2FcPortFCAddrListIndex) of this node is made persistent or not. If this object is 'true', then the same FC address is assigned to the ports of the node if it were to be represented again in the FC domain with the same node name. Note that the port FC address is either automatically assigned or manually configured. If this object is 'false', then iscsi2FcPortNumFCAddr and iscsi2FcPortFCAddrListIndex are not valid as port FC addresses are dynamically assigned/released.")
iscsi2FcPortNumFCAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 3, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iscsi2FcPortNumFCAddr.setStatus('current')
if mibBuilder.loadTexts: iscsi2FcPortNumFCAddr.setDescription("The number of persistent port FC addresses that are automatically assigned to ports associated with this node. The fcAddressListTable contains the FC addresses that are assigned for the node represented by this entry. If the value of this object is 0, then the port FC addresses are not automatically assigned. Otherwise : - the entries in the fcAddressListTable corresponding to this automatic assignment as indicated by the object iscsi2FcPortFCAddrListIndex cannot be either modified or deleted. - new entries cannot be created in the fcAddressListTable with fcAddressListIndex which is equal to corresponding iscsi2FcPortFCAddrListIndex for this instance. - the corresponding iscsi2FcPortFCAddrListIndex cannot be changed. If the value of the object iscsi2FcPortPersistentFCAddr is 'false', then this object cannot be modified.")
iscsi2FcNodeFCAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 3, 1, 7), FcNameIdOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iscsi2FcNodeFCAddr.setStatus('current')
if mibBuilder.loadTexts: iscsi2FcNodeFCAddr.setDescription("The persistent FC address of the node. If this object is zero-length and iscsi2FcNodePersistentFCAddr is 'true' then the FC address of the node represented by this entry is automatically assigned and made persistent. If this object is non-zero length and iscsi2FcNodePersistentFCAddr is 'true', then this value is always used as FC address of the node represented by this entry. If iscsi2FcNodePersistentFCAddr is 'false, this object is not valid. The FC address for the node represented by this entry is dynamically assigned/released when the node represented by this entry is created/destroyed.")
iscsi2FcPortFCAddrListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 3, 1, 8), ListIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iscsi2FcPortFCAddrListIndex.setStatus('current')
if mibBuilder.loadTexts: iscsi2FcPortFCAddrListIndex.setDescription("The index of a list in the fcAddressListTable which lists all the FC port addresses associated with this node. The object value of the iscsi2FcPortPersistentFCAddr indicates if the addresses are persistent or not. Note that this object cannot be modified if the corresponding value of iscsi2FcPortNumFCAddr is non-zero. If the value of the object iscsi2FcPortPersistentFCAddr is 'false', then this object cannot be modified.")
iscsi2FcNodeVsanList2k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 3, 1, 9), FcList().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iscsi2FcNodeVsanList2k.setStatus('current')
if mibBuilder.loadTexts: iscsi2FcNodeVsanList2k.setDescription("The list of VSANs the node represented by this entry can access. Each octet within the value of this object specifies a set of eight VSANs, with the first octet specifying VSANs 0 through 7, the second octet specifying VSANs 8 through 15, etc. Within each octet, the most significant bit represents the lowest numbered VSAN, and the least significant bit represents the highest numbered VSAN. Thus, each VSAN, is represented by a single bit within the value of this object. The corresponding VSAN is allowed on the node represented by this entry if and only if that bit has a value of '1'. If this object has a value which is less than 256 bytes long, then the VSANs which are not represented are not considered to be in this list. If this object is a zero-length string, the node represented by this entry can access only the default VSAN.")
iscsi2FcNodeVsanList4k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 3, 1, 10), FcList().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iscsi2FcNodeVsanList4k.setStatus('current')
if mibBuilder.loadTexts: iscsi2FcNodeVsanList4k.setDescription("The list of VSANs the node represented by this entry can access. Each octet within the value of this object specifies a set of eight VSANs, with the first octet specifying VSANs 2047 through 2054, the second octet specifying VSANs 2055 through 2062, etc. Within each octet, the most significant bit represents the lowest numbered VSAN, and the least significant bit represents the highest numbered VSAN. Thus, each VSAN, is represented by a single bit within the value of this object. The corresponding VSAN is allowed on the node represented by this entry if and only if that bit has a value of '1'. If this object has a value which is less than 256 bytes long, then the VSANs which are not represented are not considered to be in the list. If this object is a zero-length string, the node represented by this entry can access only the default VSAN.")
iscsi2FcNodeDiscovered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 3, 1, 11), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iscsi2FcNodeDiscovered.setStatus('current')
if mibBuilder.loadTexts: iscsi2FcNodeDiscovered.setDescription("This objects indicates if the node represented by this entry was either automatically discovered or configured manually. If the value of this object is 'true', then the node represented by this entry is automatically discovered. If it is 'false', then the node represented by this entry was manually configured. An auto discovered node can be made manually configured node by setting this object to 'false'. Note that setting to 'false' when current value of the object is 'false' results in error. Also, object cannot be set to 'true'.")
iscsi2FcNodeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 3, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iscsi2FcNodeRowStatus.setStatus('current')
if mibBuilder.loadTexts: iscsi2FcNodeRowStatus.setDescription('Status of this row.')
iscsi2FcNodeFcAddrAssignment = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2))).clone('auto')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iscsi2FcNodeFcAddrAssignment.setStatus('current')
if mibBuilder.loadTexts: iscsi2FcNodeFcAddrAssignment.setDescription("This object specifies how the FC address of this node is assigned. If set to 'auto', the FC address is automatically assigned to this node. If it is 'manual', then the FC address has to be configured manually. An auto assigned node FC address can be made manually configured by setting this object to 'manual' and vice versa.")
iscsi2FcNodeAuthUser = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 3, 1, 14), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iscsi2FcNodeAuthUser.setStatus('current')
if mibBuilder.loadTexts: iscsi2FcNodeAuthUser.setDescription("The name of the user which is to be sent with iSCSI authentication to the target, if authentication is enabled (iscsiAuthMethod other than 'none') interface on which carries session between initiator and target.")
iscsi2FcTargetUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 3, 1, 15), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iscsi2FcTargetUserName.setStatus('current')
if mibBuilder.loadTexts: iscsi2FcTargetUserName.setDescription('The user name to be used during the login authentication. This is optional. If no user name and password (defined by iscsi2FcTargetPassword ) is specified, then the global username and password defined by iscsiTargetUserName and iscsiTargetPassword (respectively) are used.')
iscsi2FcTargetPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 3, 1, 16), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iscsi2FcTargetPassword.setStatus('current')
if mibBuilder.loadTexts: iscsi2FcTargetPassword.setDescription('The password to be used during the login authentication. This is optional. If no user name (specified by iscsi2FcTargetUserName )and password is specified, then the global username and password defined by iscsiTargetUserName and iscsiTargetPassword (respectively) is used. When read, it returns zero length string.')
fc2IscsiNodeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 4), )
if mibBuilder.loadTexts: fc2IscsiNodeTable.setStatus('current')
if mibBuilder.loadTexts: fc2IscsiNodeTable.setDescription("This table lists all the FC nodes which the gateway presents as iSCSI nodes to the iSCSI domain. Entries in this table are automatically created when FC nodes are discovered. Entries in this table are automatically removed when FC nodes go offline. Entries also can be created/deleted using the fc2IscsiNodeRowStatus object. An entry can be created by to configure a node statically instead of allowing it to be discovered. A row in this table can not be made 'active' until values are explicitly provided for that row's instances of fc2IscsiNodeName and fc2IscsiNodeRole. The following objects cannot be modified when the fc2IscsiNodeRowStatus is 'active' : - fc2IscsiNodeRole - fc2IscsiNodeName To modify the above objects, the entry must be deleted and re-created with new values of above objects. To create an iSCSI target from whole a FC target, use fc2ScsiPortFCAddrListIndex. To create an iSCSI target from Logical Units on the FC targets, create an entry in this table. And then create an entry (s) in the scsiLuExtTable using fc2IscsiNodeName of an entry in this table as scsiLuExtLocalTargetAddress value.")
fc2IscsiNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 4, 1), )
cIscsiNodeAttributesEntry.registerAugmentions(("CISCO-ISCSI-GW-MIB", "fc2IscsiNodeEntry"))
fc2IscsiNodeEntry.setIndexNames(*cIscsiNodeAttributesEntry.getIndexNames())
if mibBuilder.loadTexts: fc2IscsiNodeEntry.setStatus('current')
if mibBuilder.loadTexts: fc2IscsiNodeEntry.setDescription('An entry representing a FC node which is presented as an iSCSI node to the iSCSI domain.')
fc2IscsiNodeRole = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 4, 1, 1), CIscsiNodeRoles()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fc2IscsiNodeRole.setStatus('current')
if mibBuilder.loadTexts: fc2IscsiNodeRole.setDescription('Role of the node represented by this entry. Note that a gateway implementation may choose not to allow a node to operate in both roles.')
fc2IscsiNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 4, 1, 2), IscsiName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fc2IscsiNodeName.setStatus('current')
if mibBuilder.loadTexts: fc2IscsiNodeName.setDescription('The iSCSI name of the node represented by this entry.')
fc2IscsiPortFCAddrListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 4, 1, 3), ListIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fc2IscsiPortFCAddrListIndex.setStatus('current')
if mibBuilder.loadTexts: fc2IscsiPortFCAddrListIndex.setDescription('The index of a list in the fcAddressListTable which lists all the FC node addresses associated with the node represented by this entry. Use this object to represent the whole FC targets.')
fc2IscsiNodePermitListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 4, 1, 4), ListIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fc2IscsiNodePermitListIndex.setStatus('current')
if mibBuilder.loadTexts: fc2IscsiNodePermitListIndex.setDescription("The index of a list in the iscsiNodeNameListTable which lists all the iSCSI nodes that are permitted to access the node represented by this entry. If fc2IscsiNodeAllIntrAccessAllowed is 'false' and the value of this object is 0, then no initiators are allowed to access this target.")
fc2IscsiNodeAdvIntfListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 4, 1, 5), ListIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fc2IscsiNodeAdvIntfListIndex.setStatus('current')
if mibBuilder.loadTexts: fc2IscsiNodeAdvIntfListIndex.setDescription('The index of a list in the nodeAdvIntfListTable which lists all the interfaces on which the node represented by this entry could be advertised.')
fc2IscsiNodeAllIntrAccessAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 4, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fc2IscsiNodeAllIntrAccessAllowed.setStatus('current')
if mibBuilder.loadTexts: fc2IscsiNodeAllIntrAccessAllowed.setDescription("This object indicates if all the initiators can access the target represented by this entry. If this object is 'true', then all the initiators can access this target even those which are not in the initiator permit list (fc2IscsiNodePermitListIndex) of the target represented by this entry. If this object is false, then only initiators which are in the permit list are allowed access to the target represented by this entry. Note that this object is valid only if the role of the node represented by this entry is 'targetTypeNode'.")
fc2IscsiNodeDiscovered = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 4, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fc2IscsiNodeDiscovered.setStatus('current')
if mibBuilder.loadTexts: fc2IscsiNodeDiscovered.setDescription("This objects indicates if the node represented by this entry was either automatically discovered or configured manually. If the value of this object is 'true', then the node represented by this entry is automatically discovered. If it is 'false', then the node represented by this entry was manually configured.")
fc2IscsiNodeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 4, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fc2IscsiNodeRowStatus.setStatus('current')
if mibBuilder.loadTexts: fc2IscsiNodeRowStatus.setDescription('Status of this row.')
fc2IscsiNodeTrespassMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 4, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fc2IscsiNodeTrespassMode.setStatus('current')
if mibBuilder.loadTexts: fc2IscsiNodeTrespassMode.setDescription("The trespass mode for this node. Every iSCSI target represents one or more port(s) on the FC target (fc2ScsiPortFCAddrListIndex). If this object is 'true', the node instructs the FC node to present all LUN I/O requests to secondary port (fcSecondaryAddress) if the primary port (fcAddress) is down. Note that this object is valid only if fc2IscsiNodeRole is 'targetTypeNode'.")
fc2IscsiNodeRevertToPrimaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 4, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fc2IscsiNodeRevertToPrimaryPort.setStatus('current')
if mibBuilder.loadTexts: fc2IscsiNodeRevertToPrimaryPort.setDescription("This object indicates if it is required to revert back to primary port the FC target if it comes back online. Every iSCSI target represent one or more port(s) on the FC target (fc2IscsiPortFCAddrListIndex). Only one of the ports is the primary port. If the primary port goes down, the designated secondary port takes over. This objects indicates if the primary port has to be used used once it comes back up. Note that this object is valid only if fc2IscsiNodeRole is 'targetTypeNode'.")
fcAddressListTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 5), )
if mibBuilder.loadTexts: fcAddressListTable.setStatus('current')
if mibBuilder.loadTexts: fcAddressListTable.setDescription("This table contains the list of FC addresses. Entries in this table are automatically created/deleted when the FC addresses are automatically assigned/released to/from the entities which are using this table to create FC address lists. Entries in this table are also created/deleted using fcAddressRowStatus. A row in this table can not be made 'active' until a value is explicitly provided for that row's instances of fcAddress. Also, the following object cannot be modified when 'fcAddressRowStatus' is 'active' : - fcAddress To modify the above object, the entry must be deleted and re-created with new value of above object.")
fcAddressListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 5, 1), ).setIndexNames((0, "CISCO-ISCSI-GW-MIB", "fcAddressListIndex"), (0, "CISCO-ISCSI-GW-MIB", "fcAddressIndex"))
if mibBuilder.loadTexts: fcAddressListEntry.setStatus('current')
if mibBuilder.loadTexts: fcAddressListEntry.setDescription('An entry information about a FC address which is part of a list. Entries with same fcAddressListIndex form a list.')
fcAddressListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 5, 1, 1), ListIndex())
if mibBuilder.loadTexts: fcAddressListIndex.setStatus('current')
if mibBuilder.loadTexts: fcAddressListIndex.setDescription('The index of a list of FC addresses.')
fcAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: fcAddressIndex.setStatus('current')
if mibBuilder.loadTexts: fcAddressIndex.setDescription('An arbitrary integer value, which identifies a FC address.')
fcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 5, 1, 3), FcNameId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcAddress.setStatus('current')
if mibBuilder.loadTexts: fcAddress.setDescription('The FC address for this entry.')
fcSecondaryAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 5, 1, 4), FcNameIdOrZero().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcSecondaryAddress.setStatus('current')
if mibBuilder.loadTexts: fcSecondaryAddress.setDescription("The secondary FC address for this entry. This is the FC address used if the 'fcAddress' cannot be reached. Note that every 'fcAddress' may not need a secondary FC Address.")
fcAddressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcAddressRowStatus.setStatus('current')
if mibBuilder.loadTexts: fcAddressRowStatus.setDescription('Status of this row.')
iscsiNodeNameListTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 6), )
if mibBuilder.loadTexts: iscsiNodeNameListTable.setStatus('current')
if mibBuilder.loadTexts: iscsiNodeNameListTable.setDescription("This table contains the list of iSCSI node names. A row in this table can not be made 'active' until a value is explicitly provided for that row's instances of iscsiNodeName. Also, the following objects cannot be modified when 'iscsiNodeNameRowStatus' is 'active' : - iscsiNodeName To modify the above object, the entry must be deleted and re-created with new value of above object.")
iscsiNodeNameListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 6, 1), ).setIndexNames((0, "CISCO-ISCSI-GW-MIB", "iscsiNodeNameListIndex"), (0, "CISCO-ISCSI-GW-MIB", "iscsiNodeNameIndex"))
if mibBuilder.loadTexts: iscsiNodeNameListEntry.setStatus('current')
if mibBuilder.loadTexts: iscsiNodeNameListEntry.setDescription('An entry information about an iSCSI node name which is part of a list. Entries with same iscsiNodeNameListIndex form a list.')
iscsiNodeNameListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 6, 1, 1), ListIndex())
if mibBuilder.loadTexts: iscsiNodeNameListIndex.setStatus('current')
if mibBuilder.loadTexts: iscsiNodeNameListIndex.setDescription('The index of a list of iSCSI node names.')
iscsiNodeNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 6, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: iscsiNodeNameIndex.setStatus('current')
if mibBuilder.loadTexts: iscsiNodeNameIndex.setDescription('An arbitrary integer value, which identifies a iSCSI node name.')
iscsiNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 6, 1, 3), IscsiName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iscsiNodeName.setStatus('current')
if mibBuilder.loadTexts: iscsiNodeName.setDescription('The iSCSI node name.')
iscsiNodeNameRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 6, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iscsiNodeNameRowStatus.setStatus('current')
if mibBuilder.loadTexts: iscsiNodeNameRowStatus.setDescription('Status of this row.')
nodeAdvIntfListTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 7), )
if mibBuilder.loadTexts: nodeAdvIntfListTable.setStatus('current')
if mibBuilder.loadTexts: nodeAdvIntfListTable.setDescription("This table contains the list of advertised interface list. A FC node represented in the iSCSI domain as an iSCSI node is advertised only on the interfaces which are allowed advertised interface list of the iSCSI node. A row in this table can not be made 'active' until a value is explicitly provided for that row's instances of nodeAdvIntfIfIndex. Also, the following object cannot be modified when 'nodeAdvIntfIfRowStatus' is 'active' : - nodeAdvIntfIfIndex To modify the above object, the entry must be deleted and re-created with new value of above object.")
nodeAdvIntfListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 7, 1), ).setIndexNames((0, "CISCO-ISCSI-GW-MIB", "nodeAdvIntfListIndex"), (0, "CISCO-ISCSI-GW-MIB", "nodeAdvIntfIndex"))
if mibBuilder.loadTexts: nodeAdvIntfListEntry.setStatus('current')
if mibBuilder.loadTexts: nodeAdvIntfListEntry.setDescription('An entry with containing ifIndex of an interface which is part of the interface list. Entries with same nodeAdvIntfListIndex form a list.')
nodeAdvIntfListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: nodeAdvIntfListIndex.setStatus('current')
if mibBuilder.loadTexts: nodeAdvIntfListIndex.setDescription('The index of a list of advertized interface list.')
nodeAdvIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 7, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: nodeAdvIntfIndex.setStatus('current')
if mibBuilder.loadTexts: nodeAdvIntfIndex.setDescription('The index of an interface entry.')
nodeAdvIntfIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 7, 1, 3), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nodeAdvIntfIfIndex.setStatus('current')
if mibBuilder.loadTexts: nodeAdvIntfIfIndex.setDescription('The ifIndex of the interface.')
nodeAdvIntfIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 7, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: nodeAdvIntfIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: nodeAdvIntfIfRowStatus.setDescription('Status of this row.')
scsiLuExtTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 8), )
if mibBuilder.loadTexts: scsiLuExtTable.setStatus('current')
if mibBuilder.loadTexts: scsiLuExtTable.setDescription("An extension of the scsiLuTable to support creation of iSCSI virtual targets from LUs on remote FC targets. To create iSCSI virtual targets from a set of LUs on FC targets, entries needs to be created in this table. The iSCSI targets can be created in different ways. For example: - multiple iSCSI targets can be created from either one LU or a subset of LUs from a single FC target device. - a single iSCSI target can be created from LUs of multiple FC target devices. Note that a gateway implementation may choose to support only a subset of these features. To create a virtual iSCSI target from LUs on the remote FC targets, create an entry (s) in this table with local LUs to map to remote LUs and value of scsiLuExtLocalTargetAddress to same as the iSCSI node name of the virtual iSCSI node being created. A row in this table can not be made 'active' until a value is explicitly provided for that row's instances of following objects : - scsiLuExtRemotePortFcAddress - scsiLuExtLocalTargetAddress - scsiLuExtLocalLun - scsiLuExtRemoteLun Also, the following objects cannot be modified when 'scsiLuExtRowStatus 'active' : - scsiLuExtRemotePortFcAddress - scsiLuExtLocalTargetAddress - scsiLuExtLocalLun - scsiLuExtRemoteLun To modify the above objects, the entry must be deleted and re-created with new values of above objects.")
scsiLuExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 8, 1), )
ciscoScsiLuEntry.registerAugmentions(("CISCO-ISCSI-GW-MIB", "scsiLuExtEntry"))
scsiLuExtEntry.setIndexNames(*ciscoScsiLuEntry.getIndexNames())
if mibBuilder.loadTexts: scsiLuExtEntry.setStatus('current')
if mibBuilder.loadTexts: scsiLuExtEntry.setDescription('An entry representing a LU.')
scsiLuExtRemotePortFcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 8, 1, 1), FcNameId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiLuExtRemotePortFcAddress.setStatus('current')
if mibBuilder.loadTexts: scsiLuExtRemotePortFcAddress.setDescription('The FC address of the remote Fibre Channel port via which the remote LU (scsiLuExtRemoteLun) is accessed.')
scsiLuExtRemotePortSecFcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 8, 1, 2), FcNameIdOrZero().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiLuExtRemotePortSecFcAddress.setStatus('current')
if mibBuilder.loadTexts: scsiLuExtRemotePortSecFcAddress.setDescription('The secondary FC address of the remote Fibre Channel port via which the remote LU (scsiLuExtRemoteSecLun) is accessed.')
scsiLuExtLocalTargetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 8, 1, 3), ScsiName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiLuExtLocalTargetAddress.setStatus('current')
if mibBuilder.loadTexts: scsiLuExtLocalTargetAddress.setDescription('This object represents the SCSI name of the local SCSI target through which this LU (scsiLuExtLocalLun) can be accessed. The format of a SCSI name is dependent on the type of transport used to access the target. For example, when the local SCSI target is accessible via iSCSI, then this object contains the iSCSI node name of the local target.')
scsiLuExtRemoteLun = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 8, 1, 4), ScsiLUNOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiLuExtRemoteLun.setStatus('current')
if mibBuilder.loadTexts: scsiLuExtRemoteLun.setDescription('The Logical Unit Number of the remote LU.')
scsiLuExtLocalLun = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 8, 1, 5), ScsiLUNOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiLuExtLocalLun.setStatus('current')
if mibBuilder.loadTexts: scsiLuExtLocalLun.setDescription('The configured default Logical Unit Number of this LU.')
scsiLuExtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 8, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiLuExtRowStatus.setStatus('current')
if mibBuilder.loadTexts: scsiLuExtRowStatus.setDescription('Status of this row.')
scsiLuExtRemoteSecLun = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 8, 1, 7), ScsiLUNOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: scsiLuExtRemoteSecLun.setStatus('current')
if mibBuilder.loadTexts: scsiLuExtRemoteSecLun.setDescription('The Logical Unit Number of the remote LU corresponding to FC address scsiLuExtRemotePortSecFcAddress.')
iscsiIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 9), )
if mibBuilder.loadTexts: iscsiIfTable.setStatus('current')
if mibBuilder.loadTexts: iscsiIfTable.setDescription('List of iSCSI interfaces.')
iscsiIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: iscsiIfEntry.setStatus('current')
if mibBuilder.loadTexts: iscsiIfEntry.setDescription('An entry containing information about an iSCSI interface.')
iscsiIfTcpKeepAliveTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 9, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 7200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iscsiIfTcpKeepAliveTimeout.setStatus('current')
if mibBuilder.loadTexts: iscsiIfTcpKeepAliveTimeout.setDescription('The TCP Keep alive timeout for this iSCSI interface. If the value is 0, the keep-alive timeout feature is disabled.')
iscsiIfTcpMaxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 9, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 1000000))).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: iscsiIfTcpMaxBandwidth.setStatus('current')
if mibBuilder.loadTexts: iscsiIfTcpMaxBandwidth.setDescription('The TCP maximum bandwidth for this iSCSI interface.')
iscsiIfTcpMaxRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 9, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iscsiIfTcpMaxRetransmissions.setStatus('current')
if mibBuilder.loadTexts: iscsiIfTcpMaxRetransmissions.setDescription('The TCP maximum retransmissions for this iSCSI interface.')
iscsiIfTcpMinRetransmitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 9, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(250, 5000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iscsiIfTcpMinRetransmitTime.setStatus('current')
if mibBuilder.loadTexts: iscsiIfTcpMinRetransmitTime.setDescription('The TCP minimum retransmit time for this iSCSI interface.')
iscsiIfTcpPMTUEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 9, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iscsiIfTcpPMTUEnable.setReference('For more information on PMTU, refer RFC 1191.')
if mibBuilder.loadTexts: iscsiIfTcpPMTUEnable.setStatus('current')
if mibBuilder.loadTexts: iscsiIfTcpPMTUEnable.setDescription('This objects indicates if the Path MTU discovery option is enabled or not for this iSCSI interface.')
iscsiIfTcpQOS = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 9, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iscsiIfTcpQOS.setReference('RFC 2474, RFC 2780.')
if mibBuilder.loadTexts: iscsiIfTcpQOS.setStatus('current')
if mibBuilder.loadTexts: iscsiIfTcpQOS.setDescription('The TCP QOS code point for this iSCSI interface.')
iscsiIfTcpSACKEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 9, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iscsiIfTcpSACKEnable.setReference('For more information on SACK, refer RFC 2018, RFC 2883.')
if mibBuilder.loadTexts: iscsiIfTcpSACKEnable.setStatus('current')
if mibBuilder.loadTexts: iscsiIfTcpSACKEnable.setDescription('This object indicates if the Selective Acknowledgement (SACK) option is enabled or not for this iSCSI interface.')
iscsiIfTcpSendBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 9, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iscsiIfTcpSendBufferSize.setStatus('current')
if mibBuilder.loadTexts: iscsiIfTcpSendBufferSize.setDescription('The TCP send buffer size for this iSCSI interface.')
iscsiIfTcpMinBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 9, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 1000000))).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: iscsiIfTcpMinBandwidth.setStatus('current')
if mibBuilder.loadTexts: iscsiIfTcpMinBandwidth.setDescription('The TCP minimum bandwidth for this iSCSI interface.')
iscsiIfTcpPMTUResetTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 9, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: iscsiIfTcpPMTUResetTimeout.setStatus('current')
if mibBuilder.loadTexts: iscsiIfTcpPMTUResetTimeout.setDescription('The timeout after which the PMTU resets to original value on this interface.')
iscsiIfTcpLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 9, 1, 11), CiscoPort()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiIfTcpLocalPort.setStatus('deprecated')
if mibBuilder.loadTexts: iscsiIfTcpLocalPort.setDescription('The local TCP port of this interface.')
iscsiIfForwardingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 9, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("passThrough", 1), ("storeAndForward", 2), ("cutThrough", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iscsiIfForwardingMode.setStatus('current')
if mibBuilder.loadTexts: iscsiIfForwardingMode.setDescription('The forwarding mode of this interface. passThrough - In this mode the iSCSI interface converts an iSCSI PDU into a FCP frame and then forwards it one at a time. storeAndForward - In this mode iSCSI payload data is sent or received at the size desired by the iSCSI client. The interface stores each TCP segment it receives until one full iSCSI PDU is received before forwarding it as FC frames. cutThrough - In this mode iSCSI payload data is sent or received at the size desired by the iSCSI client. The interface stores each TCP segment until one full iSCSI PDU is received before forwarding it as as FC frames. ')
iscsiIfIntrProxyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 9, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iscsiIfIntrProxyMode.setStatus('current')
if mibBuilder.loadTexts: iscsiIfIntrProxyMode.setDescription("The initiator proxy mode for this interface. If this object is 'true', then all the initiators coming on this interface would use the initiator configuration provided by this interface. The initiator configuration include port WWN and node WWN.")
iscsiIfIntrProxyModeNodeFcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 9, 1, 14), FcNameIdOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iscsiIfIntrProxyModeNodeFcAddr.setStatus('current')
if mibBuilder.loadTexts: iscsiIfIntrProxyModeNodeFcAddr.setDescription("The Node FC address used by the initiators on this interface when the initiator proxy mode is on (iscsiIfIntrProxyMode equal to 'true').")
iscsiIfIntrProxyModePortFcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 9, 1, 15), FcNameIdOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iscsiIfIntrProxyModePortFcAddr.setStatus('current')
if mibBuilder.loadTexts: iscsiIfIntrProxyModePortFcAddr.setDescription("The Port FC address used by the initiators on this interface when the initiator proxy mode is on (iscsiIfIntrProxyMode equal to 'true').")
iscsiIfIntrProxyModeFcAddrAsgnmt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 9, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iscsiIfIntrProxyModeFcAddrAsgnmt.setStatus('current')
if mibBuilder.loadTexts: iscsiIfIntrProxyModeFcAddrAsgnmt.setDescription("This objects tells how the initiator proxy mode FC addresses (iscsiIfIntrProxyModeNodeFcAddr and iscsiIfIntrProxyModePortFcAddr) are assigned. If value of this object is 'auto', then the FC addresses are automatically assigned. If it is 'manual', then they have to be manually configured.")
iscsiIfIntrIdentificationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 9, 1, 17), CIscsiIntrIdentificationMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iscsiIfIntrIdentificationMode.setStatus('current')
if mibBuilder.loadTexts: iscsiIfIntrIdentificationMode.setDescription('This objects indicates how the initiator is identified on this interface, either by its iSCSI name (name) or by its IP address (ipaddress).')
iscsiIfTcpRndTrpTimeEst = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 9, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 300000))).setUnits('microseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: iscsiIfTcpRndTrpTimeEst.setStatus('current')
if mibBuilder.loadTexts: iscsiIfTcpRndTrpTimeEst.setDescription('This is an estimate of the round trip delay of the network pipe used for the B-D product computation, which lets us derive the TCP receive window to advertise.')
iscsiIfTcpLocalTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 9, 1, 19), CiscoPort()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iscsiIfTcpLocalTcpPort.setStatus('current')
if mibBuilder.loadTexts: iscsiIfTcpLocalTcpPort.setDescription('The local TCP port of this interface.')
iscsiIfNumNormalConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 9, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiIfNumNormalConnections.setStatus('current')
if mibBuilder.loadTexts: iscsiIfNumNormalConnections.setDescription('The number of normal iscsi connections.')
iscsiIfNumDiscovConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 9, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiIfNumDiscovConnections.setStatus('current')
if mibBuilder.loadTexts: iscsiIfNumDiscovConnections.setDescription('The number of discovery iscsi connections.')
iscsiIfTcpCWMEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 9, 1, 22), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iscsiIfTcpCWMEnable.setStatus('current')
if mibBuilder.loadTexts: iscsiIfTcpCWMEnable.setDescription('This object is used for enabling/disabling the congestion window monitoring. If the value of this object is true(1), it is enabled. It is disabled if the value is false(2). ')
iscsiIfTcpCWMBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 9, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 100)).clone(50)).setUnits('kilobytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: iscsiIfTcpCWMBurstSize.setStatus('current')
if mibBuilder.loadTexts: iscsiIfTcpCWMBurstSize.setDescription('The maximum burst sent after a tcp sender idle period.')
iscsiIfTcpMaxJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 9, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000)).clone(500)).setUnits('microseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: iscsiIfTcpMaxJitter.setStatus('current')
if mibBuilder.loadTexts: iscsiIfTcpMaxJitter.setDescription('The maximum delay variation that is not due to to congestion that can be experienced by TCP connections on this interface.')
iscsiGigEIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 10), )
if mibBuilder.loadTexts: iscsiGigEIfTable.setStatus('current')
if mibBuilder.loadTexts: iscsiGigEIfTable.setDescription('This table contains Gigabit Ethernet (GigE) interfaces. It contains iSCSI-specific configuration objects for the GigE interface.')
iscsiGigEIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: iscsiGigEIfEntry.setStatus('current')
if mibBuilder.loadTexts: iscsiGigEIfEntry.setDescription('An entry containing information about a GigE interface.')
iscsiGigEIfAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 10, 1, 1), IscsiAuthMethod()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iscsiGigEIfAuthMethod.setStatus('current')
if mibBuilder.loadTexts: iscsiGigEIfAuthMethod.setDescription('The authentication method for this interface.')
iscsiGigEIfIsnsServerProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 10, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iscsiGigEIfIsnsServerProfileName.setStatus('current')
if mibBuilder.loadTexts: iscsiGigEIfIsnsServerProfileName.setDescription('The iSNS server profile name for this interface. The iSNS server profiles are defined in cIsnsClntServerProfileTable from CISCO-ISNS-CLIENT-MIB.')
iscsiGigEIfIscsiSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiGigEIfIscsiSessions.setStatus('current')
if mibBuilder.loadTexts: iscsiGigEIfIscsiSessions.setDescription('Number of iSCSI sessions running over this interface.')
iscsiInitiatorIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: iscsiInitiatorIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: iscsiInitiatorIdleTimeout.setDescription('The time for which the gateway (representing a FC target) waits from the time of last iSCSI session to a iSCSI initiator went down, before purging the information about that iSCSI initiator.')
iscsiIntrIdentificationMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 12), CIscsiIntrIdentificationMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iscsiIntrIdentificationMode.setStatus('current')
if mibBuilder.loadTexts: iscsiIntrIdentificationMode.setDescription('This objects indicates how the initiator is identified on local device, either by its iSCSI name (name) or by its IP address (ipaddress).')
iscsiTargetUserName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 13), SnmpAdminString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iscsiTargetUserName.setStatus('current')
if mibBuilder.loadTexts: iscsiTargetUserName.setDescription('The global user name to be used during the login authentication. If the initiator specific username is specified by iscsi2FcTargetUserName, then that user name is used. If not, iscsiTargetUserName is used by default.')
iscsiTargetPassword = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 1, 14), SnmpAdminString().clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iscsiTargetPassword.setStatus('current')
if mibBuilder.loadTexts: iscsiTargetPassword.setDescription('The password to be used during the login authentication. If the initiator specific password is specified by iscsi2FcTargetPassword, then that password is used. If not, iscsiTargetPassword is used by default. When read, a zero length string is returned.')
iscsiSessionAttributesExtTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 2, 1), )
if mibBuilder.loadTexts: iscsiSessionAttributesExtTable.setStatus('current')
if mibBuilder.loadTexts: iscsiSessionAttributesExtTable.setDescription('This table contains objects which provide more information about iSCSI sessions which are not in cIscsiSessionAttributesTable.')
iscsiSessionAttributesExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 2, 1, 1), )
cIscsiSessionAttributesEntry.registerAugmentions(("CISCO-ISCSI-GW-MIB", "iscsiSessionAttributesExtEntry"))
iscsiSessionAttributesExtEntry.setIndexNames(*cIscsiSessionAttributesEntry.getIndexNames())
if mibBuilder.loadTexts: iscsiSessionAttributesExtEntry.setStatus('current')
if mibBuilder.loadTexts: iscsiSessionAttributesExtEntry.setDescription('An entry containing information about an iSCSI session which is not in cIscsiSessionAttributesEntry.')
iscsiSsnVsan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 2, 1, 1, 1), VsanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iscsiSsnVsan.setStatus('current')
if mibBuilder.loadTexts: iscsiSsnVsan.setDescription('The vsan to which this session belongs to.')
ciscsiConnectionStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 2, 2), )
if mibBuilder.loadTexts: ciscsiConnectionStatsTable.setStatus('current')
if mibBuilder.loadTexts: ciscsiConnectionStatsTable.setDescription('This table contains objects which provide iSCSI connection statistics.')
ciscsiConnectionStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ISCSI-MIB", "cIscsiInstIndex"), (0, "CISCO-ISCSI-GW-MIB", "cIscsiStatsNodeIndex"), (0, "CISCO-ISCSI-GW-MIB", "cIscsiStatsSessionIndex"), (0, "CISCO-ISCSI-GW-MIB", "cIscsiStatsConnectionIndex"))
if mibBuilder.loadTexts: ciscsiConnectionStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ciscsiConnectionStatsEntry.setDescription('An entry containing information about iSCSI connection statistics.')
cIscsiStatsNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cIscsiStatsNodeIndex.setStatus('current')
if mibBuilder.loadTexts: cIscsiStatsNodeIndex.setDescription('An integer value, which identifies an iSCSI node in a FC domain.')
cIscsiStatsSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 2, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cIscsiStatsSessionIndex.setStatus('current')
if mibBuilder.loadTexts: cIscsiStatsSessionIndex.setDescription('An integer value, which identifies an iSCSI session.')
cIscsiStatsConnectionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 2, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cIscsiStatsConnectionIndex.setStatus('current')
if mibBuilder.loadTexts: cIscsiStatsConnectionIndex.setDescription('An integer value, which identifies an iSCSI connection. ')
cIscsiStatsConnectionRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiStatsConnectionRxBytes.setStatus('current')
if mibBuilder.loadTexts: cIscsiStatsConnectionRxBytes.setDescription('Total number of bytes received on an iSCSI session.')
cIscsiStatsConnectionTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiStatsConnectionTxBytes.setStatus('current')
if mibBuilder.loadTexts: cIscsiStatsConnectionTxBytes.setDescription('Total number of bytes transmitted on an iSCSI session.')
cIscsiStatsIpSecInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 317, 1, 2, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cIscsiStatsIpSecInUse.setStatus('current')
if mibBuilder.loadTexts: cIscsiStatsIpSecInUse.setDescription("Indicates whether an iSCSI connection is secure or not. If the value of this object is 'true', the Ip Security is turned on and the connection is secure. If 'false', Ip Security is not turned on and the connection may be unsecure.")
ciscoiScsiGwMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 317, 2, 1))
ciscoiScsiGwMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 317, 2, 2))
ciscoiScsiGwMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 317, 2, 1, 1)).setObjects(("CISCO-ISCSI-GW-MIB", "cigConfigurationGroup"), ("CISCO-ISCSI-GW-MIB", "cigLuConfigurationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoiScsiGwMIBCompliance = ciscoiScsiGwMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoiScsiGwMIBCompliance.setDescription('The compliance statement for entities which implement the CISCO-ISCSI-GW-MIB.')
ciscoiScsiGwMIBCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 317, 2, 1, 2)).setObjects(("CISCO-ISCSI-GW-MIB", "cigConfigurationGroupRev1"), ("CISCO-ISCSI-GW-MIB", "cigSessionStatsGroup"), ("CISCO-ISCSI-GW-MIB", "cigIscsiIfGroup"), ("CISCO-ISCSI-GW-MIB", "cigLuConfigurationGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoiScsiGwMIBCompliance1 = ciscoiScsiGwMIBCompliance1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoiScsiGwMIBCompliance1.setDescription('The compliance statement for entities which implement the CISCO-ISCSI-GW-MIB.')
ciscoiScsiGwMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 317, 2, 1, 3)).setObjects(("CISCO-ISCSI-GW-MIB", "cigConfigurationGroupRev2"), ("CISCO-ISCSI-GW-MIB", "cigSessionStatsGroup"), ("CISCO-ISCSI-GW-MIB", "cigIscsiIfGroupRev1"), ("CISCO-ISCSI-GW-MIB", "cigIscsiAuthGroup"), ("CISCO-ISCSI-GW-MIB", "cigIscsiGigEIfGroup"), ("CISCO-ISCSI-GW-MIB", "cigLuConfigurationGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoiScsiGwMIBCompliance2 = ciscoiScsiGwMIBCompliance2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoiScsiGwMIBCompliance2.setDescription('The compliance statement for entities which implement the CISCO-ISCSI-GW-MIB.')
ciscoiScsiGwMIBCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 317, 2, 1, 4)).setObjects(("CISCO-ISCSI-GW-MIB", "cigConfigurationGroupRev3"), ("CISCO-ISCSI-GW-MIB", "cigSessionStatsGroup"), ("CISCO-ISCSI-GW-MIB", "cigIscsiIfGroupRev3"), ("CISCO-ISCSI-GW-MIB", "cigIscsiAuthGroup"), ("CISCO-ISCSI-GW-MIB", "cigIscsiGigEIfGroup"), ("CISCO-ISCSI-GW-MIB", "cigLuConfigurationGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoiScsiGwMIBCompliance3 = ciscoiScsiGwMIBCompliance3.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoiScsiGwMIBCompliance3.setDescription('The compliance statement for entities which implement the CISCO-ISCSI-GW-MIB.')
ciscoiScsiGwMIBCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 317, 2, 1, 5)).setObjects(("CISCO-ISCSI-GW-MIB", "cigConfigurationGroupRev3"), ("CISCO-ISCSI-GW-MIB", "cigSessionStatsGroup"), ("CISCO-ISCSI-GW-MIB", "cigIscsiIfGroupRev4"), ("CISCO-ISCSI-GW-MIB", "cigIscsiAuthGroup"), ("CISCO-ISCSI-GW-MIB", "cigIscsiGigEIfGroup"), ("CISCO-ISCSI-GW-MIB", "cigLuConfigurationGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoiScsiGwMIBCompliance4 = ciscoiScsiGwMIBCompliance4.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoiScsiGwMIBCompliance4.setDescription('The compliance statement for entities which implement the CISCO-ISCSI-GW-MIB.')
ciscoiScsiGwMIBCompliance5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 317, 2, 1, 6)).setObjects(("CISCO-ISCSI-GW-MIB", "cigConfigurationGroupRev3"), ("CISCO-ISCSI-GW-MIB", "cigConfigurationGroupSup1"), ("CISCO-ISCSI-GW-MIB", "cigSessionStatsGroup"), ("CISCO-ISCSI-GW-MIB", "cigIscsiIfGroupRev4"), ("CISCO-ISCSI-GW-MIB", "cigIscsiIfGroupSup1"), ("CISCO-ISCSI-GW-MIB", "cigIscsiAuthGroup"), ("CISCO-ISCSI-GW-MIB", "cigIscsiAuthGroupSup1"), ("CISCO-ISCSI-GW-MIB", "cigIscsiGigEIfGroup"), ("CISCO-ISCSI-GW-MIB", "cigConnectionStatsGroup"), ("CISCO-ISCSI-GW-MIB", "cigLuConfigurationGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoiScsiGwMIBCompliance5 = ciscoiScsiGwMIBCompliance5.setStatus('current')
if mibBuilder.loadTexts: ciscoiScsiGwMIBCompliance5.setDescription('The compliance statement for entities which implement the CISCO-ISCSI-GW-MIB.')
cigConfigurationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 317, 2, 2, 1)).setObjects(("CISCO-ISCSI-GW-MIB", "iscsiImprtExprtTgtsConfImport"), ("CISCO-ISCSI-GW-MIB", "iscsiImprtExprtTgtsConfExport"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcNodeName"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcNodeRole"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcNodePersistentFCAddr"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcPortPersistentFCAddr"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcPortNumFCAddr"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcNodeFCAddr"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcPortFCAddrListIndex"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcNodeVsanList2k"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcNodeVsanList4k"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcNodeDiscovered"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcNodeRowStatus"), ("CISCO-ISCSI-GW-MIB", "fc2IscsiNodeRole"), ("CISCO-ISCSI-GW-MIB", "fc2IscsiNodeName"), ("CISCO-ISCSI-GW-MIB", "fc2IscsiPortFCAddrListIndex"), ("CISCO-ISCSI-GW-MIB", "fc2IscsiNodePermitListIndex"), ("CISCO-ISCSI-GW-MIB", "fc2IscsiNodeAdvIntfListIndex"), ("CISCO-ISCSI-GW-MIB", "fc2IscsiNodeAllIntrAccessAllowed"), ("CISCO-ISCSI-GW-MIB", "fc2IscsiNodeDiscovered"), ("CISCO-ISCSI-GW-MIB", "fc2IscsiNodeRowStatus"), ("CISCO-ISCSI-GW-MIB", "fcAddress"), ("CISCO-ISCSI-GW-MIB", "fcSecondaryAddress"), ("CISCO-ISCSI-GW-MIB", "fcAddressRowStatus"), ("CISCO-ISCSI-GW-MIB", "iscsiNodeName"), ("CISCO-ISCSI-GW-MIB", "iscsiNodeNameRowStatus"), ("CISCO-ISCSI-GW-MIB", "nodeAdvIntfIfIndex"), ("CISCO-ISCSI-GW-MIB", "nodeAdvIntfIfRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cigConfigurationGroup = cigConfigurationGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cigConfigurationGroup.setDescription('A collection of objects for iSCSI Gateway configuration.')
cigLuConfigurationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 317, 2, 2, 2)).setObjects(("CISCO-ISCSI-GW-MIB", "scsiLuExtRemotePortFcAddress"), ("CISCO-ISCSI-GW-MIB", "scsiLuExtRemotePortSecFcAddress"), ("CISCO-ISCSI-GW-MIB", "scsiLuExtLocalTargetAddress"), ("CISCO-ISCSI-GW-MIB", "scsiLuExtRemoteLun"), ("CISCO-ISCSI-GW-MIB", "scsiLuExtLocalLun"), ("CISCO-ISCSI-GW-MIB", "scsiLuExtRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cigLuConfigurationGroup = cigLuConfigurationGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cigLuConfigurationGroup.setDescription('A collection of objects for creation virtual iSCSI targets from remote LUs.')
cigSessionStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 317, 2, 2, 3)).setObjects(("CISCO-ISCSI-GW-MIB", "iscsiSsnVsan"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cigSessionStatsGroup = cigSessionStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cigSessionStatsGroup.setDescription('A collection of objects for iSCSI session statistics.')
cigConfigurationGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 317, 2, 2, 4)).setObjects(("CISCO-ISCSI-GW-MIB", "iscsiImprtExprtTgtsConfImport"), ("CISCO-ISCSI-GW-MIB", "iscsiImprtExprtTgtsConfExport"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcNodeName"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcNodeRole"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcNodePersistentFCAddr"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcPortPersistentFCAddr"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcPortNumFCAddr"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcNodeFCAddr"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcPortFCAddrListIndex"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcNodeVsanList2k"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcNodeVsanList4k"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcNodeDiscovered"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcNodeRowStatus"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcNodeFcAddrAssignment"), ("CISCO-ISCSI-GW-MIB", "fc2IscsiNodeRole"), ("CISCO-ISCSI-GW-MIB", "fc2IscsiNodeName"), ("CISCO-ISCSI-GW-MIB", "fc2IscsiPortFCAddrListIndex"), ("CISCO-ISCSI-GW-MIB", "fc2IscsiNodePermitListIndex"), ("CISCO-ISCSI-GW-MIB", "fc2IscsiNodeAdvIntfListIndex"), ("CISCO-ISCSI-GW-MIB", "fc2IscsiNodeAllIntrAccessAllowed"), ("CISCO-ISCSI-GW-MIB", "fc2IscsiNodeDiscovered"), ("CISCO-ISCSI-GW-MIB", "fc2IscsiNodeRowStatus"), ("CISCO-ISCSI-GW-MIB", "fcAddress"), ("CISCO-ISCSI-GW-MIB", "fcSecondaryAddress"), ("CISCO-ISCSI-GW-MIB", "fcAddressRowStatus"), ("CISCO-ISCSI-GW-MIB", "iscsiNodeName"), ("CISCO-ISCSI-GW-MIB", "iscsiNodeNameRowStatus"), ("CISCO-ISCSI-GW-MIB", "nodeAdvIntfIfIndex"), ("CISCO-ISCSI-GW-MIB", "nodeAdvIntfIfRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cigConfigurationGroupRev1 = cigConfigurationGroupRev1.setStatus('deprecated')
if mibBuilder.loadTexts: cigConfigurationGroupRev1.setDescription('A collection of objects for iSCSI Gateway configuration.')
cigLuConfigurationGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 317, 2, 2, 5)).setObjects(("CISCO-ISCSI-GW-MIB", "scsiLuExtRemotePortFcAddress"), ("CISCO-ISCSI-GW-MIB", "scsiLuExtRemotePortSecFcAddress"), ("CISCO-ISCSI-GW-MIB", "scsiLuExtLocalTargetAddress"), ("CISCO-ISCSI-GW-MIB", "scsiLuExtRemoteLun"), ("CISCO-ISCSI-GW-MIB", "scsiLuExtLocalLun"), ("CISCO-ISCSI-GW-MIB", "scsiLuExtRowStatus"), ("CISCO-ISCSI-GW-MIB", "scsiLuExtRemoteSecLun"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cigLuConfigurationGroupRev1 = cigLuConfigurationGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cigLuConfigurationGroupRev1.setDescription('A collection of objects for creation virtual iSCSI targets from remote LUs.')
cigIscsiIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 317, 2, 2, 6)).setObjects(("CISCO-ISCSI-GW-MIB", "iscsiIfTcpKeepAliveTimeout"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpMaxBandwidth"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpMaxRetransmissions"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpMinRetransmitTime"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpPMTUEnable"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpQOS"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpSACKEnable"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpSendBufferSize"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpMinBandwidth"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpPMTUResetTimeout"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpLocalPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cigIscsiIfGroup = cigIscsiIfGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cigIscsiIfGroup.setDescription('A collection of objects for iSCSI interface configuration and monitoring.')
cigIscsiIfGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 317, 2, 2, 7)).setObjects(("CISCO-ISCSI-GW-MIB", "iscsiIfTcpKeepAliveTimeout"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpMaxBandwidth"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpMaxRetransmissions"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpMinRetransmitTime"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpPMTUEnable"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpQOS"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpSACKEnable"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpSendBufferSize"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpMinBandwidth"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpPMTUResetTimeout"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpLocalPort"), ("CISCO-ISCSI-GW-MIB", "iscsiIfForwardingMode"), ("CISCO-ISCSI-GW-MIB", "iscsiIfIntrProxyMode"), ("CISCO-ISCSI-GW-MIB", "iscsiIfIntrProxyModeNodeFcAddr"), ("CISCO-ISCSI-GW-MIB", "iscsiIfIntrProxyModePortFcAddr"), ("CISCO-ISCSI-GW-MIB", "iscsiIfIntrProxyModeFcAddrAsgnmt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cigIscsiIfGroupRev1 = cigIscsiIfGroupRev1.setStatus('deprecated')
if mibBuilder.loadTexts: cigIscsiIfGroupRev1.setDescription('A collection of objects for iSCSI interface configuration and monitoring.')
cigIscsiAuthGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 317, 2, 2, 8)).setObjects(("CISCO-ISCSI-GW-MIB", "iscsiAuthMethod"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcNodeAuthUser"), ("CISCO-ISCSI-GW-MIB", "iscsiGigEIfAuthMethod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cigIscsiAuthGroup = cigIscsiAuthGroup.setStatus('current')
if mibBuilder.loadTexts: cigIscsiAuthGroup.setDescription('A collection of objects for iSCSI authentication.')
cigConfigurationGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 317, 2, 2, 9)).setObjects(("CISCO-ISCSI-GW-MIB", "iscsiImprtExprtTgtsConfImport"), ("CISCO-ISCSI-GW-MIB", "iscsiImprtExprtTgtsConfExport"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcNodeName"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcNodeRole"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcNodePersistentFCAddr"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcPortPersistentFCAddr"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcPortNumFCAddr"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcNodeFCAddr"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcPortFCAddrListIndex"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcNodeVsanList2k"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcNodeVsanList4k"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcNodeDiscovered"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcNodeRowStatus"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcNodeFcAddrAssignment"), ("CISCO-ISCSI-GW-MIB", "fc2IscsiNodeRole"), ("CISCO-ISCSI-GW-MIB", "fc2IscsiNodeName"), ("CISCO-ISCSI-GW-MIB", "fc2IscsiPortFCAddrListIndex"), ("CISCO-ISCSI-GW-MIB", "fc2IscsiNodePermitListIndex"), ("CISCO-ISCSI-GW-MIB", "fc2IscsiNodeAdvIntfListIndex"), ("CISCO-ISCSI-GW-MIB", "fc2IscsiNodeAllIntrAccessAllowed"), ("CISCO-ISCSI-GW-MIB", "fc2IscsiNodeDiscovered"), ("CISCO-ISCSI-GW-MIB", "fc2IscsiNodeRowStatus"), ("CISCO-ISCSI-GW-MIB", "fc2IscsiNodeTrespassMode"), ("CISCO-ISCSI-GW-MIB", "fc2IscsiNodeRevertToPrimaryPort"), ("CISCO-ISCSI-GW-MIB", "fcAddress"), ("CISCO-ISCSI-GW-MIB", "fcSecondaryAddress"), ("CISCO-ISCSI-GW-MIB", "fcAddressRowStatus"), ("CISCO-ISCSI-GW-MIB", "iscsiNodeName"), ("CISCO-ISCSI-GW-MIB", "iscsiNodeNameRowStatus"), ("CISCO-ISCSI-GW-MIB", "nodeAdvIntfIfIndex"), ("CISCO-ISCSI-GW-MIB", "nodeAdvIntfIfRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cigConfigurationGroupRev2 = cigConfigurationGroupRev2.setStatus('deprecated')
if mibBuilder.loadTexts: cigConfigurationGroupRev2.setDescription('A collection of objects for iSCSI Gateway configuration.')
cigIscsiGigEIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 317, 2, 2, 10)).setObjects(("CISCO-ISCSI-GW-MIB", "iscsiGigEIfIsnsServerProfileName"), ("CISCO-ISCSI-GW-MIB", "iscsiGigEIfIscsiSessions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cigIscsiGigEIfGroup = cigIscsiGigEIfGroup.setStatus('current')
if mibBuilder.loadTexts: cigIscsiGigEIfGroup.setDescription('A collection of objects for iSCSI GigE interface configurations.')
cigIscsiIfGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 317, 2, 2, 11)).setObjects(("CISCO-ISCSI-GW-MIB", "iscsiIfTcpKeepAliveTimeout"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpMaxBandwidth"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpMaxRetransmissions"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpMinRetransmitTime"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpPMTUEnable"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpQOS"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpSACKEnable"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpSendBufferSize"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpMinBandwidth"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpPMTUResetTimeout"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpLocalPort"), ("CISCO-ISCSI-GW-MIB", "iscsiIfForwardingMode"), ("CISCO-ISCSI-GW-MIB", "iscsiIfIntrProxyMode"), ("CISCO-ISCSI-GW-MIB", "iscsiIfIntrProxyModeNodeFcAddr"), ("CISCO-ISCSI-GW-MIB", "iscsiIfIntrProxyModePortFcAddr"), ("CISCO-ISCSI-GW-MIB", "iscsiIfIntrProxyModeFcAddrAsgnmt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cigIscsiIfGroupRev2 = cigIscsiIfGroupRev2.setStatus('deprecated')
if mibBuilder.loadTexts: cigIscsiIfGroupRev2.setDescription('A collection of objects for iSCSI interface configuration and monitoring.')
cigConfigurationGroupRev3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 317, 2, 2, 12)).setObjects(("CISCO-ISCSI-GW-MIB", "iscsiImprtExprtTgtsConfImport"), ("CISCO-ISCSI-GW-MIB", "iscsiImprtExprtTgtsConfExport"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcNodeName"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcNodeRole"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcNodePersistentFCAddr"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcPortPersistentFCAddr"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcPortNumFCAddr"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcNodeFCAddr"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcPortFCAddrListIndex"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcNodeVsanList2k"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcNodeVsanList4k"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcNodeDiscovered"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcNodeRowStatus"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcNodeFcAddrAssignment"), ("CISCO-ISCSI-GW-MIB", "fc2IscsiNodeRole"), ("CISCO-ISCSI-GW-MIB", "fc2IscsiNodeName"), ("CISCO-ISCSI-GW-MIB", "fc2IscsiPortFCAddrListIndex"), ("CISCO-ISCSI-GW-MIB", "fc2IscsiNodePermitListIndex"), ("CISCO-ISCSI-GW-MIB", "fc2IscsiNodeAdvIntfListIndex"), ("CISCO-ISCSI-GW-MIB", "fc2IscsiNodeAllIntrAccessAllowed"), ("CISCO-ISCSI-GW-MIB", "fc2IscsiNodeDiscovered"), ("CISCO-ISCSI-GW-MIB", "fc2IscsiNodeRowStatus"), ("CISCO-ISCSI-GW-MIB", "fc2IscsiNodeTrespassMode"), ("CISCO-ISCSI-GW-MIB", "fc2IscsiNodeRevertToPrimaryPort"), ("CISCO-ISCSI-GW-MIB", "fcAddress"), ("CISCO-ISCSI-GW-MIB", "fcSecondaryAddress"), ("CISCO-ISCSI-GW-MIB", "fcAddressRowStatus"), ("CISCO-ISCSI-GW-MIB", "iscsiNodeName"), ("CISCO-ISCSI-GW-MIB", "iscsiNodeNameRowStatus"), ("CISCO-ISCSI-GW-MIB", "nodeAdvIntfIfIndex"), ("CISCO-ISCSI-GW-MIB", "nodeAdvIntfIfRowStatus"), ("CISCO-ISCSI-GW-MIB", "iscsiInitiatorIdleTimeout"), ("CISCO-ISCSI-GW-MIB", "iscsiIntrIdentificationMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cigConfigurationGroupRev3 = cigConfigurationGroupRev3.setStatus('current')
if mibBuilder.loadTexts: cigConfigurationGroupRev3.setDescription('A collection of objects for iSCSI Gateway configuration.')
cigIscsiIfGroupRev3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 317, 2, 2, 13)).setObjects(("CISCO-ISCSI-GW-MIB", "iscsiIfTcpKeepAliveTimeout"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpMaxBandwidth"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpMaxRetransmissions"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpMinRetransmitTime"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpPMTUEnable"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpQOS"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpSACKEnable"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpSendBufferSize"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpMinBandwidth"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpPMTUResetTimeout"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpLocalPort"), ("CISCO-ISCSI-GW-MIB", "iscsiIfForwardingMode"), ("CISCO-ISCSI-GW-MIB", "iscsiIfIntrProxyMode"), ("CISCO-ISCSI-GW-MIB", "iscsiIfIntrProxyModeNodeFcAddr"), ("CISCO-ISCSI-GW-MIB", "iscsiIfIntrProxyModePortFcAddr"), ("CISCO-ISCSI-GW-MIB", "iscsiIfIntrProxyModeFcAddrAsgnmt"), ("CISCO-ISCSI-GW-MIB", "iscsiIfIntrIdentificationMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cigIscsiIfGroupRev3 = cigIscsiIfGroupRev3.setStatus('deprecated')
if mibBuilder.loadTexts: cigIscsiIfGroupRev3.setDescription('A collection of objects for iSCSI interface configuration and monitoring.')
cigIscsiIfGroupRev4 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 317, 2, 2, 14)).setObjects(("CISCO-ISCSI-GW-MIB", "iscsiIfTcpKeepAliveTimeout"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpMaxBandwidth"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpMaxRetransmissions"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpMinRetransmitTime"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpPMTUEnable"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpQOS"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpSACKEnable"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpSendBufferSize"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpMinBandwidth"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpPMTUResetTimeout"), ("CISCO-ISCSI-GW-MIB", "iscsiIfForwardingMode"), ("CISCO-ISCSI-GW-MIB", "iscsiIfIntrProxyMode"), ("CISCO-ISCSI-GW-MIB", "iscsiIfIntrProxyModeNodeFcAddr"), ("CISCO-ISCSI-GW-MIB", "iscsiIfIntrProxyModePortFcAddr"), ("CISCO-ISCSI-GW-MIB", "iscsiIfIntrProxyModeFcAddrAsgnmt"), ("CISCO-ISCSI-GW-MIB", "iscsiIfIntrIdentificationMode"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpLocalTcpPort"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpRndTrpTimeEst"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cigIscsiIfGroupRev4 = cigIscsiIfGroupRev4.setStatus('current')
if mibBuilder.loadTexts: cigIscsiIfGroupRev4.setDescription('An collection of objects for iSCSI interface configuration and monitoring.')
cigIscsiIfGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 317, 2, 2, 15)).setObjects(("CISCO-ISCSI-GW-MIB", "iscsiIfNumNormalConnections"), ("CISCO-ISCSI-GW-MIB", "iscsiIfNumDiscovConnections"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpCWMEnable"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpCWMBurstSize"), ("CISCO-ISCSI-GW-MIB", "iscsiIfTcpMaxJitter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cigIscsiIfGroupSup1 = cigIscsiIfGroupSup1.setStatus('current')
if mibBuilder.loadTexts: cigIscsiIfGroupSup1.setDescription('A collection of objects for iSCSI interface configuration and monitoring.')
cigConnectionStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 317, 2, 2, 16)).setObjects(("CISCO-ISCSI-GW-MIB", "cIscsiStatsConnectionTxBytes"), ("CISCO-ISCSI-GW-MIB", "cIscsiStatsConnectionRxBytes"), ("CISCO-ISCSI-GW-MIB", "cIscsiStatsIpSecInUse"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cigConnectionStatsGroup = cigConnectionStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cigConnectionStatsGroup.setDescription('A collection of objects for iSCSI connection statistics.')
cigConfigurationGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 317, 2, 2, 17)).setObjects(("CISCO-ISCSI-GW-MIB", "iscsiTargetUserName"), ("CISCO-ISCSI-GW-MIB", "iscsiTargetPassword"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cigConfigurationGroupSup1 = cigConfigurationGroupSup1.setStatus('current')
if mibBuilder.loadTexts: cigConfigurationGroupSup1.setDescription('A collection of objects for iSCSI Gateway configuration.')
cigIscsiAuthGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 317, 2, 2, 18)).setObjects(("CISCO-ISCSI-GW-MIB", "iscsi2FcTargetUserName"), ("CISCO-ISCSI-GW-MIB", "iscsi2FcTargetPassword"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cigIscsiAuthGroupSup1 = cigIscsiAuthGroupSup1.setStatus('current')
if mibBuilder.loadTexts: cigIscsiAuthGroupSup1.setDescription('A collection of objects for iSCSI authentication.')
mibBuilder.exportSymbols("CISCO-ISCSI-GW-MIB", iscsiAuthMethod=iscsiAuthMethod, iscsi2FcNodePersistentFCAddr=iscsi2FcNodePersistentFCAddr, iscsiIfTcpCWMEnable=iscsiIfTcpCWMEnable, iscsiGigEIfIsnsServerProfileName=iscsiGigEIfIsnsServerProfileName, iscsiNodeNameRowStatus=iscsiNodeNameRowStatus, cigIscsiAuthGroup=cigIscsiAuthGroup, iscsi2FcNodeRole=iscsi2FcNodeRole, IscsiName=IscsiName, iscsi2FcPortPersistentFCAddr=iscsi2FcPortPersistentFCAddr, nodeAdvIntfIfRowStatus=nodeAdvIntfIfRowStatus, iscsiIfTcpQOS=iscsiIfTcpQOS, fc2IscsiNodeName=fc2IscsiNodeName, fc2IscsiNodeTrespassMode=fc2IscsiNodeTrespassMode, iscsiIntrIdentificationMode=iscsiIntrIdentificationMode, iscsiIfTcpMaxBandwidth=iscsiIfTcpMaxBandwidth, scsiLuExtRowStatus=scsiLuExtRowStatus, iscsiIfTcpSACKEnable=iscsiIfTcpSACKEnable, cigIscsiIfGroupSup1=cigIscsiIfGroupSup1, scsiLuExtRemoteSecLun=scsiLuExtRemoteSecLun, iscsiIfIntrIdentificationMode=iscsiIfIntrIdentificationMode, iscsiTargetUserName=iscsiTargetUserName, iscsi2FcPortNumFCAddr=iscsi2FcPortNumFCAddr, fc2IscsiNodeEntry=fc2IscsiNodeEntry, cIscsiStatsConnectionIndex=cIscsiStatsConnectionIndex, iscsiIfTable=iscsiIfTable, CIscsiTargetDomains=CIscsiTargetDomains, iscsi2FcNodeName=iscsi2FcNodeName, iscsiIfTcpMinRetransmitTime=iscsiIfTcpMinRetransmitTime, cigConfigurationGroupSup1=cigConfigurationGroupSup1, nodeAdvIntfIfIndex=nodeAdvIntfIfIndex, scsiLuExtLocalTargetAddress=scsiLuExtLocalTargetAddress, iscsiGigEIfAuthMethod=iscsiGigEIfAuthMethod, iscsi2FcNodeRowStatus=iscsi2FcNodeRowStatus, PYSNMP_MODULE_ID=ciscoIscsiGwMIB, cigConfigurationGroupRev1=cigConfigurationGroupRev1, iscsiNodeNameListTable=iscsiNodeNameListTable, iscsi2FcNodeVsanList4k=iscsi2FcNodeVsanList4k, iscsiSsnVsan=iscsiSsnVsan, iscsi2FcNodeIndex=iscsi2FcNodeIndex, nodeAdvIntfListIndex=nodeAdvIntfListIndex, iscsiIfEntry=iscsiIfEntry, iscsi2FcPortFCAddrListIndex=iscsi2FcPortFCAddrListIndex, iscsi2FcNodeFCAddr=iscsi2FcNodeFCAddr, iscsiNodeNameListEntry=iscsiNodeNameListEntry, fc2IscsiNodePermitListIndex=fc2IscsiNodePermitListIndex, fc2IscsiPortFCAddrListIndex=fc2IscsiPortFCAddrListIndex, iscsiNodeNameIndex=iscsiNodeNameIndex, ciscoiScsiGwMIBCompliance3=ciscoiScsiGwMIBCompliance3, cigIscsiIfGroup=cigIscsiIfGroup, iscsiImprtExprtTgtsConfExport=iscsiImprtExprtTgtsConfExport, cigIscsiGigEIfGroup=cigIscsiGigEIfGroup, fc2IscsiNodeTable=fc2IscsiNodeTable, iscsiGigEIfIscsiSessions=iscsiGigEIfIscsiSessions, iscsi2FcNodeAuthUser=iscsi2FcNodeAuthUser, cIscsiStatsConnectionRxBytes=cIscsiStatsConnectionRxBytes, iscsiIfTcpLocalTcpPort=iscsiIfTcpLocalTcpPort, fc2IscsiNodeAllIntrAccessAllowed=fc2IscsiNodeAllIntrAccessAllowed, fcAddressRowStatus=fcAddressRowStatus, iscsiIfTcpLocalPort=iscsiIfTcpLocalPort, cigLuConfigurationGroup=cigLuConfigurationGroup, iscsi2FcNodeDiscovered=iscsi2FcNodeDiscovered, iscsiIfTcpPMTUResetTimeout=iscsiIfTcpPMTUResetTimeout, cIscsiStatsNodeIndex=cIscsiStatsNodeIndex, ciscoiScsiGwMIBCompliance=ciscoiScsiGwMIBCompliance, iscsiImprtExprtTgtsConfTable=iscsiImprtExprtTgtsConfTable, iscsiGigEIfTable=iscsiGigEIfTable, cigIscsiAuthGroupSup1=cigIscsiAuthGroupSup1, iscsiGigEIfEntry=iscsiGigEIfEntry, fc2IscsiNodeRole=fc2IscsiNodeRole, fc2IscsiNodeDiscovered=fc2IscsiNodeDiscovered, iscsiTargetPassword=iscsiTargetPassword, cigConfigurationGroup=cigConfigurationGroup, iscsiNodeName=iscsiNodeName, iscsiIfTcpMinBandwidth=iscsiIfTcpMinBandwidth, ciscoIscsiGwMIB=ciscoIscsiGwMIB, iscsi2FcNodeEntry=iscsi2FcNodeEntry, ciscoiScsiGwMIBConformance=ciscoiScsiGwMIBConformance, iscsi2FcTargetUserName=iscsi2FcTargetUserName, fc2IscsiNodeRevertToPrimaryPort=fc2IscsiNodeRevertToPrimaryPort, ciScsiStatistics=ciScsiStatistics, iscsiIfIntrProxyModeFcAddrAsgnmt=iscsiIfIntrProxyModeFcAddrAsgnmt, nodeAdvIntfIndex=nodeAdvIntfIndex, cIscsiStatsIpSecInUse=cIscsiStatsIpSecInUse, cigIscsiIfGroupRev1=cigIscsiIfGroupRev1, ciscoiScsiGwMIBCompliance5=ciscoiScsiGwMIBCompliance5, cigIscsiIfGroupRev2=cigIscsiIfGroupRev2, iscsiIfIntrProxyModeNodeFcAddr=iscsiIfIntrProxyModeNodeFcAddr, scsiLuExtEntry=scsiLuExtEntry, scsiLuExtRemotePortSecFcAddress=scsiLuExtRemotePortSecFcAddress, iscsiSessionAttributesExtEntry=iscsiSessionAttributesExtEntry, fcAddressIndex=fcAddressIndex, fc2IscsiNodeRowStatus=fc2IscsiNodeRowStatus, fcAddressListEntry=fcAddressListEntry, iscsiSessionAttributesExtTable=iscsiSessionAttributesExtTable, nodeAdvIntfListTable=nodeAdvIntfListTable, iscsiIfTcpRndTrpTimeEst=iscsiIfTcpRndTrpTimeEst, ciscoiScsiGwMIBObjects=ciscoiScsiGwMIBObjects, fcAddressListIndex=fcAddressListIndex, scsiLuExtRemotePortFcAddress=scsiLuExtRemotePortFcAddress, cIscsiStatsConnectionTxBytes=cIscsiStatsConnectionTxBytes, iscsiIfTcpKeepAliveTimeout=iscsiIfTcpKeepAliveTimeout, iscsiIfNumNormalConnections=iscsiIfNumNormalConnections, fcSecondaryAddress=fcSecondaryAddress, ciscoiScsiGwMIBCompliance2=ciscoiScsiGwMIBCompliance2, cIscsiStatsSessionIndex=cIscsiStatsSessionIndex, cigIscsiIfGroupRev3=cigIscsiIfGroupRev3, iscsi2FcTargetPassword=iscsi2FcTargetPassword, iscsiImprtExprtTgtsConfEntry=iscsiImprtExprtTgtsConfEntry, iscsiIfIntrProxyMode=iscsiIfIntrProxyMode, fcAddressListTable=fcAddressListTable, IscsiAuthMethod=IscsiAuthMethod, nodeAdvIntfListEntry=nodeAdvIntfListEntry, ciscoiScsiGwMIBNotifications=ciscoiScsiGwMIBNotifications, scsiLuExtLocalLun=scsiLuExtLocalLun, iscsi2FcNodeTable=iscsi2FcNodeTable, iscsiIfNumDiscovConnections=iscsiIfNumDiscovConnections, iscsiIfTcpCWMBurstSize=iscsiIfTcpCWMBurstSize, ciscoiScsiGwMIBCompliance1=ciscoiScsiGwMIBCompliance1, cigConfigurationGroupRev3=cigConfigurationGroupRev3, ciscsiConnectionStatsTable=ciscsiConnectionStatsTable, ciscoiScsiGwMIBGroups=ciscoiScsiGwMIBGroups, cigIscsiIfGroupRev4=cigIscsiIfGroupRev4, iscsiInitiatorIdleTimeout=iscsiInitiatorIdleTimeout, cigLuConfigurationGroupRev1=cigLuConfigurationGroupRev1, iscsiIfIntrProxyModePortFcAddr=iscsiIfIntrProxyModePortFcAddr, ciscoiScsiGwMIBCompliances=ciscoiScsiGwMIBCompliances, CIscsiIntrIdentificationMode=CIscsiIntrIdentificationMode, iscsiIfTcpMaxJitter=iscsiIfTcpMaxJitter, cigSessionStatsGroup=cigSessionStatsGroup, iscsi2FcNodeVsanList2k=iscsi2FcNodeVsanList2k, cigConfigurationGroupRev2=cigConfigurationGroupRev2, iscsiIfForwardingMode=iscsiIfForwardingMode, CIscsiNodeRoles=CIscsiNodeRoles, fcAddress=fcAddress, ciscsiConnectionStatsEntry=ciscsiConnectionStatsEntry, fc2IscsiNodeAdvIntfListIndex=fc2IscsiNodeAdvIntfListIndex, scsiLuExtTable=scsiLuExtTable, ciScsiConfig=ciScsiConfig, iscsiImprtExprtTgtsConfImport=iscsiImprtExprtTgtsConfImport, scsiLuExtRemoteLun=scsiLuExtRemoteLun, iscsiIfTcpSendBufferSize=iscsiIfTcpSendBufferSize, cigConnectionStatsGroup=cigConnectionStatsGroup, iscsiNodeNameListIndex=iscsiNodeNameListIndex, iscsiIfTcpPMTUEnable=iscsiIfTcpPMTUEnable, iscsi2FcNodeFcAddrAssignment=iscsi2FcNodeFcAddrAssignment, ciscoiScsiGwMIBCompliance4=ciscoiScsiGwMIBCompliance4, iscsiIfTcpMaxRetransmissions=iscsiIfTcpMaxRetransmissions)
