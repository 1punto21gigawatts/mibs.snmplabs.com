#
# PySNMP MIB module UX25-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/UX25-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:30:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, enterprises, IpAddress, Counter64, ModuleIdentity, Unsigned32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Integer32, Counter32, iso, experimental, MibIdentifier, TimeTicks, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "enterprises", "IpAddress", "Counter64", "ModuleIdentity", "Unsigned32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Integer32", "Counter32", "iso", "experimental", "MibIdentifier", "TimeTicks", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
usr = MibIdentifier((1, 3, 6, 1, 4, 1, 429))
nas = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1))
ux25 = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 10))
ux25AdmnChannelTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 10, 1), )
if mibBuilder.loadTexts: ux25AdmnChannelTable.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnChannelTable.setDescription('Defines objects for the parameters of an X.25 interface which the administrator can read and set.')
ux25AdmnChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 10, 1, 1), ).setIndexNames((0, "UX25-MIB", "ux25AdmnChanneIndex"))
if mibBuilder.loadTexts: ux25AdmnChannelEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnChannelEntry.setDescription('Entries of ux25AdmnChannelTable.')
ux25AdmnChanneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25AdmnChanneIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnChanneIndex.setDescription('A unique value for each X.25 subnetwork entity in the chassis. The value of this object matches the value of the index of the corresponding X.25 subnetwork entity entry in the entity table of the chassis MIB.')
ux25AdmnNetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("x25Llc", 1), ("x2588", 2), ("x2584", 3), ("x2580", 4), ("pss", 5), ("austpac", 6), ("datapac", 7), ("ddn", 8), ("telenet", 9), ("transpac", 10), ("tymnet", 11), ("datexP", 12), ("ddxP", 13), ("venusP", 14), ("accunet", 15), ("itapac", 16), ("datapak", 17), ("datanet", 18), ("dcs", 19), ("telepac", 20), ("fDatapac", 21), ("finpac", 22), ("pacnet", 23), ("luxpac", 24)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnNetMode.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnNetMode.setDescription('Selects the network protocol to be used. Default=x2584(3).')
ux25AdmnProtocolVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("x25ver80", 1), ("x25ver84", 2), ("x25ver88", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnProtocolVersion.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnProtocolVersion.setDescription('Determines the X.25 protocol version being used on the network. A network mode of X25_LLC overides this field to the 1984 standard. Default=x25ver84(3).')
ux25AdmnInterfaceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dceMode", 1), ("dteMode", 2), ("dxeMode", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnInterfaceMode.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnInterfaceMode.setDescription('Indicates the DTE/DCE nature of the link. The DXE parameter is resolved using ISO 8208 for DTE-DTE operation. Default=dteMode(2).')
ux25AdmnLowestPVCVal = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnLowestPVCVal.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnLowestPVCVal.setDescription('Low end of the Permanent Virtual Circuit range. If both the Low and High ends of the range are set to 0 there are no PVCs. Default=0.')
ux25AdmnHighestPVCVal = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnHighestPVCVal.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnHighestPVCVal.setDescription('High end of the Permanent Virtual Circuit range. If both the Low and High ends of the range are set to 0 there are no PVCs. Default=0.')
ux25AdmnChannelLIC = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnChannelLIC.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnChannelLIC.setDescription('Low end of the one-way incoming logical channel. If both Low and High ends of the channel are set to 0, there are no one-way incoming channels. Default=0.')
ux25AdmnChannelHIC = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnChannelHIC.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnChannelHIC.setDescription('High end of the one-way incoming logical channel. If both Low and High ends of the channel are set to 0, there are no one-way incoming channels. Default=0.')
ux25AdmnChannelLTC = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnChannelLTC.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnChannelLTC.setDescription('Low end of the two-way incoming logical channel. If both Low and High ends of the channel are set to 0, there are no two-way incoming channels. Default=1024.')
ux25AdmnChannelHTC = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnChannelHTC.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnChannelHTC.setDescription('High end of the two-way incoming logical channel. If both Low and High ends of the channel are set to 0, there are no two-way incoming channels. Default=1087.')
ux25AdmnChannelLOC = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnChannelLOC.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnChannelLOC.setDescription('Low end of the one-way outgoing logical channel. If both Low and High ends of the channel are set to 0, there are no one-way outgoing channels. Default=0.')
ux25AdmnChannelHOC = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnChannelHOC.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnChannelHOC.setDescription('High end of the one-way outgoing logical channel. If both Low and High ends of the channel are set to 0, there are no one-way outgoing channels. Default=0.')
ux25AdmnClassTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 10, 2), )
if mibBuilder.loadTexts: ux25AdmnClassTable.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnClassTable.setDescription('Defines objects for the parameters of an X.25 interface which the administrator can read and set.')
ux25AdmnClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 10, 2, 1), ).setIndexNames((0, "UX25-MIB", "ux25AdmnClassIndex"))
if mibBuilder.loadTexts: ux25AdmnClassEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnClassEntry.setDescription('Entries of ux25AdmnClassTable.')
ux25AdmnClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25AdmnClassIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnClassIndex.setDescription('A unique value for each X.25 subnetwork entity in the chassis. The value of this object matches the value of the index of the corresponding X.25 subnetwork entity entry in the entity table of the chassis MIB.')
ux25AdmnLocMaxThruPutClass = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("tcReserved0", 1), ("tcReserved1", 2), ("tcReserved2", 3), ("tc75", 4), ("tc150", 5), ("tc300", 6), ("tc600", 7), ("tc1200", 8), ("tc2400", 9), ("tc4800", 10), ("tc9600", 11), ("tc19200", 12), ("tc48000", 13), ("tcReserved13", 14), ("tcReserved14", 15), ("tcReserved15", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnLocMaxThruPutClass.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnLocMaxThruPutClass.setDescription('The maximum value of the throughput class Quality of Service parameter which is supported. According to ISO 8208 this parameter is bounded in the range >=3 and <=12 corresponding to a range 75 to 48000 bits/second. The range supported here is 0 to 15 for non-standard X.25 implementations, which use the Throughput Class Window/Packet Parameters (Group II). Default=12.')
ux25AdmnRemMaxThruPutClass = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("tcReserved0", 1), ("tcReserved1", 2), ("tcReserved2", 3), ("tc75", 4), ("tc150", 5), ("tc300", 6), ("tc600", 7), ("tc1200", 8), ("tc2400", 9), ("tc4800", 10), ("tc9600", 11), ("tc19200", 12), ("tc48000", 13), ("tcReserved13", 14), ("tcReserved14", 15), ("tcReserved15", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnRemMaxThruPutClass.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnRemMaxThruPutClass.setDescription('The maximum value of the throughput class Quality of Service parameter which is supported. According to ISO 8208 this parameter is bounded in the range >=3 and <=12 corresponding to a range 75 to 48000 bits/second. The range supported here is 0 to 15 for non-standard X.25 implementations, which use the Throughput Class Window/Packet Parameters (Group II). Default=12.')
ux25AdmnLocDefThruPutClass = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("tcReserved0", 1), ("tcReserved1", 2), ("tcReserved2", 3), ("tc75", 4), ("tc150", 5), ("tc300", 6), ("tc600", 7), ("tc1200", 8), ("tc2400", 9), ("tc4800", 10), ("tc9600", 11), ("tc19200", 12), ("tc48000", 13), ("tcReserved13", 14), ("tcReserved14", 15), ("tcReserved15", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnLocDefThruPutClass.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnLocDefThruPutClass.setDescription('The default throughput class that is defined for the local-to-remote direction. In some networks, such as TELENET, negotiation of throughput class is constrained to be towards a configured default throughput class. In other PSDNs, this value should be set equal to the value of the Maximum Local Throughput Class. Default=12.')
ux25AdmnRemDefThruPutClass = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("tcReserved0", 1), ("tcReserved1", 2), ("tcReserved2", 3), ("tc75", 4), ("tc150", 5), ("tc300", 6), ("tc600", 7), ("tc1200", 8), ("tc2400", 9), ("tc4800", 10), ("tc9600", 11), ("tc19200", 12), ("tc48000", 13), ("tcReserved13", 14), ("tcReserved14", 15), ("tcReserved15", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnRemDefThruPutClass.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnRemDefThruPutClass.setDescription('The default throughput class value defined for remote-to-local direction. In some networks, such as TELENET, negotiation of throughput class is constrained to be towards a configured default throughput class. In other PSDNs, this value should be set equal to the value of the Maximum Remote Throughput Class. Default=12.')
ux25AdmnLocMinThruPutClass = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("tcReserved0", 1), ("tcReserved1", 2), ("tcReserved2", 3), ("tc75", 4), ("tc150", 5), ("tc300", 6), ("tc600", 7), ("tc1200", 8), ("tc2400", 9), ("tc4800", 10), ("tc9600", 11), ("tc19200", 12), ("tc48000", 13), ("tcReserved13", 14), ("tcReserved14", 15), ("tcReserved15", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnLocMinThruPutClass.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnLocMinThruPutClass.setDescription('According to ISO 8208, the throughput class parameter is defined in the range of >=3 to <=12. Some PSDNs may provide different mapping, in which case, this parameter is the minimum value. Default=3.')
ux25AdmnRemMinThruPutClass = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("tcReserved0", 1), ("tcReserved1", 2), ("tcReserved2", 3), ("tc75", 4), ("tc150", 5), ("tc300", 6), ("tc600", 7), ("tc1200", 8), ("tc2400", 9), ("tc4800", 10), ("tc9600", 11), ("tc19200", 12), ("tc48000", 13), ("tcReserved13", 14), ("tcReserved14", 15), ("tcReserved15", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnRemMinThruPutClass.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnRemMinThruPutClass.setDescription('According to ISO 8208, the throughput class parameter is defined in the range of >=3 to <=12. Some PSDNs may provide different mapping, in which case, this parameter is the minimum value. Default=3.')
ux25AdmnThclassNegToDef = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnThclassNegToDef.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnThclassNegToDef.setDescription('Determines if throughput class negotiation will be used for certain network procedures. Default=disable(1).')
ux25AdmnThclassType = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noTcType", 1), ("loNibble", 2), ("highNibble", 3), ("bothNibbles", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnThclassType.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnThclassType.setDescription('Defines which throughput class encodings can be used to assign packet and window sizes. Some implementations of X.25 do not use the X.25 packet and window negotiation and rely on mapping the throughput class to these parameters. Default=noTcType(1).')
ux25AdmnThclassWinMap = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(31, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnThclassWinMap.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnThclassWinMap.setDescription('The mapping between throughput class and a window parameter. Each number has a range of 1 to 127. Default=3.3.3.3.3.3.3.3.3.3.3.3.3.3.3.3')
ux25AdmnThclassPackMap = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(31, 47))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnThclassPackMap.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnThclassPackMap.setDescription('The mapping between the throughput class and a packet parameter. Each number has a range of 4 to 12. Default=7.7.7.7.7.7.7.7.7.7.7.7.7.7.7.7')
ux25AdmnPacketTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 10, 3), )
if mibBuilder.loadTexts: ux25AdmnPacketTable.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnPacketTable.setDescription('Defines objects for the parameters of an X.25 interface which the administrator can read and set.')
ux25AdmnPacketEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1), ).setIndexNames((0, "UX25-MIB", "ux25AdmnPacketIndex"))
if mibBuilder.loadTexts: ux25AdmnPacketEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnPacketEntry.setDescription('Entries of ux25AdmnPacketTable.')
ux25AdmnPacketIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25AdmnPacketIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnPacketIndex.setDescription('A unique value for each X.25 subnetwork entity in the chassis. The value of this object matches the value of the index of the corresponding X.25 subnetwork entity entry in the entity table of the chassis MIB.')
ux25AdmnPktSequencing = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 32))).clone(namedValues=NamedValues(("pktSeq8", 16), ("pktSeq128", 32)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnPktSequencing.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnPktSequencing.setDescription('Indicates whether modulo 8 or 128 sequence numbering operates on the network. Default=pktSeq8(16).')
ux25AdmnLocMaxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 8, 9))).clone(namedValues=NamedValues(("maxPktSz128", 7), ("maxPktSz256", 8), ("maxPktSz512", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnLocMaxPktSize.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnLocMaxPktSize.setDescription('Maximum acceptable size of packets in the local-to-remote direction. On an incoming call, a value for the packet size parameter greater than this value will be negotiated down to an acceptable size when the call is accepted. Default=maxPktSz256(8).')
ux25AdmnRemMaxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 8, 9))).clone(namedValues=NamedValues(("maxPktSz128", 7), ("maxPktSz256", 8), ("maxPktSz512", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnRemMaxPktSize.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnRemMaxPktSize.setDescription('Maximum acceptable size of packets in the remote-to-local direction. On an incoming call, a value for the packet size parameter greater than this value will be negotiated down to an acceptable size when the call is accepted. Default=maxPktSz256(8).')
ux25AdmnLocDefPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("defPktSz16", 4), ("defPktSz32", 5), ("defPktSz64", 6), ("defPktSz128", 7), ("defPktSz256", 8), ("defPktSz512", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnLocDefPktSize.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnLocDefPktSize.setDescription('Specifies the value of the default packet size for the direction local-to-remote, which may be nonstandard, provided the value is agreed between the communicating parties on the LAN or between the DTE and DCE. Default=defPktSz256(8).')
ux25AdmnRemDefPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("defPktSz16", 4), ("defPktSz32", 5), ("defPktSz64", 6), ("defPktSz128", 7), ("defPktSz256", 8), ("defPktSz512", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnRemDefPktSize.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnRemDefPktSize.setDescription('Specifies the value of the default packet size for the direction remote-to-local, which may be nonstandard, provided the value is agreed between the communicating parties on the LAN or between the DTE and DCE. Default=defPktSz256(8).')
ux25AdmnLocMaxWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnLocMaxWinSize.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnLocMaxWinSize.setDescription('Specifies the maximum local window size. NOTE: 127 allowed only for modulo 128 networks. Default=7.')
ux25AdmnRemMaxWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnRemMaxWinSize.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnRemMaxWinSize.setDescription('Specifies the maximum remote window size. NOTE: 127 allowed only for modulo 128 networks. Default=7.')
ux25AdmnLocDefWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnLocDefWinSize.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnLocDefWinSize.setDescription('Specifies the value of the default window size, which may be nonstandard, provided the value is agreed on by all parties on the LAN between the DTE and DCE. NOTE: The sequence numbering scheme affects the range of this parameter. Default=2.')
ux25AdmnRemDefWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnRemDefWinSize.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnRemDefWinSize.setDescription('Specifies the value of the default window size, which may be nonstandard, provided the value is agreed on by all parties on the LAN between the DTE and DCE. NOTE: The sequence numbering scheme affects the range of this parameter. Default=2.')
ux25AdmnMaxNSDULimit = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnMaxNSDULimit.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnMaxNSDULimit.setDescription('The default maximum length beyond which concatenation is stopped and data currently held is passed to the Network Service user. Default=256.')
ux25AdmnAccNoDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnAccNoDiagnostic.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnAccNoDiagnostic.setDescription('Allow the omission of the diagnostic byte in incoming RESTART, CLEAR and RESET INDICATION packets. Default=disable(1).')
ux25AdmnUseDiagnosticPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnUseDiagnosticPacket.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnUseDiagnosticPacket.setDescription('Use diagnostic packets. Default=disable(1).')
ux25AdmnItutClearLen = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnItutClearLen.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnItutClearLen.setDescription('Restrict the length of a CLEAR INDICATION to 5 bytes and a CLEAR CONFIRM to 3 bytes. Default=disable(1).')
ux25AdmnBarDiagnosticPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnBarDiagnosticPacket.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnBarDiagnosticPacket.setDescription('Bar diagnostic packets. Default=disable(1).')
ux25AdmnDiscNzDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnDiscNzDiagnostic.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnDiscNzDiagnostic.setDescription('Discard all diagnostic packets on a non-zero LCN. Default=disable(1).')
ux25AdmnAcceptHexAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnAcceptHexAdd.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnAcceptHexAdd.setDescription('Allow DTE addresses to contain hexadecimal digits. Default=disable(1).')
ux25AdmnBarNonPrivilegeListen = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnBarNonPrivilegeListen.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnBarNonPrivilegeListen.setDescription('Disallow a non-privileged user (i.e without superuser privilege) from listening for incoming calls. Default=enable(2).')
ux25AdmnIntlAddrRecognition = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notDistinguished", 1), ("examineDnic", 2), ("prefix1", 3), ("prefix0", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnIntlAddrRecognition.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnIntlAddrRecognition.setDescription("Determine whether outgoing international calls are to be accepted. The values and their interpretation are: 1 - International calls are not distinguished. 2 - The DNIC of the called DTE address is examined and compared to that held in the psdn_local members dnic1 and dnic2. A mismatch implies an international call. 3 - International calls are distinguished by having a '1' prefix on the DTE address. 4 - International calls are distinguished by having a '0' prefix on the DTE address. Default=notDistinguished(1).")
ux25AdmnDnic = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnDnic.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnDnic.setDescription('This field contains the first four digits of DNIC and is only used when ux25AdmnIntlAddrRecognition is set to examineDnic(2). Note this field must contain exactly four BCD digits. Default=0000.')
ux25AdmnIntlPrioritized = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnIntlPrioritized.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnIntlPrioritized.setDescription('Determine whether some prioritizing method is to used for international calls and is used in conjuction with ux25AdmnPrtyEncodeCtrl and ux25AdmnPrtyPktForced value. Default=disable(1).')
ux25AdmnPrtyEncodeCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("x2588", 1), ("datapacPriority76", 2), ("datapacTraffic80", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnPrtyEncodeCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnPrtyEncodeCtrl.setDescription('Describes how the priority request is to be encoded for this PSDN. Default=x2588(1).')
ux25AdmnPrtyPktForcedVal = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("prioPktSz0", 1), ("prioPktSz4", 5), ("prioPktSz5", 6), ("prioPktSz6", 7), ("prioPktSz7", 8), ("prioPktSz8", 9), ("prioPktSz9", 10), ("prioPktSz10", 11), ("prioPktSz11", 12), ("prioPktSz12", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnPrtyPktForcedVal.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnPrtyPktForcedVal.setDescription('If this entry is other than prioPktSz1(1) all priority call requests and incoming calls should have the associated packet size parameter forced to this value. Note that the actual packet size is 2 to the power of this parameter. Default=prioPktSz1(1).')
ux25AdmnSrcAddrCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noSaCntrl", 1), ("omitDte", 2), ("useLocal", 3), ("forceLocal", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnSrcAddrCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnSrcAddrCtrl.setDescription('Provide a means to override or set the calling address in outgoing call requests for this PSDN. Default=noSaCntrl(1).')
ux25AdmnDbitInAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("leaveDbit", 1), ("zeroDbit", 2), ("clearCall", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnDbitInAccept.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnDbitInAccept.setDescription('Defines the action to take when a Call Accept is received with the D-bit set and there is no local D-bit support. Default=clearCall(3).')
ux25AdmnDbitOutAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("leaveDbit", 1), ("zeroDbit", 2), ("clearCall", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnDbitOutAccept.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnDbitOutAccept.setDescription('Defines the action to take when the remote user sends a Call Accept with the D-bit set when the local user did not request use of the D-bit. Default=clearCall(3).')
ux25AdmnDbitInData = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("leaveDbit", 1), ("zeroDbit", 2), ("clearCall", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnDbitInData.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnDbitInData.setDescription('Defines the action to take when a data packet is received with the D-bit set and the local user did not request use of the D-bit. Default=clearCall(3).')
ux25AdmnDbitOutData = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("leaveDbit", 1), ("zeroDbit", 2), ("clearCall", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnDbitOutData.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnDbitOutData.setDescription('Defines the action when the local user send a data packet with the D-bit set, but the remote party has not indicated D-bit support. Default=clearCall(3).')
ux25AdmnSubscriberTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 10, 4), )
if mibBuilder.loadTexts: ux25AdmnSubscriberTable.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnSubscriberTable.setDescription('Defines objects for the parameters of an X.25 interface which the administrator can read and set.')
ux25AdmnSubscriberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 10, 4, 1), ).setIndexNames((0, "UX25-MIB", "ux25AdmnSubscriberIndex"))
if mibBuilder.loadTexts: ux25AdmnSubscriberEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnSubscriberEntry.setDescription('Entries of ux25AdmnSubscriberTable.')
ux25AdmnSubscriberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25AdmnSubscriberIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnSubscriberIndex.setDescription('A unique value for each X.25 subnetwork entity in the chassis. The value of this object matches the value of the index of the corresponding X.25 subnetwork entity entry in the entity table of the chassis MIB.')
ux25AdmnSubCugIaoa = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnSubCugIaoa.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnSubCugIaoa.setDescription('Specifies if this DTE subscribes to Closed User Groups with Incoming or Outgoing access. Default=enable(2).')
ux25AdmnSubCugPref = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnSubCugPref.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnSubCugPref.setDescription('Specifies if this DTE subscribes to a Preferential Closed User Groups. Default=disable(1).')
ux25AdmnSubCugoa = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnSubCugoa.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnSubCugoa.setDescription('Specifies if this DTE subscribes to Closed User Groups with Outgoing access. Default=disable(1).')
ux25AdmnSubCugia = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnSubCugia.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnSubCugia.setDescription('Specifies whether or not this DTE subscribes to Closed User Groups with Incoming Access. Default=disable(1).')
ux25AdmnCugFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("basic", 1), ("extended", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnCugFormat.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnCugFormat.setDescription('The maximum number of Closed User Groups that this DTE subscribes to. This will be one of two ranges: Basic (100 or fewer) or Extended (between 101 and 10000). Default=basic(1).')
ux25AdmnBarInCug = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnBarInCug.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnBarInCug.setDescription('Provides the means to force rejection of any incoming calls carrying the Closed User Group optional facility (which is necessary in some networks, such as DDN. When enabled, such calls will be rejected, otherwise incoming Closed User Group facilities are ignored. Default=disable(1).')
ux25AdmnSubExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnSubExtended.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnSubExtended.setDescription('Subscribe to extended call packets (Window and Packet size negotiation is permitted). Default=enable(2).')
ux25AdmnBarExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnBarExtended.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnBarExtended.setDescription('Treat window and packet size negotiation in incoming packets as a procedure error. Default=disable(1).')
ux25AdmnSubFstSelNoRstrct = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnSubFstSelNoRstrct.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnSubFstSelNoRstrct.setDescription('Subscribe to fast select with no restriction on response. Default=enable(2).')
ux25AdmnSubFstSelWthRstrct = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnSubFstSelWthRstrct.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnSubFstSelWthRstrct.setDescription('Subscribe to fast select with restriction on response. Default=disable(1).')
ux25AdmnAccptRvsChrgng = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnAccptRvsChrgng.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnAccptRvsChrgng.setDescription('Allow incoming calls to specify the reverse charging facility. Default=disable(1).')
ux25AdmnSubLocChargePrevent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnSubLocChargePrevent.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnSubLocChargePrevent.setDescription('Subscribe to local charging prevention. Default=disable(1).')
ux25AdmnSubToaNpiFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnSubToaNpiFormat.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnSubToaNpiFormat.setDescription('Subscribe to TOA/NPI Address Format. Default=disable(1).')
ux25AdmnBarToaNpiFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnBarToaNpiFormat.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnBarToaNpiFormat.setDescription('Bar incoming call set-up and clearing packets which use the TOA/NPI Address Format. Default=disable(1).')
ux25AdmnSubNuiOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnSubNuiOverride.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnSubNuiOverride.setDescription('Subscribe to NUI override. Deafult=disable(1).')
ux25AdmnBarInCall = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnBarInCall.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnBarInCall.setDescription('Bar incoming calls. Default=disable(1).')
ux25AdmnBarOutCall = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnBarOutCall.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnBarOutCall.setDescription('Bar outgoing calls. Default=disable(1).')
ux25AdmnTimerTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 10, 5), )
if mibBuilder.loadTexts: ux25AdmnTimerTable.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnTimerTable.setDescription('Defines objects for the parameters of an X.25 interface which the administrator can read and set.')
ux25AdmnTimerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 10, 5, 1), ).setIndexNames((0, "UX25-MIB", "ux25AdmnTimerIndex"))
if mibBuilder.loadTexts: ux25AdmnTimerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnTimerEntry.setDescription('Entries of ux25AdmnTimerTable.')
ux25AdmnTimerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25AdmnTimerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnTimerIndex.setDescription('A unique value for each X.25 subnetwork entity in the chassis. The value of this object matches the value of the index of the corresponding X.25 subnetwork entity entry in the entity table of the chassis MIB.')
ux25AdmnAckDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnAckDelay.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnAckDelay.setDescription('The maximum number of ticks (0.1 second units) over which a pending acknowledgement is withheld. Default=5.')
ux25AdmnRstrtTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnRstrtTime.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnRstrtTime.setDescription('The number of ticks (0.1 second units) for the DTE timer parameter T20, the Restart Request Response Timer. Default=1800.')
ux25AdmnCallTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnCallTime.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnCallTime.setDescription('The number of ticks (0.1 second units) for the DTE timer parameter T21, the Call Request Response Timer. Default=2000.')
ux25AdmnRstTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnRstTime.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnRstTime.setDescription('The number of ticks (0.1 second units) for the DTE timer parameter T22, the Reset Request Response Timer. Default=1800.')
ux25AdmnClrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnClrTime.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnClrTime.setDescription('The number of ticks (0.1 second units) for the DTE timer parameter T23, the Clear Request Response Timer. Default=1800.')
ux25AdmnWinStatTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnWinStatTime.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnWinStatTime.setDescription('Related, but does not correspond exactly to the DTE Window Status Transmission Timer, T24. Specifies the number of ticks (0.1 second units) for the maximum time that acknowledgments of data received from the remote transmitter will be witheld. At timer expiration, any witheld acknowledgments will be carried by a X.25 level 3 RNR packet. Default=750.')
ux25AdmnWinRotTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnWinRotTime.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnWinRotTime.setDescription('The number of ticks (0.1 second units) for the DTE timer parameter T25, the Window Rotation Timer. Default=1500.')
ux25AdmnIntrptTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnIntrptTime.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnIntrptTime.setDescription('The number of ticks (0.1 second units) for the DTE timer parameter T26, the Interrupt Response Timer. Default=1800.')
ux25AdmnIdleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnIdleValue.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnIdleValue.setDescription('The number of ticks (0.1 second units) during which a link level connection associated with no connections will be maintained. If the link is to a WAN then this value should be zero (infinity). This timer is only used with X.25 on a LAN. Default=0.')
ux25AdmnConnectValue = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnConnectValue.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnConnectValue.setDescription('Specifies the number of ticks (0.1 second units), over which the DTE/DCE resolution phase be completely implemented in order to prevent the unlikely event that two packet level entities cannot resolve their DTE/DCE nature. When this expires, the link connection will be disconnected and all pending connections aborted. Default=2000.')
ux25AdmnRstrtCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnRstrtCnt.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnRstrtCnt.setDescription('The number of ticks (0.1 second units) for the DTE Restart Request Retransmission Count. Default=1.')
ux25AdmnRstCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnRstCnt.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnRstCnt.setDescription('The number of ticks (0.1 second units) for the DTE Reset Request Retransmission Count. Default=1.')
ux25AdmnClrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnClrCnt.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnClrCnt.setDescription('The number of ticks (0.1 second units) for the DTE Clear Request Retransmission Count. Default=1.')
ux25AdmnLocalDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnLocalDelay.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnLocalDelay.setDescription('The transit delay (in 0.1 second units) attributed to internal processing. Default=5.')
ux25AdmnAccessDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ux25AdmnAccessDelay.setStatus('mandatory')
if mibBuilder.loadTexts: ux25AdmnAccessDelay.setDescription('The transit delay (in 0.1 second units) attributed to the effect of the line transmission rate. Default=5.')
ux25OperChannelTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 10, 6), )
if mibBuilder.loadTexts: ux25OperChannelTable.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperChannelTable.setDescription('Defines objects that report the current parameters used by a running interface. These objects are read only.')
ux25OperChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 10, 6, 1), ).setIndexNames((0, "UX25-MIB", "ux25OperChannelIndex"))
if mibBuilder.loadTexts: ux25OperChannelEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperChannelEntry.setDescription('Entries of ux25OperChannelTable.')
ux25OperChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperChannelIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperChannelIndex.setDescription('')
ux25OperNetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("x25Llc", 1), ("x2588", 2), ("x2584", 3), ("x2580", 4), ("pss", 5), ("austpac", 6), ("datapac", 7), ("ddn", 8), ("telenet", 9), ("transpac", 10), ("tymnet", 11), ("datexP", 12), ("ddxP", 13), ("venusP", 14), ("accunet", 15), ("itapac", 16), ("datapak", 17), ("datanet", 18), ("dcs", 19), ("telepac", 20), ("fDatapac", 21), ("finpac", 22), ("pacnet", 23), ("luxpac", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperNetMode.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperNetMode.setDescription('')
ux25OperProtocolVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("x25ver80", 1), ("x25ver84", 2), ("x25ver88", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperProtocolVersion.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperProtocolVersion.setDescription('')
ux25OperInterfaceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dceMode", 1), ("dteMode", 2), ("dxeMode", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperInterfaceMode.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperInterfaceMode.setDescription('')
ux25OperLowestPVCVal = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperLowestPVCVal.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperLowestPVCVal.setDescription('')
ux25OperHighestPVCVal = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperHighestPVCVal.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperHighestPVCVal.setDescription('')
ux25OperChannelLIC = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperChannelLIC.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperChannelLIC.setDescription('')
ux25OperChannelHIC = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperChannelHIC.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperChannelHIC.setDescription('')
ux25OperChannelLTC = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperChannelLTC.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperChannelLTC.setDescription('')
ux25OperChannelHTC = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperChannelHTC.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperChannelHTC.setDescription('')
ux25OperChannelLOC = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperChannelLOC.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperChannelLOC.setDescription('')
ux25OperChannelHOC = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperChannelHOC.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperChannelHOC.setDescription('')
ux25OperClassTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 10, 7), )
if mibBuilder.loadTexts: ux25OperClassTable.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperClassTable.setDescription('Defines objects that report the current parameters used by a running interface. These objects are read only.')
ux25OperClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 10, 7, 1), ).setIndexNames((0, "UX25-MIB", "ux25OperClassIndex"))
if mibBuilder.loadTexts: ux25OperClassEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperClassEntry.setDescription('Entries of ux25OperTable.')
ux25OperClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperClassIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperClassIndex.setDescription('')
ux25OperLocMaxThruPutClass = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("tcReserved0", 1), ("tcReserved1", 2), ("tcReserved2", 3), ("tc75", 4), ("tc150", 5), ("tc300", 6), ("tc600", 7), ("tc1200", 8), ("tc2400", 9), ("tc4800", 10), ("tc9600", 11), ("tc19200", 12), ("tc48000", 13), ("tcReserved13", 14), ("tcReserved14", 15), ("tcReserved15", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperLocMaxThruPutClass.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperLocMaxThruPutClass.setDescription('')
ux25OperRemMaxThruPutClass = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("tcReserved0", 1), ("tcReserved1", 2), ("tcReserved2", 3), ("tc75", 4), ("tc150", 5), ("tc300", 6), ("tc600", 7), ("tc1200", 8), ("tc2400", 9), ("tc4800", 10), ("tc9600", 11), ("tc19200", 12), ("tc48000", 13), ("tcReserved13", 14), ("tcReserved14", 15), ("tcReserved15", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperRemMaxThruPutClass.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperRemMaxThruPutClass.setDescription('')
ux25OperLocDefThruPutClass = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("tcReserved0", 1), ("tcReserved1", 2), ("tcReserved2", 3), ("tc75", 4), ("tc150", 5), ("tc300", 6), ("tc600", 7), ("tc1200", 8), ("tc2400", 9), ("tc4800", 10), ("tc9600", 11), ("tc19200", 12), ("tc48000", 13), ("tcReserved13", 14), ("tcReserved14", 15), ("tcReserved15", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperLocDefThruPutClass.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperLocDefThruPutClass.setDescription('')
ux25OperRemDefThruPutClass = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("tcReserved0", 1), ("tcReserved1", 2), ("tcReserved2", 3), ("tc75", 4), ("tc150", 5), ("tc300", 6), ("tc600", 7), ("tc1200", 8), ("tc2400", 9), ("tc4800", 10), ("tc9600", 11), ("tc19200", 12), ("tc48000", 13), ("tcReserved13", 14), ("tcReserved14", 15), ("tcReserved15", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperRemDefThruPutClass.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperRemDefThruPutClass.setDescription('')
ux25OperLocMinThruPutClass = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("tcReserved0", 1), ("tcReserved1", 2), ("tcReserved2", 3), ("tc75", 4), ("tc150", 5), ("tc300", 6), ("tc600", 7), ("tc1200", 8), ("tc2400", 9), ("tc4800", 10), ("tc9600", 11), ("tc19200", 12), ("tc48000", 13), ("tcReserved13", 14), ("tcReserved14", 15), ("tcReserved15", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperLocMinThruPutClass.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperLocMinThruPutClass.setDescription('')
ux25OperRemMinThruPutClass = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("tcReserved0", 1), ("tcReserved1", 2), ("tcReserved2", 3), ("tc75", 4), ("tc150", 5), ("tc300", 6), ("tc600", 7), ("tc1200", 8), ("tc2400", 9), ("tc4800", 10), ("tc9600", 11), ("tc19200", 12), ("tc48000", 13), ("tcReserved13", 14), ("tcReserved14", 15), ("tcReserved15", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperRemMinThruPutClass.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperRemMinThruPutClass.setDescription('')
ux25OperThclassNegToDef = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperThclassNegToDef.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperThclassNegToDef.setDescription('')
ux25OperThclassType = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noTcType", 1), ("loNibble", 2), ("highNibble", 3), ("bothNibbles", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperThclassType.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperThclassType.setDescription('')
ux25OperThclassWinMap = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 7, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(31, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperThclassWinMap.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperThclassWinMap.setDescription('')
ux25OperThclassPackMap = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 7, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(31, 47))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperThclassPackMap.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperThclassPackMap.setDescription('')
ux25OperPacketTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 10, 8), )
if mibBuilder.loadTexts: ux25OperPacketTable.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperPacketTable.setDescription('Defines objects that report the current parameters used by a running interface. These objects are read only.')
ux25OperPacketEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1), ).setIndexNames((0, "UX25-MIB", "ux25OperPacketIndex"))
if mibBuilder.loadTexts: ux25OperPacketEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperPacketEntry.setDescription('Entries of ux25OperPacketTable.')
ux25OperPacketIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperPacketIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperPacketIndex.setDescription('')
ux25OperPktSequencing = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 32))).clone(namedValues=NamedValues(("pktSeq8", 16), ("pktSeq128", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperPktSequencing.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperPktSequencing.setDescription('')
ux25OperLocMaxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 8, 9))).clone(namedValues=NamedValues(("maxPktSz128", 7), ("maxPktSz256", 8), ("maxPktSz512", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperLocMaxPktSize.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperLocMaxPktSize.setDescription('')
ux25OperRemMaxPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 8, 9))).clone(namedValues=NamedValues(("maxPktSz128", 7), ("maxPktSz256", 8), ("maxPktSz512", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperRemMaxPktSize.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperRemMaxPktSize.setDescription('')
ux25OperLocDefPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("defPktSz16", 4), ("defPktSz32", 5), ("defPktSz64", 6), ("defPktSz128", 7), ("defPktSz256", 8), ("defPktSz512", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperLocDefPktSize.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperLocDefPktSize.setDescription('')
ux25OperRemDefPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("defPktSz16", 4), ("defPktSz32", 5), ("defPktSz64", 6), ("defPktSz128", 7), ("defPktSz256", 8), ("defPktSz512", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperRemDefPktSize.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperRemDefPktSize.setDescription('')
ux25OperLocMaxWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperLocMaxWinSize.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperLocMaxWinSize.setDescription('')
ux25OperRemMaxWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperRemMaxWinSize.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperRemMaxWinSize.setDescription('')
ux25OperLocDefWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperLocDefWinSize.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperLocDefWinSize.setDescription('')
ux25OperRemDefWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperRemDefWinSize.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperRemDefWinSize.setDescription('')
ux25OperMaxNSDULimit = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperMaxNSDULimit.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperMaxNSDULimit.setDescription('')
ux25OperAccNoDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperAccNoDiagnostic.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperAccNoDiagnostic.setDescription('')
ux25OperUseDiagnosticPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperUseDiagnosticPacket.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperUseDiagnosticPacket.setDescription('')
ux25OperItutClearLen = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperItutClearLen.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperItutClearLen.setDescription('')
ux25OperBarDiagnosticPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperBarDiagnosticPacket.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperBarDiagnosticPacket.setDescription('')
ux25OperDiscNzDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperDiscNzDiagnostic.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperDiscNzDiagnostic.setDescription('')
ux25OperAcceptHexAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperAcceptHexAdd.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperAcceptHexAdd.setDescription('')
ux25OperBarNonPrivilegeListen = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperBarNonPrivilegeListen.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperBarNonPrivilegeListen.setDescription('')
ux25OperIntlAddrRecognition = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notDistinguished", 1), ("examineDnic", 2), ("prefix1", 3), ("prefix0", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperIntlAddrRecognition.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperIntlAddrRecognition.setDescription('')
ux25OperDnic = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperDnic.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperDnic.setDescription('')
ux25OperIntlPrioritized = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperIntlPrioritized.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperIntlPrioritized.setDescription('')
ux25OperPrtyEncodeCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("x2588", 1), ("datapacPriority76", 2), ("datapacTraffic80", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperPrtyEncodeCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperPrtyEncodeCtrl.setDescription('')
ux25OperPrtyPktForcedVal = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("prioPktSz0", 1), ("prioPktSz4", 5), ("prioPktSz5", 6), ("prioPktSz6", 7), ("prioPktSz7", 8), ("prioPktSz8", 9), ("prioPktSz9", 10), ("prioPktSz10", 11), ("prioPktSz11", 12), ("prioPktSz12", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperPrtyPktForcedVal.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperPrtyPktForcedVal.setDescription('')
ux25OperSrcAddrCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noSaCntrl", 1), ("omitDte", 2), ("useLocal", 3), ("forceLocal", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperSrcAddrCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperSrcAddrCtrl.setDescription('')
ux25OperDbitInAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("leaveDbit", 1), ("zeroDbit", 2), ("clearCall", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperDbitInAccept.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperDbitInAccept.setDescription('')
ux25OperDbitOutAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("leaveDbit", 1), ("zeroDbit", 2), ("clearCall", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperDbitOutAccept.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperDbitOutAccept.setDescription('')
ux25OperDbitInData = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("leaveDbit", 1), ("zeroDbit", 2), ("clearCall", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperDbitInData.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperDbitInData.setDescription('')
ux25OperDbitOutData = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 8, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("leaveDbit", 1), ("zeroDbit", 2), ("clearCall", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperDbitOutData.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperDbitOutData.setDescription('')
ux25OperSubscriberTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 10, 9), )
if mibBuilder.loadTexts: ux25OperSubscriberTable.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperSubscriberTable.setDescription('Defines objects that report the current parameters used by a running interface. These objects are read only.')
ux25OperSubscriberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 10, 9, 1), ).setIndexNames((0, "UX25-MIB", "ux25OperSubscriberIndex"))
if mibBuilder.loadTexts: ux25OperSubscriberEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperSubscriberEntry.setDescription('Entries of ux25OperSubscriberTable.')
ux25OperSubscriberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperSubscriberIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperSubscriberIndex.setDescription('')
ux25OperSubCugIaoa = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperSubCugIaoa.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperSubCugIaoa.setDescription('')
ux25OperSubCugPref = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperSubCugPref.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperSubCugPref.setDescription('')
ux25OperSubCugoa = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperSubCugoa.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperSubCugoa.setDescription('')
ux25OperSubCugia = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperSubCugia.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperSubCugia.setDescription('')
ux25OperCugFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("basic", 1), ("extended", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperCugFormat.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperCugFormat.setDescription('')
ux25OperBarInCug = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperBarInCug.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperBarInCug.setDescription('')
ux25OperSubExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperSubExtended.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperSubExtended.setDescription('')
ux25OperBarExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperBarExtended.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperBarExtended.setDescription('')
ux25OperSubFstSelNoRstrct = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperSubFstSelNoRstrct.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperSubFstSelNoRstrct.setDescription('')
ux25OperSubFstSelWthRstrct = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 9, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperSubFstSelWthRstrct.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperSubFstSelWthRstrct.setDescription('')
ux25OperAccptRvsChrgng = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 9, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperAccptRvsChrgng.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperAccptRvsChrgng.setDescription('')
ux25OperSubLocChargePrevent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 9, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperSubLocChargePrevent.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperSubLocChargePrevent.setDescription('')
ux25OperSubToaNpiFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 9, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperSubToaNpiFormat.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperSubToaNpiFormat.setDescription('')
ux25OperBarToaNpiFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 9, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperBarToaNpiFormat.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperBarToaNpiFormat.setDescription('')
ux25OperSubNuiOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 9, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperSubNuiOverride.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperSubNuiOverride.setDescription('')
ux25OperBarInCall = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 9, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperBarInCall.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperBarInCall.setDescription('')
ux25OperBarOutCall = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 9, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperBarOutCall.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperBarOutCall.setDescription('')
ux25OperTimerTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 10, 10), )
if mibBuilder.loadTexts: ux25OperTimerTable.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperTimerTable.setDescription('Defines objects that report the current parameters used by a running interface. These objects are read only.')
ux25OperTimerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 10, 10, 1), ).setIndexNames((0, "UX25-MIB", "ux25OperTimerIndex"))
if mibBuilder.loadTexts: ux25OperTimerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperTimerEntry.setDescription('Entries of ux25OperTimerTable.')
ux25OperTimerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperTimerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperTimerIndex.setDescription('')
ux25OperAckDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperAckDelay.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperAckDelay.setDescription('')
ux25OperRstrtTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperRstrtTime.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperRstrtTime.setDescription('')
ux25OperCallTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperCallTime.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperCallTime.setDescription('')
ux25OperRstTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperRstTime.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperRstTime.setDescription('')
ux25OperClrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperClrTime.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperClrTime.setDescription('')
ux25OperWinStatTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperWinStatTime.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperWinStatTime.setDescription('')
ux25OperWinRotTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperWinRotTime.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperWinRotTime.setDescription('')
ux25OperIntrptTime = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperIntrptTime.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperIntrptTime.setDescription('')
ux25OperIdleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 10, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperIdleValue.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperIdleValue.setDescription('')
ux25OperConnectValue = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 10, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperConnectValue.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperConnectValue.setDescription('')
ux25OperRstrtCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 10, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperRstrtCnt.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperRstrtCnt.setDescription('')
ux25OperRstCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 10, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperRstCnt.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperRstCnt.setDescription('')
ux25OperClrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 10, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperClrCnt.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperClrCnt.setDescription('')
ux25OperLocalDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 10, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperLocalDelay.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperLocalDelay.setDescription('')
ux25OperAccessDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 10, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25OperAccessDelay.setStatus('mandatory')
if mibBuilder.loadTexts: ux25OperAccessDelay.setDescription('')
ux25StatTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 10, 11), )
if mibBuilder.loadTexts: ux25StatTable.setStatus('mandatory')
if mibBuilder.loadTexts: ux25StatTable.setDescription('Defines objects that report operational statistics for an X.25 interface.')
ux25StatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 10, 11, 1), ).setIndexNames((0, "UX25-MIB", "ux25StatIndex"))
if mibBuilder.loadTexts: ux25StatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ux25StatEntry.setDescription('Entries of ux25StatTable.')
ux25StatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25StatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ux25StatIndex.setDescription('A unique value for each X.25 subnetwork entity in the chassis. The value of this object matches the value of the index of the corresponding X.25 subnetwork entity entry in the entity table of the chassis MIB.')
ux25StatCallsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25StatCallsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: ux25StatCallsRcvd.setDescription('Number of incoming calls.')
ux25StatCallsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25StatCallsSent.setStatus('mandatory')
if mibBuilder.loadTexts: ux25StatCallsSent.setDescription('Number of outgoing calls.')
ux25StatCallsRcvdEstab = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25StatCallsRcvdEstab.setStatus('mandatory')
if mibBuilder.loadTexts: ux25StatCallsRcvdEstab.setDescription('Number of incoming calls established.')
ux25StatCallsSentEstab = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25StatCallsSentEstab.setStatus('mandatory')
if mibBuilder.loadTexts: ux25StatCallsSentEstab.setDescription('Number of outgoing calls established.')
ux25StatDataPktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25StatDataPktsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: ux25StatDataPktsRcvd.setDescription('Number of data packets received.')
ux25StatDataPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25StatDataPktsSent.setStatus('mandatory')
if mibBuilder.loadTexts: ux25StatDataPktsSent.setDescription('Number of data packets sent.')
ux25StatRestartsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 11, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25StatRestartsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: ux25StatRestartsRcvd.setDescription('Number of restarts received.')
ux25StatRestartsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 11, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25StatRestartsSent.setStatus('mandatory')
if mibBuilder.loadTexts: ux25StatRestartsSent.setDescription('Number of restarts sent.')
ux25StatRcvrNotRdyRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 11, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25StatRcvrNotRdyRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: ux25StatRcvrNotRdyRcvd.setDescription('Number of receiver not ready received.')
ux25StatRcvrNotRdySent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 11, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25StatRcvrNotRdySent.setStatus('mandatory')
if mibBuilder.loadTexts: ux25StatRcvrNotRdySent.setDescription('Number of receiver not ready sent.')
ux25StatRcvrRdyRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 11, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25StatRcvrRdyRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: ux25StatRcvrRdyRcvd.setDescription('Number of receiver ready received.')
ux25StatRcvrRdySent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 11, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25StatRcvrRdySent.setStatus('mandatory')
if mibBuilder.loadTexts: ux25StatRcvrRdySent.setDescription('Number of receiver ready sent.')
ux25StatResetsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 11, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25StatResetsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: ux25StatResetsRcvd.setDescription('Number of resets received.')
ux25StatResetsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 11, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25StatResetsSent.setStatus('mandatory')
if mibBuilder.loadTexts: ux25StatResetsSent.setDescription('Number of resets sent.')
ux25StatDiagPktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 11, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25StatDiagPktsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: ux25StatDiagPktsRcvd.setDescription('Number of diagnostic packets received.')
ux25StatDiagPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 11, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25StatDiagPktsSent.setStatus('mandatory')
if mibBuilder.loadTexts: ux25StatDiagPktsSent.setDescription('Number of diagnostic packets sent.')
ux25StatIntrptPktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 11, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25StatIntrptPktsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: ux25StatIntrptPktsRcvd.setDescription('Number of interrupt packets received.')
ux25StatIntrptPktsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 11, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25StatIntrptPktsSent.setStatus('mandatory')
if mibBuilder.loadTexts: ux25StatIntrptPktsSent.setDescription('Number of interrupt packets sent.')
ux25StatPVCsInDatTrnsfrState = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 11, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25StatPVCsInDatTrnsfrState.setStatus('mandatory')
if mibBuilder.loadTexts: ux25StatPVCsInDatTrnsfrState.setDescription('Number of PVCs in Data Transfer State.')
ux25StatSVCsInDatTrnsfrState = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 10, 11, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ux25StatSVCsInDatTrnsfrState.setStatus('mandatory')
if mibBuilder.loadTexts: ux25StatSVCsInDatTrnsfrState.setDescription('Number of SVCs in Data Transfer State.')
mibBuilder.exportSymbols("UX25-MIB", ux25AdmnClassTable=ux25AdmnClassTable, ux25AdmnPacketTable=ux25AdmnPacketTable, ux25AdmnPacketEntry=ux25AdmnPacketEntry, ux25AdmnChanneIndex=ux25AdmnChanneIndex, ux25OperPacketEntry=ux25OperPacketEntry, ux25AdmnBarInCall=ux25AdmnBarInCall, ux25AdmnSubExtended=ux25AdmnSubExtended, ux25OperPacketIndex=ux25OperPacketIndex, ux25OperBarToaNpiFormat=ux25OperBarToaNpiFormat, ux25StatEntry=ux25StatEntry, ux25AdmnHighestPVCVal=ux25AdmnHighestPVCVal, ux25OperSubCugia=ux25OperSubCugia, ux25AdmnSubNuiOverride=ux25AdmnSubNuiOverride, ux25AdmnLowestPVCVal=ux25AdmnLowestPVCVal, ux25OperChannelLIC=ux25OperChannelLIC, ux25AdmnAckDelay=ux25AdmnAckDelay, ux25OperThclassNegToDef=ux25OperThclassNegToDef, ux25OperBarOutCall=ux25OperBarOutCall, ux25AdmnChannelHIC=ux25AdmnChannelHIC, ux25StatResetsSent=ux25StatResetsSent, ux25AdmnUseDiagnosticPacket=ux25AdmnUseDiagnosticPacket, ux25OperRstrtCnt=ux25OperRstrtCnt, ux25StatCallsRcvdEstab=ux25StatCallsRcvdEstab, ux25OperSubscriberIndex=ux25OperSubscriberIndex, ux25AdmnLocalDelay=ux25AdmnLocalDelay, ux25OperCugFormat=ux25OperCugFormat, ux25OperLocDefPktSize=ux25OperLocDefPktSize, ux25AdmnPrtyEncodeCtrl=ux25AdmnPrtyEncodeCtrl, ux25OperDbitOutAccept=ux25OperDbitOutAccept, ux25OperNetMode=ux25OperNetMode, ux25OperClrTime=ux25OperClrTime, ux25AdmnChannelEntry=ux25AdmnChannelEntry, ux25OperTimerIndex=ux25OperTimerIndex, ux25AdmnRstTime=ux25AdmnRstTime, ux25AdmnIntlAddrRecognition=ux25AdmnIntlAddrRecognition, ux25AdmnBarNonPrivilegeListen=ux25AdmnBarNonPrivilegeListen, ux25OperLocMaxPktSize=ux25OperLocMaxPktSize, ux25StatPVCsInDatTrnsfrState=ux25StatPVCsInDatTrnsfrState, ux25AdmnItutClearLen=ux25AdmnItutClearLen, ux25OperChannelTable=ux25OperChannelTable, ux25AdmnSubLocChargePrevent=ux25AdmnSubLocChargePrevent, ux25OperLowestPVCVal=ux25OperLowestPVCVal, ux25StatTable=ux25StatTable, ux25OperRemMaxPktSize=ux25OperRemMaxPktSize, ux25OperSubNuiOverride=ux25OperSubNuiOverride, ux25AdmnLocMaxPktSize=ux25AdmnLocMaxPktSize, usr=usr, ux25AdmnRemMaxThruPutClass=ux25AdmnRemMaxThruPutClass, ux25OperChannelLTC=ux25OperChannelLTC, ux25AdmnBarInCug=ux25AdmnBarInCug, ux25OperClassIndex=ux25OperClassIndex, ux25OperAccNoDiagnostic=ux25OperAccNoDiagnostic, ux25AdmnWinRotTime=ux25AdmnWinRotTime, ux25OperItutClearLen=ux25OperItutClearLen, ux25OperLocMinThruPutClass=ux25OperLocMinThruPutClass, ux25OperDbitInData=ux25OperDbitInData, ux25AdmnTimerEntry=ux25AdmnTimerEntry, ux25AdmnDbitOutData=ux25AdmnDbitOutData, ux25StatSVCsInDatTrnsfrState=ux25StatSVCsInDatTrnsfrState, ux25OperIntlAddrRecognition=ux25OperIntlAddrRecognition, ux25AdmnDiscNzDiagnostic=ux25AdmnDiscNzDiagnostic, ux25OperLocalDelay=ux25OperLocalDelay, ux25OperPktSequencing=ux25OperPktSequencing, ux25OperRemDefPktSize=ux25OperRemDefPktSize, ux25OperRstrtTime=ux25OperRstrtTime, ux25StatRestartsRcvd=ux25StatRestartsRcvd, ux25AdmnAcceptHexAdd=ux25AdmnAcceptHexAdd, ux25StatDiagPktsSent=ux25StatDiagPktsSent, ux25AdmnChannelLTC=ux25AdmnChannelLTC, ux25OperPrtyPktForcedVal=ux25OperPrtyPktForcedVal, ux25OperThclassType=ux25OperThclassType, ux25OperRstCnt=ux25OperRstCnt, ux25AdmnSubCugIaoa=ux25AdmnSubCugIaoa, ux25AdmnChannelTable=ux25AdmnChannelTable, ux25AdmnRemMinThruPutClass=ux25AdmnRemMinThruPutClass, ux25AdmnChannelLOC=ux25AdmnChannelLOC, ux25AdmnBarDiagnosticPacket=ux25AdmnBarDiagnosticPacket, ux25OperIntrptTime=ux25OperIntrptTime, ux25AdmnSubCugPref=ux25AdmnSubCugPref, ux25OperDiscNzDiagnostic=ux25OperDiscNzDiagnostic, ux25AdmnConnectValue=ux25AdmnConnectValue, ux25OperChannelHOC=ux25OperChannelHOC, ux25AdmnSubscriberEntry=ux25AdmnSubscriberEntry, ux25OperLocDefWinSize=ux25OperLocDefWinSize, ux25AdmnRemDefWinSize=ux25AdmnRemDefWinSize, ux25OperThclassPackMap=ux25OperThclassPackMap, ux25OperSubCugIaoa=ux25OperSubCugIaoa, ux25OperSubLocChargePrevent=ux25OperSubLocChargePrevent, ux25OperRemDefThruPutClass=ux25OperRemDefThruPutClass, ux25AdmnProtocolVersion=ux25AdmnProtocolVersion, ux25OperRstTime=ux25OperRstTime, ux25AdmnNetMode=ux25AdmnNetMode, ux25AdmnClassIndex=ux25AdmnClassIndex, ux25OperSrcAddrCtrl=ux25OperSrcAddrCtrl, ux25AdmnIntlPrioritized=ux25AdmnIntlPrioritized, ux25OperBarInCug=ux25OperBarInCug, ux25AdmnRemMaxWinSize=ux25AdmnRemMaxWinSize, ux25StatRcvrNotRdySent=ux25StatRcvrNotRdySent, ux25AdmnDbitOutAccept=ux25AdmnDbitOutAccept, ux25OperAccessDelay=ux25OperAccessDelay, ux25AdmnRstrtCnt=ux25AdmnRstrtCnt, ux25StatIntrptPktsSent=ux25StatIntrptPktsSent, ux25StatDataPktsSent=ux25StatDataPktsSent, ux25AdmnTimerTable=ux25AdmnTimerTable, ux25OperTimerTable=ux25OperTimerTable, ux25AdmnThclassType=ux25AdmnThclassType, ux25AdmnMaxNSDULimit=ux25AdmnMaxNSDULimit, ux25OperMaxNSDULimit=ux25OperMaxNSDULimit, ux25OperBarDiagnosticPacket=ux25OperBarDiagnosticPacket, ux25OperWinStatTime=ux25OperWinStatTime, ux25AdmnChannelHOC=ux25AdmnChannelHOC, ux25StatResetsRcvd=ux25StatResetsRcvd, ux25StatRestartsSent=ux25StatRestartsSent, ux25StatCallsRcvd=ux25StatCallsRcvd, ux25OperBarExtended=ux25OperBarExtended, ux25AdmnLocDefWinSize=ux25AdmnLocDefWinSize, ux25OperAcceptHexAdd=ux25OperAcceptHexAdd, ux25OperSubToaNpiFormat=ux25OperSubToaNpiFormat, ux25OperDbitInAccept=ux25OperDbitInAccept, ux25OperSubCugPref=ux25OperSubCugPref, ux25AdmnDbitInAccept=ux25AdmnDbitInAccept, ux25OperConnectValue=ux25OperConnectValue, ux25StatDiagPktsRcvd=ux25StatDiagPktsRcvd, ux25OperIdleValue=ux25OperIdleValue, ux25OperSubscriberTable=ux25OperSubscriberTable, ux25StatRcvrRdyRcvd=ux25StatRcvrRdyRcvd, ux25OperClassTable=ux25OperClassTable, ux25OperThclassWinMap=ux25OperThclassWinMap, ux25OperDnic=ux25OperDnic, ux25AdmnSubscriberIndex=ux25AdmnSubscriberIndex, ux25AdmnIdleValue=ux25AdmnIdleValue, ux25AdmnClassEntry=ux25AdmnClassEntry, ux25OperWinRotTime=ux25OperWinRotTime, ux25AdmnTimerIndex=ux25AdmnTimerIndex, ux25AdmnClrCnt=ux25AdmnClrCnt, ux25AdmnLocMaxThruPutClass=ux25AdmnLocMaxThruPutClass, ux25StatIntrptPktsRcvd=ux25StatIntrptPktsRcvd, ux25AdmnRstrtTime=ux25AdmnRstrtTime, ux25AdmnSubToaNpiFormat=ux25AdmnSubToaNpiFormat, ux25OperChannelIndex=ux25OperChannelIndex, ux25AdmnSubFstSelNoRstrct=ux25AdmnSubFstSelNoRstrct, ux25OperSubCugoa=ux25OperSubCugoa, ux25OperAccptRvsChrgng=ux25OperAccptRvsChrgng, ux25StatRcvrRdySent=ux25StatRcvrRdySent, ux25OperHighestPVCVal=ux25OperHighestPVCVal, ux25AdmnAccNoDiagnostic=ux25AdmnAccNoDiagnostic, ux25OperPacketTable=ux25OperPacketTable, ux25AdmnInterfaceMode=ux25AdmnInterfaceMode, ux25OperUseDiagnosticPacket=ux25OperUseDiagnosticPacket, ux25AdmnWinStatTime=ux25AdmnWinStatTime, ux25StatDataPktsRcvd=ux25StatDataPktsRcvd, ux25OperChannelLOC=ux25OperChannelLOC, ux25AdmnDbitInData=ux25AdmnDbitInData, ux25StatCallsSent=ux25StatCallsSent, ux25AdmnLocMinThruPutClass=ux25AdmnLocMinThruPutClass, ux25AdmnPktSequencing=ux25AdmnPktSequencing, ux25OperBarNonPrivilegeListen=ux25OperBarNonPrivilegeListen, ux25OperInterfaceMode=ux25OperInterfaceMode, ux25AdmnIntrptTime=ux25AdmnIntrptTime, ux25AdmnBarOutCall=ux25AdmnBarOutCall, ux25OperProtocolVersion=ux25OperProtocolVersion, ux25OperBarInCall=ux25OperBarInCall, ux25AdmnBarExtended=ux25AdmnBarExtended, ux25OperIntlPrioritized=ux25OperIntlPrioritized, ux25AdmnPacketIndex=ux25AdmnPacketIndex, ux25OperDbitOutData=ux25OperDbitOutData, ux25AdmnRemDefPktSize=ux25AdmnRemDefPktSize, ux25OperSubscriberEntry=ux25OperSubscriberEntry, ux25OperClassEntry=ux25OperClassEntry, ux25OperPrtyEncodeCtrl=ux25OperPrtyEncodeCtrl, ux25OperRemMaxWinSize=ux25OperRemMaxWinSize, ux25AdmnCallTime=ux25AdmnCallTime, ux25AdmnPrtyPktForcedVal=ux25AdmnPrtyPktForcedVal, ux25AdmnAccptRvsChrgng=ux25AdmnAccptRvsChrgng, ux25OperRemMinThruPutClass=ux25OperRemMinThruPutClass, ux25OperClrCnt=ux25OperClrCnt, ux25AdmnSrcAddrCtrl=ux25AdmnSrcAddrCtrl, ux25StatRcvrNotRdyRcvd=ux25StatRcvrNotRdyRcvd, ux25OperSubExtended=ux25OperSubExtended, ux25OperSubFstSelNoRstrct=ux25OperSubFstSelNoRstrct, ux25OperSubFstSelWthRstrct=ux25OperSubFstSelWthRstrct, ux25OperChannelHTC=ux25OperChannelHTC, ux25OperCallTime=ux25OperCallTime, ux25AdmnBarToaNpiFormat=ux25AdmnBarToaNpiFormat, ux25AdmnLocMaxWinSize=ux25AdmnLocMaxWinSize, ux25AdmnLocDefThruPutClass=ux25AdmnLocDefThruPutClass, ux25OperLocMaxWinSize=ux25OperLocMaxWinSize, ux25OperRemDefWinSize=ux25OperRemDefWinSize, ux25AdmnChannelHTC=ux25AdmnChannelHTC, ux25AdmnRemMaxPktSize=ux25AdmnRemMaxPktSize, ux25AdmnSubFstSelWthRstrct=ux25AdmnSubFstSelWthRstrct, ux25AdmnClrTime=ux25AdmnClrTime, ux25OperLocDefThruPutClass=ux25OperLocDefThruPutClass, ux25OperChannelEntry=ux25OperChannelEntry, ux25=ux25, ux25OperChannelHIC=ux25OperChannelHIC, ux25OperRemMaxThruPutClass=ux25OperRemMaxThruPutClass, ux25AdmnRemDefThruPutClass=ux25AdmnRemDefThruPutClass, ux25AdmnThclassNegToDef=ux25AdmnThclassNegToDef, ux25AdmnThclassWinMap=ux25AdmnThclassWinMap, ux25AdmnSubCugoa=ux25AdmnSubCugoa, ux25AdmnDnic=ux25AdmnDnic, ux25AdmnSubCugia=ux25AdmnSubCugia, ux25AdmnCugFormat=ux25AdmnCugFormat, nas=nas, ux25AdmnChannelLIC=ux25AdmnChannelLIC, ux25AdmnLocDefPktSize=ux25AdmnLocDefPktSize, ux25AdmnAccessDelay=ux25AdmnAccessDelay, ux25OperAckDelay=ux25OperAckDelay, ux25StatCallsSentEstab=ux25StatCallsSentEstab, ux25AdmnSubscriberTable=ux25AdmnSubscriberTable, ux25AdmnRstCnt=ux25AdmnRstCnt, ux25AdmnThclassPackMap=ux25AdmnThclassPackMap, ux25OperLocMaxThruPutClass=ux25OperLocMaxThruPutClass, ux25StatIndex=ux25StatIndex, ux25OperTimerEntry=ux25OperTimerEntry)
