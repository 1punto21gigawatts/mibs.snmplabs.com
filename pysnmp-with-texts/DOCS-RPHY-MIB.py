#
# PySNMP MIB module DOCS-RPHY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DOCS-RPHY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:53:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
clabProjDocsis, = mibBuilder.importSymbols("CLAB-DEF-MIB", "clabProjDocsis")
DocsX509ASN1DEREncodedCertificate, = mibBuilder.importSymbols("DOCS-IETF-BPI2-MIB", "DocsX509ASN1DEREncodedCertificate")
IfDirection, = mibBuilder.importSymbols("DOCS-IF3-MIB", "IfDirection")
PhysicalIndexOrZero, PhysicalIndex = mibBuilder.importSymbols("ENTITY-MIB", "PhysicalIndexOrZero", "PhysicalIndex")
EntitySensorPrecision, EntitySensorDataType, EntitySensorDataScale, EntitySensorStatus, EntitySensorValue = mibBuilder.importSymbols("ENTITY-SENSOR-MIB", "EntitySensorPrecision", "EntitySensorDataType", "EntitySensorDataScale", "EntitySensorStatus", "EntitySensorValue")
IANAPhysicalClass, = mibBuilder.importSymbols("IANA-ENTITY-MIB", "IANAPhysicalClass")
IANAifType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
InterfaceIndexOrZero, InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex", "ifIndex")
InetAddressType, InetVersion, InetAddressPrefixLength, InetAddress, InetPortNumber = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetVersion", "InetAddressPrefixLength", "InetAddress", "InetPortNumber")
IpAddressStatusTC, IpAddressOriginTC, Ipv6AddressIfIdentifierTC = mibBuilder.importSymbols("IP-MIB", "IpAddressStatusTC", "IpAddressOriginTC", "Ipv6AddressIfIdentifierTC")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Bits, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, TimeTicks, Counter32, NotificationType, Integer32, Counter64, MibIdentifier, IpAddress, ModuleIdentity, iso, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "TimeTicks", "Counter32", "NotificationType", "Integer32", "Counter64", "MibIdentifier", "IpAddress", "ModuleIdentity", "iso", "Unsigned32")
PhysAddress, DisplayString, MacAddress, TimeStamp, TextualConvention, TruthValue, DateAndTime, AutonomousType = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "DisplayString", "MacAddress", "TimeStamp", "TextualConvention", "TruthValue", "DateAndTime", "AutonomousType")
UUIDorZero, = mibBuilder.importSymbols("UUID-TC-MIB", "UUIDorZero")
docsRphyMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30))
docsRphyMib.setRevisions(('2017-04-13 00:00', '2016-12-15 00:00', '2016-09-29 00:00', '2016-04-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: docsRphyMib.setRevisionsDescriptions(('Revised Version includes ECN DOCS-RPHY-MIB-N-17.1711-4.', 'Revised Version includes ECN DOCS-RPHY-MIB-N-16.1680-2.', 'Revised Version includes ECN DOCS-RPHY-MIB-N-16.1561-4.', 'Initial version, created by R-OSSI-N-16.1461-3.',))
if mibBuilder.loadTexts: docsRphyMib.setLastUpdated('201704130000Z')
if mibBuilder.loadTexts: docsRphyMib.setOrganization('Cable Television Laboratories, Inc')
if mibBuilder.loadTexts: docsRphyMib.setContactInfo(' Postal: Cable Television Laboratories, Inc. 400 Centennial Parkway Louisville, Colorado 80027-1266 U.S.A. Phone: +1 303-661-9100 Fax: +1 303-661-9199 E-mail: mibs@cablelabs.com')
if mibBuilder.loadTexts: docsRphyMib.setDescription('This MIB module contains the management objects for the Remote PHY Device (RPD) management. Copyright 2016-2017 Cable Television Laboratories, Inc. All rights reserved.')
class RphyChannelType(TextualConvention, Integer32):
    reference = 'DOCSIS DCA MHAv2 Remote PHY Specification CM-SP-R-PHY-I04-160512, RfChannelType TLV Section.'
    description = 'This data type indicates the type of RPHY channel.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("other", 0), ("dsScQam", 1), ("dsOfdm", 2), ("ndf", 3), ("scte551Fwd", 4), ("usAtdma", 5), ("usOfdma", 6), ("reserved", 7), ("ndr", 8), ("scte551Ret", 9))

class RphyEventSeverityType(TextualConvention, Integer32):
    reference = 'DOCSIS DCA MHAv2 Remote PHY OSS Interface Specification CM-SP-R-OSSI-I04-160923, Section 9.'
    description = 'This data type indicates the severity level of an RPD event.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("information", 6), ("debug", 7))

docsRphyNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 0))
docsRphyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1))
docsRphyConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 2))
docsRphyRpdDevMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1))
docsRphyRpdIfMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2))
docsRphyRpdIpMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3))
docsRphyCcapMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 4))
docsRphyCcapSecMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 5))
docsRphyRpdIpIcmpMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 9))
docsRphyCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 2, 1))
docsRphyGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 2, 2))
docsRphyRpdDevInfoTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 1), )
if mibBuilder.loadTexts: docsRphyRpdDevInfoTable.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevInfoTable.setDescription('This table identifies the RPD for which the details and statistics are being provided.')
docsRphyRpdDevInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 1, 1), ).setIndexNames((0, "DOCS-RPHY-MIB", "docsRphyRpdDevInfoUniqueId"))
if mibBuilder.loadTexts: docsRphyRpdDevInfoEntry.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevInfoEntry.setDescription('The conceptual row of docsRphyRpdDevInfoTable.')
docsRphyRpdDevInfoUniqueId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: docsRphyRpdDevInfoUniqueId.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevInfoUniqueId.setDescription('This attribute specifies a globally unique 6-byte identifier for the RPD. By convention, an RPD SHOULD use the MAC address of the lowest numbered Ethernet port facing the CIN.')
docsRphyRpdDevInfoSysUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 1, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevInfoSysUpTime.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevInfoSysUpTime.setDescription('This attribute is the time (in hundredths of a second) since the RPD was last re-initialized. This value is reported by the RPD.')
docsRphyRpdDevInfoNumCrashFilesAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevInfoNumCrashFilesAvail.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevInfoNumCrashFilesAvail.setDescription('This attribute provides the number of crash files.')
docsRphyRpdDevIdentificationTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 2), )
if mibBuilder.loadTexts: docsRphyRpdDevIdentificationTable.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevIdentificationTable.setDescription('This table provides data that uniquely identifies the RPD.')
docsRphyRpdDevIdentificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 2, 1), ).setIndexNames((0, "DOCS-RPHY-MIB", "docsRphyRpdDevInfoUniqueId"))
if mibBuilder.loadTexts: docsRphyRpdDevIdentificationEntry.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevIdentificationEntry.setDescription('The conceptual row of docsRphyRpdDevIdentificationTable.')
docsRphyRpdDevIdVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 2, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevIdVendorName.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevIdVendorName.setDescription('This attribute identifies the RPD manufacturer. The format is vendor proprietary.')
docsRphyRpdDevIdVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevIdVendorId.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevIdVendorId.setDescription('This attribute is the IANA-assigned SMI Network Management Private Enterprise Code of the vendor, as specified in RFC 5612.')
docsRphyRpdDevIdModelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 2, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevIdModelNum.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevIdModelNum.setDescription('This attribute is the model name and number used by the vendor to identify the RPD. The format is vendor proprietary.')
docsRphyRpdDevIdSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 2, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevIdSerialNum.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevIdSerialNum.setDescription('This attribute is the serial number of the RPD. The format is vendor proprietary.')
docsRphyRpdDevIdDeviceAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 2, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevIdDeviceAlias.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevIdDeviceAlias.setDescription("This attribute reports the device name assigned by the operator and represents a 'handle' for the RPD.")
docsRphyRpdDevIdDeviceDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 2, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevIdDeviceDescr.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevIdDeviceDescr.setDescription('This attribute is a short text description of the RPD provided by the RPD manufacturer.')
docsRphyRpdDevIdHwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 2, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevIdHwRev.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevIdHwRev.setDescription('This attribute is the revision number of the hardware of the RPD. The format is vendor proprietary.')
docsRphyRpdDevIdCurrSwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 2, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevIdCurrSwVer.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevIdCurrSwVer.setDescription('This attribute is the version number of the software currently running on the RPD. The format is vendor proprietary.')
docsRphyRpdDevIdBootRomVer = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 2, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevIdBootRomVer.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevIdBootRomVer.setDescription('This attribute reports the version number of the boot ROM currently installed on the RPD. The format is vendor proprietary.')
docsRphyRpdDevIdUsBurstRcvrVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevIdUsBurstRcvrVendorId.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevIdUsBurstRcvrVendorId.setDescription("This attribute reports the IANA-assigned SMI Network Management Private Enterprise Code of the RPD's US burst receiver manufacturer, as specified in RFC 5612.")
docsRphyRpdDevIdUsBurstRcvrModelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 2, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(3, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevIdUsBurstRcvrModelNum.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevIdUsBurstRcvrModelNum.setDescription("This attribute reports the model number used by the vendor to identify the RPD's US burst receiver. The format is vendor proprietary.")
docsRphyRpdDevIdUsBurstRcvrDrivVer = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 2, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(3, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevIdUsBurstRcvrDrivVer.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevIdUsBurstRcvrDrivVer.setDescription("This attribute reports the driver version of the RPD's US burst receiver. The format is vendor proprietary.")
docsRphyRpdDevIdUsBurstRcvrSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 2, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(5, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevIdUsBurstRcvrSerialNum.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevIdUsBurstRcvrSerialNum.setDescription("This attribute reports the serial number of the RPD's US burst receiver. The format is vendor proprietary.")
docsRphyRpdDevIdRcpProtocolVer = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 2, 1, 14), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(3, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevIdRcpProtocolVer.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevIdRcpProtocolVer.setDescription('This attribute reports the version of the RCP protocol supported by the RPD.')
docsRphyRpdDevIdRcpSchemaVer = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 2, 1, 15), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(5, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevIdRcpSchemaVer.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevIdRcpSchemaVer.setDescription('This attribute reports the version of the RCP schema supported by the RPD.')
docsRphyRpdDevLocationTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 3), )
if mibBuilder.loadTexts: docsRphyRpdDevLocationTable.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevLocationTable.setDescription('This table provides location details for the RPD. The values are populated via a management interface or other automatic mechanisms (e.g. GPS).')
docsRphyRpdDevLocationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 3, 1), ).setIndexNames((0, "DOCS-RPHY-MIB", "docsRphyRpdDevInfoUniqueId"))
if mibBuilder.loadTexts: docsRphyRpdDevLocationEntry.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevLocationEntry.setDescription('The conceptual row of docsRphyRpdDevLocationTable.')
docsRphyRpdDevLocationDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 3, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevLocationDescr.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevLocationDescr.setDescription('This attribute is short text description of where the RPD has been installed, such as a street address. The format is specific to the operator.')
docsRphyRpdDevLocationLatitude = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(9, 9)).setFixedLength(9)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevLocationLatitude.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevLocationLatitude.setDescription('This attribute is the latitudinal coordinate of the RPD location, expressed as a 6-byte long string as described in ISO 6709-2008 (6 digit degrees, minutes, seconds: +/-DDMMSS.S). For example: -750015.1')
docsRphyRpdDevLocationLongitude = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 3, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevLocationLongitude.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevLocationLongitude.setDescription('This attribute is the longitudinal coordinate of the RPD location, expressed as a 7-byte long string as described in ISO 6709-2008 (7 digits degrees, minutes, seconds: +/-DDDMMSS.S). For example: -0750015.1')
docsRphyRpdDevCoresConnectedTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 4), )
if mibBuilder.loadTexts: docsRphyRpdDevCoresConnectedTable.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCoresConnectedTable.setDescription('This table provides a list of CCAP-Cores to which the RPD is authenticated, including the CCAP-Core on which the MIB is polled. For each CCAP-Core entry, the RPD indicates if that CCAP-Core is the principal Core. These values are provided by the CCAP-Core on initialization.')
docsRphyRpdDevCoresConnectedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 4, 1), ).setIndexNames((0, "DOCS-RPHY-MIB", "docsRphyRpdDevInfoUniqueId"), (0, "DOCS-RPHY-MIB", "docsRphyRpdDevCoresConnectedCoreId"))
if mibBuilder.loadTexts: docsRphyRpdDevCoresConnectedEntry.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCoresConnectedEntry.setDescription('The conceptual row of docsRphyRpdDevCoresConnectedTable.')
docsRphyRpdDevCoresConnectedCoreId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 4, 1, 1), MacAddress())
if mibBuilder.loadTexts: docsRphyRpdDevCoresConnectedCoreId.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCoresConnectedCoreId.setDescription('This attribute provides the MAC address of the CCAP-Core identified in the row entry and acts as a key.')
docsRphyRpdDevCoresConnectedAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 4, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevCoresConnectedAddressType.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCoresConnectedAddressType.setDescription('This attribute specifies the IP address type for docsRphyRpdDevCoresConnectedAddress.')
docsRphyRpdDevCoresConnectedAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 4, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevCoresConnectedAddress.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCoresConnectedAddress.setDescription('This attribute provides the IPv4 or IPv6 address of the CCAP-Core.')
docsRphyRpdDevCoresConnectedIsPrincipal = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 4, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevCoresConnectedIsPrincipal.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCoresConnectedIsPrincipal.setDescription('This attribute indicates if the CCAP-Core is the principal core. If true, this attribute indicates that this CCAP-Core is the principal core.')
docsRphyRpdDevCoresConnectedName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 4, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevCoresConnectedName.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCoresConnectedName.setDescription('This attribute provides the name of the CCAP-Core as conveyed to the RPD.')
docsRphyRpdDevCoresConnectedVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 4, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevCoresConnectedVendorId.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCoresConnectedVendorId.setDescription('This attribute provides the IANA-assigned SMI Network Management Private Enterprise Code of the vendor, as specified in RFC 1700.')
docsRphyRpdDevCapabilitiesTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 5), )
if mibBuilder.loadTexts: docsRphyRpdDevCapabilitiesTable.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCapabilitiesTable.setDescription('This table provides information about the principal capabilities and constraints of the RPD.')
docsRphyRpdDevCapabilitiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 5, 1), ).setIndexNames((0, "DOCS-RPHY-MIB", "docsRphyRpdDevInfoUniqueId"))
if mibBuilder.loadTexts: docsRphyRpdDevCapabilitiesEntry.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCapabilitiesEntry.setDescription('The conceptual row of docsRphyRpdDevCapabilitiesTable.')
docsRphyRpdDevCapabNumDsPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevCapabNumDsPorts.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCapabNumDsPorts.setDescription('This attribute provides the number of downstream unidirectional RF ports available on the RPD.')
docsRphyRpdDevCapabNumUsPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevCapabNumUsPorts.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCapabNumUsPorts.setDescription('This attribute provides the number of upstream unidirectional RF ports available on the RPD.')
docsRphyRpdDevCapabNumTenGeNsPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 5, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevCapabNumTenGeNsPorts.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCapabNumTenGeNsPorts.setDescription('This attribute provides the number of 10 Gigabit Ethernet ports supported by the RPD.')
docsRphyRpdDevCapabNumOneGeNsPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 5, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevCapabNumOneGeNsPorts.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCapabNumOneGeNsPorts.setDescription('This attribute provides the number 1 Gigabit Ethernet ports supported by the RPD.')
docsRphyRpdDevCapabNumDsScQamChans = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 5, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevCapabNumDsScQamChans.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCapabNumDsScQamChans.setDescription('This attribute provides the number of downstream SC-QAM channels supported per downstream RF port.')
docsRphyRpdDevCapabNumDsOfdmChans = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 5, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevCapabNumDsOfdmChans.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCapabNumDsOfdmChans.setDescription('This attribute provides the number of downstream DOCSIS 3.1 channels supported per downstream RF port.')
docsRphyRpdDevCapabNumUsScQamChans = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 5, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevCapabNumUsScQamChans.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCapabNumUsScQamChans.setDescription('This attribute provides the number of upstream SC-QAM channels supported per upstream RF port.')
docsRphyRpdDevCapabNumUsOfdmaChans = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 5, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevCapabNumUsOfdmaChans.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCapabNumUsOfdmaChans.setDescription('This attribute provides the number of upstream DOCSIS 3.1 channels supported per upstream RF port.')
docsRphyRpdDevCapabNumDsOob55d1Chans = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 5, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevCapabNumDsOob55d1Chans.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCapabNumDsOob55d1Chans.setDescription('This attribute provides the number of downstream SCTE 55-1 channels supported per downstream RF port.')
docsRphyRpdDevCapabNumUsOob55d1Chans = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 5, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevCapabNumUsOob55d1Chans.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCapabNumUsOob55d1Chans.setDescription('This attribute provides the number of upstream SCTE 55-1 channels supported per upstream RF port.')
docsRphyRpdDevCapabNumDsOob55d2Modules = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 5, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevCapabNumDsOob55d2Modules.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCapabNumDsOob55d2Modules.setDescription('This attribute provides the number of SCTE 55-2 modules supported.')
docsRphyRpdDevCapabNumUsOob55d2Demods = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 5, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevCapabNumUsOob55d2Demods.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCapabNumUsOob55d2Demods.setDescription('This attribute provides the number of upstream demodulators per SCTE 55-2 modules supported.')
docsRphyRpdDevCapabNumNdfChans = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 5, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevCapabNumNdfChans.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCapabNumNdfChans.setDescription('This attribute provides the number of narrowband digital forward channels supported per downstream RF port.')
docsRphyRpdDevCapabNumNdrChans = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 5, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevCapabNumNdrChans.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCapabNumNdrChans.setDescription('This attribute provides the number of narrowband digital return channels supported per upstream RF port.')
docsRphyRpdDevCapabNumDsPspFlowsPerChan = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 5, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevCapabNumDsPspFlowsPerChan.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCapabNumDsPspFlowsPerChan.setDescription('This attribute provides the number of distinct PSP flows supported by the RPD on downstream data pseudowires.')
docsRphyRpdDevCapabNumUsPspFlowsPerChan = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 5, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevCapabNumUsPspFlowsPerChan.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCapabNumUsPspFlowsPerChan.setDescription('This attribute provides the number of distinct PSP flows supported by the RPD on upstream data pseudowires.')
docsRphyRpdDevCapabNumAsynchVideoChans = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 5, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevCapabNumAsynchVideoChans.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCapabNumAsynchVideoChans.setDescription('This attribute provides the number of asynchronous MPEG video channels supported per downstream RF port.')
docsRphyRpdDevCapabNumCwToneGens = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 5, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevCapabNumCwToneGens.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCapabNumCwToneGens.setDescription('This attribute provides the number of CW tone generators supported per downstream RF port.')
docsRphyRpdDevCapabLowestCwToneFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 5, 1, 19), Unsigned32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevCapabLowestCwToneFreq.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCapabLowestCwToneFreq.setDescription('This attribute provides the lowest frequency supported by the CW tone generators.')
docsRphyRpdDevCapabHighestCwToneFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 5, 1, 20), Unsigned32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevCapabHighestCwToneFreq.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCapabHighestCwToneFreq.setDescription('This attribute provides the highest frequency supported by the CW tone generators.')
docsRphyRpdDevCapabMaxCwTonePwr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 5, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('TenthdBmV').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevCapabMaxCwTonePwr.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCapabMaxCwTonePwr.setDescription('This attribute provides the maximum power level supported by the dedicated CW tone generators, expressed in TenthdBmV.')
docsRphyRpdDevCapabQamAsPilot = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 5, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevCapabQamAsPilot.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCapabQamAsPilot.setDescription('This attribute indicates if a QAM channel can be configured as a CW tone. A value of true indicates a QAM channel can be configured as a CW tone. A value of false indicates a QAM channel cannot be configured as a CW tone.')
docsRphyRpdDevCapabSupportsUdpEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 5, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevCapabSupportsUdpEncap.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCapabSupportsUdpEncap.setDescription('This attribute reports whether the RPD supports UDP encapsulation on L2TPv3 pseudowires. A value of true indicates the RPD supports UDP encapsulation on L2TPv3 pseudowires. A value of false indicates the RPD does not support UDP encapsulation on L2TPv3 pseudowires.')
docsRphyRpdDevCapabSupportsFlowTags = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 5, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevCapabSupportsFlowTags.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCapabSupportsFlowTags.setDescription('This attribute indicates Flow Tags support capability. If the attribute returns a value of true, the RPD supports Flow Tags on OFDMA channels. A Flow Tag is a 32-bit identifier of a MAC hardware resource (typically a Service Flow). The Flow Tag can be assigned to the scheduled SID by the CCAP Core. The RPD provides Flow Tags in UEPI headers for OFDMA channels. If the attribute returns a value of false, the RPD does not support Flow Tags.')
docsRphyRpdDevCapabSupportsFreqTilt = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 5, 1, 25), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevCapabSupportsFreqTilt.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCapabSupportsFreqTilt.setDescription('This attribute indicates Frequency Tilt support capability. If the attribute returns a value of true, the RPD supports Frequency Tilt settings on DS RF Ports. If the attribute returns a value of false, the RPD does not support Frequency Tilt settings.')
docsRphyRpdDevCapabTiltRange = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 5, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevCapabTiltRange.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCapabTiltRange.setDescription('This attribute indicates the range of tilt settings that the RPD supports.')
docsRphyRpdDevCapabBufferDepthMonAlertSupp = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 5, 1, 27), Bits().clone(namedValues=NamedValues(("ofdmChannels", 0), ("scQamDocsisChannels", 1), ("scQamVideoChannels", 2), ("ndfChannels", 3), ("scte551Channels", 4), ("scte552Channels", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevCapabBufferDepthMonAlertSupp.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCapabBufferDepthMonAlertSupp.setDescription('This attribute indicates buffer depth monitoring alert supported by the RPD. For each bit set to 1, the RPD is capable of monitoring buffer depth on the corresponding types of downstream channels.')
docsRphyRpdDevCapabBufferDepthCfgSupp = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 5, 1, 28), Bits().clone(namedValues=NamedValues(("ofdmChannels", 0), ("scQamDocsisChannels", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevCapabBufferDepthCfgSupp.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCapabBufferDepthCfgSupp.setDescription('This attribute indicates configuration of the output buffer depth supported by the RPD. This capability is only applicable to DOCSIS downstream channels. For each bit set to 1, the RPD is capable of configuring output buffer depth of the corresponding types of downstream channels.')
docsRphyRpdDevCapabRpdUcdProcTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 5, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevCapabRpdUcdProcTime.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCapabRpdUcdProcTime.setDescription('This attribute indicates the minimum interval needed by the RPD to process a UCD message received via GCP. This interval is equivalent to CM UCD processing time defined in MULPIv3.1 but its duration can be longer. The maximum value of the RPD UCD Processing time is 50000 usec. The minimum value RPD UCD Processing time is equal to CM UCD processing time (1500 usec for each changed SC-QAM channel or 2000 usec for each changed upstream OFDMA channel) defined in MULPIv3.1.')
docsRphyRpdDevCapabRpdUcdChgNullGrtTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 5, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevCapabRpdUcdChgNullGrtTime.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCapabRpdUcdChgNullGrtTime.setDescription('This attribute indicates the minimum Null grant interval needed by the RPD in the first MAP with incremented UCD change count. The RPD uses the Null grant in the first map to programs registers of its burst receiver during this interval. The maximum value of the RPD UCD Change Null Grant Time is 4000 usec for each changed channel. The minimum value of the RPD UCD Change Null Grant Time is defined in MULPIv3.1.')
docsRphyRpdDevCapabMultiSectionTimingMerRep = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 5, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notSupported", 0), ("supportType1", 1), ("supportType2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevCapabMultiSectionTimingMerRep.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCapabMultiSectionTimingMerRep.setDescription('This attribute indicates whether the RPD supports Multi-Section Timing and MER reporting as opposed to just reporting a single average Timing and MER. More detail is documented in the UEPI Probe Pseudowire format of R-UEPI. notSupported: The RPD does not support Multi-Section Timing and MER Reporting supportType1: The RPD supports equally spaced non-overlapping sections supportType2: The RPD supports fully flexible sections and spacing of non-overlapping sections.')
docsRphyRpdDevChanReachabilityTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 6), )
if mibBuilder.loadTexts: docsRphyRpdDevChanReachabilityTable.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevChanReachabilityTable.setDescription('This table provides RPD channel reachability constraints. In some RPD implementations, an Ethernet interface might not have connectivity to all channels on a port of the RPD. This table is only populated if reachability constraints exist on the RPD.')
docsRphyRpdDevChanReachabilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 6, 1), ).setIndexNames((0, "DOCS-RPHY-MIB", "docsRphyRpdDevInfoUniqueId"), (0, "DOCS-RPHY-MIB", "docsRphyRpdDevChanReachabilityEnetPortIndex"), (0, "DOCS-RPHY-MIB", "docsRphyRpdDevChanReachabilityRfPortIndex"), (0, "DOCS-RPHY-MIB", "docsRphyRpdDevChanReachabilityChanType"), (0, "DOCS-RPHY-MIB", "docsRphyRpdDevChanReachabilityStartChanIndex"))
if mibBuilder.loadTexts: docsRphyRpdDevChanReachabilityEntry.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevChanReachabilityEntry.setDescription('The conceptual row of docsRphyRpdDevChanReachabilityTable.')
docsRphyRpdDevChanReachabilityEnetPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: docsRphyRpdDevChanReachabilityEnetPortIndex.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevChanReachabilityEnetPortIndex.setDescription('This attribute identifies the Ethernet port on the RPD that has the connectivity constraint.')
docsRphyRpdDevChanReachabilityRfPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 6, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: docsRphyRpdDevChanReachabilityRfPortIndex.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevChanReachabilityRfPortIndex.setDescription('This attribute identifies the RF port with which the Ethernet port has a connectivity constraint.')
docsRphyRpdDevChanReachabilityChanType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 6, 1, 3), RphyChannelType())
if mibBuilder.loadTexts: docsRphyRpdDevChanReachabilityChanType.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevChanReachabilityChanType.setDescription('This attribute identifies the type of channel that is supported within the specified channel index range on this RF port from the specified Ethernet interface. A row entry will be created for each channel type with a constraint. Absence of a row for a channel type means there is no constraint for that channel type.')
docsRphyRpdDevChanReachabilityStartChanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 6, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: docsRphyRpdDevChanReachabilityStartChanIndex.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevChanReachabilityStartChanIndex.setDescription('This attribute identifies the first channel of the specified channel type in the range of channels that does not have connectivity to the specified Ethernet port.')
docsRphyRpdDevChanReachabilityEndChanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 6, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevChanReachabilityEndChanIndex.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevChanReachabilityEndChanIndex.setDescription('This attribute identifies the last channel of the specified channel type in the range of channels that does not have connectivity to the specified Ethernet port.')
docsRphyRpdDevDsUsRfPortAllocTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 7), )
if mibBuilder.loadTexts: docsRphyRpdDevDsUsRfPortAllocTable.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevDsUsRfPortAllocTable.setDescription('This table provides the allocation status for the downstream channel resources on the RPD on a per DS RF port basis as well as for the upstream channel resources on a per US RF port basis.')
docsRphyRpdDevDsUsRfPortAllocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 7, 1), ).setIndexNames((0, "DOCS-RPHY-MIB", "docsRphyRpdDevInfoUniqueId"), (0, "DOCS-RPHY-MIB", "docsRphyRpdDevDsUsRfPortAllocIndex"), (0, "DOCS-RPHY-MIB", "docsRphyRpdDevDsUsRfPortAllocDirection"))
if mibBuilder.loadTexts: docsRphyRpdDevDsUsRfPortAllocEntry.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevDsUsRfPortAllocEntry.setDescription('The conceptual row of docsRphyRpdDevDsUsRfPortAllocTable.')
docsRphyRpdDevDsUsRfPortAllocIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: docsRphyRpdDevDsUsRfPortAllocIndex.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevDsUsRfPortAllocIndex.setDescription('This attribute provides the index of the downstream or upstream RF port for which resource allocation is being reported.')
docsRphyRpdDevDsUsRfPortAllocDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 7, 1, 2), IfDirection())
if mibBuilder.loadTexts: docsRphyRpdDevDsUsRfPortAllocDirection.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevDsUsRfPortAllocDirection.setDescription('This attribute indicates whether the allocation applies to the upstream or downstream RF Port.')
docsRphyRpdDevDsUsRfPortAllocScQamChans = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 7, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevDsUsRfPortAllocScQamChans.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevDsUsRfPortAllocScQamChans.setDescription('This attribute provides the number of allocated SC-QAM channels on this RF port.')
docsRphyRpdDevDsUsRfPortAllocOfdmChans = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 7, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevDsUsRfPortAllocOfdmChans.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevDsUsRfPortAllocOfdmChans.setDescription('This attribute provides the number of allocated DOCSIS 3.1 channels on this RF port.')
docsRphyRpdDevDsUsRfPortAllocOob551Chans = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 7, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevDsUsRfPortAllocOob551Chans.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevDsUsRfPortAllocOob551Chans.setDescription('This attribute provides the number of allocated SCTE 55-1 channels on this RF port.')
docsRphyRpdDevDsUsRfPortAllocNdChans = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 7, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevDsUsRfPortAllocNdChans.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevDsUsRfPortAllocNdChans.setDescription('This attribute provides the number of allocated narrowband digital forward channels (for DS RF Ports) or narrowband digital return channels (for US RF Ports) on this RF port.')
docsRphyRpdDevL2tpSessionInfoTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 8), )
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoTable.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoTable.setDescription("This table provides details about each tunnel session between the RPD and each CCAP Core with which the RPD is associated from the RPD's point of view The attributes in this table are used to create an entry for each L2TPv3 tunnel (session) terminated at an R-PHY entity (RPD).")
docsRphyRpdDevL2tpSessionInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 8, 1), ).setIndexNames((0, "DOCS-RPHY-MIB", "docsRphyRpdDevInfoUniqueId"), (0, "DOCS-RPHY-MIB", "docsRphyRpdDevL2tpSessionInfoLocalLcceIpAddrType"), (0, "DOCS-RPHY-MIB", "docsRphyRpdDevL2tpSessionInfoLocalLcceIpAddr"), (0, "DOCS-RPHY-MIB", "docsRphyRpdDevL2tpSessionInfoLocalId"))
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoEntry.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoEntry.setDescription('The conceptual row of docsRphyRpdDevL2tpSessionInfoTable. A row entry is created for every session the RPD terminates and there may be entries for sessions with different CCAP-Cores if the RPD is connected with one or more auxiliary cores.')
docsRphyRpdDevL2tpSessionInfoLocalLcceIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 8, 1, 1), InetAddressType())
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoLocalLcceIpAddrType.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoLocalLcceIpAddrType.setDescription('This attribute indicates whether the IP address provide in docsRphyRpdDevL2tpSessionInfoLocalLcceIpAddr is IPv4 or IPv6.')
docsRphyRpdDevL2tpSessionInfoLocalLcceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 8, 1, 2), InetAddress())
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoLocalLcceIpAddr.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoLocalLcceIpAddr.setDescription('This attribute provides the local LCCE IP address on the RPD of the session detailed in the row entry.')
docsRphyRpdDevL2tpSessionInfoLocalId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 8, 1, 3), Unsigned32())
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoLocalId.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoLocalId.setDescription('This attribute provides the value of the session ID assigned to the session by the RPD.')
docsRphyRpdDevL2tpSessionInfoRemoteLcceIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 8, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoRemoteLcceIpAddrType.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoRemoteLcceIpAddrType.setDescription('This attribute indicates whether the IP address provide in docsRphyRpdDevL2tpSessionInfoRemoteLcceIpAddr is IPv4 or IPv6.')
docsRphyRpdDevL2tpSessionInfoRemoteLcceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 8, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoRemoteLcceIpAddr.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoRemoteLcceIpAddr.setDescription('This attribute provides the remote-side LCCE IP address of the session detailed in the row entry.')
docsRphyRpdDevL2tpSessionInfoRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 8, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoRemoteId.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoRemoteId.setDescription('This attribute provides the value of the session ID assigned to the session by the remote peer (RPD).')
docsRphyRpdDevL2tpSessionInfoCoreId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 8, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoCoreId.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoCoreId.setDescription('This attribute provides the MAC address of the CCAP Core with which this session terminates. The CCAP Core sends its MAC address to the RPD periodically via the DOCSIS SYNC MAC Message in the Source Address field.')
docsRphyRpdDevL2tpSessionInfoConnCtrlID = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 8, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoConnCtrlID.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoConnCtrlID.setDescription('This attribute indicates the control connection identifier (CCID) for this session.')
docsRphyRpdDevL2tpSessionInfoUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 8, 1, 9), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoUdpPort.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoUdpPort.setDescription('This attribute provides the UDP Port reported by the RPD when the DEPI session uses L2TPv3 Header Over UDP. This attribute reports a value of 0 when the session is running with the L2TPv3 Session IP Header. This port number is negotiated between the CCAP Core and the RPD according to the L2TPv3 RFC.')
docsRphyRpdDevL2tpSessionInfoDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 8, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoDescr.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoDescr.setDescription('This attribute provides an ASCII string constructed with the form: RemoteEndId=(pp:mmm:ccc), ... { repeated for multiple endpoints } where pp is the 0-based port num signaled in the RemoteEndId AVP mmm is the channel-type enum value from the RemoteEndId AVP ccc is the channel number from the RemoteEndId AVP.')
docsRphyRpdDevL2tpSessionInfoSessionType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("psp", 1), ("mpt", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoSessionType.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoSessionType.setDescription('This attribute specifies whether the session is an MPT session or PSP session.')
docsRphyRpdDevL2tpSessionInfoSessionSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("mptLegacy", 1), ("pspLegacy", 2), ("mcm", 3), ("pspDepiMultichannel", 4), ("pspUepiScQam", 5), ("pspUepiOfdma", 6), ("pspBwReqScQam", 7), ("pspBwReqOfdma", 8), ("pspProbe", 9), ("pspRngReqScQam", 10), ("pspRngReqOfdma", 11), ("pspMapScQam", 12), ("pspMapOfdma", 13), ("pspSpecman", 14), ("pspPnm", 15), ("psp551Fwd", 16), ("psp551Ret", 17), ("psp552Fwd", 18), ("psp552Ret", 19), ("pspNdf", 20), ("pspNdr", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoSessionSubType.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoSessionSubType.setDescription('This attribute specifies the type of DEPI MPT or DEPI PSP session.')
docsRphyRpdDevL2tpSessionInfoMaxPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 8, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoMaxPayload.setReference('DEPI specification, Signaling DEPI specification Annex A.')
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoMaxPayload.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoMaxPayload.setDescription('This attribute indicates the maximum MTU negotiated between the CCAP Core and the RPD during the session establishment process. It considers the header subtractions as indicated in the DEPI specification.')
docsRphyRpdDevL2tpSessionInfoPathPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 8, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoPathPayload.setReference('DEPI specification, Network MTU')
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoPathPayload.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoPathPayload.setDescription('This attribute indicates the maximum MTU traversing the CIN from CCAP Core to the RPD. This is calculated by the CCAP Core by procedures such as MTU discovery as described in the DEPI specification.')
docsRphyRpdDevL2tpSessionInfoRpdIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 8, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoRpdIfMtu.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoRpdIfMtu.setDescription("This attribute provides the RPD's CIN interface MTU and is read as the value of the following L2TPV3 AVP transmitted by the RPD during session setup: DEPI Downstream PW UEPI Upstream PW DEPI Remote MTU AVP (ICRP) UEPI Remote MTU AVP (ICRP).")
docsRphyRpdDevL2tpSessionInfoCoreIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 8, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoCoreIfMtu.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoCoreIfMtu.setDescription("This attribute provides the CCAP Core's CIN interface MTU and is read as the value of the following L2TPv3 AVP as received by the device during session setup: DEPI Downstream PW UEPI Upstream PW DEPI Local MTU AVP (ICRQ) UEPI Local MTU AVP (ICRQ).")
docsRphyRpdDevL2tpSessionInfoErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 8, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("invalidMACInterfaceValue", 2), ("invalidInterfaceValue", 3), ("noResourcesForInterfaceIndex", 4), ("l2tpv3Error", 5), ("ifAdminStatusSetToDown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoErrorCode.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoErrorCode.setDescription("The error code raised when the session is in an error state. 'invalidMACInterfaceValue' Indicates wrong assignment of the CCAP Core MAC interface ifIndex. 'invalidInterfaceValue' Indicates wrong assignment of the CCAP Core Downstream interface ifIndex 'noResourcesForInterfaceIfIndex' Indicates the CCAP Core has no more resources to assign a session to this entry. 'l2tpv3Error' An L2TPv3 StopCCN or CDN message was issued 'ifAdminStatusSetToDown' Indicates the ifAdminStatus was set to down and the session was torn down.")
docsRphyRpdDevL2tpSessionInfoCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 8, 1, 18), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoCreationTime.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoCreationTime.setDescription('The attribute contains the sysUptime when the entry was turned active.')
docsRphyRpdDevL2tpSessionInfoOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 8, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3), ("testing", 4), ("dormant", 5), ("notPresent", 6), ("lowerLayerDown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoOperStatus.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoOperStatus.setDescription("This attribute provides the current status of the pseudowire from the point of view of the specific reporting entity (RPD). Values are as follows: 'other' indicates a vendor-specific operational status. 'up' indicates that the pseudowire is ready to pass packets. 'down' indicates that pseudowire signaling is not yet finished, or indications available at the service level indicate that the pseudowire is not passing packets. 'testing' indicates that AdminStatus at the pseudowire level is set to test. 'dormant' indicates that the pseudowire is not in a condition to pass packets but is in a 'pending' state, waiting for some external event. 'notPresent' indicates that some component is missing to accomplish the setup of the pseudowire. It can be a configuration error, incomplete configuration, or a missing H/W component. 'lowerLayerDown' indicates one or more of the lower-layer interfaces responsible for running the underlying PSN is not in OperStatus 'up' state.")
docsRphyRpdDevL2tpSessionInfoLocalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 8, 1, 20), Bits().clone(namedValues=NamedValues(("other", 0), ("pwNotForwarding", 1), ("servicePwRxFault", 2), ("servicePwTxFault", 3), ("psnPwRxFault", 4), ("psnPwTxFault", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoLocalStatus.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoLocalStatus.setDescription("The attribute provides the status of the pseudowire in the local node. If the 'other' bit is set, it indicates that an additional vendor-specific status is reported. If none of the bits are set, it indicates no faults are reported.")
docsRphyRpdDevL2tpSessionInfoLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 8, 1, 21), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoLastChange.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionInfoLastChange.setDescription('The attribute provides the value of sysUpTime when the session entered its current OperStatus state from the point of view of the specific reporting entity (RPD).')
docsRphyRpdDevL2tpSessionStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 9), )
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionStatsTable.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionStatsTable.setDescription("This table provides statistics about each tunnel session between the RPD and each CCAP Core with which the RPD is associated from the RPD's point of view.")
docsRphyRpdDevL2tpSessionStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 9, 1), )
docsRphyRpdDevL2tpSessionInfoEntry.registerAugmentions(("DOCS-RPHY-MIB", "docsRphyRpdDevL2tpSessionStatsEntry"))
docsRphyRpdDevL2tpSessionStatsEntry.setIndexNames(*docsRphyRpdDevL2tpSessionInfoEntry.getIndexNames())
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionStatsEntry.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionStatsEntry.setDescription('The conceptual row of docsRphyRpdDevL2tpSessionStatsTable. This table is an augmentation of docsRphyL2tpSessionInfoTable.')
docsRphyRpdDevL2tpSessionStatsOutOfSeqPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 9, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionStatsOutOfSeqPkts.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevL2tpSessionStatsOutOfSeqPkts.setDescription('This attribute indicates the count of session packets that were received out of sequence from the point of view of the reporting entity. It is vendor dependent the re-sequence of packets. Implementations that do not re-sequence packets also increase the value of ifInDiscards for the respective entry.')
docsRphyRpdDevDiagStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 10), )
if mibBuilder.loadTexts: docsRphyRpdDevDiagStatusTable.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevDiagStatusTable.setDescription("This table reports information about an RPD's diagnostic self test results.")
docsRphyRpdDevDiagStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 10, 1), ).setIndexNames((0, "DOCS-RPHY-MIB", "docsRphyRpdDevInfoUniqueId"))
if mibBuilder.loadTexts: docsRphyRpdDevDiagStatusEntry.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevDiagStatusEntry.setDescription('The conceptual row of docsRphyRpdDevDiagStatusTable. This table returns at least one row indicating pass or failure for the diagnostic self test.')
docsRphyRpdDevDiagStatusProbableCause = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 10, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevDiagStatusProbableCause.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevDiagStatusProbableCause.setDescription("This attribute reports the probable cause of the diagnostic test error condition. Probable causes may be related to: - Communications error - Quality of Service error - Processing error - Equipment error - Environmental error The format for values returned are vendor-specific. When the self test result is a pass, this attribute returns 'Self Test Passed'.")
docsRphyRpdDevDiagStatusAdditionalText = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 10, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevDiagStatusAdditionalText.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevDiagStatusAdditionalText.setDescription("This attribute reports a free form text description of the diagnostic test error condition. This provides supplemental information for the ProbableCause. When the self test result is a pass, this attribute returns 'No errors found'.")
docsRphyRpdDevDiagStatusSeverityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 10, 1, 3), RphyEventSeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevDiagStatusSeverityLevel.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevDiagStatusSeverityLevel.setDescription("This attribute reports the severity level for the diagnostic test error condition. Severity levels are based on the DOCSIS event priority levels. When the self test result is a pass, this attribute returns 'information'.")
docsRphyRpdDevDepiMcastSessionTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 11), )
if mibBuilder.loadTexts: docsRphyRpdDevDepiMcastSessionTable.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevDepiMcastSessionTable.setDescription('This table reports the DEPI IP multicast sessions currently joined by an RPD.')
docsRphyRpdDevDepiMcastSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 11, 1), ).setIndexNames((0, "DOCS-RPHY-MIB", "docsRphyRpdDevInfoUniqueId"), (0, "DOCS-RPHY-MIB", "docsRphyRpdDevDepiMcastSessionIpAddrType"), (0, "DOCS-RPHY-MIB", "docsRphyRpdDevDepiMcastSessionGrpIpAddr"), (0, "DOCS-RPHY-MIB", "docsRphyRpdDevDepiMcastSessionSrcIpAddr"))
if mibBuilder.loadTexts: docsRphyRpdDevDepiMcastSessionEntry.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevDepiMcastSessionEntry.setDescription('The conceptual row of docsRphyRpdDevDepiMcastSessionTable. A row entry of this table represents one DEPI IP Multicast session replicated to one RPD. The indexing provides the RPD unique identifier and the (S,G) IP address pair that uniquely identifies an IP multicast session. The CCAP Core creates a row entry when it confirms an RPD has joined a DEPI IP multicast session. The CCAP Core deletes the row entry when it confirms an RPD has left the DEPI IP multicast session or disconnects its GCP session with the CCAP Core.')
docsRphyRpdDevDepiMcastSessionIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 11, 1, 1), InetAddressType())
if mibBuilder.loadTexts: docsRphyRpdDevDepiMcastSessionIpAddrType.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevDepiMcastSessionIpAddrType.setDescription('This key attribute reports whether the IP addresses provided in GroupIpAddr, SourceIpAddr, LocalLcceIpAddr and RemoteLcceIpAddr are IPv4 or IPv6.')
docsRphyRpdDevDepiMcastSessionGrpIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 11, 1, 2), InetAddress())
if mibBuilder.loadTexts: docsRphyRpdDevDepiMcastSessionGrpIpAddr.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevDepiMcastSessionGrpIpAddr.setDescription('This key attribute reports the group (destination) address of an IP multicast session transmitted via DEPI multicast.')
docsRphyRpdDevDepiMcastSessionSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 11, 1, 3), InetAddress())
if mibBuilder.loadTexts: docsRphyRpdDevDepiMcastSessionSrcIpAddr.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevDepiMcastSessionSrcIpAddr.setDescription('For Source Specific Multicast (SSM), this key attribute reports the source IP address of an IP multicast session transmitted via DEPI multicast. For Any-Source Multicast (ASM) sessions, this attribute reports the all-0s IP address.')
docsRphyRpdDevDepiMcastSessionLocalLcceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 11, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevDepiMcastSessionLocalLcceIpAddr.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevDepiMcastSessionLocalLcceIpAddr.setDescription('This attribute reports the RPD local LCCE IP address of the L2TPv3 DEPI control session that instructed the RPD to join the IP multicast session.')
docsRphyRpdDevDepiMcastSessionRemoteLcceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 11, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevDepiMcastSessionRemoteLcceIpAddr.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevDepiMcastSessionRemoteLcceIpAddr.setDescription('This attribute reports the RPD remote LCCE IP address (i.e. on the CCAP Core) of the L2TPv3 control session that instructed the RPD to join the IP multicast session.')
docsRphyRpdDevDepiMcastSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2147483649, 2147549183))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevDepiMcastSessionId.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevDepiMcastSessionId.setDescription('This attribute reports the L2TPv3 Session ID assigned by the CCAP Core to the DEPI IP multicast session. The value is assigned according to the referenced specification in the range 0x80000001 through 0x8000FFFF.')
docsRphyRpdDevDepiMcastSessionJoinTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 11, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevDepiMcastSessionJoinTime.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevDepiMcastSessionJoinTime.setDescription('This attribute reports the last time the RPD has joined this session.')
docsRphyRpdDevEventLogTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 12), )
if mibBuilder.loadTexts: docsRphyRpdDevEventLogTable.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevEventLogTable.setDescription('This table reports event log information for an RPD.')
docsRphyRpdDevEventLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 12, 1), ).setIndexNames((0, "DOCS-RPHY-MIB", "docsRphyRpdDevInfoUniqueId"), (0, "DOCS-RPHY-MIB", "docsRphyRpdDevEventLogIndex"))
if mibBuilder.loadTexts: docsRphyRpdDevEventLogEntry.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevEventLogEntry.setDescription('The conceptual row of docsRphyRpdDevEventLogTable.')
docsRphyRpdDevEventLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 12, 1, 1), Unsigned32())
if mibBuilder.loadTexts: docsRphyRpdDevEventLogIndex.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevEventLogIndex.setDescription('This key attribute provides relative ordering of the events in the event log. This attribute will always increase except when (a) the log is reset (b) the device reboots and does not implement non-volatile storage for this log, or (c) it reaches the value 2^31. The next entry for all the above cases is 1.')
docsRphyRpdDevEventLogFirstTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 12, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevEventLogFirstTime.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevEventLogFirstTime.setDescription('This attribute provides the local RPD time when this event was created.')
docsRphyRpdDevEventLogLastTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 12, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevEventLogLastTime.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevEventLogLastTime.setDescription('When an event reports only one event occurrence, this attribute will have the same value as the corresponding instance of FirstTime. When an event reports multiple event occurrences, this attribute will record the local RPD time when the most recent occurrence for this event occurred.')
docsRphyRpdDevEventLogCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevEventLogCounts.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevEventLogCounts.setDescription('This attribute provides the number of consecutive event occurrences reported by this event. This starts at 1 with the creation of this event occurrence and increments by 1 for each subsequent duplicate event occurrence.')
docsRphyRpdDevEventLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 12, 1, 5), RphyEventSeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevEventLogLevel.setReference('DOCSIS DCA MHAv2 Remote PHY OSS Interface Specification CM-SP-R-OSSI-I04-160923, Annex B.')
if mibBuilder.loadTexts: docsRphyRpdDevEventLogLevel.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevEventLogLevel.setDescription('This attribute provides the priority level of this event, as defined by Annex B. These are ordered from most serious (emergency) to least serious (debug).')
docsRphyRpdDevEventLogId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 12, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevEventLogId.setReference('DOCSIS DCA MHAv2 Remote PHY OSS Interface Specification CM-SP-R-OSSI-I04-160923, Annex B.')
if mibBuilder.loadTexts: docsRphyRpdDevEventLogId.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevEventLogId.setDescription('This attribute provides the identifier of this event, as defined by Annex B.')
docsRphyRpdDevEventLogText = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 12, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevEventLogText.setReference('DOCSIS DCA MHAv2 Remote PHY OSS Interface Specification CM-SP-R-OSSI-I04-160923, Annex B.')
if mibBuilder.loadTexts: docsRphyRpdDevEventLogText.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevEventLogText.setDescription('This attribute provides the message text of this event, as defined by Annex B.')
docsRphyRpdDevOob551UsChanStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 13), )
if mibBuilder.loadTexts: docsRphyRpdDevOob551UsChanStatusTable.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevOob551UsChanStatusTable.setDescription('This table provides per-RPD counts of upstream SCTE 55-1 cells sent to a Network Controller.')
docsRphyRpdDevOob551UsChanStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 13, 1), ).setIndexNames((0, "DOCS-RPHY-MIB", "docsRphyRpdDevInfoUniqueId"), (0, "DOCS-RPHY-MIB", "docsRphyRpdDevOob551UsChanStatusRfPort"), (0, "DOCS-RPHY-MIB", "docsRphyRpdDevOob551UsChanStatusChannelId"))
if mibBuilder.loadTexts: docsRphyRpdDevOob551UsChanStatusEntry.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevOob551UsChanStatusEntry.setDescription('The conceptual row of docsRphyRpdDevOob551UsChanStatusTable. A row entry of this table represents counts that are updated by the CCAP Core, which parses each upstream SCTE 55-1 packet and uses the power level and packet status (which are really cell status) bits in those packets to determine how to update the counters.')
docsRphyRpdDevOob551UsChanStatusRfPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 13, 1, 1), Unsigned32())
if mibBuilder.loadTexts: docsRphyRpdDevOob551UsChanStatusRfPort.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevOob551UsChanStatusRfPort.setDescription('This key attribute reports the RPD RF port number carrying this SCTE 55-1 US channel.')
docsRphyRpdDevOob551UsChanStatusChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 13, 1, 2), Unsigned32())
if mibBuilder.loadTexts: docsRphyRpdDevOob551UsChanStatusChannelId.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevOob551UsChanStatusChannelId.setDescription('This key attribute reports the demodulator ID (channel number) for this SCTE 55-1 US channel.')
docsRphyRpdDevOob551UsChanStatusNcIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 13, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevOob551UsChanStatusNcIpAddrType.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevOob551UsChanStatusNcIpAddrType.setDescription('This attribute indicates whether the IP address provide in docsRphyRpdDevOob551UsChanStatusNcIpAddr is IPv4 or IPv6.')
docsRphyRpdDevOob551UsChanStatusNcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 13, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevOob551UsChanStatusNcIpAddr.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevOob551UsChanStatusNcIpAddr.setDescription('This attribute reports the IP host address of the Network Controller receiving the cells on this SCTE 55-1 US channel.')
docsRphyRpdDevOob551UsChanStatusArpdSrcIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 13, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevOob551UsChanStatusArpdSrcIpAddrType.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevOob551UsChanStatusArpdSrcIpAddrType.setDescription('This attribute indicates whether the IP address provide in docsRphyRpdDevOob551UsChanStatusArpdSrcIpAddr is IPv4 or IPv6.')
docsRphyRpdDevOob551UsChanStatusArpdSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 13, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevOob551UsChanStatusArpdSrcIpAddr.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevOob551UsChanStatusArpdSrcIpAddr.setDescription('This attribute reports the virtual ARPD source IP host address used when sending cells to the Network Controller.')
docsRphyRpdDevOob551UsChanStatusPerfectCellsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 13, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevOob551UsChanStatusPerfectCellsRcvd.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevOob551UsChanStatusPerfectCellsRcvd.setDescription('This attribute reports the number of perfect cells received by the demodulator for this SCTE 55-1 US channel. Perfect cells have status 0 in the US SCTE 55-1 OOB packet.')
docsRphyRpdDevOob551UsChanStatusCorrectedCellsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 13, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevOob551UsChanStatusCorrectedCellsRcvd.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevOob551UsChanStatusCorrectedCellsRcvd.setDescription('This attribute reports the number of errored cells received by the demodulator for this SCTE 55-1 US channel that were successfully corrected. Corrected cells have status 1 in the US SCTE 55-1 OOB packet.')
docsRphyRpdDevOob551UsChanStatusUncorrectableCellsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 13, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevOob551UsChanStatusUncorrectableCellsRcvd.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevOob551UsChanStatusUncorrectableCellsRcvd.setDescription('This attribute reports the number of errored cells received by the demodulator for this SCTE 55-1 US channel that could not be corrected. Uncorrectable cells have status 3 in the US SCTE 55-1 OOB packet.')
docsRphyRpdDevOob551UsChanStatusTotalCellsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 13, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevOob551UsChanStatusTotalCellsRcvd.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevOob551UsChanStatusTotalCellsRcvd.setDescription('This attribute reports the total of all cells received for this SCTE 55-1 US channel.')
docsRphyRpdDevOob551UsChanStatusPwrLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 13, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevOob551UsChanStatusPwrLevel.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevOob551UsChanStatusPwrLevel.setDescription('This attribute reports the average power level from nominal of all received MAC Cells by the demodulator for this upstream SCTE 55-1 channel in tenths of a dB. The six power level bits 1 in the US SCTE 55-1 OOB packet report the nominal power per cell in units of 0.5 dB.')
docsRphyRpdDevOob551UsChanStatusMaxPwrLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 13, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevOob551UsChanStatusMaxPwrLevel.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevOob551UsChanStatusMaxPwrLevel.setDescription('This attribute reports the maximum power level from nominal of all received MAC Cells by the demodulator for this upstream SCTE 55-1 channel in tenths of a dB.')
docsRphyRpdDevOob551UsChanStatusMinPwrLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 13, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevOob551UsChanStatusMinPwrLevel.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevOob551UsChanStatusMinPwrLevel.setDescription('This attribute reports the minimum power level from nominal of all received MAC Cells by the demodulator for this upstream SCTE 55-1 channel in tenths of a dB.')
docsRphyRpdDevOob551UsChanStatusCounterDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 13, 1, 14), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevOob551UsChanStatusCounterDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevOob551UsChanStatusCounterDiscontinuityTime.setDescription("TThis attribute reports the value of sysUpTime on the most recent occasion at which any one or more of this interface's counters suffered a discontinuity. If no such discontinuities have occurred since the last re-initialization of the local management subsystem, then this attribute reports a zero value.")
docsRphyRpdDevCrashDataFileStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 14), )
if mibBuilder.loadTexts: docsRphyRpdDevCrashDataFileStatusTable.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCrashDataFileStatusTable.setDescription('This table provides status information for the crash analysis data files.')
docsRphyRpdDevCrashDataFileStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 14, 1), ).setIndexNames((0, "DOCS-RPHY-MIB", "docsRphyRpdDevInfoUniqueId"), (0, "DOCS-RPHY-MIB", "docsRphyRpdDevCrashDataFileStatusIndex"))
if mibBuilder.loadTexts: docsRphyRpdDevCrashDataFileStatusEntry.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCrashDataFileStatusEntry.setDescription('The conceptual row of docsRphyRpdDevCrashDataFileStatusTable. A row entry of this table represents a file that is available in the device for upload or for which an upload is in progress.')
docsRphyRpdDevCrashDataFileStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 14, 1, 1), Unsigned32())
if mibBuilder.loadTexts: docsRphyRpdDevCrashDataFileStatusIndex.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCrashDataFileStatusIndex.setDescription('This key attribute uniquely identifies a crash analysis file.')
docsRphyRpdDevCrashDataFileStatusFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 14, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevCrashDataFileStatusFilename.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCrashDataFileStatusFilename.setDescription("This attribute contains the name of the crash analysis file, stored in the device that is available to be uploaded to the server. Filenames are defined by the application that creates them. The RPD SHOULD generate crash analysis files with names which include RPD's unique id and a timestamp. The timestamp indicates the time when the crash has occurred with granularity of one second. The RPD SHOULD format the timestamp in the form 'Unix time', which is defined as the number of seconds that have elapsed since midnight Coordinated Universal Time (UTC), Thursday, 1 January 1970. For example, a crash file name 'RPD_crash_dump_id_00000187ADF_time_1403405123' indicates that the file was generated by RPD with Unique ID of 00.00.00.18.7A.DF on Sunday 22nd June 2014 02:45:23 AM.")
docsRphyRpdDevCrashDataFileStatusFileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("availableForUpload", 2), ("uploadInProgress", 3), ("uploadCompleted", 4), ("uploadPending", 5), ("uploadCancelled", 6), ("error", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevCrashDataFileStatusFileStatus.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevCrashDataFileStatusFileStatus.setDescription('This attribute reflects the status of the crash data file. The possible values are listed below. other(1) - Any condition not covered by the other defined values. availableForUpload(2) - The file is available to be uploaded. uploadInProgress(3) - The file is currently being uploaded. The file is not available for another upload in this state. uploadCompleted(4) - The file was successfully uploaded. The file is available for another upload. uploadPending(5) - The file has been selected for upload but a condition does not allow the upload to take place. The upload will start when the condition blocking uploads has been removed. For example, another upload that is currently in progress could cause this value to be returned. uploadPending status can also indicate a situation where the RPD is waiting to retry the upload after the initial attempt(s) has failed. The file is not available for another upload in this state. uploadCancelled(6) - An upload was cancelled before it completed. The file is available for another upload. error(7) - An error occurred and the file was not successfully uploaded. The file is available for another upload.')
docsRphyRpdDevUsSignalQualityTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 15), )
if mibBuilder.loadTexts: docsRphyRpdDevUsSignalQualityTable.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevUsSignalQualityTable.setDescription('This table provide individual upstream signal quality values for RPDs.')
docsRphyRpdDevUsSignalQualityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 15, 1), ).setIndexNames((0, "DOCS-RPHY-MIB", "docsRphyRpdDevInfoUniqueId"), (0, "DOCS-RPHY-MIB", "docsRphyRpdDevUsSignalQualityRfPort"), (0, "DOCS-RPHY-MIB", "docsRphyRpdDevUsSignalQualityChannelIfIndex"))
if mibBuilder.loadTexts: docsRphyRpdDevUsSignalQualityEntry.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevUsSignalQualityEntry.setDescription('The conceptual row of docsRphyRpdDevUsSignalQualityTable. A row entry of this table represents the upstream signal quality values of a single RPD')
docsRphyRpdDevUsSignalQualityRfPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 15, 1, 1), Unsigned32())
if mibBuilder.loadTexts: docsRphyRpdDevUsSignalQualityRfPort.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevUsSignalQualityRfPort.setDescription('This key attribute reports the RPD RF port number carrying this US channel. This corresponds to the attribute RpdUsRfPortNum of the RpdUsRfPortRef object in the configuration Information Model.')
docsRphyRpdDevUsSignalQualityChannelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 15, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: docsRphyRpdDevUsSignalQualityChannelIfIndex.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevUsSignalQualityChannelIfIndex.setDescription('This attribute corresponds to the ifIndex of the Upstream Physical Channel of the CCAP Core for this US channel. Note that with upstream virtual combining, this attribute corresponds to the same CCAP Core ifIndex for different RPD unique Ids.')
docsRphyRpdDevUsSignalQualityRxMer = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setUnits('TenthdB').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevUsSignalQualityRxMer.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevUsSignalQualityRxMer.setDescription('This attribute reports an in-channel received average Modulation Error Ratio (MER). An RxMER sample is defined as an estimate, provided by the demodulator, of the ratio: (average constellation energy with equally likely symbols) / (average squared magnitude of error vector) RxMER is measured just prior to FEC (trellis/Reed-Solomon) decoding. RxMER includes the effects of the HFC channel as well as implementation effects of the modulator and demodulator. Error vector estimation may vary among demodulator implementations. The CCAP Core RxMER is averaged over a given number of bursts at the burst receiver, which may correspond to transmissions from multiple users. In the case of S-CDMA mode, RxMER is measured on the de-spread signal. For OFDMA channels, this attribute always reports 0.')
docsRphyRpdDevUsSignalQualityRxMerSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 15, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevUsSignalQualityRxMerSamples.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevUsSignalQualityRxMerSamples.setDescription('This attribute reports RxMerSamples which is a statistically significant number of bursts for the CCAP Core, processed to arrive at the RxMER value. For the CCAP Core, the MER measurement includes only valid bursts that are not in contention regions. For OFDMA channels, this attribute always reports 0.')
docsRphyRpdDevUsSignalQualityUnerroreds = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 15, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevUsSignalQualityUnerroreds.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevUsSignalQualityUnerroreds.setDescription('This attribute reports the count of codewords received on this channel without error. This includes all codewords, whether or not they were part of frames destined for this device. Reference: OFDMA FEC Error Reporting section of this specification.')
docsRphyRpdDevUsSignalQualityCorrecteds = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 15, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevUsSignalQualityCorrecteds.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevUsSignalQualityCorrecteds.setDescription('This attribute reports the count of codewords received on this channel with correctable errors. This includes all codewords, whether or not they were part of frames destined for this device. Reference: OFDMA FEC Error Reporting section of this specification.')
docsRphyRpdDevUsSignalQualityUncorrectables = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 1, 15, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdDevUsSignalQualityUncorrectables.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdDevUsSignalQualityUncorrectables.setDescription('This attribute reports the count of codewords received on this channel with uncorrectable errors. This includes all codewords, whether or not they were part of frames destined for this device. Reference: OFDMA FEC Error Reporting section of this specification.')
docsRphyRpdIfPhysEntityTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 1), )
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntityTable.setReference('DOCSIS DCA MHAv2 Remote PHY OSS Interface Specification CM-SP-R-OSSI-I04-160923, Entity section.')
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntityTable.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntityTable.setDescription('This table reports entities that exist within each Remote PHY Node that is communicating with the CCAP Core. Because the entities exist within the Remote PHY Nodes and not the CCAP Core, the RPDs communicate this information to the CCAP core via GCP. This object is based on the entPhysicalTable object specified in the ENTITY-MIB from RFC 4133. See the reference for additional requirements.')
docsRphyRpdIfPhysEntityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 1, 1), ).setIndexNames((0, "DOCS-RPHY-MIB", "docsRphyRpdDevInfoUniqueId"), (0, "DOCS-RPHY-MIB", "docsRphyRpdIfPhysEntityIndex"))
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntityEntry.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntityEntry.setDescription('Information about a particular physical entity. Each entry provides objects (docsRphyRpdIfPhysEntityDescr, docsRphyRpdIfPhysEntityVendorType, and docsRphyRpdIfPhysEntityClass) to help an NMS identify and characterize the entry and objects (docsRphyRpdIfPhysEntityContainedIn and docsRphyRpdIfPhysEntityParentRelPos) to help an NMS relate the particular entry to other entries in this table.')
docsRphyRpdIfPhysEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 1, 1, 1), PhysicalIndex())
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntityIndex.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntityIndex.setDescription('This key attribute reports an arbitrary value that uniquely identifies the physical entity. Index values for different physical entities are not necessarily contiguous.')
docsRphyRpdIfPhysEntityDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntityDescr.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntityDescr.setDescription("A textual description of physical entity. This object should contain a string that identifies the manufacturer's name for the physical entity and should be set to a distinct value for each version or model of the physical entity.")
docsRphyRpdIfPhysEntityVendorType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 1, 1, 3), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntityVendorType.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntityVendorType.setDescription("An indication of the vendor-specific hardware type of the physical entity. Note that this is different from the definition of MIB-II's sysObjectID. An agent should set this object to an enterprise-specific registration identifier value indicating the specific equipment type in detail. The associated instance of docsRphyRpdIfPhysEntityClass is used to indicate the general type of hardware device. If no vendor-specific registration identifier exists for this physical entity, or the value is unknown by this agent, then the value { 0 0 } is returned.")
docsRphyRpdIfPhysEntityContainedIn = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 1, 1, 4), PhysicalIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntityContainedIn.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntityContainedIn.setDescription("The value of docsRphyRpdIfPhysEntityIndex for the physical entity that 'contains' this physical entity. A value of zero indicates this physical entity is not contained in any other physical entity. Note that the set of 'containment' relationships define a strict hierarchy; that is, recursion is not allowed. In the event that a physical entity is contained by more than one physical entity (e.g., double-wide modules), this object should identify the containing entity with the lowest value of docsRphyRpdIfPhysEntityIndex.")
docsRphyRpdIfPhysEntityClass = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 1, 1, 5), IANAPhysicalClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntityClass.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntityClass.setDescription("An indication of the general hardware type of the physical entity. An agent should set this object to the standard enumeration value that most accurately indicates the general class of the physical entity, or the primary class if there is more than one entity. If no appropriate standard registration identifier exists for this physical entity, then the value 'other(1)' is returned. If the value is unknown by this agent, then the value 'unknown(2)' is returned.")
docsRphyRpdIfPhysEntityParentRelPos = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntityParentRelPos.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntityParentRelPos.setDescription("An indication of the relative position of this 'child' component among all its 'sibling' components. Sibling components are defined as docsRphyRpdIfPhysEntityEntries that share the same instance values of each of the docsRphyRpdIfPhysEntityContainedIn and docsRphyRpdIfPhysEntityClass objects. An NMS can use this object to identify the relative ordering for all sibling components of a particular parent (identified by the docsRphyRpdIfPhysEntityContainedIn instance in each sibling entry). If possible, this value should match any external labeling of the physical component. For example, for a container (e.g., card slot) labeled as 'slot #3', docsRphyRpdIfPhysEntityParentRelPos should have the value '3'. Note that the docsRphyRpdIfPhysEntityEntry for the module plugged in slot 3 should have an docsRphyRpdIfPhysEntityParentRelPos value of '1'. If the physical position of this component does not match any external numbering or clearly visible ordering, then user documentation or other external reference material should be used to determine the parent-relative position. If this is not possible, then the agent should assign a consistent (but possibly arbitrary) ordering to a given set of 'sibling' components, perhaps based on internal representation of the components. If the agent cannot determine the parent-relative position for some reason, or if the associated value of docsRphyRpdIfPhysEntityContainedIn is '0', then the value '-1' is returned. Otherwise, a non-negative integer is returned, indicating the parent-relative position of this physical entity. Parent-relative ordering normally starts from '1' and continues to 'N', where 'N' represents the highest positioned child entity. However, if the physical entities (e.g., slots) are labeled from a starting position of zero, then the first sibling should be associated with an docsRphyRpdIfPhysEntityParentRelPos value of '0'. Note that this ordering may be sparse or dense, depending on agent implementation. The actual values returned are not globally meaningful, as each 'parent' component may use different numbering algorithms. The ordering is only meaningful among siblings of the same parent component. The agent should retain parent-relative position values across reboots, either through algorithmic assignment or use of non-volatile storage.")
docsRphyRpdIfPhysEntityName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 1, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntityName.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntityName.setDescription("The textual name of the physical entity. The value of this object should be the name of the component as assigned by the local device and should be suitable for use in commands entered at the device's 'console'. This might be a text name (e.g., 'console') or a simple component number (e.g., port or module number, such as '1'), depending on the physical component naming syntax of the device. If there is no local name, or if this object is otherwise not applicable, then this object contains a zero-length string. Note that the value of docsRphyRpdIfPhysEntityName for two physical entities will be the same in the event that the console interface does not distinguish between them, e.g., slot-1 and the card in slot-1.")
docsRphyRpdIfPhysEntityHardwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 1, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntityHardwareRev.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntityHardwareRev.setDescription('The vendor-specific hardware revision string for the physical entity. The preferred value is the hardware revision identifier actually printed on the component itself (if present). Note that if revision information is stored internally in a non-printable (e.g., binary) format, then the agent must convert such information to a printable format in an implementation-specific manner. If no specific hardware revision string is associated with the physical component, or if this information is unknown to the agent, then this object will contain a zero-length string.')
docsRphyRpdIfPhysEntityFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 1, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntityFirmwareRev.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntityFirmwareRev.setDescription('The vendor-specific firmware revision string for the physical entity. Note that if revision information is stored internally in a non-printable (e.g., binary) format, then the agent must convert such information to a printable format in an implementation-specific manner. If no specific firmware programs are associated with the physical component, or if this information is unknown to the agent, then this object will contain a zero-length string.')
docsRphyRpdIfPhysEntitySoftwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 1, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntitySoftwareRev.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntitySoftwareRev.setDescription('The vendor-specific software revision string for the physical entity. Note that if revision information is stored internally in a non-printable (e.g., binary) format, then the agent must convert such information to a printable format in an implementation-specific manner. If no specific software programs are associated with the physical component, or if this information is unknown to the agent, then this object will contain a zero-length string.')
docsRphyRpdIfPhysEntitySerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 1, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntitySerialNum.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntitySerialNum.setDescription("The vendor-specific serial number string for the physical entity. The preferred value is the serial number string actually printed on the component itself (if present). On the first instantiation of a physical entity, the value of docsRphyRpdIfPhysEntitySerialNum associated with that entity is set to the correct vendor-assigned serial number, if this information is available to the agent. If a serial number is unknown or non-existent, the docsRphyRpdIfPhysEntitySerialNum will be set to a zero-length string instead. Note that implementations that can correctly identify the serial numbers of all installed physical entities do not need to provide write access to the docsRphyRpdIfPhysEntitySerialNum object. Agents that cannot provide non-volatile storage for the docsRphyRpdIfPhysEntitySerialNum strings are not required to implement write access for this object. Not every physical component will have a serial number, or even need one. Physical entities for which the associated value of the docsRphyRpdIfPhysEntityIsFRU object is equal to 'false(2)' (e.g., the repeater ports within a repeater module) do not need their own unique serial numbers. An agent does not have to provide write access for such entities and may return a zero-length string.")
docsRphyRpdIfPhysEntityMfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 1, 1, 12), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntityMfgName.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntityMfgName.setDescription('The name of the manufacturer of this physical component. The preferred value is the manufacturer name string actually printed on the component itself (if present). Note that comparisons between instances of the docsRphyRpdIfPhysEntityModelName, docsRphyRpdIfPhysEntityFirmwareRev, docsRphyRpdIfPhysEntitySoftwareRev, and the docsRphyRpdIfPhysEntitySerialNum objects are only meaningful amongst docsRphyRpdIfPhysEntityEntries with the same value of docsRphyRpdIfPhysEntityMfgName. If the manufacturer name string associated with the physical component is unknown to the agent, then this object will contain a zero-length string.')
docsRphyRpdIfPhysEntityModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 1, 1, 13), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntityModelName.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntityModelName.setDescription('The vendor-specific model name identifier string associated with this physical component. The preferred value is the customer-visible part number, which may be printed on the component itself. If the model name string associated with the physical component is unknown to the agent, then this object will contain a zero-length string.')
docsRphyRpdIfPhysEntityAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 1, 1, 14), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntityAlias.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntityAlias.setDescription("This object is an 'alias' name for the physical entity, as specified by a network manager, and provides a non-volatile 'handle' for the physical entity. On the first instantiation of a physical entity, the value of docsRphyRpdIfPhysEntityAlias associated with that entity is set to the zero-length string. However, the agent may set the value to a locally unique default value, instead of a zero-length string.")
docsRphyRpdIfPhysEntityAssetID = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 1, 1, 15), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntityAssetID.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntityAssetID.setDescription("This object is a user-assigned asset tracking identifier (as specified by a network manager) for the physical entity and provides non-volatile storage of this information. On the first instantiation of a physical entity, the value of docsRphyRpdIfPhysEntityAssetID associated with that entity is set to the zero-length string. Not every physical component will have an asset tracking identifier or even need one. Physical entities for which the associated value of the docsRphyRpdIfPhysEntityIsFRU object is equal to 'false(2)' (e.g., the repeater ports within a repeater module) do not need their own unique asset tracking identifier. An agent does not have to provide write access for such entities and may instead return a zero-length string. If no asset tracking information is associated with the physical component, then this object will contain a zero-length string.")
docsRphyRpdIfPhysEntityIsFRU = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 1, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntityIsFRU.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntityIsFRU.setDescription("This object indicates whether or not this physical entity is considered a 'field replaceable unit' by the vendor. If this object contains the value 'true(1)', then this docsRphyRpdIfPhysEntityEntry identifies a field replaceable unit. For all docsRphyRpdIfPhysEntityEntries that represent components permanently contained within a field replaceable unit, the value 'false(2)' should be returned for this object.")
docsRphyRpdIfPhysEntityMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 1, 1, 17), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntityMfgDate.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntityMfgDate.setDescription("This object contains the date of manufacturing of the managed entity. If the manufacturing date is unknown or not supported, the object is not instantiated. The special value '0000000000000000'H may also be returned in this case.")
docsRphyRpdIfPhysEntityUris = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 1, 1, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntityUris.setReference('RFC 3986, Uniform Resource Identifiers (URI): Generic Syntax, Section 2, August 1998.')
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntityUris.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntityUris.setDescription('This object contains identification information about the physical entity. The object contains URIs; therefore, the syntax of this object must conform to RFC 3986, Section 3. Multiple URIs may be present and are separated by white space characters. Leading and trailing white space characters are ignored. If no URI identification information is known about the physical entity, the object is not instantiated. A zero-length octet string may also be returned in this case.')
docsRphyRpdIfPhysEntityUUID = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 1, 1, 19), UUIDorZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntityUUID.setReference('RFC 4122, A Universally Unique IDentifier (UUID) URN Namespace, Section 4.1, July 2005.')
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntityUUID.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntityUUID.setDescription('This object contains identification information about the physical entity. The object contains a Universally Unique Identifier, the syntax of this object must conform to RFC 4122, Section 4.1. A zero-length octet string is returned if no UUID information is known.')
docsRphyRpdIfPhysEntityCoreIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 1, 1, 20), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntityCoreIfIndex.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntityCoreIfIndex.setDescription('If the entity represents an ifTable interface on the CCAP Core, this attribute provides the ifIndex assigned by the CCAP Core to that entity. Otherwise, this attribute returns a value of zero.')
docsRphyRpdIfPhysEntSensorTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 2), )
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntSensorTable.setReference('DOCSIS DCA MHAv2 Remote PHY OSS Interface Specification CM-SP-R-OSSI-I04-160923, Sensor section.')
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntSensorTable.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntSensorTable.setDescription('This table contains one row per physical sensor represented by an associated row in the docsRphyRpdIfPhysEntityTable. See the reference for additional requirements.')
docsRphyRpdIfPhysEntSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 2, 1), ).setIndexNames((0, "DOCS-RPHY-MIB", "docsRphyRpdDevInfoUniqueId"), (0, "DOCS-RPHY-MIB", "docsRphyRpdIfPhysEntityIndex"))
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntSensorEntry.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntSensorEntry.setDescription('Information about a particular physical sensor. An entry in this table describes the present reading of a sensor, the measurement units and scale, and sensor operational status. Entries are created in this table by the agent. The CCAP Core SHOULD create an entry for each physical sensor at the same time as the associated Entity table instance. The CCAP Core SHOULD delete an entry if the associated Entity table entry is deleted.')
docsRphyRpdIfPhysEntSensorType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 2, 1, 1), EntitySensorDataType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntSensorType.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntSensorType.setDescription('This attribute reports the type of data returned by the associated Value attribute. The CCAP Core SHOULD set the value during instance creation. The CCAP Core SHOULD NOT change the value during operation.')
docsRphyRpdIfPhysEntSensorScale = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 2, 1, 2), EntitySensorDataScale()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntSensorScale.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntSensorScale.setDescription('This attribute reports a data scaling factor, represented with an International System of Units (SI) prefix. The actual data units are determined by examining this attribute together with the associated SensorType attribute. This attribute is defined together with SensorType and Precision. Together, these three attributes are used to identify the semantics of the Value attribute.')
docsRphyRpdIfPhysEntSensorPrecision = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 2, 1, 3), EntitySensorPrecision()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntSensorPrecision.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntSensorPrecision.setDescription("This attribute reports the number of decimal places of precision in fixed-point sensor values returned by the associated Value attribute. This attribute should be set to '0' when the associated SensorType value is not a fixed-point type: e.g., 'percentRH(9)', 'rpm(10)', 'cmm(11)', or 'truthvalue(12)'.")
docsRphyRpdIfPhysEntSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 2, 1, 4), EntitySensorValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntSensorValue.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntSensorValue.setDescription('This attribute reports the most recent measurement obtained by the RPD for this sensor. To correctly interpret the value of this object, the associated SensorType, SensorScale, and SensorPrecision attributes must also be examined.')
docsRphyRpdIfPhysEntSensorOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 2, 1, 5), EntitySensorStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntSensorOperStatus.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntSensorOperStatus.setDescription('The operational status of the sensor.')
docsRphyRpdIfPhysEntSensorUnitsDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 2, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntSensorUnitsDisplay.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntSensorUnitsDisplay.setDescription('A textual description of the data units that should be used in the display of SensorValue.')
docsRphyRpdIfPhysEntSensorValueTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 2, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntSensorValueTimeStamp.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntSensorValueTimeStamp.setDescription('This attribute reports the value of RpdSysUpTime at the time the status and/or value of this sensor was last obtained by the RPD.')
docsRphyRpdIfPhysEntSensorValueUpdateRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 2, 1, 8), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntSensorValueUpdateRate.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfPhysEntSensorValueUpdateRate.setDescription('This attribute reports an indication of the frequency that the CCAP Core updates the associated Value object, represented in milliseconds. The value zero indicates: - the sensor value is updated on demand - the sensor value is updated when the sensor value changes (event-driven) - the RPD does not know the update rate.')
docsRphyRpdIfEnetTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 3), )
if mibBuilder.loadTexts: docsRphyRpdIfEnetTable.setReference('DOCSIS DCA MHAv2 Remote PHY OSS Interface Specification CM-SP-R-OSSI-I04-160923, EnetIf section.')
if mibBuilder.loadTexts: docsRphyRpdIfEnetTable.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfEnetTable.setDescription('This table provides details about the Ethernet interfaces on the RPD. The attributes of this object are based on the ifTable/ifXTable specified in RFC 2863. The CCAP Core MUST create an instance of this object for every Ethernet interface on the RPD. See the reference for additional requirements.')
docsRphyRpdIfEnetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 3, 1), ).setIndexNames((0, "DOCS-RPHY-MIB", "docsRphyRpdDevInfoUniqueId"), (0, "DOCS-RPHY-MIB", "docsRphyRpdIfEnetPortIndex"))
if mibBuilder.loadTexts: docsRphyRpdIfEnetEntry.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfEnetEntry.setDescription('An entry containing management information applicable to a particular interface. The Ethernet IfIndex is chosen by the RPD.')
docsRphyRpdIfEnetPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: docsRphyRpdIfEnetPortIndex.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfEnetPortIndex.setDescription('This key attribute reports a unique index for this Ethernet port interface.')
docsRphyRpdIfEnetDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 3, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfEnetDescr.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfEnetDescr.setDescription('A textual string containing information about the interface. This string should include the name of the manufacturer, the product name and the version of the interface hardware/software.')
docsRphyRpdIfEnetName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 3, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfEnetName.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfEnetName.setDescription('This attribute reports a textual string representing a name that describes the interface. The CCAP Core MUST populate this object with the ID that is used in GCP for this port.')
docsRphyRpdIfEnetAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 3, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfEnetAlias.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfEnetAlias.setDescription("This attribute reports an Alias for the interface. On the first instantiation of an interface, the value of Alias associated with that interface is the zero-length string. As and when a value is written into an instance of Alias through a network management operation, then the RPD retains the supplied value in the Alias instance associated with the same interface for as long as that interface remains instantiated, including across all re-initializations/reboots of the network management system, including those which result in a change of the interface's EnetPortIndex value.")
docsRphyRpdIfEnetType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 3, 1, 5), IANAifType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfEnetType.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfEnetType.setDescription('This attribute reports the type of interface. Additional values for Type are assigned by the Internet Assigned Numbers Authority (IANA), through updating the syntax of the IANAifType textual convention. The types are defined in the IANAifType-MIB. The value reported by this attribute is ethernetCsmacd.')
docsRphyRpdIfEnetMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfEnetMtu.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfEnetMtu.setDescription('This attribute reports the size of the largest packet which can be sent/received on the interface, specified in octets. For interfaces that are used for transmitting network datagrams, this is the size of the largest network datagram that can be sent on the interface.')
docsRphyRpdIfEnetPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 3, 1, 7), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfEnetPhysAddress.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfEnetPhysAddress.setDescription("This attribute reports the interface's address at its protocol sub-layer. For example, for an 802.x interface, this attribute normally contains a MAC address. The interface's media-specific MIB defines the bit and byte ordering and the format of the value of this attribute. For interfaces which do not have such an address (e.g., a serial line), this attribute reports an octet string of zero length.")
docsRphyRpdIfEnetAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfEnetAdminStatus.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfEnetAdminStatus.setDescription('This attribute reports the state of the interface. The testing(3) state indicates that no operational packets can be passed. When a managed system initializes, all interfaces start with AdminStatus in the down(2) state. As a result of either explicit management action or per configuration information retained by the managed system, AdminStatus is then changed to either the up(1) or testing(3) states (or remains in the down(2) state).')
docsRphyRpdIfEnetOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5), ("notPresent", 6), ("lowerLayerDown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfEnetOperStatus.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfEnetOperStatus.setDescription('This attribute reports the current operational state of the interface. The testing(3) state indicates that no operational packets can be passed. If AdminStatus is down(2) then ifOperStatus should be down(2). If AdminStatus is changed to up(1), then OperStatus should change to up(1) if the interface is ready to transmit and receive network traffic; it should change to dormant(5) if the interface is waiting for external actions (such as a serial line waiting for an incoming connection); it should remain in the down(2) state if and only if there is a fault that prevents it from going to the up(1) state; it should remain in the notPresent(6) state if the interface has missing (typically, hardware) components.')
docsRphyRpdIfEnetLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 3, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfEnetLastChange.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfEnetLastChange.setDescription('This attribute reports the value of RpdSysUpTime at the time the interface entered its current operational state. If the current state was entered prior to the last re-initialization of the local network management subsystem, then this attribute reports a zero value.')
docsRphyRpdIfEnetLinkUpDownTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 3, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfEnetLinkUpDownTrapEnable.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfEnetLinkUpDownTrapEnable.setDescription('This attribute reports whether linkup/linkdown traps are generated for this interface. A value of true indicates that traps are enabled. A value of false indicates that traps are disabled.')
docsRphyRpdIfEnetHighSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 3, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfEnetHighSpeed.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfEnetHighSpeed.setDescription("This attribute reports an estimate of the interface's current bandwidth in units of 1,000,000 bits per second. If this attribute reports a value of 'n' then the speed of the interface is somewhere in the range of 'n-500,000' to 'n+499,999'. For interfaces which do not vary in bandwidth or for those where no accurate estimation can be made, this attribute reports the nominal bandwidth.")
docsRphyRpdIfEnetPromiscuousMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 3, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfEnetPromiscuousMode.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfEnetPromiscuousMode.setDescription("This attribute reports a value of '2' (false) if this interface only accepts packets/frames that are addressed to this interface. This attribute reports a value of '1' (true) when the station accepts all packets/frames transmitted on the media. The value of PromiscuousMode does not affect the reception of broadcast and multicast packets/frames by the interface.")
docsRphyRpdIfEnetConnectorPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 3, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfEnetConnectorPresent.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfEnetConnectorPresent.setDescription("This attribute reports the value 'true' if the interface sublayer has a physical connector and the value 'false' otherwise.")
docsRphyRpdIfEnetStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 4), )
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsTable.setReference('DOCSIS DCA MHAv2 Remote PHY OSS Interface Specification CM-SP-R-OSSI-I04-160923, EnetIfStats section.')
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsTable.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsTable.setDescription('This table reports statistics for the Ethernet interfaces on the RPD. The attributes of this object are based on the ifTable/ifXTable specified in RFC 2863. The CCAP Core MUST create an instance of this object for every EnetIf object instance. Discontinuities in the value of these counters can occur at reinitialization of the managed system, and at other times as indicated by the value of CounterDiscontinuityTime. See the reference for additional requirements.')
docsRphyRpdIfEnetStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 4, 1), )
docsRphyRpdIfEnetEntry.registerAugmentions(("DOCS-RPHY-MIB", "docsRphyRpdIfEnetStatsEntry"))
docsRphyRpdIfEnetStatsEntry.setIndexNames(*docsRphyRpdIfEnetEntry.getIndexNames())
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsEntry.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsEntry.setDescription('An entry containing statistical information applicable to a particular RPD ethernet interface.')
docsRphyRpdIfEnetStatsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsInOctets.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsInOctets.setDescription('The total number of octets received on the interface, including framing characters.')
docsRphyRpdIfEnetStatsOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsOutOctets.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsOutOctets.setDescription('The total number of octets transmitted out of the interface, including framing characters.')
docsRphyRpdIfEnetStatsInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsInFrames.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsInFrames.setDescription('The total number of frames received on the interface, including framing characters.')
docsRphyRpdIfEnetStatsOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsOutFrames.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsOutFrames.setDescription('The total number of frames transmitted out of the interface, including framing characters.')
docsRphyRpdIfEnetStatsInUnicastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsInUnicastOctets.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsInUnicastOctets.setDescription('The number of octets, delivered by this sub-layer to a higher (sub-)layer, which were not addressed to a multicast or broadcast address at this sub-layer.')
docsRphyRpdIfEnetStatsOutUnicastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsOutUnicastOctets.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsOutUnicastOctets.setDescription('The total number of octets that higher-level protocols requested be transmitted, and which were not addressed to a multicast or broadcast address at this sub-layer, including those that were discarded or not sent.')
docsRphyRpdIfEnetStatsInUnicastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsInUnicastFrames.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsInUnicastFrames.setDescription('The number of frames, delivered by this sub-layer to a higher (sub-)layer, which were not addressed to a multicast or broadcast address at this sub-layer.')
docsRphyRpdIfEnetStatsOutUnicastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsOutUnicastFrames.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsOutUnicastFrames.setDescription('The total number of frames that higher-level protocols requested be transmitted, and which were not addressed to a multicast or broadcast address at this sub-layer, including those that were discarded or not sent.')
docsRphyRpdIfEnetStatsInMulticastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsInMulticastOctets.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsInMulticastOctets.setDescription('The number of octets, delivered by this sub-layer to a higher (sub-)layer, which were addressed to a multicast address at this sub-layer. For a MAC layer protocol, this includes both Group and Functional addresses.')
docsRphyRpdIfEnetStatsOutMulticastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsOutMulticastOctets.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsOutMulticastOctets.setDescription('The total number of octets that higher-level protocols requested be transmitted, and which were addressed to a multicast address at this sub-layer, including those that were discarded or not sent. For a MAC layer protocol, this includes both Group and Functional addresses.')
docsRphyRpdIfEnetStatsInMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsInMulticastFrames.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsInMulticastFrames.setDescription('The number of frames, delivered by this sub-layer to a higher (sub-)layer, which were addressed to a multicast address at this sub-layer. For a MAC layer protocol, this includes both Group and Functional addresses.')
docsRphyRpdIfEnetStatsOutMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsOutMulticastFrames.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsOutMulticastFrames.setDescription('The total number of frames that higher-level protocols requested be transmitted, and which were addressed to a multicast address at this sub-layer, including those that were discarded or not sent. For a MAC layer protocol, this includes both Group and Functional addresses.')
docsRphyRpdIfEnetStatsInBroadcastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 4, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsInBroadcastOctets.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsInBroadcastOctets.setDescription('The number of octets, delivered by this sub-layer to a higher (sub-)layer, which were addressed to a broadcast address at this sub-layer.')
docsRphyRpdIfEnetStatsOutBroadcastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 4, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsOutBroadcastOctets.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsOutBroadcastOctets.setDescription('The total number of octets that higher-level protocols requested be transmitted, and which were addressed to a broadcast address at this sub-layer, including those that were discarded or not sent.')
docsRphyRpdIfEnetStatsInBroadcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 4, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsInBroadcastFrames.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsInBroadcastFrames.setDescription('The number of frames, delivered by this sub-layer to a higher (sub-)layer, which were addressed to a broadcast address at this sub-layer.')
docsRphyRpdIfEnetStatsOutBroadcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 4, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsOutBroadcastFrames.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsOutBroadcastFrames.setDescription('The total number of frames that higher-level protocols requested be transmitted, and which were addressed to a broadcast address at this sub-layer, including those that were discarded or not sent.')
docsRphyRpdIfEnetStatsInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 4, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsInDiscards.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsInDiscards.setDescription('The number of inbound packets which were chosen to be discarded even though no errors had been detected to prevent their being deliverable to a higher-layer protocol. One possible reason for discarding such a packet could be to free up buffer space.')
docsRphyRpdIfEnetStatsOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 4, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsOutDiscards.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsOutDiscards.setDescription('The number of outbound packets which were chosen to be discarded even though no errors had been detected to prevent their being transmitted. One possible reason for discarding such a packet could be to free up buffer space.')
docsRphyRpdIfEnetStatsInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 4, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsInErrors.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsInErrors.setDescription('For packet-oriented interfaces, the number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol. For character- oriented or fixed-length interfaces, the number of inbound transmission units that contained errors preventing them from being deliverable to a higher-layer protocol.')
docsRphyRpdIfEnetStatsOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 4, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsOutErrors.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsOutErrors.setDescription('For packet-oriented interfaces, the number of outbound packets that could not be transmitted because of errors. For character-oriented or fixed-length interfaces, the number of outbound transmission units that could not be transmitted because of errors.')
docsRphyRpdIfEnetStatsInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 4, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsInUnknownProtos.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsInUnknownProtos.setDescription('For packet-oriented interfaces, the number of packets received via the interface which were discarded because of an unknown or unsupported protocol. For character-oriented or fixed-length interfaces that support protocol multiplexing the number of transmission units received via the interface which were discarded because of an unknown or unsupported protocol. For any interface that does not support protocol multiplexing, this counter will always be 0.')
docsRphyRpdIfEnetStatsCounterDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 4, 1, 22), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsCounterDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfEnetStatsCounterDiscontinuityTime.setDescription("The value of sysUpTime on the most recent occasion at which any one or more of this interface's counters suffered a discontinuity. The relevant counters are the specific instances associated with this interface of any Counter32 or Counter64 object contained in the docsRphyRpdIfEnetStatsTable. If no such discontinuities have occurred since the last re- initialization of the local management subsystem, then this object contains a zero value.")
docsRphyRpdIfRpdEnetToCoreEntityMapTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 5), )
if mibBuilder.loadTexts: docsRphyRpdIfRpdEnetToCoreEntityMapTable.setReference('DOCSIS DCA MHAv2 Remote PHY OSS Interface Specification CM-SP-R-OSSI-I04-160923, EnetGcpToEntityMap section.')
if mibBuilder.loadTexts: docsRphyRpdIfRpdEnetToCoreEntityMapTable.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfRpdEnetToCoreEntityMapTable.setDescription("If the RPD implements an Entity for an Ethernet port (which is optional), this table provides the mapping between the RPD's EnetPortIndex as signaled in GCP and the corresponding docsRphyRpdIfPhysEntityIndex assigned by the CCAP Core to report that entity. See the reference for additional requirements.")
docsRphyRpdIfRpdEnetToCoreEntityMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 5, 1), ).setIndexNames((0, "DOCS-RPHY-MIB", "docsRphyRpdDevInfoUniqueId"), (0, "DOCS-RPHY-MIB", "docsRphyRpdIfEnetPortIndex"))
if mibBuilder.loadTexts: docsRphyRpdIfRpdEnetToCoreEntityMapEntry.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfRpdEnetToCoreEntityMapEntry.setDescription('An entry in docsRphyRpdIfRpdEnetToCoreEntityMapTable.')
docsRphyRpdIfRpdEnetToCoreEntityMapEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfRpdEnetToCoreEntityMapEntityIndex.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfRpdEnetToCoreEntityMapEntityIndex.setDescription('The value of this attribute must match the value of docsRphyRpdIfPhysEntityIndex for the row in docsRphyRpdIfPhysEntityTable that reports the RPD Ethernet port signaled in GCP with EnetPortIndex.')
docsRphyRpdIfCoreToRpdMapTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 6), )
if mibBuilder.loadTexts: docsRphyRpdIfCoreToRpdMapTable.setReference('DOCSIS DCA MHAv2 Remote PHY OSS Interface Specification CM-SP-R-OSSI-I04-160923, IfToGcpMap section.')
if mibBuilder.loadTexts: docsRphyRpdIfCoreToRpdMapTable.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfCoreToRpdMapTable.setDescription('This table maps certain CCAP Core ifTable interfaces identified with an ifIndex to an RPD interface identified in GCP. See the reference for additional requirements.')
docsRphyRpdIfCoreToRpdMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsRphyRpdIfCoreToRpdMapEntry.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfCoreToRpdMapEntry.setDescription('An entry in docsRphyRpdIfCoreToRpdMapTable. An entry exists for each RPD interface directly represented in the CCAP ifTable. The IfIndex corresponds to a CCAP Core ifIndex for one of the following interface types implemented on an RPD: - docsCableDownstream(128) - docsCableUpstreamChannel(205) - docsCableUpstreamRfPort(255) - docsCableDownstreamRfPort(256) - docsCableDownstreamOfdm(277) - docsCableUpstreamOfdma(278) Note that this table does not contain an instance for ifType ethernetCsmacd(6) because the Ethernet ports of the RPD are considered internal to a logical CCAP and are not reported in the CCAP ifTable.')
docsRphyRpdIfCoreToRpdMapRpdUniqueId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 6, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfCoreToRpdMapRpdUniqueId.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfCoreToRpdMapRpdUniqueId.setDescription('This attribute specifies the MAC address associated with the lowest numbered CIN facing Ethernet port. The value of this attribute matches the value of the docsRphyRpdDevInfoUniqueId attribute from the docsRphyRpdDevInfoTable.')
docsRphyRpdIfCoreToRpdMapRpdRfPortDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 6, 1, 2), IfDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfCoreToRpdMapRpdRfPortDirection.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfCoreToRpdMapRpdRfPortDirection.setDescription("This attribute reports the direction of an RF port, which together with RpdRfPortIndex uniquely identifies an RF port on the RPD. The RF port direction is signalled in the GCP 'RfPortType' TLV 13.2 for an RF port interface or implied by the value of the GCP 'RfChannelType' TLV 12.2 for an RF channel interface.")
docsRphyRpdIfCoreToRpdMapRpdRfPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 6, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfCoreToRpdMapRpdRfPortIndex.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfCoreToRpdMapRpdRfPortIndex.setDescription("This attribute reports the Index of an RF port on an RPD, which together with RpdRfPortDirection uniquely identifies an RF port on the RPD. The value matches the value signaled in GCP 'RfPortIndex' TLV 12.1 or the GCP 'RfPortIndex1' TLV 13.1.")
docsRphyRpdIfCoreToRpdMapRpdRfChanType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 6, 1, 4), RphyChannelType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfCoreToRpdMapRpdRfChanType.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfCoreToRpdMapRpdRfChanType.setDescription("For RF channel interfaces, This attribute reports the type of the channel as signaled in the GCP 'RfChannelType' TLV 12.2. For RF port interfaces, this attribute must be set to other(0). Each value of this attribute corresponds to a separate sequence of channel indices.")
docsRphyRpdIfCoreToRpdMapRpdRfChanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 6, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfCoreToRpdMapRpdRfChanIndex.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfCoreToRpdMapRpdRfChanIndex.setDescription("For interfaces corresponding to RF channels, this attribute reports the channel of the type specified in RpdRfChannelType, and matches the value signaled in the GCP 'RfChannelIndex' TLV 12.3. For RF port interfaces, this attribute reports 0.")
docsRphyRpdIfRpdToCoreMapTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 7), )
if mibBuilder.loadTexts: docsRphyRpdIfRpdToCoreMapTable.setReference('DOCSIS DCA MHAv2 Remote PHY OSS Interface Specification CM-SP-R-OSSI-I04-160923, GcpToIfMap section.')
if mibBuilder.loadTexts: docsRphyRpdIfRpdToCoreMapTable.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfRpdToCoreMapTable.setDescription('This table maps certain RPD interface identified via GCP integers to an ifIndex reported by the CCAP Core. This table instruments the same information as the docsRphyRpdIfCoreToRpdMapTable, but with different indexing than that table. See the reference for additional requirements.')
docsRphyRpdIfRpdToCoreMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 7, 1), ).setIndexNames((0, "DOCS-RPHY-MIB", "docsRphyRpdDevInfoUniqueId"), (0, "DOCS-RPHY-MIB", "docsRphyRpdIfRpdToCoreMapRpdRfPortDirection"), (0, "DOCS-RPHY-MIB", "docsRphyRpdIfRpdToCoreMapRpdRfPortIndex"), (0, "DOCS-RPHY-MIB", "docsRphyRpdIfRpdToCoreMapRpdRfChanType"), (0, "DOCS-RPHY-MIB", "docsRphyRpdIfRpdToCoreMapRpdRfChanIndex"))
if mibBuilder.loadTexts: docsRphyRpdIfRpdToCoreMapEntry.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfRpdToCoreMapEntry.setDescription("An entry in docsRphyRpdIfRpdToCoreMapTable. An entry exists for each RPD interface directly represented in the CCAP ifTable. The index 'CoreIfIndex' corresponds to a CCAP core ifIndex for one of the following interface types implemented on an RPD: - docsCableDownstream(128) - docsCableUpstreamChannel(205) - docsCableUpstreamRfPort(255) - docsCableDownstreamRfPort(256) - docsCableDownstreamOfdm(277) - docsCableUpstreamOfdma(278) Note that this table does not contain an instance for ifType ethernetCsmacd(6) because the Ethernet ports of the RPD are considered internal to a logical CCAP and are not reported in the CCAP ifTable.")
docsRphyRpdIfRpdToCoreMapRpdRfPortDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 7, 1, 1), IfDirection())
if mibBuilder.loadTexts: docsRphyRpdIfRpdToCoreMapRpdRfPortDirection.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfRpdToCoreMapRpdRfPortDirection.setDescription("This attribute reports the direction of an RF port, which together with RpdRfPortIndex uniquely identifies an RF port on the RPD. The RF port direction is signalled in the GCP 'RfPortType' TLV 13.2 for an RF port interface or implied by the value of the GCP 'RfChannelType' TLV 12.2 for an RF channel interface.")
docsRphyRpdIfRpdToCoreMapRpdRfPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 7, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: docsRphyRpdIfRpdToCoreMapRpdRfPortIndex.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfRpdToCoreMapRpdRfPortIndex.setDescription("This attribute reports the Index of an RF port on an RPD, which together with RpdRfPortDirection uniquely identifies an RF port on the RPD. The value matches the value signaled in GCP 'RfPortIndex' TLV 12.1 or the GCP 'RfPortIndex1' TLV 13.1.")
docsRphyRpdIfRpdToCoreMapRpdRfChanType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 7, 1, 3), RphyChannelType())
if mibBuilder.loadTexts: docsRphyRpdIfRpdToCoreMapRpdRfChanType.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfRpdToCoreMapRpdRfChanType.setDescription("For RF channel interfaces, This attribute reports the type of the channel as signaled in the GCP 'RfChannelType' TLV 12.2. For RF port interfaces, this attribute must be set to other(0). Each value of this attribute corresponds to a separate sequence of channel indices.")
docsRphyRpdIfRpdToCoreMapRpdRfChanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 7, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: docsRphyRpdIfRpdToCoreMapRpdRfChanIndex.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfRpdToCoreMapRpdRfChanIndex.setDescription("For interfaces corresponding to RF channels, this attribute reports the channel of the type specified in RpdRfChannelType, and matches the value signaled in the GCP 'RfChannelIndex' TLV 12.3. For RF port interfaces, this attribute reports 0.")
docsRphyRpdIfRpdToCoreMapCoreIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 2, 7, 1, 5), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIfRpdToCoreMapCoreIfIndex.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIfRpdToCoreMapCoreIfIndex.setDescription('This key attribute reports the CCAP Core IfIndex for the RPD Interface identified in GCP.')
docsRphyRpdIpv4GrpTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 1), )
if mibBuilder.loadTexts: docsRphyRpdIpv4GrpTable.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpv4GrpTable.setDescription('The table containing per-RPD IPv4-specific information.')
docsRphyRpdIpv4GrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 1, 1), ).setIndexNames((0, "DOCS-RPHY-MIB", "docsRphyRpdDevInfoUniqueId"))
if mibBuilder.loadTexts: docsRphyRpdIpv4GrpEntry.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpv4GrpEntry.setDescription('An entry containing IPv4-specific information for a specific RPD.')
docsRphyRpdIpv4GrpDefaultTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpv4GrpDefaultTTL.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpv4GrpDefaultTTL.setDescription('The default value inserted into the Time-To-Live field of the IPv4 header of datagrams originated at this entity, whenever a TTL value is not supplied by the transport layer protocol.')
docsRphyRpdIpv4GrpInterfaceTableLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 1, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpv4GrpInterfaceTableLastChange.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpv4GrpInterfaceTableLastChange.setDescription('This attribute reports the value of RpdSysUpTime on the most recent occasion at which an instance of the Ipv4Interface object was added or deleted, or when a ReasmMaxSize or an EnableStatus attribute of the Ipv4Interface object was modified.')
docsRphyRpdIpv6GrpTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 2), )
if mibBuilder.loadTexts: docsRphyRpdIpv6GrpTable.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpv6GrpTable.setDescription('The table containing per-RPD IPv6-specific information.')
docsRphyRpdIpv6GrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 2, 1), ).setIndexNames((0, "DOCS-RPHY-MIB", "docsRphyRpdDevInfoUniqueId"))
if mibBuilder.loadTexts: docsRphyRpdIpv6GrpEntry.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpv6GrpEntry.setDescription('An entry containing IPv6-specific information for a specific RPD.')
docsRphyRpdIpv6GrpIpDefaultHopLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpv6GrpIpDefaultHopLimit.setReference('RFC 2461 Section 6.3.2')
if mibBuilder.loadTexts: docsRphyRpdIpv6GrpIpDefaultHopLimit.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpv6GrpIpDefaultHopLimit.setDescription('The default value inserted into the Hop Limit field of the IPv6 header of datagrams originated at this entity whenever a Hop Limit value is not supplied by the transport layer protocol.')
docsRphyRpdIpv6GrpInterfaceTableLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 2, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpv6GrpInterfaceTableLastChange.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpv6GrpInterfaceTableLastChange.setDescription('This attribute reports the value of RpdSysUpTime on the most recent occasion at which an instance of the Ipv6Interface object was added or deleted or when a ReasmMaxSize, InterfaceIdentifier, EnableStatus, ReachableTime, RetransmitTime, or Forwarding attribute of the Ipv6Interface object was modified.')
docsRphyRpdIpv6GrpIfStatsTableLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpv6GrpIfStatsTableLastChange.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpv6GrpIfStatsTableLastChange.setDescription('This attribute reports the value of RpdSysUpTime on the most recent occasion at which an instance of the ipIfStats object was added or deleted.')
docsRphyRpdIpv4InterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 3), )
if mibBuilder.loadTexts: docsRphyRpdIpv4InterfaceTable.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpv4InterfaceTable.setDescription('The table containing per-interface IPv4-specific information.')
docsRphyRpdIpv4InterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 3, 1), ).setIndexNames((0, "DOCS-RPHY-MIB", "docsRphyRpdDevInfoUniqueId"), (0, "DOCS-RPHY-MIB", "docsRphyRpdIfEnetPortIndex"))
if mibBuilder.loadTexts: docsRphyRpdIpv4InterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpv4InterfaceEntry.setDescription("An entry containing IPv4-specific information for an RPD's ethernet port.")
docsRphyRpdIpv4InterfaceEnableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpv4InterfaceEnableStatus.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpv4InterfaceEnableStatus.setDescription('The indication of whether IPv4 is enabled (up) or disabled (down) on this interface. This object does not affect the state of the interface itself, only its connection to an IPv4 stack. The IF-MIB should be used to control the state of the interface.')
docsRphyRpdIpv4InterfaceRetransmitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 3, 1, 2), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpv4InterfaceRetransmitTime.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpv4InterfaceRetransmitTime.setDescription('The time between retransmissions of ARP requests to a neighbor when resolving the address or when probing the reachability of a neighbor.')
docsRphyRpdIpv6InterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 4), )
if mibBuilder.loadTexts: docsRphyRpdIpv6InterfaceTable.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpv6InterfaceTable.setDescription('The table containing per-interface IPv6-specific information.')
docsRphyRpdIpv6InterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 4, 1), ).setIndexNames((0, "DOCS-RPHY-MIB", "docsRphyRpdDevInfoUniqueId"), (0, "DOCS-RPHY-MIB", "docsRphyRpdIfEnetPortIndex"))
if mibBuilder.loadTexts: docsRphyRpdIpv6InterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpv6InterfaceEntry.setDescription("An entry containing IPv6-specific information for an RPD's ethernet port.")
docsRphyRpdIpv6InterfaceIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 4, 1, 1), Ipv6AddressIfIdentifierTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpv6InterfaceIdentifier.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpv6InterfaceIdentifier.setDescription('The Interface Identifier for this interface. The Interface Identifier is combined with an address prefix to form an interface address. By default, the Interface Identifier is auto-configured according to the rules of the link type to which this interface is attached. A zero length identifier may be used where appropriate.')
docsRphyRpdIpv6InterfaceEnableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpv6InterfaceEnableStatus.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpv6InterfaceEnableStatus.setDescription('The indication of whether IPv6 is enabled (up) or disabled (down) on this interface. This object does not affect the state of the interface itself, only its connection to an IPv6 stack. The IF-MIB should be used to control the state of the interface.')
docsRphyRpdIpv6InterfaceReachableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 4, 1, 3), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpv6InterfaceReachableTime.setReference('RFC 2461, Section 6.3.2')
if mibBuilder.loadTexts: docsRphyRpdIpv6InterfaceReachableTime.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpv6InterfaceReachableTime.setDescription('The time a neighbor is considered reachable after receiving a reachability confirmation.')
docsRphyRpdIpv6InterfaceRetransmitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 4, 1, 4), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpv6InterfaceRetransmitTime.setReference('RFC 2461, Section 6.3.2')
if mibBuilder.loadTexts: docsRphyRpdIpv6InterfaceRetransmitTime.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpv6InterfaceRetransmitTime.setDescription('The time between retransmissions of Neighbor Solicitation messages to a neighbor when resolving the address or when probing the reachability of a neighbor.')
docsRphyRpdIpIfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 5), )
if mibBuilder.loadTexts: docsRphyRpdIpIfStatsTable.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpIfStatsTable.setDescription("This table provides statistics for IP Packets sent or received by an RPD's own IP Address. It is modeled after the IP-MIB IpIfStatsTable described in RFC 4293; however, all counters are 64 bit. Discontinuities in the value of these counters can occur at re-initialization of the management system, and at other times as indicated by the value of the DiscontinuityTime attribute in this table.")
docsRphyRpdIpIfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 5, 1), ).setIndexNames((0, "DOCS-RPHY-MIB", "docsRphyRpdDevInfoUniqueId"), (0, "DOCS-RPHY-MIB", "docsRphyRpdIpIfStatsIPVersion"), (0, "DOCS-RPHY-MIB", "docsRphyRpdIfEnetPortIndex"))
if mibBuilder.loadTexts: docsRphyRpdIpIfStatsEntry.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpIfStatsEntry.setDescription('An interface statistics entry containing objects for a particular interface and version of IP.')
docsRphyRpdIpIfStatsIPVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 5, 1, 1), InetVersion())
if mibBuilder.loadTexts: docsRphyRpdIpIfStatsIPVersion.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpIfStatsIPVersion.setDescription('This key attribute reports the IP version of this entry.')
docsRphyRpdIpIfStatsInReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 5, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpIfStatsInReceives.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpIfStatsInReceives.setDescription('The total number of input IP datagrams received, including those received in error.')
docsRphyRpdIpIfStatsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 5, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpIfStatsInOctets.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpIfStatsInOctets.setDescription('The total number of octets received in input IP datagrams, including those received in error.')
docsRphyRpdIpIfStatsInHdrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 5, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpIfStatsInHdrErrors.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpIfStatsInHdrErrors.setDescription('The number of input IP datagrams discarded due to errors in their IP headers, including version number mismatch, other format errors, hop count exceeded, errors discovered in processing their IP options, etc.')
docsRphyRpdIpIfStatsInNoRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 5, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpIfStatsInNoRoutes.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpIfStatsInNoRoutes.setDescription('The number of input IP datagrams discarded because no route could be found to transmit them to their destination.')
docsRphyRpdIpIfStatsInAddrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpIfStatsInAddrErrors.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpIfStatsInAddrErrors.setDescription("The number of input IP datagrams discarded because the IP address in their IP header's destination field was not a valid address to be received at this entity. This count includes invalid addresses (e.g., ::0). For entities that are not IP routers and therefore do not forward datagrams, this counter includes datagrams discarded because the destination address was not a local address.")
docsRphyRpdIpIfStatsInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 5, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpIfStatsInUnknownProtos.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpIfStatsInUnknownProtos.setDescription('The number of locally-addressed IP datagrams received successfully but discarded because of an unknown or unsupported protocol. When tracking interface statistics, the counter of the interface to which these datagrams were addressed is incremented. This interface might not be the same as the input interface for some of the datagrams.')
docsRphyRpdIpIfStatsInTruncatedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 5, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpIfStatsInTruncatedPkts.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpIfStatsInTruncatedPkts.setDescription("The number of input IP datagrams discarded because the datagram frame didn't carry enough data.")
docsRphyRpdIpIfStatsInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 5, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpIfStatsInDiscards.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpIfStatsInDiscards.setDescription('The number of input IP datagrams for which no problems were encountered to prevent their continued processing, but were discarded (e.g., for lack of buffer space). Note that this counter does not include any datagrams discarded while awaiting re-assembly.')
docsRphyRpdIpIfStatsInDelivers = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 5, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpIfStatsInDelivers.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpIfStatsInDelivers.setDescription('The total number of datagrams successfully delivered to IP user-protocols (including ICMP).')
docsRphyRpdIpIfStatsOutRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 5, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpIfStatsOutRequests.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpIfStatsOutRequests.setDescription('The total number of IP datagrams that local IP user- protocols (including ICMP) supplied to IP in requests for transmission.')
docsRphyRpdIpIfStatsOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 5, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpIfStatsOutDiscards.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpIfStatsOutDiscards.setDescription('The number of output IP datagrams for which no problem was encountered to prevent their transmission to their destination, but were discarded (e.g., for lack of buffer space). Note that this counter would include datagrams counted in docsRphyRpdIpIfStatsOutForwDatagrams if any such datagrams met this (discretionary) discard criterion.')
docsRphyRpdIpIfStatsOutTransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 5, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpIfStatsOutTransmits.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpIfStatsOutTransmits.setDescription('The total number of IP datagrams that this entity supplied to the lower layers for transmission.')
docsRphyRpdIpIfStatsOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 5, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpIfStatsOutOctets.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpIfStatsOutOctets.setDescription('The total number of octets in IP datagrams delivered to the lower layers for transmission.')
docsRphyRpdIpIfStatsInMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 5, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpIfStatsInMcastPkts.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpIfStatsInMcastPkts.setDescription('The number of IP multicast datagrams received.')
docsRphyRpdIpIfStatsInMcastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 5, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpIfStatsInMcastOctets.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpIfStatsInMcastOctets.setDescription('The total number of octets received in IP multicast datagrams.')
docsRphyRpdIpIfStatsOutMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 5, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpIfStatsOutMcastPkts.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpIfStatsOutMcastPkts.setDescription('The number of IP multicast datagrams transmitted.')
docsRphyRpdIpIfStatsOutMcastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 5, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpIfStatsOutMcastOctets.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpIfStatsOutMcastOctets.setDescription('The total number of octets transmitted in IP multicast datagrams.')
docsRphyRpdIpIfStatsDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 5, 1, 19), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpIfStatsDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpIfStatsDiscontinuityTime.setDescription("The value of sysUpTime on the most recent occasion at which any one or more of this entry's counters suffered a discontinuity.")
docsRphyRpdIpIfStatsRefreshRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 5, 1, 20), Unsigned32()).setUnits('milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpIfStatsRefreshRate.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpIfStatsRefreshRate.setDescription('The minimum reasonable polling interval for this entry. This object provides an indication of the minimum amount of time required to update the counters in this entry.')
docsRphyRpdIpAddressTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 6), )
if mibBuilder.loadTexts: docsRphyRpdIpAddressTable.setReference('RFC 4293 ipAddressTable')
if mibBuilder.loadTexts: docsRphyRpdIpAddressTable.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpAddressTable.setDescription("This table contains addressing information relevant to the entity's interfaces. This table does not contain multicast address information. Note well: When including IPv6 link-local addresses in this table, the entry must use an InetAddressType of 'docsRphyRpdIpv6z' in order to differentiate between the possible interfaces.")
docsRphyRpdIpAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 6, 1), ).setIndexNames((0, "DOCS-RPHY-MIB", "docsRphyRpdDevInfoUniqueId"), (0, "DOCS-RPHY-MIB", "docsRphyRpdIpAddressAddrType"), (0, "DOCS-RPHY-MIB", "docsRphyRpdIpAddressAddr"))
if mibBuilder.loadTexts: docsRphyRpdIpAddressEntry.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpAddressEntry.setDescription('An address mapping for a particular interface.')
docsRphyRpdIpAddressAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 6, 1, 1), InetAddressType())
if mibBuilder.loadTexts: docsRphyRpdIpAddressAddrType.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpAddressAddrType.setDescription('The address type of docsRphyRpdIpAddressAddr.')
docsRphyRpdIpAddressAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 6, 1, 2), InetAddress())
if mibBuilder.loadTexts: docsRphyRpdIpAddressAddr.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpAddressAddr.setDescription("The IP address to which this entry's addressing information pertains. The address type of this object is specified in AddrType. Implementors need to be aware that if the size of Addr exceeds 116 octets, then OIDS of instances of columns in this row will have more than 128 sub-identifiers and cannot be accessed using SNMPv1, SNMPv2c, or SNMPv3.")
docsRphyRpdIpAddressEnetPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 6, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpAddressEnetPortIndex.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpAddressEnetPortIndex.setDescription('This attribute reports a unique index for this Ethernet port interface.')
docsRphyRpdIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unicast", 1), ("anycast", 2), ("broadcast", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpAddressType.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpAddressType.setDescription('The type of address. broadcast(3) is not a valid value for IPv6 addresses (RFC 3513).')
docsRphyRpdIpAddressPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 6, 1, 5), InetAddressPrefixLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpAddressPrefixLen.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpAddressPrefixLen.setDescription('This attribute reports the prefix length associated with this address.')
docsRphyRpdIpAddressOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 6, 1, 6), IpAddressOriginTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpAddressOrigin.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpAddressOrigin.setDescription('The origin of the address.')
docsRphyRpdIpAddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 6, 1, 7), IpAddressStatusTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpAddressStatus.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpAddressStatus.setDescription('The status of the address, describing if the address can be used for communication. In the absence of other information, an IPv4 address is always preferred(1).')
docsRphyRpdIpAddressCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 6, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpAddressCreated.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpAddressCreated.setDescription('The value of sysUpTime at the time this entry was created. If this entry was created prior to the last re- initialization of the local network management subsystem, then this object contains a zero value.')
docsRphyRpdIpAddressLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 6, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpAddressLastChanged.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpAddressLastChanged.setDescription('The value of sysUpTime at the time this entry was last updated. If this entry was updated prior to the last re- initialization of the local network management subsystem, then this object contains a zero value.')
docsRphyRpdIpNetToPhysicalTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 7), )
if mibBuilder.loadTexts: docsRphyRpdIpNetToPhysicalTable.setReference('RFC 4293 ipNetToPhysicalTable')
if mibBuilder.loadTexts: docsRphyRpdIpNetToPhysicalTable.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpNetToPhysicalTable.setDescription("The IP Address Translation table used for mapping from IP addresses to physical addresses. The Address Translation tables contain the IP address to 'physical' address equivalences. Some interfaces do not use translation tables for determining address equivalences (e.g., DDN-X.25 has an algorithmic method); if all interfaces are of this type, then the Address Translation table is empty, i.e., has zero entries. While many protocols may be used to populate this table, ARP and Neighbor Discovery are the most likely options.")
docsRphyRpdIpNetToPhysicalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 7, 1), ).setIndexNames((0, "DOCS-RPHY-MIB", "docsRphyRpdDevInfoUniqueId"), (0, "DOCS-RPHY-MIB", "docsRphyRpdIfEnetPortIndex"), (0, "DOCS-RPHY-MIB", "docsRphyRpdIpNetToPhysicalNetAddressType"), (0, "DOCS-RPHY-MIB", "docsRphyRpdIpNetToPhysicalNetAddress"))
if mibBuilder.loadTexts: docsRphyRpdIpNetToPhysicalEntry.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpNetToPhysicalEntry.setDescription("Each entry contains one IP address to `physical' address equivalence.")
docsRphyRpdIpNetToPhysicalNetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 7, 1, 1), InetAddressType())
if mibBuilder.loadTexts: docsRphyRpdIpNetToPhysicalNetAddressType.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpNetToPhysicalNetAddressType.setDescription('The type of NetAddress.')
docsRphyRpdIpNetToPhysicalNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 7, 1, 2), InetAddress())
if mibBuilder.loadTexts: docsRphyRpdIpNetToPhysicalNetAddress.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpNetToPhysicalNetAddress.setDescription("The IP Address corresponding to the media-dependent 'physical' address. The address type of this object is specified in AddressType. Implementors need to be aware that if the size of NetAddress exceeds 115 octets, then OIDS of instances of columns in this row will have more than 128 sub-identifiers and cannot be accessed using SNMPv1, SNMPv2c, or SNMPv3.")
docsRphyRpdIpNetToPhysicalPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 7, 1, 3), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpNetToPhysicalPhysAddress.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpNetToPhysicalPhysAddress.setDescription("The media-dependent 'physical' address.")
docsRphyRpdIpNetToPhysicalLastUpdated = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 7, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpNetToPhysicalLastUpdated.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpNetToPhysicalLastUpdated.setDescription('This attribute reports the value of RpdSysUpTime at the time this entry was last updated. If this entry was updated prior to the last re-initialization of the local network management subsystem, then this attribute contains a zero value.')
docsRphyRpdIpNetToPhysicalType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("dynamic", 3), ("static", 4), ("local", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpNetToPhysicalType.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpNetToPhysicalType.setDescription("The type of mapping. It is an implementation-specific matter as to whether the agent removes an invalidated entry from the table. Accordingly, management stations must be prepared to receive tabular information from agents that corresponds to entries not currently in use. Proper interpretation of such entries requires examination of the relevant Type attribute. The 'dynamic(3)' type indicates that the IP address to physical addresses mapping has been dynamically resolved using e.g., IPv4 ARP or the IPv6 Neighbor Discovery protocol. The 'static(4)' type indicates that the mapping has been statically configured. Both of these refer to entries that provide mappings for other entities addresses. The 'local(5)' type indicates that the mapping is provided for an entity's own interface address.")
docsRphyRpdIpNetToPhysicalState = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("reachable", 1), ("stale", 2), ("delay", 3), ("probe", 4), ("invalid", 5), ("unknown", 6), ("incomplete", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpNetToPhysicalState.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpNetToPhysicalState.setDescription('The Neighbor Unreachability Detection state for the interface when the address mapping in this entry is used. If Neighbor Unreachability Detection is not in use (e.g. for IPv4), this object is always unknown(6).')
docsRphyRpdIpDefaultRouterTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 8), )
if mibBuilder.loadTexts: docsRphyRpdIpDefaultRouterTable.setReference('RFC 4293 ipDefaultRouterTable')
if mibBuilder.loadTexts: docsRphyRpdIpDefaultRouterTable.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpDefaultRouterTable.setDescription('The table used to describe the default routers known to the RPD.')
docsRphyRpdIpDefaultRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 8, 1), ).setIndexNames((0, "DOCS-RPHY-MIB", "docsRphyRpdDevInfoUniqueId"), (0, "DOCS-RPHY-MIB", "docsRphyRpdIpDefaultRouterAddressType"), (0, "DOCS-RPHY-MIB", "docsRphyRpdIpDefaultRouterAddress"), (0, "DOCS-RPHY-MIB", "docsRphyRpdIfEnetPortIndex"))
if mibBuilder.loadTexts: docsRphyRpdIpDefaultRouterEntry.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpDefaultRouterEntry.setDescription('Each entry contains information about a default router known to the RPD.')
docsRphyRpdIpDefaultRouterAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 8, 1, 1), InetAddressType())
if mibBuilder.loadTexts: docsRphyRpdIpDefaultRouterAddressType.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpDefaultRouterAddressType.setDescription('This key attribute reports the type of IP address in the Address attribute.')
docsRphyRpdIpDefaultRouterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 8, 1, 2), InetAddress())
if mibBuilder.loadTexts: docsRphyRpdIpDefaultRouterAddress.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpDefaultRouterAddress.setDescription('The IP address of the default router represented by this row. The address type of this object is specified in AddressType. Implementers need to be aware that if the size of Address exceeds 115 octets, then OIDS of instances of columns in this row will have more than 128 sub-identifiers and cannot be accessed using SNMPv1, SNMPv2c, or SNMPv3.')
docsRphyRpdIpDefaultRouterLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 8, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpDefaultRouterLifetime.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpDefaultRouterLifetime.setDescription('The remaining length of time, in seconds, that this router will continue to be useful as a default router. A value of zero indicates that it is no longer useful as a default router. It is left to the implementer of the MIB as to whether a router with a lifetime of zero is removed from the list. For IPv6, this value should be extracted from the router advertisement messages.')
docsRphyRpdIpDefaultRouterPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-2, -1, 0, 1))).clone(namedValues=NamedValues(("reserved", -2), ("low", -1), ("medium", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpDefaultRouterPreference.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpDefaultRouterPreference.setDescription('An indication of preference given to this router as a default router as described in the Default Router Preferences document. Treating the value as a 2 bit signed integer allows for simple arithmetic comparisons. For IPv4 routers or IPv6 routers that are not using the updated router advertisement format, this object is set to medium (0).')
docsRphyRpdIpIcmpMsgStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 9, 1), )
if mibBuilder.loadTexts: docsRphyRpdIpIcmpMsgStatsTable.setReference('RFC 4293 icmpMsgStatsTable')
if mibBuilder.loadTexts: docsRphyRpdIpIcmpMsgStatsTable.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpIcmpMsgStatsTable.setDescription('The table of system-wide per-version, per-message type ICMP counters.')
docsRphyRpdIpIcmpMsgStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 9, 1, 1), ).setIndexNames((0, "DOCS-RPHY-MIB", "docsRphyRpdDevInfoUniqueId"), (0, "DOCS-RPHY-MIB", "docsRphyRpdIpIcmpMsgStatsIPVersion"), (0, "DOCS-RPHY-MIB", "docsRphyRpdIpIcmpMsgStatsType"))
if mibBuilder.loadTexts: docsRphyRpdIpIcmpMsgStatsEntry.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpIcmpMsgStatsEntry.setDescription('A conceptual row in the docsRphyRpdIpIcmpMsgStatsTable. The system should track each ICMP type value, even if that ICMP type is not supported by the system. However, a given row need not be instantiated unless a message of that type has been processed, i.e., the row for Type=X MAY be instantiated before but is required to be instantiated after the first message with Type=X is received or transmitted. After receiving or transmitting any succeeding messages with Type=X, the relevant counter must be incremented.')
docsRphyRpdIpIcmpMsgStatsIPVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 9, 1, 1, 1), InetVersion())
if mibBuilder.loadTexts: docsRphyRpdIpIcmpMsgStatsIPVersion.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpIcmpMsgStatsIPVersion.setDescription('The IP version of the statistics. Statistics are provided for each IP version supported.')
docsRphyRpdIpIcmpMsgStatsType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: docsRphyRpdIpIcmpMsgStatsType.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpIcmpMsgStatsType.setDescription('The ICMP type field of the message type being counted by this row. Note that ICMP message types are scoped by the address type in use.')
docsRphyRpdIpIcmpMsgStatsInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 9, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpIcmpMsgStatsInPkts.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpIcmpMsgStatsInPkts.setDescription('The number of input packets for this AF and type.')
docsRphyRpdIpIcmpMsgStatsOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 3, 9, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyRpdIpIcmpMsgStatsOutPkts.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdIpIcmpMsgStatsOutPkts.setDescription('The number of output packets for this AF and type.')
docsRphyCcapL2tpSessionInfoTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 4, 1), )
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoTable.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoTable.setDescription("This table provides details for every session that terminates at the CCAP Core from the CCAP Core's point of view. There will be multiple sessions for each RPD with which the CCAP Core is associated.")
docsRphyCcapL2tpSessionInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 4, 1, 1), ).setIndexNames((0, "DOCS-RPHY-MIB", "docsRphyCcapL2tpSessionInfoLocalLcceIpAddrType"), (0, "DOCS-RPHY-MIB", "docsRphyCcapL2tpSessionInfoLocalLcceIpAddr"), (0, "DOCS-RPHY-MIB", "docsRphyCcapL2tpSessionInfoLocalId"))
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoEntry.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoEntry.setDescription('The conceptual row of docsRphyCcapL2tpSessionInfoTable. A row entry is created for every session the CCAP-Core terminates.')
docsRphyCcapL2tpSessionInfoLocalLcceIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 4, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoLocalLcceIpAddrType.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoLocalLcceIpAddrType.setDescription('This attribute indicates whether the IP address provide in docsRphyCcapL2tpSessionInfoLocalLcceIpAddr is IPv4 or IPv6.')
docsRphyCcapL2tpSessionInfoLocalLcceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 4, 1, 1, 2), InetAddress())
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoLocalLcceIpAddr.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoLocalLcceIpAddr.setDescription('This attribute provides the local LCCE IP address on the CCAP Core of the session detailed in the row entry.')
docsRphyCcapL2tpSessionInfoLocalId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 4, 1, 1, 3), Unsigned32())
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoLocalId.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoLocalId.setDescription('This attribute provides the value of the session ID assigned to the session by the CCAP Core.')
docsRphyCcapL2tpSessionInfoRemoteLcceIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 4, 1, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoRemoteLcceIpAddrType.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoRemoteLcceIpAddrType.setDescription('This attribute indicates whether the IP address provide in docsRphyCcapL2tpSessionInfoRemoteLcceIpAddr is IPv4 or IPv6.')
docsRphyCcapL2tpSessionInfoRemoteLcceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 4, 1, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoRemoteLcceIpAddr.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoRemoteLcceIpAddr.setDescription('This attribute provides the remote-side LCCE IP address of the session detailed in the row entry.')
docsRphyCcapL2tpSessionInfoRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 4, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoRemoteId.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoRemoteId.setDescription('This attribute provides the value of the session ID assigned to the session by the remote peer (CCAP Core).')
docsRphyCcapL2tpSessionInfoCoreId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 4, 1, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoCoreId.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoCoreId.setDescription('This attribute provides the MAC address of the CCAP Core with which this session terminates. The CCAP Core sends its MAC address to the RPD periodically via the DOCSIS SYNC MAC Message in the Source Address field.')
docsRphyCcapL2tpSessionInfoConnCtrlID = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 4, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoConnCtrlID.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoConnCtrlID.setDescription('This attribute indicates the control connection identifier (CCID) for this session.')
docsRphyCcapL2tpSessionInfoUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 4, 1, 1, 9), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoUdpPort.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoUdpPort.setDescription('This attribute provides the UDP Port reported by the CCAP Core when the DEPI session uses L2TPv3 Header Over UDP. This attribute reports a value of 0 when the session is running with the L2TPv3 Session IP Header. This port number is negotiated between the CCAP Core and the RPD according to the L2TPv3 RFC.')
docsRphyCcapL2tpSessionInfoDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 4, 1, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoDescr.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoDescr.setDescription('This attribute provides an ASCII string constructed with the form: RemoteEndId=(pp:mmm:ccc), ... { repeated for multiple endpoints } where pp is the 0-based port num signaled in the RemoteEndId AVP mmm is the channel-type enum value from the RemoteEndId AVP ccc is the channel number from the RemoteEndId AVP.')
docsRphyCcapL2tpSessionInfoSessionType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("psp", 1), ("mpt", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoSessionType.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoSessionType.setDescription('This attribute specifies whether the session is an MPT session or PSP session.')
docsRphyCcapL2tpSessionInfoSessionSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("mptLegacy", 1), ("pspLegacy", 2), ("mcm", 3), ("pspDepiMultichannel", 4), ("pspUepiScQam", 5), ("pspUepiOfdma", 6), ("pspBwReqScQam", 7), ("pspBwReqOfdma", 8), ("pspProbe", 9), ("pspRngReqScQam", 10), ("pspRngReqOfdma", 11), ("pspMapScQam", 12), ("pspMapOfdma", 13), ("pspSpecman", 14), ("pspPnm", 15), ("psp551Fwd", 16), ("psp551Ret", 17), ("psp552Fwd", 18), ("psp552Ret", 19), ("pspNdf", 20), ("pspNdr", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoSessionSubType.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoSessionSubType.setDescription('This attribute specifies the type of DEPI MPT or DEPI PSP session.')
docsRphyCcapL2tpSessionInfoMaxPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 4, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoMaxPayload.setReference('DEPI specification, Signaling DEPI specification Annex A.')
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoMaxPayload.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoMaxPayload.setDescription('This attribute indicates the maximum MTU negotiated between the CCAP Core and the RPD during the session establishment process. The MTU is the layer 3 payload of a layer 2 frame.')
docsRphyCcapL2tpSessionInfoPathPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 4, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoPathPayload.setReference('DEPI specification, Network MTU')
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoPathPayload.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoPathPayload.setDescription('This attribute indicates the maximum MTU traversing the CIN from CCAP Core to the RPD. This is calculated by the CCAP Core by procedures such as MTU discovery as described in the DEPI specification.')
docsRphyCcapL2tpSessionInfoRpdIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 4, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoRpdIfMtu.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoRpdIfMtu.setDescription("This attribute provides the RPD's CIN interface MTU and is read as the value of the following L2TPV3 AVP transmitted by the RPD during session setup: DEPI Downstream PW UEPI Upstream PW DEPI Remote MTU AVP (ICRP) UEPI Remote MTU AVP (ICRP).")
docsRphyCcapL2tpSessionInfoCoreIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 4, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoCoreIfMtu.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoCoreIfMtu.setDescription("This attribute provides the CCAP Core's CIN interface MTU and is read as the value of the following L2TPv3 AVP as received by the device during session setup: DEPI Downstream PW UEPI Upstream PW DEPI Local MTU AVP (ICRQ) UEPI Local MTU AVP (ICRQ).")
docsRphyCcapL2tpSessionInfoIncludeDOCSISMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 4, 1, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoIncludeDOCSISMsgs.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoIncludeDOCSISMsgs.setDescription('This attribute returns true if the CCAP Core includes DOCSIS MAP messages and other MAC Management messages in the interface entry associated with this control entry. The CCAP Core determines whether the interface includes DOCSIS messages as part of the payload.')
docsRphyCcapL2tpSessionInfoErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 4, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("invalidMACInterfaceValue", 2), ("invalidInterfaceValue", 3), ("noResourcesForInterfaceIndex", 4), ("l2tpv3Error", 5), ("ifAdminStatusSetToDown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoErrorCode.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoErrorCode.setDescription("The error code raised when the session is in an error state. 'invalidMACInterfaceValue' Indicates wrong assignment of the CCAP Core MAC interface ifIndex. 'invalidInterfaceValue' Indicates wrong assignment of the CCAP Core Downstream interface ifIndex 'noResourcesForInterfaceIfIndex' Indicates the CCAP Core has no more resources to assign a session to this entry. 'l2tpv3Error' An L2TPv3 StopCCN or CDN message was issued 'ifAdminStatusSetToDown' Indicates the ifAdminStatus was set to down and the session was torn down.")
docsRphyCcapL2tpSessionInfoCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 4, 1, 1, 19), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoCreationTime.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoCreationTime.setDescription('The attribute contains the sysUptime when the entry was turned active.')
docsRphyCcapL2tpSessionInfoOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 4, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3), ("testing", 4), ("dormant", 5), ("notPresent", 6), ("lowerLayerDown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoOperStatus.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoOperStatus.setDescription("This attribute provides the current status of the pseudowire from the point of view of the specific reporting entity (CCAP-Core). Values are as follows: 'other' indicates a vendor-specific operational status. 'up' indicates that the pseudowire is ready to pass packets. 'down' indicates that pseudowire signaling is not yet finished, or indications available at the service level indicate that the pseudowire is not passing packets. 'testing' indicates that AdminStatus at the pseudowire level is set to test. 'dormant' indicates that the pseudowire is not in a condition to pass packets but is in a 'pending' state, waiting for some external event. 'notPresent' indicates that some component is missing to accomplish the setup of the pseudowire. It can be a configuration error, incomplete configuration, or a missing H/W component. 'lowerLayerDown' indicates one or more of the lower-layer interfaces responsible for running the underlying PSN is not in OperStatus 'up' state.")
docsRphyCcapL2tpSessionInfoLocalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 4, 1, 1, 21), Bits().clone(namedValues=NamedValues(("other", 0), ("pwNotForwarding", 1), ("servicePwRxFault", 2), ("servicePwTxFault", 3), ("psnPwRxFault", 4), ("psnPwTxFault", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoLocalStatus.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoLocalStatus.setDescription("The attribute provides the status of the pseudowire in the local node. If the 'other' bit is set, it indicates that an additional vendor-specific status is reported. If none of the bits are set, it indicates no faults are reported.")
docsRphyCcapL2tpSessionInfoLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 4, 1, 1, 22), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoLastChange.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionInfoLastChange.setDescription('The attribute provides the value of sysUpTime when the session entered its current OperStatus state from the point of view of the specific reporting entity (CCAP-Core).')
docsRphyCcapL2tpSessionFlowTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 4, 2), )
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionFlowTable.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionFlowTable.setDescription('This table represents a PSP Flow of L2TP session or for those sessions, which do not have PSP Flows, represents entire session. In the latter case the PSP Flow Id by convention is zero.')
docsRphyCcapL2tpSessionFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 4, 2, 1), ).setIndexNames((0, "DOCS-RPHY-MIB", "docsRphyCcapL2tpSessionInfoLocalLcceIpAddrType"), (0, "DOCS-RPHY-MIB", "docsRphyCcapL2tpSessionInfoLocalLcceIpAddr"), (0, "DOCS-RPHY-MIB", "docsRphyCcapL2tpSessionInfoLocalId"), (0, "DOCS-RPHY-MIB", "docsRphyCcapL2tpSessionFlowPspFlowId"))
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionFlowEntry.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionFlowEntry.setDescription('The conceptual row of docsRphyCcapL2tpSessionFlowTable. This is an extension to docsRphyCcapL2tpSessionInfoTable for the CCAP Core.')
docsRphyCcapL2tpSessionFlowPspFlowId = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 4, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionFlowPspFlowId.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionFlowPspFlowId.setDescription('This attribute identifies a PSP Flow within the session. For sessions which do not have PSP Flows, this attribute is zero.')
docsRphyCcapL2tpSessionStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 4, 3), )
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionStatsTable.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionStatsTable.setDescription("This table provides statistics for every session that terminates at the CCAP-Core from the CCAP Core's point of view. It also provides statistics about each tunnel session between the RPD and each CCAP Core with which the RPD is associated from the RPD's point of view.")
docsRphyCcapL2tpSessionStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 4, 3, 1), )
docsRphyCcapL2tpSessionFlowEntry.registerAugmentions(("DOCS-RPHY-MIB", "docsRphyCcapL2tpSessionStatsEntry"))
docsRphyCcapL2tpSessionStatsEntry.setIndexNames(*docsRphyCcapL2tpSessionFlowEntry.getIndexNames())
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionStatsEntry.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionStatsEntry.setDescription('The conceptual row of docsRphyCcapL2tpSessionStatsTable. This table is an augmentation of docsRphyCcapL2tpSessionFlowTable.')
docsRphyCcapL2tpSessionStatsOutOfSeqPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 4, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionStatsOutOfSeqPkts.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapL2tpSessionStatsOutOfSeqPkts.setDescription('This attribute indicates the count of session packets that were received out of sequence from the point of view of the reporting entity. It is vendor dependent the re-sequence of packets. Implementations that do not re-sequence packets also increase the value of ifInDiscards for the respective entry.')
docsRphyCcapCinDsLatencyTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 4, 4), )
if mibBuilder.loadTexts: docsRphyCcapCinDsLatencyTable.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapCinDsLatencyTable.setDescription('This table provides measurements on the latency on the CIN link for the session as measured by the CCAP-Core. These measurements are based on the DEPI latency measurement, specified in the Remote Downstream External PHY Interface Specification.')
docsRphyCcapCinDsLatencyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 4, 4, 1), )
docsRphyCcapL2tpSessionFlowEntry.registerAugmentions(("DOCS-RPHY-MIB", "docsRphyCcapCinDsLatencyEntry"))
docsRphyCcapCinDsLatencyEntry.setIndexNames(*docsRphyCcapL2tpSessionFlowEntry.getIndexNames())
if mibBuilder.loadTexts: docsRphyCcapCinDsLatencyEntry.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapCinDsLatencyEntry.setDescription('The conceptual row of docsRphyCcapCinLatencyTable. A row entry is created for every session the CCAP Core terminates. This table is an augmentation of docsRphyCcapL2tpSessionFlowTable for the CCAP Core.')
docsRphyCcapCinDsLatencyLastVal = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 4, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyCcapCinDsLatencyLastVal.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapCinDsLatencyLastVal.setDescription('This attribute indicates the latest latency measurement on this session.')
docsRphyCcapCinDsLatencyLastValTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 4, 4, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyCcapCinDsLatencyLastValTime.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapCinDsLatencyLastValTime.setDescription('This attribute indicates the sysUpTime value of the last time the docsRphyCcapCinLatencyPerfLastVal attribute was updated.')
docsRphyCcapCinDsLatencyInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 4, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyCcapCinDsLatencyInterval.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapCinDsLatencyInterval.setDescription('This attribute provides the time interval used to measure periodically the CIN latency per DEPI session. Active measurement of CIN latency applies to active DEPI sessions only. This attribute is constrained to 420 seconds to prevent Master Clock counter overruns. A value zero indicates no CIN latency measurements are configured to be performed.')
docsRphyCcapSessionCinDsLatencyStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 4, 5), )
if mibBuilder.loadTexts: docsRphyCcapSessionCinDsLatencyStatsTable.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapSessionCinDsLatencyStatsTable.setDescription('This table provides sequence of recent measurements of the CIN latency on the network as measured by the CCAP Core. When the table is full, the oldest measurement is replaced with a new one. This table is based on the docsIfMCmtsDepiSessionCinLatencyPerfTable object defined in the DOCS-IF-M-CMTS-MIB and has been extended for Remote PHY.')
docsRphyCcapSessionCinDsLatencyStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 4, 5, 1), ).setIndexNames((0, "DOCS-RPHY-MIB", "docsRphyCcapL2tpSessionInfoLocalLcceIpAddrType"), (0, "DOCS-RPHY-MIB", "docsRphyCcapL2tpSessionInfoLocalLcceIpAddr"), (0, "DOCS-RPHY-MIB", "docsRphyCcapL2tpSessionInfoLocalId"), (0, "DOCS-RPHY-MIB", "docsRphyCcapL2tpSessionFlowPspFlowId"), (0, "DOCS-RPHY-MIB", "docsRphyCcapSessionCinDsLatencyStatsIntervalSeq"))
if mibBuilder.loadTexts: docsRphyCcapSessionCinDsLatencyStatsEntry.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapSessionCinDsLatencyStatsEntry.setDescription('The conceptual row of docsRphyCcapSessionCinDsLatencyStatsTable. A row entry is created for every session the CCAP Core terminates. This is an extension to docsRphyCcapL2tpSessionFlowTable for the CCAP Core.')
docsRphyCcapSessionCinDsLatencyStatsIntervalSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 4, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: docsRphyCcapSessionCinDsLatencyStatsIntervalSeq.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapSessionCinDsLatencyStatsIntervalSeq.setDescription('This attribute indicates the interval sequence where the CIN latency measurement was taken. It is valid in an implementation that overrides the oldest sequence number entry with the most recent measurement.')
docsRphyCcapSessionCinDsLatencyStatsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 4, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyCcapSessionCinDsLatencyStatsVal.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapSessionCinDsLatencyStatsVal.setDescription('This attribute indicates the CIN latency value measured for the session referenced by this entry.')
docsRphyCcapSessionCinDsLatencyStatsValTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 4, 5, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyCcapSessionCinDsLatencyStatsValTime.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapSessionCinDsLatencyStatsValTime.setDescription('This attribute provides the sysUpTime value for the last time docsRphyCcapCinLatencyPerfVal was updated.')
docsRphyCcapSecServerCertSubject = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 5, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyCcapSecServerCertSubject.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapSecServerCertSubject.setDescription("This attribute represents the subject name exactly as it is encoded in the X509 certificate. The organizationName portion of the certificate's subject name must be present. All other fields are optional. Any optional field present must be prepended with <CR> (carriage return, U+000D) <LF> (line feed, U+000A). Ordering of fields present must conform to the following: organizationName <CR> <LF> countryName <CR> <LF> stateOrProvinceName <CR> <LF> localityName <CR> <LF> organizationalUnitName <CR> <LF> organizationalUnitName=<Manufacturing Location> <CR> <LF> commonName ")
docsRphyCcapSecServerCertIssuer = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 5, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyCcapSecServerCertIssuer.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapSecServerCertIssuer.setDescription("This attribute represents the issuer name exactly as it is encoded in the X509 certificate. The commonName portion of the certificate's issuer name must be present. All other fields are optional. Any optional field present must be prepended with <CR> (carriage return, U+000D) <LF> (line feed, U+000A). Ordering of fields present must conform to the following: commonName <CR> <LF> countryName <CR> <LF> stateOrProvinceName <CR> <LF> localityName <CR> <LF> organizationalUnitName <CR> <LF> organizationalUnitName=<Manufacturing Location> ")
docsRphyCcapSecServerCertSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 5, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyCcapSecServerCertSerialNumber.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapSecServerCertSerialNumber.setDescription("This attribute represents the certificate's serial number, represented as an octet string. ")
docsRphyCcapSecServerCertSource = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("snmp", 1), ("configurationFile", 2), ("externalDatabase", 3), ("other", 4), ("authentInfo", 5), ("compiledIntoCode", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyCcapSecServerCertSource.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapSecServerCertSource.setDescription('This attribute indicates how the certificate reached the CCAP Core. Other (4) means that it originated from a source not identified above.')
docsRphyCcapSecServerCertCert = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 5, 5), DocsX509ASN1DEREncodedCertificate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyCcapSecServerCertCert.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapSecServerCertCert.setDescription('This attribute represents an X509 DER-encoded CCAP Core certificate.')
docsRphyCcapSecServerCertCertThumbprint = MibScalar((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 1, 5, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsRphyCcapSecServerCertCertThumbprint.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapSecServerCertCertThumbprint.setDescription('This attribute represents the SHA-1 hash of the CCAP Core certificate. ')
docsRphyCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 2, 1, 1)).setObjects(("DOCS-RPHY-MIB", "docsRphyRpdGroup"), ("DOCS-RPHY-MIB", "docsRphyCcapCoreGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsRphyCompliance = docsRphyCompliance.setStatus('current')
if mibBuilder.loadTexts: docsRphyCompliance.setDescription('The compliance statement for RPD management features.')
docsRphyRpdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 2, 2, 1)).setObjects(("DOCS-RPHY-MIB", "docsRphyRpdDevInfoSysUpTime"), ("DOCS-RPHY-MIB", "docsRphyRpdDevInfoNumCrashFilesAvail"), ("DOCS-RPHY-MIB", "docsRphyRpdDevIdVendorName"), ("DOCS-RPHY-MIB", "docsRphyRpdDevIdVendorId"), ("DOCS-RPHY-MIB", "docsRphyRpdDevIdModelNum"), ("DOCS-RPHY-MIB", "docsRphyRpdDevIdSerialNum"), ("DOCS-RPHY-MIB", "docsRphyRpdDevIdDeviceAlias"), ("DOCS-RPHY-MIB", "docsRphyRpdDevIdDeviceDescr"), ("DOCS-RPHY-MIB", "docsRphyRpdDevIdHwRev"), ("DOCS-RPHY-MIB", "docsRphyRpdDevIdCurrSwVer"), ("DOCS-RPHY-MIB", "docsRphyRpdDevIdBootRomVer"), ("DOCS-RPHY-MIB", "docsRphyRpdDevIdUsBurstRcvrVendorId"), ("DOCS-RPHY-MIB", "docsRphyRpdDevIdUsBurstRcvrModelNum"), ("DOCS-RPHY-MIB", "docsRphyRpdDevIdUsBurstRcvrDrivVer"), ("DOCS-RPHY-MIB", "docsRphyRpdDevIdUsBurstRcvrSerialNum"), ("DOCS-RPHY-MIB", "docsRphyRpdDevIdRcpProtocolVer"), ("DOCS-RPHY-MIB", "docsRphyRpdDevIdRcpSchemaVer"), ("DOCS-RPHY-MIB", "docsRphyRpdDevLocationDescr"), ("DOCS-RPHY-MIB", "docsRphyRpdDevLocationLatitude"), ("DOCS-RPHY-MIB", "docsRphyRpdDevLocationLongitude"), ("DOCS-RPHY-MIB", "docsRphyRpdDevCoresConnectedAddressType"), ("DOCS-RPHY-MIB", "docsRphyRpdDevCoresConnectedAddress"), ("DOCS-RPHY-MIB", "docsRphyRpdDevCoresConnectedIsPrincipal"), ("DOCS-RPHY-MIB", "docsRphyRpdDevCoresConnectedName"), ("DOCS-RPHY-MIB", "docsRphyRpdDevCoresConnectedVendorId"), ("DOCS-RPHY-MIB", "docsRphyRpdDevCapabNumDsPorts"), ("DOCS-RPHY-MIB", "docsRphyRpdDevCapabNumUsPorts"), ("DOCS-RPHY-MIB", "docsRphyRpdDevCapabNumTenGeNsPorts"), ("DOCS-RPHY-MIB", "docsRphyRpdDevCapabNumOneGeNsPorts"), ("DOCS-RPHY-MIB", "docsRphyRpdDevCapabNumDsScQamChans"), ("DOCS-RPHY-MIB", "docsRphyRpdDevCapabNumDsOfdmChans"), ("DOCS-RPHY-MIB", "docsRphyRpdDevCapabNumUsScQamChans"), ("DOCS-RPHY-MIB", "docsRphyRpdDevCapabNumUsOfdmaChans"), ("DOCS-RPHY-MIB", "docsRphyRpdDevCapabNumDsOob55d1Chans"), ("DOCS-RPHY-MIB", "docsRphyRpdDevCapabNumUsOob55d1Chans"), ("DOCS-RPHY-MIB", "docsRphyRpdDevCapabNumDsOob55d2Modules"), ("DOCS-RPHY-MIB", "docsRphyRpdDevCapabNumUsOob55d2Demods"), ("DOCS-RPHY-MIB", "docsRphyRpdDevCapabNumNdfChans"), ("DOCS-RPHY-MIB", "docsRphyRpdDevCapabNumNdrChans"), ("DOCS-RPHY-MIB", "docsRphyRpdDevCapabNumDsPspFlowsPerChan"), ("DOCS-RPHY-MIB", "docsRphyRpdDevCapabNumUsPspFlowsPerChan"), ("DOCS-RPHY-MIB", "docsRphyRpdDevCapabNumAsynchVideoChans"), ("DOCS-RPHY-MIB", "docsRphyRpdDevCapabNumCwToneGens"), ("DOCS-RPHY-MIB", "docsRphyRpdDevCapabLowestCwToneFreq"), ("DOCS-RPHY-MIB", "docsRphyRpdDevCapabHighestCwToneFreq"), ("DOCS-RPHY-MIB", "docsRphyRpdDevCapabMaxCwTonePwr"), ("DOCS-RPHY-MIB", "docsRphyRpdDevCapabQamAsPilot"), ("DOCS-RPHY-MIB", "docsRphyRpdDevCapabSupportsUdpEncap"), ("DOCS-RPHY-MIB", "docsRphyRpdDevCapabSupportsFlowTags"), ("DOCS-RPHY-MIB", "docsRphyRpdDevCapabSupportsFreqTilt"), ("DOCS-RPHY-MIB", "docsRphyRpdDevCapabTiltRange"), ("DOCS-RPHY-MIB", "docsRphyRpdDevCapabBufferDepthMonAlertSupp"), ("DOCS-RPHY-MIB", "docsRphyRpdDevCapabBufferDepthCfgSupp"), ("DOCS-RPHY-MIB", "docsRphyRpdDevCapabRpdUcdProcTime"), ("DOCS-RPHY-MIB", "docsRphyRpdDevCapabRpdUcdChgNullGrtTime"), ("DOCS-RPHY-MIB", "docsRphyRpdDevCapabMultiSectionTimingMerRep"), ("DOCS-RPHY-MIB", "docsRphyRpdDevChanReachabilityEndChanIndex"), ("DOCS-RPHY-MIB", "docsRphyRpdDevDsUsRfPortAllocScQamChans"), ("DOCS-RPHY-MIB", "docsRphyRpdDevDsUsRfPortAllocOfdmChans"), ("DOCS-RPHY-MIB", "docsRphyRpdDevDsUsRfPortAllocOob551Chans"), ("DOCS-RPHY-MIB", "docsRphyRpdDevDsUsRfPortAllocNdChans"), ("DOCS-RPHY-MIB", "docsRphyRpdDevL2tpSessionInfoRemoteLcceIpAddrType"), ("DOCS-RPHY-MIB", "docsRphyRpdDevL2tpSessionInfoRemoteLcceIpAddr"), ("DOCS-RPHY-MIB", "docsRphyRpdDevL2tpSessionInfoRemoteId"), ("DOCS-RPHY-MIB", "docsRphyRpdDevL2tpSessionInfoCoreId"), ("DOCS-RPHY-MIB", "docsRphyRpdDevL2tpSessionInfoConnCtrlID"), ("DOCS-RPHY-MIB", "docsRphyRpdDevL2tpSessionInfoUdpPort"), ("DOCS-RPHY-MIB", "docsRphyRpdDevL2tpSessionInfoDescr"), ("DOCS-RPHY-MIB", "docsRphyRpdDevL2tpSessionInfoSessionType"), ("DOCS-RPHY-MIB", "docsRphyRpdDevL2tpSessionInfoSessionSubType"), ("DOCS-RPHY-MIB", "docsRphyRpdDevL2tpSessionInfoMaxPayload"), ("DOCS-RPHY-MIB", "docsRphyRpdDevL2tpSessionInfoPathPayload"), ("DOCS-RPHY-MIB", "docsRphyRpdDevL2tpSessionInfoRpdIfMtu"), ("DOCS-RPHY-MIB", "docsRphyRpdDevL2tpSessionInfoCoreIfMtu"), ("DOCS-RPHY-MIB", "docsRphyRpdDevL2tpSessionInfoErrorCode"), ("DOCS-RPHY-MIB", "docsRphyRpdDevL2tpSessionInfoCreationTime"), ("DOCS-RPHY-MIB", "docsRphyRpdDevL2tpSessionInfoOperStatus"), ("DOCS-RPHY-MIB", "docsRphyRpdDevL2tpSessionInfoLocalStatus"), ("DOCS-RPHY-MIB", "docsRphyRpdDevL2tpSessionInfoLastChange"), ("DOCS-RPHY-MIB", "docsRphyRpdDevL2tpSessionStatsOutOfSeqPkts"), ("DOCS-RPHY-MIB", "docsRphyRpdDevDiagStatusProbableCause"), ("DOCS-RPHY-MIB", "docsRphyRpdDevDiagStatusAdditionalText"), ("DOCS-RPHY-MIB", "docsRphyRpdDevDiagStatusSeverityLevel"), ("DOCS-RPHY-MIB", "docsRphyRpdDevDepiMcastSessionLocalLcceIpAddr"), ("DOCS-RPHY-MIB", "docsRphyRpdDevDepiMcastSessionRemoteLcceIpAddr"), ("DOCS-RPHY-MIB", "docsRphyRpdDevDepiMcastSessionId"), ("DOCS-RPHY-MIB", "docsRphyRpdDevDepiMcastSessionJoinTime"), ("DOCS-RPHY-MIB", "docsRphyRpdDevEventLogFirstTime"), ("DOCS-RPHY-MIB", "docsRphyRpdDevEventLogLastTime"), ("DOCS-RPHY-MIB", "docsRphyRpdDevEventLogCounts"), ("DOCS-RPHY-MIB", "docsRphyRpdDevEventLogLevel"), ("DOCS-RPHY-MIB", "docsRphyRpdDevEventLogId"), ("DOCS-RPHY-MIB", "docsRphyRpdDevEventLogText"), ("DOCS-RPHY-MIB", "docsRphyRpdDevOob551UsChanStatusNcIpAddrType"), ("DOCS-RPHY-MIB", "docsRphyRpdDevOob551UsChanStatusNcIpAddr"), ("DOCS-RPHY-MIB", "docsRphyRpdDevOob551UsChanStatusArpdSrcIpAddrType"), ("DOCS-RPHY-MIB", "docsRphyRpdDevOob551UsChanStatusArpdSrcIpAddr"), ("DOCS-RPHY-MIB", "docsRphyRpdDevOob551UsChanStatusPerfectCellsRcvd"), ("DOCS-RPHY-MIB", "docsRphyRpdDevOob551UsChanStatusCorrectedCellsRcvd"), ("DOCS-RPHY-MIB", "docsRphyRpdDevOob551UsChanStatusUncorrectableCellsRcvd"), ("DOCS-RPHY-MIB", "docsRphyRpdDevOob551UsChanStatusTotalCellsRcvd"), ("DOCS-RPHY-MIB", "docsRphyRpdDevOob551UsChanStatusPwrLevel"), ("DOCS-RPHY-MIB", "docsRphyRpdDevOob551UsChanStatusMaxPwrLevel"), ("DOCS-RPHY-MIB", "docsRphyRpdDevOob551UsChanStatusMinPwrLevel"), ("DOCS-RPHY-MIB", "docsRphyRpdDevOob551UsChanStatusCounterDiscontinuityTime"), ("DOCS-RPHY-MIB", "docsRphyRpdDevCrashDataFileStatusFilename"), ("DOCS-RPHY-MIB", "docsRphyRpdDevCrashDataFileStatusFileStatus"), ("DOCS-RPHY-MIB", "docsRphyRpdDevUsSignalQualityRxMer"), ("DOCS-RPHY-MIB", "docsRphyRpdDevUsSignalQualityRxMerSamples"), ("DOCS-RPHY-MIB", "docsRphyRpdDevUsSignalQualityUnerroreds"), ("DOCS-RPHY-MIB", "docsRphyRpdDevUsSignalQualityCorrecteds"), ("DOCS-RPHY-MIB", "docsRphyRpdDevUsSignalQualityUncorrectables"), ("DOCS-RPHY-MIB", "docsRphyRpdIfPhysEntityDescr"), ("DOCS-RPHY-MIB", "docsRphyRpdIfPhysEntityVendorType"), ("DOCS-RPHY-MIB", "docsRphyRpdIfPhysEntityContainedIn"), ("DOCS-RPHY-MIB", "docsRphyRpdIfPhysEntityClass"), ("DOCS-RPHY-MIB", "docsRphyRpdIfPhysEntityParentRelPos"), ("DOCS-RPHY-MIB", "docsRphyRpdIfPhysEntityName"), ("DOCS-RPHY-MIB", "docsRphyRpdIfPhysEntityHardwareRev"), ("DOCS-RPHY-MIB", "docsRphyRpdIfPhysEntityFirmwareRev"), ("DOCS-RPHY-MIB", "docsRphyRpdIfPhysEntitySoftwareRev"), ("DOCS-RPHY-MIB", "docsRphyRpdIfPhysEntitySerialNum"), ("DOCS-RPHY-MIB", "docsRphyRpdIfPhysEntityMfgName"), ("DOCS-RPHY-MIB", "docsRphyRpdIfPhysEntityModelName"), ("DOCS-RPHY-MIB", "docsRphyRpdIfPhysEntityAlias"), ("DOCS-RPHY-MIB", "docsRphyRpdIfPhysEntityAssetID"), ("DOCS-RPHY-MIB", "docsRphyRpdIfPhysEntityIsFRU"), ("DOCS-RPHY-MIB", "docsRphyRpdIfPhysEntityMfgDate"), ("DOCS-RPHY-MIB", "docsRphyRpdIfPhysEntityUris"), ("DOCS-RPHY-MIB", "docsRphyRpdIfPhysEntityUUID"), ("DOCS-RPHY-MIB", "docsRphyRpdIfPhysEntityCoreIfIndex"), ("DOCS-RPHY-MIB", "docsRphyRpdIfPhysEntSensorType"), ("DOCS-RPHY-MIB", "docsRphyRpdIfPhysEntSensorScale"), ("DOCS-RPHY-MIB", "docsRphyRpdIfPhysEntSensorPrecision"), ("DOCS-RPHY-MIB", "docsRphyRpdIfPhysEntSensorValue"), ("DOCS-RPHY-MIB", "docsRphyRpdIfPhysEntSensorOperStatus"), ("DOCS-RPHY-MIB", "docsRphyRpdIfPhysEntSensorUnitsDisplay"), ("DOCS-RPHY-MIB", "docsRphyRpdIfPhysEntSensorValueTimeStamp"), ("DOCS-RPHY-MIB", "docsRphyRpdIfPhysEntSensorValueUpdateRate"), ("DOCS-RPHY-MIB", "docsRphyRpdIfEnetDescr"), ("DOCS-RPHY-MIB", "docsRphyRpdIfEnetName"), ("DOCS-RPHY-MIB", "docsRphyRpdIfEnetAlias"), ("DOCS-RPHY-MIB", "docsRphyRpdIfEnetType"), ("DOCS-RPHY-MIB", "docsRphyRpdIfEnetMtu"), ("DOCS-RPHY-MIB", "docsRphyRpdIfEnetPhysAddress"), ("DOCS-RPHY-MIB", "docsRphyRpdIfEnetAdminStatus"), ("DOCS-RPHY-MIB", "docsRphyRpdIfEnetOperStatus"), ("DOCS-RPHY-MIB", "docsRphyRpdIfEnetLastChange"), ("DOCS-RPHY-MIB", "docsRphyRpdIfEnetLinkUpDownTrapEnable"), ("DOCS-RPHY-MIB", "docsRphyRpdIfEnetHighSpeed"), ("DOCS-RPHY-MIB", "docsRphyRpdIfEnetPromiscuousMode"), ("DOCS-RPHY-MIB", "docsRphyRpdIfEnetConnectorPresent"), ("DOCS-RPHY-MIB", "docsRphyRpdIfEnetStatsInOctets"), ("DOCS-RPHY-MIB", "docsRphyRpdIfEnetStatsOutOctets"), ("DOCS-RPHY-MIB", "docsRphyRpdIfEnetStatsInFrames"), ("DOCS-RPHY-MIB", "docsRphyRpdIfEnetStatsOutFrames"), ("DOCS-RPHY-MIB", "docsRphyRpdIfEnetStatsInUnicastOctets"), ("DOCS-RPHY-MIB", "docsRphyRpdIfEnetStatsOutUnicastOctets"), ("DOCS-RPHY-MIB", "docsRphyRpdIfEnetStatsInUnicastFrames"), ("DOCS-RPHY-MIB", "docsRphyRpdIfEnetStatsOutUnicastFrames"), ("DOCS-RPHY-MIB", "docsRphyRpdIfEnetStatsInMulticastOctets"), ("DOCS-RPHY-MIB", "docsRphyRpdIfEnetStatsOutMulticastOctets"), ("DOCS-RPHY-MIB", "docsRphyRpdIfEnetStatsInMulticastFrames"), ("DOCS-RPHY-MIB", "docsRphyRpdIfEnetStatsOutMulticastFrames"), ("DOCS-RPHY-MIB", "docsRphyRpdIfEnetStatsInBroadcastOctets"), ("DOCS-RPHY-MIB", "docsRphyRpdIfEnetStatsOutBroadcastOctets"), ("DOCS-RPHY-MIB", "docsRphyRpdIfEnetStatsInBroadcastFrames"), ("DOCS-RPHY-MIB", "docsRphyRpdIfEnetStatsOutBroadcastFrames"), ("DOCS-RPHY-MIB", "docsRphyRpdIfEnetStatsInDiscards"), ("DOCS-RPHY-MIB", "docsRphyRpdIfEnetStatsOutDiscards"), ("DOCS-RPHY-MIB", "docsRphyRpdIfEnetStatsInErrors"), ("DOCS-RPHY-MIB", "docsRphyRpdIfEnetStatsOutErrors"), ("DOCS-RPHY-MIB", "docsRphyRpdIfEnetStatsInUnknownProtos"), ("DOCS-RPHY-MIB", "docsRphyRpdIfEnetStatsCounterDiscontinuityTime"), ("DOCS-RPHY-MIB", "docsRphyRpdIfRpdEnetToCoreEntityMapEntityIndex"), ("DOCS-RPHY-MIB", "docsRphyRpdIfCoreToRpdMapRpdUniqueId"), ("DOCS-RPHY-MIB", "docsRphyRpdIfCoreToRpdMapRpdRfPortDirection"), ("DOCS-RPHY-MIB", "docsRphyRpdIfCoreToRpdMapRpdRfPortIndex"), ("DOCS-RPHY-MIB", "docsRphyRpdIfCoreToRpdMapRpdRfChanType"), ("DOCS-RPHY-MIB", "docsRphyRpdIfCoreToRpdMapRpdRfChanIndex"), ("DOCS-RPHY-MIB", "docsRphyRpdIfRpdToCoreMapCoreIfIndex"), ("DOCS-RPHY-MIB", "docsRphyRpdIpv4GrpDefaultTTL"), ("DOCS-RPHY-MIB", "docsRphyRpdIpv4GrpInterfaceTableLastChange"), ("DOCS-RPHY-MIB", "docsRphyRpdIpv6GrpIpDefaultHopLimit"), ("DOCS-RPHY-MIB", "docsRphyRpdIpv6GrpInterfaceTableLastChange"), ("DOCS-RPHY-MIB", "docsRphyRpdIpv6GrpIfStatsTableLastChange"), ("DOCS-RPHY-MIB", "docsRphyRpdIpv4InterfaceEnableStatus"), ("DOCS-RPHY-MIB", "docsRphyRpdIpv4InterfaceRetransmitTime"), ("DOCS-RPHY-MIB", "docsRphyRpdIpv6InterfaceIdentifier"), ("DOCS-RPHY-MIB", "docsRphyRpdIpv6InterfaceEnableStatus"), ("DOCS-RPHY-MIB", "docsRphyRpdIpv6InterfaceReachableTime"), ("DOCS-RPHY-MIB", "docsRphyRpdIpv6InterfaceRetransmitTime"), ("DOCS-RPHY-MIB", "docsRphyRpdIpIfStatsInReceives"), ("DOCS-RPHY-MIB", "docsRphyRpdIpIfStatsInOctets"), ("DOCS-RPHY-MIB", "docsRphyRpdIpIfStatsInHdrErrors"), ("DOCS-RPHY-MIB", "docsRphyRpdIpIfStatsInNoRoutes"), ("DOCS-RPHY-MIB", "docsRphyRpdIpIfStatsInAddrErrors"), ("DOCS-RPHY-MIB", "docsRphyRpdIpIfStatsInUnknownProtos"), ("DOCS-RPHY-MIB", "docsRphyRpdIpIfStatsInTruncatedPkts"), ("DOCS-RPHY-MIB", "docsRphyRpdIpIfStatsInDiscards"), ("DOCS-RPHY-MIB", "docsRphyRpdIpIfStatsInDelivers"), ("DOCS-RPHY-MIB", "docsRphyRpdIpIfStatsOutRequests"), ("DOCS-RPHY-MIB", "docsRphyRpdIpIfStatsOutDiscards"), ("DOCS-RPHY-MIB", "docsRphyRpdIpIfStatsOutTransmits"), ("DOCS-RPHY-MIB", "docsRphyRpdIpIfStatsOutOctets"), ("DOCS-RPHY-MIB", "docsRphyRpdIpIfStatsInMcastPkts"), ("DOCS-RPHY-MIB", "docsRphyRpdIpIfStatsInMcastOctets"), ("DOCS-RPHY-MIB", "docsRphyRpdIpIfStatsOutMcastPkts"), ("DOCS-RPHY-MIB", "docsRphyRpdIpIfStatsOutMcastOctets"), ("DOCS-RPHY-MIB", "docsRphyRpdIpIfStatsDiscontinuityTime"), ("DOCS-RPHY-MIB", "docsRphyRpdIpIfStatsRefreshRate"), ("DOCS-RPHY-MIB", "docsRphyRpdIpAddressEnetPortIndex"), ("DOCS-RPHY-MIB", "docsRphyRpdIpAddressPrefixLen"), ("DOCS-RPHY-MIB", "docsRphyRpdIpAddressType"), ("DOCS-RPHY-MIB", "docsRphyRpdIpAddressOrigin"), ("DOCS-RPHY-MIB", "docsRphyRpdIpAddressStatus"), ("DOCS-RPHY-MIB", "docsRphyRpdIpAddressCreated"), ("DOCS-RPHY-MIB", "docsRphyRpdIpAddressLastChanged"), ("DOCS-RPHY-MIB", "docsRphyRpdIpNetToPhysicalPhysAddress"), ("DOCS-RPHY-MIB", "docsRphyRpdIpNetToPhysicalLastUpdated"), ("DOCS-RPHY-MIB", "docsRphyRpdIpNetToPhysicalType"), ("DOCS-RPHY-MIB", "docsRphyRpdIpNetToPhysicalState"), ("DOCS-RPHY-MIB", "docsRphyRpdIpDefaultRouterLifetime"), ("DOCS-RPHY-MIB", "docsRphyRpdIpDefaultRouterPreference"), ("DOCS-RPHY-MIB", "docsRphyRpdIpIcmpMsgStatsInPkts"), ("DOCS-RPHY-MIB", "docsRphyRpdIpIcmpMsgStatsOutPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsRphyRpdGroup = docsRphyRpdGroup.setStatus('current')
if mibBuilder.loadTexts: docsRphyRpdGroup.setDescription('Group of objects implemented in CCAP Cores which represent RPD managed objects derived via the GCP protocol.')
docsRphyCcapCoreGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 2, 2, 2)).setObjects(("DOCS-RPHY-MIB", "docsRphyCcapL2tpSessionInfoRemoteLcceIpAddrType"), ("DOCS-RPHY-MIB", "docsRphyCcapL2tpSessionInfoRemoteLcceIpAddr"), ("DOCS-RPHY-MIB", "docsRphyCcapL2tpSessionInfoRemoteId"), ("DOCS-RPHY-MIB", "docsRphyCcapL2tpSessionInfoCoreId"), ("DOCS-RPHY-MIB", "docsRphyCcapL2tpSessionInfoConnCtrlID"), ("DOCS-RPHY-MIB", "docsRphyCcapL2tpSessionInfoUdpPort"), ("DOCS-RPHY-MIB", "docsRphyCcapL2tpSessionInfoDescr"), ("DOCS-RPHY-MIB", "docsRphyCcapL2tpSessionInfoSessionType"), ("DOCS-RPHY-MIB", "docsRphyCcapL2tpSessionInfoSessionSubType"), ("DOCS-RPHY-MIB", "docsRphyCcapL2tpSessionInfoMaxPayload"), ("DOCS-RPHY-MIB", "docsRphyCcapL2tpSessionInfoPathPayload"), ("DOCS-RPHY-MIB", "docsRphyCcapL2tpSessionInfoRpdIfMtu"), ("DOCS-RPHY-MIB", "docsRphyCcapL2tpSessionInfoCoreIfMtu"), ("DOCS-RPHY-MIB", "docsRphyCcapL2tpSessionInfoIncludeDOCSISMsgs"), ("DOCS-RPHY-MIB", "docsRphyCcapL2tpSessionInfoErrorCode"), ("DOCS-RPHY-MIB", "docsRphyCcapL2tpSessionInfoCreationTime"), ("DOCS-RPHY-MIB", "docsRphyCcapL2tpSessionInfoOperStatus"), ("DOCS-RPHY-MIB", "docsRphyCcapL2tpSessionInfoLocalStatus"), ("DOCS-RPHY-MIB", "docsRphyCcapL2tpSessionInfoLastChange"), ("DOCS-RPHY-MIB", "docsRphyCcapL2tpSessionFlowPspFlowId"), ("DOCS-RPHY-MIB", "docsRphyCcapL2tpSessionStatsOutOfSeqPkts"), ("DOCS-RPHY-MIB", "docsRphyCcapCinDsLatencyLastVal"), ("DOCS-RPHY-MIB", "docsRphyCcapCinDsLatencyLastValTime"), ("DOCS-RPHY-MIB", "docsRphyCcapCinDsLatencyInterval"), ("DOCS-RPHY-MIB", "docsRphyCcapSessionCinDsLatencyStatsVal"), ("DOCS-RPHY-MIB", "docsRphyCcapSessionCinDsLatencyStatsValTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsRphyCcapCoreGroup = docsRphyCcapCoreGroup.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapCoreGroup.setDescription('Group of objects implemented in CCAP Cores.')
docsRphyCcapSecGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 2, 1, 30, 2, 2, 3)).setObjects(("DOCS-RPHY-MIB", "docsRphyCcapSecServerCertSubject"), ("DOCS-RPHY-MIB", "docsRphyCcapSecServerCertIssuer"), ("DOCS-RPHY-MIB", "docsRphyCcapSecServerCertSerialNumber"), ("DOCS-RPHY-MIB", "docsRphyCcapSecServerCertSource"), ("DOCS-RPHY-MIB", "docsRphyCcapSecServerCertCert"), ("DOCS-RPHY-MIB", "docsRphyCcapSecServerCertCertThumbprint"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsRphyCcapSecGroup = docsRphyCcapSecGroup.setStatus('current')
if mibBuilder.loadTexts: docsRphyCcapSecGroup.setDescription('Group of objects implemented to support security in CCAP Core.')
mibBuilder.exportSymbols("DOCS-RPHY-MIB", docsRphyRpdDevIdentificationTable=docsRphyRpdDevIdentificationTable, docsRphyRpdDevOob551UsChanStatusPwrLevel=docsRphyRpdDevOob551UsChanStatusPwrLevel, docsRphyCcapL2tpSessionStatsEntry=docsRphyCcapL2tpSessionStatsEntry, docsRphyCcapL2tpSessionInfoRemoteLcceIpAddrType=docsRphyCcapL2tpSessionInfoRemoteLcceIpAddrType, docsRphyRpdDevCapabNumDsOob55d1Chans=docsRphyRpdDevCapabNumDsOob55d1Chans, docsRphyRpdIpv4InterfaceTable=docsRphyRpdIpv4InterfaceTable, docsRphyRpdDevUsSignalQualityChannelIfIndex=docsRphyRpdDevUsSignalQualityChannelIfIndex, docsRphyCcapL2tpSessionStatsOutOfSeqPkts=docsRphyCcapL2tpSessionStatsOutOfSeqPkts, docsRphyRpdDevDsUsRfPortAllocOfdmChans=docsRphyRpdDevDsUsRfPortAllocOfdmChans, docsRphyMib=docsRphyMib, docsRphyRpdIfCoreToRpdMapRpdRfChanType=docsRphyRpdIfCoreToRpdMapRpdRfChanType, docsRphyRpdIpIfStatsOutDiscards=docsRphyRpdIpIfStatsOutDiscards, docsRphyRpdDevL2tpSessionStatsTable=docsRphyRpdDevL2tpSessionStatsTable, docsRphyRpdDevEventLogCounts=docsRphyRpdDevEventLogCounts, docsRphyRpdDevEventLogId=docsRphyRpdDevEventLogId, docsRphyRpdGroup=docsRphyRpdGroup, docsRphyRpdIpv6InterfaceEntry=docsRphyRpdIpv6InterfaceEntry, docsRphyRpdIfEnetStatsCounterDiscontinuityTime=docsRphyRpdIfEnetStatsCounterDiscontinuityTime, RphyChannelType=RphyChannelType, docsRphyRpdIfEnetPhysAddress=docsRphyRpdIfEnetPhysAddress, docsRphyRpdIpIcmpMsgStatsEntry=docsRphyRpdIpIcmpMsgStatsEntry, docsRphyRpdIpAddressEnetPortIndex=docsRphyRpdIpAddressEnetPortIndex, docsRphyRpdIpDefaultRouterAddress=docsRphyRpdIpDefaultRouterAddress, docsRphyRpdDevDepiMcastSessionJoinTime=docsRphyRpdDevDepiMcastSessionJoinTime, docsRphyRpdIpIfStatsTable=docsRphyRpdIpIfStatsTable, docsRphyRpdDevUsSignalQualityUnerroreds=docsRphyRpdDevUsSignalQualityUnerroreds, docsRphyRpdIfRpdToCoreMapCoreIfIndex=docsRphyRpdIfRpdToCoreMapCoreIfIndex, docsRphyRpdIpAddressEntry=docsRphyRpdIpAddressEntry, docsRphyRpdDevCrashDataFileStatusFilename=docsRphyRpdDevCrashDataFileStatusFilename, docsRphyRpdDevOob551UsChanStatusEntry=docsRphyRpdDevOob551UsChanStatusEntry, docsRphyRpdIpv6InterfaceTable=docsRphyRpdIpv6InterfaceTable, docsRphyRpdDevEventLogLastTime=docsRphyRpdDevEventLogLastTime, docsRphyRpdIfEnetPromiscuousMode=docsRphyRpdIfEnetPromiscuousMode, docsRphyCcapSessionCinDsLatencyStatsTable=docsRphyCcapSessionCinDsLatencyStatsTable, docsRphyRpdIfEnetEntry=docsRphyRpdIfEnetEntry, docsRphyRpdIfPhysEntSensorOperStatus=docsRphyRpdIfPhysEntSensorOperStatus, docsRphyRpdDevChanReachabilityEndChanIndex=docsRphyRpdDevChanReachabilityEndChanIndex, docsRphyRpdDevL2tpSessionInfoRemoteLcceIpAddr=docsRphyRpdDevL2tpSessionInfoRemoteLcceIpAddr, docsRphyRpdIfRpdToCoreMapRpdRfChanType=docsRphyRpdIfRpdToCoreMapRpdRfChanType, docsRphyRpdIfEnetStatsOutOctets=docsRphyRpdIfEnetStatsOutOctets, docsRphyRpdDevL2tpSessionInfoLocalStatus=docsRphyRpdDevL2tpSessionInfoLocalStatus, docsRphyRpdDevCapabilitiesTable=docsRphyRpdDevCapabilitiesTable, docsRphyRpdIfEnetStatsInBroadcastOctets=docsRphyRpdIfEnetStatsInBroadcastOctets, docsRphyRpdDevCoresConnectedAddressType=docsRphyRpdDevCoresConnectedAddressType, docsRphyRpdDevOob551UsChanStatusChannelId=docsRphyRpdDevOob551UsChanStatusChannelId, docsRphyCcapL2tpSessionInfoCoreId=docsRphyCcapL2tpSessionInfoCoreId, docsRphyRpdDevIdModelNum=docsRphyRpdDevIdModelNum, docsRphyCcapSessionCinDsLatencyStatsIntervalSeq=docsRphyCcapSessionCinDsLatencyStatsIntervalSeq, docsRphyCcapCinDsLatencyLastVal=docsRphyCcapCinDsLatencyLastVal, docsRphyRpdIfEnetStatsOutErrors=docsRphyRpdIfEnetStatsOutErrors, docsRphyRpdDevCapabTiltRange=docsRphyRpdDevCapabTiltRange, docsRphyRpdIfPhysEntityEntry=docsRphyRpdIfPhysEntityEntry, docsRphyRpdDevChanReachabilityStartChanIndex=docsRphyRpdDevChanReachabilityStartChanIndex, docsRphyRpdIfEnetTable=docsRphyRpdIfEnetTable, docsRphyRpdIpAddressStatus=docsRphyRpdIpAddressStatus, docsRphyRpdIfEnetStatsInMulticastOctets=docsRphyRpdIfEnetStatsInMulticastOctets, docsRphyRpdIfPhysEntSensorType=docsRphyRpdIfPhysEntSensorType, docsRphyCcapSecServerCertCertThumbprint=docsRphyCcapSecServerCertCertThumbprint, docsRphyObjects=docsRphyObjects, docsRphyRpdDevDsUsRfPortAllocIndex=docsRphyRpdDevDsUsRfPortAllocIndex, docsRphyRpdIfRpdToCoreMapRpdRfChanIndex=docsRphyRpdIfRpdToCoreMapRpdRfChanIndex, docsRphyRpdIpv4GrpDefaultTTL=docsRphyRpdIpv4GrpDefaultTTL, docsRphyRpdDevCapabNumOneGeNsPorts=docsRphyRpdDevCapabNumOneGeNsPorts, docsRphyRpdIpIcmpMsgStatsIPVersion=docsRphyRpdIpIcmpMsgStatsIPVersion, docsRphyRpdDevIdUsBurstRcvrDrivVer=docsRphyRpdDevIdUsBurstRcvrDrivVer, docsRphyCcapL2tpSessionInfoRemoteLcceIpAddr=docsRphyCcapL2tpSessionInfoRemoteLcceIpAddr, docsRphyRpdIfRpdEnetToCoreEntityMapEntityIndex=docsRphyRpdIfRpdEnetToCoreEntityMapEntityIndex, docsRphyRpdIpDefaultRouterPreference=docsRphyRpdIpDefaultRouterPreference, docsRphyRpdDevCapabLowestCwToneFreq=docsRphyRpdDevCapabLowestCwToneFreq, docsRphyRpdIpv6GrpTable=docsRphyRpdIpv6GrpTable, docsRphyRpdDevChanReachabilityTable=docsRphyRpdDevChanReachabilityTable, docsRphyRpdIfPhysEntityHardwareRev=docsRphyRpdIfPhysEntityHardwareRev, docsRphyRpdIfEnetStatsInBroadcastFrames=docsRphyRpdIfEnetStatsInBroadcastFrames, docsRphyRpdIfEnetStatsInUnicastFrames=docsRphyRpdIfEnetStatsInUnicastFrames, docsRphyRpdDevL2tpSessionInfoEntry=docsRphyRpdDevL2tpSessionInfoEntry, docsRphyRpdIfPhysEntityAssetID=docsRphyRpdIfPhysEntityAssetID, docsRphyRpdIpNetToPhysicalState=docsRphyRpdIpNetToPhysicalState, docsRphyCcapCinDsLatencyLastValTime=docsRphyCcapCinDsLatencyLastValTime, docsRphyRpdDevIdDeviceAlias=docsRphyRpdDevIdDeviceAlias, docsRphyRpdDevCapabSupportsFreqTilt=docsRphyRpdDevCapabSupportsFreqTilt, docsRphyRpdIpNetToPhysicalNetAddressType=docsRphyRpdIpNetToPhysicalNetAddressType, docsRphyRpdDevDsUsRfPortAllocEntry=docsRphyRpdDevDsUsRfPortAllocEntry, docsRphyRpdIpIcmpMsgStatsOutPkts=docsRphyRpdIpIcmpMsgStatsOutPkts, docsRphyRpdIfPhysEntityUris=docsRphyRpdIfPhysEntityUris, docsRphyRpdIpv6GrpIfStatsTableLastChange=docsRphyRpdIpv6GrpIfStatsTableLastChange, docsRphyRpdIpNetToPhysicalType=docsRphyRpdIpNetToPhysicalType, docsRphyRpdDevOob551UsChanStatusPerfectCellsRcvd=docsRphyRpdDevOob551UsChanStatusPerfectCellsRcvd, docsRphyRpdIpIfStatsOutOctets=docsRphyRpdIpIfStatsOutOctets, docsRphyCcapCinDsLatencyTable=docsRphyCcapCinDsLatencyTable, docsRphyRpdIpIfStatsOutMcastOctets=docsRphyRpdIpIfStatsOutMcastOctets, docsRphyRpdDevL2tpSessionStatsEntry=docsRphyRpdDevL2tpSessionStatsEntry, docsRphyRpdDevL2tpSessionInfoRemoteLcceIpAddrType=docsRphyRpdDevL2tpSessionInfoRemoteLcceIpAddrType, docsRphyRpdIfPhysEntityCoreIfIndex=docsRphyRpdIfPhysEntityCoreIfIndex, docsRphyRpdIpIfStatsOutMcastPkts=docsRphyRpdIpIfStatsOutMcastPkts, docsRphyRpdDevCrashDataFileStatusTable=docsRphyRpdDevCrashDataFileStatusTable, docsRphyRpdIfEnetHighSpeed=docsRphyRpdIfEnetHighSpeed, docsRphyRpdDevIdRcpSchemaVer=docsRphyRpdDevIdRcpSchemaVer, docsRphyRpdDevDepiMcastSessionIpAddrType=docsRphyRpdDevDepiMcastSessionIpAddrType, docsRphyRpdIfPhysEntityIsFRU=docsRphyRpdIfPhysEntityIsFRU, docsRphyRpdIfRpdEnetToCoreEntityMapTable=docsRphyRpdIfRpdEnetToCoreEntityMapTable, docsRphyCcapL2tpSessionFlowEntry=docsRphyCcapL2tpSessionFlowEntry, docsRphyCcapSecMibObjects=docsRphyCcapSecMibObjects, docsRphyRpdIfPhysEntSensorPrecision=docsRphyRpdIfPhysEntSensorPrecision, docsRphyCcapL2tpSessionInfoRemoteId=docsRphyCcapL2tpSessionInfoRemoteId, docsRphyRpdIfEnetType=docsRphyRpdIfEnetType, docsRphyRpdDevL2tpSessionInfoPathPayload=docsRphyRpdDevL2tpSessionInfoPathPayload, docsRphyRpdDevL2tpSessionInfoErrorCode=docsRphyRpdDevL2tpSessionInfoErrorCode, docsRphyRpdIpDefaultRouterEntry=docsRphyRpdIpDefaultRouterEntry, docsRphyRpdIfPhysEntityMfgDate=docsRphyRpdIfPhysEntityMfgDate, docsRphyRpdDevMibObjects=docsRphyRpdDevMibObjects, docsRphyRpdDevCapabMultiSectionTimingMerRep=docsRphyRpdDevCapabMultiSectionTimingMerRep, docsRphyRpdDevCapabNumUsPspFlowsPerChan=docsRphyRpdDevCapabNumUsPspFlowsPerChan, docsRphyRpdIpAddressAddr=docsRphyRpdIpAddressAddr, docsRphyRpdIfPhysEntityDescr=docsRphyRpdIfPhysEntityDescr, docsRphyRpdIpIfStatsInUnknownProtos=docsRphyRpdIpIfStatsInUnknownProtos, docsRphyRpdDevDiagStatusSeverityLevel=docsRphyRpdDevDiagStatusSeverityLevel, docsRphyRpdDevDsUsRfPortAllocNdChans=docsRphyRpdDevDsUsRfPortAllocNdChans, docsRphyRpdDevCapabQamAsPilot=docsRphyRpdDevCapabQamAsPilot, docsRphyRpdIpMibObjects=docsRphyRpdIpMibObjects, docsRphyRpdIfEnetStatsInOctets=docsRphyRpdIfEnetStatsInOctets, docsRphyRpdIpv4InterfaceEntry=docsRphyRpdIpv4InterfaceEntry, docsRphyRpdIfRpdToCoreMapTable=docsRphyRpdIfRpdToCoreMapTable, docsRphyConformance=docsRphyConformance, docsRphyRpdDevUsSignalQualityUncorrectables=docsRphyRpdDevUsSignalQualityUncorrectables, docsRphyCcapMibObjects=docsRphyCcapMibObjects, docsRphyRpdDevUsSignalQualityRfPort=docsRphyRpdDevUsSignalQualityRfPort, docsRphyRpdDevCapabNumUsOob55d1Chans=docsRphyRpdDevCapabNumUsOob55d1Chans, docsRphyRpdIfMibObjects=docsRphyRpdIfMibObjects, docsRphyCcapL2tpSessionInfoLocalLcceIpAddrType=docsRphyCcapL2tpSessionInfoLocalLcceIpAddrType, docsRphyRpdIfEnetStatsInFrames=docsRphyRpdIfEnetStatsInFrames, docsRphyCcapL2tpSessionInfoConnCtrlID=docsRphyCcapL2tpSessionInfoConnCtrlID, docsRphyGroups=docsRphyGroups, docsRphyRpdDevIdBootRomVer=docsRphyRpdDevIdBootRomVer, docsRphyRpdIpv6GrpIpDefaultHopLimit=docsRphyRpdIpv6GrpIpDefaultHopLimit, docsRphyRpdDevEventLogFirstTime=docsRphyRpdDevEventLogFirstTime, docsRphyRpdIfEnetLastChange=docsRphyRpdIfEnetLastChange, docsRphyRpdDevLocationLatitude=docsRphyRpdDevLocationLatitude, docsRphyCompliances=docsRphyCompliances, docsRphyRpdIpIfStatsInNoRoutes=docsRphyRpdIpIfStatsInNoRoutes, docsRphyRpdIfEnetOperStatus=docsRphyRpdIfEnetOperStatus, docsRphyRpdDevUsSignalQualityEntry=docsRphyRpdDevUsSignalQualityEntry, docsRphyRpdDevDiagStatusAdditionalText=docsRphyRpdDevDiagStatusAdditionalText, docsRphyRpdDevCoresConnectedVendorId=docsRphyRpdDevCoresConnectedVendorId, docsRphyRpdIfRpdToCoreMapRpdRfPortDirection=docsRphyRpdIfRpdToCoreMapRpdRfPortDirection, docsRphyRpdDevInfoSysUpTime=docsRphyRpdDevInfoSysUpTime, docsRphyRpdIfCoreToRpdMapRpdUniqueId=docsRphyRpdIfCoreToRpdMapRpdUniqueId, docsRphyRpdIfRpdEnetToCoreEntityMapEntry=docsRphyRpdIfRpdEnetToCoreEntityMapEntry, docsRphyRpdDevL2tpSessionInfoRemoteId=docsRphyRpdDevL2tpSessionInfoRemoteId, docsRphyRpdDevDsUsRfPortAllocTable=docsRphyRpdDevDsUsRfPortAllocTable, docsRphyRpdDevCoresConnectedIsPrincipal=docsRphyRpdDevCoresConnectedIsPrincipal, docsRphyCcapL2tpSessionInfoEntry=docsRphyCcapL2tpSessionInfoEntry, docsRphyRpdIpIfStatsInMcastOctets=docsRphyRpdIpIfStatsInMcastOctets, docsRphyRpdDevIdVendorName=docsRphyRpdDevIdVendorName, docsRphyCcapSecServerCertCert=docsRphyCcapSecServerCertCert, docsRphyRpdDevCapabMaxCwTonePwr=docsRphyRpdDevCapabMaxCwTonePwr, docsRphyRpdIfPhysEntitySerialNum=docsRphyRpdIfPhysEntitySerialNum, docsRphyRpdDevL2tpSessionInfoRpdIfMtu=docsRphyRpdDevL2tpSessionInfoRpdIfMtu, docsRphyRpdDevCapabNumNdrChans=docsRphyRpdDevCapabNumNdrChans, docsRphyRpdIfPhysEntityFirmwareRev=docsRphyRpdIfPhysEntityFirmwareRev, docsRphyRpdIfEnetStatsInErrors=docsRphyRpdIfEnetStatsInErrors, docsRphyRpdDevL2tpSessionInfoLastChange=docsRphyRpdDevL2tpSessionInfoLastChange, docsRphyRpdIpIfStatsInOctets=docsRphyRpdIpIfStatsInOctets, docsRphyRpdIpNetToPhysicalTable=docsRphyRpdIpNetToPhysicalTable, docsRphyRpdIpv6InterfaceEnableStatus=docsRphyRpdIpv6InterfaceEnableStatus, docsRphyRpdDevLocationLongitude=docsRphyRpdDevLocationLongitude, docsRphyRpdDevCapabNumUsOfdmaChans=docsRphyRpdDevCapabNumUsOfdmaChans, docsRphyRpdIfPhysEntSensorValue=docsRphyRpdIfPhysEntSensorValue, docsRphyRpdIpv4InterfaceRetransmitTime=docsRphyRpdIpv4InterfaceRetransmitTime, docsRphyRpdDevDiagStatusTable=docsRphyRpdDevDiagStatusTable, docsRphyRpdDevL2tpSessionInfoDescr=docsRphyRpdDevL2tpSessionInfoDescr, docsRphyCcapSecServerCertSource=docsRphyCcapSecServerCertSource, docsRphyRpdDevEventLogText=docsRphyRpdDevEventLogText, docsRphyCcapL2tpSessionInfoSessionSubType=docsRphyCcapL2tpSessionInfoSessionSubType, docsRphyRpdDevInfoTable=docsRphyRpdDevInfoTable, docsRphyRpdIfPhysEntSensorTable=docsRphyRpdIfPhysEntSensorTable, docsRphyRpdIfCoreToRpdMapEntry=docsRphyRpdIfCoreToRpdMapEntry, docsRphyCcapSessionCinDsLatencyStatsEntry=docsRphyCcapSessionCinDsLatencyStatsEntry, docsRphyRpdIpIcmpMsgStatsType=docsRphyRpdIpIcmpMsgStatsType, docsRphyCcapL2tpSessionInfoErrorCode=docsRphyCcapL2tpSessionInfoErrorCode, docsRphyRpdIfEnetStatsOutFrames=docsRphyRpdIfEnetStatsOutFrames, docsRphyRpdDevLocationDescr=docsRphyRpdDevLocationDescr, docsRphyRpdIfPhysEntitySoftwareRev=docsRphyRpdIfPhysEntitySoftwareRev, docsRphyRpdDevDepiMcastSessionLocalLcceIpAddr=docsRphyRpdDevDepiMcastSessionLocalLcceIpAddr, docsRphyRpdIfEnetAdminStatus=docsRphyRpdIfEnetAdminStatus, docsRphyRpdDevIdUsBurstRcvrModelNum=docsRphyRpdDevIdUsBurstRcvrModelNum, docsRphyRpdIpDefaultRouterTable=docsRphyRpdIpDefaultRouterTable, docsRphyRpdDevCapabilitiesEntry=docsRphyRpdDevCapabilitiesEntry, docsRphyRpdIfEnetStatsOutBroadcastOctets=docsRphyRpdIfEnetStatsOutBroadcastOctets, docsRphyCcapL2tpSessionInfoOperStatus=docsRphyCcapL2tpSessionInfoOperStatus, docsRphyRpdDevL2tpSessionInfoTable=docsRphyRpdDevL2tpSessionInfoTable, docsRphyRpdIfCoreToRpdMapRpdRfChanIndex=docsRphyRpdIfCoreToRpdMapRpdRfChanIndex, docsRphyRpdDevCoresConnectedName=docsRphyRpdDevCoresConnectedName, docsRphyRpdDevCrashDataFileStatusEntry=docsRphyRpdDevCrashDataFileStatusEntry, docsRphyRpdDevCapabNumUsPorts=docsRphyRpdDevCapabNumUsPorts, docsRphyRpdDevOob551UsChanStatusArpdSrcIpAddrType=docsRphyRpdDevOob551UsChanStatusArpdSrcIpAddrType, docsRphyRpdDevOob551UsChanStatusMaxPwrLevel=docsRphyRpdDevOob551UsChanStatusMaxPwrLevel, docsRphyRpdDevChanReachabilityEntry=docsRphyRpdDevChanReachabilityEntry, docsRphyRpdIpIfStatsInReceives=docsRphyRpdIpIfStatsInReceives, docsRphyRpdIpIfStatsInMcastPkts=docsRphyRpdIpIfStatsInMcastPkts, docsRphyRpdDevEventLogLevel=docsRphyRpdDevEventLogLevel, docsRphyRpdIpIfStatsInHdrErrors=docsRphyRpdIpIfStatsInHdrErrors, docsRphyRpdIfEnetDescr=docsRphyRpdIfEnetDescr, docsRphyRpdIpv4GrpTable=docsRphyRpdIpv4GrpTable, docsRphyCcapL2tpSessionInfoLocalId=docsRphyCcapL2tpSessionInfoLocalId, docsRphyRpdIfPhysEntSensorValueUpdateRate=docsRphyRpdIfPhysEntSensorValueUpdateRate, docsRphyRpdDevDepiMcastSessionId=docsRphyRpdDevDepiMcastSessionId, docsRphyRpdDevIdentificationEntry=docsRphyRpdDevIdentificationEntry, docsRphyRpdDevChanReachabilityRfPortIndex=docsRphyRpdDevChanReachabilityRfPortIndex, docsRphyRpdDevDiagStatusProbableCause=docsRphyRpdDevDiagStatusProbableCause, docsRphyRpdDevUsSignalQualityRxMer=docsRphyRpdDevUsSignalQualityRxMer, RphyEventSeverityType=RphyEventSeverityType, docsRphyRpdDevDepiMcastSessionSrcIpAddr=docsRphyRpdDevDepiMcastSessionSrcIpAddr, docsRphyCcapL2tpSessionInfoLocalLcceIpAddr=docsRphyCcapL2tpSessionInfoLocalLcceIpAddr, docsRphyRpdDevL2tpSessionInfoOperStatus=docsRphyRpdDevL2tpSessionInfoOperStatus, docsRphyCcapCinDsLatencyEntry=docsRphyCcapCinDsLatencyEntry, docsRphyRpdDevCapabBufferDepthMonAlertSupp=docsRphyRpdDevCapabBufferDepthMonAlertSupp, docsRphyRpdIfPhysEntSensorUnitsDisplay=docsRphyRpdIfPhysEntSensorUnitsDisplay, docsRphyRpdDevLocationTable=docsRphyRpdDevLocationTable, docsRphyRpdDevInfoNumCrashFilesAvail=docsRphyRpdDevInfoNumCrashFilesAvail, docsRphyCcapL2tpSessionInfoSessionType=docsRphyCcapL2tpSessionInfoSessionType, docsRphyCcapL2tpSessionInfoCoreIfMtu=docsRphyCcapL2tpSessionInfoCoreIfMtu, docsRphyRpdDevL2tpSessionStatsOutOfSeqPkts=docsRphyRpdDevL2tpSessionStatsOutOfSeqPkts, docsRphyRpdDevL2tpSessionInfoConnCtrlID=docsRphyRpdDevL2tpSessionInfoConnCtrlID, docsRphyRpdIpDefaultRouterLifetime=docsRphyRpdIpDefaultRouterLifetime, docsRphyRpdIpv6InterfaceRetransmitTime=docsRphyRpdIpv6InterfaceRetransmitTime, docsRphyRpdDevEventLogTable=docsRphyRpdDevEventLogTable, docsRphyRpdIfEnetPortIndex=docsRphyRpdIfEnetPortIndex, docsRphyRpdIpIcmpMsgStatsInPkts=docsRphyRpdIpIcmpMsgStatsInPkts, docsRphyRpdIfPhysEntityName=docsRphyRpdIfPhysEntityName, docsRphyRpdDevOob551UsChanStatusMinPwrLevel=docsRphyRpdDevOob551UsChanStatusMinPwrLevel, docsRphyRpdDevDepiMcastSessionEntry=docsRphyRpdDevDepiMcastSessionEntry, docsRphyRpdDevUsSignalQualityTable=docsRphyRpdDevUsSignalQualityTable, docsRphyRpdIpv6InterfaceIdentifier=docsRphyRpdIpv6InterfaceIdentifier, docsRphyRpdIpAddressOrigin=docsRphyRpdIpAddressOrigin, docsRphyNotifications=docsRphyNotifications, docsRphyCcapL2tpSessionFlowTable=docsRphyCcapL2tpSessionFlowTable, docsRphyRpdIpAddressType=docsRphyRpdIpAddressType, docsRphyCcapL2tpSessionInfoUdpPort=docsRphyCcapL2tpSessionInfoUdpPort, docsRphyRpdDevCapabRpdUcdChgNullGrtTime=docsRphyRpdDevCapabRpdUcdChgNullGrtTime, docsRphyRpdIfEnetStatsEntry=docsRphyRpdIfEnetStatsEntry, docsRphyRpdIfEnetMtu=docsRphyRpdIfEnetMtu, docsRphyRpdDevL2tpSessionInfoLocalLcceIpAddrType=docsRphyRpdDevL2tpSessionInfoLocalLcceIpAddrType, docsRphyRpdIfPhysEntityModelName=docsRphyRpdIfPhysEntityModelName, docsRphyRpdDevIdSerialNum=docsRphyRpdDevIdSerialNum, docsRphyRpdIfEnetName=docsRphyRpdIfEnetName, docsRphyRpdIpIfStatsDiscontinuityTime=docsRphyRpdIpIfStatsDiscontinuityTime, docsRphyRpdDevUsSignalQualityCorrecteds=docsRphyRpdDevUsSignalQualityCorrecteds, docsRphyRpdIfPhysEntityUUID=docsRphyRpdIfPhysEntityUUID, docsRphyRpdDevCapabNumTenGeNsPorts=docsRphyRpdDevCapabNumTenGeNsPorts, docsRphyRpdIfPhysEntSensorValueTimeStamp=docsRphyRpdIfPhysEntSensorValueTimeStamp, docsRphyRpdDevIdDeviceDescr=docsRphyRpdDevIdDeviceDescr, docsRphyRpdDevCrashDataFileStatusFileStatus=docsRphyRpdDevCrashDataFileStatusFileStatus, docsRphyRpdIfCoreToRpdMapRpdRfPortIndex=docsRphyRpdIfCoreToRpdMapRpdRfPortIndex, docsRphyRpdIfEnetStatsOutUnicastFrames=docsRphyRpdIfEnetStatsOutUnicastFrames)
mibBuilder.exportSymbols("DOCS-RPHY-MIB", docsRphyRpdIpAddressCreated=docsRphyRpdIpAddressCreated, docsRphyRpdDevCoresConnectedCoreId=docsRphyRpdDevCoresConnectedCoreId, docsRphyRpdDevCoresConnectedAddress=docsRphyRpdDevCoresConnectedAddress, docsRphyRpdDevUsSignalQualityRxMerSamples=docsRphyRpdDevUsSignalQualityRxMerSamples, docsRphyRpdDevL2tpSessionInfoUdpPort=docsRphyRpdDevL2tpSessionInfoUdpPort, docsRphyRpdIpNetToPhysicalEntry=docsRphyRpdIpNetToPhysicalEntry, docsRphyRpdIfPhysEntityParentRelPos=docsRphyRpdIfPhysEntityParentRelPos, docsRphyRpdIpIcmpMibObjects=docsRphyRpdIpIcmpMibObjects, docsRphyRpdIpv4InterfaceEnableStatus=docsRphyRpdIpv4InterfaceEnableStatus, docsRphyCcapL2tpSessionInfoRpdIfMtu=docsRphyCcapL2tpSessionInfoRpdIfMtu, docsRphyRpdIpNetToPhysicalPhysAddress=docsRphyRpdIpNetToPhysicalPhysAddress, docsRphyRpdDevIdCurrSwVer=docsRphyRpdDevIdCurrSwVer, docsRphyRpdIfEnetStatsInUnicastOctets=docsRphyRpdIfEnetStatsInUnicastOctets, docsRphyRpdDevInfoUniqueId=docsRphyRpdDevInfoUniqueId, docsRphyRpdIpIfStatsInDelivers=docsRphyRpdIpIfStatsInDelivers, docsRphyRpdIfPhysEntityTable=docsRphyRpdIfPhysEntityTable, docsRphyRpdDevIdVendorId=docsRphyRpdDevIdVendorId, docsRphyRpdDevDepiMcastSessionGrpIpAddr=docsRphyRpdDevDepiMcastSessionGrpIpAddr, docsRphyCcapL2tpSessionInfoLocalStatus=docsRphyCcapL2tpSessionInfoLocalStatus, docsRphyRpdDevL2tpSessionInfoMaxPayload=docsRphyRpdDevL2tpSessionInfoMaxPayload, docsRphyCcapL2tpSessionInfoTable=docsRphyCcapL2tpSessionInfoTable, docsRphyRpdDevCapabNumDsPorts=docsRphyRpdDevCapabNumDsPorts, docsRphyCcapSessionCinDsLatencyStatsValTime=docsRphyCcapSessionCinDsLatencyStatsValTime, docsRphyCcapL2tpSessionInfoMaxPayload=docsRphyCcapL2tpSessionInfoMaxPayload, docsRphyRpdIpAddressAddrType=docsRphyRpdIpAddressAddrType, docsRphyRpdDevDepiMcastSessionTable=docsRphyRpdDevDepiMcastSessionTable, docsRphyRpdDevCoresConnectedTable=docsRphyRpdDevCoresConnectedTable, docsRphyCcapL2tpSessionInfoLastChange=docsRphyCcapL2tpSessionInfoLastChange, docsRphyRpdIfEnetStatsOutMulticastOctets=docsRphyRpdIfEnetStatsOutMulticastOctets, docsRphyRpdDevL2tpSessionInfoSessionSubType=docsRphyRpdDevL2tpSessionInfoSessionSubType, docsRphyRpdDevCapabNumNdfChans=docsRphyRpdDevCapabNumNdfChans, docsRphyRpdDevCapabNumUsOob55d2Demods=docsRphyRpdDevCapabNumUsOob55d2Demods, docsRphyRpdIfEnetAlias=docsRphyRpdIfEnetAlias, docsRphyCcapSecGroup=docsRphyCcapSecGroup, docsRphyCcapL2tpSessionInfoDescr=docsRphyCcapL2tpSessionInfoDescr, docsRphyRpdIfEnetConnectorPresent=docsRphyRpdIfEnetConnectorPresent, docsRphyRpdDevL2tpSessionInfoCreationTime=docsRphyRpdDevL2tpSessionInfoCreationTime, docsRphyRpdDevL2tpSessionInfoCoreIfMtu=docsRphyRpdDevL2tpSessionInfoCoreIfMtu, docsRphyRpdIfPhysEntityMfgName=docsRphyRpdIfPhysEntityMfgName, docsRphyRpdDevCrashDataFileStatusIndex=docsRphyRpdDevCrashDataFileStatusIndex, docsRphyRpdIfPhysEntityVendorType=docsRphyRpdIfPhysEntityVendorType, docsRphyRpdIpAddressLastChanged=docsRphyRpdIpAddressLastChanged, docsRphyRpdIpIfStatsEntry=docsRphyRpdIpIfStatsEntry, docsRphyRpdDevIdHwRev=docsRphyRpdDevIdHwRev, docsRphyRpdDevEventLogEntry=docsRphyRpdDevEventLogEntry, docsRphyRpdIfEnetStatsInUnknownProtos=docsRphyRpdIfEnetStatsInUnknownProtos, docsRphyRpdDevOob551UsChanStatusCounterDiscontinuityTime=docsRphyRpdDevOob551UsChanStatusCounterDiscontinuityTime, docsRphyRpdDevChanReachabilityChanType=docsRphyRpdDevChanReachabilityChanType, docsRphyRpdIpv6InterfaceReachableTime=docsRphyRpdIpv6InterfaceReachableTime, docsRphyRpdIpv4GrpInterfaceTableLastChange=docsRphyRpdIpv4GrpInterfaceTableLastChange, docsRphyRpdDevOob551UsChanStatusTotalCellsRcvd=docsRphyRpdDevOob551UsChanStatusTotalCellsRcvd, docsRphyRpdDevIdUsBurstRcvrSerialNum=docsRphyRpdDevIdUsBurstRcvrSerialNum, docsRphyRpdIfEnetStatsOutMulticastFrames=docsRphyRpdIfEnetStatsOutMulticastFrames, docsRphyRpdIpIfStatsIPVersion=docsRphyRpdIpIfStatsIPVersion, docsRphyCompliance=docsRphyCompliance, docsRphyRpdDevLocationEntry=docsRphyRpdDevLocationEntry, docsRphyRpdIpIfStatsInAddrErrors=docsRphyRpdIpIfStatsInAddrErrors, docsRphyRpdIpDefaultRouterAddressType=docsRphyRpdIpDefaultRouterAddressType, docsRphyRpdIfCoreToRpdMapTable=docsRphyRpdIfCoreToRpdMapTable, docsRphyRpdDevCapabBufferDepthCfgSupp=docsRphyRpdDevCapabBufferDepthCfgSupp, docsRphyRpdDevOob551UsChanStatusArpdSrcIpAddr=docsRphyRpdDevOob551UsChanStatusArpdSrcIpAddr, docsRphyRpdIpIcmpMsgStatsTable=docsRphyRpdIpIcmpMsgStatsTable, docsRphyCcapSecServerCertSerialNumber=docsRphyCcapSecServerCertSerialNumber, docsRphyRpdDevCapabSupportsUdpEncap=docsRphyRpdDevCapabSupportsUdpEncap, docsRphyRpdIfRpdToCoreMapEntry=docsRphyRpdIfRpdToCoreMapEntry, docsRphyRpdDevCapabNumCwToneGens=docsRphyRpdDevCapabNumCwToneGens, docsRphyRpdIfEnetStatsInDiscards=docsRphyRpdIfEnetStatsInDiscards, docsRphyRpdDevCapabNumDsOob55d2Modules=docsRphyRpdDevCapabNumDsOob55d2Modules, docsRphyRpdDevIdUsBurstRcvrVendorId=docsRphyRpdDevIdUsBurstRcvrVendorId, docsRphyRpdDevL2tpSessionInfoLocalId=docsRphyRpdDevL2tpSessionInfoLocalId, docsRphyRpdDevOob551UsChanStatusUncorrectableCellsRcvd=docsRphyRpdDevOob551UsChanStatusUncorrectableCellsRcvd, docsRphyRpdIpIfStatsRefreshRate=docsRphyRpdIpIfStatsRefreshRate, docsRphyRpdIpAddressPrefixLen=docsRphyRpdIpAddressPrefixLen, docsRphyRpdDevChanReachabilityEnetPortIndex=docsRphyRpdDevChanReachabilityEnetPortIndex, docsRphyRpdDevDsUsRfPortAllocDirection=docsRphyRpdDevDsUsRfPortAllocDirection, docsRphyRpdDevL2tpSessionInfoSessionType=docsRphyRpdDevL2tpSessionInfoSessionType, docsRphyRpdIfRpdToCoreMapRpdRfPortIndex=docsRphyRpdIfRpdToCoreMapRpdRfPortIndex, docsRphyRpdIpIfStatsOutTransmits=docsRphyRpdIpIfStatsOutTransmits, docsRphyRpdIfEnetLinkUpDownTrapEnable=docsRphyRpdIfEnetLinkUpDownTrapEnable, docsRphyRpdIpv6GrpEntry=docsRphyRpdIpv6GrpEntry, docsRphyCcapL2tpSessionStatsTable=docsRphyCcapL2tpSessionStatsTable, docsRphyRpdDevL2tpSessionInfoLocalLcceIpAddr=docsRphyRpdDevL2tpSessionInfoLocalLcceIpAddr, docsRphyRpdDevOob551UsChanStatusTable=docsRphyRpdDevOob551UsChanStatusTable, docsRphyRpdIfPhysEntityContainedIn=docsRphyRpdIfPhysEntityContainedIn, docsRphyCcapL2tpSessionInfoCreationTime=docsRphyCcapL2tpSessionInfoCreationTime, PYSNMP_MODULE_ID=docsRphyMib, docsRphyRpdDevCapabNumAsynchVideoChans=docsRphyRpdDevCapabNumAsynchVideoChans, docsRphyRpdIfEnetStatsOutUnicastOctets=docsRphyRpdIfEnetStatsOutUnicastOctets, docsRphyRpdDevCapabNumUsScQamChans=docsRphyRpdDevCapabNumUsScQamChans, docsRphyRpdIfEnetStatsTable=docsRphyRpdIfEnetStatsTable, docsRphyRpdDevDiagStatusEntry=docsRphyRpdDevDiagStatusEntry, docsRphyCcapCoreGroup=docsRphyCcapCoreGroup, docsRphyCcapL2tpSessionInfoPathPayload=docsRphyCcapL2tpSessionInfoPathPayload, docsRphyRpdIfPhysEntSensorScale=docsRphyRpdIfPhysEntSensorScale, docsRphyRpdDevInfoEntry=docsRphyRpdDevInfoEntry, docsRphyRpdDevDepiMcastSessionRemoteLcceIpAddr=docsRphyRpdDevDepiMcastSessionRemoteLcceIpAddr, docsRphyRpdDevCapabSupportsFlowTags=docsRphyRpdDevCapabSupportsFlowTags, docsRphyRpdDevOob551UsChanStatusNcIpAddrType=docsRphyRpdDevOob551UsChanStatusNcIpAddrType, docsRphyRpdDevCapabNumDsScQamChans=docsRphyRpdDevCapabNumDsScQamChans, docsRphyRpdIpIfStatsInTruncatedPkts=docsRphyRpdIpIfStatsInTruncatedPkts, docsRphyRpdDevCoresConnectedEntry=docsRphyRpdDevCoresConnectedEntry, docsRphyRpdIfCoreToRpdMapRpdRfPortDirection=docsRphyRpdIfCoreToRpdMapRpdRfPortDirection, docsRphyRpdIfEnetStatsOutBroadcastFrames=docsRphyRpdIfEnetStatsOutBroadcastFrames, docsRphyRpdIfEnetStatsOutDiscards=docsRphyRpdIfEnetStatsOutDiscards, docsRphyRpdIpAddressTable=docsRphyRpdIpAddressTable, docsRphyCcapL2tpSessionInfoIncludeDOCSISMsgs=docsRphyCcapL2tpSessionInfoIncludeDOCSISMsgs, docsRphyRpdDevCapabRpdUcdProcTime=docsRphyRpdDevCapabRpdUcdProcTime, docsRphyCcapL2tpSessionFlowPspFlowId=docsRphyCcapL2tpSessionFlowPspFlowId, docsRphyRpdDevDsUsRfPortAllocOob551Chans=docsRphyRpdDevDsUsRfPortAllocOob551Chans, docsRphyRpdDevOob551UsChanStatusNcIpAddr=docsRphyRpdDevOob551UsChanStatusNcIpAddr, docsRphyRpdIfEnetStatsInMulticastFrames=docsRphyRpdIfEnetStatsInMulticastFrames, docsRphyRpdIpNetToPhysicalNetAddress=docsRphyRpdIpNetToPhysicalNetAddress, docsRphyRpdDevOob551UsChanStatusRfPort=docsRphyRpdDevOob551UsChanStatusRfPort, docsRphyRpdDevCapabNumDsPspFlowsPerChan=docsRphyRpdDevCapabNumDsPspFlowsPerChan, docsRphyRpdIfPhysEntityIndex=docsRphyRpdIfPhysEntityIndex, docsRphyRpdIpNetToPhysicalLastUpdated=docsRphyRpdIpNetToPhysicalLastUpdated, docsRphyRpdDevL2tpSessionInfoCoreId=docsRphyRpdDevL2tpSessionInfoCoreId, docsRphyRpdIfPhysEntityClass=docsRphyRpdIfPhysEntityClass, docsRphyRpdIpv6GrpInterfaceTableLastChange=docsRphyRpdIpv6GrpInterfaceTableLastChange, docsRphyRpdDevEventLogIndex=docsRphyRpdDevEventLogIndex, docsRphyCcapCinDsLatencyInterval=docsRphyCcapCinDsLatencyInterval, docsRphyRpdDevDsUsRfPortAllocScQamChans=docsRphyRpdDevDsUsRfPortAllocScQamChans, docsRphyRpdDevCapabNumDsOfdmChans=docsRphyRpdDevCapabNumDsOfdmChans, docsRphyRpdIpIfStatsOutRequests=docsRphyRpdIpIfStatsOutRequests, docsRphyRpdIpv4GrpEntry=docsRphyRpdIpv4GrpEntry, docsRphyRpdDevCapabHighestCwToneFreq=docsRphyRpdDevCapabHighestCwToneFreq, docsRphyCcapSessionCinDsLatencyStatsVal=docsRphyCcapSessionCinDsLatencyStatsVal, docsRphyRpdDevIdRcpProtocolVer=docsRphyRpdDevIdRcpProtocolVer, docsRphyCcapSecServerCertIssuer=docsRphyCcapSecServerCertIssuer, docsRphyRpdIfPhysEntityAlias=docsRphyRpdIfPhysEntityAlias, docsRphyRpdIpIfStatsInDiscards=docsRphyRpdIpIfStatsInDiscards, docsRphyRpdIfPhysEntSensorEntry=docsRphyRpdIfPhysEntSensorEntry, docsRphyCcapSecServerCertSubject=docsRphyCcapSecServerCertSubject, docsRphyRpdDevOob551UsChanStatusCorrectedCellsRcvd=docsRphyRpdDevOob551UsChanStatusCorrectedCellsRcvd)
