#
# PySNMP MIB module CISCO-VIRTUAL-NW-IF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-VIRTUAL-NW-IF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:18:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
FcAddressId, = mibBuilder.importSymbols("CISCO-ST-TC", "FcAddressId")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
InterfaceIndex, ifName = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifName")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
TimeTicks, NotificationType, MibIdentifier, Gauge32, Counter32, Counter64, Bits, iso, IpAddress, Unsigned32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "NotificationType", "MibIdentifier", "Gauge32", "Counter32", "Counter64", "Bits", "iso", "IpAddress", "Unsigned32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ModuleIdentity")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
ciscoVirtualNwIfMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 290))
ciscoVirtualNwIfMIB.setRevisions(('2002-10-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoVirtualNwIfMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoVirtualNwIfMIB.setLastUpdated('200210020000Z')
if mibBuilder.loadTexts: ciscoVirtualNwIfMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoVirtualNwIfMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553 -NETS E-mail: cs-san@cisco.com')
if mibBuilder.loadTexts: ciscoVirtualNwIfMIB.setDescription('The MIB module for management of virtual network interfaces to VSAN and VLAN.')
ciscoVirtualNwIfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 290, 1))
virtualNwIfMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 290, 2))
virtualNwIfConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 290, 1, 1))
virtualNwIfStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 290, 1, 2))
virtualNwIfNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 290, 1, 3))
virtualNwIfNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 290, 1, 3, 0))
virtualNwIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 290, 1, 1, 1), )
if mibBuilder.loadTexts: virtualNwIfTable.setStatus('current')
if mibBuilder.loadTexts: virtualNwIfTable.setDescription("This table contains one entry for each local virtual interface to a VSAN or VLAN, at most one such interface per processor on a Supervisor or Line card managed by the agent. Each such processor will have an entry in the entPhysicalTable ( from ENTITY-MIB ) and will have a unique PhysicalIndex. For e.g. if Line card has 2 processors on it then each processor will have a entry in the entPhysicaltable and each will have unique PhysicalIndex. It is possible that there can be multiple VSAN's or VLAN's per processor, but the network manager can create only one virtual interface for a VSAN and only one for a VLAN per physical entity i.e. per processor on the card. Note:Processor is represented as a physical entity in the entPhysicalTable. Each such interface has a unique ifIndex assigned by the agent. When requested to create an entry in this table, the agent also creates a corresponding entry in the ifTable of IF-MIB and also an entry in the cieIfInterfaceTable of CISCO-IF-EXTENSION-MIB. Next, the agent fills in the values of virtualNwIfIndex, after which the creation of the entry in this table completes. The ciiIPIfAddressTable of CISCO-IP-IF-MIB can be used to configure the IP addresses. The ifTable and this table can be used to monitor the interface. Entries in this table are created by network managers. But the entries can be deleted either by the network managers or will be deleted by the agent if the corresponding VSAN or VLAN is deleted. An entry will be allowed to be created only if the corresponding VSAN or VLAN has been created. The ifType for an created interface of type 'vsan(1)' will be 'fibreChannel(56)' and of type 'vlan(2)' would be 'ethernetCsmacd(6)'. ")
virtualNwIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 290, 1, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-VIRTUAL-NW-IF-MIB", "virtualNwIfType"), (0, "CISCO-VIRTUAL-NW-IF-MIB", "virtualNwIfId"))
if mibBuilder.loadTexts: virtualNwIfEntry.setStatus('current')
if mibBuilder.loadTexts: virtualNwIfEntry.setDescription('Each entry provides information on a local virtual interface for a VSAN or VLAN.')
virtualNwIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 290, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vsan", 1), ("vlan", 2))))
if mibBuilder.loadTexts: virtualNwIfType.setStatus('current')
if mibBuilder.loadTexts: virtualNwIfType.setDescription("If the virtualNwIfType is vsan(1) and if the corresponding virtual interface is enabled ( ifAdminStatus='up' ), then the operational state of virtual interface will become active ( ifOperStatus='up' ) only if the VSAN state is active and a FCID is obtained through a successful FLOGI. Even if the desired state of the virtual interface is enabled ( ifAdminStatus='up' ), but if the VSAN state is non-active or FCID has not been obtained, then the virtual interface is disabled(ifOperStatus='down'). Only when the VSAN state becomes active and an FCID is obtained will the virtual interface be enabled ( ifOperStatus='up' ). An interface can be disabled while its VSAN exists by setting ifAdminStatus='down'. When an VSAN is deleted, the corresponding interface ( if created ) is also deleted. If the virtualNwIfType is vlan(2) and if the corresponding virtual interface is enabled ( ifAdminStatus='up' ) , then the virtual interface will become active ( ifOperStatus='up' ) only if the VLAN state is active. Even if the desired state of the virtual interface is enabled(ifAdminStatus='up'), but if the VLAN state is non-active, then the virtual interface is disabled ( ifOperStatus='down' ) . Only when the VLAN state becomes active will the virtual interface be enabled ( ifOperStatus='up' ). An interface can be disabled while its VLAN exists by setting ifAdminStatus='down'. When an VLAN is deleted, the corresponding interface ( if created ) is also deleted. ")
virtualNwIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 290, 1, 1, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: virtualNwIfId.setStatus('current')
if mibBuilder.loadTexts: virtualNwIfId.setDescription('The id of VSAN or VLAN, according to the value of virtualNwIfType. ')
virtualNwIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 290, 1, 1, 1, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualNwIfIndex.setStatus('current')
if mibBuilder.loadTexts: virtualNwIfIndex.setDescription("The ifIndex of this interface. This value is dynamically assigned by the agent. It is valid whenever the value of the corresponding virtualNwIfRowStatus is 'active'. The ifType of interface of type vsan(1) will be 'fibreChannel(56)' and of type 'vlan(2)' would be 'ethernetCsmacd(6)'. ")
virtualNwIfFcId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 290, 1, 1, 1, 1, 4), FcAddressId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualNwIfFcId.setStatus('current')
if mibBuilder.loadTexts: virtualNwIfFcId.setDescription("The Fibre Channel Identifier(FC-ID) of this interface. This object is relevant to interfaces with 'virtualNwIfType' of vsan(1) only. ")
virtualNwIfOperStatusCause = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 290, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("adminDown", 2), ("vsanNotOperational", 3), ("noFcid", 4), ("kernelConfFailure", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualNwIfOperStatusCause.setStatus('current')
if mibBuilder.loadTexts: virtualNwIfOperStatusCause.setDescription("The cause of current operational state of the interface. 'none(1)' - no failure. 'adminDown(2)' - 'ifAdminStatus' is down(2). 'vsanNotOperational(3) - VSAN not operational. 'noFcid(4)' - failed to get an FCID. 'kernelConfFailure(5)' - failed to configure the network device. The current operational state of the interface is shown by the 'ifOperStatus' defined in rfc2863. This object will show 'none(1)' for all the 'ifOperStatus' values except for 'down(2)'. It will show one of the values defined above if 'ifOperStatus' is 'down(2)'. ")
virtualNwIfOperStatusCauseDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 290, 1, 1, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualNwIfOperStatusCauseDescr.setStatus('current')
if mibBuilder.loadTexts: virtualNwIfOperStatusCauseDescr.setDescription("The description for the cause of current operational state of the interface, shown by the object 'virtualNwIfOperStatusCause'. ")
virtualNwIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 290, 1, 1, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: virtualNwIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: virtualNwIfRowStatus.setDescription('The status of this conceptual row. ')
virtualNwIfCreateEntryNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 290, 1, 3, 0, 1)).setObjects(("CISCO-VIRTUAL-NW-IF-MIB", "virtualNwIfIndex"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: virtualNwIfCreateEntryNotify.setStatus('current')
if mibBuilder.loadTexts: virtualNwIfCreateEntryNotify.setDescription("This notification is generated by the agent whenever an virtual interface is created in the, 'virtualNwIfTable'. Note that this notification is generated only when a new entry is added to the table and not for any modifications to an existing entry. ")
virtualNwIfDeleteEntryNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 290, 1, 3, 0, 2)).setObjects(("CISCO-VIRTUAL-NW-IF-MIB", "virtualNwIfIndex"))
if mibBuilder.loadTexts: virtualNwIfDeleteEntryNotify.setStatus('current')
if mibBuilder.loadTexts: virtualNwIfDeleteEntryNotify.setDescription("This notification is generated by the agent whenever an virtual interface is deleted from the 'virtualNwIfTable'. ")
virtualNwIfMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 290, 2, 1))
virtualNwIfMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 290, 2, 2))
virtualNwIfMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 290, 2, 1, 1)).setObjects(("CISCO-VIRTUAL-NW-IF-MIB", "virtualNwIfGroup"), ("CISCO-VIRTUAL-NW-IF-MIB", "virtualNwIfNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    virtualNwIfMIBCompliance = virtualNwIfMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: virtualNwIfMIBCompliance.setDescription('The compliance statement for entities which implement the CISCO-VIRTUAL-NW-IF-MIB mib. ')
virtualNwIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 290, 2, 2, 1)).setObjects(("CISCO-VIRTUAL-NW-IF-MIB", "virtualNwIfIndex"), ("CISCO-VIRTUAL-NW-IF-MIB", "virtualNwIfFcId"), ("CISCO-VIRTUAL-NW-IF-MIB", "virtualNwIfOperStatusCause"), ("CISCO-VIRTUAL-NW-IF-MIB", "virtualNwIfOperStatusCauseDescr"), ("CISCO-VIRTUAL-NW-IF-MIB", "virtualNwIfRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    virtualNwIfGroup = virtualNwIfGroup.setStatus('current')
if mibBuilder.loadTexts: virtualNwIfGroup.setDescription('A collection of objects related to virtual interface parameters. ')
virtualNwIfNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 290, 2, 2, 2)).setObjects(("CISCO-VIRTUAL-NW-IF-MIB", "virtualNwIfCreateEntryNotify"), ("CISCO-VIRTUAL-NW-IF-MIB", "virtualNwIfDeleteEntryNotify"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    virtualNwIfNotificationGroup = virtualNwIfNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: virtualNwIfNotificationGroup.setDescription('A collection of notifications for monitoring virtual interfaces. ')
mibBuilder.exportSymbols("CISCO-VIRTUAL-NW-IF-MIB", PYSNMP_MODULE_ID=ciscoVirtualNwIfMIB, virtualNwIfTable=virtualNwIfTable, virtualNwIfId=virtualNwIfId, virtualNwIfOperStatusCauseDescr=virtualNwIfOperStatusCauseDescr, ciscoVirtualNwIfMIB=ciscoVirtualNwIfMIB, ciscoVirtualNwIfObjects=ciscoVirtualNwIfObjects, virtualNwIfMIBCompliance=virtualNwIfMIBCompliance, virtualNwIfStatistics=virtualNwIfStatistics, virtualNwIfNotificationGroup=virtualNwIfNotificationGroup, virtualNwIfMIBGroups=virtualNwIfMIBGroups, virtualNwIfFcId=virtualNwIfFcId, virtualNwIfOperStatusCause=virtualNwIfOperStatusCause, virtualNwIfRowStatus=virtualNwIfRowStatus, virtualNwIfEntry=virtualNwIfEntry, virtualNwIfCreateEntryNotify=virtualNwIfCreateEntryNotify, virtualNwIfIndex=virtualNwIfIndex, virtualNwIfType=virtualNwIfType, virtualNwIfMIBConformance=virtualNwIfMIBConformance, virtualNwIfConfig=virtualNwIfConfig, virtualNwIfNotification=virtualNwIfNotification, virtualNwIfDeleteEntryNotify=virtualNwIfDeleteEntryNotify, virtualNwIfMIBCompliances=virtualNwIfMIBCompliances, virtualNwIfGroup=virtualNwIfGroup, virtualNwIfNotifications=virtualNwIfNotifications)
