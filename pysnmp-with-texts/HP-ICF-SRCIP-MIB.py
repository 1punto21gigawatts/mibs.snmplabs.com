#
# PySNMP MIB module HP-ICF-SRCIP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-SRCIP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:35:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
hpicfCommon, = mibBuilder.importSymbols("HP-ICF-OID", "hpicfCommon")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Bits, Counter32, Counter64, TimeTicks, Integer32, iso, NotificationType, ObjectIdentity, ModuleIdentity, Unsigned32, MibIdentifier, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Bits", "Counter32", "Counter64", "TimeTicks", "Integer32", "iso", "NotificationType", "ObjectIdentity", "ModuleIdentity", "Unsigned32", "MibIdentifier", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hpicfSrcIpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 13))
hpicfSrcIpMIB.setRevisions(('2016-08-29 00:00', '2011-07-21 00:00', '2009-04-30 00:00', '2008-10-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfSrcIpMIB.setRevisionsDescriptions(("Added 'tunnelednodeserver' to 'hpicfSrcIpProtocolIndex' values.", "Added 'sflow' to 'hpicfSrcIpProtocolIndex' values.", "Added 'telnet', 'tftp', 'sntp' to 'hpicfSrcIpProtocolIndex' values.", 'Initial version.',))
if mibBuilder.loadTexts: hpicfSrcIpMIB.setLastUpdated('201608290000Z')
if mibBuilder.loadTexts: hpicfSrcIpMIB.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpicfSrcIpMIB.setContactInfo('Hewlett Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpicfSrcIpMIB.setDescription('This MIB module contains the definitions of HP proprietary Managed Objects used for managing HP Routing switches with implemented source IP address administrative control.')
hpicfSrcIpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 13, 1))
hpicfSrcIpAddrPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 13, 1, 1), )
if mibBuilder.loadTexts: hpicfSrcIpAddrPolicyTable.setStatus('current')
if mibBuilder.loadTexts: hpicfSrcIpAddrPolicyTable.setDescription('A table of entries used to configure the policy for selecting source IP address for different application protocols while transmitting the protocol specific IP packets. When the entry is configured the outgoing IP packets generated by the corresponding application protocol will have the source IP address field modified based on the configured policy option.')
hpicfSrcIpAddrPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 13, 1, 1, 1), ).setIndexNames((0, "HP-ICF-SRCIP-MIB", "hpicfSrcIpAddressType"), (0, "HP-ICF-SRCIP-MIB", "hpicfSrcIpProtocolIndex"))
if mibBuilder.loadTexts: hpicfSrcIpAddrPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfSrcIpAddrPolicyEntry.setDescription("An entry in the 'hpicfSrcIpAddrPolicyTable' containing information about a source IP address selection policy.")
hpicfSrcIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 13, 1, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hpicfSrcIpAddressType.setStatus('current')
if mibBuilder.loadTexts: hpicfSrcIpAddressType.setDescription('Type of IP address. The only values expected are ipv4 or ipv6.')
hpicfSrcIpProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 13, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("tacacs", 1), ("radius", 2), ("syslog", 3), ("telnet", 4), ("tftp", 5), ("sntp", 6), ("sflow", 7), ("tunnelednodeserver", 8))))
if mibBuilder.loadTexts: hpicfSrcIpProtocolIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfSrcIpProtocolIndex.setDescription("The application protocol index value which uniquely identifies a row in the 'hpicfSrcIpAddrPolicyTable'.")
hpicfSrcIpAddrPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 13, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("outgoingInterface", 1), ("configuredIpAddr", 2), ("configuredInterface", 3))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfSrcIpAddrPolicy.setStatus('current')
if mibBuilder.loadTexts: hpicfSrcIpAddrPolicy.setDescription("The policy for selecting the source IP address. outgoingInterface - the IP address of outgoing interface should be used as the source. This is the default behavior if no other policy is configured. configuredIpAddr - the specific IP address configured on one of the switch's IP interfaces (VLAN or loopback) should be used as the source. configuredInterface - an IP address configured on the specified IP interface (VLAN or loopback) should be used as the source. In case of multi-netted interface the lexicographically lowest IP address will be used.")
hpicfSrcIpAddrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 13, 1, 1, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfSrcIpAddrIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfSrcIpAddrIfIndex.setDescription("Index of IP interface whose IP address should be used as source IP while sending application protocol packets. On multi-netted interface the lexicographically lowest IP address will be used. This object should be used in conjunction with the 'hpicfSrcIpAddrPolicy' MIB object.")
hpicfSrcIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 13, 1, 1, 1, 5), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfSrcIpAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfSrcIpAddress.setDescription("Administratively assigned IP address that should be used as source while sending application protocol packets. This object should be used in conjunction with the 'hpicfSrcIpAddrPolicy' MIB object.")
hpicfSrcIpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 13, 2))
hpicfSrcIpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 13, 2, 1))
hpicfSrcIpBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 13, 2, 1, 1)).setObjects(("HP-ICF-SRCIP-MIB", "hpicfSrcIpAddrPolicy"), ("HP-ICF-SRCIP-MIB", "hpicfSrcIpAddrIfIndex"), ("HP-ICF-SRCIP-MIB", "hpicfSrcIpAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfSrcIpBaseGroup = hpicfSrcIpBaseGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfSrcIpBaseGroup.setDescription('A collection of objects allowing configuration of policies for selecting source IP address for application protocols.')
hpicfSrcIpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 13, 2, 2))
hpicfSrcIpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 13, 2, 2, 1)).setObjects(("HP-ICF-SRCIP-MIB", "hpicfSrcIpBaseGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfSrcIpCompliance = hpicfSrcIpCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfSrcIpCompliance.setDescription('The core compliance statement for HP Routing switches with source IP address administrative control.')
mibBuilder.exportSymbols("HP-ICF-SRCIP-MIB", hpicfSrcIpConfig=hpicfSrcIpConfig, hpicfSrcIpAddrIfIndex=hpicfSrcIpAddrIfIndex, PYSNMP_MODULE_ID=hpicfSrcIpMIB, hpicfSrcIpAddrPolicyEntry=hpicfSrcIpAddrPolicyEntry, hpicfSrcIpAddrPolicy=hpicfSrcIpAddrPolicy, hpicfSrcIpAddress=hpicfSrcIpAddress, hpicfSrcIpCompliance=hpicfSrcIpCompliance, hpicfSrcIpProtocolIndex=hpicfSrcIpProtocolIndex, hpicfSrcIpBaseGroup=hpicfSrcIpBaseGroup, hpicfSrcIpMIB=hpicfSrcIpMIB, hpicfSrcIpAddrPolicyTable=hpicfSrcIpAddrPolicyTable, hpicfSrcIpAddressType=hpicfSrcIpAddressType, hpicfSrcIpGroups=hpicfSrcIpGroups, hpicfSrcIpConformance=hpicfSrcIpConformance, hpicfSrcIpCompliances=hpicfSrcIpCompliances)
