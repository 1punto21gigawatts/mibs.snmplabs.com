#
# PySNMP MIB module ENGENIUS-PRIVATE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ENGENIUS-PRIVATE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:02:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ObjectIdentity, iso, IpAddress, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, NotificationType, TimeTicks, MibIdentifier, enterprises, Bits, ModuleIdentity, Counter64, Integer32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "iso", "IpAddress", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "NotificationType", "TimeTicks", "MibIdentifier", "enterprises", "Bits", "ModuleIdentity", "Counter64", "Integer32", "Counter32")
DisplayString, DateAndTime, TextualConvention, MacAddress, TimeStamp, RowStatus, TimeInterval, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "DateAndTime", "TextualConvention", "MacAddress", "TimeStamp", "RowStatus", "TimeInterval", "TruthValue")
engeniusprivate = ModuleIdentity((1, 3, 6, 1, 4, 1, 14125, 2))
engeniusprivate.setRevisions(('2009-06-11 11:00', '2009-06-10 16:00', '2009-05-14 10:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: engeniusprivate.setRevisionsDescriptions(('Added new parameter: modelname,rf power, macadd, rssi', 'Simplified version, remove unsupported item, added ipaddress type, added reboot cmd', 'First version of Engenius-Private-MIB',))
if mibBuilder.loadTexts: engeniusprivate.setLastUpdated('200906111100Z')
if mibBuilder.loadTexts: engeniusprivate.setOrganization('Senao R&D Dept., S/W Division')
if mibBuilder.loadTexts: engeniusprivate.setContactInfo(' Info SENAO INTERNATIONAL CO., LTD. No.500, Fusing 3 Rd., Hwa-Ya Technical Park, Kuei-Shan Hsiang, TAOYUAN County 333, TAIWAN, R.O.C. Tel: 886-3-328-9289 Fax: 886-3-328-9666 E-mail: info@senao.com.tw ')
if mibBuilder.loadTexts: engeniusprivate.setDescription(' The MIB module defines Senao implementation-specific metrics useful in managing IEEE 802.11 on Senao devices. This is used as a supplement to the standard 802.11 MIB proposed by IEEE. ')
engenius = MibIdentifier((1, 3, 6, 1, 4, 1, 14125))
status = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 2, 1))
configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 2, 2))
command = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 2, 3))
system = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 2, 1, 1))
wan = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 2, 2, 1))
pppoe = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 2, 2, 2))
dns = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 2, 2, 3))
mtu = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 2, 2, 4))
landhcp = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 2, 2, 5))
ntp = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 2, 2, 6))
admin = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 2, 2, 8))
wlan = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 2, 2, 9))
wlansta = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 2, 2, 10))
wlanmesh = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 2, 2, 11))
wlanstawds = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 2, 2, 14))
stp = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 2, 2, 15))
snmp = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 2, 2, 16))
wmm = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 2, 2, 17))
logemail = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 2, 2, 20))
vpn = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 2, 2, 21))
traffic = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 2, 2, 22))
saveCmd = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 2, 3, 1))
resetCmd = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 2, 3, 2))
rebootCmd = MibIdentifier((1, 3, 6, 1, 4, 1, 14125, 2, 3, 3))
systemName = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)).clone('Access Point')).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemName.setStatus('current')
if mibBuilder.loadTexts: systemName.setDescription("The DUT's system name.")
sysPassword = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)).clone('admin')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysPassword.setStatus('current')
if mibBuilder.loadTexts: sysPassword.setDescription('The password that system manager own.')
errMsg = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: errMsg.setStatus('current')
if mibBuilder.loadTexts: errMsg.setDescription('The error message record')
statusWLANSTAAssoc = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: statusWLANSTAAssoc.setStatus('current')
if mibBuilder.loadTexts: statusWLANSTAAssoc.setDescription('The status of wireless interface connect to AP')
modelName = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: modelName.setStatus('current')
if mibBuilder.loadTexts: modelName.setDescription('Firmware model name')
wirelessMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessMacAddress.setStatus('current')
if mibBuilder.loadTexts: wirelessMacAddress.setDescription('The wireless MAC address')
wanIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanIPAddress.setStatus('current')
if mibBuilder.loadTexts: wanIPAddress.setDescription('The WAN IP address')
wanSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanSubnetMask.setStatus('current')
if mibBuilder.loadTexts: wanSubnetMask.setDescription('The WAN subnet mask')
wanConnectionType = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dhcp", 1), ("static", 2), ("pppoe", 3))).clone('static')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wanConnectionType.setStatus('current')
if mibBuilder.loadTexts: wanConnectionType.setDescription('The wan connection type which one of Static IP/DHCP/PPPoE/PPTP')
wanGeneralAccount = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wanGeneralAccount.setStatus('current')
if mibBuilder.loadTexts: wanGeneralAccount.setDescription('The DUT network Account ID')
wanGeneralDomain = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wanGeneralDomain.setStatus('current')
if mibBuilder.loadTexts: wanGeneralDomain.setDescription('The DUT network Domain Name')
wanGeneralIP = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 1, 4), IpAddress().clone('10.1.1.100')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wanGeneralIP.setStatus('current')
if mibBuilder.loadTexts: wanGeneralIP.setDescription('The DUT wan interface static IP address in static connection type')
wanGeneralSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 1, 5), IpAddress().clone('255.255.0.0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wanGeneralSubnetMask.setStatus('current')
if mibBuilder.loadTexts: wanGeneralSubnetMask.setDescription('The DUT wan interface subnet mask in static connection type')
wanGeneralGateway = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 1, 6), IpAddress().clone('10.1.1.150')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wanGeneralGateway.setStatus('current')
if mibBuilder.loadTexts: wanGeneralGateway.setDescription('The DUT networks gateway IP address in static connection type')
wanPPPoELoginName = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wanPPPoELoginName.setStatus('current')
if mibBuilder.loadTexts: wanPPPoELoginName.setDescription('PPPoE user name')
wanPPPoEPassword = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wanPPPoEPassword.setStatus('current')
if mibBuilder.loadTexts: wanPPPoEPassword.setDescription('PPPoE password')
wanPPPoEServiceName = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wanPPPoEServiceName.setStatus('current')
if mibBuilder.loadTexts: wanPPPoEServiceName.setDescription('Specifies the desired PPPoE service name')
wanPPPoEConnectionType = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("keepalive", 0), ("connectondemand", 1))).clone('keepalive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wanPPPoEConnectionType.setStatus('current')
if mibBuilder.loadTexts: wanPPPoEConnectionType.setDescription('PPPoE connection type which keep alive or on demand.')
wanPPPoEMaxIdleTime = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wanPPPoEMaxIdleTime.setStatus('current')
if mibBuilder.loadTexts: wanPPPoEMaxIdleTime.setDescription('The max idle time (minutes) in connect on demand connection type')
wanPPPoERedialPeriod = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 180)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wanPPPoERedialPeriod.setStatus('current')
if mibBuilder.loadTexts: wanPPPoERedialPeriod.setDescription('The redial period (seconds) in keep alive connection type')
wanDNSSourc = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("isp", 0), ("specified", 1))).clone('isp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wanDNSSourc.setStatus('current')
if mibBuilder.loadTexts: wanDNSSourc.setDescription('Automatically gets DNS IP address from ISP or user sepcisicify')
wanPrimaryDNSIP = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 3, 2), IpAddress().clone('0.0.0.0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wanPrimaryDNSIP.setStatus('current')
if mibBuilder.loadTexts: wanPrimaryDNSIP.setDescription('The primary DNS IP address')
wanSecondaryDNSIP = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 3, 3), IpAddress().clone('0.0.0.0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wanSecondaryDNSIP.setStatus('current')
if mibBuilder.loadTexts: wanSecondaryDNSIP.setDescription('The secondary DNS IP address')
wanMTUMode = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("auto", 0), ("manual", 1))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wanMTUMode.setStatus('current')
if mibBuilder.loadTexts: wanMTUMode.setDescription('Automatically setting MTU value or user sepcisicify')
wanMTU = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(576, 1500)).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wanMTU.setStatus('current')
if mibBuilder.loadTexts: wanMTU.setDescription('The Maximum Transmission Unit (MTU) in WAN interface')
pppoeMTU = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(576, 1492)).clone(1492)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppoeMTU.setStatus('current')
if mibBuilder.loadTexts: pppoeMTU.setDescription('The Maximum Transmission Unit (MTU) in PPPoE protocol')
lanDHCPC = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanDHCPC.setStatus('current')
if mibBuilder.loadTexts: lanDHCPC.setDescription('Automatically get LAN IP address form DHCP server or set static IP address')
lanIP = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 5, 2), IpAddress().clone('192.168.1.1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanIP.setStatus('current')
if mibBuilder.loadTexts: lanIP.setDescription('To setting static LAN IP address in DUT')
lanSubnetmask = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 5, 3), IpAddress().clone('255.255.255.0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanSubnetmask.setStatus('current')
if mibBuilder.loadTexts: lanSubnetmask.setDescription('To setting static Subnet Mask in DUT')
lanGatewayIP = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 5, 4), IpAddress().clone('0.0.0.0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanGatewayIP.setStatus('current')
if mibBuilder.loadTexts: lanGatewayIP.setDescription('To setting getway IP address in DUT')
lanWINSAddr = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 5, 5), IpAddress().clone('0.0.0.0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanWINSAddr.setStatus('current')
if mibBuilder.loadTexts: lanWINSAddr.setDescription('To setting WINS IP address in DUT')
lanDHCPSrvEnable = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanDHCPSrvEnable.setStatus('current')
if mibBuilder.loadTexts: lanDHCPSrvEnable.setDescription('Enable / Disable DHCP server')
lanDHCPSrvStartAddr = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 5, 7), IpAddress().clone('192.168.1.2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanDHCPSrvStartAddr.setStatus('current')
if mibBuilder.loadTexts: lanDHCPSrvStartAddr.setDescription('To setting DHCP server allocate IP address up bound')
lanDHCPSrvStopAddr = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 5, 8), IpAddress().clone('192.168.1.254')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lanDHCPSrvStopAddr.setStatus('current')
if mibBuilder.loadTexts: lanDHCPSrvStopAddr.setDescription('To setting DHCP server allocate IP address low bound')
timeSettingMode = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("manual", 0), ("auto", 1))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeSettingMode.setStatus('current')
if mibBuilder.loadTexts: timeSettingMode.setDescription('Automatically get or manually set Date and Time')
userNTPSrvMode = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userNTPSrvMode.setStatus('current')
if mibBuilder.loadTexts: userNTPSrvMode.setDescription('Enable / Disable user sepcisicify NTP server')
userNTPSrvIP = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 6, 3), IpAddress().clone('0.0.0.0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userNTPSrvIP.setStatus('current')
if mibBuilder.loadTexts: userNTPSrvIP.setDescription('User sepcisicify NTP server IP address')
timeZone = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 6, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone('GMT0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeZone.setStatus('current')
if mibBuilder.loadTexts: timeZone.setDescription('To setting time zone in DUT')
username = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 8, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 33)).clone('admin')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: username.setStatus('current')
if mibBuilder.loadTexts: username.setDescription('The User Name that system manager own')
remoteManagementEnable = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteManagementEnable.setStatus('current')
if mibBuilder.loadTexts: remoteManagementEnable.setDescription('Enable / Disable remote management DUT function')
remoteUpgradeEnable = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteUpgradeEnable.setStatus('current')
if mibBuilder.loadTexts: remoteUpgradeEnable.setDescription('Enable / Disable remote upgrade firmware')
remoteManagementPort = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 8, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(8080)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteManagementPort.setStatus('current')
if mibBuilder.loadTexts: remoteManagementPort.setDescription('To setting remote management port')
remoteManagementVLANID = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 8, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)).clone(4096)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteManagementVLANID.setStatus('current')
if mibBuilder.loadTexts: remoteManagementVLANID.setDescription('To setting management Tag on VLAN')
wlanMode = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6, 7, 9))).clone(namedValues=NamedValues(("wlan11a", 1), ("wlan11b", 2), ("wlan11bg", 3), ("wlan11astaticturbo", 5), ("wlan11gdynamicturbo", 6), ("wlan11gstaticturbo", 7), ("wlan11gpure", 9))).clone('wlan11bg')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanMode.setStatus('current')
if mibBuilder.loadTexts: wlanMode.setDescription('The wireless lan operation mode. (802.11a/b/g)')
chanBwMode = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("wlan20MHz", 0), ("wlan10MHz", 1), ("wlan5MHz", 2))).clone('wlan20MHz')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanBwMode.setStatus('current')
if mibBuilder.loadTexts: chanBwMode.setDescription('The WLAN narrow band')
wlanaSSID = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 9, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 33)).clone('EnGenius')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanaSSID.setStatus('current')
if mibBuilder.loadTexts: wlanaSSID.setDescription('The SSID which station connect to')
wlanOpMode = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("accesspoint", 0), ("clientbridge", 1), ("wdsbridge", 2), ("repeater", 3), ("aprouter", 4), ("clientrouter", 5), ("mesh", 6))).clone('accesspoint')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanOpMode.setStatus('current')
if mibBuilder.loadTexts: wlanOpMode.setDescription('The WLAN operation mode. (Access Point/ Client Bridge/ WDS Bridge/ Repeater/ AP Router / Client Router)')
wlanCountryCode = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 9, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5)).clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanCountryCode.setStatus('current')
if mibBuilder.loadTexts: wlanCountryCode.setDescription('The country code')
wlanCountry = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 9, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)).clone('N/A')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlanCountry.setStatus('current')
if mibBuilder.loadTexts: wlanCountry.setDescription('The string of the country name')
wlanChannel = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 9, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanChannel.setStatus('current')
if mibBuilder.loadTexts: wlanChannel.setDescription('The wireless channel frequency')
wlanACLMode = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 9, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("allow", 1), ("deny", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanACLMode.setStatus('current')
if mibBuilder.loadTexts: wlanACLMode.setDescription('The WLAN Mac filter mode. (Disable / Deny / Allow)')
wlanOutdoorDistance = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 9, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 30000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanOutdoorDistance.setStatus('current')
if mibBuilder.loadTexts: wlanOutdoorDistance.setDescription('The distance between two DUTs')
wlanDataRate = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 9, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6)).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanDataRate.setStatus('current')
if mibBuilder.loadTexts: wlanDataRate.setDescription('The wireless LAN Data rate. The available input option: 1M, 2M, 5.5M, 6M, 9M, 11M, 12M, 18M, 24M, 36M, 48M, 54M, auto')
wlanTxPower = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 9, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanTxPower.setStatus('current')
if mibBuilder.loadTexts: wlanTxPower.setDescription('The WLAN transmission power')
antennasel = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 9, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("diversity", 0), ("vertical", 1), ("horizontal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: antennasel.setStatus('current')
if mibBuilder.loadTexts: antennasel.setDescription('The antenna which prefer to use')
wlanBeaconInterval = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 9, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(25, 500)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanBeaconInterval.setStatus('current')
if mibBuilder.loadTexts: wlanBeaconInterval.setDescription('The sent beacon interval time')
wlanRTSTh = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 9, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2346)).clone(2346)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanRTSTh.setStatus('current')
if mibBuilder.loadTexts: wlanRTSTh.setDescription('The WLAN RTS/CTS threshold')
wlanFragLen = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 9, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 2346)).clone(2346)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanFragLen.setStatus('current')
if mibBuilder.loadTexts: wlanFragLen.setDescription('The WLAN packages fragment length')
wlanProtmode = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 9, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("ctsonly", 1), ("rtscts", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanProtmode.setStatus('current')
if mibBuilder.loadTexts: wlanProtmode.setDescription('Protection transmittion on G band. (CTS or RTS/CTS)')
wlanPreferBSSID = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 9, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanPreferBSSID.setStatus('current')
if mibBuilder.loadTexts: wlanPreferBSSID.setDescription('The MAC address of the prefer connection AP')
wlanTable = MibTable((1, 3, 6, 1, 4, 1, 14125, 2, 2, 9, 21), )
if mibBuilder.loadTexts: wlanTable.setStatus('current')
if mibBuilder.loadTexts: wlanTable.setDescription('This table display the wlan table.')
wlanTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14125, 2, 2, 9, 21, 1), ).setIndexNames((0, "ENGENIUS-PRIVATE-MIB", "wlanTableIndex"))
if mibBuilder.loadTexts: wlanTableEntry.setStatus('current')
if mibBuilder.loadTexts: wlanTableEntry.setDescription('Represent the entry in the wlan table.')
wlanTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 2, 2, 9, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)))
if mibBuilder.loadTexts: wlanTableIndex.setStatus('current')
if mibBuilder.loadTexts: wlanTableIndex.setDescription('Specify the index of the wlan table.')
wlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 2, 2, 9, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanEnable.setStatus('current')
if mibBuilder.loadTexts: wlanEnable.setDescription('Enable / Disable')
wlanSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 2, 2, 9, 21, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanSSID.setStatus('current')
if mibBuilder.loadTexts: wlanSSID.setDescription('The WLAN SSID')
wlanHideSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 2, 2, 9, 21, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanHideSSID.setStatus('current')
if mibBuilder.loadTexts: wlanHideSSID.setDescription('Enable / Disable broadcast SSID')
wlanStaSeparation = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 2, 2, 9, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanStaSeparation.setStatus('current')
if mibBuilder.loadTexts: wlanStaSeparation.setDescription('Enable / Disable STA separation')
wlanVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 2, 2, 9, 21, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanVLANID.setStatus('current')
if mibBuilder.loadTexts: wlanVLANID.setDescription('The WLAN interface VLAN ID')
wlanAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 2, 2, 9, 21, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("open", 1), ("shared", 2), ("auto", 3), ("wlan8021x", 4), ("wpa", 5), ("wpapsk", 6), ("wpa2", 7), ("wpa2psk", 8), ("wpamixed", 9), ("wpapskmixed", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanAuth.setStatus('current')
if mibBuilder.loadTexts: wlanAuth.setDescription('The WLAN authentication type')
wlanEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 2, 2, 9, 21, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("wep", 1), ("tkip", 2), ("aes", 3), ("auto", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanEncryption.setStatus('current')
if mibBuilder.loadTexts: wlanEncryption.setDescription('The WLAN encryption type')
wlanWepDefaultKeyIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 2, 2, 9, 21, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("key1", 1), ("key2", 2), ("key3", 3), ("key4", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanWepDefaultKeyIdx.setStatus('current')
if mibBuilder.loadTexts: wlanWepDefaultKeyIdx.setDescription('The WLAN WEP Key index of combination')
wlanWepKey = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 2, 2, 9, 21, 1, 10), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(5, 5), ValueSizeConstraint(10, 10), ValueSizeConstraint(13, 13), ValueSizeConstraint(16, 16), ValueSizeConstraint(26, 26), ValueSizeConstraint(32, 32), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanWepKey.setStatus('current')
if mibBuilder.loadTexts: wlanWepKey.setDescription('The WLAN WEP Key combination. The input has to be 5,13,16 ascii keys, or 10,26,32 Hex keys ')
wlanWpapskPassphrase = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 2, 2, 9, 21, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanWpapskPassphrase.setStatus('current')
if mibBuilder.loadTexts: wlanWpapskPassphrase.setDescription('The WLAN WPA Key combination')
wlanWpaRadiusSrvIP = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 2, 2, 9, 21, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanWpaRadiusSrvIP.setStatus('current')
if mibBuilder.loadTexts: wlanWpaRadiusSrvIP.setDescription('The WLAN WPA-Enterprise remote radius server IP')
wlanWpaRadiusSrvPort = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 2, 2, 9, 21, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanWpaRadiusSrvPort.setStatus('current')
if mibBuilder.loadTexts: wlanWpaRadiusSrvPort.setDescription('The WLAN WPA-Enterprise remote radius server port')
wlanWpaRadiusSrvSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 2, 2, 9, 21, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanWpaRadiusSrvSecret.setStatus('current')
if mibBuilder.loadTexts: wlanWpaRadiusSrvSecret.setDescription('The WLAN WPA-Enterprise key combination')
wlanWpaGroupKeyUpdateInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 14125, 2, 2, 9, 21, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanWpaGroupKeyUpdateInterval.setStatus('current')
if mibBuilder.loadTexts: wlanWpaGroupKeyUpdateInterval.setDescription('The WLAN WPA-Enterprise group key update interval')
wlanSTAAuth = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 8, 10))).clone(namedValues=NamedValues(("open", 1), ("shared", 2), ("wpapsk", 6), ("wpa2psk", 8), ("wpapskmixed", 10))).clone('open')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanSTAAuth.setStatus('current')
if mibBuilder.loadTexts: wlanSTAAuth.setDescription('The WLAN STA authentication type')
wlanSTAEncryption = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("wep", 1), ("tkip", 2), ("aes", 3), ("auto", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanSTAEncryption.setStatus('current')
if mibBuilder.loadTexts: wlanSTAEncryption.setDescription('The WLAN STA encryption type')
wlanSTAWepDefaultKeyIdx = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("key1", 1), ("key2", 2), ("key3", 3), ("key4", 4))).clone('key1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanSTAWepDefaultKeyIdx.setStatus('current')
if mibBuilder.loadTexts: wlanSTAWepDefaultKeyIdx.setDescription('The WLAN STA WEP Key index of combination')
wlanSTAWepKey = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 10, 4), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(5, 5), ValueSizeConstraint(10, 10), ValueSizeConstraint(13, 13), ValueSizeConstraint(16, 16), ValueSizeConstraint(26, 26), ValueSizeConstraint(32, 32), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanSTAWepKey.setStatus('current')
if mibBuilder.loadTexts: wlanSTAWepKey.setDescription('The WLAN STA WEP Key combination. The input has to be 5,13,16 ascii keys, or 10,26,32 Hex keys ')
wlanSTAWpapskPassphrase = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 10, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanSTAWpapskPassphrase.setStatus('current')
if mibBuilder.loadTexts: wlanSTAWpapskPassphrase.setDescription('The WLAN STA WPA Key combination')
wlanMESHSSID = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 11, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 33)).clone('EnGeniusMesh')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanMESHSSID.setStatus('current')
if mibBuilder.loadTexts: wlanMESHSSID.setDescription('The string of the WLAN SSID in MESH mode')
wlanMESHGateway = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanMESHGateway.setStatus('current')
if mibBuilder.loadTexts: wlanMESHGateway.setDescription('The Gateway IP address in MESH mode')
wlanMESHAuth = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 11, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("shared", 2))).clone('open')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanMESHAuth.setStatus('current')
if mibBuilder.loadTexts: wlanMESHAuth.setDescription('The authentication type in MESH mode')
wlanMESHEncryption = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 11, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("wep", 1), ("aes", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanMESHEncryption.setStatus('current')
if mibBuilder.loadTexts: wlanMESHEncryption.setDescription('The encryption type in MESH mode')
wlanMESHWepDefaultKeyIdx = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 11, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("key1", 1), ("key2", 2), ("key3", 3), ("key4", 4))).clone('key1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanMESHWepDefaultKeyIdx.setStatus('current')
if mibBuilder.loadTexts: wlanMESHWepDefaultKeyIdx.setDescription('The WLAN WEP Key index of combination in MESH mode')
wlanMESHWepKey = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 11, 7), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(5, 5), ValueSizeConstraint(10, 10), ValueSizeConstraint(13, 13), ValueSizeConstraint(16, 16), ValueSizeConstraint(26, 26), ValueSizeConstraint(32, 32), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanMESHWepKey.setStatus('current')
if mibBuilder.loadTexts: wlanMESHWepKey.setDescription('The WLAN MESH WEP Key combination. The input has to be 5,13,16 ascii keys, or 10,26,32 Hex keys ')
wlanMESHWpapskPassphrase = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 11, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlanMESHWpapskPassphrase.setStatus('current')
if mibBuilder.loadTexts: wlanMESHWpapskPassphrase.setDescription('The WLAN WPA Key combination in MESH mode')
staWDS = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staWDS.setStatus('current')
if mibBuilder.loadTexts: staWDS.setDescription('Enable / Disable WDS link in Client Mode')
stpMode = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpMode.setStatus('current')
if mibBuilder.loadTexts: stpMode.setDescription('Enable / Disable Spanning Tree')
stpHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 15, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpHelloTime.setStatus('current')
if mibBuilder.loadTexts: stpHelloTime.setDescription('The interval between periodic transmissions of Configuration Messages by Designated Ports. IEEE802.1D 17.13.6')
stpMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 15, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpMaxAge.setStatus('current')
if mibBuilder.loadTexts: stpMaxAge.setDescription('The maximum age of the information transmitted by the Bridge when it is the Root Bridge. IEEE 802.1D 17.13.8')
stpForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 15, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpForwardDelay.setStatus('current')
if mibBuilder.loadTexts: stpForwardDelay.setDescription('The delay used by STP Bridges to transition Reoot and Designated Ports to Forwarding. IEEE 802.1D 17.13.5')
stpPriority = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 15, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stpPriority.setStatus('current')
if mibBuilder.loadTexts: stpPriority.setDescription('The manageable component of the Port Identifier. IEEE 802.1D 17.13.10')
snmpEnable = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpEnable.setStatus('current')
if mibBuilder.loadTexts: snmpEnable.setDescription('Enable / Disable SNMP agent')
snmpCmntyRO = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 16, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 33)).clone('public')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCmntyRO.setStatus('current')
if mibBuilder.loadTexts: snmpCmntyRO.setDescription('The communication string for Read Only')
snmpCmntyRW = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 16, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 33)).clone('private')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCmntyRW.setStatus('current')
if mibBuilder.loadTexts: snmpCmntyRW.setDescription('The communication string for Read Write')
snmpTrapDstIP = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 16, 4), IpAddress().clone('0.0.0.0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapDstIP.setStatus('current')
if mibBuilder.loadTexts: snmpTrapDstIP.setDescription('The IP address which snmp trap sent to')
snmpTrapCmnty = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 16, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 33)).clone('public')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapCmnty.setStatus('current')
if mibBuilder.loadTexts: snmpTrapCmnty.setDescription('The communication string for trap message')
snmpCont = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 16, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpCont.setStatus('current')
if mibBuilder.loadTexts: snmpCont.setDescription('The snmp contact information')
snmpLocation = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 16, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpLocation.setStatus('current')
if mibBuilder.loadTexts: snmpLocation.setDescription('The snmp location information')
sysObjectID = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 16, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20)).clone('1.3.6.1.4.1.14125')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysObjectID.setStatus('current')
if mibBuilder.loadTexts: sysObjectID.setDescription('The SNMP company OID')
wmmEnable = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wmmEnable.setStatus('current')
if mibBuilder.loadTexts: wmmEnable.setDescription('Enable / Disable WMM setting')
logServerEnable = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logServerEnable.setStatus('current')
if mibBuilder.loadTexts: logServerEnable.setDescription('Enable / Disable remote log server which log sent to')
logServerIP = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 20, 2), IpAddress().clone('0.0.0.0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logServerIP.setStatus('current')
if mibBuilder.loadTexts: logServerIP.setDescription('Remote log server IP address')
logLocalEnable = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 20, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logLocalEnable.setStatus('current')
if mibBuilder.loadTexts: logLocalEnable.setDescription('Enable / Disable local log server')
logLevel = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 20, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("information", 6), ("debug", 7), ("all", 8))).clone('all')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logLevel.setStatus('current')
if mibBuilder.loadTexts: logLevel.setDescription('The level (all/ Debug/ Information/ Notice/ Warning/ Error/ Critical/ Alert/ Emergency) of log message')
vpnPassthroughPPTP = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 21, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpnPassthroughPPTP.setStatus('current')
if mibBuilder.loadTexts: vpnPassthroughPPTP.setDescription('Enable / Disable PPTP packages pass through')
vpnPassthroughL2TP = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 21, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpnPassthroughL2TP.setStatus('current')
if mibBuilder.loadTexts: vpnPassthroughL2TP.setDescription('Enable / Disable L2TP packages pass through')
vpnPassthroughIPSec = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 21, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpnPassthroughIPSec.setStatus('current')
if mibBuilder.loadTexts: vpnPassthroughIPSec.setDescription('Enable / Disable IPSec packages pass through')
tcEnable = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 22, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcEnable.setStatus('current')
if mibBuilder.loadTexts: tcEnable.setDescription('Enable Traffic Shapping')
tcInRate = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 22, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcInRate.setStatus('current')
if mibBuilder.loadTexts: tcInRate.setDescription('Incoming Traffic Limit, in kbits/s')
tcInBurst = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 22, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcInBurst.setStatus('current')
if mibBuilder.loadTexts: tcInBurst.setDescription('Incoming Traffic Burst, in kBytes')
tcOutRate = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 22, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcOutRate.setStatus('current')
if mibBuilder.loadTexts: tcOutRate.setDescription('Outgoing Traffic Limit, in kbits/s')
tcOutBurst = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 2, 22, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcOutBurst.setStatus('current')
if mibBuilder.loadTexts: tcOutBurst.setDescription('Outgoing Traffic Burst, in kBytes')
executeSaveCmd = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: executeSaveCmd.setStatus('current')
if mibBuilder.loadTexts: executeSaveCmd.setDescription('SnmpSet with value 1 to execute the cfg_save() command.')
executeResetCmd = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: executeResetCmd.setStatus('current')
if mibBuilder.loadTexts: executeResetCmd.setDescription('SnmpSet with value 1 to execute the cfg_factory_default() command.')
executeRebootCmd = MibScalar((1, 3, 6, 1, 4, 1, 14125, 2, 3, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: executeRebootCmd.setStatus('current')
if mibBuilder.loadTexts: executeRebootCmd.setDescription('Define the timeout (1~300seconds) and execute the reboot command.')
mibBuilder.exportSymbols("ENGENIUS-PRIVATE-MIB", snmpLocation=snmpLocation, logemail=logemail, lanWINSAddr=lanWINSAddr, wlanWpaRadiusSrvSecret=wlanWpaRadiusSrvSecret, wlanHideSSID=wlanHideSSID, wlanWpaRadiusSrvIP=wlanWpaRadiusSrvIP, wanPPPoELoginName=wanPPPoELoginName, wlanTableEntry=wlanTableEntry, wlanEnable=wlanEnable, wlanSTAAuth=wlanSTAAuth, stpHelloTime=stpHelloTime, snmpCmntyRO=snmpCmntyRO, wan=wan, wlanACLMode=wlanACLMode, ntp=ntp, saveCmd=saveCmd, lanDHCPSrvStopAddr=lanDHCPSrvStopAddr, vpnPassthroughL2TP=vpnPassthroughL2TP, wanGeneralAccount=wanGeneralAccount, wlanWpaRadiusSrvPort=wlanWpaRadiusSrvPort, timeSettingMode=timeSettingMode, admin=admin, wlanWpapskPassphrase=wlanWpapskPassphrase, wlanTable=wlanTable, timeZone=timeZone, sysPassword=sysPassword, statusWLANSTAAssoc=statusWLANSTAAssoc, wanGeneralIP=wanGeneralIP, PYSNMP_MODULE_ID=engeniusprivate, wlanSTAWpapskPassphrase=wlanSTAWpapskPassphrase, wlanMESHSSID=wlanMESHSSID, vpnPassthroughPPTP=vpnPassthroughPPTP, stp=stp, lanGatewayIP=lanGatewayIP, wanPPPoEPassword=wanPPPoEPassword, wlanRTSTh=wlanRTSTh, wlanCountry=wlanCountry, tcEnable=tcEnable, remoteManagementEnable=remoteManagementEnable, wlanOutdoorDistance=wlanOutdoorDistance, snmpCmntyRW=snmpCmntyRW, snmpTrapDstIP=snmpTrapDstIP, wanMTU=wanMTU, wlanTxPower=wlanTxPower, mtu=mtu, wlanSTAWepDefaultKeyIdx=wlanSTAWepDefaultKeyIdx, resetCmd=resetCmd, wlanMESHAuth=wlanMESHAuth, wlansta=wlansta, wlanMESHWepDefaultKeyIdx=wlanMESHWepDefaultKeyIdx, wlanSTAEncryption=wlanSTAEncryption, vpnPassthroughIPSec=vpnPassthroughIPSec, pppoeMTU=pppoeMTU, executeRebootCmd=executeRebootCmd, wlanWepDefaultKeyIdx=wlanWepDefaultKeyIdx, wlanmesh=wlanmesh, wlanTableIndex=wlanTableIndex, wlanaSSID=wlanaSSID, logServerEnable=logServerEnable, wlanSTAWepKey=wlanSTAWepKey, wlanChannel=wlanChannel, wanSecondaryDNSIP=wanSecondaryDNSIP, userNTPSrvMode=userNTPSrvMode, wirelessMacAddress=wirelessMacAddress, wlanMESHGateway=wlanMESHGateway, executeSaveCmd=executeSaveCmd, snmpEnable=snmpEnable, wanPrimaryDNSIP=wanPrimaryDNSIP, stpForwardDelay=stpForwardDelay, systemName=systemName, tcInRate=tcInRate, stpPriority=stpPriority, remoteManagementVLANID=remoteManagementVLANID, lanDHCPSrvStartAddr=lanDHCPSrvStartAddr, wanGeneralGateway=wanGeneralGateway, rebootCmd=rebootCmd, wlanMESHEncryption=wlanMESHEncryption, wlanFragLen=wlanFragLen, remoteManagementPort=remoteManagementPort, vpn=vpn, chanBwMode=chanBwMode, wlanSSID=wlanSSID, wlan=wlan, dns=dns, wanPPPoEConnectionType=wanPPPoEConnectionType, pppoe=pppoe, wlanVLANID=wlanVLANID, logLocalEnable=logLocalEnable, snmp=snmp, antennasel=antennasel, executeResetCmd=executeResetCmd, wlanAuth=wlanAuth, sysObjectID=sysObjectID, userNTPSrvIP=userNTPSrvIP, wlanMESHWpapskPassphrase=wlanMESHWpapskPassphrase, wanPPPoERedialPeriod=wanPPPoERedialPeriod, wlanPreferBSSID=wlanPreferBSSID, wlanBeaconInterval=wlanBeaconInterval, snmpTrapCmnty=snmpTrapCmnty, staWDS=staWDS, wlanEncryption=wlanEncryption, wanGeneralDomain=wanGeneralDomain, wanConnectionType=wanConnectionType, wlanOpMode=wlanOpMode, wlanMESHWepKey=wlanMESHWepKey, tcInBurst=tcInBurst, lanDHCPC=lanDHCPC, lanIP=lanIP, lanSubnetmask=lanSubnetmask, wlanWepKey=wlanWepKey, command=command, username=username, traffic=traffic, landhcp=landhcp, wanGeneralSubnetMask=wanGeneralSubnetMask, modelName=modelName, wlanstawds=wlanstawds, system=system, wmm=wmm, wanPPPoEMaxIdleTime=wanPPPoEMaxIdleTime, lanDHCPSrvEnable=lanDHCPSrvEnable, errMsg=errMsg, logLevel=logLevel, wlanProtmode=wlanProtmode, engeniusprivate=engeniusprivate, wlanCountryCode=wlanCountryCode, status=status, snmpCont=snmpCont, remoteUpgradeEnable=remoteUpgradeEnable, configuration=configuration, wlanMode=wlanMode, engenius=engenius, wanDNSSourc=wanDNSSourc, tcOutBurst=tcOutBurst, wlanDataRate=wlanDataRate, tcOutRate=tcOutRate, logServerIP=logServerIP, wanSubnetMask=wanSubnetMask, wanIPAddress=wanIPAddress, wlanStaSeparation=wlanStaSeparation, wanPPPoEServiceName=wanPPPoEServiceName, stpMode=stpMode, stpMaxAge=stpMaxAge, wanMTUMode=wanMTUMode, wmmEnable=wmmEnable, wlanWpaGroupKeyUpdateInterval=wlanWpaGroupKeyUpdateInterval)
