#
# PySNMP MIB module ZHONE-GEN-SUBSCRIBER (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZHONE-GEN-SUBSCRIBER
# Produced by pysmi-0.3.4 at Wed May  1 15:47:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
AtmVpIdentifier, AtmVcIdentifier = mibBuilder.importSymbols("ATM-TC-MIB", "AtmVpIdentifier", "AtmVcIdentifier")
InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
IpAddress, Counter32, NotificationType, TimeTicks, Integer32, Bits, MibIdentifier, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, iso, Gauge32, Counter64, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter32", "NotificationType", "TimeTicks", "Integer32", "Bits", "MibIdentifier", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "iso", "Gauge32", "Counter64", "ModuleIdentity")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
zhoneSubscriber, = mibBuilder.importSymbols("Zhone", "zhoneSubscriber")
ZhoneAdminString, ZhoneRowStatus = mibBuilder.importSymbols("Zhone-TC", "ZhoneAdminString", "ZhoneRowStatus")
zhoneSubscriberRecords = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1))
zhoneSubscriberRecords.setRevisions(('2014-10-01 10:00', '2012-12-19 23:04', '2011-12-25 23:19', '2011-09-12 04:05', '2010-06-08 02:53', '2010-05-04 04:08', '2009-06-26 03:20', '2009-05-26 03:02', '2008-05-27 17:23', '2008-02-21 02:24', '2007-12-26 14:43', '2007-02-28 15:11', '2006-02-03 10:42', '2005-08-23 14:00', '2005-05-19 16:18', '2005-05-03 13:26', '2005-02-25 17:39', '2004-12-02 11:46', '2004-05-26 12:09', '2004-05-12 11:10', '2004-04-21 11:37', '2004-04-16 14:58', '2004-03-29 11:33', '2004-01-21 17:05', '2004-01-07 09:48', '2003-11-06 10:17', '2003-07-28 11:16', '2003-06-27 11:19', '2003-05-30 14:13', '2003-02-17 14:10', '2003-02-03 13:40', '2003-01-22 15:01', '2002-06-24 17:01', '2001-12-07 17:49', '2001-10-29 15:46', '2001-06-29 18:28', '2000-11-15 12:52', '2000-09-12 13:54',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: zhoneSubscriberRecords.setRevisionsDescriptions(('V01.00.36 Add centrex feature to subVoiceFeatureSetOne', 'V01.00.35 Add dataonly feature to subVoiceFeatureSetOne', 'V01.00.34 - Added new feature COD for SIP to subVoiceFeatureSetOne.', 'V01.00.33 - Added new features dtmf-rfc2833 and dtmf-inband to subVoiceFeatureSetOne.', 'V01.00.32 - Modified reversepolarity feature as lss-rb and added lss-tone to subVoiceFeatureSetOne.', 'V01.00.31 - Added hotline and warmline to subVoiceFeatureSetOne Added hotline-dn and hotline-initial-timer to subscriber-voice-voip table.', 'V01.00.30 - Added isdnToVoip to subVoiceConnectionType.', 'V01.00.29 - Added new feature bit voiceonly.', 'V01.00.28 - Added new connection type voipToEbs.', 'V01.00.27 - Added Authorization Username to subscriber voice voip profile.', 'V01.00.26 - Added new feature bit reverse-polarity to subscirberFeatureSetOne object', 'V01.00.25 - add tr008 endpoint', 'V01.00.24 - Added conference to featureSetOne.', 'V01.00.23 - Add comments about validations of subscriber-voice-voip', 'V01.00.22 - changed subVoiceVoipRegistrationServer range to 0 - 255 for peer to peer SIP.', 'V01.00.22 -- Added voipRegistrationServer.', 'V01.00.21 -- Added Call Transfer and Call Wait to featureSetOne', 'V01.00.20 -- Added plar feature to subscriber voice profile', 'V01.00.19 -- Added alwaysoffhook feature to subscriber voice profile', 'V01.00.18 -- Added list of features enabled for the subscriber', 'V01.00.17 -- add potsToDs1 to connectiontype', 'V01.00.16 - Added subVoiceVoipPlarDestIpAddrType', 'V01.00.15 - Added support for VOIP PLAR', 'V01.00.14 - Added a new connection type isdnToVoip', 'V01.00.13 - Changed SIP to VOIP.', 'V01.00.12 - Changed sipUri to sip username in subscriber-voice-sip profile.', 'V01.00.11 - Changes range of DS0 in DS1 endpoint to 1..32', 'V01.00.10 - Add huntgroup to subscribevoice and huntgroup index1, 2 and 3 to subscribervoiceDs1', 'V01.00.09 - Add sipToPots connection type.', 'V01.00.08 - Added Enhanced Business Service (EBS) provisioning for Malc ULC.', 'V01.00.07 - Added the elcpAal2ToV52 subVoiceConnectionType and new voice endpoint table subVoiceElcpAal2Table.', 'V01.00.06 - Added subVoiceDs1 and subVoiceSip tables', 'V01.00.05 - Added the potsToGr303 and potsToV52 subscriber voice types', 'V01.00.04 - Changed the range from 16-255 to 1-255 for the subVoiceAal2Cid field. Also update the description with jetstream information.', 'V01.00.03 - Added to subIadType - zedgeBH2A, zedgeH2A and zedgeH2AO', 'V01.00.02 - Added DEFVAL for Operational Status and Data Stats Status', 'V01.00.01 - Introduced new keyword GET_BY_VARS', 'V01.00.00 - Initial Release',))
if mibBuilder.loadTexts: zhoneSubscriberRecords.setLastUpdated('200805271445Z')
if mibBuilder.loadTexts: zhoneSubscriberRecords.setOrganization('Zhone Technologies, Inc.')
if mibBuilder.loadTexts: zhoneSubscriberRecords.setContactInfo(' Postal: Zhone Technologies, Inc. @ Zhone Way 7001 Oakport Street Oakland, CA 94621 USA Toll-Free: +1 877-ZHONE20 (+1 877-946-6320) Tel: +1-510-777-7000 Fax: +1-510-777-7001 E-mail: support@zhone.com')
if mibBuilder.loadTexts: zhoneSubscriberRecords.setDescription('The MIB module to describe objects for the Subscriber or End user of the system. The MIB contains tables that define subscriber infomation, data services, and voice mapping. While there is a single data mapping entry for each subscriber there can be multiple voice entries (phone lines) per subscriber.')
class ZhoneCodecType(TextualConvention, Integer32):
    description = 'Voice coding techniques.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("g711mu", 1), ("g711a", 2), ("g726", 3), ("g729a", 4), ("g723", 5))

class T38FaxType(TextualConvention, Integer32):
    description = 't.38 fax relay techniques'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("t38Udptl", 1), ("t38Rtp", 2), ("t38None", 3))

nextSubId = MibScalar((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nextSubId.setStatus('current')
if mibBuilder.loadTexts: nextSubId.setDescription('The next available Subscriber ID (subId) that can be used by the manager when creating a subscriber ID. A Get request to this field causes the current number to be returned and the value to be incremented for the next requester.')
nextEndPointIndex = MibScalar((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nextEndPointIndex.setStatus('current')
if mibBuilder.loadTexts: nextEndPointIndex.setDescription('The next available index that can be used by the manager when creating protocol specific end point connections. For example, when a new voice subscriber record is being added, the ATM/GR303/etc. protocol specific information is contained in the associated protocol tables (AAL2 mib and GR303 mibs) these indices are used for row creation in these tables. A per protocol type index scheme was not used to allow flexibility in adding additional protocol support. A Get request to this field causes the current number to be returned and the value to be incremented for the next requester.')
subInfoTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 3), )
if mibBuilder.loadTexts: subInfoTable.setStatus('current')
if mibBuilder.loadTexts: subInfoTable.setDescription('A table of the top level subscriber information in a PLS system. Each subscriber has an entry in table for each physical connection provisioned for the subscriber, the type of IAD in use and line rate both the provioned line rate (subMaxAllowedLineRate) and the line rate at which the circuit can operate at (subMaxCapableLineRate).')
subInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 3, 1), ).setIndexNames((0, "ZHONE-GEN-SUBSCRIBER", "subId"), (0, "ZHONE-GEN-SUBSCRIBER", "subLgId"))
if mibBuilder.loadTexts: subInfoEntry.setStatus('current')
if mibBuilder.loadTexts: subInfoEntry.setDescription('The subscriber table is indexed by the subscriber ID which is a numeric ID used by the system to uniquely identify each subscriber and the LgId which identified the line group (physical) line that is used by the subscriber. A subscriber may have multiple entries, implying that the subscriber has multiple lines or IADs, each entry has a unique line or lgId. ')
subId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: subId.setStatus('current')
if mibBuilder.loadTexts: subId.setDescription('Unique numeric ID used to define a subscriber in the system. It is also used as the index to the subDataConnectionTable and subVoiceConnectionTable.')
subLgId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: subLgId.setStatus('current')
if mibBuilder.loadTexts: subLgId.setDescription('The line group entry ID is the LgId defined in the Line Group Redundancy MIB. LgId identifies the physical line or line group (primary and redundant secondary) used for data and voice traffic. This is a unique number that is assigned when a line redundancy group is provisioned - this allows the operator to locate the physical lines (defined by the line group entry ID) used by the subscriber. This is used as an index into the subInfoTable, subDataConnectionTable and the subVoiceConnectionTable allowing a subscriber own multiple lines. Required for row creation.')
subName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 3, 1, 3), ZhoneAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: subName.setStatus('current')
if mibBuilder.loadTexts: subName.setDescription('Admninstratively defined name used to aid operators identify subscribers in the system, the name is for operator reference only. Required for row creation.')
subProviderId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: subProviderId.setStatus('current')
if mibBuilder.loadTexts: subProviderId.setDescription('Unique service provider ID. This value is used throughout the management system to link objects with customers or service providers.')
subIadType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("zedge64T", 2), ("zedge64S", 3), ("zedge65", 4), ("zedge100", 5), ("matP", 6), ("zedgeBH2A", 7), ("zedgeH2A", 8), ("zedgeH2AO", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: subIadType.setStatus('current')
if mibBuilder.loadTexts: subIadType.setDescription('Identifies the type of IAD that is used by the the subscriber. Required for row creation.')
subMaxAllowedLineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Kbits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: subMaxAllowedLineRate.setStatus('current')
if mibBuilder.loadTexts: subMaxAllowedLineRate.setDescription("The maximum line rate that the subscriber is provisioned to receive from the service provider. This value is the total line rate or bandwidth of the subscriber's connection including voice, data and video. This number may be less than or equal to the subMaxCapableLineRate. Required for row creation.")
subMaxCapableLineRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Kbits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: subMaxCapableLineRate.setStatus('current')
if mibBuilder.loadTexts: subMaxCapableLineRate.setDescription('The maximum line rate that can be supported by the subscriber line. This rate is determined by several factors including the distance the subscriber is from the CO, the copper facilities to the subscriber and the type of IAD installed. This value is determined by the service provider. Required for row creation.')
subNextVoiceConnectionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: subNextVoiceConnectionIndex.setStatus('current')
if mibBuilder.loadTexts: subNextVoiceConnectionIndex.setDescription('The next available connection index which can be used for this subscriber and lgid pair. This is used for the creation of a voice connection entry.')
subRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 3, 1, 9), ZhoneRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: subRowStatus.setStatus('current')
if mibBuilder.loadTexts: subRowStatus.setDescription('Used to control row creation and deletion. subName, subLgId, subIadType, subMaxAllowedLineRate, subMaxCapableLineRate are required for row creation.')
subDataConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 4), )
if mibBuilder.loadTexts: subDataConnectionTable.setStatus('current')
if mibBuilder.loadTexts: subDataConnectionTable.setDescription("The Subscriber Data Conection Table is used to provision the services and connections that a subscriber requires for IP data services. The key entry in the table is the subDataIfIndex which identifies the specific interface that is providing data connection services. Other entries focus on subscriber specific data options and the status of the subscriber's connection. The table is indexed by subId, subLgId and subDataIfIndex allowing multiple data records to be provisioned per subscriber. Note: the IP data record must be created first prior to this associated subscriber data connection entry ")
subDataConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 4, 1), ).setIndexNames((0, "ZHONE-GEN-SUBSCRIBER", "subId"), (0, "ZHONE-GEN-SUBSCRIBER", "subLgId"), (0, "ZHONE-GEN-SUBSCRIBER", "subDataIfIndex"))
if mibBuilder.loadTexts: subDataConnectionEntry.setStatus('current')
if mibBuilder.loadTexts: subDataConnectionEntry.setDescription('An entry in the Subscriber Data Connection Table')
subDataIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: subDataIfIndex.setStatus('current')
if mibBuilder.loadTexts: subDataIfIndex.setDescription('This object should be made equal to the ifIndex used to identify the entry in the interfaceTable that defines the IP record for the interface used by the subscriber.')
subDataIpIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5), ("notPresent", 6), ("lowerLayerDown", 7))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: subDataIpIfOperStatus.setStatus('current')
if mibBuilder.loadTexts: subDataIpIfOperStatus.setDescription("The current IP operational status of the subscriber's data interface, this status reflects the ifOperStatus of the interface MIB using the identical syntax. up(1) - ready to pass packets down(2) - the admin status is down or there is a fault that prevents the interface from passing packets testing(3) - the interface has been placed is a testing state by the administrator unknown(4) - the status can not be determined for some reason dormant(5) - not definition in the interface MIB notPresent(6) - some component is missing lowerLayerDown(5) - down due to state of lower-layer inteface(s) ")
subDataUserLogOnId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 4, 1, 3), ZhoneAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: subDataUserLogOnId.setStatus('current')
if mibBuilder.loadTexts: subDataUserLogOnId.setDescription('The subscriber or user logon ID. The value of the logon may be managed in different ways depending on the service provider. In some cases the service will not require a logon or password. The default value is a NULL string.')
subDataUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 4, 1, 4), ZhoneAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: subDataUserPassword.setStatus('current')
if mibBuilder.loadTexts: subDataUserPassword.setDescription('The password is used by the subscriber in conjunction with the subUserLogonID to gain access to features or services provided by the service provider. The password object is only valid if the subUserLogonId is used. The default value is a NULL string.')
subDataMaxAddrAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 4, 1, 5), Integer32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: subDataMaxAddrAllowed.setStatus('current')
if mibBuilder.loadTexts: subDataMaxAddrAllowed.setDescription("This value limits the maximum number of IP addresses that can be assigned by the DHCP server to the subscriber's IAD. Allowing multiple addresses to be assigned allows the subscriber to have multiple devices attached to the IAD data port without having to provide DHCP or routing services. The default value is 1. Required for row creation.")
subDataIpAddrInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subDataIpAddrInUse.setStatus('current')
if mibBuilder.loadTexts: subDataIpAddrInUse.setDescription('This value indicates the number of IP addresses that are currently being used by the subscriber. This value cannot exceed subDataMaxAddrAllowed.')
subDataCurrentIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 4, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: subDataCurrentIpAddr.setStatus('current')
if mibBuilder.loadTexts: subDataCurrentIpAddr.setDescription('The IP address currently assigned to the subscriber. If more than one address is assigned then this value should indicate the most recently assigned IP address assigned to the subscriber. The full list of addresses assigned to the subscriber can be found in the DHCP tables.')
subDataStatsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: subDataStatsStatus.setStatus('current')
if mibBuilder.loadTexts: subDataStatsStatus.setDescription('Indicates if stats are enabled for this user for debugging purposes. If the status are enabled the stats can be examined via the IpRec MIB stats table. The stats associated with this subscriber are indicated by the subIpIfIndex.')
subDataRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 4, 1, 9), ZhoneRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: subDataRowStatus.setStatus('current')
if mibBuilder.loadTexts: subDataRowStatus.setDescription('Use to control row creation and deletion. subDataMaxAddrAllowed is required for row creation.')
subVoiceConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 5), )
if mibBuilder.loadTexts: subVoiceConnectionTable.setStatus('current')
if mibBuilder.loadTexts: subVoiceConnectionTable.setDescription('The Voice Subscriber Mapping Table. This table associates pairs of interface addresses used by a voice subscriber. The mapping table associates two enpoints (endPoint1 and endPoint2) pairs. Each row is indexed by the subscriber id, line group Id along with the voice connection index (see subNextVoiceConnectionIndex described in in the subscriber table. Each row contains the definitions of the two endpoints which at this level, is defined as the protocol type for the endpoint and an index into the associated protocol specific table. Each associated protocol table, contained in the appropriate protocol mib, contains the information required to define the end point (i.e. vpi/vci/cid in the case of AAL2). So, a row can be used to map a subscriber POTS line to a class 5 switch phone number. For example, an AAL2 endpoint is represented by endpoint1 and has defined a type and the index for the AAL2 connection table defined in the AAL2 mib. A GR-303 endpoint2 is represented by the endpoint2 type of GR-303 and an index into the associated GR-303 mib. This mib contains the GR-303 IG name and CRV value (see GR0303 MIB). The admin status is used to enable/disable the connection. This is only used during the creation and deletion process of this entry along with the associated type table entries. The process is a two step approach where the manager creates a voice connection entry with admin status down which causes dummy protocol table entries to be added in the EP1 and EP2 (dummy being row entries with 0/NULL values) protocol tables (since indexes and ep types are specified on the row create), manager sets the appropriate protocol specific entries in the associated mibs, and then changes the admin status to active. All entries (the two protocol specific tables, and the voice connection entry) are tightly coupled and therefore, the deletion process is exactly the same. The manager deletes the voice connection entry and the handler automatically deletes the associated protocol table entries. AdminStatus must be set to down before the deletion can occur. Because of this tight coupling, the EndPoint values (both indexes and types) cannot be modified but must have the row deleted and readded with the appropriate information. The protocol specific tables are always INDEXED as the index defined in either the endpoint1 or endpoint2 index fields. This scheme allows flexibility in defining and expanding the types of connections and allows for use of protocols of the same type to be defined at both endpoints.')
subVoiceConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 5, 1), ).setIndexNames((0, "ZHONE-GEN-SUBSCRIBER", "subId"), (0, "ZHONE-GEN-SUBSCRIBER", "subLgId"), (0, "ZHONE-GEN-SUBSCRIBER", "subVoiceConnectionIndex"))
if mibBuilder.loadTexts: subVoiceConnectionEntry.setStatus('current')
if mibBuilder.loadTexts: subVoiceConnectionEntry.setDescription("Each entry defines a specific voice connection associated with the subscriber/lgid pair. Each entry consists of a connection type and two globally unique indicies which are used to index into protocol specific address tables that contain the logical addresses which make up this voice subscriber's connection. When a connection entry is created, the endpoint values (both type and index) must be valid. 0 values are not allowed.")
subVoiceConnectionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: subVoiceConnectionIndex.setStatus('current')
if mibBuilder.loadTexts: subVoiceConnectionIndex.setDescription('The connection index is used to indentify this connection pair. The number itself is meaningful only for defining a connection set for this subscriber/lgid pair and no association with particular connection number can be made by a manager. When creating a new voice connection, the next available index is obtained via the subNextVoiceConnectionIndex variable in the subscriber mib.')
subVoiceConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20))).clone(namedValues=NamedValues(("aal2ToGr303", 1), ("aal2ToV52", 2), ("voipToGr303", 3), ("potsToAal2", 4), ("isdnToAal2", 5), ("potsToGr303", 6), ("potsToV52", 7), ("voipToDs1", 8), ("sipToGr303", 9), ("voipToV52", 10), ("elcpAal2ToV52", 11), ("isdnToV52", 12), ("ebsToGr303", 13), ("voipToPots", 14), ("isdnsigToVoip", 15), ("potsToDs1", 16), ("voipToTr008", 18), ("voipToEbs", 19), ("isdnToVoip", 20)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: subVoiceConnectionType.setStatus('current')
if mibBuilder.loadTexts: subVoiceConnectionType.setDescription("This describes the connection type between the two end points referred to by the subVoiceEndPointProtocol indices. Where applicable the first endpoint refers to the line or premise side of the connection and the second endpoint refers to the central office side of the connection. The following connection types are defined, more types will added as services are expanded on the BAN, MALC, Sechtor and ZEdge. aal2ToGr303 - aal2 VPI/VCI/CID to Gr303 interface group/ CRV aal2ToV52 - aal2 VPI/VCI/CID to V52 interface/userport. voipToGr303 - VoIP using SIP or MGCP to Gr303 interface group/CRV. potsToAal2 - pots line to aal2 VPI/VCI/CID. isdnToAal2 - isdn to aal2 VPI/VCI/CID. potsToGr303 - pots line to Gr303 interface group/CRV. potsToV52 - pots line to V52 interface/userport. voipToDs1 - VoIP using either SIP or MGCP to channelized voice on a DS1. NOTE!!! sipToGr303 is not supported. Please use voipToGr303. sipToGr303 - VoIP using SIP to Gr303 interface group/CRV. voipToV52 - VoIP using either SIP or MGCP to V52 interface/userport. elcpAal2ToV52 - ELCP Aal2 VPI/VCI/portId/portType to V52. interface/userport. ATM VCC's with no ELCP uses aal2ToV52. type instead. isdnToV52 - Isdn to V52 (ULC to Uplink). ebsToGr303 - EBS to Gr303 (ULC to Uplink). voipToPots - VoIP using either SIP or MGCP to POTS (zedge6200em). isdnsigToVoip - VoIP using either SIP or MGCP to ISDN voipToTr008 - VoIP using either SIP or MGCP to TR-008 tr008Grp/chan isdnToVoip - Isdn to VOIP.")
subVoiceEndPoint1AddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: subVoiceEndPoint1AddressIndex.setStatus('current')
if mibBuilder.loadTexts: subVoiceEndPoint1AddressIndex.setDescription('The index into the associated address table for this end point. EndPoint1 should describe the line or premise side of the connection where applicable. This table contains any specific protocol information required to defined this half of the voice connection. Required for row creation.')
subVoiceEndPoint2AddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: subVoiceEndPoint2AddressIndex.setStatus('current')
if mibBuilder.loadTexts: subVoiceEndPoint2AddressIndex.setDescription('The index into the associated address table for this end point. EndPoint2 should describe the central office side of the connection where applicable. This table contains any specific protocol information required to defined this half of the voice connection. Required for row creation')
subVoiceConnectionDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 5, 1, 5), ZhoneAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: subVoiceConnectionDescription.setStatus('current')
if mibBuilder.loadTexts: subVoiceConnectionDescription.setDescription('A text string describing this voice call entry.This value is not used by the system and is provided for operator reference only. A common use will be to define the external or public phone number for this voice line as assigned by the class 5 switch. Required for row creation.')
subVoiceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: subVoiceAdminStatus.setStatus('current')
if mibBuilder.loadTexts: subVoiceAdminStatus.setDescription('The Admin State for this connection. Required for row creation.')
subVoiceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 5, 1, 7), ZhoneRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: subVoiceRowStatus.setStatus('current')
if mibBuilder.loadTexts: subVoiceRowStatus.setDescription("Used to control row creation and deletion. A row in this table is created using a single SNMP SET request with varbinds for: a) subVoiceRowStatus set to'CreateAndGo' and the subid, lgid, and connectionindex as an index, b) the following READ-CREATE object(s) without a default value (DEFVAL): * subVoiceEndPoint1AddrIndex * subVoiceEndPoint2AddrIndex * subVoiceConnectionType * subVoiceExtPhoneNumber ")
subVoiceHuntGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 5, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceHuntGroup.setStatus('current')
if mibBuilder.loadTexts: subVoiceHuntGroup.setDescription('Is this connection part of a huntGroup? Currently this is only valid if connection type is sipToDs1 or sipToPots. If this is TRUE then EndPoint2 does not contain any protocol specific information ')
subVoiceFeatureSetOne = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 5, 1, 9), Bits().clone(namedValues=NamedValues(("hookflash", 0), ("onhooksignaling", 1), ("alwaysoffhook", 2), ("plar", 3), ("callwait", 4), ("calltransfer", 5), ("conference", 6), ("lss-rb", 7), ("voiceonly", 8), ("hotline", 9), ("warmline", 10), ("lss-tone", 11), ("dtmf-rfc2833", 12), ("dtmf-inband", 13), ("cod", 14), ("dataonly", 15), ("centrex", 16))).clone(namedValues=NamedValues(("hookflash", 0), ("onhooksignaling", 1), ("callwait", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceFeatureSetOne.setStatus('current')
if mibBuilder.loadTexts: subVoiceFeatureSetOne.setDescription('First set of features that are enabled for the subscriber. Absence of the feature in the list will disable the feature for the subscriber. Bit Feature ^^^ ^^^^^^^ 1 hookflash detection 2 onhook signaling 3 always offhook, call is established as soon as incoming call initiation is made. 4 plar. 5 Call Wait 6 Call Transfer 7 Conference (3-way local conference bridging) 8 Line side supervision through Reverse Battery 9 Voice Only 10 Hotline 11 Warmline 12 Line side supervision through tone 13 DTMF mode as RFC-2833 14 DTMF mode as inband 15 COD - Enable Call on Disconnect for SIP 16 Dataonly 17 Centrex - Enable centrex based features. ')
subVoiceAal2Table = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 6), )
if mibBuilder.loadTexts: subVoiceAal2Table.setStatus('current')
if mibBuilder.loadTexts: subVoiceAal2Table.setDescription('This table provides the AAL2 call information for this specific subscriber, lgid, and call index. A row in this table is automatically created when the subVoiceConnectionType entry requires a aal2 entry.')
subVoiceAal2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 6, 1), ).setIndexNames((0, "ZHONE-GEN-SUBSCRIBER", "subVoiceAal2EndPointIndex"))
if mibBuilder.loadTexts: subVoiceAal2Entry.setStatus('current')
if mibBuilder.loadTexts: subVoiceAal2Entry.setDescription('An entry in the Aal2 table.')
subVoiceAal2EndPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: subVoiceAal2EndPointIndex.setStatus('current')
if mibBuilder.loadTexts: subVoiceAal2EndPointIndex.setDescription('The index into this table containing the AAL2 end point information. This index is equal to the index defined for the aal2 endpoint in the subVoiceConnectionTable.')
subVoiceAal2LineGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 6, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceAal2LineGroupId.setStatus('current')
if mibBuilder.loadTexts: subVoiceAal2LineGroupId.setDescription('The line group ID for this AAL2 connection.')
subVoiceAal2Vpi = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 6, 1, 3), AtmVpIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceAal2Vpi.setStatus('current')
if mibBuilder.loadTexts: subVoiceAal2Vpi.setDescription('The aal2 vpi for this connection.')
subVoiceAal2Vci = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 6, 1, 4), AtmVcIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceAal2Vci.setStatus('current')
if mibBuilder.loadTexts: subVoiceAal2Vci.setDescription('The aal2 vci for this connection.')
subVoiceAal2Cid = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceAal2Cid.setStatus('current')
if mibBuilder.loadTexts: subVoiceAal2Cid.setDescription('The aal2 cid for this connection. 1-254 for jetstream. 16-255 for non-jetstream.')
subVoiceGr303Table = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 7), )
if mibBuilder.loadTexts: subVoiceGr303Table.setStatus('current')
if mibBuilder.loadTexts: subVoiceGr303Table.setDescription('This table provides the GR303 call information for this specific subscriber, lgid, and call index. A row in this table is automatically created when the subVoiceConnectionType entry requires a GR303 entry.')
subVoiceGr303Entry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 7, 1), ).setIndexNames((0, "ZHONE-GEN-SUBSCRIBER", "subVoiceGr303EndPointIndex"))
if mibBuilder.loadTexts: subVoiceGr303Entry.setStatus('current')
if mibBuilder.loadTexts: subVoiceGr303Entry.setDescription('An entry in the GR303 table.')
subVoiceGr303EndPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: subVoiceGr303EndPointIndex.setStatus('current')
if mibBuilder.loadTexts: subVoiceGr303EndPointIndex.setDescription('The index into this table containing the GR303 end point information. This index is equal to the index defined for the GR303 endpoint in the subVoiceConnectionTable.')
subVoiceGr303IgName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 7, 1, 2), ZhoneAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceGr303IgName.setStatus('current')
if mibBuilder.loadTexts: subVoiceGr303IgName.setDescription('The IG name for the associated connection.')
subVoiceGr303IgCrv = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceGr303IgCrv.setStatus('current')
if mibBuilder.loadTexts: subVoiceGr303IgCrv.setDescription('The crv for this connection. See the comVoiceGr303 mib.')
subVoiceV52Table = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 8), )
if mibBuilder.loadTexts: subVoiceV52Table.setStatus('current')
if mibBuilder.loadTexts: subVoiceV52Table.setDescription('This table provides the V5.2 call information for this specific subscriber, lgid, and call index. A row in this table is automatically created when the subVoiceConnectionType entry requires a V5.2 entry.')
subVoiceV52Entry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 8, 1), ).setIndexNames((0, "ZHONE-GEN-SUBSCRIBER", "subVoiceV52EndPointIndex"))
if mibBuilder.loadTexts: subVoiceV52Entry.setStatus('current')
if mibBuilder.loadTexts: subVoiceV52Entry.setDescription('An entry in the V52 table.')
subVoiceV52EndPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: subVoiceV52EndPointIndex.setStatus('current')
if mibBuilder.loadTexts: subVoiceV52EndPointIndex.setDescription('The index into this table containing the V5.2 end point information. This index is equal to the index defined for the V5.2 endpoint in the subVoiceConnectionTable.')
subVoiceV52InterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 8, 1, 2), ZhoneAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceV52InterfaceName.setStatus('current')
if mibBuilder.loadTexts: subVoiceV52InterfaceName.setDescription('The Link name for the associated connection.')
subVoiceV52UserPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceV52UserPortId.setStatus('current')
if mibBuilder.loadTexts: subVoiceV52UserPortId.setDescription('The user connection entry for this connection. See the comVoiceV52 mib.')
subVoiceV52UserType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pots", 1), ("isdnDChannel", 2), ("isdnBChannel", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceV52UserType.setStatus('current')
if mibBuilder.loadTexts: subVoiceV52UserType.setDescription('The type of user port being defined.')
subVoiceV52IsdnChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceV52IsdnChannelId.setStatus('current')
if mibBuilder.loadTexts: subVoiceV52IsdnChannelId.setDescription('The ISDN B or D channel used in the case that subVoiceV52UserType is not set to pots.')
subVoicePotsTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 9), )
if mibBuilder.loadTexts: subVoicePotsTable.setStatus('current')
if mibBuilder.loadTexts: subVoicePotsTable.setDescription('This table provides the POTS call information for this specific subscriber, lgid, and call index. A row in this table is automatically created when the subVoiceConnectionType entry requires a POTS entry.')
subVoicePotsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 9, 1), ).setIndexNames((0, "ZHONE-GEN-SUBSCRIBER", "subVoicePotsEndPointIndex"))
if mibBuilder.loadTexts: subVoicePotsEntry.setStatus('current')
if mibBuilder.loadTexts: subVoicePotsEntry.setDescription('An entry in the POTS table.')
subVoicePotsEndPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: subVoicePotsEndPointIndex.setStatus('current')
if mibBuilder.loadTexts: subVoicePotsEndPointIndex.setDescription('The index into this table containing the POTS end point information. This index is equal to the index defined for the POTS endpoint in the subVoiceConnectionTable.')
subVoicePotsLineGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 9, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoicePotsLineGroupId.setStatus('current')
if mibBuilder.loadTexts: subVoicePotsLineGroupId.setDescription('The line group ID for the associated connection.')
subVoicePotsHuntGrpEndPointIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 9, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoicePotsHuntGrpEndPointIndex1.setStatus('current')
if mibBuilder.loadTexts: subVoicePotsHuntGrpEndPointIndex1.setDescription('The hunt group this subscriber is part of. Each subscriber can be part of 3 hunt groups. The hunt group endpoint index is endpt2 index of the subscriber-voice connection which has huntgroup as TRUE')
subVoicePotsHuntGrpEndPointIndex2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 9, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoicePotsHuntGrpEndPointIndex2.setStatus('current')
if mibBuilder.loadTexts: subVoicePotsHuntGrpEndPointIndex2.setDescription('The hunt group this subscriber is part of. Each subscriber can be part of 3 hunt groups. The hunt group endpoint index is endpt2 index of the subscriber-voice connection which has huntgroup as TRUE')
subVoicePotsHuntGrpEndPointIndex3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 9, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoicePotsHuntGrpEndPointIndex3.setStatus('current')
if mibBuilder.loadTexts: subVoicePotsHuntGrpEndPointIndex3.setDescription('The hunt group this subscriber is part of. Each subscriber can be part of 3 hunt groups. The hunt group endpoint index is endpt2 index of the subscriber-voice connection which has huntgroup as TRUE')
subVoiceIsdnTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 10), )
if mibBuilder.loadTexts: subVoiceIsdnTable.setStatus('current')
if mibBuilder.loadTexts: subVoiceIsdnTable.setDescription('This table provides the ISDN call information for this specific subscriber, lgid, and call index. A row in this table is automatically created when the subVoiceConnectionType entry requires a ISDN entry.')
subVoiceIsdnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 10, 1), ).setIndexNames((0, "ZHONE-GEN-SUBSCRIBER", "subVoiceIsdnEndPointIndex"))
if mibBuilder.loadTexts: subVoiceIsdnEntry.setStatus('current')
if mibBuilder.loadTexts: subVoiceIsdnEntry.setDescription('An entry in the ISDN table.')
subVoiceIsdnEndPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: subVoiceIsdnEndPointIndex.setStatus('current')
if mibBuilder.loadTexts: subVoiceIsdnEndPointIndex.setDescription('The index into this table containing the ISDN end point information. This index is equal to the index defined for the ISDN endpoint in the subVoiceConnectionTable.')
subVoiceIsdnLineGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 10, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceIsdnLineGroupId.setStatus('current')
if mibBuilder.loadTexts: subVoiceIsdnLineGroupId.setDescription('The line group ID for the associated connection.')
subVoiceIsdnType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isdnDChannel", 1), ("isdnBChannel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceIsdnType.setStatus('current')
if mibBuilder.loadTexts: subVoiceIsdnType.setDescription('The type of this channel for this connection.')
subVoiceIsdnChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceIsdnChannelId.setStatus('current')
if mibBuilder.loadTexts: subVoiceIsdnChannelId.setDescription('The channel nummber used for this connection.')
zhoneSubscriberObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 11)).setObjects(("ZHONE-GEN-SUBSCRIBER", "nextSubId"), ("ZHONE-GEN-SUBSCRIBER", "nextEndPointIndex"), ("ZHONE-GEN-SUBSCRIBER", "subName"), ("ZHONE-GEN-SUBSCRIBER", "subProviderId"), ("ZHONE-GEN-SUBSCRIBER", "subIadType"), ("ZHONE-GEN-SUBSCRIBER", "subMaxAllowedLineRate"), ("ZHONE-GEN-SUBSCRIBER", "subMaxCapableLineRate"), ("ZHONE-GEN-SUBSCRIBER", "subNextVoiceConnectionIndex"), ("ZHONE-GEN-SUBSCRIBER", "subRowStatus"), ("ZHONE-GEN-SUBSCRIBER", "subDataIpIfOperStatus"), ("ZHONE-GEN-SUBSCRIBER", "subDataUserLogOnId"), ("ZHONE-GEN-SUBSCRIBER", "subDataUserPassword"), ("ZHONE-GEN-SUBSCRIBER", "subDataMaxAddrAllowed"), ("ZHONE-GEN-SUBSCRIBER", "subDataIpAddrInUse"), ("ZHONE-GEN-SUBSCRIBER", "subDataCurrentIpAddr"), ("ZHONE-GEN-SUBSCRIBER", "subDataStatsStatus"), ("ZHONE-GEN-SUBSCRIBER", "subDataRowStatus"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceConnectionType"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceEndPoint1AddressIndex"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceEndPoint2AddressIndex"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceConnectionDescription"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceAdminStatus"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceRowStatus"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceAal2LineGroupId"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceAal2Vpi"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceAal2Vci"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceAal2Cid"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceGr303IgName"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceGr303IgCrv"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceV52InterfaceName"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceV52UserPortId"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceV52UserType"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceV52IsdnChannelId"), ("ZHONE-GEN-SUBSCRIBER", "subVoicePotsLineGroupId"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceIsdnLineGroupId"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceIsdnType"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceIsdnChannelId"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceDs1Ds0ChannelID"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceDs1LineGroupId"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceElcpAal2LineGroupId"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceElcpAal2Vpi"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceElcpAal2Vci"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceElcpAal2PortId"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceElcpAal2PortType"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceElcpAal2IsdnChannelId"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceEbsLineGroupId"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceHuntGroup"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceDs1HuntGrpEndPointIndex3"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceDs1HuntGrpEndPointIndex1"), ("ZHONE-GEN-SUBSCRIBER", "subVoicePotsHuntGrpEndPointIndex3"), ("ZHONE-GEN-SUBSCRIBER", "subVoicePotsHuntGrpEndPointIndex2"), ("ZHONE-GEN-SUBSCRIBER", "subVoicePotsHuntGrpEndPointIndex1"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceDs1HuntGrpEndPointIndex2"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceVoipPassword"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceVoipG726ByteOrder"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceVoipFramesPerPacket"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceVoipG711Fallback"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceVoipPreferredCodec"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceVoipDirectoryNumber"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceVoipIpInterface"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceVoipUserName"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceIsdnSigHuntGrpEndPointIndex3"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceIsdnSigHuntGrpEndPointIndex2"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceVoipPlarDestIpAddr"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceVoipPLAR"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceVoipPlarUdpPort"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceVoipPlarDestIpAddrType"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceFeatureSetOne"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceTr008ChanNum"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceTr008GroupId"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceVoipAuthUsername"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceHotlineInitialTimer"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceVoipHotlineDN"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceIsdnSigHuntGrpEndPointIndex1"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceIsdnSigEntryIndex"), ("ZHONE-GEN-SUBSCRIBER", "subVoiceIsdnSigDirectoryNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneSubscriberObjectsGroup = zhoneSubscriberObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneSubscriberObjectsGroup.setDescription('This group contains objects associated with Zhone Subscriber Records')
subVoiceDs1Table = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 12), )
if mibBuilder.loadTexts: subVoiceDs1Table.setStatus('current')
if mibBuilder.loadTexts: subVoiceDs1Table.setDescription('This table provides the call information for this specific subscriber, lgid, and call index. A row in this table is automatically created when the subVoiceConnectionType entry requires a DS1 entry.')
subVoiceDs1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 12, 1), ).setIndexNames((0, "ZHONE-GEN-SUBSCRIBER", "subVoiceDs1EndPointIndex"))
if mibBuilder.loadTexts: subVoiceDs1Entry.setStatus('current')
if mibBuilder.loadTexts: subVoiceDs1Entry.setDescription('An entry in the subVoiceDs1Table.')
subVoiceDs1EndPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: subVoiceDs1EndPointIndex.setStatus('current')
if mibBuilder.loadTexts: subVoiceDs1EndPointIndex.setDescription('The index into this table containing the DS1 end point information. This index is equal to the index defined for the DS1 endpoint in the subVoiceConnectionTable.')
subVoiceDs1Ds0ChannelID = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceDs1Ds0ChannelID.setStatus('current')
if mibBuilder.loadTexts: subVoiceDs1Ds0ChannelID.setDescription('The DS0 assigned to this subscriber. The same DS0 channel cannot appear in more than 1 row within this table.')
subVoiceDs1LineGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 12, 1, 3), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceDs1LineGroupId.setStatus('current')
if mibBuilder.loadTexts: subVoiceDs1LineGroupId.setDescription('The line group Interface Index of the DS1 interface.')
subVoiceDs1HuntGrpEndPointIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 12, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceDs1HuntGrpEndPointIndex1.setStatus('current')
if mibBuilder.loadTexts: subVoiceDs1HuntGrpEndPointIndex1.setDescription('The hunt group this subscriber is part of. Each subscriber can be part of 3 hunt groups. The hunt group endpoint index is endpt2 index of the subscriber-voice connection which has huntgroup as TRUE')
subVoiceDs1HuntGrpEndPointIndex2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 12, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceDs1HuntGrpEndPointIndex2.setStatus('current')
if mibBuilder.loadTexts: subVoiceDs1HuntGrpEndPointIndex2.setDescription('The hunt group this subscriber is part of. Each subscriber can be part of 3 hunt groups. The hunt group endpoint index is endpt2 index of the subscriber-voice connection which has huntgroup as TRUE')
subVoiceDs1HuntGrpEndPointIndex3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 12, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceDs1HuntGrpEndPointIndex3.setStatus('current')
if mibBuilder.loadTexts: subVoiceDs1HuntGrpEndPointIndex3.setDescription('The hunt group this subscriber is part of. Each subscriber can be part of 3 hunt groups. The hunt group endpoint index is endpt2 index of the subscriber-voice connection which has huntgroup as TRUE')
subVoiceVoipTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 13), )
if mibBuilder.loadTexts: subVoiceVoipTable.setStatus('current')
if mibBuilder.loadTexts: subVoiceVoipTable.setDescription('This table provides the call information for this specific subscriber, lgid, and call index. A row in this table is automatically created when the subVoiceConnectionType entry requires a SIP or MGCP entry.')
subVoiceVoipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 13, 1), ).setIndexNames((0, "ZHONE-GEN-SUBSCRIBER", "subVoiceVoipEndPointIndex"))
if mibBuilder.loadTexts: subVoiceVoipEntry.setStatus('current')
if mibBuilder.loadTexts: subVoiceVoipEntry.setDescription('An entry in the subVoiceVoip table.')
subVoiceVoipEndPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: subVoiceVoipEndPointIndex.setStatus('current')
if mibBuilder.loadTexts: subVoiceVoipEndPointIndex.setDescription('The index into this table containing either SIP or MGCP end point information. This index is equal to the index defined for either the SIP or MGCP endpoint in the subVoiceConnectionTable.')
subVoiceVoipUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 13, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceVoipUserName.setStatus('current')
if mibBuilder.loadTexts: subVoiceVoipUserName.setDescription('A unique string that identifies the user in the system. If this string is not unique, error of inconsisten value is returned.')
subVoiceVoipDirectoryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 13, 1, 3), ZhoneAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceVoipDirectoryNumber.setStatus('current')
if mibBuilder.loadTexts: subVoiceVoipDirectoryNumber.setDescription('The directory number, e.g., phone number, assigned to this endpoint. Contains only digits. This number must be unique across subscriber-voice-voip in the system If not, error of inconsistent value is returned. ')
subVoiceVoipIpInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 13, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceVoipIpInterface.setStatus('current')
if mibBuilder.loadTexts: subVoiceVoipIpInterface.setDescription('Interface Index of the LP Interface through which the SIP signalling and RTP traffic will flow.')
subVoiceVoipPreferredCodec = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 13, 1, 5), ZhoneCodecType().clone('g711mu')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceVoipPreferredCodec.setStatus('current')
if mibBuilder.loadTexts: subVoiceVoipPreferredCodec.setDescription('Defines the preferred voice codec to be used for this subscriber.')
subVoiceVoipG711Fallback = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 13, 1, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceVoipG711Fallback.setStatus('current')
if mibBuilder.loadTexts: subVoiceVoipG711Fallback.setDescription('Indicates whether a subscriber may consume bandwidth by switching to g711, when a fax, modem, b-channel data session is detected. ')
subVoiceVoipFramesPerPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 13, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceVoipFramesPerPacket.setStatus('current')
if mibBuilder.loadTexts: subVoiceVoipFramesPerPacket.setDescription('Indicates the number of voice frames per IP packet.')
subVoiceVoipG726ByteOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bigEndian", 1), ("littleEndian", 2))).clone('bigEndian')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceVoipG726ByteOrder.setStatus('current')
if mibBuilder.loadTexts: subVoiceVoipG726ByteOrder.setDescription('Indicates the byte order to be used when g.726 voice coding is in use. Cisco uses little endian byte order, whereas the g.726 standard calls for big endian byte order.')
subVoiceVoipPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 13, 1, 10), ZhoneAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceVoipPassword.setStatus('current')
if mibBuilder.loadTexts: subVoiceVoipPassword.setDescription('Authentication string needed for call originations through a SIP/MGCP Server. The SIP/MGCP URI acts as the username.')
subVoiceVoipPLAR = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 13, 1, 11), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: subVoiceVoipPLAR.setStatus('current')
if mibBuilder.loadTexts: subVoiceVoipPLAR.setDescription('Is this subscriber PLAR (private line automatic ringdown) subscriber. If true we immediately send a INVITE instead of play dialtone, collect digits ')
subVoiceVoipPlarDestIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 13, 1, 12), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceVoipPlarDestIpAddrType.setStatus('current')
if mibBuilder.loadTexts: subVoiceVoipPlarDestIpAddrType.setDescription('This object specifies the type of address contained in the associated instance of subVoiceVoipPlarDestIpAddr.')
subVoiceVoipPlarDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 13, 1, 13), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceVoipPlarDestIpAddr.setStatus('current')
if mibBuilder.loadTexts: subVoiceVoipPlarDestIpAddr.setDescription('The destination IP address to send INVITE to in case the subscriber is PLAR')
subVoiceVoipPlarUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 13, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(5060)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceVoipPlarUdpPort.setStatus('current')
if mibBuilder.loadTexts: subVoiceVoipPlarUdpPort.setDescription('Specifies the UDP Port number for the VOIP Setup messages. 5060 is the IANA Registered SIP port.')
subVoiceVoipRegistrationServer = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 13, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceVoipRegistrationServer.setStatus('current')
if mibBuilder.loadTexts: subVoiceVoipRegistrationServer.setDescription('Voip Registration Server Address. A number between 1 and 255 which identifies the Voip Server that is responsible for this particular end point. If this value is not 0, a voip-server-entry with this address as the appl must exist. If not, error of wrong value is returned. For plar, this value must be 0, or wrong value is returned. Also, a voip-server-entry with address 255/255 must exist. If not, error of resource unavailable is returned.')
subVoiceVoipT38Fax = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 13, 1, 16), T38FaxType().clone('t38None')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceVoipT38Fax.setStatus('current')
if mibBuilder.loadTexts: subVoiceVoipT38Fax.setDescription('Defines t38 fax protocol used for this subscriber')
subVoiceVoipAuthUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 13, 1, 17), ZhoneAdminString()).setUnits('characters').setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceVoipAuthUsername.setStatus('current')
if mibBuilder.loadTexts: subVoiceVoipAuthUsername.setDescription("Authorization username used for calculating the credentials, when we receive 401/407 response. This field is optional, if not configured, then it's value is same as username field")
subVoiceVoipHotlineDN = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 13, 1, 18), ZhoneAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceVoipHotlineDN.setStatus('current')
if mibBuilder.loadTexts: subVoiceVoipHotlineDN.setDescription('The directory number to auto dial when hotline or warmline feature is activated for the subscriber.')
subVoiceHotlineInitialTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 13, 1, 19), Unsigned32().clone(4)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceHotlineInitialTimer.setStatus('current')
if mibBuilder.loadTexts: subVoiceHotlineInitialTimer.setDescription('Specifies the timer in seconds to wait before dialing hotline DN when hotline or warmline feature is enabled.')
subVoiceElcpAal2Table = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 14), )
if mibBuilder.loadTexts: subVoiceElcpAal2Table.setStatus('current')
if mibBuilder.loadTexts: subVoiceElcpAal2Table.setDescription('This table provides the ELCP AAL2 call information for this specific subscriber, lgid, and call index. A row in this table is automatically created when the subVoiceConnectionType entry requires an ELCP aal2 entry.')
subVoiceElcpAal2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 14, 1), ).setIndexNames((0, "ZHONE-GEN-SUBSCRIBER", "subVoiceAal2EndPointIndex"))
if mibBuilder.loadTexts: subVoiceElcpAal2Entry.setStatus('current')
if mibBuilder.loadTexts: subVoiceElcpAal2Entry.setDescription('An entry in the ELCP Aal2 table.')
subVoiceElcpAal2EndPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: subVoiceElcpAal2EndPointIndex.setStatus('current')
if mibBuilder.loadTexts: subVoiceElcpAal2EndPointIndex.setDescription('The index into this table containing the ELCP AAL2 end point information. This index is equal to the index defined for the ELCP aal2 endpoint in the subVoiceConnectionTable.')
subVoiceElcpAal2LineGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 14, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceElcpAal2LineGroupId.setStatus('current')
if mibBuilder.loadTexts: subVoiceElcpAal2LineGroupId.setDescription('The line group ID for this ELCP AAL2 connection.')
subVoiceElcpAal2Vpi = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 14, 1, 3), AtmVpIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceElcpAal2Vpi.setStatus('current')
if mibBuilder.loadTexts: subVoiceElcpAal2Vpi.setDescription('The aal2 vpi for this connection.')
subVoiceElcpAal2Vci = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 14, 1, 4), AtmVcIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceElcpAal2Vci.setStatus('current')
if mibBuilder.loadTexts: subVoiceElcpAal2Vci.setDescription('The aal2 vci for this connection.')
subVoiceElcpAal2PortId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 14, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceElcpAal2PortId.setStatus('current')
if mibBuilder.loadTexts: subVoiceElcpAal2PortId.setDescription('The port ID to identify an IAD port on the CP side. PortId in combination with PortType uniquely identifies a port on the IAD side for this voice connection.')
subVoiceElcpAal2PortType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pots", 1), ("isdnDChannel", 2), ("isdnBChannel", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceElcpAal2PortType.setStatus('current')
if mibBuilder.loadTexts: subVoiceElcpAal2PortType.setDescription('The port type for the CP (IAD) port for the current connection.')
subVoiceElcpAal2IsdnChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 14, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceElcpAal2IsdnChannelId.setStatus('current')
if mibBuilder.loadTexts: subVoiceElcpAal2IsdnChannelId.setDescription("This OID is not applicable to pots ports. For ISDN Bra ports, the ChannelId's for D, B1 and B2 are 0, 1 and 2 respectively.")
subVoiceEbsTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 15), )
if mibBuilder.loadTexts: subVoiceEbsTable.setStatus('current')
if mibBuilder.loadTexts: subVoiceEbsTable.setDescription('This table provides the Enhanced Business Service (EBS) call information for this specific subscriber, lgid, and call index. ')
subVoiceEbsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 15, 1), ).setIndexNames((0, "ZHONE-GEN-SUBSCRIBER", "subVoiceEbsEndPointIndex"))
if mibBuilder.loadTexts: subVoiceEbsEntry.setStatus('current')
if mibBuilder.loadTexts: subVoiceEbsEntry.setDescription('An entry in the EBS table.')
subVoiceEbsEndPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: subVoiceEbsEndPointIndex.setStatus('current')
if mibBuilder.loadTexts: subVoiceEbsEndPointIndex.setDescription('The index into this table containing the EBS end point information. This index is equal to the index defined for the EBS endpoint in the subVoiceConnectionTable.')
subVoiceEbsLineGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 15, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceEbsLineGroupId.setStatus('current')
if mibBuilder.loadTexts: subVoiceEbsLineGroupId.setDescription('The line group ID for the associated connection.')
subVoiceIsdnSigTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 16), )
if mibBuilder.loadTexts: subVoiceIsdnSigTable.setStatus('current')
if mibBuilder.loadTexts: subVoiceIsdnSigTable.setDescription('This table provides the ISDN signaling call information for this specific subscriber: isdn-signaling-group-index, directory-number, and hunt group info.')
subVoiceIsdnSigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 16, 1), ).setIndexNames((0, "ZHONE-GEN-SUBSCRIBER", "subVoiceIsdnSigEndPointIndex"))
if mibBuilder.loadTexts: subVoiceIsdnSigEntry.setStatus('current')
if mibBuilder.loadTexts: subVoiceIsdnSigEntry.setDescription('Description.')
subVoiceIsdnSigEndPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: subVoiceIsdnSigEndPointIndex.setStatus('current')
if mibBuilder.loadTexts: subVoiceIsdnSigEndPointIndex.setDescription('The index into this table containing the ISDN subscriber end point information.')
subVoiceIsdnSigEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceIsdnSigEntryIndex.setStatus('current')
if mibBuilder.loadTexts: subVoiceIsdnSigEntryIndex.setDescription('Isdn Signaling index the subscriber belongs to.')
subVoiceIsdnSigDirectoryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 16, 1, 3), ZhoneAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceIsdnSigDirectoryNumber.setStatus('current')
if mibBuilder.loadTexts: subVoiceIsdnSigDirectoryNumber.setDescription('Directory Number of the subscriber.')
subVoiceIsdnSigHuntGrpEndPointIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 16, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceIsdnSigHuntGrpEndPointIndex1.setStatus('current')
if mibBuilder.loadTexts: subVoiceIsdnSigHuntGrpEndPointIndex1.setDescription('The hunt group this subscriber is part of. Each subscriber can be part of 3 hunt groups. The hunt group endpoint index is endpt2 index of the subscriber-voice connection which has huntgroup as TRUE')
subVoiceIsdnSigHuntGrpEndPointIndex2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 16, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceIsdnSigHuntGrpEndPointIndex2.setStatus('current')
if mibBuilder.loadTexts: subVoiceIsdnSigHuntGrpEndPointIndex2.setDescription('The hunt group this subscriber is part of. Each subscriber can be part of 3 hunt groups. The hunt group endpoint index is endpt2 index of the subscriber-voice connection which has huntgroup as TRUE')
subVoiceIsdnSigHuntGrpEndPointIndex3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 16, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceIsdnSigHuntGrpEndPointIndex3.setStatus('current')
if mibBuilder.loadTexts: subVoiceIsdnSigHuntGrpEndPointIndex3.setDescription('The hunt group this subscriber is part of. Each subscriber can be part of 3 hunt groups. The hunt group endpoint index is endpt2 index of the subscriber-voice connection which has huntgroup as TRUE')
subVoiceTr008Table = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 17), )
if mibBuilder.loadTexts: subVoiceTr008Table.setStatus('current')
if mibBuilder.loadTexts: subVoiceTr008Table.setDescription('This table provides TR-008 channel information. It contains information about ifIndex of tr-008 if-stack, and tr-008 specific channel number. ')
subVoiceTr008Entry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 17, 1), ).setIndexNames((0, "ZHONE-GEN-SUBSCRIBER", "subVoiceTr008EndPointIndex"))
if mibBuilder.loadTexts: subVoiceTr008Entry.setStatus('current')
if mibBuilder.loadTexts: subVoiceTr008Entry.setDescription('An entry in the tr008 table.')
subVoiceTr008EndPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 17, 1, 1), Integer32())
if mibBuilder.loadTexts: subVoiceTr008EndPointIndex.setStatus('current')
if mibBuilder.loadTexts: subVoiceTr008EndPointIndex.setDescription('The index into this table containing the TR008 end point information. This index is equal to the index defined for the tr-008 endpoint in the subVoiceConnectionTable.')
subVoiceTr008GroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 17, 1, 2), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceTr008GroupId.setStatus('current')
if mibBuilder.loadTexts: subVoiceTr008GroupId.setDescription('This is the ifIndex of tr-008 ifstack. It is used to lookup the tr-008 shelf group, which this tr-008 channel belongs to.')
subVoiceTr008ChanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 4, 1, 17, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subVoiceTr008ChanNum.setStatus('current')
if mibBuilder.loadTexts: subVoiceTr008ChanNum.setDescription('This field contains a tr-008 channel number. A tr-008 channel number is an index in a shelf group, which can be used to map to specific timeslot.')
mibBuilder.exportSymbols("ZHONE-GEN-SUBSCRIBER", subVoiceIsdnSigHuntGrpEndPointIndex1=subVoiceIsdnSigHuntGrpEndPointIndex1, subInfoTable=subInfoTable, subVoiceElcpAal2Table=subVoiceElcpAal2Table, subDataIpIfOperStatus=subDataIpIfOperStatus, nextSubId=nextSubId, subVoiceVoipEntry=subVoiceVoipEntry, subVoiceIsdnChannelId=subVoiceIsdnChannelId, subVoiceVoipEndPointIndex=subVoiceVoipEndPointIndex, subVoiceElcpAal2PortType=subVoiceElcpAal2PortType, subVoiceDs1LineGroupId=subVoiceDs1LineGroupId, subVoiceV52Table=subVoiceV52Table, subVoiceFeatureSetOne=subVoiceFeatureSetOne, subRowStatus=subRowStatus, subVoiceDs1HuntGrpEndPointIndex3=subVoiceDs1HuntGrpEndPointIndex3, subVoiceV52Entry=subVoiceV52Entry, subVoiceVoipUserName=subVoiceVoipUserName, subVoiceDs1Table=subVoiceDs1Table, subVoiceEndPoint2AddressIndex=subVoiceEndPoint2AddressIndex, subVoiceGr303EndPointIndex=subVoiceGr303EndPointIndex, subVoicePotsEndPointIndex=subVoicePotsEndPointIndex, subMaxAllowedLineRate=subMaxAllowedLineRate, subVoiceAal2EndPointIndex=subVoiceAal2EndPointIndex, T38FaxType=T38FaxType, subVoiceIsdnSigEntry=subVoiceIsdnSigEntry, subVoiceIsdnType=subVoiceIsdnType, subVoiceVoipT38Fax=subVoiceVoipT38Fax, subVoiceIsdnEndPointIndex=subVoiceIsdnEndPointIndex, subDataConnectionTable=subDataConnectionTable, subVoiceVoipG726ByteOrder=subVoiceVoipG726ByteOrder, subVoiceAdminStatus=subVoiceAdminStatus, subVoiceElcpAal2PortId=subVoiceElcpAal2PortId, subVoiceVoipTable=subVoiceVoipTable, subVoiceIsdnEntry=subVoiceIsdnEntry, subVoiceDs1EndPointIndex=subVoiceDs1EndPointIndex, subVoiceIsdnSigTable=subVoiceIsdnSigTable, subVoiceHuntGroup=subVoiceHuntGroup, subVoiceDs1HuntGrpEndPointIndex1=subVoiceDs1HuntGrpEndPointIndex1, subVoiceIsdnTable=subVoiceIsdnTable, subDataUserPassword=subDataUserPassword, subDataUserLogOnId=subDataUserLogOnId, subVoiceGr303IgName=subVoiceGr303IgName, subVoiceTr008Table=subVoiceTr008Table, subVoiceV52IsdnChannelId=subVoiceV52IsdnChannelId, subVoicePotsLineGroupId=subVoicePotsLineGroupId, subVoiceTr008GroupId=subVoiceTr008GroupId, subVoiceElcpAal2IsdnChannelId=subVoiceElcpAal2IsdnChannelId, subVoiceEbsTable=subVoiceEbsTable, subVoiceEbsEndPointIndex=subVoiceEbsEndPointIndex, subProviderId=subProviderId, subVoiceGr303Entry=subVoiceGr303Entry, subVoiceDs1Entry=subVoiceDs1Entry, subDataIpAddrInUse=subDataIpAddrInUse, subLgId=subLgId, subVoiceConnectionEntry=subVoiceConnectionEntry, subVoiceElcpAal2EndPointIndex=subVoiceElcpAal2EndPointIndex, subVoiceVoipHotlineDN=subVoiceVoipHotlineDN, subVoiceVoipAuthUsername=subVoiceVoipAuthUsername, subVoiceIsdnSigHuntGrpEndPointIndex3=subVoiceIsdnSigHuntGrpEndPointIndex3, subDataMaxAddrAllowed=subDataMaxAddrAllowed, subVoiceV52EndPointIndex=subVoiceV52EndPointIndex, subVoiceGr303IgCrv=subVoiceGr303IgCrv, subVoiceAal2Table=subVoiceAal2Table, zhoneSubscriberObjectsGroup=zhoneSubscriberObjectsGroup, subVoiceDs1HuntGrpEndPointIndex2=subVoiceDs1HuntGrpEndPointIndex2, zhoneSubscriberRecords=zhoneSubscriberRecords, subVoicePotsHuntGrpEndPointIndex1=subVoicePotsHuntGrpEndPointIndex1, subVoiceAal2Vpi=subVoiceAal2Vpi, subVoiceGr303Table=subVoiceGr303Table, subVoiceElcpAal2Entry=subVoiceElcpAal2Entry, subVoiceVoipPLAR=subVoiceVoipPLAR, subVoiceAal2Vci=subVoiceAal2Vci, subVoiceAal2LineGroupId=subVoiceAal2LineGroupId, subVoiceVoipPlarUdpPort=subVoiceVoipPlarUdpPort, subVoiceVoipPassword=subVoiceVoipPassword, subVoicePotsHuntGrpEndPointIndex2=subVoicePotsHuntGrpEndPointIndex2, subVoiceTr008ChanNum=subVoiceTr008ChanNum, ZhoneCodecType=ZhoneCodecType, subVoiceIsdnSigDirectoryNumber=subVoiceIsdnSigDirectoryNumber, subVoiceIsdnSigHuntGrpEndPointIndex2=subVoiceIsdnSigHuntGrpEndPointIndex2, subDataRowStatus=subDataRowStatus, subVoicePotsHuntGrpEndPointIndex3=subVoicePotsHuntGrpEndPointIndex3, subVoiceDs1Ds0ChannelID=subVoiceDs1Ds0ChannelID, subVoiceVoipIpInterface=subVoiceVoipIpInterface, subVoiceTr008Entry=subVoiceTr008Entry, subVoiceVoipDirectoryNumber=subVoiceVoipDirectoryNumber, subVoiceElcpAal2LineGroupId=subVoiceElcpAal2LineGroupId, subVoiceConnectionType=subVoiceConnectionType, subDataIfIndex=subDataIfIndex, subVoiceVoipG711Fallback=subVoiceVoipG711Fallback, nextEndPointIndex=nextEndPointIndex, subName=subName, subVoiceVoipPlarDestIpAddrType=subVoiceVoipPlarDestIpAddrType, subDataCurrentIpAddr=subDataCurrentIpAddr, PYSNMP_MODULE_ID=zhoneSubscriberRecords, subVoiceRowStatus=subVoiceRowStatus, subVoiceIsdnSigEndPointIndex=subVoiceIsdnSigEndPointIndex, subVoiceTr008EndPointIndex=subVoiceTr008EndPointIndex, subVoiceIsdnSigEntryIndex=subVoiceIsdnSigEntryIndex, subDataStatsStatus=subDataStatsStatus, subVoiceEndPoint1AddressIndex=subVoiceEndPoint1AddressIndex, subVoiceConnectionTable=subVoiceConnectionTable, subVoiceHotlineInitialTimer=subVoiceHotlineInitialTimer, subVoiceV52InterfaceName=subVoiceV52InterfaceName, subVoiceEbsLineGroupId=subVoiceEbsLineGroupId, subInfoEntry=subInfoEntry, subVoicePotsEntry=subVoicePotsEntry, subVoiceConnectionDescription=subVoiceConnectionDescription, subVoiceVoipPreferredCodec=subVoiceVoipPreferredCodec, subVoiceVoipRegistrationServer=subVoiceVoipRegistrationServer, subIadType=subIadType, subVoiceVoipPlarDestIpAddr=subVoiceVoipPlarDestIpAddr, subVoiceAal2Entry=subVoiceAal2Entry, subVoiceV52UserType=subVoiceV52UserType, subVoiceEbsEntry=subVoiceEbsEntry, subVoiceConnectionIndex=subVoiceConnectionIndex, subMaxCapableLineRate=subMaxCapableLineRate, subVoiceElcpAal2Vci=subVoiceElcpAal2Vci, subVoiceAal2Cid=subVoiceAal2Cid, subDataConnectionEntry=subDataConnectionEntry, subId=subId, subNextVoiceConnectionIndex=subNextVoiceConnectionIndex, subVoicePotsTable=subVoicePotsTable, subVoiceV52UserPortId=subVoiceV52UserPortId, subVoiceElcpAal2Vpi=subVoiceElcpAal2Vpi, subVoiceVoipFramesPerPacket=subVoiceVoipFramesPerPacket, subVoiceIsdnLineGroupId=subVoiceIsdnLineGroupId)
