#
# PySNMP MIB module ALPHA-RECTIFIER-SYS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALPHA-RECTIFIER-SYS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:20:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
simple, ScaledNumber = mibBuilder.importSymbols("ALPHA-RESOURCE-MIB", "simple", "ScaledNumber")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
TimeTicks, MibIdentifier, Unsigned32, IpAddress, ObjectIdentity, Gauge32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter32, Counter64, NotificationType, Integer32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "MibIdentifier", "Unsigned32", "IpAddress", "ObjectIdentity", "Gauge32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter32", "Counter64", "NotificationType", "Integer32", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
rectifierSystem = ModuleIdentity((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1))
rectifierSystem.setRevisions(('2015-07-28 00:00', '2015-07-23 00:00', '2015-06-23 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rectifierSystem.setRevisionsDescriptions((' Updated to follow MIB structure conformance rules. Tested with SimpleWeb: http://www.simpleweb.org Passed highest level of compliance. (level 6) ', 'Fixed MIB syntax warnings.', 'General revision.',))
if mibBuilder.loadTexts: rectifierSystem.setLastUpdated('201507280000Z')
if mibBuilder.loadTexts: rectifierSystem.setOrganization('Alpha Technologies Ltd.')
if mibBuilder.loadTexts: rectifierSystem.setContactInfo('Alpha Technologies Ltd. 7700 Riverfront Gate Burnaby, BC V5J 5M4 Canada Tel: 1-604-436-5900 Fax: 1-604-436-1233')
if mibBuilder.loadTexts: rectifierSystem.setDescription('This MIB defines the notification block(s) available in system controllers.')
rectSysTotalOutputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 1), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysTotalOutputCurrent.setStatus('current')
if mibBuilder.loadTexts: rectSysTotalOutputCurrent.setDescription(' Total accumulated output current of all the rectifiers associated with the current system. ')
rectSysTotalOutputPower = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 2), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysTotalOutputPower.setStatus('current')
if mibBuilder.loadTexts: rectSysTotalOutputPower.setDescription('Total output current of all system rectifiers.')
rectSysTotalCapacityInstalledAmps = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 3), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysTotalCapacityInstalledAmps.setStatus('current')
if mibBuilder.loadTexts: rectSysTotalCapacityInstalledAmps.setDescription('A rectifier output current multiplied by the number of rectifiers installed.')
rectSysTotalCapacityInstalledPower = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 4), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysTotalCapacityInstalledPower.setStatus('current')
if mibBuilder.loadTexts: rectSysTotalCapacityInstalledPower.setDescription('A rectifier output power multiplied by the number of rectifiers installed.')
rectSysAverageRectifierOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 5), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysAverageRectifierOutputVoltage.setStatus('current')
if mibBuilder.loadTexts: rectSysAverageRectifierOutputVoltage.setDescription('Average rectifier output voltage.')
rectSysAverageRectifierACInputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 6), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysAverageRectifierACInputVoltage.setStatus('current')
if mibBuilder.loadTexts: rectSysAverageRectifierACInputVoltage.setDescription('Average rectifier input voltage.')
rectSysAveragePhase1Voltage = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 7), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysAveragePhase1Voltage.setStatus('current')
if mibBuilder.loadTexts: rectSysAveragePhase1Voltage.setDescription('Average output voltage of rectifiers in Phase 1.')
rectSysAveragePhase2Voltage = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 8), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysAveragePhase2Voltage.setStatus('current')
if mibBuilder.loadTexts: rectSysAveragePhase2Voltage.setDescription('Average output voltage of rectifiers in Phase 2.')
rectSysAveragePhase3Voltage = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 9), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysAveragePhase3Voltage.setStatus('current')
if mibBuilder.loadTexts: rectSysAveragePhase3Voltage.setDescription('Average output voltage of rectifiers in Phase 3.')
rectSysSystemVoltage = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 10), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysSystemVoltage.setStatus('current')
if mibBuilder.loadTexts: rectSysSystemVoltage.setDescription('System voltage.')
rectSysTotalLoadCurrent = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 11), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysTotalLoadCurrent.setStatus('current')
if mibBuilder.loadTexts: rectSysTotalLoadCurrent.setDescription('Total load current.')
rectSysBatteryVoltage = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 12), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysBatteryVoltage.setStatus('current')
if mibBuilder.loadTexts: rectSysBatteryVoltage.setDescription('Battery voltage.')
rectSysBatteryCurrent = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 13), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysBatteryCurrent.setStatus('current')
if mibBuilder.loadTexts: rectSysBatteryCurrent.setDescription('Battery current.')
rectSysBatteryTemperature = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 14), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysBatteryTemperature.setStatus('current')
if mibBuilder.loadTexts: rectSysBatteryTemperature.setDescription('Battery temperature.')
rectSysSystemNumber = MibScalar((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 15), ScaledNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectSysSystemNumber.setStatus('current')
if mibBuilder.loadTexts: rectSysSystemNumber.setDescription('Snmp ID# assigned to the system.')
conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 100))
compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 100, 1))
compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 100, 1, 1)).setObjects(("ALPHA-RECTIFIER-SYS-MIB", "rectifierGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    compliance = compliance.setStatus('current')
if mibBuilder.loadTexts: compliance.setDescription('The compliance statement for systems supporting the alpha MIB.')
rectifierGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 100, 2))
rectifierGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7309, 5, 3, 1, 100, 2, 1)).setObjects(("ALPHA-RECTIFIER-SYS-MIB", "rectSysTotalOutputCurrent"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysTotalOutputPower"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysTotalCapacityInstalledAmps"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysTotalCapacityInstalledPower"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysAverageRectifierOutputVoltage"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysAverageRectifierACInputVoltage"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysAveragePhase1Voltage"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysAveragePhase2Voltage"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysAveragePhase3Voltage"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysSystemVoltage"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysTotalLoadCurrent"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysBatteryVoltage"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysBatteryCurrent"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysBatteryTemperature"), ("ALPHA-RECTIFIER-SYS-MIB", "rectSysSystemNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rectifierGroup = rectifierGroup.setStatus('current')
if mibBuilder.loadTexts: rectifierGroup.setDescription('Alpha Rectifier System data list group.')
mibBuilder.exportSymbols("ALPHA-RECTIFIER-SYS-MIB", rectSysTotalCapacityInstalledPower=rectSysTotalCapacityInstalledPower, rectifierGroups=rectifierGroups, rectifierSystem=rectifierSystem, rectSysTotalCapacityInstalledAmps=rectSysTotalCapacityInstalledAmps, rectSysTotalOutputCurrent=rectSysTotalOutputCurrent, rectSysAveragePhase2Voltage=rectSysAveragePhase2Voltage, rectSysTotalLoadCurrent=rectSysTotalLoadCurrent, rectSysTotalOutputPower=rectSysTotalOutputPower, rectSysSystemVoltage=rectSysSystemVoltage, compliance=compliance, rectSysAveragePhase3Voltage=rectSysAveragePhase3Voltage, conformance=conformance, compliances=compliances, rectSysBatteryCurrent=rectSysBatteryCurrent, rectSysAverageRectifierOutputVoltage=rectSysAverageRectifierOutputVoltage, rectSysSystemNumber=rectSysSystemNumber, PYSNMP_MODULE_ID=rectifierSystem, rectSysAverageRectifierACInputVoltage=rectSysAverageRectifierACInputVoltage, rectSysBatteryTemperature=rectSysBatteryTemperature, rectSysAveragePhase1Voltage=rectSysAveragePhase1Voltage, rectSysBatteryVoltage=rectSysBatteryVoltage, rectifierGroup=rectifierGroup)
