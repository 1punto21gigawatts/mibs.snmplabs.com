#
# PySNMP MIB module ZXR10-SWITCH-ACL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZXR10-SWITCH-ACL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:48:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
TimeTicks, NotificationType, Counter64, Integer32, ModuleIdentity, iso, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, enterprises, Counter32, experimental, Gauge32, mgmt, MibIdentifier, ObjectIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "NotificationType", "Counter64", "Integer32", "ModuleIdentity", "iso", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "enterprises", "Counter32", "experimental", "Gauge32", "mgmt", "MibIdentifier", "ObjectIdentity", "Unsigned32")
RowStatus, DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "MacAddress", "TextualConvention")
zte = MibIdentifier((1, 3, 6, 1, 4, 1, 3902))
zxr10 = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 3))
zxr10switch = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 3, 102))
zxr10ACL = MibIdentifier((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2))
class DisplayString(OctetString):
    pass

zxr10StandardACLTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 1), )
if mibBuilder.loadTexts: zxr10StandardACLTable.setStatus('current')
if mibBuilder.loadTexts: zxr10StandardACLTable.setDescription('Standard ACL')
zxr10StandardACLEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 1, 1), ).setIndexNames((0, "ZXR10-SWITCH-ACL-MIB", "zxr10StandardACLNo"), (0, "ZXR10-SWITCH-ACL-MIB", "zxr10StandardACLRuleID"))
if mibBuilder.loadTexts: zxr10StandardACLEntry.setStatus('current')
if mibBuilder.loadTexts: zxr10StandardACLEntry.setDescription('Standard ACL')
zxr10StandardACLNo = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 1, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10StandardACLNo.setStatus('current')
if mibBuilder.loadTexts: zxr10StandardACLNo.setDescription('Standard ACL number <1-99> Configure standard ACL number <1000-1499> Configure standard ACL number (expanded range)')
zxr10StandardACLName = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 1, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10StandardACLName.setStatus('current')
if mibBuilder.loadTexts: zxr10StandardACLName.setDescription('Standard ACL name (1-31 characters)')
zxr10StandardACLAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 1, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10StandardACLAlias.setStatus('current')
if mibBuilder.loadTexts: zxr10StandardACLAlias.setDescription('Standard ACL alias (1-31 characters)')
zxr10StandardACLMatchorder = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("config", 0), ("auto", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10StandardACLMatchorder.setStatus('current')
if mibBuilder.loadTexts: zxr10StandardACLMatchorder.setDescription('Select match order auto Sort rules automatically config Sort rules by configuration order')
zxr10StandardACLRuleID = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10StandardACLRuleID.setStatus('current')
if mibBuilder.loadTexts: zxr10StandardACLRuleID.setDescription('ACL rule ID')
zxr10StandardACLPermitDeny = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("permit", 0), ("deny", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10StandardACLPermitDeny.setStatus('current')
if mibBuilder.loadTexts: zxr10StandardACLPermitDeny.setDescription('deny Specify packets to reject permit Specify packets to forward')
zxr10StandardACLSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 1, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10StandardACLSrcAddr.setStatus('current')
if mibBuilder.loadTexts: zxr10StandardACLSrcAddr.setDescription('A.B.C.D Source address')
zxr10StandardACLSrcAddrSrcWildcard = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 1, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10StandardACLSrcAddrSrcWildcard.setStatus('current')
if mibBuilder.loadTexts: zxr10StandardACLSrcAddrSrcWildcard.setDescription('A.B.C.D Wildcard bits')
zxr10StandardACLSrcAny = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("invalid", 0), ("valid", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10StandardACLSrcAny.setStatus('current')
if mibBuilder.loadTexts: zxr10StandardACLSrcAny.setDescription('Any source')
zxr10StandardACLFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10StandardACLFlag.setStatus('current')
if mibBuilder.loadTexts: zxr10StandardACLFlag.setDescription('Time range enable or disable flag')
zxr10StandardACLTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 1, 1, 12), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10StandardACLTimeRangeName.setStatus('current')
if mibBuilder.loadTexts: zxr10StandardACLTimeRangeName.setDescription('Configure time range name (1-31 characters)')
zxr10StandardACLRuleDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 1, 1, 13), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10StandardACLRuleDescription.setStatus('current')
if mibBuilder.loadTexts: zxr10StandardACLRuleDescription.setDescription('ACL rule description (1-16 characters)')
zxr10StandardACLRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 1, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10StandardACLRowStatus.setStatus('current')
if mibBuilder.loadTexts: zxr10StandardACLRowStatus.setDescription('createAndGo(4) Configure ACL or rule destroy(6) Delete ACL or rule')
zxr10ExtendedACLTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 2), )
if mibBuilder.loadTexts: zxr10ExtendedACLTable.setStatus('current')
if mibBuilder.loadTexts: zxr10ExtendedACLTable.setDescription('Extended ACL')
zxr10ExtendedACLEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 2, 1), ).setIndexNames((0, "ZXR10-SWITCH-ACL-MIB", "zxr10ExtendedACLNo"), (0, "ZXR10-SWITCH-ACL-MIB", "zxr10ExtendedACLRuleID"))
if mibBuilder.loadTexts: zxr10ExtendedACLEntry.setStatus('current')
if mibBuilder.loadTexts: zxr10ExtendedACLEntry.setDescription('Extended ACL')
zxr10ExtendedACLNo = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 2, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10ExtendedACLNo.setStatus('current')
if mibBuilder.loadTexts: zxr10ExtendedACLNo.setDescription('Extended ACL number <100-199> Configure extended ACL number <1500-1999> Configure extended ACL number (expanded range)')
zxr10ExtendedACLName = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 2, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10ExtendedACLName.setStatus('current')
if mibBuilder.loadTexts: zxr10ExtendedACLName.setDescription('Extended ACL name WORD Configure extended ACL name (1-31 characters)')
zxr10ExtendedACLAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 2, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10ExtendedACLAlias.setStatus('current')
if mibBuilder.loadTexts: zxr10ExtendedACLAlias.setDescription('Extended ACL alias WORD ACL alias (1-31 characters)')
zxr10ExtendedACLMatchorder = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("config", 0), ("auto", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10ExtendedACLMatchorder.setStatus('current')
if mibBuilder.loadTexts: zxr10ExtendedACLMatchorder.setDescription('Select match order auto Sort rules automatically config Sort rules by configuration order ')
zxr10ExtendedACLRuleID = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10ExtendedACLRuleID.setStatus('current')
if mibBuilder.loadTexts: zxr10ExtendedACLRuleID.setDescription('ACL rule ID')
zxr10ExtendedACLPermitDeny = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("permit", 0), ("deny", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10ExtendedACLPermitDeny.setStatus('current')
if mibBuilder.loadTexts: zxr10ExtendedACLPermitDeny.setDescription('deny Specify packets to reject permit Specify packets to forward')
zxr10ExtendedACLSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 2, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10ExtendedACLSrcAddr.setStatus('current')
if mibBuilder.loadTexts: zxr10ExtendedACLSrcAddr.setDescription('A.B.C.D Source address')
zxr10ExtendedACLSrcWildcard = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 2, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10ExtendedACLSrcWildcard.setStatus('current')
if mibBuilder.loadTexts: zxr10ExtendedACLSrcWildcard.setDescription('A.B.C.D Wildcard bits')
zxr10ExtendedACLSrcAny = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("invalid", 0), ("valid", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10ExtendedACLSrcAny.setStatus('current')
if mibBuilder.loadTexts: zxr10ExtendedACLSrcAny.setDescription('Any source')
zxr10ExtendedACLDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 2, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10ExtendedACLDestAddr.setStatus('current')
if mibBuilder.loadTexts: zxr10ExtendedACLDestAddr.setDescription('A.B.C.D Destination address')
zxr10ExtendedACLDestWildcard = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 2, 1, 12), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10ExtendedACLDestWildcard.setStatus('current')
if mibBuilder.loadTexts: zxr10ExtendedACLDestWildcard.setDescription('A.B.C.D Destination wildcard bits')
zxr10ExtendedACLDestAny = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("invalid", 0), ("valid", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10ExtendedACLDestAny.setStatus('current')
if mibBuilder.loadTexts: zxr10ExtendedACLDestAny.setDescription('Any destination host')
zxr10ExtendedACLProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10ExtendedACLProtocol.setStatus('current')
if mibBuilder.loadTexts: zxr10ExtendedACLProtocol.setDescription('255 Any internet protocol (ip) <0-254> An IP protocol number 47 Generic Routing Encapsulation (gre) 1 Internet Control Message Protocol (icmp) 2 Internet Group Management Protocol (igmp) 89 Open Shortest Path First Protocol (ospf) 103 Protocol Independent Multicast (pim) 6 Transmission Control Protocol (tcp) 17 User Datagram Protocol (udp) 112 Virtual Router Redundancy Protocol (vrrp)')
zxr10ExtendedACLSrcOpr = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 7))).clone(namedValues=NamedValues(("invalid", 0), ("eq", 1), ("ge", 2), ("le", 3), ("range", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10ExtendedACLSrcOpr.setStatus('current')
if mibBuilder.loadTexts: zxr10ExtendedACLSrcOpr.setDescription('eq(1) Match only tcp,udp packets on a given port number ge(2) Match only tcp,udp packets with a no lower port number le(3) Match only tcp,udp packets with a no greater port number range(7) Match tcp,udp packets with a given port range')
zxr10ExtendedACLSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10ExtendedACLSrcPort.setStatus('current')
if mibBuilder.loadTexts: zxr10ExtendedACLSrcPort.setDescription('<0-65535> Port number 179 Border gateway protocol (bgp) 53 Domain name service (domain) 79 Finger 21 File transfer protocol (ftp) 513 Login (rlogin) 109 Post office protocol v2 (pop2) 110 Post office protocol v3 (pop3) 25 Simple mail transport protocol (smtp) 23 Telnet 80 World wide web (HTTP)')
zxr10ExtendedACLSrcPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10ExtendedACLSrcPort2.setStatus('current')
if mibBuilder.loadTexts: zxr10ExtendedACLSrcPort2.setDescription('<0-65535> Port number 179 Border gateway protocol (bgp) 53 Domain name service (domain) 79 Finger 21 File transfer protocol (ftp) 513 Login (rlogin) 109 Post office protocol v2 (pop2) 110 Post office protocol v3 (pop3) 25 Simple mail transport protocol (smtp) 23 Telnet 80 World wide web (HTTP)')
zxr10ExtendedACLDestOpr = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 7))).clone(namedValues=NamedValues(("invalid", 0), ("eq", 1), ("ge", 2), ("le", 3), ("range", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10ExtendedACLDestOpr.setStatus('current')
if mibBuilder.loadTexts: zxr10ExtendedACLDestOpr.setDescription('eq(1) Match only tcp,udp packets on a given port number ge(2) Match only tcp,udp packets with a no lower port number le(3) Match only tcp,udp packets with a no greater port number range(7) Match tcp,udp packets with a given port range')
zxr10ExtendedACLDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10ExtendedACLDestPort.setStatus('current')
if mibBuilder.loadTexts: zxr10ExtendedACLDestPort.setDescription('<0-65535> Port number 179 Border gateway protocol (bgp) 53 Domain name service (domain) 79 Finger 21 File transfer protocol (ftp) 513 Login (rlogin) 109 Post office protocol v2 (pop2) 110 Post office protocol v3 (pop3) 25 Simple mail transport protocol (smtp) 23 Telnet 80 World wide web (HTTP)')
zxr10ExtendedACLDestPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10ExtendedACLDestPort2.setStatus('current')
if mibBuilder.loadTexts: zxr10ExtendedACLDestPort2.setDescription('<0-65535> Port number 179 Border gateway protocol (bgp) 53 Domain name service (domain) 79 Finger 21 File transfer protocol (ftp) 513 Login (rlogin) 109 Post office protocol v2 (pop2) 110 Post office protocol v3 (pop3) 25 Simple mail transport protocol (smtp) 23 Telnet 80 World wide web (HTTP)')
zxr10ExtendedACLTCPEstablish = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("true", 1), ("false", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10ExtendedACLTCPEstablish.setStatus('current')
if mibBuilder.loadTexts: zxr10ExtendedACLTCPEstablish.setDescription('Match established connections')
zxr10ExtendedACLTCPControl = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10ExtendedACLTCPControl.setStatus('current')
if mibBuilder.loadTexts: zxr10ExtendedACLTCPControl.setDescription('<0-63> Tcp control value')
zxr10ExtendedACLICMPType = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10ExtendedACLICMPType.setStatus('current')
if mibBuilder.loadTexts: zxr10ExtendedACLICMPType.setDescription('<0-254> ICMP message type 6 Alternate address 8 Echo (ping) 0 Echo reply 16 Information replies 15 Information requests 18 Mask replies 17 Mask requests 12 All parameter problems 5 All redirects 9 Router discovery advertisements 10 Router discovery solicitations 4 Source quenches 11 All time exceededs 14 Timestamp replies 13 Timestamp requests 30 Traceroute 3 All unreachables ')
zxr10ExtendedACLICMPCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10ExtendedACLICMPCode.setStatus('current')
if mibBuilder.loadTexts: zxr10ExtendedACLICMPCode.setDescription('<0-254> ICMP message code')
zxr10ExtendedACLPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10ExtendedACLPrecedence.setStatus('current')
if mibBuilder.loadTexts: zxr10ExtendedACLPrecedence.setDescription('<0-7> IP precedence')
zxr10ExtendedACLTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10ExtendedACLTOS.setStatus('current')
if mibBuilder.loadTexts: zxr10ExtendedACLTOS.setDescription('IP TOS <0-15> Tos value')
zxr10ExtendedACLDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10ExtendedACLDSCP.setStatus('current')
if mibBuilder.loadTexts: zxr10ExtendedACLDSCP.setDescription('<0-63> Dscp value')
zxr10ExtendedACLFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10ExtendedACLFlag.setStatus('current')
if mibBuilder.loadTexts: zxr10ExtendedACLFlag.setDescription('Time range enable or disable flag')
zxr10ExtendedACLTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 2, 1, 29), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10ExtendedACLTimeRangeName.setStatus('current')
if mibBuilder.loadTexts: zxr10ExtendedACLTimeRangeName.setDescription('Configure time range name (1-31 characters)')
zxr10ExtendedACLRuleDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 2, 1, 30), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10ExtendedACLRuleDescription.setStatus('current')
if mibBuilder.loadTexts: zxr10ExtendedACLRuleDescription.setDescription('ACL rule description (1-16 characters)')
zxr10ExtendedACLRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 2, 1, 31), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10ExtendedACLRowStatus.setStatus('current')
if mibBuilder.loadTexts: zxr10ExtendedACLRowStatus.setDescription('createAndGo(4) Configure ACL or rule destroy(6) Delete ACL or rule')
zxr10LinkACLTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 3), )
if mibBuilder.loadTexts: zxr10LinkACLTable.setStatus('current')
if mibBuilder.loadTexts: zxr10LinkACLTable.setDescription('Link ACL')
zxr10LinkACLEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 3, 1), ).setIndexNames((0, "ZXR10-SWITCH-ACL-MIB", "zxr10LinkACLNo"), (0, "ZXR10-SWITCH-ACL-MIB", "zxr10LinkACLRuleID"))
if mibBuilder.loadTexts: zxr10LinkACLEntry.setStatus('current')
if mibBuilder.loadTexts: zxr10LinkACLEntry.setDescription('Link ACL')
zxr10LinkACLNo = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(200, 299))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10LinkACLNo.setStatus('current')
if mibBuilder.loadTexts: zxr10LinkACLNo.setDescription('Link ACL number <200-299> Configure link ACL number')
zxr10LinkACLName = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 3, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10LinkACLName.setStatus('current')
if mibBuilder.loadTexts: zxr10LinkACLName.setDescription('Link ACL name (1-31 characters)')
zxr10LinkACLAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 3, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10LinkACLAlias.setStatus('current')
if mibBuilder.loadTexts: zxr10LinkACLAlias.setDescription('Link ACL alias (1-31 characters)')
zxr10LinkACLMatchorder = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("config", 0), ("auto", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10LinkACLMatchorder.setStatus('current')
if mibBuilder.loadTexts: zxr10LinkACLMatchorder.setDescription('Select match order auto Sort rules automatically config Sort rules by configuration order ')
zxr10LinkACLRuleID = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10LinkACLRuleID.setStatus('current')
if mibBuilder.loadTexts: zxr10LinkACLRuleID.setDescription('ACL rule ID')
zxr10LinkACLPermitDeny = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("permit", 0), ("deny", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10LinkACLPermitDeny.setStatus('current')
if mibBuilder.loadTexts: zxr10LinkACLPermitDeny.setDescription('deny Specify packets to reject permit Specify packets to forward')
zxr10LinkACLProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10LinkACLProtocol.setStatus('current')
if mibBuilder.loadTexts: zxr10LinkACLProtocol.setDescription('protocol type')
zxr10LinkACLCos = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10LinkACLCos.setStatus('current')
if mibBuilder.loadTexts: zxr10LinkACLCos.setDescription('<0-7> Cos vlan-priority')
zxr10LinkACLIncos = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10LinkACLIncos.setStatus('current')
if mibBuilder.loadTexts: zxr10LinkACLIncos.setDescription('<0-7> Inner cos vlan-priority')
zxr10LinkACLDinVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10LinkACLDinVlanID.setStatus('current')
if mibBuilder.loadTexts: zxr10LinkACLDinVlanID.setDescription('<1-4094> Source inner vlan id')
zxr10LinkACLDinVlanIDRight = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10LinkACLDinVlanIDRight.setStatus('current')
if mibBuilder.loadTexts: zxr10LinkACLDinVlanIDRight.setDescription('<1-4094> Right Value of source inner vlan range')
zxr10LinkACLDoutVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10LinkACLDoutVlanID.setStatus('current')
if mibBuilder.loadTexts: zxr10LinkACLDoutVlanID.setDescription('<1-4094> Source outer vlan id')
zxr10LinkACLDoutVlanIDRight = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10LinkACLDoutVlanIDRight.setStatus('current')
if mibBuilder.loadTexts: zxr10LinkACLDoutVlanIDRight.setDescription('<1-4094> Right Value of source outer vlan range')
zxr10LinkACLInMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 3, 1, 15), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10LinkACLInMAC.setStatus('current')
if mibBuilder.loadTexts: zxr10LinkACLInMAC.setDescription('# 0x** 0x** 0x** 0x** 0x** 0x** Source-mac')
zxr10LinkACLInMACWildcard = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 3, 1, 16), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10LinkACLInMACWildcard.setStatus('current')
if mibBuilder.loadTexts: zxr10LinkACLInMACWildcard.setDescription('# 0x** 0x** 0x** 0x** 0x** 0x** Source wildcard bits')
zxr10LinkACLInMACAny = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10LinkACLInMACAny.setStatus('current')
if mibBuilder.loadTexts: zxr10LinkACLInMACAny.setDescription('Any source host')
zxr10LinkACLOutMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 3, 1, 18), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10LinkACLOutMAC.setStatus('current')
if mibBuilder.loadTexts: zxr10LinkACLOutMAC.setDescription('# 0x** 0x** 0x** 0x** 0x** 0x** Destination-mac')
zxr10LinkACLOutMACWildCard = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 3, 1, 19), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10LinkACLOutMACWildCard.setStatus('current')
if mibBuilder.loadTexts: zxr10LinkACLOutMACWildCard.setDescription('# 0x** 0x** 0x** 0x** 0x** 0x** Destination wildcard bits')
zxr10LinkACLOutMACAny = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10LinkACLOutMACAny.setStatus('current')
if mibBuilder.loadTexts: zxr10LinkACLOutMACAny.setDescription('Any destination host')
zxr10LinkACLFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10LinkACLFlag.setStatus('current')
if mibBuilder.loadTexts: zxr10LinkACLFlag.setDescription('Time range enable or disable flag')
zxr10LinkACLTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 3, 1, 22), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10LinkACLTimeRangeName.setStatus('current')
if mibBuilder.loadTexts: zxr10LinkACLTimeRangeName.setDescription('Configure time range name (1-31 characters)')
zxr10LinkACLRuleDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 3, 1, 23), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10LinkACLRuleDescription.setStatus('current')
if mibBuilder.loadTexts: zxr10LinkACLRuleDescription.setDescription('ACL rule description (1-16 characters)')
zxr10LinkACLRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 3, 1, 24), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10LinkACLRowStatus.setStatus('current')
if mibBuilder.loadTexts: zxr10LinkACLRowStatus.setDescription('createAndGo(4) Configure ACL or rule destroy(6) Delete ACL or rule')
zxr10HybridACLTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 4), )
if mibBuilder.loadTexts: zxr10HybridACLTable.setStatus('current')
if mibBuilder.loadTexts: zxr10HybridACLTable.setDescription('Hybrid ACL')
zxr10HybridACLEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 4, 1), ).setIndexNames((0, "ZXR10-SWITCH-ACL-MIB", "zxr10HybridACLNo"), (0, "ZXR10-SWITCH-ACL-MIB", "zxr10HybridACLRuleID"))
if mibBuilder.loadTexts: zxr10HybridACLEntry.setStatus('current')
if mibBuilder.loadTexts: zxr10HybridACLEntry.setDescription('Hybrid ACL')
zxr10HybridACLNo = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 349))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10HybridACLNo.setStatus('current')
if mibBuilder.loadTexts: zxr10HybridACLNo.setDescription(' Hybrid ACL number <300-349> Configure hybrid ACL number')
zxr10HybridACLName = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 4, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10HybridACLName.setStatus('current')
if mibBuilder.loadTexts: zxr10HybridACLName.setDescription('Hybrid ACL name (1-31 characters)')
zxr10HybridACLAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 4, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10HybridACLAlias.setStatus('current')
if mibBuilder.loadTexts: zxr10HybridACLAlias.setDescription('Hybrid ACL alias (1-31 characters)')
zxr10HybridACLMatchorder = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("config", 0), ("auto", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10HybridACLMatchorder.setStatus('current')
if mibBuilder.loadTexts: zxr10HybridACLMatchorder.setDescription('Select match order auto Sort rules automatically config Sort rules by configuration order')
zxr10HybridACLRuleID = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10HybridACLRuleID.setStatus('current')
if mibBuilder.loadTexts: zxr10HybridACLRuleID.setDescription('ACL rule ID')
zxr10HybridACLPermitDeny = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("permit", 0), ("deny", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10HybridACLPermitDeny.setStatus('current')
if mibBuilder.loadTexts: zxr10HybridACLPermitDeny.setDescription('deny Specify packets to reject permit Specify packets to forward')
zxr10HybridACLProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10HybridACLProtocol.setStatus('current')
if mibBuilder.loadTexts: zxr10HybridACLProtocol.setDescription(' 255 Any internet protocol <0-254> An IP protocol number 47 Generic Routing Encapsulation (gre) 2 Internet Group Management Protocol (igmp) 89 Open Shortest Path First Protocol (ospf) 103 Protocol Independent Multicast (pim) 6 Transmission control protocol (tcp) 17 User datagram protocol (udp) 112 Virtual Router Redundancy Protocol (vrrp)')
zxr10HybridACLSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 4, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10HybridACLSrcAddr.setStatus('current')
if mibBuilder.loadTexts: zxr10HybridACLSrcAddr.setDescription('A.B.C.D Source address')
zxr10HybridACLSrcAddrWildcard = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 4, 1, 10), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10HybridACLSrcAddrWildcard.setStatus('current')
if mibBuilder.loadTexts: zxr10HybridACLSrcAddrWildcard.setDescription('A.B.C.D Wildcard bits')
zxr10HybridACLSrcAny = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("invalid", 0), ("valid", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10HybridACLSrcAny.setStatus('current')
if mibBuilder.loadTexts: zxr10HybridACLSrcAny.setDescription('Any source')
zxr10HybridACLDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 4, 1, 12), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10HybridACLDestAddr.setStatus('current')
if mibBuilder.loadTexts: zxr10HybridACLDestAddr.setDescription('A.B.C.D Destination address')
zxr10HybridACLDestAddrWildcard = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 4, 1, 13), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10HybridACLDestAddrWildcard.setStatus('current')
if mibBuilder.loadTexts: zxr10HybridACLDestAddrWildcard.setDescription('A.B.C.D Destination wildcard bits')
zxr10HybridACLDestAny = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("invalid", 0), ("valid", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10HybridACLDestAny.setStatus('current')
if mibBuilder.loadTexts: zxr10HybridACLDestAny.setDescription('Any destination host')
zxr10HybridACLSrcOpr = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("invalid", 0), ("eq", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10HybridACLSrcOpr.setStatus('current')
if mibBuilder.loadTexts: zxr10HybridACLSrcOpr.setDescription('eq(1) Match only tcp,udp packets on a given port number')
zxr10HybridACLSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10HybridACLSrcPort.setStatus('current')
if mibBuilder.loadTexts: zxr10HybridACLSrcPort.setDescription('<0-65535> Port number 179 Border gateway protocol (bgp) 53 Domain name service (domain) 79 Finger 21 File transfer protocol (ftp) 513 Login (rlogin) 109 Post office protocol v2 (pop2) 110 Post office protocol v3 (pop3) 25 Simple mail transport protocol (smtp) 23 Telnet 80 World wide web (HTTP, 80) ')
zxr10HybridACLDestOpr = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("invalid", 0), ("eq", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10HybridACLDestOpr.setStatus('current')
if mibBuilder.loadTexts: zxr10HybridACLDestOpr.setDescription('eq Match only packets on a given port number')
zxr10HybridACLDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10HybridACLDestPort.setStatus('current')
if mibBuilder.loadTexts: zxr10HybridACLDestPort.setDescription('<0-65535> Port number 179 Border gateway protocol (bgp) 53 Domain name service (domain) 79 Finger 21 File transfer protocol (ftp) 513 Login (rlogin) 109 Post office protocol v2 (pop2) 110 Post office protocol v3 (pop3) 25 Simple mail transport protocol (smtp) 23 Telnet 80 World wide web (HTTP, 80)')
zxr10HybridACLTCPControl = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 4, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10HybridACLTCPControl.setStatus('current')
if mibBuilder.loadTexts: zxr10HybridACLTCPControl.setDescription('<0-63> Tcp control value')
zxr10HybridACLTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 4, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10HybridACLTOS.setStatus('current')
if mibBuilder.loadTexts: zxr10HybridACLTOS.setDescription('IP TOS <0-15> Tos value')
zxr10HybridACLPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 4, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10HybridACLPrecedence.setStatus('current')
if mibBuilder.loadTexts: zxr10HybridACLPrecedence.setDescription('<0-7> IP precedence')
zxr10HybridACLDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 4, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10HybridACLDSCP.setStatus('current')
if mibBuilder.loadTexts: zxr10HybridACLDSCP.setDescription('<0-63> Dscp value')
zxr10HybridACLIPNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 4, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10HybridACLIPNumber.setStatus('current')
if mibBuilder.loadTexts: zxr10HybridACLIPNumber.setDescription('65535 Any ether protocol type <0-65534> Ether IP protocol number 2054 Address resolution protocol (arp) 2048 Internet protocol (ip) ')
zxr10HybridACLCos = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 4, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10HybridACLCos.setStatus('current')
if mibBuilder.loadTexts: zxr10HybridACLCos.setDescription('<0-7> Cos vlan-priority')
zxr10HybridACLIncos = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 4, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10HybridACLIncos.setStatus('current')
if mibBuilder.loadTexts: zxr10HybridACLIncos.setDescription('<0-7> Inner cos vlan-priority')
zxr10HybridACLDinVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 4, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10HybridACLDinVlanID.setStatus('current')
if mibBuilder.loadTexts: zxr10HybridACLDinVlanID.setDescription('<1-4094> Source inner vlan id')
zxr10HybridACLDoutVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 4, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10HybridACLDoutVlanID.setStatus('current')
if mibBuilder.loadTexts: zxr10HybridACLDoutVlanID.setDescription('<1-4094> Source outer vlan id')
zxr10HybridACLInMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 4, 1, 28), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10HybridACLInMAC.setStatus('current')
if mibBuilder.loadTexts: zxr10HybridACLInMAC.setDescription('# 0x** 0x** 0x** 0x** 0x** 0x** Source-mac')
zxr10HybridACLInMACWildcard = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 4, 1, 29), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10HybridACLInMACWildcard.setStatus('current')
if mibBuilder.loadTexts: zxr10HybridACLInMACWildcard.setDescription('# 0x** 0x** 0x** 0x** 0x** 0x** Source wildcard bits')
zxr10HybridACLInMACAny = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 4, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10HybridACLInMACAny.setStatus('current')
if mibBuilder.loadTexts: zxr10HybridACLInMACAny.setDescription('Any source host')
zxr10HybridACLOutMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 4, 1, 31), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10HybridACLOutMAC.setStatus('current')
if mibBuilder.loadTexts: zxr10HybridACLOutMAC.setDescription('# 0x** 0x** 0x** 0x** 0x** 0x** Destination-mac')
zxr10HybridACLOutMACWildcard = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 4, 1, 32), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10HybridACLOutMACWildcard.setStatus('current')
if mibBuilder.loadTexts: zxr10HybridACLOutMACWildcard.setDescription('# 0x** 0x** 0x** 0x** 0x** 0x** Destination wildcard bits')
zxr10HybridACLOutMACAny = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 4, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10HybridACLOutMACAny.setStatus('current')
if mibBuilder.loadTexts: zxr10HybridACLOutMACAny.setDescription('Any destination host')
zxr10HybridACLFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 4, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10HybridACLFlag.setStatus('current')
if mibBuilder.loadTexts: zxr10HybridACLFlag.setDescription('Time range enable or disable flag')
zxr10HybridACLTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 4, 1, 35), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10HybridACLTimeRangeName.setStatus('current')
if mibBuilder.loadTexts: zxr10HybridACLTimeRangeName.setDescription('Configure time range name (1-31 characters)')
zxr10HybridACLRuleDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 4, 1, 36), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10HybridACLRuleDescription.setStatus('current')
if mibBuilder.loadTexts: zxr10HybridACLRuleDescription.setDescription('ACL Rule Description (1-16 characters)')
zxr10HybridACLRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 4, 1, 37), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10HybridACLRowStatus.setStatus('current')
if mibBuilder.loadTexts: zxr10HybridACLRowStatus.setDescription('createAndGo(4) Configure ACL or rule destroy(6) Delete ACL or rule')
zxr10ACLBoundIfTable = MibTable((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 5), )
if mibBuilder.loadTexts: zxr10ACLBoundIfTable.setStatus('current')
if mibBuilder.loadTexts: zxr10ACLBoundIfTable.setDescription('Bind Acl to Interface')
zxr10ACLBoundIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 5, 1), ).setIndexNames((0, "ZXR10-SWITCH-ACL-MIB", "zxr10ACLBoundIf"))
if mibBuilder.loadTexts: zxr10ACLBoundIfEntry.setStatus('current')
if mibBuilder.loadTexts: zxr10ACLBoundIfEntry.setDescription('Bind Acl to Interface')
zxr10ACLBoundIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 5, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10ACLBoundIf.setStatus('current')
if mibBuilder.loadTexts: zxr10ACLBoundIf.setDescription('The ifindex of physical interface that bind to acl')
zxr10ACLNo = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 5, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10ACLNo.setStatus('current')
if mibBuilder.loadTexts: zxr10ACLNo.setDescription('ACL number <1-349> IPv4 ACL number <1000-1999> IPv4 ACL number(expanded range) <2000-2499> IPv6 ACL number ')
zxr10ACLName = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 5, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10ACLName.setStatus('current')
if mibBuilder.loadTexts: zxr10ACLName.setDescription('ACL name (1-31 characters)')
zxr10ACLBoundIfDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("in", 0), ("out", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10ACLBoundIfDirection.setStatus('current')
if mibBuilder.loadTexts: zxr10ACLBoundIfDirection.setDescription('in Inbound packets out outbound packets')
zxr10ACLRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3902, 3, 102, 2, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zxr10ACLRowStatus.setStatus('current')
if mibBuilder.loadTexts: zxr10ACLRowStatus.setDescription('createAndGo(4) Bind Acl to Interface destroy(6) Undo Bind Acl to Interface')
mibBuilder.exportSymbols("ZXR10-SWITCH-ACL-MIB", zxr10LinkACLOutMACAny=zxr10LinkACLOutMACAny, zxr10LinkACLName=zxr10LinkACLName, zxr10HybridACLRowStatus=zxr10HybridACLRowStatus, zxr10StandardACLNo=zxr10StandardACLNo, zxr10LinkACLRuleDescription=zxr10LinkACLRuleDescription, zxr10StandardACLAlias=zxr10StandardACLAlias, zxr10ExtendedACLPermitDeny=zxr10ExtendedACLPermitDeny, zxr10HybridACLTCPControl=zxr10HybridACLTCPControl, zxr10ExtendedACLDSCP=zxr10ExtendedACLDSCP, zxr10StandardACLMatchorder=zxr10StandardACLMatchorder, zxr10HybridACLRuleDescription=zxr10HybridACLRuleDescription, zxr10StandardACLTable=zxr10StandardACLTable, zxr10HybridACLCos=zxr10HybridACLCos, zxr10ACLName=zxr10ACLName, zxr10HybridACLDoutVlanID=zxr10HybridACLDoutVlanID, zxr10StandardACLPermitDeny=zxr10StandardACLPermitDeny, zxr10LinkACLDoutVlanID=zxr10LinkACLDoutVlanID, zxr10ExtendedACLSrcAddr=zxr10ExtendedACLSrcAddr, zxr10ExtendedACLDestAny=zxr10ExtendedACLDestAny, zxr10HybridACLSrcAddr=zxr10HybridACLSrcAddr, zxr10HybridACLPermitDeny=zxr10HybridACLPermitDeny, zxr10HybridACLTimeRangeName=zxr10HybridACLTimeRangeName, zxr10ExtendedACLSrcAny=zxr10ExtendedACLSrcAny, zxr10LinkACLTimeRangeName=zxr10LinkACLTimeRangeName, zxr10HybridACLInMACAny=zxr10HybridACLInMACAny, zxr10LinkACLCos=zxr10LinkACLCos, zxr10ExtendedACLDestPort2=zxr10ExtendedACLDestPort2, zxr10HybridACLSrcAddrWildcard=zxr10HybridACLSrcAddrWildcard, zxr10ExtendedACLName=zxr10ExtendedACLName, zxr10HybridACLOutMAC=zxr10HybridACLOutMAC, zxr10LinkACLRuleID=zxr10LinkACLRuleID, zxr10LinkACLInMAC=zxr10LinkACLInMAC, zxr10ExtendedACLDestAddr=zxr10ExtendedACLDestAddr, zxr10LinkACLPermitDeny=zxr10LinkACLPermitDeny, zxr10=zxr10, zxr10LinkACLInMACAny=zxr10LinkACLInMACAny, zxr10ACLBoundIfEntry=zxr10ACLBoundIfEntry, zxr10HybridACLDestPort=zxr10HybridACLDestPort, zxr10ExtendedACLICMPCode=zxr10ExtendedACLICMPCode, zxr10ACLNo=zxr10ACLNo, zxr10ExtendedACLRuleID=zxr10ExtendedACLRuleID, zxr10LinkACLNo=zxr10LinkACLNo, zxr10LinkACLMatchorder=zxr10LinkACLMatchorder, zxr10HybridACLInMACWildcard=zxr10HybridACLInMACWildcard, zxr10ExtendedACLTCPControl=zxr10ExtendedACLTCPControl, zxr10ExtendedACLAlias=zxr10ExtendedACLAlias, zxr10StandardACLRuleID=zxr10StandardACLRuleID, zxr10LinkACLIncos=zxr10LinkACLIncos, zxr10ExtendedACLTable=zxr10ExtendedACLTable, zxr10ExtendedACLSrcOpr=zxr10ExtendedACLSrcOpr, zxr10HybridACLSrcPort=zxr10HybridACLSrcPort, zxr10StandardACLSrcAddrSrcWildcard=zxr10StandardACLSrcAddrSrcWildcard, zxr10ExtendedACLRuleDescription=zxr10ExtendedACLRuleDescription, zxr10ACLBoundIfDirection=zxr10ACLBoundIfDirection, zxr10HybridACLTable=zxr10HybridACLTable, zxr10LinkACLOutMAC=zxr10LinkACLOutMAC, zxr10ExtendedACLSrcPort=zxr10ExtendedACLSrcPort, zxr10StandardACLSrcAddr=zxr10StandardACLSrcAddr, DisplayString=DisplayString, zxr10HybridACLNo=zxr10HybridACLNo, zxr10ExtendedACLTCPEstablish=zxr10ExtendedACLTCPEstablish, zxr10ACLRowStatus=zxr10ACLRowStatus, zxr10StandardACLSrcAny=zxr10StandardACLSrcAny, zxr10HybridACLSrcAny=zxr10HybridACLSrcAny, zxr10LinkACLEntry=zxr10LinkACLEntry, zxr10ACLBoundIfTable=zxr10ACLBoundIfTable, zxr10HybridACLName=zxr10HybridACLName, zxr10ExtendedACLProtocol=zxr10ExtendedACLProtocol, zxr10ExtendedACLTimeRangeName=zxr10ExtendedACLTimeRangeName, zxr10HybridACLRuleID=zxr10HybridACLRuleID, zxr10HybridACLAlias=zxr10HybridACLAlias, zxr10switch=zxr10switch, zxr10HybridACLPrecedence=zxr10HybridACLPrecedence, zxr10HybridACLProtocol=zxr10HybridACLProtocol, zxr10ExtendedACLDestOpr=zxr10ExtendedACLDestOpr, zxr10HybridACLSrcOpr=zxr10HybridACLSrcOpr, zxr10ExtendedACLDestPort=zxr10ExtendedACLDestPort, zxr10HybridACLDSCP=zxr10HybridACLDSCP, zxr10ExtendedACLPrecedence=zxr10ExtendedACLPrecedence, zxr10HybridACLTOS=zxr10HybridACLTOS, zxr10LinkACLDinVlanIDRight=zxr10LinkACLDinVlanIDRight, zxr10HybridACLOutMACWildcard=zxr10HybridACLOutMACWildcard, zxr10HybridACLMatchorder=zxr10HybridACLMatchorder, zxr10LinkACLProtocol=zxr10LinkACLProtocol, zxr10ExtendedACLDestWildcard=zxr10ExtendedACLDestWildcard, zxr10ACLBoundIf=zxr10ACLBoundIf, zxr10ACL=zxr10ACL, zxr10StandardACLRuleDescription=zxr10StandardACLRuleDescription, zxr10ExtendedACLEntry=zxr10ExtendedACLEntry, zxr10ExtendedACLNo=zxr10ExtendedACLNo, zxr10StandardACLFlag=zxr10StandardACLFlag, zxr10HybridACLIPNumber=zxr10HybridACLIPNumber, zxr10HybridACLEntry=zxr10HybridACLEntry, zxr10HybridACLIncos=zxr10HybridACLIncos, zxr10LinkACLDinVlanID=zxr10LinkACLDinVlanID, zxr10HybridACLDestAddrWildcard=zxr10HybridACLDestAddrWildcard, zxr10LinkACLInMACWildcard=zxr10LinkACLInMACWildcard, zxr10HybridACLDinVlanID=zxr10HybridACLDinVlanID, zxr10HybridACLOutMACAny=zxr10HybridACLOutMACAny, zxr10ExtendedACLSrcPort2=zxr10ExtendedACLSrcPort2, zxr10StandardACLRowStatus=zxr10StandardACLRowStatus, zxr10ExtendedACLSrcWildcard=zxr10ExtendedACLSrcWildcard, zxr10HybridACLDestAny=zxr10HybridACLDestAny, zte=zte, zxr10ExtendedACLMatchorder=zxr10ExtendedACLMatchorder, zxr10LinkACLTable=zxr10LinkACLTable, zxr10HybridACLDestAddr=zxr10HybridACLDestAddr, zxr10StandardACLName=zxr10StandardACLName, zxr10LinkACLDoutVlanIDRight=zxr10LinkACLDoutVlanIDRight, zxr10StandardACLEntry=zxr10StandardACLEntry, zxr10HybridACLFlag=zxr10HybridACLFlag, zxr10HybridACLDestOpr=zxr10HybridACLDestOpr, zxr10LinkACLFlag=zxr10LinkACLFlag, zxr10ExtendedACLFlag=zxr10ExtendedACLFlag, zxr10StandardACLTimeRangeName=zxr10StandardACLTimeRangeName, zxr10ExtendedACLTOS=zxr10ExtendedACLTOS, zxr10LinkACLRowStatus=zxr10LinkACLRowStatus, zxr10HybridACLInMAC=zxr10HybridACLInMAC, zxr10ExtendedACLICMPType=zxr10ExtendedACLICMPType, zxr10LinkACLOutMACWildCard=zxr10LinkACLOutMACWildCard, zxr10LinkACLAlias=zxr10LinkACLAlias, zxr10ExtendedACLRowStatus=zxr10ExtendedACLRowStatus)
