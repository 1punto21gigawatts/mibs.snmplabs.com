#
# PySNMP MIB module CADANT-MAP-STATS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CADANT-MAP-STATS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:46:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
cadSpectrum, = mibBuilder.importSymbols("CADANT-PRODUCTS-MIB", "cadSpectrum")
FlowActivityState, = mibBuilder.importSymbols("CADANT-TC", "FlowActivityState")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Gauge32, NotificationType, Counter32, Counter64, Integer32, IpAddress, MibIdentifier, Unsigned32, ModuleIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Gauge32", "NotificationType", "Counter32", "Counter64", "Integer32", "IpAddress", "MibIdentifier", "Unsigned32", "ModuleIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cadMapStatsMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10))
cadMapStatsMib.setRevisions(('2008-10-23 00:00', '2004-01-17 00:00', '2004-01-16 00:00', '2003-08-11 00:00', '2003-08-06 00:00', '2003-08-04 00:00', '2003-04-04 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cadMapStatsMib.setRevisionsDescriptions(('change definition of CadMapStatsBwRequestQueuesPriorityId.', 'added cadMapStatsTotalBadMaps', 'added cadMapStatsTotalLogicalNullPadMSlots', 'added cadMapStatsBwRequestQueuesLatencySum', 'added cadMapStatsNumBEPollingFlows', 'added cadMapStatsBwRequestQueuesNumElements', 'updated comments, use FlowActivityState instead of CadMapStatsGreedyId, rename cadMapStatsTotalGrantPendingTooLongDrops',))
if mibBuilder.loadTexts: cadMapStatsMib.setLastUpdated('200810230000Z')
if mibBuilder.loadTexts: cadMapStatsMib.setOrganization('Arris International, Inc.')
if mibBuilder.loadTexts: cadMapStatsMib.setContactInfo('Arris Technical Support Postal: ARRIS Phone: +1 770 622 8530 E-Mail: support@arrisi.com')
if mibBuilder.loadTexts: cadMapStatsMib.setDescription('This MIB contains objects to display counts and statistical information for the DOCSIS map-makers. There exists a single map-maker for each upstream channel. The map-makers hold the keys to the upstream bandwidth. Thus, one is able to gain insight into how the upstream bandwidth is being managed by analyzing the various map-maker counts and statistics in this MIB.')
class CadMapStatsIUCTypeId(TextualConvention, Integer32):
    description = 'Interval Usage Code, a field in MAP and UCD messages which link burst profiles to grants.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 15)

class CadMapStatsBwRequestQueuesPriorityId(TextualConvention, Integer32):
    description = 'MapMaker Priorities for Bandwidth Requests'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("docsispri0", 0), ("docsispri1", 1), ("docsispri2", 2), ("docsispri3", 3), ("docsispri4", 4), ("docsispri5", 5), ("docsispri6", 6), ("docsispri7", 7))

cadMapStatsBaseTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 1), )
if mibBuilder.loadTexts: cadMapStatsBaseTable.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsBaseTable.setDescription('')
cadMapStatsBaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cadMapStatsBaseEntry.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsBaseEntry.setDescription('')
cadMapStatsTotalMapsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMapStatsTotalMapsSent.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsTotalMapsSent.setDescription('Total number of maps transmitted downstream for this UChannel.')
cadMapStatsTotalFragmentedGrants = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMapStatsTotalFragmentedGrants.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsTotalFragmentedGrants.setDescription('Total number of fragmented bandwidth grants for this UChannel.')
cadMapStatsTotalUgsQiTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMapStatsTotalUgsQiTransitions.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsTotalUgsQiTransitions.setDescription('Total number of UGS QI transitions. Useful for debugging VoIP.')
cadMapStatsTotalUgsadTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMapStatsTotalUgsadTransitions.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsTotalUgsadTransitions.setDescription('Total number of UGSAD flow transitions. Useful for debugging VoIP.')
cadMapStatsTotalUgsEHdrsSw = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMapStatsTotalUgsEHdrsSw.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsTotalUgsEHdrsSw.setDescription('Total number of UGS Service Flow Extended Headers processed in software. Useful for debugging VoIP.')
cadMapStatsTotalBadMaps = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMapStatsTotalBadMaps.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsTotalBadMaps.setDescription('Total number of maps discarded due to errors for this UChannel')
cadMapStatsMSlotsTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 2), )
if mibBuilder.loadTexts: cadMapStatsMSlotsTable.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsMSlotsTable.setDescription('')
cadMapStatsMSlotsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cadMapStatsMSlotsEntry.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsMSlotsEntry.setDescription('')
cadMapStatsTotalMSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMapStatsTotalMSlots.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsTotalMSlots.setDescription('Total Minislots count for this UChannel.')
cadMapStatsTotalUCastGrantedMSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMapStatsTotalUCastGrantedMSlots.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsTotalUCastGrantedMSlots.setDescription('Total Minislots granted to Unicast for this UChannel.')
cadMapStatsTotalBwRequestMSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMapStatsTotalBwRequestMSlots.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsTotalBwRequestMSlots.setDescription('Total Minislots requested via bandwidth requests for this UChannel. This count does not include requests dropped due to SuperGreedy in hardware.')
cadMapStatsTotalSkippedMSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMapStatsTotalSkippedMSlots.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsTotalSkippedMSlots.setDescription('Total Minislots not granted because the MapMaker was behind.')
cadMapStatsTotalLogicalNullPadMSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMapStatsTotalLogicalNullPadMSlots.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsTotalLogicalNullPadMSlots.setDescription('Total Minislots allocated to the NULL SID for a logical channel which is inactive')
cadMapStatsMSlotsPerIUCTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 3), )
if mibBuilder.loadTexts: cadMapStatsMSlotsPerIUCTable.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsMSlotsPerIUCTable.setDescription('')
cadMapStatsMSlotsPerIUCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CADANT-MAP-STATS-MIB", "cadMapStatsMSlotsPerIUCId"))
if mibBuilder.loadTexts: cadMapStatsMSlotsPerIUCEntry.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsMSlotsPerIUCEntry.setDescription('')
cadMapStatsMSlotsPerIUCId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 3, 1, 1), CadMapStatsIUCTypeId())
if mibBuilder.loadTexts: cadMapStatsMSlotsPerIUCId.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsMSlotsPerIUCId.setDescription('')
cadMapStatsGrantedBCastMSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMapStatsGrantedBCastMSlots.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsGrantedBCastMSlots.setDescription('For each IUC type, the total number of minislots granted to the Broadcast SID.')
cadMapStatsGrantedMCastMSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMapStatsGrantedMCastMSlots.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsGrantedMCastMSlots.setDescription('For each IUC type, the total number of minislots granted to Multicast SIDs.')
cadMapStatsGrantedUCastMSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMapStatsGrantedUCastMSlots.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsGrantedUCastMSlots.setDescription('For each IUC type, the total number of minislots granted to Unicast SIDs.')
cadMapStatsGrantedZeroSidMSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMapStatsGrantedZeroSidMSlots.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsGrantedZeroSidMSlots.setDescription('For each IUC type, the total number of minislots granted to the Zero SID.')
cadMapStatsBwRequestsTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 4), )
if mibBuilder.loadTexts: cadMapStatsBwRequestsTable.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsBwRequestsTable.setDescription('')
cadMapStatsBwRequestsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cadMapStatsBwRequestsEntry.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsBwRequestsEntry.setDescription('')
cadMapStatsTotalBwRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMapStatsTotalBwRequests.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsTotalBwRequests.setDescription('Total number of Bandwidth Requests processed for this UChannel. This count does not include requests dropped due to SuperGreedy in hardware.')
cadMapStatsTotalBwRequestSchedulerDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMapStatsTotalBwRequestSchedulerDrops.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsTotalBwRequestSchedulerDrops.setDescription('Total number of Bandwidth Requests dropped by the MapMaker without giving a grant or grant pending. This count does not include grant pending drops.')
cadMapStatsTotalBwRequestSuperGreedyDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMapStatsTotalBwRequestSuperGreedyDrops.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsTotalBwRequestSuperGreedyDrops.setDescription('Total number of Bandwidth Requests dropped due to the service flow being in the super greedy state. This should not happen if the cable modem is properly policing its service flows.')
cadMapStatsPeakBwRequestSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMapStatsPeakBwRequestSize.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsPeakBwRequestSize.setDescription('The peak size of a Bandwidth request received since the last read.')
cadMapStatsPeakBwRequestsPerMap = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMapStatsPeakBwRequestsPerMap.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsPeakBwRequestsPerMap.setDescription('The peak number of Bandwidth requests per map received since the last read.')
cadMapStatsGrantPendingsTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 5), )
if mibBuilder.loadTexts: cadMapStatsGrantPendingsTable.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsGrantPendingsTable.setDescription('')
cadMapStatsGrantPendingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cadMapStatsGrantPendingsEntry.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsGrantPendingsEntry.setDescription('')
cadMapStatsTotalGrantPendings = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 5, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMapStatsTotalGrantPendings.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsTotalGrantPendings.setDescription('Total number of Grant Pendings given for this UChannel.')
cadMapStatsTotalGrantPendingDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 5, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMapStatsTotalGrantPendingDrops.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsTotalGrantPendingDrops.setDescription('Total number of Grant Pendings Dropped by the MapMaker for this UChannel. These are dropped primarily for pending for too long or too many grants pending per map.')
cadMapStatsTotalGrantPendingPromos = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 5, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMapStatsTotalGrantPendingPromos.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsTotalGrantPendingPromos.setDescription('Total number of Grant Pendings Promoted by the MapMaker to a higher priority (less greedy) queue for this UChannel.')
cadMapStatsPeakGrantPendingsPerMap = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMapStatsPeakGrantPendingsPerMap.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsPeakGrantPendingsPerMap.setDescription('The peak number of Bandwidth requests per map received since the last read.')
cadMapStatsBwRequestQueuesTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 6), )
if mibBuilder.loadTexts: cadMapStatsBwRequestQueuesTable.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsBwRequestQueuesTable.setDescription('')
cadMapStatsBwRequestQueuesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CADANT-MAP-STATS-MIB", "cadMapStatsBwRequestQueuesFlowState"), (0, "CADANT-MAP-STATS-MIB", "cadMapStatsBwRequestQueuesPriorityId"))
if mibBuilder.loadTexts: cadMapStatsBwRequestQueuesEntry.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsBwRequestQueuesEntry.setDescription('')
cadMapStatsBwRequestQueuesFlowState = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 6, 1, 1), FlowActivityState())
if mibBuilder.loadTexts: cadMapStatsBwRequestQueuesFlowState.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsBwRequestQueuesFlowState.setDescription('')
cadMapStatsBwRequestQueuesPriorityId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 6, 1, 2), CadMapStatsBwRequestQueuesPriorityId())
if mibBuilder.loadTexts: cadMapStatsBwRequestQueuesPriorityId.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsBwRequestQueuesPriorityId.setDescription('')
cadMapStatsBwRequestQueuesNumAdds = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMapStatsBwRequestQueuesNumAdds.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsBwRequestQueuesNumAdds.setDescription('For each Bandwidth Request priority Queue, the total number of bandwidth requests added to this queue. This includes requests promoted from lower priority queues.')
cadMapStatsBwRequestQueuesNumDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMapStatsBwRequestQueuesNumDrops.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsBwRequestQueuesNumDrops.setDescription('For each Bandwidth Request priority Queue, the total number of requests dropped. These are dropped primarily for pending for too long or too many grants pending per map.')
cadMapStatsBwRequestQueuesNumPendings = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMapStatsBwRequestQueuesNumPendings.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsBwRequestQueuesNumPendings.setDescription('For each Bandwidth Request priority Queue, the total number of grant pendings given to bandwidth requests on this queue.')
cadMapStatsBwRequestQueuesNumPromos = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMapStatsBwRequestQueuesNumPromos.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsBwRequestQueuesNumPromos.setDescription('For each Bandwidth Request priority Queue, the total number of bandwidth requests promoted from this queue to a higher priority (less greedy) queue.')
cadMapStatsBwRequestQueuesNumElements = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 6, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMapStatsBwRequestQueuesNumElements.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsBwRequestQueuesNumElements.setDescription('For each Bandwidth Request priority Queue, the current number of bandwidth requests in the queue.')
cadMapStatsBwRequestQueuesLatencySum = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 6, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMapStatsBwRequestQueuesLatencySum.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsBwRequestQueuesLatencySum.setDescription('For each Bandwidth Request priority Queue, the sum of the latency in usecs for each bandwidth request from receive time to grant or drop time. Latency for requests which are promoted is counted in the promoted to queue.')
cadMapStatsPeriodicFlowsTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 7), )
if mibBuilder.loadTexts: cadMapStatsPeriodicFlowsTable.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsPeriodicFlowsTable.setDescription('')
cadMapStatsPeriodicFlowsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cadMapStatsPeriodicFlowsEntry.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsPeriodicFlowsEntry.setDescription('')
cadMapStatsNumNrtpsFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 7, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMapStatsNumNrtpsFlows.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsNumNrtpsFlows.setDescription('Current number of scheduled NRTPS flows for this UChannel.')
cadMapStatsNumRtpsFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 7, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMapStatsNumRtpsFlows.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsNumRtpsFlows.setDescription('Current number of scheduled RTPS flows scheduled for this UChannel.')
cadMapStatsNumUgsadActiveFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 7, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMapStatsNumUgsadActiveFlows.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsNumUgsadActiveFlows.setDescription('Current number of scheduled UGSAD flows in the Active (UGS) mode for this UChannel.')
cadMapStatsNumUgsadPollingFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 7, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMapStatsNumUgsadPollingFlows.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsNumUgsadPollingFlows.setDescription('Current number of scheduled UGSAD flows in the Polling (RTPS) mode for this UChannel.')
cadMapStatsNumUgsFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 7, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMapStatsNumUgsFlows.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsNumUgsFlows.setDescription('Current number of scheduled UGS flows for this UChannel.')
cadMapStatsNumBEPollingFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 7, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMapStatsNumBEPollingFlows.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsNumBEPollingFlows.setDescription('Current number of scheduled Best Effort Polling flows for this UChannel. These are NRTPS request opportunities given to Best Effort flows based on the flow priority and guaranteed minimum reserved rate. This includes flows using both the fast and slow polling intervals.')
cadMapStatsNumBEFastPollingFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 15, 10, 7, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMapStatsNumBEFastPollingFlows.setStatus('current')
if mibBuilder.loadTexts: cadMapStatsNumBEFastPollingFlows.setDescription('Current number of scheduled Best Effort Fast Polling flows for this UChannel.')
mibBuilder.exportSymbols("CADANT-MAP-STATS-MIB", CadMapStatsIUCTypeId=CadMapStatsIUCTypeId, cadMapStatsGrantedUCastMSlots=cadMapStatsGrantedUCastMSlots, cadMapStatsBwRequestsTable=cadMapStatsBwRequestsTable, cadMapStatsTotalBwRequestSchedulerDrops=cadMapStatsTotalBwRequestSchedulerDrops, cadMapStatsTotalMapsSent=cadMapStatsTotalMapsSent, cadMapStatsTotalLogicalNullPadMSlots=cadMapStatsTotalLogicalNullPadMSlots, cadMapStatsGrantedBCastMSlots=cadMapStatsGrantedBCastMSlots, cadMapStatsTotalBwRequests=cadMapStatsTotalBwRequests, cadMapStatsBwRequestQueuesNumDrops=cadMapStatsBwRequestQueuesNumDrops, cadMapStatsTotalSkippedMSlots=cadMapStatsTotalSkippedMSlots, cadMapStatsBwRequestQueuesNumElements=cadMapStatsBwRequestQueuesNumElements, cadMapStatsGrantPendingsEntry=cadMapStatsGrantPendingsEntry, cadMapStatsTotalGrantPendingDrops=cadMapStatsTotalGrantPendingDrops, cadMapStatsTotalUCastGrantedMSlots=cadMapStatsTotalUCastGrantedMSlots, cadMapStatsBwRequestQueuesTable=cadMapStatsBwRequestQueuesTable, cadMapStatsTotalUgsadTransitions=cadMapStatsTotalUgsadTransitions, cadMapStatsMSlotsTable=cadMapStatsMSlotsTable, cadMapStatsMSlotsPerIUCTable=cadMapStatsMSlotsPerIUCTable, cadMapStatsGrantPendingsTable=cadMapStatsGrantPendingsTable, cadMapStatsTotalMSlots=cadMapStatsTotalMSlots, cadMapStatsPeakGrantPendingsPerMap=cadMapStatsPeakGrantPendingsPerMap, cadMapStatsTotalUgsQiTransitions=cadMapStatsTotalUgsQiTransitions, cadMapStatsBwRequestQueuesNumPendings=cadMapStatsBwRequestQueuesNumPendings, cadMapStatsPeakBwRequestSize=cadMapStatsPeakBwRequestSize, cadMapStatsBwRequestQueuesEntry=cadMapStatsBwRequestQueuesEntry, cadMapStatsMib=cadMapStatsMib, cadMapStatsNumBEFastPollingFlows=cadMapStatsNumBEFastPollingFlows, cadMapStatsTotalBwRequestMSlots=cadMapStatsTotalBwRequestMSlots, cadMapStatsNumNrtpsFlows=cadMapStatsNumNrtpsFlows, cadMapStatsBwRequestQueuesPriorityId=cadMapStatsBwRequestQueuesPriorityId, cadMapStatsPeriodicFlowsTable=cadMapStatsPeriodicFlowsTable, cadMapStatsNumUgsadPollingFlows=cadMapStatsNumUgsadPollingFlows, cadMapStatsBwRequestQueuesNumPromos=cadMapStatsBwRequestQueuesNumPromos, cadMapStatsNumRtpsFlows=cadMapStatsNumRtpsFlows, cadMapStatsMSlotsPerIUCId=cadMapStatsMSlotsPerIUCId, cadMapStatsGrantedMCastMSlots=cadMapStatsGrantedMCastMSlots, CadMapStatsBwRequestQueuesPriorityId=CadMapStatsBwRequestQueuesPriorityId, cadMapStatsTotalGrantPendings=cadMapStatsTotalGrantPendings, cadMapStatsBwRequestQueuesLatencySum=cadMapStatsBwRequestQueuesLatencySum, cadMapStatsPeriodicFlowsEntry=cadMapStatsPeriodicFlowsEntry, cadMapStatsPeakBwRequestsPerMap=cadMapStatsPeakBwRequestsPerMap, cadMapStatsTotalUgsEHdrsSw=cadMapStatsTotalUgsEHdrsSw, cadMapStatsTotalBadMaps=cadMapStatsTotalBadMaps, cadMapStatsBwRequestsEntry=cadMapStatsBwRequestsEntry, cadMapStatsNumUgsadActiveFlows=cadMapStatsNumUgsadActiveFlows, cadMapStatsBaseEntry=cadMapStatsBaseEntry, cadMapStatsNumUgsFlows=cadMapStatsNumUgsFlows, cadMapStatsBwRequestQueuesNumAdds=cadMapStatsBwRequestQueuesNumAdds, cadMapStatsGrantedZeroSidMSlots=cadMapStatsGrantedZeroSidMSlots, cadMapStatsMSlotsPerIUCEntry=cadMapStatsMSlotsPerIUCEntry, cadMapStatsTotalBwRequestSuperGreedyDrops=cadMapStatsTotalBwRequestSuperGreedyDrops, cadMapStatsBwRequestQueuesFlowState=cadMapStatsBwRequestQueuesFlowState, cadMapStatsTotalGrantPendingPromos=cadMapStatsTotalGrantPendingPromos, cadMapStatsMSlotsEntry=cadMapStatsMSlotsEntry, cadMapStatsTotalFragmentedGrants=cadMapStatsTotalFragmentedGrants, cadMapStatsNumBEPollingFlows=cadMapStatsNumBEPollingFlows, PYSNMP_MODULE_ID=cadMapStatsMib, cadMapStatsBaseTable=cadMapStatsBaseTable)
