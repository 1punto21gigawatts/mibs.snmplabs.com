#
# PySNMP MIB module PPP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PPP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:41:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
scanet, = mibBuilder.importSymbols("SCANET-MIB", "scanet")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, Bits, MibIdentifier, Counter64, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, TimeTicks, Gauge32, iso, Counter32, NotificationType, ObjectIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Bits", "MibIdentifier", "Counter64", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "TimeTicks", "Gauge32", "iso", "Counter32", "NotificationType", "ObjectIdentity", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ppp = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 43))
pppLink = MibIdentifier((1, 3, 6, 1, 4, 1, 208, 43, 1))
class PppProtocolState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("initial", 1), ("starting", 2), ("closed", 3), ("stopped", 4), ("closing", 5), ("stopping", 6), ("reqsent", 7), ("ackrcvd", 8), ("acksent", 9), ("opened", 10), ("disabled", 11))

pppLinkProtoStateTable = MibTable((1, 3, 6, 1, 4, 1, 208, 43, 1, 1), )
if mibBuilder.loadTexts: pppLinkProtoStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkProtoStateTable.setDescription('Table containing protocol states and link type (standard, multilink slave or multilink master).')
pppLinkProtoStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 43, 1, 1, 1), ).setIndexNames((0, "PPP-MIB", "pppLinkProtoStateIfIndex"))
if mibBuilder.loadTexts: pppLinkProtoStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkProtoStateEntry.setDescription('')
pppLinkProtoStateIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkProtoStateIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkProtoStateIfIndex.setDescription('Interface index.')
pppLinkProtoStatePppLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("standard", 1), ("multilinkmaster", 2), ("multilinkslave", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkProtoStatePppLinkType.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkProtoStatePppLinkType.setDescription('PPP Link type.')
pppLinkProtoStateLcpState = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 1, 1, 3), PppProtocolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkProtoStateLcpState.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkProtoStateLcpState.setDescription('LCP (Link Control Protocol) state.')
pppLinkProtoStateIpcpState = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 1, 1, 4), PppProtocolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkProtoStateIpcpState.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkProtoStateIpcpState.setDescription('IPCP (Ip Control Protocol) state. Not used for multilink slave links (pppLinkProtoStatePppLinkType = multilinkslave).')
pppLinkProtoStateIpxcpState = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 1, 1, 5), PppProtocolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkProtoStateIpxcpState.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkProtoStateIpxcpState.setDescription('IPXCP (Ipx Control Protocol) state. Not used for multilink slave links (pppLinkProtoStatePppLinkType = multilinkslave).')
pppLinkProtoStateBcpState = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 1, 1, 6), PppProtocolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkProtoStateBcpState.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkProtoStateBcpState.setDescription('BCP (Bridging Control Protocol) state. Not used for multilink slave links (pppLinkProtoStatePppLinkType = multilinkslave).')
pppLinkProtoStateCcpState = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 1, 1, 7), PppProtocolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkProtoStateCcpState.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkProtoStateCcpState.setDescription('CCP (Compression Control Protocol) state. Not used for multilink slave links (pppLinkProtoStatePppLinkType = multilinkslave).')
pppLinkProtoStateEcpState = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 1, 1, 8), PppProtocolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkProtoStateEcpState.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkProtoStateEcpState.setDescription('ECP (Encryption Control Protocol) state. Not used for multilink slave links (pppLinkProtoStatePppLinkType = multilinkslave).')
pppLinkLcpTable = MibTable((1, 3, 6, 1, 4, 1, 208, 43, 1, 2), )
if mibBuilder.loadTexts: pppLinkLcpTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkLcpTable.setDescription('LCP (Link Control Protocol) information table. Values are first valid when protocol has state OPENED. Not used for multilink master links (pppLinkProtoStatePppLinkType = multilinkmaster).')
pppLinkLcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 43, 1, 2, 1), ).setIndexNames((0, "PPP-MIB", "pppLinkLcpIfIndex"))
if mibBuilder.loadTexts: pppLinkLcpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkLcpEntry.setDescription('')
pppLinkLcpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkLcpIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkLcpIfIndex.setDescription('Interface index')
pppLinkLcpMRUInc = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkLcpMRUInc.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkLcpMRUInc.setDescription('Local Maximum Receive Unit')
pppLinkLcpMRUOut = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkLcpMRUOut.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkLcpMRUOut.setDescription('Remote Maximum Receive Unit')
pppLinkLcpACCMapInc = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkLcpACCMapInc.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkLcpACCMapInc.setDescription('Local to peer ACCM map')
pppLinkLcpACCMapOut = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkLcpACCMapOut.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkLcpACCMapOut.setDescription('Peer to local ACCM map')
pppLinkProtocolCompressionInc = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkProtocolCompressionInc.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkProtocolCompressionInc.setDescription('Local to remote protocol field compression')
pppLinkProtocolCompressionOut = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkProtocolCompressionOut.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkProtocolCompressionOut.setDescription('Remote to local protocol field compression')
pppLinkACCompressionInc = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkACCompressionInc.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkACCompressionInc.setDescription('Local to remote address and control field compression')
pppLinkACCompressionOut = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkACCompressionOut.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkACCompressionOut.setDescription('Remote to local address and control field compression')
pppLinkMagicNumberInc = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkMagicNumberInc.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkMagicNumberInc.setDescription('Local magic number')
pppLinkMagicNumberOut = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkMagicNumberOut.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkMagicNumberOut.setDescription('Remote magic number')
pppLinkBcpTable = MibTable((1, 3, 6, 1, 4, 1, 208, 43, 1, 3), )
if mibBuilder.loadTexts: pppLinkBcpTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkBcpTable.setDescription('BCP (Bridging Control Protocol) information table. Values are first valid when protocol has state OPENED. Not used for multilink slave links (pppLinkProtoStatePppLinkType = multilinkslave).')
pppLinkBcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 43, 1, 3, 1), ).setIndexNames((0, "PPP-MIB", "pppLinkBcpIfIndex"))
if mibBuilder.loadTexts: pppLinkBcpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkBcpEntry.setDescription('')
pppLinkBcpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkBcpIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkBcpIfIndex.setDescription('Interface index')
pppLinkBcpMACTypeInc = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notnegotiated", 1), ("ethernet", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkBcpMACTypeInc.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkBcpMACTypeInc.setDescription('Frame type (incoming)')
pppLinkBcpMACTypeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notnegotiated", 1), ("ethernet", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkBcpMACTypeOut.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkBcpMACTypeOut.setDescription('Frame type (outgoing)')
pppLinkBcpBridgingProtInc = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notnegotiated", 1), ("spanningtree", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkBcpBridgingProtInc.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkBcpBridgingProtInc.setDescription('Bridging protocol used (incoming).')
pppLinkBcpBridgingProtOut = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notnegotiated", 1), ("spanningtree", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkBcpBridgingProtOut.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkBcpBridgingProtOut.setDescription('Bridging protocol used (outgoing).')
pppLinkCcpTable = MibTable((1, 3, 6, 1, 4, 1, 208, 43, 1, 4), )
if mibBuilder.loadTexts: pppLinkCcpTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCcpTable.setDescription('CCP (Compression Control Protocol) information table. Not used for multilink slave links (pppLinkProtoStatePppLinkType = multilinkslave).')
pppLinkCcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 43, 1, 4, 1), ).setIndexNames((0, "PPP-MIB", "pppLinkCcpIfIndex"))
if mibBuilder.loadTexts: pppLinkCcpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCcpEntry.setDescription('')
pppLinkCcpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCcpIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCcpIfIndex.setDescription('Interface index.')
pppLinkCcpHistorySizeIncoming = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCcpHistorySizeIncoming.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCcpHistorySizeIncoming.setDescription('Number of compression histories (incoming).')
pppLinkCcpHistorySizeOutgoing = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCcpHistorySizeOutgoing.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCcpHistorySizeOutgoing.setDescription('Number of compression histories (outgoing).')
pppLinkCcpCheckTypeIncoming = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("sequenceno", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCcpCheckTypeIncoming.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCcpCheckTypeIncoming.setDescription('How compression history synchronization is handled (incoming).')
pppLinkCcpCheckTypeOutgoing = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("sequenceno", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCcpCheckTypeOutgoing.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCcpCheckTypeOutgoing.setDescription('How compression history synchronization is handled.')
pppLinkEcpTable = MibTable((1, 3, 6, 1, 4, 1, 208, 43, 1, 5), )
if mibBuilder.loadTexts: pppLinkEcpTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkEcpTable.setDescription('ECP (Encryption Control Protocol) information table. Not used for multilink slave links (pppLinkProtoStatePppLinkType = multilinkslave).')
pppLinkEcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 43, 1, 5, 1), ).setIndexNames((0, "PPP-MIB", "pppLinkEcpIfIndex"))
if mibBuilder.loadTexts: pppLinkEcpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkEcpEntry.setDescription('')
pppLinkEcpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkEcpIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkEcpIfIndex.setDescription('Interface index')
pppLinkEcpResetRequestsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkEcpResetRequestsRx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkEcpResetRequestsRx.setDescription('Number of encryption history reset requests received.')
pppLinkEcpResetRequestsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkEcpResetRequestsTx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkEcpResetRequestsTx.setDescription('Number of encryption history reset requests sent.')
pppLinkEcpResetAcksRx = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkEcpResetAcksRx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkEcpResetAcksRx.setDescription('Number of encryption history reset acknowledgments received.')
pppLinkEcpResetAcksTx = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkEcpResetAcksTx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkEcpResetAcksTx.setDescription('Number of encryption history reset acknowledgments sent.')
pppLinkEcpRxDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkEcpRxDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkEcpRxDiscarded.setDescription('Number of packets discarded due to lack of synchronization, buffer lacks or packet errors.')
pppLinkEcpTxDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkEcpTxDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkEcpTxDiscarded.setDescription('Number of packets discarded due to buffer lacks or transmit queue overflows')
pppLinkEcpReceiverState = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("error", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkEcpReceiverState.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkEcpReceiverState.setDescription('State of receiver. Error state means waiting for reset acknowledgment')
pppLinkCompTable = MibTable((1, 3, 6, 1, 4, 1, 208, 43, 1, 6), )
if mibBuilder.loadTexts: pppLinkCompTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompTable.setDescription('Compression information table. Not used for multilink slave links (pppLinkProtoStatePppLinkType = multilinkslave).')
pppLinkCompEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1), ).setIndexNames((0, "PPP-MIB", "pppLinkCompIfIndex"))
if mibBuilder.loadTexts: pppLinkCompEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompEntry.setDescription('')
pppLinkCompIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompIfIndex.setDescription('Interface index.')
pppLinkCompDecoderBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompDecoderBytesIn.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompDecoderBytesIn.setDescription('Total number of bytes received by the decoder.')
pppLinkCompDecoderDecompBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompDecoderDecompBytesOut.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompDecoderDecompBytesOut.setDescription('Decompressed bytes from the decoder.')
pppLinkCompDecoderUncompBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompDecoderUncompBytesOut.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompDecoderUncompBytesOut.setDescription('Uncompressed bytes received by the decoder.')
pppLinkCompDecoderCompPacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompDecoderCompPacketsIn.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompDecoderCompPacketsIn.setDescription('Compressed packets received by the decoder.')
pppLinkCompDecoderUncompPacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompDecoderUncompPacketsIn.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompDecoderUncompPacketsIn.setDescription('Uncompressed packets received by the decoder.')
pppLinkCompDecoderDecompQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompDecoderDecompQueueLength.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompDecoderDecompQueueLength.setDescription('Number of packets waiting to be decompressed.')
pppLinkCompDecoderCompressionRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompDecoderCompressionRatio.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompDecoderCompressionRatio.setDescription('Receive compression ratio (multiplied by 100).')
pppLinkCompDecoderResetRequestTx = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompDecoderResetRequestTx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompDecoderResetRequestTx.setDescription('The number of times the decoder requested re-initialization og the compression history.')
pppLinkCompDecoderResetAcksRx = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompDecoderResetAcksRx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompDecoderResetAcksRx.setDescription('The number of acknowledgments to reset requests received by the router.')
pppLinkCompDecoderRxDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompDecoderRxDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompDecoderRxDiscarded.setDescription('Number of packets discarded by the decoder due to buffer lacks or synchronization problems.')
pppLinkCompDecoderState = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("error", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompDecoderState.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompDecoderState.setDescription('State of decoder. Error state means waiting for reset acknowledgment')
pppLinkCompEncoderBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompEncoderBytesIn.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompEncoderBytesIn.setDescription('Total number of bytes received by the encoder.')
pppLinkCompEncoderCompBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompEncoderCompBytesOut.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompEncoderCompBytesOut.setDescription('Number of compressed bytes leaving the encoder.')
pppLinkCompEncoderUncompBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompEncoderUncompBytesOut.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompEncoderUncompBytesOut.setDescription('Number of uncompressed bytes leaving the encoder.')
pppLinkCompEncoderCompPacketsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompEncoderCompPacketsOut.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompEncoderCompPacketsOut.setDescription('Number of compressed packets leaving the encoder.')
pppLinkCompEncoderUncompPacketsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompEncoderUncompPacketsOut.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompEncoderUncompPacketsOut.setDescription('Number of uncompressed packets leaving the encoder.')
pppLinkCompEncoderCompQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompEncoderCompQueueLength.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompEncoderCompQueueLength.setDescription('Number of packets waiting to be compressed.')
pppLinkCompEncoderCompressionRation = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompEncoderCompressionRation.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompEncoderCompressionRation.setDescription('Transmit compression ratio (multiplied by 100).')
pppLinkCompEncoderResetRequestRx = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompEncoderResetRequestRx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompEncoderResetRequestRx.setDescription('The number of times the remote end requested re-initialization og the compression history.')
pppLinkCompEncoderResetAckTx = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompEncoderResetAckTx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompEncoderResetAckTx.setDescription('The number of acknowledgments to reset requests transmitted by the router.')
pppLinkCompEncoderTxDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 6, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkCompEncoderTxDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkCompEncoderTxDiscarded.setDescription('Number of packets discarded by the encoder due to buffer lacks or transmit queue overflows.')
pppLinkChapTable = MibTable((1, 3, 6, 1, 4, 1, 208, 43, 1, 7), )
if mibBuilder.loadTexts: pppLinkChapTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkChapTable.setDescription('Table containing CHAP information. Not used for multilink master links (pppLinkProtoStatePppLinkType = multilinkmaster).')
pppLinkChapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 43, 1, 7, 1), ).setIndexNames((0, "PPP-MIB", "pppLinkChapIfIndex"))
if mibBuilder.loadTexts: pppLinkChapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkChapEntry.setDescription('')
pppLinkChapIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkChapIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkChapIfIndex.setDescription('Interface index.')
pppLinkChapIncoming = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notnegotiated", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkChapIncoming.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkChapIncoming.setDescription('Is this router authenticated by the remote end using CHAP.')
pppLinkChapOutgoing = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notnegotiated", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkChapOutgoing.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkChapOutgoing.setDescription('Is the remote router authenticated using CHAP.')
pppLinkChapChallengeRx = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkChapChallengeRx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkChapChallengeRx.setDescription('Authentication challenges received from remote end')
pppLinkChapChallengeTx = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkChapChallengeTx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkChapChallengeTx.setDescription('Authentication challenges transmitted to remote end')
pppLinkChapResponseRx = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkChapResponseRx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkChapResponseRx.setDescription('Authentication responses received from remote end.')
pppLinkChapResponseTx = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkChapResponseTx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkChapResponseTx.setDescription('Authentication responses transmitted to remote end.')
pppLinkChapSuccesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkChapSuccesRx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkChapSuccesRx.setDescription('Number of authentication succes replies received from remote end.')
pppLinkChapSuccesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkChapSuccesTx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkChapSuccesTx.setDescription('Number of authentication succes replies transmitted to remote end.')
pppLinkChapFailureRx = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkChapFailureRx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkChapFailureRx.setDescription('Number of authentication failure replies received from remote end.')
pppLinkChapFailureTx = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkChapFailureTx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkChapFailureTx.setDescription('Number of authentication failure replies transmitted to remote end.')
pppLinkPapTable = MibTable((1, 3, 6, 1, 4, 1, 208, 43, 1, 8), )
if mibBuilder.loadTexts: pppLinkPapTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkPapTable.setDescription('Table containing CHAP information. Not used for multilink master links (pppLinkProtoStatePppLinkType = multilinkmaster).')
pppLinkPapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 43, 1, 8, 1), ).setIndexNames((0, "PPP-MIB", "pppLinkPapIfIndex"))
if mibBuilder.loadTexts: pppLinkPapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkPapEntry.setDescription('')
pppLinkPapIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkPapIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkPapIfIndex.setDescription('Interface index.')
pppLinkPapIncoming = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notnegotiated", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkPapIncoming.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkPapIncoming.setDescription('Is this router authenticated by the remote end using PAP.')
pppLinkPapOutgoing = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notnegotiated", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkPapOutgoing.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkPapOutgoing.setDescription('Is the remote router authenticated using PAP.')
pppLinkPapAuthReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkPapAuthReqRx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkPapAuthReqRx.setDescription('Number of authentication requests received from remote end.')
pppLinkPapAuthReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkPapAuthReqTx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkPapAuthReqTx.setDescription('Number of authentication requests transmitted to remote end.')
pppLinkPapAuthAckRx = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkPapAuthAckRx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkPapAuthAckRx.setDescription('Number of authentication succes replies received from remote end.')
pppLinkPapAuthAckTx = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkPapAuthAckTx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkPapAuthAckTx.setDescription('Number of authentication succes replies transmitted to remote end.')
pppLinkPapAuthNackRx = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkPapAuthNackRx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkPapAuthNackRx.setDescription('Number of authentication succes replies transmitted to remote end.')
pppLinkPapAuthNackTx = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkPapAuthNackTx.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkPapAuthNackTx.setDescription('Number of authentication failure replies received from remote end.')
pppLinkMlMasterTable = MibTable((1, 3, 6, 1, 4, 1, 208, 43, 1, 9), )
if mibBuilder.loadTexts: pppLinkMlMasterTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkMlMasterTable.setDescription('Table containing multilink master information. Only used when pppLinkProtoStatePppLinkType = multilinkmaster.')
pppLinkMlMasterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 43, 1, 9, 1), ).setIndexNames((0, "PPP-MIB", "pppLinkMlMasterIfIndex"))
if mibBuilder.loadTexts: pppLinkMlMasterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkMlMasterEntry.setDescription('')
pppLinkMlMasterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkMlMasterIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkMlMasterIfIndex.setDescription('Interface index.')
pppLinkMlMasterSlaveCount = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 9, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkMlMasterSlaveCount.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkMlMasterSlaveCount.setDescription('Number of slave links in multilink bundle.')
pppLinkMlMasterTxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkMlMasterTxUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkMlMasterTxUtilization.setDescription('Transmit utilization of current bundle measured in percent.')
pppLinkMlMasterRxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkMlMasterRxUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkMlMasterRxUtilization.setDescription('Receive utilization of current bundle measured in percent.')
pppLinkMlMasterSlavesForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 9, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkMlMasterSlavesForwarding.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkMlMasterSlavesForwarding.setDescription('Number of forwarding slave links in bundle.')
pppLinkMlSlaveTable = MibTable((1, 3, 6, 1, 4, 1, 208, 43, 1, 10), )
if mibBuilder.loadTexts: pppLinkMlSlaveTable.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkMlSlaveTable.setDescription('Table containing multilink slave information. Only used when pppLinkProtoStatePppLinkType = multilinkslave.')
pppLinkMlSlaveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 208, 43, 1, 10, 1), ).setIndexNames((0, "PPP-MIB", "pppLinkMlSlaveIfIndex"))
if mibBuilder.loadTexts: pppLinkMlSlaveEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkMlSlaveEntry.setDescription('')
pppLinkMlSlaveIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkMlSlaveIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkMlSlaveIfIndex.setDescription('Interface index.')
pppLinkMlSlaveBodEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkMlSlaveBodEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkMlSlaveBodEnabled.setDescription('Bandwidth on demand enabled for this slave link.')
pppLinkMlSlaveMasterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 208, 43, 1, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppLinkMlSlaveMasterIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pppLinkMlSlaveMasterIfIndex.setDescription('Interface index of the corresponding master link.')
mibBuilder.exportSymbols("PPP-MIB", pppLinkChapFailureRx=pppLinkChapFailureRx, pppLinkCompEntry=pppLinkCompEntry, pppLinkCompEncoderCompBytesOut=pppLinkCompEncoderCompBytesOut, pppLinkCompEncoderUncompBytesOut=pppLinkCompEncoderUncompBytesOut, pppLinkCompEncoderUncompPacketsOut=pppLinkCompEncoderUncompPacketsOut, pppLinkProtoStateEcpState=pppLinkProtoStateEcpState, pppLinkCompDecoderDecompBytesOut=pppLinkCompDecoderDecompBytesOut, pppLinkCcpCheckTypeIncoming=pppLinkCcpCheckTypeIncoming, pppLinkEcpResetAcksTx=pppLinkEcpResetAcksTx, pppLinkEcpIfIndex=pppLinkEcpIfIndex, pppLinkPapAuthNackRx=pppLinkPapAuthNackRx, pppLinkProtocolCompressionOut=pppLinkProtocolCompressionOut, pppLinkChapOutgoing=pppLinkChapOutgoing, pppLinkLcpACCMapInc=pppLinkLcpACCMapInc, pppLinkLcpMRUOut=pppLinkLcpMRUOut, pppLinkProtoStatePppLinkType=pppLinkProtoStatePppLinkType, pppLinkProtoStateIpxcpState=pppLinkProtoStateIpxcpState, pppLinkPapAuthNackTx=pppLinkPapAuthNackTx, pppLinkMagicNumberOut=pppLinkMagicNumberOut, pppLinkMlMasterTxUtilization=pppLinkMlMasterTxUtilization, pppLinkCompEncoderResetRequestRx=pppLinkCompEncoderResetRequestRx, pppLinkCompEncoderBytesIn=pppLinkCompEncoderBytesIn, pppLinkChapFailureTx=pppLinkChapFailureTx, pppLinkChapEntry=pppLinkChapEntry, pppLinkPapAuthAckRx=pppLinkPapAuthAckRx, pppLinkCompDecoderCompPacketsIn=pppLinkCompDecoderCompPacketsIn, pppLinkMlSlaveMasterIfIndex=pppLinkMlSlaveMasterIfIndex, pppLinkPapTable=pppLinkPapTable, pppLinkEcpEntry=pppLinkEcpEntry, pppLinkBcpIfIndex=pppLinkBcpIfIndex, pppLinkProtoStateIfIndex=pppLinkProtoStateIfIndex, pppLinkChapIncoming=pppLinkChapIncoming, pppLinkProtoStateIpcpState=pppLinkProtoStateIpcpState, pppLinkCompDecoderUncompPacketsIn=pppLinkCompDecoderUncompPacketsIn, pppLinkChapChallengeTx=pppLinkChapChallengeTx, pppLinkLcpACCMapOut=pppLinkLcpACCMapOut, pppLinkCompDecoderCompressionRatio=pppLinkCompDecoderCompressionRatio, pppLinkMlSlaveTable=pppLinkMlSlaveTable, pppLinkCompEncoderTxDiscarded=pppLinkCompEncoderTxDiscarded, pppLinkChapResponseTx=pppLinkChapResponseTx, pppLinkMlSlaveEntry=pppLinkMlSlaveEntry, PppProtocolState=PppProtocolState, pppLinkMlMasterSlaveCount=pppLinkMlMasterSlaveCount, ppp=ppp, pppLinkBcpBridgingProtInc=pppLinkBcpBridgingProtInc, pppLinkCompDecoderRxDiscarded=pppLinkCompDecoderRxDiscarded, pppLinkLcpIfIndex=pppLinkLcpIfIndex, pppLinkBcpMACTypeInc=pppLinkBcpMACTypeInc, pppLinkPapAuthAckTx=pppLinkPapAuthAckTx, pppLinkEcpRxDiscarded=pppLinkEcpRxDiscarded, pppLinkPapAuthReqRx=pppLinkPapAuthReqRx, pppLinkMlMasterTable=pppLinkMlMasterTable, pppLinkCompDecoderBytesIn=pppLinkCompDecoderBytesIn, pppLinkChapTable=pppLinkChapTable, pppLinkCcpHistorySizeOutgoing=pppLinkCcpHistorySizeOutgoing, pppLinkProtoStateEntry=pppLinkProtoStateEntry, pppLinkEcpReceiverState=pppLinkEcpReceiverState, pppLinkCompDecoderState=pppLinkCompDecoderState, pppLinkMagicNumberInc=pppLinkMagicNumberInc, pppLinkACCompressionInc=pppLinkACCompressionInc, pppLinkMlSlaveIfIndex=pppLinkMlSlaveIfIndex, pppLink=pppLink, pppLinkBcpTable=pppLinkBcpTable, pppLinkCompDecoderResetRequestTx=pppLinkCompDecoderResetRequestTx, pppLinkCompEncoderCompressionRation=pppLinkCompEncoderCompressionRation, pppLinkCcpCheckTypeOutgoing=pppLinkCcpCheckTypeOutgoing, pppLinkMlMasterEntry=pppLinkMlMasterEntry, pppLinkEcpResetRequestsRx=pppLinkEcpResetRequestsRx, pppLinkMlSlaveBodEnabled=pppLinkMlSlaveBodEnabled, pppLinkProtoStateBcpState=pppLinkProtoStateBcpState, pppLinkLcpEntry=pppLinkLcpEntry, pppLinkChapSuccesRx=pppLinkChapSuccesRx, pppLinkCcpEntry=pppLinkCcpEntry, pppLinkCcpHistorySizeIncoming=pppLinkCcpHistorySizeIncoming, pppLinkMlMasterSlavesForwarding=pppLinkMlMasterSlavesForwarding, pppLinkACCompressionOut=pppLinkACCompressionOut, pppLinkProtoStateCcpState=pppLinkProtoStateCcpState, pppLinkMlMasterRxUtilization=pppLinkMlMasterRxUtilization, pppLinkCompEncoderCompPacketsOut=pppLinkCompEncoderCompPacketsOut, pppLinkChapResponseRx=pppLinkChapResponseRx, pppLinkCompEncoderResetAckTx=pppLinkCompEncoderResetAckTx, pppLinkPapIfIndex=pppLinkPapIfIndex, pppLinkProtoStateTable=pppLinkProtoStateTable, pppLinkProtoStateLcpState=pppLinkProtoStateLcpState, pppLinkCcpTable=pppLinkCcpTable, pppLinkLcpMRUInc=pppLinkLcpMRUInc, pppLinkCompEncoderCompQueueLength=pppLinkCompEncoderCompQueueLength, pppLinkChapIfIndex=pppLinkChapIfIndex, pppLinkBcpBridgingProtOut=pppLinkBcpBridgingProtOut, pppLinkEcpResetRequestsTx=pppLinkEcpResetRequestsTx, pppLinkCompDecoderUncompBytesOut=pppLinkCompDecoderUncompBytesOut, pppLinkPapOutgoing=pppLinkPapOutgoing, pppLinkPapAuthReqTx=pppLinkPapAuthReqTx, pppLinkBcpMACTypeOut=pppLinkBcpMACTypeOut, pppLinkProtocolCompressionInc=pppLinkProtocolCompressionInc, pppLinkMlMasterIfIndex=pppLinkMlMasterIfIndex, pppLinkEcpResetAcksRx=pppLinkEcpResetAcksRx, pppLinkEcpTxDiscarded=pppLinkEcpTxDiscarded, pppLinkLcpTable=pppLinkLcpTable, pppLinkPapEntry=pppLinkPapEntry, pppLinkEcpTable=pppLinkEcpTable, pppLinkCompIfIndex=pppLinkCompIfIndex, pppLinkCompDecoderResetAcksRx=pppLinkCompDecoderResetAcksRx, pppLinkCompDecoderDecompQueueLength=pppLinkCompDecoderDecompQueueLength, pppLinkChapChallengeRx=pppLinkChapChallengeRx, pppLinkChapSuccesTx=pppLinkChapSuccesTx, pppLinkCcpIfIndex=pppLinkCcpIfIndex, pppLinkBcpEntry=pppLinkBcpEntry, pppLinkCompTable=pppLinkCompTable, pppLinkPapIncoming=pppLinkPapIncoming)
