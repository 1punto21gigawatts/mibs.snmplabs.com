#
# PySNMP MIB module BAY-STACK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAY-STACK-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:35:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Integer32, NotificationType, Bits, iso, ModuleIdentity, Counter32, IpAddress, MibIdentifier, Counter64, Unsigned32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Integer32", "NotificationType", "Bits", "iso", "ModuleIdentity", "Counter32", "IpAddress", "MibIdentifier", "Counter64", "Unsigned32", "TimeTicks")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
bayStackMibs, = mibBuilder.importSymbols("SYNOPTICS-ROOT-MIB", "bayStackMibs")
bayStackMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 45, 5, 13))
bayStackMib.setRevisions(('2013-10-11 00:00', '2012-10-02 00:00', '2009-09-28 00:00', '2007-09-04 00:00', '2005-08-22 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: bayStackMib.setRevisionsDescriptions(('Version 5: Changed the MAX-ACCESS of bayStackUnitConfigIndex to read-only.', 'Version 4: Added spb value for bayStackUnitConfigRearPortAdminMode and bayStackUnitConfigRearPortOperMode.', 'Version 3: Added bayStackConfigStackRebootOnFailure and bayStackConfigStackRetryCount.', 'Version 2: Added per-unit configuration table.', 'Version 1: Initial version.',))
if mibBuilder.loadTexts: bayStackMib.setLastUpdated('201310110000Z')
if mibBuilder.loadTexts: bayStackMib.setOrganization('Nortel Networks')
if mibBuilder.loadTexts: bayStackMib.setContactInfo('Nortel Networks')
if mibBuilder.loadTexts: bayStackMib.setDescription('General BayStack MIB.')
bayStackObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 13, 1))
bayStackConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 13, 1, 1))
bayStackConfigExpectedStackSize = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bayStackConfigExpectedStackSize.setStatus('current')
if mibBuilder.loadTexts: bayStackConfigExpectedStackSize.setDescription('The expected stack size. A unit that expects to be standalone would use a value of 1.')
bayStackConfigStackErrorNotificationInterval = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(60)).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: bayStackConfigStackErrorNotificationInterval.setStatus('current')
if mibBuilder.loadTexts: bayStackConfigStackErrorNotificationInterval.setDescription('This objects controls the frequency with which bsnStackConfigurationError notifications are generated.')
bayStackConfigStackErrorNotificationEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 13, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bayStackConfigStackErrorNotificationEnabled.setStatus('current')
if mibBuilder.loadTexts: bayStackConfigStackErrorNotificationEnabled.setDescription('This objects controls whether bsnStackConfigurationError notifications are generated.')
bayStackConfigStackRebootUnitOnFailure = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 13, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bayStackConfigStackRebootUnitOnFailure.setStatus('current')
if mibBuilder.loadTexts: bayStackConfigStackRebootUnitOnFailure.setDescription('This object controls whether to reboot any unit in a stack whose stack ports do not go logically up.')
bayStackConfigStackRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 13, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bayStackConfigStackRetryCount.setStatus('current')
if mibBuilder.loadTexts: bayStackConfigStackRetryCount.setDescription('Stack retry count.')
bayStackUnitConfigTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 13, 1, 2), )
if mibBuilder.loadTexts: bayStackUnitConfigTable.setStatus('current')
if mibBuilder.loadTexts: bayStackUnitConfigTable.setDescription('This table contains per-unit configuration data for a stack.')
bayStackUnitConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 13, 1, 2, 1), ).setIndexNames((0, "BAY-STACK-MIB", "bayStackUnitConfigIndex"))
if mibBuilder.loadTexts: bayStackUnitConfigEntry.setStatus('current')
if mibBuilder.loadTexts: bayStackUnitConfigEntry.setDescription('An entry of configuration data for a stacked unit.')
bayStackUnitConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 13, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bayStackUnitConfigIndex.setStatus('current')
if mibBuilder.loadTexts: bayStackUnitConfigIndex.setDescription('The unit number of an entry.')
bayStackUnitConfigRearPortAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 13, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("standalone", 1), ("stacking", 2), ("spb", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bayStackUnitConfigRearPortAdminMode.setStatus('current')
if mibBuilder.loadTexts: bayStackUnitConfigRearPortAdminMode.setDescription('The current administrative rear-port mode for this unit. This value will be applied at the next stack re-boot if it is different from the current operational value. Supported values are: standalone (rear-port mode is enabled normal), stacking (rear-port mode is disabled) and spb(rear-port mode is enabled with loopback port reserved).')
bayStackUnitConfigRearPortOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 13, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("standalone", 1), ("stacking", 2), ("spb", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bayStackUnitConfigRearPortOperMode.setStatus('current')
if mibBuilder.loadTexts: bayStackUnitConfigRearPortOperMode.setDescription('The current operational rear-port mode for this unit. Supported values are: standalone (operational rear-port mode is enabled normal), stacking (operational rear-port mode is disabled) and spb(operational rear-port mode is enabled with loopback port reserved).')
mibBuilder.exportSymbols("BAY-STACK-MIB", bayStackObjects=bayStackObjects, bayStackUnitConfigRearPortAdminMode=bayStackUnitConfigRearPortAdminMode, bayStackConfigExpectedStackSize=bayStackConfigExpectedStackSize, bayStackUnitConfigTable=bayStackUnitConfigTable, bayStackMib=bayStackMib, bayStackConfigStackRetryCount=bayStackConfigStackRetryCount, bayStackUnitConfigEntry=bayStackUnitConfigEntry, bayStackConfig=bayStackConfig, bayStackUnitConfigRearPortOperMode=bayStackUnitConfigRearPortOperMode, PYSNMP_MODULE_ID=bayStackMib, bayStackConfigStackErrorNotificationInterval=bayStackConfigStackErrorNotificationInterval, bayStackUnitConfigIndex=bayStackUnitConfigIndex, bayStackConfigStackRebootUnitOnFailure=bayStackConfigStackRebootUnitOnFailure, bayStackConfigStackErrorNotificationEnabled=bayStackConfigStackErrorNotificationEnabled)
