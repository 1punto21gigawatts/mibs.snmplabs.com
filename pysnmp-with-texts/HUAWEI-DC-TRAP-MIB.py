#
# PySNMP MIB module HUAWEI-DC-TRAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-DC-TRAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:44:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
entPhysicalName, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalName")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
ifDescr, ifIndex = mibBuilder.importSymbols("IF-MIB", "ifDescr", "ifIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, IpAddress, Unsigned32, Integer32, Counter64, TimeTicks, ModuleIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, Counter32, Bits, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "IpAddress", "Unsigned32", "Integer32", "Counter64", "TimeTicks", "ModuleIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "Counter32", "Bits", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
hwDCTrapMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37))
if mibBuilder.loadTexts: hwDCTrapMIB.setLastUpdated('200604240000Z')
if mibBuilder.loadTexts: hwDCTrapMIB.setOrganization('Huawei Technologies co.,Ltd.')
if mibBuilder.loadTexts: hwDCTrapMIB.setContactInfo(' R&D BeiJing, Huawei Technologies co.,Ltd. Huawei Bld.,NO.3 Xinxi Rd., Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China Zip:100085 Http://www.huawei.com E-mail:support@huawei.com ')
if mibBuilder.loadTexts: hwDCTrapMIB.setDescription(' The HUAWEI-DC-TRAP-MIB provides information about DataComm TRAPS. ')
hwDCTrapControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 1))
hwDCCtrlTrap = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDCCtrlTrap.setStatus('current')
if mibBuilder.loadTexts: hwDCCtrlTrap.setDescription('A string serving as a bit map for the trap events defined by the hwDatacomm traps. This object is used to enable and disable specific hwDatacomm traps where a 1 in the bit field represents enabled. The right-most bit (least significant) represents trap 0.')
hwTunnelGroupID = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2047))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwTunnelGroupID.setStatus('current')
if mibBuilder.loadTexts: hwTunnelGroupID.setDescription('Tunnel id')
hwDCTrapReason = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 1, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwDCTrapReason.setStatus('current')
if mibBuilder.loadTexts: hwDCTrapReason.setDescription(' For the BTB system to report Trap Reason.')
hwDCTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2))
hwMPUSynClkFaulty = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 1)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwMPUSynClkFaulty.setStatus('current')
if mibBuilder.loadTexts: hwMPUSynClkFaulty.setDescription('MPU sync clock signal faulty!')
hwMPUSynClkFaultyResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 2)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwMPUSynClkFaultyResume.setStatus('current')
if mibBuilder.loadTexts: hwMPUSynClkFaultyResume.setDescription('MPU sync clock signal faulty resume!')
hwSlaveMPUNoResp = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 3)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwSlaveMPUNoResp.setStatus('current')
if mibBuilder.loadTexts: hwSlaveMPUNoResp.setDescription('Slave MPU has no response!')
hwSlaveMPUNoRespResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 4)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwSlaveMPUNoRespResume.setStatus('current')
if mibBuilder.loadTexts: hwSlaveMPUNoRespResume.setDescription('Slave MPU has no response resume!')
hwBrdChannelFaulty = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 5)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwBrdChannelFaulty.setStatus('current')
if mibBuilder.loadTexts: hwBrdChannelFaulty.setDescription('Board channel faulty!')
hwBrdChannelFaultyResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 6)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwBrdChannelFaultyResume.setStatus('current')
if mibBuilder.loadTexts: hwBrdChannelFaultyResume.setDescription('Board channel faulty resume!')
hwBrdNofullin = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 7)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwBrdNofullin.setStatus('current')
if mibBuilder.loadTexts: hwBrdNofullin.setDescription('Board not full in!')
hwBrdNofullinResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 8)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwBrdNofullinResume.setStatus('current')
if mibBuilder.loadTexts: hwBrdNofullinResume.setDescription('Board not full in resume!')
hwBrdTypeNoMatchReset = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 9)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwBrdTypeNoMatchReset.setStatus('current')
if mibBuilder.loadTexts: hwBrdTypeNoMatchReset.setDescription('Board is reset because of the chip type is not matching!')
hwBrdAutoSwtFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 10)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwBrdAutoSwtFail.setStatus('current')
if mibBuilder.loadTexts: hwBrdAutoSwtFail.setDescription('Board automatically switch syn-clock but it locked failed!')
hwBrdAutoSwt = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 11)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwBrdAutoSwt.setStatus('current')
if mibBuilder.loadTexts: hwBrdAutoSwt.setDescription('Board automatically switch syn-clock!')
hwBrdClkLockERR = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 12)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwBrdClkLockERR.setStatus('current')
if mibBuilder.loadTexts: hwBrdClkLockERR.setDescription('Board fabric clock is unlocked!')
hwBrdClkLockERRResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 13)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwBrdClkLockERRResume.setStatus('current')
if mibBuilder.loadTexts: hwBrdClkLockERRResume.setDescription('Board fabric clock unlock to current clock resume!')
hwBrdRemoved = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 14)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwBrdRemoved.setStatus('current')
if mibBuilder.loadTexts: hwBrdRemoved.setDescription('Board pulled out!')
hwBrdInserted = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 15)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwBrdInserted.setStatus('current')
if mibBuilder.loadTexts: hwBrdInserted.setDescription('Board plugged in!')
hwBrdUp = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 16)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwBrdUp.setStatus('current')
if mibBuilder.loadTexts: hwBrdUp.setDescription('Board register!')
hwClkSrcMiss = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 17)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwClkSrcMiss.setStatus('current')
if mibBuilder.loadTexts: hwClkSrcMiss.setDescription('CLK source Loss Of Signal!')
hwClkAllSrcLost = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 18)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwClkAllSrcLost.setStatus('current')
if mibBuilder.loadTexts: hwClkAllSrcLost.setDescription('CLK all source lost!')
hwClkAllSrcLostResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 19)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwClkAllSrcLostResume.setStatus('current')
if mibBuilder.loadTexts: hwClkAllSrcLostResume.setDescription('CLK all source lost resume!')
hwClkFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 20)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwClkFail.setStatus('current')
if mibBuilder.loadTexts: hwClkFail.setDescription('CLK hardware failed!')
hwClkFailResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 21)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwClkFailResume.setStatus('current')
if mibBuilder.loadTexts: hwClkFailResume.setDescription('CLK hardware failed resume!')
hwClkNoHeartbeat = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 22)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwClkNoHeartbeat.setStatus('current')
if mibBuilder.loadTexts: hwClkNoHeartbeat.setDescription('CLK No Heartbeat!')
hwClkNoHeartbeatResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 23)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwClkNoHeartbeatResume.setStatus('current')
if mibBuilder.loadTexts: hwClkNoHeartbeatResume.setDescription('CLK No Heartbeat resume!')
hwLPULostSynAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 24)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwLPULostSynAlarm.setStatus('current')
if mibBuilder.loadTexts: hwLPULostSynAlarm.setDescription('LPU SERDES interface is lost synchronization!')
hwLPUOpenChannelError = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 25)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwLPUOpenChannelError.setStatus('current')
if mibBuilder.loadTexts: hwLPUOpenChannelError.setDescription('LPU SERDES interface open error!')
hwLPUSlfTstErr = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 26)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwLPUSlfTstErr.setStatus('current')
if mibBuilder.loadTexts: hwLPUSlfTstErr.setDescription('LPU self test error!')
hwLPU3ClkSwitch = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 27)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwLPU3ClkSwitch.setStatus('current')
if mibBuilder.loadTexts: hwLPU3ClkSwitch.setDescription('LPU 3 class clock is switch!')
hwSFULostHrtReset = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 28)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwSFULostHrtReset.setStatus('current')
if mibBuilder.loadTexts: hwSFULostHrtReset.setDescription('SFU is reset because of heart beat loss!')
hwSFULinkLostReset = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 29)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwSFULinkLostReset.setStatus('current')
if mibBuilder.loadTexts: hwSFULinkLostReset.setDescription('SFU is reset because of SERDES interface input channel link lost numbers over threshold!')
hwSFUChannelLinkLost = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 30)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwSFUChannelLinkLost.setStatus('current')
if mibBuilder.loadTexts: hwSFUChannelLinkLost.setDescription('SFU check SERDES interface input channel link lost!')
hwSFUInChannelOpenFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 31)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwSFUInChannelOpenFail.setStatus('current')
if mibBuilder.loadTexts: hwSFUInChannelOpenFail.setDescription('SFU SERDES interface input channel is opened failed!')
hwVoltSensorFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 32)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwVoltSensorFail.setStatus('current')
if mibBuilder.loadTexts: hwVoltSensorFail.setDescription('Board voltage monitor failure!')
hwVoltSensorFailResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 33)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwVoltSensorFailResume.setStatus('current')
if mibBuilder.loadTexts: hwVoltSensorFailResume.setDescription('Board voltage monitor failure resume!')
hwVoltBtmC = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 34)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwVoltBtmC.setStatus('current')
if mibBuilder.loadTexts: hwVoltBtmC.setDescription('Board voltage below fatal threshold!')
hwVoltBtmCResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 35)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwVoltBtmCResume.setStatus('current')
if mibBuilder.loadTexts: hwVoltBtmCResume.setDescription('Board voltage below fatal threshold resume!')
hwVoltSprC = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 36)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwVoltSprC.setStatus('current')
if mibBuilder.loadTexts: hwVoltSprC.setDescription('Board voltage over fatal threshold!')
hwVoltSprCResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 37)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwVoltSprCResume.setStatus('current')
if mibBuilder.loadTexts: hwVoltSprCResume.setDescription('Board voltage over fatal threshold resume!')
hwVoltBtmM = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 38)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwVoltBtmM.setStatus('current')
if mibBuilder.loadTexts: hwVoltBtmM.setDescription('Board voltage below major threshold!')
hwVoltBtmMResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 39)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwVoltBtmMResume.setStatus('current')
if mibBuilder.loadTexts: hwVoltBtmMResume.setDescription('Board voltage below major threshold resume!')
hwVoltSprM = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 40)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwVoltSprM.setStatus('current')
if mibBuilder.loadTexts: hwVoltSprM.setDescription('Board voltage over major threshold!')
hwVoltSprMResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 41)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwVoltSprMResume.setStatus('current')
if mibBuilder.loadTexts: hwVoltSprMResume.setDescription('Board voltage over major threshold resume!')
hwTempSensorFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 42)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwTempSensorFail.setStatus('current')
if mibBuilder.loadTexts: hwTempSensorFail.setDescription('Board temprature monitor failure!')
hwTempSensorFailResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 43)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwTempSensorFailResume.setStatus('current')
if mibBuilder.loadTexts: hwTempSensorFailResume.setDescription('Board temperature monitor failure resume!')
hwTempMnr = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 44)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwTempMnr.setStatus('current')
if mibBuilder.loadTexts: hwTempMnr.setDescription('Board temperature over minor threshold!')
hwTempMnrResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 45)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwTempMnrResume.setStatus('current')
if mibBuilder.loadTexts: hwTempMnrResume.setDescription('Board temperature over minor threshold resume!')
hwTempMjr = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 46)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwTempMjr.setStatus('current')
if mibBuilder.loadTexts: hwTempMjr.setDescription('Board temperature over major threshold!')
hwTempMjrResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 47)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwTempMjrResume.setStatus('current')
if mibBuilder.loadTexts: hwTempMjrResume.setDescription('Board temperature over major threshold resume!')
hwTempCtl = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 48)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwTempCtl.setStatus('current')
if mibBuilder.loadTexts: hwTempCtl.setDescription('Board temperature over fatal threshold!')
hwTempCtlResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 49)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwTempCtlResume.setStatus('current')
if mibBuilder.loadTexts: hwTempCtlResume.setDescription('Board temperature over fatal threshold resume!')
hwFanHFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 50)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwFanHFail.setStatus('current')
if mibBuilder.loadTexts: hwFanHFail.setDescription('Fan hardware failure!')
hwFanFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 51)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwFanFail.setStatus('current')
if mibBuilder.loadTexts: hwFanFail.setDescription('Fan failure!')
hwFanFailResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 52)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwFanFailResume.setStatus('current')
if mibBuilder.loadTexts: hwFanFailResume.setDescription('Fan failure resume!')
hwFanAbsent = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 53)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwFanAbsent.setStatus('current')
if mibBuilder.loadTexts: hwFanAbsent.setDescription('Fan absent!')
hwFanAbsentResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 54)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwFanAbsentResume.setStatus('current')
if mibBuilder.loadTexts: hwFanAbsentResume.setDescription('Fan absent resume!')
hwFanCabUN = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 55)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwFanCabUN.setStatus('current')
if mibBuilder.loadTexts: hwFanCabUN.setDescription('Fan cable unplugged!')
hwFanCabUNResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 56)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwFanCabUNResume.setStatus('current')
if mibBuilder.loadTexts: hwFanCabUNResume.setDescription('Fan cable unplugged resume!')
hwPwrFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 57)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwPwrFail.setStatus('current')
if mibBuilder.loadTexts: hwPwrFail.setDescription('Power failure!')
hwPwrFailResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 58)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwPwrFailResume.setStatus('current')
if mibBuilder.loadTexts: hwPwrFailResume.setDescription('Power failure resume!')
hwPwrAbsent = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 59)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwPwrAbsent.setStatus('current')
if mibBuilder.loadTexts: hwPwrAbsent.setDescription('Power absent!')
hwPwrAbsentResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 60)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwPwrAbsentResume.setStatus('current')
if mibBuilder.loadTexts: hwPwrAbsentResume.setDescription('Power absent resume!')
hwPwrCabUN = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 61)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwPwrCabUN.setStatus('current')
if mibBuilder.loadTexts: hwPwrCabUN.setDescription('Power monitor cable unplugged!')
hwPwrCabUNResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 62)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwPwrCabUNResume.setStatus('current')
if mibBuilder.loadTexts: hwPwrCabUNResume.setDescription('Power monitor cable unplugged resume!')
hwLCDHFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 63)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwLCDHFail.setStatus('current')
if mibBuilder.loadTexts: hwLCDHFail.setDescription('LCD hardware failure!')
hwLCDFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 64)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwLCDFail.setStatus('current')
if mibBuilder.loadTexts: hwLCDFail.setDescription('LCD failure!')
hwLCDAbsent = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 65)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwLCDAbsent.setStatus('current')
if mibBuilder.loadTexts: hwLCDAbsent.setDescription('LCD absent!')
hwLCDAbsentResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 66)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwLCDAbsentResume.setStatus('current')
if mibBuilder.loadTexts: hwLCDAbsentResume.setDescription('LCD absent resume!')
hwLCDCabUN = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 67)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwLCDCabUN.setStatus('current')
if mibBuilder.loadTexts: hwLCDCabUN.setDescription('LCD cable unplugged!')
hwLCDCabUNResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 68)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwLCDCabUNResume.setStatus('current')
if mibBuilder.loadTexts: hwLCDCabUNResume.setDescription('LCD cable unplugged resume!')
hwROMFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 69)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwROMFail.setStatus('current')
if mibBuilder.loadTexts: hwROMFail.setDescription('EEPROM failure!')
hwMonitorBUSFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 70)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwMonitorBUSFail.setStatus('current')
if mibBuilder.loadTexts: hwMonitorBUSFail.setDescription('MonitorBUS failure!')
hwMonitorBUSFailResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 71)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwMonitorBUSFailResume.setStatus('current')
if mibBuilder.loadTexts: hwMonitorBUSFailResume.setDescription('MonitorBUS failure resume!')
hwBoardOfflineChange = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 72)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwBoardOfflineChange.setStatus('current')
if mibBuilder.loadTexts: hwBoardOfflineChange.setDescription('Board power status change!')
hwWriteFlashError = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 100)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwWriteFlashError.setStatus('current')
if mibBuilder.loadTexts: hwWriteFlashError.setDescription('write flash error!')
hwBoardReset = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 101)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwBoardReset.setStatus('current')
if mibBuilder.loadTexts: hwBoardReset.setDescription('board reset!')
hwBoardResetSuccess = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 102)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwBoardResetSuccess.setStatus('current')
if mibBuilder.loadTexts: hwBoardResetSuccess.setDescription('board reset success!')
hwSlaveMPUReset = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 103)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwSlaveMPUReset.setStatus('current')
if mibBuilder.loadTexts: hwSlaveMPUReset.setDescription('slave MPU reset !')
hwMasterSlaveSwap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 104)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwMasterSlaveSwap.setStatus('current')
if mibBuilder.loadTexts: hwMasterSlaveSwap.setDescription('master slave swap!')
hwRTCFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 105)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwRTCFail.setStatus('current')
if mibBuilder.loadTexts: hwRTCFail.setDescription('RTC failure!')
hwExchangeChipFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 106)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwExchangeChipFail.setStatus('current')
if mibBuilder.loadTexts: hwExchangeChipFail.setDescription('5695 exchange chip fail!')
hwTempResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 107)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwTempResume.setStatus('current')
if mibBuilder.loadTexts: hwTempResume.setDescription('Board temprature over threshold resume!')
hwOpticalModuleInsert = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 108)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwOpticalModuleInsert.setStatus('current')
if mibBuilder.loadTexts: hwOpticalModuleInsert.setDescription('optical module plug in !')
hwOpticalModuleRemove = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 109)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwOpticalModuleRemove.setStatus('current')
if mibBuilder.loadTexts: hwOpticalModuleRemove.setDescription('optical module plug out !')
hwFPGAAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 110)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwFPGAAbnormal.setStatus('current')
if mibBuilder.loadTexts: hwFPGAAbnormal.setDescription('FPGA abnormal !')
hwMinMTunnelDownAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 111)).setObjects(("HUAWEI-DC-TRAP-MIB", "hwTunnelGroupID"))
if mibBuilder.loadTexts: hwMinMTunnelDownAlarm.setStatus('current')
if mibBuilder.loadTexts: hwMinMTunnelDownAlarm.setDescription(" For Mac in Mac tunnel. Mac tunnel have two status: up or down, when physical interface is down or some cc package can't arrive to the other side of mac in mac tunnel, the status of tunnel will be down 1 Notice/Trap name: Tunnel down 2 Notice/Trap generation cause: when All mac tunnel have been down in the mac tunnel group 3 Repair suggestions: make one of the mac tunnel up in the mac tunnel group ")
hwMinMTunnelUpAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 112)).setObjects(("HUAWEI-DC-TRAP-MIB", "hwTunnelGroupID"))
if mibBuilder.loadTexts: hwMinMTunnelUpAlarm.setStatus('current')
if mibBuilder.loadTexts: hwMinMTunnelUpAlarm.setDescription(' For Mac in Mac tunnel. Mac tunnel have two status: up or down, if cc package can arrive to the other side of mac in mac tunnel, the status of tunnel will be up 1 Notice/Trap name: Tunnel up 2 Notice/Trap generation cause: one of the tunnel is up in the mac tunnel group 3 Repair suggestion: ')
hwInterfacePhysicalDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 113)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hwInterfacePhysicalDown.setStatus('current')
if mibBuilder.loadTexts: hwInterfacePhysicalDown.setDescription('This trap is to indicate port link down on physical layer.')
hwInterfacePhysicalUp = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 114)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hwInterfacePhysicalUp.setStatus('current')
if mibBuilder.loadTexts: hwInterfacePhysicalUp.setDescription('This trap is to indicate port link up on physical layer.')
hwBTBStartupFileNameDifferent = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 119)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-DC-TRAP-MIB", "hwDCTrapReason"))
if mibBuilder.loadTexts: hwBTBStartupFileNameDifferent.setStatus('current')
if mibBuilder.loadTexts: hwBTBStartupFileNameDifferent.setDescription('In the BTB system ,the start-up file name of master and slave chassis is different . Used for BTB or its extend system.')
hwBTBChassisRunningModeConflict = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 120)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-DC-TRAP-MIB", "hwDCTrapReason"))
if mibBuilder.loadTexts: hwBTBChassisRunningModeConflict.setStatus('current')
if mibBuilder.loadTexts: hwBTBChassisRunningModeConflict.setDescription('The Master and Slave chassises running modes conflict.Used for BTB or its extend system.')
hwBTBCtrlChannelFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 121)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-DC-TRAP-MIB", "hwDCTrapReason"))
if mibBuilder.loadTexts: hwBTBCtrlChannelFail.setStatus('current')
if mibBuilder.loadTexts: hwBTBCtrlChannelFail.setDescription('The FE control channel failture, as physical link from up to down or channel blocked. Used for BTB or its extend system.')
hwBTBCtrlChannelFailResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 122)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-DC-TRAP-MIB", "hwDCTrapReason"))
if mibBuilder.loadTexts: hwBTBCtrlChannelFailResume.setStatus('current')
if mibBuilder.loadTexts: hwBTBCtrlChannelFailResume.setDescription('The FE control channel failture resume.Used for BTB or its extend system.')
hwBTBDataChannelFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 123)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-DC-TRAP-MIB", "hwDCTrapReason"))
if mibBuilder.loadTexts: hwBTBDataChannelFail.setStatus('current')
if mibBuilder.loadTexts: hwBTBDataChannelFail.setDescription('The data channel failture, all optical links down between chassises.Used for BTB or its extend system.')
hwBTBDataChannelFailResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 124)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-DC-TRAP-MIB", "hwDCTrapReason"))
if mibBuilder.loadTexts: hwBTBDataChannelFailResume.setStatus('current')
if mibBuilder.loadTexts: hwBTBDataChannelFailResume.setDescription('The data channel failture resume.Used for BTB or its extend system.')
hwBTBClkChannelFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 125)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-DC-TRAP-MIB", "hwDCTrapReason"))
if mibBuilder.loadTexts: hwBTBClkChannelFail.setStatus('current')
if mibBuilder.loadTexts: hwBTBClkChannelFail.setDescription('The clock channel failture, clock link down between chassises.Used for BTB or its extend system.')
hwBTBClkChannelFailResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 126)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-DC-TRAP-MIB", "hwDCTrapReason"))
if mibBuilder.loadTexts: hwBTBClkChannelFailResume.setStatus('current')
if mibBuilder.loadTexts: hwBTBClkChannelFailResume.setDescription('The clock Channel failture resume.Used for BTB or its extend system.')
hwBTBSFUOpticInterfaceError = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 127)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-DC-TRAP-MIB", "hwDCTrapReason"))
if mibBuilder.loadTexts: hwBTBSFUOpticInterfaceError.setStatus('current')
if mibBuilder.loadTexts: hwBTBSFUOpticInterfaceError.setDescription('The optical fiber connection error, the connection of SFU fiber between chassises is not correct. Used for BTB or its extend system.')
hwBTBSFUOpticInterfaceErrorResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 128)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-DC-TRAP-MIB", "hwDCTrapReason"))
if mibBuilder.loadTexts: hwBTBSFUOpticInterfaceErrorResume.setStatus('current')
if mibBuilder.loadTexts: hwBTBSFUOpticInterfaceErrorResume.setDescription('The optical fiber connection error resume.Used for BTB or its extend system.')
hwBTBVSRInterfaceInvalid = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 129)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-DC-TRAP-MIB", "hwDCTrapReason"))
if mibBuilder.loadTexts: hwBTBVSRInterfaceInvalid.setStatus('current')
if mibBuilder.loadTexts: hwBTBVSRInterfaceInvalid.setDescription('The SFU VSR(very short reach) interface invalid.Used for BTB or its extend system.')
hwBTBVSRInterfaceInvalidResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 130)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-DC-TRAP-MIB", "hwDCTrapReason"))
if mibBuilder.loadTexts: hwBTBVSRInterfaceInvalidResume.setStatus('current')
if mibBuilder.loadTexts: hwBTBVSRInterfaceInvalidResume.setDescription('The SFU VSR(very short reach) interface invalid resume.Used for BTB or its extend system.')
hwBTBSlaveChassisNoHeart = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 131)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-DC-TRAP-MIB", "hwDCTrapReason"))
if mibBuilder.loadTexts: hwBTBSlaveChassisNoHeart.setStatus('current')
if mibBuilder.loadTexts: hwBTBSlaveChassisNoHeart.setDescription('The slave chassis no heart.Used for BTB or its extend system.')
hwBTBNoSlaveChassis = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 132)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-DC-TRAP-MIB", "hwDCTrapReason"))
if mibBuilder.loadTexts: hwBTBNoSlaveChassis.setStatus('current')
if mibBuilder.loadTexts: hwBTBNoSlaveChassis.setDescription('No slave chassis connected to the master chassis in the BTB system.Used for BTB or its extend system.')
hwBTBSlaveChassisRegisted = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 133)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-DC-TRAP-MIB", "hwDCTrapReason"))
if mibBuilder.loadTexts: hwBTBSlaveChassisRegisted.setStatus('current')
if mibBuilder.loadTexts: hwBTBSlaveChassisRegisted.setDescription('The slave chassis registe successful.Used for BTB or its extend system.')
hwBTBSlaveChassisRegisteFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 134)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-DC-TRAP-MIB", "hwDCTrapReason"))
if mibBuilder.loadTexts: hwBTBSlaveChassisRegisteFail.setStatus('current')
if mibBuilder.loadTexts: hwBTBSlaveChassisRegisteFail.setDescription('The slave chassis registe failed.Used for BTB or its extend system.')
hwBTBChassisTypeConflict = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 135)).setObjects(("ENTITY-MIB", "entPhysicalName"), ("HUAWEI-DC-TRAP-MIB", "hwDCTrapReason"))
if mibBuilder.loadTexts: hwBTBChassisTypeConflict.setStatus('current')
if mibBuilder.loadTexts: hwBTBChassisTypeConflict.setDescription('The chassis information conflict in the PAF and Nvram.Used for BTB or its extend system.')
hwSuperChangeSuccesful = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 136))
if mibBuilder.loadTexts: hwSuperChangeSuccesful.setStatus('current')
if mibBuilder.loadTexts: hwSuperChangeSuccesful.setDescription('Super change successful.')
hwSuperChangeFailure = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 137))
if mibBuilder.loadTexts: hwSuperChangeFailure.setStatus('current')
if mibBuilder.loadTexts: hwSuperChangeFailure.setDescription('Super change Failure.')
hwOpticaPowerAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 138)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwOpticaPowerAbnormal.setStatus('current')
if mibBuilder.loadTexts: hwOpticaPowerAbnormal.setDescription('Optical Transceiver power abnormal.')
hwEpldAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 139)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwEpldAbnormal.setStatus('current')
if mibBuilder.loadTexts: hwEpldAbnormal.setDescription('Epld logic abnormal.')
hwPhyChipAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 140)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwPhyChipAbnormal.setStatus('current')
if mibBuilder.loadTexts: hwPhyChipAbnormal.setDescription('PHY chip is abnormal.')
hwSerdesAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 141)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwSerdesAbnormal.setStatus('current')
if mibBuilder.loadTexts: hwSerdesAbnormal.setDescription('Serdes interface of PHY chip abnormal.')
hwBoardAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 142)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwBoardAbnormal.setStatus('current')
if mibBuilder.loadTexts: hwBoardAbnormal.setDescription('Board is abnormal.')
hwFeChannelAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 143)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwFeChannelAbnormal.setStatus('current')
if mibBuilder.loadTexts: hwFeChannelAbnormal.setDescription('FE data channel is abnormal')
hwParityCheckAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 144)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwParityCheckAbnormal.setStatus('current')
if mibBuilder.loadTexts: hwParityCheckAbnormal.setDescription('Data parity check is abnormal')
hwPhyClockAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 145)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwPhyClockAbnormal.setStatus('current')
if mibBuilder.loadTexts: hwPhyClockAbnormal.setDescription('The clock of PHY chip is abnormal.')
hwPortAutoNegotiateFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 146)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwPortAutoNegotiateFail.setStatus('current')
if mibBuilder.loadTexts: hwPortAutoNegotiateFail.setDescription('The ethernet port negotiate failed')
hwPortSemiduplex = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 147)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwPortSemiduplex.setStatus('current')
if mibBuilder.loadTexts: hwPortSemiduplex.setDescription('The ethernet port work at semi duplex state.')
hwScuStartModeSetFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 148)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwScuStartModeSetFail.setStatus('current')
if mibBuilder.loadTexts: hwScuStartModeSetFail.setDescription('The start mode of SCU set failed')
hwMemoryExhaust = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 149))
if mibBuilder.loadTexts: hwMemoryExhaust.setStatus('current')
if mibBuilder.loadTexts: hwMemoryExhaust.setDescription('MPU memory exhaust.')
hwMemoryExhaustClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 150))
if mibBuilder.loadTexts: hwMemoryExhaustClear.setStatus('current')
if mibBuilder.loadTexts: hwMemoryExhaustClear.setDescription('MPU memory usage resume to normal.')
hwMethAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 151)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwMethAbnormal.setStatus('current')
if mibBuilder.loadTexts: hwMethAbnormal.setDescription('The Meth interface is abnormal.')
hwLpuNotTight = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 152)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwLpuNotTight.setStatus('current')
if mibBuilder.loadTexts: hwLpuNotTight.setDescription('The LPU board is not tightly installed. Install the board again.')
hwLicenseFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 153)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwLicenseFail.setStatus('current')
if mibBuilder.loadTexts: hwLicenseFail.setDescription('License fail.')
hwHaBatchBegin = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 154)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwHaBatchBegin.setStatus('current')
if mibBuilder.loadTexts: hwHaBatchBegin.setDescription('No command line can be entered because batch backup is processing.')
hwHaBatchEnd = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 155)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwHaBatchEnd.setStatus('current')
if mibBuilder.loadTexts: hwHaBatchEnd.setDescription('Command lines can be entered because batch backup ends.')
hwHaSmoothBegin = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 156)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwHaSmoothBegin.setStatus('current')
if mibBuilder.loadTexts: hwHaSmoothBegin.setDescription('No command line can be entered because data smooth is processing.')
hwHaSmoothEnd = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 157)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwHaSmoothEnd.setStatus('current')
if mibBuilder.loadTexts: hwHaSmoothEnd.setDescription('Command lines can be entered because data smooth ends.')
hwFanUp = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 2, 158)).setObjects(("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: hwFanUp.setStatus('current')
if mibBuilder.loadTexts: hwFanUp.setDescription('Fan register!')
hwDCTrapConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 3))
hwDCTrapGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 3, 1))
hwDCTrapControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 3, 1, 1)).setObjects(("HUAWEI-DC-TRAP-MIB", "hwDCCtrlTrap"), ("HUAWEI-DC-TRAP-MIB", "hwTunnelGroupID"), ("HUAWEI-DC-TRAP-MIB", "hwDCTrapReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwDCTrapControlGroup = hwDCTrapControlGroup.setStatus('current')
if mibBuilder.loadTexts: hwDCTrapControlGroup.setDescription('These objects are required to control traps from hwDatacomm Traps systems.')
hwDCNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 3, 1, 2)).setObjects(("HUAWEI-DC-TRAP-MIB", "hwMPUSynClkFaulty"), ("HUAWEI-DC-TRAP-MIB", "hwMPUSynClkFaultyResume"), ("HUAWEI-DC-TRAP-MIB", "hwSlaveMPUNoResp"), ("HUAWEI-DC-TRAP-MIB", "hwSlaveMPUNoRespResume"), ("HUAWEI-DC-TRAP-MIB", "hwBrdChannelFaulty"), ("HUAWEI-DC-TRAP-MIB", "hwBrdChannelFaultyResume"), ("HUAWEI-DC-TRAP-MIB", "hwBrdNofullin"), ("HUAWEI-DC-TRAP-MIB", "hwBrdNofullinResume"), ("HUAWEI-DC-TRAP-MIB", "hwBrdTypeNoMatchReset"), ("HUAWEI-DC-TRAP-MIB", "hwBrdAutoSwtFail"), ("HUAWEI-DC-TRAP-MIB", "hwBrdAutoSwt"), ("HUAWEI-DC-TRAP-MIB", "hwBrdClkLockERR"), ("HUAWEI-DC-TRAP-MIB", "hwBrdClkLockERRResume"), ("HUAWEI-DC-TRAP-MIB", "hwBrdRemoved"), ("HUAWEI-DC-TRAP-MIB", "hwBrdUp"), ("HUAWEI-DC-TRAP-MIB", "hwClkSrcMiss"), ("HUAWEI-DC-TRAP-MIB", "hwClkAllSrcLost"), ("HUAWEI-DC-TRAP-MIB", "hwClkAllSrcLostResume"), ("HUAWEI-DC-TRAP-MIB", "hwClkFail"), ("HUAWEI-DC-TRAP-MIB", "hwClkFailResume"), ("HUAWEI-DC-TRAP-MIB", "hwClkNoHeartbeat"), ("HUAWEI-DC-TRAP-MIB", "hwClkNoHeartbeatResume"), ("HUAWEI-DC-TRAP-MIB", "hwLPULostSynAlarm"), ("HUAWEI-DC-TRAP-MIB", "hwLPUOpenChannelError"), ("HUAWEI-DC-TRAP-MIB", "hwLPUSlfTstErr"), ("HUAWEI-DC-TRAP-MIB", "hwLPU3ClkSwitch"), ("HUAWEI-DC-TRAP-MIB", "hwSFULostHrtReset"), ("HUAWEI-DC-TRAP-MIB", "hwSFULinkLostReset"), ("HUAWEI-DC-TRAP-MIB", "hwSFUChannelLinkLost"), ("HUAWEI-DC-TRAP-MIB", "hwSFUInChannelOpenFail"), ("HUAWEI-DC-TRAP-MIB", "hwVoltSensorFail"), ("HUAWEI-DC-TRAP-MIB", "hwVoltSensorFailResume"), ("HUAWEI-DC-TRAP-MIB", "hwVoltBtmC"), ("HUAWEI-DC-TRAP-MIB", "hwVoltBtmCResume"), ("HUAWEI-DC-TRAP-MIB", "hwVoltSprC"), ("HUAWEI-DC-TRAP-MIB", "hwVoltSprCResume"), ("HUAWEI-DC-TRAP-MIB", "hwVoltBtmM"), ("HUAWEI-DC-TRAP-MIB", "hwVoltBtmMResume"), ("HUAWEI-DC-TRAP-MIB", "hwVoltSprM"), ("HUAWEI-DC-TRAP-MIB", "hwVoltSprMResume"), ("HUAWEI-DC-TRAP-MIB", "hwTempSensorFail"), ("HUAWEI-DC-TRAP-MIB", "hwTempSensorFailResume"), ("HUAWEI-DC-TRAP-MIB", "hwTempMnr"), ("HUAWEI-DC-TRAP-MIB", "hwTempMnrResume"), ("HUAWEI-DC-TRAP-MIB", "hwTempMjr"), ("HUAWEI-DC-TRAP-MIB", "hwTempMjrResume"), ("HUAWEI-DC-TRAP-MIB", "hwTempCtl"), ("HUAWEI-DC-TRAP-MIB", "hwTempCtlResume"), ("HUAWEI-DC-TRAP-MIB", "hwFanHFail"), ("HUAWEI-DC-TRAP-MIB", "hwFanFail"), ("HUAWEI-DC-TRAP-MIB", "hwFanFailResume"), ("HUAWEI-DC-TRAP-MIB", "hwFanAbsent"), ("HUAWEI-DC-TRAP-MIB", "hwFanAbsentResume"), ("HUAWEI-DC-TRAP-MIB", "hwFanCabUN"), ("HUAWEI-DC-TRAP-MIB", "hwFanCabUNResume"), ("HUAWEI-DC-TRAP-MIB", "hwPwrFail"), ("HUAWEI-DC-TRAP-MIB", "hwPwrFailResume"), ("HUAWEI-DC-TRAP-MIB", "hwPwrAbsent"), ("HUAWEI-DC-TRAP-MIB", "hwPwrAbsentResume"), ("HUAWEI-DC-TRAP-MIB", "hwPwrCabUN"), ("HUAWEI-DC-TRAP-MIB", "hwPwrCabUNResume"), ("HUAWEI-DC-TRAP-MIB", "hwLCDHFail"), ("HUAWEI-DC-TRAP-MIB", "hwLCDFail"), ("HUAWEI-DC-TRAP-MIB", "hwLCDAbsent"), ("HUAWEI-DC-TRAP-MIB", "hwLCDAbsentResume"), ("HUAWEI-DC-TRAP-MIB", "hwLCDCabUN"), ("HUAWEI-DC-TRAP-MIB", "hwLCDCabUNResume"), ("HUAWEI-DC-TRAP-MIB", "hwROMFail"), ("HUAWEI-DC-TRAP-MIB", "hwMonitorBUSFail"), ("HUAWEI-DC-TRAP-MIB", "hwMonitorBUSFailResume"), ("HUAWEI-DC-TRAP-MIB", "hwWriteFlashError"), ("HUAWEI-DC-TRAP-MIB", "hwBoardReset"), ("HUAWEI-DC-TRAP-MIB", "hwBoardResetSuccess"), ("HUAWEI-DC-TRAP-MIB", "hwSlaveMPUReset"), ("HUAWEI-DC-TRAP-MIB", "hwMasterSlaveSwap"), ("HUAWEI-DC-TRAP-MIB", "hwRTCFail"), ("HUAWEI-DC-TRAP-MIB", "hwExchangeChipFail"), ("HUAWEI-DC-TRAP-MIB", "hwTempResume"), ("HUAWEI-DC-TRAP-MIB", "hwOpticalModuleInsert"), ("HUAWEI-DC-TRAP-MIB", "hwOpticalModuleRemove"), ("HUAWEI-DC-TRAP-MIB", "hwBoardOfflineChange"), ("HUAWEI-DC-TRAP-MIB", "hwInterfacePhysicalDown"), ("HUAWEI-DC-TRAP-MIB", "hwInterfacePhysicalUp"), ("HUAWEI-DC-TRAP-MIB", "hwBTBStartupFileNameDifferent"), ("HUAWEI-DC-TRAP-MIB", "hwBTBChassisRunningModeConflict"), ("HUAWEI-DC-TRAP-MIB", "hwBTBCtrlChannelFail"), ("HUAWEI-DC-TRAP-MIB", "hwBTBCtrlChannelFailResume"), ("HUAWEI-DC-TRAP-MIB", "hwBTBDataChannelFail"), ("HUAWEI-DC-TRAP-MIB", "hwBTBDataChannelFailResume"), ("HUAWEI-DC-TRAP-MIB", "hwBTBClkChannelFail"), ("HUAWEI-DC-TRAP-MIB", "hwBTBClkChannelFailResume"), ("HUAWEI-DC-TRAP-MIB", "hwBTBSFUOpticInterfaceError"), ("HUAWEI-DC-TRAP-MIB", "hwBTBSFUOpticInterfaceErrorResume"), ("HUAWEI-DC-TRAP-MIB", "hwBTBVSRInterfaceInvalid"), ("HUAWEI-DC-TRAP-MIB", "hwBTBVSRInterfaceInvalidResume"), ("HUAWEI-DC-TRAP-MIB", "hwBTBSlaveChassisNoHeart"), ("HUAWEI-DC-TRAP-MIB", "hwBTBNoSlaveChassis"), ("HUAWEI-DC-TRAP-MIB", "hwBTBSlaveChassisRegisted"), ("HUAWEI-DC-TRAP-MIB", "hwBTBSlaveChassisRegisteFail"), ("HUAWEI-DC-TRAP-MIB", "hwBTBChassisTypeConflict"), ("HUAWEI-DC-TRAP-MIB", "hwOpticaPowerAbnormal"), ("HUAWEI-DC-TRAP-MIB", "hwFPGAAbnormal"), ("HUAWEI-DC-TRAP-MIB", "hwBrdInserted"), ("HUAWEI-DC-TRAP-MIB", "hwMinMTunnelDownAlarm"), ("HUAWEI-DC-TRAP-MIB", "hwMinMTunnelUpAlarm"), ("HUAWEI-DC-TRAP-MIB", "hwSuperChangeSuccesful"), ("HUAWEI-DC-TRAP-MIB", "hwSuperChangeFailure"), ("HUAWEI-DC-TRAP-MIB", "hwEpldAbnormal"), ("HUAWEI-DC-TRAP-MIB", "hwPhyChipAbnormal"), ("HUAWEI-DC-TRAP-MIB", "hwSerdesAbnormal"), ("HUAWEI-DC-TRAP-MIB", "hwBoardAbnormal"), ("HUAWEI-DC-TRAP-MIB", "hwFeChannelAbnormal"), ("HUAWEI-DC-TRAP-MIB", "hwParityCheckAbnormal"), ("HUAWEI-DC-TRAP-MIB", "hwPhyClockAbnormal"), ("HUAWEI-DC-TRAP-MIB", "hwPortAutoNegotiateFail"), ("HUAWEI-DC-TRAP-MIB", "hwPortSemiduplex"), ("HUAWEI-DC-TRAP-MIB", "hwScuStartModeSetFail"), ("HUAWEI-DC-TRAP-MIB", "hwMemoryExhaust"), ("HUAWEI-DC-TRAP-MIB", "hwMemoryExhaustClear"), ("HUAWEI-DC-TRAP-MIB", "hwMethAbnormal"), ("HUAWEI-DC-TRAP-MIB", "hwLpuNotTight"), ("HUAWEI-DC-TRAP-MIB", "hwLicenseFail"), ("HUAWEI-DC-TRAP-MIB", "hwHaBatchBegin"), ("HUAWEI-DC-TRAP-MIB", "hwHaBatchEnd"), ("HUAWEI-DC-TRAP-MIB", "hwHaSmoothBegin"), ("HUAWEI-DC-TRAP-MIB", "hwHaSmoothEnd"), ("HUAWEI-DC-TRAP-MIB", "hwFanUp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwDCNotificationGroup = hwDCNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hwDCNotificationGroup.setDescription('The notification group defined for Datacomm products.')
hwDCTrapCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 3, 2))
hwDCTrapCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 37, 3, 2, 1)).setObjects(("HUAWEI-DC-TRAP-MIB", "hwDCTrapControlGroup"), ("HUAWEI-DC-TRAP-MIB", "hwDCNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwDCTrapCompliance = hwDCTrapCompliance.setStatus('current')
if mibBuilder.loadTexts: hwDCTrapCompliance.setDescription('The compliance statement.')
mibBuilder.exportSymbols("HUAWEI-DC-TRAP-MIB", hwDCTrapGroups=hwDCTrapGroups, hwLPU3ClkSwitch=hwLPU3ClkSwitch, hwLCDCabUNResume=hwLCDCabUNResume, hwBTBVSRInterfaceInvalidResume=hwBTBVSRInterfaceInvalidResume, hwFanUp=hwFanUp, hwTempCtlResume=hwTempCtlResume, hwBrdAutoSwt=hwBrdAutoSwt, hwVoltSprMResume=hwVoltSprMResume, hwMemoryExhaust=hwMemoryExhaust, hwTempMjrResume=hwTempMjrResume, hwBTBNoSlaveChassis=hwBTBNoSlaveChassis, hwOpticalModuleRemove=hwOpticalModuleRemove, hwPhyChipAbnormal=hwPhyChipAbnormal, hwScuStartModeSetFail=hwScuStartModeSetFail, hwBrdChannelFaulty=hwBrdChannelFaulty, hwPwrCabUNResume=hwPwrCabUNResume, hwBTBClkChannelFail=hwBTBClkChannelFail, hwFanFail=hwFanFail, hwDCTrapMIB=hwDCTrapMIB, hwMinMTunnelUpAlarm=hwMinMTunnelUpAlarm, hwLPUSlfTstErr=hwLPUSlfTstErr, hwSuperChangeFailure=hwSuperChangeFailure, hwClkFail=hwClkFail, hwMasterSlaveSwap=hwMasterSlaveSwap, hwFanFailResume=hwFanFailResume, hwBoardAbnormal=hwBoardAbnormal, hwDCNotificationGroup=hwDCNotificationGroup, hwSFULostHrtReset=hwSFULostHrtReset, hwTempSensorFailResume=hwTempSensorFailResume, hwBTBSFUOpticInterfaceError=hwBTBSFUOpticInterfaceError, hwMinMTunnelDownAlarm=hwMinMTunnelDownAlarm, hwBrdTypeNoMatchReset=hwBrdTypeNoMatchReset, hwLpuNotTight=hwLpuNotTight, hwDCCtrlTrap=hwDCCtrlTrap, hwBTBVSRInterfaceInvalid=hwBTBVSRInterfaceInvalid, hwMPUSynClkFaultyResume=hwMPUSynClkFaultyResume, hwWriteFlashError=hwWriteFlashError, hwDCTrapCompliance=hwDCTrapCompliance, hwVoltBtmM=hwVoltBtmM, hwInterfacePhysicalDown=hwInterfacePhysicalDown, hwDCTraps=hwDCTraps, hwBTBChassisRunningModeConflict=hwBTBChassisRunningModeConflict, hwBTBCtrlChannelFailResume=hwBTBCtrlChannelFailResume, hwTempMjr=hwTempMjr, hwClkNoHeartbeatResume=hwClkNoHeartbeatResume, hwFanAbsent=hwFanAbsent, hwSerdesAbnormal=hwSerdesAbnormal, hwTempMnr=hwTempMnr, hwFanCabUN=hwFanCabUN, hwLCDCabUN=hwLCDCabUN, hwDCTrapConformance=hwDCTrapConformance, hwVoltSprM=hwVoltSprM, hwHaSmoothBegin=hwHaSmoothBegin, hwBrdNofullinResume=hwBrdNofullinResume, hwClkSrcMiss=hwClkSrcMiss, hwPwrCabUN=hwPwrCabUN, hwROMFail=hwROMFail, hwMonitorBUSFailResume=hwMonitorBUSFailResume, hwPwrFail=hwPwrFail, hwVoltSensorFail=hwVoltSensorFail, hwBrdChannelFaultyResume=hwBrdChannelFaultyResume, hwClkNoHeartbeat=hwClkNoHeartbeat, hwVoltBtmC=hwVoltBtmC, hwVoltSensorFailResume=hwVoltSensorFailResume, hwBTBDataChannelFail=hwBTBDataChannelFail, hwHaBatchBegin=hwHaBatchBegin, hwLCDAbsentResume=hwLCDAbsentResume, hwBTBSlaveChassisRegisteFail=hwBTBSlaveChassisRegisteFail, hwTempSensorFail=hwTempSensorFail, hwClkAllSrcLost=hwClkAllSrcLost, hwPwrAbsent=hwPwrAbsent, hwExchangeChipFail=hwExchangeChipFail, hwBTBSlaveChassisNoHeart=hwBTBSlaveChassisNoHeart, hwFanHFail=hwFanHFail, hwSuperChangeSuccesful=hwSuperChangeSuccesful, hwLicenseFail=hwLicenseFail, hwSFUInChannelOpenFail=hwSFUInChannelOpenFail, hwVoltSprC=hwVoltSprC, PYSNMP_MODULE_ID=hwDCTrapMIB, hwBrdClkLockERR=hwBrdClkLockERR, hwBTBClkChannelFailResume=hwBTBClkChannelFailResume, hwBTBChassisTypeConflict=hwBTBChassisTypeConflict, hwFanCabUNResume=hwFanCabUNResume, hwPwrFailResume=hwPwrFailResume, hwBTBCtrlChannelFail=hwBTBCtrlChannelFail, hwBoardResetSuccess=hwBoardResetSuccess, hwRTCFail=hwRTCFail, hwDCTrapReason=hwDCTrapReason, hwBrdInserted=hwBrdInserted, hwBoardReset=hwBoardReset, hwMPUSynClkFaulty=hwMPUSynClkFaulty, hwMemoryExhaustClear=hwMemoryExhaustClear, hwDCTrapControlGroup=hwDCTrapControlGroup, hwFanAbsentResume=hwFanAbsentResume, hwEpldAbnormal=hwEpldAbnormal, hwLPULostSynAlarm=hwLPULostSynAlarm, hwLPUOpenChannelError=hwLPUOpenChannelError, hwDCTrapCompliances=hwDCTrapCompliances, hwLCDFail=hwLCDFail, hwSlaveMPUNoResp=hwSlaveMPUNoResp, hwSlaveMPUReset=hwSlaveMPUReset, hwOpticalModuleInsert=hwOpticalModuleInsert, hwSlaveMPUNoRespResume=hwSlaveMPUNoRespResume, hwParityCheckAbnormal=hwParityCheckAbnormal, hwBTBDataChannelFailResume=hwBTBDataChannelFailResume, hwBTBStartupFileNameDifferent=hwBTBStartupFileNameDifferent, hwTempMnrResume=hwTempMnrResume, hwFeChannelAbnormal=hwFeChannelAbnormal, hwMonitorBUSFail=hwMonitorBUSFail, hwClkFailResume=hwClkFailResume, hwTempResume=hwTempResume, hwDCTrapControl=hwDCTrapControl, hwBrdAutoSwtFail=hwBrdAutoSwtFail, hwPortAutoNegotiateFail=hwPortAutoNegotiateFail, hwPwrAbsentResume=hwPwrAbsentResume, hwBTBSFUOpticInterfaceErrorResume=hwBTBSFUOpticInterfaceErrorResume, hwBTBSlaveChassisRegisted=hwBTBSlaveChassisRegisted, hwHaBatchEnd=hwHaBatchEnd, hwSFULinkLostReset=hwSFULinkLostReset, hwBrdRemoved=hwBrdRemoved, hwOpticaPowerAbnormal=hwOpticaPowerAbnormal, hwLCDAbsent=hwLCDAbsent, hwBrdUp=hwBrdUp, hwPortSemiduplex=hwPortSemiduplex, hwBrdNofullin=hwBrdNofullin, hwTempCtl=hwTempCtl, hwHaSmoothEnd=hwHaSmoothEnd, hwPhyClockAbnormal=hwPhyClockAbnormal, hwInterfacePhysicalUp=hwInterfacePhysicalUp, hwBrdClkLockERRResume=hwBrdClkLockERRResume, hwBoardOfflineChange=hwBoardOfflineChange, hwMethAbnormal=hwMethAbnormal, hwVoltBtmCResume=hwVoltBtmCResume, hwVoltSprCResume=hwVoltSprCResume, hwTunnelGroupID=hwTunnelGroupID, hwSFUChannelLinkLost=hwSFUChannelLinkLost, hwLCDHFail=hwLCDHFail, hwFPGAAbnormal=hwFPGAAbnormal, hwVoltBtmMResume=hwVoltBtmMResume, hwClkAllSrcLostResume=hwClkAllSrcLostResume)
