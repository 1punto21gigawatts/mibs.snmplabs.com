#
# PySNMP MIB module CISCO-WLAN-VLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-WLAN-VLAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:00:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
WepKeyType128, CDot11IfMicAlgorithm, CDot11IfWepKeyPermuteAlgorithm = mibBuilder.importSymbols("CISCO-DOT11-IF-MIB", "WepKeyType128", "CDot11IfMicAlgorithm", "CDot11IfWepKeyPermuteAlgorithm")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ObjectIdentity, ModuleIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, IpAddress, iso, MibIdentifier, Bits, Integer32, NotificationType, TimeTicks, Counter64, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "ModuleIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "IpAddress", "iso", "MibIdentifier", "Bits", "Integer32", "NotificationType", "TimeTicks", "Counter64", "Gauge32")
TextualConvention, TruthValue, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "RowStatus", "DisplayString")
ciscoWlanVlanMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 268))
ciscoWlanVlanMIB.setRevisions(('2002-06-12 00:00', '2002-04-04 00:00', '2002-03-07 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoWlanVlanMIB.setRevisionsDescriptions(('Remove tkip(3) option from the cwvlWlanEncryptionMode, and added cwvlWlanEncryptionAlgorithm and cwvlWlanWepKeyHashing objects to cwvlWlanVlanTable.', 'Added tkip(3) option and removed wepMic option from the cwvlWlanEncryptionMode, and added an cwvlWlanEncryptionMandatory object to cwvlWlanVlanTable.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoWlanVlanMIB.setLastUpdated('200206120000Z')
if mibBuilder.loadTexts: ciscoWlanVlanMIB.setOrganization('Cisco System Inc.')
if mibBuilder.loadTexts: ciscoWlanVlanMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 West Tasman Drive, San Jose CA 95134-1706. USA Tel: +1 800 553-NETS E-mail: cs-dot11@cisco.com')
if mibBuilder.loadTexts: ciscoWlanVlanMIB.setDescription('This MIB module provides network management support for device VLAN configuration on IEEE 802.11 wireless LAN. ACRONYMS AES Advanced Encryption Standard, an encryption mechanism. MIC Message Integrity Check. WEP Wired Equivalent Privacy, an encryption mechanism.')
ciscoWlanVlanMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 268, 1))
cwvlRoamDomainConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 268, 1, 1))
cwvlDot11VlanConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 268, 1, 2))
class CwvlVlanIdOrZero(TextualConvention, Unsigned32):
    reference = 'RFC 2674, Bridge MIB Extensions, August 1999.'
    description = "This is a 12-bit VLAN ID used in the VLAN Tag header. A value of 0 indicates NULL or no VLAN ID. This textual convention is used instead of VlanId defined in Q-BRIDGE-MIB of RFC 2674 because value 0 and 4095 is not permitted. VLAN of ID '4095' is the default VLAN for Cisco VoIP Phones."
    status = 'current'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 4095)

cwvlWlanDot1qEncapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 268, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwvlWlanDot1qEncapEnabled.setReference('IEEE 802.1Q-1998, Section 8.11.9.')
if mibBuilder.loadTexts: cwvlWlanDot1qEncapEnabled.setStatus('current')
if mibBuilder.loadTexts: cwvlWlanDot1qEncapEnabled.setDescription("This object enables and disables IEEE 802.1Q type encapsulation for all VLANs. If this object is set to 'false', then the 802.1Q encapsulation is disabled on all interfaces. If this object is set to 'true', then the 802.1Q encapsulation is enabled on all interfaces.")
cwvlBridgingNativeVlanId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 268, 1, 1, 2), CwvlVlanIdOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwvlBridgingNativeVlanId.setStatus('current')
if mibBuilder.loadTexts: cwvlBridgingNativeVlanId.setDescription("This object specifies the native VLAN ID for layer 2 bridging. If this object is set to '0', there is no layer 2 bridging native VLAN ID. Setting this object will automatically update the dot1qPvid for all interfaces in the Q-BRIDGE-MIB (if supported) to the same value provided it is not '0'. The dot1qPvid will be read-only. The dot1qPvid specifies the native VLAN ID on each device interface. If this object is '0', the return value of dot1qPvid is not valid. If the device is attached to a VLAN port of an Ethernet bridge or switch, then the device must have a non-zero native VLAN ID, and that VLAN ID must also match the VLAN ID of the port on the bridge or switch. The native VLAN ID is the default VLAN ID for frames received that are not otherwise associated with a VLAN ID.")
cwvlVoIPVlanEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 268, 1, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwvlVoIPVlanEnabled.setStatus('current')
if mibBuilder.loadTexts: cwvlVoIPVlanEnabled.setDescription("This object enables and disables VoIP VLAN functionality for this agent. If this object is set to 'true', and cwvlVoIPVlanId is a non-zero, the value of the cwvlVoIPVlanId object is the user-configured VoIP VLAN ID. If this object is set to 'true', and cwvlVoIPVlanId is CDP VVID, this agent automatically enables the VoIP VLAN when it receives CDP messages with non-zero VVID field on its root port, otherwise, the VoIP VLAN is disabled. If this object is set to 'false', then the VoIP VLAN is disabled and no station can associate with a VoIP VLAN ID.")
cwvlVoIPVlanId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 268, 1, 1, 4), CwvlVlanIdOrZero().clone(4095)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwvlVoIPVlanId.setStatus('current')
if mibBuilder.loadTexts: cwvlVoIPVlanId.setDescription("This object is the VoIP VLAN ID. All VoIP VLAN ID values are non-zero VLAN ID. A value of '0' is used to represent CDP VVID.")
cwvlPublicVlanId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 268, 1, 1, 5), CwvlVlanIdOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwvlPublicVlanId.setStatus('current')
if mibBuilder.loadTexts: cwvlPublicVlanId.setDescription("The object is the Public VLAN ID. This VLAN is the only VLAN which may be configured on an 802.11 network interface to not require WEP encryption. All other VLANs require WEP encryption in order to isolate the broadcast domains. If the value of object is '0', there is no specific VLAN ID for the Public VLAN.")
cwvlWlanVlanTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 268, 1, 2, 1), )
if mibBuilder.loadTexts: cwvlWlanVlanTable.setStatus('current')
if mibBuilder.loadTexts: cwvlWlanVlanTable.setDescription('This table contains attributes for configuration and security management of VLANs. Devices can configure to have multiple VLANs on an interface. VLANs on different interfaces of the same VLAN ID must have the same configuration. Therefore, attributes for each conceptual row applies to the VLANs of the corresponding VLAN ID on all interfaces.')
cwvlWlanVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 268, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-WLAN-VLAN-MIB", "cwvlWlanVlanId"))
if mibBuilder.loadTexts: cwvlWlanVlanEntry.setStatus('current')
if mibBuilder.loadTexts: cwvlWlanVlanEntry.setDescription('Each entry includes parameters for to enable VLAN and configure encryption and key usages for a particular VLAN.')
cwvlWlanVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 268, 1, 2, 1, 1, 1), CwvlVlanIdOrZero())
if mibBuilder.loadTexts: cwvlWlanVlanId.setStatus('current')
if mibBuilder.loadTexts: cwvlWlanVlanId.setDescription('This is the VLAN ID to which the parameters in each conceptual row shall be applied.')
cwvlWlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 268, 1, 2, 1, 1, 2), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwvlWlanEnabled.setStatus('current')
if mibBuilder.loadTexts: cwvlWlanEnabled.setDescription("If the value is 'true', this VLAN is enabled on all trunk and hybrid ports. If the value is 'false', this VLAN is disabled on all ports.")
cwvlWlanNUcastKeyRotateInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 268, 1, 2, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwvlWlanNUcastKeyRotateInterval.setStatus('current')
if mibBuilder.loadTexts: cwvlWlanNUcastKeyRotateInterval.setDescription("The object specifies the WEP encryption key rotation period. If the value is '0', it indicates no key rotation.")
cwvlWlanEncryptionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 268, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("wep", 2), ("aes", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwvlWlanEncryptionMode.setStatus('current')
if mibBuilder.loadTexts: cwvlWlanEncryptionMode.setDescription('Encryption mode used on the VLANs are: none (1) - No encryption and use VLan as security mechanism, wep (2) - WEP encryption, aes (3) - Advanced Encryption Standard.')
cwvlWlanEncryptionMandatory = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 268, 1, 2, 1, 1, 5), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwvlWlanEncryptionMandatory.setStatus('current')
if mibBuilder.loadTexts: cwvlWlanEncryptionMandatory.setDescription("Encryption option for wep(2) selection of cwvlWlanEncryptionMode: 'true' - WEP encryption is mandatory, 'false' - WEP encryption is option.")
cwvlWlanMicAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 268, 1, 2, 1, 1, 6), CDot11IfMicAlgorithm().clone('micNone')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwvlWlanMicAlgorithm.setStatus('current')
if mibBuilder.loadTexts: cwvlWlanMicAlgorithm.setDescription('This is the auxiliary MIC type used on WEP-encoded packets for client stations assigned to this VLAN.')
cwvlWlanWepKeyPermuteAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 268, 1, 2, 1, 1, 7), CDot11IfWepKeyPermuteAlgorithm().clone('wepPermuteNone')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwvlWlanWepKeyPermuteAlgorithm.setStatus('current')
if mibBuilder.loadTexts: cwvlWlanWepKeyPermuteAlgorithm.setDescription('This is the function through which the WEP encryption key is permuted between key renewal periods for client stations assigned to this VLAN.')
cwvlWlanWepKeyHashing = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 268, 1, 2, 1, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwvlWlanWepKeyHashing.setStatus('current')
if mibBuilder.loadTexts: cwvlWlanWepKeyHashing.setDescription("This is an optional key hashing for WEP encryption. If the value is 'true', the hashing option is applied. If the value is 'false', the hashing option is not applied to WEP encryption.")
cwvlWlanEncryptionAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 268, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standard", 1), ("cisco", 2))).clone('cisco')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwvlWlanEncryptionAlgorithm.setStatus('current')
if mibBuilder.loadTexts: cwvlWlanEncryptionAlgorithm.setDescription('This object determines if Standard IEEE 802.11 or Cisco propriety AES, MIC, and hashing for WEP encryption is applied. If the value is standard(1), the Standard IEEE 802.11 encryption is applied. If the value is cisco(2), the Cisco propriety encryption is applied.')
cwvlWlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 268, 1, 2, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cwvlWlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: cwvlWlanRowStatus.setDescription("This is used to create a new row, modify or delete an existing row and a VLAN configuration in this table. A VLAN can only be activated by setting this object to `active' by the agent. When it is `active', the VLAN is being used or referenced in other system configurations. A VLAN should only be deleted or taken out of service, (by setting this object to `destroy' or `outOfService') if only if it is not referenced by all associated system configurations.")
cwvlWlanNUcastKeyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 268, 1, 2, 2), )
if mibBuilder.loadTexts: cwvlWlanNUcastKeyTable.setStatus('current')
if mibBuilder.loadTexts: cwvlWlanNUcastKeyTable.setDescription("This table contains shared WEP keys for all IEEE 802.11 packets transmitted and received frames over a VLAN identified by the cwvlWlanVlanId if encryption is enabled (i.e., the cwvlWlanEncryptionMode is wep(2) or aes(3)) on the VLAN. If WEP encryption is enabled for the transmitted IEEE 802.11 frames, then the Default Shared WEP key in the set are used to encrypt the transmitted both broadcast and multicast frames associated with the cwvlWlanVlanId. Key '1' in the set is the default key. The Default Shared WEP key is also used to encrypt or decrypt unicast frames, associated with the cwvlWlanVlanId, if an individual session key is not defined for the target station address.")
cwvlWlanNUcastKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 268, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-WLAN-VLAN-MIB", "cwvlWlanVlanId"), (0, "CISCO-WLAN-VLAN-MIB", "cwvlWlanNUcastKeyIndex"))
if mibBuilder.loadTexts: cwvlWlanNUcastKeyEntry.setStatus('current')
if mibBuilder.loadTexts: cwvlWlanNUcastKeyEntry.setDescription('Each entry contains the key index, key length, and key value. There is a maximum of 4 keys per VLAN or key set. Each key set is indexed by the VLAN ID.')
cwvlWlanNUcastKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 268, 1, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: cwvlWlanNUcastKeyIndex.setStatus('current')
if mibBuilder.loadTexts: cwvlWlanNUcastKeyIndex.setDescription("This object is a representative of the corresponding 802.11 WEP Key Index used when transmitting or receiving frames with this key. SNMP table indexing conventions require table index to be non-zero. Therefore, this object has to be one greater than the actual 802.11 WEP key index. A value of '1' for this object corresponds to a value of '0' for the 802.11 WEP key index.")
cwvlWlanNUcastKeyLen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 268, 1, 2, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwvlWlanNUcastKeyLen.setStatus('current')
if mibBuilder.loadTexts: cwvlWlanNUcastKeyLen.setDescription("This object specifies the length in octets of cwvlWlanNUcastKeyValue. Common values are 5 for 40-bit WEP key and 13 for 128-bit WEP key. A value of '0' means that the key is not set.")
cwvlWlanNUcastKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 268, 1, 2, 2, 1, 3), WepKeyType128()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwvlWlanNUcastKeyValue.setStatus('current')
if mibBuilder.loadTexts: cwvlWlanNUcastKeyValue.setDescription('This is the WEP secret key value. The agent always returns a zero-length string when this object is read for security reason.')
cwvlWlanWepChangeNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 268, 1, 2, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cwvlWlanWepChangeNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: cwvlWlanWepChangeNotifEnabled.setDescription('Indicates whether ciscoWlanVlanWepChangeNotif notifications will or will not be sent by the agent when the WEP key in the cwvlWlanNUcastKeyTable are changed.')
ciscoWlanVlanMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 268, 0))
ciscoWlanVlanWepChangeNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 268, 0, 1)).setObjects(("CISCO-WLAN-VLAN-MIB", "cwvlWlanNUcastKeyValue"))
if mibBuilder.loadTexts: ciscoWlanVlanWepChangeNotif.setStatus('current')
if mibBuilder.loadTexts: ciscoWlanVlanWepChangeNotif.setDescription('This ciscoWlanVlanWepChangeNotif notification will be sent when the WEP configuration in the cwvlWlanNUcastKeyTable is changed. The cwvlWlanNUcastKeyValue specify the new key value for a given key for a VLAN. The sending of these notifications can be enabled or disabled via the cwvlWlanWepChangeNotifEnabled object.')
ciscoWlanVlanMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 268, 2))
ciscoWlanVlanMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 268, 2, 1))
ciscoWlanVlanMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 268, 2, 2))
ciscoWlanVlanMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 268, 2, 1, 1)).setObjects(("CISCO-WLAN-VLAN-MIB", "ciscoWlanRoamDomainGroup"), ("CISCO-WLAN-VLAN-MIB", "ciscoWlanVlanNotificationGroup"), ("CISCO-WLAN-VLAN-MIB", "ciscoWlanDot11VlanConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWlanVlanMIBCompliance = ciscoWlanVlanMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoWlanVlanMIBCompliance.setDescription('The compliance statement for the ciscoWlanVlanMIBGroups.')
ciscoWlanRoamDomainGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 268, 2, 2, 1)).setObjects(("CISCO-WLAN-VLAN-MIB", "cwvlWlanDot1qEncapEnabled"), ("CISCO-WLAN-VLAN-MIB", "cwvlBridgingNativeVlanId"), ("CISCO-WLAN-VLAN-MIB", "cwvlVoIPVlanEnabled"), ("CISCO-WLAN-VLAN-MIB", "cwvlVoIPVlanId"), ("CISCO-WLAN-VLAN-MIB", "cwvlPublicVlanId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWlanRoamDomainGroup = ciscoWlanRoamDomainGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoWlanRoamDomainGroup.setDescription('Global VLAN configuration for wireless LAN roaming domain.')
ciscoWlanDot11VlanConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 268, 2, 2, 2)).setObjects(("CISCO-WLAN-VLAN-MIB", "cwvlWlanEnabled"), ("CISCO-WLAN-VLAN-MIB", "cwvlWlanNUcastKeyRotateInterval"), ("CISCO-WLAN-VLAN-MIB", "cwvlWlanEncryptionMode"), ("CISCO-WLAN-VLAN-MIB", "cwvlWlanEncryptionMandatory"), ("CISCO-WLAN-VLAN-MIB", "cwvlWlanMicAlgorithm"), ("CISCO-WLAN-VLAN-MIB", "cwvlWlanWepKeyPermuteAlgorithm"), ("CISCO-WLAN-VLAN-MIB", "cwvlWlanWepKeyHashing"), ("CISCO-WLAN-VLAN-MIB", "cwvlWlanEncryptionAlgorithm"), ("CISCO-WLAN-VLAN-MIB", "cwvlWlanRowStatus"), ("CISCO-WLAN-VLAN-MIB", "cwvlWlanNUcastKeyLen"), ("CISCO-WLAN-VLAN-MIB", "cwvlWlanNUcastKeyValue"), ("CISCO-WLAN-VLAN-MIB", "cwvlWlanWepChangeNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWlanDot11VlanConfigGroup = ciscoWlanDot11VlanConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoWlanDot11VlanConfigGroup.setDescription('Per VLAN based configurations for IEEE 802.11 wireless LAN.')
ciscoWlanVlanNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 268, 2, 2, 3)).setObjects(("CISCO-WLAN-VLAN-MIB", "ciscoWlanVlanWepChangeNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWlanVlanNotificationGroup = ciscoWlanVlanNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoWlanVlanNotificationGroup.setDescription('This is the notification group for the CISCO-WLAN-VLAN-MIB.')
mibBuilder.exportSymbols("CISCO-WLAN-VLAN-MIB", cwvlVoIPVlanEnabled=cwvlVoIPVlanEnabled, cwvlWlanWepKeyPermuteAlgorithm=cwvlWlanWepKeyPermuteAlgorithm, cwvlPublicVlanId=cwvlPublicVlanId, ciscoWlanVlanMIBGroups=ciscoWlanVlanMIBGroups, cwvlWlanNUcastKeyIndex=cwvlWlanNUcastKeyIndex, cwvlWlanNUcastKeyValue=cwvlWlanNUcastKeyValue, cwvlWlanVlanId=cwvlWlanVlanId, CwvlVlanIdOrZero=CwvlVlanIdOrZero, ciscoWlanVlanMIBCompliance=ciscoWlanVlanMIBCompliance, ciscoWlanVlanMIBObjects=ciscoWlanVlanMIBObjects, cwvlWlanDot1qEncapEnabled=cwvlWlanDot1qEncapEnabled, ciscoWlanVlanMIB=ciscoWlanVlanMIB, cwvlWlanRowStatus=cwvlWlanRowStatus, cwvlWlanWepKeyHashing=cwvlWlanWepKeyHashing, cwvlWlanEncryptionMandatory=cwvlWlanEncryptionMandatory, cwvlWlanEncryptionAlgorithm=cwvlWlanEncryptionAlgorithm, cwvlWlanWepChangeNotifEnabled=cwvlWlanWepChangeNotifEnabled, ciscoWlanVlanMIBNotifications=ciscoWlanVlanMIBNotifications, cwvlDot11VlanConfig=cwvlDot11VlanConfig, cwvlVoIPVlanId=cwvlVoIPVlanId, cwvlWlanNUcastKeyTable=cwvlWlanNUcastKeyTable, cwvlWlanNUcastKeyEntry=cwvlWlanNUcastKeyEntry, cwvlWlanNUcastKeyLen=cwvlWlanNUcastKeyLen, cwvlRoamDomainConfig=cwvlRoamDomainConfig, cwvlWlanVlanTable=cwvlWlanVlanTable, cwvlWlanNUcastKeyRotateInterval=cwvlWlanNUcastKeyRotateInterval, ciscoWlanVlanMIBCompliances=ciscoWlanVlanMIBCompliances, cwvlWlanMicAlgorithm=cwvlWlanMicAlgorithm, ciscoWlanVlanNotificationGroup=ciscoWlanVlanNotificationGroup, cwvlWlanEnabled=cwvlWlanEnabled, ciscoWlanVlanMIBConformance=ciscoWlanVlanMIBConformance, cwvlWlanEncryptionMode=cwvlWlanEncryptionMode, cwvlBridgingNativeVlanId=cwvlBridgingNativeVlanId, PYSNMP_MODULE_ID=ciscoWlanVlanMIB, ciscoWlanDot11VlanConfigGroup=ciscoWlanDot11VlanConfigGroup, cwvlWlanVlanEntry=cwvlWlanVlanEntry, ciscoWlanVlanWepChangeNotif=ciscoWlanVlanWepChangeNotif, ciscoWlanRoamDomainGroup=ciscoWlanRoamDomainGroup)
