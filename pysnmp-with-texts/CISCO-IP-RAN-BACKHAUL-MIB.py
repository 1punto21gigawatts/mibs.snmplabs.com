#
# PySNMP MIB module CISCO-IP-RAN-BACKHAUL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-IP-RAN-BACKHAUL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:02:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InterfaceIndex, ifIndex, InterfaceIndexOrZero, ifDescr = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex", "InterfaceIndexOrZero", "ifDescr")
InetAddress, InetPortNumber, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetPortNumber", "InetAddressType")
PerfCurrentCount, PerfIntervalCount = mibBuilder.importSymbols("PerfHist-TC-MIB", "PerfCurrentCount", "PerfIntervalCount")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ObjectIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, IpAddress, Bits, iso, Gauge32, Counter32, NotificationType, TimeTicks, ModuleIdentity, Integer32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "IpAddress", "Bits", "iso", "Gauge32", "Counter32", "NotificationType", "TimeTicks", "ModuleIdentity", "Integer32", "MibIdentifier")
DisplayString, TruthValue, TextualConvention, AutonomousType, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention", "AutonomousType", "TimeStamp")
ciscoIpRanBackHaulMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 483))
ciscoIpRanBackHaulMIB.setRevisions(('2010-03-24 00:00', '2007-05-30 00:00', '2006-08-25 00:00', '2005-10-18 00:00', '2005-09-13 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoIpRanBackHaulMIB.setRevisionsDescriptions(('The following tables are now obsolete and the information provided in them can be calculated using the objects in the cirbhShortHaulBulkTable. cirbhShortHaulHistoryTable cirbhBackHaulTable cirbhBackHaulShortHaulTable cirbhBackHaulHistoryTable cirbhBackHaulStatsTable cirbhBackHaulStatsHistoryTable The following scalars are no longer used in implementation of MIB. cirbhBackHaulStatsInterval cirbhBackHaulStatsEntries cirbhBackHaulAcceptableThreshold cirbhBackHaulWarningThreshold cirbhBackHaulOverloadedThreshold cirbhBackHaulUtilInterval cirbhUtilNotifEnabled The following notifications are now obsolete and not supported. ciscoIpRanBackHaulRcvdUtil ciscoIpRanBackHaulSentUtil Changes to Compliance and Conformance Statements Changed status to obsolete ciscoIpRanBackHaulMIBCompliance ciscoIpRanBackHaulMIBComplianceRev1 ciscoIpRanBackHaulMIBComplianceRev2 ciscoIpRanBackHaulShortHaulGroup ciscoIpRanBackHaulHistoryGroup ciscoIpRanBackHaulNotifGroup ciscoIpRanBackHaulHistoryGroupRev2 Added following as active ciscoIpRanBackHaulMIBComplianceRev3 ciscoIpRanBackHaulHistoryGroupRev3', 'Added the cirbhInfoOptimizeTraffic object to the cirbhInfoTable. Added OBJECT-GROUP ciscoIpRanBackHaulConfigGroupSup3 and MODULE-COMPLIANCE ciscoIpRanBackHaulMIBComplianceRev2.', 'The following tables, objects and notifications have been deprecated. Scalars cirbhBackHaulStatsInterval cirbhBackHaulStatsEntries cirbhBackHaulAcceptableThreshold cirbhBackHaulWarningThreshold cirbhBackHaulOverloadedThreshold cirbhBackHaulUtilInterval cirbhUtilNotifEnabled cirbhErrorsTable cirbhBackHaulTable cirbhBackHaulShortHaulTable cirbhBackHaulHistoryTable cirbhBackHaulStatsTable cirbhBackHaulStatsHistoryTable The following tables and objects have been added. cirbhInfoTable cirbhInfoAdjectSerialNum cirbhInfoAdjectVendorType cirbhInfoBackhaulRxIfIndex cirbhInfoBackhaulTxIfIndex cirbhInfoShBulkLastIndex cirbhGsmErrorsTable cirbhUmtsErrorsTable cirbhCongestionTable cirbhShortHaulBulkTable', 'Added cirbhUmtsConnectionRootIfIndex object and cirbhBackHaulShortHaulTable.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoIpRanBackHaulMIB.setLastUpdated('201005040000Z')
if mibBuilder.loadTexts: ciscoIpRanBackHaulMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoIpRanBackHaulMIB.setContactInfo('Cisco Systems, Inc Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-ran-o@cisco.com')
if mibBuilder.loadTexts: ciscoIpRanBackHaulMIB.setDescription('This MIB provides information on the IP-RAN traffic from cell site to aggregation site in the following situations. In an GSM environment the cell site will be the Base station Transceiver System(BTS) and the aggregation site will be the Base Station Controller(BSC). In the UMTS environment the cell site will be the B-Node and the aggregation site will Radio Network Controller(RNC). There are two typical type backhaul, also know as longhaul, links. The traditional backhaul connection consists of a PPP multilink containing two or more E1 or T1 links or ATM or ATM/IMA. The alternate backhaul is traffic transported using IP cloud. Simple back-to-back configuration --------------------------------- This setup consists of two devices that support a limited number of GSM and UMTS links. They are deployed in pairs and inserted between the existing BTS device and BSC device. BTS site BSC site GSM-Abis GSM-Abis ----|||||||| Backhaul ||||||||---- ----| |---------------| |---- ----| |---------------| |---- |||||||| |||||||| RNC B-Node site RNC UMTS UMTS ----|||||||| Backhaul ||||||||---- ----| |---------------| |---- ----| |---------------| |---- |||||||| |||||||| | | |-----------------------| Alternate backhaul over IP cloud Aggregate node configuration ---------------------------- This configuration consists of one aggregate node located at BSC site and several devices at BTS sites. The aggregate device has a seperate backhaul link to each BTS site. BTS site BSC site Aggregate GSM GSM ----|||||||| Backhaul ||||||||---- ----| |---------------| |---- ----| |---------------| |---- |||||||| | | . | | . . | | . GSM . | | . ----|||||||| Backhaul | |---- ----| |---------------| |---- ----| |---------------| |---- |||||||| |||||||| RNC B-Node UMTS UMTS ----|||||||| Backhaul ||||||||---- ----| |---------------| |---- ----| |---------------| |---- |||||||| | | | Alternate | | | .... | | -------. . | | . IP . | | . Cloud.-----| | . . | | -------. . | | | ...... | | | Backhaul | | UMTS | | | ----|||||||| Backhaul | |---- ----| |---------------| |---- ----| |---------------| |---- |||||||| |||||||| Compression Multiplexing | BSC <---------->|||||||| V ||||||||<---------->BTS . GSM . | |<---->| | . GSM . . A(bis) . | |<---->| | . A(bis) . <---------->|||||||| ||||||||<----------> A A | | ShortHaul BackHaul Multiple E1/T1 Back Haul Links Entries in these tables cannot be created or deleted by the network management system. All entries are created or deleted by the agent. Shorthaul interfaces support the following protocols. Protocol ifType -------- ---------------------------- GSM-Abis propPointToPointSerial(22) UMTS-iub atm(37) UMTS/IMA atmSubInterface(134) aal5(49) ifType.44 = atmIma(107) The following list provides the currently allowed backhaul interfaces types. Additional interfaces types will be added as they are supported. ifType --------------------------- ethernetCsmacd(6) ppp(23) as Multilink bundle pppMultilinkBundle(108) In order to manage the IP-RAN optimization solution, two key factors must be monitored. The first and most important is the amount of traffic sent over the backhaul interface. The second is compression efficiency which has a direct impact amount of traffic placed backhaul link. MIB Structure ------------- The MIB has the following structure. Shorthaul information tables: cirbhInfoTable Shorthaul Alarm Information tables cirbhGsmAlarmTable cirbhUmtsConnectionTable cirbhUmtsAlarmTable Shorthaul statistics tables cirbhStatsTable cirbhErrorsTable(deprecated) cirbhShortHaulHistoryTable(obsolete) cirbhCongestionTable cirbhGsmErrorsTable(replaces cirbhErrorsTable) cirbhUmtsErrorsTable(replaces cirbhErrorsTable) Backhaul information tables cirbhBackHaulTable(obsolete) Backhaul statistics tables cirbhBackHaulHistoryTable(obsolete) cirbhBackHaulStatsTable(obsolete) cirbhBackHaulStatsHistoryTable(deprecated) Abbreviations: A-bis Interface between BSC and BTS AAL2 ATM Adaptation Layer type 2 AAL5 ATM Adaptation Layer type 5 AIM Advanced Interface Module AgNode Aggregation Node ALCAP Access Link Control Application Part AMR Adaptive Multi-Rate speech codec ATM Asynchronous Transfer Mode BCH Broadcast Channel BSC Base Station Controller. BTS Base Station Transceiver System CDF CID Definition Field CID Channel IDentification CPCH Common Packet Channel DCH Dedicated Channel DSCH Downlink Shared Channel DTX Discontinuous Transmission (mechanism) FACH Forward Link Access Channel GSM Global System for Mobile communications IMA Inverse Multiplexing for ATM Iub Node B to RNC interface OC3 Optical Carrier 3 OSF OffSet Field LAPD Link Access Protocol on Dm Channel O&M Operations and Maintenance MLPPP Multi-Link PPP MS Mobile Station (Handset) NBAP Node B Application Part NNI Network to Network Interface Node-B Node B PCH Paging Channel PVC Permanent Virtual Circuit RAN Radio Access Network SVC Switched Virtual Circuit RACH Random Access Channel RNC Radio Network Controller SAR Segment Assembly Reassembly SDC Traffic Channel SDH Signaling Channel SPVC Soft Permanent Virtual Circuit SSCOP Service Specific Connection Oriented Protocol STC Signaling Transport Converter STM-1 Synchronous Transport Module type 1 TRAU Transcoder Unit UMTS Universal Mobile Telecommunications System UNI User to Network Interface USCH Uplink Shared Channel UTRAN UMTS Terrestrial Radio Access Network VCI Virtual Channel Identifier VPI Virtual Path Identifier')
ciscoIpRanBackHaulMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 483, 0))
ciscoIpRanBackHaulMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 483, 1))
ciscoIpRanBackHaulMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 483, 2))
cirbhScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 1))
cirbhObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2))
cirbhNotifEnables = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 3))
cirbhShortHaul = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1))
cirbhShortHaulInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 1))
cirbhShortHaulAlarmInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 2))
cirbhShortHaulStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3))
cirbhBackHaul = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 2))
cirbhBackHaulInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 2, 1))
cirbhBackHaulStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 2, 2))
class CirbhAlarmState(TextualConvention, Integer32):
    description = "Alarm states of local and remote interfaces. These states apply to both GSM and UMTS interfaces. 'blue' - Indicates a problem at the remote end. The alarm generate by the remote interface in the E1/T1 data stream is sent and no other action is required. 'green' - No alarm. 'red' - Indicates local interface problem. A-bis: The interface has not received synchronization from the GSM device. Device stops transmitting backhaul samples. 'yellow' - Indicates receive problem in the local device. The remote device stops transmitting backhaul data and indicates a blue alarm. 'unavailable' - Indicates the alarms state is not available. This state only applies to remote and occurs when peer connection is inactive."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("blue", 1), ("green", 2), ("red", 3), ("yellow", 4), ("unavailable", 5))

class CirbhBackHaulUtilization(TextualConvention, Integer32):
    description = 'A percentage representing the average utilization of backhaul interface.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 100)

class CirbhBackHaulUtilizationState(TextualConvention, Integer32):
    description = "BackHaul Utilization State: 'acceptable' - traffic for a specified direction is at the acceptable level. 'warning' - traffic for a specified direction is above acceptable level but below the overloaded level. 'overloaded' - traffic for a specified direction has reached or exceeds overloaded level"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("acceptable", 1), ("warning", 2), ("overloaded", 3))

class CirbhCommpressInterfaceRate(TextualConvention, Unsigned32):
    description = 'The traffic rate of data received from GSM or UMTS interface after data has been compressed. The transmission compressed interface rate is calculated after data compression and prior to transmission on backhaul. The receive compression interface rate is calculated after data is received and prior to decompression.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 4294967295)

class CirbhConnectGsmState(TextualConvention, Integer32):
    description = "The state of the GSM connection: 'connected' - The device is monitoring local and remote alarm status. 'disconnected' - The system ignores the local alarm status. The local transmitter on the short-haul is disabled. Capability messages are transmitted to the remote describing the provisioning. The system stays disconnected until the remote capabilities are known and the peer state is transitioned to connected. 'sendConnect' - One or more attempts have been made to connect to remote peer. 'recConnect' - The local-peer has received a connect request from the remote-peer. 'connectedRej' - Connection was rejected. 'ackConnect' - The initial connect request was sent and acknowledged by remote-peer. The local-peer is now waiting for a connect request from the remote-peer. 'connectedCheck' - The local-peer has reason to believe its remote-peer has failed. Additional tests are being processed to verify peer's state."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("connected", 1), ("disconnected", 2), ("sendConnect", 3), ("recConnect", 4), ("connectedRej", 5), ("ackConnect", 6), ("connectedCheck", 7))

class CirbhConnectUmtsState(TextualConvention, Integer32):
    description = "The state of the UMTS connection: 'init' - The connection is starting initialization process. 'starting' - The shorthaul interface is administratively active but the backhaul interface is down. 'closed' - The backhaul interface is active but shorthaul is administratively closed. 'stopped' - Unable to connect to peer in specified time interval. Additional attempts will be tried based on peer request or restart timers. 'closing' - Connection closed by administration request. 'stopping' - Connection shutdown by peer's Term-Request. Will transition to stopped state. 'connectSent' - Connection request sent to peer. 'ackReceived' - Connection request sent and acknowledgement has been received from peer. Now waiting for peer's connection request. 'ackSent' - Connection request received and acknowledgement has been sent to peer. Connection request sent and waiting for peer's acknowledgement. 'open' - Connection open and available for traffic."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("init", 1), ("starting", 2), ("closed", 3), ("stopped", 4), ("closing", 5), ("stopping", 6), ("connectSent", 7), ("ackReceived", 8), ("ackSent", 9), ("open", 10))

class CirbhHistoryIndex(TextualConvention, Unsigned32):
    description = 'The system maintains a system wide counter that is incremented once a second. All tables that store historical informations should use the provided integer to that data from different tables can be easily compared and referenced. The implementations should ensure that the counters will not wrap and is only reset when device is reloaded.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

class CirbhProtocol(TextualConvention, Integer32):
    description = "The protocol used between BSC and BTS. 'undefined' : Protocol not defined. 'gsmAbis' : Global System for Mobile communications A-bis Interface between BSC and BTS. 'umtsIub' : Universal Mobile Telecommunications System Node B to RNC interface."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("undefined", 1), ("gsmAbis", 2), ("umtsIub", 3))

class CirbhRawInterfaceRate(TextualConvention, Unsigned32):
    description = 'The rate of traffic, in bits per second, on an interface in a particular direction prior to optimization for the following flows: Traffic received on UMTS or GSM-Abis interface prior to compression and placement on backhaul interface(Multilink). Traffic received from backhaul interface(Multilink) after decompression prior to transmittion on UMTS or GSM-Abis interface.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 4294967295)

class CirbhRedundancyState(TextualConvention, Integer32):
    description = "The Redundancy State of an interface. Used to indicate which device was current owner of interface. 'active' - Active owner of interface. 'standby' - Standby owner of interface."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("active", 1), ("standby", 2))

class CirbhShortHaulUtilization(TextualConvention, Integer32):
    description = 'A percentage representing the average load over one second as a percent of E1 or T1.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class CirbhTrafficDirection(TextualConvention, Integer32):
    description = 'Direction of traffic on an interface.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("receive", 1), ("transmit", 2))

class CirbhTrafficType(TextualConvention, Integer32):
    description = "The types of traffic on backhaul interface. 'all' - All types of traffic 'gsm' - Only GSM based traffic 'umts' - Only UMTS based traffic"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("all", 1), ("gsm", 2), ("umts", 3))

cirbhSnmpTrafficMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undefined", 1), ("inBand", 2), ("outOfBand", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirbhSnmpTrafficMode.setStatus('current')
if mibBuilder.loadTexts: cirbhSnmpTrafficMode.setDescription("This object describes the mode of SNMP traffic for this device in relationship to connectivity to network management station. This will be used to define default behavior for the device based on the on available bandwidth for management. 'undefined' : Traffic mode is not defined. 'inBand' : SNMP traffic uses same physical interfaces as voice traffic. 'outOfBand' : SNMP traffic does not use same physical interfaces as voice traffic.")
cirbhLocation = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undefined", 1), ("aggSite", 2), ("cellSite", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirbhLocation.setStatus('current')
if mibBuilder.loadTexts: cirbhLocation.setDescription("This object provides information on location of the device to aid in topology display. 'undefined' : not defined. 'aggSite' : Located at Base Station Controller or or Radio Network Controller site. 'cellSite' : Located at Base Station Transceiver System or Node B site.")
cirbhBackHaulStatsInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(60, 3600)).clone(900)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirbhBackHaulStatsInterval.setStatus('deprecated')
if mibBuilder.loadTexts: cirbhBackHaulStatsInterval.setDescription('The length of the interval used to collect statistics in the cirbhBackHaulStatsTable.')
cirbhBackHaulStatsEntries = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 100)).clone(100)).setUnits('entries').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirbhBackHaulStatsEntries.setStatus('deprecated')
if mibBuilder.loadTexts: cirbhBackHaulStatsEntries.setDescription('The maximum number of entries in the cirbhBackHaulStatsTable table.')
cirbhBackHaulAcceptableThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(20, 100)).clone(60)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirbhBackHaulAcceptableThreshold.setStatus('deprecated')
if mibBuilder.loadTexts: cirbhBackHaulAcceptableThreshold.setDescription("This object is used to specify a level of traffic below which the instances of the cirbhBackHaulRcvdUtilState and cirbhBackHaulSentUtilState objects are marked as 'acceptable'. All changes to this threshold will take effect at the end of the current interval. The value for this object must be less than the values specified by cirbhBackHaulOverloadedThreshold and cirbhBackHaulWarningThreshold objects.")
cirbhBackHaulWarningThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(30, 100)).clone(70)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirbhBackHaulWarningThreshold.setStatus('deprecated')
if mibBuilder.loadTexts: cirbhBackHaulWarningThreshold.setDescription("This object is used to specify a level of traffic were the instances of the cirbhBackHaulRcvdUtilState and cirbhBackHaulSentUtilState objects are marked as 'warning'. All changes to this threshold will take effect at the end of the current interval. The value for this object must be greater than the value specified for the cirbhBackHaulAcceptableThreshold object. Also, the value for this object must be less than or equal to value of the cirbhBackHaulOverloadedThreshold object.")
cirbhBackHaulOverloadedThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(40, 100)).clone(80)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirbhBackHaulOverloadedThreshold.setStatus('deprecated')
if mibBuilder.loadTexts: cirbhBackHaulOverloadedThreshold.setDescription("This object is used to specify a level of traffic were the instances of the cirbhBackHaulRcvdUtilState and cirbhBackHaulSentUtilState objects are marked as 'overloaded'. Changes to this threshold will take effect at the end of the current interval. The value for this object must be greater than the value specified for the cirbhBackHaulAcceptableThreshold object. Also, the value for this object must be greater than or equal to value of the cirbhBackHaulWarningThreshold object. This object will be used to determine the state of the cirbhBackHaulRcvdUtilState and cirbhBackHaulSentUtilState objects.")
cirbhBackHaulUtilInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 3600), ))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirbhBackHaulUtilInterval.setStatus('deprecated')
if mibBuilder.loadTexts: cirbhBackHaulUtilInterval.setDescription('The length of the interval used to suppress generation of the ciscoIpRanBackHaulRcvdUtil and ciscoIpRanBackHaulSentUtil notifications. Notification will not be suppressed when zero value is specified.')
cirbhInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 1, 1), )
if mibBuilder.loadTexts: cirbhInfoTable.setStatus('current')
if mibBuilder.loadTexts: cirbhInfoTable.setDescription('This table provides information on interface used to establish shorthaul connection to BTS or BSC or node B site.')
cirbhInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cirbhInfoTableEntry.setStatus('current')
if mibBuilder.loadTexts: cirbhInfoTableEntry.setDescription('Each entry describes the information used to route GSM and UMTS packets across backhaul for a single GSM or UMTS link.')
cirbhInfoProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 1, 1, 1, 1), CirbhProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhInfoProtocol.setReference('GSM-Abis - 3GPP TS 08.60 V8.2.1 (Rel99) GSM A-bis specification for FR, EFR and AMR UMTS-Iub - 3GPP TS 25.302')
if mibBuilder.loadTexts: cirbhInfoProtocol.setStatus('current')
if mibBuilder.loadTexts: cirbhInfoProtocol.setDescription('Protocol used to indicate type of shorthaul.')
cirbhInfoLocalAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 1, 1, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhInfoLocalAddrType.setStatus('current')
if mibBuilder.loadTexts: cirbhInfoLocalAddrType.setDescription('The type of address specified in the corresponding instance of cirbhConfigLocalIpAddr object.')
cirbhInfoLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 1, 1, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhInfoLocalAddr.setStatus('current')
if mibBuilder.loadTexts: cirbhInfoLocalAddr.setDescription('The local address used to route traffic across backhaul.')
cirbhInfoLocalPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 1, 1, 1, 4), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhInfoLocalPortNumber.setStatus('current')
if mibBuilder.loadTexts: cirbhInfoLocalPortNumber.setDescription('The local port number used to distinguish traffic from this interface when transported over backhaul connection.')
cirbhInfoRemoteAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 1, 1, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhInfoRemoteAddrType.setStatus('current')
if mibBuilder.loadTexts: cirbhInfoRemoteAddrType.setDescription('The type of address in the in the corresponding instance of the cirbhInfoRemoteAddr object.')
cirbhInfoRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 1, 1, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhInfoRemoteAddr.setStatus('current')
if mibBuilder.loadTexts: cirbhInfoRemoteAddr.setDescription('The remote IP address used to route traffic across backhaul.')
cirbhInfoRemotePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 1, 1, 1, 7), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhInfoRemotePortNumber.setStatus('current')
if mibBuilder.loadTexts: cirbhInfoRemotePortNumber.setDescription('The remote port number used to distinguish traffic from this interface when transported over backhaul connection.')
cirbhInfoAdjectSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 1, 1, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhInfoAdjectSerialNum.setStatus('current')
if mibBuilder.loadTexts: cirbhInfoAdjectSerialNum.setDescription('This object provides the serial number of the adjacent device supporting the other side of this shorthaul. This object contains the same value as the corresponding entPhysicalSerialNum object on the adjacent device. The type of object like chassis or module is provided by the cirbhInfoAdjectVendorType object.')
cirbhInfoAdjectVendorType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 1, 1, 1, 9), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhInfoAdjectVendorType.setStatus('current')
if mibBuilder.loadTexts: cirbhInfoAdjectVendorType.setDescription('This object provides the vendor type of the adjacent device supporting other end of this shorthaul. This objectcontains the same value as the corresponding entPhysicalVendorType object on the adjacent device.')
cirbhInfoBackhaulRxIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 1, 1, 1, 10), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhInfoBackhaulRxIfIndex.setStatus('current')
if mibBuilder.loadTexts: cirbhInfoBackhaulRxIfIndex.setDescription('This object provides the ifIndex of the interface used to receive traffic from destination.')
cirbhInfoBackhaulTxIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 1, 1, 1, 11), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhInfoBackhaulTxIfIndex.setStatus('current')
if mibBuilder.loadTexts: cirbhInfoBackhaulTxIfIndex.setDescription('This object provides the ifIndex of the interface used to sent traffic to destination.')
cirbhInfoShBulkLastIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 1, 1, 1, 12), CirbhHistoryIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhInfoShBulkLastIndex.setStatus('current')
if mibBuilder.loadTexts: cirbhInfoShBulkLastIndex.setDescription('The latest value of the cirbhShortHaulBulkHistory object from the cirbhShortHaulBulkHistory table.')
cirbhInfoOptimizeTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 1, 1, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhInfoOptimizeTraffic.setStatus('current')
if mibBuilder.loadTexts: cirbhInfoOptimizeTraffic.setDescription('This object indicate whether the traffic received and sent for this shorthaul interface is optimized.')
cirbhGsmAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 2, 1), )
if mibBuilder.loadTexts: cirbhGsmAlarmTable.setStatus('current')
if mibBuilder.loadTexts: cirbhGsmAlarmTable.setDescription('This table provides alarm information for GSM-Abis interfaces.')
cirbhGsmAlarmTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cirbhGsmAlarmTableEntry.setStatus('current')
if mibBuilder.loadTexts: cirbhGsmAlarmTableEntry.setDescription('Each entry represents the set of alarms that apply to GSM interface.')
cirbhGsmAlarmConnectState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 2, 1, 1, 1), CirbhConnectGsmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhGsmAlarmConnectState.setStatus('current')
if mibBuilder.loadTexts: cirbhGsmAlarmConnectState.setDescription('The state of the connection for GSM interface.')
cirbhGsmAlarmLocalState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 2, 1, 1, 2), CirbhAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhGsmAlarmLocalState.setStatus('current')
if mibBuilder.loadTexts: cirbhGsmAlarmLocalState.setDescription('The local alarm state.')
cirbhGsmAlarmRemoteState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 2, 1, 1, 3), CirbhAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhGsmAlarmRemoteState.setStatus('current')
if mibBuilder.loadTexts: cirbhGsmAlarmRemoteState.setDescription('The remote alarm state.')
cirbhGsmAlarmRedundancyState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 2, 1, 1, 4), CirbhRedundancyState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhGsmAlarmRedundancyState.setStatus('current')
if mibBuilder.loadTexts: cirbhGsmAlarmRedundancyState.setDescription('The redundancy state of the interface')
cirbhUmtsConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 2, 2), )
if mibBuilder.loadTexts: cirbhUmtsConnectionTable.setStatus('current')
if mibBuilder.loadTexts: cirbhUmtsConnectionTable.setDescription('This table provides information associated with UMTS connection between BTS and BSC.')
cirbhUmtsConnectionTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cirbhUmtsConnectionTableEntry.setStatus('current')
if mibBuilder.loadTexts: cirbhUmtsConnectionTableEntry.setDescription('Each Entry represents the set of alarms that apply to UMTS interfaces.')
cirbhUmtsConnectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 2, 2, 1, 1), CirbhConnectUmtsState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhUmtsConnectionState.setStatus('current')
if mibBuilder.loadTexts: cirbhUmtsConnectionState.setDescription('The state of the connection between the UMTS interfaces.')
cirbhUmtsConnectionRedundState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 2, 2, 1, 2), CirbhRedundancyState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhUmtsConnectionRedundState.setStatus('current')
if mibBuilder.loadTexts: cirbhUmtsConnectionRedundState.setDescription('The redundancy state of the interface.')
cirbhUmtsConnectionRootIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 2, 2, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhUmtsConnectionRootIfIndex.setStatus('current')
if mibBuilder.loadTexts: cirbhUmtsConnectionRootIfIndex.setDescription('The root interface used to transport and receive UMTS traffic as follows. ATM: ATM0/0.0-aal5 layer -> ATM0/0-atm layer. IMA ATM0/IMA0.1-aal5 layer -> ATM0/IMA0')
cirbhUmtsAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 2, 3), )
if mibBuilder.loadTexts: cirbhUmtsAlarmTable.setStatus('current')
if mibBuilder.loadTexts: cirbhUmtsAlarmTable.setDescription('This table provides information on alarm states for UMTS-ATM interfaces.')
cirbhUmtsAlarmTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cirbhUmtsAlarmTableEntry.setStatus('current')
if mibBuilder.loadTexts: cirbhUmtsAlarmTableEntry.setDescription('Each entry provides information about the alarms for each ATM interface used to configure the shorthaul UMTS interface.')
cirbhUmtsAlarmRxLocalState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 2, 3, 1, 1), CirbhAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhUmtsAlarmRxLocalState.setStatus('current')
if mibBuilder.loadTexts: cirbhUmtsAlarmRxLocalState.setDescription('The local receive alarm state.')
cirbhUmtsAlarmRxRemoteState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 2, 3, 1, 2), CirbhAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhUmtsAlarmRxRemoteState.setStatus('current')
if mibBuilder.loadTexts: cirbhUmtsAlarmRxRemoteState.setDescription('The remote receive alarm state.')
cirbhUmtsAlarmTxLocalState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 2, 3, 1, 3), CirbhAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhUmtsAlarmTxLocalState.setStatus('current')
if mibBuilder.loadTexts: cirbhUmtsAlarmTxLocalState.setDescription('The local transmit alarm state.')
cirbhUmtsAlarmTxRemoteState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 2, 3, 1, 4), CirbhAlarmState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhUmtsAlarmTxRemoteState.setStatus('current')
if mibBuilder.loadTexts: cirbhUmtsAlarmTxRemoteState.setDescription('The remote transmit alarm state.')
cirbhStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 1), )
if mibBuilder.loadTexts: cirbhStatsTable.setStatus('current')
if mibBuilder.loadTexts: cirbhStatsTable.setDescription('This table provides measurements on bytes and packets sent or received on a per interface basis. It is important to note that this table shares the same index with the cirbhInfoTable table the ifIndex can be used to associate information from both tables.')
cirbhStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cirbhStatsTableEntry.setStatus('current')
if mibBuilder.loadTexts: cirbhStatsTableEntry.setDescription('This entry provides measurements on shorthaul interfaces to allow compression efficency to be calculated.')
cirbhStatsRcvdSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhStatsRcvdSamples.setStatus('current')
if mibBuilder.loadTexts: cirbhStatsRcvdSamples.setDescription('For GSM-Abis interfaces, the count of samples received on interface. For UMTS interfaces, the number of packets received on interface.')
cirbhStatsSentSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhStatsSentSamples.setStatus('current')
if mibBuilder.loadTexts: cirbhStatsSentSamples.setDescription('For GSM-Abis interfaces, the count of samples sent on interface. For UMTS interfaces, the number of packets sent on this interface.')
cirbhStatsRcvdBackHaulPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 1, 1, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhStatsRcvdBackHaulPackets.setStatus('current')
if mibBuilder.loadTexts: cirbhStatsRcvdBackHaulPackets.setDescription('The count of packets received from backhaul that contained data for this interface.')
cirbhStatsSentBackHaulPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 1, 1, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhStatsSentBackHaulPackets.setStatus('current')
if mibBuilder.loadTexts: cirbhStatsSentBackHaulPackets.setDescription('The count of packets transmitted on backhaul that contained data from this interface.')
cirbhStatsRcvdBackHaulBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 1, 1, 5), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhStatsRcvdBackHaulBytes.setStatus('current')
if mibBuilder.loadTexts: cirbhStatsRcvdBackHaulBytes.setDescription('The count of bytes received from backhaul that contained data for this interface.')
cirbhStatsSentBackHaulBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 1, 1, 6), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhStatsSentBackHaulBytes.setStatus('current')
if mibBuilder.loadTexts: cirbhStatsSentBackHaulBytes.setDescription('The count of bytes transmitted on backhaul that contained data from this interface.')
cirbhErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 2), )
if mibBuilder.loadTexts: cirbhErrorsTable.setStatus('deprecated')
if mibBuilder.loadTexts: cirbhErrorsTable.setDescription('This table provides information on the errors that can be encountered during the compression and decompression of UMTS and GSM-Abis traffic. UMTS ------------------- | GSM Links -------- --------------| | IP based Multi-link(backhaul) --------------| |----------------------------- --------------| |----------------------------- --------')
cirbhErrorsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cirbhErrorsTableEntry.setStatus('deprecated')
if mibBuilder.loadTexts: cirbhErrorsTableEntry.setDescription('Each entry provides account of various types of errors encountered on GSM and UMTS interfaces.')
cirbhErrorsBhPeerNotReadyDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 2, 1, 1), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhErrorsBhPeerNotReadyDrops.setStatus('deprecated')
if mibBuilder.loadTexts: cirbhErrorsBhPeerNotReadyDrops.setDescription('The count of packets dropped on backhaul because peer was not ready.')
cirbhErrorsBhPeerNotActiveDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 2, 1, 2), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhErrorsBhPeerNotActiveDrops.setStatus('deprecated')
if mibBuilder.loadTexts: cirbhErrorsBhPeerNotActiveDrops.setDescription('The count of packets dropped on backhaul because peer was reachable but not in active state.')
cirbhErrorsBhInvalidPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 2, 1, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhErrorsBhInvalidPackets.setStatus('deprecated')
if mibBuilder.loadTexts: cirbhErrorsBhInvalidPackets.setDescription('The number of backhaul packets that were received and dropped because they contained invalid information.')
cirbhErrorsBhLostRcvdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 2, 1, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhErrorsBhLostRcvdPackets.setStatus('deprecated')
if mibBuilder.loadTexts: cirbhErrorsBhLostRcvdPackets.setDescription('The number of backhaul packets expected to be received but never arrived.')
cirbhErrorsBhLostSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 2, 1, 5), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhErrorsBhLostSentPackets.setStatus('deprecated')
if mibBuilder.loadTexts: cirbhErrorsBhLostSentPackets.setDescription('The number of backhaul packets sent but never were received by peer.')
cirbhErrorsBhMissedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 2, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhErrorsBhMissedPackets.setStatus('deprecated')
if mibBuilder.loadTexts: cirbhErrorsBhMissedPackets.setDescription('The value of this object is the sum total of the values of the corresponding instances of the following objects: cirbhErrorsBhMissedLatePackets cirbhErrorsBhMissedLostPackets cirbhErrorsBhMissedNoMemPackets cirbhErrorsBhMissedResetPackets')
cirbhErrorsBhMissedLatePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 2, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhErrorsBhMissedLatePackets.setStatus('deprecated')
if mibBuilder.loadTexts: cirbhErrorsBhMissedLatePackets.setDescription('The number of packets missed on backhaul because they arrived past the allowed time frame.')
cirbhErrorsBhMissedLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 2, 1, 8), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhErrorsBhMissedLostPackets.setStatus('deprecated')
if mibBuilder.loadTexts: cirbhErrorsBhMissedLostPackets.setDescription('The number of packets missed on backhaul because they were lost on backhaul.')
cirbhErrorsBhMissedNoMemPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 2, 1, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhErrorsBhMissedNoMemPackets.setStatus('deprecated')
if mibBuilder.loadTexts: cirbhErrorsBhMissedNoMemPackets.setDescription('The number of packets missed on backhaul for lack of available memory to allocate packet.')
cirbhErrorsBhMissedResetPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 2, 1, 10), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhErrorsBhMissedResetPackets.setStatus('deprecated')
if mibBuilder.loadTexts: cirbhErrorsBhMissedResetPackets.setDescription('The number of packets missed on backhaul because the of a reset event.')
cirbhErrorsDecompFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 2, 1, 11), Counter32()).setUnits('failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhErrorsDecompFailures.setStatus('deprecated')
if mibBuilder.loadTexts: cirbhErrorsDecompFailures.setDescription('The number of times information contained in packet could not be decompressed.')
cirbhErrorsCompFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 2, 1, 12), Counter32()).setUnits('failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhErrorsCompFailures.setStatus('deprecated')
if mibBuilder.loadTexts: cirbhErrorsCompFailures.setDescription('The number of times the information contained in the packet could not be compressed. This counter is incremented for all types of compression errors.')
cirbhErrorsCompNoPacketFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 2, 1, 13), Counter32()).setUnits('failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhErrorsCompNoPacketFailures.setStatus('deprecated')
if mibBuilder.loadTexts: cirbhErrorsCompNoPacketFailures.setDescription('The number of times compression failed because packet was unavailable.')
cirbhErrorsCompNoIntFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 2, 1, 14), Counter32()).setUnits('failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhErrorsCompNoIntFailures.setStatus('deprecated')
if mibBuilder.loadTexts: cirbhErrorsCompNoIntFailures.setDescription('The number of times compression failed because route to peer was not available.')
cirbhErrorsCompIntDownFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 2, 1, 15), Counter32()).setUnits('failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhErrorsCompIntDownFailures.setStatus('deprecated')
if mibBuilder.loadTexts: cirbhErrorsCompIntDownFailures.setDescription('The number of times compression failed because interface was down.')
cirbhErrorsCompEncapFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 2, 1, 16), Counter32()).setUnits('failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhErrorsCompEncapFailures.setStatus('deprecated')
if mibBuilder.loadTexts: cirbhErrorsCompEncapFailures.setDescription('The number of times compression failed because of encapsulation errors.')
cirbhErrorsCompQosDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 2, 1, 17), Counter32()).setUnits('drops').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhErrorsCompQosDrops.setStatus('deprecated')
if mibBuilder.loadTexts: cirbhErrorsCompQosDrops.setDescription('The number of times compression failed because of quality of service errors or traffic load.')
cirbhShortHaulHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 3), )
if mibBuilder.loadTexts: cirbhShortHaulHistoryTable.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhShortHaulHistoryTable.setDescription('This table provides historical information on the amount of backhaul traffic contributed by each interface.')
cirbhShortHaulHistoryTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-IP-RAN-BACKHAUL-MIB", "cirbhShortHaulHistory"))
if mibBuilder.loadTexts: cirbhShortHaulHistoryTableEntry.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhShortHaulHistoryTableEntry.setDescription('Each entry represents the average traffic for last second. Each entry provides information on traffic rates for raw and compressed data.')
cirbhShortHaulHistory = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 3, 1, 1), CirbhHistoryIndex())
if mibBuilder.loadTexts: cirbhShortHaulHistory.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhShortHaulHistory.setDescription('An index used to access history of cirbhShortHaulHistoryTable objects.')
cirbhShortHaulRcvdRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 3, 1, 2), CirbhRawInterfaceRate()).setUnits('bytes/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhShortHaulRcvdRate.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhShortHaulRcvdRate.setDescription('The rate of traffic received from this interface to be sent on backhaul prior to compression.')
cirbhShortHaulSentRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 3, 1, 3), CirbhRawInterfaceRate()).setUnits('bytes/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhShortHaulSentRate.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhShortHaulSentRate.setDescription('The rate of traffic sent out from this interface after traffic was decompressed.')
cirbhShortHaulRcvdCompressRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 3, 1, 4), CirbhCommpressInterfaceRate()).setUnits('bytes/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhShortHaulRcvdCompressRate.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhShortHaulRcvdCompressRate.setDescription('The rate of traffic received into this interface to be sent on backhaul after compression.')
cirbhShortHaulSentCompressRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 3, 1, 5), CirbhCommpressInterfaceRate()).setUnits('bytes/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhShortHaulSentCompressRate.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhShortHaulSentCompressRate.setDescription('The rate of traffic received from backhaul and prior to decompression.')
cirbhShortHaulTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 3, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhShortHaulTimeStamp.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhShortHaulTimeStamp.setDescription('Time when sample was collected.')
cirbhShortHaulRcvdUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 3, 1, 7), CirbhShortHaulUtilization()).setUnits('percent of DS load').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhShortHaulRcvdUtilization.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhShortHaulRcvdUtilization.setDescription('Amount of traffic that was receive from backhaul before decompression express as load on E1 or T1.')
cirbhShortHaulSentUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 3, 1, 8), CirbhShortHaulUtilization()).setUnits('percent of DS load').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhShortHaulSentUtilization.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhShortHaulSentUtilization.setDescription('Amount of traffic that was send on after compression express as load on E1 or T1.')
cirbhCongestionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 4), )
if mibBuilder.loadTexts: cirbhCongestionTable.setStatus('current')
if mibBuilder.loadTexts: cirbhCongestionTable.setDescription('This table provides information on congestion mechanism for shorthaul interfaces.')
cirbhCongestionTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cirbhCongestionTableEntry.setStatus('current')
if mibBuilder.loadTexts: cirbhCongestionTableEntry.setDescription('Each entry represents single shorthaul interface.')
cirbhCongestionEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 4, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhCongestionEnabled.setStatus('current')
if mibBuilder.loadTexts: cirbhCongestionEnabled.setDescription('This object indicates congestion mechanisms have been enabled for shorthaul interface.')
cirbhCongestionDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhCongestionDrops.setStatus('current')
if mibBuilder.loadTexts: cirbhCongestionDrops.setDescription("This object provide the number packets or cells that were dropped due to congestion. When the cirbhInfoProtocol is 'gsmAbis' object indicates the number of packets dropped. When the cirbhInfoProtocol is 'umtsIub' object indicates the number of cells dropped.")
cirbhCongestionDroppedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 4, 1, 3), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhCongestionDroppedBytes.setStatus('current')
if mibBuilder.loadTexts: cirbhCongestionDroppedBytes.setDescription('The number of bytes dropped due to congestion control mechanisms.')
cirbhCongestionEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 4, 1, 4), Counter32()).setUnits('occurences').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhCongestionEvents.setStatus('current')
if mibBuilder.loadTexts: cirbhCongestionEvents.setDescription('The number of times congestion mechanism was engaged.')
cirbhCongestionActive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 4, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhCongestionActive.setStatus('current')
if mibBuilder.loadTexts: cirbhCongestionActive.setDescription('This object indicates whether congestion mechanism is active.')
cirbhCongestionDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 4, 1, 6), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhCongestionDuration.setStatus('current')
if mibBuilder.loadTexts: cirbhCongestionDuration.setDescription('This object provides number of seconds interface was congested.')
cirbhGsmErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 5), )
if mibBuilder.loadTexts: cirbhGsmErrorsTable.setStatus('current')
if mibBuilder.loadTexts: cirbhGsmErrorsTable.setDescription('This table provides information on the errors that can be encountered during the compression and decompression of GSM-Abis traffic.')
cirbhGsmErrorsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cirbhGsmErrorsTableEntry.setStatus('current')
if mibBuilder.loadTexts: cirbhGsmErrorsTableEntry.setDescription('Each entry represents single shorthaul interface.')
cirbhGsmErrorsPeerNotReadyDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 5, 1, 1), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhGsmErrorsPeerNotReadyDrops.setStatus('current')
if mibBuilder.loadTexts: cirbhGsmErrorsPeerNotReadyDrops.setDescription('The count of packets dropped on backhaul because peer was not ready.')
cirbhGsmErrorsPeerNotActiveDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 5, 1, 2), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhGsmErrorsPeerNotActiveDrops.setStatus('current')
if mibBuilder.loadTexts: cirbhGsmErrorsPeerNotActiveDrops.setDescription('The count of packets dropped on backhaul because peer was reachable but not in active state.')
cirbhGsmErrorsInvalidPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 5, 1, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhGsmErrorsInvalidPackets.setStatus('current')
if mibBuilder.loadTexts: cirbhGsmErrorsInvalidPackets.setDescription('The number of backhaul packets that were received and dropped because they contained invalid information.')
cirbhGsmErrorsLostRcvdPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 5, 1, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhGsmErrorsLostRcvdPackets.setStatus('current')
if mibBuilder.loadTexts: cirbhGsmErrorsLostRcvdPackets.setDescription('The number of backhaul packets expected to be received but never arrived.')
cirbhGsmErrorsLostSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 5, 1, 5), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhGsmErrorsLostSentPackets.setStatus('current')
if mibBuilder.loadTexts: cirbhGsmErrorsLostSentPackets.setDescription('The number of backhaul packets sent but never were received by peer.')
cirbhGsmErrorsMissedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 5, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhGsmErrorsMissedPackets.setStatus('current')
if mibBuilder.loadTexts: cirbhGsmErrorsMissedPackets.setDescription('The value of this object is the sum total of the values of the corresponding instances of the following objects: cirbhGsmErrorsMissedLatePackets cirbhGsmErrorsMissedLostPackets cirbhGsmErrorsMissedNoMemPackets cirbhGsmErrorsMissedResetPackets')
cirbhGsmErrorsMissedLatePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 5, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhGsmErrorsMissedLatePackets.setStatus('current')
if mibBuilder.loadTexts: cirbhGsmErrorsMissedLatePackets.setDescription('The number of packets missed on backhaul because they arrived past the allowed time frame.')
cirbhGsmErrorsMissedLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 5, 1, 8), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhGsmErrorsMissedLostPackets.setStatus('current')
if mibBuilder.loadTexts: cirbhGsmErrorsMissedLostPackets.setDescription('The number of packets missed on backhaul because they were lost on backhaul.')
cirbhGsmErrorsMissedNoMemPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 5, 1, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhGsmErrorsMissedNoMemPackets.setStatus('current')
if mibBuilder.loadTexts: cirbhGsmErrorsMissedNoMemPackets.setDescription('The number of packets missed on backhaul for lack of available memory to allocate packet.')
cirbhGsmErrorsMissedResetPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 5, 1, 10), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhGsmErrorsMissedResetPackets.setStatus('current')
if mibBuilder.loadTexts: cirbhGsmErrorsMissedResetPackets.setDescription('The number of packets missed on backhaul because the of a reset event.')
cirbhGsmErrorsDecompFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 5, 1, 11), Counter32()).setUnits('failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhGsmErrorsDecompFailures.setStatus('current')
if mibBuilder.loadTexts: cirbhGsmErrorsDecompFailures.setDescription('The number of times information contained in packet could not be decompressed.')
cirbhGsmErrorsCompFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 5, 1, 12), Counter32()).setUnits('failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhGsmErrorsCompFailures.setStatus('current')
if mibBuilder.loadTexts: cirbhGsmErrorsCompFailures.setDescription('The number of times the information contained in the packet could not be compressed.')
cirbhGsmErrorsCompNoPacketFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 5, 1, 13), Counter32()).setUnits('failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhGsmErrorsCompNoPacketFailures.setStatus('current')
if mibBuilder.loadTexts: cirbhGsmErrorsCompNoPacketFailures.setDescription('The number of times compression failed because packet was unavailable.')
cirbhGsmErrorsCompNoIntFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 5, 1, 14), Counter32()).setUnits('failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhGsmErrorsCompNoIntFailures.setStatus('current')
if mibBuilder.loadTexts: cirbhGsmErrorsCompNoIntFailures.setDescription('The number of times compression failed because route to peer was not available.')
cirbhGsmErrorsCompIntDownFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 5, 1, 15), Counter32()).setUnits('failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhGsmErrorsCompIntDownFailures.setStatus('current')
if mibBuilder.loadTexts: cirbhGsmErrorsCompIntDownFailures.setDescription('The number of times compression failed because interface was down.')
cirbhGsmErrorsCompEncapFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 5, 1, 16), Counter32()).setUnits('failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhGsmErrorsCompEncapFailures.setStatus('current')
if mibBuilder.loadTexts: cirbhGsmErrorsCompEncapFailures.setDescription('The number of times compression failed because of encapsulation errors.')
cirbhGsmErrorsCompQosDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 5, 1, 17), Counter32()).setUnits('drops').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhGsmErrorsCompQosDrops.setStatus('current')
if mibBuilder.loadTexts: cirbhGsmErrorsCompQosDrops.setDescription('The number of times compression failed because of quality of service errors or traffic load.')
cirbhGsmErrorsFastSendFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 5, 1, 18), Counter32()).setUnits('occurences').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhGsmErrorsFastSendFailures.setStatus('current')
if mibBuilder.loadTexts: cirbhGsmErrorsFastSendFailures.setDescription('Fast send failures.')
cirbhGsmErrorsTxPacketFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 5, 1, 19), Counter32()).setUnits('occurences').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhGsmErrorsTxPacketFailures.setStatus('current')
if mibBuilder.loadTexts: cirbhGsmErrorsTxPacketFailures.setDescription('Unable to transmit GSM packet.')
cirbhGsmErrorsTxNoBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 5, 1, 20), Counter32()).setUnits('occurences').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhGsmErrorsTxNoBuffers.setStatus('current')
if mibBuilder.loadTexts: cirbhGsmErrorsTxNoBuffers.setDescription('Unable to allocate buffer for transmission.')
cirbhGsmErrorsTxResets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 5, 1, 21), Counter32()).setUnits('occurences').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhGsmErrorsTxResets.setStatus('current')
if mibBuilder.loadTexts: cirbhGsmErrorsTxResets.setDescription('Transmission interface resets.')
cirbhGsmErrorsOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 5, 1, 22), Counter32()).setUnits('occurences').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhGsmErrorsOverruns.setStatus('current')
if mibBuilder.loadTexts: cirbhGsmErrorsOverruns.setDescription('Packet was missed because backhaul jitter buffer was ran out of available space.')
cirbhGsmErrorsInterruptFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 5, 1, 23), Counter32()).setUnits('Failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhGsmErrorsInterruptFailures.setStatus('current')
if mibBuilder.loadTexts: cirbhGsmErrorsInterruptFailures.setDescription('Packet was lost because of interrupt failure.')
cirbhGsmErrorsLateArrivals = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 5, 1, 24), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhGsmErrorsLateArrivals.setStatus('current')
if mibBuilder.loadTexts: cirbhGsmErrorsLateArrivals.setDescription('Count of GSM packets that arrived later than the allowed time.')
cirbhGsmErrorsEarlyArrivals = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 5, 1, 25), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhGsmErrorsEarlyArrivals.setStatus('current')
if mibBuilder.loadTexts: cirbhGsmErrorsEarlyArrivals.setDescription('Count of GSM packets that arrived earlier than the allowed time.')
cirbhUmtsErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 6), )
if mibBuilder.loadTexts: cirbhUmtsErrorsTable.setStatus('current')
if mibBuilder.loadTexts: cirbhUmtsErrorsTable.setDescription('This table provides information on the errors that can be encountered during the compression and decompression of UMTS-Iub traffic.')
cirbhUmtsErrorsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cirbhUmtsErrorsTableEntry.setStatus('current')
if mibBuilder.loadTexts: cirbhUmtsErrorsTableEntry.setDescription('Each entry represents single shorthaul interface.')
cirbhUmtsErrorsPeerNotReadyDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 6, 1, 1), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhUmtsErrorsPeerNotReadyDrops.setStatus('current')
if mibBuilder.loadTexts: cirbhUmtsErrorsPeerNotReadyDrops.setDescription('The count of packets dropped on backhaul because peer was not ready.')
cirbhUmtsErrorsInvalidPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 6, 1, 2), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhUmtsErrorsInvalidPackets.setStatus('current')
if mibBuilder.loadTexts: cirbhUmtsErrorsInvalidPackets.setDescription('The number of backhaul packets that were received and dropped because they contained invalid information.')
cirbhUmtsErrorsDecompFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 6, 1, 3), Counter32()).setUnits('failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhUmtsErrorsDecompFailures.setStatus('current')
if mibBuilder.loadTexts: cirbhUmtsErrorsDecompFailures.setDescription('The number of times information contained in packet could not be decompressed.')
cirbhUmtsErrorsCompFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 6, 1, 4), Counter32()).setUnits('failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhUmtsErrorsCompFailures.setStatus('current')
if mibBuilder.loadTexts: cirbhUmtsErrorsCompFailures.setDescription('The number of times the information contained int the packet could not be compressed.')
cirbhUmtsErrorsCompNoPacketFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 6, 1, 5), Counter32()).setUnits('failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhUmtsErrorsCompNoPacketFailures.setStatus('current')
if mibBuilder.loadTexts: cirbhUmtsErrorsCompNoPacketFailures.setDescription('The number of times compression failed because packet was unavailable.')
cirbhUmtsErrorsCompNoIntFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 6, 1, 6), Counter32()).setUnits('failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhUmtsErrorsCompNoIntFailures.setStatus('current')
if mibBuilder.loadTexts: cirbhUmtsErrorsCompNoIntFailures.setDescription('The number of times compression failed because route to peer was not available.')
cirbhUmtsErrorsCompIntDownFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 6, 1, 7), Counter32()).setUnits('failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhUmtsErrorsCompIntDownFailures.setStatus('current')
if mibBuilder.loadTexts: cirbhUmtsErrorsCompIntDownFailures.setDescription('The number of times compression failed because interface was down.')
cirbhUmtsErrorsCompEncapFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 6, 1, 8), Counter32()).setUnits('failures').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhUmtsErrorsCompEncapFailures.setStatus('current')
if mibBuilder.loadTexts: cirbhUmtsErrorsCompEncapFailures.setDescription('The number of times compression failed because of encapsulation errors.')
cirbhUmtsErrorsCompQosDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 6, 1, 9), Counter32()).setUnits('drops').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhUmtsErrorsCompQosDrops.setStatus('current')
if mibBuilder.loadTexts: cirbhUmtsErrorsCompQosDrops.setDescription('The number of times compression failed because of quality of service errors or traffic load.')
cirbhUmtsErrorsShorthaulPakFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 6, 1, 10), Counter32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhUmtsErrorsShorthaulPakFailures.setStatus('current')
if mibBuilder.loadTexts: cirbhUmtsErrorsShorthaulPakFailures.setDescription('Unable to allocate packet used to send data on shorthaul interface.')
cirbhUmtsErrorsUmtsEncapFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 6, 1, 11), Counter32()).setUnits('occurences').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhUmtsErrorsUmtsEncapFailures.setStatus('current')
if mibBuilder.loadTexts: cirbhUmtsErrorsUmtsEncapFailures.setDescription('The UMTS encapsulate failures.')
cirbhUmtsErrorsLocalPvcDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 6, 1, 12), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhUmtsErrorsLocalPvcDrops.setStatus('current')
if mibBuilder.loadTexts: cirbhUmtsErrorsLocalPvcDrops.setDescription('Packet dropped because local PVC was unavailable.')
cirbhUmtsErrorsRemotePvcDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 6, 1, 13), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhUmtsErrorsRemotePvcDrops.setStatus('current')
if mibBuilder.loadTexts: cirbhUmtsErrorsRemotePvcDrops.setDescription('Packet dropped because remote PVC was unavailable.')
cirbhUmtsErrorsBackhaulDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 6, 1, 14), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhUmtsErrorsBackhaulDrops.setStatus('current')
if mibBuilder.loadTexts: cirbhUmtsErrorsBackhaulDrops.setDescription('Packets dropped on backhaul.')
cirbhShortHaulBulkTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 7), )
if mibBuilder.loadTexts: cirbhShortHaulBulkTable.setStatus('current')
if mibBuilder.loadTexts: cirbhShortHaulBulkTable.setDescription('This table provides historical information on the amount of backhaul traffic contributed by each interface.')
cirbhShortHaulBulkTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-IP-RAN-BACKHAUL-MIB", "cirbhShortHaulBulkHistory"))
if mibBuilder.loadTexts: cirbhShortHaulBulkTableEntry.setStatus('current')
if mibBuilder.loadTexts: cirbhShortHaulBulkTableEntry.setDescription('Each entry represents the average traffic for last second. Each entry provides information on traffic rates for raw and compressed data.')
cirbhShortHaulBulkHistory = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 7, 1, 1), CirbhHistoryIndex())
if mibBuilder.loadTexts: cirbhShortHaulBulkHistory.setStatus('current')
if mibBuilder.loadTexts: cirbhShortHaulBulkHistory.setDescription('An index used to access history of cirbhShortHaulBulkDataTable objects.')
cirbhShortHaulBulkTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 7, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhShortHaulBulkTimeStamp.setStatus('current')
if mibBuilder.loadTexts: cirbhShortHaulBulkTimeStamp.setDescription('Time when sample was collected.')
cirbhShortHaulBulkBaseUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 7, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(256, 2147483647))).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhShortHaulBulkBaseUnit.setStatus('current')
if mibBuilder.loadTexts: cirbhShortHaulBulkBaseUnit.setDescription('The Base Unit is an integer used to provide a range of bytes rates provided in the cirbhShortHaulBulkUtil object. All values in the cirbhShortHaulBulkUtil object share the same base unit.')
cirbhShortHaulBulkUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 1, 3, 7, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setUnits('Bytes/Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhShortHaulBulkUtil.setStatus('current')
if mibBuilder.loadTexts: cirbhShortHaulBulkUtil.setDescription('This object provides the amount of traffic transmitted in a particular shorthaul. The object contains 1 to 128 pairs. The length of the octet string can be used to calculate number of pairs. The information is in the following format were each rate is stored as single byte. [rx,tx] * 128 The approximated rate can be calculated by multiplying value from cirbhShortHaulBulkUtil times value in the cirbhShortHaulBulkBaseUnit.')
cirbhBackHaulTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 2, 1, 1), )
if mibBuilder.loadTexts: cirbhBackHaulTable.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhBackHaulTable.setDescription('This table provides information on backHaul links.')
cirbhBackHaulEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 2, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cirbhBackHaulEntry.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhBackHaulEntry.setDescription('Each entry represents a backhaul link between BSC and a particular BTS site.')
cirbhBackHaulAdjectSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 2, 1, 1, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhBackHaulAdjectSerialNum.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhBackHaulAdjectSerialNum.setDescription('This object provides the serial number of the adjacent device supporting the backhaul connection. This object contains the same value as the corresponding entPhysicalSerialNum object. The type of object like chassis or module is provided by the cirbhBackHaulAdjectVendorType object.')
cirbhBackHaulAdjectVendorType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 2, 1, 1, 1, 2), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhBackHaulAdjectVendorType.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhBackHaulAdjectVendorType.setDescription('This object provides the vendor type of the adjacent device supporting backhaul connection. This object contains the same value as the corresponding entPhysicalVendorType object.')
cirbhBackHaulRcvdUtilState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 2, 1, 1, 1, 3), CirbhBackHaulUtilizationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhBackHaulRcvdUtilState.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhBackHaulRcvdUtilState.setDescription('The utilization state for traffic received on backhaul multilink. The following objects will be used to calculate link utilization state: cirbhBackHaulAcceptableThreshold cirbhBackHaulWarningThreshold cirbhBackHaulOverloadedThreshold')
cirbhBackHaulSentUtilState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 2, 1, 1, 1, 4), CirbhBackHaulUtilizationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhBackHaulSentUtilState.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhBackHaulSentUtilState.setDescription('The utilization state for traffic transmitted on backhaul multilink. The following objects will be used to calculate link utilization state: cirbhBackHaulAcceptableThreshold cirbhBackHaulWarningThreshold cirbhBackHaulOverloadedThreshold')
cirbhBackHaulRcvdUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 2, 1, 1, 1, 5), CirbhBackHaulUtilization()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhBackHaulRcvdUtil.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhBackHaulRcvdUtil.setDescription('The average receive utilization of the link over the last second.')
cirbhBackHaulSentUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 2, 1, 1, 1, 6), CirbhBackHaulUtilization()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhBackHaulSentUtil.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhBackHaulSentUtil.setDescription('The average transmit utilization of the link over the last second.')
cirbhBackHaulShortHaulTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 2, 1, 2), )
if mibBuilder.loadTexts: cirbhBackHaulShortHaulTable.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhBackHaulShortHaulTable.setDescription('This table lists the associations between shorthaul and backhaul interfaces.')
cirbhBackHaulShortHaulEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 2, 1, 2, 1), ).setIndexNames((0, "CISCO-IP-RAN-BACKHAUL-MIB", "cirbhBackHaulShortHaulBhIndex"), (0, "CISCO-IP-RAN-BACKHAUL-MIB", "cirbhBackHaulShortHaulShIndex"))
if mibBuilder.loadTexts: cirbhBackHaulShortHaulEntry.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhBackHaulShortHaulEntry.setDescription('An entry indicates a single association between a backhaul and shorthaul interface.')
cirbhBackHaulShortHaulBhIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 2, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cirbhBackHaulShortHaulBhIndex.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhBackHaulShortHaulBhIndex.setDescription('This object indicates the backhaul interface.')
cirbhBackHaulShortHaulShIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 2, 1, 2, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: cirbhBackHaulShortHaulShIndex.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhBackHaulShortHaulShIndex.setDescription('This object indicates the shorthaul interface.')
cirbhBackHaulShortHaulTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 2, 1, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhBackHaulShortHaulTimestamp.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhBackHaulShortHaulTimestamp.setDescription('This object indicates the value of sysUpTime when the entry was created.')
cirbhBackHaulHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 2, 2, 1), )
if mibBuilder.loadTexts: cirbhBackHaulHistoryTable.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhBackHaulHistoryTable.setDescription('This table provides historical information on traffic distribution on backhaul interface.')
cirbhBackHaulHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 2, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-IP-RAN-BACKHAUL-MIB", "cirbhBackHaulHistoryIndex"))
if mibBuilder.loadTexts: cirbhBackHaulHistoryEntry.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhBackHaulHistoryEntry.setDescription('Each entry provides information on the utilization of backhaul interface. The utilization is broken down by protocol and by direction. An entry is updated in this table every second.')
cirbhBackHaulHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 2, 2, 1, 1, 1), CirbhHistoryIndex())
if mibBuilder.loadTexts: cirbhBackHaulHistoryIndex.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhBackHaulHistoryIndex.setDescription('An index used to access history of cirbhBackHaulHistoryTable objects.')
cirbhBackHaulHistoryRcvdUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 2, 2, 1, 1, 2), CirbhBackHaulUtilization()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhBackHaulHistoryRcvdUtil.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhBackHaulHistoryRcvdUtil.setDescription('The average receive utilization of link over the last second.')
cirbhBackHaulHistorySentUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 2, 2, 1, 1, 3), CirbhBackHaulUtilization()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhBackHaulHistorySentUtil.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhBackHaulHistorySentUtil.setDescription('The average transmit utilization of link over the last second.')
cirbhBackHaulHistoryRcvdAbisUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 2, 2, 1, 1, 4), CirbhBackHaulUtilization()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhBackHaulHistoryRcvdAbisUtil.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhBackHaulHistoryRcvdAbisUtil.setDescription('The average receive utilization of link over the last second that consisted of GSM-Abis traffic.')
cirbhBackHaulHistorySentAbisUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 2, 2, 1, 1, 5), CirbhBackHaulUtilization()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhBackHaulHistorySentAbisUtil.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhBackHaulHistorySentAbisUtil.setDescription('The average transmit utilization of link over the last second that consisted of GSM-Abis traffic.')
cirbhBackHaulHistoryRcvdUmtsUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 2, 2, 1, 1, 6), CirbhBackHaulUtilization()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhBackHaulHistoryRcvdUmtsUtil.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhBackHaulHistoryRcvdUmtsUtil.setDescription('The average receive utilization of link over the last second that consisted of UMTS traffic.')
cirbhBackHaulHistorySentUmtsUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 2, 2, 1, 1, 7), CirbhBackHaulUtilization()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhBackHaulHistorySentUmtsUtil.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhBackHaulHistorySentUmtsUtil.setDescription('The average transmit utilization of link over the last second that consisted of UMTS traffic.')
cirbhBackHaulHistoryTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 2, 2, 1, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhBackHaulHistoryTimeStamp.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhBackHaulHistoryTimeStamp.setDescription('Time when sample was collected.')
cirbhBackHaulStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 2, 2, 2), )
if mibBuilder.loadTexts: cirbhBackHaulStatsTable.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhBackHaulStatsTable.setDescription('This table provides current information on the utilization of backhaul interface. One second load samples are collected and the corresponding entry is incremented. The provides a distribution of the traffic load. At the end of an interval the information is collected and used to populate entry in the cirbhBackHaulStatsHistoryTable. The interval is specified by the cirbhBackHaulStatsInterval object. The counters in this table increase until the interval ends at which time they are reset.')
cirbhBackHaulStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 2, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-IP-RAN-BACKHAUL-MIB", "cirbhStatsDirection"), (0, "CISCO-IP-RAN-BACKHAUL-MIB", "cirbhStatsTrafficType"))
if mibBuilder.loadTexts: cirbhBackHaulStatsEntry.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhBackHaulStatsEntry.setDescription('Each entry contains the distribution of traffic in the current window specified by the cirbhBackHaulStatsInterval object.')
cirbhStatsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 2, 2, 2, 1, 1), CirbhTrafficDirection())
if mibBuilder.loadTexts: cirbhStatsDirection.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhStatsDirection.setDescription('The direction of traffic on backhaul.')
cirbhStatsTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 2, 2, 2, 1, 2), CirbhTrafficType())
if mibBuilder.loadTexts: cirbhStatsTrafficType.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhStatsTrafficType.setDescription('The type of traffic.')
cirbhStats000to009Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 2, 2, 2, 1, 3), PerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhStats000to009Seconds.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhStats000to009Seconds.setDescription('The total numbers of seconds during which the backhaul link was utilized from 0 to 9 percent.')
cirbhStats010to019Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 2, 2, 2, 1, 4), PerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhStats010to019Seconds.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhStats010to019Seconds.setDescription('The total numbers of seconds during which the backhaul link was utilized from 10 to 19 percent.')
cirbhStats020to029Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 2, 2, 2, 1, 5), PerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhStats020to029Seconds.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhStats020to029Seconds.setDescription('The total numbers of seconds during which the backhaul link was utilized from 20 to 29 percent.')
cirbhStats030to039Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 2, 2, 2, 1, 6), PerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhStats030to039Seconds.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhStats030to039Seconds.setDescription('The total numbers of seconds during which the backhaul link was utilized from 30 to 39 percent.')
cirbhStats040to049Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 2, 2, 2, 1, 7), PerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhStats040to049Seconds.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhStats040to049Seconds.setDescription('The total numbers of seconds during which the backhaul link was utilized from 40 to 49 percent.')
cirbhStats050to059Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 2, 2, 2, 1, 8), PerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhStats050to059Seconds.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhStats050to059Seconds.setDescription('The total numbers of seconds during which the backhaul link was utilized from 50 to 59 percent.')
cirbhStats060to069Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 2, 2, 2, 1, 9), PerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhStats060to069Seconds.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhStats060to069Seconds.setDescription('The total numbers of seconds during which the backhaul link was utilized from 60 to 69 percent.')
cirbhStats070to079Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 2, 2, 2, 1, 10), PerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhStats070to079Seconds.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhStats070to079Seconds.setDescription('The total numbers of seconds during which the backhaul link was utilized from 70 to 79 percent.')
cirbhStats080to089Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 2, 2, 2, 1, 11), PerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhStats080to089Seconds.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhStats080to089Seconds.setDescription('The total numbers of seconds during which the backhaul link was utilized from 80 to 89 percent.')
cirbhStats090to100Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 2, 2, 2, 1, 12), PerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhStats090to100Seconds.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhStats090to100Seconds.setDescription('The total numbers of seconds during which the backhaul link was utilized from 90 to 100 percent.')
cirbhStatsTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 2, 2, 2, 1, 13), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhStatsTimeStamp.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhStatsTimeStamp.setDescription('Time when sample was collected.')
cirbhStatsMaxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 2, 2, 2, 1, 14), CirbhBackHaulUtilization()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhStatsMaxUtilization.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhStatsMaxUtilization.setDescription('The maximum utilization encountered within interval.')
cirbhStatsMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 2, 2, 2, 1, 15), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhStatsMaxTimeStamp.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhStatsMaxTimeStamp.setDescription('Time when cirbhStatsMaxUtilization was recorded.')
cirbhBackHaulStatsHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 12), )
if mibBuilder.loadTexts: cirbhBackHaulStatsHistoryTable.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhBackHaulStatsHistoryTable.setDescription('This table provides historical information of distribution of load on backhaul interfaces.')
cirbhBackHaulStatsHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 12, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-IP-RAN-BACKHAUL-MIB", "cirbhStatsHistoryIndex"), (0, "CISCO-IP-RAN-BACKHAUL-MIB", "cirbhStatsHistoryDirection"), (0, "CISCO-IP-RAN-BACKHAUL-MIB", "cirbhStatsHistoryTrafficType"))
if mibBuilder.loadTexts: cirbhBackHaulStatsHistoryEntry.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhBackHaulStatsHistoryEntry.setDescription('Each entry in this table is the data collected from the cirbhBackHaulStatsTable table.')
cirbhStatsHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 12, 1, 1), CirbhHistoryIndex())
if mibBuilder.loadTexts: cirbhStatsHistoryIndex.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhStatsHistoryIndex.setDescription('An index used to access each 15 minute entry.')
cirbhStatsHistoryDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 12, 1, 2), CirbhTrafficDirection())
if mibBuilder.loadTexts: cirbhStatsHistoryDirection.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhStatsHistoryDirection.setDescription('The direction of traffic on backhaul.')
cirbhStatsHistoryTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 12, 1, 3), CirbhTrafficType())
if mibBuilder.loadTexts: cirbhStatsHistoryTrafficType.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhStatsHistoryTrafficType.setDescription('The type of traffic in backhaul history table.')
cirbhStatsHistory000to009Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 12, 1, 4), PerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhStatsHistory000to009Seconds.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhStatsHistory000to009Seconds.setDescription('The total numbers of seconds during which the backhaul link was utilized from 0 to 9 percent.')
cirbhStatsHistory010to019Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 12, 1, 5), PerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhStatsHistory010to019Seconds.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhStatsHistory010to019Seconds.setDescription('The total numbers of seconds during which the backhaul link was utilized from 10 to 19 percent.')
cirbhStatsHistory020to029Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 12, 1, 6), PerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhStatsHistory020to029Seconds.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhStatsHistory020to029Seconds.setDescription('The total numbers of seconds during which the backhaul link was utilized from 20 to 29 percent.')
cirbhStatsHistory030to039Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 12, 1, 7), PerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhStatsHistory030to039Seconds.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhStatsHistory030to039Seconds.setDescription('The total numbers of seconds during which the backhaul link was utilized from 30 to 39 percent.')
cirbhStatsHistory040to049Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 12, 1, 8), PerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhStatsHistory040to049Seconds.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhStatsHistory040to049Seconds.setDescription('The total numbers of seconds during which the backhaul link was utilized from 40 to 49 percent.')
cirbhStatsHistory050to059Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 12, 1, 9), PerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhStatsHistory050to059Seconds.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhStatsHistory050to059Seconds.setDescription('The total numbers of seconds during which the backhaul link was utilized from 50 to 59 percent.')
cirbhStatsHistory060to069Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 12, 1, 10), PerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhStatsHistory060to069Seconds.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhStatsHistory060to069Seconds.setDescription('The total numbers of seconds during which the backhaul link was utilized from 60 to 69 percent.')
cirbhStatsHistory070to079Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 12, 1, 11), PerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhStatsHistory070to079Seconds.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhStatsHistory070to079Seconds.setDescription('The total numbers of seconds during which the backhaul link was utilized from 70 to 79 percent.')
cirbhStatsHistory080to089Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 12, 1, 12), PerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhStatsHistory080to089Seconds.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhStatsHistory080to089Seconds.setDescription('The total numbers of seconds during which the backhaul link was utilized from 80 to 89 percent.')
cirbhStatsHistory090to100Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 12, 1, 13), PerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhStatsHistory090to100Seconds.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhStatsHistory090to100Seconds.setDescription('The total numbers of seconds during which the backhaul link was utilized from 90 to 100 percent.')
cirbhStatsHistoryTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 12, 1, 14), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhStatsHistoryTimeStamp.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhStatsHistoryTimeStamp.setDescription('End time when sample was collected.')
cirbhStatsHistoryMaxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 12, 1, 15), CirbhBackHaulUtilization()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhStatsHistoryMaxUtilization.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhStatsHistoryMaxUtilization.setDescription('The maximum utilization encountered within interval.')
cirbhStatsHistoryMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 12, 1, 16), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhStatsHistoryMaxTimeStamp.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhStatsHistoryMaxTimeStamp.setDescription('Time when cirbhStatsHistoryMaxUtilization was recorded.')
cirbhStatsHistoryAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 2, 12, 1, 17), CirbhBackHaulUtilization()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cirbhStatsHistoryAverage.setStatus('obsolete')
if mibBuilder.loadTexts: cirbhStatsHistoryAverage.setDescription('The average utilization over the specified time period.')
cirbhGsmAlarmNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 3, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirbhGsmAlarmNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: cirbhGsmAlarmNotifEnabled.setDescription("This object specifies whether the agent should generate the ciscoIpRanBackHaulGsmAlarm defined in this MIB module. 'true' Indicates that ciscoIpRanBackHaulGsmAlarm notification is to be generated. 'false' Indicates that ciscoIpRanBackHaulGsmAlarm notification generation is disabled.")
cirbhUmtsAlarmNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 3, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirbhUmtsAlarmNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: cirbhUmtsAlarmNotifEnabled.setDescription("This object specifies whether the agent should generate the ciscoIpRanBackHaulUmtsAlarm defined in this MIB module. 'true' Indicates that ciscoIpRanBackHaulUmtsAlarm notification is to be generated. 'false' Indicates that ciscoIpRanBackHaulUmtsAlarm notification generation is disabled.")
cirbhUtilNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 483, 1, 3, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cirbhUtilNotifEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: cirbhUtilNotifEnabled.setDescription("This object specifies whether the agent should generate the ciscoIpRanBackHaulRcvdUtil or ciscoIpRanBackHaulSentUtil defined in this MIB module. 'true' Indicates that ciscoIpRanBackHaulRcvdUtil and ciscoIpRanBackHaulSentUtil notifications are to be generated. 'false' Indicates that ciscoIpRanBackHaulRcvdUtil and ciscoIpRanBackHaulSentUtil notifications generation is disabled.")
ciscoIpRanBackHaulGsmAlarm = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 483, 0, 1)).setObjects(("IF-MIB", "ifDescr"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhGsmAlarmConnectState"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhGsmAlarmLocalState"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhGsmAlarmRemoteState"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhGsmAlarmRedundancyState"))
if mibBuilder.loadTexts: ciscoIpRanBackHaulGsmAlarm.setStatus('current')
if mibBuilder.loadTexts: ciscoIpRanBackHaulGsmAlarm.setDescription('This notification is generated whenever the values of the specified objects change.')
ciscoIpRanBackHaulUmtsAlarm = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 483, 0, 2)).setObjects(("IF-MIB", "ifDescr"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhUmtsConnectionState"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhUmtsAlarmRxLocalState"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhUmtsAlarmRxRemoteState"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhUmtsAlarmTxLocalState"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhUmtsAlarmTxRemoteState"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhUmtsConnectionRedundState"))
if mibBuilder.loadTexts: ciscoIpRanBackHaulUmtsAlarm.setStatus('current')
if mibBuilder.loadTexts: ciscoIpRanBackHaulUmtsAlarm.setDescription('This notification is generated whenever the values of the specified objects change.')
ciscoIpRanBackHaulRcvdUtil = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 483, 0, 3)).setObjects(("IF-MIB", "ifDescr"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhBackHaulRcvdUtilState"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhBackHaulRcvdUtil"))
if mibBuilder.loadTexts: ciscoIpRanBackHaulRcvdUtil.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoIpRanBackHaulRcvdUtil.setDescription("This notification is generated once for the interval specified by the cirbhBackHaulStatsInterval object for the following state transitions. 'acceptable' -> 'warning' 'acceptable' -> 'overloaded' 'warning' -> 'overloaded' At the end of the interval specified by the cirbhBackHaulUtilInterval object another notification will be generated if the current state is different from state sent in last notification.")
ciscoIpRanBackHaulSentUtil = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 483, 0, 4)).setObjects(("IF-MIB", "ifDescr"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhBackHaulSentUtilState"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhBackHaulSentUtil"))
if mibBuilder.loadTexts: ciscoIpRanBackHaulSentUtil.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoIpRanBackHaulSentUtil.setDescription("This notification is generated once for the interval specified by the cirbhBackHaulStatsInterval object for the following state transitions. 'acceptable' -> 'warning' 'acceptable' -> 'overloaded' 'warning' -> 'overloaded' At the end of the interval specified by the cirbhBackHaulUtilInterval object another notification will be generated if the current state is different from state sent in last notification.")
ciscoIpRanBackHaulMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 483, 2, 1))
ciscoIpRanBackHaulMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 483, 2, 2))
ciscoIpRanBackHaulMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 483, 2, 1, 1)).setObjects(("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulScalarsGroup"), ("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulConfigGroup"), ("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulStatsGroup"), ("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulAlarmGroup"), ("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulErrorsGroup"), ("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulHistoryGroup"), ("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpRanBackHaulMIBCompliance = ciscoIpRanBackHaulMIBCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoIpRanBackHaulMIBCompliance.setDescription('The compliance statement for entities which implement the CISCO-IP-RAN-BACKHAUL-MIB.my managment information base.')
ciscoIpRanBackHaulMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 483, 2, 1, 2)).setObjects(("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulScalarsGroup"), ("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulConfigGroup"), ("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulStatsGroup"), ("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulAlarmGroup"), ("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulErrorsGroup"), ("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulHistoryGroup"), ("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulNotifGroup"), ("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulShortHaulGroup"), ("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulAlarmGroupSup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpRanBackHaulMIBComplianceRev1 = ciscoIpRanBackHaulMIBComplianceRev1.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoIpRanBackHaulMIBComplianceRev1.setDescription('The compliance statement for entities which implement the CISCO-IP-RAN-BACKHAUL-MIB.my managment information base.')
ciscoIpRanBackHaulMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 483, 2, 1, 3)).setObjects(("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulScalarsGroupRev2"), ("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulConfigGroup"), ("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulConfigGroupSup2"), ("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulConfigGroupSup3"), ("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulStatsGroup"), ("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulAlarmGroup"), ("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulHistoryGroupRev2"), ("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulNotifGroupRev2"), ("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulAlarmGroupSup1"), ("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulCongestionGroup"), ("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulGsmErrorsGroup"), ("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulUmtsErrorsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpRanBackHaulMIBComplianceRev2 = ciscoIpRanBackHaulMIBComplianceRev2.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoIpRanBackHaulMIBComplianceRev2.setDescription('The compliance statement for entities which implement the CISCO-IP-RAN-BACKHAUL-MIB.my managment information base.')
ciscoIpRanBackHaulMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 483, 2, 1, 4)).setObjects(("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulScalarsGroupRev2"), ("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulConfigGroup"), ("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulConfigGroupSup2"), ("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulConfigGroupSup3"), ("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulStatsGroup"), ("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulAlarmGroup"), ("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulHistoryGroupRev3"), ("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulNotifGroupRev2"), ("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulAlarmGroupSup1"), ("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulCongestionGroup"), ("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulGsmErrorsGroup"), ("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulUmtsErrorsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpRanBackHaulMIBComplianceRev3 = ciscoIpRanBackHaulMIBComplianceRev3.setStatus('current')
if mibBuilder.loadTexts: ciscoIpRanBackHaulMIBComplianceRev3.setDescription('The compliance statement for entities which implement the CISCO-IP-RAN-BACKHAUL-MIB.my managment information base.')
ciscoIpRanBackHaulScalarsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 483, 2, 2, 1)).setObjects(("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhSnmpTrafficMode"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhLocation"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhBackHaulStatsInterval"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhBackHaulStatsEntries"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhBackHaulAcceptableThreshold"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhBackHaulWarningThreshold"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhBackHaulOverloadedThreshold"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhBackHaulUtilInterval"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhGsmAlarmNotifEnabled"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhUmtsAlarmNotifEnabled"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhUtilNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpRanBackHaulScalarsGroup = ciscoIpRanBackHaulScalarsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoIpRanBackHaulScalarsGroup.setDescription('Cisco IP RAN Input Scalars Group.')
ciscoIpRanBackHaulConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 483, 2, 2, 2)).setObjects(("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhInfoProtocol"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhInfoLocalAddrType"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhInfoLocalAddr"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhInfoLocalPortNumber"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhInfoRemoteAddrType"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhInfoRemoteAddr"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhInfoRemotePortNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpRanBackHaulConfigGroup = ciscoIpRanBackHaulConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIpRanBackHaulConfigGroup.setDescription('Cisco IP RAN Configuration Group.')
ciscoIpRanBackHaulStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 483, 2, 2, 3)).setObjects(("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhStatsRcvdSamples"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhStatsSentSamples"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhStatsRcvdBackHaulPackets"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhStatsSentBackHaulPackets"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhStatsRcvdBackHaulBytes"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhStatsSentBackHaulBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpRanBackHaulStatsGroup = ciscoIpRanBackHaulStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIpRanBackHaulStatsGroup.setDescription('Cisco IP RAN Backhaul Statistics Group.')
ciscoIpRanBackHaulAlarmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 483, 2, 2, 4)).setObjects(("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhGsmAlarmConnectState"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhGsmAlarmLocalState"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhGsmAlarmRemoteState"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhGsmAlarmRedundancyState"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhUmtsConnectionState"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhUmtsConnectionRedundState"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhUmtsAlarmRxLocalState"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhUmtsAlarmRxRemoteState"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhUmtsAlarmTxLocalState"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhUmtsAlarmTxRemoteState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpRanBackHaulAlarmGroup = ciscoIpRanBackHaulAlarmGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIpRanBackHaulAlarmGroup.setDescription('Cisco IP RAN Alarm Group.')
ciscoIpRanBackHaulErrorsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 483, 2, 2, 5)).setObjects(("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhErrorsBhPeerNotReadyDrops"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhErrorsBhPeerNotActiveDrops"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhErrorsBhInvalidPackets"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhErrorsBhLostRcvdPackets"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhErrorsBhLostSentPackets"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhErrorsBhMissedPackets"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhErrorsBhMissedLatePackets"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhErrorsBhMissedLostPackets"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhErrorsBhMissedNoMemPackets"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhErrorsBhMissedResetPackets"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhErrorsDecompFailures"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhErrorsCompFailures"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhErrorsCompNoPacketFailures"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhErrorsCompNoIntFailures"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhErrorsCompIntDownFailures"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhErrorsCompEncapFailures"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhErrorsCompQosDrops"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpRanBackHaulErrorsGroup = ciscoIpRanBackHaulErrorsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoIpRanBackHaulErrorsGroup.setDescription('Cisco protocol errors Group.')
ciscoIpRanBackHaulHistoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 483, 2, 2, 6)).setObjects(("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhShortHaulRcvdRate"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhShortHaulSentRate"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhShortHaulRcvdCompressRate"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhShortHaulSentCompressRate"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhShortHaulTimeStamp"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhShortHaulRcvdUtilization"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhShortHaulSentUtilization"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhBackHaulRcvdUtilState"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhBackHaulSentUtilState"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhBackHaulRcvdUtil"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhBackHaulSentUtil"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhBackHaulAdjectSerialNum"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhBackHaulAdjectVendorType"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhBackHaulHistoryRcvdUtil"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhBackHaulHistorySentUtil"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhBackHaulHistoryRcvdAbisUtil"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhBackHaulHistorySentAbisUtil"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhBackHaulHistoryRcvdUmtsUtil"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhBackHaulHistorySentUmtsUtil"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhBackHaulHistoryTimeStamp"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhStats000to009Seconds"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhStats010to019Seconds"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhStats020to029Seconds"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhStats030to039Seconds"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhStats040to049Seconds"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhStats050to059Seconds"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhStats060to069Seconds"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhStats070to079Seconds"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhStats080to089Seconds"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhStats090to100Seconds"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhStatsTimeStamp"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhStatsMaxUtilization"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhStatsMaxTimeStamp"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhStatsHistory000to009Seconds"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhStatsHistory010to019Seconds"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhStatsHistory020to029Seconds"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhStatsHistory030to039Seconds"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhStatsHistory040to049Seconds"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhStatsHistory050to059Seconds"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhStatsHistory060to069Seconds"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhStatsHistory070to079Seconds"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhStatsHistory080to089Seconds"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhStatsHistory090to100Seconds"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhStatsHistoryTimeStamp"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhStatsHistoryMaxUtilization"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhStatsHistoryMaxTimeStamp"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhStatsHistoryAverage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpRanBackHaulHistoryGroup = ciscoIpRanBackHaulHistoryGroup.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoIpRanBackHaulHistoryGroup.setDescription('Cisco IP RAN Utilization History Group.')
ciscoIpRanBackHaulNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 483, 2, 2, 7)).setObjects(("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulGsmAlarm"), ("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulUmtsAlarm"), ("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulRcvdUtil"), ("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulSentUtil"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpRanBackHaulNotifGroup = ciscoIpRanBackHaulNotifGroup.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoIpRanBackHaulNotifGroup.setDescription('Cisco IP RAN Notifications.')
ciscoIpRanBackHaulShortHaulGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 483, 2, 2, 8)).setObjects(("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhBackHaulShortHaulTimestamp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpRanBackHaulShortHaulGroup = ciscoIpRanBackHaulShortHaulGroup.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoIpRanBackHaulShortHaulGroup.setDescription('Cisco IP RAN Backhaul to Shorthaul Group.')
ciscoIpRanBackHaulAlarmGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 483, 2, 2, 9)).setObjects(("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhUmtsConnectionRootIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpRanBackHaulAlarmGroupSup1 = ciscoIpRanBackHaulAlarmGroupSup1.setStatus('current')
if mibBuilder.loadTexts: ciscoIpRanBackHaulAlarmGroupSup1.setDescription('Additional objects for Cisco IP RAN Alarm Group.')
ciscoIpRanBackHaulScalarsGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 483, 2, 2, 10)).setObjects(("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhSnmpTrafficMode"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhLocation"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhGsmAlarmNotifEnabled"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhUmtsAlarmNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpRanBackHaulScalarsGroupRev2 = ciscoIpRanBackHaulScalarsGroupRev2.setStatus('current')
if mibBuilder.loadTexts: ciscoIpRanBackHaulScalarsGroupRev2.setDescription('Cisco IP RAN Input Scalars Group.')
ciscoIpRanBackHaulConfigGroupSup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 483, 2, 2, 11)).setObjects(("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhInfoAdjectSerialNum"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhInfoAdjectVendorType"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhInfoBackhaulRxIfIndex"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhInfoBackhaulTxIfIndex"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhInfoShBulkLastIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpRanBackHaulConfigGroupSup2 = ciscoIpRanBackHaulConfigGroupSup2.setStatus('current')
if mibBuilder.loadTexts: ciscoIpRanBackHaulConfigGroupSup2.setDescription('Cisco IP RAN Configuration Group Sup2.')
ciscoIpRanBackHaulHistoryGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 483, 2, 2, 12)).setObjects(("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhShortHaulRcvdRate"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhShortHaulSentRate"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhShortHaulRcvdCompressRate"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhShortHaulSentCompressRate"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhShortHaulTimeStamp"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhShortHaulRcvdUtilization"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhShortHaulSentUtilization"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhShortHaulBulkTimeStamp"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhShortHaulBulkBaseUnit"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhShortHaulBulkUtil"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpRanBackHaulHistoryGroupRev2 = ciscoIpRanBackHaulHistoryGroupRev2.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoIpRanBackHaulHistoryGroupRev2.setDescription('Cisco IP RAN Utilization History Group.')
ciscoIpRanBackHaulNotifGroupRev2 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 483, 2, 2, 13)).setObjects(("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulGsmAlarm"), ("CISCO-IP-RAN-BACKHAUL-MIB", "ciscoIpRanBackHaulUmtsAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpRanBackHaulNotifGroupRev2 = ciscoIpRanBackHaulNotifGroupRev2.setStatus('current')
if mibBuilder.loadTexts: ciscoIpRanBackHaulNotifGroupRev2.setDescription('Cisco IP RAN Notifications.')
ciscoIpRanBackHaulCongestionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 483, 2, 2, 14)).setObjects(("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhCongestionEnabled"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhCongestionDrops"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhCongestionDroppedBytes"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhCongestionEvents"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhCongestionActive"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhCongestionDuration"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpRanBackHaulCongestionGroup = ciscoIpRanBackHaulCongestionGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIpRanBackHaulCongestionGroup.setDescription('Cisco IP RAN congestion object group.')
ciscoIpRanBackHaulGsmErrorsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 483, 2, 2, 15)).setObjects(("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhGsmErrorsPeerNotReadyDrops"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhGsmErrorsPeerNotActiveDrops"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhGsmErrorsInvalidPackets"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhGsmErrorsLostRcvdPackets"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhGsmErrorsLostSentPackets"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhGsmErrorsMissedPackets"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhGsmErrorsMissedLatePackets"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhGsmErrorsMissedLostPackets"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhGsmErrorsMissedNoMemPackets"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhGsmErrorsMissedResetPackets"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhGsmErrorsDecompFailures"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhGsmErrorsCompFailures"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhGsmErrorsCompNoPacketFailures"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhGsmErrorsCompNoIntFailures"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhGsmErrorsCompIntDownFailures"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhGsmErrorsCompEncapFailures"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhGsmErrorsCompQosDrops"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhGsmErrorsFastSendFailures"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhGsmErrorsTxPacketFailures"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhGsmErrorsTxNoBuffers"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhGsmErrorsTxResets"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhGsmErrorsOverruns"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhGsmErrorsInterruptFailures"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhGsmErrorsLateArrivals"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhGsmErrorsEarlyArrivals"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpRanBackHaulGsmErrorsGroup = ciscoIpRanBackHaulGsmErrorsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIpRanBackHaulGsmErrorsGroup.setDescription('Cisco GSM-Abis protocol errors Group.')
ciscoIpRanBackHaulUmtsErrorsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 483, 2, 2, 16)).setObjects(("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhUmtsErrorsPeerNotReadyDrops"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhUmtsErrorsInvalidPackets"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhUmtsErrorsDecompFailures"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhUmtsErrorsCompFailures"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhUmtsErrorsCompNoPacketFailures"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhUmtsErrorsCompNoIntFailures"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhUmtsErrorsCompIntDownFailures"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhUmtsErrorsCompEncapFailures"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhUmtsErrorsCompQosDrops"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhUmtsErrorsShorthaulPakFailures"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhUmtsErrorsUmtsEncapFailures"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhUmtsErrorsLocalPvcDrops"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhUmtsErrorsRemotePvcDrops"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhUmtsErrorsBackhaulDrops"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpRanBackHaulUmtsErrorsGroup = ciscoIpRanBackHaulUmtsErrorsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIpRanBackHaulUmtsErrorsGroup.setDescription('Cisco UMTS-Iub protocol errors Group.')
ciscoIpRanBackHaulConfigGroupSup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 483, 2, 2, 17)).setObjects(("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhInfoOptimizeTraffic"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpRanBackHaulConfigGroupSup3 = ciscoIpRanBackHaulConfigGroupSup3.setStatus('current')
if mibBuilder.loadTexts: ciscoIpRanBackHaulConfigGroupSup3.setDescription('Cisco IP RAN Configuration Group for Optimization.')
ciscoIpRanBackHaulHistoryGroupRev3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 483, 2, 2, 18)).setObjects(("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhShortHaulBulkTimeStamp"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhShortHaulBulkBaseUnit"), ("CISCO-IP-RAN-BACKHAUL-MIB", "cirbhShortHaulBulkUtil"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpRanBackHaulHistoryGroupRev3 = ciscoIpRanBackHaulHistoryGroupRev3.setStatus('current')
if mibBuilder.loadTexts: ciscoIpRanBackHaulHistoryGroupRev3.setDescription('Cisco IP RAN Utilization History Group.')
mibBuilder.exportSymbols("CISCO-IP-RAN-BACKHAUL-MIB", cirbhBackHaulStats=cirbhBackHaulStats, ciscoIpRanBackHaulMIBObjects=ciscoIpRanBackHaulMIBObjects, CirbhBackHaulUtilization=CirbhBackHaulUtilization, cirbhGsmErrorsCompNoIntFailures=cirbhGsmErrorsCompNoIntFailures, ciscoIpRanBackHaulConfigGroup=ciscoIpRanBackHaulConfigGroup, ciscoIpRanBackHaulConfigGroupSup2=ciscoIpRanBackHaulConfigGroupSup2, cirbhGsmAlarmConnectState=cirbhGsmAlarmConnectState, CirbhTrafficDirection=CirbhTrafficDirection, cirbhInfoTableEntry=cirbhInfoTableEntry, cirbhStatsRcvdSamples=cirbhStatsRcvdSamples, cirbhSnmpTrafficMode=cirbhSnmpTrafficMode, cirbhErrorsBhPeerNotActiveDrops=cirbhErrorsBhPeerNotActiveDrops, cirbhUmtsErrorsCompQosDrops=cirbhUmtsErrorsCompQosDrops, cirbhUmtsErrorsBackhaulDrops=cirbhUmtsErrorsBackhaulDrops, ciscoIpRanBackHaulUmtsAlarm=ciscoIpRanBackHaulUmtsAlarm, cirbhBackHaulShortHaulShIndex=cirbhBackHaulShortHaulShIndex, cirbhObjects=cirbhObjects, cirbhGsmAlarmTableEntry=cirbhGsmAlarmTableEntry, cirbhStatsSentBackHaulBytes=cirbhStatsSentBackHaulBytes, cirbhBackHaulSentUtilState=cirbhBackHaulSentUtilState, cirbhUmtsAlarmNotifEnabled=cirbhUmtsAlarmNotifEnabled, cirbhUmtsConnectionRedundState=cirbhUmtsConnectionRedundState, cirbhShortHaulHistoryTable=cirbhShortHaulHistoryTable, cirbhGsmErrorsPeerNotActiveDrops=cirbhGsmErrorsPeerNotActiveDrops, cirbhStatsTableEntry=cirbhStatsTableEntry, cirbhBackHaulStatsInterval=cirbhBackHaulStatsInterval, cirbhStatsHistoryTrafficType=cirbhStatsHistoryTrafficType, cirbhBackHaulStatsHistoryTable=cirbhBackHaulStatsHistoryTable, cirbhGsmErrorsDecompFailures=cirbhGsmErrorsDecompFailures, cirbhInfoLocalPortNumber=cirbhInfoLocalPortNumber, cirbhGsmErrorsMissedLostPackets=cirbhGsmErrorsMissedLostPackets, cirbhStatsHistoryTimeStamp=cirbhStatsHistoryTimeStamp, cirbhStatsSentBackHaulPackets=cirbhStatsSentBackHaulPackets, cirbhCongestionDrops=cirbhCongestionDrops, cirbhStatsDirection=cirbhStatsDirection, cirbhGsmAlarmTable=cirbhGsmAlarmTable, PYSNMP_MODULE_ID=ciscoIpRanBackHaulMIB, ciscoIpRanBackHaulErrorsGroup=ciscoIpRanBackHaulErrorsGroup, ciscoIpRanBackHaulGsmAlarm=ciscoIpRanBackHaulGsmAlarm, ciscoIpRanBackHaulMIBConform=ciscoIpRanBackHaulMIBConform, ciscoIpRanBackHaulMIBComplianceRev3=ciscoIpRanBackHaulMIBComplianceRev3, cirbhGsmErrorsMissedResetPackets=cirbhGsmErrorsMissedResetPackets, cirbhStatsHistory060to069Seconds=cirbhStatsHistory060to069Seconds, cirbhUmtsErrorsLocalPvcDrops=cirbhUmtsErrorsLocalPvcDrops, cirbhBackHaulHistoryRcvdAbisUtil=cirbhBackHaulHistoryRcvdAbisUtil, CirbhHistoryIndex=CirbhHistoryIndex, cirbhStatsSentSamples=cirbhStatsSentSamples, ciscoIpRanBackHaulNotifGroup=ciscoIpRanBackHaulNotifGroup, cirbhStatsTrafficType=cirbhStatsTrafficType, cirbhUmtsErrorsCompEncapFailures=cirbhUmtsErrorsCompEncapFailures, ciscoIpRanBackHaulHistoryGroupRev2=ciscoIpRanBackHaulHistoryGroupRev2, cirbhStats080to089Seconds=cirbhStats080to089Seconds, cirbhBackHaulTable=cirbhBackHaulTable, ciscoIpRanBackHaulConfigGroupSup3=ciscoIpRanBackHaulConfigGroupSup3, cirbhCongestionEvents=cirbhCongestionEvents, cirbhCongestionDroppedBytes=cirbhCongestionDroppedBytes, cirbhShortHaulAlarmInfo=cirbhShortHaulAlarmInfo, cirbhBackHaulOverloadedThreshold=cirbhBackHaulOverloadedThreshold, cirbhInfoLocalAddr=cirbhInfoLocalAddr, cirbhErrorsTableEntry=cirbhErrorsTableEntry, ciscoIpRanBackHaulStatsGroup=ciscoIpRanBackHaulStatsGroup, cirbhBackHaulHistorySentUmtsUtil=cirbhBackHaulHistorySentUmtsUtil, cirbhBackHaulStatsTable=cirbhBackHaulStatsTable, cirbhStats030to039Seconds=cirbhStats030to039Seconds, cirbhUmtsErrorsCompFailures=cirbhUmtsErrorsCompFailures, cirbhErrorsBhMissedLostPackets=cirbhErrorsBhMissedLostPackets, cirbhUmtsConnectionRootIfIndex=cirbhUmtsConnectionRootIfIndex, ciscoIpRanBackHaulAlarmGroupSup1=ciscoIpRanBackHaulAlarmGroupSup1, cirbhStatsHistory080to089Seconds=cirbhStatsHistory080to089Seconds, cirbhCongestionActive=cirbhCongestionActive, cirbhInfoBackhaulRxIfIndex=cirbhInfoBackhaulRxIfIndex, cirbhUmtsErrorsCompNoIntFailures=cirbhUmtsErrorsCompNoIntFailures, cirbhStatsMaxTimeStamp=cirbhStatsMaxTimeStamp, cirbhGsmErrorsInterruptFailures=cirbhGsmErrorsInterruptFailures, ciscoIpRanBackHaulHistoryGroupRev3=ciscoIpRanBackHaulHistoryGroupRev3, cirbhBackHaulShortHaulTimestamp=cirbhBackHaulShortHaulTimestamp, cirbhStats000to009Seconds=cirbhStats000to009Seconds, cirbhShortHaulBulkTimeStamp=cirbhShortHaulBulkTimeStamp, cirbhCongestionDuration=cirbhCongestionDuration, cirbhStats050to059Seconds=cirbhStats050to059Seconds, cirbhUmtsAlarmTxLocalState=cirbhUmtsAlarmTxLocalState, cirbhBackHaulAdjectVendorType=cirbhBackHaulAdjectVendorType, ciscoIpRanBackHaulMIB=ciscoIpRanBackHaulMIB, ciscoIpRanBackHaulMIBCompliances=ciscoIpRanBackHaulMIBCompliances, cirbhStatsHistory020to029Seconds=cirbhStatsHistory020to029Seconds, cirbhInfoAdjectSerialNum=cirbhInfoAdjectSerialNum, ciscoIpRanBackHaulAlarmGroup=ciscoIpRanBackHaulAlarmGroup, CirbhBackHaulUtilizationState=CirbhBackHaulUtilizationState, cirbhGsmErrorsFastSendFailures=cirbhGsmErrorsFastSendFailures, cirbhUmtsErrorsCompIntDownFailures=cirbhUmtsErrorsCompIntDownFailures, cirbhUmtsAlarmTableEntry=cirbhUmtsAlarmTableEntry, cirbhBackHaul=cirbhBackHaul, cirbhUmtsAlarmTxRemoteState=cirbhUmtsAlarmTxRemoteState, cirbhErrorsBhMissedResetPackets=cirbhErrorsBhMissedResetPackets, cirbhStatsTimeStamp=cirbhStatsTimeStamp, cirbhStatsRcvdBackHaulPackets=cirbhStatsRcvdBackHaulPackets, cirbhBackHaulUtilInterval=cirbhBackHaulUtilInterval, ciscoIpRanBackHaulHistoryGroup=ciscoIpRanBackHaulHistoryGroup, cirbhBackHaulEntry=cirbhBackHaulEntry, cirbhErrorsCompNoIntFailures=cirbhErrorsCompNoIntFailures, cirbhStatsHistory040to049Seconds=cirbhStatsHistory040to049Seconds, CirbhTrafficType=CirbhTrafficType, cirbhStats060to069Seconds=cirbhStats060to069Seconds, cirbhBackHaulHistoryRcvdUtil=cirbhBackHaulHistoryRcvdUtil, cirbhUmtsErrorsPeerNotReadyDrops=cirbhUmtsErrorsPeerNotReadyDrops, cirbhErrorsBhPeerNotReadyDrops=cirbhErrorsBhPeerNotReadyDrops, CirbhRawInterfaceRate=CirbhRawInterfaceRate, cirbhGsmErrorsCompIntDownFailures=cirbhGsmErrorsCompIntDownFailures, cirbhGsmErrorsOverruns=cirbhGsmErrorsOverruns, cirbhUmtsErrorsDecompFailures=cirbhUmtsErrorsDecompFailures, cirbhStatsTable=cirbhStatsTable, cirbhErrorsBhLostRcvdPackets=cirbhErrorsBhLostRcvdPackets, cirbhUmtsAlarmRxRemoteState=cirbhUmtsAlarmRxRemoteState, cirbhStatsHistory070to079Seconds=cirbhStatsHistory070to079Seconds, cirbhInfoRemotePortNumber=cirbhInfoRemotePortNumber, cirbhBackHaulAdjectSerialNum=cirbhBackHaulAdjectSerialNum, cirbhShortHaulRcvdCompressRate=cirbhShortHaulRcvdCompressRate, cirbhStatsHistoryMaxUtilization=cirbhStatsHistoryMaxUtilization, cirbhBackHaulHistoryTable=cirbhBackHaulHistoryTable, CirbhConnectGsmState=CirbhConnectGsmState, cirbhGsmErrorsMissedPackets=cirbhGsmErrorsMissedPackets, cirbhInfoShBulkLastIndex=cirbhInfoShBulkLastIndex, CirbhConnectUmtsState=CirbhConnectUmtsState, cirbhShortHaul=cirbhShortHaul, cirbhErrorsCompEncapFailures=cirbhErrorsCompEncapFailures, cirbhGsmAlarmRemoteState=cirbhGsmAlarmRemoteState, cirbhShortHaulHistory=cirbhShortHaulHistory, cirbhUmtsAlarmRxLocalState=cirbhUmtsAlarmRxLocalState, cirbhBackHaulRcvdUtil=cirbhBackHaulRcvdUtil, cirbhUmtsErrorsRemotePvcDrops=cirbhUmtsErrorsRemotePvcDrops, CirbhProtocol=CirbhProtocol, cirbhUmtsErrorsInvalidPackets=cirbhUmtsErrorsInvalidPackets, cirbhInfoAdjectVendorType=cirbhInfoAdjectVendorType, cirbhShortHaulSentCompressRate=cirbhShortHaulSentCompressRate, cirbhCongestionTable=cirbhCongestionTable, cirbhShortHaulInfo=cirbhShortHaulInfo, cirbhUmtsErrorsShorthaulPakFailures=cirbhUmtsErrorsShorthaulPakFailures, cirbhErrorsTable=cirbhErrorsTable, CirbhRedundancyState=CirbhRedundancyState, cirbhInfoBackhaulTxIfIndex=cirbhInfoBackhaulTxIfIndex, cirbhBackHaulWarningThreshold=cirbhBackHaulWarningThreshold, cirbhCongestionTableEntry=cirbhCongestionTableEntry, cirbhGsmErrorsTxNoBuffers=cirbhGsmErrorsTxNoBuffers, cirbhCongestionEnabled=cirbhCongestionEnabled, cirbhBackHaulAcceptableThreshold=cirbhBackHaulAcceptableThreshold, cirbhBackHaulShortHaulBhIndex=cirbhBackHaulShortHaulBhIndex, cirbhGsmErrorsInvalidPackets=cirbhGsmErrorsInvalidPackets, cirbhGsmErrorsCompEncapFailures=cirbhGsmErrorsCompEncapFailures, cirbhShortHaulBulkHistory=cirbhShortHaulBulkHistory, cirbhBackHaulStatsEntry=cirbhBackHaulStatsEntry, cirbhStats090to100Seconds=cirbhStats090to100Seconds, ciscoIpRanBackHaulMIBCompliance=ciscoIpRanBackHaulMIBCompliance, cirbhShortHaulTimeStamp=cirbhShortHaulTimeStamp, ciscoIpRanBackHaulCongestionGroup=ciscoIpRanBackHaulCongestionGroup, ciscoIpRanBackHaulUmtsErrorsGroup=ciscoIpRanBackHaulUmtsErrorsGroup, cirbhShortHaulRcvdRate=cirbhShortHaulRcvdRate, cirbhUmtsErrorsUmtsEncapFailures=cirbhUmtsErrorsUmtsEncapFailures, cirbhStatsRcvdBackHaulBytes=cirbhStatsRcvdBackHaulBytes, cirbhStats070to079Seconds=cirbhStats070to079Seconds, cirbhGsmErrorsEarlyArrivals=cirbhGsmErrorsEarlyArrivals, cirbhBackHaulHistoryEntry=cirbhBackHaulHistoryEntry, cirbhGsmErrorsLostRcvdPackets=cirbhGsmErrorsLostRcvdPackets, cirbhGsmErrorsCompFailures=cirbhGsmErrorsCompFailures, cirbhStats020to029Seconds=cirbhStats020to029Seconds, cirbhUmtsErrorsTable=cirbhUmtsErrorsTable, cirbhBackHaulStatsHistoryEntry=cirbhBackHaulStatsHistoryEntry, cirbhStatsHistory000to009Seconds=cirbhStatsHistory000to009Seconds, cirbhStats010to019Seconds=cirbhStats010to019Seconds, cirbhStatsHistory030to039Seconds=cirbhStatsHistory030to039Seconds, cirbhBackHaulHistoryRcvdUmtsUtil=cirbhBackHaulHistoryRcvdUmtsUtil, cirbhErrorsBhMissedLatePackets=cirbhErrorsBhMissedLatePackets, cirbhGsmAlarmLocalState=cirbhGsmAlarmLocalState, cirbhShortHaulBulkBaseUnit=cirbhShortHaulBulkBaseUnit, ciscoIpRanBackHaulGsmErrorsGroup=ciscoIpRanBackHaulGsmErrorsGroup, cirbhShortHaulRcvdUtilization=cirbhShortHaulRcvdUtilization, CirbhAlarmState=CirbhAlarmState, cirbhBackHaulSentUtil=cirbhBackHaulSentUtil, cirbhStats040to049Seconds=cirbhStats040to049Seconds, cirbhErrorsBhInvalidPackets=cirbhErrorsBhInvalidPackets, cirbhGsmErrorsPeerNotReadyDrops=cirbhGsmErrorsPeerNotReadyDrops, ciscoIpRanBackHaulMIBGroups=ciscoIpRanBackHaulMIBGroups, ciscoIpRanBackHaulMIBComplianceRev1=ciscoIpRanBackHaulMIBComplianceRev1, cirbhUmtsConnectionTableEntry=cirbhUmtsConnectionTableEntry, cirbhNotifEnables=cirbhNotifEnables, cirbhErrorsDecompFailures=cirbhErrorsDecompFailures, cirbhInfoTable=cirbhInfoTable, cirbhErrorsBhLostSentPackets=cirbhErrorsBhLostSentPackets, cirbhBackHaulShortHaulEntry=cirbhBackHaulShortHaulEntry, cirbhStatsHistoryDirection=cirbhStatsHistoryDirection, cirbhShortHaulBulkTableEntry=cirbhShortHaulBulkTableEntry, cirbhUmtsErrorsCompNoPacketFailures=cirbhUmtsErrorsCompNoPacketFailures, cirbhUmtsConnectionState=cirbhUmtsConnectionState, cirbhBackHaulHistorySentUtil=cirbhBackHaulHistorySentUtil, cirbhGsmAlarmNotifEnabled=cirbhGsmAlarmNotifEnabled, ciscoIpRanBackHaulShortHaulGroup=ciscoIpRanBackHaulShortHaulGroup, ciscoIpRanBackHaulScalarsGroupRev2=ciscoIpRanBackHaulScalarsGroupRev2, ciscoIpRanBackHaulNotifGroupRev2=ciscoIpRanBackHaulNotifGroupRev2, cirbhShortHaulSentUtilization=cirbhShortHaulSentUtilization, cirbhShortHaulSentRate=cirbhShortHaulSentRate, cirbhGsmErrorsCompNoPacketFailures=cirbhGsmErrorsCompNoPacketFailures, cirbhStatsHistory090to100Seconds=cirbhStatsHistory090to100Seconds, cirbhStatsMaxUtilization=cirbhStatsMaxUtilization, cirbhStatsHistoryMaxTimeStamp=cirbhStatsHistoryMaxTimeStamp, cirbhGsmErrorsTableEntry=cirbhGsmErrorsTableEntry, ciscoIpRanBackHaulRcvdUtil=ciscoIpRanBackHaulRcvdUtil, cirbhScalars=cirbhScalars, cirbhErrorsCompQosDrops=cirbhErrorsCompQosDrops, cirbhShortHaulBulkTable=cirbhShortHaulBulkTable, cirbhShortHaulStats=cirbhShortHaulStats, cirbhUtilNotifEnabled=cirbhUtilNotifEnabled, cirbhBackHaulInfo=cirbhBackHaulInfo, CirbhShortHaulUtilization=CirbhShortHaulUtilization, cirbhBackHaulShortHaulTable=cirbhBackHaulShortHaulTable, cirbhGsmErrorsCompQosDrops=cirbhGsmErrorsCompQosDrops, cirbhErrorsCompNoPacketFailures=cirbhErrorsCompNoPacketFailures, cirbhStatsHistoryAverage=cirbhStatsHistoryAverage, cirbhStatsHistory050to059Seconds=cirbhStatsHistory050to059Seconds, cirbhUmtsAlarmTable=cirbhUmtsAlarmTable, cirbhGsmErrorsLostSentPackets=cirbhGsmErrorsLostSentPackets, cirbhInfoOptimizeTraffic=cirbhInfoOptimizeTraffic, cirbhErrorsCompFailures=cirbhErrorsCompFailures, cirbhGsmErrorsTxPacketFailures=cirbhGsmErrorsTxPacketFailures, cirbhErrorsBhMissedPackets=cirbhErrorsBhMissedPackets, cirbhGsmErrorsMissedNoMemPackets=cirbhGsmErrorsMissedNoMemPackets, cirbhBackHaulStatsEntries=cirbhBackHaulStatsEntries, cirbhGsmAlarmRedundancyState=cirbhGsmAlarmRedundancyState, cirbhGsmErrorsTable=cirbhGsmErrorsTable, cirbhGsmErrorsLateArrivals=cirbhGsmErrorsLateArrivals, cirbhUmtsConnectionTable=cirbhUmtsConnectionTable, cirbhErrorsCompIntDownFailures=cirbhErrorsCompIntDownFailures, cirbhShortHaulBulkUtil=cirbhShortHaulBulkUtil, cirbhBackHaulRcvdUtilState=cirbhBackHaulRcvdUtilState, cirbhShortHaulHistoryTableEntry=cirbhShortHaulHistoryTableEntry, cirbhErrorsBhMissedNoMemPackets=cirbhErrorsBhMissedNoMemPackets, cirbhGsmErrorsMissedLatePackets=cirbhGsmErrorsMissedLatePackets, cirbhStatsHistory010to019Seconds=cirbhStatsHistory010to019Seconds, cirbhUmtsErrorsTableEntry=cirbhUmtsErrorsTableEntry, ciscoIpRanBackHaulMIBNotifs=ciscoIpRanBackHaulMIBNotifs, cirbhLocation=cirbhLocation, cirbhInfoLocalAddrType=cirbhInfoLocalAddrType, cirbhBackHaulHistorySentAbisUtil=cirbhBackHaulHistorySentAbisUtil, ciscoIpRanBackHaulScalarsGroup=ciscoIpRanBackHaulScalarsGroup, cirbhBackHaulHistoryIndex=cirbhBackHaulHistoryIndex, cirbhBackHaulHistoryTimeStamp=cirbhBackHaulHistoryTimeStamp, cirbhInfoRemoteAddrType=cirbhInfoRemoteAddrType, cirbhInfoRemoteAddr=cirbhInfoRemoteAddr, cirbhStatsHistoryIndex=cirbhStatsHistoryIndex, ciscoIpRanBackHaulSentUtil=ciscoIpRanBackHaulSentUtil, ciscoIpRanBackHaulMIBComplianceRev2=ciscoIpRanBackHaulMIBComplianceRev2, CirbhCommpressInterfaceRate=CirbhCommpressInterfaceRate, cirbhInfoProtocol=cirbhInfoProtocol, cirbhGsmErrorsTxResets=cirbhGsmErrorsTxResets)
