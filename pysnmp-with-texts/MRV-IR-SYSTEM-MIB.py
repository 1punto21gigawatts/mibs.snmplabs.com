#
# PySNMP MIB module MRV-IR-SYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MRV-IR-SYSTEM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:15:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ObjectIdentity, ModuleIdentity, NotificationType, Bits, Integer32, iso, Unsigned32, Counter64, Gauge32, MibIdentifier, TimeTicks, enterprises, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ObjectIdentity", "ModuleIdentity", "NotificationType", "Bits", "Integer32", "iso", "Unsigned32", "Counter64", "Gauge32", "MibIdentifier", "TimeTicks", "enterprises", "IpAddress")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
mrvBpd = MibIdentifier((1, 3, 6, 1, 4, 1, 33))
mrvLx = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 100))
irSystemMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 33, 100, 1))
if mibBuilder.loadTexts: irSystemMib.setLastUpdated('200711080000Z')
if mibBuilder.loadTexts: irSystemMib.setOrganization('MRV Communications - BPD Division')
if mibBuilder.loadTexts: irSystemMib.setContactInfo('Postal: MRV Communications, Inc. 295 Foster Street Littleton, MA 01460 E-mail: support@mrv.com')
if mibBuilder.loadTexts: irSystemMib.setDescription('This is the MRV LX System MIB module.')
irSysSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 100, 1, 1))
irDevices = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 100, 1, 2))
irTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 100, 1, 3))
irCluster = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 100, 1, 4))
irEthernet = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 100, 1, 5))
irPower = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 100, 1, 6))
irInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 100, 1, 7))
irTar = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 100, 1, 8))
irIpmi = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 100, 1, 9))
irDeviceLx = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 100, 1, 2, 1))
irLx1001 = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 100, 1, 2, 1, 1))
irLx1002 = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 100, 1, 2, 1, 2))
irLx1004 = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 100, 1, 2, 1, 3))
irLx4008 = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 100, 1, 2, 1, 4))
irLx4016 = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 100, 1, 2, 1, 5))
irLx4032 = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 100, 1, 2, 1, 6))
irLx4048 = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 100, 1, 2, 1, 7))
irLxEm316 = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 100, 1, 2, 1, 8))
irLx8020 = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 100, 1, 2, 1, 9))
irLx8040 = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 100, 1, 2, 1, 10))
irLx4000T = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 100, 1, 2, 1, 11))
irLx7304T = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 100, 1, 2, 1, 12))
irLx4108T = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 100, 1, 2, 1, 13))
class TrapSeverity(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("cleared", 1), ("informational", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6))

class TarCreator(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("system", 2), ("snmp", 3))

class TarTrigType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))
    namedValues = NamedValues(("other", 1), ("temp", 2), ("humidity", 3), ("instant", 4), ("ping", 5), ("pattern", 6), ("inputSignal", 7), ("compound", 8), ("bootp", 9), ("alarm", 10), ("hdam", 11), ("power", 12), ("analog", 13), ("powerReg", 14), ("powerInput", 15), ("onboardTemp", 16), ("duration", 17), ("hdampower", 18), ("hdampowerReg", 19), ("hdampowerInput", 20), ("powerLoad", 21), ("powerLoadInput", 22), ("powerContact", 23), ("upsBattery", 24))

irSysImageFilename = MibScalar((1, 3, 6, 1, 4, 1, 33, 100, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irSysImageFilename.setStatus('current')
if mibBuilder.loadTexts: irSysImageFilename.setDescription('The name of the image file running on the system.')
irSysImageSource = MibScalar((1, 3, 6, 1, 4, 1, 33, 100, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flash", 1), ("network", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: irSysImageSource.setStatus('current')
if mibBuilder.loadTexts: irSysImageSource.setDescription('This indicates from where the image file was loaded. A value of flash(1) means the file was loaded from flash. A value of network(2) means the file was loaded from the server identified by irSysImageServer object.')
irSysImageServer = MibScalar((1, 3, 6, 1, 4, 1, 33, 100, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irSysImageServer.setStatus('current')
if mibBuilder.loadTexts: irSysImageServer.setDescription('The IP address of the server to be used when retrieving the image file via the network.')
irSysSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 33, 100, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irSysSwVersion.setStatus('current')
if mibBuilder.loadTexts: irSysSwVersion.setDescription('A string indicating the software version running on the system.')
irSysSwBootVersion = MibScalar((1, 3, 6, 1, 4, 1, 33, 100, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irSysSwBootVersion.setStatus('current')
if mibBuilder.loadTexts: irSysSwBootVersion.setDescription('A string indicating the boot software version running on the system.')
irSysIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 33, 100, 1, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irSysIpAddress.setStatus('current')
if mibBuilder.loadTexts: irSysIpAddress.setDescription('The IP address assigned to the ethernet interface.')
irSysSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 33, 100, 1, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irSysSubnetMask.setStatus('current')
if mibBuilder.loadTexts: irSysSubnetMask.setDescription('The IP subnet mask assigned to the ethernet interface.')
irSysBcastAddress = MibScalar((1, 3, 6, 1, 4, 1, 33, 100, 1, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irSysBcastAddress.setStatus('current')
if mibBuilder.loadTexts: irSysBcastAddress.setDescription('The IP broadcast address assigned to the ethernet interface.')
irSysGateway = MibScalar((1, 3, 6, 1, 4, 1, 33, 100, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irSysGateway.setStatus('current')
if mibBuilder.loadTexts: irSysGateway.setDescription('The default gateway IP address configured for the system.')
irSysAction = MibScalar((1, 3, 6, 1, 4, 1, 33, 100, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("saveConfig", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irSysAction.setStatus('current')
if mibBuilder.loadTexts: irSysAction.setDescription('A read of this object always returns the value other(1). Setting this object to saveConfig(2) saves the current config to flash. Setting this object to reset(3) resets the device.')
irSysSnmpSetErrorString = MibScalar((1, 3, 6, 1, 4, 1, 33, 100, 1, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irSysSnmpSetErrorString.setStatus('current')
if mibBuilder.loadTexts: irSysSnmpSetErrorString.setDescription('A text string that provides additional info when an snmp set request fails.')
irSysModelType = MibScalar((1, 3, 6, 1, 4, 1, 33, 100, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irSysModelType.setStatus('current')
if mibBuilder.loadTexts: irSysModelType.setDescription('The device model type string.')
irSysPowerType = MibScalar((1, 3, 6, 1, 4, 1, 33, 100, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("powerAC", 1), ("powerDC", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: irSysPowerType.setStatus('current')
if mibBuilder.loadTexts: irSysPowerType.setDescription('The type of power used by the device.')
irSysCurrentTemp = MibScalar((1, 3, 6, 1, 4, 1, 33, 100, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irSysCurrentTemp.setStatus('current')
if mibBuilder.loadTexts: irSysCurrentTemp.setDescription('The current temp reading (in celsius) for the onboard temperature sensor.')
irSysTempThresholdLow = MibScalar((1, 3, 6, 1, 4, 1, 33, 100, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irSysTempThresholdLow.setStatus('current')
if mibBuilder.loadTexts: irSysTempThresholdLow.setDescription('The low threshold temp setting (in celsius) for the device.')
irSysTempThresholdHigh = MibScalar((1, 3, 6, 1, 4, 1, 33, 100, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irSysTempThresholdHigh.setStatus('current')
if mibBuilder.loadTexts: irSysTempThresholdHigh.setDescription('The high threshold temp setting (in celsius) for the device.')
irSysTempHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 33, 100, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irSysTempHysteresis.setStatus('current')
if mibBuilder.loadTexts: irSysTempHysteresis.setDescription('The hysteresis setting applied to the temp thresholds for the device.')
irSysPowerLostTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 33, 100, 1, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irSysPowerLostTimestamp.setStatus('current')
if mibBuilder.loadTexts: irSysPowerLostTimestamp.setDescription('A string containing the timestamp when the device last lost power.')
irSysFipsMode = MibScalar((1, 3, 6, 1, 4, 1, 33, 100, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: irSysFipsMode.setStatus('current')
if mibBuilder.loadTexts: irSysFipsMode.setDescription('The fips mode status.')
irSysFlashMemSize = MibScalar((1, 3, 6, 1, 4, 1, 33, 100, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("s8M", 1), ("s16M", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: irSysFlashMemSize.setStatus('current')
if mibBuilder.loadTexts: irSysFlashMemSize.setDescription('The size of flash memory, in megabytes, on the system.')
irSysAssetTag = MibScalar((1, 3, 6, 1, 4, 1, 33, 100, 1, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irSysAssetTag.setStatus('current')
if mibBuilder.loadTexts: irSysAssetTag.setDescription('The configured asset tag string.')
irSysPowerCurrentLoad = MibScalar((1, 3, 6, 1, 4, 1, 33, 100, 1, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irSysPowerCurrentLoad.setStatus('current')
if mibBuilder.loadTexts: irSysPowerCurrentLoad.setDescription('An Ascii string indicating the total current load, in Amps, used by all power strips attached to this device.')
irPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 33, 100, 1, 6, 1), )
if mibBuilder.loadTexts: irPowerSupplyTable.setStatus('current')
if mibBuilder.loadTexts: irPowerSupplyTable.setDescription('A list of power supply entries.')
irPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 100, 1, 6, 1, 1), ).setIndexNames((0, "MRV-IR-SYSTEM-MIB", "irPowerIndex"))
if mibBuilder.loadTexts: irPowerSupplyEntry.setStatus('current')
if mibBuilder.loadTexts: irPowerSupplyEntry.setDescription('A power supply entry.')
irPowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irPowerIndex.setStatus('current')
if mibBuilder.loadTexts: irPowerIndex.setDescription('The index of the power unit.')
irPowerUnitPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: irPowerUnitPresent.setStatus('current')
if mibBuilder.loadTexts: irPowerUnitPresent.setDescription('This indicates if the power unit is present or not.')
irPowerInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: irPowerInputStatus.setStatus('current')
if mibBuilder.loadTexts: irPowerInputStatus.setDescription('This indicates if the power unit is plugged into a power source.')
irPowerOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: irPowerOutputStatus.setStatus('current')
if mibBuilder.loadTexts: irPowerOutputStatus.setDescription('This indicates the status of the internal power feed to the device components.')
irPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: irPowerStatus.setStatus('current')
if mibBuilder.loadTexts: irPowerStatus.setDescription('The overall status of the power unit.')
irPowerInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 6, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irPowerInputVoltage.setStatus('current')
if mibBuilder.loadTexts: irPowerInputVoltage.setDescription('The input voltage reading.')
irPowerOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 6, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irPowerOutputVoltage.setStatus('current')
if mibBuilder.loadTexts: irPowerOutputVoltage.setDescription('The output voltage reading.')
irClusterGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 100, 1, 4, 1))
irClusterCfgStatus = MibScalar((1, 3, 6, 1, 4, 1, 33, 100, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: irClusterCfgStatus.setStatus('current')
if mibBuilder.loadTexts: irClusterCfgStatus.setDescription('This indicates whether cluster config feature is enabled or disabled.')
irClusterName = MibScalar((1, 3, 6, 1, 4, 1, 33, 100, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irClusterName.setStatus('current')
if mibBuilder.loadTexts: irClusterName.setDescription('The name assigned to the cluster.')
irClusterSyncStatus = MibScalar((1, 3, 6, 1, 4, 1, 33, 100, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("syncInProgress", 2), ("syncCompletedSuccess", 3), ("syncCompletedError", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: irClusterSyncStatus.setStatus('current')
if mibBuilder.loadTexts: irClusterSyncStatus.setDescription('The cluster synch update status.')
irClusterAction = MibScalar((1, 3, 6, 1, 4, 1, 33, 100, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("flushAll", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: irClusterAction.setStatus('current')
if mibBuilder.loadTexts: irClusterAction.setDescription('A read of this object always returns the value other(1). Setting this obejct to flushAll(2) will delete all entries configured in the irClusterTable.')
irClusterTable = MibTable((1, 3, 6, 1, 4, 1, 33, 100, 1, 4, 2), )
if mibBuilder.loadTexts: irClusterTable.setStatus('current')
if mibBuilder.loadTexts: irClusterTable.setDescription('A list of cluster config entries.')
irClusterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 100, 1, 4, 2, 1), ).setIndexNames((0, "MRV-IR-SYSTEM-MIB", "irClusterIpAddr"))
if mibBuilder.loadTexts: irClusterEntry.setStatus('current')
if mibBuilder.loadTexts: irClusterEntry.setDescription('A cluster config entry.')
irClusterIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 4, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irClusterIpAddr.setStatus('current')
if mibBuilder.loadTexts: irClusterIpAddr.setDescription('The IP address of the cluster entry.')
irClusterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 4, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: irClusterStatus.setStatus('current')
if mibBuilder.loadTexts: irClusterStatus.setDescription('The row status value for the entry.')
irEnetPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 33, 100, 1, 5, 1), )
if mibBuilder.loadTexts: irEnetPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: irEnetPortConfigTable.setDescription('A list of ethernet port config entries.')
irEnetPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 100, 1, 5, 1, 1), ).setIndexNames((0, "MRV-IR-SYSTEM-MIB", "irEnetPortIndex"))
if mibBuilder.loadTexts: irEnetPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: irEnetPortConfigEntry.setDescription('An ethernet port config entry.')
irEnetPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irEnetPortIndex.setStatus('current')
if mibBuilder.loadTexts: irEnetPortIndex.setDescription('The port index for this enthernet port entry.')
irEnetPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sp10M", 1), ("sp100M", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: irEnetPortSpeed.setStatus('current')
if mibBuilder.loadTexts: irEnetPortSpeed.setDescription('The port speed.')
irEnetPortDuplexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("halfDuplex", 2), ("fullDuplex", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: irEnetPortDuplexMode.setStatus('current')
if mibBuilder.loadTexts: irEnetPortDuplexMode.setDescription('The port duplex mode.')
irEnetPortAutoNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("auto", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: irEnetPortAutoNegotiation.setStatus('current')
if mibBuilder.loadTexts: irEnetPortAutoNegotiation.setDescription('The port auto negotiation mode.')
irEnetPortPhysMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enet", 1), ("sfp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: irEnetPortPhysMedia.setStatus('current')
if mibBuilder.loadTexts: irEnetPortPhysMedia.setDescription('The physical media type.')
irEnetPortLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: irEnetPortLinkStatus.setStatus('current')
if mibBuilder.loadTexts: irEnetPortLinkStatus.setDescription('The ethernet port link status.')
irEnetPortBondingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("active", 2), ("backup", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: irEnetPortBondingStatus.setStatus('current')
if mibBuilder.loadTexts: irEnetPortBondingStatus.setDescription('The ethernet port bonding status. For systems with only a single ethernet port, the value will always be none(1).')
irEnetPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 33, 100, 1, 5, 2), )
if mibBuilder.loadTexts: irEnetPortStatsTable.setStatus('current')
if mibBuilder.loadTexts: irEnetPortStatsTable.setDescription('A list of ethernet port stats entries.')
irEnetPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 100, 1, 5, 2, 1), )
irEnetPortConfigEntry.registerAugmentions(("MRV-IR-SYSTEM-MIB", "irEnetPortStatsEntry"))
irEnetPortStatsEntry.setIndexNames(*irEnetPortConfigEntry.getIndexNames())
if mibBuilder.loadTexts: irEnetPortStatsEntry.setStatus('current')
if mibBuilder.loadTexts: irEnetPortStatsEntry.setDescription('An ethernet port stats entry.')
irEnetPortRecvBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 5, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irEnetPortRecvBytes.setStatus('current')
if mibBuilder.loadTexts: irEnetPortRecvBytes.setDescription('The number of bytes received on this port.')
irEnetPortRecvPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 5, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irEnetPortRecvPackets.setStatus('current')
if mibBuilder.loadTexts: irEnetPortRecvPackets.setDescription('The number of packets received on this port.')
irEnetPortRecvErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 5, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irEnetPortRecvErrors.setStatus('current')
if mibBuilder.loadTexts: irEnetPortRecvErrors.setDescription('The number of packets received with error.')
irEnetPortRecvDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 5, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irEnetPortRecvDropped.setStatus('current')
if mibBuilder.loadTexts: irEnetPortRecvDropped.setDescription('The number of received packets dropped.')
irEnetPortRecvOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 5, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irEnetPortRecvOverruns.setStatus('current')
if mibBuilder.loadTexts: irEnetPortRecvOverruns.setDescription('The number of received packets that ran out of buffers.')
irEnetPortRecvFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 5, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irEnetPortRecvFrameErrors.setStatus('current')
if mibBuilder.loadTexts: irEnetPortRecvFrameErrors.setDescription('The number of packets received with frame errors.')
irEnetPortRecvMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 5, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irEnetPortRecvMulticast.setStatus('current')
if mibBuilder.loadTexts: irEnetPortRecvMulticast.setDescription('The number of received multicast packets.')
irEnetPortRecvCompressed = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 5, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irEnetPortRecvCompressed.setStatus('current')
if mibBuilder.loadTexts: irEnetPortRecvCompressed.setDescription('The number of received compressed packets.')
irEnetPortXmitBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 5, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irEnetPortXmitBytes.setStatus('current')
if mibBuilder.loadTexts: irEnetPortXmitBytes.setDescription('The number of bytes transmitted on this port.')
irEnetPortXmitPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 5, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irEnetPortXmitPackets.setStatus('current')
if mibBuilder.loadTexts: irEnetPortXmitPackets.setDescription('The number of packets transmitted on this port.')
irEnetPortXmitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 5, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irEnetPortXmitErrors.setStatus('current')
if mibBuilder.loadTexts: irEnetPortXmitErrors.setDescription('The number of packets that encountered an error on transmission.')
irEnetPortXmitDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 5, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irEnetPortXmitDropped.setStatus('current')
if mibBuilder.loadTexts: irEnetPortXmitDropped.setDescription('The number of packets that were dropped due to transmit errors.')
irEnetPortXmitOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 5, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irEnetPortXmitOverruns.setStatus('current')
if mibBuilder.loadTexts: irEnetPortXmitOverruns.setDescription('The number of packets that ran out of buffers.')
irEnetPortXmitCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 5, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irEnetPortXmitCollisions.setStatus('current')
if mibBuilder.loadTexts: irEnetPortXmitCollisions.setDescription('The number of packets that encountered collisions on transmission.')
irEnetPortXmitCompressed = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 5, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irEnetPortXmitCompressed.setStatus('current')
if mibBuilder.loadTexts: irEnetPortXmitCompressed.setDescription('The number of transmitted compressed packets.')
irEnetPortXmitCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 5, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irEnetPortXmitCarrier.setStatus('current')
if mibBuilder.loadTexts: irEnetPortXmitCarrier.setDescription('The number of transmitted carrier errors.')
irIfTable = MibTable((1, 3, 6, 1, 4, 1, 33, 100, 1, 7, 1), )
if mibBuilder.loadTexts: irIfTable.setStatus('current')
if mibBuilder.loadTexts: irIfTable.setDescription('A list of IP interface entries.')
irIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 100, 1, 7, 1, 1), ).setIndexNames((0, "MRV-IR-SYSTEM-MIB", "irIfIndex"))
if mibBuilder.loadTexts: irIfEntry.setStatus('current')
if mibBuilder.loadTexts: irIfEntry.setDescription('An IP interface entry.')
irIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irIfIndex.setStatus('current')
if mibBuilder.loadTexts: irIfIndex.setDescription('The index for this interface entry.')
irIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 7, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irIfIpAddress.setStatus('current')
if mibBuilder.loadTexts: irIfIpAddress.setDescription('The IP address assigned to this interface.')
irIfIpSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 7, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irIfIpSubnetMask.setStatus('current')
if mibBuilder.loadTexts: irIfIpSubnetMask.setDescription('The subnet mask assigned to this interface.')
irIfIpBcastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 7, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: irIfIpBcastAddress.setStatus('current')
if mibBuilder.loadTexts: irIfIpBcastAddress.setDescription('The broadcast address assigned to this interface.')
irIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: irIfMtu.setStatus('current')
if mibBuilder.loadTexts: irIfMtu.setDescription('The MTU size assigned to this interface.')
irIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 7, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: irIfName.setStatus('current')
if mibBuilder.loadTexts: irIfName.setDescription('The name string assigned to this interface.')
irIfBoundTo = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 7, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: irIfBoundTo.setStatus('current')
if mibBuilder.loadTexts: irIfBoundTo.setDescription('The name of the physical interface to which this interface is bound.')
irIfTelnetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: irIfTelnetPort.setStatus('current')
if mibBuilder.loadTexts: irIfTelnetPort.setDescription('The telnet port to use when connecting via this interface.')
irIfSshPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: irIfSshPort.setStatus('current')
if mibBuilder.loadTexts: irIfSshPort.setDescription('The ssh port to use when connecting via this interface.')
irTarSys = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 100, 1, 8, 1))
irTarTable = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 100, 1, 8, 2))
tarNextFreeTrigIndex = MibScalar((1, 3, 6, 1, 4, 1, 33, 100, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tarNextFreeTrigIndex.setStatus('current')
if mibBuilder.loadTexts: tarNextFreeTrigIndex.setDescription('The next free index in the trigger table.')
tarNextFreeActionIndex = MibScalar((1, 3, 6, 1, 4, 1, 33, 100, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tarNextFreeActionIndex.setStatus('current')
if mibBuilder.loadTexts: tarNextFreeActionIndex.setDescription('The next free index in the trigger action table.')
tarNextFreeRuleIndex = MibScalar((1, 3, 6, 1, 4, 1, 33, 100, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tarNextFreeRuleIndex.setStatus('current')
if mibBuilder.loadTexts: tarNextFreeRuleIndex.setDescription('The next free index in the trigger rule table.')
tarTrigTable = MibTable((1, 3, 6, 1, 4, 1, 33, 100, 1, 8, 2, 1), )
if mibBuilder.loadTexts: tarTrigTable.setStatus('current')
if mibBuilder.loadTexts: tarTrigTable.setDescription('A list of trigger entries.')
tarTrigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 100, 1, 8, 2, 1, 1), ).setIndexNames((0, "MRV-IR-SYSTEM-MIB", "tarTrigIndex"))
if mibBuilder.loadTexts: tarTrigEntry.setStatus('current')
if mibBuilder.loadTexts: tarTrigEntry.setDescription('A trigger entry.')
tarTrigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 8, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tarTrigIndex.setStatus('current')
if mibBuilder.loadTexts: tarTrigIndex.setDescription('The index for this trigger entry.')
tarTrigName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 8, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tarTrigName.setStatus('current')
if mibBuilder.loadTexts: tarTrigName.setDescription('The name assigned to this trigger.')
tarTrigType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 8, 2, 1, 1, 3), TarTrigType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tarTrigType.setStatus('current')
if mibBuilder.loadTexts: tarTrigType.setDescription('The type of trigger.')
tarTrigCreator = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 8, 2, 1, 1, 4), TarCreator()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tarTrigCreator.setStatus('current')
if mibBuilder.loadTexts: tarTrigCreator.setDescription('The creator of this trigger.')
tarTrigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 8, 2, 1, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tarTrigRowStatus.setStatus('current')
if mibBuilder.loadTexts: tarTrigRowStatus.setDescription('The row status for this trigger.')
tarActionTable = MibTable((1, 3, 6, 1, 4, 1, 33, 100, 1, 8, 2, 2), )
if mibBuilder.loadTexts: tarActionTable.setStatus('current')
if mibBuilder.loadTexts: tarActionTable.setDescription('A list of trigger action entries.')
tarActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 100, 1, 8, 2, 2, 1), ).setIndexNames((0, "MRV-IR-SYSTEM-MIB", "tarActionIndex"))
if mibBuilder.loadTexts: tarActionEntry.setStatus('current')
if mibBuilder.loadTexts: tarActionEntry.setDescription('A trigger action entry.')
tarActionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 8, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tarActionIndex.setStatus('current')
if mibBuilder.loadTexts: tarActionIndex.setDescription('The index for this action entry.')
tarActionName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 8, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tarActionName.setStatus('current')
if mibBuilder.loadTexts: tarActionName.setDescription('The name string assigned to this action.')
tarActionCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 8, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 135))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tarActionCommand.setStatus('current')
if mibBuilder.loadTexts: tarActionCommand.setDescription('The command string assigned to this action.')
tarActionCreator = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 8, 2, 2, 1, 4), TarCreator()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tarActionCreator.setStatus('current')
if mibBuilder.loadTexts: tarActionCreator.setDescription('The creator of this trigger.')
tarActionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 8, 2, 2, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tarActionRowStatus.setStatus('current')
if mibBuilder.loadTexts: tarActionRowStatus.setDescription('The status for this action entry.')
tarRuleTable = MibTable((1, 3, 6, 1, 4, 1, 33, 100, 1, 8, 2, 3), )
if mibBuilder.loadTexts: tarRuleTable.setStatus('current')
if mibBuilder.loadTexts: tarRuleTable.setDescription('A list of trigger rule entries.')
tarRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 100, 1, 8, 2, 3, 1), ).setIndexNames((0, "MRV-IR-SYSTEM-MIB", "tarRuleIndex"))
if mibBuilder.loadTexts: tarRuleEntry.setStatus('current')
if mibBuilder.loadTexts: tarRuleEntry.setDescription('A trigger rule entry.')
tarRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 8, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tarRuleIndex.setStatus('current')
if mibBuilder.loadTexts: tarRuleIndex.setDescription('The index for this rule entry.')
tarRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 8, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tarRuleName.setStatus('current')
if mibBuilder.loadTexts: tarRuleName.setDescription('The name string assigned to this rule.')
tarRuleTrigId = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 8, 2, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tarRuleTrigId.setStatus('current')
if mibBuilder.loadTexts: tarRuleTrigId.setDescription('The trigger index entry to which this rule is attached.')
tarRuleActionId = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 8, 2, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tarRuleActionId.setStatus('current')
if mibBuilder.loadTexts: tarRuleActionId.setDescription('The trigger action entry to which this rule is attached.')
tarRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 8, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tarRuleStatus.setStatus('current')
if mibBuilder.loadTexts: tarRuleStatus.setDescription('The status for this entry.')
tarRuleExecCount = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 8, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tarRuleExecCount.setStatus('current')
if mibBuilder.loadTexts: tarRuleExecCount.setDescription('The number of times the action command for this rule has been executed since the system was started.')
tarRuleErrorCount = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 8, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tarRuleErrorCount.setStatus('current')
if mibBuilder.loadTexts: tarRuleErrorCount.setDescription('The number of times the execution of this rule has resulted in an error.')
tarRuleCreator = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 8, 2, 3, 1, 8), TarCreator()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tarRuleCreator.setStatus('current')
if mibBuilder.loadTexts: tarRuleCreator.setDescription('The creator of this rule.')
tarRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 8, 2, 3, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tarRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: tarRuleRowStatus.setDescription('The row status for this entry.')
tarTempTrigTable = MibTable((1, 3, 6, 1, 4, 1, 33, 100, 1, 8, 2, 4), )
if mibBuilder.loadTexts: tarTempTrigTable.setStatus('current')
if mibBuilder.loadTexts: tarTempTrigTable.setDescription('A list of temp trigger entries.')
tarTempTrigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 100, 1, 8, 2, 4, 1), )
tarTrigEntry.registerAugmentions(("MRV-IR-SYSTEM-MIB", "tarTempTrigEntry"))
tarTempTrigEntry.setIndexNames(*tarTrigEntry.getIndexNames())
if mibBuilder.loadTexts: tarTempTrigEntry.setStatus('current')
if mibBuilder.loadTexts: tarTempTrigEntry.setDescription('A temp trigger entry.')
tarTempTrigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 8, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tarTempTrigPort.setStatus('current')
if mibBuilder.loadTexts: tarTempTrigPort.setDescription('The port to which this trigger is attached.')
tarTempTrigOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 8, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lessThan", 1), ("greaterThan", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tarTempTrigOperator.setStatus('current')
if mibBuilder.loadTexts: tarTempTrigOperator.setDescription('The logical operator for this trigger.')
tarTempTrigThresholdValue = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 8, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tarTempTrigThresholdValue.setStatus('current')
if mibBuilder.loadTexts: tarTempTrigThresholdValue.setDescription('The threshold value for this trigger.')
tarTempTrigUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 8, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tarTempTrigUnits.setStatus('current')
if mibBuilder.loadTexts: tarTempTrigUnits.setDescription('The units for the threshold value.')
tarTempTrigHysteresis = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 8, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tarTempTrigHysteresis.setStatus('current')
if mibBuilder.loadTexts: tarTempTrigHysteresis.setDescription('The hysteresis value for this trigger.')
tarSigTrigTable = MibTable((1, 3, 6, 1, 4, 1, 33, 100, 1, 8, 2, 6), )
if mibBuilder.loadTexts: tarSigTrigTable.setStatus('current')
if mibBuilder.loadTexts: tarSigTrigTable.setDescription('A list of signal trigger entries.')
tarSigTrigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 100, 1, 8, 2, 6, 1), )
tarTrigEntry.registerAugmentions(("MRV-IR-SYSTEM-MIB", "tarSigTrigEntry"))
tarSigTrigEntry.setIndexNames(*tarTrigEntry.getIndexNames())
if mibBuilder.loadTexts: tarSigTrigEntry.setStatus('current')
if mibBuilder.loadTexts: tarSigTrigEntry.setDescription('A signal trigger entry.')
tarSigTrigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 8, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tarSigTrigPort.setStatus('current')
if mibBuilder.loadTexts: tarSigTrigPort.setDescription('The port to which this trigger is attached.')
tarSigTrigSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 8, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cts", 1), ("dsr", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tarSigTrigSignal.setStatus('current')
if mibBuilder.loadTexts: tarSigTrigSignal.setDescription('The input signal type being monitored.')
tarSigTrigState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 100, 1, 8, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tarSigTrigState.setStatus('current')
if mibBuilder.loadTexts: tarSigTrigState.setDescription('The signal state that will cause the action to be taken.')
irIpmiSys = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 100, 1, 9, 1))
ipmiDiscreteOffset = MibScalar((1, 3, 6, 1, 4, 1, 33, 100, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipmiDiscreteOffset.setStatus('current')
if mibBuilder.loadTexts: ipmiDiscreteOffset.setDescription('The offset within the discrete sensor for which the event occurred.')
ipmiDiscreteSensorName = MibScalar((1, 3, 6, 1, 4, 1, 33, 100, 1, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 98))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipmiDiscreteSensorName.setStatus('current')
if mibBuilder.loadTexts: ipmiDiscreteSensorName.setDescription('An Ascii string indicating the name of the IPMI discrete sensor for which the event occurred.')
ipmiThresholdType = MibScalar((1, 3, 6, 1, 4, 1, 33, 100, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("lowerNonCritical", 1), ("lowerCritical", 2), ("lowerNonRecoverable", 3), ("upperNonCritical", 4), ("upperCritical", 5), ("upperNonRecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipmiThresholdType.setStatus('current')
if mibBuilder.loadTexts: ipmiThresholdType.setDescription('The type of threshold sensor event.')
ipmiThresholdSensorName = MibScalar((1, 3, 6, 1, 4, 1, 33, 100, 1, 9, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 98))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipmiThresholdSensorName.setStatus('current')
if mibBuilder.loadTexts: ipmiThresholdSensorName.setDescription('An Ascii string indicating the name of the IPMI threshold sensor for which the event occurred.')
ipmiThresholdDirection = MibScalar((1, 3, 6, 1, 4, 1, 33, 100, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("goingLow", 1), ("goingHigh", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipmiThresholdDirection.setStatus('current')
if mibBuilder.loadTexts: ipmiThresholdDirection.setDescription('The direction of the threshold sensor event.')
ipmiThresholdAssert = MibScalar((1, 3, 6, 1, 4, 1, 33, 100, 1, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("assertion", 1), ("deassertion", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipmiThresholdAssert.setStatus('current')
if mibBuilder.loadTexts: ipmiThresholdAssert.setDescription('The assertion value of the threshold sensor event.')
mibBuilder.exportSymbols("MRV-IR-SYSTEM-MIB", irLx1002=irLx1002, irSysPowerCurrentLoad=irSysPowerCurrentLoad, tarRuleStatus=tarRuleStatus, tarActionRowStatus=tarActionRowStatus, ipmiThresholdDirection=ipmiThresholdDirection, irSysTempThresholdHigh=irSysTempThresholdHigh, irEnetPortDuplexMode=irEnetPortDuplexMode, irEnetPortXmitOverruns=irEnetPortXmitOverruns, irSysSubnetMask=irSysSubnetMask, TrapSeverity=TrapSeverity, tarRuleEntry=tarRuleEntry, tarTrigIndex=tarTrigIndex, irIfIpBcastAddress=irIfIpBcastAddress, irEnetPortRecvBytes=irEnetPortRecvBytes, ipmiDiscreteSensorName=ipmiDiscreteSensorName, irLx4000T=irLx4000T, irSysFipsMode=irSysFipsMode, irEnetPortRecvFrameErrors=irEnetPortRecvFrameErrors, tarTrigEntry=tarTrigEntry, irSysImageFilename=irSysImageFilename, irSysSystem=irSysSystem, TarCreator=TarCreator, tarTrigName=tarTrigName, tarRuleActionId=tarRuleActionId, tarRuleName=tarRuleName, irPowerOutputStatus=irPowerOutputStatus, irLx1004=irLx1004, irSysImageSource=irSysImageSource, irEnetPortRecvOverruns=irEnetPortRecvOverruns, irEnetPortLinkStatus=irEnetPortLinkStatus, tarSigTrigEntry=tarSigTrigEntry, tarActionTable=tarActionTable, irEnetPortXmitCompressed=irEnetPortXmitCompressed, irLx8020=irLx8020, irTraps=irTraps, tarTempTrigUnits=tarTempTrigUnits, irLx1001=irLx1001, tarActionCreator=tarActionCreator, irEnetPortRecvMulticast=irEnetPortRecvMulticast, mrvBpd=mrvBpd, irIfIpSubnetMask=irIfIpSubnetMask, irSysAssetTag=irSysAssetTag, irEnetPortIndex=irEnetPortIndex, irClusterStatus=irClusterStatus, tarRuleErrorCount=tarRuleErrorCount, irSysTempHysteresis=irSysTempHysteresis, tarTempTrigTable=tarTempTrigTable, tarTempTrigThresholdValue=tarTempTrigThresholdValue, tarRuleTable=tarRuleTable, irLx7304T=irLx7304T, irEnetPortConfigTable=irEnetPortConfigTable, irIfTable=irIfTable, irPowerIndex=irPowerIndex, irPowerUnitPresent=irPowerUnitPresent, irSysGateway=irSysGateway, irEnetPortStatsTable=irEnetPortStatsTable, tarTempTrigPort=tarTempTrigPort, tarTempTrigOperator=tarTempTrigOperator, irPowerOutputVoltage=irPowerOutputVoltage, tarRuleTrigId=tarRuleTrigId, irEthernet=irEthernet, irEnetPortBondingStatus=irEnetPortBondingStatus, irIfName=irIfName, irClusterCfgStatus=irClusterCfgStatus, irClusterTable=irClusterTable, irIfBoundTo=irIfBoundTo, irLx4016=irLx4016, tarRuleRowStatus=tarRuleRowStatus, irClusterGrp=irClusterGrp, mrvLx=mrvLx, irEnetPortRecvDropped=irEnetPortRecvDropped, tarNextFreeTrigIndex=tarNextFreeTrigIndex, tarTempTrigEntry=tarTempTrigEntry, irPower=irPower, PYSNMP_MODULE_ID=irSystemMib, irIfIpAddress=irIfIpAddress, tarNextFreeRuleIndex=tarNextFreeRuleIndex, irPowerInputStatus=irPowerInputStatus, irIfIndex=irIfIndex, irIfEntry=irIfEntry, tarRuleCreator=tarRuleCreator, ipmiThresholdType=ipmiThresholdType, tarActionCommand=tarActionCommand, TarTrigType=TarTrigType, irSysCurrentTemp=irSysCurrentTemp, tarTrigCreator=tarTrigCreator, irSysPowerLostTimestamp=irSysPowerLostTimestamp, irClusterEntry=irClusterEntry, irClusterIpAddr=irClusterIpAddr, irEnetPortRecvPackets=irEnetPortRecvPackets, tarActionEntry=tarActionEntry, irLx4008=irLx4008, irIpmi=irIpmi, irEnetPortStatsEntry=irEnetPortStatsEntry, irSysSwVersion=irSysSwVersion, irPowerInputVoltage=irPowerInputVoltage, irTar=irTar, irEnetPortConfigEntry=irEnetPortConfigEntry, irIfTelnetPort=irIfTelnetPort, irPowerSupplyEntry=irPowerSupplyEntry, irTarTable=irTarTable, irEnetPortAutoNegotiation=irEnetPortAutoNegotiation, irEnetPortXmitPackets=irEnetPortXmitPackets, irLx4108T=irLx4108T, irEnetPortRecvCompressed=irEnetPortRecvCompressed, irSysBcastAddress=irSysBcastAddress, tarRuleIndex=tarRuleIndex, irClusterSyncStatus=irClusterSyncStatus, irEnetPortXmitCollisions=irEnetPortXmitCollisions, irSysIpAddress=irSysIpAddress, irSysPowerType=irSysPowerType, irInterfaces=irInterfaces, irClusterAction=irClusterAction, irEnetPortRecvErrors=irEnetPortRecvErrors, irEnetPortXmitBytes=irEnetPortXmitBytes, ipmiDiscreteOffset=ipmiDiscreteOffset, irLx4048=irLx4048, tarSigTrigSignal=tarSigTrigSignal, tarActionName=tarActionName, tarTempTrigHysteresis=tarTempTrigHysteresis, irLx8040=irLx8040, tarRuleExecCount=tarRuleExecCount, tarSigTrigPort=tarSigTrigPort, irDeviceLx=irDeviceLx, irIfMtu=irIfMtu, irIfSshPort=irIfSshPort, irSysTempThresholdLow=irSysTempThresholdLow, irSysFlashMemSize=irSysFlashMemSize, irSysAction=irSysAction, irLxEm316=irLxEm316, irSysSwBootVersion=irSysSwBootVersion, irEnetPortXmitCarrier=irEnetPortXmitCarrier, tarTrigTable=tarTrigTable, tarNextFreeActionIndex=tarNextFreeActionIndex, tarTrigRowStatus=tarTrigRowStatus, ipmiThresholdSensorName=ipmiThresholdSensorName, tarTrigType=tarTrigType, irTarSys=irTarSys, irEnetPortXmitErrors=irEnetPortXmitErrors, tarActionIndex=tarActionIndex, tarSigTrigState=tarSigTrigState, irEnetPortPhysMedia=irEnetPortPhysMedia, ipmiThresholdAssert=ipmiThresholdAssert, tarSigTrigTable=tarSigTrigTable, irSysModelType=irSysModelType, irEnetPortXmitDropped=irEnetPortXmitDropped, irSysSnmpSetErrorString=irSysSnmpSetErrorString, irSysImageServer=irSysImageServer, irPowerStatus=irPowerStatus, irCluster=irCluster, irIpmiSys=irIpmiSys, irPowerSupplyTable=irPowerSupplyTable, irSystemMib=irSystemMib, irClusterName=irClusterName, irDevices=irDevices, irLx4032=irLx4032, irEnetPortSpeed=irEnetPortSpeed)
