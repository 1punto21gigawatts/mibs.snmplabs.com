#
# PySNMP MIB module RDN-SENSOR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RDN-SENSOR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:55:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
riverdelta, = mibBuilder.importSymbols("RDN-MIB", "riverdelta")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, IpAddress, Counter32, Integer32, iso, MibIdentifier, Bits, Unsigned32, Counter64, NotificationType, TimeTicks, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "IpAddress", "Counter32", "Integer32", "iso", "MibIdentifier", "Bits", "Unsigned32", "Counter64", "NotificationType", "TimeTicks", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
rdnSensor = ModuleIdentity((1, 3, 6, 1, 4, 1, 4981, 5))
rdnSensor.setRevisions(('2008-08-08 00:00', '2003-11-05 00:00', '2003-04-29 00:00', '2001-08-07 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rdnSensor.setRevisionsDescriptions(("Added Copyright Statement into MIB modules's description.", '+ Updated the CONTACT-INFO. + Reorder REVISION/DESCRIPTION in required reverse chronological order.', "This `corrects past mistakes' where ASN.1 allowed hyphens but SMIv2 states that hyphens are not allowed in identifiers for objects or for labels on enumerated integer values. Hyphens where removed from the lables on enumerated integer values from the 'rdnSensorStatus' object. Also cleans up the CONTACT-INFO.", 'Initial creation.',))
if mibBuilder.loadTexts: rdnSensor.setLastUpdated('200808080000Z')
if mibBuilder.loadTexts: rdnSensor.setOrganization('Motorola')
if mibBuilder.loadTexts: rdnSensor.setContactInfo('Motorola Customer Service 101 Tournament Drive Horsham, PA 19044 US Tel: +1 888 944 4357 Int Tel: +1 215 323 0044 Fax: +1 215 323 1502 Email: CPSSupport@Motorola.com')
if mibBuilder.loadTexts: rdnSensor.setDescription('MIB module for Motorola hardware sensors. Copyright (C) 2001, 2008 by Motorola, Inc. All rights reserved.')
rdnSensorTable = MibTable((1, 3, 6, 1, 4, 1, 4981, 5, 1), )
if mibBuilder.loadTexts: rdnSensorTable.setStatus('current')
if mibBuilder.loadTexts: rdnSensorTable.setDescription('Hardware Sensor table.')
rdnSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4981, 5, 1, 1), ).setIndexNames((0, "RDN-SENSOR-MIB", "rdnSensorIndex"))
if mibBuilder.loadTexts: rdnSensorEntry.setStatus('current')
if mibBuilder.loadTexts: rdnSensorEntry.setDescription('Hardware Sensor table entry.')
rdnSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnSensorIndex.setStatus('current')
if mibBuilder.loadTexts: rdnSensorIndex.setDescription('An index uniquely identifying an entry in the rdnSensorTable.')
rdnSensorDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnSensorDescr.setStatus('current')
if mibBuilder.loadTexts: rdnSensorDescr.setDescription('A text description of the sensor described by this table entry.')
rdnSensorObjectID = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 5, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnSensorObjectID.setStatus('current')
if mibBuilder.loadTexts: rdnSensorObjectID.setDescription('The object identifier (OID) describing the type of sensor described by this entry.')
rdnSensorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnSensorValue.setStatus('current')
if mibBuilder.loadTexts: rdnSensorValue.setDescription('The temperature value in degrees Celsius of the sensor described by this entry.')
rdnSensorThresholdHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 5, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnSensorThresholdHigh.setStatus('current')
if mibBuilder.loadTexts: rdnSensorThresholdHigh.setDescription('The high temperature threshold value of normal operating conditions described by this entry.')
rdnSensorThresholdLow = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 5, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnSensorThresholdLow.setStatus('current')
if mibBuilder.loadTexts: rdnSensorThresholdLow.setDescription('The low temperature threshold value of normal operating conditions described by this entry.')
rdnSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("ok", 2), ("belowMin", 3), ("aboveMax", 4), ("defective", 5), ("notPresent", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdnSensorStatus.setStatus('current')
if mibBuilder.loadTexts: rdnSensorStatus.setDescription('The operational status of the sensor described by this entry.')
rdnSensorNotificationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4981, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rdnSensorNotificationEnable.setStatus('current')
if mibBuilder.loadTexts: rdnSensorNotificationEnable.setDescription('The notification enable of the sensor described by this entry.')
rdnSensorNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 4981, 5, 2))
rdnSensorNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 4981, 5, 2, 0))
rdnSensorThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 4981, 5, 2, 0, 1)).setObjects(("RDN-SENSOR-MIB", "rdnSensorIndex"), ("RDN-SENSOR-MIB", "rdnSensorDescr"), ("RDN-SENSOR-MIB", "rdnSensorObjectID"), ("RDN-SENSOR-MIB", "rdnSensorValue"), ("RDN-SENSOR-MIB", "rdnSensorThresholdHigh"), ("RDN-SENSOR-MIB", "rdnSensorThresholdLow"), ("RDN-SENSOR-MIB", "rdnSensorStatus"))
if mibBuilder.loadTexts: rdnSensorThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: rdnSensorThresholdExceeded.setDescription('The notification sent for the alarm condition triggered when the temperature of a sensor exceeds its low or high threshold level.')
mibBuilder.exportSymbols("RDN-SENSOR-MIB", rdnSensorThresholdHigh=rdnSensorThresholdHigh, rdnSensorNotifications=rdnSensorNotifications, rdnSensorNotificationEnable=rdnSensorNotificationEnable, rdnSensorObjectID=rdnSensorObjectID, rdnSensorTable=rdnSensorTable, rdnSensorStatus=rdnSensorStatus, rdnSensorDescr=rdnSensorDescr, rdnSensorIndex=rdnSensorIndex, rdnSensorValue=rdnSensorValue, rdnSensorThresholdLow=rdnSensorThresholdLow, rdnSensorNotificationsPrefix=rdnSensorNotificationsPrefix, rdnSensorThresholdExceeded=rdnSensorThresholdExceeded, PYSNMP_MODULE_ID=rdnSensor, rdnSensor=rdnSensor, rdnSensorEntry=rdnSensorEntry)
