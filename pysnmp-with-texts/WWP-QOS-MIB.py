#
# PySNMP MIB module WWP-QOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-QOS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:38:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, MibIdentifier, Bits, Integer32, Gauge32, ObjectIdentity, TimeTicks, IpAddress, NotificationType, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, iso, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibIdentifier", "Bits", "Integer32", "Gauge32", "ObjectIdentity", "TimeTicks", "IpAddress", "NotificationType", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "iso", "Unsigned32")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
wwpModules, = mibBuilder.importSymbols("WWP-SMI", "wwpModules")
wwpQosMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 12))
wwpQosMIB.setRevisions(('2001-04-03 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wwpQosMIB.setRevisionsDescriptions(('Initial creation.',))
if mibBuilder.loadTexts: wwpQosMIB.setLastUpdated('200104031700Z')
if mibBuilder.loadTexts: wwpQosMIB.setOrganization('World Wide Packets, Inc')
if mibBuilder.loadTexts: wwpQosMIB.setContactInfo(' Mib Meister Postal: World Wide Packets P.O. Box 950 Veradale, WA 99037 USA Phone: +1 509 242 9000 Email: mib.meister@worldwidepackets.com')
if mibBuilder.loadTexts: wwpQosMIB.setDescription('The MIB module for the WWP QOS specific information.')
class VlanId(TextualConvention, Integer32):
    description = 'A 12-bit VLAN ID used in the VLAN Tag header.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4094)

wwpQosMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 12, 1))
wwpQos = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 12, 1, 1))
wwpQosNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 12, 2))
wwpQosNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 12, 2, 0))
wwpQosMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 12, 3))
wwpQosMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 12, 3, 1))
wwpQosMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 12, 3, 2))
wwpQosTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 12, 1, 1, 1), )
if mibBuilder.loadTexts: wwpQosTable.setStatus('current')
if mibBuilder.loadTexts: wwpQosTable.setDescription('A Table of QOS per vlan per port Entries.')
wwpQosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 12, 1, 1, 1, 1), ).setIndexNames((0, "WWP-QOS-MIB", "wwpQosVlanId"), (0, "WWP-QOS-MIB", "wwpQosPortId"))
if mibBuilder.loadTexts: wwpQosEntry.setStatus('current')
if mibBuilder.loadTexts: wwpQosEntry.setDescription('The QOS per vlan per port Entry in the Table.')
wwpQosVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 12, 1, 1, 1, 1, 1), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpQosVlanId.setStatus('current')
if mibBuilder.loadTexts: wwpQosVlanId.setDescription('Vlan ID for this instance of QOS. This Vlan Id should refer to the wwpVlanId in the WwpVlanEntry.')
wwpQosPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 12, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpQosPortId.setStatus('current')
if mibBuilder.loadTexts: wwpQosPortId.setDescription("Port ID for this instance of . Port ID's start at 1, and are consecutive for each additional port. This port Id should refer to the dot1dBasePort in the Dot1dBasePortEntry.")
wwpQosRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 12, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpQosRateLimit.setStatus('current')
if mibBuilder.loadTexts: wwpQosRateLimit.setDescription('The ingress traffic rate limit to be applied for this QOS entry.')
wwpQosPriQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 12, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpQosPriQueue.setStatus('current')
if mibBuilder.loadTexts: wwpQosPriQueue.setDescription('The TX-priority-queue value for this entry.')
wwpQosRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 12, 1, 1, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpQosRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpQosRowStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'.")
wwpQosStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 12, 1, 1, 2), )
if mibBuilder.loadTexts: wwpQosStatsTable.setStatus('current')
if mibBuilder.loadTexts: wwpQosStatsTable.setDescription('A Table of QOS Stats per vlan per port Entries.')
wwpQosStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 12, 1, 1, 2, 1), ).setIndexNames((0, "WWP-QOS-MIB", "wwpQosStatsVlanId"), (0, "WWP-QOS-MIB", "wwpQosStatsPortId"))
if mibBuilder.loadTexts: wwpQosStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wwpQosStatsEntry.setDescription('The QOS Stats per vlan per port Entry in the Table.')
wwpQosStatsVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 12, 1, 1, 2, 1, 1), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpQosStatsVlanId.setStatus('current')
if mibBuilder.loadTexts: wwpQosStatsVlanId.setDescription('Vlan ID for this instance of QOS. This Vlan Id should refer to the wwpVlanId in the WwpVlanEntry.')
wwpQosStatsPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 12, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpQosStatsPortId.setStatus('current')
if mibBuilder.loadTexts: wwpQosStatsPortId.setDescription("Port ID for this instance of . Port ID's start at 1, and are consecutive for each additional port. This port Id should refer to the dot1dBasePort in the Dot1dBasePortEntry.")
wwpQosRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 12, 1, 1, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpQosRxBytes.setStatus('current')
if mibBuilder.loadTexts: wwpQosRxBytes.setDescription('The number of bytes received for this QOS Entry.')
wwpQosRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 12, 1, 1, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpQosRxPkts.setStatus('current')
if mibBuilder.loadTexts: wwpQosRxPkts.setDescription('The number of pkts received for this QOS Entry.')
wwpQosResetCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 12, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpQosResetCounters.setStatus('deprecated')
if mibBuilder.loadTexts: wwpQosResetCounters.setDescription("To reset the counters related to this QOS entry. A read on this object will always return the 'none'")
wwpQosPriToQMapTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 12, 1, 1, 3), )
if mibBuilder.loadTexts: wwpQosPriToQMapTable.setStatus('current')
if mibBuilder.loadTexts: wwpQosPriToQMapTable.setDescription('A Table of mapping of an RX-priority to a TX-queue.')
wwpQosPriToQMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 12, 1, 1, 3, 1), ).setIndexNames((0, "WWP-QOS-MIB", "wwpQosRxPriority"))
if mibBuilder.loadTexts: wwpQosPriToQMapEntry.setStatus('current')
if mibBuilder.loadTexts: wwpQosPriToQMapEntry.setDescription('The mapping Entry of an RX-priority to a TX-queue in the Table.')
wwpQosRxPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 12, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpQosRxPriority.setStatus('current')
if mibBuilder.loadTexts: wwpQosRxPriority.setDescription('The RX-prioroty value for this entry.')
wwpQosTxPriQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 12, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpQosTxPriQueue.setStatus('current')
if mibBuilder.loadTexts: wwpQosTxPriQueue.setDescription('The TX-priority-queue value for this entry.')
wwpQosPortTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 12, 1, 1, 4), )
if mibBuilder.loadTexts: wwpQosPortTable.setStatus('current')
if mibBuilder.loadTexts: wwpQosPortTable.setDescription('A Table of QOS per port Entries.')
wwpQosPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 12, 1, 1, 4, 1), ).setIndexNames((0, "WWP-QOS-MIB", "wwpQosPortIndex"))
if mibBuilder.loadTexts: wwpQosPortEntry.setStatus('current')
if mibBuilder.loadTexts: wwpQosPortEntry.setDescription('The QOS per port Entry in the Table.')
wwpQosPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 12, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpQosPortIndex.setStatus('current')
if mibBuilder.loadTexts: wwpQosPortIndex.setDescription("Port ID for this instance of . Port ID's start at 1, and are consecutive for each additional port. This port Id should refer to the dot1dBasePort in the Dot1dBasePortEntry.")
wwpQosPortPriQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 12, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 3)).clone(-1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpQosPortPriQueue.setStatus('current')
if mibBuilder.loadTexts: wwpQosPortPriQueue.setDescription('The TX-priority-queue value for this entry. The protocol entry in the hardware table will have the specified TX-priority-queue value. If no priority is associated with the port, then it is set to -1.')
wwpQosPortQAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 12, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("weighted", 0), ("strict", 1))).clone('strict')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpQosPortQAlgo.setStatus('current')
if mibBuilder.loadTexts: wwpQosPortQAlgo.setDescription('The transmit queue servicing algorithm for the port. It can be either set to strict or credir(Weighted Fair Queuing).')
wwpQosPortQApplyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 12, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("qosMgmtPerQueue", 1), ("qosMgmtForAllQueues", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpQosPortQApplyMode.setStatus('current')
if mibBuilder.loadTexts: wwpQosPortQApplyMode.setDescription("This object decides whether to apply the config of all the queues together or one at a time. If this object is set to mgmtForAllQueues , then the Agent gets the config for all the 4 queues from the wwpQosPortQConfigTable and apply the configuration to Qos manager. This object shouldn't be set to mgmtForAllQueues unless all the 4 queues have been configured with Qdepth and QWeight. If it is set to mgmtPerQueue,then the agent just get the config for each configured queue at a time and apply the config to the Qos Manager.")
wwpQosPortQConfTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 12, 1, 1, 5), )
if mibBuilder.loadTexts: wwpQosPortQConfTable.setStatus('current')
if mibBuilder.loadTexts: wwpQosPortQConfTable.setDescription('A Table of QOS per port per Queue Entries.')
wwpQosPortQConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 12, 1, 1, 5, 1), ).setIndexNames((0, "WWP-QOS-MIB", "wwpQosConfPortId"), (0, "WWP-QOS-MIB", "wwpQosConfQueueId"))
if mibBuilder.loadTexts: wwpQosPortQConfEntry.setStatus('current')
if mibBuilder.loadTexts: wwpQosPortQConfEntry.setDescription('The QOS per port per queue Config Entry in the Table. This config will apply to the Qos Manager depending upon the wwpQosPortQApplyMode in the wwpQosPortEntry.')
wwpQosConfPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 12, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpQosConfPortId.setStatus('current')
if mibBuilder.loadTexts: wwpQosConfPortId.setDescription("Port ID for this instance of . Port ID's start at 1, and are consecutive for each additional port. This port Id should refer to the dot1dBasePort in the Dot1dBasePortEntry.")
wwpQosConfQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 12, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpQosConfQueueId.setStatus('current')
if mibBuilder.loadTexts: wwpQosConfQueueId.setDescription('The TX-priority-queue Id.')
wwpQosPortQConfWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 12, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpQosPortQConfWeight.setStatus('current')
if mibBuilder.loadTexts: wwpQosPortQConfWeight.setDescription('The bandwidth servicing percentage for the specified port transmit queue. This config will apply to the Qos Manager depending upon the wwpQosPortQApplyMode in the wwpQosPortEntry.')
wwpQosPortQConfDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 12, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpQosPortQConfDepth.setStatus('current')
if mibBuilder.loadTexts: wwpQosPortQConfDepth.setDescription('The maximum packet depth for the specified port transmit queue. The depth value corresponds to: Depth Value | Actual Number of Packets --------------|--------------------------- 0 | 32 1 | 64 2 | 128 3 | 256 The maximum total queue depth that can be configured for the port is a combination of depth values that would not exceed an actual packet count of 384. This config will apply to the Qos Manager depending upon the wwpQosPortQApplyMode in the wwpQosPortEntry.')
wwpQosPortQConfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 12, 1, 1, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpQosPortQConfStatus.setStatus('current')
if mibBuilder.loadTexts: wwpQosPortQConfStatus.setDescription('The RowStatus to create the config entry. The RowStatus must be set to active for the wwpQosPortQApplyMode to be applied.')
wwpQosPortQStatusTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 12, 1, 1, 6), )
if mibBuilder.loadTexts: wwpQosPortQStatusTable.setStatus('current')
if mibBuilder.loadTexts: wwpQosPortQStatusTable.setDescription('A Table of QOS per port per Queue Entries.')
wwpQosPortQStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 12, 1, 1, 6, 1), ).setIndexNames((0, "WWP-QOS-MIB", "wwpQosQPortId"), (0, "WWP-QOS-MIB", "wwpQosQueueId"))
if mibBuilder.loadTexts: wwpQosPortQStatusEntry.setStatus('current')
if mibBuilder.loadTexts: wwpQosPortQStatusEntry.setDescription('The QOS per port per queue Entry in the Table.')
wwpQosQPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 12, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpQosQPortId.setStatus('current')
if mibBuilder.loadTexts: wwpQosQPortId.setDescription("Port ID for this instance of . Port ID's start at 1, and are consecutive for each additional port. This port Id should refer to the dot1dBasePort in the Dot1dBasePortEntry.")
wwpQosQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 12, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpQosQueueId.setStatus('current')
if mibBuilder.loadTexts: wwpQosQueueId.setDescription('The TX-priority-queue Id.')
wwpQosPortQWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 12, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpQosPortQWeight.setStatus('current')
if mibBuilder.loadTexts: wwpQosPortQWeight.setDescription('The current bandwidth servicing percentage for the specified port transmit queue.')
wwpQosPortQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 12, 1, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpQosPortQDepth.setStatus('current')
if mibBuilder.loadTexts: wwpQosPortQDepth.setDescription('The current maximum packet depth for the specified port transmit queue.')
wwpQosTxAssignmentMode = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 12, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("useQos", 0), ("useGreater", 1))).clone('useQos')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpQosTxAssignmentMode.setStatus('current')
if mibBuilder.loadTexts: wwpQosTxAssignmentMode.setDescription('The QoS TX-priority-queue assignment mode. This affect the behavior for ALL QoS entries. Setting the mode to useQos(0) will cause the ASIC to assign the TX-priority-queue value from the matching QoS entry to the frame. When set to useGreater(1), the ASIC will assign the greater of the two results: QoS Tx-priority or RX-Pri-To-Q TX-priority.')
wwpQosPortTxAssignmentMode = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 12, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usePort", 0), ("useGreater", 1))).clone('usePort')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpQosPortTxAssignmentMode.setStatus('current')
if mibBuilder.loadTexts: wwpQosPortTxAssignmentMode.setDescription('The Port Protocol TX-priority-queue assignment mode. This affect the behavior for ALL Port Protocol entries. Setting the mode to usePort(0) will cause the ASIC to assign the TX-priority-queue value from the matching Port Protocol entry to the frame. When set to useGreater(1), the ASIC will assign the greater of the two results: Port Protocol Tx-priority or RX-Pri-To-Q TX-priority.')
mibBuilder.exportSymbols("WWP-QOS-MIB", wwpQosPriToQMapEntry=wwpQosPriToQMapEntry, wwpQosPortPriQueue=wwpQosPortPriQueue, wwpQosPortQApplyMode=wwpQosPortQApplyMode, wwpQosPortQConfWeight=wwpQosPortQConfWeight, wwpQosStatsTable=wwpQosStatsTable, wwpQosRxBytes=wwpQosRxBytes, wwpQosPortId=wwpQosPortId, wwpQosPortQStatusEntry=wwpQosPortQStatusEntry, wwpQosConfQueueId=wwpQosConfQueueId, wwpQosRxPriority=wwpQosRxPriority, wwpQosPortQDepth=wwpQosPortQDepth, wwpQosPortQStatusTable=wwpQosPortQStatusTable, wwpQosEntry=wwpQosEntry, wwpQosPortQConfTable=wwpQosPortQConfTable, wwpQos=wwpQos, wwpQosTable=wwpQosTable, wwpQosMIBObjects=wwpQosMIBObjects, wwpQosRxPkts=wwpQosRxPkts, wwpQosTxPriQueue=wwpQosTxPriQueue, wwpQosPortQWeight=wwpQosPortQWeight, wwpQosPortTxAssignmentMode=wwpQosPortTxAssignmentMode, wwpQosPortQConfStatus=wwpQosPortQConfStatus, VlanId=VlanId, wwpQosConfPortId=wwpQosConfPortId, wwpQosStatsEntry=wwpQosStatsEntry, wwpQosNotificationPrefix=wwpQosNotificationPrefix, wwpQosStatsVlanId=wwpQosStatsVlanId, wwpQosPortIndex=wwpQosPortIndex, PYSNMP_MODULE_ID=wwpQosMIB, wwpQosPriQueue=wwpQosPriQueue, wwpQosMIB=wwpQosMIB, wwpQosRowStatus=wwpQosRowStatus, wwpQosPortTable=wwpQosPortTable, wwpQosPortQConfDepth=wwpQosPortQConfDepth, wwpQosQPortId=wwpQosQPortId, wwpQosRateLimit=wwpQosRateLimit, wwpQosQueueId=wwpQosQueueId, wwpQosStatsPortId=wwpQosStatsPortId, wwpQosTxAssignmentMode=wwpQosTxAssignmentMode, wwpQosMIBCompliances=wwpQosMIBCompliances, wwpQosVlanId=wwpQosVlanId, wwpQosResetCounters=wwpQosResetCounters, wwpQosNotifications=wwpQosNotifications, wwpQosMIBGroups=wwpQosMIBGroups, wwpQosPortEntry=wwpQosPortEntry, wwpQosPortQConfEntry=wwpQosPortQConfEntry, wwpQosPortQAlgo=wwpQosPortQAlgo, wwpQosMIBConformance=wwpQosMIBConformance, wwpQosPriToQMapTable=wwpQosPriToQMapTable)
