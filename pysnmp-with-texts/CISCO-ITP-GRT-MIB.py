#
# PySNMP MIB module CISCO-ITP-GRT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ITP-GRT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:03:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
cgspInstDisplayName, cgspEventSequenceNumber, cgspInstNetwork, cgspCLLICode = mibBuilder.importSymbols("CISCO-ITP-GSP-MIB", "cgspInstDisplayName", "cgspEventSequenceNumber", "cgspInstNetwork", "cgspCLLICode")
CItpTcServiceIndicator, CItpTcTableLoadStatus, CItpTcLinksetId, CItpTcURL, CItpTcQos, CItpTcDisplayPC, CItpTcPointCode, CItpTcRouteTableName = mibBuilder.importSymbols("CISCO-ITP-TC-MIB", "CItpTcServiceIndicator", "CItpTcTableLoadStatus", "CItpTcLinksetId", "CItpTcURL", "CItpTcQos", "CItpTcDisplayPC", "CItpTcPointCode", "CItpTcRouteTableName")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Integer32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Bits, ObjectIdentity, IpAddress, NotificationType, Counter64, Unsigned32, MibIdentifier, Counter32, ModuleIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Bits", "ObjectIdentity", "IpAddress", "NotificationType", "Counter64", "Unsigned32", "MibIdentifier", "Counter32", "ModuleIdentity", "TimeTicks")
TruthValue, TimeStamp, DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TimeStamp", "DisplayString", "TextualConvention", "RowStatus")
ciscoGrtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 334))
ciscoGrtMIB.setRevisions(('2008-05-01 00:00', '2003-03-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoGrtMIB.setRevisionsDescriptions(('Deprecated the following objects: cgrtDestNotifDelayTime, cgrtDestNotifWindowTime, cgrtDestNotifMaxPerWindow, cgrtDestNotifEnabled, cgrtMgmtNotifDelayTime, cgrtMgmtNotifWindowTime, cgrtMgmtNotifMaxPerWindow, cgrtMgmtNotifEnabled. Deprecated the following notifications: ciscoGrtDestStateChange, ciscoGrtMgmtStateChange Deprecated the following objects under cgrtNotificationsInfo: cgrtDestNotifSupFlag, cgrtDestNotifChanges, cgrtMgmtNotifSupFlag, cgrtMgmtNotifChanges. Deprecated the following compliance statement: ciscoGrtMIBCompliance. Deprecated the following object groups: ciscoGrtDestGroup, ciscoGrtRouteGroup. Deprecated the following notification group: ciscoGrtNotificationGroup. Added the following textual convention: CgrtDisplayPCSI. Added the following objects: cgrtDestNotifWindowTimeRev1, cgrtDestNotifMaxPerWindowRev1, cgrtDestNotifEnabledRev1, cgrtMgmtNotifWindowTimeRev1, cgrtMgmtNotifMaxPerWindowRev1, cgrtMgmtNotifEnabledRev1, cgrtOrigTableEnabled, cgrtPCStatsInterval, cgrtNoRouteMSUsNotifEnabled, cgrtNoRouteMSUsNotifWindowTime. Added the following object to cgrtInstTable: cgrtInstUnknownOrigPCs, cgrtInstNoRouteDrops. Added these objects to cgrtDestTable: cgrtDestAccessibleSeconds, cgrtDestInaccessibleSeconds, cgrtDestRestrictedSeconds, cgrtDestMSUsOut, cgrtDestOctetsOut, cgrtDestMSUsIn, cgrtDestOctetsIn, cgrtDestInaccessibleDrops, cgrtDestRestrictedMSUs, cgrtDestCongestionDrops, cgrtDestDisplay. Added these objects to cgrtRouteTable: cgrtRouteAllowedSeconds, cgrtRouteRestrictedSeconds, cgrtRouteProhibitedSeconds, cgrtRouteDisplay. Added a new table cgrtOrigTable with following objects: cgrtOrigPC, cgrtOrigMSUs, cgrtOrigOctets, cgrtOrigDisplay. Added a new table cgrtDestSITable with following objects: cgrtMtp3SI, cgrtDestSIMSUsOut, cgrtDestSIOctetsOut, cgrtDestSIMSUsIn, cgrtDestSIOctetsIn, cgrtDestSIDisplay. Added a new table cgrtOrigSITable with following objects: cgrtOrigSIMSUs, cgrtOrigSIOctets, cgrtOrigSIDisplay. Added the following notifications: ciscoGrtDestStateChangeRev1, ciscoGrtMgmtStateChangeRev1, ciscoGrtNoRouteMSUDiscards. Added the following objects under cgrtNotificationsInfo: cgrtDestNotifSuppressed, cgrtRouteNotifSuppressed, cgrtNoRouteMSUsInterval, cgrtIntervalNoRouteMSUs. Added the following compliance statement: ciscoGrtMIBComplianceRev1. Added the following object groups: ciscoGrtScalarsGroup, ciscoGrtDestGroupRev1, ciscoGrtRouteGroupRev1, ciscoGrtOrigGroup, ciscoGrtDestSIGroup, ciscoGrtOrigSIGroup, ciscoGrtInstGroupSup1. Added the following notification group: ciscoGrtNotificationsGroupRev1.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoGrtMIB.setLastUpdated('200805010000Z')
if mibBuilder.loadTexts: ciscoGrtMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoGrtMIB.setContactInfo(' Cisco Systems, Inc Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-ss7s@cisco.com')
if mibBuilder.loadTexts: ciscoGrtMIB.setDescription("This MIB is for managing information required to route messages transported over Signalling System No. 7 (SS7) Network via Cisco IP Transfer Point. The Cisco IP Transfer Point (ITP) is a hardware and software solution that transports SS7 traffic using IP. Each ITP node provides the functions necessary to act as a SS7 signalling point. Each signalling point is connected to other signalling point using IP based or traditional TDM links. The relevant ITU documents describing this technology are the ITU Q series, including ITU Q.700: Introduction to CCITT Signalling System No. 7 and ITU Q.701 Functional description of the message transfer part (MTP) of Signalling System No. 7. Definitions and overview: Route: A route consists of one or more linksets used to transport MTP3 Message Signal Units(MSU) between signalling points. A route is an association between a destination point code(DPC) and a linkset, i.e., a linkset that can be used to send an MSU to the given DPC. Routeset: A routeset is a set of routes to a given DPC. Each route within a routeset is on a possible path toward the DPC. Each route within the routeset has associated with it a route priority. In the following simple configuration, two routes exist that can be used to transport MSUs from STP1 to STP4. --------- STP1-STP2 --------- - STP1 ----------------------------- STP2 - --------- --------- | | | STP1-STP3 STP2-STP4 | | | --------- STP3-STP4 --------- - STP3 ----------------------------- STP4 - --------- --------- Routeset on STP1 for DPC = STP4: STP1-STP2, STP1-STP3 Linkset: A linkset is a set of signalling links connecting two signalling points. Combined Linkset: Two linksets with equal number of links and capacity that form routes of equal priority to a given DPC are called Combined Linksets. It is primarily used for load sharing and redundancy. In the following, example, linksets 'SSP1-STP1' and 'SSP1-STP2' form a combined linsket. SSP1-STP1 --------- |------------------------- STP1 - | --------- - - - - - SSP1 - - - - - | SSP1-STP2 --------- |------------------------ STP2 - --------- Routing: The routing of SS7 Message signalling Units(MSU) is based on the DPC. Message Signalling Units are sent from an originating point code(OPC) to DPC. Each MSU will traverse one or more linksets as it is routed to its final destination. When an MSU arrives at a signalling point and the DPC does not match the signalling point's point code the MSU must be directed toward the DPC. Each signalling point has enough routing information to determine which linkset should be used to transmit the MSU toward its final destination. Route statement: Each ITP Signalling Point has route statements needed to determine which linkset should be used to transmit message signalling units to destinations. Each route statement consists of a destination, a priority and a linkset name. The destination is specified as a combination of DPC and mask. The priority, also know as cost, is used to define the order in which the routes are selected. The linkset name specifies which linkset to use to reach the destination. Route table: Each ITP Signalling Point has a table of routes. These route entries are used to determine which linkset should be selected to transmit message signalling units to a given destination. There are two basic type of routing. The first type is fully-qualified and uses all bits of the target DPC. The other type is summary routing that uses a subset of the bits in the target DPC and is used to represent groups of point codes rather than a single point code. Example of route table entries. Example 1: variant = ITU DPC/MASK Priority Linkset-name -------- -------- ----------------------- 5.5.5/14 3 STP1-STP2 5.5.5/14 7 STP1-STP3 Description: Two route table entries that define a primary route using linkset 'STP1-STP2' and an alternate route using linkset 'STP1-STP3' to point-code 5.5.5. Example 2: variant = ITU DPC/MASK Priority Linkset-name -------- -------- ----------------------- 5.5.5/14 3 STP1-STP2 5.5.5/14 3 STP1-STP3 5.5.5/14 7 STP1-STP4 Description: Two route table entries that define a combined linkset consisting of linkset 'STP1-STP2' and 'STP1-STP3' to point code 5.5.5. An alternate route is also defined using linkset 'STP1-STP4'. Example 3: variant = ANSI DPC/MASK Priority Linkset-name -------- -------- ----------------------- 5.5.0/16 3 STP1-STP2 Description: A route table entry that defines routing to a cluster. The cluster represents all point codes in the range from 5.5.0-5.5.255. Example 4: variant = ANSI DPC/MASK Priority Linkset-name -------- -------- ----------------------- 5.5.0/16 3 STP1-STP3 5.5.5/24 3 STP1-STP2 Description: The mixing of fully-qualified and summary route table entries allow for different routes to be defined for certain DPC in a cluster. In this configuration, the fully-qualified route will be the primary and the summary route will act as a backup. Route table: A group of route table entries used to route MSU for a particular instance of a signalling point. A sample route table. DPC/MASK Priority Linkset-name -------- -------- ----------------------- 0.0.0/0 7 STP1-STP4 5.5.0/16 3 STP1-STP3 5.5.5/24 3 STP1-STP2 . . 122.5.5 5 STP1-STP2 . . 243.200.1 6 STP1-STP3 ")
ciscoGrtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 334, 0))
ciscoGrtMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 334, 1))
ciscoGrtMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 334, 2))
cgrtScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 1))
cgrtObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2))
class CgrtDisplayPCSI(TextualConvention, OctetString):
    description = 'The point code and service indicator information formatted for display. Point code will be formatted based on the variant and the customer defined parameters.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 20)

cgrtRouteMaxDynamic = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgrtRouteMaxDynamic.setStatus('current')
if mibBuilder.loadTexts: cgrtRouteMaxDynamic.setDescription('The maximum number of dynamic SS7 routes. This object is used to limit the size of the route table by preventing unbounded growth of dynamic entries. Dynamic entries are created when certain MTP3 management messages are received or sent. The removal of dynamic routes is performed periodically and the older dynamic routes are removed until the specified number is reached.')
cgrtDestNotifDelayTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgrtDestNotifDelayTime.setStatus('deprecated')
if mibBuilder.loadTexts: cgrtDestNotifDelayTime.setDescription("This object specifies the maximum amount of time to delay before generating the ciscoGrtDestStateChange notification. The delay is introduced to allow multiple destination state changes to be bundled into a single notification. If the value of this object is equal to 0, the device will generate ciscoGrtDestStateChange notification as each route changes states. If the value of this object is greater than 0, the device will not generate notifications as destinations change state. As each destination changes state they are accumulated until the time specified in cgrtDestNotifDelayTime has elapsed or enough state changes have been accumulated to fill up the cgrtDestNotifChanges object. This object is ignored by the agent when the cgrtDestNotifEnabled object is set to the 'false' value.")
cgrtDestNotifWindowTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 900))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgrtDestNotifWindowTime.setStatus('deprecated')
if mibBuilder.loadTexts: cgrtDestNotifWindowTime.setDescription('This object specifies the time interval used to monitor the rate of destination state changes notifications. This object in combination with cgrtDestNotifMaxPerWindow is used to determine the notification transit rate and suppress destination state notifications.')
cgrtDestNotifMaxPerWindow = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 9000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgrtDestNotifMaxPerWindow.setStatus('deprecated')
if mibBuilder.loadTexts: cgrtDestNotifMaxPerWindow.setDescription('This object specifies the maximum number of destination state changes that can occur in the time interval specified in the cgrtDestNotifWindowTime object. If additional state changes can occur in the specified time interval the notifications are suppressed.')
cgrtDestNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 1, 14), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgrtDestNotifEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: cgrtDestNotifEnabled.setDescription("A control to enable or disable ciscoGrtDestStateChange notifications as follows: 'true' Indicates that the ciscoGrtDestStateChange notification should be generated when the state of any destination changes. That is, the notification generation is enabled. 'false' Indicates that ciscoGrtDestStateChange notification generation is disabled.")
cgrtMgmtNotifDelayTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgrtMgmtNotifDelayTime.setStatus('deprecated')
if mibBuilder.loadTexts: cgrtMgmtNotifDelayTime.setDescription("This object specifies the maximum amount of time to delay before generating the ciscoGrtMgmtStateChange notification. The delay is introduced to allow multiple route state changes to be bundled into a single notification. If the value of this object is equal to 0, the device will generate ciscoGrtMgmtStateChange notification as each route changes states. If the value of this object is greater than 0, the device will not generate notifications as routes change state. As routes change state they are accumulated until the time specified in cgrtMgmtNotifDelayTime has elapsed or enough state changes have been accumulated to fill up the cgrtRouteNotifChanges object. This object is ignored by the agent when the cgrtMgmtNotifEnabled object is set to the 'false' value.")
cgrtMgmtNotifWindowTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 900))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgrtMgmtNotifWindowTime.setStatus('deprecated')
if mibBuilder.loadTexts: cgrtMgmtNotifWindowTime.setDescription('This object specifies the time interval used to monitor the rate of route state changes notifications. This object in combination with cgrtMgmtNotifMaxPerWindow is used to determine the notification transit rate and suppress route management state notifications.')
cgrtMgmtNotifMaxPerWindow = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 9000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgrtMgmtNotifMaxPerWindow.setStatus('deprecated')
if mibBuilder.loadTexts: cgrtMgmtNotifMaxPerWindow.setDescription('This object specifies the maximum number of route management state changes that can occur in the time interval specified in the cgrtMgmtNotifWindowTime object. If additional state changes can occur in the specified time interval the notifications are suppressed.')
cgrtMgmtNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 1, 19), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgrtMgmtNotifEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: cgrtMgmtNotifEnabled.setDescription("A control to enable or disable ciscoGrtMgmtStateChange notifications as follows: 'true' Indicates that the ciscoGrtMgmtStateChange notification should be generated when the state of any route changes. That is, the notification generation is enabled. 'false' Indicates that ciscoGrtMgmtStateChange notification generation is disabled.")
cgrtRouteTableLoadNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 1, 20), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgrtRouteTableLoadNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: cgrtRouteTableLoadNotifEnabled.setDescription("A control to enable or disable ciscoGrtRouteTableLoad notifications as follows: 'true' Indicates that the ciscoGrtRouteTableLoad notification should be generated when the load operations is started or completed. That is, the notification generation is enabled. 'false' Indicates that ciscoGrtRouteTableLoad notification generation is disabled.")
cgrtDynamicRoutes = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgrtDynamicRoutes.setStatus('current')
if mibBuilder.loadTexts: cgrtDynamicRoutes.setDescription('The number of dynamic route entries created in response to MTP3 management messages. The maximum number for dynamic route entries is defined by the cgrtRouteMaxDynamic object. When a MTP3 management message is received and this limit is reached the request is dropped. The cgrtDynamicRoutesDropped object will be incremented in these situations.')
cgrtDynamicRoutesDropped = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgrtDynamicRoutesDropped.setStatus('current')
if mibBuilder.loadTexts: cgrtDynamicRoutesDropped.setDescription('The number of dynamic route entries that could not be created because the limit specified by the cgrtRouteMaxDynamic object had been reached.')
cgrtDestNotifWindowTimeRev1 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 86400), )).clone(900)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgrtDestNotifWindowTimeRev1.setStatus('current')
if mibBuilder.loadTexts: cgrtDestNotifWindowTimeRev1.setDescription('This object specifies the time interval used to monitor the rate of destination state changes notifications. This object in combination with cgrtDestNotifMaxPerWindowRev1 is used to determine the notification transit rate and suppress destination state notifications.')
cgrtDestNotifMaxPerWindowRev1 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 9000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgrtDestNotifMaxPerWindowRev1.setStatus('current')
if mibBuilder.loadTexts: cgrtDestNotifMaxPerWindowRev1.setDescription('This object specifies the maximum number of destination state changes that can occur in the time interval specified in the cgrtDestNotifWindowTimeRev1 object. If additional state changes do occur in the specified time interval the notifications are suppressed.')
cgrtDestNotifEnabledRev1 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 1, 25), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgrtDestNotifEnabledRev1.setStatus('current')
if mibBuilder.loadTexts: cgrtDestNotifEnabledRev1.setDescription("A control to enable or disable ciscoGrtDestStateChangeRev1 notifications as follows: 'true' Indicates that the ciscoGrtDestStateChangeRev1 notification should be generated when the state of any destination changes. That is, the notification generation is enabled. 'false' Indicates that ciscoGrtDestStateChangeRev1 notification generation is disabled.")
cgrtMgmtNotifWindowTimeRev1 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 86400), )).clone(900)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgrtMgmtNotifWindowTimeRev1.setStatus('current')
if mibBuilder.loadTexts: cgrtMgmtNotifWindowTimeRev1.setDescription('This object specifies the time interval used to monitor the rate of route state changes notifications. This object in combination with cgrtMgmtNotifMaxPerWindowRev1 is used to determine the notification transit rate and suppress route management state notifications.')
cgrtMgmtNotifMaxPerWindowRev1 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 9000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgrtMgmtNotifMaxPerWindowRev1.setStatus('current')
if mibBuilder.loadTexts: cgrtMgmtNotifMaxPerWindowRev1.setDescription('This object specifies the maximum number of route management state changes that can occur in the time interval specified in the cgrtMgmtNotifWindowTimeRev1 object. If additional state changes can occur in the specified time interval the notifications are suppressed.')
cgrtMgmtNotifEnabledRev1 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 1, 28), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgrtMgmtNotifEnabledRev1.setStatus('current')
if mibBuilder.loadTexts: cgrtMgmtNotifEnabledRev1.setDescription("A control to enable or disable ciscoGrtMgmtStateChangeRev1 notifications as follows: 'true' Indicates that the ciscoGrtMgmtStateChangeRev1 notification should be generated when the state of any route changes. That is, the notification generation is enabled. 'false' Indicates that ciscoGrtMgmtStateChangeRev1 notification generation is disabled.")
cgrtOrigTableEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 1, 29), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgrtOrigTableEnabled.setStatus('current')
if mibBuilder.loadTexts: cgrtOrigTableEnabled.setDescription("A control to enable or disable the support of optional cgrtOrigTable. 'true' Enables the OrigTable optional feature. 'false' Disables the OrigTable optional feature.")
cgrtPCStatsInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 1, 30), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(900, 3600), )).clone(900)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgrtPCStatsInterval.setStatus('current')
if mibBuilder.loadTexts: cgrtPCStatsInterval.setDescription('This object indicates the allowed values for the statistics sampling interval. A value of zero is only valid for a single processor platform. For distributed platforms, the value in seconds specifies how often information on measurements will be refreshed on supervisor. The valid range for distributed platforms is from 15 minutes., i.e., 900 seconds to 1 hour.')
cgrtNoRouteMSUsNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 1, 31), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgrtNoRouteMSUsNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: cgrtNoRouteMSUsNotifEnabled.setDescription("A control to enable or disable ciscoGrtNoRouteMSUDiscards notifications as follows: 'true' Indicates that the ciscoGrtNoRouteMSUDiscards notification generation is enabled. 'false' Indicates that ciscoGrtNoRouteMSUDiscards notification generation is disabled.")
cgrtNoRouteMSUsNotifWindowTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 86400)).clone(900)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cgrtNoRouteMSUsNotifWindowTime.setStatus('current')
if mibBuilder.loadTexts: cgrtNoRouteMSUsNotifWindowTime.setDescription('This object specifies the time interval used to monitor the ciscoGrtNoRouteMSUDiscards notifications generated for a signalling point instance. The first occurrence of ciscoGrtNoRouteMSUDiscards notifications in this interval is sent and the further occurrences of notifications in this interval are suppressed. At the end of this interval, a notification is sent with total number of MSUs discarded due to routing data error during this interval.')
cgrtInstTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 1), )
if mibBuilder.loadTexts: cgrtInstTable.setStatus('current')
if mibBuilder.loadTexts: cgrtInstTable.setDescription('A route table exist per instance of signalling point. This table defines the routes defined for a particular instance.')
cgrtInstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-ITP-GSP-MIB", "cgspInstNetwork"))
if mibBuilder.loadTexts: cgrtInstEntry.setStatus('current')
if mibBuilder.loadTexts: cgrtInstEntry.setDescription('A collection of route statements used to forward packets to requested destinations. Each table entry represents a route statement that was either configured or added in response to events in the network.')
cgrtInstLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 1, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgrtInstLastChanged.setStatus('current')
if mibBuilder.loadTexts: cgrtInstLastChanged.setDescription('The value of sysUpTime at the time of the last creation or deletion of an entry in the route table defined for this signalling point. If the local network management subsystem is re-initialized, then this object contains the sysUpTime at the time when this occurred. This value can be used to prevent unnecessary walks of the cgrtRouteTable.')
cgrtInstLastLoadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 1, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgrtInstLastLoadTime.setStatus('current')
if mibBuilder.loadTexts: cgrtInstLastLoadTime.setDescription('The value of sysUpTime at the time of the last load of the route table using file format.')
cgrtInstLoadStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 1, 1, 3), CItpTcTableLoadStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgrtInstLoadStatus.setStatus('current')
if mibBuilder.loadTexts: cgrtInstLoadStatus.setDescription('The status of the current load or status from the prior load operation. This object will have a value of loadInProgress while the load operation is in progress. The cgrtInstLastLoadTime contains a timestamp indicating when the load operation is completed.')
cgrtInstTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 1, 1, 4), CItpTcRouteTableName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgrtInstTableName.setStatus('current')
if mibBuilder.loadTexts: cgrtInstTableName.setDescription('The system generated name for the route table for this signalling point instance.')
cgrtInstLastURL = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 1, 1, 5), CItpTcURL()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgrtInstLastURL.setStatus('current')
if mibBuilder.loadTexts: cgrtInstLastURL.setDescription('The url used to load route table.')
cgrtInstNumberDestinations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 1, 1, 6), Gauge32()).setUnits('entries').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgrtInstNumberDestinations.setStatus('current')
if mibBuilder.loadTexts: cgrtInstNumberDestinations.setDescription('The number of destination in the cgrtDestTable Table.')
cgrtInstNumberRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 1, 1, 7), Gauge32()).setUnits('entries').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgrtInstNumberRoutes.setStatus('current')
if mibBuilder.loadTexts: cgrtInstNumberRoutes.setDescription('The number of routes in the cgrtRouteTable Table.')
cgrtInstUnknownOrigPCs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 1, 1, 8), Counter32()).setUnits('MSUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgrtInstUnknownOrigPCs.setStatus('current')
if mibBuilder.loadTexts: cgrtInstUnknownOrigPCs.setDescription('The number of MSUs with unknown origination point codes arrived to this signalling point instance. MSUs originated from local pointcode will not be counted as unknown OPCs.')
cgrtInstNoRouteDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 1, 1, 9), Counter32()).setUnits('MSUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgrtInstNoRouteDrops.setReference('ANSI GR-82-CORE 6.4.2 System Total Measurements Item 32.')
if mibBuilder.loadTexts: cgrtInstNoRouteDrops.setStatus('current')
if mibBuilder.loadTexts: cgrtInstNoRouteDrops.setDescription('The number of MSUs dropped due to no corresponding entry in the destination table for this signalling point instance Q752/5.5.')
cgrtDestTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 2), )
if mibBuilder.loadTexts: cgrtDestTable.setStatus('current')
if mibBuilder.loadTexts: cgrtDestTable.setDescription('The destination table provides state information on the ability to route MTP packets to a particular destination point code.')
cgrtDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-ITP-GSP-MIB", "cgspInstNetwork"), (0, "CISCO-ITP-GRT-MIB", "cgrtRouteDpc"), (0, "CISCO-ITP-GRT-MIB", "cgrtRouteMask"))
if mibBuilder.loadTexts: cgrtDestEntry.setStatus('current')
if mibBuilder.loadTexts: cgrtDestEntry.setDescription('Each table entry represents a specific destination point code(DPC).')
cgrtDestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("accessible", 2), ("inaccessible", 3), ("restricted", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgrtDestStatus.setStatus('current')
if mibBuilder.loadTexts: cgrtDestStatus.setDescription("List of the possible route state values. 'unknown' : A destination state of unknown occurs when the destination is a summary route. Unknown state is presented to indicate the protocols do not exchange state information for summary routes in certain configurations. 'accessible' : The destination can be reached by one or more routes specified for the destination. When summary routing is enabled, a destination status will also depend on route table entries that specify less specific matches. See Example 4 in the DESCRIPTION section for such a configuration. 'inaccessible' : Destination can not be reached by any route known to this signalling point. 'restricted' : Traffic has been restricted from being sent to the destination. The restricted state indicates that the primary route for the destination is unavailable or that it is impacted by some network event or failure of resource.")
cgrtDestCongestion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgrtDestCongestion.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signalling system No. 7 (SS7)-Signalling network functions and messages 2.3.5.2.')
if mibBuilder.loadTexts: cgrtDestCongestion.setStatus('current')
if mibBuilder.loadTexts: cgrtDestCongestion.setDescription('The congestion status of this destination. The value indicates congestion on one or more links in one of the linksets used to route traffic to the signalling point specified by the cgrtRouteDpc object. 0 is the least congestion level, 3 is the highest congestion level.')
cgrtDestAccessibleSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 2, 1, 3), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgrtDestAccessibleSeconds.setStatus('current')
if mibBuilder.loadTexts: cgrtDestAccessibleSeconds.setDescription('Duration in seconds that this destination was in the accessible state.')
cgrtDestInaccessibleSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 2, 1, 4), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgrtDestInaccessibleSeconds.setStatus('current')
if mibBuilder.loadTexts: cgrtDestInaccessibleSeconds.setDescription('Duration in seconds that this destination was in the inaccessible state.')
cgrtDestRestrictedSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 2, 1, 5), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgrtDestRestrictedSeconds.setStatus('current')
if mibBuilder.loadTexts: cgrtDestRestrictedSeconds.setDescription('Duration in seconds that this destination was in the restricted state.')
cgrtDestMSUsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 2, 1, 6), Counter32()).setUnits('MSUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgrtDestMSUsOut.setStatus('current')
if mibBuilder.loadTexts: cgrtDestMSUsOut.setDescription('The number of MSUs that were queued to linkset for transmission to this destination. Management MSUs that originate from this signalling point are also counted. It is important to note that, in rare cases, MSU discards due to any abnormal system resource error conditions may be included in this count.')
cgrtDestOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 2, 1, 7), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgrtDestOctetsOut.setStatus('current')
if mibBuilder.loadTexts: cgrtDestOctetsOut.setDescription('The number of Octets in MSUs that were queued to linkset for transmission to this destination. It is important to note that, in rare cases, octets discarded due to any abnormal system resource error conditions may be included in this count.')
cgrtDestMSUsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 2, 1, 8), Counter32()).setUnits('MSUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgrtDestMSUsIn.setStatus('current')
if mibBuilder.loadTexts: cgrtDestMSUsIn.setDescription('The number of MSUs that arrived to this signalling point bound for this destination. This includes the received as well as blocked MSUs.')
cgrtDestOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 2, 1, 9), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgrtDestOctetsIn.setStatus('current')
if mibBuilder.loadTexts: cgrtDestOctetsIn.setDescription('The number of Octets in MSUs that arrived to this signalling point bound for this destination.')
cgrtDestInaccessibleDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 2, 1, 10), Counter32()).setUnits('MSUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgrtDestInaccessibleDrops.setStatus('current')
if mibBuilder.loadTexts: cgrtDestInaccessibleDrops.setDescription('The number of MSUs dropped for this destination due to inaccessible route state.')
cgrtDestRestrictedMSUs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 2, 1, 11), Counter32()).setUnits('MSUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgrtDestRestrictedMSUs.setStatus('current')
if mibBuilder.loadTexts: cgrtDestRestrictedMSUs.setDescription('The number of MSUs transferred for this destination during a restricted route state.')
cgrtDestCongestionDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 2, 1, 12), Counter32()).setUnits('MSUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgrtDestCongestionDrops.setStatus('current')
if mibBuilder.loadTexts: cgrtDestCongestionDrops.setDescription('The number of MSUs dropped for this destination due to local and remote congestion.')
cgrtDestDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 2, 1, 13), CItpTcDisplayPC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgrtDestDisplay.setStatus('current')
if mibBuilder.loadTexts: cgrtDestDisplay.setDescription('The destination point code in display format.')
cgrtRouteTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 3), )
if mibBuilder.loadTexts: cgrtRouteTable.setStatus('current')
if mibBuilder.loadTexts: cgrtRouteTable.setDescription('The route table for determining the linkset that a packet must traverse to arrive at its destination given by the destination point code.')
cgrtRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 3, 1), ).setIndexNames((0, "CISCO-ITP-GSP-MIB", "cgspInstNetwork"), (0, "CISCO-ITP-GRT-MIB", "cgrtRouteDpc"), (0, "CISCO-ITP-GRT-MIB", "cgrtRouteMask"), (0, "CISCO-ITP-GRT-MIB", "cgrtRouteDestLsCost"), (0, "CISCO-ITP-GRT-MIB", "cgrtRouteDestLinkset"))
if mibBuilder.loadTexts: cgrtRouteEntry.setStatus('current')
if mibBuilder.loadTexts: cgrtRouteEntry.setDescription('Each table entry represents a configured route statement.')
cgrtRouteDpc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 3, 1, 1), CItpTcPointCode())
if mibBuilder.loadTexts: cgrtRouteDpc.setStatus('current')
if mibBuilder.loadTexts: cgrtRouteDpc.setDescription('The destination point code.')
cgrtRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215)))
if mibBuilder.loadTexts: cgrtRouteMask.setStatus('current')
if mibBuilder.loadTexts: cgrtRouteMask.setDescription('The mask used to define which part of cgrtRouteDpc is significant when comparing the cgrtRouteDpc to the destination code point in the packet to be routed.')
cgrtRouteDestLsCost = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 9)))
if mibBuilder.loadTexts: cgrtRouteDestLsCost.setStatus('current')
if mibBuilder.loadTexts: cgrtRouteDestLsCost.setDescription('The cost assigned to this linkset matching this route. Higher numbers represent higher cost.')
cgrtRouteDestLinkset = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 3, 1, 4), CItpTcLinksetId())
if mibBuilder.loadTexts: cgrtRouteDestLinkset.setStatus('current')
if mibBuilder.loadTexts: cgrtRouteDestLinkset.setDescription('The linkset that the packet is to be forwarded to on matching this route.')
cgrtRouteQos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 3, 1, 5), CItpTcQos()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgrtRouteQos.setStatus('current')
if mibBuilder.loadTexts: cgrtRouteQos.setDescription('The quality of service classification to be assigned to the IP packets used to transport the SS7 messages. The value to specify for packets when they will be transported on SCTP/IP based linkset.')
cgrtRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("available", 2), ("restricted", 3), ("unavailable", 4), ("deleted", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgrtRouteStatus.setStatus('current')
if mibBuilder.loadTexts: cgrtRouteStatus.setDescription("List of the possible route status values. These values are determine using the status of the linkset specified in this route and the route management status. 'unknown' : Status can not be determined. 'available' : Route is available. 'restricted' : Traffic is restricted on route. 'unavailable' : Route is unable to service traffic. 'deleted' : Route has been removed.")
cgrtRouteMgmtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("allowed", 2), ("restricted", 3), ("prohibited", 4), ("deleted", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgrtRouteMgmtStatus.setStatus('current')
if mibBuilder.loadTexts: cgrtRouteMgmtStatus.setDescription("List of the possible route management route status values. Route management status are received in transfer-allowed(TFA), transfer-prohibited(TFP), transfer-restricted(TFR), transfer-cluster-allowed(TCA), transfer-cluster-prohibited(TCP) and transfer-cluster-restricted(TFR) management messages. 'unknown' : Status can not be determined. 'allowed' : traffic is allowed. 'restricted' : Traffic is restricted on route. 'prohibited' : Route is prohibited from providing traffic. 'deleted' : Route has been removed.")
cgrtRouteDynamic = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 3, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgrtRouteDynamic.setStatus('current')
if mibBuilder.loadTexts: cgrtRouteDynamic.setDescription("Routes are either static or dynamic. Static routes are created based on configuration information specified by an administrator. Dynamic routes are created as a by product of an network event in certain situations. Dynamic routes are only created when summary routing has been activated. This object indicates whether this route entry is dynamic or static. 'true' - dynamic route 'false' - static route")
cgrtRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 0), ("static", 1), ("cluster", 2), ("summary", 3), ("xlist", 4), ("shadow", 5), ("management", 6), ("alias", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgrtRouteType.setStatus('current')
if mibBuilder.loadTexts: cgrtRouteType.setDescription(" When summary or cluster routes are specified this field will provide additional information about the fully qualified routes within the specified clusters. Since, summary or cluster routes represent a group of destinations it is necessary to collect and maintain status information on routes that are not available. Additional, route statements are created dynamically whenever a TFP or TFR is received on a fully qualified route represented by a defined summary route. There are three four types of dynamic route as follows. List of the possible route status values. 'unknown': Undefined type of route. 'static': A fully-qualified route configured by system administrator. 'cluster': An ANSI cluster route. A DPC and mask with length of 16 bits configured by system administrator. 'summary': An DPC and a mask with length 0-10 for ITU and 0-15,17-23 for ANSI. A summary route is configured by a system administrator. 'xlist': This route is dynamic and is create whenever TFP or TFR is received for a point-code represented by a ANSI cluster route. 'shadow': When a TFP or TFR is received for a point-code represented by a summary or cluster route all route statements specified for the summary or cluster destination are copied. These new routes appear under the specific fully-qualified destination. The route will be marked as a shadow when a TFP or TFR has not been received for that particular route. 'management' : When a TFP or TFR is received for a point-code represented by a summary route all route statements specified for the summary destination are copied. The new routes appear under the fully-qualified destination specified in the TFR or TFP. The route specified in the TFR or TFP will be marked as a dynamic to indicate that MTP3 route management information is available for this route. 'alias': Route statement is created in response to conversion statements defined to alias point-codes across networks.")
cgrtRouteAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("unknown", 1), ("available", 2), ("restricted", 3), ("unavailable", 4), ("deleted", 5))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgrtRouteAdminStatus.setStatus('current')
if mibBuilder.loadTexts: cgrtRouteAdminStatus.setDescription("List of the possible administration route status values. 'none' : none. 'unknown' : Status can not be determined. 'available' : Route is available. 'restricted' : Traffic is restricted on route. 'unavailable' : Route is unable to service traffic. 'deleted' : Route has been removed. When the cgrtRouteAdminStatus object is set to the none value the cgrtRouteStatus status will be based on the cgrtRouteMgmtStatus and linkset availability. Otherwise the cgrtRouteStatus will be set to the value specified in cgrtRouteAdminStatus object.")
cgrtRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 3, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cgrtRouteRowStatus.setStatus('current')
if mibBuilder.loadTexts: cgrtRouteRowStatus.setDescription('The object is used by a management station to create, modify or delete the row entry in cgspPointCodeTable following the RowStatus textual convention. The only object available for modification is the cgrtRouteAdminStatus object.')
cgrtRouteAllowedSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 3, 1, 12), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgrtRouteAllowedSeconds.setStatus('current')
if mibBuilder.loadTexts: cgrtRouteAllowedSeconds.setDescription('Duration in seconds during which forwarding was allowed for this route.')
cgrtRouteRestrictedSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 3, 1, 13), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgrtRouteRestrictedSeconds.setStatus('current')
if mibBuilder.loadTexts: cgrtRouteRestrictedSeconds.setDescription('Duration in seconds during which forwarding was restricted for this route.')
cgrtRouteProhibitedSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 3, 1, 14), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgrtRouteProhibitedSeconds.setStatus('current')
if mibBuilder.loadTexts: cgrtRouteProhibitedSeconds.setDescription('Duration in seconds during which forwarding was prohibited for this route.')
cgrtRouteDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 3, 1, 15), CItpTcDisplayPC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgrtRouteDisplay.setStatus('current')
if mibBuilder.loadTexts: cgrtRouteDisplay.setDescription('The destination point code associated with the route in display format.')
cgrtOrigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 5), )
if mibBuilder.loadTexts: cgrtOrigTable.setStatus('current')
if mibBuilder.loadTexts: cgrtOrigTable.setDescription('The origination table provides information on the incoming MTP packets from a particular origination point code.')
cgrtOrigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 5, 1), ).setIndexNames((0, "CISCO-ITP-GSP-MIB", "cgspInstNetwork"), (0, "CISCO-ITP-GRT-MIB", "cgrtOrigPC"), (0, "CISCO-ITP-GRT-MIB", "cgrtRouteMask"))
if mibBuilder.loadTexts: cgrtOrigEntry.setStatus('current')
if mibBuilder.loadTexts: cgrtOrigEntry.setDescription('Each table entry represents a specific origination point code(OPC).')
cgrtOrigPC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 5, 1, 1), CItpTcPointCode())
if mibBuilder.loadTexts: cgrtOrigPC.setStatus('current')
if mibBuilder.loadTexts: cgrtOrigPC.setDescription('The origination point code.')
cgrtOrigMSUs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 5, 1, 2), Counter32()).setUnits('MSUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgrtOrigMSUs.setStatus('current')
if mibBuilder.loadTexts: cgrtOrigMSUs.setDescription('The number of incoming MSUs from this origination.')
cgrtOrigOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 5, 1, 3), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgrtOrigOctets.setStatus('current')
if mibBuilder.loadTexts: cgrtOrigOctets.setDescription('The number of incoming octets from this origination.')
cgrtOrigDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 5, 1, 4), CItpTcDisplayPC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgrtOrigDisplay.setStatus('current')
if mibBuilder.loadTexts: cgrtOrigDisplay.setDescription('The origination point code associated with the table entry in display format.')
cgrtDestSITable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 6), )
if mibBuilder.loadTexts: cgrtDestSITable.setStatus('current')
if mibBuilder.loadTexts: cgrtDestSITable.setDescription('The Destination Service Indicator table contains information about the number of MSUs and octets at the MTP3 transport layer for a specific destination and service indicator. The information is collected from both directions. This provides the granularity of information required by Q752 table 6.')
cgrtDestSIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 6, 1), ).setIndexNames((0, "CISCO-ITP-GSP-MIB", "cgspInstNetwork"), (0, "CISCO-ITP-GRT-MIB", "cgrtRouteDpc"), (0, "CISCO-ITP-GRT-MIB", "cgrtRouteMask"), (0, "CISCO-ITP-GRT-MIB", "cgrtMtp3SI"))
if mibBuilder.loadTexts: cgrtDestSIEntry.setStatus('current')
if mibBuilder.loadTexts: cgrtDestSIEntry.setDescription('Each table entry represents a specific destination point code(DPC) and Service Indicator(SI).')
cgrtMtp3SI = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 6, 1, 1), CItpTcServiceIndicator())
if mibBuilder.loadTexts: cgrtMtp3SI.setStatus('current')
if mibBuilder.loadTexts: cgrtMtp3SI.setDescription('The service indicator.')
cgrtDestSIMSUsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 6, 1, 2), Counter32()).setUnits('MSUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgrtDestSIMSUsOut.setStatus('current')
if mibBuilder.loadTexts: cgrtDestSIMSUsOut.setDescription('The number of outgoing MSUs that were queued to linkset for transmission to this specific destination and service indicator. Management MSUs that originate from this signalling point are also counted. It is important to note that, in rare cases, MSU discards due to any abnormal system resource error conditions may be included in this count.')
cgrtDestSIOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 6, 1, 3), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgrtDestSIOctetsOut.setStatus('current')
if mibBuilder.loadTexts: cgrtDestSIOctetsOut.setDescription('The number of outgoing octets that were queued to linkset for transmission to this specific destination and service indicator. It is important to note that, in rare cases, octets discarded due to any abnormal system resource error conditions may be included in this count.')
cgrtDestSIMSUsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 6, 1, 4), Counter32()).setUnits('MSUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgrtDestSIMSUsIn.setStatus('current')
if mibBuilder.loadTexts: cgrtDestSIMSUsIn.setDescription('The number of incoming MSUs for this specific destination and service indicator. This includes the received as well as blocked MSUs.')
cgrtDestSIOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 6, 1, 5), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgrtDestSIOctetsIn.setStatus('current')
if mibBuilder.loadTexts: cgrtDestSIOctetsIn.setDescription('The number of incoming octets for this specific destination and service indicator.')
cgrtDestSIDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 6, 1, 6), CgrtDisplayPCSI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgrtDestSIDisplay.setStatus('current')
if mibBuilder.loadTexts: cgrtDestSIDisplay.setDescription('The destination point code and service indicator associated with the table entry in display format.')
cgrtOrigSITable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 7), )
if mibBuilder.loadTexts: cgrtOrigSITable.setStatus('current')
if mibBuilder.loadTexts: cgrtOrigSITable.setDescription('The Origination Service Indicator table contains information about the number of incoming MSUs and octets at the MTP3 transport layer from a specific origination and service indicator. This provides the granularity of information required by Q752 table 6.')
cgrtOrigSIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 7, 1), ).setIndexNames((0, "CISCO-ITP-GSP-MIB", "cgspInstNetwork"), (0, "CISCO-ITP-GRT-MIB", "cgrtOrigPC"), (0, "CISCO-ITP-GRT-MIB", "cgrtRouteMask"), (0, "CISCO-ITP-GRT-MIB", "cgrtMtp3SI"))
if mibBuilder.loadTexts: cgrtOrigSIEntry.setStatus('current')
if mibBuilder.loadTexts: cgrtOrigSIEntry.setDescription('Each table entry represents a specific origination point code(OPC) and Service Indicator(SI).')
cgrtOrigSIMSUs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 7, 1, 1), Counter32()).setUnits('MSUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgrtOrigSIMSUs.setStatus('current')
if mibBuilder.loadTexts: cgrtOrigSIMSUs.setDescription('The number of incoming MSUs for this specific origination and service indicator.')
cgrtOrigSIOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 7, 1, 2), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cgrtOrigSIOctets.setStatus('current')
if mibBuilder.loadTexts: cgrtOrigSIOctets.setDescription('The number of incoming MSUs for this specific origination and service indicator.')
cgrtOrigSIDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 7, 1, 3), CgrtDisplayPCSI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgrtOrigSIDisplay.setStatus('current')
if mibBuilder.loadTexts: cgrtOrigSIDisplay.setDescription('The origination point code and service indicator associated with the table entry in display format.')
cgrtNotificationsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 4))
cgrtDestNotifSupFlag = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 4, 1), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cgrtDestNotifSupFlag.setStatus('deprecated')
if mibBuilder.loadTexts: cgrtDestNotifSupFlag.setDescription("A flag to indicate whether destination notifications notifications have been suppressed in the current time interval specified by the cgrtDestNotifWindowTime object. 'true' Indicates that the device has suppressed the sending of ciscoGrtDestStateChange notifications for the remainder of the time interval. 'false' Indicates that the device has not suppressed the sending of ciscoGrtDestStateChange notifications in the current time interval.")
cgrtDestNotifChanges = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 4, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cgrtDestNotifChanges.setReference('ITU Q752 Table 4 Item 9 - Unavailablity of routeset to particular destination and Telcordia GR-3053-CORE R5-127 SS7 Route Set Remote Congestion')
if mibBuilder.loadTexts: cgrtDestNotifChanges.setStatus('deprecated')
if mibBuilder.loadTexts: cgrtDestNotifChanges.setDescription("This object contains a list of destination state changes accumulated until the list is full or the time interval specified in cgrtDestNotifDelayTime has passed. It consists of one or more tuples packed together in the format of '<tuple1><tuple2>...<tuple15>'. Each tuple consist of 36 octets in the following format. '<cgspInstNetwork> 20 octets null padded <cgrtRouteDpc> 4 octets <cgrtRouteMask> 4 octets <cgrtDestStatus> 4 octets <cgrtDestCongestion> 4 octets The cgrtRouteDpc, cgrtRouteMask cgrtDestStatus, cgrtDestCongestion and cgrtDestAdminState are encoded in network byte order. The maximum number of tuples is 7.")
cgrtMgmtNotifSupFlag = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 4, 3), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cgrtMgmtNotifSupFlag.setStatus('deprecated')
if mibBuilder.loadTexts: cgrtMgmtNotifSupFlag.setDescription("A flag to indicate whether management route notifications have been suppressed in the current time interval specified by the cgrtMgmtNotifWindowTime object. 'true' Indicates that the device has suppressed the sending of ciscoGrtDestStateChange notifications for the remainder of the time interval. 'false' Indicates that the device has not suppressed the sending of ciscoGrtMgmtStateChange notifications in the current time interval.")
cgrtMgmtNotifChanges = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 4, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cgrtMgmtNotifChanges.setStatus('deprecated')
if mibBuilder.loadTexts: cgrtMgmtNotifChanges.setDescription("This object contains a list of management route state changes accumulated until the list is full or the time interval specified in cgrtMgmtNotifDelayTime has passed. It consists of one or more tuples packed together in the format of '<tuple1><tuple2>...<tuple6>'. Each tuple consist of 68 octets in the following format. '<cgspInstNetwork> 20 octets null padded <cgrtRouteDpc> 4 octets <cgrtRouteMask> 4 octets <cgrtRouteDestLsCost> 4 octets <cgrtRouteDestLinkset> 20 octets null padded <cgrtRouteStatus> 4 octets <cgrtRouteMgmtStatus> 4 octets <cgrtRouteDynamic> 4 octets <cgrtRouteAdminStatus> 4 octets' The cgrtRouteDpc, cgrtRouteMask, cgrtRouteDestLsCost, cgrtRouteStatus, cgrtRouteMgmtStatus, cgrtRouteDynamic and cgrtRouteAdminStatus are encoded in network byte order. The maximum number of tuples is 3.")
cgrtDestNotifSuppressed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 4, 5), Counter32()).setUnits('occurrences').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cgrtDestNotifSuppressed.setStatus('current')
if mibBuilder.loadTexts: cgrtDestNotifSuppressed.setDescription('Number of ciscoGrtDestStateChangeRev1 notifications suppressed for the specific cgrtDestNotifWindowTimeRev1 duration.')
cgrtRouteNotifSuppressed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 4, 6), Counter32()).setUnits('occurrences').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cgrtRouteNotifSuppressed.setStatus('current')
if mibBuilder.loadTexts: cgrtRouteNotifSuppressed.setDescription('Number of ciscoGrtMgmtStateChangeRev1 notifications suppressed for the specific cgrtRouteNotifWindowTimeRev1 duration.')
cgrtNoRouteMSUsInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 4, 7), Unsigned32()).setUnits('seconds').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cgrtNoRouteMSUsInterval.setStatus('current')
if mibBuilder.loadTexts: cgrtNoRouteMSUsInterval.setDescription('Duration elapsed since the start of cgrtNoRouteMSUsNotifWindowTime interval. This duration value can range from 0 upto cgrtNoRouteMSUsNotifWindowTime. For the notifications generated at the end of the interval, this value will be equal to cgrtNoRouteMSUsNotifWindowTime.')
cgrtIntervalNoRouteMSUs = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 334, 1, 2, 4, 8), Unsigned32()).setUnits('MSUs').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cgrtIntervalNoRouteMSUs.setStatus('current')
if mibBuilder.loadTexts: cgrtIntervalNoRouteMSUs.setDescription('Number of MSUs discarded due to routing data error in this specific cgspNoRouteMSUsInterval interval.')
ciscoGrtDestStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 334, 0, 1)).setObjects(("CISCO-ITP-GSP-MIB", "cgspEventSequenceNumber"), ("CISCO-ITP-GSP-MIB", "cgspCLLICode"), ("CISCO-ITP-GRT-MIB", "cgrtDestNotifSupFlag"), ("CISCO-ITP-GRT-MIB", "cgrtDestNotifChanges"))
if mibBuilder.loadTexts: ciscoGrtDestStateChange.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoGrtDestStateChange.setDescription('This notification is generated whenever one or more destination changes states. This notification contains a list of destination state changes in the cgrtDestNotifChanges object. State changes are accumulated until the cgrtDestNotifChanges is full or the maximum delay time is reached. The delay time is specified by the cgrtDestNotifDelayTime object. It may be necessary to suppress the sending of notification when a large number destinations change state, due the failure of some common resource. The number of notifications can be controlled by specifying values for cgrtDestNotifWindowTime and cgrtDestNotifMaxPerWindow objects. When the number of destination state changes exceed the specified value the last notification will indicate that notifications are suppressed for the remainder of the window. This notification is deprecated by ciscoGrtDestStateChangeRev1.')
ciscoGrtMgmtStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 334, 0, 2)).setObjects(("CISCO-ITP-GSP-MIB", "cgspEventSequenceNumber"), ("CISCO-ITP-GSP-MIB", "cgspCLLICode"), ("CISCO-ITP-GRT-MIB", "cgrtMgmtNotifSupFlag"), ("CISCO-ITP-GRT-MIB", "cgrtMgmtNotifChanges"))
if mibBuilder.loadTexts: ciscoGrtMgmtStateChange.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoGrtMgmtStateChange.setDescription('This notification is generated whenever one or more management routes change state. This notification contains a list of management route state changes in the cgrtMgmtNotifChanges object. State changes are accumulated until the cgrtMgmtNotifChanges is full or the maximum delay time is reached. The delay time is specified by the cgrtMgmtNotifDelayTime object. It may be necessary to suppress the sending of notification when a large number of routes change state, due the failure of some common resource. The number of notifications can be controlled by specifying values for cgrtMgmtNotifWindowTime and cgrtMgmtNotifMaxPerWindow objects. When the number of route state changes exceed the specified value the last notification will indicate that notifications are suppressed for the remainder of the window. This notification is deprecated by ciscoGrtMgmtStateChangeRev1.')
ciscoGrtRouteTableLoad = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 334, 0, 3)).setObjects(("CISCO-ITP-GSP-MIB", "cgspEventSequenceNumber"), ("CISCO-ITP-GSP-MIB", "cgspCLLICode"), ("CISCO-ITP-GRT-MIB", "cgrtInstLoadStatus"), ("CISCO-ITP-GRT-MIB", "cgrtInstTableName"), ("CISCO-ITP-GRT-MIB", "cgrtInstLastURL"))
if mibBuilder.loadTexts: ciscoGrtRouteTableLoad.setStatus('current')
if mibBuilder.loadTexts: ciscoGrtRouteTableLoad.setDescription('This notification is generated whenever a load operation is started or completed. Route table configurations can be loaded by CLI requests. In addition, route tables can loaded using configuration statements. This allows route tables to be reloaded whenever a device restarts.')
ciscoGrtDestStateChangeRev1 = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 334, 0, 4)).setObjects(("CISCO-ITP-GSP-MIB", "cgspEventSequenceNumber"), ("CISCO-ITP-GSP-MIB", "cgspCLLICode"), ("CISCO-ITP-GRT-MIB", "cgrtDestNotifSuppressed"), ("CISCO-ITP-GRT-MIB", "cgrtDestDisplay"), ("CISCO-ITP-GRT-MIB", "cgrtDestStatus"), ("CISCO-ITP-GRT-MIB", "cgrtDestCongestion"))
if mibBuilder.loadTexts: ciscoGrtDestStateChangeRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoGrtDestStateChangeRev1.setDescription('This notification is generated whenever one or more destination changes states within the cgrtDestNotifWindowTimeRev1 duration. Latest state information at the end of cgrtDestNotifWindowTimeRev1 is provided. It may be necessary to suppress the sending of notification when a large number destinations change state, due the failure of some common resource. The number of notifications can be controlled by specifying values for cgrtDestNotifWindowTimeRev1 and cgrtDestNotifMaxPerWindowRev1 objects. When the number of destination state changes exceed the specified value, the notification will provide a count of notifications that got suppressed for the remainder of the window. This notification deprecates ciscoGrtDestStateChange.')
ciscoGrtMgmtStateChangeRev1 = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 334, 0, 5)).setObjects(("CISCO-ITP-GSP-MIB", "cgspEventSequenceNumber"), ("CISCO-ITP-GSP-MIB", "cgspCLLICode"), ("CISCO-ITP-GRT-MIB", "cgrtRouteStatus"), ("CISCO-ITP-GRT-MIB", "cgrtRouteMgmtStatus"), ("CISCO-ITP-GRT-MIB", "cgrtRouteDynamic"), ("CISCO-ITP-GRT-MIB", "cgrtRouteAdminStatus"), ("CISCO-ITP-GRT-MIB", "cgrtRouteNotifSuppressed"), ("CISCO-ITP-GRT-MIB", "cgrtRouteDisplay"))
if mibBuilder.loadTexts: ciscoGrtMgmtStateChangeRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoGrtMgmtStateChangeRev1.setDescription('This notification is generated whenever one or more management routes change states within the cgrtMgmtNotifWindowTimeRev1 duration. Latest state information at the end of cgrtMgmtNotifWindowTimeRev1 is provided. It may be necessary to suppress the sending of notification when a large number of routes change state, due the failure of some common resource. The number of notifications can be controlled by specifying values for cgrtMgmtNotifWindowTimeRev1 and cgrtMgmtNotifMaxPerWindowRev1 objects. When the number of route state changes exceed the specified value, the last notification will provide a count of notifications that got suppressed for the remainder of the window. This notification deprecates ciscoGrtMgmtStateChange.')
ciscoGrtNoRouteMSUDiscards = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 334, 0, 6)).setObjects(("CISCO-ITP-GSP-MIB", "cgspEventSequenceNumber"), ("CISCO-ITP-GSP-MIB", "cgspCLLICode"), ("CISCO-ITP-GSP-MIB", "cgspInstDisplayName"), ("CISCO-ITP-GRT-MIB", "cgrtNoRouteMSUsInterval"), ("CISCO-ITP-GRT-MIB", "cgrtIntervalNoRouteMSUs"))
if mibBuilder.loadTexts: ciscoGrtNoRouteMSUDiscards.setStatus('current')
if mibBuilder.loadTexts: ciscoGrtNoRouteMSUDiscards.setDescription('This notification is generated whenever one or more MSU discards happen due to route data error for a specific signalling point instance in the configured cgrtNoRouteMSUsNotifWindowTime. For cases when there is a non-zero number of MSUs discarded, this notification will be sent at the end of the cgrtNoRouteMSUsNotifWindowTime interval, with cgrtIntervalNoRouteMSUs indicating the total count of MSUs discarded for that specific signalling point instance during the entire cgrtNoRouteMSUsNotifWindowTime interval Q752/5.5.')
if mibBuilder.loadTexts: ciscoGrtNoRouteMSUDiscards.setReference('ANSI GR-82-CORE 6.4.2 System Total Measurements Item 32.')
ciscoGrtMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 334, 2, 1))
ciscoGrtMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 334, 2, 2))
ciscoGrtMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 334, 2, 1, 1)).setObjects(("CISCO-ITP-GRT-MIB", "ciscoGrtInstGroup"), ("CISCO-ITP-GRT-MIB", "ciscoGrtDestGroup"), ("CISCO-ITP-GRT-MIB", "ciscoGrtRouteGroup"), ("CISCO-ITP-GRT-MIB", "ciscoGrtNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGrtMIBCompliance = ciscoGrtMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoGrtMIBCompliance.setDescription('The compliance statement for entities which implement the Cisco CISCO-ITP-GRT-MIB.my MIB')
ciscoGrtMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 334, 2, 1, 2)).setObjects(("CISCO-ITP-GRT-MIB", "ciscoGrtInstGroup"), ("CISCO-ITP-GRT-MIB", "ciscoGrtScalarsGroup"), ("CISCO-ITP-GRT-MIB", "ciscoGrtDestGroupRev1"), ("CISCO-ITP-GRT-MIB", "ciscoGrtRouteGroupRev1"), ("CISCO-ITP-GRT-MIB", "ciscoGrtOrigGroup"), ("CISCO-ITP-GRT-MIB", "ciscoGrtDestSIGroup"), ("CISCO-ITP-GRT-MIB", "ciscoGrtOrigSIGroup"), ("CISCO-ITP-GRT-MIB", "ciscoGrtNotificationsGroupRev1"), ("CISCO-ITP-GRT-MIB", "ciscoGrtInstGroupSup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGrtMIBComplianceRev1 = ciscoGrtMIBComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoGrtMIBComplianceRev1.setDescription('The compliance statement for entities which implement the Cisco CISCO-ITP-GRT-MIB.my MIB')
ciscoGrtInstGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 334, 2, 2, 1)).setObjects(("CISCO-ITP-GRT-MIB", "cgrtInstLastChanged"), ("CISCO-ITP-GRT-MIB", "cgrtInstLastLoadTime"), ("CISCO-ITP-GRT-MIB", "cgrtInstLoadStatus"), ("CISCO-ITP-GRT-MIB", "cgrtInstTableName"), ("CISCO-ITP-GRT-MIB", "cgrtInstLastURL"), ("CISCO-ITP-GRT-MIB", "cgrtInstNumberDestinations"), ("CISCO-ITP-GRT-MIB", "cgrtInstNumberRoutes"), ("CISCO-ITP-GRT-MIB", "cgrtRouteTableLoadNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGrtInstGroup = ciscoGrtInstGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGrtInstGroup.setDescription('SS7 route instance group.')
ciscoGrtDestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 334, 2, 2, 2)).setObjects(("CISCO-ITP-GRT-MIB", "cgrtDestNotifDelayTime"), ("CISCO-ITP-GRT-MIB", "cgrtDestNotifWindowTime"), ("CISCO-ITP-GRT-MIB", "cgrtDestNotifMaxPerWindow"), ("CISCO-ITP-GRT-MIB", "cgrtDestNotifEnabled"), ("CISCO-ITP-GRT-MIB", "cgrtDestNotifSupFlag"), ("CISCO-ITP-GRT-MIB", "cgrtDestNotifChanges"), ("CISCO-ITP-GRT-MIB", "cgrtDestStatus"), ("CISCO-ITP-GRT-MIB", "cgrtDestCongestion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGrtDestGroup = ciscoGrtDestGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoGrtDestGroup.setDescription('SS7 Destination group.')
ciscoGrtRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 334, 2, 2, 3)).setObjects(("CISCO-ITP-GRT-MIB", "cgrtRouteMaxDynamic"), ("CISCO-ITP-GRT-MIB", "cgrtMgmtNotifDelayTime"), ("CISCO-ITP-GRT-MIB", "cgrtMgmtNotifWindowTime"), ("CISCO-ITP-GRT-MIB", "cgrtMgmtNotifMaxPerWindow"), ("CISCO-ITP-GRT-MIB", "cgrtMgmtNotifEnabled"), ("CISCO-ITP-GRT-MIB", "cgrtMgmtNotifSupFlag"), ("CISCO-ITP-GRT-MIB", "cgrtMgmtNotifChanges"), ("CISCO-ITP-GRT-MIB", "cgrtDynamicRoutes"), ("CISCO-ITP-GRT-MIB", "cgrtDynamicRoutesDropped"), ("CISCO-ITP-GRT-MIB", "cgrtRouteQos"), ("CISCO-ITP-GRT-MIB", "cgrtRouteStatus"), ("CISCO-ITP-GRT-MIB", "cgrtRouteMgmtStatus"), ("CISCO-ITP-GRT-MIB", "cgrtRouteDynamic"), ("CISCO-ITP-GRT-MIB", "cgrtRouteType"), ("CISCO-ITP-GRT-MIB", "cgrtRouteAdminStatus"), ("CISCO-ITP-GRT-MIB", "cgrtRouteRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGrtRouteGroup = ciscoGrtRouteGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoGrtRouteGroup.setDescription('SS7 Route group.')
ciscoGrtNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 334, 2, 2, 4)).setObjects(("CISCO-ITP-GRT-MIB", "ciscoGrtDestStateChange"), ("CISCO-ITP-GRT-MIB", "ciscoGrtMgmtStateChange"), ("CISCO-ITP-GRT-MIB", "ciscoGrtRouteTableLoad"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGrtNotificationsGroup = ciscoGrtNotificationsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoGrtNotificationsGroup.setDescription('Gateway route notification objects.')
ciscoGrtScalarsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 334, 2, 2, 5)).setObjects(("CISCO-ITP-GRT-MIB", "cgrtPCStatsInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGrtScalarsGroup = ciscoGrtScalarsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGrtScalarsGroup.setDescription('Scalars Group for Gateway Signalling Point Route Table.')
ciscoGrtDestGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 334, 2, 2, 6)).setObjects(("CISCO-ITP-GRT-MIB", "cgrtDestNotifWindowTimeRev1"), ("CISCO-ITP-GRT-MIB", "cgrtDestNotifMaxPerWindowRev1"), ("CISCO-ITP-GRT-MIB", "cgrtDestNotifEnabledRev1"), ("CISCO-ITP-GRT-MIB", "cgrtDestNotifSuppressed"), ("CISCO-ITP-GRT-MIB", "cgrtDestStatus"), ("CISCO-ITP-GRT-MIB", "cgrtDestCongestion"), ("CISCO-ITP-GRT-MIB", "cgrtDestAccessibleSeconds"), ("CISCO-ITP-GRT-MIB", "cgrtDestInaccessibleSeconds"), ("CISCO-ITP-GRT-MIB", "cgrtDestRestrictedSeconds"), ("CISCO-ITP-GRT-MIB", "cgrtDestMSUsOut"), ("CISCO-ITP-GRT-MIB", "cgrtDestOctetsOut"), ("CISCO-ITP-GRT-MIB", "cgrtDestMSUsIn"), ("CISCO-ITP-GRT-MIB", "cgrtDestOctetsIn"), ("CISCO-ITP-GRT-MIB", "cgrtDestRestrictedMSUs"), ("CISCO-ITP-GRT-MIB", "cgrtDestInaccessibleDrops"), ("CISCO-ITP-GRT-MIB", "cgrtDestCongestionDrops"), ("CISCO-ITP-GRT-MIB", "cgrtDestDisplay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGrtDestGroupRev1 = ciscoGrtDestGroupRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoGrtDestGroupRev1.setDescription('SS7 Destination group.')
ciscoGrtRouteGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 334, 2, 2, 7)).setObjects(("CISCO-ITP-GRT-MIB", "cgrtRouteMaxDynamic"), ("CISCO-ITP-GRT-MIB", "cgrtMgmtNotifWindowTimeRev1"), ("CISCO-ITP-GRT-MIB", "cgrtMgmtNotifMaxPerWindowRev1"), ("CISCO-ITP-GRT-MIB", "cgrtMgmtNotifEnabledRev1"), ("CISCO-ITP-GRT-MIB", "cgrtRouteNotifSuppressed"), ("CISCO-ITP-GRT-MIB", "cgrtDynamicRoutes"), ("CISCO-ITP-GRT-MIB", "cgrtDynamicRoutesDropped"), ("CISCO-ITP-GRT-MIB", "cgrtRouteQos"), ("CISCO-ITP-GRT-MIB", "cgrtRouteStatus"), ("CISCO-ITP-GRT-MIB", "cgrtRouteMgmtStatus"), ("CISCO-ITP-GRT-MIB", "cgrtRouteDynamic"), ("CISCO-ITP-GRT-MIB", "cgrtRouteType"), ("CISCO-ITP-GRT-MIB", "cgrtRouteAdminStatus"), ("CISCO-ITP-GRT-MIB", "cgrtRouteRowStatus"), ("CISCO-ITP-GRT-MIB", "cgrtRouteAllowedSeconds"), ("CISCO-ITP-GRT-MIB", "cgrtRouteRestrictedSeconds"), ("CISCO-ITP-GRT-MIB", "cgrtRouteProhibitedSeconds"), ("CISCO-ITP-GRT-MIB", "cgrtRouteDisplay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGrtRouteGroupRev1 = ciscoGrtRouteGroupRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoGrtRouteGroupRev1.setDescription('SS7 Route group.')
ciscoGrtOrigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 334, 2, 2, 8)).setObjects(("CISCO-ITP-GRT-MIB", "cgrtOrigTableEnabled"), ("CISCO-ITP-GRT-MIB", "cgrtOrigMSUs"), ("CISCO-ITP-GRT-MIB", "cgrtOrigOctets"), ("CISCO-ITP-GRT-MIB", "cgrtOrigDisplay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGrtOrigGroup = ciscoGrtOrigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGrtOrigGroup.setDescription('SS7 Origination group.')
ciscoGrtDestSIGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 334, 2, 2, 9)).setObjects(("CISCO-ITP-GRT-MIB", "cgrtDestSIMSUsOut"), ("CISCO-ITP-GRT-MIB", "cgrtDestSIOctetsOut"), ("CISCO-ITP-GRT-MIB", "cgrtDestSIMSUsIn"), ("CISCO-ITP-GRT-MIB", "cgrtDestSIOctetsIn"), ("CISCO-ITP-GRT-MIB", "cgrtDestSIDisplay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGrtDestSIGroup = ciscoGrtDestSIGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGrtDestSIGroup.setDescription('SS7 Destination and Service Indicator group.')
ciscoGrtOrigSIGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 334, 2, 2, 10)).setObjects(("CISCO-ITP-GRT-MIB", "cgrtOrigSIMSUs"), ("CISCO-ITP-GRT-MIB", "cgrtOrigSIOctets"), ("CISCO-ITP-GRT-MIB", "cgrtOrigSIDisplay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGrtOrigSIGroup = ciscoGrtOrigSIGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoGrtOrigSIGroup.setDescription('SS7 Destination and Service Indicator group.')
ciscoGrtNotificationsGroupRev1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 334, 2, 2, 11)).setObjects(("CISCO-ITP-GRT-MIB", "ciscoGrtRouteTableLoad"), ("CISCO-ITP-GRT-MIB", "ciscoGrtDestStateChangeRev1"), ("CISCO-ITP-GRT-MIB", "ciscoGrtMgmtStateChangeRev1"), ("CISCO-ITP-GRT-MIB", "ciscoGrtNoRouteMSUDiscards"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGrtNotificationsGroupRev1 = ciscoGrtNotificationsGroupRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoGrtNotificationsGroupRev1.setDescription('Gateway route notification objects.')
ciscoGrtInstGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 334, 2, 2, 12)).setObjects(("CISCO-ITP-GRT-MIB", "cgrtNoRouteMSUsNotifEnabled"), ("CISCO-ITP-GRT-MIB", "cgrtNoRouteMSUsNotifWindowTime"), ("CISCO-ITP-GRT-MIB", "cgrtInstUnknownOrigPCs"), ("CISCO-ITP-GRT-MIB", "cgrtInstNoRouteDrops"), ("CISCO-ITP-GRT-MIB", "cgrtNoRouteMSUsInterval"), ("CISCO-ITP-GRT-MIB", "cgrtIntervalNoRouteMSUs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoGrtInstGroupSup1 = ciscoGrtInstGroupSup1.setStatus('current')
if mibBuilder.loadTexts: ciscoGrtInstGroupSup1.setDescription('Additional Inst table objects.')
mibBuilder.exportSymbols("CISCO-ITP-GRT-MIB", cgrtDestSITable=cgrtDestSITable, ciscoGrtOrigSIGroup=ciscoGrtOrigSIGroup, cgrtDestNotifMaxPerWindowRev1=cgrtDestNotifMaxPerWindowRev1, ciscoGrtNoRouteMSUDiscards=ciscoGrtNoRouteMSUDiscards, ciscoGrtDestStateChange=ciscoGrtDestStateChange, cgrtMgmtNotifChanges=cgrtMgmtNotifChanges, cgrtOrigEntry=cgrtOrigEntry, ciscoGrtNotificationsGroupRev1=ciscoGrtNotificationsGroupRev1, cgrtDestNotifWindowTime=cgrtDestNotifWindowTime, cgrtNoRouteMSUsInterval=cgrtNoRouteMSUsInterval, cgrtDestOctetsIn=cgrtDestOctetsIn, cgrtDestNotifSupFlag=cgrtDestNotifSupFlag, cgrtDestMSUsIn=cgrtDestMSUsIn, cgrtDestMSUsOut=cgrtDestMSUsOut, PYSNMP_MODULE_ID=ciscoGrtMIB, ciscoGrtMIBCompliance=ciscoGrtMIBCompliance, ciscoGrtMgmtStateChangeRev1=ciscoGrtMgmtStateChangeRev1, cgrtRouteDestLsCost=cgrtRouteDestLsCost, ciscoGrtRouteTableLoad=ciscoGrtRouteTableLoad, cgrtInstNumberRoutes=cgrtInstNumberRoutes, cgrtInstUnknownOrigPCs=cgrtInstUnknownOrigPCs, cgrtDestSIMSUsIn=cgrtDestSIMSUsIn, cgrtDestRestrictedMSUs=cgrtDestRestrictedMSUs, cgrtRouteDestLinkset=cgrtRouteDestLinkset, ciscoGrtMgmtStateChange=ciscoGrtMgmtStateChange, cgrtDestSIOctetsIn=cgrtDestSIOctetsIn, ciscoGrtMIBConform=ciscoGrtMIBConform, cgrtRouteDynamic=cgrtRouteDynamic, cgrtDestDisplay=cgrtDestDisplay, cgrtOrigSIDisplay=cgrtOrigSIDisplay, cgrtInstLastLoadTime=cgrtInstLastLoadTime, cgrtDestAccessibleSeconds=cgrtDestAccessibleSeconds, cgrtDestSIOctetsOut=cgrtDestSIOctetsOut, cgrtDestSIEntry=cgrtDestSIEntry, cgrtInstTable=cgrtInstTable, cgrtRouteRestrictedSeconds=cgrtRouteRestrictedSeconds, cgrtNotificationsInfo=cgrtNotificationsInfo, ciscoGrtMIBObjects=ciscoGrtMIBObjects, cgrtDynamicRoutesDropped=cgrtDynamicRoutesDropped, cgrtDestCongestionDrops=cgrtDestCongestionDrops, cgrtScalars=cgrtScalars, cgrtDestTable=cgrtDestTable, cgrtRouteEntry=cgrtRouteEntry, cgrtNoRouteMSUsNotifEnabled=cgrtNoRouteMSUsNotifEnabled, cgrtInstLastURL=cgrtInstLastURL, cgrtDestInaccessibleSeconds=cgrtDestInaccessibleSeconds, cgrtDestEntry=cgrtDestEntry, cgrtOrigSIMSUs=cgrtOrigSIMSUs, ciscoGrtDestSIGroup=ciscoGrtDestSIGroup, ciscoGrtInstGroupSup1=ciscoGrtInstGroupSup1, cgrtInstLastChanged=cgrtInstLastChanged, cgrtMgmtNotifWindowTimeRev1=cgrtMgmtNotifWindowTimeRev1, cgrtOrigSIOctets=cgrtOrigSIOctets, ciscoGrtDestGroup=ciscoGrtDestGroup, cgrtRouteType=cgrtRouteType, cgrtRouteTableLoadNotifEnabled=cgrtRouteTableLoadNotifEnabled, cgrtOrigOctets=cgrtOrigOctets, cgrtIntervalNoRouteMSUs=cgrtIntervalNoRouteMSUs, cgrtMgmtNotifMaxPerWindow=cgrtMgmtNotifMaxPerWindow, cgrtOrigMSUs=cgrtOrigMSUs, cgrtOrigPC=cgrtOrigPC, cgrtRouteDisplay=cgrtRouteDisplay, cgrtDestRestrictedSeconds=cgrtDestRestrictedSeconds, cgrtMtp3SI=cgrtMtp3SI, cgrtRouteNotifSuppressed=cgrtRouteNotifSuppressed, cgrtInstNumberDestinations=cgrtInstNumberDestinations, CgrtDisplayPCSI=CgrtDisplayPCSI, cgrtRouteRowStatus=cgrtRouteRowStatus, cgrtMgmtNotifWindowTime=cgrtMgmtNotifWindowTime, cgrtNoRouteMSUsNotifWindowTime=cgrtNoRouteMSUsNotifWindowTime, cgrtPCStatsInterval=cgrtPCStatsInterval, cgrtOrigTable=cgrtOrigTable, cgrtMgmtNotifEnabled=cgrtMgmtNotifEnabled, ciscoGrtNotificationsGroup=ciscoGrtNotificationsGroup, cgrtDestNotifSuppressed=cgrtDestNotifSuppressed, ciscoGrtMIB=ciscoGrtMIB, cgrtDestNotifWindowTimeRev1=cgrtDestNotifWindowTimeRev1, cgrtRouteAllowedSeconds=cgrtRouteAllowedSeconds, cgrtRouteMgmtStatus=cgrtRouteMgmtStatus, cgrtDestSIDisplay=cgrtDestSIDisplay, cgrtDestNotifChanges=cgrtDestNotifChanges, cgrtMgmtNotifSupFlag=cgrtMgmtNotifSupFlag, ciscoGrtMIBGroups=ciscoGrtMIBGroups, ciscoGrtScalarsGroup=ciscoGrtScalarsGroup, cgrtRouteStatus=cgrtRouteStatus, cgrtDestOctetsOut=cgrtDestOctetsOut, ciscoGrtMIBComplianceRev1=ciscoGrtMIBComplianceRev1, cgrtRouteMaxDynamic=cgrtRouteMaxDynamic, cgrtDestNotifDelayTime=cgrtDestNotifDelayTime, cgrtDestInaccessibleDrops=cgrtDestInaccessibleDrops, cgrtRouteMask=cgrtRouteMask, cgrtOrigTableEnabled=cgrtOrigTableEnabled, cgrtRouteQos=cgrtRouteQos, cgrtOrigSIEntry=cgrtOrigSIEntry, cgrtDestNotifEnabledRev1=cgrtDestNotifEnabledRev1, cgrtRouteTable=cgrtRouteTable, ciscoGrtOrigGroup=ciscoGrtOrigGroup, ciscoGrtRouteGroup=ciscoGrtRouteGroup, cgrtRouteProhibitedSeconds=cgrtRouteProhibitedSeconds, ciscoGrtDestStateChangeRev1=ciscoGrtDestStateChangeRev1, cgrtMgmtNotifEnabledRev1=cgrtMgmtNotifEnabledRev1, cgrtInstNoRouteDrops=cgrtInstNoRouteDrops, cgrtObjects=cgrtObjects, ciscoGrtMIBCompliances=ciscoGrtMIBCompliances, cgrtInstLoadStatus=cgrtInstLoadStatus, cgrtRouteDpc=cgrtRouteDpc, ciscoGrtRouteGroupRev1=ciscoGrtRouteGroupRev1, cgrtRouteAdminStatus=cgrtRouteAdminStatus, cgrtInstTableName=cgrtInstTableName, cgrtDestSIMSUsOut=cgrtDestSIMSUsOut, cgrtDestStatus=cgrtDestStatus, cgrtMgmtNotifMaxPerWindowRev1=cgrtMgmtNotifMaxPerWindowRev1, cgrtDestNotifEnabled=cgrtDestNotifEnabled, cgrtDynamicRoutes=cgrtDynamicRoutes, cgrtOrigDisplay=cgrtOrigDisplay, ciscoGrtDestGroupRev1=ciscoGrtDestGroupRev1, cgrtDestNotifMaxPerWindow=cgrtDestNotifMaxPerWindow, cgrtMgmtNotifDelayTime=cgrtMgmtNotifDelayTime, ciscoGrtInstGroup=ciscoGrtInstGroup, cgrtInstEntry=cgrtInstEntry, cgrtDestCongestion=cgrtDestCongestion, ciscoGrtNotifications=ciscoGrtNotifications, cgrtOrigSITable=cgrtOrigSITable)
