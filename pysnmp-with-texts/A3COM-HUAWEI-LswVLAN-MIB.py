#
# PySNMP MIB module A3COM-HUAWEI-LswVLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-HUAWEI-LswVLAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:04:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
PortList, hwifVLANTrunkStatusEntry = mibBuilder.importSymbols("A3COM-HUAWEI-LswINF-MIB", "PortList", "hwifVLANTrunkStatusEntry")
lswCommon, = mibBuilder.importSymbols("A3COM-HUAWEI-OID-MIB", "lswCommon")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
ifEntry, = mibBuilder.importSymbols("IF-MIB", "ifEntry")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, Counter64, ModuleIdentity, Unsigned32, ObjectIdentity, iso, Counter32, Integer32, Bits, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, IpAddress, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter64", "ModuleIdentity", "Unsigned32", "ObjectIdentity", "iso", "Counter32", "Integer32", "Bits", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "IpAddress", "TimeTicks")
TextualConvention, TimeInterval, RowStatus, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TimeInterval", "RowStatus", "DisplayString", "TruthValue")
hwLswVlan = ModuleIdentity((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2))
if mibBuilder.loadTexts: hwLswVlan.setLastUpdated('200112261452Z')
if mibBuilder.loadTexts: hwLswVlan.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
if mibBuilder.loadTexts: hwLswVlan.setContactInfo('Platform Team Hangzhou H3C Tech. Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip:100085')
if mibBuilder.loadTexts: hwLswVlan.setDescription('')
class HwVlanIndex(TextualConvention, Integer32):
    description = 'A value used to index per-VLAN tables: values of 0 and 4095 are not permitted; if the value is between 1 and 4094 inclusive, it represents an IEEE 802.1Q VLAN-ID with global scope within a given bridged domain (see VlanId textual convention). If the value is greater than 4095 then it represents a VLAN with scope local to the particular agent, i.e. one without a global VLAN-ID assigned to it. Such VLANs are outside the scope of IEEE 802.1Q but it is convenient to be able to manage them in the same way using this MIB.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

hwLswVlanMngObject = ObjectIdentity((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1))
if mibBuilder.loadTexts: hwLswVlanMngObject.setStatus('current')
if mibBuilder.loadTexts: hwLswVlanMngObject.setDescription('Description.')
hwdot1qVlanMIBTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 1), )
if mibBuilder.loadTexts: hwdot1qVlanMIBTable.setStatus('current')
if mibBuilder.loadTexts: hwdot1qVlanMIBTable.setDescription('VLAN MIB table')
hwdot1qVlanMIBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 1, 1), ).setIndexNames((0, "A3COM-HUAWEI-LswVLAN-MIB", "hwdot1qVlanIndex"))
if mibBuilder.loadTexts: hwdot1qVlanMIBEntry.setStatus('current')
if mibBuilder.loadTexts: hwdot1qVlanMIBEntry.setDescription('Entries of VLAN MIB table')
hwdot1qVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 1, 1, 1), HwVlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1qVlanIndex.setStatus('current')
if mibBuilder.loadTexts: hwdot1qVlanIndex.setDescription('The VLAN-ID.')
hwdot1qVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1qVlanName.setStatus('current')
if mibBuilder.loadTexts: hwdot1qVlanName.setDescription('Name of the VLAN.')
hwdot1qVlanPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 1, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1qVlanPorts.setStatus('current')
if mibBuilder.loadTexts: hwdot1qVlanPorts.setDescription('Port list of the VLAN.')
hwdot1qVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("superVlan", 1), ("common-vlan", 2), ("sub-vlan", 3), ("isolate-user-vlan", 4), ("secondary-vlan", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1qVlanType.setStatus('current')
if mibBuilder.loadTexts: hwdot1qVlanType.setDescription('Vlan types: SuperVlan(1), Common vlan(2), and Sub-vlan(3).')
hwdot1qVlanMacFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1qVlanMacFilter.setStatus('current')
if mibBuilder.loadTexts: hwdot1qVlanMacFilter.setDescription('Whether to filter MAC addresses.')
hwdot1qVlanMcastUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1qVlanMcastUnknownProtos.setStatus('current')
if mibBuilder.loadTexts: hwdot1qVlanMcastUnknownProtos.setDescription('Whether to broadcast the unknown packets.')
hwExistInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwExistInterface.setStatus('current')
if mibBuilder.loadTexts: hwExistInterface.setDescription('Whether there is virtual interface.')
hwVlanInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: hwVlanInterfaceIndex.setDescription('Whether vlan interface is configured on vlan. If vlan interface is configured, the value of the node is vlan id, else the value is 0.')
hwdot1qVlanMacLearn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 1, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1qVlanMacLearn.setStatus('current')
if mibBuilder.loadTexts: hwdot1qVlanMacLearn.setDescription('MAC address learning identity. (common vlan/Sub-vlan)')
hwdot1qVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("static", 2), ("dynamic", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1qVlanStatus.setStatus('current')
if mibBuilder.loadTexts: hwdot1qVlanStatus.setDescription('Status of the VLAN.')
hwdot1qVlanCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 1, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1qVlanCreationTime.setStatus('current')
if mibBuilder.loadTexts: hwdot1qVlanCreationTime.setDescription('The sysUPTime when the VLAN is created.')
hwdot1qVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1qVlanPriority.setStatus('current')
if mibBuilder.loadTexts: hwdot1qVlanPriority.setDescription('Priority of the VLAN.')
hwdot1qVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 1, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwdot1qVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwdot1qVlanRowStatus.setDescription('Operation status.')
hwdot1qVlanBroadcastSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1qVlanBroadcastSuppression.setStatus('current')
if mibBuilder.loadTexts: hwdot1qVlanBroadcastSuppression.setDescription('Whether broadcast suppression of vlan be supported pro rata. The vlaue of 100 indicates no broadcast suppression. If the function is not supported, this object cannot be written, and 100 will be returned when reading')
hwdot1qVlanBcastSuppressionPPS = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 148800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1qVlanBcastSuppressionPPS.setStatus('current')
if mibBuilder.loadTexts: hwdot1qVlanBcastSuppressionPPS.setDescription('If the broadcast can be controlled with pps(packet per second)type, the value of 0 indicates no suppression. This node is conflicted with hwdot1qVlanBroadcastSuppression. If the mode is set, hwdot1qVlanBroadcastSuppression is unavailable. And vice versa.')
hwdot1qVlanMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1qVlanMulticast.setStatus('current')
if mibBuilder.loadTexts: hwdot1qVlanMulticast.setDescription('Multicast vlan. The default value is disable(0).')
hwdot1qVlanTaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 1, 1, 17), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1qVlanTaggedPorts.setStatus('current')
if mibBuilder.loadTexts: hwdot1qVlanTaggedPorts.setDescription('Tagged port list of the VLAN.')
hwdot1qVlanUntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 1, 1, 18), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1qVlanUntaggedPorts.setStatus('current')
if mibBuilder.loadTexts: hwdot1qVlanUntaggedPorts.setDescription('Untagged port list of the VLAN.')
hwdot1qVlanPortIndexs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 1, 1, 19), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1qVlanPortIndexs.setStatus('current')
if mibBuilder.loadTexts: hwdot1qVlanPortIndexs.setDescription('PortIndex list of the VLAN, that delimited by comma, such as 1,3,4,7.')
hwVlanInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 2), )
if mibBuilder.loadTexts: hwVlanInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: hwVlanInterfaceTable.setDescription('Virtual interface configuration table')
hwVlanInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-LswVLAN-MIB", "hwVlanInterfaceID"))
if mibBuilder.loadTexts: hwVlanInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: hwVlanInterfaceEntry.setDescription('Entries of virtual interface configuration table')
hwVlanInterfaceID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanInterfaceID.setStatus('current')
if mibBuilder.loadTexts: hwVlanInterfaceID.setDescription('Index of the vlan interface table.')
hwdot1qVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 2, 1, 2), HwVlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1qVlanID.setStatus('current')
if mibBuilder.loadTexts: hwdot1qVlanID.setDescription('VLAN-ID')
hwdot1qVlanIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1qVlanIpAddress.setStatus('current')
if mibBuilder.loadTexts: hwdot1qVlanIpAddress.setDescription('IP address of interface.')
hwdot1qVlanIpAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1qVlanIpAddressMask.setStatus('current')
if mibBuilder.loadTexts: hwdot1qVlanIpAddressMask.setDescription('IP address mask of interface.')
hwVlanInterfaceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanInterfaceAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hwVlanInterfaceAdminStatus.setDescription('Status of VLAN virtual interfaces.')
hwVlanInterfaceFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ethernet-ii", 1), ("ethernet-snap", 2), ("ethernet-8022", 3), ("ethernet-8023", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanInterfaceFrameType.setStatus('current')
if mibBuilder.loadTexts: hwVlanInterfaceFrameType.setDescription('Frame type accepted by VLAN virtual interfaces.')
hwInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwInterfaceRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwInterfaceRowStatus.setDescription('Operation status.')
hwVlanInterfaceIpMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("assigned-ip", 1), ("dhcp-ip", 2), ("bootp-ip", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanInterfaceIpMethod.setStatus('current')
if mibBuilder.loadTexts: hwVlanInterfaceIpMethod.setDescription('Vlan interface ip address acquiring method which is manual, dhcp or bootp.')
hwVlanInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanInterfaceIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwVlanInterfaceIfIndex.setDescription('IfIndex of VLAN interface.')
hwifIsolateMappingTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 4), )
if mibBuilder.loadTexts: hwifIsolateMappingTable.setStatus('current')
if mibBuilder.loadTexts: hwifIsolateMappingTable.setDescription('Secondary vlan lists of Isolate-VLANs.')
hwifIsolateMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 4, 1), ).setIndexNames((0, "A3COM-HUAWEI-LswVLAN-MIB", "hwifIsolatePrimaryVlanID"))
if mibBuilder.loadTexts: hwifIsolateMappingEntry.setStatus('current')
if mibBuilder.loadTexts: hwifIsolateMappingEntry.setDescription('Secondary vlan lists of Isolate-VLANs.')
hwifIsolatePrimaryVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 4, 1, 1), HwVlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwifIsolatePrimaryVlanID.setStatus('current')
if mibBuilder.loadTexts: hwifIsolatePrimaryVlanID.setDescription('Primary VLAN-ID.')
hwifIsolateSecondaryVlanlistLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwifIsolateSecondaryVlanlistLow.setStatus('current')
if mibBuilder.loadTexts: hwifIsolateSecondaryVlanlistLow.setDescription("Each octet within this value specifies a set of eight VLANs, with the first octet specifying VLANs 1 through 8, the second octet specifying VLANs 9 through 16, etc. Within each octet, the most significant bit represents the highest numbered VLAN, and the least significant bit represents the lowest numbered VLAN. Thus, each secondary VLAN of the primary VLAN is represented by a single bit within the value of this object. If that bit has a value of '1' then that VLAN is secondary VLAN in the set of VLANs; the VLAN is not secondary VLAN if its bit has a value of '0'.")
hwifIsolateSecondaryVlanlistHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwifIsolateSecondaryVlanlistHigh.setStatus('current')
if mibBuilder.loadTexts: hwifIsolateSecondaryVlanlistHigh.setDescription("Each octet within this value specifies a set of eight VLANs, with the first octet specifying VLANs 2049 through 2056, the second octet specifying VLANs 2057 through 2064, etc. Within each octet, the most significant bit represents the highest numbered VLAN, and the least significant bit represents the lowest numbered VLAN. Thus, each secondary VLAN of the primary VLAN is represented by a single bit within the value of this object. If that bit has a value of '1' then that VLAN is secondary VLAN in the set of VLANs; the VLAN is not secondary VLAN if its bit has a value of '0'.")
hwVlanInterfaceAddrTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 5), )
if mibBuilder.loadTexts: hwVlanInterfaceAddrTable.setStatus('current')
if mibBuilder.loadTexts: hwVlanInterfaceAddrTable.setDescription('VLAN interface IP address configuration table')
hwVlanInterfaceAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 5, 1), ).setIndexNames((0, "A3COM-HUAWEI-LswVLAN-MIB", "hwVlanInterfaceIpIfIndex"), (0, "A3COM-HUAWEI-LswVLAN-MIB", "hwVlanInterfaceIpAddr"))
if mibBuilder.loadTexts: hwVlanInterfaceAddrEntry.setStatus('current')
if mibBuilder.loadTexts: hwVlanInterfaceAddrEntry.setDescription('Entries of VLAN interface IP address configuration table')
hwVlanInterfaceIpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVlanInterfaceIpIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwVlanInterfaceIpIfIndex.setDescription('Index of VLAN interfaces.')
hwVlanInterfaceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 5, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanInterfaceIpAddr.setStatus('current')
if mibBuilder.loadTexts: hwVlanInterfaceIpAddr.setDescription('IP address of VLAN interface. When taking destory operation, you could set it zero to destory all IP addresses(but cluster IP address) in this VLAN interface.')
hwVlanInterfaceIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 5, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanInterfaceIpMask.setStatus('current')
if mibBuilder.loadTexts: hwVlanInterfaceIpMask.setDescription('IP address mask of VLAN interface. When destory single IP address, you must set it correct to relative IP address.')
hwVlanInterfaceIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("primary", 1), ("sub", 2), ("cluster", 3), ("vrrp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVlanInterfaceIpType.setStatus('current')
if mibBuilder.loadTexts: hwVlanInterfaceIpType.setDescription('IP address type. cluster(3) will only be set when taking GET or GET NEXT operation. primary(1) is optional when taking SET primary IP address operation.')
hwVlanInterfaceIpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVlanInterfaceIpRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwVlanInterfaceIpRowStatus.setDescription('Operation status. active(1) will only be set when taking GET or GET NEXT operation. createAndGo(4) and destory(6) is valid when taking SET operation.')
hwdot1qVlanBatchMIBTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 6), )
if mibBuilder.loadTexts: hwdot1qVlanBatchMIBTable.setStatus('current')
if mibBuilder.loadTexts: hwdot1qVlanBatchMIBTable.setDescription("VLAN batch configuration table. In the case of VLAN batch creation, hwdot1qVlanBatchSetOperate should be set to 1. For example, if creating a row is for creating VLANs 2 to 4, the value of the objects should be set as follows: hwdot1qVlanBatchStartIndex 2, hwdot1qVlanBatchEndIndex 4, hwdot1qVlanBatchSetOperate create(1), hwdot1qVlanBatchRowStatus createAndGo(4). In the case of VLAN batch deletion, hwdot1qVlanBatchSetOperate should be set to 2. For example, if creating a row is for deleting VLANs 10 to 20, the value of the objects should be set as follows: hwdot1qVlanBatchStartIndex 10, hwdot1qVlanBatchEndIndex 20, hwdot1qVlanBatchSetOperate delete(2), hwdot1qVlanBatchRowStatus createAndGo(4). When the action of batch VLANs deleting or creating is done, one row will be existent until it is deleted manually or ages out, but the VLANs of it won't disappear with the deletion of the row.")
hwDot1qVlanBatchMIBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 6, 1), ).setIndexNames((0, "A3COM-HUAWEI-LswVLAN-MIB", "hwdot1qVlanBatchOperIndex"))
if mibBuilder.loadTexts: hwDot1qVlanBatchMIBEntry.setStatus('current')
if mibBuilder.loadTexts: hwDot1qVlanBatchMIBEntry.setDescription('VLAN batch configuration entry.')
hwdot1qVlanBatchOperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1qVlanBatchOperIndex.setStatus('current')
if mibBuilder.loadTexts: hwdot1qVlanBatchOperIndex.setDescription('The consequence of operation.')
hwdot1qVlanBatchStartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 6, 1, 2), HwVlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1qVlanBatchStartIndex.setStatus('current')
if mibBuilder.loadTexts: hwdot1qVlanBatchStartIndex.setDescription('The value of start VLAN-ID.')
hwdot1qVlanBatchEndIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 6, 1, 3), HwVlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwdot1qVlanBatchEndIndex.setStatus('current')
if mibBuilder.loadTexts: hwdot1qVlanBatchEndIndex.setDescription('The value of end VLAN-ID.')
hwdot1qVlanBatchOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("opInprogress", 1), ("opfailure", 2), ("opsuccess", 3), ("opsuccesspartial", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdot1qVlanBatchOperStatus.setStatus('current')
if mibBuilder.loadTexts: hwdot1qVlanBatchOperStatus.setDescription('The status of operation.')
hwdot1qVlanBatchRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwdot1qVlanBatchRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwdot1qVlanBatchRowStatus.setDescription('The row status of HwDot1qVlanBatchMIBEntry.')
hwdot1qVlanBatchSetOperate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwdot1qVlanBatchSetOperate.setStatus('current')
if mibBuilder.loadTexts: hwdot1qVlanBatchSetOperate.setDescription('VLAN batch creation or deletion.')
hwifSuperVlanMappingTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 7), )
if mibBuilder.loadTexts: hwifSuperVlanMappingTable.setStatus('current')
if mibBuilder.loadTexts: hwifSuperVlanMappingTable.setDescription('Sub VLAN lists of super-VLANs.')
hwifSuperVlanMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 7, 1), ).setIndexNames((0, "A3COM-HUAWEI-LswVLAN-MIB", "hwifSuperVlanID"))
if mibBuilder.loadTexts: hwifSuperVlanMappingEntry.setStatus('current')
if mibBuilder.loadTexts: hwifSuperVlanMappingEntry.setDescription('Sub VLAN lists of super-VLANs.')
hwifSuperVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 7, 1, 1), HwVlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwifSuperVlanID.setStatus('current')
if mibBuilder.loadTexts: hwifSuperVlanID.setDescription('Super VLAN ID.')
hwifSubVlanlistLow = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwifSubVlanlistLow.setStatus('current')
if mibBuilder.loadTexts: hwifSubVlanlistLow.setDescription("Each octet within this value specifies a set of eight VLANs, with the first octet specifying VLANs 1 through 8, the second octet specifying VLANs 9 through 16, etc. Within each octet, the most significant bit represents the highest numbered VLAN, and the least significant bit represents the lowest numbered VLAN. Thus, each sub VLAN of the super VLAN is represented by a single bit within the value of this object. If that bit has a value of '1' then that VLAN is a sub VLAN of the super VLAN; the VLAN is not a sub VLAN of the super VLAN if its bit has a value of '0'.")
hwifSubVlanlistHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 1, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwifSubVlanlistHigh.setStatus('current')
if mibBuilder.loadTexts: hwifSubVlanlistHigh.setDescription("Each octet within this value specifies a set of eight VLANs, with the first octet specifying VLANs 2049 through 2056, the second octet specifying VLANs 2057 through 2064, etc. Within each octet, the most significant bit represents the highest numbered VLAN, and the least significant bit represents the lowest numbered VLAN. Thus, each sub VLAN of the super VLAN is represented by a single bit within the value of this object. If that bit has a value of '1' then that VLAN is a sub VLAN of the super VLAN; the VLAN is not a sub VLAN of the super VLAN if its bit has a value of '0'.")
hwLswVlanProtoObject = ObjectIdentity((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 2))
if mibBuilder.loadTexts: hwLswVlanProtoObject.setStatus('current')
if mibBuilder.loadTexts: hwLswVlanProtoObject.setDescription('Description.')
hwVLANMibGarpLeaveAllTime = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 2, 14), TimeInterval().clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVLANMibGarpLeaveAllTime.setStatus('current')
if mibBuilder.loadTexts: hwVLANMibGarpLeaveAllTime.setDescription('The GARP LeaveAll time, in centiseconds.')
hwvLANMibSwitchCountTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 2, 15), )
if mibBuilder.loadTexts: hwvLANMibSwitchCountTable.setStatus('current')
if mibBuilder.loadTexts: hwvLANMibSwitchCountTable.setDescription('A table containing the information various statistics of switch.')
hwvLANMibSwitchCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 2, 15, 1), )
hwifVLANTrunkStatusEntry.registerAugmentions(("A3COM-HUAWEI-LswVLAN-MIB", "hwvLANMibSwitchCountEntry"))
hwvLANMibSwitchCountEntry.setIndexNames(*hwifVLANTrunkStatusEntry.getIndexNames())
if mibBuilder.loadTexts: hwvLANMibSwitchCountEntry.setStatus('current')
if mibBuilder.loadTexts: hwvLANMibSwitchCountEntry.setDescription('A table containing the information various statistics of switch.')
hwVLANMibSwitchGMRPRXPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 2, 15, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVLANMibSwitchGMRPRXPkt.setStatus('current')
if mibBuilder.loadTexts: hwVLANMibSwitchGMRPRXPkt.setDescription('Number of GMRP frames received.')
hwVLANMibSwitchGVRPRXPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 2, 15, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVLANMibSwitchGVRPRXPkt.setStatus('current')
if mibBuilder.loadTexts: hwVLANMibSwitchGVRPRXPkt.setDescription('Number of GVRP frames received.')
hwVLANMibSwitchGMRPTXPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 2, 15, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVLANMibSwitchGMRPTXPkt.setStatus('current')
if mibBuilder.loadTexts: hwVLANMibSwitchGMRPTXPkt.setDescription('Number of GMRP frames transmitted.')
hwVLANMibSwitchGVRPTXPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 2, 15, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVLANMibSwitchGVRPTXPkt.setStatus('current')
if mibBuilder.loadTexts: hwVLANMibSwitchGVRPTXPkt.setDescription('Number of GVRP frames transmitted.')
hwVLANMibSwitchDiscardedPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 2, 15, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVLANMibSwitchDiscardedPkt.setStatus('current')
if mibBuilder.loadTexts: hwVLANMibSwitchDiscardedPkt.setDescription('Number of discarded frames.')
hwVLANMibSwitchGarpStatClear = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 2, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVLANMibSwitchGarpStatClear.setStatus('current')
if mibBuilder.loadTexts: hwVLANMibSwitchGarpStatClear.setDescription('Clear various Statistics viz. read operation not supported.')
hwvLANMibHoldTimeTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 2, 16), )
if mibBuilder.loadTexts: hwvLANMibHoldTimeTable.setStatus('current')
if mibBuilder.loadTexts: hwvLANMibHoldTimeTable.setDescription('A table for setting/getting the Hold Time for a particular port.')
hwvLANMibHoldTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 2, 16, 1), )
ifEntry.registerAugmentions(("A3COM-HUAWEI-LswVLAN-MIB", "hwvLANMibHoldTimeEntry"))
hwvLANMibHoldTimeEntry.setIndexNames(*ifEntry.getIndexNames())
if mibBuilder.loadTexts: hwvLANMibHoldTimeEntry.setStatus('current')
if mibBuilder.loadTexts: hwvLANMibHoldTimeEntry.setDescription('A table for setting/getting the HoldTime of the port.')
hwVLANMibHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 2, 23, 1, 2, 2, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 32765)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwVLANMibHoldTime.setStatus('current')
if mibBuilder.loadTexts: hwVLANMibHoldTime.setDescription('HoldTime of the port.')
mibBuilder.exportSymbols("A3COM-HUAWEI-LswVLAN-MIB", hwdot1qVlanTaggedPorts=hwdot1qVlanTaggedPorts, hwvLANMibSwitchCountTable=hwvLANMibSwitchCountTable, hwInterfaceRowStatus=hwInterfaceRowStatus, hwifIsolatePrimaryVlanID=hwifIsolatePrimaryVlanID, hwdot1qVlanBatchOperIndex=hwdot1qVlanBatchOperIndex, hwifSuperVlanMappingTable=hwifSuperVlanMappingTable, hwifIsolateSecondaryVlanlistHigh=hwifIsolateSecondaryVlanlistHigh, hwLswVlanProtoObject=hwLswVlanProtoObject, hwdot1qVlanPorts=hwdot1qVlanPorts, hwdot1qVlanIpAddress=hwdot1qVlanIpAddress, hwifSubVlanlistLow=hwifSubVlanlistLow, hwdot1qVlanBatchRowStatus=hwdot1qVlanBatchRowStatus, hwdot1qVlanBcastSuppressionPPS=hwdot1qVlanBcastSuppressionPPS, hwVlanInterfaceEntry=hwVlanInterfaceEntry, hwVLANMibGarpLeaveAllTime=hwVLANMibGarpLeaveAllTime, hwdot1qVlanCreationTime=hwdot1qVlanCreationTime, hwdot1qVlanMulticast=hwdot1qVlanMulticast, hwdot1qVlanMIBTable=hwdot1qVlanMIBTable, hwdot1qVlanBatchSetOperate=hwdot1qVlanBatchSetOperate, hwifSuperVlanID=hwifSuperVlanID, hwifSubVlanlistHigh=hwifSubVlanlistHigh, hwdot1qVlanPortIndexs=hwdot1qVlanPortIndexs, hwVlanInterfaceIpMask=hwVlanInterfaceIpMask, hwdot1qVlanBatchEndIndex=hwdot1qVlanBatchEndIndex, hwvLANMibSwitchCountEntry=hwvLANMibSwitchCountEntry, PYSNMP_MODULE_ID=hwLswVlan, hwdot1qVlanIndex=hwdot1qVlanIndex, hwdot1qVlanMacLearn=hwdot1qVlanMacLearn, hwVlanInterfaceIpType=hwVlanInterfaceIpType, hwVLANMibSwitchGMRPTXPkt=hwVLANMibSwitchGMRPTXPkt, hwVlanInterfaceIpIfIndex=hwVlanInterfaceIpIfIndex, hwdot1qVlanStatus=hwdot1qVlanStatus, hwdot1qVlanType=hwdot1qVlanType, hwVLANMibSwitchGMRPRXPkt=hwVLANMibSwitchGMRPRXPkt, hwdot1qVlanID=hwdot1qVlanID, hwVlanInterfaceTable=hwVlanInterfaceTable, hwVLANMibHoldTime=hwVLANMibHoldTime, hwVLANMibSwitchGarpStatClear=hwVLANMibSwitchGarpStatClear, hwdot1qVlanBatchMIBTable=hwdot1qVlanBatchMIBTable, hwdot1qVlanRowStatus=hwdot1qVlanRowStatus, hwDot1qVlanBatchMIBEntry=hwDot1qVlanBatchMIBEntry, hwLswVlan=hwLswVlan, hwdot1qVlanMcastUnknownProtos=hwdot1qVlanMcastUnknownProtos, hwdot1qVlanUntaggedPorts=hwdot1qVlanUntaggedPorts, hwdot1qVlanMacFilter=hwdot1qVlanMacFilter, hwifIsolateMappingTable=hwifIsolateMappingTable, hwifSuperVlanMappingEntry=hwifSuperVlanMappingEntry, hwdot1qVlanMIBEntry=hwdot1qVlanMIBEntry, hwdot1qVlanName=hwdot1qVlanName, hwifIsolateMappingEntry=hwifIsolateMappingEntry, hwVlanInterfaceIpAddr=hwVlanInterfaceIpAddr, hwVLANMibSwitchGVRPTXPkt=hwVLANMibSwitchGVRPTXPkt, hwdot1qVlanPriority=hwdot1qVlanPriority, hwifIsolateSecondaryVlanlistLow=hwifIsolateSecondaryVlanlistLow, hwLswVlanMngObject=hwLswVlanMngObject, hwVlanInterfaceIpRowStatus=hwVlanInterfaceIpRowStatus, hwVlanInterfaceIpMethod=hwVlanInterfaceIpMethod, hwVlanInterfaceID=hwVlanInterfaceID, hwExistInterface=hwExistInterface, hwdot1qVlanBatchOperStatus=hwdot1qVlanBatchOperStatus, HwVlanIndex=HwVlanIndex, hwVlanInterfaceAddrTable=hwVlanInterfaceAddrTable, hwVLANMibSwitchGVRPRXPkt=hwVLANMibSwitchGVRPRXPkt, hwVlanInterfaceAdminStatus=hwVlanInterfaceAdminStatus, hwdot1qVlanIpAddressMask=hwdot1qVlanIpAddressMask, hwdot1qVlanBatchStartIndex=hwdot1qVlanBatchStartIndex, hwvLANMibHoldTimeTable=hwvLANMibHoldTimeTable, hwvLANMibHoldTimeEntry=hwvLANMibHoldTimeEntry, hwVlanInterfaceFrameType=hwVlanInterfaceFrameType, hwVlanInterfaceIndex=hwVlanInterfaceIndex, hwVLANMibSwitchDiscardedPkt=hwVLANMibSwitchDiscardedPkt, hwVlanInterfaceAddrEntry=hwVlanInterfaceAddrEntry, hwdot1qVlanBroadcastSuppression=hwdot1qVlanBroadcastSuppression, hwVlanInterfaceIfIndex=hwVlanInterfaceIfIndex)
