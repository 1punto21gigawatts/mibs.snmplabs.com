#
# PySNMP MIB module MICOM-WAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MICOM-WAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:12:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
micom_oscar, = mibBuilder.importSymbols("MICOM-OSCAR-MIB", "micom-oscar")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Bits, Counter64, Integer32, NotificationType, IpAddress, Unsigned32, TimeTicks, Gauge32, ModuleIdentity, Counter32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Bits", "Counter64", "Integer32", "NotificationType", "IpAddress", "Unsigned32", "TimeTicks", "Gauge32", "ModuleIdentity", "Counter32", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
micom_wan = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 2)).setLabel("micom-wan")
wan_configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1)).setLabel("wan-configuration")
wan_statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 2)).setLabel("wan-statistics")
wan_control = MibIdentifier((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 3)).setLabel("wan-control")
wanifTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 1), )
if mibBuilder.loadTexts: wanifTable.setStatus('mandatory')
if mibBuilder.loadTexts: wanifTable.setDescription('NAME = ; DESC = The WAN interface Table; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
wanifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 1, 1), ).setIndexNames((0, "MICOM-WAN-MIB", "wanifIndex"))
if mibBuilder.loadTexts: wanifEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wanifEntry.setDescription('NAME = ; DESC = WAN inteface entry object; HELP = ; CAPABILITIES = ;')
wanifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wanifIndex.setDescription('NAME = ; DESC = IfIndex value for WAN port; HELP = Same as corresponding ifIndex value in \\ ifTable; CAPABILITIES = ;')
wanifType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("none", 1), ("rs232", 2), ("v35", 5), ("x21", 6), ("v36", 7), ("csu-dsu", 8), ("isdn-BRI", 9), ("t1csu", 10), ("e1csu", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifType.setStatus('mandatory')
if mibBuilder.loadTexts: wanifType.setDescription('NAME = ; DESC = Signalling characteristics for WAN interface; HELP = ; CAPABILITIES = ;')
wanifMode = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dce", 1), ("dte", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifMode.setStatus('mandatory')
if mibBuilder.loadTexts: wanifMode.setDescription('NAME = ; DESC = Determines whether the access device \\ receives or transmits clocking signals; HELP = ; CAPABILITIES = ;')
wanifBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 1920000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifBaudRate.setStatus('mandatory')
if mibBuilder.loadTexts: wanifBaudRate.setDescription("NAME = ; DESC = WAN port clocking speed in bits per second \\ R'qd for DCE, optn'l for DTE.; HELP = Wan link speed. This parameter is not\\ valid if DTE option is selected for \\ wanifMode object; CAPABILITIES = ;")
wanifMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifMaxFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: wanifMaxFrameSize.setDescription('NAME = ; DESC = Max rcvd frame size allowed at interface; HELP = ; CAPABILITIES = ;')
wanifProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("hdlc", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifProtocolType.setStatus('mandatory')
if mibBuilder.loadTexts: wanifProtocolType.setDescription('NAME = ; DESC = Link protocol type; HELP = ; CAPABILITIES = ;')
wanifControlLineOn = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifControlLineOn.setStatus('obsolete')
if mibBuilder.loadTexts: wanifControlLineOn.setDescription('NAME = ; DESC = *** NOTE THIS OBJECT IS OBSOLETE *** \\ Determines whether the control lines are \\ driven/monitored; HELP = ; CAPABILITIES = ;')
wanifNumRxBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifNumRxBuffers.setStatus('mandatory')
if mibBuilder.loadTexts: wanifNumRxBuffers.setDescription('NAME = ; DESC = Number of configured receive buffers; HELP = ; CAPABILITIES = ;')
wanifRxFragQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifRxFragQueueSize.setStatus('mandatory')
if mibBuilder.loadTexts: wanifRxFragQueueSize.setDescription('NAME = ; DESC = The size (in frames) of Frag receive \\ queue (one queue per priority); HELP = ; CAPABILITIES = ;')
wanifTxFragQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifTxFragQueueSize.setStatus('mandatory')
if mibBuilder.loadTexts: wanifTxFragQueueSize.setDescription('NAME = ; DESC = The size (in frames) of Frag transmit \\ (one queue per priority); HELP = ; CAPABILITIES = ;')
wanifFragFragmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(80, 8192))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifFragFragmentSize.setStatus('obsolete')
if mibBuilder.loadTexts: wanifFragFragmentSize.setDescription('NAME = ; DESC = *** NOTE THIS OBJECT IS OBSOLETE ***\\ Size of MFP fragments in bytes; HELP = ; CAPABILITIES = ;')
wanifRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifRowStatus.setStatus('obsolete')
if mibBuilder.loadTexts: wanifRowStatus.setDescription('NAME = ; DESC = *** NOTE THIS OBJECT IS OBSOLETE ***\\ Row status for WAN interface; HELP = ; CAPABILITIES = ;')
wanifLim = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("limA", 1), ("lim1", 2), ("lim2", 3), ("lim3", 4), ("lim4", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifLim.setStatus('mandatory')
if mibBuilder.loadTexts: wanifLim.setDescription('NAME = ; DESC = The lim (logical interface module) number \\ of this WAN port (operational); HELP = ; CAPABILITIES = ;')
wanifChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifChannel.setStatus('mandatory')
if mibBuilder.loadTexts: wanifChannel.setDescription('NAME = ; DESC = The channel number of this WAN port. \\ (SCC number); HELP = ; CAPABILITIES = ;')
wanifProtocolSupType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("standardFr", 2), ("switchingFr", 3), ("htds", 4), ("cbr", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifProtocolSupType.setStatus('mandatory')
if mibBuilder.loadTexts: wanifProtocolSupType.setDescription('NAME = ; DESC = The protocol supported on this interface. ; HELP = ; CAPABILITIES = ;')
wanifTDSCutThru = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifTDSCutThru.setStatus('mandatory')
if mibBuilder.loadTexts: wanifTDSCutThru.setDescription('NAME = ; DESC = Fragmenting enabled/disabled. This parameter \\ only valid for HTDS protocol.; HELP = ; CAPABILITIES = ;')
wanifTDSFragSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifTDSFragSize.setStatus('mandatory')
if mibBuilder.loadTexts: wanifTDSFragSize.setDescription('NAME = ; DESC = TDS cutThru computed fragment/buffer size. \\ This parameter only valid for HTDS protocol.; HELP = ; CAPABILITIES = ;')
wanifTDSIdleChar = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifTDSIdleChar.setStatus('mandatory')
if mibBuilder.loadTexts: wanifTDSIdleChar.setDescription('NAME = ; DESC = The idle character required for \\ Constant Bit Rate transfer.; HELP = ; CAPABILITIES = ;')
wanifTDSSyncChar = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifTDSSyncChar.setStatus('mandatory')
if mibBuilder.loadTexts: wanifTDSSyncChar.setDescription('NAME = ; DESC = The 8 bit Syncronization character \\ required by the Constant Bit Rate (CBR) \\ transfer method.; HELP = ; CAPABILITIES = ;')
wanifEncodeMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nrz", 1), ("nrzi-mark", 2), ("nrzi-space", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifEncodeMethod.setStatus('mandatory')
if mibBuilder.loadTexts: wanifEncodeMethod.setDescription('NAME = ; DESC = The value of this object indicates the \\ port transmit/receive data encoding \\ method.; HELP = ; CAPABILITIES = ;')
nvmWanifTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 2), )
if mibBuilder.loadTexts: nvmWanifTable.setStatus('mandatory')
if mibBuilder.loadTexts: nvmWanifTable.setDescription('NAME = ; DESC = The WAN interface Table; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
nvmWanifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 2, 1), ).setIndexNames((0, "MICOM-WAN-MIB", "nvmWanifIndex"))
if mibBuilder.loadTexts: nvmWanifEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nvmWanifEntry.setDescription('NAME = ; DESC = WAN inteface entry object; HELP = ; CAPABILITIES = ;')
nvmWanifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmWanifIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nvmWanifIndex.setDescription('NAME = ; DESC = IfIndex value for WAN port; HELP = Same as corresponding ifIndex value in \\ ifTable; CAPABILITIES = ;')
nvmWanifType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("none", 1), ("rs232", 2), ("v35", 5), ("x21", 6), ("v36", 7), ("csu-dsu", 8), ("isdn-BRI", 9), ("t1csu", 10), ("e1csu", 11))).clone('v35')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmWanifType.setStatus('mandatory')
if mibBuilder.loadTexts: nvmWanifType.setDescription('NAME = ; DESC = Signalling characteristics for WAN interface; HELP = ; CAPABILITIES = ;')
nvmWanifMode = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dce", 1), ("dte", 2))).clone('dce')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmWanifMode.setStatus('mandatory')
if mibBuilder.loadTexts: nvmWanifMode.setDescription('NAME = ; DESC = Determines whether the access device \\ receives or transmits clocking signals; HELP = ; CAPABILITIES = ;')
nvmWanifBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 1920000)).clone(65536)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmWanifBaudRate.setStatus('mandatory')
if mibBuilder.loadTexts: nvmWanifBaudRate.setDescription("NAME = ; DESC = WAN port clocking speed in bits per second \\ R'qd for DCE, optn'l for DTE.; HELP = Wan link speed. This parameter is not \\ valid if DTE option is selected for \\ nvmWanifMode object; CAPABILITIES = ;")
nvmWanifMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192)).clone(4000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmWanifMaxFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: nvmWanifMaxFrameSize.setDescription('NAME = ; DESC = Max rcvd frame size allowed at interface; HELP = ; CAPABILITIES = ;')
nvmWanifProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("hdlc", 1))).clone('hdlc')).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmWanifProtocolType.setStatus('mandatory')
if mibBuilder.loadTexts: nvmWanifProtocolType.setDescription('NAME = ; DESC = Link protocol type; HELP = ; CAPABILITIES = ;')
nvmWanifControlLineOn = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmWanifControlLineOn.setStatus('obsolete')
if mibBuilder.loadTexts: nvmWanifControlLineOn.setDescription('NAME = ; DESC = *** NOTE THIS OBJECT IS OBSOLETE ***\\ Determines whether the control lines are \\ driven/monitored; HELP = ; CAPABILITIES = ;')
nvmWanifNumRxBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 255)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmWanifNumRxBuffers.setStatus('mandatory')
if mibBuilder.loadTexts: nvmWanifNumRxBuffers.setDescription('NAME = ; DESC = Number of configured receive buffers; HELP = ; CAPABILITIES = ;')
nvmWanifRxFragQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 255)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmWanifRxFragQueueSize.setStatus('mandatory')
if mibBuilder.loadTexts: nvmWanifRxFragQueueSize.setDescription('NAME = ; DESC = The size (in frames) of Frag receive \\ queue (one queue per priority); HELP = ; CAPABILITIES = ;')
nvmWanifTxFragQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmWanifTxFragQueueSize.setStatus('mandatory')
if mibBuilder.loadTexts: nvmWanifTxFragQueueSize.setDescription('NAME = ; DESC = The size (in frames) of Frag transmit \\ (one queue per priority). \\ Note that the minumum range value \\ is 10 when managing the 2.0 Release \\ of the access device. ; HELP = ; CAPABILITIES = ;')
nvmWanifFragFragmentSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(80, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmWanifFragFragmentSize.setStatus('obsolete')
if mibBuilder.loadTexts: nvmWanifFragFragmentSize.setDescription('NAME = ; DESC = *** NOTE THIS OBJECT IS OBSOLETE ***\\ Size of MFP fragments in bytes; HELP = ; CAPABILITIES = ;')
nvmWanifRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmWanifRowStatus.setStatus('obsolete')
if mibBuilder.loadTexts: nvmWanifRowStatus.setDescription('NAME = ; DESC = *** NOTE THIS OBJECT IS OBSOLETE ***\\ Row status for WAN interface; HELP = ; CAPABILITIES = ;')
nvmWanifLim = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("limA", 1), ("lim1", 2), ("lim2", 3), ("lim3", 4), ("lim4", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmWanifLim.setStatus('mandatory')
if mibBuilder.loadTexts: nvmWanifLim.setDescription('NAME = ; DESC = The lim (logical interface module) number \\ of this WAN port (configuration); HELP = ; CAPABILITIES = ;')
nvmWanifChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmWanifChannel.setStatus('mandatory')
if mibBuilder.loadTexts: nvmWanifChannel.setDescription('NAME = ; DESC = The channel number of this WAN port. \\ (SCC number); HELP = ; CAPABILITIES = ;')
nvmWanifProtocolSupType = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("standardFr", 2), ("switchingFr", 3), ("htds", 4), ("cbr", 5))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmWanifProtocolSupType.setStatus('mandatory')
if mibBuilder.loadTexts: nvmWanifProtocolSupType.setDescription('NAME = ; DESC = The protocol supported on this interface. ; HELP = ; CAPABILITIES = ;')
nvmWanifTDSCutThru = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmWanifTDSCutThru.setStatus('mandatory')
if mibBuilder.loadTexts: nvmWanifTDSCutThru.setDescription('NAME = ; DESC = Fragmenting enabled/disabled. This parameter \\ only valid for HTDS protocol.; HELP = ; CAPABILITIES = ;')
nvmWanifTDSFragSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmWanifTDSFragSize.setStatus('mandatory')
if mibBuilder.loadTexts: nvmWanifTDSFragSize.setDescription('NAME = ; DESC = TDS cutThru computed fragment/buffer size. \\ This parameter only valid for HTDS protocol.; HELP = ; CAPABILITIES = ;')
nvmWanifTDSIdleChar = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmWanifTDSIdleChar.setStatus('mandatory')
if mibBuilder.loadTexts: nvmWanifTDSIdleChar.setDescription('NAME = ; DESC = The idle character required by \\ the Constant Bit Rate (CBR) \\ transfer method.; HELP = ; CAPABILITIES = ;')
nvmWanifTDSSyncChar = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(126)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmWanifTDSSyncChar.setStatus('mandatory')
if mibBuilder.loadTexts: nvmWanifTDSSyncChar.setDescription('NAME = ; DESC = The 8 bit Syncronization character \\ required by the Constant Bit Rate (CBR) \\ transfer method.; HELP = ; CAPABILITIES = ;')
nvmWanifEncodeMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nrz", 1), ("nrzi-mark", 2), ("nrzi-space", 3))).clone('nrz')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmWanifEncodeMethod.setStatus('mandatory')
if mibBuilder.loadTexts: nvmWanifEncodeMethod.setDescription('NAME = ; DESC = The value of this object indicates the \\ port transmit/receive data encoding \\ method.; HELP = ; CAPABILITIES = ;')
wanDTEPortTunnelPvcTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 3), )
if mibBuilder.loadTexts: wanDTEPortTunnelPvcTable.setStatus('deprecated')
if mibBuilder.loadTexts: wanDTEPortTunnelPvcTable.setDescription('NAME = ; DESC = Tunneling PVC DLCI Configuration table; HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
wanDTEPortTunnelPvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 3, 1), ).setIndexNames((0, "MICOM-WAN-MIB", "wanDTEPortTunnelPvcIfIndex"))
if mibBuilder.loadTexts: wanDTEPortTunnelPvcEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wanDTEPortTunnelPvcEntry.setDescription('NAME = ; DESC = WAN DTE port tunneling PVC DLCI Entry; HELP = ; CAPABILITIES = ;')
wanDTEPortTunnelPvcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanDTEPortTunnelPvcIfIndex.setStatus('deprecated')
if mibBuilder.loadTexts: wanDTEPortTunnelPvcIfIndex.setDescription('NAME = ; DESC = Index for the DTE port; HELP = ; CAPABILITIES = ;')
wanDTEPortTunnelPvcDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1007))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanDTEPortTunnelPvcDlci.setStatus('deprecated')
if mibBuilder.loadTexts: wanDTEPortTunnelPvcDlci.setDescription('NAME = ; DESC = The value of this object holds\\ the tunneling PVC DLCI number; HELP = ; CAPABILITIES = ;')
nvmWanDTEPortTunnelPvcTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 4), )
if mibBuilder.loadTexts: nvmWanDTEPortTunnelPvcTable.setStatus('deprecated')
if mibBuilder.loadTexts: nvmWanDTEPortTunnelPvcTable.setDescription('NAME = ; DESC = Tunneling PVC DLCI Configuration table.\\ (configuration); HELP = ; CAPABILITIES = NET_CFG, VPN_CFG;')
nvmWanDTEPortTunnelPvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 4, 1), ).setIndexNames((0, "MICOM-WAN-MIB", "nvmWanDTEPortTunnelPvcIfIndex"))
if mibBuilder.loadTexts: nvmWanDTEPortTunnelPvcEntry.setStatus('deprecated')
if mibBuilder.loadTexts: nvmWanDTEPortTunnelPvcEntry.setDescription('NAME = ; DESC = WAN DTE port tunneling PVC DLCI Entry; HELP = ; CAPABILITIES = ;')
nvmWanDTEPortTunnelPvcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nvmWanDTEPortTunnelPvcIfIndex.setStatus('deprecated')
if mibBuilder.loadTexts: nvmWanDTEPortTunnelPvcIfIndex.setDescription('NAME = ; DESC = Index for the DTE port; HELP = ; CAPABILITIES = ;')
nvmWanDTEPortTunnelPvcDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1007)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nvmWanDTEPortTunnelPvcDlci.setStatus('deprecated')
if mibBuilder.loadTexts: nvmWanDTEPortTunnelPvcDlci.setDescription('NAME = ; DESC = The value of this object is used \\ to configure the tunneling PVC DLCI \\ number.; HELP = ; CAPABILITIES = ;')
wanifGlobalStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 2, 1), )
if mibBuilder.loadTexts: wanifGlobalStatisticsTable.setStatus('mandatory')
if mibBuilder.loadTexts: wanifGlobalStatisticsTable.setDescription('NAME = ; DESC = WAN Global Statistics Table; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
wanifGlobalStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 2, 1, 1), ).setIndexNames((0, "MICOM-WAN-MIB", "wanifGlobalStatisticsIndex"))
if mibBuilder.loadTexts: wanifGlobalStatisticsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wanifGlobalStatisticsEntry.setDescription('NAME = ; DESC = WAN Global Statistics Entry; HELP = ; CAPABILITIES = ;')
wanifGlobalStatisticsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifGlobalStatisticsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wanifGlobalStatisticsIndex.setDescription('NAME = ; DESC = Same as corresponding ifIndex value \\ in ifTable; HELP = ; CAPABILITIES = ;')
wanifGlobalStatisticsRxBlockCount = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifGlobalStatisticsRxBlockCount.setStatus('mandatory')
if mibBuilder.loadTexts: wanifGlobalStatisticsRxBlockCount.setDescription('NAME = ; DESC = Number of frames rcvd from WAN; HELP = ; CAPABILITIES = ;')
wanifGlobalStatisticsTxBlockCount = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifGlobalStatisticsTxBlockCount.setStatus('mandatory')
if mibBuilder.loadTexts: wanifGlobalStatisticsTxBlockCount.setDescription('NAME = ; DESC = Number of frames txd to WAN; HELP = ; CAPABILITIES = ;')
wanifGlobalStatisticsTxLinkUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifGlobalStatisticsTxLinkUnderruns.setStatus('mandatory')
if mibBuilder.loadTexts: wanifGlobalStatisticsTxLinkUnderruns.setDescription('NAME = ; DESC = Number of SCC reported link underruns; HELP = ; CAPABILITIES = ;')
wanifGlobalStatisticsTxLinkOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifGlobalStatisticsTxLinkOverflows.setStatus('mandatory')
if mibBuilder.loadTexts: wanifGlobalStatisticsTxLinkOverflows.setDescription('NAME = ; DESC = Number of SCC reported link overflows; HELP = ; CAPABILITIES = ;')
wanifGlobalStatisticsRxDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifGlobalStatisticsRxDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: wanifGlobalStatisticsRxDiscards.setDescription('NAME = ; DESC = Number of HDLC packets discarded by SCC; HELP = ; CAPABILITIES = ;')
wanifGlobalStatisticsTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifGlobalStatisticsTxErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wanifGlobalStatisticsTxErrors.setDescription('NAME = ; DESC = Number of times CTS went down while pkt \\ was being txd OR a link underrun occured; HELP = ; CAPABILITIES = ;')
wanifFragStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 2, 2), )
if mibBuilder.loadTexts: wanifFragStatisticsTable.setStatus('obsolete')
if mibBuilder.loadTexts: wanifFragStatisticsTable.setDescription('NAME = ; DESC = WAN Frag Statistics Table; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
wanifFragStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 2, 2, 1), ).setIndexNames((0, "MICOM-WAN-MIB", "wanifFragStatisticsIndex"), (0, "MICOM-WAN-MIB", "wanifFragStatisticsFragPriority"))
if mibBuilder.loadTexts: wanifFragStatisticsEntry.setStatus('obsolete')
if mibBuilder.loadTexts: wanifFragStatisticsEntry.setDescription('NAME = ; DESC = WAN Frag Statistics Entry; HELP = ; CAPABILITIES = ;')
wanifFragStatisticsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifFragStatisticsIndex.setStatus('obsolete')
if mibBuilder.loadTexts: wanifFragStatisticsIndex.setDescription('NAME = ; DESC = WAN Frag Ifindex; HELP = ; CAPABILITIES = ;')
wanifFragStatisticsFragPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifFragStatisticsFragPriority.setStatus('obsolete')
if mibBuilder.loadTexts: wanifFragStatisticsFragPriority.setDescription('NAME = ; DESC = Traffic class emission priority \\ 1 voice, 2 NMS and NAS, 3 signalling \\ 4 LAN data; HELP = ; CAPABILITIES = ;')
wanifFragStatisticsRxFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifFragStatisticsRxFrameCount.setStatus('obsolete')
if mibBuilder.loadTexts: wanifFragStatisticsRxFrameCount.setDescription('NAME = ; DESC = Number of frames rcvd from WAN for \\ individual traffic class; HELP = ; CAPABILITIES = ;')
wanifFragStatisticsTxFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifFragStatisticsTxFrameCount.setStatus('obsolete')
if mibBuilder.loadTexts: wanifFragStatisticsTxFrameCount.setDescription('NAME = ; DESC = Number of frames txd to WAN for \\ individual traffic class; HELP = ; CAPABILITIES = ;')
wanifFragStatisticsRxFragmentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifFragStatisticsRxFragmentCount.setStatus('obsolete')
if mibBuilder.loadTexts: wanifFragStatisticsRxFragmentCount.setDescription('NAME = ; DESC = Number of pkts rcvd from WAN including \\ all fragments for one traffic class; HELP = ; CAPABILITIES = ;')
wanifFragStatisticsTxFragmentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifFragStatisticsTxFragmentCount.setStatus('obsolete')
if mibBuilder.loadTexts: wanifFragStatisticsTxFragmentCount.setDescription('NAME = ; DESC = Number of pkts txd to WAN including \\ all fragments for one traffic class; HELP = ; CAPABILITIES = ;')
wanifFragStatisticsTxFragQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifFragStatisticsTxFragQueueSize.setStatus('obsolete')
if mibBuilder.loadTexts: wanifFragStatisticsTxFragQueueSize.setDescription('NAME = ; DESC = Dynamic counter which indicates whether \\ the Frag queue has any pkts backlogged; HELP = ; CAPABILITIES = ;')
wanifVofrStatsTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 2, 3), )
if mibBuilder.loadTexts: wanifVofrStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: wanifVofrStatsTable.setDescription('NAME = ; DESC = WAN Vofr Statistics Table; HELP = ; CAPABILITIES = NET_DISP, VPN_DISP;')
wanifVofrStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 2, 3, 1), ).setIndexNames((0, "MICOM-WAN-MIB", "wanifVofrStatsIndex"))
if mibBuilder.loadTexts: wanifVofrStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wanifVofrStatsEntry.setDescription('NAME = ; DESC = WAN Vofr Statistics Entry; HELP = ; CAPABILITIES = ;')
wanifVofrStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifVofrStatsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wanifVofrStatsIndex.setDescription('NAME = ; DESC = WAN Vofr Ifindex; HELP = ; CAPABILITIES = ;')
wanifVofrStatsFragHighPriFramesCount = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifVofrStatsFragHighPriFramesCount.setStatus('mandatory')
if mibBuilder.loadTexts: wanifVofrStatsFragHighPriFramesCount.setDescription('NAME = ; DESC = This attribute counts egress frames with the \\ highest priority, which had to be fragmented \\ because they were larger than maximumFrameSize. \\ This could happen when a data call is setup to \\ use the highest emission priority, or the access \\ device is provisioned with too low maximum \\ frame size.; HELP = ; CAPABILITIES = ;')
wanifVofrStatsFragToIfCount = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifVofrStatsFragToIfCount.setStatus('mandatory')
if mibBuilder.loadTexts: wanifVofrStatsFragToIfCount.setDescription('NAME = ; DESC = This attribute counts VoFr fragmentation actions \\ applied to egress frames which were too long \\ to fit in the next link frame.; HELP = ; CAPABILITIES = ;')
wanifVofrStatsPackingToIfCount = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifVofrStatsPackingToIfCount.setStatus('mandatory')
if mibBuilder.loadTexts: wanifVofrStatsPackingToIfCount.setDescription('NAME = ; DESC = This attribute counts number of fragments \\ which were packaged with other frames or \\ fragments into a VoFr frame in the egress \\ direction.; HELP = ; CAPABILITIES = ;')
wanifVofrStatsFragsFromIfCount = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifVofrStatsFragsFromIfCount.setStatus('mandatory')
if mibBuilder.loadTexts: wanifVofrStatsFragsFromIfCount.setDescription("NAME = ; DESC = This attribute counts VoFr fragments received \\ from the interface which were assembled into \\ larger frames.' HELP = ; CAPABILITIES = ;")
wanifVofrStatsLostFragsFromIfCount = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifVofrStatsLostFragsFromIfCount.setStatus('mandatory')
if mibBuilder.loadTexts: wanifVofrStatsLostFragsFromIfCount.setDescription('NAME = ; DESC = This attribute counts lost VoFr fragments from \\ the interface. Presence of lost fragments indicated \\ a link problem. Note that lost whole frames cannot \\ detected.; HELP = ; CAPABILITIES = ;')
wanifVofrStatsProtViolationsFromIfCount = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifVofrStatsProtViolationsFromIfCount.setStatus('mandatory')
if mibBuilder.loadTexts: wanifVofrStatsProtViolationsFromIfCount.setDescription('NAME = ; DESC = This attribute counts VoFr protocol violations \\ detected in the data from the interface.; HELP = ; CAPABILITIES = ;')
wanifCounterGlobalTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 3, 1), )
if mibBuilder.loadTexts: wanifCounterGlobalTable.setStatus('obsolete')
if mibBuilder.loadTexts: wanifCounterGlobalTable.setDescription('NAME = ; DESC = This table is used to reset counters \\ in the WAN Statistics Global Tables; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
wanifCounterGlobalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 3, 1, 1), ).setIndexNames((0, "MICOM-WAN-MIB", "wanifCounterGlobalPortId"))
if mibBuilder.loadTexts: wanifCounterGlobalEntry.setStatus('obsolete')
if mibBuilder.loadTexts: wanifCounterGlobalEntry.setDescription('NAME = ; DESC = This specifies an entry indexed \\ by portId; HELP = ; CAPABILITIES = ;')
wanifCounterGlobalPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifCounterGlobalPortId.setStatus('obsolete')
if mibBuilder.loadTexts: wanifCounterGlobalPortId.setDescription('NAME = ; DESC = WAN Port ID for global counter reset; HELP = ; CAPABILITIES = ;')
wanifCounterGlobalStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("other", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: wanifCounterGlobalStatistics.setStatus('obsolete')
if mibBuilder.loadTexts: wanifCounterGlobalStatistics.setDescription('NAME = ; DESC = When set to reset, GlobalStatistics \\ counters should be zeroed out; HELP = ; CAPABILITIES = ;')
wanifCounterFragTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 3, 2), )
if mibBuilder.loadTexts: wanifCounterFragTable.setStatus('obsolete')
if mibBuilder.loadTexts: wanifCounterFragTable.setDescription('NAME = ; DESC = This table is used to reset counters \\ in the WAN Statistics Frag Tables; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
wanifCounterFragEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 3, 2, 1), ).setIndexNames((0, "MICOM-WAN-MIB", "wanifCounterFragPortId"), (0, "MICOM-WAN-MIB", "wanifCounterFragProtocol"))
if mibBuilder.loadTexts: wanifCounterFragEntry.setStatus('obsolete')
if mibBuilder.loadTexts: wanifCounterFragEntry.setDescription('NAME = ; DESC = This specifies an entry indexed \\ by portId; HELP = ; CAPABILITIES = ;')
wanifCounterFragPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifCounterFragPortId.setStatus('obsolete')
if mibBuilder.loadTexts: wanifCounterFragPortId.setDescription('NAME = ; DESC = WAN port id for counter reset; HELP = ; CAPABILITIES = ;')
wanifCounterFragProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifCounterFragProtocol.setStatus('obsolete')
if mibBuilder.loadTexts: wanifCounterFragProtocol.setDescription('NAME = ; DESC = Traffic class emission priority \\ 1 voice, 2 NMS and NAS, 3 signalling \\ 4 LAN data; HELP = ; CAPABILITIES = ;')
wanifCounterFragStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("other", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: wanifCounterFragStatistics.setStatus('obsolete')
if mibBuilder.loadTexts: wanifCounterFragStatistics.setDescription('NAME = ; DESC = When set to reset, GlobalStatistics \\ counters should be zeroed out; HELP = ; CAPABILITIES = ;')
wanifVofrCounterTable = MibTable((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 3, 3), )
if mibBuilder.loadTexts: wanifVofrCounterTable.setStatus('obsolete')
if mibBuilder.loadTexts: wanifVofrCounterTable.setDescription('NAME = ; DESC = This table is used to reset counters \\ in the WAN Statistics Vofr Tables; HELP = ; CAPABILITIES = NET_CFG, VPN_DISP;')
wanifVofrCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 3, 3, 1), ).setIndexNames((0, "MICOM-WAN-MIB", "wanifVofrCounterPortId"))
if mibBuilder.loadTexts: wanifVofrCounterEntry.setStatus('obsolete')
if mibBuilder.loadTexts: wanifVofrCounterEntry.setDescription('NAME = ; DESC = This specifies an entry indexed \\ by portId; HELP = ; CAPABILITIES = ;')
wanifVofrCounterPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wanifVofrCounterPortId.setStatus('obsolete')
if mibBuilder.loadTexts: wanifVofrCounterPortId.setDescription('NAME = ; DESC = WAN Port ID for Vofr counter reset; HELP = ; CAPABILITIES = ;')
wanifVofrCounterStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 335, 1, 4, 2, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("other", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: wanifVofrCounterStatistics.setStatus('obsolete')
if mibBuilder.loadTexts: wanifVofrCounterStatistics.setDescription('NAME = ; DESC = When set to reset, Vofr Statistics \\ counters should be zeroed out; HELP = ; CAPABILITIES = ;')
mibBuilder.exportSymbols("MICOM-WAN-MIB", wanifMode=wanifMode, wanifGlobalStatisticsRxDiscards=wanifGlobalStatisticsRxDiscards, wanifNumRxBuffers=wanifNumRxBuffers, nvmWanifTDSFragSize=nvmWanifTDSFragSize, wanifCounterFragProtocol=wanifCounterFragProtocol, wanifVofrStatsIndex=wanifVofrStatsIndex, wan_configuration=wan_configuration, wanifVofrStatsProtViolationsFromIfCount=wanifVofrStatsProtViolationsFromIfCount, wanifCounterGlobalEntry=wanifCounterGlobalEntry, wanifRxFragQueueSize=wanifRxFragQueueSize, wanifIndex=wanifIndex, nvmWanDTEPortTunnelPvcEntry=nvmWanDTEPortTunnelPvcEntry, micom_wan=micom_wan, nvmWanifFragFragmentSize=nvmWanifFragFragmentSize, wanifVofrCounterTable=wanifVofrCounterTable, wanifMaxFrameSize=wanifMaxFrameSize, wanifVofrCounterEntry=wanifVofrCounterEntry, nvmWanifTable=nvmWanifTable, nvmWanifLim=nvmWanifLim, wanifGlobalStatisticsEntry=wanifGlobalStatisticsEntry, nvmWanifBaudRate=nvmWanifBaudRate, nvmWanifTxFragQueueSize=nvmWanifTxFragQueueSize, wanifCounterGlobalPortId=wanifCounterGlobalPortId, nvmWanifIndex=nvmWanifIndex, wanifCounterFragTable=wanifCounterFragTable, nvmWanifEntry=nvmWanifEntry, wanifCounterFragPortId=wanifCounterFragPortId, nvmWanDTEPortTunnelPvcTable=nvmWanDTEPortTunnelPvcTable, nvmWanifType=nvmWanifType, wanifCounterGlobalStatistics=wanifCounterGlobalStatistics, wanDTEPortTunnelPvcDlci=wanDTEPortTunnelPvcDlci, nvmWanifProtocolSupType=nvmWanifProtocolSupType, wanifVofrStatsFragToIfCount=wanifVofrStatsFragToIfCount, wanifCounterGlobalTable=wanifCounterGlobalTable, wanifTDSCutThru=wanifTDSCutThru, wanifVofrStatsTable=wanifVofrStatsTable, wanifEncodeMethod=wanifEncodeMethod, wanifVofrStatsFragHighPriFramesCount=wanifVofrStatsFragHighPriFramesCount, nvmWanDTEPortTunnelPvcIfIndex=nvmWanDTEPortTunnelPvcIfIndex, wanifFragStatisticsTxFrameCount=wanifFragStatisticsTxFrameCount, wanifVofrStatsFragsFromIfCount=wanifVofrStatsFragsFromIfCount, wan_statistics=wan_statistics, wanifTDSSyncChar=wanifTDSSyncChar, nvmWanifTDSCutThru=nvmWanifTDSCutThru, wanifFragStatisticsFragPriority=wanifFragStatisticsFragPriority, nvmWanifMode=nvmWanifMode, wanifFragStatisticsEntry=wanifFragStatisticsEntry, nvmWanifTDSIdleChar=nvmWanifTDSIdleChar, nvmWanifRxFragQueueSize=nvmWanifRxFragQueueSize, wanifCounterFragStatistics=wanifCounterFragStatistics, wanifFragStatisticsRxFrameCount=wanifFragStatisticsRxFrameCount, wanifTDSFragSize=wanifTDSFragSize, wanifVofrCounterStatistics=wanifVofrCounterStatistics, wanifTxFragQueueSize=wanifTxFragQueueSize, wanifFragStatisticsTable=wanifFragStatisticsTable, wan_control=wan_control, wanifTDSIdleChar=wanifTDSIdleChar, nvmWanifTDSSyncChar=nvmWanifTDSSyncChar, wanifRowStatus=wanifRowStatus, wanifChannel=wanifChannel, wanifLim=wanifLim, nvmWanifProtocolType=nvmWanifProtocolType, wanifGlobalStatisticsTxLinkUnderruns=wanifGlobalStatisticsTxLinkUnderruns, nvmWanDTEPortTunnelPvcDlci=nvmWanDTEPortTunnelPvcDlci, wanifVofrStatsLostFragsFromIfCount=wanifVofrStatsLostFragsFromIfCount, wanifFragFragmentSize=wanifFragFragmentSize, wanDTEPortTunnelPvcTable=wanDTEPortTunnelPvcTable, wanifControlLineOn=wanifControlLineOn, nvmWanifMaxFrameSize=nvmWanifMaxFrameSize, nvmWanifNumRxBuffers=nvmWanifNumRxBuffers, wanifGlobalStatisticsRxBlockCount=wanifGlobalStatisticsRxBlockCount, nvmWanifRowStatus=nvmWanifRowStatus, nvmWanifControlLineOn=nvmWanifControlLineOn, wanifGlobalStatisticsTable=wanifGlobalStatisticsTable, wanifProtocolSupType=wanifProtocolSupType, wanifVofrCounterPortId=wanifVofrCounterPortId, nvmWanifEncodeMethod=nvmWanifEncodeMethod, wanifFragStatisticsIndex=wanifFragStatisticsIndex, wanifType=wanifType, wanifVofrStatsPackingToIfCount=wanifVofrStatsPackingToIfCount, wanifGlobalStatisticsIndex=wanifGlobalStatisticsIndex, wanDTEPortTunnelPvcIfIndex=wanDTEPortTunnelPvcIfIndex, wanifVofrStatsEntry=wanifVofrStatsEntry, wanifProtocolType=wanifProtocolType, wanifTable=wanifTable, wanifCounterFragEntry=wanifCounterFragEntry, wanifGlobalStatisticsTxBlockCount=wanifGlobalStatisticsTxBlockCount, wanifGlobalStatisticsTxLinkOverflows=wanifGlobalStatisticsTxLinkOverflows, wanifBaudRate=wanifBaudRate, wanifEntry=wanifEntry, wanifGlobalStatisticsTxErrors=wanifGlobalStatisticsTxErrors, wanDTEPortTunnelPvcEntry=wanDTEPortTunnelPvcEntry, wanifFragStatisticsRxFragmentCount=wanifFragStatisticsRxFragmentCount, wanifFragStatisticsTxFragQueueSize=wanifFragStatisticsTxFragQueueSize, wanifFragStatisticsTxFragmentCount=wanifFragStatisticsTxFragmentCount, nvmWanifChannel=nvmWanifChannel)
