#
# PySNMP MIB module PANDATEL-FHFLF-MODEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PANDATEL-FHFLF-MODEM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:37:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
device_id, mdmSpecifics = mibBuilder.importSymbols("PANDATEL-MODEM-MIB", "device-id", "mdmSpecifics")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, TimeTicks, Bits, iso, Counter64, NotificationType, Gauge32, Unsigned32, ObjectIdentity, enterprises, MibIdentifier, IpAddress, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "TimeTicks", "Bits", "iso", "Counter64", "NotificationType", "Gauge32", "Unsigned32", "ObjectIdentity", "enterprises", "MibIdentifier", "IpAddress", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
fhflf_modem = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 2, 102)).setLabel("fhflf-modem")
fhflf = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 102))
fhflfModemTable = MibTable((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 102, 1), )
if mibBuilder.loadTexts: fhflfModemTable.setStatus('mandatory')
if mibBuilder.loadTexts: fhflfModemTable.setDescription('This table contains information about all FH/FL-F modems in all racks.')
fhflfTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 102, 1, 1), ).setIndexNames((0, "PANDATEL-FHFLF-MODEM-MIB", "mdmRack"), (0, "PANDATEL-FHFLF-MODEM-MIB", "mdmModem"), (0, "PANDATEL-FHFLF-MODEM-MIB", "mdmPosition"))
if mibBuilder.loadTexts: fhflfTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fhflfTableEntry.setDescription('The index of the table.')
mdmRack = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 102, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmRack.setStatus('mandatory')
if mibBuilder.loadTexts: mdmRack.setDescription('The index of the rack where the modem is installed.')
mdmModem = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 102, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmModem.setStatus('mandatory')
if mibBuilder.loadTexts: mdmModem.setDescription('This entry displays the slot number where the corresponding modem is installed in the rack.')
mdmPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 102, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmPosition.setStatus('mandatory')
if mibBuilder.loadTexts: mdmPosition.setDescription("This entry displays the location of the corresponding modem: 'local' or 'remote'. The modem which is plugged into a managed rack is 'local', the counterpart is 'remote'.")
mdmModemName = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 102, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmModemName.setStatus('mandatory')
if mibBuilder.loadTexts: mdmModemName.setDescription('The verbal name of this modem.')
mdmInterfaceEmulationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 102, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 99))).clone(namedValues=NamedValues(("other", 1), ("dte", 2), ("dce", 3), ("te", 4), ("nt", 5), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmInterfaceEmulationMode.setStatus('mandatory')
if mibBuilder.loadTexts: mdmInterfaceEmulationMode.setDescription("Interface mode of the unit: 'dte', 'dce', 'te' or 'nt'.")
mdmModemProperty = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 102, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 99))).clone(namedValues=NamedValues(("other", 1), ("e1", 2), ("t1", 3), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmModemProperty.setStatus('mandatory')
if mibBuilder.loadTexts: mdmModemProperty.setDescription("This entry displays the speed class of the FH/FL-F: 'e1' or 't1'.")
mdmClockSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 102, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("dual", 2), ("single", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmClockSystem.setStatus('mandatory')
if mibBuilder.loadTexts: mdmClockSystem.setDescription("The clock system of the link: 'dual' or 'single'.")
mdmClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 102, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("internal", 2), ("remote", 3), ("external", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: mdmClockSource.setDescription("The clock source of the link: 'internal', 'external', or 'remote'.")
mdmDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 102, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("other", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDataRate.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDataRate.setDescription("The data rate at the interface in bits per seconds. The data rate at the remote counterpart changes simultaneously. A data rate of 2.048 Mbps (E1) automatically disables CRC4, sets mdmStartTimeslot to 'unframed', enables time slot 16. A data rate of 1.984 Mbps (E1) automatically sets mdmStartTimeslot to 'timeslot-1', enables time slot 16. A data rate of 1.544 Mbps (T1) automatically sets mdmStartTimeslot to 'unframed'.")
mdmStartTimeslot = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 102, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 98, 99, 100))).clone(namedValues=NamedValues(("timeslot-1", 1), ("timeslot-2", 2), ("timeslot-3", 3), ("timeslot-4", 4), ("timeslot-5", 5), ("timeslot-6", 6), ("timeslot-7", 7), ("timeslot-8", 8), ("timeslot-9", 9), ("timeslot-10", 10), ("timeslot-11", 11), ("timeslot-12", 12), ("timeslot-13", 13), ("timeslot-14", 14), ("timeslot-15", 15), ("timeslot-16", 16), ("timeslot-17", 17), ("timeslot-18", 18), ("timeslot-19", 19), ("timeslot-20", 20), ("timeslot-21", 21), ("timeslot-22", 22), ("timeslot-23", 23), ("timeslot-24", 24), ("timeslot-25", 25), ("timeslot-26", 26), ("timeslot-27", 27), ("timeslot-28", 28), ("timeslot-29", 29), ("timeslot-30", 30), ("timeslot-31", 31), ("unframed", 98), ("other", 99), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmStartTimeslot.setStatus('mandatory')
if mibBuilder.loadTexts: mdmStartTimeslot.setDescription("This entry determines the start time slot for framing. Start time slot and data rate must match. A start time slot which is too high will be ignored. The remote unit's configuration changes simultaneously.")
mdmTimeslotSize = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 102, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 100))).clone(namedValues=NamedValues(("other", 1), ("nx64k", 2), ("nx56k", 3), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmTimeslotSize.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTimeslotSize.setDescription("This entry determines the size of the time slots: 'nx64k' or 'nx56k'. 'nx56k' is valid for T1 units only. The remote unit's configuration changes simultaneously.")
mdmTimeslot16 = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 102, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 100))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmTimeslot16.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTimeslot16.setDescription('This entry enables or disables time slot 16. If it is disabled, it will not be used for data transmission but for framing. Valid for E1 units only.')
mdmCRC4Generation = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 102, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 100))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCRC4Generation.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCRC4Generation.setDescription("This entry enables or disables the generation of a CRC4 check sum. The remote unit's configuration changes simultaneously. Valid for E1 units only.")
mdmFramingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 102, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 100))).clone(namedValues=NamedValues(("other", 1), ("d4", 2), ("esf", 3), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmFramingMode.setStatus('mandatory')
if mibBuilder.loadTexts: mdmFramingMode.setDescription("The T1 framing mode: 'd4' or 'esf'. The remote unit's configuration changes simultaneously. Valid for T1 units only.")
mdmLocalCarrierDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 102, 1, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("fo-link-and-remote-handshake", 2), ("fo-link", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmLocalCarrierDetect.setStatus('mandatory')
if mibBuilder.loadTexts: mdmLocalCarrierDetect.setDescription("The data carrier detect mode at the interface: if set to 'fo-link-and-remote-handshake' the DCD signal (resp. I for X.21, etc.) follows link status and remote RTS (resp. C for X.21, etc.), if set to 'fo-link' the DCD signal follows link status only.")
mdmFOPower = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 102, 1, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 99))).clone(namedValues=NamedValues(("other", 1), ("low", 2), ("high", 3), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmFOPower.setStatus('mandatory')
if mibBuilder.loadTexts: mdmFOPower.setDescription('The fiber optic transmit power at the line port')
mdmCRC6Test = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 102, 1, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 100))).clone(namedValues=NamedValues(("other", 1), ("start", 3), ("stop", 4), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCRC6Test.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCRC6Test.setDescription("This entry enables the execution of a CRC6 test. Write requests with values other than 'start' or 'stop' will be rejected. Valid for T1 units only.")
mdmCRC6Status = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 102, 1, 1, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6, 7, 100))).clone(namedValues=NamedValues(("other", 1), ("never-started", 2), ("running", 5), ("stopped", 6), ("start-failed", 7), ("not-available", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCRC6Status.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCRC6Status.setDescription('This entry indicates the status of the CRC6 test. Valid for T1 units only.')
mdmCRC6Error = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 102, 1, 1, 102), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmCRC6Error.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCRC6Error.setDescription('This entry indicates the number of errors detected during the last 60 seconds.')
mibBuilder.exportSymbols("PANDATEL-FHFLF-MODEM-MIB", mdmClockSystem=mdmClockSystem, mdmTimeslotSize=mdmTimeslotSize, mdmCRC6Test=mdmCRC6Test, fhflfModemTable=fhflfModemTable, mdmCRC4Generation=mdmCRC4Generation, mdmFOPower=mdmFOPower, mdmInterfaceEmulationMode=mdmInterfaceEmulationMode, mdmLocalCarrierDetect=mdmLocalCarrierDetect, mdmCRC6Status=mdmCRC6Status, fhflf_modem=fhflf_modem, mdmPosition=mdmPosition, mdmModem=mdmModem, mdmClockSource=mdmClockSource, fhflfTableEntry=fhflfTableEntry, mdmStartTimeslot=mdmStartTimeslot, mdmRack=mdmRack, mdmModemName=mdmModemName, mdmCRC6Error=mdmCRC6Error, mdmTimeslot16=mdmTimeslot16, mdmFramingMode=mdmFramingMode, fhflf=fhflf, mdmModemProperty=mdmModemProperty, mdmDataRate=mdmDataRate)
