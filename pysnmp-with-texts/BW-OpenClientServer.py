#
# PySNMP MIB module BW-OpenClientServer (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BW-OpenClientServer
# Produced by pysmi-0.3.4 at Wed May  1 11:42:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
IpAddress, ModuleIdentity, Counter64, Gauge32, Unsigned32, ObjectIdentity, NotificationType, TimeTicks, MibIdentifier, Integer32, Bits, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ModuleIdentity", "Counter64", "Gauge32", "Unsigned32", "ObjectIdentity", "NotificationType", "TimeTicks", "MibIdentifier", "Integer32", "Bits", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
broadsoft = ModuleIdentity((1, 3, 6, 1, 4, 1, 6431))
broadsoft.setRevisions(('2005-08-16 10:00', '2000-09-19 14:31',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: broadsoft.setRevisionsDescriptions(('Added MIB conformance section.', '',))
if mibBuilder.loadTexts: broadsoft.setLastUpdated('200508161000Z')
if mibBuilder.loadTexts: broadsoft.setOrganization('Broadsoft, Inc')
if mibBuilder.loadTexts: broadsoft.setContactInfo('Broadsoft, Inc 220 Perry Parkway Gaithersburg, MD 20877 301-977-9440')
if mibBuilder.loadTexts: broadsoft.setDescription('This MIB contains the performance measurements related to the BroadWorks Open Client Server.')
broadworks = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1))
openClientServer = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 8))
protocols = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1))
concurrent = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 8, 2))
ocsReserved = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 8, 999))
bwOcsMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1000))
cap = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 1))
oss = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 2))
nsoss = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 3))
commonComm = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 4))
extAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 5))
oci = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 6))
tcp = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 7))
bwOCSCAPRegisterAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 1, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSCAPRegisterAuthentications.setStatus('current')
if mibBuilder.loadTexts: bwOCSCAPRegisterAuthentications.setDescription('The number of registerAuthentication CAP messages received.')
bwOCSCAPResponseAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSCAPResponseAuthentications.setStatus('obsolete')
if mibBuilder.loadTexts: bwOCSCAPResponseAuthentications.setDescription('The number of responseAuthentication CAP messages received.')
bwOCSCAPRegisterRequests = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSCAPRegisterRequests.setStatus('obsolete')
if mibBuilder.loadTexts: bwOCSCAPRegisterRequests.setDescription('The number of registerRequest CAP messages received.')
bwOCSCAPRegisterResponses = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSCAPRegisterResponses.setStatus('obsolete')
if mibBuilder.loadTexts: bwOCSCAPRegisterResponses.setDescription('This counter was replaced with bwOCSCAPRegisterRequestIns and bwOCSCAPRegisterRequestOuts')
bwOCSCAPUnsuccessfulRegisterResponses = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSCAPUnsuccessfulRegisterResponses.setStatus('current')
if mibBuilder.loadTexts: bwOCSCAPUnsuccessfulRegisterResponses.setDescription('The number of failed registerResponse CAP messages received.')
bwOCSCAPAcknowledgements = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSCAPAcknowledgements.setStatus('current')
if mibBuilder.loadTexts: bwOCSCAPAcknowledgements.setDescription('The number of acknowledgement CAP messages received.')
bwOCSCAPUnregisterIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSCAPUnregisterIns.setStatus('current')
if mibBuilder.loadTexts: bwOCSCAPUnregisterIns.setDescription('The number of unregister CAP messages received.')
bwOCSCAPUnregisterOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSCAPUnregisterOuts.setStatus('current')
if mibBuilder.loadTexts: bwOCSCAPUnregisterOuts.setDescription('The number of unregister CAP messages sent.')
bwOCSCAPSessionUpdates = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 1, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSCAPSessionUpdates.setStatus('current')
if mibBuilder.loadTexts: bwOCSCAPSessionUpdates.setDescription('The number of sessionUpdate CAP messages received.')
bwOCSCAPProfileUpdates = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 1, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSCAPProfileUpdates.setStatus('current')
if mibBuilder.loadTexts: bwOCSCAPProfileUpdates.setDescription('The number of profileUpdate CAP messages received.')
bwOCSCAPCallUpdates = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 1, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSCAPCallUpdates.setStatus('current')
if mibBuilder.loadTexts: bwOCSCAPCallUpdates.setDescription('The number of callUpdate CAP messages received.')
bwOCSCAPCallActions = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 1, 12), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSCAPCallActions.setStatus('current')
if mibBuilder.loadTexts: bwOCSCAPCallActions.setDescription('The number of callAction CAP messages received.')
bwOCSCAPCallControlInfos = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 1, 13), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSCAPCallControlInfos.setStatus('current')
if mibBuilder.loadTexts: bwOCSCAPCallControlInfos.setDescription('The number of callControlInfo CAP messages received.')
bwOCSCAPInfoRequests = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 1, 14), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSCAPInfoRequests.setStatus('current')
if mibBuilder.loadTexts: bwOCSCAPInfoRequests.setDescription('The number of infoRequest CAP messages received.')
bwOCSCAPInfoResponses = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 1, 15), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSCAPInfoResponses.setStatus('current')
if mibBuilder.loadTexts: bwOCSCAPInfoResponses.setDescription('The number of infoResponse CAP messages received.')
bwOCSCAPServerStatusRequests = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 1, 16), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSCAPServerStatusRequests.setStatus('current')
if mibBuilder.loadTexts: bwOCSCAPServerStatusRequests.setDescription('The number of serverStatusRequest CAP messages received.')
bwOCSCAPExternalNotifies = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 1, 17), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSCAPExternalNotifies.setStatus('current')
if mibBuilder.loadTexts: bwOCSCAPExternalNotifies.setDescription('The number of externalNotify CAP messages received.')
bwOCSCAPMonitoringUsersRequests = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 1, 18), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSCAPMonitoringUsersRequests.setStatus('current')
if mibBuilder.loadTexts: bwOCSCAPMonitoringUsersRequests.setDescription('The number of monitoringUsersRequest CAP messages received.')
bwOCSCAPMonitoringUsersResponses = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 1, 19), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSCAPMonitoringUsersResponses.setStatus('current')
if mibBuilder.loadTexts: bwOCSCAPMonitoringUsersResponses.setDescription('The number of monitoringUsersResponse CAP messages sent.')
bwOCSCAPStatsQueueUpdatesOut = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 1, 20), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSCAPStatsQueueUpdatesOut.setStatus('current')
if mibBuilder.loadTexts: bwOCSCAPStatsQueueUpdatesOut.setDescription('This counter reflects the number of CAP queueUpdate messages that have been sent out by the system.')
bwOCSCAPStatsQueueActionsIn = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 1, 21), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSCAPStatsQueueActionsIn.setStatus('current')
if mibBuilder.loadTexts: bwOCSCAPStatsQueueActionsIn.setDescription('This counter reflects the number of CAP queueAction messages that have been received by the system.')
bwOCSCAPStatsDatagramsIn = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 1, 22), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSCAPStatsDatagramsIn.setStatus('current')
if mibBuilder.loadTexts: bwOCSCAPStatsDatagramsIn.setDescription('This counter reflects the number of CAP datagram commands that have been received by the system.')
bwOCSCAPStatsDatagramsOut = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 1, 23), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSCAPStatsDatagramsOut.setStatus('current')
if mibBuilder.loadTexts: bwOCSCAPStatsDatagramsOut.setDescription('This counter reflects the number of CAP datagram commands that have been sent by the system.')
bwOCSCAPRegisterRequestIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 1, 24), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSCAPRegisterRequestIns.setStatus('current')
if mibBuilder.loadTexts: bwOCSCAPRegisterRequestIns.setDescription('This counter is incremented when the OCS receives a CAP registerRequest.')
bwOCSCAPRegisterRequestOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 1, 25), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSCAPRegisterRequestOuts.setStatus('current')
if mibBuilder.loadTexts: bwOCSCAPRegisterRequestOuts.setDescription('This counter is incremented when the OCS sends a CAP registerRequest.')
bwOCSCAPResponseAuthenticationIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 1, 26), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSCAPResponseAuthenticationIns.setStatus('current')
if mibBuilder.loadTexts: bwOCSCAPResponseAuthenticationIns.setDescription('This counter is incremented when the OCS receives a CAP responseAuthentication.')
bwOCSCAPResponseAuthenticationOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 1, 27), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSCAPResponseAuthenticationOuts.setStatus('current')
if mibBuilder.loadTexts: bwOCSCAPResponseAuthenticationOuts.setDescription('This counter is incremented when the OCS sends a CAP responseAuthentication.')
bwOCSOSSRequestAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 2, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSOSSRequestAuthentications.setStatus('obsolete')
if mibBuilder.loadTexts: bwOCSOSSRequestAuthentications.setDescription('The number of requestAuthentication OSS messages received.')
bwOCSOSSResponseAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 2, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSOSSResponseAuthentications.setStatus('obsolete')
if mibBuilder.loadTexts: bwOCSOSSResponseAuthentications.setDescription('The number of requestAuthentication response OSS messages received.')
bwOCSOSSRequestLogins = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 2, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSOSSRequestLogins.setStatus('obsolete')
if mibBuilder.loadTexts: bwOCSOSSRequestLogins.setDescription('The number of requestLogin OSS messages received.')
bwOCSOSSResponseLogins = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 2, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSOSSResponseLogins.setStatus('obsolete')
if mibBuilder.loadTexts: bwOCSOSSResponseLogins.setDescription('The number of requestLogin response OSS messages received.')
bwOCSOSSUnsuccessfulResponseLogins = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 2, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSOSSUnsuccessfulResponseLogins.setStatus('obsolete')
if mibBuilder.loadTexts: bwOCSOSSUnsuccessfulResponseLogins.setDescription('The number of unsuccessful requestLogin response OSS messages received.')
bwOCSOSSRequestLogoutIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 2, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSOSSRequestLogoutIns.setStatus('obsolete')
if mibBuilder.loadTexts: bwOCSOSSRequestLogoutIns.setDescription('The number of requestLogout OSS messages received.')
bwOCSOSSRequestLogoutOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 2, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSOSSRequestLogoutOuts.setStatus('obsolete')
if mibBuilder.loadTexts: bwOCSOSSRequestLogoutOuts.setDescription('The number of requestLogout OSS messages sent.')
bwOCSOSSRequests = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 2, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSOSSRequests.setStatus('obsolete')
if mibBuilder.loadTexts: bwOCSOSSRequests.setDescription('The number of OSS request messages received.')
bwOCSOSSResponses = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 2, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSOSSResponses.setStatus('obsolete')
if mibBuilder.loadTexts: bwOCSOSSResponses.setDescription('The number of request response OSS messages received.')
bwOCSOSSResponseAuthenticationOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 2, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSOSSResponseAuthenticationOuts.setStatus('obsolete')
if mibBuilder.loadTexts: bwOCSOSSResponseAuthenticationOuts.setDescription('The number of requestAuthentication response OSS messages sent from OCS.')
bwOCSOSSResponseAuthenticationIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 2, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSOSSResponseAuthenticationIns.setStatus('obsolete')
if mibBuilder.loadTexts: bwOCSOSSResponseAuthenticationIns.setDescription('The number of requestAuthentication response OSS messages received.')
bwOCSNSOSSRequestAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 3, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSNSOSSRequestAuthentications.setStatus('current')
if mibBuilder.loadTexts: bwOCSNSOSSRequestAuthentications.setDescription('The number of requestAuthentication NS OSS messages received.')
bwOCSNSOSSResponseAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 3, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSNSOSSResponseAuthentications.setStatus('obsolete')
if mibBuilder.loadTexts: bwOCSNSOSSResponseAuthentications.setDescription('The number of requestAuthentication response NS OSS messages received.')
bwOCSNSOSSRequestLogins = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 3, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSNSOSSRequestLogins.setStatus('current')
if mibBuilder.loadTexts: bwOCSNSOSSRequestLogins.setDescription('The number of requestLogin NS OSS messages received.')
bwOCSNSOSSResponseLogins = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 3, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSNSOSSResponseLogins.setStatus('current')
if mibBuilder.loadTexts: bwOCSNSOSSResponseLogins.setDescription('The number of requestLogin response NS OSS messages received.')
bwOCSNSOSSUnsuccessfulResponseLogins = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 3, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSNSOSSUnsuccessfulResponseLogins.setStatus('current')
if mibBuilder.loadTexts: bwOCSNSOSSUnsuccessfulResponseLogins.setDescription('The number of unsuccessful requestLogin response NS OSS messages received.')
bwOCSNSOSSRequestLogoutIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 3, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSNSOSSRequestLogoutIns.setStatus('current')
if mibBuilder.loadTexts: bwOCSNSOSSRequestLogoutIns.setDescription('The number of requestLogout NS OSS messages received.')
bwOCSNSOSSRequestLogoutOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 3, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSNSOSSRequestLogoutOuts.setStatus('current')
if mibBuilder.loadTexts: bwOCSNSOSSRequestLogoutOuts.setDescription('The number of requestLogout NS OSS messages sent.')
bwOCSNSOSSRequests = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 3, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSNSOSSRequests.setStatus('current')
if mibBuilder.loadTexts: bwOCSNSOSSRequests.setDescription('The number of NS OSS request messages received.')
bwOCSNSOSSResponses = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 3, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSNSOSSResponses.setStatus('current')
if mibBuilder.loadTexts: bwOCSNSOSSResponses.setDescription('The number of request response NS OSS messages received.')
bwOCSNSOSSResponseAuthenticationOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 3, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSNSOSSResponseAuthenticationOuts.setStatus('current')
if mibBuilder.loadTexts: bwOCSNSOSSResponseAuthenticationOuts.setDescription('The number of requestAuthentication response NS OSS messages sent from OCS.')
bwOCSNSOSSResponseAuthenticationIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 3, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSNSOSSResponseAuthenticationIns.setStatus('current')
if mibBuilder.loadTexts: bwOCSNSOSSResponseAuthenticationIns.setDescription('The number of requestAuthentication response NS OSS messages received.')
bwOCSCommonCommStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 4, 1), )
if mibBuilder.loadTexts: bwOCSCommonCommStatsTable.setStatus('current')
if mibBuilder.loadTexts: bwOCSCommonCommStatsTable.setDescription('This table contains counters for BCCT for the OCS process.')
bwOCSCommonCommStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 4, 1, 1), ).setIndexNames((0, "BW-OpenClientServer", "bwOCSCommonCommStatsIndex"))
if mibBuilder.loadTexts: bwOCSCommonCommStatsEntry.setStatus('current')
if mibBuilder.loadTexts: bwOCSCommonCommStatsEntry.setDescription('Definition of the entries for bwOCSCommonCommStatsTable.')
bwOCSCommonCommStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 4, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwOCSCommonCommStatsIndex.setStatus('current')
if mibBuilder.loadTexts: bwOCSCommonCommStatsIndex.setDescription('This integer represents an index in table bwCommonCommPSStatsTable. The index represents a connection for a specific Host-Interfacece-Protocol combination.')
bwOCSCommonCommHost = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwOCSCommonCommHost.setStatus('current')
if mibBuilder.loadTexts: bwOCSCommonCommHost.setDescription('The address of a host connected to the BroadWorks Common Communication Protocol.')
bwOCSCommonCommInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwOCSCommonCommInterface.setStatus('current')
if mibBuilder.loadTexts: bwOCSCommonCommInterface.setDescription('The IP address of a local interface that a protocol is bound to.')
bwOCSCommonCommProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 4, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwOCSCommonCommProtocol.setStatus('current')
if mibBuilder.loadTexts: bwOCSCommonCommProtocol.setDescription('The name of a BroadWorks Common Communication Protocol client protocol, e.g. OCI or SyncApi.')
bwOCSCommonCommAcceptedOutboundConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 4, 1, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSCommonCommAcceptedOutboundConnections.setStatus('current')
if mibBuilder.loadTexts: bwOCSCommonCommAcceptedOutboundConnections.setDescription('This counter is incremented whenever a client in this process connects to the framework to a remote host, using the interface and protocol.')
bwOCSCommonCommAcceptedInboundConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 4, 1, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSCommonCommAcceptedInboundConnections.setStatus('current')
if mibBuilder.loadTexts: bwOCSCommonCommAcceptedInboundConnections.setDescription('This counter is incremented whenever a client in this process connects to the framework from a remote host, using the interface and protocol.')
bwOCSCommonCommRejectedOutboundConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 4, 1, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSCommonCommRejectedOutboundConnections.setStatus('current')
if mibBuilder.loadTexts: bwOCSCommonCommRejectedOutboundConnections.setDescription('This counter is incremented whenever a client connection request going from this process to a remote host and going through this interface has been rejected for a particular protocol.')
bwOCSCommonCommRejectedInboundConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 4, 1, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSCommonCommRejectedInboundConnections.setStatus('current')
if mibBuilder.loadTexts: bwOCSCommonCommRejectedInboundConnections.setDescription('This counter is incremented whenever a client connection request coming to this host and going through this interface has been rejected by the framework for a particular protocol.')
bwOCSCommonCommOutputMessagesProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 4, 1, 1, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSCommonCommOutputMessagesProcessed.setStatus('current')
if mibBuilder.loadTexts: bwOCSCommonCommOutputMessagesProcessed.setDescription('This counter is incremented whenever a message has been sent and processed for this host, interface and protocol.')
bwOCSCommonCommInputMessagesProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 4, 1, 1, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSCommonCommInputMessagesProcessed.setStatus('current')
if mibBuilder.loadTexts: bwOCSCommonCommInputMessagesProcessed.setDescription('This counter is incremented whenever a message has been received and processed for this host, interface and protocol.')
bwOCSCommonCommOutputCommunicationErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 4, 1, 1, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSCommonCommOutputCommunicationErrors.setStatus('current')
if mibBuilder.loadTexts: bwOCSCommonCommOutputCommunicationErrors.setDescription('This counter is incremented whenever a message could not be read because the TCP stack returned an error.')
bwOCSCommonCommInputCommunicationErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 4, 1, 1, 12), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSCommonCommInputCommunicationErrors.setStatus('current')
if mibBuilder.loadTexts: bwOCSCommonCommInputCommunicationErrors.setDescription('This counter is incremented whenever a message has been sent and processed for this host, interface and protocol.')
bwOCSWASAuthenticationAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 5, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSWASAuthenticationAttempts.setStatus('current')
if mibBuilder.loadTexts: bwOCSWASAuthenticationAttempts.setDescription('This counter is incremented when the OCS sends an authentication message to the WAS.')
bwOCSWASLoginAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 5, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSWASLoginAttempts.setStatus('current')
if mibBuilder.loadTexts: bwOCSWASLoginAttempts.setDescription('This counter is incremented when the OCS sends a login message to the WAS.')
bwOCSWASCommunicationErrors = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 5, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSWASCommunicationErrors.setStatus('current')
if mibBuilder.loadTexts: bwOCSWASCommunicationErrors.setDescription('This counter is incremented every time the OCS cannot connect to the WAS.')
bwOCSWASProcessingErrors = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 5, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSWASProcessingErrors.setStatus('current')
if mibBuilder.loadTexts: bwOCSWASProcessingErrors.setDescription('This counter is incremented every time the OCS cannot connect to the WAS.')
bwOCSOCIAuthenticationRequests = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 6, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSOCIAuthenticationRequests.setStatus('current')
if mibBuilder.loadTexts: bwOCSOCIAuthenticationRequests.setDescription('The number of requestAuthentication OCI messages received.')
bwOCSOCILoginRequestIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 6, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSOCILoginRequestIns.setStatus('current')
if mibBuilder.loadTexts: bwOCSOCILoginRequestIns.setDescription('The number of requestLogin OCI messages received.')
bwOCSOCILoginRequestOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 6, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSOCILoginRequestOuts.setStatus('current')
if mibBuilder.loadTexts: bwOCSOCILoginRequestOuts.setDescription('The number of requestLogin OCI messages received.')
bwOCSOCILoginResponses = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 6, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSOCILoginResponses.setStatus('current')
if mibBuilder.loadTexts: bwOCSOCILoginResponses.setDescription('The number of requestLogin response OCI messages received.')
bwOCSOCIUnsuccessfulLoginResponses = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 6, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSOCIUnsuccessfulLoginResponses.setStatus('current')
if mibBuilder.loadTexts: bwOCSOCIUnsuccessfulLoginResponses.setDescription('The number of unsuccessful requestLogin response OCI messages received.')
bwOCSOCILogoutRequestIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 6, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSOCILogoutRequestIns.setStatus('current')
if mibBuilder.loadTexts: bwOCSOCILogoutRequestIns.setDescription('The number of requestLogout OCI messages received.')
bwOCSOCILogoutRequestOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 6, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSOCILogoutRequestOuts.setStatus('current')
if mibBuilder.loadTexts: bwOCSOCILogoutRequestOuts.setDescription('The number of requestLogout OCI messages sent.')
bwOCSOCIRequests = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 6, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSOCIRequests.setStatus('current')
if mibBuilder.loadTexts: bwOCSOCIRequests.setDescription('The number of OCI request messages received.')
bwOCSOCIResponses = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 6, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSOCIResponses.setStatus('current')
if mibBuilder.loadTexts: bwOCSOCIResponses.setDescription('The number of request response OCI messages received.')
bwOCSOCIAuthenticationResponseOuts = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 6, 11), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSOCIAuthenticationResponseOuts.setStatus('current')
if mibBuilder.loadTexts: bwOCSOCIAuthenticationResponseOuts.setDescription('The number of requestAuthentication response OCI messages sent from OCS.')
bwOCSOCIAuthenticationResponseIns = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 6, 12), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSOCIAuthenticationResponseIns.setStatus('current')
if mibBuilder.loadTexts: bwOCSOCIAuthenticationResponseIns.setDescription('The number of requestAuthentication response OCI messages received.')
bwOCSOCIUserIdLoginLevelNotAllowed = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 6, 13), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSOCIUserIdLoginLevelNotAllowed.setStatus('current')
if mibBuilder.loadTexts: bwOCSOCIUserIdLoginLevelNotAllowed.setDescription('The number of times the Open Client Server force logged out a user whose login level is not in the list of OCI login levels allowed by the Open Client Server.')
bwOCSOCIErrorResponse = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 6, 14), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSOCIErrorResponse.setStatus('current')
if mibBuilder.loadTexts: bwOCSOCIErrorResponse.setDescription('The number of invalid or unknown OCI response message treated within the scope of an established OCI session.')
bwOCSMonitoringExecutorTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 8, 2, 1), )
if mibBuilder.loadTexts: bwOCSMonitoringExecutorTable.setStatus('current')
if mibBuilder.loadTexts: bwOCSMonitoringExecutorTable.setDescription('This table contains counters for the concurrent framework.')
bwOCSMonitoringExecutorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 8, 2, 1, 1), ).setIndexNames((0, "BW-OpenClientServer", "bwOCSMonitoringExecutorIndex"))
if mibBuilder.loadTexts: bwOCSMonitoringExecutorEntry.setStatus('current')
if mibBuilder.loadTexts: bwOCSMonitoringExecutorEntry.setDescription('Definition of the entries for bwOCSMonitoringExecutorTable.')
bwOCSMonitoringExecutorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 8, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwOCSMonitoringExecutorIndex.setStatus('current')
if mibBuilder.loadTexts: bwOCSMonitoringExecutorIndex.setDescription('This integer represents an index in table bwOCSMonitoringExecutorTable. This is the index to a specific Monitoring Executor name.')
bwOCSMonitoringExecutorName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 8, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwOCSMonitoringExecutorName.setStatus('current')
if mibBuilder.loadTexts: bwOCSMonitoringExecutorName.setDescription('The name of the Monitoring Executor - Names are internally defined at the application level.')
bwOCSMonitoringExecutorCurrentPoolSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 8, 2, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwOCSMonitoringExecutorCurrentPoolSize.setStatus('current')
if mibBuilder.loadTexts: bwOCSMonitoringExecutorCurrentPoolSize.setDescription('The current thread pool size')
bwOCSMonitoringExecutorMaxPoolSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 8, 2, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwOCSMonitoringExecutorMaxPoolSize.setStatus('current')
if mibBuilder.loadTexts: bwOCSMonitoringExecutorMaxPoolSize.setDescription('The maximum thread pool size')
bwOCSMonitoringExecutorAvgActiveThreads = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 8, 2, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwOCSMonitoringExecutorAvgActiveThreads.setStatus('current')
if mibBuilder.loadTexts: bwOCSMonitoringExecutorAvgActiveThreads.setDescription('The average number of active threads, rounded up')
bwOCSMonitoringExecutorTaskQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 8, 2, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwOCSMonitoringExecutorTaskQueueSize.setStatus('current')
if mibBuilder.loadTexts: bwOCSMonitoringExecutorTaskQueueSize.setDescription('Number of tasks in the queue (includes scheduled and recurring tasks)')
bwOCSMonitoringExecutorNbTasksRun = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 8, 2, 1, 1, 7), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSMonitoringExecutorNbTasksRun.setStatus('current')
if mibBuilder.loadTexts: bwOCSMonitoringExecutorNbTasksRun.setDescription('Number of tasks run')
bwOCSMonitoringExecutorNbWarnings = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 8, 2, 1, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSMonitoringExecutorNbWarnings.setStatus('current')
if mibBuilder.loadTexts: bwOCSMonitoringExecutorNbWarnings.setDescription('Number of warnings that occured')
bwOCSMonitoringExecutorNbErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 8, 2, 1, 1, 9), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSMonitoringExecutorNbErrors.setStatus('current')
if mibBuilder.loadTexts: bwOCSMonitoringExecutorNbErrors.setDescription('Number of errors that occured')
bwOCSMonitoringExecutorLongestTaskMs = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 8, 2, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwOCSMonitoringExecutorLongestTaskMs.setStatus('current')
if mibBuilder.loadTexts: bwOCSMonitoringExecutorLongestTaskMs.setDescription('Longest completed task execution time in milliseconds')
bwOCSMonitoringExecutorLongestTaskName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 8, 2, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwOCSMonitoringExecutorLongestTaskName.setStatus('current')
if mibBuilder.loadTexts: bwOCSMonitoringExecutorLongestTaskName.setDescription('Longest completed task name')
bwOCSTcpServersStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 7, 1), )
if mibBuilder.loadTexts: bwOCSTcpServersStatsTable.setStatus('current')
if mibBuilder.loadTexts: bwOCSTcpServersStatsTable.setDescription('This table contains counters for TCP underlying framework for the OCS process.')
bwOCSTcpServersStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 7, 1, 1), ).setIndexNames((0, "BW-OpenClientServer", "bwOCSTcpServersStatsIndex"))
if mibBuilder.loadTexts: bwOCSTcpServersStatsEntry.setStatus('current')
if mibBuilder.loadTexts: bwOCSTcpServersStatsEntry.setDescription('Definition of the entries for bwOCSTcpServersStatsTable.')
bwOCSTcpServersStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 7, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwOCSTcpServersStatsIndex.setStatus('current')
if mibBuilder.loadTexts: bwOCSTcpServersStatsIndex.setDescription('This integer represents an index in table bwOCSTcpServersStatsTable. This is the index to a specific TCP server name.')
bwOCSTcpServersName = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwOCSTcpServersName.setStatus('current')
if mibBuilder.loadTexts: bwOCSTcpServersName.setDescription('The name of TCP server - Names are internally defined at at the application level.')
bwOCSTcpServersNbConnectionsAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 7, 1, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSTcpServersNbConnectionsAccepted.setStatus('current')
if mibBuilder.loadTexts: bwOCSTcpServersNbConnectionsAccepted.setDescription('This counter represents the number of connections accepted by the TCP server.')
bwOCSTcpServersNbConnectionsRefused = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 7, 1, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSTcpServersNbConnectionsRefused.setStatus('current')
if mibBuilder.loadTexts: bwOCSTcpServersNbConnectionsRefused.setDescription('This counter represents the number of connections refused by the TCP server.')
bwOCSTcpServersNbConnectionsInitiated = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 7, 1, 1, 5), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSTcpServersNbConnectionsInitiated.setStatus('current')
if mibBuilder.loadTexts: bwOCSTcpServersNbConnectionsInitiated.setDescription('This counter represents the number of connections initiated by the TCP server.')
bwOCSTcpServersNbConnectionsClosed = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 7, 1, 1, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSTcpServersNbConnectionsClosed.setStatus('current')
if mibBuilder.loadTexts: bwOCSTcpServersNbConnectionsClosed.setDescription('This counter represents the number of connections closed by the TCP server or remote hosts.')
bwOCSTcpServersNbBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 7, 1, 1, 7), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSTcpServersNbBytesSent.setStatus('current')
if mibBuilder.loadTexts: bwOCSTcpServersNbBytesSent.setDescription('This counter represents the number of bytes sent by the TCP server.')
bwOCSTcpServersNbBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 7, 1, 1, 8), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSTcpServersNbBytesReceived.setStatus('current')
if mibBuilder.loadTexts: bwOCSTcpServersNbBytesReceived.setDescription('This counter represents the number of bytes received by the TCP server.')
bwOCSTcpServersOutgoingQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 7, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwOCSTcpServersOutgoingQueueSize.setStatus('current')
if mibBuilder.loadTexts: bwOCSTcpServersOutgoingQueueSize.setDescription('This counter represents the number of bytes in the outgoing queue.')
bwOCSTcpServersIncomingQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 7, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwOCSTcpServersIncomingQueueSize.setStatus('current')
if mibBuilder.loadTexts: bwOCSTcpServersIncomingQueueSize.setDescription('This counter represents the number of bytes in the incoming queue.')
bwOCSTcpServersNbBytesSentSecure = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 7, 1, 1, 11), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSTcpServersNbBytesSentSecure.setStatus('current')
if mibBuilder.loadTexts: bwOCSTcpServersNbBytesSentSecure.setDescription('This counter represents the number of bytes sent by the TCP server over secure connections.')
bwOCSTcpServersNbBytesReceivedSecure = MibTableColumn((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1, 7, 1, 1, 12), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bwOCSTcpServersNbBytesReceivedSecure.setStatus('current')
if mibBuilder.loadTexts: bwOCSTcpServersNbBytesReceivedSecure.setDescription('This counter represents the number of bytes received by the TCP server over secure connections.')
bwOCSReserved = MibScalar((1, 3, 6, 1, 4, 1, 6431, 1, 8, 999, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwOCSReserved.setStatus('obsolete')
if mibBuilder.loadTexts: bwOCSReserved.setDescription('This is a reserved counter not used to report any particular value.')
bwOcsMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1000, 1))
bwOcsMibCompliancy = MibIdentifier((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1000, 2))
bwOcsCapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1000, 1, 1)).setObjects(("BW-OpenClientServer", "bwOCSCAPRegisterAuthentications"), ("BW-OpenClientServer", "bwOCSCAPResponseAuthentications"), ("BW-OpenClientServer", "bwOCSCAPRegisterRequests"), ("BW-OpenClientServer", "bwOCSCAPUnsuccessfulRegisterResponses"), ("BW-OpenClientServer", "bwOCSCAPAcknowledgements"), ("BW-OpenClientServer", "bwOCSCAPUnregisterIns"), ("BW-OpenClientServer", "bwOCSCAPUnregisterOuts"), ("BW-OpenClientServer", "bwOCSCAPSessionUpdates"), ("BW-OpenClientServer", "bwOCSCAPProfileUpdates"), ("BW-OpenClientServer", "bwOCSCAPCallUpdates"), ("BW-OpenClientServer", "bwOCSCAPCallActions"), ("BW-OpenClientServer", "bwOCSCAPCallControlInfos"), ("BW-OpenClientServer", "bwOCSCAPInfoRequests"), ("BW-OpenClientServer", "bwOCSCAPInfoResponses"), ("BW-OpenClientServer", "bwOCSCAPServerStatusRequests"), ("BW-OpenClientServer", "bwOCSCAPExternalNotifies"), ("BW-OpenClientServer", "bwOCSCAPMonitoringUsersRequests"), ("BW-OpenClientServer", "bwOCSCAPMonitoringUsersResponses"), ("BW-OpenClientServer", "bwOCSCAPStatsQueueUpdatesOut"), ("BW-OpenClientServer", "bwOCSCAPStatsQueueActionsIn"), ("BW-OpenClientServer", "bwOCSCAPStatsDatagramsIn"), ("BW-OpenClientServer", "bwOCSCAPStatsDatagramsOut"), ("BW-OpenClientServer", "bwOCSCAPRegisterRequestIns"), ("BW-OpenClientServer", "bwOCSCAPRegisterRequestOuts"), ("BW-OpenClientServer", "bwOCSCAPResponseAuthenticationIns"), ("BW-OpenClientServer", "bwOCSCAPResponseAuthenticationOuts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwOcsCapGroup = bwOcsCapGroup.setStatus('current')
if mibBuilder.loadTexts: bwOcsCapGroup.setDescription('This group defines the OCS statistics for the CAP protocol to the BroadWorks Application Server.')
bwOcsAsOSSGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1000, 1, 2)).setObjects(("BW-OpenClientServer", "bwOCSOSSRequestAuthentications"), ("BW-OpenClientServer", "bwOCSOSSResponseAuthentications"), ("BW-OpenClientServer", "bwOCSOSSRequestLogins"), ("BW-OpenClientServer", "bwOCSOSSResponseLogins"), ("BW-OpenClientServer", "bwOCSOSSUnsuccessfulResponseLogins"), ("BW-OpenClientServer", "bwOCSOSSRequestLogoutIns"), ("BW-OpenClientServer", "bwOCSOSSRequestLogoutOuts"), ("BW-OpenClientServer", "bwOCSOSSRequests"), ("BW-OpenClientServer", "bwOCSOSSResponses"), ("BW-OpenClientServer", "bwOCSOSSResponseAuthenticationOuts"), ("BW-OpenClientServer", "bwOCSOSSResponseAuthenticationIns"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwOcsAsOSSGroup = bwOcsAsOSSGroup.setStatus('obsolete')
if mibBuilder.loadTexts: bwOcsAsOSSGroup.setDescription('This group defines the OCS statistics for the OSS protocol to the BroadWorks Application Server.')
bwOcsNsOSSGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1000, 1, 3)).setObjects(("BW-OpenClientServer", "bwOCSNSOSSRequestAuthentications"), ("BW-OpenClientServer", "bwOCSNSOSSResponseAuthentications"), ("BW-OpenClientServer", "bwOCSNSOSSRequestLogins"), ("BW-OpenClientServer", "bwOCSNSOSSResponseLogins"), ("BW-OpenClientServer", "bwOCSNSOSSUnsuccessfulResponseLogins"), ("BW-OpenClientServer", "bwOCSNSOSSRequestLogoutIns"), ("BW-OpenClientServer", "bwOCSNSOSSRequestLogoutOuts"), ("BW-OpenClientServer", "bwOCSNSOSSRequests"), ("BW-OpenClientServer", "bwOCSNSOSSResponses"), ("BW-OpenClientServer", "bwOCSNSOSSResponseAuthenticationOuts"), ("BW-OpenClientServer", "bwOCSNSOSSResponseAuthenticationIns"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwOcsNsOSSGroup = bwOcsNsOSSGroup.setStatus('current')
if mibBuilder.loadTexts: bwOcsNsOSSGroup.setDescription('This group defines the OCS statistics for the OSS protocol to the BroadWorks Network Server.')
bwOcsBcctGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1000, 1, 4)).setObjects(("BW-OpenClientServer", "bwOCSCommonCommStatsTable"), ("BW-OpenClientServer", "bwOCSCommonCommStatsIndex"), ("BW-OpenClientServer", "bwOCSCommonCommHost"), ("BW-OpenClientServer", "bwOCSCommonCommInterface"), ("BW-OpenClientServer", "bwOCSCommonCommProtocol"), ("BW-OpenClientServer", "bwOCSCommonCommAcceptedOutboundConnections"), ("BW-OpenClientServer", "bwOCSCommonCommAcceptedInboundConnections"), ("BW-OpenClientServer", "bwOCSCommonCommRejectedOutboundConnections"), ("BW-OpenClientServer", "bwOCSCommonCommRejectedInboundConnections"), ("BW-OpenClientServer", "bwOCSCommonCommOutputMessagesProcessed"), ("BW-OpenClientServer", "bwOCSCommonCommInputMessagesProcessed"), ("BW-OpenClientServer", "bwOCSCommonCommOutputCommunicationErrors"), ("BW-OpenClientServer", "bwOCSCommonCommInputCommunicationErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwOcsBcctGroup = bwOcsBcctGroup.setStatus('current')
if mibBuilder.loadTexts: bwOcsBcctGroup.setDescription('This group defines the OCS statistics for the BCCT protocol to the BroadWorks Application and Network Servers.')
bwOcsReserveGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1000, 1, 5)).setObjects(("BW-OpenClientServer", "bwOCSReserved"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwOcsReserveGroup = bwOcsReserveGroup.setStatus('current')
if mibBuilder.loadTexts: bwOcsReserveGroup.setDescription('MIB reserved section.')
bwOcsExtAuthGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1000, 1, 6)).setObjects(("BW-OpenClientServer", "bwOCSWASAuthenticationAttempts"), ("BW-OpenClientServer", "bwOCSWASLoginAttempts"), ("BW-OpenClientServer", "bwOCSWASCommunicationErrors"), ("BW-OpenClientServer", "bwOCSWASProcessingErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwOcsExtAuthGroup = bwOcsExtAuthGroup.setStatus('current')
if mibBuilder.loadTexts: bwOcsExtAuthGroup.setDescription('This group defines the OCS statistics for the External Authentication protocol to the Web Base Authentication server.')
bwOcsOciAuthGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1000, 1, 7)).setObjects(("BW-OpenClientServer", "bwOCSOCIAuthenticationRequests"), ("BW-OpenClientServer", "bwOCSOCILoginRequestIns"), ("BW-OpenClientServer", "bwOCSOCILoginRequestOuts"), ("BW-OpenClientServer", "bwOCSOCILoginResponses"), ("BW-OpenClientServer", "bwOCSOCIUnsuccessfulLoginResponses"), ("BW-OpenClientServer", "bwOCSOCILogoutRequestIns"), ("BW-OpenClientServer", "bwOCSOCILogoutRequestOuts"), ("BW-OpenClientServer", "bwOCSOCIRequests"), ("BW-OpenClientServer", "bwOCSOCIResponses"), ("BW-OpenClientServer", "bwOCSOCIAuthenticationResponseOuts"), ("BW-OpenClientServer", "bwOCSOCIAuthenticationResponseIns"), ("BW-OpenClientServer", "bwOCSOCIUserIdLoginLevelNotAllowed"), ("BW-OpenClientServer", "bwOCSOCIErrorResponse"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwOcsOciAuthGroup = bwOcsOciAuthGroup.setStatus('current')
if mibBuilder.loadTexts: bwOcsOciAuthGroup.setDescription('This group defines the OCS statistics for the OCI protocol to the BroadWorks Application.')
bwOcsTcpStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1000, 1, 8)).setObjects(("BW-OpenClientServer", "bwOCSTcpServersStatsTable"), ("BW-OpenClientServer", "bwOCSTcpServersStatsIndex"), ("BW-OpenClientServer", "bwOCSTcpServersName"), ("BW-OpenClientServer", "bwOCSTcpServersNbConnectionsAccepted"), ("BW-OpenClientServer", "bwOCSTcpServersNbConnectionsClosed"), ("BW-OpenClientServer", "bwOCSTcpServersOutgoingQueueSize"), ("BW-OpenClientServer", "bwOCSTcpServersIncomingQueueSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwOcsTcpStatsGroup = bwOcsTcpStatsGroup.setStatus('current')
if mibBuilder.loadTexts: bwOcsTcpStatsGroup.setDescription('This group defines the statistics for the Automatic Hold And Retrieve Service.')
bwOCSConcurrentFrameworkStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1000, 1, 9)).setObjects(("BW-OpenClientServer", "bwOCSMonitoringExecutorTable"), ("BW-OpenClientServer", "bwOCSMonitoringExecutorIndex"), ("BW-OpenClientServer", "bwOCSMonitoringExecutorName"), ("BW-OpenClientServer", "bwOCSMonitoringExecutorCurrentPoolSize"), ("BW-OpenClientServer", "bwOCSMonitoringExecutorMaxPoolSize"), ("BW-OpenClientServer", "bwOCSMonitoringExecutorAvgActiveThreads"), ("BW-OpenClientServer", "bwOCSMonitoringExecutorTaskQueueSize"), ("BW-OpenClientServer", "bwOCSMonitoringExecutorNbTasksRun"), ("BW-OpenClientServer", "bwOCSMonitoringExecutorNbWarnings"), ("BW-OpenClientServer", "bwOCSMonitoringExecutorNbErrors"), ("BW-OpenClientServer", "bwOCSMonitoringExecutorLongestTaskMs"), ("BW-OpenClientServer", "bwOCSMonitoringExecutorLongestTaskName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwOCSConcurrentFrameworkStatsGroup = bwOCSConcurrentFrameworkStatsGroup.setStatus('current')
if mibBuilder.loadTexts: bwOCSConcurrentFrameworkStatsGroup.setDescription('This group defines the statistics for the Automatic Hold And Retrieve Service.')
bwOcsBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6431, 1, 8, 1000, 2, 1)).setObjects(("BW-OpenClientServer", "bwOcsCapGroup"), ("BW-OpenClientServer", "bwOcsAsOSSGroup"), ("BW-OpenClientServer", "bwOcsNsOSSGroup"), ("BW-OpenClientServer", "bwOcsBcctGroup"), ("BW-OpenClientServer", "bwOcsReserveGroup"), ("BW-OpenClientServer", "bwOcsExtAuthGroup"), ("BW-OpenClientServer", "bwOcsTcpStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bwOcsBasicCompliance = bwOcsBasicCompliance.setStatus('current')
if mibBuilder.loadTexts: bwOcsBasicCompliance.setDescription('BroadWorks Open Client Server MIB compliance')
mibBuilder.exportSymbols("BW-OpenClientServer", bwOCSOSSResponses=bwOCSOSSResponses, bwOCSWASLoginAttempts=bwOCSWASLoginAttempts, bwOCSOCIAuthenticationResponseIns=bwOCSOCIAuthenticationResponseIns, bwOcsReserveGroup=bwOcsReserveGroup, bwOCSCAPRegisterResponses=bwOCSCAPRegisterResponses, bwOCSMonitoringExecutorCurrentPoolSize=bwOCSMonitoringExecutorCurrentPoolSize, bwOCSCAPCallActions=bwOCSCAPCallActions, bwOCSMonitoringExecutorLongestTaskMs=bwOCSMonitoringExecutorLongestTaskMs, bwOCSOCIErrorResponse=bwOCSOCIErrorResponse, bwOCSTcpServersName=bwOCSTcpServersName, bwOcsNsOSSGroup=bwOcsNsOSSGroup, bwOCSMonitoringExecutorTaskQueueSize=bwOCSMonitoringExecutorTaskQueueSize, bwOcsExtAuthGroup=bwOcsExtAuthGroup, bwOCSTcpServersNbConnectionsAccepted=bwOCSTcpServersNbConnectionsAccepted, bwOCSCAPAcknowledgements=bwOCSCAPAcknowledgements, bwOCSReserved=bwOCSReserved, bwOCSOCIAuthenticationRequests=bwOCSOCIAuthenticationRequests, bwOCSCommonCommOutputMessagesProcessed=bwOCSCommonCommOutputMessagesProcessed, bwOCSCAPCallControlInfos=bwOCSCAPCallControlInfos, bwOCSOSSRequestLogins=bwOCSOSSRequestLogins, bwOCSCommonCommAcceptedInboundConnections=bwOCSCommonCommAcceptedInboundConnections, bwOCSNSOSSRequestLogoutIns=bwOCSNSOSSRequestLogoutIns, bwOCSOCIAuthenticationResponseOuts=bwOCSOCIAuthenticationResponseOuts, bwOCSNSOSSRequestAuthentications=bwOCSNSOSSRequestAuthentications, broadsoft=broadsoft, bwOCSOSSRequestLogoutOuts=bwOCSOSSRequestLogoutOuts, bwOCSNSOSSResponseAuthenticationIns=bwOCSNSOSSResponseAuthenticationIns, bwOCSTcpServersOutgoingQueueSize=bwOCSTcpServersOutgoingQueueSize, bwOcsTcpStatsGroup=bwOcsTcpStatsGroup, bwOCSTcpServersNbBytesSentSecure=bwOCSTcpServersNbBytesSentSecure, bwOCSCAPRegisterRequestOuts=bwOCSCAPRegisterRequestOuts, cap=cap, bwOCSOCIUnsuccessfulLoginResponses=bwOCSOCIUnsuccessfulLoginResponses, bwOCSMonitoringExecutorAvgActiveThreads=bwOCSMonitoringExecutorAvgActiveThreads, bwOCSTcpServersNbBytesSent=bwOCSTcpServersNbBytesSent, bwOCSCAPUnregisterOuts=bwOCSCAPUnregisterOuts, bwOCSCommonCommStatsEntry=bwOCSCommonCommStatsEntry, bwOCSTcpServersNbConnectionsClosed=bwOCSTcpServersNbConnectionsClosed, tcp=tcp, bwOCSConcurrentFrameworkStatsGroup=bwOCSConcurrentFrameworkStatsGroup, bwOCSOSSUnsuccessfulResponseLogins=bwOCSOSSUnsuccessfulResponseLogins, ocsReserved=ocsReserved, bwOCSTcpServersStatsIndex=bwOCSTcpServersStatsIndex, bwOCSCAPRegisterAuthentications=bwOCSCAPRegisterAuthentications, bwOCSCAPUnsuccessfulRegisterResponses=bwOCSCAPUnsuccessfulRegisterResponses, bwOCSCAPExternalNotifies=bwOCSCAPExternalNotifies, bwOCSTcpServersNbConnectionsInitiated=bwOCSTcpServersNbConnectionsInitiated, bwOCSTcpServersIncomingQueueSize=bwOCSTcpServersIncomingQueueSize, bwOCSOSSRequestAuthentications=bwOCSOSSRequestAuthentications, bwOCSCommonCommInterface=bwOCSCommonCommInterface, oci=oci, bwOCSOCIRequests=bwOCSOCIRequests, bwOCSMonitoringExecutorEntry=bwOCSMonitoringExecutorEntry, bwOCSOCILoginResponses=bwOCSOCILoginResponses, bwOcsAsOSSGroup=bwOcsAsOSSGroup, bwOCSCommonCommHost=bwOCSCommonCommHost, bwOCSCAPRegisterRequestIns=bwOCSCAPRegisterRequestIns, bwOCSTcpServersStatsTable=bwOCSTcpServersStatsTable, protocols=protocols, bwOCSCommonCommStatsTable=bwOCSCommonCommStatsTable, bwOCSCAPProfileUpdates=bwOCSCAPProfileUpdates, bwOCSOSSResponseAuthenticationOuts=bwOCSOSSResponseAuthenticationOuts, bwOCSOSSRequests=bwOCSOSSRequests, bwOCSOSSResponseAuthenticationIns=bwOCSOSSResponseAuthenticationIns, bwOcsBasicCompliance=bwOcsBasicCompliance, bwOCSMonitoringExecutorNbTasksRun=bwOCSMonitoringExecutorNbTasksRun, bwOCSCommonCommRejectedInboundConnections=bwOCSCommonCommRejectedInboundConnections, bwOCSCAPServerStatusRequests=bwOCSCAPServerStatusRequests, bwOCSOCILogoutRequestIns=bwOCSOCILogoutRequestIns, bwOCSNSOSSResponses=bwOCSNSOSSResponses, bwOCSMonitoringExecutorName=bwOCSMonitoringExecutorName, bwOCSTcpServersNbBytesReceivedSecure=bwOCSTcpServersNbBytesReceivedSecure, bwOCSCAPUnregisterIns=bwOCSCAPUnregisterIns, bwOCSCAPInfoRequests=bwOCSCAPInfoRequests, bwOcsMibConformance=bwOcsMibConformance, bwOCSNSOSSRequests=bwOCSNSOSSRequests, bwOCSCAPStatsDatagramsOut=bwOCSCAPStatsDatagramsOut, bwOCSCAPRegisterRequests=bwOCSCAPRegisterRequests, bwOCSOSSResponseLogins=bwOCSOSSResponseLogins, commonComm=commonComm, bwOCSCAPInfoResponses=bwOCSCAPInfoResponses, bwOcsBcctGroup=bwOcsBcctGroup, bwOCSNSOSSUnsuccessfulResponseLogins=bwOCSNSOSSUnsuccessfulResponseLogins, nsoss=nsoss, bwOCSCommonCommInputCommunicationErrors=bwOCSCommonCommInputCommunicationErrors, bwOCSWASCommunicationErrors=bwOCSWASCommunicationErrors, bwOCSMonitoringExecutorNbWarnings=bwOCSMonitoringExecutorNbWarnings, bwOCSMonitoringExecutorIndex=bwOCSMonitoringExecutorIndex, bwOCSMonitoringExecutorLongestTaskName=bwOCSMonitoringExecutorLongestTaskName, bwOCSOCILoginRequestOuts=bwOCSOCILoginRequestOuts, bwOCSNSOSSRequestLogins=bwOCSNSOSSRequestLogins, bwOCSNSOSSResponseLogins=bwOCSNSOSSResponseLogins, bwOCSCAPStatsDatagramsIn=bwOCSCAPStatsDatagramsIn, concurrent=concurrent, bwOCSCAPResponseAuthentications=bwOCSCAPResponseAuthentications, bwOCSCAPMonitoringUsersRequests=bwOCSCAPMonitoringUsersRequests, PYSNMP_MODULE_ID=broadsoft, bwOcsMibGroups=bwOcsMibGroups, bwOCSCAPStatsQueueUpdatesOut=bwOCSCAPStatsQueueUpdatesOut, bwOCSOCILoginRequestIns=bwOCSOCILoginRequestIns, bwOCSWASProcessingErrors=bwOCSWASProcessingErrors, bwOCSCommonCommInputMessagesProcessed=bwOCSCommonCommInputMessagesProcessed, broadworks=broadworks, bwOCSCommonCommProtocol=bwOCSCommonCommProtocol, bwOCSOCIUserIdLoginLevelNotAllowed=bwOCSOCIUserIdLoginLevelNotAllowed, openClientServer=openClientServer, bwOCSMonitoringExecutorNbErrors=bwOCSMonitoringExecutorNbErrors, bwOCSCAPResponseAuthenticationIns=bwOCSCAPResponseAuthenticationIns, bwOCSCommonCommStatsIndex=bwOCSCommonCommStatsIndex, bwOCSOCIResponses=bwOCSOCIResponses, bwOCSCAPMonitoringUsersResponses=bwOCSCAPMonitoringUsersResponses, bwOCSOSSResponseAuthentications=bwOCSOSSResponseAuthentications, bwOCSCAPStatsQueueActionsIn=bwOCSCAPStatsQueueActionsIn, extAuth=extAuth, bwOCSOSSRequestLogoutIns=bwOCSOSSRequestLogoutIns, bwOCSCommonCommAcceptedOutboundConnections=bwOCSCommonCommAcceptedOutboundConnections, bwOCSWASAuthenticationAttempts=bwOCSWASAuthenticationAttempts, bwOcsOciAuthGroup=bwOcsOciAuthGroup, bwOCSMonitoringExecutorMaxPoolSize=bwOCSMonitoringExecutorMaxPoolSize, bwOCSMonitoringExecutorTable=bwOCSMonitoringExecutorTable, bwOcsCapGroup=bwOcsCapGroup, bwOCSCAPSessionUpdates=bwOCSCAPSessionUpdates, bwOCSCAPCallUpdates=bwOCSCAPCallUpdates, oss=oss, bwOCSTcpServersNbBytesReceived=bwOCSTcpServersNbBytesReceived, bwOCSOCILogoutRequestOuts=bwOCSOCILogoutRequestOuts, bwOCSCommonCommRejectedOutboundConnections=bwOCSCommonCommRejectedOutboundConnections, bwOCSNSOSSResponseAuthentications=bwOCSNSOSSResponseAuthentications, bwOCSTcpServersNbConnectionsRefused=bwOCSTcpServersNbConnectionsRefused, bwOcsMibCompliancy=bwOcsMibCompliancy, bwOCSNSOSSRequestLogoutOuts=bwOCSNSOSSRequestLogoutOuts, bwOCSTcpServersStatsEntry=bwOCSTcpServersStatsEntry, bwOCSCommonCommOutputCommunicationErrors=bwOCSCommonCommOutputCommunicationErrors, bwOCSCAPResponseAuthenticationOuts=bwOCSCAPResponseAuthenticationOuts, bwOCSNSOSSResponseAuthenticationOuts=bwOCSNSOSSResponseAuthenticationOuts)
