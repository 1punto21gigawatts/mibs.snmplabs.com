#
# PySNMP MIB module HM2-PLATFORM-PORTSECURITY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HM2-PLATFORM-PORTSECURITY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:32:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
HmEnabledStatus, hm2PlatformMibs = mibBuilder.importSymbols("HM2-TC-MIB", "HmEnabledStatus", "hm2PlatformMibs")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Bits, NotificationType, Unsigned32, Integer32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, ObjectIdentity, TimeTicks, Counter32, MibIdentifier, Gauge32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Bits", "NotificationType", "Unsigned32", "Integer32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "ObjectIdentity", "TimeTicks", "Counter32", "MibIdentifier", "Gauge32", "Counter64")
TruthValue, MacAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "MacAddress", "TextualConvention", "DisplayString")
hm2PlatformPortSecurity = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 12, 20))
hm2PlatformPortSecurity.setRevisions(('2011-07-12 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hm2PlatformPortSecurity.setRevisionsDescriptions(('Initial release.',))
if mibBuilder.loadTexts: hm2PlatformPortSecurity.setLastUpdated('201107120000Z')
if mibBuilder.loadTexts: hm2PlatformPortSecurity.setOrganization('Hirschmann Automation and Control GmbH')
if mibBuilder.loadTexts: hm2PlatformPortSecurity.setContactInfo('Postal: Stuttgarter Str. 45-51 72654 Neckartenzlingen Germany Phone: +49 7127 140 E-mail: hac.support@belden.com')
if mibBuilder.loadTexts: hm2PlatformPortSecurity.setDescription('The Hirschmann Private Platform2 MIB for Port Security Feature. Copyright (C) 2011. All Rights Reserved.')
hm2AgentPortSecurityGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 20, 1))
hm2AgentGlobalPortSecurityMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 12, 20, 1, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentGlobalPortSecurityMode.setStatus('current')
if mibBuilder.loadTexts: hm2AgentGlobalPortSecurityMode.setDescription('Mode showing whether at the global level, port security is enabled or not.')
hm2AgentPortSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 20, 1, 2), )
if mibBuilder.loadTexts: hm2AgentPortSecurityTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentPortSecurityTable.setDescription('A table for Port Security and associated functionality.')
hm2AgentPortSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 20, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hm2AgentPortSecurityEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentPortSecurityEntry.setDescription('Represents entry for port security table')
hm2AgentPortSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 20, 1, 2, 1, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentPortSecurityMode.setStatus('current')
if mibBuilder.loadTexts: hm2AgentPortSecurityMode.setDescription('Mode showing whether at port level security is enabled or not.')
hm2AgentPortSecurityDynamicLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 20, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 600)).clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentPortSecurityDynamicLimit.setStatus('current')
if mibBuilder.loadTexts: hm2AgentPortSecurityDynamicLimit.setDescription('This variable signifies the limit of dynamically locked MAC addresses allowed on a specific port.')
hm2AgentPortSecurityStaticLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 20, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentPortSecurityStaticLimit.setStatus('current')
if mibBuilder.loadTexts: hm2AgentPortSecurityStaticLimit.setDescription('This variable signifies the limit of statically locked MAC addresses allowed on a specific port.')
hm2AgentPortSecurityViolationTrapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 20, 1, 2, 1, 4), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentPortSecurityViolationTrapMode.setStatus('current')
if mibBuilder.loadTexts: hm2AgentPortSecurityViolationTrapMode.setDescription('This variable is used to enable or disable the sending of new violation traps designating when a packet with a disallowed MAC address is received on a locked port.')
hm2AgentPortSecurityStaticMACs = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 20, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentPortSecurityStaticMACs.setStatus('current')
if mibBuilder.loadTexts: hm2AgentPortSecurityStaticMACs.setDescription('This variable displays the statically locked MAC addresses for port. The list displayed in a particular fashion : 2 a0:b1:c2:d1:e3:a1,11 a0:b1:c2:d3:e4:f5 (i.e., VLAN MAC pairs separated by commas).')
hm2AgentPortSecurityLastDiscardedMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 20, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentPortSecurityLastDiscardedMAC.setStatus('current')
if mibBuilder.loadTexts: hm2AgentPortSecurityLastDiscardedMAC.setDescription('This variable displays the vlan-id and source MAC address of the last packet that was discarded on a locked port.')
hm2AgentPortSecurityMACAddressAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 20, 1, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentPortSecurityMACAddressAdd.setStatus('current')
if mibBuilder.loadTexts: hm2AgentPortSecurityMACAddressAdd.setDescription('This MIB variable accepts a VLAN id and MAC address to be added to the list of statically locked MAC addresses on a port. The VLAN id and MAC address combination would be entered in a particular fashion like :- 2 a0:b0:c0:d1:e2:a1(the vlan-id and MAC address separated by a blank-space).')
hm2AgentPortSecurityMACAddressRemove = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 20, 1, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentPortSecurityMACAddressRemove.setStatus('current')
if mibBuilder.loadTexts: hm2AgentPortSecurityMACAddressRemove.setDescription('This MIB variable accepts a VLAN id and MAC address to be removed from the list of statically locked MAC addresses on a port.. The VLAN id and MAC address combination would be entered in a particular fashion like :- 2 a0:b0:c0:d1:e2:a1(the vlan-id and MAC address separated by a blank-space).')
hm2AgentPortSecurityMACAddressMove = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 20, 1, 2, 1, 10), HmEnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentPortSecurityMACAddressMove.setStatus('current')
if mibBuilder.loadTexts: hm2AgentPortSecurityMACAddressMove.setDescription('When this object is enabled, all the dynamically locked MAC addresses will be moved to statically locked addresses on a port. GET operation on this object will display disable.')
hm2AgentPortSecurityDynamicCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 20, 1, 2, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentPortSecurityDynamicCount.setStatus('current')
if mibBuilder.loadTexts: hm2AgentPortSecurityDynamicCount.setDescription('The current number of dynamically locked MAC addresses on this port.')
hm2AgentPortSecurityStaticCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 20, 1, 2, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentPortSecurityStaticCount.setStatus('current')
if mibBuilder.loadTexts: hm2AgentPortSecurityStaticCount.setDescription('The current number of statically locked MAC addresses on this port.')
hm2AgentPortSecurityViolationTrapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 20, 1, 2, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentPortSecurityViolationTrapCount.setStatus('current')
if mibBuilder.loadTexts: hm2AgentPortSecurityViolationTrapCount.setDescription('The number of active violations for which a violation trap was sent on this port. This counter is only valid when hm2AgentPortSecurityViolationTrapMode is enabled')
hm2AgentPortSecurityViolationTrapFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 20, 1, 2, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentPortSecurityViolationTrapFrequency.setStatus('current')
if mibBuilder.loadTexts: hm2AgentPortSecurityViolationTrapFrequency.setDescription('The minimum seconds between two successive violation traps on this port.')
hm2AgentPortSecurityAutoDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 20, 1, 2, 1, 248), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentPortSecurityAutoDisable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentPortSecurityAutoDisable.setDescription('This object indicates whether a port is auto-disabled when the configured threshold is reached.')
hm2AgentPortSecurityDynamicTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 20, 1, 3), )
if mibBuilder.loadTexts: hm2AgentPortSecurityDynamicTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentPortSecurityDynamicTable.setDescription('A table for Port Security Dynamic and associated functionality.')
hm2AgentPortSecurityDynamicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 20, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HM2-PLATFORM-PORTSECURITY-MIB", "hm2AgentPortSecurityDynamicVLANId"), (0, "HM2-PLATFORM-PORTSECURITY-MIB", "hm2AgentPortSecurityDynamicMACAddress"))
if mibBuilder.loadTexts: hm2AgentPortSecurityDynamicEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentPortSecurityDynamicEntry.setDescription('Represents entry for port MAC Locking table')
hm2AgentPortSecurityDynamicVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 20, 1, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentPortSecurityDynamicVLANId.setStatus('current')
if mibBuilder.loadTexts: hm2AgentPortSecurityDynamicVLANId.setDescription('Source VLAN id of the packet that is received on the dynamically locked port.')
hm2AgentPortSecurityDynamicMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 20, 1, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentPortSecurityDynamicMACAddress.setStatus('current')
if mibBuilder.loadTexts: hm2AgentPortSecurityDynamicMACAddress.setDescription('Source MAC address of the packet that is received on the dynamically locked port.')
hm2AgentPortSecurityStaticTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 20, 1, 10), )
if mibBuilder.loadTexts: hm2AgentPortSecurityStaticTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentPortSecurityStaticTable.setDescription('A table for Port Security Static and associated functionality.')
hm2AgentPortSecurityStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 20, 1, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HM2-PLATFORM-PORTSECURITY-MIB", "hm2AgentPortSecurityStaticVLANId"), (0, "HM2-PLATFORM-PORTSECURITY-MIB", "hm2AgentPortSecurityStaticMACAddress"))
if mibBuilder.loadTexts: hm2AgentPortSecurityStaticEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentPortSecurityStaticEntry.setDescription('Represents entry for port MAC Locking table')
hm2AgentPortSecurityStaticVLANId = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 20, 1, 10, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentPortSecurityStaticVLANId.setStatus('current')
if mibBuilder.loadTexts: hm2AgentPortSecurityStaticVLANId.setDescription('VLAN id of the statically locked address .')
hm2AgentPortSecurityStaticMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 20, 1, 10, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentPortSecurityStaticMACAddress.setStatus('current')
if mibBuilder.loadTexts: hm2AgentPortSecurityStaticMACAddress.setDescription('Statically locked MAC address.')
hm2AgentPortSecurityTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 20, 2))
hm2AgentPortSecurityViolation = NotificationType((1, 3, 6, 1, 4, 1, 248, 12, 20, 2, 1)).setObjects(("IF-MIB", "ifIndex"), ("HM2-PLATFORM-PORTSECURITY-MIB", "hm2AgentPortSecurityLastDiscardedMAC"))
if mibBuilder.loadTexts: hm2AgentPortSecurityViolation.setStatus('current')
if mibBuilder.loadTexts: hm2AgentPortSecurityViolation.setDescription('Sent when a packet is received on a locked port with a source MAC address that is not allowed.')
mibBuilder.exportSymbols("HM2-PLATFORM-PORTSECURITY-MIB", hm2AgentPortSecurityStaticMACs=hm2AgentPortSecurityStaticMACs, hm2AgentPortSecurityTable=hm2AgentPortSecurityTable, hm2PlatformPortSecurity=hm2PlatformPortSecurity, hm2AgentPortSecurityMACAddressMove=hm2AgentPortSecurityMACAddressMove, hm2AgentPortSecurityGroup=hm2AgentPortSecurityGroup, hm2AgentPortSecurityDynamicCount=hm2AgentPortSecurityDynamicCount, hm2AgentPortSecurityStaticLimit=hm2AgentPortSecurityStaticLimit, hm2AgentPortSecurityStaticVLANId=hm2AgentPortSecurityStaticVLANId, hm2AgentPortSecurityViolationTrapCount=hm2AgentPortSecurityViolationTrapCount, hm2AgentPortSecurityViolationTrapMode=hm2AgentPortSecurityViolationTrapMode, hm2AgentPortSecurityStaticMACAddress=hm2AgentPortSecurityStaticMACAddress, hm2AgentPortSecurityEntry=hm2AgentPortSecurityEntry, hm2AgentPortSecurityMode=hm2AgentPortSecurityMode, hm2AgentPortSecurityViolation=hm2AgentPortSecurityViolation, hm2AgentPortSecurityViolationTrapFrequency=hm2AgentPortSecurityViolationTrapFrequency, hm2AgentPortSecurityStaticEntry=hm2AgentPortSecurityStaticEntry, hm2AgentPortSecurityTraps=hm2AgentPortSecurityTraps, hm2AgentPortSecurityMACAddressRemove=hm2AgentPortSecurityMACAddressRemove, hm2AgentPortSecurityDynamicMACAddress=hm2AgentPortSecurityDynamicMACAddress, hm2AgentPortSecurityStaticCount=hm2AgentPortSecurityStaticCount, hm2AgentGlobalPortSecurityMode=hm2AgentGlobalPortSecurityMode, hm2AgentPortSecurityMACAddressAdd=hm2AgentPortSecurityMACAddressAdd, hm2AgentPortSecurityDynamicTable=hm2AgentPortSecurityDynamicTable, hm2AgentPortSecurityStaticTable=hm2AgentPortSecurityStaticTable, PYSNMP_MODULE_ID=hm2PlatformPortSecurity, hm2AgentPortSecurityLastDiscardedMAC=hm2AgentPortSecurityLastDiscardedMAC, hm2AgentPortSecurityDynamicLimit=hm2AgentPortSecurityDynamicLimit, hm2AgentPortSecurityDynamicVLANId=hm2AgentPortSecurityDynamicVLANId, hm2AgentPortSecurityDynamicEntry=hm2AgentPortSecurityDynamicEntry, hm2AgentPortSecurityAutoDisable=hm2AgentPortSecurityAutoDisable)
