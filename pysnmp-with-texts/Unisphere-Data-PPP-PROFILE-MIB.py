#
# PySNMP MIB module Unisphere-Data-PPP-PROFILE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Unisphere-Data-PPP-PROFILE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:32:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, TimeTicks, ObjectIdentity, NotificationType, Unsigned32, IpAddress, MibIdentifier, iso, Gauge32, Bits, Counter64, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "TimeTicks", "ObjectIdentity", "NotificationType", "Unsigned32", "IpAddress", "MibIdentifier", "iso", "Gauge32", "Bits", "Counter64", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
usDataMibs, = mibBuilder.importSymbols("Unisphere-Data-MIBs", "usDataMibs")
UsdPppAuthentication, = mibBuilder.importSymbols("Unisphere-Data-PPP-MIB", "UsdPppAuthentication")
UsdEnable, UsdSetMap, UsdName = mibBuilder.importSymbols("Unisphere-Data-TC", "UsdEnable", "UsdSetMap", "UsdName")
usdPppProfileMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 45))
usdPppProfileMIB.setRevisions(('2002-01-25 14:00', '2002-01-16 17:58', '2002-01-08 19:43', '2001-10-02 12:41',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: usdPppProfileMIB.setRevisionsDescriptions(('Added usdPppProfileAuthenticatorVirtualRouter.', 'Added support for negotiation of the IPCP option netmask.', 'Added support for dynamic multilink PPP (MLPPP) interfaces.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: usdPppProfileMIB.setLastUpdated('200201251400Z')
if mibBuilder.loadTexts: usdPppProfileMIB.setOrganization('Unisphere Networks, Inc.')
if mibBuilder.loadTexts: usdPppProfileMIB.setContactInfo(' Unisphere Networks, Inc. Postal: 10 Technology Park Drive Westford, MA 01886 USA Tel: +1 978 589 5800 Email: mib@UnisphereNetworks.com')
if mibBuilder.loadTexts: usdPppProfileMIB.setDescription('The Point-to-Point Protocol (PPP) Profile MIB for the Unisphere Netowrks enterprise. This MIB provides configuration parameters that extend the tables found in the Unisphere-Data-PROFILE-MIB to support profiles for PPP interfaces.')
usdPppProfileObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 45, 1))
usdPppProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 45, 1, 1))
usdPppProfileTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 45, 1, 1, 1), )
if mibBuilder.loadTexts: usdPppProfileTable.setStatus('current')
if mibBuilder.loadTexts: usdPppProfileTable.setDescription('This table contains profiles for configuring PPP interfaces. Entries in this table are created/deleted as a side-effect of corresponding operations to the usdProfileNameTable in the Unisphere-Data-PROFILE-MIB.')
usdPppProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 45, 1, 1, 1, 1), ).setIndexNames((0, "Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileId"))
if mibBuilder.loadTexts: usdPppProfileEntry.setStatus('current')
if mibBuilder.loadTexts: usdPppProfileEntry.setDescription('A profile describing configuration of a PPP interface.')
usdPppProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 45, 1, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: usdPppProfileId.setStatus('current')
if mibBuilder.loadTexts: usdPppProfileId.setDescription('The integer identifier associated with this profile. A value for this identifier is determined by locating or creating a profile name in the Unisphere-Data-PROFILE-MIB.usdProfileNameTable.')
usdPppProfileSetMap = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 45, 1, 1, 1, 1, 2), UsdSetMap()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdPppProfileSetMap.setStatus('current')
if mibBuilder.loadTexts: usdPppProfileSetMap.setDescription("A bitmap representing which objects in this entry have been explicitly configured. See the definition of the UsdSetMap TEXTUAL-CONVENTION for details of use. The INDEX object(s) and this object are excluded from representation (i.e. their bits are never set). When a SET request does not explicitly configure UsdSetMap, bits in UsdSetMap are set as a side-effect of configuring other profile attributes in the same entry. If, however, a SET request explicitly configures UsdSetMap, the explicitly configured value overrides 1) any previous bit settings, and 2) any simultaneous 'side-effect' settings that would otherwise occur. Once set, bits can only be cleared by explicitly configuring UsdSetMap.")
usdPppProfileLcpMagicNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 45, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2))).clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdPppProfileLcpMagicNumber.setStatus('current')
if mibBuilder.loadTexts: usdPppProfileLcpMagicNumber.setDescription('If true(2) then the local node will attempt to perform Magic Number negotiation with the remote node. If false(1) then this negotiation is not performed. In any event, the local node will comply with any magic number negotiations attempted by the remote node, per the PPP specification.')
usdPppProfileLcpKeepalive = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 45, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(30, 300), )).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdPppProfileLcpKeepalive.setStatus('current')
if mibBuilder.loadTexts: usdPppProfileLcpKeepalive.setDescription('Keepalive interval in seconds. A value of zero disables keepalive. Keepalive is performed using LCP Echo.')
usdPppProfileLcpAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 45, 1, 1, 1, 1, 5), UsdPppAuthentication().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdPppProfileLcpAuthentication.setStatus('current')
if mibBuilder.loadTexts: usdPppProfileLcpAuthentication.setDescription('Specifies the type(s) of authentication, if any, to be negotiated with the peer: none No authentication is negotiated. pap PAP negotiation only. chap CHAP negotiation only. papChap PAP negotiation is attempted first; if fails, attempt CHAP. chapPap CHAP negotiation is attempted first; if fails, attempt PAP. Setting this object to none will set usdPppProfileAuthenticatorVirtualRouter object to an empty string.')
usdPppProfileIpPeerDnsPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 45, 1, 1, 1, 1, 6), UsdEnable().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdPppProfileIpPeerDnsPriority.setStatus('current')
if mibBuilder.loadTexts: usdPppProfileIpPeerDnsPriority.setDescription("When enabled, allows peer's DNS address to prevail in the event of a negotiation conflict; when disabled, the local PPP interface's DNS address prevails.")
usdPppProfileIpPeerWinsPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 45, 1, 1, 1, 1, 7), UsdEnable().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdPppProfileIpPeerWinsPriority.setStatus('current')
if mibBuilder.loadTexts: usdPppProfileIpPeerWinsPriority.setDescription("When enabled, allows peer's WINS address to prevail in the event of a negotiation conflict; when disabled, the local PPP interface's WINS address prevails.")
usdPppProfileLcpInitialMRU = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 45, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(64, 65535), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdPppProfileLcpInitialMRU.setStatus('current')
if mibBuilder.loadTexts: usdPppProfileLcpInitialMRU.setDescription('The initial Maximum Receive Unit (MRU) that the local PPP entity will advertise to the remote entity. If the value of this variable is 1 then the local PPP entity will advertise an MRU value determined by its underlying media interface.')
usdPppProfilePacketLog = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 45, 1, 1, 1, 1, 9), UsdEnable().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdPppProfilePacketLog.setStatus('current')
if mibBuilder.loadTexts: usdPppProfilePacketLog.setDescription('When enabled, allows packet logging on dynamic PPP interfaces.')
usdPppProfileStateLog = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 45, 1, 1, 1, 1, 10), UsdEnable().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdPppProfileStateLog.setStatus('current')
if mibBuilder.loadTexts: usdPppProfileStateLog.setDescription('When enabled, allows state machine logging on dynamic PPP interfaces.')
usdPppProfileChapMinChallengeLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 45, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 63)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdPppProfileChapMinChallengeLength.setStatus('current')
if mibBuilder.loadTexts: usdPppProfileChapMinChallengeLength.setDescription('Minimum value of the CHAP authenticator challenge length value. This value is never allowed to be set to a value greater than usdPppProfileChapMaxChallengeLength.')
usdPppProfileChapMaxChallengeLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 45, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 63)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdPppProfileChapMaxChallengeLength.setStatus('current')
if mibBuilder.loadTexts: usdPppProfileChapMaxChallengeLength.setDescription('Maximum value of the CHAP authenticator challenge length value. This value is never allowed to be set to a value less than usdPppLinkConfigChapMinChallengeLength.')
usdPppProfilePassiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 45, 1, 1, 1, 1, 13), UsdEnable().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdPppProfilePassiveMode.setStatus('current')
if mibBuilder.loadTexts: usdPppProfilePassiveMode.setDescription('When enabled, LCP state machine is forced into passive mode on lower layer UP message. It adds compatibility with slow and buggy clients.')
usdPppProfileMlppp = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 45, 1, 1, 1, 1, 14), UsdEnable().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdPppProfileMlppp.setStatus('current')
if mibBuilder.loadTexts: usdPppProfileMlppp.setDescription('Enables the creation of dynamic multi-link PPP interfaces.')
usdPppProfileIpcpNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 45, 1, 1, 1, 1, 15), UsdEnable().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdPppProfileIpcpNetmask.setStatus('current')
if mibBuilder.loadTexts: usdPppProfileIpcpNetmask.setDescription('Enables the negotiation of the IPCP option netmask (0x90) during IPCP negotiation.')
usdPppProfileAuthenticatorVirtualRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 45, 1, 1, 1, 1, 16), UsdName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdPppProfileAuthenticatorVirtualRouter.setStatus('current')
if mibBuilder.loadTexts: usdPppProfileAuthenticatorVirtualRouter.setDescription('The name of the virtual router (Unisphere-Data-ROUTER-MIB.usdRouterName) to be used for authentication on the PPP interface. Setting this object statically binds the authenticating virtual router with the PPP interface. If this object is not explicitly set or it is set to null string, then this object is ignored and the virtual router used for authentication is determined by other means. On a Set operation, if the value of this object is not null and does not correspond to an existing virtual router, then an inconsistentValue error is returned. Setting this object to non null string returns inconsistentValue value error if usdPppProfileConfigAuthentication object is none or not configured.')
usdPppProfileConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 45, 4))
usdPppProfileCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 45, 4, 1))
usdPppProfileGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 45, 4, 2))
usdPppProfileCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 45, 4, 1, 1)).setObjects(("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPppProfileCompliance = usdPppProfileCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: usdPppProfileCompliance.setDescription('Obsolete compliance statement for entities which implement the Unisphere PPP Profile MIB. This statement became obsolete when support was added for multi-link PPP interfaces.')
usdPppProfileCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 45, 4, 1, 2)).setObjects(("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPppProfileCompliance2 = usdPppProfileCompliance2.setStatus('obsolete')
if mibBuilder.loadTexts: usdPppProfileCompliance2.setDescription('Obsolete compliance statement for entities which implement the Unisphere PPP Profile MIB. This statement became obsolete when support was added for negotiation of IPCP option netmask.')
usdPppProfileCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 45, 4, 1, 3)).setObjects(("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileGroup3"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPppProfileCompliance3 = usdPppProfileCompliance3.setStatus('obsolete')
if mibBuilder.loadTexts: usdPppProfileCompliance3.setDescription('Obsolete compliance statement for entities which implement the Unisphere PPP Profile MIB. This statement became obsolete when the usdPppProfileAuthenticatorVirtualRouter object was added.')
usdPppProfileCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 45, 4, 1, 4)).setObjects(("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileGroup4"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPppProfileCompliance4 = usdPppProfileCompliance4.setStatus('current')
if mibBuilder.loadTexts: usdPppProfileCompliance4.setDescription('The compliance statement for entities which implement the Unisphere PPP Profile MIB.')
usdPppProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 45, 4, 2, 1)).setObjects(("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileSetMap"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileLcpMagicNumber"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileLcpKeepalive"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileLcpAuthentication"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileIpPeerDnsPriority"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileIpPeerWinsPriority"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileLcpInitialMRU"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfilePacketLog"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileStateLog"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileChapMinChallengeLength"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileChapMaxChallengeLength"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfilePassiveMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPppProfileGroup = usdPppProfileGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdPppProfileGroup.setDescription('Obsolete collection of objects providing management of profile functionality for PPP interfaces in a Unisphere product. This group became obsolete when support was added for MLPPP.')
usdPppProfileGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 45, 4, 2, 2)).setObjects(("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileSetMap"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileLcpMagicNumber"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileLcpKeepalive"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileLcpAuthentication"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileIpPeerDnsPriority"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileIpPeerWinsPriority"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileLcpInitialMRU"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfilePacketLog"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileStateLog"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileChapMinChallengeLength"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileChapMaxChallengeLength"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfilePassiveMode"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileMlppp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPppProfileGroup2 = usdPppProfileGroup2.setStatus('obsolete')
if mibBuilder.loadTexts: usdPppProfileGroup2.setDescription('Obsolete collection of objects providing management of profile functionality for PPP interfaces in a Unisphere product. This group became obsolete when support was added for negotiation of IPCP option netmask.')
usdPppProfileGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 45, 4, 2, 3)).setObjects(("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileSetMap"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileLcpMagicNumber"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileLcpKeepalive"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileLcpAuthentication"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileIpPeerDnsPriority"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileIpPeerWinsPriority"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileLcpInitialMRU"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfilePacketLog"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileStateLog"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileChapMinChallengeLength"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileChapMaxChallengeLength"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfilePassiveMode"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileMlppp"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileIpcpNetmask"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPppProfileGroup3 = usdPppProfileGroup3.setStatus('obsolete')
if mibBuilder.loadTexts: usdPppProfileGroup3.setDescription('Obsolete collection of objects providing management of profile functionality for PPP interfaces in a Unisphere product. This group became obsolete when the usdPppProfileAuthenticatorVirtualRouter object was added.')
usdPppProfileGroup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 45, 4, 2, 4)).setObjects(("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileSetMap"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileLcpMagicNumber"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileLcpKeepalive"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileLcpAuthentication"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileIpPeerDnsPriority"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileIpPeerWinsPriority"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileLcpInitialMRU"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfilePacketLog"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileStateLog"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileChapMinChallengeLength"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileChapMaxChallengeLength"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfilePassiveMode"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileMlppp"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileIpcpNetmask"), ("Unisphere-Data-PPP-PROFILE-MIB", "usdPppProfileAuthenticatorVirtualRouter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdPppProfileGroup4 = usdPppProfileGroup4.setStatus('current')
if mibBuilder.loadTexts: usdPppProfileGroup4.setDescription('A collection of objects providing management of profile functionality for PPP interfaces in a Unisphere product.')
mibBuilder.exportSymbols("Unisphere-Data-PPP-PROFILE-MIB", usdPppProfileGroup4=usdPppProfileGroup4, usdPppProfileAuthenticatorVirtualRouter=usdPppProfileAuthenticatorVirtualRouter, usdPppProfileGroup3=usdPppProfileGroup3, usdPppProfileIpPeerWinsPriority=usdPppProfileIpPeerWinsPriority, usdPppProfileMIB=usdPppProfileMIB, usdPppProfileEntry=usdPppProfileEntry, usdPppProfileTable=usdPppProfileTable, usdPppProfileIpPeerDnsPriority=usdPppProfileIpPeerDnsPriority, usdPppProfileChapMaxChallengeLength=usdPppProfileChapMaxChallengeLength, usdPppProfileCompliance2=usdPppProfileCompliance2, usdPppProfileSetMap=usdPppProfileSetMap, usdPppProfileGroup2=usdPppProfileGroup2, usdPppProfileMlppp=usdPppProfileMlppp, usdPppProfile=usdPppProfile, usdPppProfileCompliance3=usdPppProfileCompliance3, usdPppProfilePassiveMode=usdPppProfilePassiveMode, usdPppProfileLcpKeepalive=usdPppProfileLcpKeepalive, usdPppProfileObjects=usdPppProfileObjects, usdPppProfileConformance=usdPppProfileConformance, usdPppProfileStateLog=usdPppProfileStateLog, usdPppProfileGroups=usdPppProfileGroups, usdPppProfileChapMinChallengeLength=usdPppProfileChapMinChallengeLength, usdPppProfileGroup=usdPppProfileGroup, PYSNMP_MODULE_ID=usdPppProfileMIB, usdPppProfileCompliance=usdPppProfileCompliance, usdPppProfileLcpInitialMRU=usdPppProfileLcpInitialMRU, usdPppProfileCompliance4=usdPppProfileCompliance4, usdPppProfileCompliances=usdPppProfileCompliances, usdPppProfilePacketLog=usdPppProfilePacketLog, usdPppProfileLcpAuthentication=usdPppProfileLcpAuthentication, usdPppProfileLcpMagicNumber=usdPppProfileLcpMagicNumber, usdPppProfileIpcpNetmask=usdPppProfileIpcpNetmask, usdPppProfileId=usdPppProfileId)
