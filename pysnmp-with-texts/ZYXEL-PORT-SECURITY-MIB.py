#
# PySNMP MIB module ZYXEL-PORT-SECURITY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZYXEL-PORT-SECURITY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:51:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
dot1dBasePort, = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBasePort")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, NotificationType, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, iso, Integer32, Unsigned32, IpAddress, Counter64, ModuleIdentity, ObjectIdentity, Gauge32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "NotificationType", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "iso", "Integer32", "Unsigned32", "IpAddress", "Counter64", "ModuleIdentity", "ObjectIdentity", "Gauge32", "TimeTicks")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
esMgmt, = mibBuilder.importSymbols("ZYXEL-ES-SMI", "esMgmt")
zyxelPortSecurity = ModuleIdentity((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 66))
if mibBuilder.loadTexts: zyxelPortSecurity.setLastUpdated('201207010000Z')
if mibBuilder.loadTexts: zyxelPortSecurity.setOrganization('Enterprise Solution ZyXEL')
if mibBuilder.loadTexts: zyxelPortSecurity.setContactInfo('')
if mibBuilder.loadTexts: zyxelPortSecurity.setDescription('The subtree for dhcp')
zyxelPortSecuritySetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 66, 1))
zyPortSecurityState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 66, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPortSecurityState.setStatus('current')
if mibBuilder.loadTexts: zyPortSecurityState.setDescription('Enable/Disable port security on the switch.')
zyxelPortSecurityPortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 66, 1, 2), )
if mibBuilder.loadTexts: zyxelPortSecurityPortTable.setStatus('current')
if mibBuilder.loadTexts: zyxelPortSecurityPortTable.setDescription('The table contains port security on the specified port configuration. ')
zyxelPortSecurityPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 66, 1, 2, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: zyxelPortSecurityPortEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelPortSecurityPortEntry.setDescription('An entry contains port security on the specified port configuration. ')
zyPortSecurityPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 66, 1, 2, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPortSecurityPortState.setStatus('current')
if mibBuilder.loadTexts: zyPortSecurityPortState.setDescription('Enable/Disable Port Security on the specified port. Enable(1) means this port only accept frames from static MAC addresses that are configured for the port,and dynamic MAC address frames up to the number specified by zyxelPortSecurityPortMacLimit object.')
zyPortSecurityPortLearnState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 66, 1, 2, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPortSecurityPortLearnState.setStatus('current')
if mibBuilder.loadTexts: zyPortSecurityPortLearnState.setDescription('Enable/Disable MAC address learning on the specified port. MAC address learning reduces outgoing broadcast traffic. For MAC address learning to occur on a port, the port itself must be active with address learning enabled. ')
zyPortSecurityPortMacLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 66, 1, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPortSecurityPortMacLimit.setStatus('current')
if mibBuilder.loadTexts: zyPortSecurityPortMacLimit.setDescription('Set this field to limit the number of (dynamic) MAC addresses that may be learned on a port. For example, if you set this field to 5 on port 2, then only the devices with these five learned MAC addresses may access port 2 at any one time. A sixth device must wait until one of the five learned MAC addresses ages out. ')
zyPortSecurityMacFreeze = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 66, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPortSecurityMacFreeze.setStatus('current')
if mibBuilder.loadTexts: zyPortSecurityMacFreeze.setDescription("This entry is used to execute MacFreeze action to port. It's meaningless while reading this entry.")
zyPortSecurityMaxNumberOfVMLs = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 66, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyPortSecurityMaxNumberOfVMLs.setStatus('current')
if mibBuilder.loadTexts: zyPortSecurityMaxNumberOfVMLs.setDescription('The maximum number of port security VML that can be created.')
zyxelPortSecurityVMLTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 66, 1, 5), )
if mibBuilder.loadTexts: zyxelPortSecurityVMLTable.setStatus('current')
if mibBuilder.loadTexts: zyxelPortSecurityVMLTable.setDescription('The table contains VLAN MAC address limit on the specified port for the specified VLAN configuration. ')
zyxelPortSecurityVMLEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 66, 1, 5, 1), ).setIndexNames((0, "ZYXEL-PORT-SECURITY-MIB", "zyPortSecurityVMLPort"), (0, "ZYXEL-PORT-SECURITY-MIB", "zyPortSecurityVMLVID"))
if mibBuilder.loadTexts: zyxelPortSecurityVMLEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelPortSecurityVMLEntry.setDescription('An entry contains VLAN MAC address limit on the specified port for the specified VLAN configuration. ')
zyPortSecurityVMLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 66, 1, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: zyPortSecurityVMLPort.setStatus('current')
if mibBuilder.loadTexts: zyPortSecurityVMLPort.setDescription('The configured port number of VLAN MAC Limit.')
zyPortSecurityVMLVID = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 66, 1, 5, 1, 2), Integer32())
if mibBuilder.loadTexts: zyPortSecurityVMLVID.setStatus('current')
if mibBuilder.loadTexts: zyPortSecurityVMLVID.setDescription('The configured VLAN number of VLAN MAC Limit.')
zyPortSecurityVMLMacLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 66, 1, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyPortSecurityVMLMacLimit.setStatus('current')
if mibBuilder.loadTexts: zyPortSecurityVMLMacLimit.setDescription('Set this field to limit the number of (dynamic) MAC addresses that may be learned on a port in a specified VLAN. For example, if you set this field to 5 on port 2 in VLAN 3, then only the devices with these five learned MAC addresses may access port 2 in VLAN 3 at any one time. A sixth device would have to wait until one of the five learned MAC addresses aged out. ')
zyPortSecurityVMLRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 66, 1, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zyPortSecurityVMLRowStatus.setStatus('current')
if mibBuilder.loadTexts: zyPortSecurityVMLRowStatus.setDescription('This object allows entries to be created and deleted from the portSecurityVMLTable.')
mibBuilder.exportSymbols("ZYXEL-PORT-SECURITY-MIB", zyPortSecurityPortLearnState=zyPortSecurityPortLearnState, zyPortSecurityVMLMacLimit=zyPortSecurityVMLMacLimit, zyPortSecurityPortMacLimit=zyPortSecurityPortMacLimit, zyxelPortSecurityVMLEntry=zyxelPortSecurityVMLEntry, zyPortSecurityVMLVID=zyPortSecurityVMLVID, zyPortSecurityVMLRowStatus=zyPortSecurityVMLRowStatus, zyxelPortSecurityPortTable=zyxelPortSecurityPortTable, zyxelPortSecuritySetup=zyxelPortSecuritySetup, zyxelPortSecurityPortEntry=zyxelPortSecurityPortEntry, zyPortSecurityState=zyPortSecurityState, zyPortSecurityPortState=zyPortSecurityPortState, PYSNMP_MODULE_ID=zyxelPortSecurity, zyPortSecurityMacFreeze=zyPortSecurityMacFreeze, zyxelPortSecurity=zyxelPortSecurity, zyxelPortSecurityVMLTable=zyxelPortSecurityVMLTable, zyPortSecurityVMLPort=zyPortSecurityVMLPort, zyPortSecurityMaxNumberOfVMLs=zyPortSecurityMaxNumberOfVMLs)
