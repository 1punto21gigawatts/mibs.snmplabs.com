#
# PySNMP MIB module G6-HARDWARE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/G6-HARDWARE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:17:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
g6, = mibBuilder.importSymbols("MICROSENS-G6-MIB", "g6")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Gauge32, MibIdentifier, Bits, IpAddress, Unsigned32, Counter64, TimeTicks, ModuleIdentity, ObjectIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, enterprises, iso = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Gauge32", "MibIdentifier", "Bits", "IpAddress", "Unsigned32", "Counter64", "TimeTicks", "ModuleIdentity", "ObjectIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "enterprises", "iso")
TextualConvention, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "MacAddress")
device = ModuleIdentity((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1))
device.setRevisions(('2015-05-22 10:59',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: device.setRevisionsDescriptions(('File creation',))
if mibBuilder.loadTexts: device.setLastUpdated('201505221059Z')
if mibBuilder.loadTexts: device.setOrganization('MICROSENS GmbH & Co. KG')
if mibBuilder.loadTexts: device.setContactInfo('Kueferstrasse 16 D-59067 Hamm Germany support@microsens.de http://www.microsens.de')
if mibBuilder.loadTexts: device.setDescription('Microsens private MIB for Generation 6 Ethernet Switches')
hardware = MibIdentifier((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31))
hardwareLedTest = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hardwareLedTest.setStatus('current')
if mibBuilder.loadTexts: hardwareLedTest.setDescription('Runs a leds test whereby all LED light up in all possible colors for checking their function. The tests terminates within a few seconds.')
hardwareLedMode = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("dynamic", 0), ("static", 1), ("quiet", 2), ("dark", 3), ("lightshow", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hardwareLedMode.setStatus('current')
if mibBuilder.loadTexts: hardwareLedMode.setDescription('The LED display can be configured to be less intrusive.')
hardwarePowerSupply1Monitored = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hardwarePowerSupply1Monitored.setStatus('current')
if mibBuilder.loadTexts: hardwarePowerSupply1Monitored.setDescription('When disabled a missing power supply 1 will not turn the associated led red on failure. Do this when single power supply 2 operation is used or when the device is powered soley by PoE. This feature only applies to industrial switches.')
hardwarePowerSupply2Monitored = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hardwarePowerSupply2Monitored.setStatus('current')
if mibBuilder.loadTexts: hardwarePowerSupply2Monitored.setDescription('When disabled a missing power supply 2 will not turn the associated led red on failure. Do this when single power supply 1 operation is used or when the device is powered soley by PoE. This feature only applies to industrial switches.')
hardwareFactoryResetButton = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hardwareFactoryResetButton.setStatus('current')
if mibBuilder.loadTexts: hardwareFactoryResetButton.setDescription('When disabled the factory button will trigger the factory reset function when pressed for a long time. The IP discover function upon a short button click is not affected. ')
cableTestConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 6), )
if mibBuilder.loadTexts: cableTestConfigTable.setStatus('current')
if mibBuilder.loadTexts: cableTestConfigTable.setDescription('The cable tester allows for detection of copper cable faults and can even detect where the fault is located.')
cableTestConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 6, 1), ).setIndexNames((0, "G6-HARDWARE-MIB", "cableTestConfigPortIndex"))
if mibBuilder.loadTexts: cableTestConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cableTestConfigEntry.setDescription('')
cableTestConfigPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24)))
if mibBuilder.loadTexts: cableTestConfigPortIndex.setStatus('current')
if mibBuilder.loadTexts: cableTestConfigPortIndex.setDescription('Automatically generated')
cableTestConfigEnableAutoCableTest = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableTestConfigEnableAutoCableTest.setStatus('current')
if mibBuilder.loadTexts: cableTestConfigEnableAutoCableTest.setDescription('When enabled a cable test is performed each time the link goes down. The test is only performed for copper ports or dual media ports in copper mode.')
cableTestConfigEventGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("anyChange", 1), ("cableUnplugged", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableTestConfigEventGeneration.setStatus('current')
if mibBuilder.loadTexts: cableTestConfigEventGeneration.setDescription('When the cable termination status changes an event can be raised.')
cableTestConfigStartTestNow = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 6, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableTestConfigStartTestNow.setStatus('current')
if mibBuilder.loadTexts: cableTestConfigStartTestNow.setDescription('May be used to manually start a cable test. ATTENTION: If the port is in link up status it will be forced to link down first. This will disrupt the current data traffic. Therefore, type start_test_now = CONFIRM.')
ioSignalConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 7), )
if mibBuilder.loadTexts: ioSignalConfigTable.setStatus('current')
if mibBuilder.loadTexts: ioSignalConfigTable.setDescription('')
ioSignalConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 7, 1), ).setIndexNames((0, "G6-HARDWARE-MIB", "ioSignalConfigIndex"))
if mibBuilder.loadTexts: ioSignalConfigEntry.setStatus('current')
if mibBuilder.loadTexts: ioSignalConfigEntry.setDescription('')
ioSignalConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: ioSignalConfigIndex.setStatus('current')
if mibBuilder.loadTexts: ioSignalConfigIndex.setDescription('Automatically generated')
ioSignalConfigSignalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("static", 0), ("ledBlink", 1), ("relayBlink", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioSignalConfigSignalMode.setStatus('current')
if mibBuilder.loadTexts: ioSignalConfigSignalMode.setDescription('Permit setting of io signal LEDs and relays to static or blink blink mode for increased visualization.')
ioSignalConfigInput1Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("alarmWhenHigh", 1), ("alarmWhenLow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioSignalConfigInput1Mode.setStatus('current')
if mibBuilder.loadTexts: ioSignalConfigInput1Mode.setDescription('When this function is activated the external alarm input 1 is monitored. Note: alarm inputs are not available in all product versions. ')
ioSignalConfigInput1Name = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 7, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioSignalConfigInput1Name.setStatus('current')
if mibBuilder.loadTexts: ioSignalConfigInput1Name.setDescription('A customer specific name can be specified for input 1. This name will appear in the associated event messages.')
ioSignalConfigInput2Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("alarmWhenHigh", 1), ("alarmWhenLow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioSignalConfigInput2Mode.setStatus('current')
if mibBuilder.loadTexts: ioSignalConfigInput2Mode.setDescription('When this function is activated the external alarm input 2 is monitored. Note: alarm inputs are not available in all product versions. ')
ioSignalConfigInput2Name = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 7, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioSignalConfigInput2Name.setStatus('current')
if mibBuilder.loadTexts: ioSignalConfigInput2Name.setDescription('A customer specific name can be specified for input 2. This name will appear in the associated event messages.')
ioSignalConfigOutput1Trigger = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("whileRunning", 1), ("redundancyFail", 2), ("highTemp", 3), ("off", 4), ("on", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioSignalConfigOutput1Trigger.setStatus('current')
if mibBuilder.loadTexts: ioSignalConfigOutput1Trigger.setDescription('Defines on which condition the alarm relay 1 is activated. Note: alarm relays are not available in all product versions.')
ioSignalConfigOutput1Name = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 7, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioSignalConfigOutput1Name.setStatus('current')
if mibBuilder.loadTexts: ioSignalConfigOutput1Name.setDescription('A customer specific name can be specified for alarm output 1. This name will appear in the associated event messages.')
ioSignalConfigOutput2Trigger = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("whileRunning", 1), ("redundancyFail", 2), ("highTemp", 3), ("off", 4), ("on", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioSignalConfigOutput2Trigger.setStatus('current')
if mibBuilder.loadTexts: ioSignalConfigOutput2Trigger.setDescription('Defines on which condition the alarm relay 2 is activated. Note: alarm relays are not available in all product versions.')
ioSignalConfigOutput2Name = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 7, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioSignalConfigOutput2Name.setStatus('current')
if mibBuilder.loadTexts: ioSignalConfigOutput2Name.setDescription('A customer specific name can be specified for alarm output 2. This name will appear in the associated event messages.')
hardwarePowerSupply1Status = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 0), ("overload", 1), ("inputLow", 2), ("fuseFail", 3), ("notApplicable", 4), ("unmanaged", 5), ("notInstalled", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwarePowerSupply1Status.setStatus('current')
if mibBuilder.loadTexts: hardwarePowerSupply1Status.setDescription('Displays state of primary supply or only supply for single supply systems.')
hardwarePowerSupply2Status = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 0), ("overload", 1), ("inputLow", 2), ("fuseFail", 3), ("notApplicable", 4), ("unmanaged", 5), ("notInstalled", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwarePowerSupply2Status.setStatus('current')
if mibBuilder.loadTexts: hardwarePowerSupply2Status.setDescription('Displays state of secondary supply if available.')
hardwareRunningOnPoe = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 102), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareRunningOnPoe.setStatus('current')
if mibBuilder.loadTexts: hardwareRunningOnPoe.setDescription('When set the unit currently operates on the PD input via PoE.')
hardwareFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 103), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unused", 0), ("ok", 1), ("degraded", 2), ("fail", 3), ("missing", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareFanStatus.setStatus('current')
if mibBuilder.loadTexts: hardwareFanStatus.setDescription('Displays state of cooling fan. Indicates UNUSED in fanless devices.')
hardwareSdCardStatus = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 104), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("empty", 0), ("inserted", 1), ("writeProtected", 2), ("writing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareSdCardStatus.setStatus('current')
if mibBuilder.loadTexts: hardwareSdCardStatus.setDescription('Current status of SD-card.')
hardwareNumOfPorts = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 105), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareNumOfPorts.setStatus('current')
if mibBuilder.loadTexts: hardwareNumOfPorts.setDescription('Total number of Ethernet ports this hardware offers.')
hardwareMaskOfExistingPorts = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 106), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareMaskOfExistingPorts.setStatus('current')
if mibBuilder.loadTexts: hardwareMaskOfExistingPorts.setDescription('Set bit for each port that physically exisiting and could be in use.')
hardwareMaskOfSfpPorts = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 107), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareMaskOfSfpPorts.setStatus('current')
if mibBuilder.loadTexts: hardwareMaskOfSfpPorts.setDescription('Marks which ports support SFPs.')
hardwareMaskOfPoePorts = MibScalar((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 108), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hardwareMaskOfPoePorts.setStatus('current')
if mibBuilder.loadTexts: hardwareMaskOfPoePorts.setDescription('Marks which ports support PoE output.')
moduleInfoTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 109), )
if mibBuilder.loadTexts: moduleInfoTable.setStatus('current')
if mibBuilder.loadTexts: moduleInfoTable.setDescription('This section indicates which modules are inserted in the optional extension slots.')
moduleInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 109, 1), ).setIndexNames((0, "G6-HARDWARE-MIB", "moduleInfoIndex"))
if mibBuilder.loadTexts: moduleInfoEntry.setStatus('current')
if mibBuilder.loadTexts: moduleInfoEntry.setDescription('')
moduleInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 109, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: moduleInfoIndex.setStatus('current')
if mibBuilder.loadTexts: moduleInfoIndex.setDescription('Automatically generated')
moduleInfoUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 109, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notPresent", 0), ("baseUnit", 1), ("extension", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleInfoUnitType.setStatus('current')
if mibBuilder.loadTexts: moduleInfoUnitType.setDescription('Identfies the general type of module.')
moduleInfoArticleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 109, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleInfoArticleNumber.setStatus('current')
if mibBuilder.loadTexts: moduleInfoArticleNumber.setDescription('The article number of the module in this slot.')
moduleInfoSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 109, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleInfoSerialNumber.setStatus('current')
if mibBuilder.loadTexts: moduleInfoSerialNumber.setDescription('The serial number of the module in this slot.')
moduleInfoHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 109, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleInfoHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: moduleInfoHardwareVersion.setDescription('This device hardware revision number.')
moduleInfoProjectNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 109, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleInfoProjectNumber.setStatus('current')
if mibBuilder.loadTexts: moduleInfoProjectNumber.setDescription('MICROSENS project number.')
moduleInfoOccupiedSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 109, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleInfoOccupiedSlots.setStatus('current')
if mibBuilder.loadTexts: moduleInfoOccupiedSlots.setDescription('Lists all slots contained in this module.')
moduleInfoDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 109, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleInfoDescription.setStatus('current')
if mibBuilder.loadTexts: moduleInfoDescription.setDescription('Feature summary of the module.')
slotInfoTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 110), )
if mibBuilder.loadTexts: slotInfoTable.setStatus('current')
if mibBuilder.loadTexts: slotInfoTable.setDescription('This section indicates which modules are inserted in the optional extension slots.')
slotInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 110, 1), ).setIndexNames((0, "G6-HARDWARE-MIB", "slotInfoIndex"))
if mibBuilder.loadTexts: slotInfoEntry.setStatus('current')
if mibBuilder.loadTexts: slotInfoEntry.setDescription('')
slotInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 110, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: slotInfoIndex.setStatus('current')
if mibBuilder.loadTexts: slotInfoIndex.setDescription('Automatically generated')
slotInfoBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 110, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notPresent", 0), ("undefined", 1), ("power", 2), ("cpu", 3), ("port", 4), ("io", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotInfoBoardType.setStatus('current')
if mibBuilder.loadTexts: slotInfoBoardType.setDescription('General type of board function')
slotInfoBoardId = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 110, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotInfoBoardId.setStatus('current')
if mibBuilder.loadTexts: slotInfoBoardId.setDescription('This identifies the board type for internal operation.')
slotInfoVersionBits = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 110, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: slotInfoVersionBits.setStatus('current')
if mibBuilder.loadTexts: slotInfoVersionBits.setDescription('Version bits from hardware or backplane.')
portInfoTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 111), )
if mibBuilder.loadTexts: portInfoTable.setStatus('current')
if mibBuilder.loadTexts: portInfoTable.setDescription('Used to map physical to logical port ids.')
portInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 111, 1), ).setIndexNames((0, "G6-HARDWARE-MIB", "portInfoPortIndex"))
if mibBuilder.loadTexts: portInfoEntry.setStatus('current')
if mibBuilder.loadTexts: portInfoEntry.setDescription('')
portInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 111, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24)))
if mibBuilder.loadTexts: portInfoPortIndex.setStatus('current')
if mibBuilder.loadTexts: portInfoPortIndex.setDescription('Automatically generated')
portInfoSystemSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 111, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoSystemSlot.setStatus('current')
if mibBuilder.loadTexts: portInfoSystemSlot.setDescription('Describes on which system slot this port index is located.')
portInfoSwitchPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 111, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoSwitchPort.setStatus('current')
if mibBuilder.loadTexts: portInfoSwitchPort.setDescription('Describes on which switch port this port index is located.')
portInfoUserSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 111, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoUserSlot.setStatus('current')
if mibBuilder.loadTexts: portInfoUserSlot.setDescription('Slot number as seen by customer.')
portInfoUserPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 111, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoUserPort.setStatus('current')
if mibBuilder.loadTexts: portInfoUserPort.setDescription('Port number as seen by customer.')
portInfoSnmpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 111, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoSnmpPort.setStatus('current')
if mibBuilder.loadTexts: portInfoSnmpPort.setDescription('Slot and port representation as used in SNMP. Formula is Slot*100 + Port.')
portInfoSnmpInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 111, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoSnmpInstance.setStatus('current')
if mibBuilder.loadTexts: portInfoSnmpInstance.setDescription('Port instance counting from 0 to number of ports')
portInfoHardwarePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 111, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoHardwarePort.setStatus('current')
if mibBuilder.loadTexts: portInfoHardwarePort.setDescription('Port number as used internally. Ports may not be in sequential order.')
portInfoInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 111, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("copper", 0), ("optical", 1), ("dualMedia", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoInterfaceType.setStatus('current')
if mibBuilder.loadTexts: portInfoInterfaceType.setDescription('Identifies port as copper or optical. Also used for snmp ifType definition')
portInfoProperties = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 111, 1, 10), Bits().clone(namedValues=NamedValues(("internal", 0), ("ms10Mb", 1), ("ms100Mb", 2), ("ms1000Mb", 3), ("rj45", 4), ("sfp", 5), ("ms1x9", 6), ("poe", 7), ("poePlus", 8), ("pd", 9), ("dualMedia", 10), ("linkPort", 11), ("csfp", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoProperties.setStatus('current')
if mibBuilder.loadTexts: portInfoProperties.setDescription('Describes which functions the port can support.')
portLedsTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 112), )
if mibBuilder.loadTexts: portLedsTable.setStatus('current')
if mibBuilder.loadTexts: portLedsTable.setDescription('This section indicates the state of all port related LEDs.')
portLedsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 112, 1), ).setIndexNames((0, "G6-HARDWARE-MIB", "portLedsPortIndex"))
if mibBuilder.loadTexts: portLedsEntry.setStatus('current')
if mibBuilder.loadTexts: portLedsEntry.setDescription('')
portLedsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 112, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)))
if mibBuilder.loadTexts: portLedsPortIndex.setStatus('current')
if mibBuilder.loadTexts: portLedsPortIndex.setDescription('Automatically generated')
portLedsEthernetColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 112, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 0), ("blue", 1), ("green", 2), ("red", 3), ("orange", 4), ("cyan", 5), ("magenta", 6), ("white", 7), ("noLed", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLedsEthernetColor.setStatus('current')
if mibBuilder.loadTexts: portLedsEthernetColor.setDescription('Ethernet Link LED.')
portLedsEthernetBlinking = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 112, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLedsEthernetBlinking.setStatus('current')
if mibBuilder.loadTexts: portLedsEthernetBlinking.setDescription('Ethernet Link LED.')
portLedsPoeColor = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 112, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 0), ("blue", 1), ("green", 2), ("red", 3), ("orange", 4), ("cyan", 5), ("magenta", 6), ("white", 7), ("noLed", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLedsPoeColor.setStatus('current')
if mibBuilder.loadTexts: portLedsPoeColor.setDescription('Power over Ethernet LED. For optical ports this indicates signal detect status.')
portLedsPoeBlinking = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 112, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLedsPoeBlinking.setStatus('current')
if mibBuilder.loadTexts: portLedsPoeBlinking.setDescription('Power over Ethernet LED. For optical ports this indicates signal detect status.')
deviceLedsTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113), )
if mibBuilder.loadTexts: deviceLedsTable.setStatus('current')
if mibBuilder.loadTexts: deviceLedsTable.setDescription('This section indicates the state of all LEDs which are not port related. Please note: Not every unit offers all LEDs.')
deviceLedsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113, 1), ).setIndexNames((0, "G6-HARDWARE-MIB", "deviceLedsIndex"))
if mibBuilder.loadTexts: deviceLedsEntry.setStatus('current')
if mibBuilder.loadTexts: deviceLedsEntry.setDescription('')
deviceLedsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: deviceLedsIndex.setStatus('current')
if mibBuilder.loadTexts: deviceLedsIndex.setDescription('Automatically generated')
deviceLedsSystem1Color = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 0), ("blue", 1), ("green", 2), ("red", 3), ("orange", 4), ("cyan", 5), ("magenta", 6), ("white", 7), ("noLed", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLedsSystem1Color.setStatus('current')
if mibBuilder.loadTexts: deviceLedsSystem1Color.setDescription("This status corresponds to 'sys' LED on some devices.")
deviceLedsSystem1Blinking = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLedsSystem1Blinking.setStatus('current')
if mibBuilder.loadTexts: deviceLedsSystem1Blinking.setDescription("This status corresponds to 'sys' LED on some devices.")
deviceLedsSystem2Color = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 0), ("blue", 1), ("green", 2), ("red", 3), ("orange", 4), ("cyan", 5), ("magenta", 6), ("white", 7), ("noLed", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLedsSystem2Color.setStatus('current')
if mibBuilder.loadTexts: deviceLedsSystem2Color.setDescription('Displays external management activity.')
deviceLedsSystem2Blinking = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLedsSystem2Blinking.setStatus('current')
if mibBuilder.loadTexts: deviceLedsSystem2Blinking.setDescription('Displays external management activity.')
deviceLedsPowerOn1Color = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 0), ("blue", 1), ("green", 2), ("red", 3), ("orange", 4), ("cyan", 5), ("magenta", 6), ("white", 7), ("noLed", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLedsPowerOn1Color.setStatus('current')
if mibBuilder.loadTexts: deviceLedsPowerOn1Color.setDescription("This status corresponds to 'on' LED on some devices.")
deviceLedsPowerOn1Blinking = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLedsPowerOn1Blinking.setStatus('current')
if mibBuilder.loadTexts: deviceLedsPowerOn1Blinking.setDescription("This status corresponds to 'on' LED on some devices.")
deviceLedsPowerOn2Color = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 0), ("blue", 1), ("green", 2), ("red", 3), ("orange", 4), ("cyan", 5), ("magenta", 6), ("white", 7), ("noLed", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLedsPowerOn2Color.setStatus('current')
if mibBuilder.loadTexts: deviceLedsPowerOn2Color.setDescription('Alternative power input LED.')
deviceLedsPowerOn2Blinking = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLedsPowerOn2Blinking.setStatus('current')
if mibBuilder.loadTexts: deviceLedsPowerOn2Blinking.setDescription('Alternative power input LED.')
deviceLedsRing1Color = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 0), ("blue", 1), ("green", 2), ("red", 3), ("orange", 4), ("cyan", 5), ("magenta", 6), ("white", 7), ("noLed", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLedsRing1Color.setStatus('current')
if mibBuilder.loadTexts: deviceLedsRing1Color.setDescription('This LED is used when ring protection is enabled.')
deviceLedsRing1Blinking = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLedsRing1Blinking.setStatus('current')
if mibBuilder.loadTexts: deviceLedsRing1Blinking.setDescription('This LED is used when ring protection is enabled.')
deviceLedsRing2Color = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 0), ("blue", 1), ("green", 2), ("red", 3), ("orange", 4), ("cyan", 5), ("magenta", 6), ("white", 7), ("noLed", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLedsRing2Color.setStatus('current')
if mibBuilder.loadTexts: deviceLedsRing2Color.setDescription('This LED is used when ring protection is enabled.')
deviceLedsRing2Blinking = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLedsRing2Blinking.setStatus('current')
if mibBuilder.loadTexts: deviceLedsRing2Blinking.setDescription('This LED is used when ring protection is enabled.')
deviceLedsSignalIn1Color = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 0), ("blue", 1), ("green", 2), ("red", 3), ("orange", 4), ("cyan", 5), ("magenta", 6), ("white", 7), ("noLed", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLedsSignalIn1Color.setStatus('current')
if mibBuilder.loadTexts: deviceLedsSignalIn1Color.setDescription('Indicates status of alarm input 1.')
deviceLedsSignalIn1Blinking = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLedsSignalIn1Blinking.setStatus('current')
if mibBuilder.loadTexts: deviceLedsSignalIn1Blinking.setDescription('Indicates status of alarm input 1.')
deviceLedsSignalIn2Color = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 0), ("blue", 1), ("green", 2), ("red", 3), ("orange", 4), ("cyan", 5), ("magenta", 6), ("white", 7), ("noLed", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLedsSignalIn2Color.setStatus('current')
if mibBuilder.loadTexts: deviceLedsSignalIn2Color.setDescription('Indicates status of alarm input 2.')
deviceLedsSignalIn2Blinking = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLedsSignalIn2Blinking.setStatus('current')
if mibBuilder.loadTexts: deviceLedsSignalIn2Blinking.setDescription('Indicates status of alarm input 2.')
deviceLedsSignalOut1Color = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 0), ("blue", 1), ("green", 2), ("red", 3), ("orange", 4), ("cyan", 5), ("magenta", 6), ("white", 7), ("noLed", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLedsSignalOut1Color.setStatus('current')
if mibBuilder.loadTexts: deviceLedsSignalOut1Color.setDescription('Indicates status of alarm relay output 1.')
deviceLedsSignalOut1Blinking = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLedsSignalOut1Blinking.setStatus('current')
if mibBuilder.loadTexts: deviceLedsSignalOut1Blinking.setDescription('Indicates status of alarm relay output 1.')
deviceLedsSignalOut2Color = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("off", 0), ("blue", 1), ("green", 2), ("red", 3), ("orange", 4), ("cyan", 5), ("magenta", 6), ("white", 7), ("noLed", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLedsSignalOut2Color.setStatus('current')
if mibBuilder.loadTexts: deviceLedsSignalOut2Color.setDescription('Indicates status of alarm relay output 2.')
deviceLedsSignalOut2Blinking = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 113, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceLedsSignalOut2Blinking.setStatus('current')
if mibBuilder.loadTexts: deviceLedsSignalOut2Blinking.setDescription('Indicates status of alarm relay output 2.')
cableTestStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 114), )
if mibBuilder.loadTexts: cableTestStatusTable.setStatus('current')
if mibBuilder.loadTexts: cableTestStatusTable.setDescription('This table display the result of the last cable test. Values are only available for copper ports while a link is down and if the cable test function is enabled.')
cableTestStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 114, 1), ).setIndexNames((0, "G6-HARDWARE-MIB", "cableTestStatusPortIndex"))
if mibBuilder.loadTexts: cableTestStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cableTestStatusEntry.setDescription('')
cableTestStatusPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 114, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24)))
if mibBuilder.loadTexts: cableTestStatusPortIndex.setStatus('current')
if mibBuilder.loadTexts: cableTestStatusPortIndex.setDescription('Automatically generated')
cableTestStatusUpdateTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 114, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableTestStatusUpdateTimeStamp.setStatus('current')
if mibBuilder.loadTexts: cableTestStatusUpdateTimeStamp.setDescription('Indicates the time when this record was last updated.')
cableTestStatusPair0State = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 114, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notAvailable", 0), ("pairOk", 1), ("pairOpen", 2), ("samePairShort", 3), ("crossPairShort", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableTestStatusPair0State.setStatus('current')
if mibBuilder.loadTexts: cableTestStatusPair0State.setDescription('Indicates line termination test results for wire pair 0 (Pins 1/2)')
cableTestStatusPair0DistanceToFault = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 114, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableTestStatusPair0DistanceToFault.setStatus('current')
if mibBuilder.loadTexts: cableTestStatusPair0DistanceToFault.setDescription('Distance to fault on wire pair 0 in centimeters. Indicates 0 when no fault is detected or the function is unused.')
cableTestStatusPair1State = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 114, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notAvailable", 0), ("pairOk", 1), ("pairOpen", 2), ("samePairShort", 3), ("crossPairShort", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableTestStatusPair1State.setStatus('current')
if mibBuilder.loadTexts: cableTestStatusPair1State.setDescription('Indicates line termination test results for wire pair 1 (Pins 3/6)')
cableTestStatusPair1DistanceToFault = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 114, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableTestStatusPair1DistanceToFault.setStatus('current')
if mibBuilder.loadTexts: cableTestStatusPair1DistanceToFault.setDescription('Distance to fault on wire pair 1 in centimeters. Indicates 0 when no fault is detected or the function is unused.')
cableTestStatusPair2State = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 114, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notAvailable", 0), ("pairOk", 1), ("pairOpen", 2), ("samePairShort", 3), ("crossPairShort", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableTestStatusPair2State.setStatus('current')
if mibBuilder.loadTexts: cableTestStatusPair2State.setDescription('Indicates line termination test results for wire pair 2 (Pins 4/5)')
cableTestStatusPair2DistanceToFault = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 114, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableTestStatusPair2DistanceToFault.setStatus('current')
if mibBuilder.loadTexts: cableTestStatusPair2DistanceToFault.setDescription('Distance to fault on wire pair 2 in centimeters. Indicates 0 when no fault is detected or the function is unused.')
cableTestStatusPair3State = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 114, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("notAvailable", 0), ("pairOk", 1), ("pairOpen", 2), ("samePairShort", 3), ("crossPairShort", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableTestStatusPair3State.setStatus('current')
if mibBuilder.loadTexts: cableTestStatusPair3State.setDescription('Indicates line termination test results for wire pair 3 (Pins 7/8)')
cableTestStatusPair3DistanceToFault = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 114, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableTestStatusPair3DistanceToFault.setStatus('current')
if mibBuilder.loadTexts: cableTestStatusPair3DistanceToFault.setDescription('Distance to fault on wire pair 3 in centimeters. Indicates 0 when no fault is detected or the function is unused.')
cableTestStatusCableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 114, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notAvailable", 0), ("pluggedIn", 1), ("open", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableTestStatusCableStatus.setStatus('current')
if mibBuilder.loadTexts: cableTestStatusCableStatus.setDescription('')
ioSignalStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 115), )
if mibBuilder.loadTexts: ioSignalStatusTable.setStatus('current')
if mibBuilder.loadTexts: ioSignalStatusTable.setDescription('This section is only used for devices which offer external signal inputs and outputs.')
ioSignalStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 115, 1), ).setIndexNames((0, "G6-HARDWARE-MIB", "ioSignalStatusIndex"))
if mibBuilder.loadTexts: ioSignalStatusEntry.setStatus('current')
if mibBuilder.loadTexts: ioSignalStatusEntry.setDescription('')
ioSignalStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 115, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 0)))
if mibBuilder.loadTexts: ioSignalStatusIndex.setStatus('current')
if mibBuilder.loadTexts: ioSignalStatusIndex.setDescription('Automatically generated')
ioSignalStatusInput1AlarmActive = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 115, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioSignalStatusInput1AlarmActive.setStatus('current')
if mibBuilder.loadTexts: ioSignalStatusInput1AlarmActive.setDescription('Indicates true when the input 1 is logically active.')
ioSignalStatusInput2AlarmActive = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 115, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioSignalStatusInput2AlarmActive.setStatus('current')
if mibBuilder.loadTexts: ioSignalStatusInput2AlarmActive.setDescription('Indicates true when the input 2 is logically active.')
ioSignalStatusOutput1RelayActive = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 115, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioSignalStatusOutput1RelayActive.setStatus('current')
if mibBuilder.loadTexts: ioSignalStatusOutput1RelayActive.setDescription('Indicates true when the output 1 relay is activated.')
ioSignalStatusOutput2RelayActive = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 115, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioSignalStatusOutput2RelayActive.setStatus('current')
if mibBuilder.loadTexts: ioSignalStatusOutput2RelayActive.setDescription('Indicates true when the output 2 relay is activated.')
tcamStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 116), )
if mibBuilder.loadTexts: tcamStatusTable.setStatus('current')
if mibBuilder.loadTexts: tcamStatusTable.setDescription('This section is only used for devices which offer external signal inputs and outputs.')
tcamStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 116, 1), ).setIndexNames((0, "G6-HARDWARE-MIB", "tcamStatusIndex"))
if mibBuilder.loadTexts: tcamStatusEntry.setStatus('current')
if mibBuilder.loadTexts: tcamStatusEntry.setDescription('')
tcamStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 116, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: tcamStatusIndex.setStatus('current')
if mibBuilder.loadTexts: tcamStatusIndex.setDescription('Automatically generated')
tcamStatusControlFile = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 116, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcamStatusControlFile.setStatus('current')
if mibBuilder.loadTexts: tcamStatusControlFile.setDescription('Reflects the name of the control file associated with this tcam entry.')
tcamStatusDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3181, 10, 6, 1, 31, 116, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcamStatusDescription.setStatus('current')
if mibBuilder.loadTexts: tcamStatusDescription.setDescription('Descriptive text what explains what this tcam entry will do. ')
mibBuilder.exportSymbols("G6-HARDWARE-MIB", ioSignalConfigIndex=ioSignalConfigIndex, deviceLedsSignalOut1Color=deviceLedsSignalOut1Color, hardwareFactoryResetButton=hardwareFactoryResetButton, ioSignalConfigOutput2Name=ioSignalConfigOutput2Name, PYSNMP_MODULE_ID=device, cableTestStatusPair0DistanceToFault=cableTestStatusPair0DistanceToFault, cableTestStatusTable=cableTestStatusTable, tcamStatusDescription=tcamStatusDescription, deviceLedsIndex=deviceLedsIndex, deviceLedsPowerOn1Blinking=deviceLedsPowerOn1Blinking, ioSignalConfigEntry=ioSignalConfigEntry, ioSignalConfigOutput2Trigger=ioSignalConfigOutput2Trigger, deviceLedsSignalOut2Blinking=deviceLedsSignalOut2Blinking, portLedsEthernetColor=portLedsEthernetColor, ioSignalStatusOutput2RelayActive=ioSignalStatusOutput2RelayActive, ioSignalConfigOutput1Trigger=ioSignalConfigOutput1Trigger, ioSignalConfigInput1Name=ioSignalConfigInput1Name, deviceLedsEntry=deviceLedsEntry, hardwareMaskOfSfpPorts=hardwareMaskOfSfpPorts, hardwarePowerSupply2Monitored=hardwarePowerSupply2Monitored, cableTestConfigEventGeneration=cableTestConfigEventGeneration, cableTestStatusEntry=cableTestStatusEntry, cableTestStatusCableStatus=cableTestStatusCableStatus, cableTestStatusPair1DistanceToFault=cableTestStatusPair1DistanceToFault, portInfoSnmpInstance=portInfoSnmpInstance, deviceLedsSignalOut1Blinking=deviceLedsSignalOut1Blinking, portLedsTable=portLedsTable, portInfoUserSlot=portInfoUserSlot, moduleInfoDescription=moduleInfoDescription, portInfoHardwarePort=portInfoHardwarePort, portInfoSnmpPort=portInfoSnmpPort, portInfoSystemSlot=portInfoSystemSlot, slotInfoEntry=slotInfoEntry, hardwareLedMode=hardwareLedMode, ioSignalStatusIndex=ioSignalStatusIndex, portInfoSwitchPort=portInfoSwitchPort, deviceLedsPowerOn1Color=deviceLedsPowerOn1Color, cableTestConfigStartTestNow=cableTestConfigStartTestNow, hardware=hardware, deviceLedsRing1Color=deviceLedsRing1Color, deviceLedsRing2Color=deviceLedsRing2Color, cableTestStatusPair1State=cableTestStatusPair1State, tcamStatusControlFile=tcamStatusControlFile, deviceLedsSignalIn1Blinking=deviceLedsSignalIn1Blinking, moduleInfoProjectNumber=moduleInfoProjectNumber, tcamStatusIndex=tcamStatusIndex, deviceLedsSystem1Color=deviceLedsSystem1Color, cableTestStatusPair3DistanceToFault=cableTestStatusPair3DistanceToFault, cableTestStatusPair2DistanceToFault=cableTestStatusPair2DistanceToFault, cableTestStatusPair3State=cableTestStatusPair3State, deviceLedsRing2Blinking=deviceLedsRing2Blinking, slotInfoBoardType=slotInfoBoardType, cableTestStatusUpdateTimeStamp=cableTestStatusUpdateTimeStamp, cableTestConfigEntry=cableTestConfigEntry, portInfoInterfaceType=portInfoInterfaceType, portLedsEthernetBlinking=portLedsEthernetBlinking, deviceLedsSignalIn2Blinking=deviceLedsSignalIn2Blinking, deviceLedsSignalIn1Color=deviceLedsSignalIn1Color, cableTestStatusPortIndex=cableTestStatusPortIndex, cableTestStatusPair2State=cableTestStatusPair2State, hardwarePowerSupply2Status=hardwarePowerSupply2Status, portLedsPoeColor=portLedsPoeColor, portInfoUserPort=portInfoUserPort, hardwareSdCardStatus=hardwareSdCardStatus, cableTestConfigEnableAutoCableTest=cableTestConfigEnableAutoCableTest, cableTestConfigPortIndex=cableTestConfigPortIndex, hardwareRunningOnPoe=hardwareRunningOnPoe, deviceLedsPowerOn2Color=deviceLedsPowerOn2Color, portLedsPortIndex=portLedsPortIndex, deviceLedsTable=deviceLedsTable, ioSignalConfigOutput1Name=ioSignalConfigOutput1Name, hardwareMaskOfPoePorts=hardwareMaskOfPoePorts, deviceLedsSystem2Color=deviceLedsSystem2Color, slotInfoVersionBits=slotInfoVersionBits, ioSignalConfigTable=ioSignalConfigTable, moduleInfoOccupiedSlots=moduleInfoOccupiedSlots, deviceLedsSignalOut2Color=deviceLedsSignalOut2Color, moduleInfoEntry=moduleInfoEntry, ioSignalStatusInput1AlarmActive=ioSignalStatusInput1AlarmActive, moduleInfoIndex=moduleInfoIndex, ioSignalStatusOutput1RelayActive=ioSignalStatusOutput1RelayActive, portInfoProperties=portInfoProperties, deviceLedsSystem2Blinking=deviceLedsSystem2Blinking, moduleInfoUnitType=moduleInfoUnitType, tcamStatusEntry=tcamStatusEntry, portLedsEntry=portLedsEntry, device=device, slotInfoBoardId=slotInfoBoardId, ioSignalStatusTable=ioSignalStatusTable, hardwarePowerSupply1Status=hardwarePowerSupply1Status, portLedsPoeBlinking=portLedsPoeBlinking, moduleInfoSerialNumber=moduleInfoSerialNumber, portInfoPortIndex=portInfoPortIndex, deviceLedsSignalIn2Color=deviceLedsSignalIn2Color, moduleInfoArticleNumber=moduleInfoArticleNumber, ioSignalStatusEntry=ioSignalStatusEntry, ioSignalConfigInput1Mode=ioSignalConfigInput1Mode, deviceLedsSystem1Blinking=deviceLedsSystem1Blinking, slotInfoIndex=slotInfoIndex, moduleInfoHardwareVersion=moduleInfoHardwareVersion, deviceLedsRing1Blinking=deviceLedsRing1Blinking, portInfoTable=portInfoTable, hardwarePowerSupply1Monitored=hardwarePowerSupply1Monitored, ioSignalStatusInput2AlarmActive=ioSignalStatusInput2AlarmActive, slotInfoTable=slotInfoTable, ioSignalConfigInput2Mode=ioSignalConfigInput2Mode, hardwareNumOfPorts=hardwareNumOfPorts, cableTestStatusPair0State=cableTestStatusPair0State, hardwareMaskOfExistingPorts=hardwareMaskOfExistingPorts, deviceLedsPowerOn2Blinking=deviceLedsPowerOn2Blinking, ioSignalConfigSignalMode=ioSignalConfigSignalMode, hardwareLedTest=hardwareLedTest, portInfoEntry=portInfoEntry, ioSignalConfigInput2Name=ioSignalConfigInput2Name, moduleInfoTable=moduleInfoTable, tcamStatusTable=tcamStatusTable, cableTestConfigTable=cableTestConfigTable, hardwareFanStatus=hardwareFanStatus)
