#
# PySNMP MIB module RC-MLT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RC-MLT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:51:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "InterfaceIndex")
rcLinkFlapDetect, rcStat, IdList, rcL2Redundancy, rcMlt, EnableValue, PortSet = mibBuilder.importSymbols("RAPID-CITY", "rcLinkFlapDetect", "rcStat", "IdList", "rcL2Redundancy", "rcMlt", "EnableValue", "PortSet")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, MibIdentifier, Counter32, TimeTicks, IpAddress, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Gauge32, Integer32, Counter64, iso, Unsigned32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "MibIdentifier", "Counter32", "TimeTicks", "IpAddress", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Gauge32", "Integer32", "Counter64", "iso", "Unsigned32", "ObjectIdentity")
DisplayString, MacAddress, RowStatus, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "RowStatus", "TruthValue", "TextualConvention")
rcMltMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2272, 1, 17, 0))
rcMltMib.setRevisions(('2010-10-20 00:00', '2010-09-21 00:00', '2010-09-14 00:00', '2009-12-16 00:00', '2009-11-16 00:00', '2009-03-20 00:00', '2007-12-20 00:00', '2007-04-16 00:00', '2006-07-05 00:00', '2005-12-06 00:00', '2005-09-01 00:00', '2005-08-10 00:00', '2005-07-11 00:00', '2005-05-27 00:00', '2005-02-02 00:00', '2005-01-04 00:00', '2004-12-21 00:00', '2004-09-30 00:00', '2004-09-23 00:00', '2004-07-13 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rcMltMib.setRevisionsDescriptions(('Version 22: Added rcStatMltUtilTable.', 'Version 21: Added rcMltEntryOwner, rcMltDatapathProgrammingState to rcMltTable.', 'Version 20: Increased MLT ID range for rcStatMltIfExtnMltId, rcStatMltEtherMltId. rcMltId, rcMltSmltId. Added: rcMltPeerPortMembers, rcMltCpLimitPktRate, rcMltCpLimitShutDownEnable, rcMltVlanIdList to rcMltTable. Added: synchronizeInProgress(11) to rcL2RedundancyHaCpuState.', 'Version 19: Added rcMltDisablePortsOnShutdown.', 'Version 18: Added rcStatSmltLacpInfoRxMsgCnt, rcStatSmltLacpInfoTxMsgCnt.', 'Version 17: Added rcMltMtu, rcMltInterfaceType, rcMltConfiguredMembers, rcMltMtuAdminState.', 'Version 16: Added rcMltAggMinLink, rcMltNotificationObjects, rcMltAggTrapEvent', 'Version 15: Added rcMltEgressCosProfileName, rcMltEgressPolicerAdminState, rcMltAggrEgressBandwidth, rcMltAggrIngressBandwidth, rcMltAggrMacAlloc Modified rcMltLoadDistributionOption and rcMltUniAggrMacIdx', 'Version 14: Added rcMltLoadDistributionOption, rcMltUniAggrMacIdx, rcMltUniAggrMacAddress and rcMltQinqEtherType to rcMltTable. Added rcMltBvidPortTable', 'Version 13: Changed range of rcMltSmltId to 0..256.', 'Version 12: Changed rcMltEnable from read-only to read-create. Changed all read-write objects in rcMltTable to read-create.', 'Version 11: Increased to rcMltId & rcMltSmltId from 32 to 256', 'Version 10: Added enumerations to rcMltDistributionAlgorithm.', 'Version 9: Fixed range of rcMltVlanIds, allow rcMltIfIndex to be 0.', 'Version 8: Changed the SYNTAX for rcStatMltIfUtilIfHCInUtil & rcStatMltIfUtilIfHCOutUtil to Gauge32', 'Version 7: Made Index rcStatMltIfUtilMltId as not-accessible', 'Version 6: Added rcStatMltIfUtilTable', 'Version 5: Import MacAddress type', 'Version 4: Added rcMltVlacpTable', 'Version 3: Added rcMltVlacpTable',))
if mibBuilder.loadTexts: rcMltMib.setLastUpdated('201010200000Z')
if mibBuilder.loadTexts: rcMltMib.setOrganization('Bay Networks, Rapid-City Group')
if mibBuilder.loadTexts: rcMltMib.setContactInfo('Yu-Ten Lee Postal: Nortel Networks 4655 Great America Parkway Santa Clara, CA 95052-8185 Tel: 408-495-2560 Fax: 408-495-6680 E-mail: ylee@nortelnetworks.com')
if mibBuilder.loadTexts: rcMltMib.setDescription('Enterprise MIB for the Accelar product family.')
rcStatMlt = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6))
rcStatMltIfExtnTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1), )
if mibBuilder.loadTexts: rcStatMltIfExtnTable.setStatus('current')
if mibBuilder.loadTexts: rcStatMltIfExtnTable.setDescription('A table used to store Mlt interface statistics.')
rcStatMltIfExtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1, 1), ).setIndexNames((0, "RC-MLT-MIB", "rcStatMltIfExtnMltId"))
if mibBuilder.loadTexts: rcStatMltIfExtnEntry.setStatus('current')
if mibBuilder.loadTexts: rcStatMltIfExtnEntry.setDescription('Mlt interface statistics')
rcStatMltIfExtnMltId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIfExtnMltId.setStatus('current')
if mibBuilder.loadTexts: rcStatMltIfExtnMltId.setDescription('Mlt Id')
rcStatMltIfExtnIfInMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIfExtnIfInMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: rcStatMltIfExtnIfInMulticastPkts.setDescription('multi-pkts to upper')
rcStatMltIfExtnIfInBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIfExtnIfInBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: rcStatMltIfExtnIfInBroadcastPkts.setDescription('broad-pkts to upper')
rcStatMltIfExtnIfOutMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIfExtnIfOutMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: rcStatMltIfExtnIfOutMulticastPkts.setDescription('multi-pkts from upper')
rcStatMltIfExtnIfOutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIfExtnIfOutBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: rcStatMltIfExtnIfOutBroadcastPkts.setDescription('broad-pkts from upper')
rcStatMltIfExtnIfHCInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIfExtnIfHCInOctets.setStatus('current')
if mibBuilder.loadTexts: rcStatMltIfExtnIfHCInOctets.setDescription('The total number of octets received on the MLT interface, including framing characters.')
rcStatMltIfExtnIfHCInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIfExtnIfHCInUcastPkts.setStatus('current')
if mibBuilder.loadTexts: rcStatMltIfExtnIfHCInUcastPkts.setDescription('The number of packets delivered by this MLT to a higher MLT that were not addressed to a nulticast or broadcase address at this sublayer.')
rcStatMltIfExtnIfHCInMulticastPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIfExtnIfHCInMulticastPkt.setStatus('current')
if mibBuilder.loadTexts: rcStatMltIfExtnIfHCInMulticastPkt.setDescription('The number of packets delivered to this MLT that were addressed to a nulticast address at this sublayer. For a MAC layer protocol, this number includes both Group and Functional addresses.')
rcStatMltIfExtnIfHCInBroadcastPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIfExtnIfHCInBroadcastPkt.setStatus('current')
if mibBuilder.loadTexts: rcStatMltIfExtnIfHCInBroadcastPkt.setDescription('The number of packets delivered to this MLT that were addressed to a broadcast address at this sublayer.')
rcStatMltIfExtnIfHCOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIfExtnIfHCOutOctets.setStatus('current')
if mibBuilder.loadTexts: rcStatMltIfExtnIfHCOutOctets.setDescription('The total number of octets transmitted out of the MLT interface, including framing characters.')
rcStatMltIfExtnIfHCOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIfExtnIfHCOutUcastPkts.setStatus('current')
if mibBuilder.loadTexts: rcStatMltIfExtnIfHCOutUcastPkts.setDescription('The number of packets that hight-level protocols requested be transmitted that were not addressed to a multicast address at this MLT. This total number includes those packets discarded or unsent.')
rcStatMltIfExtnIfHCOutMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIfExtnIfHCOutMulticast.setStatus('current')
if mibBuilder.loadTexts: rcStatMltIfExtnIfHCOutMulticast.setDescription('The total number of packets that hight-level protocols requested be transmitted, and that were addressed to a multicast address at this MLT, including those that were discarded or not sent. For a MAC layer protocol, this number includes both Group and Functional addresses.')
rcStatMltIfExtnIfHCOutBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIfExtnIfHCOutBroadcast.setStatus('current')
if mibBuilder.loadTexts: rcStatMltIfExtnIfHCOutBroadcast.setDescription('The total number of packets that hight-level protocols requested be transmitted, and that were addressed to a broadcase address at this MLT, including those that were discarded or not sent.')
rcStatMltEtherTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2), )
if mibBuilder.loadTexts: rcStatMltEtherTable.setStatus('current')
if mibBuilder.loadTexts: rcStatMltEtherTable.setDescription('A table used to store Mlt Ethernet statistics.')
rcStatMltEtherEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2, 1), ).setIndexNames((0, "RC-MLT-MIB", "rcStatMltEtherMltId"))
if mibBuilder.loadTexts: rcStatMltEtherEntry.setStatus('current')
if mibBuilder.loadTexts: rcStatMltEtherEntry.setDescription('Mlt enternet statistics')
rcStatMltEtherMltId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltEtherMltId.setStatus('current')
if mibBuilder.loadTexts: rcStatMltEtherMltId.setDescription('A value that uniquely identifies the Multi-Link Trunk associated with this entry.')
rcStatMltEtherAlignmentErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltEtherAlignmentErrors.setStatus('current')
if mibBuilder.loadTexts: rcStatMltEtherAlignmentErrors.setDescription('A count of frames received on a particular MLT that are not an integral number of octets in length and do not pass the FCS check. The count represented by an instance of this object is incremented when the alignmentError status is returned by the MAC service to the LLC (or other MAC user). Received frames for which multiple error conditions occur are, according to the conventions of IEEE 802.3 Layer Management, counted exclusively according to the error status presented to the LLC.')
rcStatMltEtherFCSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltEtherFCSErrors.setStatus('current')
if mibBuilder.loadTexts: rcStatMltEtherFCSErrors.setDescription('A count of frames received on an MLT that are an integral number of octets in length but do not pass the FCS check. The count represented by an instance of this object is incremented when the frameCheckError status is returned by the MAC service to the LLC (or other MAC user). Received frames for which multiple error conditions occur are, according to the conventions of IEEE 802.3 Layer Management, counted exclusively according to the error status presented to the LLC.')
rcStatMltEtherSingleCollFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltEtherSingleCollFrames.setStatus('current')
if mibBuilder.loadTexts: rcStatMltEtherSingleCollFrames.setDescription('A count of successfully transmitted frames on a particular MLT for which transmission is inhibited by exactly one collision. A frame that is counted by an instance of this objects is also counted by the corresponding instance of either the ifOutUcastPkts, ifOutMulticastPkts, or ifOutBroadcastPkts, and it not counted by the corresponding instance of the MultipleCollisionFrames object.')
rcStatMltEtherMultipleCollFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltEtherMultipleCollFrames.setStatus('current')
if mibBuilder.loadTexts: rcStatMltEtherMultipleCollFrames.setDescription('A count of successfully transmitted frames on a particular MLT for which transmission is inhibited by more than one collision. A frame that is counted by an instance of this object is also counted by the corresponding instance of either the ifOutUcastPkts, ifOutMulticastPkts, or ifOutBroadcastPkts, and is not counted by the corresponding instance of the SingleCollisionFrames objects.')
rcStatMltEtherSQETestError = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltEtherSQETestError.setStatus('current')
if mibBuilder.loadTexts: rcStatMltEtherSQETestError.setDescription('A count of times that the SQE TEST ERROR message is generated by the PLS sublayer for a particular MLT. SQE stands for Signal Quality Error.')
rcStatMltEtherDeferredTransmiss = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltEtherDeferredTransmiss.setStatus('current')
if mibBuilder.loadTexts: rcStatMltEtherDeferredTransmiss.setDescription('A count of frames for which the first transmission attempt on a particular MLT is delayed because the medium is busy. The count represented by an instance of this object does not include frames involved in collisions.')
rcStatMltEtherLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltEtherLateCollisions.setStatus('current')
if mibBuilder.loadTexts: rcStatMltEtherLateCollisions.setDescription('The number of times that a collision is detected on a particular MLT later than 512 bit-times (64 octets) into the transmission of a packet. Five hundred and twelve bit-times corresponds to 51.2 microseconds on a 10 mb/s system. A (late) collision included in a count represented by an instance of this object is also considered as a (generic) collision for purposes of other collision-related statistics.')
rcStatMltEtherExcessiveCollis = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltEtherExcessiveCollis.setStatus('current')
if mibBuilder.loadTexts: rcStatMltEtherExcessiveCollis.setDescription('A count of frames for which transmission on a particular MLT fails due to excessive collisions.')
rcStatMltEtherIMacTransmitError = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltEtherIMacTransmitError.setStatus('current')
if mibBuilder.loadTexts: rcStatMltEtherIMacTransmitError.setDescription('A count of frames for which transmission on a particular MLT fails due to an internal MAC sublayer transmit error. A frame is only counted by an instance of this object if it is not counted by the corresponding instance of either the LateCollisions object, the ExcessiveCollisions object, or the CarrierSenseError object.')
rcStatMltEtherCarrierSenseError = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltEtherCarrierSenseError.setStatus('current')
if mibBuilder.loadTexts: rcStatMltEtherCarrierSenseError.setDescription('The number of times that the carrier sense condition was lost or never asserted when attempting to transmit a frame on a particular MLT. The count represented by an instance of this object is incremented at most once per transmission attempt, even if the carrier sense condition fluctuates during a transmission attempt.')
rcStatMltEtherFrameTooLong = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltEtherFrameTooLong.setStatus('current')
if mibBuilder.loadTexts: rcStatMltEtherFrameTooLong.setDescription('A count of frames received on a particular MLT that exceed the maximum permitted size (1518 octets). The count represented by an instance os this object is incremented when the frame TooLong status is returned by the MAC service to the LLC (or other MAC user). Received frames for which multiple error conditions occur are, according to the conventions of IEEE 802.3 Layer Management, counted exclusively according to the error status presented to the LLC.')
rcStatMltEtherIMacReceiveError = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltEtherIMacReceiveError.setStatus('current')
if mibBuilder.loadTexts: rcStatMltEtherIMacReceiveError.setDescription('A count of frames for which reception on a particular MLT fails due to an internal MAC sublayer receive error. A frame is only counted by an instance of this object if it is not counted by the corresponding instance of either the FrameTooLongs object, the AlignmentErrors object, of the FCSErrors objects. The precise meaning of the count represented by an instance of this object is implementation specific. In particular, an instance of this object may represent a count of receive errors on a particular interface that are not otherwise counted.')
rcStatMltIpTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3), )
if mibBuilder.loadTexts: rcStatMltIpTable.setStatus('deprecated')
if mibBuilder.loadTexts: rcStatMltIpTable.setDescription('A table used to store Mlt Ip statistics.')
rcStatMltIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1), ).setIndexNames((0, "RC-MLT-MIB", "rcStatMltIpMltId"))
if mibBuilder.loadTexts: rcStatMltIpEntry.setStatus('deprecated')
if mibBuilder.loadTexts: rcStatMltIpEntry.setDescription('Mlt enternet statistics')
rcStatMltIpMltId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIpMltId.setStatus('deprecated')
if mibBuilder.loadTexts: rcStatMltIpMltId.setDescription('Mlt Id')
rcStatMltIpInReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIpInReceives.setStatus('deprecated')
if mibBuilder.loadTexts: rcStatMltIpInReceives.setDescription('all incoming packets')
rcStatMltIpInHdrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIpInHdrErrors.setStatus('deprecated')
if mibBuilder.loadTexts: rcStatMltIpInHdrErrors.setDescription('hdr errors detected')
rcStatMltIpInAddrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIpInAddrErrors.setStatus('deprecated')
if mibBuilder.loadTexts: rcStatMltIpInAddrErrors.setDescription('bad dest. ip addr')
rcStatMltIpForwDatagrams = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIpForwDatagrams.setStatus('deprecated')
if mibBuilder.loadTexts: rcStatMltIpForwDatagrams.setDescription('packets forwarded')
rcStatMltIpInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIpInUnknownProtos.setStatus('deprecated')
if mibBuilder.loadTexts: rcStatMltIpInUnknownProtos.setDescription('unsupported protocol')
rcStatMltIpInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIpInDiscards.setStatus('deprecated')
if mibBuilder.loadTexts: rcStatMltIpInDiscards.setDescription('good, but no buffer')
rcStatMltIpInDelivers = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIpInDelivers.setStatus('deprecated')
if mibBuilder.loadTexts: rcStatMltIpInDelivers.setDescription('pkts delivered to upper')
rcStatMltIpOutRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIpOutRequest.setStatus('deprecated')
if mibBuilder.loadTexts: rcStatMltIpOutRequest.setDescription('pkts received from upper')
rcStatMltIpOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIpOutDiscards.setStatus('deprecated')
if mibBuilder.loadTexts: rcStatMltIpOutDiscards.setDescription('good, but no buffer')
rcStatMltIpOutNoRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIpOutNoRoutes.setStatus('deprecated')
if mibBuilder.loadTexts: rcStatMltIpOutNoRoutes.setDescription('no route to destination')
rcStatMltIpReasmReqds = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIpReasmReqds.setStatus('deprecated')
if mibBuilder.loadTexts: rcStatMltIpReasmReqds.setDescription('fragments to reassem')
rcStatMltIpReasmOKs = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIpReasmOKs.setStatus('deprecated')
if mibBuilder.loadTexts: rcStatMltIpReasmOKs.setDescription('reassembled successfully')
rcStatMltIpReasmFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIpReasmFails.setStatus('deprecated')
if mibBuilder.loadTexts: rcStatMltIpReasmFails.setDescription('reassembly failures')
rcStatMltIpFragOKs = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIpFragOKs.setStatus('deprecated')
if mibBuilder.loadTexts: rcStatMltIpFragOKs.setDescription('fragment successfully')
rcStatMltIpFragFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIpFragFails.setStatus('deprecated')
if mibBuilder.loadTexts: rcStatMltIpFragFails.setDescription('fragment failure')
rcStatMltIpFragCreates = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIpFragCreates.setStatus('deprecated')
if mibBuilder.loadTexts: rcStatMltIpFragCreates.setDescription('pkts due to fragmenting')
rcStatMltIpRoutingDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIpRoutingDiscards.setStatus('deprecated')
if mibBuilder.loadTexts: rcStatMltIpRoutingDiscards.setDescription('Route entries removed')
rcStatSmltIstDownCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltIstDownCnt.setStatus('current')
if mibBuilder.loadTexts: rcStatSmltIstDownCnt.setDescription('Counters that counts how the session between the two peering switches has done down since last boot.')
rcStatSmltHelloTxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltHelloTxMsgCnt.setStatus('current')
if mibBuilder.loadTexts: rcStatSmltHelloTxMsgCnt.setDescription('Counters that counts the tx hello msg.')
rcStatSmltHelloRxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltHelloRxMsgCnt.setStatus('current')
if mibBuilder.loadTexts: rcStatSmltHelloRxMsgCnt.setDescription('Counters that counts the rx hello msg.')
rcStatSmltLearnMacAddrTxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltLearnMacAddrTxMsgCnt.setStatus('current')
if mibBuilder.loadTexts: rcStatSmltLearnMacAddrTxMsgCnt.setDescription('Counters that counts the tx learn Mac Address msg.')
rcStatSmltLearnMacAddrRxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltLearnMacAddrRxMsgCnt.setStatus('current')
if mibBuilder.loadTexts: rcStatSmltLearnMacAddrRxMsgCnt.setDescription('Counters that counts the rx learn Mac Address msg.')
rcStatSmltMacAddrAgeOutTxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltMacAddrAgeOutTxMsgCnt.setStatus('current')
if mibBuilder.loadTexts: rcStatSmltMacAddrAgeOutTxMsgCnt.setDescription('Counters that counts the tx Mac Address Aging Out msg.')
rcStatSmltMacAddrAgeOutRxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltMacAddrAgeOutRxMsgCnt.setStatus('current')
if mibBuilder.loadTexts: rcStatSmltMacAddrAgeOutRxMsgCnt.setDescription('Counters that counts the rx Mac Address Aging Out msg.')
rcStatSmltMacAddrAgeExpTxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltMacAddrAgeExpTxMsgCnt.setStatus('current')
if mibBuilder.loadTexts: rcStatSmltMacAddrAgeExpTxMsgCnt.setDescription('Counters that counts the tx Mac Address age expired msg.')
rcStatSmltMacAddrAgeExpRxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltMacAddrAgeExpRxMsgCnt.setStatus('current')
if mibBuilder.loadTexts: rcStatSmltMacAddrAgeExpRxMsgCnt.setDescription('Counters that counts the rx Mac Address age expired msg.')
rcStatSmltStgInfoTxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltStgInfoTxMsgCnt.setStatus('current')
if mibBuilder.loadTexts: rcStatSmltStgInfoTxMsgCnt.setDescription('Counters that counts the tx Stg information msg.')
rcStatSmltStgInfoRxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltStgInfoRxMsgCnt.setStatus('current')
if mibBuilder.loadTexts: rcStatSmltStgInfoRxMsgCnt.setDescription('Counters that counts the rx Stg information msg.')
rcStatSmltDelMacAddrTxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltDelMacAddrTxMsgCnt.setStatus('current')
if mibBuilder.loadTexts: rcStatSmltDelMacAddrTxMsgCnt.setDescription('Counters that counts the tx deleted MAC address msg.')
rcStatSmltDelMacAddrRxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltDelMacAddrRxMsgCnt.setStatus('current')
if mibBuilder.loadTexts: rcStatSmltDelMacAddrRxMsgCnt.setDescription('Counters that counts the rx deleted MAC address msg.')
rcStatSmltSmltDownTxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltSmltDownTxMsgCnt.setStatus('current')
if mibBuilder.loadTexts: rcStatSmltSmltDownTxMsgCnt.setDescription('Counters that counts the tx Smlt Down msg.')
rcStatSmltSmltDownRxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltSmltDownRxMsgCnt.setStatus('current')
if mibBuilder.loadTexts: rcStatSmltSmltDownRxMsgCnt.setDescription('Counters that counts the rx Smlt Down msg.')
rcStatSmltSmltUpTxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltSmltUpTxMsgCnt.setStatus('current')
if mibBuilder.loadTexts: rcStatSmltSmltUpTxMsgCnt.setDescription('Counters that counts the tx Smlt Up msg.')
rcStatSmltSmltUpRxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltSmltUpRxMsgCnt.setStatus('current')
if mibBuilder.loadTexts: rcStatSmltSmltUpRxMsgCnt.setDescription('Counters that counts the rx Smlt Up msg.')
rcStatSmltSendMacTblTxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltSendMacTblTxMsgCnt.setStatus('current')
if mibBuilder.loadTexts: rcStatSmltSendMacTblTxMsgCnt.setDescription('Counters that counts the tx Send Mac Table msg.')
rcStatSmltSendMacTblRxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltSendMacTblRxMsgCnt.setStatus('current')
if mibBuilder.loadTexts: rcStatSmltSendMacTblRxMsgCnt.setDescription('Counters that counts the rx Send Mac Table msg.')
rcStatSmltIgmpTxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltIgmpTxMsgCnt.setStatus('current')
if mibBuilder.loadTexts: rcStatSmltIgmpTxMsgCnt.setDescription('Counters that counts the tx Igmp msg.')
rcStatSmltIgmpRxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltIgmpRxMsgCnt.setStatus('current')
if mibBuilder.loadTexts: rcStatSmltIgmpRxMsgCnt.setDescription('Counters that counts the rx Igmp msg.')
rcStatSmltPortDownTxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltPortDownTxMsgCnt.setStatus('current')
if mibBuilder.loadTexts: rcStatSmltPortDownTxMsgCnt.setDescription('Counters that counts the tx port down msg.')
rcStatSmltPortDownRxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltPortDownRxMsgCnt.setStatus('current')
if mibBuilder.loadTexts: rcStatSmltPortDownRxMsgCnt.setDescription('Counters that counts the rx port down msg.')
rcStatSmltReqMacTblTxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltReqMacTblTxMsgCnt.setStatus('current')
if mibBuilder.loadTexts: rcStatSmltReqMacTblTxMsgCnt.setDescription('Counters that counts the tx request Mac table msg.')
rcStatSmltReqMacTblRxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltReqMacTblRxMsgCnt.setStatus('current')
if mibBuilder.loadTexts: rcStatSmltReqMacTblRxMsgCnt.setDescription('Counters that counts the rx request Mac table msg.')
rcStatSmltRxUnknownMsgTypeCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltRxUnknownMsgTypeCnt.setStatus('current')
if mibBuilder.loadTexts: rcStatSmltRxUnknownMsgTypeCnt.setDescription('Counters that counts the rx unknown msg type.')
rcStatMltIfUtilTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 30), )
if mibBuilder.loadTexts: rcStatMltIfUtilTable.setStatus('current')
if mibBuilder.loadTexts: rcStatMltIfUtilTable.setDescription('A table used to store Mlt interface utilization.')
rcStatMltIfUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 30, 1), ).setIndexNames((0, "RC-MLT-MIB", "rcStatMltIfUtilMltId"))
if mibBuilder.loadTexts: rcStatMltIfUtilEntry.setStatus('current')
if mibBuilder.loadTexts: rcStatMltIfUtilEntry.setDescription('Mlt interface utilization')
rcStatMltIfUtilMltId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: rcStatMltIfUtilMltId.setStatus('current')
if mibBuilder.loadTexts: rcStatMltIfUtilMltId.setDescription('To assign an Id within the range specified to the Mlt created ')
rcStatMltIfUtilIfHCInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 30, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIfUtilIfHCInOctets.setStatus('current')
if mibBuilder.loadTexts: rcStatMltIfUtilIfHCInOctets.setDescription('The total number of octets received on the MLT interface, including framing characters.')
rcStatMltIfUtilIfHCInUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 30, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIfUtilIfHCInUtil.setStatus('current')
if mibBuilder.loadTexts: rcStatMltIfUtilIfHCInUtil.setDescription('The best estimate of the mean physical layer network utilization on this interface during this interval, in percent.')
rcStatMltIfUtilIfHCOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 30, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIfUtilIfHCOutOctets.setStatus('current')
if mibBuilder.loadTexts: rcStatMltIfUtilIfHCOutOctets.setDescription('The total number of octets transmitted out of the MLT interface, including framing characters.')
rcStatMltIfUtilIfHCOutUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 30, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltIfUtilIfHCOutUtil.setStatus('current')
if mibBuilder.loadTexts: rcStatMltIfUtilIfHCOutUtil.setDescription('The best estimate of the mean physical layer network utilization on this interface during this interval, in percent.')
rcStatSmltLacpInfoRxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltLacpInfoRxMsgCnt.setStatus('current')
if mibBuilder.loadTexts: rcStatSmltLacpInfoRxMsgCnt.setDescription('LACP info msgs received.')
rcStatSmltLacpInfoTxMsgCnt = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatSmltLacpInfoTxMsgCnt.setStatus('current')
if mibBuilder.loadTexts: rcStatSmltLacpInfoTxMsgCnt.setDescription('LACP info msgs transmitted.')
rcStatMltUtilTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 33), )
if mibBuilder.loadTexts: rcStatMltUtilTable.setStatus('current')
if mibBuilder.loadTexts: rcStatMltUtilTable.setDescription('A table used to store statistics for MLT members utilization.')
rcStatMltUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 33, 1), ).setIndexNames((0, "RC-MLT-MIB", "rcMltId"), (0, "RC-MLT-MIB", "rcStatMltUtilPortIfIndex"), (0, "RC-MLT-MIB", "rcStatMltUtilTrafficType"))
if mibBuilder.loadTexts: rcStatMltUtilEntry.setStatus('current')
if mibBuilder.loadTexts: rcStatMltUtilEntry.setDescription('An entry for MLT members utilization statistics table.')
rcStatMltUtilPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 33, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rcStatMltUtilPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: rcStatMltUtilPortIfIndex.setDescription('Port ifIndex, member of rcMltId.')
rcStatMltUtilTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 33, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rx", 1), ("tx", 2), ("rxTx", 3))))
if mibBuilder.loadTexts: rcStatMltUtilTrafficType.setStatus('current')
if mibBuilder.loadTexts: rcStatMltUtilTrafficType.setDescription('Type of traffic for one MLT port interface.')
rcStatMltUtilTrafficLast5Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 33, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltUtilTrafficLast5Min.setStatus('current')
if mibBuilder.loadTexts: rcStatMltUtilTrafficLast5Min.setDescription('This object returns the percentage of traffic on one MLT port interface for the last 5 minutes.')
rcStatMltUtilTrafficLast30Min = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 33, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltUtilTrafficLast30Min.setStatus('current')
if mibBuilder.loadTexts: rcStatMltUtilTrafficLast30Min.setDescription('This object returns the percentage of traffic on one MLT port interface for the last 30 minutes.')
rcStatMltUtilTrafficLast1Hour = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 12, 6, 33, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcStatMltUtilTrafficLast1Hour.setStatus('current')
if mibBuilder.loadTexts: rcStatMltUtilTrafficLast1Hour.setDescription('This object returns the percentage of traffic on one MLT port interface for the last hour.')
rcMltNumMlts = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 17, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcMltNumMlts.setStatus('current')
if mibBuilder.loadTexts: rcMltNumMlts.setDescription('The number of MLTs currently defined in the switch.')
rcMltPotentialMembers = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 17, 2), PortSet()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcMltPotentialMembers.setStatus('current')
if mibBuilder.loadTexts: rcMltPotentialMembers.setDescription('The set of ports that are not members of any MLT.')
rcMltIstSessionEnable = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 17, 3), EnableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltIstSessionEnable.setStatus('current')
if mibBuilder.loadTexts: rcMltIstSessionEnable.setDescription('Used to enable/disable mlt functionality.')
rcMltIstSessionStatus = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 17, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcMltIstSessionStatus.setStatus('current')
if mibBuilder.loadTexts: rcMltIstSessionStatus.setDescription('Used to enable/disable mlt functionality.')
rcMltIstPeerIp = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 17, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltIstPeerIp.setStatus('current')
if mibBuilder.loadTexts: rcMltIstPeerIp.setDescription('IST mlt Peer Ip address.')
rcMltIstVlanId = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 17, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltIstVlanId.setStatus('current')
if mibBuilder.loadTexts: rcMltIstVlanId.setDescription('IST mlt Vlan Id.')
rcMltDisablePortsOnShutdown = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 17, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltDisablePortsOnShutdown.setStatus('current')
if mibBuilder.loadTexts: rcMltDisablePortsOnShutdown.setDescription('When true(1), the port members of an MLT will be automatically shutdown when the MLT becomes disabled.')
rcMltTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10), )
if mibBuilder.loadTexts: rcMltTable.setStatus('current')
if mibBuilder.loadTexts: rcMltTable.setDescription('A list of Multi-Link Trunk entries. The number of entries is given by rcMltNumMlts.')
rcMltEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1), ).setIndexNames((0, "RC-MLT-MIB", "rcMltId"))
if mibBuilder.loadTexts: rcMltEntry.setStatus('current')
if mibBuilder.loadTexts: rcMltEntry.setDescription('Entry containing configuration information for a particular Multi-Link Trunk.')
rcMltId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcMltId.setStatus('current')
if mibBuilder.loadTexts: rcMltId.setDescription('A value that uniquely identifies the Multi-Link Trunk associated with this entry.')
rcMltName = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltName.setStatus('current')
if mibBuilder.loadTexts: rcMltName.setDescription('An administratively-assigned name for this MLT.')
rcMltPortMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 3), PortSet()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltPortMembers.setStatus('current')
if mibBuilder.loadTexts: rcMltPortMembers.setDescription('The set of ports that are members of this MLT.')
rcMltPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("access", 1), ("trunk", 2))).clone('access')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltPortType.setStatus('current')
if mibBuilder.loadTexts: rcMltPortType.setDescription('The type of MLT port: access(1) or trunk(2).')
rcMltNumVlanIds = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcMltNumVlanIds.setStatus('current')
if mibBuilder.loadTexts: rcMltNumVlanIds.setDescription('Used to indicate the number of VLAN IDs that are stored in the rcMltVlanIds variable.')
rcMltVlanIds = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 6), IdList().subtype(subtypeSpec=ValueSizeConstraint(0, 8192))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltVlanIds.setStatus('current')
if mibBuilder.loadTexts: rcMltVlanIds.setDescription('An array used to identify which VLANs this MLT is associated with. Each VLAN ID is stored as a two octet value. The first octet in the pair holds bits 15-8 of the VLAN ID, while the second octet holds bits 7-0 of the VLAN ID.')
rcMltRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltRowStatus.setStatus('current')
if mibBuilder.loadTexts: rcMltRowStatus.setDescription('Used to create/delete entries in the rcMltTable.')
rcMltEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 8), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltEnable.setStatus('current')
if mibBuilder.loadTexts: rcMltEnable.setDescription('Enable the entry.')
rcMltLoadBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltLoadBalance.setStatus('current')
if mibBuilder.loadTexts: rcMltLoadBalance.setDescription('Perform load balance?')
rcMltDistributionAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("basic", 2), ("advanced", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltDistributionAlgorithm.setStatus('current')
if mibBuilder.loadTexts: rcMltDistributionAlgorithm.setDescription('The load balancing algorithm.')
rcMltIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 11), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcMltIfIndex.setStatus('current')
if mibBuilder.loadTexts: rcMltIfIndex.setDescription("Used to indicate the 'logical' ifIndex assigned to this MLT.")
rcMltMltType = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normalMLT", 1), ("istMLT", 2), ("splitMLT", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltMltType.setStatus('current')
if mibBuilder.loadTexts: rcMltMltType.setDescription('MLT type.')
rcMltSmltId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltSmltId.setStatus('current')
if mibBuilder.loadTexts: rcMltSmltId.setDescription('Split MLT id.')
rcMltRunningType = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normalMLT", 1), ("istMLT", 2), ("splitMLT", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcMltRunningType.setStatus('current')
if mibBuilder.loadTexts: rcMltRunningType.setDescription('Split MLT running type.')
rcMltSvlanPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("uni", 2), ("nni", 3))).clone('normal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltSvlanPortType.setStatus('current')
if mibBuilder.loadTexts: rcMltSvlanPortType.setDescription('Set MLT port type.')
rcMltMulticastDistribution = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 16), EnableValue().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltMulticastDistribution.setStatus('current')
if mibBuilder.loadTexts: rcMltMulticastDistribution.setDescription('Enable/Disable multicast distribution per mlt.')
rcMltLacp10gBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 17), EnableValue().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltLacp10gBackup.setStatus('current')
if mibBuilder.loadTexts: rcMltLacp10gBackup.setDescription('Enable/Disable 10G Mlt reliance backup mode.')
rcMltAggregatable = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 18), EnableValue().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltAggregatable.setStatus('current')
if mibBuilder.loadTexts: rcMltAggregatable.setDescription('Enable/Disable link aggregation on a MLT.')
rcMltClearLinkAggregate = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("none", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltClearLinkAggregate.setStatus('current')
if mibBuilder.loadTexts: rcMltClearLinkAggregate.setDescription('clear link aggregate, equivalent to disable and re-enable aggregatable on the MLT.')
rcMltNtStgEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 20), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltNtStgEnable.setStatus('current')
if mibBuilder.loadTexts: rcMltNtStgEnable.setDescription('Indicates whether this MLT is operating in Nortel Mode or in Cisco Mode. true = Nortel Mode false = Cisco Mode.')
rcMltDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 21), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcMltDesignatedPort.setStatus('current')
if mibBuilder.loadTexts: rcMltDesignatedPort.setDescription('Indicates the Designated port for the MLT.')
rcMltAggOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 22), EnableValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcMltAggOperState.setStatus('current')
if mibBuilder.loadTexts: rcMltAggOperState.setDescription('Link aggregation state on a MLT.')
rcMltAggTimeOfLastOperChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 23), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcMltAggTimeOfLastOperChange.setStatus('current')
if mibBuilder.loadTexts: rcMltAggTimeOfLastOperChange.setDescription('The time value since the interface entered its current operational state.')
rcMltVplsMgmtVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 24), EnableValue().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltVplsMgmtVlan.setStatus('current')
if mibBuilder.loadTexts: rcMltVplsMgmtVlan.setDescription('Management Vlan is configured on this mlt')
rcMltLoadDistributionOption = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bmac", 1), ("cmac", 2), ("bvid", 3), ("isid", 4))).clone('bmac')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltLoadDistributionOption.setStatus('current')
if mibBuilder.loadTexts: rcMltLoadDistributionOption.setDescription('Used to specify the Load Balancing option for MLT in UNI')
rcMltUniAggrMacIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 448))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltUniAggrMacIdx.setStatus('current')
if mibBuilder.loadTexts: rcMltUniAggrMacIdx.setDescription('Used to specify the index of the mac address pool reserved for MLT uni')
rcMltUniAggrMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 27), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcMltUniAggrMacAddress.setStatus('current')
if mibBuilder.loadTexts: rcMltUniAggrMacAddress.setDescription('Used to display the mac address reserved for this MLT')
rcMltQinqEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(32800)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltQinqEtherType.setStatus('current')
if mibBuilder.loadTexts: rcMltQinqEtherType.setDescription('The qinq ether type value. It should be displayed and input as Hex value. It would only be used when MLT is associated with QnQ service UNI. Otherwise, it would be ignored')
rcMltEgressCosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20)).clone('DEFAULT_PORT_PROFILE')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltEgressCosProfileName.setStatus('current')
if mibBuilder.loadTexts: rcMltEgressCosProfileName.setDescription('Mlt Egress COS Profile Name, which is defined by rcCosProfileTable')
rcMltEgressPolicerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 30), EnableValue().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltEgressPolicerAdminState.setStatus('current')
if mibBuilder.loadTexts: rcMltEgressPolicerAdminState.setDescription('Enable/disable Mlt Egress Policer')
rcMltAggrEgressBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 31), EnableValue().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltAggrEgressBandwidth.setStatus('current')
if mibBuilder.loadTexts: rcMltAggrEgressBandwidth.setDescription('Aggregated Egress Bandwidth Policer is used.')
rcMltAggrIngressBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 32), EnableValue().clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltAggrIngressBandwidth.setStatus('current')
if mibBuilder.loadTexts: rcMltAggrIngressBandwidth.setDescription('Aggregated Ingress Bandwidth Policer is used.')
rcMltAggrMacAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 33), EnableValue().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltAggrMacAlloc.setStatus('current')
if mibBuilder.loadTexts: rcMltAggrMacAlloc.setDescription('Aggregated Mac Allocation is used')
rcMltAggMinLink = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltAggMinLink.setStatus('current')
if mibBuilder.loadTexts: rcMltAggMinLink.setDescription('If number of active links goes below configured minimum-link number, the entire LAG is declared down.')
rcMltMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1518, 9600)).clone(1518)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltMtu.setStatus('current')
if mibBuilder.loadTexts: rcMltMtu.setDescription('MTU for ports in Mlt')
rcMltInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("silent", 2), ("uni", 3))).clone('silent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltInterfaceType.setStatus('current')
if mibBuilder.loadTexts: rcMltInterfaceType.setDescription('This value indicates whether ports in the mlt are of type <normal/silent/uni>. A port can be included in any EVPN service only if this attribute is set to uni. If the port is not part of any VLAN the interface-type is set to silent. Before adding a port to a VLAN the interface type should be changed to normal.')
rcMltConfiguredMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 37), PortSet()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltConfiguredMembers.setStatus('current')
if mibBuilder.loadTexts: rcMltConfiguredMembers.setDescription('The set of ports that are configured members of this MLT. Toronto release allows us to add a port to a LACP enabled MLT. These port get added as ConfiguredMembers')
rcMltMtuAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 38), EnableValue().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltMtuAdminState.setStatus('current')
if mibBuilder.loadTexts: rcMltMtuAdminState.setDescription('Set Mlt MTU enable or disable')
rcMltPeerPortMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 39), PortSet()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcMltPeerPortMembers.setStatus('current')
if mibBuilder.loadTexts: rcMltPeerPortMembers.setDescription('The set of Peer ports which are connected to local ports (rcMltPortMember) of this MLT')
rcMltCpLimitPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 20000)).clone(8000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltCpLimitPktRate.setStatus('current')
if mibBuilder.loadTexts: rcMltCpLimitPktRate.setDescription('Used to limit Control packets on the port to qos-levels 6 and 7. Sets the limit in packets per second.')
rcMltCpLimitShutDownEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 41), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltCpLimitShutDownEnable.setStatus('current')
if mibBuilder.loadTexts: rcMltCpLimitShutDownEnable.setDescription('Used to indicate if the mlt-ports should be shutdown when the CpLimitPktRate is exceeded.')
rcMltVlanIdList = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 42), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltVlanIdList.setStatus('current')
if mibBuilder.loadTexts: rcMltVlanIdList.setDescription('This bitfield is used to identify which VLANs this MLT is associated with. Each VLAN ID is stored as a bit. The most-significant (left-most) bit represents Vlan Id 1.')
rcMltEntryOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("local", 2), ("remote", 3), ("localAndRemote", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcMltEntryOwner.setStatus('current')
if mibBuilder.loadTexts: rcMltEntryOwner.setDescription('Defines the owner of the MLT.')
rcMltDatapathProgrammingState = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 10, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("local", 2), ("remote", 3), ("localAndRemote", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcMltDatapathProgrammingState.setStatus('current')
if mibBuilder.loadTexts: rcMltDatapathProgrammingState.setDescription('Defines the datapath programming state of the MLT.')
rcMltMcastDistribution = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 1, 17, 11))
rcMltMcastDistributionEnable = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 17, 11, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltMcastDistributionEnable.setStatus('current')
if mibBuilder.loadTexts: rcMltMcastDistributionEnable.setDescription('Used to enable/disable this feature to distribute multicast traffic on MLT ports. All the cards in the system must be E-Tickets. Cannot perform distribution in a mixed mode.')
rcMltMcastDistributionGrpMask = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 17, 11, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltMcastDistributionGrpMask.setStatus('current')
if mibBuilder.loadTexts: rcMltMcastDistributionGrpMask.setDescription('Group Mask. Create a MLT abstraction layer to distribute traffic basd on (source, group) information of the multicast packet. The algorithm to pick the actual port nedds to generate a fairly random number for different combinations but a lways generate the same number for a given (source, group) pair. By default, the number of active ports of the MLT is used to MOD the pseudo-random number generated by the XOR of each byte of the masked group address with the masked source address.')
rcMltMcastDistributionSrcMask = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 17, 11, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltMcastDistributionSrcMask.setStatus('current')
if mibBuilder.loadTexts: rcMltMcastDistributionSrcMask.setDescription('Source Mask.')
rcMltMcastDistributionRedistributionEnable = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 17, 11, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltMcastDistributionRedistributionEnable.setStatus('current')
if mibBuilder.loadTexts: rcMltMcastDistributionRedistributionEnable.setDescription('Enable redistribution.')
rcSltPortTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 17, 12), )
if mibBuilder.loadTexts: rcSltPortTable.setStatus('current')
if mibBuilder.loadTexts: rcSltPortTable.setDescription('Table containing config info for SLT')
rcSltPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 17, 12, 1), ).setIndexNames((0, "RC-MLT-MIB", "rcSltPortIfIndex"))
if mibBuilder.loadTexts: rcSltPortEntry.setStatus('current')
if mibBuilder.loadTexts: rcSltPortEntry.setDescription('Entry containing configuration information for a particular Multi-Link Trunk.')
rcSltPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 12, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcSltPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: rcSltPortIfIndex.setDescription('An interface for this SLT.')
rcSltPortSmltId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcSltPortSmltId.setStatus('current')
if mibBuilder.loadTexts: rcSltPortSmltId.setDescription('A uniquely identifies the Single-Link Trunk associated with this entry.')
rcSltPortOperType = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("smlt", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcSltPortOperType.setStatus('current')
if mibBuilder.loadTexts: rcSltPortOperType.setDescription('The current operate type of the port normal or smlt.')
rcSltPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 12, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcSltPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: rcSltPortRowStatus.setDescription('Used to create/delete entries of the Table.')
rcMltVlacpTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 17, 13), )
if mibBuilder.loadTexts: rcMltVlacpTable.setStatus('current')
if mibBuilder.loadTexts: rcMltVlacpTable.setDescription('Mlt Virtual LACP table')
rcMltVlacpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 17, 13, 1), ).setIndexNames((0, "RC-MLT-MIB", "rcMltId"))
if mibBuilder.loadTexts: rcMltVlacpEntry.setStatus('current')
if mibBuilder.loadTexts: rcMltVlacpEntry.setDescription('Entry containing info. for a particular port')
rcMltVlacpAdminEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 13, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltVlacpAdminEnable.setStatus('current')
if mibBuilder.loadTexts: rcMltVlacpAdminEnable.setDescription('Administratively enable/disable Virtual LACP on a MLT')
rcMltVlacpFastPeriodicTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 13, 1, 2), Integer32().clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltVlacpFastPeriodicTimer.setStatus('current')
if mibBuilder.loadTexts: rcMltVlacpFastPeriodicTimer.setDescription('The number of miliseconds between periodic transmissions using Short Timeouts')
rcMltVlacpTimeoutScale = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 13, 1, 3), Integer32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltVlacpTimeoutScale.setStatus('current')
if mibBuilder.loadTexts: rcMltVlacpTimeoutScale.setDescription('Scalar value used to calculate timeout time from periodic time. Timeout = PeriodicTime * TimeoutScale')
rcMltVlacpEtherMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 13, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltVlacpEtherMacAddress.setStatus('current')
if mibBuilder.loadTexts: rcMltVlacpEtherMacAddress.setDescription("Multicast Mac Address exclusively used for VLACPDU's")
rcMltVlacpDualHomingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 13, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcMltVlacpDualHomingEnable.setStatus('current')
if mibBuilder.loadTexts: rcMltVlacpDualHomingEnable.setDescription('Enable/Disable Dual homing on Virtual LACP on a MLT')
rcMltBvidPortTable = MibTable((1, 3, 6, 1, 4, 1, 2272, 1, 17, 14), )
if mibBuilder.loadTexts: rcMltBvidPortTable.setStatus('current')
if mibBuilder.loadTexts: rcMltBvidPortTable.setDescription('Table contains Bridge Vlan configured information for Primary and Secondary ports for MLT-UNI')
rcMltBvidPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2272, 1, 17, 14, 1), ).setIndexNames((0, "RC-MLT-MIB", "rcMltBvidMltId"), (0, "RC-MLT-MIB", "rcMltBvidVlanId"))
if mibBuilder.loadTexts: rcMltBvidPortEntry.setStatus('current')
if mibBuilder.loadTexts: rcMltBvidPortEntry.setDescription('Entry with Info about VLAN with its Primary and secondary ports for MLT-UNI')
rcMltBvidMltId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: rcMltBvidMltId.setStatus('current')
if mibBuilder.loadTexts: rcMltBvidMltId.setDescription('VLAN ID of the Port List')
rcMltBvidVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 14, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: rcMltBvidVlanId.setStatus('current')
if mibBuilder.loadTexts: rcMltBvidVlanId.setDescription('VLAN ID of the Port List')
rcMltBvidPrimaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 14, 1, 3), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltBvidPrimaryPort.setStatus('current')
if mibBuilder.loadTexts: rcMltBvidPrimaryPort.setDescription('Primary port of the MLT for the VLAN when load distribution option is b-vid')
rcMltBvidSecondaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 14, 1, 4), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltBvidSecondaryPort.setStatus('current')
if mibBuilder.loadTexts: rcMltBvidSecondaryPort.setDescription('Secondary port of the MLT for the VLAN when load distribution option is b-vid ')
rcMltBvidRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2272, 1, 17, 14, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rcMltBvidRowStatus.setStatus('current')
if mibBuilder.loadTexts: rcMltBvidRowStatus.setDescription('Used to Add/delete entries in the table')
rcMltNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2272, 1, 17, 15))
rcMltAggTrapEvent = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 17, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("localdown", 1), ("remotedown", 2), ("up", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rcMltAggTrapEvent.setStatus('current')
if mibBuilder.loadTexts: rcMltAggTrapEvent.setDescription('Three trap events type: local down(1), remote down(2), up(3).')
rcLinkFlapDetectAutoPortDownEnable = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 27, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcLinkFlapDetectAutoPortDownEnable.setStatus('current')
if mibBuilder.loadTexts: rcLinkFlapDetectAutoPortDownEnable.setDescription('Used to enable/disable the Link Flap Detect feature. When enabled this feature will monitor the number of times a port goes down during a certain interval. If the number exceeds a given bound the port will be forced out-of-service.')
rcLinkFlapDetectSendTrap = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 27, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcLinkFlapDetectSendTrap.setStatus('current')
if mibBuilder.loadTexts: rcLinkFlapDetectSendTrap.setDescription('Used to configure whether a trap should be sent if the port is forced out-of-service.')
rcLinkFlapDetectFrequency = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 27, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcLinkFlapDetectFrequency.setStatus('current')
if mibBuilder.loadTexts: rcLinkFlapDetectFrequency.setDescription('Used to configure the number of times the port can go down.')
rcLinkFlapDetectInterval = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 27, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcLinkFlapDetectInterval.setStatus('current')
if mibBuilder.loadTexts: rcLinkFlapDetectInterval.setDescription('Used to configure the interval (in minutes).')
rcL2RedundancyHaCpuState = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 32, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("initialization", 0), ("oneWayActive", 1), ("twoWayActive", 2), ("synchronized", 3), ("remoteIncompatible", 4), ("error", 5), ("disabled", 6), ("peerNotConnected", 7), ("peerConnected", 8), ("lostPeerConnection", 9), ("notSynchronized", 10), ("synchronizeInProgress", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcL2RedundancyHaCpuState.setStatus('current')
if mibBuilder.loadTexts: rcL2RedundancyHaCpuState.setDescription('Indicate the Ha-CPU state. initialization - indicate the CPU is in this state. oneWayActive - Modules that need to be synchronized have registered with the framework (either locally or a message was received from remote CPU (1). twoWayActive - Modules that need to be synchronized have registered with the framework (either locally or a message was received from remote CPU (2). synchronized - Table based synchroniztion was completed on the current CPU (3). remoteIncompatible - CPUs framework version is incompatible with the remote CPU (4). error - If an invalid event is generated in a given state the CPU enters Error state (5). disabled - High Availability is not enabled (6). peerNotConnected - no peer connection is established (7). peerConnected - peer connection is established (8). lostPeerConnection - lost connection to peer/Standby CPU (9). notSynchronized - Table Sync is not complete (10). synchronizeInProgress - Table Sync is in progress (11).')
rcL2RedundancyHaEvent = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 32, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("restart", 0), ("systemRegistrationDone", 1), ("tableSynchronizationDone", 2), ("versionIncompatible", 3), ("noEvent", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcL2RedundancyHaEvent.setStatus('current')
if mibBuilder.loadTexts: rcL2RedundancyHaEvent.setDescription('Indicate the Ha event status. restart (0) - Causes the state machine to restart systemRegistrationDone (1)- Causes the CPU to transfer to One Way or Two Way Active state. Locally or message received from remote CPU. tableSynchronizationDone (2) - Causes the CPU to transfer to Synchronized state. versionIncompatible (3) - Causes the CPU to go to Remote Incompatible state noEvent (4) - Means no event has occured uptill now. ')
rcL2RedundancyEnable = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 32, 3), EnableValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rcL2RedundancyEnable.setStatus('current')
if mibBuilder.loadTexts: rcL2RedundancyEnable.setDescription('Indicate the feature enable/disable.')
rcL2RedundancyStandbyCpu = MibScalar((1, 3, 6, 1, 4, 1, 2272, 1, 32, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hotStandbyCPU", 1), ("warmStandbyCPU", 2), ("standbyCPUNotPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcL2RedundancyStandbyCpu.setStatus('current')
if mibBuilder.loadTexts: rcL2RedundancyStandbyCpu.setDescription('Indicate if the L2 Redundancy is enabled on the standby CPU.')
mibBuilder.exportSymbols("RC-MLT-MIB", rcStatSmltSmltUpTxMsgCnt=rcStatSmltSmltUpTxMsgCnt, rcMltNtStgEnable=rcMltNtStgEnable, rcSltPortRowStatus=rcSltPortRowStatus, rcMltPotentialMembers=rcMltPotentialMembers, rcMltBvidPrimaryPort=rcMltBvidPrimaryPort, rcMltConfiguredMembers=rcMltConfiguredMembers, rcMltRowStatus=rcMltRowStatus, rcStatMltIfExtnTable=rcStatMltIfExtnTable, rcSltPortEntry=rcSltPortEntry, rcStatMltIpReasmOKs=rcStatMltIpReasmOKs, rcStatSmltSendMacTblTxMsgCnt=rcStatSmltSendMacTblTxMsgCnt, rcMltNumMlts=rcMltNumMlts, rcL2RedundancyHaEvent=rcL2RedundancyHaEvent, rcStatMltUtilEntry=rcStatMltUtilEntry, rcMltMcastDistributionSrcMask=rcMltMcastDistributionSrcMask, rcMltVlacpAdminEnable=rcMltVlacpAdminEnable, rcStatSmltSmltDownRxMsgCnt=rcStatSmltSmltDownRxMsgCnt, rcStatMltUtilTrafficLast30Min=rcStatMltUtilTrafficLast30Min, rcLinkFlapDetectInterval=rcLinkFlapDetectInterval, rcStatMltEtherFrameTooLong=rcStatMltEtherFrameTooLong, rcMltAggrEgressBandwidth=rcMltAggrEgressBandwidth, rcMltAggMinLink=rcMltAggMinLink, rcMltBvidMltId=rcMltBvidMltId, rcMltEgressCosProfileName=rcMltEgressCosProfileName, rcStatSmltReqMacTblRxMsgCnt=rcStatSmltReqMacTblRxMsgCnt, rcMltMltType=rcMltMltType, rcStatMltIpOutNoRoutes=rcStatMltIpOutNoRoutes, rcStatMltEtherSingleCollFrames=rcStatMltEtherSingleCollFrames, rcStatMltIpInHdrErrors=rcStatMltIpInHdrErrors, rcMltVlacpTimeoutScale=rcMltVlacpTimeoutScale, rcMltDisablePortsOnShutdown=rcMltDisablePortsOnShutdown, rcSltPortSmltId=rcSltPortSmltId, rcStatSmltMacAddrAgeExpRxMsgCnt=rcStatSmltMacAddrAgeExpRxMsgCnt, rcStatMltIfExtnIfOutMulticastPkts=rcStatMltIfExtnIfOutMulticastPkts, rcStatMlt=rcStatMlt, rcStatSmltMacAddrAgeExpTxMsgCnt=rcStatSmltMacAddrAgeExpTxMsgCnt, rcStatMltEtherDeferredTransmiss=rcStatMltEtherDeferredTransmiss, rcMltVlacpEtherMacAddress=rcMltVlacpEtherMacAddress, rcMltEnable=rcMltEnable, rcStatMltIpFragFails=rcStatMltIpFragFails, rcMltLoadBalance=rcMltLoadBalance, rcMltMtu=rcMltMtu, rcStatSmltMacAddrAgeOutTxMsgCnt=rcStatSmltMacAddrAgeOutTxMsgCnt, rcStatMltIfExtnIfInMulticastPkts=rcStatMltIfExtnIfInMulticastPkts, rcStatMltUtilTrafficType=rcStatMltUtilTrafficType, rcMltId=rcMltId, rcStatMltEtherCarrierSenseError=rcStatMltEtherCarrierSenseError, rcMltAggTimeOfLastOperChange=rcMltAggTimeOfLastOperChange, rcStatMltIpInReceives=rcStatMltIpInReceives, rcStatMltIfExtnIfInBroadcastPkts=rcStatMltIfExtnIfInBroadcastPkts, rcStatMltUtilTrafficLast1Hour=rcStatMltUtilTrafficLast1Hour, rcMltLacp10gBackup=rcMltLacp10gBackup, rcMltEgressPolicerAdminState=rcMltEgressPolicerAdminState, rcMltVlanIdList=rcMltVlanIdList, rcMltPortMembers=rcMltPortMembers, rcMltVlacpTable=rcMltVlacpTable, rcStatMltIpReasmFails=rcStatMltIpReasmFails, rcMltMcastDistributionRedistributionEnable=rcMltMcastDistributionRedistributionEnable, rcMltBvidRowStatus=rcMltBvidRowStatus, rcLinkFlapDetectAutoPortDownEnable=rcLinkFlapDetectAutoPortDownEnable, rcMltBvidPortTable=rcMltBvidPortTable, rcStatSmltLacpInfoRxMsgCnt=rcStatSmltLacpInfoRxMsgCnt, rcStatMltEtherIMacReceiveError=rcStatMltEtherIMacReceiveError, rcSltPortIfIndex=rcSltPortIfIndex, rcStatMltEtherEntry=rcStatMltEtherEntry, rcStatMltIfExtnIfHCOutOctets=rcStatMltIfExtnIfHCOutOctets, rcL2RedundancyHaCpuState=rcL2RedundancyHaCpuState, rcStatMltIfUtilIfHCOutUtil=rcStatMltIfUtilIfHCOutUtil, rcLinkFlapDetectSendTrap=rcLinkFlapDetectSendTrap, rcMltVplsMgmtVlan=rcMltVplsMgmtVlan, rcStatMltIpTable=rcStatMltIpTable, rcMltCpLimitShutDownEnable=rcMltCpLimitShutDownEnable, rcSltPortOperType=rcSltPortOperType, rcMltEntryOwner=rcMltEntryOwner, rcStatMltIpMltId=rcStatMltIpMltId, rcMltAggTrapEvent=rcMltAggTrapEvent, rcStatMltIpInDelivers=rcStatMltIpInDelivers, rcStatMltIfUtilIfHCInUtil=rcStatMltIfUtilIfHCInUtil, rcStatMltEtherIMacTransmitError=rcStatMltEtherIMacTransmitError, PYSNMP_MODULE_ID=rcMltMib, rcStatMltIfExtnIfOutBroadcastPkts=rcStatMltIfExtnIfOutBroadcastPkts, rcStatMltIfExtnIfHCInBroadcastPkt=rcStatMltIfExtnIfHCInBroadcastPkt, rcMltVlanIds=rcMltVlanIds, rcStatMltEtherExcessiveCollis=rcStatMltEtherExcessiveCollis, rcStatMltUtilPortIfIndex=rcStatMltUtilPortIfIndex, rcStatSmltDelMacAddrTxMsgCnt=rcStatSmltDelMacAddrTxMsgCnt, rcMltRunningType=rcMltRunningType, rcL2RedundancyStandbyCpu=rcL2RedundancyStandbyCpu, rcStatMltIpInDiscards=rcStatMltIpInDiscards, rcStatSmltHelloRxMsgCnt=rcStatSmltHelloRxMsgCnt, rcStatMltEtherFCSErrors=rcStatMltEtherFCSErrors, rcStatSmltStgInfoTxMsgCnt=rcStatSmltStgInfoTxMsgCnt, rcStatMltIfUtilIfHCInOctets=rcStatMltIfUtilIfHCInOctets, rcStatMltIfExtnEntry=rcStatMltIfExtnEntry, rcStatMltIpEntry=rcStatMltIpEntry, rcMltTable=rcMltTable, rcMltNotificationObjects=rcMltNotificationObjects, rcMltBvidVlanId=rcMltBvidVlanId, rcStatMltIpFragOKs=rcStatMltIpFragOKs, rcStatSmltLearnMacAddrRxMsgCnt=rcStatSmltLearnMacAddrRxMsgCnt, rcStatMltUtilTrafficLast5Min=rcStatMltUtilTrafficLast5Min, rcMltSvlanPortType=rcMltSvlanPortType, rcMltUniAggrMacAddress=rcMltUniAggrMacAddress, rcStatSmltIstDownCnt=rcStatSmltIstDownCnt, rcStatMltIfUtilMltId=rcStatMltIfUtilMltId, rcStatMltIfUtilEntry=rcStatMltIfUtilEntry, rcMltClearLinkAggregate=rcMltClearLinkAggregate, rcMltVlacpDualHomingEnable=rcMltVlacpDualHomingEnable, rcMltIstSessionEnable=rcMltIstSessionEnable, rcMltVlacpFastPeriodicTimer=rcMltVlacpFastPeriodicTimer, rcMltNumVlanIds=rcMltNumVlanIds, rcMltDesignatedPort=rcMltDesignatedPort, rcStatMltEtherMltId=rcStatMltEtherMltId, rcMltUniAggrMacIdx=rcMltUniAggrMacIdx, rcStatSmltPortDownRxMsgCnt=rcStatSmltPortDownRxMsgCnt, rcStatMltIfExtnIfHCInOctets=rcStatMltIfExtnIfHCInOctets, rcMltIstPeerIp=rcMltIstPeerIp, rcMltIstVlanId=rcMltIstVlanId, rcMltMulticastDistribution=rcMltMulticastDistribution, rcStatMltIpInAddrErrors=rcStatMltIpInAddrErrors, rcStatMltIfExtnMltId=rcStatMltIfExtnMltId, rcStatMltIpOutDiscards=rcStatMltIpOutDiscards, rcL2RedundancyEnable=rcL2RedundancyEnable, rcLinkFlapDetectFrequency=rcLinkFlapDetectFrequency, rcStatMltIpReasmReqds=rcStatMltIpReasmReqds, rcStatSmltIgmpTxMsgCnt=rcStatSmltIgmpTxMsgCnt, rcMltIfIndex=rcMltIfIndex, rcMltMcastDistributionGrpMask=rcMltMcastDistributionGrpMask, rcStatSmltHelloTxMsgCnt=rcStatSmltHelloTxMsgCnt, rcStatMltEtherMultipleCollFrames=rcStatMltEtherMultipleCollFrames, rcMltInterfaceType=rcMltInterfaceType, rcMltBvidSecondaryPort=rcMltBvidSecondaryPort, rcStatMltIpRoutingDiscards=rcStatMltIpRoutingDiscards, rcStatSmltSmltDownTxMsgCnt=rcStatSmltSmltDownTxMsgCnt, rcStatMltIfExtnIfHCOutUcastPkts=rcStatMltIfExtnIfHCOutUcastPkts, rcStatSmltPortDownTxMsgCnt=rcStatSmltPortDownTxMsgCnt, rcStatSmltMacAddrAgeOutRxMsgCnt=rcStatSmltMacAddrAgeOutRxMsgCnt, rcMltAggrIngressBandwidth=rcMltAggrIngressBandwidth, rcMltMcastDistributionEnable=rcMltMcastDistributionEnable, rcStatMltIpFragCreates=rcStatMltIpFragCreates, rcMltPeerPortMembers=rcMltPeerPortMembers, rcMltBvidPortEntry=rcMltBvidPortEntry, rcMltEntry=rcMltEntry, rcMltCpLimitPktRate=rcMltCpLimitPktRate, rcStatMltEtherTable=rcStatMltEtherTable, rcStatMltIpInUnknownProtos=rcStatMltIpInUnknownProtos, rcStatSmltStgInfoRxMsgCnt=rcStatSmltStgInfoRxMsgCnt, rcStatMltIfExtnIfHCOutMulticast=rcStatMltIfExtnIfHCOutMulticast, rcMltSmltId=rcMltSmltId, rcStatMltIfUtilTable=rcStatMltIfUtilTable, rcMltMcastDistribution=rcMltMcastDistribution, rcStatMltIfExtnIfHCInUcastPkts=rcStatMltIfExtnIfHCInUcastPkts, rcStatSmltIgmpRxMsgCnt=rcStatSmltIgmpRxMsgCnt, rcMltVlacpEntry=rcMltVlacpEntry, rcStatSmltSmltUpRxMsgCnt=rcStatSmltSmltUpRxMsgCnt, rcStatSmltLacpInfoTxMsgCnt=rcStatSmltLacpInfoTxMsgCnt, rcMltLoadDistributionOption=rcMltLoadDistributionOption, rcStatSmltReqMacTblTxMsgCnt=rcStatSmltReqMacTblTxMsgCnt, rcStatMltUtilTable=rcStatMltUtilTable, rcMltDatapathProgrammingState=rcMltDatapathProgrammingState, rcMltAggrMacAlloc=rcMltAggrMacAlloc, rcStatSmltRxUnknownMsgTypeCnt=rcStatSmltRxUnknownMsgTypeCnt, rcMltIstSessionStatus=rcMltIstSessionStatus, rcStatMltIfExtnIfHCOutBroadcast=rcStatMltIfExtnIfHCOutBroadcast, rcMltName=rcMltName, rcMltAggOperState=rcMltAggOperState, rcMltQinqEtherType=rcMltQinqEtherType, rcMltMib=rcMltMib, rcStatSmltDelMacAddrRxMsgCnt=rcStatSmltDelMacAddrRxMsgCnt, rcMltDistributionAlgorithm=rcMltDistributionAlgorithm, rcStatMltIfUtilIfHCOutOctets=rcStatMltIfUtilIfHCOutOctets, rcMltPortType=rcMltPortType, rcStatSmltSendMacTblRxMsgCnt=rcStatSmltSendMacTblRxMsgCnt, rcMltMtuAdminState=rcMltMtuAdminState, rcStatMltIpForwDatagrams=rcStatMltIpForwDatagrams, rcStatMltEtherSQETestError=rcStatMltEtherSQETestError, rcStatMltEtherLateCollisions=rcStatMltEtherLateCollisions, rcMltAggregatable=rcMltAggregatable, rcStatMltIpOutRequest=rcStatMltIpOutRequest, rcStatMltIfExtnIfHCInMulticastPkt=rcStatMltIfExtnIfHCInMulticastPkt, rcStatMltEtherAlignmentErrors=rcStatMltEtherAlignmentErrors, rcStatSmltLearnMacAddrTxMsgCnt=rcStatSmltLearnMacAddrTxMsgCnt, rcSltPortTable=rcSltPortTable)
