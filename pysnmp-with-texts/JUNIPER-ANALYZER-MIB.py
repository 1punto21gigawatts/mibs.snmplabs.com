#
# PySNMP MIB module JUNIPER-ANALYZER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-ANALYZER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:58:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
jnxExAnalyzer, = mibBuilder.importSymbols("JUNIPER-EX-SMI", "jnxExAnalyzer")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Unsigned32, Counter32, MibIdentifier, Counter64, IpAddress, NotificationType, ModuleIdentity, TimeTicks, ObjectIdentity, Integer32, iso, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Unsigned32", "Counter32", "MibIdentifier", "Counter64", "IpAddress", "NotificationType", "ModuleIdentity", "TimeTicks", "ObjectIdentity", "Integer32", "iso", "Bits")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
jnxAnalyzerMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1))
jnxAnalyzerMIB.setRevisions(('2008-08-01 00:00', '2009-04-22 00:00', '2010-07-30 00:00', '2014-07-17 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxAnalyzerMIB.setRevisionsDescriptions(('Initial version', 'Marking jnxAnalyzerStatus as deprecated', 'Marking deprecated OIDs as obsolete', "Rectifying typo errors from 'Anlayzer' to 'Analyzer'",))
if mibBuilder.loadTexts: jnxAnalyzerMIB.setLastUpdated('201407170000Z')
if mibBuilder.loadTexts: jnxAnalyzerMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxAnalyzerMIB.setContactInfo(' Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net')
if mibBuilder.loadTexts: jnxAnalyzerMIB.setDescription("This is Juniper Networks' implementation of enterprise specific MIB for Analyzer and Remote Analyzer. Port mirroring is widely used in enterprise switches to send a copy of all or sampled packets seen on a port to an anlyzer on the same or different switch.")
jnxAnalyzerMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1))
jnxAnalyzerTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 1), )
if mibBuilder.loadTexts: jnxAnalyzerTable.setStatus('current')
if mibBuilder.loadTexts: jnxAnalyzerTable.setDescription('Network traffic passing through ports is analyzed by sending a copy of the traffic to another port on the same or different switch. This table contains the analyzer parameters.')
jnxAnalyzerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 1, 1), ).setIndexNames((0, "JUNIPER-ANALYZER-MIB", "jnxAnalyzerName"))
if mibBuilder.loadTexts: jnxAnalyzerEntry.setStatus('current')
if mibBuilder.loadTexts: jnxAnalyzerEntry.setDescription('A row instance contains the Analyzer Name, Analyzer Status, Mirroring Ratio, Loss Priority.')
jnxAnalyzerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: jnxAnalyzerName.setStatus('current')
if mibBuilder.loadTexts: jnxAnalyzerName.setDescription('This object identifies a unique Analyzer configured on the switch.')
jnxAnalyzerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAnalyzerStatus.setStatus('obsolete')
if mibBuilder.loadTexts: jnxAnalyzerStatus.setDescription('This object identifies whether the mirroring associated with a particular analyzer is enabled or disabled.')
jnxMirroringRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 1, 1, 3), Unsigned32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMirroringRatio.setStatus('current')
if mibBuilder.loadTexts: jnxMirroringRatio.setDescription('This object will specify the mirroring ratio. User can configure the analyzer to mirror only one out of X packets [1:X packets] in the ingress/egress side based on whether the port is configured for ingress or egress mirroring. The configuration supports a range from 1: X [0 <= X <= 2047].Default value is 1.')
jnxLossPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("low", 0), ("high", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLossPriority.setStatus('current')
if mibBuilder.loadTexts: jnxLossPriority.setDescription('The analyzer port may be congested when the number of packets exceeds the bandwidth of the analyzer port. So the loss-priority parameter is enabled. The switched packets will not get affected by this. The value 0 corresponds to low priority.The value 1 corresponds to high loss priority. ')
jnxAnalyzerInputTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 2), )
if mibBuilder.loadTexts: jnxAnalyzerInputTable.setStatus('obsolete')
if mibBuilder.loadTexts: jnxAnalyzerInputTable.setDescription('An analyzer Session is an association of several source ports to a destination port.A range or series of ports can be mirrored in a session.')
jnxAnalyzerInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 2, 1), ).setIndexNames((0, "JUNIPER-ANALYZER-MIB", "jnxAnalyzerName"), (0, "JUNIPER-ANALYZER-MIB", "jnxAnalyzerInputValue"))
if mibBuilder.loadTexts: jnxAnalyzerInputEntry.setStatus('obsolete')
if mibBuilder.loadTexts: jnxAnalyzerInputEntry.setDescription('An Entry is created for each Input Source port.')
jnxAnalyzerInputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: jnxAnalyzerInputValue.setStatus('obsolete')
if mibBuilder.loadTexts: jnxAnalyzerInputValue.setDescription('This identifies each different analyzer input source. If the value of jnxAnalyzerInputType is 1 then jnxAnalyzerInputValue refers to the input source Interface Name. If the value of jnxAnalyzerInputType is 2 then jnxAnalyzerInputValue refers to the input source vlan name.')
jnxAnalyzerInputOption = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ingress", 1), ("egress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAnalyzerInputOption.setStatus('obsolete')
if mibBuilder.loadTexts: jnxAnalyzerInputOption.setDescription('A source port is a switch port that is been mirrored. It can be mirrored based either on Ingress(received) traffic or egress (transmitted) traffic. The goal of receive (or ingress) Analyzer is to monitor as much as possible all the packets received by the source interface. The amount of received packets mirrored to the destination port depends on the mirroring ratio. A series or range of ingress ports can be mirrored in an analyzer session. The goal of transmit (or egress) analyzer is to monitor as much as possible all the packets sent by the source interface. The amount of egress packets mirrored to the destination port depends on the mirroring ratio.The copy is provided after the packet is modified. A range of egress ports can be mirrored in an analyzer session. The value 1 corresponds to mirroring ingress traffic. The value 2 corresponds to mirroring egress traffic.')
jnxAnalyzerInputType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("interface", 1), ("vlanname", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAnalyzerInputType.setStatus('obsolete')
if mibBuilder.loadTexts: jnxAnalyzerInputType.setDescription('This specifies whether interfaces or VLANs is mirrored. Mirroring can be done on the basis of the interface name.All packets received on a port configured for ingress mirroring is sent to the analyzer port.All packets sent out on a port configured for egress mirroring is sent to the analyzer port.Any number of network ports can be configured for ingress or egress mirroring.The value one of jnxAnalayzerInputType corresponds to mirroring the interface traffic. On a particular switch, the user can choose to monitor all the ports that belong to a particular VLAN. It is needed in order to analyze the network traffic in one or more VLANs.Mirroring can be configured in ingress direction only for VLAN. Mirroring can be done on the basis of VLAN name (supported only in ingress). All packets received on a particular VLAN are sent out to the analyzer.The value two of jnxAnalyzerInputType corresponds to mirroring vlan traffic.')
jnxAnalyzerOutputTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 3), )
if mibBuilder.loadTexts: jnxAnalyzerOutputTable.setStatus('current')
if mibBuilder.loadTexts: jnxAnalyzerOutputTable.setDescription('This table describes the destination port to which the traffic from the source ports are copied.')
jnxAnalyzerOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 3, 1), ).setIndexNames((0, "JUNIPER-ANALYZER-MIB", "jnxAnalyzerName"), (0, "JUNIPER-ANALYZER-MIB", "jnxAnalyzerOutputValue"))
if mibBuilder.loadTexts: jnxAnalyzerOutputEntry.setStatus('current')
if mibBuilder.loadTexts: jnxAnalyzerOutputEntry.setDescription('An Entry is created for each destination port or destination vlan.')
jnxAnalyzerOutputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: jnxAnalyzerOutputValue.setStatus('current')
if mibBuilder.loadTexts: jnxAnalyzerOutputValue.setDescription('This object identifies each different destination port or destination vlan. If the value of jnxAnalyzerOutputType is 1 then jnxAnalyzerOutputValue gives the destination interface name. If the value of jnxAnalyzerOutputType is 2 then jnxAnalyzerOutputValue gives the destination vlan name.')
jnxAnalyzerOutputType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("interface", 1), ("vlanname", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxAnalyzerOutputType.setStatus('current')
if mibBuilder.loadTexts: jnxAnalyzerOutputType.setDescription('The destination port can be on the same switch or on a different switch(Remote Analyzer). Value 1 specifies that the destination interface is on the same switch and it receives a copy of traffic from the source ports. The port does not transmit any traffic except that required for the analyzer session. The traffic for each Remote Analyzer session is carried over a user-specified Remote Analyzer VLAN that is dedicated for that Remote Analyzer session in all participating switches. A special vlan is confgiured exclusively for remote mirroring by marking it as analyzer vlan. Intermediate switches will have a few ports (minimum of 2 ports )as members of the analyzer vlan. These are the trunk ports which act as the link between the switches. The analyzer ports on the destination switch are also added to the Analyzer VLAN. Value 2 specifies that the traffic from all the source ports is copied into the Remote Analyzer vlan specified by the vlan name. In the source switch the analyzer session destination is given as the analyzer vlan. In the intermediate switches the analyzer sessions have the source and the destination as the analyzer vlan. The packet will reach the destination ports as it will be a part of the analyzer vlan.')
jnxExAnalyzerInputTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 4), )
if mibBuilder.loadTexts: jnxExAnalyzerInputTable.setStatus('current')
if mibBuilder.loadTexts: jnxExAnalyzerInputTable.setDescription('An analyzer Session is an association of several source ports to a destination port.A range or series of ports can be mirrored in a session.')
jnxExAnalyzerInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 4, 1), ).setIndexNames((0, "JUNIPER-ANALYZER-MIB", "jnxAnalyzerName"), (0, "JUNIPER-ANALYZER-MIB", "jnxExAnalyzerInputOption"), (0, "JUNIPER-ANALYZER-MIB", "jnxExAnalyzerInputValue"))
if mibBuilder.loadTexts: jnxExAnalyzerInputEntry.setStatus('current')
if mibBuilder.loadTexts: jnxExAnalyzerInputEntry.setDescription('An Entry is created for each Input Source port.')
jnxExAnalyzerInputOption = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ingress", 1), ("egress", 2), ("vlan", 3), ("egress-vlan", 4))))
if mibBuilder.loadTexts: jnxExAnalyzerInputOption.setStatus('current')
if mibBuilder.loadTexts: jnxExAnalyzerInputOption.setDescription('A source port is a switch port that is been mirrored. It can be mirrored based either on Ingress(received) traffic or egress (transmitted) traffic. The goal of receive (or ingress) Analyzer is to monitor as much as possible all the packets received by the source interface. The amount of received packets mirrored to the destination port depends on the mirroring ratio. A series or range of ingress ports can be mirrored in an analyzer session. The goal of transmit (or egress) analyzer is to monitor as much as possible all the packets sent by the source interface. The amount of egress packets mirrored to the destination port depends on the mirroring ratio.The copy is provided after the packet is modified. A range of egress ports can be mirrored in an analyzer session. The value 1 corresponds to mirroring ingress traffic. The value 2 corresponds to mirroring egress traffic. The value 3 corresponds to mirroring vlan ingress traffic. The value 4 corresponds to mirroring vlan egress traffic.')
jnxExAnalyzerInputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: jnxExAnalyzerInputValue.setStatus('current')
if mibBuilder.loadTexts: jnxExAnalyzerInputValue.setDescription('This identifies each different analyzer input source. If the value of jnxExAnalyzerInputType is 1 then jnxExAnalyzerInputValue refers to the input source Interface Name. If the value of jnxExAnalyzerInputType is 2 then jnxExAnalyzerInputValue refers to the input source vlan name.')
jnxExAnalyzerInputType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 40, 1, 1, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("interface", 1), ("vlanname", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxExAnalyzerInputType.setStatus('current')
if mibBuilder.loadTexts: jnxExAnalyzerInputType.setDescription('This specifies whether interfaces or VLANs is mirrored. Mirroring can be done on the basis of the interface name.All packets received on a port configured for ingress mirroring is sent to the analyzer port.All packets sent out on a port configured for egress mirroring is sent to the analyzer port.Any number of network ports can be configured for ingress or egress mirroring.The value one of jnxAnalyzerInputType corresponds to mirroring the interface traffic. On a particular switch, the user can choose to monitor all the ports that belong to a particular VLAN. It is needed in order to analyze the network traffic in one or more VLANs.Mirroring can be configured in ingress direction only for VLAN. Mirroring can be done on the basis of VLAN name (supported only in ingress). All packets received on a particular VLAN are sent out to the analyzer.The value two of jnxExAnalyzerInputType corresponds to mirroring vlan traffic.')
mibBuilder.exportSymbols("JUNIPER-ANALYZER-MIB", jnxLossPriority=jnxLossPriority, jnxExAnalyzerInputType=jnxExAnalyzerInputType, jnxExAnalyzerInputValue=jnxExAnalyzerInputValue, jnxMirroringRatio=jnxMirroringRatio, jnxExAnalyzerInputOption=jnxExAnalyzerInputOption, jnxAnalyzerStatus=jnxAnalyzerStatus, jnxAnalyzerOutputEntry=jnxAnalyzerOutputEntry, jnxAnalyzerOutputType=jnxAnalyzerOutputType, jnxAnalyzerMIB=jnxAnalyzerMIB, jnxAnalyzerInputOption=jnxAnalyzerInputOption, jnxAnalyzerOutputValue=jnxAnalyzerOutputValue, jnxAnalyzerInputValue=jnxAnalyzerInputValue, jnxAnalyzerOutputTable=jnxAnalyzerOutputTable, jnxExAnalyzerInputEntry=jnxExAnalyzerInputEntry, jnxAnalyzerMIBObjects=jnxAnalyzerMIBObjects, jnxAnalyzerInputTable=jnxAnalyzerInputTable, jnxAnalyzerEntry=jnxAnalyzerEntry, PYSNMP_MODULE_ID=jnxAnalyzerMIB, jnxAnalyzerInputEntry=jnxAnalyzerInputEntry, jnxAnalyzerTable=jnxAnalyzerTable, jnxAnalyzerName=jnxAnalyzerName, jnxAnalyzerInputType=jnxAnalyzerInputType, jnxExAnalyzerInputTable=jnxExAnalyzerInputTable)
