#
# PySNMP MIB module PROCESS-DETAILS-SUNMANAGEMENTCENTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PROCESS-DETAILS-SUNMANAGEMENTCENTER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:42:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Gauge32, ObjectIdentity, Counter64, Integer32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, MibIdentifier, enterprises, TimeTicks, iso, ModuleIdentity, Counter32, Bits, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ObjectIdentity", "Counter64", "Integer32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "MibIdentifier", "enterprises", "TimeTicks", "iso", "ModuleIdentity", "Counter32", "Bits", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
processDetails = ModuleIdentity((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 13))
processDetails.setRevisions(('1999-07-20 15:05',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: processDetails.setRevisionsDescriptions(('Rev 1.0 20th July 1999 15:05, Initial version Of MIB.',))
if mibBuilder.loadTexts: processDetails.setLastUpdated('9907201505Z')
if mibBuilder.loadTexts: processDetails.setOrganization('Sun Microsystems Inc.')
if mibBuilder.loadTexts: processDetails.setContactInfo(' Sun Microsystems Inc. Customer Support Postal: 901 San Antonio Road Palo Alto, CA-94303-4900 USA Tel: 650-960-1300 E-mail: service@sun.com')
if mibBuilder.loadTexts: processDetails.setDescription('The solaris process detail allows to monitor the top 10,20,50 processes that are CPU/Memory intensive. This criteria is part of the agent configuration.')
sun = MibIdentifier((1, 3, 6, 1, 4, 1, 42))
prod = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2))
sunsymon = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 12))
agent = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 12, 2))
modules = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2))
processTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 13, 1), )
if mibBuilder.loadTexts: processTable.setStatus('current')
if mibBuilder.loadTexts: processTable.setDescription('This table shows the monitoring information for processes running on the host. Each row in this table corresponds to a process.')
processTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 13, 1, 1), ).setIndexNames((0, "PROCESS-DETAILS-SUNMANAGEMENTCENTER-MIB", "psProcessID"))
if mibBuilder.loadTexts: processTableEntry.setStatus('current')
if mibBuilder.loadTexts: processTableEntry.setDescription('Information about one process.')
psProcessID = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psProcessID.setStatus('current')
if mibBuilder.loadTexts: psProcessID.setDescription('The process ID of the process.')
psParentProcessID = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 13, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psParentProcessID.setStatus('current')
if mibBuilder.loadTexts: psParentProcessID.setDescription('The parent process Id of the process.')
psUserID = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 13, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psUserID.setStatus('current')
if mibBuilder.loadTexts: psUserID.setDescription('The user ID of the process owner.')
psUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 13, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psUserName.setStatus('current')
if mibBuilder.loadTexts: psUserName.setDescription('The user ID of the process owner. This is the login name of the process owner.')
psEUserID = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 13, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psEUserID.setStatus('current')
if mibBuilder.loadTexts: psEUserID.setDescription('The effective user ID of the process.')
psGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 13, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psGroupID.setStatus('current')
if mibBuilder.loadTexts: psGroupID.setDescription('The group ID of the process owner.')
psEGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 13, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psEGroupID.setStatus('current')
if mibBuilder.loadTexts: psEGroupID.setDescription('The effective group ID of the process .')
psSessionID = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 13, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSessionID.setStatus('current')
if mibBuilder.loadTexts: psSessionID.setDescription('Session Id of the process.')
psProcessGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 13, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psProcessGroupID.setStatus('current')
if mibBuilder.loadTexts: psProcessGroupID.setDescription('Process group ID of the process.')
psControlTTY = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 13, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psControlTTY.setStatus('current')
if mibBuilder.loadTexts: psControlTTY.setDescription("The controlling terminal for the process (when there is no controlling terminal, this value will be '?').")
psStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 13, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psStartTime.setStatus('current')
if mibBuilder.loadTexts: psStartTime.setDescription('The starting time of the process, given in hours, minutes, and seconds.')
psExecutionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 13, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psExecutionTime.setStatus('current')
if mibBuilder.loadTexts: psExecutionTime.setDescription('The cumulative execution time for the process.')
psState = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 13, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psState.setStatus('current')
if mibBuilder.loadTexts: psState.setDescription('The state of the process: O Process is running on a processor. S Sleeping: process is waiting for an event to complete. R Runnable: process is on run queue. I Idle: process is being created. Z Zombie state: process terminated and parent not waiting. T Traced: process stopped by a signal because parent is tracing it. X SXBRK state: process is waiting for more primary memory. ')
psWaitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 13, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psWaitChannel.setStatus('current')
if mibBuilder.loadTexts: psWaitChannel.setDescription('The address of an event for which the process is sleeping, or in SXBRK state, (if the process is running, this value is blank).')
psSchedulingClass = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 13, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSchedulingClass.setStatus('current')
if mibBuilder.loadTexts: psSchedulingClass.setDescription('Scheduling class of the process.')
psAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 13, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAddress.setStatus('current')
if mibBuilder.loadTexts: psAddress.setDescription('The memory address of the process.')
psSize = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 13, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psSize.setStatus('current')
if mibBuilder.loadTexts: psSize.setDescription('The image size( in number of pages) of the swappable process in the main memory.')
psPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 13, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPriority.setStatus('current')
if mibBuilder.loadTexts: psPriority.setDescription('The priority of the process. Higher numbers mean higher priority.')
psNice = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 13, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psNice.setStatus('current')
if mibBuilder.loadTexts: psNice.setDescription('Nice value, used in computing priority. Only processes in the time-sharing class have a value for nice.')
psPercentCPUTime = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 13, 1, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPercentCPUTime.setStatus('current')
if mibBuilder.loadTexts: psPercentCPUTime.setDescription('Percent of CPU time being consumed by the process.')
psPercentMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 13, 1, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psPercentMemory.setStatus('current')
if mibBuilder.loadTexts: psPercentMemory.setDescription('Percent of memory being consumed by the process.')
psCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 13, 1, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psCommand.setStatus('current')
if mibBuilder.loadTexts: psCommand.setDescription('The command name by which the process was started.')
psCommandLine = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 13, 1, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psCommandLine.setStatus('current')
if mibBuilder.loadTexts: psCommandLine.setDescription('Full command line, with command arguments, by which the process was started.')
psZoneID = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 13, 1, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psZoneID.setStatus('current')
if mibBuilder.loadTexts: psZoneID.setDescription('Process Zone ID.')
mibBuilder.exportSymbols("PROCESS-DETAILS-SUNMANAGEMENTCENTER-MIB", psProcessGroupID=psProcessGroupID, psAddress=psAddress, prod=prod, psPercentCPUTime=psPercentCPUTime, psCommand=psCommand, psSchedulingClass=psSchedulingClass, psParentProcessID=psParentProcessID, psNice=psNice, processTable=processTable, psStartTime=psStartTime, sunsymon=sunsymon, modules=modules, psPercentMemory=psPercentMemory, agent=agent, psEUserID=psEUserID, processTableEntry=processTableEntry, processDetails=processDetails, psControlTTY=psControlTTY, psUserName=psUserName, psGroupID=psGroupID, psCommandLine=psCommandLine, psState=psState, psSize=psSize, psProcessID=psProcessID, sun=sun, psEGroupID=psEGroupID, psUserID=psUserID, psExecutionTime=psExecutionTime, psPriority=psPriority, psZoneID=psZoneID, PYSNMP_MODULE_ID=processDetails, psWaitChannel=psWaitChannel, psSessionID=psSessionID)
