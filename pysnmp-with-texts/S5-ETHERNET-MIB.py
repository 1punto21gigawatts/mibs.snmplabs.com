#
# PySNMP MIB module S5-ETHERNET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/S5-ETHERNET-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:59:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
s5Eth, = mibBuilder.importSymbols("S5-ROOT-MIB", "s5Eth")
TimeIntervalSec, = mibBuilder.importSymbols("S5-TCS-MIB", "TimeIntervalSec")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, ObjectIdentity, MibIdentifier, Bits, Gauge32, NotificationType, Unsigned32, iso, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, Counter64, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ObjectIdentity", "MibIdentifier", "Bits", "Gauge32", "NotificationType", "Unsigned32", "iso", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "Counter64", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
s5EthernetMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 0))
s5EthernetMib.setRevisions(('2004-07-20 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: s5EthernetMib.setRevisionsDescriptions(('Version 118: Conversion to SMIv2',))
if mibBuilder.loadTexts: s5EthernetMib.setLastUpdated('200407200000Z')
if mibBuilder.loadTexts: s5EthernetMib.setOrganization('Nortel Networks')
if mibBuilder.loadTexts: s5EthernetMib.setContactInfo('Nortel Networks')
if mibBuilder.loadTexts: s5EthernetMib.setDescription("5000 Ethernet MIB Copyright 1993-2004 Nortel Networks, Inc. All rights reserved. This Nortel Networks SNMP Management Information Base Specification (Specification) embodies Nortel Networks' confidential and proprietary intellectual property. Nortel Networks retains all title and ownership in the Specification, including any revisions. This Specification is supplied 'AS IS,' and Nortel Networks makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
s5EnCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 1))
s5EnStat = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 2))
s5EnMisc = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 3))
s5EnPIntconTable = MibTable((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 3, 1), )
if mibBuilder.loadTexts: s5EnPIntconTable.setStatus('current')
if mibBuilder.loadTexts: s5EnPIntconTable.setDescription("A table controlling the Interconnect status of each managed Ethernet connectivity port that is connected to the same backplane network as each NMM agent interface. The number of entries is determined by the number of managed ports connected to backplane networks which the NMM's interfaces are also connected to.")
s5EnPIntconEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 3, 1, 1), ).setIndexNames((0, "S5-ETHERNET-MIB", "s5EnPIntconIfIndx"), (0, "S5-ETHERNET-MIB", "s5EnPIntconBrdIndx"), (0, "S5-ETHERNET-MIB", "s5EnPIntconPortIndx"))
if mibBuilder.loadTexts: s5EnPIntconEntry.setStatus('current')
if mibBuilder.loadTexts: s5EnPIntconEntry.setDescription('A row in the Ethernet port Interconnect control table. Entries can not be created or deleted via SNMP.')
s5EnPIntconIfIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5EnPIntconIfIndx.setStatus('current')
if mibBuilder.loadTexts: s5EnPIntconIfIndx.setDescription('The index of interface on the NMM. This has the same value as ifIndex for the interface.')
s5EnPIntconBrdIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5EnPIntconBrdIndx.setStatus('current')
if mibBuilder.loadTexts: s5EnPIntconBrdIndx.setDescription('The index of the board. This corresponds to the index of the slot containing the board.')
s5EnPIntconPortIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5EnPIntconPortIndx.setStatus('current')
if mibBuilder.loadTexts: s5EnPIntconPortIndx.setDescription('The index of the port on the board. Its value ranges between 1 and index of the last manageable port on the board.')
s5EnPIntconIntconStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("interconnect", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: s5EnPIntconIntconStatus.setStatus('current')
if mibBuilder.loadTexts: s5EnPIntconIntconStatus.setDescription('The interconnection status of the port. This object tells whether the port is connected to a host or to an interconnect (defined to be another NMM or a bridge that is sending hello messages). The values are: other(1)..........unknown or host interconnect(2)...identified as interconnect port The NMM agent will assign this object the value other(1) on initialization. If it sees hello messages coming in on the port, it will change the interconnection status to be interconnect(2).')
s5EnPIntconAddrCollect = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("neverCollect", 2), ("alwaysCollect", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s5EnPIntconAddrCollect.setStatus('current')
if mibBuilder.loadTexts: s5EnPIntconAddrCollect.setDescription("This object tells whether the NMM should collect node address information from this port for the Find Nodes and Show Nodes tables. By default, the node addresses are collected only from ports that are not identified as interconnect ports. This object provides a means of overriding the default for collection and checking of node addresses. The values are: default(1).........follow default rules for address collection neverCollect(2)....don't collect addrs, whatever intercon status alwaysCollect(3)...do collect address, regardless of config Setting this variable to default(1) tells the NMM to collect and check addresses if and only the port has not been identified as an interconnect port. To disable node address collection on a port, set this object to neverCollect(2). To collect node addresses for an interconnect port, set this object to alwaysCollect(3). To restore the 'natural' value for the port, set this object to default(1).")
s5EnNodeInactInterval = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 3, 2), TimeIntervalSec().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s5EnNodeInactInterval.setStatus('current')
if mibBuilder.loadTexts: s5EnNodeInactInterval.setDescription('The time interval in seconds used to change the status of an entry in the Show Nodes Table (found in the 5000 Common Stats MIB) from active to inactive. When a station has not sent a frame within the time interval represented by this object, the status for the corresponding entry is set to inactive.')
s5EnNodeAgeInterval = MibScalar((1, 3, 6, 1, 4, 1, 45, 1, 6, 6, 3, 3), TimeIntervalSec().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: s5EnNodeAgeInterval.setStatus('current')
if mibBuilder.loadTexts: s5EnNodeAgeInterval.setDescription('The time interval in seconds used for aging out entries in the Show Nodes and Find Nodes Tables (found in the 5000 Common Stats MIB). When a station has not sent a frame within the time interval represented by this object, the corresponding entry is removed from the two tables.')
mibBuilder.exportSymbols("S5-ETHERNET-MIB", s5EnPIntconBrdIndx=s5EnPIntconBrdIndx, s5EnPIntconAddrCollect=s5EnPIntconAddrCollect, s5EthernetMib=s5EthernetMib, s5EnMisc=s5EnMisc, s5EnPIntconIntconStatus=s5EnPIntconIntconStatus, s5EnNodeInactInterval=s5EnNodeInactInterval, PYSNMP_MODULE_ID=s5EthernetMib, s5EnPIntconPortIndx=s5EnPIntconPortIndx, s5EnNodeAgeInterval=s5EnNodeAgeInterval, s5EnPIntconEntry=s5EnPIntconEntry, s5EnPIntconTable=s5EnPIntconTable, s5EnStat=s5EnStat, s5EnPIntconIfIndx=s5EnPIntconIfIndx, s5EnCfg=s5EnCfg)
