#
# PySNMP MIB module REDLINE-BS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/REDLINE-BS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:55:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
InetPortNumber, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddress", "InetAddressType")
redlineSystem, = mibBuilder.importSymbols("REDLINE-MIB", "redlineSystem")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Gauge32, IpAddress, Unsigned32, NotificationType, Integer32, Counter32, ObjectIdentity, MibIdentifier, Counter64, ModuleIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "IpAddress", "Unsigned32", "NotificationType", "Integer32", "Counter32", "ObjectIdentity", "MibIdentifier", "Counter64", "ModuleIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "iso")
TextualConvention, DisplayString, RowStatus, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus", "DateAndTime")
redlineBsMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2))
redlineBsMib.setRevisions(('2005-10-28 15:43',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: redlineBsMib.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: redlineBsMib.setLastUpdated('200510281543Z')
if mibBuilder.loadTexts: redlineBsMib.setOrganization('Redline Communications Inc.')
if mibBuilder.loadTexts: redlineBsMib.setContactInfo('Henryk Kijak email: hkijak@redlinecommunications.com')
if mibBuilder.loadTexts: redlineBsMib.setDescription('This MIB module contains object definitions applicable only to Redline Base Station.')
redlineBsDhcpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 1))
redlineBsIpAddressSource = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dhcp", 1), ("static", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redlineBsIpAddressSource.setStatus('current')
if mibBuilder.loadTexts: redlineBsIpAddressSource.setDescription('Setting this variable to 1 causes the Base Station to obatain its ip address from DHCP server.')
redlineBsDhcpPacketsRelay = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("relay", 1), ("notRelay", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redlineBsDhcpPacketsRelay.setStatus('current')
if mibBuilder.loadTexts: redlineBsDhcpPacketsRelay.setDescription("Setting this variable to 1 causes the Base Station to act as DHCP relay agent for SS. Note: This object can not be set to 'relay' if usage of DHCP server is disabled. An attempt to set the address will fail and return 'resourceUnavailable' error")
redlineBsSntpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 2))
redlineBsRefreshTime = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noop", 1), ("refresh", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redlineBsRefreshTime.setStatus('current')
if mibBuilder.loadTexts: redlineBsRefreshTime.setDescription('Setting this variable to 1 causes the Base Station to reconect to time server and synchronize the time')
redlineBsDayLightSaving = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redlineBsDayLightSaving.setStatus('current')
if mibBuilder.loadTexts: redlineBsDayLightSaving.setDescription('This variable indicates if Dalight saving is on.')
redlineBsTimezone = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redlineBsTimezone.setStatus('current')
if mibBuilder.loadTexts: redlineBsTimezone.setDescription("This variable is a time zone set as +/- hours from Greenwich Mean Time (GMT). Note: This object can not be set if usage of DHCP server is enabled. An attempt to set the timezone will fail and return 'resourceUnavailable' error")
redlineBsTimeServerIpAddressType = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 2, 4), InetAddressType().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ipv4", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redlineBsTimeServerIpAddressType.setStatus('current')
if mibBuilder.loadTexts: redlineBsTimeServerIpAddressType.setDescription('The INET address type of Ip address of time server. IPv4 type supported only.')
redlineBsTimeServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 2, 5), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redlineBsTimeServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: redlineBsTimeServerIpAddress.setDescription('The INET address of time server to whom Bs will communicate using SNTP protocol to obtain the GMT time.')
redlineBsTimezoneMin = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redlineBsTimezoneMin.setStatus('current')
if mibBuilder.loadTexts: redlineBsTimezoneMin.setDescription("This variable contains a minutes part of time zone defined in 'redlineBsTimezone'. Note: This object can not be set if usage of DHCP server is enabled. An attempt to set the timezone will fail and return 'resourceUnavailable' error")
redlineBsConfigSaveObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 3))
redlineBsSnmpConfigSave = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noop", 1), ("save", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redlineBsSnmpConfigSave.setStatus('current')
if mibBuilder.loadTexts: redlineBsSnmpConfigSave.setDescription('Setting this variable to 1 causes SNMP Configuration to be save in flash.')
redlineBsSfConfigSave = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noop", 1), ("save", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redlineBsSfConfigSave.setStatus('current')
if mibBuilder.loadTexts: redlineBsSfConfigSave.setDescription('Setting this variable to 2 causes Service Flow Configuration to be saved in flash.')
redlineBsSystemObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 4))
redlineBsRadioType = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 4, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: redlineBsRadioType.setStatus('current')
if mibBuilder.loadTexts: redlineBsRadioType.setDescription('This object indicates the radio type of Redline Bs.')
redlineBsRfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 5))
redlineBsDownlinkChanFreq = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 5, 1), Unsigned32()).setUnits('kHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: redlineBsDownlinkChanFreq.setStatus('current')
if mibBuilder.loadTexts: redlineBsDownlinkChanFreq.setDescription('Current downlink channel frequency (kHz)')
redlineBsUplinkChanFreq = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 5, 2), Unsigned32()).setUnits('kHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: redlineBsUplinkChanFreq.setStatus('current')
if mibBuilder.loadTexts: redlineBsUplinkChanFreq.setDescription('Current uplink channel frequency (kHz)')
redlineBsPhyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 6))
redlineBsChannelSize = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 6, 1), Unsigned32()).setUnits('KHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: redlineBsChannelSize.setStatus('current')
if mibBuilder.loadTexts: redlineBsChannelSize.setDescription('Current channel size (Khz).')
redlineBsEthObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 7))
redlineBsManagementAccess = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dataPort", 1), ("mgtPort", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: redlineBsManagementAccess.setStatus('current')
if mibBuilder.loadTexts: redlineBsManagementAccess.setDescription('Indicates current management access configuration( either data or mgt port.')
redlineBsDataPortSettings = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("autoDetect", 1), ("fullDuplex100", 2), ("fullDuplex10", 3), ("halfDuplex100", 4), ("halfDuplex10", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: redlineBsDataPortSettings.setStatus('current')
if mibBuilder.loadTexts: redlineBsDataPortSettings.setDescription('Indicates current settings of data port.')
redlineBsMgtPortSettings = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("autoDetect", 1), ("fullDuplex100", 2), ("fullDuplex10", 3), ("halfDuplex100", 4), ("halfDuplex10", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: redlineBsMgtPortSettings.setStatus('current')
if mibBuilder.loadTexts: redlineBsMgtPortSettings.setDescription('Indicates current settings of mgt port.')
redlineBsVlanObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 8))
redlineBsVlanTrafficTagging = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: redlineBsVlanTrafficTagging.setStatus('current')
if mibBuilder.loadTexts: redlineBsVlanTrafficTagging.setDescription('Indicates that management with VLAN tagged traffic is enabled.')
redlineBsVlanId = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 8, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: redlineBsVlanId.setStatus('current')
if mibBuilder.loadTexts: redlineBsVlanId.setDescription('VLAN identifier used to tag managment traffic.')
redlineBsSmcObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 9))
redlineBsSmcCurrentOperMode = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("maintenance", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: redlineBsSmcCurrentOperMode.setStatus('current')
if mibBuilder.loadTexts: redlineBsSmcCurrentOperMode.setDescription('Indicates BS SMC (Secondary Management Channel) operation window. At the beginning of a maintenance window (upgrade, config backup etc), the SMC will be assigned maximum bandwidth to the predetermined fixed rate. At the end of the maintenance window, the maximum bandwidth for the SMC will be reset to its normal rate.')
redlineBsPowerSupplyAndCoolingObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10))
redlineBsPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 1), )
if mibBuilder.loadTexts: redlineBsPowerSupplyTable.setStatus('current')
if mibBuilder.loadTexts: redlineBsPowerSupplyTable.setDescription('This table contains identification and status information about base station power supplies. A trap will be generated each time the power supply goes on or off. The traps generation can be enabled/disabled using Redline Trap Activation Table.')
redlineBsPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 1, 1), ).setIndexNames((0, "REDLINE-BS-MIB", "redlineBsPowerSupplyIndex"))
if mibBuilder.loadTexts: redlineBsPowerSupplyEntry.setStatus('current')
if mibBuilder.loadTexts: redlineBsPowerSupplyEntry.setDescription('This entry contains status information about base station power supply.')
redlineBsPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: redlineBsPowerSupplyIndex.setStatus('current')
if mibBuilder.loadTexts: redlineBsPowerSupplyIndex.setDescription('The index of the BS power supply table.')
redlineBsPowerSupplyName = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: redlineBsPowerSupplyName.setStatus('current')
if mibBuilder.loadTexts: redlineBsPowerSupplyName.setDescription('Textual identification of base station power supply.')
redlineBsPowerSupplyType = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internal", 1), ("external", 2), ("externalShared", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: redlineBsPowerSupplyType.setStatus('current')
if mibBuilder.loadTexts: redlineBsPowerSupplyType.setDescription('The power supply type.')
redlineBsPowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: redlineBsPowerSupplyStatus.setStatus('current')
if mibBuilder.loadTexts: redlineBsPowerSupplyStatus.setDescription('Indicates if the power supply is on/off.')
redlineBsTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 2), )
if mibBuilder.loadTexts: redlineBsTemperatureTable.setStatus('current')
if mibBuilder.loadTexts: redlineBsTemperatureTable.setDescription('This table contains information about current temperature of base station hardware units.')
redlineBsTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 2, 1), ).setIndexNames((0, "REDLINE-BS-MIB", "redlineBsUnitIndex"))
if mibBuilder.loadTexts: redlineBsTemperatureEntry.setStatus('current')
if mibBuilder.loadTexts: redlineBsTemperatureEntry.setDescription('This entry contains temperature information about single base station hardware unit.')
redlineBsUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: redlineBsUnitIndex.setStatus('current')
if mibBuilder.loadTexts: redlineBsUnitIndex.setDescription('The index of the BS current temperature table.')
redlineBsUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: redlineBsUnitName.setStatus('current')
if mibBuilder.loadTexts: redlineBsUnitName.setDescription('The base station hardware unit name.')
redlineBsUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("indoor", 1), ("outdoor", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: redlineBsUnitType.setStatus('current')
if mibBuilder.loadTexts: redlineBsUnitType.setDescription('The base station hardware unit type.')
redlineBsCurrTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60, 100))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: redlineBsCurrTemperature.setStatus('current')
if mibBuilder.loadTexts: redlineBsCurrTemperature.setDescription('Indicates the current temperature of base station hardware unit in Celsius.')
redlineBsTempThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 3), )
if mibBuilder.loadTexts: redlineBsTempThresholdTable.setStatus('current')
if mibBuilder.loadTexts: redlineBsTempThresholdTable.setDescription("This table contains various temperature threshold which are used to trigger traps to alarm network manager about unit mulfunction. The table is indexed by 'redlineBsUnitIndex' and 'redlineBsTempThresholdIndex' objects. Some of the traps require clearing after the temperature is going back to normal. The traps can be enabled/disabled using Redline Trap Activation table.")
redlineBsTempThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 3, 1), ).setIndexNames((0, "REDLINE-BS-MIB", "redlineBsUnitIndex"), (0, "REDLINE-BS-MIB", "redlineBsTempThresholdIndex"))
if mibBuilder.loadTexts: redlineBsTempThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: redlineBsTempThresholdEntry.setDescription('This entry contains single base station hardware unit temperarure threshold information.')
redlineBsTempThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: redlineBsTempThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: redlineBsTempThresholdIndex.setDescription('The index of the temperature threshold table.')
redlineBsTempTrapThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60, 100))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: redlineBsTempTrapThreshold.setStatus('current')
if mibBuilder.loadTexts: redlineBsTempTrapThreshold.setDescription('Indicates the temperature threshold value which will be used to trigger a trap.')
redlineBsTempTrapClrThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60, 100))).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: redlineBsTempTrapClrThreshold.setStatus('current')
if mibBuilder.loadTexts: redlineBsTempTrapClrThreshold.setDescription('Indicates the temperature threshold value which will be used to clear a previosly generated trap.')
redlineBsTempThresholdName = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: redlineBsTempThresholdName.setStatus('current')
if mibBuilder.loadTexts: redlineBsTempThresholdName.setDescription('Textual identification of temperature threshold.')
redlineBsTemperatureTrapTrigger = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("temperatureRising", 1), ("temperatureFalling", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: redlineBsTemperatureTrapTrigger.setStatus('current')
if mibBuilder.loadTexts: redlineBsTemperatureTrapTrigger.setDescription('Indicates if temperature traversal in upper or lower value direction is causing the trap.')
redlineBsFanTable = MibTable((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 4), )
if mibBuilder.loadTexts: redlineBsFanTable.setStatus('current')
if mibBuilder.loadTexts: redlineBsFanTable.setDescription('This table contains name and status information about base station cooling fans. Up to 3 entries are supported.')
redlineBsFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 4, 1), ).setIndexNames((0, "REDLINE-BS-MIB", "redlineBsFanIndex"))
if mibBuilder.loadTexts: redlineBsFanEntry.setStatus('current')
if mibBuilder.loadTexts: redlineBsFanEntry.setDescription('This entry contains information about single cooling fan.')
redlineBsFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: redlineBsFanIndex.setStatus('current')
if mibBuilder.loadTexts: redlineBsFanIndex.setDescription('The index of the colling fans table.')
redlineBsFanName = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: redlineBsFanName.setStatus('current')
if mibBuilder.loadTexts: redlineBsFanName.setDescription('Textual identification of base station fan.')
redlineBsFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 10, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: redlineBsFanStatus.setStatus('current')
if mibBuilder.loadTexts: redlineBsFanStatus.setDescription('Indicates the base station fan is on/off.')
redlineBsNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 11))
redlineBsTrapMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 11, 1))
redlineBsTrapType = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trapSet", 1), ("trapClr", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: redlineBsTrapType.setStatus('current')
if mibBuilder.loadTexts: redlineBsTrapType.setDescription('Indicates if the trap is for alarm condition or for its clearing.')
redlineBsTrapPowerSupplyIndex = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 11, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: redlineBsTrapPowerSupplyIndex.setStatus('current')
if mibBuilder.loadTexts: redlineBsTrapPowerSupplyIndex.setDescription('The index in the table representing BS power supply triggering the trap.')
redlineBsTrapUnitIndex = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 11, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: redlineBsTrapUnitIndex.setStatus('current')
if mibBuilder.loadTexts: redlineBsTrapUnitIndex.setDescription('The index of temperature table representing BS unit triggering the trap.')
redlineBsTrapTempThresholdIndex = MibScalar((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 11, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: redlineBsTrapTempThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: redlineBsTrapTempThresholdIndex.setDescription('The index of the temperature threshold table representing the temperature threshold which passing is triggering the trap.')
redlineBsTrapDefinitions = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 11, 0))
redlineBsPowerSupplyStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 11, 0, 1)).setObjects(("REDLINE-BS-MIB", "redlineBsTrapPowerSupplyIndex"), ("REDLINE-BS-MIB", "redlineBsPowerSupplyStatus"))
if mibBuilder.loadTexts: redlineBsPowerSupplyStatusTrap.setStatus('current')
if mibBuilder.loadTexts: redlineBsPowerSupplyStatusTrap.setDescription('Event that reports base station power supply status change (on/off).')
redlineBsTempThresholdTrap = NotificationType((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 11, 0, 2)).setObjects(("REDLINE-BS-MIB", "redlineBsTrapUnitIndex"), ("REDLINE-BS-MIB", "redlineBsTrapTempThresholdIndex"), ("REDLINE-BS-MIB", "redlineBsCurrTemperature"), ("REDLINE-BS-MIB", "redlineBsTemperatureTrapTrigger"), ("REDLINE-BS-MIB", "redlineBsTrapType"))
if mibBuilder.loadTexts: redlineBsTempThresholdTrap.setStatus('current')
if mibBuilder.loadTexts: redlineBsTempThresholdTrap.setDescription('Event that reports SW Upgrade progress and status changes.')
redlineBsConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 12))
redlineBsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 12, 1))
redlineBsCompls = MibIdentifier((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 12, 2))
redlineBsDhcpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 12, 1, 1)).setObjects(("REDLINE-BS-MIB", "redlineBsIpAddressSource"), ("REDLINE-BS-MIB", "redlineBsDhcpPacketsRelay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    redlineBsDhcpGroup = redlineBsDhcpGroup.setStatus('current')
if mibBuilder.loadTexts: redlineBsDhcpGroup.setDescription('Dhcp objects.')
redlineBsSntpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 12, 1, 2)).setObjects(("REDLINE-BS-MIB", "redlineBsRefreshTime"), ("REDLINE-BS-MIB", "redlineBsDayLightSaving"), ("REDLINE-BS-MIB", "redlineBsTimezone"), ("REDLINE-BS-MIB", "redlineBsTimeServerIpAddressType"), ("REDLINE-BS-MIB", "redlineBsTimeServerIpAddress"), ("REDLINE-BS-MIB", "redlineBsTimezoneMin"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    redlineBsSntpGroup = redlineBsSntpGroup.setStatus('current')
if mibBuilder.loadTexts: redlineBsSntpGroup.setDescription('Sntp objects.')
redlineBsConfigSaveGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 12, 1, 3)).setObjects(("REDLINE-BS-MIB", "redlineBsSnmpConfigSave"), ("REDLINE-BS-MIB", "redlineBsSfConfigSave"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    redlineBsConfigSaveGroup = redlineBsConfigSaveGroup.setStatus('current')
if mibBuilder.loadTexts: redlineBsConfigSaveGroup.setDescription('Config save objects.')
redlineBsSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 12, 1, 4)).setObjects(("REDLINE-BS-MIB", "redlineBsRadioType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    redlineBsSystemGroup = redlineBsSystemGroup.setStatus('current')
if mibBuilder.loadTexts: redlineBsSystemGroup.setDescription('Config save objects.')
redlineBsRfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 12, 1, 5)).setObjects(("REDLINE-BS-MIB", "redlineBsDownlinkChanFreq"), ("REDLINE-BS-MIB", "redlineBsUplinkChanFreq"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    redlineBsRfGroup = redlineBsRfGroup.setStatus('current')
if mibBuilder.loadTexts: redlineBsRfGroup.setDescription('Config save objects.')
redlineBsPhyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 12, 1, 6)).setObjects(("REDLINE-BS-MIB", "redlineBsChannelSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    redlineBsPhyGroup = redlineBsPhyGroup.setStatus('current')
if mibBuilder.loadTexts: redlineBsPhyGroup.setDescription('Config save objects.')
redlineBsEthGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 12, 1, 7)).setObjects(("REDLINE-BS-MIB", "redlineBsManagementAccess"), ("REDLINE-BS-MIB", "redlineBsDataPortSettings"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    redlineBsEthGroup = redlineBsEthGroup.setStatus('current')
if mibBuilder.loadTexts: redlineBsEthGroup.setDescription('Ethernet interface objects.')
redlineBsVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 12, 1, 8)).setObjects(("REDLINE-BS-MIB", "redlineBsVlanTrafficTagging"), ("REDLINE-BS-MIB", "redlineBsVlanId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    redlineBsVlanGroup = redlineBsVlanGroup.setStatus('current')
if mibBuilder.loadTexts: redlineBsVlanGroup.setDescription('Vlan objects.')
redlineBsSmcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 12, 1, 9)).setObjects(("REDLINE-BS-MIB", "redlineBsSmcCurrentOperMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    redlineBsSmcGroup = redlineBsSmcGroup.setStatus('current')
if mibBuilder.loadTexts: redlineBsSmcGroup.setDescription('Smc objects.')
redlineBsPowerSupplyAndCoolingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 12, 1, 10)).setObjects(("REDLINE-BS-MIB", "redlineBsPowerSupplyName"), ("REDLINE-BS-MIB", "redlineBsPowerSupplyType"), ("REDLINE-BS-MIB", "redlineBsPowerSupplyStatus"), ("REDLINE-BS-MIB", "redlineBsUnitName"), ("REDLINE-BS-MIB", "redlineBsUnitType"), ("REDLINE-BS-MIB", "redlineBsCurrTemperature"), ("REDLINE-BS-MIB", "redlineBsTempTrapThreshold"), ("REDLINE-BS-MIB", "redlineBsTempTrapClrThreshold"), ("REDLINE-BS-MIB", "redlineBsTempThresholdName"), ("REDLINE-BS-MIB", "redlineBsTemperatureTrapTrigger"), ("REDLINE-BS-MIB", "redlineBsFanName"), ("REDLINE-BS-MIB", "redlineBsFanStatus"), ("REDLINE-BS-MIB", "redlineBsTrapType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    redlineBsPowerSupplyAndCoolingGroup = redlineBsPowerSupplyAndCoolingGroup.setStatus('current')
if mibBuilder.loadTexts: redlineBsPowerSupplyAndCoolingGroup.setDescription('Power supply, temperature and fans objects.')
redlineBsNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 12, 1, 11)).setObjects(("REDLINE-BS-MIB", "redlineBsPowerSupplyStatusTrap"), ("REDLINE-BS-MIB", "redlineBsTempThresholdTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    redlineBsNotificationGroup = redlineBsNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: redlineBsNotificationGroup.setDescription('')
redlineBsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 10728, 2, 1, 2, 12, 2, 1)).setObjects(("REDLINE-BS-MIB", "redlineBsDhcpGroup"), ("REDLINE-BS-MIB", "redlineBsSntpGroup"), ("REDLINE-BS-MIB", "redlineBsConfigSaveGroup"), ("REDLINE-BS-MIB", "redlineBsSystemGroup"), ("REDLINE-BS-MIB", "redlineBsRfGroup"), ("REDLINE-BS-MIB", "redlineBsPhyGroup"), ("REDLINE-BS-MIB", "redlineBsEthGroup"), ("REDLINE-BS-MIB", "redlineBsVlanGroup"), ("REDLINE-BS-MIB", "redlineBsSmcGroup"), ("REDLINE-BS-MIB", "redlineBsPowerSupplyAndCoolingGroup"), ("REDLINE-BS-MIB", "redlineBsNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    redlineBsCompliance = redlineBsCompliance.setStatus('current')
if mibBuilder.loadTexts: redlineBsCompliance.setDescription('The compliance statement for SNMP entities that implement this MIB module.')
mibBuilder.exportSymbols("REDLINE-BS-MIB", redlineBsVlanId=redlineBsVlanId, redlineBsDhcpObjects=redlineBsDhcpObjects, redlineBsPowerSupplyType=redlineBsPowerSupplyType, redlineBsFanStatus=redlineBsFanStatus, redlineBsSystemObjects=redlineBsSystemObjects, redlineBsSmcCurrentOperMode=redlineBsSmcCurrentOperMode, redlineBsTempThresholdTable=redlineBsTempThresholdTable, redlineBsConformance=redlineBsConformance, redlineBsPowerSupplyTable=redlineBsPowerSupplyTable, redlineBsPhyObjects=redlineBsPhyObjects, redlineBsTempThresholdName=redlineBsTempThresholdName, redlineBsSntpObjects=redlineBsSntpObjects, redlineBsTempThresholdEntry=redlineBsTempThresholdEntry, redlineBsFanName=redlineBsFanName, redlineBsTempTrapClrThreshold=redlineBsTempTrapClrThreshold, redlineBsMgtPortSettings=redlineBsMgtPortSettings, redlineBsPowerSupplyEntry=redlineBsPowerSupplyEntry, redlineBsSfConfigSave=redlineBsSfConfigSave, redlineBsManagementAccess=redlineBsManagementAccess, redlineBsDhcpGroup=redlineBsDhcpGroup, redlineBsRefreshTime=redlineBsRefreshTime, redlineBsSystemGroup=redlineBsSystemGroup, redlineBsTrapPowerSupplyIndex=redlineBsTrapPowerSupplyIndex, redlineBsDataPortSettings=redlineBsDataPortSettings, redlineBsFanTable=redlineBsFanTable, redlineBsIpAddressSource=redlineBsIpAddressSource, redlineBsDhcpPacketsRelay=redlineBsDhcpPacketsRelay, redlineBsCurrTemperature=redlineBsCurrTemperature, redlineBsFanIndex=redlineBsFanIndex, redlineBsVlanObjects=redlineBsVlanObjects, redlineBsTrapMibObjects=redlineBsTrapMibObjects, redlineBsTimeServerIpAddressType=redlineBsTimeServerIpAddressType, redlineBsConfigSaveGroup=redlineBsConfigSaveGroup, redlineBsUnitName=redlineBsUnitName, redlineBsPowerSupplyIndex=redlineBsPowerSupplyIndex, redlineBsSmcGroup=redlineBsSmcGroup, redlineBsDownlinkChanFreq=redlineBsDownlinkChanFreq, redlineBsRfGroup=redlineBsRfGroup, redlineBsMib=redlineBsMib, redlineBsUnitType=redlineBsUnitType, redlineBsEthObjects=redlineBsEthObjects, redlineBsTimezoneMin=redlineBsTimezoneMin, redlineBsTrapUnitIndex=redlineBsTrapUnitIndex, redlineBsEthGroup=redlineBsEthGroup, redlineBsTemperatureEntry=redlineBsTemperatureEntry, redlineBsTrapType=redlineBsTrapType, redlineBsRfObjects=redlineBsRfObjects, redlineBsNotificationObjects=redlineBsNotificationObjects, redlineBsCompls=redlineBsCompls, redlineBsPowerSupplyName=redlineBsPowerSupplyName, redlineBsTempTrapThreshold=redlineBsTempTrapThreshold, redlineBsPowerSupplyStatusTrap=redlineBsPowerSupplyStatusTrap, redlineBsVlanGroup=redlineBsVlanGroup, redlineBsUnitIndex=redlineBsUnitIndex, redlineBsTempThresholdTrap=redlineBsTempThresholdTrap, redlineBsConfigSaveObjects=redlineBsConfigSaveObjects, redlineBsPhyGroup=redlineBsPhyGroup, redlineBsCompliance=redlineBsCompliance, redlineBsNotificationGroup=redlineBsNotificationGroup, redlineBsTempThresholdIndex=redlineBsTempThresholdIndex, redlineBsTemperatureTrapTrigger=redlineBsTemperatureTrapTrigger, redlineBsTimezone=redlineBsTimezone, redlineBsDayLightSaving=redlineBsDayLightSaving, redlineBsChannelSize=redlineBsChannelSize, redlineBsPowerSupplyAndCoolingGroup=redlineBsPowerSupplyAndCoolingGroup, PYSNMP_MODULE_ID=redlineBsMib, redlineBsUplinkChanFreq=redlineBsUplinkChanFreq, redlineBsTrapTempThresholdIndex=redlineBsTrapTempThresholdIndex, redlineBsTrapDefinitions=redlineBsTrapDefinitions, redlineBsPowerSupplyAndCoolingObjects=redlineBsPowerSupplyAndCoolingObjects, redlineBsTemperatureTable=redlineBsTemperatureTable, redlineBsGroups=redlineBsGroups, redlineBsRadioType=redlineBsRadioType, redlineBsPowerSupplyStatus=redlineBsPowerSupplyStatus, redlineBsVlanTrafficTagging=redlineBsVlanTrafficTagging, redlineBsFanEntry=redlineBsFanEntry, redlineBsSnmpConfigSave=redlineBsSnmpConfigSave, redlineBsSmcObjects=redlineBsSmcObjects, redlineBsSntpGroup=redlineBsSntpGroup, redlineBsTimeServerIpAddress=redlineBsTimeServerIpAddress)
