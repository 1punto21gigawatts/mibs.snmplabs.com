#
# PySNMP MIB module PACKETFRONT-DRG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PACKETFRONT-DRG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:36:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
pfMgmt, = mibBuilder.importSymbols("PACKETFRONT-SMI", "pfMgmt")
PortList, = mibBuilder.importSymbols("PACKETFRONT-TC", "PortList")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, Unsigned32, MibIdentifier, ObjectIdentity, iso, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Integer32, NotificationType, Counter32, IpAddress, Bits, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Unsigned32", "MibIdentifier", "ObjectIdentity", "iso", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Integer32", "NotificationType", "Counter32", "IpAddress", "Bits", "ModuleIdentity")
DisplayString, TextualConvention, MacAddress, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "MacAddress", "RowStatus")
pfDrgMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 9303, 4, 3))
pfDrgMib.setRevisions(('2009-03-23 15:38', '2008-04-11 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: pfDrgMib.setRevisionsDescriptions(('Updated telephone information in contact-info', 'Initial release.',))
if mibBuilder.loadTexts: pfDrgMib.setLastUpdated('200903231538Z')
if mibBuilder.loadTexts: pfDrgMib.setOrganization('PacketFront Systems AB')
if mibBuilder.loadTexts: pfDrgMib.setContactInfo('PacketFront Systems AB Customer Service Mail : Isafjordsgatan 35 SE-164 28 Kista Sweden Tel : +46 8 5090 1500 E-mail: snmp@packetfront.com Web : http://www.packetfront.com')
if mibBuilder.loadTexts: pfDrgMib.setDescription('The MIB module for managing Packetfront DRG devices')
drgNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 9303, 4, 3, 0))
drgConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1))
drgConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9303, 4, 3, 2))
productInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 1))
productName = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productName.setStatus('current')
if mibBuilder.loadTexts: productName.setDescription('The name of the product.')
productSerialNo = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productSerialNo.setStatus('current')
if mibBuilder.loadTexts: productSerialNo.setDescription('The unique serial number programmed into the device in the factory. ')
productProductionWeek = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productProductionWeek.setStatus('current')
if mibBuilder.loadTexts: productProductionWeek.setDescription('The week and year in which this device was manufactured.')
productSwImageRev = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productSwImageRev.setStatus('current')
if mibBuilder.loadTexts: productSwImageRev.setDescription('The revision of the software in the device. This may be upgraded. E.g DMA0081-R2K123.')
productFwImageRev = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productFwImageRev.setStatus('current')
if mibBuilder.loadTexts: productFwImageRev.setDescription('The revision of the firmware in the device. This describes the bootloader revision, e.g. cxc_132_4098-R3A18.')
productDefaultRevision = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productDefaultRevision.setStatus('current')
if mibBuilder.loadTexts: productDefaultRevision.setDescription('The revision of the default configuration in the device. This describes the revision of information loaded during manufacture.')
productOpDefRev = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productOpDefRev.setStatus('current')
if mibBuilder.loadTexts: productOpDefRev.setDescription('The revision of the operator default information (the .ini file). The syntax is operator specific.Operator default revision ( INI file ).')
productHardwareRev = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productHardwareRev.setStatus('current')
if mibBuilder.loadTexts: productHardwareRev.setDescription('Manufacturing hardware information regarding the revision of the hardware.')
productPlatform = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productPlatform.setStatus('current')
if mibBuilder.loadTexts: productPlatform.setDescription('This provides a predefined string for each product family - this differs from productName in that this cannot be configured by the operator, therefore will be constant across all platforms of the same type irrespective of the operator-specific name for the platform. This is useful for network operators managing a heterogeneous mix of platforms from different service providers')
productHardwarePCBARevision = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productHardwarePCBARevision.setStatus('current')
if mibBuilder.loadTexts: productHardwarePCBARevision.setDescription('PCBA revision - this is a coded value read from the PCBA hardware.')
productFunctionIdentity = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productFunctionIdentity.setStatus('current')
if mibBuilder.loadTexts: productFunctionIdentity.setDescription('Describes the functionality offered by the device.')
productMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 1, 12), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productMacAddress.setStatus('current')
if mibBuilder.loadTexts: productMacAddress.setDescription('The device MAC address - this is used in various alert messages to uniquely identify the specific device. The MAC address used is the MAC of the management entity of the device')
productIdentity = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: productIdentity.setStatus('current')
if mibBuilder.loadTexts: productIdentity.setDescription("This object provides a unique identity for the device. By default this will be the same as the productMacAddress, however, if a hostname has been defined or provided by a DHCP server, then this will be used instead. In the former case, therefore, the identity is guaranteed to be unique, while in the latter it is the operator's responsibility to ensure that the identity is unique.")
systemConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 2))
systemConfigRestartControl = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("running", 1), ("restartNow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemConfigRestartControl.setStatus('current')
if mibBuilder.loadTexts: systemConfigRestartControl.setDescription('Setting this object to restartNow(2) causes the device to reboot immediately. Note that this will cause any unsave configuration changes to be lost, therefore configuration changes should be saved before using this value if the changes are required. The device returns running(1) in all other cases.')
systemConfigRestartControlNotify = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("silent", 1), ("notifying", 2))).clone('notifying')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemConfigRestartControlNotify.setStatus('current')
if mibBuilder.loadTexts: systemConfigRestartControlNotify.setDescription('This object controls the operation of the notifyRestart alert. The notifyRestart is sent repeatedly when the object is equal to notifying(2). The notifyRestart is not sent when the object is equal to silent(1).')
systemConfigSave = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("save", 1), ("changed", 2), ("notChanged", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemConfigSave.setStatus('current')
if mibBuilder.loadTexts: systemConfigSave.setDescription('Setting the object to save(1) causes the running configuration to be saved. The object responds with changed(2) if the running configuration differs from the initial configuration. The object responds with notChanged(3) if no configuration changes have occurred since the last save or boot.')
systemConfigFactoryReset = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("running", 1), ("factoryReset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemConfigFactoryReset.setStatus('current')
if mibBuilder.loadTexts: systemConfigFactoryReset.setDescription('Setting this object to factoryReset(2) causes the device to return to its factory default settings, and reboot. This means that any operator or user configuration changes will be deleted, and the device will appear as if it has not previously been installed and configured. When read this object will return running(1) unless it is currently in the process of performing a factory reset.')
systemConfigSaveNotify = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("silent", 1), ("always", 2), ("onlyErrors", 3))).clone('always')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemConfigSaveNotify.setStatus('current')
if mibBuilder.loadTexts: systemConfigSaveNotify.setDescription('Setting this object to always(2) will cause the device to send a notifyConfigSaveResult alert each time the configuration is saved. Setting this object to onlyErrors(3) will cause the device to send a notifyConfigSaveResult if an error occurs during a configuration save procedure. Setting this object to silent(1) causes the device to not send notifyConfigSaveResult alerts.')
downloadConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 3))
downloadServer = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 3, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: downloadServer.setStatus('current')
if mibBuilder.loadTexts: downloadServer.setDescription('The address of the server that contains the file to be loaded. This may take the form of an IP address or FQDN.')
downloadFile = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 3, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: downloadFile.setStatus('current')
if mibBuilder.loadTexts: downloadFile.setDescription('The file name to be downloaded from the download server or a URL to be downloaded via http. This value is set to the zero length string when no file name has been specified.')
downloadAction = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notDownloading", 1), ("startDownload", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: downloadAction.setStatus('current')
if mibBuilder.loadTexts: downloadAction.setDescription('When this object is set to startDownload(2), the system will attempt to connect to the server specified in downloadServer (or the host part of downloadFile if a URL has been specified there), using the method defined in downloadMethod. If the file is found and verified, it will be downloaded to the device and stored. When the download process is completed, the device will restart the newly loaded application. When the device is not downloading, this object will have a value of notDownloading(1).')
downloadMethod = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tftp", 1), ("http", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: downloadMethod.setStatus('current')
if mibBuilder.loadTexts: downloadMethod.setDescription('Defines the method to be used for the file download. This may be a specific protocol, or auto(3) which will cycle through the available methods to find one which works.')
downloadRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: downloadRetryCount.setStatus('current')
if mibBuilder.loadTexts: downloadRetryCount.setDescription('Controls the number of attempts which will be made to perform a download before terminating the download attempt.')
downloadResultCode = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("inProgress", 1), ("success", 2), ("failureHostNotFound", 3), ("failureFileNotFound", 4), ("failureFileIncorrectSize", 5), ("failureFileVerifyFailure", 6), ("failureFileIncompatible", 7), ("failureUnknownError", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: downloadResultCode.setStatus('current')
if mibBuilder.loadTexts: downloadResultCode.setDescription('This object returns the status of the last download procedure. If no downloads have occurred, none(0) is returned, or if there is currently a download in progress, inProgress(1) is returned.')
downloadResultNotify = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("silent", 1), ("always", 2), ("onError", 3))).clone('always')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: downloadResultNotify.setStatus('current')
if mibBuilder.loadTexts: downloadResultNotify.setDescription('Setting the object to always(2) cause the system to send downloadResultCodeTrap after every download no matter the result. Setting the object to onlyErrors(3) cause the system to send downloadResultCodeTrap when an error occurs during the download. Setting the object to silent(1) cause the system to not send any downloadResultNotify notifications.')
hostConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 4))
hostIfMax = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostIfMax.setStatus('current')
if mibBuilder.loadTexts: hostIfMax.setDescription('The maximum numbers of entries (and layer 3 interfaces) in the hostIfTable.')
hostIfDefined = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostIfDefined.setStatus('current')
if mibBuilder.loadTexts: hostIfDefined.setDescription('The current number of defined host interfaces, i.e. the number of entries in the hostIfTable.')
hostIfTable = MibTable((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 4, 3), )
if mibBuilder.loadTexts: hostIfTable.setStatus('current')
if mibBuilder.loadTexts: hostIfTable.setDescription('A table holding a list of interfaces.')
hostIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 4, 3, 1), ).setIndexNames((0, "PACKETFRONT-DRG-MIB", "hostIfIndex"))
if mibBuilder.loadTexts: hostIfEntry.setStatus('current')
if mibBuilder.loadTexts: hostIfEntry.setDescription('One row of the table.')
hostIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hostIfIndex.setStatus('current')
if mibBuilder.loadTexts: hostIfIndex.setDescription('A unique index for this IP interface entry.')
hostIfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dhcp", 1), ("static", 2), ("pppoe", 3), ("pppoeFixed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostIfMode.setStatus('current')
if mibBuilder.loadTexts: hostIfMode.setDescription('The operational mode of the interface, e.g. DHCP, PPPoE.')
hostIfHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 4, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostIfHostName.setStatus('current')
if mibBuilder.loadTexts: hostIfHostName.setDescription('The name of the host interface. If the DHCP client is enabled this object reports the host name from the DHCP negotiation.')
hostIfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 4, 3, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hostIfAddress.setStatus('current')
if mibBuilder.loadTexts: hostIfAddress.setDescription('The IP address for this interface entry.')
hostIfSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 4, 3, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostIfSubnetMask.setStatus('current')
if mibBuilder.loadTexts: hostIfSubnetMask.setDescription('The subnet mask for this interface entry.')
hostIfDefaultRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 4, 3, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostIfDefaultRouter.setStatus('current')
if mibBuilder.loadTexts: hostIfDefaultRouter.setDescription('The default router for this interface entry.')
hostIfDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 4, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostIfDomainName.setStatus('current')
if mibBuilder.loadTexts: hostIfDomainName.setDescription('The name of the domain name. If the DHCP client is enabled this object reports the domain name from the DHCP negotiation.')
hostIfDnsServer1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 4, 3, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostIfDnsServer1.setStatus('current')
if mibBuilder.loadTexts: hostIfDnsServer1.setDescription('The primary DNS server for this interface entry.')
hostIfDnsServer2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 4, 3, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostIfDnsServer2.setStatus('current')
if mibBuilder.loadTexts: hostIfDnsServer2.setDescription('The secondary DNS server for this interface entry.')
hostIfDhcpClientID = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 4, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostIfDhcpClientID.setStatus('current')
if mibBuilder.loadTexts: hostIfDhcpClientID.setDescription('Setting this object causes the system to use a proprietary client identifier to identify itself to the DHCP server. By default the productMacAddress value of the device is used. This object thus allows the definition of the DHCP option 61 value.')
hostIfDhcpVendorClassID = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 4, 3, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostIfDhcpVendorClassID.setStatus('current')
if mibBuilder.loadTexts: hostIfDhcpVendorClassID.setDescription("Setting this object causes the system to use the defined value as the DHCP vendor identifier in communication with the DHCP server. By default the value used is of the form 'drg-$productName$-$productSwImageRev$'. This object thus allows the definition of the DHCP option 60 value.")
hostIfDiffservCodePoint = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 4, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostIfDiffservCodePoint.setStatus('current')
if mibBuilder.loadTexts: hostIfDiffservCodePoint.setDescription('Defines the IP DSCP value used by default for this interface.')
hostIfVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 4, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostIfVlan.setStatus('current')
if mibBuilder.loadTexts: hostIfVlan.setDescription('Values 1..4094 define the default IEEE802.1Q VLAN tag used by this interface. By convention, this is used as the management VLAN when VLANs are enabled on this interface. The value 0 disables the use of management VLANs on this interface.')
hostIfVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 4, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostIfVlanPriority.setStatus('current')
if mibBuilder.loadTexts: hostIfVlanPriority.setDescription('Defines the default IEEE802.1p priority tag used by this interface. By convention, this is used as the management priority when VLANs are enabled on this interface.')
hostIfSecurePing = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 4, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hostIfSecurePing.setStatus('current')
if mibBuilder.loadTexts: hostIfSecurePing.setDescription('Setting this object to enabled(1) causes the device to silently drop ICMP echo (ping) requests. This is a simple way to cloak the presence of a device from ping sweeps.')
snmpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 7))
snmpTrapDestHostsMax = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTrapDestHostsMax.setStatus('current')
if mibBuilder.loadTexts: snmpTrapDestHostsMax.setDescription('The maximum number of trap hosts which may be defined')
snmpTrapDestHostsDefined = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpTrapDestHostsDefined.setStatus('current')
if mibBuilder.loadTexts: snmpTrapDestHostsDefined.setDescription('Current number of configured trap destinations.')
snmpTrapDestinationTable = MibTable((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 7, 3), )
if mibBuilder.loadTexts: snmpTrapDestinationTable.setStatus('current')
if mibBuilder.loadTexts: snmpTrapDestinationTable.setDescription('A table of transport addresses to be used in the generation of SNMP messages.')
snmpTrapDestinationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 7, 3, 1), ).setIndexNames((0, "PACKETFRONT-DRG-MIB", "snmpTrapDestIndex"), (0, "PACKETFRONT-DRG-MIB", "snmpTrapDestName"))
if mibBuilder.loadTexts: snmpTrapDestinationEntry.setStatus('current')
if mibBuilder.loadTexts: snmpTrapDestinationEntry.setDescription('A transport address to be used in the generation of SNMP operations. Entries in the trapDestinationTable are created and deleted using the snmpTrapDestRowStatus object.')
snmpTrapDestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTrapDestIndex.setStatus('current')
if mibBuilder.loadTexts: snmpTrapDestIndex.setDescription('The locally arbitrary, but unique identifier associated with this trapDestinationEntry.')
snmpTrapDestName = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 7, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTrapDestName.setStatus('current')
if mibBuilder.loadTexts: snmpTrapDestName.setDescription('This object contains a human readable name for the trap destination.')
snmpTrapDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 7, 3, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTrapDestAddress.setStatus('current')
if mibBuilder.loadTexts: snmpTrapDestAddress.setDescription('This object contains the address of the trap destination.')
snmpTrapDestTagList = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 7, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTrapDestTagList.setStatus('current')
if mibBuilder.loadTexts: snmpTrapDestTagList.setDescription('This object contains a list of tag values which are used to select target addresses for a particular operation.')
snmpTrapDestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 7, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snmpTrapDestRowStatus.setStatus('current')
if mibBuilder.loadTexts: snmpTrapDestRowStatus.setDescription("The status of this conceptual row. To create a row in this table, a manager must set this object to either createAndGo(4) or createAndWait(5). Until instances of all corresponding columns are appropriately configured, the value of the corresponding instance of the trapDestRowStatus column is 'notReady'.")
snmpReadCommunityName = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 7, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpReadCommunityName.setStatus('current')
if mibBuilder.loadTexts: snmpReadCommunityName.setDescription('The read community string for the device.')
snmpWriteCommunityName = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 7, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpWriteCommunityName.setStatus('current')
if mibBuilder.loadTexts: snmpWriteCommunityName.setDescription('The write community string for the device.')
snmpTrapCommunityName = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 7, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapCommunityName.setStatus('current')
if mibBuilder.loadTexts: snmpTrapCommunityName.setDescription('The notification community string for the device.')
snmpDiffservCodePoint = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 7, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpDiffservCodePoint.setStatus('current')
if mibBuilder.loadTexts: snmpDiffservCodePoint.setDescription('Defines the IP DSCP value used by the SNMP agent.')
snmpAtomicSet = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 7, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("stage", 2), ("apply", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAtomicSet.setStatus('current')
if mibBuilder.loadTexts: snmpAtomicSet.setDescription('Complex operations involving numerous set commands can cause problems due to the lack of atomic operation by the network management system. This object may be used to ensure that all required changes for this MIB are made in a single atomic operation. This can be achieved by setting this object to stage(2), then setting all required objects, and then setting this object to apply(3). The object value will return to idle(1) once the atomic set operation has been completed.')
vlanConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8))
vlanBase = MibIdentifier((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 1))
vlanTp = MibIdentifier((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 2))
vlanStatic = MibIdentifier((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 3))
vlanVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("version1", 1), ("version2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanVersionNumber.setStatus('current')
if mibBuilder.loadTexts: vlanVersionNumber.setDescription('The version number of IEEE802.1Q that this device supports.')
vlanMaxVlanId = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMaxVlanId.setStatus('current')
if mibBuilder.loadTexts: vlanMaxVlanId.setDescription('The maximum IEEE802.1Q VLAN ID that this device supports.')
vlanMaxSupportedVlans = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMaxSupportedVlans.setStatus('current')
if mibBuilder.loadTexts: vlanMaxSupportedVlans.setDescription('The maximum number of IEEE802.1Q VLANs that this device supports.')
vlanNumVlans = MibScalar((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanNumVlans.setStatus('current')
if mibBuilder.loadTexts: vlanNumVlans.setDescription('The current number of IEEE802.1Q VLANs that are configured in this device.')
vlanFdbTable = MibTable((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 2, 1), )
if mibBuilder.loadTexts: vlanFdbTable.setStatus('current')
if mibBuilder.loadTexts: vlanFdbTable.setDescription('A table that contains configuration and control information for each Filtering Database currently operating on this device. Entries in this table appear automatically when VLANs are assigned FDB IDs in the vlanVlanCurrentTable.')
vlanFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 2, 1, 1), ).setIndexNames((0, "PACKETFRONT-DRG-MIB", "vlanFdbId"))
if mibBuilder.loadTexts: vlanFdbEntry.setStatus('current')
if mibBuilder.loadTexts: vlanFdbEntry.setDescription('Information about a specific Filtering Database.')
vlanFdbId = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: vlanFdbId.setStatus('current')
if mibBuilder.loadTexts: vlanFdbId.setDescription('The identity of this Filtering Database.')
vlanFdbDynamicCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanFdbDynamicCount.setReference('IEEE 802.1Q/D11 Section 12.7.1.1.3')
if mibBuilder.loadTexts: vlanFdbDynamicCount.setStatus('current')
if mibBuilder.loadTexts: vlanFdbDynamicCount.setDescription('The current number of dynamic entries in this Filtering Database.')
vlanTpFdbTable = MibTable((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 2, 2), )
if mibBuilder.loadTexts: vlanTpFdbTable.setStatus('current')
if mibBuilder.loadTexts: vlanTpFdbTable.setDescription('A table that contains information about unicast entries for which the device has forwarding and/or filtering information. This information is used by the transparent bridging function in determining how to propagate a received frame.')
vlanTpFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 2, 2, 1), ).setIndexNames((0, "PACKETFRONT-DRG-MIB", "vlanFdbId"), (0, "PACKETFRONT-DRG-MIB", "vlanTpFdbAddress"))
if mibBuilder.loadTexts: vlanTpFdbEntry.setStatus('current')
if mibBuilder.loadTexts: vlanTpFdbEntry.setDescription('Information about a specific unicast MAC address for which the device has some forwarding and/or filtering information.')
vlanTpFdbAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 2, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: vlanTpFdbAddress.setStatus('current')
if mibBuilder.loadTexts: vlanTpFdbAddress.setDescription('A unicast MAC address for which the device has forwarding and/or filtering information.')
vlanTpFdbPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTpFdbPort.setStatus('current')
if mibBuilder.loadTexts: vlanTpFdbPort.setDescription("Either the value '0', or the port number of the port on which a frame having a source address equal to the value of the corresponding instance of vlanTpFdbAddress has been seen. A value of '0' indicates that the port number has not been learned but that the device does have some forwarding/filtering information about this address (e.g. in the vlanStaticUnicastTable). Implementors are encouraged to assign the port value to this object whenever it is learned even for addresses for which the corresponding value of vlanTpFdbStatus is not learned(3).")
vlanTpFdbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("learned", 3), ("self", 4), ("mgmt", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTpFdbStatus.setStatus('current')
if mibBuilder.loadTexts: vlanTpFdbStatus.setDescription("The status of this entry. The meanings of the values are: other(1) - none of the following. This may include the case where some other MIB object (not the corresponding instance of vlanTpFdbPort, nor an entry in the vlanStaticUnicastTable) is being used to determine if and how frames addressed to the value of the corresponding instance of vlanTpFdbAddress are being forwarded. invalid(2) - this entry is no longer valid (e.g., it was learned but has since aged out), but has not yet been flushed from the table. learned(3) - the value of the corresponding instance of vlanTpFdbPort was learned and is being used. self(4) - the value of the corresponding instance of vlanTpFdbAddress represents one of the device's addresses. The corresponding instance of vlanTpFdbPort indicates which of the device's ports has this address. mgmt(5) - the value of the corresponding instance of vlanTpFdbAddress is also the value of an existing instance of vlanStaticAddress.")
vlanStaticTable = MibTable((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 3, 1), )
if mibBuilder.loadTexts: vlanStaticTable.setStatus('current')
if mibBuilder.loadTexts: vlanStaticTable.setDescription('A table containing static configuration information for each VLAN configured on the device. All entries are permanent and will be restored after the device is reset.')
vlanStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 3, 1, 1), ).setIndexNames((0, "PACKETFRONT-DRG-MIB", "vlanStaticIndex"))
if mibBuilder.loadTexts: vlanStaticEntry.setStatus('current')
if mibBuilder.loadTexts: vlanStaticEntry.setDescription('Static information for a VLAN configured in the device.')
vlanStaticIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanStaticIndex.setStatus('current')
if mibBuilder.loadTexts: vlanStaticIndex.setDescription('The locally arbitrary, but unique identifier associated with this vlanStaticEntry.')
vlanStaticName = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 3, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanStaticName.setStatus('current')
if mibBuilder.loadTexts: vlanStaticName.setDescription('An administratively assigned string, which may be used to identify the VLAN')
vlanStaticVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanStaticVlanId.setStatus('current')
if mibBuilder.loadTexts: vlanStaticVlanId.setDescription('The VLAN identifier associated with this VLAN entry')
vlanStaticPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanStaticPriority.setStatus('current')
if mibBuilder.loadTexts: vlanStaticPriority.setDescription('The IEEE802.1p priority value associated with this VLAN entry - this information may be used for policing priority where supported')
vlanStaticEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 3, 1, 1, 5), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanStaticEgressPorts.setStatus('current')
if mibBuilder.loadTexts: vlanStaticEgressPorts.setDescription('The set of ports which are permanently assigned to the egress list for this VLAN by management. The default value of this object is a string of zeros of appropriate length, indicating not fixed.')
vlanStaticUntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 3, 1, 1, 6), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanStaticUntaggedPorts.setStatus('current')
if mibBuilder.loadTexts: vlanStaticUntaggedPorts.setDescription('Describes the set of ports which should transmit egress packets for this VLAN untagged. If a device agent cannot support the set of ports being set then it will reject the set operation with an error. An example might be if a manager attempts to set more than one VLAN to be untagged on egress where the device does not support this IEEE 802.1Q option.')
vlanStaticUnmodifiedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 3, 1, 1, 7), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanStaticUnmodifiedPorts.setStatus('current')
if mibBuilder.loadTexts: vlanStaticUnmodifiedPorts.setDescription('Describes the set of ports which should transmit egress packets for this VLAN unmodified. If a device agent cannot support the set of ports being set then it will reject the set operation with an error. Note that if this behaviour is supported and the bit is set for a port, the value of the same bit in vlanStaticUntaggedPorts is ignored.')
vlanStaticRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9303, 4, 3, 1, 8, 3, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanStaticRowStatus.setStatus('current')
if mibBuilder.loadTexts: vlanStaticRowStatus.setDescription('This object indicates the status of this entry.')
notifyRestart = NotificationType((1, 3, 6, 1, 4, 1, 9303, 4, 3, 0, 1)).setObjects(("PACKETFRONT-DRG-MIB", "productMacAddress"), ("PACKETFRONT-DRG-MIB", "productIdentity"), ("PACKETFRONT-DRG-MIB", "productSwImageRev"), ("PACKETFRONT-DRG-MIB", "productHardwareRev"), ("PACKETFRONT-DRG-MIB", "productOpDefRev"), ("PACKETFRONT-DRG-MIB", "productFunctionIdentity"))
if mibBuilder.loadTexts: notifyRestart.setStatus('current')
if mibBuilder.loadTexts: notifyRestart.setDescription('After booting the system sends this notification repeatedly with an increasing time delay until a valid management station reads or writes an object.')
notifyDownloadResult = NotificationType((1, 3, 6, 1, 4, 1, 9303, 4, 3, 0, 2)).setObjects(("PACKETFRONT-DRG-MIB", "productMacAddress"), ("PACKETFRONT-DRG-MIB", "productIdentity"), ("PACKETFRONT-DRG-MIB", "downloadResultCode"))
if mibBuilder.loadTexts: notifyDownloadResult.setStatus('current')
if mibBuilder.loadTexts: notifyDownloadResult.setDescription('When the device has downloaded a new firmware image or configuration file, the device sends this notification to inform the management system of the result.')
notifyConfigSaveResult = NotificationType((1, 3, 6, 1, 4, 1, 9303, 4, 3, 0, 3)).setObjects(("PACKETFRONT-DRG-MIB", "productMacAddress"), ("PACKETFRONT-DRG-MIB", "productIdentity"), ("PACKETFRONT-DRG-MIB", "downloadResultCode"))
if mibBuilder.loadTexts: notifyConfigSaveResult.setStatus('current')
if mibBuilder.loadTexts: notifyConfigSaveResult.setDescription('When a save event occurs, the device sends this notification to inform the management system of the result.')
drgGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9303, 4, 3, 2, 1))
drgCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 9303, 4, 3, 2, 2))
drgCompatibility = MibIdentifier((1, 3, 6, 1, 4, 1, 9303, 4, 3, 2, 3))
mibBuilder.exportSymbols("PACKETFRONT-DRG-MIB", vlanStaticRowStatus=vlanStaticRowStatus, downloadMethod=downloadMethod, drgConformance=drgConformance, downloadResultCode=downloadResultCode, snmpReadCommunityName=snmpReadCommunityName, systemConfigFactoryReset=systemConfigFactoryReset, hostIfMax=hostIfMax, snmpTrapDestinationTable=snmpTrapDestinationTable, downloadResultNotify=downloadResultNotify, vlanTp=vlanTp, vlanTpFdbTable=vlanTpFdbTable, vlanConfig=vlanConfig, productFunctionIdentity=productFunctionIdentity, downloadConfig=downloadConfig, hostIfEntry=hostIfEntry, vlanFdbId=vlanFdbId, vlanStaticPriority=vlanStaticPriority, hostIfDnsServer2=hostIfDnsServer2, productMacAddress=productMacAddress, drgCompatibility=drgCompatibility, hostIfSecurePing=hostIfSecurePing, vlanTpFdbStatus=vlanTpFdbStatus, vlanStaticEgressPorts=vlanStaticEgressPorts, drgNotification=drgNotification, snmpTrapDestIndex=snmpTrapDestIndex, vlanStaticTable=vlanStaticTable, productProductionWeek=productProductionWeek, hostIfTable=hostIfTable, pfDrgMib=pfDrgMib, vlanTpFdbEntry=vlanTpFdbEntry, snmpTrapDestHostsDefined=snmpTrapDestHostsDefined, snmpAtomicSet=snmpAtomicSet, vlanStaticEntry=vlanStaticEntry, snmpTrapDestAddress=snmpTrapDestAddress, vlanNumVlans=vlanNumVlans, productDefaultRevision=productDefaultRevision, productName=productName, snmpTrapDestinationEntry=snmpTrapDestinationEntry, hostIfVlan=hostIfVlan, snmpTrapCommunityName=snmpTrapCommunityName, vlanStaticIndex=vlanStaticIndex, hostIfDomainName=hostIfDomainName, productSwImageRev=productSwImageRev, hostIfDhcpVendorClassID=hostIfDhcpVendorClassID, downloadServer=downloadServer, hostIfSubnetMask=hostIfSubnetMask, snmpTrapDestTagList=snmpTrapDestTagList, snmpDiffservCodePoint=snmpDiffservCodePoint, vlanFdbTable=vlanFdbTable, systemConfigSave=systemConfigSave, systemConfigSaveNotify=systemConfigSaveNotify, snmpWriteCommunityName=snmpWriteCommunityName, vlanVersionNumber=vlanVersionNumber, vlanStatic=vlanStatic, hostIfAddress=hostIfAddress, vlanFdbEntry=vlanFdbEntry, notifyRestart=notifyRestart, productHardwareRev=productHardwareRev, hostIfDhcpClientID=hostIfDhcpClientID, vlanStaticUntaggedPorts=vlanStaticUntaggedPorts, downloadRetryCount=downloadRetryCount, PYSNMP_MODULE_ID=pfDrgMib, hostIfDefaultRouter=hostIfDefaultRouter, productInfo=productInfo, hostConfig=hostConfig, vlanFdbDynamicCount=vlanFdbDynamicCount, vlanMaxSupportedVlans=vlanMaxSupportedVlans, systemConfigRestartControlNotify=systemConfigRestartControlNotify, hostIfHostName=hostIfHostName, productIdentity=productIdentity, downloadFile=downloadFile, systemConfig=systemConfig, productSerialNo=productSerialNo, hostIfVlanPriority=hostIfVlanPriority, productHardwarePCBARevision=productHardwarePCBARevision, vlanStaticName=vlanStaticName, hostIfDiffservCodePoint=hostIfDiffservCodePoint, drgCompliance=drgCompliance, snmpTrapDestHostsMax=snmpTrapDestHostsMax, hostIfMode=hostIfMode, snmpTrapDestName=snmpTrapDestName, vlanStaticVlanId=vlanStaticVlanId, drgGroups=drgGroups, downloadAction=downloadAction, productPlatform=productPlatform, hostIfDnsServer1=hostIfDnsServer1, vlanStaticUnmodifiedPorts=vlanStaticUnmodifiedPorts, hostIfIndex=hostIfIndex, productFwImageRev=productFwImageRev, snmpTrapDestRowStatus=snmpTrapDestRowStatus, vlanTpFdbAddress=vlanTpFdbAddress, vlanTpFdbPort=vlanTpFdbPort, hostIfDefined=hostIfDefined, vlanBase=vlanBase, notifyConfigSaveResult=notifyConfigSaveResult, snmpConfig=snmpConfig, vlanMaxVlanId=vlanMaxVlanId, productOpDefRev=productOpDefRev, systemConfigRestartControl=systemConfigRestartControl, notifyDownloadResult=notifyDownloadResult, drgConfig=drgConfig)
