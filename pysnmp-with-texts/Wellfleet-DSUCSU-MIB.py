#
# PySNMP MIB module Wellfleet-DSUCSU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-DSUCSU-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:40:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, MibIdentifier, ModuleIdentity, Gauge32, TimeTicks, Bits, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter32, iso, NotificationType, ObjectIdentity, Counter64, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibIdentifier", "ModuleIdentity", "Gauge32", "TimeTicks", "Bits", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter32", "iso", "NotificationType", "ObjectIdentity", "Counter64", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfDsuCsuGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfDsuCsuGroup")
wfDsuCsuIfTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 4, 30, 1), )
if mibBuilder.loadTexts: wfDsuCsuIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfDsuCsuIfTable.setDescription('DSU CSU line record.')
wfDsuCsuIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 4, 30, 1, 1), ).setIndexNames((0, "Wellfleet-DSUCSU-MIB", "wfDsuCsuIfSlot"), (0, "Wellfleet-DSUCSU-MIB", "wfDsuCsuIfConnector"))
if mibBuilder.loadTexts: wfDsuCsuIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfDsuCsuIfEntry.setDescription('An entry in the DSU CSU IF table')
wfDsuCsuIfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 30, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDsuCsuIfDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfDsuCsuIfDelete.setDescription('Create/Delete parameter')
wfDsuCsuIfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 30, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDsuCsuIfSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfDsuCsuIfSlot.setDescription('Instance ID Slot, filled in by driver')
wfDsuCsuIfConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 30, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDsuCsuIfConnector.setStatus('mandatory')
if mibBuilder.loadTexts: wfDsuCsuIfConnector.setDescription('Instance ID Connector, filled in by the driver.')
wfDsuCsuSoftRev = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 30, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDsuCsuSoftRev.setStatus('mandatory')
if mibBuilder.loadTexts: wfDsuCsuSoftRev.setDescription('Displays the Software Revision of the DSU CSU card.')
wfDsuCsuHardRev = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 30, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDsuCsuHardRev.setStatus('mandatory')
if mibBuilder.loadTexts: wfDsuCsuHardRev.setDescription('Displays the Hardware Revision of the DSU CSU card.')
wfDsuCsuOpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 30, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dds156kbps", 1), ("cc64kbps", 2))).clone('dds156kbps')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDsuCsuOpMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfDsuCsuOpMode.setDescription('Identifies the type of telco service that the DSU CSU is connected to. Opmode should be set to dds1-56kbps (1) when connected to a DDS1 56 Kbps line. Opmode should be set to cc-64kbps (2) when connected to a Clear Channel 64Kbps line.')
wfDsuCsuTxClkSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 30, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("slave", 1), ("master", 2))).clone('slave')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDsuCsuTxClkSelect.setStatus('mandatory')
if mibBuilder.loadTexts: wfDsuCsuTxClkSelect.setDescription('Default timing, or clock, source for transmiting data to the network. There must be only one source on a DDS line. Timing should always be slave (1) when connected to a network. Timing should be set to master (2) on either end of a private-wire configuration, with the other end being set to slave (1).')
wfDsuCsuUnitReset = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 30, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("resetUnit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDsuCsuUnitReset.setStatus('mandatory')
if mibBuilder.loadTexts: wfDsuCsuUnitReset.setDescription('Enables the operator to remotely reset the unit. Using this command will cause the unit to terminate all its connections and drop data.')
wfDsuCsu64KTxMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 30, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDsuCsu64KTxMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: wfDsuCsu64KTxMonitor.setDescription('This signal is used in 64K Clear Channel mode to suppress customer data in the event that the data duplicates a network control code. A setting of enabled(1) suppresses customer data. A setting of disabled(2) allows all customer data through, which could potentially put the other end into a loop if the data duplicates a network control code.')
wfDsuCsuOpState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 30, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("normal", 1), ("localLpbk", 2), ("digitalLpbk", 3), ("remDigitalLpbk", 4), ("telcoLpbk", 5), ("remDigLpbkWPattern", 6), ("localAnlgLpbkWPattern", 7), ("pattern2047Gen", 8))).clone('normal')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDsuCsuOpState.setStatus('mandatory')
if mibBuilder.loadTexts: wfDsuCsuOpState.setDescription('Indicates the current operating state of the DSU CSU card.')
wfDsuCsuServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 30, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6))).clone(namedValues=NamedValues(("inService", 1), ("outOfService", 2), ("frameError", 3), ("lossOfLine", 5), ("telcoLpbk", 6))).clone('inService')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDsuCsuServiceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfDsuCsuServiceStatus.setDescription('The Current status of the physical interface. Your network carrier can send Out-of-Service or Maintenance Mode codes.')
wfDsuCsuV54Lpbk = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 30, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noLoop", 1), ("localAnlgLpbk", 2), ("localDigLpbk", 3), ("remDigLpbk", 4), ("remDigLpbkWPattern", 5), ("localAnlgLpbkWPattern", 6), ("pattern2047Gen", 7))).clone('noLoop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDsuCsuV54Lpbk.setStatus('mandatory')
if mibBuilder.loadTexts: wfDsuCsuV54Lpbk.setDescription('Enables the operator to control, and examine the state of, V.54 loopbacks within the DSU CSU.')
wfDsuCsuV54Timer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 30, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDsuCsuV54Timer.setStatus('mandatory')
if mibBuilder.loadTexts: wfDsuCsuV54Timer.setDescription('Duration in seconds that a test specified in wfDsuCsuTestLpbk is to execute.')
wfDsuCsuV54Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 30, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDsuCsuV54Errors.setStatus('mandatory')
if mibBuilder.loadTexts: wfDsuCsuV54Errors.setDescription('Indicates the number of errors reported during the last loopback test. This count will only be updated for loopbacks with test pattern.')
wfDsuCsuCqmsLaWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 30, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDsuCsuCqmsLaWindow.setStatus('mandatory')
if mibBuilder.loadTexts: wfDsuCsuCqmsLaWindow.setDescription('Indicates the number of minutes within the window in which the availability of the line (network) is to be calculated. The availability of the line is an indication of the percentage of time the line has been in service. It is calculated as follows: (((wfDsuCsuCqmsLaWindow*60) - (wfDsuCsuCqmsLaErrCnt*wfDsuCsuCqmsLaPollRate))/ wfDsuCsuCqmsLaWindow*60)')
wfDsuCsuCqmsLaErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 30, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDsuCsuCqmsLaErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfDsuCsuCqmsLaErrors.setDescription('Indicates the total number of seconds that the line was not in service in the last window of size wfDsuCsuCqmsLaWindow.')
wfDsuCsuCqmsLaPollRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 30, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDsuCsuCqmsLaPollRate.setStatus('mandatory')
if mibBuilder.loadTexts: wfDsuCsuCqmsLaPollRate.setDescription('Indicates the number of seconds between polls for line status from the DsuCsu. A value of 1 forces polling every second. A value of 60 forces polling every minute.')
wfDsuCsuCqmsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 30, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("resetCqms", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDsuCsuCqmsReset.setStatus('mandatory')
if mibBuilder.loadTexts: wfDsuCsuCqmsReset.setDescription('Resets the CQMS counters to their default values. For Line Availability, wfDsuCsuCqmsLaErrCnt is reset.')
wfDsuCsuOOSErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 30, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDsuCsuOOSErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfDsuCsuOOSErrors.setDescription('The number of seconds in which Out of Service control codes were received from the Telco. The counter is incremented whenever a sample within a second indicated the unit received an out of service control code.')
wfDsuCsuFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 30, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDsuCsuFrameErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfDsuCsuFrameErrors.setDescription('The number of seconds in which the unit was out of frame with the Telco. This is only applicable in 64K mode. The counter is incremented whenever a sample within a second indicated the unit was out of frame.')
wfDsuCsuLOLErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 30, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDsuCsuLOLErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfDsuCsuLOLErrors.setDescription('The number of seconds in which the unit has detected that no signal is present on the line, and/or no line is present.')
wfDsuCsuInitState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 4, 30, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("startup", 1), ("init", 2), ("monitor", 3), ("loopback", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfDsuCsuInitState.setStatus('mandatory')
if mibBuilder.loadTexts: wfDsuCsuInitState.setDescription('Indictes the state of the DSU/CSU initialization sequence. The state will indicate if the DSU/CSU has been initialized and is in the *monitor* state polling the card for line condition, or in the *loopback state running a user-initiated loopback')
wfDsuCsuIfTrap = NotificationType((1, 3, 6, 1, 4, 1, 18, 3, 4, 30) + (0,1)).setObjects(("Wellfleet-DSUCSU-MIB", "wfDsuCsuServiceStatus"))
if mibBuilder.loadTexts: wfDsuCsuIfTrap.setDescription('Indicates a change in the status of the line. The value returned in the trap will indicate the current state as defined in wfDsuCsuServiceStatus.')
mibBuilder.exportSymbols("Wellfleet-DSUCSU-MIB", wfDsuCsuIfTable=wfDsuCsuIfTable, wfDsuCsuHardRev=wfDsuCsuHardRev, wfDsuCsuTxClkSelect=wfDsuCsuTxClkSelect, wfDsuCsuV54Errors=wfDsuCsuV54Errors, wfDsuCsuOpState=wfDsuCsuOpState, wfDsuCsuV54Lpbk=wfDsuCsuV54Lpbk, wfDsuCsuUnitReset=wfDsuCsuUnitReset, wfDsuCsuCqmsReset=wfDsuCsuCqmsReset, wfDsuCsuIfTrap=wfDsuCsuIfTrap, wfDsuCsuServiceStatus=wfDsuCsuServiceStatus, wfDsuCsuCqmsLaErrors=wfDsuCsuCqmsLaErrors, wfDsuCsuIfEntry=wfDsuCsuIfEntry, wfDsuCsuV54Timer=wfDsuCsuV54Timer, wfDsuCsuOOSErrors=wfDsuCsuOOSErrors, wfDsuCsuFrameErrors=wfDsuCsuFrameErrors, wfDsuCsuIfDelete=wfDsuCsuIfDelete, wfDsuCsuIfSlot=wfDsuCsuIfSlot, wfDsuCsuSoftRev=wfDsuCsuSoftRev, wfDsuCsu64KTxMonitor=wfDsuCsu64KTxMonitor, wfDsuCsuLOLErrors=wfDsuCsuLOLErrors, wfDsuCsuInitState=wfDsuCsuInitState, wfDsuCsuIfConnector=wfDsuCsuIfConnector, wfDsuCsuOpMode=wfDsuCsuOpMode, wfDsuCsuCqmsLaPollRate=wfDsuCsuCqmsLaPollRate, wfDsuCsuCqmsLaWindow=wfDsuCsuCqmsLaWindow)
