#
# PySNMP MIB module BRI-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BRI-OPT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:40:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, NotificationType, Bits, MibIdentifier, iso, ObjectIdentity, Unsigned32, enterprises, Counter32, ModuleIdentity, TimeTicks, IpAddress, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "NotificationType", "Bits", "MibIdentifier", "iso", "ObjectIdentity", "Unsigned32", "enterprises", "Counter32", "ModuleIdentity", "TimeTicks", "IpAddress", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1))
cdx6500PCTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1))
cdx6500PSTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1))
class DisplayString(OctetString):
    pass

cdx6500PPCTISDN = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26))
cdx6500PPCTBRIConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1))
cdx6500PPCTBRIPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 1), )
if mibBuilder.loadTexts: cdx6500PPCTBRIPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPCTBRIPortTable.setDescription('This table contains BRI Port configuration parameters')
cdx6500PPCTBRIPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 1, 1), ).setIndexNames((0, "BRI-OPT-MIB", "cdx6500BRICfgPortNumber"))
if mibBuilder.loadTexts: cdx6500PPCTBRIPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPCTBRIPortEntry.setDescription('Each PortEntry contains the configuration parameters for one BRI ISDN port.')
cdx6500BRICfgPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICfgPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICfgPortNumber.setDescription('Port number of the port.')
cdx6500BRICfgPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(40))).clone(namedValues=NamedValues(("bri", 40)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICfgPortType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICfgPortType.setDescription('The Port Type of the port.')
cdx6500BRICfgSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICfgSwitchType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICfgSwitchType.setDescription('Specifies switch type for the central office. VN4 - French VN4 standard 1TR6 - German switch standard BTNR - UK Standard ETSI - Euro-ISDN 5ESS - AT&T switch NI-1 - National ISDN version 1.')
cdx6500BRICfgVmebug = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICfgVmebug.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICfgVmebug.setDescription('Engineering use only. Enable/disable the running of the OST VMEBUG debugger. NOTE: For this to work the flash must be loaded with the dbg_vmebug file. If the the dbg_vmebug file is not in flash this parameter will have no effect.')
cdx6500BRICfgTEI = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICfgTEI.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICfgTEI.setDescription('The range is 0..63,127. The range 0..63 indicate a static TEI provided by the Network subscribing. 127: TEI negotiated.')
cdx6500PPCTBRIChan = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2))
cdx6500PPCTBRIX25ChanTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1), )
if mibBuilder.loadTexts: cdx6500PPCTBRIX25ChanTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPCTBRIX25ChanTable.setDescription('This table contains BRI Channel configuration parameters.')
cdx6500PPCTBRIX25ChanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1), ).setIndexNames((0, "BRI-OPT-MIB", "cdx6500BRIX25ChanCfgPortNumber"), (0, "BRI-OPT-MIB", "cdx6500BRIX25ChanCfgChannelNum"))
if mibBuilder.loadTexts: cdx6500PPCTBRIX25ChanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPCTBRIX25ChanEntry.setDescription('Each ChanEntry contains the configuration parameters for one BRI ISDN channel.')
cdx6500BRIX25ChanCfgPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgPortNumber.setDescription('The BRI port number.')
cdx6500BRIX25ChanCfgChannelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgChannelNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgChannelNum.setDescription('Configured ISDN Channel Number.')
cdx6500BRIX25ChanCfgChannelType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("bChannel", 3), ("dChannel", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgChannelType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgChannelType.setDescription('ISDN channel type. bChannel - a full duplex, 56 or 64 Kbps channel. dChannel - a full duplex, 16 Kbps channel configured only for packet mode.')
cdx6500BRIX25ChanCfgAccessType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permanent", 1), ("switched", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgAccessType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgAccessType.setDescription('permanent : Permanent BRI channels switched : Switched BRI channels.')
cdx6500BRIX25ChanCfgTimeslot = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgTimeslot.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgTimeslot.setDescription('Physical channel number for permanent switch type only.')
cdx6500BRIX25ChanCfgSPID = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgSPID.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgSPID.setDescription('Service Profile Identifiers (SPID) is to define the services subscribed to by the ISDN device that is accessing the ISDN provider. This value is provided by your service provider.')
cdx6500BRIX25ChanCfgISDNCallAcc = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 5))).clone(namedValues=NamedValues(("allCalls", 2), ("addressOnly", 3), ("addressSubaddress", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgISDNCallAcc.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgISDNCallAcc.setDescription('Specifies the ISDN routing for a setup message coming from the network. allCalls : ISDN routing for all setup message coming from the network. addressOnly : ISDN routing for specified address only. addressSubaddress : ISDN routing for specified subaddress only. ')
cdx6500BRIX25ChanCfgLocalSubsAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 36))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgLocalSubsAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgLocalSubsAddr.setDescription('Specifies the local subscriber address which is provided by the service provider.')
cdx6500BRIX25ChanCfgLocalSubsSubAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgLocalSubsSubAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgLocalSubsSubAddr.setDescription('Specifies the local subscriber subaddress which is provided by the service provider.')
cdx6500BRIX25ChanCfgRateAdaption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rate56k", 1), ("rate64k", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgRateAdaption.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgRateAdaption.setDescription('Rate adaption parameter for this channel. rate56k : Rate of 56 K rate64k : Rate of 64 K. ')
cdx6500BRIX25ChanCfgProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("x25", 2), ("fri", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgProtocolType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgProtocolType.setDescription('Specifies the protocol type run over ISDN B channel.')
cdx6500BRIX25ChanCfgLinkAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte", 1), ("dce", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgLinkAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgLinkAddr.setDescription('The logical link address must be set to complementary values in devices at each end of the link: dte - link to have logical DTE address (A) dce - link to have logical DCE address (B)')
cdx6500BRIX25ChanCfgNumPVCChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgNumPVCChannels.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgNumPVCChannels.setDescription('Number of logical channels used for Permanent Virtual Circuits. The total number of PVC and SVC channels on a link should be kept as small as possible and consistent with needs. PVC connections must be configured in the PVC Table.')
cdx6500BRIX25ChanCfgStartPVCChanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgStartPVCChanNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgStartPVCChanNum.setDescription('This is the starting logical channel number for the Permanent Virtual Circuits on this link. Not used if the number of PVCs = 0.')
cdx6500BRIX25ChanCfgBNumSVCChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgBNumSVCChannels.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgBNumSVCChannels.setDescription('Number of logical channels used in Switched Virtual Circuits. The total number of PVC and SVC channels on a link should be kept as small as possible and consistent with needs. This is a B-channel object. ')
cdx6500BRIX25ChanCfgStartSVCChanNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgStartSVCChanNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgStartSVCChanNum.setDescription('This is the starting logical channel number for the Switched Virtual Circuits on this link. Not used if the number of SVCs = 0.')
cdx6500BRIX25ChanCfgInitialFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sabm", 1), ("disc", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgInitialFrame.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgInitialFrame.setDescription('Specify the initial frame required by other end for link startup: none - do nothing (other end initiates link-up) sabm - send SABM disc - send DISC, then SABM')
cdx6500BRIX25ChanCfgT1TransRetryTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgT1TransRetryTimer.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgT1TransRetryTimer.setDescription('T1 link retry timer value in tenths of a second (e.g. 30 = 3.0 seconds).')
cdx6500BRIX25ChanCfgT4PollTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgT4PollTimer.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgT4PollTimer.setDescription('This sets the time an idle link is probed for assurance of connection to the remote device. 0 - disable the timer X - X is in tenths of a second (e.g. 40 = 4.0 seconds) and must be set greater than T1.')
cdx6500BRIX25ChanCfgBN2TransTries = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgBN2TransTries.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgBN2TransTries.setDescription('The maximum number of attempts allowed to complete a transmission. This is a B channel object')
cdx6500BRIX25ChanCfgFrameSeqCount = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("ext", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgFrameSeqCount.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgFrameSeqCount.setDescription('Port uses normal or extended frame sequence numbering: norm - normal sequencing (modulo 8) ext - extended sequencing (modulo 128)')
cdx6500BRIX25ChanCfgBKFrameWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgBKFrameWindow.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgBKFrameWindow.setDescription('Frame level window size must be set to the same value in devices at each end of the link. This is a B-channel object.')
cdx6500BRIX25ChanCfgPktSeqCount = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("ext", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgPktSeqCount.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgPktSeqCount.setDescription('Port uses normal or extended packet level sequence numbers norm - normal sequencing (Modulo 8) ext - extended sequencing (Modulo 128) The value must be the same in devices at each end of the link.')
cdx6500BRIX25ChanCfgBWPktWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgBWPktWindow.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgBWPktWindow.setDescription('Packet level window size must be set to the same value in devices at each end of the link. This is a B-channel object.')
cdx6500BRIX25ChanCfgBPPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8, 9, 10, 11))).clone(namedValues=NamedValues(("s128", 8), ("s256", 9), ("s512", 10), ("s1024", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgBPPktSize.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgBPPktSize.setDescription('This is the maximum packet size used on X.25 links. For proper operation, the size must be the same in devices at each end of the link. This is a B-channel object.')
cdx6500BRIX25ChanCfgMaxNegoPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8, 9, 10, 11))).clone(namedValues=NamedValues(("s128", 8), ("s256", 9), ("s512", 10), ("s1024", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgMaxNegoPktSize.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgMaxNegoPktSize.setDescription('This is the maximum negotiated packet size allowed for inbound and outbound calls on this X.25 link.')
cdx6500BRIX25ChanCfgDataQUpperThres = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgDataQUpperThres.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgDataQUpperThres.setDescription('This is the maximum number of data packets a channel on this port will queue for transmission before invoking flow control to the attached channel.')
cdx6500BRIX25ChanCfgDataQLowerThres = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgDataQLowerThres.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgDataQLowerThres.setDescription('This is the number of data packets a channel on this port will have queued for transmission when it releases flow control to the attached channel.')
cdx6500BRIX25ChanCfgRestartTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgRestartTimer.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgRestartTimer.setDescription('Restart-Request timeout timer in seconds. If timer expires, request is sent again.')
cdx6500BRIX25ChanCfgResetTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgResetTimer.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgResetTimer.setDescription('Reset-Request timeout timer in seconds. If timer expires, request is sent again.')
cdx6500BRIX25ChanCfgCallTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgCallTimer.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgCallTimer.setDescription('Call-Request timeout timer in seconds. If timer expires, call is cleared.')
cdx6500BRIX25ChanCfgClearTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgClearTimer.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgClearTimer.setDescription('Clear-Request timeout timer in seconds. If timer expires, request is sent again.')
cdx6500BRIX25ChanCfgFacToDelFromOutbCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgFacToDelFromOutbCalls.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgFacToDelFromOutbCalls.setDescription('Specify facilities deleted from an outbound call before it is forwarded: NONE - no facilities deleted THRO - delete throughput class negotiation NUI - delete network user identification CUG - delete closed user group Any combination of above specified by summing (e.g. THRO+NUI. . .).')
cdx6500BRIX25ChanCfgFacToAddToOutbCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgFacToAddToOutbCalls.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgFacToAddToOutbCalls.setDescription('Specify facilities added to an outbound call before it is forwarded: NONE - no facilities added REV - add reverse charging PACK - add packet size negotiation WIND - add window size negotiation Any combination of above specified by summing (e.g. PACK+WIND+. . .).')
cdx6500BRIX25ChanCfgFacToBarInOutbCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgFacToBarInOutbCalls.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgFacToBarInOutbCalls.setDescription('Specify facilities which, if present in an outbound call, will be blocked by the port: NONE - no facility blocked REV - bar reverse charging FAST - bar fast select BCUG - bar Bilateral Closed User Group DGRAM - bar datagram Any combination of above specified by summing (e.g. REV+FAST).')
cdx6500BRIX25ChanCfgFacToBarInInbCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgFacToBarInInbCalls.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgFacToBarInInbCalls.setDescription('Specify facilities which, if present in an inbound call, will be blocked by the port: NONE - no facility blocked BCUG - bar Bilateral Closed User Group DGRAM - bar datagram REV - bar Reverse Charging Any combination of above specified by summing (e.g. DGRAM+BCUG).')
cdx6500BRIX25ChanCfgX25Options = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 107))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgX25Options.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgX25Options.setDescription('Select X.25 options as follows: NONE - no option specified 1980 - use X.25 1980 NUI - perform network user identification validation check PDN - connected to Public Data Network CUD - use call user data subaddressing IBAR - bar all calls coming in from X.25 port user OBAR - bar all calls going out to X.25 port user CBCK - allow routing inbound calls back out this port CUG - check closed user group; otherwise, CUG passes transparently CAUSE - pass cause, diagnostic, code in outbound packets HOLD - hold calls over link restart NRST - do not send restart packet on link-up BKUP - this is a backup port to be activated if other ports are down INL - inter-node link. Link goes to another 6500 device INLA - set with INL option when an X.25 link connection is to a 6500 node using 2.12.04 or earlier DELAY - Enable Delay and Path Trace on this link (link must be connected to Rel. 4.xx node) Any combination of above specified by summing (e.g. 1980+NUI+. . .).')
cdx6500BRIX25ChanCfgNumRoutDgtInCallUsrData = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgNumRoutDgtInCallUsrData.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgNumRoutDgtInCallUsrData.setDescription('This specifies the number of routing digits in the call user data. It is used on X.25 links attached to a Public Data Network where the private network address is carried in the call user data.')
cdx6500BRIX25ChanCfgNumPreAddrDgstrpOutgCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgNumPreAddrDgstrpOutgCalls.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgNumPreAddrDgstrpOutgCalls.setDescription('For X.25 links connected to a Public Data Network, this parameter specifies the number of prefix digits to remove from the called address before forwarding the call to the PDN.')
cdx6500BRIX25ChanCfgInDigitsToStrip = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgInDigitsToStrip.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgInDigitsToStrip.setDescription('For X.25 links connected to a Public Data Network, this parameter specifies the number of prefix digits to remove from the incoming calling address before forwarding the call from the PDN.')
cdx6500BRIX25ChanCfgRestrictedConnDest = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgRestrictedConnDest.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgRestrictedConnDest.setDescription('All calls entering this port will be routed to the destination specified in this parameter, irrespective of route selection table entries. For example, to route all calls to X.25 port 3, use X25-3. To route calls to SDLC port 2, station 4, use SDLC-2S4. Function is disabled for blank field.')
cdx6500BRIX25ChanCfgPortAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgPortAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgPortAddress.setDescription('On X.25 links: If the X.25 Option REGO, REGSO or REGI is selected, this address is inserted into the calling address field of the outbound or inbound call packet. On MUX links: When a MUX channel makes a call, the subaddress of the channel is appended to this address and inserted into the calling address field of the call packet.')
cdx6500BRIX25ChanCfgCUGMembership = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgCUGMembership.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgCUGMembership.setDescription('The port may be a member of up to 8 different Closed User Groups (CUGs). Each CUG membership must be a two digit number (except double dash) and separated by a comma. ( e.g. 12,34,56,09,02,03 ). -- - No CUG Membership 00-99 - CUG Membership')
cdx6500BRIX25ChanCfgBillingRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgBillingRecords.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgBillingRecords.setDescription('This controls whether billing (accounting) records will be created for calls on this port.')
cdx6500BRIX25ChanCfgSubAddrSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgSubAddrSize.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgSubAddrSize.setDescription('For ports connected to a Public Data Network, this parameter specifies the number of digits in the subaddress of an X.25 address.')
cdx6500BRIX25ChanCfgCallSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgCallSecurity.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgCallSecurity.setDescription('For ports used as V.25 bis or SW56K backup, this parameter specifies the type of call security to use prior to the link being detected up. disable - Disable will allow both incoming and outgoing calls. enable - Enable will allow ONLY outgoing calls. Incoming calls will be immediately terminated.')
cdx6500BRIX25ChanCfgProtectionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("cpOnly", 2), ("fullDcp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgProtectionLevel.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgProtectionLevel.setDescription('This specifies the level of data or connection protection which will be applied to calls to or from this port. The actual level for a call will be negotiated to the lesser of this level and the level configured for the other end of the call. none - No protection cpOnly - Connection protection only fullDcp - Full data and connection protection')
cdx6500BRIX25ChanCfgReconnTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgReconnTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgReconnTimeout.setDescription('This specifies the number of seconds that DCP on the originating side will wait between reconnection attempts.')
cdx6500BRIX25ChanCfgReconnTriesLt = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgReconnTriesLt.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgReconnTriesLt.setDescription('This specifies the number of times that DCP on the originating side will attempt to reconnect before clearing the call. For0, it will not attempt to reconnect.')
cdx6500BRIX25ChanCfgFacSubsCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 50), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgFacSubsCtl.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgFacSubsCtl.setDescription('NONE - Subscription to facilities not enforced. FCN_ON - Flow Control Negotiation enabled. Packet and Window size negotiation facilities in an inbound call will be allowed. Packet and Window size facilities will always be included in outbound calls and call accepted/ connected when this parameter is set. FCN_OFF - Flow Control Negotiation disabled. Inbound calls containing Packet and Window size facilities will be cleared. Packet and Window size facilities will not be present in outbound calls and call accepted/connected when this parameter is set. TCN_ON - Throughput Class Negotiation enabled. The throughput class negotiation facility in an inbound call will be allowed. The throughput class negotiation facility will always be included in outbound calls and call accepted/connected when this parameter is set. The facility is passed onward to the destination in the call packet transparently and does not alter the handling of the SVC data within the node. TCN_OFF - Throughput Class Negotiation disabled. Inbound calls containing the throughput class negotiation facility will be cleared. The throughput class negotiation facility will not be present in outbound calls and call accepted/connected when this parameter is set. Some combinations of above options are allowed (e.g. FCNON+TCNON)')
cdx6500BRIX25ChanCfgAlarmPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("network", 1), ("access", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgAlarmPriority.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgAlarmPriority.setDescription('Specify the severity level of LINK UP and LINK DOWN alarms: network - Severity HIGH alarms will be generated access - Severity LOW alarms will be generated')
cdx6500BRIX25ChanCfgChanTEI = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgChanTEI.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgChanTEI.setDescription('Terminal Endpoint Identifier. Value is provided by the service provider.')
cdx6500BRIX25ChanCfgX25NetworkType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("transpac", 1), ("telenet", 2), ("pss", 3), ("datanet", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgX25NetworkType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgX25NetworkType.setDescription('Specifies the X.25 Network Type: Transpac, PSS, Datanet, Telenet.')
cdx6500BRIX25ChanCfgDNumSVCChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgDNumSVCChannels.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgDNumSVCChannels.setDescription('Specifies the number of logical SVC channels on this port. This is a D-channel object.')
cdx6500BRIX25ChanCfgDWPktWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgDWPktWindow.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgDWPktWindow.setDescription('Specifies the default packet level window size when it is not negotiated for the individual call. The value must be the same for both ends of the link. This is a D-channel object.')
cdx6500BRIX25ChanCfgDPPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(6, 7, 8, 9))).clone(namedValues=NamedValues(("psize32", 6), ("psize64", 7), ("psize128", 8), ("psize256", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgDPPktSize.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgDPPktSize.setDescription('Specifies the maximum default packet size (in bytes) for inbound and outbound calls on the link. The value must be the same for both ends of the link. This is a D-channel object.')
cdx6500BRIX25ChanCfgDKFrameWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgDKFrameWindow.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgDKFrameWindow.setDescription('Specifies the number of unacknowledged frames that can be outstanding. When there is a high link delay, set this parameter to a high value to improve throughput. The setting for this parameter should be the same for the devices on both ends of the link. This is a D-channel object.')
cdx6500BRIX25ChanCfgDN2TransTries = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgDN2TransTries.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgDN2TransTries.setDescription('Specifies the maximum number of times a frame is resent before disconnect. This is a D-channel object.')
cdx6500BRIX25ChanCfgT1Timer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgT1Timer.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgT1Timer.setDescription('Sets the T1 Retry Timer. The values are in tenths of a second. (30 = 3.0 seconds)')
cdx6500BRIX25ChanCfgT2Timer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgT2Timer.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgT2Timer.setDescription('Sets the T2 timer. The values are in tenths of a second. (40 = 4.0 seconds)')
cdx6500BRIX25ChanCfgLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dChannel", 1), ("v24Dte", 2), ("v24Dce", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgLinkType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgLinkType.setDescription('Engineering use only. Sets the link type: dChannel - Run over the D channel v24Dte - DTE on the V.24 port v24Dce - DCE on the V.24 port')
cdx6500BRIX25ChanCfgAddrTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 26, 1, 2, 1, 1, 62), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 107))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgAddrTrans.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIX25ChanCfgAddrTrans.setDescription('Select any of the following address translation options NONE - no option specified Outbound Call Processing: DEDO - delete called address DEGO - delete calling address REGO - replace calling address with configured Port Address REGSO - replace calling address with configured Port Address plus Inbound Subaddress obtained from the Inbound Call Translation Table entry where Private Network Address matches the entire calling address INGO - replace calling address with configured Port Address and retain original calling subaddress SAGO - strip calling address, but retain subaddress Inbound Call Processing: INGI - replace calling address with configured Port Address and retain original calling subaddress REGI - replace calling address with configured Port Address SRGI - select route from the Calling Address Translation Table by replacing the called address with the Private Network Address where the Inbound Calling Address matches the beginning of the calling address Call Accept Processing: DADA - delete called address in inbound/outbound call accept DAGA - delete calling address in inbound/outbound call accept IADD - copy called and calling addresses from call request into outbound call accepted/connected Some of the options may be combined (e.g. DEDO + DEGO).')
cdx6500BRIStats = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27))
cdx6500BRIPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 1), )
if mibBuilder.loadTexts: cdx6500BRIPStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIPStatsTable.setDescription('A table of BRI port statistics.')
cdx6500BRIPStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 1, 1), ).setIndexNames((0, "BRI-OPT-MIB", "cdx6500BRIPStatPortNumber"))
if mibBuilder.loadTexts: cdx6500BRIPStatsTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIPStatsTableEntry.setDescription('Each entry contains the statistics for a single BRI port.')
cdx6500BRIPStatPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIPStatPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIPStatPortNumber.setDescription('The port number of the BRI port.')
cdx6500BRIPStatPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(40))).clone(namedValues=NamedValues(("bri", 40)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIPStatPortType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIPStatPortType.setDescription('The Port Type of the port.')
cdx6500BRIPStatPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIPStatPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIPStatPortStatus.setDescription('Status of this port : Enabled - Port is enabled Disabled - Port is disabled Busyout - Port has been busied out Unknown - Port not recognized Init Failed - Port initialization failed.')
cdx6500BRIPStatNumConfigChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIPStatNumConfigChannels.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIPStatNumConfigChannels.setDescription('The number of configured channels.')
cdx6500BRIPStatSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIPStatSwitchType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIPStatSwitchType.setDescription('Specifies switch type for the central office. VN4 : French VN4 standard 1TR6 : German switch standard BTNR : UK Standard ETSI : Euro-ISDN 5ESS : AT&T switch NI-1 : National ISDN version 1 ')
cdx6500BRIPStatTEI = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIPStatTEI.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIPStatTEI.setDescription('Terminal Endpoint Identifier. The range of values [0 - 63] indicate a static TEI provided by the Network subscribing. 127: TEI negotiated')
cdx6500BRIPStatLastStatsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIPStatLastStatsReset.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIPStatLastStatsReset.setDescription('Time when the statistics were last reset.')
cdx6500BRIPStatCharsInTot = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIPStatCharsInTot.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIPStatCharsInTot.setDescription('Number of characters received since last node, port or statistics reset.')
cdx6500BRIPStatCharsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIPStatCharsInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIPStatCharsInPerSec.setDescription('Average number of characters received per second since last node, port or statistics reset.')
cdx6500BRIPStatCharsOutTot = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIPStatCharsOutTot.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIPStatCharsOutTot.setDescription('Number of characters sent since last node, port or statistics reset.')
cdx6500BRIPStatCharsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIPStatCharsOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIPStatCharsOutPerSec.setDescription('Average number of characters sent per second since last node, port or statistics reset.')
cdx6500BRIPStatFramesInTot = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIPStatFramesInTot.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIPStatFramesInTot.setDescription('Number of frames received since last node, port or statistics reset.')
cdx6500BRIPStatFramesInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIPStatFramesInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIPStatFramesInPerSec.setDescription('Average number of Frames received per second since last node, port or statistics reset.')
cdx6500BRIPStatFrameOutTot = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIPStatFrameOutTot.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIPStatFrameOutTot.setDescription('Number of frames sent since last node, port or statistics reset.')
cdx6500BRIPStatFrameOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIPStatFrameOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIPStatFrameOutPerSec.setDescription('Average number of Frames sent per second since last node, port or statistics reset.')
cdx6500BRIPStatAvFrameSzIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIPStatAvFrameSzIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIPStatAvFrameSzIn.setDescription('Average size of the frames received.')
cdx6500BRIPStatAvFrameSzOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIPStatAvFrameSzOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIPStatAvFrameSzOut.setDescription('Average size of the frames sent.')
cdx6500BRIPStatPortUtilIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIPStatPortUtilIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIPStatPortUtilIn.setDescription('Current inbound port utilization.')
cdx6500BRIPStatPortUtilOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIPStatPortUtilOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIPStatPortUtilOut.setDescription('Current outbound port utilization.')
cdx6500BRIPStatPortUtilInMax = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIPStatPortUtilInMax.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIPStatPortUtilInMax.setDescription('Maximum inbound port utilization.')
cdx6500BRIPStatPortUtilOutMax = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRIPStatPortUtilOutMax.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIPStatPortUtilOutMax.setDescription('Maximum outbound port utilization.')
cdx6500BRIChanStatsTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2), )
if mibBuilder.loadTexts: cdx6500BRIChanStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIChanStatsTable.setDescription('A table of BRI channel statistics.')
cdx6500BRIChanStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1), ).setIndexNames((0, "BRI-OPT-MIB", "cdx6500BRICStatsPortNumber"), (0, "BRI-OPT-MIB", "cdx6500BRICStatsChannelNum"))
if mibBuilder.loadTexts: cdx6500BRIChanStatsTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRIChanStatsTableEntry.setDescription('Each entry contains the statistics for a single channel.')
cdx6500BRICStatsPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsPortNumber.setDescription('The BRI port number associated with the channels.')
cdx6500BRICStatsChannelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsChannelNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsChannelNum.setDescription('The ISDN channel Number.')
cdx6500BRICStatsChannelType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsChannelType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsChannelType.setDescription('ISDN channel type. B Channel : a full duplex, 56 or 64 Kbps channel. D Channel : a full duplex, 16 Kbps channel configured only for packet mode. Unknown : unknown channel type .')
cdx6500BRICStatsAccessType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsAccessType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsAccessType.setDescription('Switched BRI channel type. Permanent channel type : not supported in this version Unknown : unknown access type .')
cdx6500BRICStatsProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsProtocolType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsProtocolType.setDescription("Specifies the protocol type such as X25, FRI. `Unknown' indicates unknown protocol type.")
cdx6500BRICStatsCallState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsCallState.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsCallState.setDescription('Call State: Disconnected - Call in Idle state Ringing - Trying to establish connection Connected - Call connected Disabled - Call disabled Congested - not supported Unknown - unknown state .')
cdx6500BRICStatsChannelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsChannelStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsChannelStatus.setDescription('Disabled - Channel disabled. Enabled - Channel enabled. Busyout - Channel busyout Unknown - unknown status.')
cdx6500BRICStatsInCurCallAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsInCurCallAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsInCurCallAddr.setDescription('The address for the current inbound ISDN call.')
cdx6500BRICStatsInCurCallSubAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsInCurCallSubAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsInCurCallSubAddr.setDescription('The subaddress for the current ISDN call.')
cdx6500BRICStatsInAvConnTm = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsInAvConnTm.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsInAvConnTm.setDescription('Average connection time for an inbound ISDN call.')
cdx6500BRICStatsInCurConnTm = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsInCurConnTm.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsInCurConnTm.setDescription('Current connection time for an inbound ISDN call. current time - Time connection started.')
cdx6500BRICStatsInMinConnTm = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsInMinConnTm.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsInMinConnTm.setDescription('Minimum connection time for an inbound ISDN call.')
cdx6500BRICStatsInMaxConnTm = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsInMaxConnTm.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsInMaxConnTm.setDescription('Maximum connection time for an inbound ISDN call.')
cdx6500BRICStatsInNumSuccCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsInNumSuccCalls.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsInNumSuccCalls.setDescription('Total number of successful inbound calls.')
cdx6500BRICStatsInNumFailCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsInNumFailCalls.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsInNumFailCalls.setDescription('Total number of unsuccessful inbound calls.')
cdx6500BRICStatsOutCurCallAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsOutCurCallAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsOutCurCallAddr.setDescription('The address of the current ISDN outbound call.')
cdx6500BRICStatsOutCurCallSubAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsOutCurCallSubAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsOutCurCallSubAddr.setDescription('The subaddress of the current ISDN outbound call.')
cdx6500BRICStatsOutAvConnTm = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsOutAvConnTm.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsOutAvConnTm.setDescription('Average connection time for an outbound call.')
cdx6500BRICStatsOutCurConnTm = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsOutCurConnTm.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsOutCurConnTm.setDescription('Current connection time for an outbound call. Current time - Time connection started.')
cdx6500BRICStatsOutMinConnTm = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsOutMinConnTm.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsOutMinConnTm.setDescription('Minimum connection time for an outbound call.')
cdx6500BRICStatsOutMaxConnTm = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsOutMaxConnTm.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsOutMaxConnTm.setDescription('Maximum connection time for an outbound call.')
cdx6500BRICStatsOutNumSuccCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsOutNumSuccCalls.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsOutNumSuccCalls.setDescription('Total number of successful outbound calls.')
cdx6500BRICStatsOutNumFailCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsOutNumFailCalls.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsOutNumFailCalls.setDescription('Total number of unsuccessful outbound calls.')
cdx6500BRICStatsMaxSVC = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsMaxSVC.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsMaxSVC.setDescription('Maximum number of async Switched Virtual Circuit channels.')
cdx6500BRICStatsMaxPVC = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsMaxPVC.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsMaxPVC.setDescription('Maximum number of async Permanent Virtual Circuit channels.')
cdx6500BRICStatsCurSVC = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsCurSVC.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsCurSVC.setDescription('Current number of async Switched Virtual Circuit channels.')
cdx6500BRICStatsCurPVC = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsCurPVC.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsCurPVC.setDescription('Current number of async Permament Virtual Circuit channels.')
cdx6500BRICStatsLastRepReasonCodes = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsLastRepReasonCodes.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsLastRepReasonCodes.setDescription('Last Reason codes returned from the network and Last Return code from Transparent.')
cdx6500BRICStatsLastStatsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsLastStatsReset.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsLastStatsReset.setDescription('Time when the node restarted or the stats reset by CTP command .')
cdx6500BRICStatsCharsInTot = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsCharsInTot.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsCharsInTot.setDescription('Number of characters received.')
cdx6500BRICStatsCharsOutTot = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsCharsOutTot.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsCharsOutTot.setDescription('Number of characters sent.')
cdx6500BRICStatsCharsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsCharsInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsCharsInPerSec.setDescription('Average number of characters received per second.')
cdx6500BRICStatsCharsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsCharsOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsCharsOutPerSec.setDescription('Average number of characters sent per second.')
cdx6500BRICStatsPktsInTot = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsPktsInTot.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsPktsInTot.setDescription('Number of packets received.')
cdx6500BRICStatsPktsOutTot = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsPktsOutTot.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsPktsOutTot.setDescription('Number of packets sent.')
cdx6500BRICStatsPktsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsPktsInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsPktsInPerSec.setDescription('Average number of packets received per second.')
cdx6500BRICStatsPktsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsPktsOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsPktsOutPerSec.setDescription('Average number of packets sent per second.')
cdx6500BRICStatsFramesInTot = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsFramesInTot.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsFramesInTot.setDescription('Total number of frames received.')
cdx6500BRICStatsFramesOutTot = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsFramesOutTot.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsFramesOutTot.setDescription('Total number of frames sent.')
cdx6500BRICStatsFramesInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsFramesInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsFramesInPerSec.setDescription('Average number of frames received per second.')
cdx6500BRICStatsFramesOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsFramesOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsFramesOutPerSec.setDescription('Average number of frames sent per second.')
cdx6500BRICStatsInfoFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsInfoFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsInfoFramesIn.setDescription('Number of Information frames received.')
cdx6500BRICStatsInfoFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsInfoFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsInfoFramesOut.setDescription('Number of Information frames sent.')
cdx6500BRICStatsRNRFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsRNRFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsRNRFramesIn.setDescription('Number of Receiver Not Ready (RNR) frames received.')
cdx6500BRICStatsRNRFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsRNRFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsRNRFramesOut.setDescription('Number of Receiver Not Ready (RNR) frames sent.')
cdx6500BRICStatsSABMFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsSABMFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsSABMFramesIn.setDescription('Number of Set Asynchronous Balanced Mode (SABM) frames received.')
cdx6500BRICStatsSABMFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsSABMFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsSABMFramesOut.setDescription('Number of Set Asynchronous Balanced Mode (SABM) frames sent.')
cdx6500BRICStatsDMFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsDMFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsDMFramesIn.setDescription('Number of Disconnect Mode (DM) frames received.')
cdx6500BRICStatsDMFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsDMFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsDMFramesOut.setDescription('Number of Disconnect Mode (DM) frames sent.')
cdx6500BRICStatsRRFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsRRFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsRRFramesIn.setDescription('Number of Receiver Ready (RR) frames received.')
cdx6500BRICStatsRRFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsRRFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsRRFramesOut.setDescription('Number of Receiver Ready (RR) frames sent.')
cdx6500BRICStatsREJFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsREJFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsREJFramesIn.setDescription('Number of Reject (REJ) frames received.')
cdx6500BRICStatsREJFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsREJFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsREJFramesOut.setDescription('Number of Reject (REJ) frames sent.')
cdx6500BRICStatsDISCFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsDISCFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsDISCFramesIn.setDescription('Number of Disconnect (DISC) frames received.')
cdx6500BRICStatsDISCFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsDISCFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsDISCFramesOut.setDescription('Number of Disconnect (DISC) frames sent.')
cdx6500BRICStatsUAFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsUAFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsUAFramesIn.setDescription('Number of Unnumbered Acknowledgement (UA) frames received.')
cdx6500BRICStatsUAFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsUAFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsUAFramesOut.setDescription('Number of Unnumbered Acknowledgement (UA) frames sent.')
cdx6500BRICStatsFRMRFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsFRMRFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsFRMRFramesIn.setDescription('Number of Frame Reject (FRMR) frames received.')
cdx6500BRICStatsFRMRFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsFRMRFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsFRMRFramesOut.setDescription('Number of Frame Reject (FRMR) frames sent.')
cdx6500BRICStatsDataPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsDataPktsIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsDataPktsIn.setDescription('Total Number of Data packets received.')
cdx6500BRICStatsDataPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsDataPktsOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsDataPktsOut.setDescription('Total Number of Data packets sent.')
cdx6500BRICStatsRRPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsRRPktsIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsRRPktsIn.setDescription('Total Number of Receiver Ready (RR) packets received.')
cdx6500BRICStatsRRPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsRRPktsOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsRRPktsOut.setDescription('Total Number of Receiver Ready (RR) packets sent.')
cdx6500BRICStatsRNRPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsRNRPktsIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsRNRPktsIn.setDescription('Total Number of Receiver Not Ready (RNR) packets received.')
cdx6500BRICStatsRNRPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsRNRPktsOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsRNRPktsOut.setDescription('Total Number of Receiver Not Ready (RNR) packets sent.')
cdx6500BRICStatsRejPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsRejPktsIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsRejPktsIn.setDescription('Total Number of Reject packets received.')
cdx6500BRICStatsRejPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsRejPktsOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsRejPktsOut.setDescription('Total Number of Reject packets sent.')
cdx6500BRICStatsCallReqPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsCallReqPktsIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsCallReqPktsIn.setDescription('Total Number of Call Request packets received.')
cdx6500BRICStatsCallReqPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsCallReqPktsOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsCallReqPktsOut.setDescription('Total Number of Call Request packets sent.')
cdx6500BRICStatsCallAccPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsCallAccPktsIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsCallAccPktsIn.setDescription('Total Number of Call Accept packets received.')
cdx6500BRICStatsCallAccPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsCallAccPktsOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsCallAccPktsOut.setDescription('Total Number of Call Acceptt packets sent.')
cdx6500BRICStatsClrReqPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsClrReqPktsIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsClrReqPktsIn.setDescription('Total Number of Clear Request packets received.')
cdx6500BRICStatsClrReqPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsClrReqPktsOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsClrReqPktsOut.setDescription('Total Number of Clear Request packets sent.')
cdx6500BRICStatsClrConfPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsClrConfPktsIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsClrConfPktsIn.setDescription('Total Number of Clear Confirmation packets received.')
cdx6500BRICStatsClrConfPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsClrConfPktsOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsClrConfPktsOut.setDescription('Total Number of Clear Confirmation packets sent.')
cdx6500BRICStatsIntReqPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 76), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsIntReqPktsIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsIntReqPktsIn.setDescription('Total Number of Interrupt Request packets received.')
cdx6500BRICStatsIntReqPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 77), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsIntReqPktsOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsIntReqPktsOut.setDescription('Total Number of Interrupt Request packets sent.')
cdx6500BRICStatsIntConfPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 78), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsIntConfPktsIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsIntConfPktsIn.setDescription('Total Number of Interrupt Confirmation packets received.')
cdx6500BRICStatsIntConfPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 79), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsIntConfPktsOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsIntConfPktsOut.setDescription('Total Number of Interrupt Confirmation packets sent.')
cdx6500BRICStatsRstReqPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 80), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsRstReqPktsIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsRstReqPktsIn.setDescription('Total Number of Reset Request packets received.')
cdx6500BRICStatsRstReqPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 81), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsRstReqPktsOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsRstReqPktsOut.setDescription('Total Number of Reset Request packets sent.')
cdx6500BRICStatsRstConfPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 82), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsRstConfPktsIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsRstConfPktsIn.setDescription('Total Number of Reset Confirmation packets received.')
cdx6500BRICStatsRstConfPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 83), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsRstConfPktsOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsRstConfPktsOut.setDescription('Total Number of Reset Confirmation packets sent.')
cdx6500BRICStatsRestartReqPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 84), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsRestartReqPktsIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsRestartReqPktsIn.setDescription('Total Number of Restart Request packets received.')
cdx6500BRICStatsRestartReqPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 85), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsRestartReqPktsOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsRestartReqPktsOut.setDescription('Total Number of Restart Request packets sent.')
cdx6500BRICStatsRestartConfPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 86), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsRestartConfPktsIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsRestartConfPktsIn.setDescription('Total Number of Restart Confirmation packets received.')
cdx6500BRICStatsRestartConfPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 87), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsRestartConfPktsOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsRestartConfPktsOut.setDescription('Total Number of Restart Confirmation packets sent.')
cdx6500BRICStatsTEI = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 88), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsTEI.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsTEI.setDescription('Terminal Endpoint Identifier provided by the Network subscribing.')
cdx6500BRICStatsSAPI = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 89), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsSAPI.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsSAPI.setDescription('Service Access Point Identifier. A value of 16 is reserved for Packet-mode communication on the D-channel using X.25 level 3.')
cdx6500BRICStatsNetworkType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 27, 2, 1, 90), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500BRICStatsNetworkType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500BRICStatsNetworkType.setDescription('Specifies the X.25 Network Type: Transpac, PSS, Datanet, Telenet, Unknown .')
mibBuilder.exportSymbols("BRI-OPT-MIB", cdx6500BRICStatsPktsInPerSec=cdx6500BRICStatsPktsInPerSec, cdx6500=cdx6500, cdx6500BRICStatsIntConfPktsOut=cdx6500BRICStatsIntConfPktsOut, DisplayString=DisplayString, cdx6500BRIX25ChanCfgInitialFrame=cdx6500BRIX25ChanCfgInitialFrame, codex=codex, cdx6500BRICStatsRestartConfPktsOut=cdx6500BRICStatsRestartConfPktsOut, cdx6500BRICStatsAccessType=cdx6500BRICStatsAccessType, cdx6500BRIX25ChanCfgInDigitsToStrip=cdx6500BRIX25ChanCfgInDigitsToStrip, cdx6500BRIPStatFrameOutPerSec=cdx6500BRIPStatFrameOutPerSec, cdx6500BRICStatsInNumFailCalls=cdx6500BRICStatsInNumFailCalls, cdx6500BRICStatsDMFramesIn=cdx6500BRICStatsDMFramesIn, cdx6500BRICStatsDataPktsOut=cdx6500BRICStatsDataPktsOut, cdx6500BRIX25ChanCfgReconnTriesLt=cdx6500BRIX25ChanCfgReconnTriesLt, cdx6500BRIX25ChanCfgMaxNegoPktSize=cdx6500BRIX25ChanCfgMaxNegoPktSize, cdx6500BRICStatsOutNumSuccCalls=cdx6500BRICStatsOutNumSuccCalls, cdx6500BRICStatsRRPktsOut=cdx6500BRICStatsRRPktsOut, cdx6500BRIPStatNumConfigChannels=cdx6500BRIPStatNumConfigChannels, cdx6500BRICStatsCurPVC=cdx6500BRICStatsCurPVC, cdx6500BRIX25ChanCfgTimeslot=cdx6500BRIX25ChanCfgTimeslot, cdx6500BRIX25ChanCfgT4PollTimer=cdx6500BRIX25ChanCfgT4PollTimer, cdx6500BRICStatsDataPktsIn=cdx6500BRICStatsDataPktsIn, cdx6500BRICStatsPktsOutPerSec=cdx6500BRICStatsPktsOutPerSec, cdx6500BRICStatsRestartReqPktsOut=cdx6500BRICStatsRestartReqPktsOut, cdx6500BRIX25ChanCfgFacToBarInInbCalls=cdx6500BRIX25ChanCfgFacToBarInInbCalls, cdx6500BRICStatsREJFramesOut=cdx6500BRICStatsREJFramesOut, cdx6500BRIX25ChanCfgProtocolType=cdx6500BRIX25ChanCfgProtocolType, cdx6500BRIX25ChanCfgT1TransRetryTimer=cdx6500BRIX25ChanCfgT1TransRetryTimer, cdx6500BRICStatsFramesInTot=cdx6500BRICStatsFramesInTot, cdx6500BRICStatsIntConfPktsIn=cdx6500BRICStatsIntConfPktsIn, cdx6500BRICStatsInfoFramesIn=cdx6500BRICStatsInfoFramesIn, cdx6500BRICStatsSABMFramesIn=cdx6500BRICStatsSABMFramesIn, cdx6500BRICStatsFRMRFramesIn=cdx6500BRICStatsFRMRFramesIn, cdx6500BRIX25ChanCfgChannelType=cdx6500BRIX25ChanCfgChannelType, cdx6500BRICStatsInCurCallSubAddr=cdx6500BRICStatsInCurCallSubAddr, cdx6500BRIX25ChanCfgRestartTimer=cdx6500BRIX25ChanCfgRestartTimer, cdx6500BRICStatsRstReqPktsIn=cdx6500BRICStatsRstReqPktsIn, cdx6500BRICStatsInCurCallAddr=cdx6500BRICStatsInCurCallAddr, cdx6500BRICStatsOutCurConnTm=cdx6500BRICStatsOutCurConnTm, cdx6500BRIX25ChanCfgChannelNum=cdx6500BRIX25ChanCfgChannelNum, cdx6500BRIPStatAvFrameSzIn=cdx6500BRIPStatAvFrameSzIn, cdx6500BRICStatsMaxPVC=cdx6500BRICStatsMaxPVC, cdx6500BRICStatsOutCurCallSubAddr=cdx6500BRICStatsOutCurCallSubAddr, cdx6500PPCTISDN=cdx6500PPCTISDN, cdx6500BRIX25ChanCfgBillingRecords=cdx6500BRIX25ChanCfgBillingRecords, cdx6500BRIX25ChanCfgAddrTrans=cdx6500BRIX25ChanCfgAddrTrans, cdx6500CfgProtocolGroup=cdx6500CfgProtocolGroup, cdx6500BRICStatsInNumSuccCalls=cdx6500BRICStatsInNumSuccCalls, cdx6500BRIX25ChanCfgPortAddress=cdx6500BRIX25ChanCfgPortAddress, cdx6500BRIX25ChanCfgT1Timer=cdx6500BRIX25ChanCfgT1Timer, cdx6500BRIPStatsTableEntry=cdx6500BRIPStatsTableEntry, cdx6500BRIX25ChanCfgRateAdaption=cdx6500BRIX25ChanCfgRateAdaption, cdx6500StatProtocolGroup=cdx6500StatProtocolGroup, cdx6500BRIPStatFrameOutTot=cdx6500BRIPStatFrameOutTot, cdx6500PPCTBRIPortEntry=cdx6500PPCTBRIPortEntry, cdx6500BRICStatsRstConfPktsOut=cdx6500BRICStatsRstConfPktsOut, cdx6500BRICStatsPktsInTot=cdx6500BRICStatsPktsInTot, cdx6500BRIPStatFramesInPerSec=cdx6500BRIPStatFramesInPerSec, cdx6500BRIX25ChanCfgX25Options=cdx6500BRIX25ChanCfgX25Options, cdx6500BRICStatsFramesOutPerSec=cdx6500BRICStatsFramesOutPerSec, cdx6500BRICStatsCallReqPktsOut=cdx6500BRICStatsCallReqPktsOut, cdx6500BRICStatsClrReqPktsOut=cdx6500BRICStatsClrReqPktsOut, cdx6500BRICStatsRNRPktsIn=cdx6500BRICStatsRNRPktsIn, cdx6500BRICStatsClrConfPktsIn=cdx6500BRICStatsClrConfPktsIn, cdx6500BRIX25ChanCfgDN2TransTries=cdx6500BRIX25ChanCfgDN2TransTries, cdx6500BRIPStatPortType=cdx6500BRIPStatPortType, cdx6500BRIX25ChanCfgCallTimer=cdx6500BRIX25ChanCfgCallTimer, cdx6500BRICStatsRestartConfPktsIn=cdx6500BRICStatsRestartConfPktsIn, cdx6500PSTPortProtocolGroup=cdx6500PSTPortProtocolGroup, cdx6500BRICStatsCharsOutTot=cdx6500BRICStatsCharsOutTot, cdx6500BRIChanStatsTable=cdx6500BRIChanStatsTable, cdx6500BRIX25ChanCfgBN2TransTries=cdx6500BRIX25ChanCfgBN2TransTries, cdx6500BRICStatsInMinConnTm=cdx6500BRICStatsInMinConnTm, cdx6500BRIX25ChanCfgAlarmPriority=cdx6500BRIX25ChanCfgAlarmPriority, cdx6500BRICStatsRNRPktsOut=cdx6500BRICStatsRNRPktsOut, cdx6500BRIX25ChanCfgReconnTimeout=cdx6500BRIX25ChanCfgReconnTimeout, cdx6500BRICStatsRejPktsIn=cdx6500BRICStatsRejPktsIn, cdx6500BRICStatsFramesOutTot=cdx6500BRICStatsFramesOutTot, cdx6500BRIX25ChanCfgBNumSVCChannels=cdx6500BRIX25ChanCfgBNumSVCChannels, cdx6500BRIPStatCharsInPerSec=cdx6500BRIPStatCharsInPerSec, cdx6500BRIChanStatsTableEntry=cdx6500BRIChanStatsTableEntry, cdx6500BRIPStatPortUtilInMax=cdx6500BRIPStatPortUtilInMax, cdx6500BRIPStatPortUtilOutMax=cdx6500BRIPStatPortUtilOutMax, cdx6500BRICStatsRRFramesOut=cdx6500BRICStatsRRFramesOut, cdx6500BRIX25ChanCfgBPPktSize=cdx6500BRIX25ChanCfgBPPktSize, cdx6500BRIX25ChanCfgFacToAddToOutbCalls=cdx6500BRIX25ChanCfgFacToAddToOutbCalls, cdx6500BRIPStatCharsOutTot=cdx6500BRIPStatCharsOutTot, cdx6500BRIX25ChanCfgNumPVCChannels=cdx6500BRIX25ChanCfgNumPVCChannels, cdx6500BRIX25ChanCfgResetTimer=cdx6500BRIX25ChanCfgResetTimer, cdx6500BRICStatsCharsInTot=cdx6500BRICStatsCharsInTot, cdx6500BRICStatsInMaxConnTm=cdx6500BRICStatsInMaxConnTm, cdx6500BRICStatsDMFramesOut=cdx6500BRICStatsDMFramesOut, cdx6500BRICStatsRestartReqPktsIn=cdx6500BRICStatsRestartReqPktsIn, cdx6500PPCTBRIConfig=cdx6500PPCTBRIConfig, cdx6500BRICStatsCurSVC=cdx6500BRICStatsCurSVC, cdx6500BRICStatsRstConfPktsIn=cdx6500BRICStatsRstConfPktsIn, cdx6500BRICStatsInCurConnTm=cdx6500BRICStatsInCurConnTm, cdx6500BRIPStatFramesInTot=cdx6500BRIPStatFramesInTot, cdx6500BRICStatsChannelType=cdx6500BRICStatsChannelType, cdx6500BRICStatsInfoFramesOut=cdx6500BRICStatsInfoFramesOut, cdx6500BRIX25ChanCfgCUGMembership=cdx6500BRIX25ChanCfgCUGMembership, cdx6500Statistics=cdx6500Statistics, cdx6500BRICStatsPortNumber=cdx6500BRICStatsPortNumber, cdx6500BRIX25ChanCfgLocalSubsSubAddr=cdx6500BRIX25ChanCfgLocalSubsSubAddr, cdx6500BRIX25ChanCfgDataQUpperThres=cdx6500BRIX25ChanCfgDataQUpperThres, cdx6500BRICStatsLastStatsReset=cdx6500BRICStatsLastStatsReset, cdx6500BRICStatsMaxSVC=cdx6500BRICStatsMaxSVC, cdx6500BRIX25ChanCfgAccessType=cdx6500BRIX25ChanCfgAccessType, cdx6500BRIPStatPortStatus=cdx6500BRIPStatPortStatus, cdx6500BRIPStatPortUtilIn=cdx6500BRIPStatPortUtilIn, cdx6500BRICStatsCallAccPktsOut=cdx6500BRICStatsCallAccPktsOut, cdx6500BRICStatsUAFramesOut=cdx6500BRICStatsUAFramesOut, cdx6500BRIX25ChanCfgT2Timer=cdx6500BRIX25ChanCfgT2Timer, cdx6500BRICStatsRRFramesIn=cdx6500BRICStatsRRFramesIn, cdx6500BRICStatsDISCFramesIn=cdx6500BRICStatsDISCFramesIn, cdx6500BRICStatsIntReqPktsOut=cdx6500BRICStatsIntReqPktsOut, cdx6500BRIX25ChanCfgDNumSVCChannels=cdx6500BRIX25ChanCfgDNumSVCChannels, cdx6500BRICStatsProtocolType=cdx6500BRICStatsProtocolType, cdx6500BRICStatsRejPktsOut=cdx6500BRICStatsRejPktsOut, cdx6500BRIX25ChanCfgDPPktSize=cdx6500BRIX25ChanCfgDPPktSize, cdx6500BRICStatsOutMinConnTm=cdx6500BRICStatsOutMinConnTm, cdx6500BRIPStatCharsInTot=cdx6500BRIPStatCharsInTot, cdx6500BRICStatsCallReqPktsIn=cdx6500BRICStatsCallReqPktsIn, cdx6500BRICStatsRstReqPktsOut=cdx6500BRICStatsRstReqPktsOut, cdx6500BRIX25ChanCfgSPID=cdx6500BRIX25ChanCfgSPID, cdx6500BRIX25ChanCfgNumPreAddrDgstrpOutgCalls=cdx6500BRIX25ChanCfgNumPreAddrDgstrpOutgCalls, cdx6500BRICStatsDISCFramesOut=cdx6500BRICStatsDISCFramesOut, cdx6500BRICStatsSAPI=cdx6500BRICStatsSAPI, cdx6500BRIX25ChanCfgSubAddrSize=cdx6500BRIX25ChanCfgSubAddrSize, cdx6500BRIX25ChanCfgBKFrameWindow=cdx6500BRIX25ChanCfgBKFrameWindow, cdx6500BRIPStatTEI=cdx6500BRIPStatTEI, cdx6500BRICStatsREJFramesIn=cdx6500BRICStatsREJFramesIn, cdx6500PPCTBRIPortTable=cdx6500PPCTBRIPortTable, cdx6500BRICStatsTEI=cdx6500BRICStatsTEI, cdx6500BRIX25ChanCfgPortNumber=cdx6500BRIX25ChanCfgPortNumber, cdx6500BRICStatsFramesInPerSec=cdx6500BRICStatsFramesInPerSec, cdx6500BRICStatsNetworkType=cdx6500BRICStatsNetworkType, cdx6500BRIX25ChanCfgLocalSubsAddr=cdx6500BRIX25ChanCfgLocalSubsAddr, cdx6500PPCTBRIX25ChanEntry=cdx6500PPCTBRIX25ChanEntry, cdx6500BRIX25ChanCfgPktSeqCount=cdx6500BRIX25ChanCfgPktSeqCount, cdx6500BRIX25ChanCfgDWPktWindow=cdx6500BRIX25ChanCfgDWPktWindow, cdx6500BRICfgPortNumber=cdx6500BRICfgPortNumber, cdx6500BRIX25ChanCfgChanTEI=cdx6500BRIX25ChanCfgChanTEI, cdx6500BRICStatsRNRFramesIn=cdx6500BRICStatsRNRFramesIn, cdx6500BRICStatsRRPktsIn=cdx6500BRICStatsRRPktsIn, cdx6500BRIX25ChanCfgLinkType=cdx6500BRIX25ChanCfgLinkType, cdx6500BRICStatsChannelNum=cdx6500BRICStatsChannelNum, cdx6500BRICStatsCallAccPktsIn=cdx6500BRICStatsCallAccPktsIn, cdx6500BRICStatsIntReqPktsIn=cdx6500BRICStatsIntReqPktsIn, cdx6500BRIX25ChanCfgFacToBarInOutbCalls=cdx6500BRIX25ChanCfgFacToBarInOutbCalls, cdx6500BRIPStatsTable=cdx6500BRIPStatsTable, cdx6500BRIX25ChanCfgStartPVCChanNum=cdx6500BRIX25ChanCfgStartPVCChanNum, cdx6500PPCTBRIX25ChanTable=cdx6500PPCTBRIX25ChanTable, cdx6500BRIPStatSwitchType=cdx6500BRIPStatSwitchType, cdx6500BRIPStatAvFrameSzOut=cdx6500BRIPStatAvFrameSzOut, cdx6500BRIStats=cdx6500BRIStats, cdx6500BRICStatsClrReqPktsIn=cdx6500BRICStatsClrReqPktsIn, cdx6500BRICStatsCharsOutPerSec=cdx6500BRICStatsCharsOutPerSec, cdx6500BRIX25ChanCfgStartSVCChanNum=cdx6500BRIX25ChanCfgStartSVCChanNum, cdx6500BRICfgVmebug=cdx6500BRICfgVmebug, cdx6500BRIPStatPortNumber=cdx6500BRIPStatPortNumber, cdx6500BRIX25ChanCfgFacSubsCtl=cdx6500BRIX25ChanCfgFacSubsCtl, cdx6500BRIPStatLastStatsReset=cdx6500BRIPStatLastStatsReset, cdx6500BRIPStatPortUtilOut=cdx6500BRIPStatPortUtilOut, cdx6500BRIX25ChanCfgLinkAddr=cdx6500BRIX25ChanCfgLinkAddr, cdx6500BRIX25ChanCfgNumRoutDgtInCallUsrData=cdx6500BRIX25ChanCfgNumRoutDgtInCallUsrData, cdx6500BRICStatsInAvConnTm=cdx6500BRICStatsInAvConnTm, cdx6500BRIX25ChanCfgDataQLowerThres=cdx6500BRIX25ChanCfgDataQLowerThres, cdx6500BRICfgTEI=cdx6500BRICfgTEI, cdx6500BRICStatsOutNumFailCalls=cdx6500BRICStatsOutNumFailCalls, cdxProductSpecific=cdxProductSpecific, cdx6500BRIX25ChanCfgX25NetworkType=cdx6500BRIX25ChanCfgX25NetworkType, cdx6500BRICStatsPktsOutTot=cdx6500BRICStatsPktsOutTot, cdx6500BRIX25ChanCfgFacToDelFromOutbCalls=cdx6500BRIX25ChanCfgFacToDelFromOutbCalls, cdx6500BRIX25ChanCfgClearTimer=cdx6500BRIX25ChanCfgClearTimer, cdx6500BRICStatsChannelStatus=cdx6500BRICStatsChannelStatus, cdx6500BRICStatsUAFramesIn=cdx6500BRICStatsUAFramesIn, cdx6500BRIX25ChanCfgRestrictedConnDest=cdx6500BRIX25ChanCfgRestrictedConnDest, cdx6500BRIX25ChanCfgISDNCallAcc=cdx6500BRIX25ChanCfgISDNCallAcc, cdx6500BRICStatsOutAvConnTm=cdx6500BRICStatsOutAvConnTm, cdx6500BRICStatsClrConfPktsOut=cdx6500BRICStatsClrConfPktsOut, cdx6500PCTPortProtocolGroup=cdx6500PCTPortProtocolGroup, cdx6500BRICStatsFRMRFramesOut=cdx6500BRICStatsFRMRFramesOut, cdx6500Configuration=cdx6500Configuration, cdx6500BRICStatsCallState=cdx6500BRICStatsCallState, cdx6500BRIX25ChanCfgFrameSeqCount=cdx6500BRIX25ChanCfgFrameSeqCount, cdx6500BRICStatsOutCurCallAddr=cdx6500BRICStatsOutCurCallAddr, cdx6500BRICfgPortType=cdx6500BRICfgPortType, cdx6500BRICStatsOutMaxConnTm=cdx6500BRICStatsOutMaxConnTm, cdx6500BRICStatsLastRepReasonCodes=cdx6500BRICStatsLastRepReasonCodes, cdx6500BRICfgSwitchType=cdx6500BRICfgSwitchType, cdx6500BRIX25ChanCfgCallSecurity=cdx6500BRIX25ChanCfgCallSecurity, cdx6500BRICStatsSABMFramesOut=cdx6500BRICStatsSABMFramesOut, cdx6500BRIX25ChanCfgDKFrameWindow=cdx6500BRIX25ChanCfgDKFrameWindow, cdx6500BRIX25ChanCfgBWPktWindow=cdx6500BRIX25ChanCfgBWPktWindow, cdx6500BRIX25ChanCfgProtectionLevel=cdx6500BRIX25ChanCfgProtectionLevel, cdx6500BRICStatsCharsInPerSec=cdx6500BRICStatsCharsInPerSec, cdx6500BRIPStatCharsOutPerSec=cdx6500BRIPStatCharsOutPerSec, cdx6500PPCTBRIChan=cdx6500PPCTBRIChan, cdx6500BRICStatsRNRFramesOut=cdx6500BRICStatsRNRFramesOut)
