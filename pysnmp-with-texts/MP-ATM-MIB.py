#
# PySNMP MIB module MP-ATM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MP-ATM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:13:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
AtmTrafficDescrParamIndex, = mibBuilder.importSymbols("ATM-MIB", "AtmTrafficDescrParamIndex")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, iso, Bits, NotificationType, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Integer32, ModuleIdentity, mgmt, TimeTicks, IpAddress, Unsigned32, ObjectIdentity, NotificationType, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "iso", "Bits", "NotificationType", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Integer32", "ModuleIdentity", "mgmt", "TimeTicks", "IpAddress", "Unsigned32", "ObjectIdentity", "NotificationType", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

class NetPrefix(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(13, 13)
    fixedLength = 13

class DisplayString(OctetString):
    pass

class DateAndTime(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(8, 8), ValueSizeConstraint(11, 11), )
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class PhysAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

org = MibIdentifier((1, 3))
dod = MibIdentifier((1, 3, 6))
internet = MibIdentifier((1, 3, 6, 1))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
nec = MibIdentifier((1, 3, 6, 1, 4, 1, 119))
necProduct = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 1))
datax = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 1, 3))
mmpf = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 1, 3, 13))
mmn9110 = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 1, 3, 13, 1))
mmn9120 = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 1, 3, 13, 2))
nec_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2)).setLabel("nec-mib")
necProductDepend = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3))
datax_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3)).setLabel("datax-mib")
mmpf_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13)).setLabel("mmpf-mib")
mpSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 1))
mpIfCard = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 2))
mpEtherPort = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 3))
mpVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 4))
mpBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 5))
mpDbAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 6))
mpEventLog = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 7))
mpUiSession = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 8))
mpFtp = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 9))
mpDhcp = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 10))
mpIp = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 11))
mpRip = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 12))
mpSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 13))
mpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 14))
mpCli = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 15))
mpAtm = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 16))
mpLis = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 17))
mpDns = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 18))
mpLec = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 19))
mpMpc = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 20))
mpStp = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 21))
mpLlc = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 22))
mpOspf = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 23))
mpObsCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 101))
mpCardInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 102))
mpInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 103))
mpPvoice = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 104))
mpAtmCallCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110))
mpCes = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 111))
mpIpsw = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 112))
mpInsCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 113))
mpFfr = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 114))
class AtmAddr(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(8, 8), ValueSizeConstraint(20, 20), )
class MpAtmCCCladType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("com", 1), ("mux", 2), ("atm-uni", 3), ("atm-trunk", 4), ("atm-uni-vmc", 5), ("lvc", 6), ("ffr", 7), ("odt", 8), ("ces", 9), ("ins", 10), ("sel", 11), ("eth", 12), ("atm-trunk-cdm", 13))

mpAtmCCBaseGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 1))
mpAtmCCNextTrafficDescrIndex = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 1, 1), AtmTrafficDescrParamIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCNextTrafficDescrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCNextTrafficDescrIndex.setDescription('A unique value to identify ATM Traffic Descriptor.')
mpAtmCCNextNodeVci = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCNextNodeVci.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCNextNodeVci.setDescription('A unique value to identify Node VCI.')
mpAtmCCStaticPVPC = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2))
mpAtmCCStaticPvpTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 1), )
if mibBuilder.loadTexts: mpAtmCCStaticPvpTable.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCStaticPvpTable.setDescription('Static-PVP Table')
mpAtmCCStaticPvpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 1, 1), ).setIndexNames((0, "MP-ATM-MIB", "mpAtmCCStaticPvpIndex"), (0, "MP-ATM-MIB", "mpAtmCCStaticPvpLowIfIndex"), (0, "MP-ATM-MIB", "mpAtmCCStaticPvpLowVpi"), (0, "MP-ATM-MIB", "mpAtmCCStaticPvpHighIfIndex"), (0, "MP-ATM-MIB", "mpAtmCCStaticPvpHighVpi"))
if mibBuilder.loadTexts: mpAtmCCStaticPvpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCStaticPvpEntry.setDescription('Static-PVP Entry')
mpAtmCCStaticPvpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: mpAtmCCStaticPvpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCStaticPvpIndex.setDescription('A unique value to identify this Static-PVP. The value is used only 1 (p2p).')
mpAtmCCStaticPvpLowIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: mpAtmCCStaticPvpLowIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCStaticPvpLowIfIndex.setDescription("The value of this object is equal to MIB II's ifIndex value of the ATM interface port for this Static-PVP.")
mpAtmCCStaticPvpLowVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: mpAtmCCStaticPvpLowVpi.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCStaticPvpLowVpi.setDescription('The value of this object is equal to the VPI value at the ATM interface associated with the Static-PVP that is identified by mpAtmCCStaticPvcLowIfIndex. The VPI value cannot exceed the number supported by the atmInterfaceMaxVpiBits at the low ATM interface port.')
mpAtmCCStaticPvpHighIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 1, 1, 4), Integer32())
if mibBuilder.loadTexts: mpAtmCCStaticPvpHighIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCStaticPvpHighIfIndex.setDescription("The value of this object is equal to MIB II's ifIndex value for the ATM interface port for this static-PVP.")
mpAtmCCStaticPvpHighVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: mpAtmCCStaticPvpHighVpi.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCStaticPvpHighVpi.setDescription('The value of this object is equal to the VPI value at the ATM interface associated with the Static-PVP that is identified by mpAtmCCStaticPvcHighIfIndex. The VPI value cannot exceed the number supported by the atmInterfaceMaxVpiBits at the high ATM interface port.')
mpAtmCCStaticPvpLowReceiveTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 1, 1, 6), AtmTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCStaticPvpLowReceiveTrafficDescrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCStaticPvpLowReceiveTrafficDescrIndex.setDescription('The value of this object identifies in the ATM Traffic Descriptor Table which applies to the receive direction of this Static-PVP.')
mpAtmCCStaticPvpLowTransmitTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 1, 1, 7), AtmTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCStaticPvpLowTransmitTrafficDescrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCStaticPvpLowTransmitTrafficDescrIndex.setDescription('The value of this object identifies in the ATM Traffic Descriptor Table which applies to the transmit direction of this Static-PVP.')
mpAtmCCStaticPvpHighReceiveTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 1, 1, 8), AtmTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCStaticPvpHighReceiveTrafficDescrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCStaticPvpHighReceiveTrafficDescrIndex.setDescription('The value of this object identifies in the ATM Traffic Descriptor Table which applies to the receive direction of this Static-PVP.')
mpAtmCCStaticPvpHighTransmitTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 1, 1, 9), AtmTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCStaticPvpHighTransmitTrafficDescrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCStaticPvpHighTransmitTrafficDescrIndex.setDescription('The value of this object identifies in the ATM Traffic Descriptor Table which applies to the transmit direction of this Static-PVP.')
mpAtmCCStaticPvpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCStaticPvpPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCStaticPvpPriority.setDescription('Connection priority')
mpAtmCCStaticPvpLowCladType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 1, 1, 11), MpAtmCCCladType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCStaticPvpLowCladType.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCStaticPvpLowCladType.setDescription('CLAD Type')
mpAtmCCStaticPvpHighCladType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 1, 1, 12), MpAtmCCCladType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCStaticPvpHighCladType.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCStaticPvpHighCladType.setDescription('CLAD Type')
mpAtmCCStaticPvpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCStaticPvpAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCStaticPvpAdminStatus.setDescription('The value of this object identifies the desired administrative status of this Static-PVP. The up and down states indicate that the traffic flow is enabled and disabled respectively on this Static-PVP.')
mpAtmCCStaticPvpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCStaticPvpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCStaticPvpOperStatus.setDescription('The value of this object identifies the desired operational status of this Static-PVP.')
mpAtmCCStaticPvpPvpId = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCStaticPvpPvpId.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCStaticPvpPvpId.setDescription('The value of this object identifies the desired cross connection.')
mpAtmCCStaticPvpSeqNo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCStaticPvpSeqNo.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCStaticPvpSeqNo.setDescription('Order information in the cross connection.')
mpAtmCCStaticPvpPgcRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCStaticPvpPgcRequest.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCStaticPvpPgcRequest.setDescription("Indicates whether this PVP was configureated from the PVC-Group-Cutover function. The value of '0' indicates that this PVP was normal. The value of '!=0' indicates that this PVP was configrated form PVC-Group-Cutover function. In this case, the value was indicated the PVC-Group Number")
mpAtmCCStaticPvpCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 1, 1, 98), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("cancel", 2), ("delete", 3), ("unknown", 4))).clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCStaticPvpCfgStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCStaticPvpCfgStatus.setDescription('Configuration setting start object. If this object is set the setting of the configuration is started.')
mpAtmCCStaticPvpErrInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 1, 1, 99), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCStaticPvpErrInfo.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCStaticPvpErrInfo.setDescription('Object that the configuration setting result is set up.')
mpAtmCCStaticPvcTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2), )
if mibBuilder.loadTexts: mpAtmCCStaticPvcTable.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCStaticPvcTable.setDescription('Static-PVC Table')
mpAtmCCStaticPvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2, 1), ).setIndexNames((0, "MP-ATM-MIB", "mpAtmCCStaticPvcIndex"), (0, "MP-ATM-MIB", "mpAtmCCStaticPvcLowIfIndex"), (0, "MP-ATM-MIB", "mpAtmCCStaticPvcLowVpi"), (0, "MP-ATM-MIB", "mpAtmCCStaticPvcLowVci"), (0, "MP-ATM-MIB", "mpAtmCCStaticPvcHighIfIndex"), (0, "MP-ATM-MIB", "mpAtmCCStaticPvcHighVpi"), (0, "MP-ATM-MIB", "mpAtmCCStaticPvcHighVci"))
if mibBuilder.loadTexts: mpAtmCCStaticPvcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCStaticPvcEntry.setDescription('Static-PVC Entry')
mpAtmCCStaticPvcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: mpAtmCCStaticPvcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCStaticPvcIndex.setDescription('A unique value to identify this Static-PVC. The value is used only 1 (p2p).')
mpAtmCCStaticPvcLowIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: mpAtmCCStaticPvcLowIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCStaticPvcLowIfIndex.setDescription("The value of this object is equal to MIB II's ifIndex value of the ATM interface port for this Static-PVC.")
mpAtmCCStaticPvcLowVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: mpAtmCCStaticPvcLowVpi.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCStaticPvcLowVpi.setDescription('The value of this object is equal to the VPI value at the ATM interface associated with the Static-PVC that is identified by mpAtmCCStaticPvcLowIfIndex. The VPI value cannot exceed the number supported by the atmInterfaceMaxVpiBits at the low ATM interface port.')
mpAtmCCStaticPvcLowVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: mpAtmCCStaticPvcLowVci.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCStaticPvcLowVci.setDescription('The value of this object is equal to the VCI value at the ATM interface associated with this Static-PVC that is identified by mpAtmCCStaticPvcLowIfIndex. The VCI value cannot exceed the number supported by the atmInterfaceMaxVciBits at the low ATM interface port.')
mpAtmCCStaticPvcHighIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2, 1, 5), Integer32())
if mibBuilder.loadTexts: mpAtmCCStaticPvcHighIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCStaticPvcHighIfIndex.setDescription("The value of this object is equal to MIB II's ifIndex value for the ATM interface port for this static-PVC.")
mpAtmCCStaticPvcHighVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: mpAtmCCStaticPvcHighVpi.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCStaticPvcHighVpi.setDescription('The value of this object is equal to the VPI value at the ATM interface associated with the Static-PVC that is identified by mpAtmCCStaticPvcHighIfIndex. The VPI value cannot exceed the number supported by the atmInterfaceMaxVpiBits at the high ATM interface port.')
mpAtmCCStaticPvcHighVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: mpAtmCCStaticPvcHighVci.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCStaticPvcHighVci.setDescription('The value of this object is equal to the VCI value at the ATM interface associated with the static-PVC that is identified by mpAtmCCStaticPvcHighIfIndex. The VCI value cannot exceed the number supported by the atmInterfaceMaxVciBits at the high ATM interface port.')
mpAtmCCStaticPvcLowReceiveTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2, 1, 8), AtmTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCStaticPvcLowReceiveTrafficDescrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCStaticPvcLowReceiveTrafficDescrIndex.setDescription('The value of this object identifies in the ATM Traffic Descriptor Table which applies to the receive direction of this Static-PVC.')
mpAtmCCStaticPvcLowTransmitTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2, 1, 9), AtmTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCStaticPvcLowTransmitTrafficDescrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCStaticPvcLowTransmitTrafficDescrIndex.setDescription('The value of this object identifies in the ATM Traffic Descriptor Table which applies to the transmit direction of this Static-PVC.')
mpAtmCCStaticPvcHighReceiveTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2, 1, 10), AtmTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCStaticPvcHighReceiveTrafficDescrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCStaticPvcHighReceiveTrafficDescrIndex.setDescription('The value of this object identifies in the ATM Traffic Descriptor Table which applies to the receive direction of this Static-PVC.')
mpAtmCCStaticPvcHighTransmitTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2, 1, 11), AtmTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCStaticPvcHighTransmitTrafficDescrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCStaticPvcHighTransmitTrafficDescrIndex.setDescription('The value of this object identifies in the ATM Traffic Descriptor Table which applies to the transmit direction of this Static-PVC.')
mpAtmCCStaticPvcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCStaticPvcPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCStaticPvcPriority.setDescription('Connection priority')
mpAtmCCStaticPvcLowCladType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2, 1, 13), MpAtmCCCladType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCStaticPvcLowCladType.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCStaticPvcLowCladType.setDescription('CLAD Type')
mpAtmCCStaticPvcHighCladType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2, 1, 14), MpAtmCCCladType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCStaticPvcHighCladType.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCStaticPvcHighCladType.setDescription('CLAD Type')
mpAtmCCStaticPvcAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCStaticPvcAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCStaticPvcAdminStatus.setDescription('The value of this object identifies the desired administrative status of this Static-PVC. The up and down states indicate that the traffic flow is enabled and disabled respectively on this Static-PVC.')
mpAtmCCStaticPvcOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCStaticPvcOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCStaticPvcOperStatus.setDescription('The value of this object identifies the desired operational status of this Static-PVC.')
mpAtmCCStaticPvcPvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCStaticPvcPvcId.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCStaticPvcPvcId.setDescription('The value of this object identifies the desired cross connection.')
mpAtmCCStaticPvcSeqNo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCStaticPvcSeqNo.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCStaticPvcSeqNo.setDescription('Order information in the cross connection.')
mpAtmCCStaticPvcPgcRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCStaticPvcPgcRequest.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCStaticPvcPgcRequest.setDescription("Indicates whether this PVP was configureated from the PVC-Group-Cutover function. The value of '0' indicates that this PVP was normal. The value of '!=0' indicates that this PVP was configrated form PVC-Group-Cutover function. In this case, the value was indicated the PVC-Group Number")
mpAtmCCStaticPvcCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2, 1, 98), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("cancel", 2), ("delete", 3), ("unknown", 4))).clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCStaticPvcCfgStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCStaticPvcCfgStatus.setDescription('Configuration setting start object. If this object is set the setting of the configuration is started.')
mpAtmCCStaticPvcErrInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 2, 2, 1, 99), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCStaticPvcErrInfo.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCStaticPvcErrInfo.setDescription('Object that the configuration setting result is set up.')
mpAtmCCSoftPVPC = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3))
mpAtmCCSoftPvpTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 1), )
if mibBuilder.loadTexts: mpAtmCCSoftPvpTable.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvpTable.setDescription('Soft-PVP(Calling) Table')
mpAtmCCSoftPvpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 1, 1), ).setIndexNames((0, "MP-ATM-MIB", "mpAtmCCSoftPvpLeafReference"), (0, "MP-ATM-MIB", "mpAtmCCSoftPvpIfIndex"), (0, "MP-ATM-MIB", "mpAtmCCSoftPvpVpi"))
if mibBuilder.loadTexts: mpAtmCCSoftPvpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvpEntry.setDescription('Soft-PVP(Calling) Entry')
mpAtmCCSoftPvpLeafReference = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: mpAtmCCSoftPvpLeafReference.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvpLeafReference.setDescription('A unique value to identify this Soft-PVP. The value is used only 1 (p2p).')
mpAtmCCSoftPvpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: mpAtmCCSoftPvpIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvpIfIndex.setDescription("The value of this object is equal to MIB II's ifIndex value of the ATM interface port for this Soft-PVP.")
mpAtmCCSoftPvpVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 1, 1, 3), Integer32())
if mibBuilder.loadTexts: mpAtmCCSoftPvpVpi.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvpVpi.setDescription('The value of this object is equal to the VPI value at the ATM interface associated with the Soft-PVP that is identified by mpAtmCCSoftPvpIfIndex. The VPI value cannot exceed the number supported by the atmInterfaceMaxVpiBits at the ATM interface port.')
mpAtmCCSoftPvpReceiveTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 1, 1, 4), AtmTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvpReceiveTrafficDescrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvpReceiveTrafficDescrIndex.setDescription('The value of this object identifies in the ATM Traffic Descriptor Table which applies to the receive direction of this Soft-PVP.')
mpAtmCCSoftPvpTransmitTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 1, 1, 5), AtmTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvpTransmitTrafficDescrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvpTransmitTrafficDescrIndex.setDescription('The value of this object identifies in the ATM Traffic Descriptor Table which applies to the transmit direction of this Soft-PVP.')
mpAtmCCSoftPvpTargetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 1, 1, 6), AtmAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvpTargetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvpTargetAddress.setDescription('The target ATM Address of this Soft-PVP. If no address is supplied, no attempts to establish the Soft-PVP are initiated.')
mpAtmCCSoftPvpTargetVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvpTargetVpi.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvpTargetVpi.setDescription('The VPI value of the VCL used at the target interface.')
mpAtmCCSoftPvpLastReleaseCause = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvpLastReleaseCause.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvpLastReleaseCause.setDescription('Value of the Cause field of the Cause Information Element in the last RELEASE signalling message received for this Soft-PVP. Indicates the reason for the Release.')
mpAtmCCSoftPvpLastReleaseDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvpLastReleaseDiagnostic.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvpLastReleaseDiagnostic.setDescription('Value of the first 8 bytes of diagnostic information from the Cause field of the Cause Information Element in the last RELEASE signalling message received for this Soft-PVP.')
mpAtmCCSoftPvpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvpPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvpPriority.setDescription('Connection priority')
mpAtmCCSoftPvpCladType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 1, 1, 11), MpAtmCCCladType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvpCladType.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvpCladType.setDescription('CLAD Type')
mpAtmCCSoftPvpOriginalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 1, 1, 12), AtmAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvpOriginalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvpOriginalAddress.setDescription('The original ATM Address of this Soft-PVP. If no address is supplied, no attempts to establish the Soft-PVP are initiated.')
mpAtmCCSoftPvpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvpAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvpAdminStatus.setDescription('The value of this object identifies the desired administrative status of this Soft-PVP. The up and down states indicate that the traffic flow is enabled and disabled respectively on this Soft-PVP.')
mpAtmCCSoftPvpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvpOperStatus.setDescription('Soft-PVPOper StatusBup/down = Menable/disable')
mpAtmCCSoftPvpPgcRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvpPgcRequest.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvpPgcRequest.setDescription("Indicates whether this PVP was configureated from the PVC-Group-Cutover function. The value of '0' indicates that this PVP was normal. The value of '!=0' indicates that this PVP was configrated form PVC-Group-Cutover function. In this case, the value was indicated the PVC-Group Number")
mpAtmCCSoftPvpCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 1, 1, 98), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("cancel", 2), ("delete", 3), ("unknown", 4))).clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvpCfgStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvpCfgStatus.setDescription('Configuration setting start object. If this object is set the setting of the configuration is started.')
mpAtmCCSoftPvpErrInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 1, 1, 99), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvpErrInfo.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvpErrInfo.setDescription('Object that the configuration setting result is set up.')
mpAtmCCSoftPvcTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 2), )
if mibBuilder.loadTexts: mpAtmCCSoftPvcTable.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvcTable.setDescription('Soft-PVC(Calling) Table')
mpAtmCCSoftPvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 2, 1), ).setIndexNames((0, "MP-ATM-MIB", "mpAtmCCSoftPvcLeafReference"), (0, "MP-ATM-MIB", "mpAtmCCSoftPvcIfIndex"), (0, "MP-ATM-MIB", "mpAtmCCSoftPvcVpi"), (0, "MP-ATM-MIB", "mpAtmCCSoftPvcVci"))
if mibBuilder.loadTexts: mpAtmCCSoftPvcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvcEntry.setDescription('Soft-PVC(Calling) Entry')
mpAtmCCSoftPvcLeafReference = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: mpAtmCCSoftPvcLeafReference.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvcLeafReference.setDescription('A unique value to identify this Soft-PVC. The value is used only 1 (p2p).')
mpAtmCCSoftPvcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: mpAtmCCSoftPvcIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvcIfIndex.setDescription("The value of this object is equal to MIB II's ifIndex value of the ATM interface port for this Soft-PVC.")
mpAtmCCSoftPvcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 2, 1, 3), Integer32())
if mibBuilder.loadTexts: mpAtmCCSoftPvcVpi.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvcVpi.setDescription('The value of this object is equal to the VPI value at the ATM interface associated with the Soft-PVC that is identified by mpAtmCCSoftPvcIfIndex. The VPI value cannot exceed the number supported by the atmInterfaceMaxVpiBits at the ATM interface port.')
mpAtmCCSoftPvcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 2, 1, 4), Integer32())
if mibBuilder.loadTexts: mpAtmCCSoftPvcVci.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvcVci.setDescription('The value of this object is equal to the VCI value at the ATM interface associated with the Soft-PVC that is identified by mpAtmCCSoftPvcIfIndex. The VPI value cannot exceed the number supported by the atmInterfaceMaxVciBits at the ATM interface port.')
mpAtmCCSoftPvcReceiveTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 2, 1, 5), AtmTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvcReceiveTrafficDescrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvcReceiveTrafficDescrIndex.setDescription('The value of this object identifies in the ATM Traffic Descriptor Table which applies to the receive direction of this Soft-PVC.')
mpAtmCCSoftPvcTransmitTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 2, 1, 6), AtmTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvcTransmitTrafficDescrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvcTransmitTrafficDescrIndex.setDescription('The value of this object identifies in the ATM Traffic Descriptor Table which applies to the transmit direction of this Soft-PVC.')
mpAtmCCSoftPvcTargetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 2, 1, 7), AtmAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvcTargetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvcTargetAddress.setDescription('The target ATM Address of this Soft PVCC. If no address is supplied, no attempts to establish the Soft PVCC are initiated.')
mpAtmCCSoftPvcTargetVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvcTargetVpi.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvcTargetVpi.setDescription('The VPI value of the VCL used at the target interface.')
mpAtmCCSoftPvcTargetVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvcTargetVci.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvcTargetVci.setDescription('The VCI value of the VCL used at the target interface.')
mpAtmCCSoftPvcLastReleaseCause = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvcLastReleaseCause.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvcLastReleaseCause.setDescription('Value of the Cause field of the Cause Information Element in the last RELEASE signalling message received for this Soft PVCC. Indicates the reason for the Release.')
mpAtmCCSoftPvcLastReleaseDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvcLastReleaseDiagnostic.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvcLastReleaseDiagnostic.setDescription('Value of the first 8 bytes of diagnostic information from the Cause field of the Cause Information Element in the last RELEASE signalling message received for this Soft-PVC.')
mpAtmCCSoftPvcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvcPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvcPriority.setDescription('Connection priority')
mpAtmCCSoftPvcCladType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 2, 1, 13), MpAtmCCCladType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvcCladType.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvcCladType.setDescription('CLAD Type')
mpAtmCCSoftPvcOriginalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 2, 1, 14), AtmAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvcOriginalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvcOriginalAddress.setDescription('The origjnal ATM Address of this Soft PVCC. If no address is supplied, no attempts to establish the Soft PVCC are initiated.')
mpAtmCCSoftPvcAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvcAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvcAdminStatus.setDescription('The value of this object identifies the desired administrative status of this Soft-PVC. The up and down states indicate that the traffic flow is enabled and disabled respectively on this Soft-PVC.')
mpAtmCCSoftPvcOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvcOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvcOperStatus.setDescription('The value of this object identifies the desired operational status of this Soft-PVC.')
mpAtmCCSoftPvcPgcRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvcPgcRequest.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvcPgcRequest.setDescription("Indicates whether this PVP was configureated from the PVC-Group-Cutover function. The value of '0' indicates that this PVP was normal. The value of '!=0' indicates that this PVP was configrated form PVC-Group-Cutover function. In this case, the value was indicated the PVC-Group Number")
mpAtmCCSoftPvcCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 2, 1, 98), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("cancel", 2), ("delete", 3), ("unknown", 4))).clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvcCfgStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvcCfgStatus.setDescription('Configuration setting start object. If this object is set the setting of the configuration is started.')
mpAtmCCSoftPvcErrInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 2, 1, 99), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvcErrInfo.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvcErrInfo.setDescription('Object that the configuration setting result is set up.')
mpAtmCCSoftPvpCalledTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 3), )
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledTable.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledTable.setDescription('Soft-PVP(Called) Table')
mpAtmCCSoftPvpCalledEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 3, 1), ).setIndexNames((0, "MP-ATM-MIB", "mpAtmCCSoftPvpCalledLeafReference"), (0, "MP-ATM-MIB", "mpAtmCCSoftPvpCalledIfIndex"), (0, "MP-ATM-MIB", "mpAtmCCSoftPvpCalledVpi"))
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledEntry.setDescription('Soft-PVP(Called) Entry')
mpAtmCCSoftPvpCalledLeafReference = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledLeafReference.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledLeafReference.setDescription('A unique value to identify this Soft-PVP. The value is used only 1 (p2p).')
mpAtmCCSoftPvpCalledIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledIfIndex.setDescription("The value of this object is equal to MIB II's ifIndex value of the ATM interface port for this Soft-PVP.")
mpAtmCCSoftPvpCalledVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 3, 1, 3), Integer32())
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledVpi.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledVpi.setDescription('The value of this object is equal to the VPI value at the ATM interface associated with the Soft-PVP that is identified by mpAtmCCSoftPvpCalledIfIndex. The VPI value cannot exceed the number supported by the atmInterfaceMaxVpiBits at the ATM interface port.')
mpAtmCCSoftPvpCalledReceiveTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 3, 1, 4), AtmTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledReceiveTrafficDescrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledReceiveTrafficDescrIndex.setDescription('The value of this object identifies in the ATM Traffic Descriptor Table which applies to the receive direction of this Soft-PVP.')
mpAtmCCSoftPvpCalledTransmitTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 3, 1, 5), AtmTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledTransmitTrafficDescrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledTransmitTrafficDescrIndex.setDescription('The value of this object identifies in the ATM Traffic Descriptor Table which applies to the transmit direction of this Soft-PVP.')
mpAtmCCSoftPvpCalledTargetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 3, 1, 6), AtmAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledTargetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledTargetAddress.setDescription('The target ATM Address of this Soft-PVP. If no address is supplied, no attempts to establish the Soft-PVP are initiated.')
mpAtmCCSoftPvpCalledTargetVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledTargetVpi.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledTargetVpi.setDescription('The VPI value of the VCL used at the target interface.')
mpAtmCCSoftPvpCalledLastReleaseCause = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledLastReleaseCause.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledLastReleaseCause.setDescription('Value of the Cause field of the Cause Information Element in the last RELEASE signalling message received for this Soft-PVP. Indicates the reason for the Release.')
mpAtmCCSoftPvpCalledLastReleaseDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledLastReleaseDiagnostic.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledLastReleaseDiagnostic.setDescription('Value of the first 8 bytes of diagnostic information from the Cause field of the Cause Information Element in the last RELEASE signalling message received for this Soft-PVP.')
mpAtmCCSoftPvpCalledPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledPriority.setDescription('Connection priority')
mpAtmCCSoftPvpCalledCladType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 3, 1, 11), MpAtmCCCladType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledCladType.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledCladType.setDescription('CLAD Type')
mpAtmCCSoftPvpCalledOriginalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 3, 1, 12), AtmAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledOriginalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledOriginalAddress.setDescription('The original ATM Address of this Soft-PVP. If no address is supplied, no attempts to establish the Soft-PVP are initiated.')
mpAtmCCSoftPvpCalledAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledAdminStatus.setDescription('The value of this object identifies the desired administrative status of this Soft-PVP. The up and down states indicate that the traffic flow is enabled and disabled respectively on this Soft-PVP.')
mpAtmCCSoftPvpCalledOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledOperStatus.setDescription('The value of this object identifies the desired operational status of this Soft-PVP.')
mpAtmCCSoftPvpCalledPgcRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledPgcRequest.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledPgcRequest.setDescription("Indicates whether this PVP was configureated from the PVC-Group-Cutover function. The value of '0' indicates that this PVP was normal. The value of '!=0' indicates that this PVP was configrated form PVC-Group-Cutover function. In this case, the value was indicated the PVC-Group Number")
mpAtmCCSoftPvpCalledCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 3, 1, 98), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("cancel", 2), ("delete", 3), ("unknown", 4))).clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledCfgStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledCfgStatus.setDescription('Configuration setting start object. If this object is set the setting of the configuration is started.')
mpAtmCCSoftPvpCalledErrInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 3, 1, 99), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledErrInfo.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvpCalledErrInfo.setDescription('Object that the configuration setting result is set up.')
mpAtmCCSoftPvcCalledTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 4), )
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledTable.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledTable.setDescription('Soft-PVC(Called) Table')
mpAtmCCSoftPvcCalledEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 4, 1), ).setIndexNames((0, "MP-ATM-MIB", "mpAtmCCSoftPvcCalledLeafReference"), (0, "MP-ATM-MIB", "mpAtmCCSoftPvcCalledIfIndex"), (0, "MP-ATM-MIB", "mpAtmCCSoftPvcCalledVpi"), (0, "MP-ATM-MIB", "mpAtmCCSoftPvcCalledVci"))
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledEntry.setDescription('Soft-PVC(Called) Entry')
mpAtmCCSoftPvcCalledLeafReference = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledLeafReference.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledLeafReference.setDescription('A unique value to identify this Soft-PVC. The value is used only 1 (p2p).')
mpAtmCCSoftPvcCalledIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 4, 1, 2), Integer32())
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledIfIndex.setDescription("The value of this object is equal to MIB II's ifIndex value of the ATM interface port for this Soft-PVC.")
mpAtmCCSoftPvcCalledVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 4, 1, 3), Integer32())
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledVpi.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledVpi.setDescription('The value of this object is equal to the VPI value at the ATM interface associated with the Soft-PVC that is identified by mpAtmCCSoftPvcCalledIfIndex. The VPI value cannot exceed the number supported by the atmInterfaceMaxVpiBits at the ATM interface port.')
mpAtmCCSoftPvcCalledVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 4, 1, 4), Integer32())
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledVci.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledVci.setDescription('The value of this object is equal to the VCI value at the ATM interface associated with the Soft-PVC that is identified by mpAtmCCSoftPvcCalledIfIndex. The VPI value cannot exceed the number supported by the atmInterfaceMaxVciBits at the ATM interface port.')
mpAtmCCSoftPvcCalledReceiveTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 4, 1, 5), AtmTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledReceiveTrafficDescrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledReceiveTrafficDescrIndex.setDescription('The value of this object identifies in the ATM Traffic Descriptor Table which applies to the receive direction of this Soft-PVC.')
mpAtmCCSoftPvcCalledTransmitTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 4, 1, 6), AtmTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledTransmitTrafficDescrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledTransmitTrafficDescrIndex.setDescription('The value of this object identifies in the ATM Traffic Descriptor Table which applies to the transmit direction of this Soft-PVC.')
mpAtmCCSoftPvcCalledTargetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 4, 1, 7), AtmAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledTargetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledTargetAddress.setDescription('The target ATM Address of this Soft PVCC. If no address is supplied, no attempts to establish the Soft PVCC are initiated.')
mpAtmCCSoftPvcCalledTargetVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledTargetVpi.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledTargetVpi.setDescription('The VPI value of the VCL used at the target interface.')
mpAtmCCSoftPvcCalledTargetVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledTargetVci.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledTargetVci.setDescription('The VCI value of the VCL used at the target interface.')
mpAtmCCSoftPvcCalledLastReleaseCause = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledLastReleaseCause.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledLastReleaseCause.setDescription('Value of the Cause field of the Cause Information Element in the last RELEASE signalling message received for this Soft PVCC. Indicates the reason for the Release.')
mpAtmCCSoftPvcCalledLastReleaseDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 4, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledLastReleaseDiagnostic.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledLastReleaseDiagnostic.setDescription('Value of the first 8 bytes of diagnostic information from the Cause field of the Cause Information Element in the last RELEASE signalling message received for this Soft-PVC.')
mpAtmCCSoftPvcCalledPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledPriority.setDescription('Connection priority')
mpAtmCCSoftPvcCalledCladType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 4, 1, 13), MpAtmCCCladType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledCladType.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledCladType.setDescription('CLAD Type')
mpAtmCCSoftPvcCalledOriginalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 4, 1, 14), AtmAddr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledOriginalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledOriginalAddress.setDescription('The original ATM Address of this Soft PVCC. If no address is supplied, no attempts to establish the Soft PVCC are initiated.')
mpAtmCCSoftPvcCalledAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledAdminStatus.setDescription('The value of this object identifies the desired administrative status of this Soft-PVC. The up and down states indicate that the traffic flow is enabled and disabled respectively on this Soft-PVC.')
mpAtmCCSoftPvcCalledOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledOperStatus.setDescription('The value of this object identifies the desired operational status of this Soft-PVC.')
mpAtmCCSoftPvcCalledPgcRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledPgcRequest.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledPgcRequest.setDescription("Indicates whether this PVC was configureated from the PVC-Group-Cutover function. The value of '0' indicates that this PVC was normal. The value of '!=0' indicates that this PVC was configrated form PVC-Group-Cutover function. In this case, the value was indicated the PVC-Group Number")
mpAtmCCSoftPvcCalledCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 4, 1, 98), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("cancel", 2), ("delete", 3), ("unknown", 4))).clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledCfgStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledCfgStatus.setDescription('Configuration setting start object. If this object is set the setting of the configuration is started.')
mpAtmCCSoftPvcCalledErrInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 3, 4, 1, 99), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledErrInfo.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSoftPvcCalledErrInfo.setDescription('Object that the configuration setting result is set up.')
mpAtmCCStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4))
mpAtmCCVpStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 1), )
if mibBuilder.loadTexts: mpAtmCCVpStatisticsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVpStatisticsTable.setDescription(' Indicate traffic counter information per connection.')
mpAtmCCVpStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "MP-ATM-MIB", "mpAtmCCVpStatVpi"))
if mibBuilder.loadTexts: mpAtmCCVpStatisticsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVpStatisticsEntry.setDescription(' Entry of traffic per connection.')
mpAtmCCVpStatVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: mpAtmCCVpStatVpi.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVpStatVpi.setDescription('Indicate value for the specific VPI ')
mpAtmCCVpStatInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVpStatInCells.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVpStatInCells.setDescription(' The number of receive cells 64 bit counter')
mpAtmCCVpStatInCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVpStatInCellsCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVpStatInCellsCounters.setDescription(' The number of receive cells 32 bit counter')
mpAtmCCVpStatOutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVpStatOutCells.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVpStatOutCells.setDescription(' The number of transmit cells 64 bit counter')
mpAtmCCVpStatOutCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVpStatOutCellsCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVpStatOutCellsCounters.setDescription(' The number of transmit cells 32 bit counter')
mpAtmCCVpStatInDropCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVpStatInDropCells.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVpStatInDropCells.setDescription(' The number of receive drop cells 64 bit counter ')
mpAtmCCVpStatInDropCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVpStatInDropCellsCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVpStatInDropCellsCounters.setDescription(' The number of receive drop cells 32 bit counter')
mpAtmCCVcStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 2), )
if mibBuilder.loadTexts: mpAtmCCVcStatisticsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVcStatisticsTable.setDescription(' Indicate traffic counter information per connection.')
mpAtmCCVcStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "MP-ATM-MIB", "mpAtmCCVcStatVpi"), (0, "MP-ATM-MIB", "mpAtmCCVcStatVci"))
if mibBuilder.loadTexts: mpAtmCCVcStatisticsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVcStatisticsEntry.setDescription(' Entry of traffic per connection.')
mpAtmCCVcStatVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: mpAtmCCVcStatVpi.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVcStatVpi.setDescription('Indicate value for the specific VPI ')
mpAtmCCVcStatVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: mpAtmCCVcStatVci.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVcStatVci.setDescription('Indicate value for the specific VCI ')
mpAtmCCVcStatInCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVcStatInCells.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVcStatInCells.setDescription(' The number of receive cells 64 bit counter')
mpAtmCCVcStatInCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVcStatInCellsCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVcStatInCellsCounters.setDescription(' The number of receive cells 32 bit counter')
mpAtmCCVcStatOutCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVcStatOutCells.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVcStatOutCells.setDescription(' The number of transmit cells 64 bit counter')
mpAtmCCVcStatOutCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVcStatOutCellsCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVcStatOutCellsCounters.setDescription(' The number of transmit cells 32 bit counter')
mpAtmCCVcStatInDropCells = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVcStatInDropCells.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVcStatInDropCells.setDescription(' The number of receive drop cells 64 bit counter ')
mpAtmCCVcStatInDropCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVcStatInDropCellsCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVcStatInDropCellsCounters.setDescription(' The number of receive drop cells 32 bit counter')
mpAtmCCOuspStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 3), )
if mibBuilder.loadTexts: mpAtmCCOuspStatisticsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCOuspStatisticsTable.setDescription('Quality information by the unit of card. All entrys are detected by the OUS-P.')
mpAtmCCOuspStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 3, 1), ).setIndexNames((0, "MP-ATM-MIB", "mpAtmCCOuspStatIndex"))
if mibBuilder.loadTexts: mpAtmCCOuspStatisticsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCOuspStatisticsEntry.setDescription(' An entry of mpAtmCCOuspStatisticsTable.')
mpAtmCCOuspStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: mpAtmCCOuspStatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCOuspStatIndex.setDescription('The index value at this table. It consist of card number.')
mpAtmCCOuspStatRcvCrcErrCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCOuspStatRcvCrcErrCellsCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCOuspStatRcvCrcErrCellsCounters.setDescription('The number of OAM cells received by the port with CRC errors.')
mpAtmCCOuspStatSendOfifoFullCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCOuspStatSendOfifoFullCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCOuspStatSendOfifoFullCounters.setDescription('The number of cells discarded due to Out-FIFO overflow.')
mpAtmCCOuspStatRcvBufOverCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCOuspStatRcvBufOverCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCOuspStatRcvBufOverCounters.setDescription('The number of overflow cells at the reveive buffer.')
mpAtmCCOuspStatRcvUnknownCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCOuspStatRcvUnknownCellsCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCOuspStatRcvUnknownCellsCounters.setDescription('The number of cells received by the port with unknown cells.')
mpAtmCCOuspStatRcvInvalidCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCOuspStatRcvInvalidCellsCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCOuspStatRcvInvalidCellsCounters.setDescription('The number of cells received by the port with invalid cells.')
mpAtmCCOuspStatSendScheduleErrorCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCOuspStatSendScheduleErrorCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCOuspStatSendScheduleErrorCounters.setDescription('The number of transmission cells discaded due to fail the scheduling')
mpAtmCCOuspStatRcvScheduleErrorCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCOuspStatRcvScheduleErrorCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCOuspStatRcvScheduleErrorCounters.setDescription('The number of received cells discaded due to fail the scheduling')
mpAtmCCOuspStatSendInvalidCdvCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCOuspStatSendInvalidCdvCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCOuspStatSendInvalidCdvCounters.setDescription('The number of un-scheduling cells due to invalid CDV.')
mpAtmCCPhyStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 4), )
if mibBuilder.loadTexts: mpAtmCCPhyStatisticsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPhyStatisticsTable.setDescription('Quality information by the unit of port. All entrys are detected by the PHY. This table are supports for ATM CARDs NOTE:ATM CARD ATM-S155, ATM-M155, 2TRK-45, 2TRK6.3I, ATRK-1.5I, ATRK-192K, 2UNI-VMC, 4ATM-25')
mpAtmCCPhyStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: mpAtmCCPhyStatisticsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPhyStatisticsEntry.setDescription(' An entry of mpAtmCCPhyStatisticsTable.')
mpAtmCCPhyStatTmtCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPhyStatTmtCellsCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPhyStatTmtCellsCounters.setDescription('The number of cells transmitted regardless of error status.')
mpAtmCCPhyStatRcvCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPhyStatRcvCellsCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPhyStatRcvCellsCounters.setDescription('The number of cells received regardless of error status')
mpAtmCCPhyStatCorrectHecErrCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPhyStatCorrectHecErrCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPhyStatCorrectHecErrCounters.setDescription('The number of cells reveived by the port with correctable HEC error. NOTE: At the 4ATM-25 card, this object incudeing the mpAtmCCPhyUncountCorrectHecErrCounters.')
mpAtmCCPhyStatUncorrectHecErrCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPhyStatUncorrectHecErrCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPhyStatUncorrectHecErrCounters.setDescription('The number of cells reveived by the port with un-correctable HEC error. NOTE: At the 4ATM-25 card, this object is always ZERO.')
mpAtmCCPhyStatB1ErrCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPhyStatB1ErrCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPhyStatB1ErrCounters.setDescription('The number of cells with B1 error. NOTE: At the 4ATM-25 card, this object is always ZERO.')
mpAtmCCPhyStatB2ErrCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPhyStatB2ErrCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPhyStatB2ErrCounters.setDescription('The number of cells with B2 error. NOTE: This object is ATM-S155 and ATM-M155 only. Other cards are always ZERO.')
mpAtmCCPhyStatB3ErrCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPhyStatB3ErrCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPhyStatB3ErrCounters.setDescription('The number of cells with B3 error NOTE: This object is ATM-S155 and ATM-M155 only. Other cards are always ZERO.')
mpAtmCCPhyStatFebeCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPhyStatFebeCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPhyStatFebeCounters.setDescription('The number of cells with FEBE error. NOTE: At the 4ATM-25 card, this object is always ZERO.')
mpAtmCCPhyStatSymbolErrCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPhyStatSymbolErrCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPhyStatSymbolErrCounters.setDescription('The number of cells with symbol error. NOTE: This object is 4ATM-25 only. Other cards are always ZERO.')
mpAtmCCPhyStatParityErrCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPhyStatParityErrCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPhyStatParityErrCounters.setDescription('The number of cells with parity error. NOTE: At the 4ATM-25 card, this object is always ZERO.')
mpAtmCCPortAlarmStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5), )
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatisticsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatisticsTable.setDescription('Table of port alarm infomation.')
mpAtmCCPortAlarmStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatisticsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatisticsEntry.setDescription(' An entry of mpAtmCCPortAlarmStatisticsTable.')
mpAtmCCPortAlarmStatRedLosCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedLosCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedLosCounters.setDescription('Total number of LOS alarm detected by HW. NOTE: This object is ATM-S155, ATM-M155, 2ATM-45, 2UNI-VMC, 2TRK-6.3I, 4TRK-1.5I only. Other cards are always ZERO.')
mpAtmCCPortAlarmStatRedLofCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedLofCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedLofCounters.setDescription('Total number of LOF alarm detected by HW. NOTE: This object is ATM-S155, ATM-M155, 2TRK-6.3I, 4TRK-1.5I only. Other cards are always ZERO.')
mpAtmCCPortAlarmStatRedMsAisCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedMsAisCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedMsAisCounters.setDescription('Total number of MS-AIS alarm detected by HW. NOTE: This object is ATM-S155, ATM-M155 only. Other cards are always ZERO.')
mpAtmCCPortAlarmStatRedLopCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedLopCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedLopCounters.setDescription('Total number of LOP alarm detected by HW. NOTE: This object is ATM-S155, ATM-M155 only. Other cards are always ZERO.')
mpAtmCCPortAlarmStatRedPAisCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedPAisCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedPAisCounters.setDescription('Total number of P-AIS alarm detected by HW. NOTE: This object is ATM-S155, ATM-M155 only. Other cards are always ZERO.')
mpAtmCCPortAlarmStatRedLocCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedLocCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedLocCounters.setDescription('Total number of LOC alarm detected by HW. NOTE: This object is ATM-S155, ATM-M155 only. Other cards are always ZERO.')
mpAtmCCPortAlarmStatRedResetCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedResetCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedResetCounters.setDescription('Total number of Reset alarm detected by HW. NOTE: This object is ATM-S155, ATM-M155 only. Other cards are always ZERO.')
mpAtmCCPortAlarmStatRedCcRedCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedCcRedCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedCcRedCounters.setDescription('Total number of CC-RED alarm detected by HW. NOTE: This object is ATM CARDs only.')
mpAtmCCPortAlarmStatRedOofCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedOofCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedOofCounters.setDescription('Total number of OOF alarm detected by HW. NOTE: This object is 2ATM-45 only. Other cards are always ZERO.')
mpAtmCCPortAlarmStatRedAisCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedAisCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedAisCounters.setDescription('Total number of AIS alarm detected by HW. NOTE: This object is 2ATM-45, 2TRK-6.3I, 4TRK-1.5I only. Other cards are always ZERO.')
mpAtmCCPortAlarmStatRedPOofCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedPOofCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedPOofCounters.setDescription('Total number of P-OOF alarm detected by HW. NOTE: This object is 2ATM-45, 2TRK-6.3I, 4TRK-1.5I only. Other cards are always ZERO.')
mpAtmCCPortAlarmStatRedBadSigCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedBadSigCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedBadSigCounters.setDescription('Total number of Bad-sig alarm detected by HW. NOTE: This object is 4ATM-45 only. Other cards are always ZERO.')
mpAtmCCPortAlarmStatRedLcdCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedLcdCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedLcdCounters.setDescription('Total number of LCD alarm detected by HW. NOTE: This object is 2UNI-VMC, 2TRK-6.3I, 4TRK-1.5I, 2TRK-192K only. Other cards are always ZERO.')
mpAtmCCPortAlarmStatRedLinkAisCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedLinkAisCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedLinkAisCounters.setDescription('Total number of LINK-AIS alarm detected by HW. NOTE: This object is 2TRK-6.3I, 4TRK-1.5I, 2TRK-192K only. Other cards are always ZERO.')
mpAtmCCPortAlarmStatRedInfo0Counters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedInfo0Counters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatRedInfo0Counters.setDescription('Total number of INDO0 alarm detected by HW. NOTE: This object is 2TRK-192KI only. Other cards are always ZERO.')
mpAtmCCPortAlarmStatYelMsRdiCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatYelMsRdiCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatYelMsRdiCounters.setDescription('Total number of MS-RDI alarm detected by HW. NOTE: This object is ATM-S155, ATM-M155 only. Other cards are always ZERO.')
mpAtmCCPortAlarmStatYelPRdiCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatYelPRdiCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatYelPRdiCounters.setDescription('Total number of P-RDI alarm detected by HW. NOTE: This object is ATM-S155, ATM-M155 only. Other cards are always ZERO.')
mpAtmCCPortAlarmStatYelCcYelCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatYelCcYelCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatYelCcYelCounters.setDescription('Total number of CC-YEL alarm detected by HW. NOTE: This object is ATM CARDs only.')
mpAtmCCPortAlarmStatYelRaiCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatYelRaiCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatYelRaiCounters.setDescription('Total number of RAI alarm detected by HW. NOTE: This object is 2ATM-45, 2TRK-6.3I, 4TRK-1.5I only. Other cards are always ZERO.')
mpAtmCCPortAlarmStatYelPRaiCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatYelPRaiCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatYelPRaiCounters.setDescription('Total number of P-RAI alarm detected by HW. NOTE: This object is 2ATM-45 only. Other cards are always ZERO.')
mpAtmCCPortAlarmStatYelInfo2Counters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatYelInfo2Counters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortAlarmStatYelInfo2Counters.setDescription('Total number of INFO2 alarm detected by HW. NOTE: This object is 2TRK-192KI only. Other cards are always ZERO.')
mpAtmCCVpTunnellingStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 6), )
if mibBuilder.loadTexts: mpAtmCCVpTunnellingStatisticsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVpTunnellingStatisticsTable.setDescription('This table indicate traffic counter information per VP-tunnelling.')
mpAtmCCVpTunnellingStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: mpAtmCCVpTunnellingStatisticsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVpTunnellingStatisticsEntry.setDescription(' An entry of mpAtmCCVpTunnellingStatisticsTable.')
mpAtmCCVpTunStatTmtCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVpTunStatTmtCellsCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVpTunStatTmtCellsCounters.setDescription('The number of cells transmitted regardless of error status.')
mpAtmCCVpTunStatRcvCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVpTunStatRcvCellsCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVpTunStatRcvCellsCounters.setDescription('The number of cells received regardless of error status')
mpAtmCCVccStatisticsRegTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 7), )
if mibBuilder.loadTexts: mpAtmCCVccStatisticsRegTable.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVccStatisticsRegTable.setDescription(' Indicate traffic counter information per connection.')
mpAtmCCVccStatisticsRegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "MP-ATM-MIB", "mpAtmCCVccStatRegVpi"), (0, "MP-ATM-MIB", "mpAtmCCVccStatRegVci"))
if mibBuilder.loadTexts: mpAtmCCVccStatisticsRegEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVccStatisticsRegEntry.setDescription(' Entry of traffic per connection.')
mpAtmCCVccStatRegVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: mpAtmCCVccStatRegVpi.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVccStatRegVpi.setDescription('Indicate value for the specific VPI ')
mpAtmCCVccStatRegVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 7, 1, 2), Integer32())
if mibBuilder.loadTexts: mpAtmCCVccStatRegVci.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVccStatRegVci.setDescription('Indicate value for the specific VCI ')
mpAtmCCVccStatRegInCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVccStatRegInCellsCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVccStatRegInCellsCounters.setDescription(' The number of receive cells')
mpAtmCCVccStatRegOutCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVccStatRegOutCellsCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVccStatRegOutCellsCounters.setDescription(' The number of transmit cells')
mpAtmCCVccStatRegStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start", 1), ("stop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCVccStatRegStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVccStatRegStatus.setDescription("This variable indicates the registratoin status. - 'start', which indicates that start and collecting the taffic information. - 'stop', which indicates that stopn and delete the traffic information.")
mpAtmCCVccStatRegErrInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 4, 7, 1, 99), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVccStatRegErrInfo.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVccStatRegErrInfo.setDescription('Indicats the result of setting to the mpAtmCCVccStatRegStatus.')
mpAtmCCResourceControl = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5))
mpAtmCCPortResourceInfomationTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 1), )
if mibBuilder.loadTexts: mpAtmCCPortResourceInfomationTable.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortResourceInfomationTable.setDescription('This table indicate the resource infomation at the ATM port. NOTE: This table is supported the physical port only.')
mpAtmCCPortResourceInfomationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: mpAtmCCPortResourceInfomationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortResourceInfomationEntry.setDescription(' Entry of mpAtmCCPortResourceInfomationTable.')
mpAtmCCPortResInfoPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortResInfoPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortResInfoPortSpeed.setDescription("The port's bandwidth in bit per second at this ATM port.")
mpAtmCCPortResInfoMaxVpiBits = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortResInfoMaxVpiBits.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortResInfoMaxVpiBits.setDescription('The number of VPI bits at this ATM port.')
mpAtmCCPortResInfoMaxVciBits = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortResInfoMaxVciBits.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortResInfoMaxVciBits.setDescription('The number of VCI bits at this ATM port.')
mpAtmCCPortResInfoMaxVPC = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortResInfoMaxVPC.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortResInfoMaxVPC.setDescription('The maximum number of VPCs ( PVPs and SVPs ) supported at this port.')
mpAtmCCPortResInfoMaxVCC = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortResInfoMaxVCC.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortResInfoMaxVCC.setDescription('The maximum number of VCCs ( PVCs and SVCs ) supported at this port.')
mpAtmCCPortResInfoMaxSvpcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortResInfoMaxSvpcVpi.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortResInfoMaxSvpcVpi.setDescription('The maximum VPI that the signaling stack on the ATM interface is configured to support for allocation to switched virtual path connections.')
mpAtmCCPortResInfoMaxSvccVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortResInfoMaxSvccVpi.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortResInfoMaxSvccVpi.setDescription('The maximum VPI that the signaling stack on the ATM interface is configured to support for allocation to switched virtual channel connections.')
mpAtmCCPortResInfoMinSvccVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortResInfoMinSvccVci.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortResInfoMinSvccVci.setDescription('The minimum VPI that the signalling stack is configured to support for allocation to switched virtual channel connections.')
mpAtmCCPortResInfoShaperKind = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("vp", 2), ("vc", 3), ("vpAndVc", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortResInfoShaperKind.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortResInfoShaperKind.setDescription('The kind of shaper at this port.')
mpAtmCCPortResInfoVpTunnellingConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notConfigured", 1), ("configured", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortResInfoVpTunnellingConfig.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortResInfoVpTunnellingConfig.setDescription('Indicates whether the vp-tunnelling is configered at this port.')
mpAtmCCPortResInfoSvccVciHuntWay = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low2high", 1), ("high2low", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortResInfoSvccVciHuntWay.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortResInfoSvccVciHuntWay.setDescription('This value indicates the way of VCI use at the SVCs. The value low2high indicates that hunt the lowest not-used VCI when received the SETUP message. The value low2high indicates that hunt the highest not-used VCI when received the SETUP message.')
mpAtmCCPortResInfoVpiCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortResInfoVpiCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortResInfoVpiCounters.setDescription('The number of using VPIs at this port.')
mpAtmCCPortResInfoVpcCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortResInfoVpcCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortResInfoVpcCounters.setDescription('The number of VPCs ( PVPs and SVPs ) established at this port.')
mpAtmCCPortResInfoVccCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortResInfoVccCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortResInfoVccCounters.setDescription('The number of VCCs ( PVCs and SVCs ) established at this port.')
mpAtmCCPortBandwidthInfomationTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 2), )
if mibBuilder.loadTexts: mpAtmCCPortBandwidthInfomationTable.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortBandwidthInfomationTable.setDescription('This table indicate that infom the bandwidth at the ATM port.')
mpAtmCCPortBandwidthInfomationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "MP-ATM-MIB", "mpAtmCCPortBwInfoVpi"))
if mibBuilder.loadTexts: mpAtmCCPortBandwidthInfomationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortBandwidthInfomationEntry.setDescription(' Entry of mpAtmCCPortBandwidthInfomationTable.')
mpAtmCCPortBwInfoVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: mpAtmCCPortBwInfoVpi.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortBwInfoVpi.setDescription('A index value at this table.')
mpAtmCCPortBwInfoRawBandwidthBps = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortBwInfoRawBandwidthBps.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortBwInfoRawBandwidthBps.setDescription('Adminsitratively desired bandwidth size in kilo bit per second for this ATM port.')
mpAtmCCPortBwInfoRawBandwidthCps = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortBwInfoRawBandwidthCps.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortBwInfoRawBandwidthCps.setDescription('Adminsitratively desired bandwidth size in cell per second for this ATM port.')
mpAtmCCPortBwInfoTmitUsedBwCps = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortBwInfoTmitUsedBwCps.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortBwInfoTmitUsedBwCps.setDescription('The current using transmission bandwidth value ( total of assigned bandwidth for each connections ) in cell per second for this ATM port.')
mpAtmCCPortBwInfoRcvUsedBwCps = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortBwInfoRcvUsedBwCps.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortBwInfoRcvUsedBwCps.setDescription('The current using receved bandwidth value ( total of assigned bandwidth for each connections ) in cell per second for this ATM port.')
mpAtmCCPortBwInfoVciCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPortBwInfoVciCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPortBwInfoVciCounters.setDescription('The number of using VCIs at this port.')
mpAtmCCBwInfoPortTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 3), )
if mibBuilder.loadTexts: mpAtmCCBwInfoPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCBwInfoPortTable.setDescription('This table indicate the resource infomation at the ATM port and vp-tunneling port')
mpAtmCCBwInfoPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: mpAtmCCBwInfoPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCBwInfoPortEntry.setDescription(' Entry of mpAtmCCBwInfoPortTable.')
mpAtmCCBwInfoPortRawBandwidthBps = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCBwInfoPortRawBandwidthBps.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCBwInfoPortRawBandwidthBps.setDescription('Adminsitratively desired bandwidth size in kilo bit per second for this ATM port.')
mpAtmCCBwInfoPortRawBandwidthCps = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCBwInfoPortRawBandwidthCps.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCBwInfoPortRawBandwidthCps.setDescription('Adminsitratively desired bandwidth size in cell per second for this ATM port.')
mpAtmCCBwInfoPortTmitUsedBwCps = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCBwInfoPortTmitUsedBwCps.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCBwInfoPortTmitUsedBwCps.setDescription('The current using transmission bandwidth value ( total of assigned bandwidth for each connections ) in cell per second for this ATM port.')
mpAtmCCBwInfoPortRcvUsedBwCps = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCBwInfoPortRcvUsedBwCps.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCBwInfoPortRcvUsedBwCps.setDescription('The current using receved bandwidth value ( total of assigned bandwidth for each connections ) in cell per second for this ATM port.')
mpAtmCCBwInfoPortTmitRemainBwCps = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCBwInfoPortTmitRemainBwCps.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCBwInfoPortTmitRemainBwCps.setDescription('The current remaining transmission bandwidth value ( total of assigned bandwidth for each connections ) in cell per second for this ATM port.')
mpAtmCCBwInfoPortRcvRemainBwCps = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCBwInfoPortRcvRemainBwCps.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCBwInfoPortRcvRemainBwCps.setDescription('The current remaining receved bandwidth value ( total of assigned bandwidth for each connections ) in cell per second for this ATM port.')
mpAtmCCBwInfoPortVpTunneling = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCBwInfoPortVpTunneling.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCBwInfoPortVpTunneling.setDescription('VP-Tunneling indication. 1:VP-Tunneling 2:Not VP-Tunneling')
mpAtmCCProtocol = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6))
mpAtmCCSscopTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 1), )
if mibBuilder.loadTexts: mpAtmCCSscopTable.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSscopTable.setDescription('SSCOP parameter Table')
mpAtmCCSscopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: mpAtmCCSscopEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSscopEntry.setDescription('Entry of mpATMCCSscopTable.')
mpAtmCCSscopTimerPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 1, 1, 1), Integer32().clone(750)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSscopTimerPoll.setReference('ATM Forum User-Network Interface Specification, Version 3.1')
if mibBuilder.loadTexts: mpAtmCCSscopTimerPoll.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSscopTimerPoll.setDescription('Expert variable: timer in milliseconds (default is 750 msecs for Uni 3.1).')
mpAtmCCSscopTimerNoResponce = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 1, 1, 2), Integer32().clone(7000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSscopTimerNoResponce.setReference('ATM Forum User-Network Interface Specification, Version 3.1')
if mibBuilder.loadTexts: mpAtmCCSscopTimerNoResponce.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSscopTimerNoResponce.setDescription('Expert variable: timer in milliseconds (default is 7000 msecs for Uni 3.1).')
mpAtmCCSscopTimerKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 1, 1, 3), Integer32().clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSscopTimerKeepAlive.setReference('ATM Forum User-Network Interface Specification, Version 3.1')
if mibBuilder.loadTexts: mpAtmCCSscopTimerKeepAlive.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSscopTimerKeepAlive.setDescription('Expert variable: timer in milliseconds (default is 2000 msecs for Uni 3.1).')
mpAtmCCSscopTimerIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 1, 1, 4), Integer32().clone(15000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSscopTimerIdle.setReference('ATM Forum User-Network Interface Specification, Version 3.1')
if mibBuilder.loadTexts: mpAtmCCSscopTimerIdle.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSscopTimerIdle.setDescription('Expert variable: timer in milliseconds (default is 1500 msecs for Uni 3.1).')
mpAtmCCSscopTimerCc = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 1, 1, 5), Integer32().clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSscopTimerCc.setReference('ATM Forum User-Network Interface Specification, Version 3.1')
if mibBuilder.loadTexts: mpAtmCCSscopTimerCc.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSscopTimerCc.setDescription('Expert variable: timer in milliseconds (default is 1000 msecs for Uni 3.1).')
mpAtmCCSscopMaxCc = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 1, 1, 6), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSscopMaxCc.setReference('ATM Forum User-Network Interface Specification, Version 3.1')
if mibBuilder.loadTexts: mpAtmCCSscopMaxCc.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSscopMaxCc.setDescription('Expert variable (default is 4 for Uni 3.1).')
mpAtmCCSscopMaxPd = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 1, 1, 7), Integer32().clone(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSscopMaxPd.setReference('ATM Forum User-Network Interface Specification, Version 3.1')
if mibBuilder.loadTexts: mpAtmCCSscopMaxPd.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSscopMaxPd.setDescription('Expert variable (default is 25 for Uni 3.1).')
mpAtmCCSscopMaxStat = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 1, 1, 8), Integer32().clone(67)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSscopMaxStat.setReference('ATM Forum User-Network Interface Specification, Version 3.1')
if mibBuilder.loadTexts: mpAtmCCSscopMaxStat.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSscopMaxStat.setDescription('Expert variable (default is 67 for Uni 3.1).')
mpAtmCCSscopClearBuffs = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSscopClearBuffs.setReference('ATM Forum User-Network Interface Specification, Version 3.1')
if mibBuilder.loadTexts: mpAtmCCSscopClearBuffs.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSscopClearBuffs.setDescription('Expert variable.')
mpAtmCCSscopCredit = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCSscopCredit.setReference('ATM Forum User-Network Interface Specification, Version 3.1')
if mibBuilder.loadTexts: mpAtmCCSscopCredit.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSscopCredit.setDescription('Expert variable.')
mpAtmCCIlmiTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 2), )
if mibBuilder.loadTexts: mpAtmCCIlmiTable.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCIlmiTable.setDescription('ILMI parameter Table')
mpAtmCCIlmiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: mpAtmCCIlmiEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCIlmiEntry.setDescription('Entry of mpATMCCIlmiTable.')
mpAtmCCIlmiConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCIlmiConfigStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCIlmiConfigStatus.setDescription('Indicates whether ilmi is currently enabled at this interface.')
mpAtmCClmiMaxTransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 2, 1, 2), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCClmiMaxTransmissions.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCClmiMaxTransmissions.setDescription('In a situation where a request is not receiving a response within mpAtmCCLimiRetransmitInterval, the number of consecutive transmissions/non-responses that will cause the UME to declare a loss of ILMI connectivity This variable is intended to promote interoperability, so no range restriction is given.')
mpAtmCCIlmiRetransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 2, 1, 3), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCIlmiRetransmitInterval.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCIlmiRetransmitInterval.setDescription('The time in seconds between retransmissions of ILMI requests This variable is intended to promote interoperability, so no range restriction is given.')
mpAtmCCSignallingTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 3), )
if mibBuilder.loadTexts: mpAtmCCSignallingTable.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSignallingTable.setDescription('ILMI parameter Table')
mpAtmCCSignallingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: mpAtmCCSignallingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSignallingEntry.setDescription('Entry of mpATMCCSignallingTable.')
mpAtmCCSignallingT301 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 3, 1, 1), Integer32().clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSignallingT301.setReference('ATM Forum User-Network Interface Specification, Version 3.1')
if mibBuilder.loadTexts: mpAtmCCSignallingT301.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSignallingT301.setDescription('Expert variable: timer in seconds')
mpAtmCCSignallingT303 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 3, 1, 2), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSignallingT303.setReference('ATM Forum User-Network Interface Specification, Version 3.1')
if mibBuilder.loadTexts: mpAtmCCSignallingT303.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSignallingT303.setDescription('Expert variable: timer in seconds')
mpAtmCCSignallingT308 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 3, 1, 3), Integer32().clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSignallingT308.setReference('ATM Forum User-Network Interface Specification, Version 3.1')
if mibBuilder.loadTexts: mpAtmCCSignallingT308.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSignallingT308.setDescription('Expert variable: timer in seconds')
mpAtmCCSignallingT309 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 3, 1, 4), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSignallingT309.setReference('ATM Forum User-Network Interface Specification, Version 3.1')
if mibBuilder.loadTexts: mpAtmCCSignallingT309.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSignallingT309.setDescription('Expert variable: timer in seconds')
mpAtmCCSignallingT310 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 3, 1, 5), Integer32().clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSignallingT310.setReference('ATM Forum User-Network Interface Specification, Version 3.1')
if mibBuilder.loadTexts: mpAtmCCSignallingT310.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSignallingT310.setDescription('Expert variable: timer in seconds')
mpAtmCCSignallingT313 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 3, 1, 6), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSignallingT313.setReference('ATM Forum User-Network Interface Specification, Version 3.1')
if mibBuilder.loadTexts: mpAtmCCSignallingT313.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSignallingT313.setDescription('Expert variable: timer in seconds')
mpAtmCCSignallingT316 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 3, 1, 7), Integer32().clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSignallingT316.setReference('ATM Forum User-Network Interface Specification, Version 3.1')
if mibBuilder.loadTexts: mpAtmCCSignallingT316.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSignallingT316.setDescription('Expert variable: timer in seconds')
mpAtmCCSignallingT317 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 3, 1, 8), Integer32().clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSignallingT317.setReference('ATM Forum User-Network Interface Specification, Version 3.1')
if mibBuilder.loadTexts: mpAtmCCSignallingT317.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSignallingT317.setDescription('Expert variable: timer in seconds')
mpAtmCCSignallingT322 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 3, 1, 9), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSignallingT322.setReference('ATM Forum User-Network Interface Specification, Version 3.1')
if mibBuilder.loadTexts: mpAtmCCSignallingT322.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSignallingT322.setDescription('Expert variable: timer in seconds')
mpAtmCCSignallingT331 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 3, 1, 10), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSignallingT331.setReference('ATM Forum User-Network Interface Specification, Version 3.1')
if mibBuilder.loadTexts: mpAtmCCSignallingT331.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSignallingT331.setDescription('Expert variable: timer in seconds')
mpAtmCCSignallingT397 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 3, 1, 11), Integer32().clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSignallingT397.setReference('ATM Forum User-Network Interface Specification, Version 3.1')
if mibBuilder.loadTexts: mpAtmCCSignallingT397.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSignallingT397.setDescription('Expert variable: timer in seconds')
mpAtmCCSignallingT398 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 3, 1, 12), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSignallingT398.setReference('ATM Forum User-Network Interface Specification, Version 3.1')
if mibBuilder.loadTexts: mpAtmCCSignallingT398.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSignallingT398.setDescription('Expert variable: timer in seconds')
mpAtmCCSignallingT399 = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 3, 1, 13), Integer32().clone(34)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCSignallingT399.setReference('ATM Forum User-Network Interface Specification, Version 3.1')
if mibBuilder.loadTexts: mpAtmCCSignallingT399.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCSignallingT399.setDescription('Expert variable: timer in seconds')
mpAtmCCProtocolTrapInfoTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 4), )
if mibBuilder.loadTexts: mpAtmCCProtocolTrapInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCProtocolTrapInfoTable.setDescription('ATM Protocol Control Trap Infomation tabale')
mpAtmCCProtocolTrapInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 4, 1), ).setIndexNames((0, "MP-ATM-MIB", "mpAtmCCProtocolTrapInfoIndex"))
if mibBuilder.loadTexts: mpAtmCCProtocolTrapInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCProtocolTrapInfoEntry.setDescription('Entry of mpATMCCProtocolTrapInfoTable.')
mpAtmCCProtocolTrapInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCProtocolTrapInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCProtocolTrapInfoIndex.setDescription('The index value at this table')
mpAtmCCProtocolTrapInfoCause = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 6, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCProtocolTrapInfoCause.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCProtocolTrapInfoCause.setDescription('Indicates why this trap send ')
mpAtmCCPathTrace = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7))
mpAtmCCVccStatusTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 1), )
if mibBuilder.loadTexts: mpAtmCCVccStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVccStatusTable.setDescription('This table indicate the vcc status infomation at the ATM port.')
mpAtmCCVccStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 1, 1), ).setIndexNames((0, "MP-ATM-MIB", "mpAtmCCVccStatusOrgPort"), (0, "MP-ATM-MIB", "mpAtmCCVccStatusOrgVpi"), (0, "MP-ATM-MIB", "mpAtmCCVccStatusOrgVci"))
if mibBuilder.loadTexts: mpAtmCCVccStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVccStatusEntry.setDescription(' Entry of mpAtmCCVccStatusTable.')
mpAtmCCVccStatusOrgPort = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: mpAtmCCVccStatusOrgPort.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVccStatusOrgPort.setDescription('Specified PORT number.')
mpAtmCCVccStatusOrgVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: mpAtmCCVccStatusOrgVpi.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVccStatusOrgVpi.setDescription('Specified VPI number.')
mpAtmCCVccStatusOrgVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 1, 1, 3), Integer32())
if mibBuilder.loadTexts: mpAtmCCVccStatusOrgVci.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVccStatusOrgVci.setDescription('Specified VCI number.')
mpAtmCCVccStatusDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVccStatusDestPort.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVccStatusDestPort.setDescription('Destination PORT number.')
mpAtmCCVccStatusDestVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVccStatusDestVpi.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVccStatusDestVpi.setDescription('Destination VPI number.')
mpAtmCCVccStatusDestVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVccStatusDestVci.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVccStatusDestVci.setDescription('Destination VCI number.')
mpAtmCCVccStatusPathKind = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pvc", 1), ("softpvc", 2), ("insPvc", 3), ("pvp", 4), ("softpvp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVccStatusPathKind.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVccStatusPathKind.setDescription('Path classification.')
mpAtmCCVccStatusOrgCallKind = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("calling", 1), ("outgoing", 2), ("incoming", 3), ("called", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVccStatusOrgCallKind.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVccStatusOrgCallKind.setDescription('Port classification for specified an edge point.')
mpAtmCCVccStatusDestCallKind = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("calling", 1), ("outgoing", 2), ("incoming", 3), ("called", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVccStatusDestCallKind.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVccStatusDestCallKind.setDescription('Port classification for destination an edge point.')
mpAtmCCVccStatusAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVccStatusAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVccStatusAdminStatus.setDescription('Control status.')
mpAtmCCVccStatusOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVccStatusOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVccStatusOperStatus.setDescription('Connection status.')
mpAtmCCVccStatusInsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trunkPort", 1), ("insPort", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVccStatusInsStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVccStatusInsStatus.setDescription('INS detour indication.')
mpAtmCCVccStatusOrgPortVpTunneling = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVccStatusOrgPortVpTunneling.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVccStatusOrgPortVpTunneling.setDescription('Original port VP-Tunneling indication. 1:VP-Tunneling 2:Not VP-Tunneling')
mpAtmCCVccStatusDestPortVpTunneling = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVccStatusDestPortVpTunneling.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVccStatusDestPortVpTunneling.setDescription('Destination port VP-Tunneling indication. 1:VP-Tunneling 2:Not VP-Tunneling')
mpAtmCCVccStatusConnCastType = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("p2p", 1), ("p2mpRoot", 2), ("p2mpLeaf", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVccStatusConnCastType.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVccStatusConnCastType.setDescription('The type of topology of a connection (point- to-point, point-to-multipoint).')
mpAtmCCPvcTraceControlTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 2), )
if mibBuilder.loadTexts: mpAtmCCPvcTraceControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPvcTraceControlTable.setDescription('This is the table type object of the PVC PathTrace registration.')
mpAtmCCPvcTraceCtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 2, 1), ).setIndexNames((0, "MP-ATM-MIB", "mpAtmCCPvcTraceIndex"))
if mibBuilder.loadTexts: mpAtmCCPvcTraceCtlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPvcTraceCtlEntry.setDescription(' Entry of mpAtmCCPvcTraceInfoTable.')
mpAtmCCPvcTraceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPvcTraceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPvcTraceIndex.setDescription('The value of this object identifies the PVC PathTrace collection number.')
mpAtmCCPvcTraceCtlPathKind = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vcc", 1), ("vpc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCPvcTraceCtlPathKind.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPvcTraceCtlPathKind.setDescription('The value of this object identifies the path kind.')
mpAtmCCPvcTraceCtlIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCPvcTraceCtlIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPvcTraceCtlIfIndex.setDescription('The value of this object identifies the interface number.')
mpAtmCCPvcTraceCtlVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCPvcTraceCtlVpi.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPvcTraceCtlVpi.setDescription('The value of this object identifies the VPI number.')
mpAtmCCPvcTraceCtlVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCPvcTraceCtlVci.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPvcTraceCtlVci.setDescription('The value of this object identifies the VCI number.')
mpAtmCCPvcTraceCtlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("idle", 1), ("start", 2), ("collecting", 3), ("done", 4), ("cancel", 5), ("unknown", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCPvcTraceCtlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPvcTraceCtlStatus.setDescription('The value of this object identifies the PVC PathTrace condition.')
mpAtmCCPvcTraceInfoTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 3), )
if mibBuilder.loadTexts: mpAtmCCPvcTraceInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPvcTraceInfoTable.setDescription('This is the table type object of the PVC PathTrace information.')
mpAtmCCPvcTraceInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 3, 1), ).setIndexNames((0, "MP-ATM-MIB", "mpAtmCCPvcTraceIndex"), (0, "MP-ATM-MIB", "mpAtmCCPvcTraceEntryIndex"))
if mibBuilder.loadTexts: mpAtmCCPvcTraceInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPvcTraceInfoEntry.setDescription(' Entry of mpAtmCCPvcTraceInfoTable.')
mpAtmCCPvcTraceEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: mpAtmCCPvcTraceEntryIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPvcTraceEntryIndex.setDescription('The value of this object identifies the inside index of PVC PathTrace information.')
mpAtmCCPvcTraceInfoSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPvcTraceInfoSysName.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPvcTraceInfoSysName.setDescription('The value of this object identifies the node name.')
mpAtmCCPvcTraceInfoIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPvcTraceInfoIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPvcTraceInfoIfIndex.setDescription('The value of this object identifies the interface number.')
mpAtmCCPvcTraceInfoVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPvcTraceInfoVpi.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPvcTraceInfoVpi.setDescription('The value of this object identifies the VPI number.')
mpAtmCCPvcTraceInfoVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPvcTraceInfoVci.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPvcTraceInfoVci.setDescription('The value of this object identifies the VCI number.')
mpAtmCCPvcTraceInfoPathKind = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("pvc", 1), ("softpvc", 2), ("inspvc", 3), ("pvp", 4), ("softpvp", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPvcTraceInfoPathKind.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPvcTraceInfoPathKind.setDescription('The value of this object identifies the path kind.')
mpAtmCCPvcTraceInfoCallKind = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("calling", 1), ("outgoing", 2), ("incoming", 3), ("called", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPvcTraceInfoCallKind.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPvcTraceInfoCallKind.setDescription('The value of this object identifies the connection type.')
mpAtmCCPvcTraceInfoLastSegment = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 7, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notlast", 1), ("last", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPvcTraceInfoLastSegment.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPvcTraceInfoLastSegment.setDescription('The value of this object identifies the last segment.')
mpAtmCCMuxMib = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 8))
mpAtmCCMuxStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 8, 1))
mpAtmCCMuxStatReceiveCellsCounters = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCMuxStatReceiveCellsCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCMuxStatReceiveCellsCounters.setDescription('Counter of MUX receive cells.')
mpAtmCCMuxStatReceiveCellsCntOvfCounters = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCMuxStatReceiveCellsCntOvfCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCMuxStatReceiveCellsCntOvfCounters.setDescription('Overflow counter of MUX receive cells counter.')
mpAtmCCMuxStatDiscardCellsBufOvfCounters = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCMuxStatDiscardCellsBufOvfCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCMuxStatDiscardCellsBufOvfCounters.setDescription('Discard cell counter on buffer overflow.')
mpAtmCCMuxStatDiscardCellsBufOvfCntOvfCounters = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCMuxStatDiscardCellsBufOvfCntOvfCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCMuxStatDiscardCellsBufOvfCntOvfCounters.setDescription('Overflow counter of discard cell counter on buffer overflow.')
mpAtmCCMuxStatDiscardCellsHTErrCounters = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCMuxStatDiscardCellsHTErrCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCMuxStatDiscardCellsHTErrCounters.setDescription('Discard cell counter on header transration error.')
mpAtmCCMuxStatDiscardCellsHTErrCntOvfCounters = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCMuxStatDiscardCellsHTErrCntOvfCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCMuxStatDiscardCellsHTErrCntOvfCounters.setDescription('Overflow counter of discard cell counter on header transration error.')
mpAtmCCMuxStatDiscardCellsThresholdOvfCounters = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCMuxStatDiscardCellsThresholdOvfCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCMuxStatDiscardCellsThresholdOvfCounters.setDescription('Discard cell counter on threshold overflow.')
mpAtmCCMuxStatDiscardCellsThresholdOvfCntOvfCounters = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCMuxStatDiscardCellsThresholdOvfCntOvfCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCMuxStatDiscardCellsThresholdOvfCntOvfCounters.setDescription('Overflow counter of discard cell counter on threshold overflow.')
mpAtmCCVpTunneling = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 9))
mpAtmCCVpTunnelingTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 9, 1), )
if mibBuilder.loadTexts: mpAtmCCVpTunnelingTable.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVpTunnelingTable.setDescription('VP-Tunneling parameter Table')
mpAtmCCVpTunnelingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 9, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "MP-ATM-MIB", "mpAtmCCVpTunnelingVpi"))
if mibBuilder.loadTexts: mpAtmCCVpTunnelingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVpTunnelingEntry.setDescription(' Entry of mpAtmCCVpTunnelingTable.')
mpAtmCCVpTunnelingVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 9, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: mpAtmCCVpTunnelingVpi.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVpTunnelingVpi.setDescription('Specified VPI number.')
mpAtmCCVpTunnelingAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCVpTunnelingAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVpTunnelingAdminStatus.setDescription('Control status.')
mpAtmCCVpTunnelingOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVpTunnelingOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVpTunnelingOperStatus.setDescription('Connection status.')
mpAtmCCVpTunnelingSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVpTunnelingSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVpTunnelingSpeed.setDescription('VP bandwidth(kbps).')
mpAtmCCVpTunnelingNeighborInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 9, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVpTunnelingNeighborInfo.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVpTunnelingNeighborInfo.setDescription('Neighbor Info(ifIndex).')
mpAtmCCVpTunnelingPnniVer = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 9, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVpTunnelingPnniVer.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVpTunnelingPnniVer.setDescription('PNNI Signaling version.')
mpAtmCCVpTunnelingContinuityCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVpTunnelingContinuityCheck.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVpTunnelingContinuityCheck.setDescription('Continuity Check.')
mpAtmCCVpTunnelingTrapState = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVpTunnelingTrapState.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVpTunnelingTrapState.setDescription('Trap State.')
mpAtmCCVpTunnelingSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 9, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("warning", 4), ("informational", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVpTunnelingSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVpTunnelingSeverity.setDescription('Severity.')
mpAtmCCVpTunnelingCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 9, 1, 1, 98), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("cancel", 2), ("delete", 3), ("unknown", 4))).clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCVpTunnelingCfgStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVpTunnelingCfgStatus.setDescription('Configuration setting start object. If this object is set the setting of the configuration is started.')
mpAtmCCVpTunnelingErrInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 9, 1, 1, 99), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCVpTunnelingErrInfo.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCVpTunnelingErrInfo.setDescription('Object that the configuration setting result is set up.')
mpAtmCCPathTest = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 10))
mpAtmCCPathTestTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 10, 1), )
if mibBuilder.loadTexts: mpAtmCCPathTestTable.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPathTestTable.setDescription('This Table is control for the PATH TEST(F5 OAM CELL) function')
mpAtmCCPathTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 10, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "MP-ATM-MIB", "mpAtmCCPathTestVpi"), (0, "MP-ATM-MIB", "mpAtmCCPathTestVci"))
if mibBuilder.loadTexts: mpAtmCCPathTestEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPathTestEntry.setDescription(' Entry of mpAtmCCPathTestTable.')
mpAtmCCPathTestVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPathTestVpi.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPathTestVpi.setDescription('Index value for the specific VPI')
mpAtmCCPathTestVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 10, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPathTestVci.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPathTestVci.setDescription('Index value for the specific VCI')
mpAtmCCPathTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("testReq", 1), ("sendStart", 2), ("sendStop", 3), ("loopSet", 4), ("loopRelease", 5), ("delete", 6), ("unknown", 7))).clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCPathTestStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPathTestStatus.setDescription('The value of this object identifies the desired status of this table.')
mpAtmCCPathTestSendDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port", 1), ("mux", 2))).clone('port')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCPathTestSendDirection.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPathTestSendDirection.setDescription('Indicate the direction which send the F5 OAM cells.')
mpAtmCCPathTestSendTime = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 68400)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCPathTestSendTime.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPathTestSendTime.setDescription('The amount of time this path will send the F5 OAM cells.')
mpAtmCCPathTestSendCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 10, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPathTestSendCellsCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPathTestSendCellsCounters.setDescription('A amount of the number of F5 OAM cells sending.')
mpAtmCCPathTestRcvCellsCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 10, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPathTestRcvCellsCounters.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPathTestRcvCellsCounters.setDescription('A aomut of the number of F5 OAN cells received.')
mpAtmCCPathTestErrInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 10, 1, 1, 99), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPathTestErrInfo.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPathTestErrInfo.setDescription('A additonal infomation for the error-response.')
mpAtmCCPvcGroupCutover = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11))
mpAtmCCPvcGroupCutoverBaseInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 1))
mpAtmCCPvcGroupCutoverEnable = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ture", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPvcGroupCutoverEnable.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPvcGroupCutoverEnable.setDescription("Specifies whether the node is currently operating the PVC-Group-CutOver functions. If the value is 'false', then it can not support the PVC-Group-CutOver service. This attribute reflects the node configration data in the PVC-Group-CutOver Service Request State and functiins condition. It can change only Command Line Interface(CLI). (Node reboot is indispensable chage to the PVC-Group-CutOver Service Request Status )")
mpAtmCCPvcGroupCutoverStatus = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("null", 1), ("underAvtivate", 2), ("underDeactivate", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPvcGroupCutoverStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPvcGroupCutoverStatus.setDescription('The current status of PVC-Group-Cutover function status.')
mpAtmCCUnitePvcGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 2))
mpAtmCCUpgcBaseInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 2, 1))
mpAtmCCUpgcTotalGroupNumber = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCUpgcTotalGroupNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCUpgcTotalGroupNumber.setDescription('The total number of registerd to Unite Pvc Group in this node.')
mpAtmCCUpgcBaseActiveGroupNumber = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCUpgcBaseActiveGroupNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCUpgcBaseActiveGroupNumber.setDescription('The number of active Unite Pvc Group.')
mpAtmCCUnitePvcGroupControlTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 2, 2), )
if mibBuilder.loadTexts: mpAtmCCUnitePvcGroupControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCUnitePvcGroupControlTable.setDescription('This table contains the control of the Unite Pvc Group objects')
mpAtmCCUpgcCtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 2, 2, 1), ).setIndexNames((0, "MP-ATM-MIB", "mpAtmCCUpgcIndex"))
if mibBuilder.loadTexts: mpAtmCCUpgcCtlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCUpgcCtlEntry.setDescription('An entry in the mpAtmCCUpgcCtlTable.')
mpAtmCCUpgcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCUpgcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCUpgcIndex.setDescription('The Unite Pvc Group identifier for this node. A value assigned to a node in this node that uniquely identifies in the MIB.')
mpAtmCCUpgcCtlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("register", 1), ("active", 2), ("inactive", 3), ("delete", 4), ("stsInactive", 5), ("underEstablish", 6), ("underDeactivate", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCUpgcCtlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCUpgcCtlStatus.setDescription("This variable indicates the Control Status of this Unite Pvc Group. - 'register', which indicates that request to careate a new instance (Unite PVC Group) in the node. - 'active', which indicates that the Unite Pvc Group is connected. - 'inactive', which indicates that the Unite Pvc Group is disconnected. - 'delete', which indicates that request to delete the Unite Pvc Group. - 'stsInactive', which indicates that request to only the status is change to 'inactive'. This request is not disconnect the connecting PVC's. - 'underEstablish', which indicates that the under the connecting progress in the Unite Pvc Group. - 'underDeactivate', which indicates that the under the disconnecting progress in the Unite Pvc Group. ")
mpAtmCCUpgcCtlCountPgc = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCUpgcCtlCountPgc.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCUpgcCtlCountPgc.setDescription('The total number of registered Pvc Group in the Unite Pvc Group.')
mpAtmCCUpgcCtlResult = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCUpgcCtlResult.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCUpgcCtlResult.setDescription('Indicate the result at which process the Unite Pvc Group CutOver.')
mpAtmCCUnitePvcGroupRegisterTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 2, 3), )
if mibBuilder.loadTexts: mpAtmCCUnitePvcGroupRegisterTable.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCUnitePvcGroupRegisterTable.setDescription('This table uesd that register the Pvc Group for the Unite Pvc Group.')
mpAtmCCUpgcRegiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 2, 3, 1), ).setIndexNames((0, "MP-ATM-MIB", "mpAtmCCUpgcIndex"), (0, "MP-ATM-MIB", "mpAtmCCUpgcPgcIndex"))
if mibBuilder.loadTexts: mpAtmCCUpgcRegiEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCUpgcRegiEntry.setDescription('An entry in the mpAtmCCUpgcRegiTable.')
mpAtmCCUpgcPgcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCUpgcPgcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCUpgcPgcIndex.setDescription('The Index value for specified the Pvc Group that to add (or delete) from Unite Pvc Group.')
mpAtmCCUpgcRegiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add", 1), ("delete", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCUpgcRegiStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCUpgcRegiStatus.setDescription("This variable indicates the ragistratoin Status the PVC Groupe to specified the Unite Pvc Group. - 'add', which indicates that add the Pvc group to Unite Pvc Group. - 'delete', which indicates that delete the Pvc group to Unite Pvc Group. - 'enable', which indicates that ragisterd the Pvc group in the Unite Pvc Group.")
mpAtmCCPvcGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3))
mpAtmCCPgcBaseInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 1))
mpAtmCCPgcTotalGroupNumber = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPgcTotalGroupNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPgcTotalGroupNumber.setDescription('The total number of registerd to Pvc Group in this node.')
mpAtmCCPvcGroupControlTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 2), )
if mibBuilder.loadTexts: mpAtmCCPvcGroupControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPvcGroupControlTable.setDescription('This table contains the control of the Pvc Group objects')
mpAtmCCPgcCtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 2, 1), ).setIndexNames((0, "MP-ATM-MIB", "mpAtmCCPgcIndex"))
if mibBuilder.loadTexts: mpAtmCCPgcCtlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPgcCtlEntry.setDescription('An entry in the mpAtmCCPgcCtlTable.')
mpAtmCCPgcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPgcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPgcIndex.setDescription('The Pvc Group identifier for this node. A value assigned to a node in this node that uniquely identifies in the MIB.')
mpAtmCCPgcCtlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("register", 1), ("active", 2), ("inactive", 3), ("delete", 4), ("stsInactive", 5), ("underEstablish", 6), ("underDeactivate", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCPgcCtlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPgcCtlStatus.setDescription("This variable indicates the Control Status of this Pvc Group. - 'register', which indicates that request to careate a new instance (PVC Group) in the node. - 'active', which indicates that the Pvc Group is connected. - 'inactive', which indicates that the Pvc Group is disconnected. - 'delete', which indicates that request to delete the Pvc Group. - 'stsInactive', which indicates that request to only the status is change to 'inactive'. This request is not disconnect the connecting PVC's. - 'underEstablish', which indicates that the under the connecting progress in the Pvc Group. - 'underDeactivate', which indicates that the under the disconnecting progress in the Pvc Group. ")
mpAtmCCPgcCtlCountPvc = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPgcCtlCountPvc.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPgcCtlCountPvc.setDescription('The total number of registered Pvc in the Pvc Group.')
mpAtmCCPgcCtlResult = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPgcCtlResult.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPgcCtlResult.setDescription('Indicate the result at which process the Pvc Group CutOver.')
mpAtmCCPvcGroupRegisterTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 3), )
if mibBuilder.loadTexts: mpAtmCCPvcGroupRegisterTable.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPvcGroupRegisterTable.setDescription('This table uesd that register the Pvc for the Pvc Group.')
mpAtmCCPgcRegiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 3, 1), ).setIndexNames((0, "MP-ATM-MIB", "mpAtmCCPgcIndex"), (0, "MP-ATM-MIB", "mpAtmCCPgcPvcIfIndex"), (0, "MP-ATM-MIB", "mpAtmCCPgcPvcVpi"), (0, "MP-ATM-MIB", "mpAtmCCPgcPvcVci"))
if mibBuilder.loadTexts: mpAtmCCPgcRegiEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPgcRegiEntry.setDescription('An entry in the mpAtmCCPgcRegiTable.')
mpAtmCCPgcPvcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: mpAtmCCPgcPvcIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPgcPvcIfIndex.setDescription("The value of this object is equal to MIB II's ifIndex value of the ATM interface port for this pvc in PVC Group.")
mpAtmCCPgcPvcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: mpAtmCCPgcPvcVpi.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPgcPvcVpi.setDescription('The VPI value of the pvc in PVC Group.')
mpAtmCCPgcPvcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 3, 1, 3), Integer32())
if mibBuilder.loadTexts: mpAtmCCPgcPvcVci.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPgcPvcVci.setDescription('The VCI value of the pvc in PVC Group. The value of 0 can used with PVP.')
mpAtmCCPgcPvcKind = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("staticPvc", 1), ("softPvc", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCPgcPvcKind.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPgcPvcKind.setDescription('This object is indicates the kind of pvc.')
mpAtmCCPgcStaticPvcDestIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCPgcStaticPvcDestIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPgcStaticPvcDestIfIndex.setDescription("The value of this object is equal to MIB II's ifIndex value of the distination ATM interface port. This value is not relevant when the value of mpAtmCCPgcPvcKind is 'softPvc'.")
mpAtmCCPgcSoftPvcDestAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 3, 1, 6), AtmAddr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCPgcSoftPvcDestAtmAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPgcSoftPvcDestAtmAddress.setDescription("The distinaniton ATM address of this pvc in the PVC Group. This value is not relevant when the value of mpAtmCCPgcPvcKind is 'staticPvc'.")
mpAtmCCPgcPvcDestVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCPgcPvcDestVpi.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPgcPvcDestVpi.setDescription('The VPI value of the distination pvc.')
mpAtmCCPgcPvcDestVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCPgcPvcDestVci.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPgcPvcDestVci.setDescription('The VCI value of the distination pvc. When the value of mpAtmCCPgcPvcVci is 0, the value of this object is accept 0 only.')
mpAtmCCPgcPvcReceiveTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 3, 1, 9), AtmTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCPgcPvcReceiveTrafficDescrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPgcPvcReceiveTrafficDescrIndex.setDescription('The value of this ofject identifies the row of the ATM Traffic Descriptor Table which applies to the receive direction of this pvc in PVC Group.')
mpAtmCCPgcPvcTransmitTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 3, 1, 10), AtmTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCPgcPvcTransmitTrafficDescrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPgcPvcTransmitTrafficDescrIndex.setDescription('The value of this ofject identifies the row of the ATM Traffic Descriptor Table which applies to the transmit direction of this pvc in PVC Group.')
mpAtmCCPgcPvcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCPgcPvcPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPgcPvcPriority.setDescription('The value of this ofject identifies the connect priority of the pvc in the PVC Group')
mpAtmCCPgcStaticPvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 3, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCPgcStaticPvcId.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPgcStaticPvcId.setDescription("The value of this object identifies the Static-PVC IDENTIFY the pvc in the PVC Group. This value is not relevant when the value of mpAtmCCPgcPvcKind is 'softPvc'.")
mpAtmCCPgcStaticPvcSeqNo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 3, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCPgcStaticPvcSeqNo.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPgcStaticPvcSeqNo.setDescription("The value of this object identifies the Sequence Number of the static-pvc in the PvcGroup. This value is not relevant when the value of mpAtmCCPgcPvcKind is 'softPvc'.")
mpAtmCCPgcSoftPvcCallKind = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("calling", 1), ("called", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCPgcSoftPvcCallKind.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPgcSoftPvcCallKind.setDescription("The value of this object identifies the call kind of the soft-pvc in the PvcGroup. This value is not relevant when the value of mpAtmCCPgcPvcKind is 'staticPvc'.")
mpAtmCCPgcRegiAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2), ("stsInactive", 3), ("connectWait", 4), ("disconnectWait", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCPgcRegiAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPgcRegiAdminStatus.setDescription("The value of this object identifies the desired administrative status of this pvc in the PVC Group. - 'inactive', which indicates that request to disconnect the pvc. - 'active', which indicates that request to connect the pvc. - 'stsInactive', which indicates that request to only a status is change, not disconnect the pvc. - 'connectWait', which indicates that connecting progress at this pvc. - 'disconnectWait', which indicates that disconnecting progress at this pvc. ")
mpAtmCCPgcRegiCfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("cancel", 2), ("delete", 3), ("unknown", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCPgcRegiCfgStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPgcRegiCfgStatus.setDescription("The value of this object identifies the desired configration status of this pvc in the PVC Group. - 'enable', which indicates that set to the configration - 'cancel', which indicates that request to clear the procedure - 'delete', which indicates that deleted form the configration - 'unkown', ")
mpAtmCCPgcRegiErrInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPgcRegiErrInfo.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPgcRegiErrInfo.setDescription('The value of this object indicate the result of set request.')
mpAtmCCPvcGroupActiveInfoTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 4), )
if mibBuilder.loadTexts: mpAtmCCPvcGroupActiveInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPvcGroupActiveInfoTable.setDescription('Confirm to the PVC Group that status is active.')
mpAtmCCPgcActInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 4, 1), ).setIndexNames((0, "MP-ATM-MIB", "mpAtmCCPgcActGrpNum"))
if mibBuilder.loadTexts: mpAtmCCPgcActInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPgcActInfoEntry.setDescription('The entry of mpAtmCCPvcGroupActiveInfoTable.')
mpAtmCCPgcActGrpNum = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 11, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCPgcActGrpNum.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCPgcActGrpNum.setDescription('The number of the PVC Group that status is active.')
mpAtmCCAtmMulticast = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12))
mpAtmCCAtmMulticastRegistration = MibIdentifier((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 1))
mpAtmCCAtmMultiRootIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCAtmMultiRootIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCAtmMultiRootIfIndex.setDescription("The value of this object is equal to MIB II's ifIndex value of the ATM interface port.")
mpAtmCCAtmMultiRootVpi = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCAtmMultiRootVpi.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCAtmMultiRootVpi.setDescription('The VPI value of the Multicast-Root-PVC.')
mpAtmCCAtmMultiRootVci = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCAtmMultiRootVci.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCAtmMultiRootVci.setDescription('The VCI value of the Multicast-Root-PVC.')
mpAtmCCAtmMultiLeafIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCAtmMultiLeafIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCAtmMultiLeafIfIndex.setDescription("The value of this object is equal to MIB II's ifIndex value of the ATM interface port.")
mpAtmCCAtmMultiLeafVpi = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCAtmMultiLeafVpi.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCAtmMultiLeafVpi.setDescription('The VPI value of the Multicast-Leaf-PVC.')
mpAtmCCAtmMultiLeafVci = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCAtmMultiLeafVci.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCAtmMultiLeafVci.setDescription('The VCI value of the Multicast-Leaf-PVC.')
mpAtmCCAtmMultiTrafficDescrIndex = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 1, 7), AtmTrafficDescrParamIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCAtmMultiTrafficDescrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCAtmMultiTrafficDescrIndex.setDescription('The value of this object identifies in the ATM Traffic Descriptor Table which applies to this multicast PVC.')
mpAtmCCAtmMultiSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCAtmMultiSlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCAtmMultiSlotNumber.setDescription('Specified the slot number which used the Multicast Card.')
mpAtmCCAtmMultiVcRdiResponse = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ture", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCAtmMultiVcRdiResponse.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCAtmMultiVcRdiResponse.setDescription('Specified responds to the VC-AIS or not when the VC-RDI received.')
mpAtmCCAtmMultiPvcId = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCAtmMultiPvcId.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCAtmMultiPvcId.setDescription('The value of this object identifies the desired this connection.')
mpAtmCCAtmMultiSeqNo = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCAtmMultiSeqNo.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCAtmMultiSeqNo.setDescription('Order information in this connection.')
mpAtmCCAtmMultiCfgStatus = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 1, 98), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("cancel", 2), ("delete", 3), ("unknown", 4))).clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCAtmMultiCfgStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCAtmMultiCfgStatus.setDescription('The value of this object identifies configration status for this table.')
mpAtmCCAtmMultiRegErrInfo = MibScalar((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 1, 99), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCAtmMultiRegErrInfo.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCAtmMultiRegErrInfo.setDescription('The value of this object indicates error information that became an error set to MIB in this table.')
mpAtmCCAtmMulticastCtlTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 2), )
if mibBuilder.loadTexts: mpAtmCCAtmMulticastCtlTable.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCAtmMulticastCtlTable.setDescription('This table used when control of the multicast root or leaf PVC.')
mpAtmCCAtmMultiCtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 2, 1), ).setIndexNames((0, "MP-ATM-MIB", "mpAtmCCAtmMultiIfIndex"), (0, "MP-ATM-MIB", "mpAtmCCAtmMultiVpi"), (0, "MP-ATM-MIB", "mpAtmCCAtmMultiVci"))
if mibBuilder.loadTexts: mpAtmCCAtmMultiCtlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCAtmMultiCtlEntry.setDescription('An entry in the mpAtmCCAtmMulticastCtlTable.')
mpAtmCCAtmMultiIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: mpAtmCCAtmMultiIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCAtmMultiIfIndex.setDescription("The value of this object is equal to MIB II's ifIndex value of the ATM interface port.")
mpAtmCCAtmMultiVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: mpAtmCCAtmMultiVpi.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCAtmMultiVpi.setDescription('The VPI value of this PVC.')
mpAtmCCAtmMultiVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 2, 1, 3), Integer32())
if mibBuilder.loadTexts: mpAtmCCAtmMultiVci.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCAtmMultiVci.setDescription('The VCI value of this PVC.')
mpAtmCCAtmMultiAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mpAtmCCAtmMultiAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCAtmMultiAdminStatus.setDescription('The value of this object identifies the desired administrative status of this Multicast-PVC. The up and down states indicate that the traffic flow is enabled and disabled respectively on this Multicast-PVC.')
mpAtmCCAtmMultiOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCAtmMultiOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCAtmMultiOperStatus.setDescription('The value of this object identifies the desired operational status of this Multicast-PVC.')
mpAtmCCAtmMultiErrInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 2, 1, 99), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCAtmMultiErrInfo.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCAtmMultiErrInfo.setDescription('The value of this object indicates error information that became an error set to MIB in this table.')
mpAtmCCAtmMulticastConfTable = MibTable((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 3), )
if mibBuilder.loadTexts: mpAtmCCAtmMulticastConfTable.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCAtmMulticastConfTable.setDescription('This table indicate that infom the ATM-Multicast-PVC.')
mpAtmCCAtmMultiConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 3, 1), ).setIndexNames((0, "MP-ATM-MIB", "mpAtmCCAtmMultiRootIfIndex"), (0, "MP-ATM-MIB", "mpAtmCCAtmMultiRootVpi"), (0, "MP-ATM-MIB", "mpAtmCCAtmMultiRootVci"), (0, "MP-ATM-MIB", "mpAtmCCAtmMultiLeafIfIndex"), (0, "MP-ATM-MIB", "mpAtmCCAtmMultiLeafVpi"), (0, "MP-ATM-MIB", "mpAtmCCAtmMultiLeafVci"))
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfEntry.setDescription('An entry in the mpAtmCCAtmMulticastConfTable.')
mpAtmCCAtmMultiConfRootIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfRootIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfRootIfIndex.setDescription("The value of this object is equal to MIB II's ifIndex value of the ATM interface port.")
mpAtmCCAtmMultiConfRootVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfRootVpi.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfRootVpi.setDescription('The VPI value of the Multicast-Root-PVC.')
mpAtmCCAtmMultiConfRootVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfRootVci.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfRootVci.setDescription('The VCI value of the Multicast-Root-PVC.')
mpAtmCCAtmMultiConfLeafIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfLeafIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfLeafIfIndex.setDescription("The value of this object is equal to MIB II's ifIndex value of the ATM interface port.")
mpAtmCCAtmMultiConfLeafVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfLeafVpi.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfLeafVpi.setDescription('The VPI value of the Multicast-Leaf-PVC.')
mpAtmCCAtmMultiConfLeafVci = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfLeafVci.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfLeafVci.setDescription('The VCI value of the Multicast-Leaf-PVC.')
mpAtmCCAtmMultiConfRootAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfRootAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfRootAdminStatus.setDescription('The value of this object identifies the desired administrative status of this Multicast-Root-PVC.')
mpAtmCCAtmMultiConfRootOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfRootOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfRootOperStatus.setDescription('The value of this object identifies the desired operational status of this Multicast-Root-PVC.')
mpAtmCCAtmMultiConfLeafAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfLeafAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfLeafAdminStatus.setDescription('The value of this object identifies the desired administrative status of this Multicast-Leaf-PVC.')
mpAtmCCAtmMultiConfLeafOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfLeafOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfLeafOperStatus.setDescription('The value of this object identifies the desired operational status of this Multicast-Leaf-PVC.')
mpAtmCCAtmMultiConfTrafficDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 3, 1, 11), AtmTrafficDescrParamIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfTrafficDescrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfTrafficDescrIndex.setDescription('The value of this object identifies in the ATM Traffic Descriptor Table which applies of this Multicast-PVC.')
mpAtmCCAtmMultiConfSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfSlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfSlotNumber.setDescription('The value of this object identifies the slot number which used the Multicast Card.')
mpAtmCCAtmMultiConfVcRdiResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfVcRdiResponse.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfVcRdiResponse.setDescription('he value of this object identifies that responds to the VC-AIS or not when the VC-RDI received.')
mpAtmCCAtmMultiConfPvcId = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfPvcId.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfPvcId.setDescription('The value of this object identifies the desired this connection.')
mpAtmCCAtmMultiConfSeqNo = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfSeqNo.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfSeqNo.setDescription('Order information in this connection.')
mpAtmCCAtmMultiConfShaperRate = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfShaperRate.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfShaperRate.setDescription('The bandwidth value of this Multicast-PVC in cell per second.')
mpAtmCCAtmMultiConfRootVpTunneling = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ture", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfRootVpTunneling.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfRootVpTunneling.setDescription('The value of this object identifies the port (at the Multicast-Root-PVC) VP-Tunneling indication. 1:VP-Tunneling 2:Not VP-Tunneling')
mpAtmCCAtmMultiConfLeafVpTunneling = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ture", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfLeafVpTunneling.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfLeafVpTunneling.setDescription('The value of this object identifies the port (at the Multicast-Leaf-PVC) VP-Tunneling indication.')
mpAtmCCAtmMultiConfNextLeaf = MibTableColumn((1, 3, 6, 1, 4, 1, 119, 2, 3, 3, 13, 110, 12, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ture", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfNextLeaf.setStatus('mandatory')
if mibBuilder.loadTexts: mpAtmCCAtmMultiConfNextLeaf.setDescription('The value of this object identifies the last segment.')
mibBuilder.exportSymbols("MP-ATM-MIB", mpAtmCCPvcTraceCtlEntry=mpAtmCCPvcTraceCtlEntry, mpAtmCCSoftPvcOperStatus=mpAtmCCSoftPvcOperStatus, mpAtmCCUpgcIndex=mpAtmCCUpgcIndex, mpAtmCCStaticPvcTable=mpAtmCCStaticPvcTable, mpAtmCCSoftPvcCalledLastReleaseDiagnostic=mpAtmCCSoftPvcCalledLastReleaseDiagnostic, mpAtmCCSoftPvcEntry=mpAtmCCSoftPvcEntry, mpAtmCCAtmMultiPvcId=mpAtmCCAtmMultiPvcId, mpAtmCCPortAlarmStatYelPRdiCounters=mpAtmCCPortAlarmStatYelPRdiCounters, mpAtmCCPgcActGrpNum=mpAtmCCPgcActGrpNum, mpAtmCCSscopMaxStat=mpAtmCCSscopMaxStat, mpAtmCCPgcCtlStatus=mpAtmCCPgcCtlStatus, mpAtmCCVcStatInCellsCounters=mpAtmCCVcStatInCellsCounters, mpAtmCCPvcTraceIndex=mpAtmCCPvcTraceIndex, mpAtmCCMuxStatDiscardCellsBufOvfCntOvfCounters=mpAtmCCMuxStatDiscardCellsBufOvfCntOvfCounters, mpAtmCCPortAlarmStatRedPOofCounters=mpAtmCCPortAlarmStatRedPOofCounters, mpAtmCCSoftPvcTable=mpAtmCCSoftPvcTable, mpAtmCCPortBwInfoRcvUsedBwCps=mpAtmCCPortBwInfoRcvUsedBwCps, mpAtmCCNextTrafficDescrIndex=mpAtmCCNextTrafficDescrIndex, mpAtmCCSscopMaxCc=mpAtmCCSscopMaxCc, mpAtmCCStaticPvpOperStatus=mpAtmCCStaticPvpOperStatus, mpAtmCCSscopClearBuffs=mpAtmCCSscopClearBuffs, org=org, mpAtmCCSignallingT398=mpAtmCCSignallingT398, mpAtmCCAtmMulticast=mpAtmCCAtmMulticast, mpAtmCCSoftPvpPriority=mpAtmCCSoftPvpPriority, mpAtmCCSoftPvcAdminStatus=mpAtmCCSoftPvcAdminStatus, mpAtmCCSoftPvcCalledOperStatus=mpAtmCCSoftPvcCalledOperStatus, mpAtmCCPortResInfoMaxSvpcVpi=mpAtmCCPortResInfoMaxSvpcVpi, mpAtmCCSignallingT313=mpAtmCCSignallingT313, mpAtmCCSoftPvcCalledErrInfo=mpAtmCCSoftPvcCalledErrInfo, mpAtmCCAtmMultiConfRootVpTunneling=mpAtmCCAtmMultiConfRootVpTunneling, mpAtmCCAtmMultiConfRootIfIndex=mpAtmCCAtmMultiConfRootIfIndex, mpAtmCCSoftPvpCladType=mpAtmCCSoftPvpCladType, mpAtmCCPgcSoftPvcDestAtmAddress=mpAtmCCPgcSoftPvcDestAtmAddress, mpAtmCCAtmMultiRegErrInfo=mpAtmCCAtmMultiRegErrInfo, mpAtmCCNextNodeVci=mpAtmCCNextNodeVci, mpAtmCCPortAlarmStatRedLofCounters=mpAtmCCPortAlarmStatRedLofCounters, mmn9110=mmn9110, mpAtmCCAtmMultiTrafficDescrIndex=mpAtmCCAtmMultiTrafficDescrIndex, mpAtmCCAtmMultiConfLeafVpi=mpAtmCCAtmMultiConfLeafVpi, mpAtmCCSoftPvpCalledVpi=mpAtmCCSoftPvpCalledVpi, mpAtmCCSoftPvcCalledPriority=mpAtmCCSoftPvcCalledPriority, mpAtmCCStaticPvpHighVpi=mpAtmCCStaticPvpHighVpi, mpAtmCCPgcPvcReceiveTrafficDescrIndex=mpAtmCCPgcPvcReceiveTrafficDescrIndex, mpAtmCCMuxStatistics=mpAtmCCMuxStatistics, mpAtmCCMuxStatDiscardCellsThresholdOvfCounters=mpAtmCCMuxStatDiscardCellsThresholdOvfCounters, mpAtmCCPgcPvcTransmitTrafficDescrIndex=mpAtmCCPgcPvcTransmitTrafficDescrIndex, mpAtmCCPhyStatisticsEntry=mpAtmCCPhyStatisticsEntry, mpAtmCCPvcTraceInfoPathKind=mpAtmCCPvcTraceInfoPathKind, mpAtmCCMuxStatDiscardCellsHTErrCounters=mpAtmCCMuxStatDiscardCellsHTErrCounters, mpAtmCCVccStatusInsStatus=mpAtmCCVccStatusInsStatus, mpAtmCCOuspStatRcvCrcErrCellsCounters=mpAtmCCOuspStatRcvCrcErrCellsCounters, mpAtmCCUpgcCtlEntry=mpAtmCCUpgcCtlEntry, mpAtmCCAtmMultiConfSlotNumber=mpAtmCCAtmMultiConfSlotNumber, mpAtmCCAtmMultiRootVpi=mpAtmCCAtmMultiRootVpi, mpAtmCCPortBandwidthInfomationTable=mpAtmCCPortBandwidthInfomationTable, DisplayString=DisplayString, mpAtmCCVccStatusOrgVpi=mpAtmCCVccStatusOrgVpi, mpAtmCCVccStatRegVpi=mpAtmCCVccStatRegVpi, mpAtmCCVpTunnelingPnniVer=mpAtmCCVpTunnelingPnniVer, mpAtmCCSoftPvpTargetVpi=mpAtmCCSoftPvpTargetVpi, MpAtmCCCladType=MpAtmCCCladType, mpAtmCCSoftPvcVci=mpAtmCCSoftPvcVci, mpAtmCCSoftPvcPgcRequest=mpAtmCCSoftPvcPgcRequest, mpAtmCCPortResInfoVpcCounters=mpAtmCCPortResInfoVpcCounters, mpAtmCCSoftPvcCalledCladType=mpAtmCCSoftPvcCalledCladType, mpAtmCCPortAlarmStatRedResetCounters=mpAtmCCPortAlarmStatRedResetCounters, mpAtmCCVcStatInDropCells=mpAtmCCVcStatInDropCells, mpAtmCCPathTestVci=mpAtmCCPathTestVci, mpAtmCCSignallingT308=mpAtmCCSignallingT308, mpAtmCCPgcIndex=mpAtmCCPgcIndex, mpAtmCCAtmMultiConfLeafAdminStatus=mpAtmCCAtmMultiConfLeafAdminStatus, mpAtmCCPvcTraceInfoVci=mpAtmCCPvcTraceInfoVci, mpAtmCCSignallingT331=mpAtmCCSignallingT331, mpAtmCCStaticPVPC=mpAtmCCStaticPVPC, mpAtmCCSignallingT316=mpAtmCCSignallingT316, mpAtmCCVcStatVci=mpAtmCCVcStatVci, mpAtmCCPgcBaseInfo=mpAtmCCPgcBaseInfo, mpAtmCCAtmMultiVpi=mpAtmCCAtmMultiVpi, MacAddress=MacAddress, mpAtmCCPortBwInfoVpi=mpAtmCCPortBwInfoVpi, mpAtmCCPortAlarmStatYelPRaiCounters=mpAtmCCPortAlarmStatYelPRaiCounters, mpAtmCCStaticPvcPvcId=mpAtmCCStaticPvcPvcId, mpEtherPort=mpEtherPort, mpAtmCCSoftPvcCalledTransmitTrafficDescrIndex=mpAtmCCSoftPvcCalledTransmitTrafficDescrIndex, mpAtmCCStaticPvcHighTransmitTrafficDescrIndex=mpAtmCCStaticPvcHighTransmitTrafficDescrIndex, mpAtmCCUnitePvcGroup=mpAtmCCUnitePvcGroup, mpAtmCCVpTunnelingSpeed=mpAtmCCVpTunnelingSpeed, mpAtmCCVccStatusEntry=mpAtmCCVccStatusEntry, mpAtmCCPortAlarmStatRedOofCounters=mpAtmCCPortAlarmStatRedOofCounters, mpAtmCCVpTunnelingErrInfo=mpAtmCCVpTunnelingErrInfo, mpAtmCCAtmMultiVci=mpAtmCCAtmMultiVci, mpAtmCCPgcSoftPvcCallKind=mpAtmCCPgcSoftPvcCallKind, mpAtmCCUpgcPgcIndex=mpAtmCCUpgcPgcIndex, mpAtmCCVccStatusTable=mpAtmCCVccStatusTable, mpAtmCCPvcTraceInfoVpi=mpAtmCCPvcTraceInfoVpi, mpAtmCCPvcGroupCutoverStatus=mpAtmCCPvcGroupCutoverStatus, mpAtmCCSoftPvcPriority=mpAtmCCSoftPvcPriority, mpAtmCCSoftPvpCalledTransmitTrafficDescrIndex=mpAtmCCSoftPvpCalledTransmitTrafficDescrIndex, mpAtmCCSoftPvcCalledOriginalAddress=mpAtmCCSoftPvcCalledOriginalAddress, mpAtmCCVpTunnellingStatisticsEntry=mpAtmCCVpTunnellingStatisticsEntry, mpAtmCCAtmMultiOperStatus=mpAtmCCAtmMultiOperStatus, mpAtmCCPhyStatTmtCellsCounters=mpAtmCCPhyStatTmtCellsCounters, mpAtmCCStaticPvpPgcRequest=mpAtmCCStaticPvpPgcRequest, mpAtmCCStaticPvpErrInfo=mpAtmCCStaticPvpErrInfo, mpAtmCCBwInfoPortVpTunneling=mpAtmCCBwInfoPortVpTunneling, mpAtmCCOuspStatisticsEntry=mpAtmCCOuspStatisticsEntry, mpAtmCCSoftPvcCalledReceiveTrafficDescrIndex=mpAtmCCSoftPvcCalledReceiveTrafficDescrIndex, mpAtmCCSoftPvcCalledAdminStatus=mpAtmCCSoftPvcCalledAdminStatus, mpAtmCCVccStatisticsRegTable=mpAtmCCVccStatisticsRegTable, mpAtmCCSoftPvpLastReleaseDiagnostic=mpAtmCCSoftPvpLastReleaseDiagnostic, mpAtmCCStaticPvcHighCladType=mpAtmCCStaticPvcHighCladType, mpAtmCCPvcGroupCutover=mpAtmCCPvcGroupCutover, mpAtmCCPathTest=mpAtmCCPathTest, mpAtmCCPortAlarmStatRedCcRedCounters=mpAtmCCPortAlarmStatRedCcRedCounters, mpAtmCCPortAlarmStatisticsEntry=mpAtmCCPortAlarmStatisticsEntry, mpAtmCCUpgcBaseActiveGroupNumber=mpAtmCCUpgcBaseActiveGroupNumber, mpObsCtl=mpObsCtl, mpAtmCCSoftPvcCalledVci=mpAtmCCSoftPvcCalledVci, mpAtmCCSoftPvpTable=mpAtmCCSoftPvpTable, mpAtmCCSoftPvpIfIndex=mpAtmCCSoftPvpIfIndex, mpAtmCCAtmMultiConfRootAdminStatus=mpAtmCCAtmMultiConfRootAdminStatus, mpAtmCCAtmMultiLeafVpi=mpAtmCCAtmMultiLeafVpi, mpAtmCCPgcPvcIfIndex=mpAtmCCPgcPvcIfIndex, mpAtmCCAtmMultiConfLeafOperStatus=mpAtmCCAtmMultiConfLeafOperStatus, mpAtmCCSignallingT310=mpAtmCCSignallingT310, mpAtmCCPvcGroupRegisterTable=mpAtmCCPvcGroupRegisterTable, mpAtmCCPathTestVpi=mpAtmCCPathTestVpi, mpAtmCCUnitePvcGroupRegisterTable=mpAtmCCUnitePvcGroupRegisterTable, mpAtmCCVccStatusDestVci=mpAtmCCVccStatusDestVci, mpAtmCCVcStatInDropCellsCounters=mpAtmCCVcStatInDropCellsCounters, mpAtmCCVccStatRegVci=mpAtmCCVccStatRegVci, mpAtmCCPortAlarmStatYelInfo2Counters=mpAtmCCPortAlarmStatYelInfo2Counters, mpAtmCCAtmMultiConfSeqNo=mpAtmCCAtmMultiConfSeqNo, nec_mib=nec_mib, mpAtmCCAtmMultiConfEntry=mpAtmCCAtmMultiConfEntry, mpAtmCCStaticPvpPriority=mpAtmCCStaticPvpPriority, mpAtmCCStaticPvcHighVci=mpAtmCCStaticPvcHighVci, mpAtmCCProtocolTrapInfoEntry=mpAtmCCProtocolTrapInfoEntry, mpAtmCCPathTestRcvCellsCounters=mpAtmCCPathTestRcvCellsCounters, mpAtmCCPgcStaticPvcId=mpAtmCCPgcStaticPvcId, mpAtmCCUpgcCtlStatus=mpAtmCCUpgcCtlStatus, mpAtmCCVccStatusOrgPortVpTunneling=mpAtmCCVccStatusOrgPortVpTunneling, mpCes=mpCes, mpAtmCCStaticPvcLowReceiveTrafficDescrIndex=mpAtmCCStaticPvcLowReceiveTrafficDescrIndex, mpAtmCCAtmMultiErrInfo=mpAtmCCAtmMultiErrInfo, mpIfCard=mpIfCard, mpAtmCCPortAlarmStatYelRaiCounters=mpAtmCCPortAlarmStatYelRaiCounters, mpAtmCCPortResInfoMaxSvccVpi=mpAtmCCPortResInfoMaxSvccVpi, mpAtmCCPvcTraceControlTable=mpAtmCCPvcTraceControlTable, mpAtmCCVpStatInCellsCounters=mpAtmCCVpStatInCellsCounters, mpAtmCCPhyStatSymbolErrCounters=mpAtmCCPhyStatSymbolErrCounters, mpAtmCCPortResInfoMaxVpiBits=mpAtmCCPortResInfoMaxVpiBits, mpAtmCCSoftPvpCalledReceiveTrafficDescrIndex=mpAtmCCSoftPvpCalledReceiveTrafficDescrIndex, mpAtmCCMuxStatDiscardCellsThresholdOvfCntOvfCounters=mpAtmCCMuxStatDiscardCellsThresholdOvfCntOvfCounters, mpAtmCCPortAlarmStatRedAisCounters=mpAtmCCPortAlarmStatRedAisCounters, mpAtmCCVpTunnelingNeighborInfo=mpAtmCCVpTunnelingNeighborInfo, mpAtmCCStaticPvpAdminStatus=mpAtmCCStaticPvpAdminStatus, mpAtmCCVccStatusDestVpi=mpAtmCCVccStatusDestVpi, mpAtmCCPhyStatB1ErrCounters=mpAtmCCPhyStatB1ErrCounters, mpAtmCCPvcGroupCutoverBaseInfo=mpAtmCCPvcGroupCutoverBaseInfo, mpAtmCCVcStatOutCellsCounters=mpAtmCCVcStatOutCellsCounters, mpAtmCCUpgcBaseInfo=mpAtmCCUpgcBaseInfo, mpAtmCCPvcTraceCtlVci=mpAtmCCPvcTraceCtlVci, mpAtmCCVpTunnelingCfgStatus=mpAtmCCVpTunnelingCfgStatus, mpMpc=mpMpc, mmpf_mib=mmpf_mib, mpAtmCCPortBwInfoRawBandwidthCps=mpAtmCCPortBwInfoRawBandwidthCps, mpAtmCCSignallingTable=mpAtmCCSignallingTable, mpAtmCCAtmMultiAdminStatus=mpAtmCCAtmMultiAdminStatus, mpAtmCCOuspStatIndex=mpAtmCCOuspStatIndex, mpAtmCCPortAlarmStatisticsTable=mpAtmCCPortAlarmStatisticsTable, mpAtmCCPgcCtlResult=mpAtmCCPgcCtlResult, mpAtmCCStaticPvcCfgStatus=mpAtmCCStaticPvcCfgStatus, mpAtmCCSscopEntry=mpAtmCCSscopEntry, mpAtmCCSoftPvpCalledCfgStatus=mpAtmCCSoftPvpCalledCfgStatus, mpAtmCCSoftPvpLeafReference=mpAtmCCSoftPvpLeafReference, mpAtmCCStaticPvcErrInfo=mpAtmCCStaticPvcErrInfo, mpAtmCCVcStatVpi=mpAtmCCVcStatVpi, mpAtmCCSignallingT309=mpAtmCCSignallingT309, mpDns=mpDns, mpAtmCCVpTunnelingTable=mpAtmCCVpTunnelingTable, enterprises=enterprises, mpAtmCCPathTestSendTime=mpAtmCCPathTestSendTime, mpAtmCCPortAlarmStatRedLosCounters=mpAtmCCPortAlarmStatRedLosCounters, mpAtmCCPortAlarmStatYelMsRdiCounters=mpAtmCCPortAlarmStatYelMsRdiCounters, mpVlan=mpVlan, mpAtmCCVpTunnelingVpi=mpAtmCCVpTunnelingVpi, mpAtmCCAtmMultiLeafVci=mpAtmCCAtmMultiLeafVci, mpAtmCCSoftPvpCalledIfIndex=mpAtmCCSoftPvpCalledIfIndex, mpAtmCCPortBwInfoRawBandwidthBps=mpAtmCCPortBwInfoRawBandwidthBps, mpBridge=mpBridge, mpAtmCCStaticPvcLowIfIndex=mpAtmCCStaticPvcLowIfIndex, mpAtmCCSoftPvpTargetAddress=mpAtmCCSoftPvpTargetAddress, mpLlc=mpLlc, mpAtmCCAtmMultiRootVci=mpAtmCCAtmMultiRootVci, mpSystem=mpSystem, mpAtmCCAtmMultiConfShaperRate=mpAtmCCAtmMultiConfShaperRate, mpAtmCCPortAlarmStatRedBadSigCounters=mpAtmCCPortAlarmStatRedBadSigCounters, mpAtmCCVccStatisticsRegEntry=mpAtmCCVccStatisticsRegEntry, mpAtmCCBwInfoPortTmitRemainBwCps=mpAtmCCBwInfoPortTmitRemainBwCps, mpAtmCCVccStatusPathKind=mpAtmCCVccStatusPathKind, mpDhcp=mpDhcp, mpAtmCCStaticPvpHighIfIndex=mpAtmCCStaticPvpHighIfIndex, necProduct=necProduct, mpAtmCCPvcTraceInfoEntry=mpAtmCCPvcTraceInfoEntry, mpAtmCCSignallingT303=mpAtmCCSignallingT303, mpAtmCCOuspStatSendInvalidCdvCounters=mpAtmCCOuspStatSendInvalidCdvCounters, mpAtmCCAtmMultiConfPvcId=mpAtmCCAtmMultiConfPvcId, mpAtmCCStaticPvcLowCladType=mpAtmCCStaticPvcLowCladType, mpAtmCCSoftPvcTargetVpi=mpAtmCCSoftPvcTargetVpi, mpAtmCCStaticPvpTable=mpAtmCCStaticPvpTable, mpAtmCCVpTunnelingEntry=mpAtmCCVpTunnelingEntry, mpAtmCCSignallingT317=mpAtmCCSignallingT317, mpOspf=mpOspf, mpInterface=mpInterface, mpAtmCCPvcTraceInfoTable=mpAtmCCPvcTraceInfoTable, mpAtmCCPortResourceInfomationTable=mpAtmCCPortResourceInfomationTable, mpAtmCCSoftPvpTransmitTrafficDescrIndex=mpAtmCCSoftPvpTransmitTrafficDescrIndex, mpAtmCCVccStatusDestPortVpTunneling=mpAtmCCVccStatusDestPortVpTunneling, mpAtmCCVpTunnelingAdminStatus=mpAtmCCVpTunnelingAdminStatus, mpStp=mpStp, mpAtmCCStaticPvpHighReceiveTrafficDescrIndex=mpAtmCCStaticPvpHighReceiveTrafficDescrIndex, mpAtmCCStaticPvpLowTransmitTrafficDescrIndex=mpAtmCCStaticPvpLowTransmitTrafficDescrIndex, mpAtmCCPvcTraceInfoIfIndex=mpAtmCCPvcTraceInfoIfIndex, mpAtmCClmiMaxTransmissions=mpAtmCClmiMaxTransmissions, mpAtmCCVcStatisticsEntry=mpAtmCCVcStatisticsEntry, mpAtmCCVpTunnelingContinuityCheck=mpAtmCCVpTunnelingContinuityCheck, mpAtmCCPgcStaticPvcSeqNo=mpAtmCCPgcStaticPvcSeqNo, mpAtmCCSoftPvpOriginalAddress=mpAtmCCSoftPvpOriginalAddress, mpAtmCCPgcTotalGroupNumber=mpAtmCCPgcTotalGroupNumber, mpAtmCCAtmMultiConfRootVpi=mpAtmCCAtmMultiConfRootVpi, mpAtmCCPhyStatUncorrectHecErrCounters=mpAtmCCPhyStatUncorrectHecErrCounters, mpAtmCCPhyStatParityErrCounters=mpAtmCCPhyStatParityErrCounters, mpAtmCCPhyStatB3ErrCounters=mpAtmCCPhyStatB3ErrCounters, mpIpsw=mpIpsw, mpAtmCCSoftPvcCalledLastReleaseCause=mpAtmCCSoftPvcCalledLastReleaseCause, mpAtmCCMuxStatReceiveCellsCounters=mpAtmCCMuxStatReceiveCellsCounters, mpAtmCCSoftPvcTargetAddress=mpAtmCCSoftPvcTargetAddress, mpAtmCCBwInfoPortTmitUsedBwCps=mpAtmCCBwInfoPortTmitUsedBwCps, mpAtmCCStaticPvpHighCladType=mpAtmCCStaticPvpHighCladType, mpAtmCCUpgcRegiStatus=mpAtmCCUpgcRegiStatus, mpSnmp=mpSnmp, mpLis=mpLis, mpAtmCCSscopMaxPd=mpAtmCCSscopMaxPd, mpAtmCCProtocol=mpAtmCCProtocol, mpAtmCCPgcCtlEntry=mpAtmCCPgcCtlEntry, mpAtmCCVpStatInDropCellsCounters=mpAtmCCVpStatInDropCellsCounters, mpAtmCCProtocolTrapInfoCause=mpAtmCCProtocolTrapInfoCause, mpAtmCCSoftPvpCalledEntry=mpAtmCCSoftPvpCalledEntry, mpAtmCCSoftPvpCalledTargetAddress=mpAtmCCSoftPvpCalledTargetAddress, mpAtmCCSoftPvcCalledPgcRequest=mpAtmCCSoftPvcCalledPgcRequest, mpAtmCCVcStatInCells=mpAtmCCVcStatInCells, mpAtmCCPvcTraceCtlIfIndex=mpAtmCCPvcTraceCtlIfIndex)
mibBuilder.exportSymbols("MP-ATM-MIB", mpAtmCCStaticPvcAdminStatus=mpAtmCCStaticPvcAdminStatus, mpAtmCCAtmMultiCfgStatus=mpAtmCCAtmMultiCfgStatus, mpAtmCCPortResInfoVpiCounters=mpAtmCCPortResInfoVpiCounters, mpAtmCCVccStatusOrgVci=mpAtmCCVccStatusOrgVci, mpAtmCCVpStatisticsEntry=mpAtmCCVpStatisticsEntry, mpAtmCCStaticPvcPgcRequest=mpAtmCCStaticPvcPgcRequest, mpAtmCCPortAlarmStatRedLocCounters=mpAtmCCPortAlarmStatRedLocCounters, mpAtm=mpAtm, mpCli=mpCli, mpAtmCCPortAlarmStatRedPAisCounters=mpAtmCCPortAlarmStatRedPAisCounters, mpAtmCCVccStatusConnCastType=mpAtmCCVccStatusConnCastType, mpAtmCCPgcRegiCfgStatus=mpAtmCCPgcRegiCfgStatus, mpAtmCCSoftPvpCalledLastReleaseCause=mpAtmCCSoftPvpCalledLastReleaseCause, mpFtp=mpFtp, mpAtmCCSoftPvpAdminStatus=mpAtmCCSoftPvpAdminStatus, mpAtmCCSscopTable=mpAtmCCSscopTable, mmpf=mmpf, mpAtmCCAtmMultiConfLeafIfIndex=mpAtmCCAtmMultiConfLeafIfIndex, mpUiSession=mpUiSession, mpAtmCCAtmMultiConfRootVci=mpAtmCCAtmMultiConfRootVci, mpAtmCCSoftPvcCalledTable=mpAtmCCSoftPvcCalledTable, mpAtmCCOuspStatSendOfifoFullCounters=mpAtmCCOuspStatSendOfifoFullCounters, mpAtmCCSoftPVPC=mpAtmCCSoftPVPC, private=private, mpAtmCCUpgcTotalGroupNumber=mpAtmCCUpgcTotalGroupNumber, mpAtmCCPvcGroup=mpAtmCCPvcGroup, mpCardInfo=mpCardInfo, mpAtmCCMuxStatReceiveCellsCntOvfCounters=mpAtmCCMuxStatReceiveCellsCntOvfCounters, mpIp=mpIp, mpAtmCCVccStatusDestCallKind=mpAtmCCVccStatusDestCallKind, mpAtmCCVcStatisticsTable=mpAtmCCVcStatisticsTable, mpAtmCCPvcGroupControlTable=mpAtmCCPvcGroupControlTable, mpAtmCCPortResInfoVpTunnellingConfig=mpAtmCCPortResInfoVpTunnellingConfig, mpAtmCCVccStatRegErrInfo=mpAtmCCVccStatRegErrInfo, nec=nec, RowStatus=RowStatus, mpAtmCCVpTunnelingTrapState=mpAtmCCVpTunnelingTrapState, mpAtmCCStaticPvcEntry=mpAtmCCStaticPvcEntry, mpAtmCCSoftPvpCalledOperStatus=mpAtmCCSoftPvpCalledOperStatus, mpAtmCCSoftPvpEntry=mpAtmCCSoftPvpEntry, mpAtmCCPortResInfoPortSpeed=mpAtmCCPortResInfoPortSpeed, mpAtmCCSoftPvpReceiveTrafficDescrIndex=mpAtmCCSoftPvpReceiveTrafficDescrIndex, mpAtmCCStaticPvpLowCladType=mpAtmCCStaticPvpLowCladType, mpAtmCCStaticPvcLowTransmitTrafficDescrIndex=mpAtmCCStaticPvcLowTransmitTrafficDescrIndex, mpAtmCCSoftPvpCalledCladType=mpAtmCCSoftPvpCalledCladType, mpAtmCCPathTrace=mpAtmCCPathTrace, mpAtmCCPgcCtlCountPvc=mpAtmCCPgcCtlCountPvc, mpLec=mpLec, PhysAddress=PhysAddress, mpAtmCCStaticPvpCfgStatus=mpAtmCCStaticPvpCfgStatus, mpAtmCCPortResInfoVccCounters=mpAtmCCPortResInfoVccCounters, mpAtmCCSscopTimerKeepAlive=mpAtmCCSscopTimerKeepAlive, mpAtmCCPortAlarmStatYelCcYelCounters=mpAtmCCPortAlarmStatYelCcYelCounters, mpAtmCCOuspStatRcvBufOverCounters=mpAtmCCOuspStatRcvBufOverCounters, mpAtmCCVccStatusOperStatus=mpAtmCCVccStatusOperStatus, mpAtmCCResourceControl=mpAtmCCResourceControl, mpAtmCCSoftPvcTargetVci=mpAtmCCSoftPvcTargetVci, mpAtmCCAtmMultiConfTrafficDescrIndex=mpAtmCCAtmMultiConfTrafficDescrIndex, mpAtmCCOuspStatRcvScheduleErrorCounters=mpAtmCCOuspStatRcvScheduleErrorCounters, mpAtmCCPortResInfoMaxVCC=mpAtmCCPortResInfoMaxVCC, mpAtmCCVccStatusOrgCallKind=mpAtmCCVccStatusOrgCallKind, mpAtmCCPortAlarmStatRedInfo0Counters=mpAtmCCPortAlarmStatRedInfo0Counters, mpAtmCCIlmiRetransmitInterval=mpAtmCCIlmiRetransmitInterval, mpAtmCCPathTestTable=mpAtmCCPathTestTable, mpAtmCCMuxStatDiscardCellsBufOvfCounters=mpAtmCCMuxStatDiscardCellsBufOvfCounters, mpAtmCCVpTunnellingStatisticsTable=mpAtmCCVpTunnellingStatisticsTable, mpAtmCCPvcTraceInfoCallKind=mpAtmCCPvcTraceInfoCallKind, mpAtmCCPathTestSendDirection=mpAtmCCPathTestSendDirection, mpAtmCCSoftPvpLastReleaseCause=mpAtmCCSoftPvpLastReleaseCause, mpStats=mpStats, mpAtmCCPathTestEntry=mpAtmCCPathTestEntry, mpAtmCCStaticPvpLowVpi=mpAtmCCStaticPvpLowVpi, mpAtmCCSoftPvcReceiveTrafficDescrIndex=mpAtmCCSoftPvcReceiveTrafficDescrIndex, mpAtmCCSignallingT322=mpAtmCCSignallingT322, mpAtmCCSoftPvpCalledPriority=mpAtmCCSoftPvpCalledPriority, mpAtmCCSoftPvpCalledLastReleaseDiagnostic=mpAtmCCSoftPvpCalledLastReleaseDiagnostic, mpAtmCCPhyStatB2ErrCounters=mpAtmCCPhyStatB2ErrCounters, mpAtmCCSoftPvpPgcRequest=mpAtmCCSoftPvpPgcRequest, mpAtmCCAtmMulticastRegistration=mpAtmCCAtmMulticastRegistration, mpAtmCCVpStatInCells=mpAtmCCVpStatInCells, mpAtmCCAtmMultiLeafIfIndex=mpAtmCCAtmMultiLeafIfIndex, mpAtmCCPathTestStatus=mpAtmCCPathTestStatus, mpAtmCCSoftPvcCalledTargetAddress=mpAtmCCSoftPvcCalledTargetAddress, mpAtmCCVccStatRegInCellsCounters=mpAtmCCVccStatRegInCellsCounters, mpAtmCCBwInfoPortTable=mpAtmCCBwInfoPortTable, mpAtmCCPortBwInfoTmitUsedBwCps=mpAtmCCPortBwInfoTmitUsedBwCps, mpAtmCCIlmiConfigStatus=mpAtmCCIlmiConfigStatus, DateAndTime=DateAndTime, mpAtmCCVccStatRegOutCellsCounters=mpAtmCCVccStatRegOutCellsCounters, mpAtmCCPgcPvcPriority=mpAtmCCPgcPvcPriority, dod=dod, mpAtmCCPvcTraceCtlPathKind=mpAtmCCPvcTraceCtlPathKind, mpAtmCCBwInfoPortRawBandwidthBps=mpAtmCCBwInfoPortRawBandwidthBps, mpAtmCCStaticPvpEntry=mpAtmCCStaticPvpEntry, mpAtmCCAtmMulticastCtlTable=mpAtmCCAtmMulticastCtlTable, mpAtmCCStaticPvpHighTransmitTrafficDescrIndex=mpAtmCCStaticPvpHighTransmitTrafficDescrIndex, mpAtmCCStaticPvpLowIfIndex=mpAtmCCStaticPvpLowIfIndex, mpAtmCCPortAlarmStatRedLopCounters=mpAtmCCPortAlarmStatRedLopCounters, mpRip=mpRip, mpAtmCCPvcTraceCtlStatus=mpAtmCCPvcTraceCtlStatus, mpAtmCCSoftPvcCalledTargetVpi=mpAtmCCSoftPvcCalledTargetVpi, mpPvoice=mpPvoice, mpAtmCCAtmMultiSlotNumber=mpAtmCCAtmMultiSlotNumber, mpAtmCCMuxMib=mpAtmCCMuxMib, mpAtmCCPathTestErrInfo=mpAtmCCPathTestErrInfo, mpAtmCCSoftPvpCalledTargetVpi=mpAtmCCSoftPvpCalledTargetVpi, mpAtmCCVpTunnelingOperStatus=mpAtmCCVpTunnelingOperStatus, mpAtmCCPvcTraceEntryIndex=mpAtmCCPvcTraceEntryIndex, mpAtmCCPortResInfoShaperKind=mpAtmCCPortResInfoShaperKind, mpAtmCCSignallingT399=mpAtmCCSignallingT399, mpAtmCCMuxStatDiscardCellsHTErrCntOvfCounters=mpAtmCCMuxStatDiscardCellsHTErrCntOvfCounters, NetPrefix=NetPrefix, mpAtmCCSoftPvcCfgStatus=mpAtmCCSoftPvcCfgStatus, mpAtmCCPortResInfoMinSvccVci=mpAtmCCPortResInfoMinSvccVci, mpAtmCCSoftPvcIfIndex=mpAtmCCSoftPvcIfIndex, mpAtmCCStaticPvcHighReceiveTrafficDescrIndex=mpAtmCCStaticPvcHighReceiveTrafficDescrIndex, mpAtmCCSoftPvcVpi=mpAtmCCSoftPvcVpi, mpAtmCCVpStatisticsTable=mpAtmCCVpStatisticsTable, mpAtmCCSoftPvcCalledLeafReference=mpAtmCCSoftPvcCalledLeafReference, mpAtmCCPhyStatFebeCounters=mpAtmCCPhyStatFebeCounters, mpAtmCCSoftPvpCalledLeafReference=mpAtmCCSoftPvpCalledLeafReference, mpAtmCCBwInfoPortRcvRemainBwCps=mpAtmCCBwInfoPortRcvRemainBwCps, mpAtmCCSignallingT397=mpAtmCCSignallingT397, mpAtmCCPortAlarmStatRedMsAisCounters=mpAtmCCPortAlarmStatRedMsAisCounters, mpAtmCCBwInfoPortRawBandwidthCps=mpAtmCCBwInfoPortRawBandwidthCps, necProductDepend=necProductDepend, mpAtmCCSscopCredit=mpAtmCCSscopCredit, mpAtmCCVccStatusAdminStatus=mpAtmCCVccStatusAdminStatus, mpAtmCCVpStatOutCellsCounters=mpAtmCCVpStatOutCellsCounters, mpAtmCCStaticPvcPriority=mpAtmCCStaticPvcPriority, mpAtmCCProtocolTrapInfoTable=mpAtmCCProtocolTrapInfoTable, mpAtmCCAtmMulticastConfTable=mpAtmCCAtmMulticastConfTable, mpAtmCCStatistics=mpAtmCCStatistics, mpAtmCCSoftPvcErrInfo=mpAtmCCSoftPvcErrInfo, mpAtmCCVpTunStatTmtCellsCounters=mpAtmCCVpTunStatTmtCellsCounters, mpAtmCCSignallingEntry=mpAtmCCSignallingEntry, mpAtmCCSignallingT301=mpAtmCCSignallingT301, mpAtmCCSscopTimerIdle=mpAtmCCSscopTimerIdle, mpAtmCCPgcPvcVpi=mpAtmCCPgcPvcVpi, mpAtmCCPgcPvcKind=mpAtmCCPgcPvcKind, mpAtmCCAtmMultiRootIfIndex=mpAtmCCAtmMultiRootIfIndex, mpAtmCCAtmMultiVcRdiResponse=mpAtmCCAtmMultiVcRdiResponse, mpAtmCCVpTunnelingSeverity=mpAtmCCVpTunnelingSeverity, AtmAddr=AtmAddr, mpAtmCCVccStatusDestPort=mpAtmCCVccStatusDestPort, mpAtmCCStaticPvpLowReceiveTrafficDescrIndex=mpAtmCCStaticPvpLowReceiveTrafficDescrIndex, mpAtmCCStaticPvcOperStatus=mpAtmCCStaticPvcOperStatus, mpAtmCCSoftPvcLastReleaseDiagnostic=mpAtmCCSoftPvcLastReleaseDiagnostic, mpAtmCCSoftPvpCalledTable=mpAtmCCSoftPvpCalledTable, mpAtmCCOuspStatSendScheduleErrorCounters=mpAtmCCOuspStatSendScheduleErrorCounters, mpAtmCCOuspStatRcvUnknownCellsCounters=mpAtmCCOuspStatRcvUnknownCellsCounters, mpAtmCCPgcActInfoEntry=mpAtmCCPgcActInfoEntry, mpAtmCCSoftPvpCfgStatus=mpAtmCCSoftPvpCfgStatus, mpAtmCCSoftPvcCalledCfgStatus=mpAtmCCSoftPvcCalledCfgStatus, mpAtmCCSoftPvpCalledOriginalAddress=mpAtmCCSoftPvpCalledOriginalAddress, mpAtmCCPvcTraceInfoLastSegment=mpAtmCCPvcTraceInfoLastSegment, mpAtmCCSoftPvcCalledEntry=mpAtmCCSoftPvcCalledEntry, mpAtmCCIlmiTable=mpAtmCCIlmiTable, mpAtmCCPortAlarmStatRedLinkAisCounters=mpAtmCCPortAlarmStatRedLinkAisCounters, mpAtmCCOuspStatRcvInvalidCellsCounters=mpAtmCCOuspStatRcvInvalidCellsCounters, mpAtmCCPortAlarmStatRedLcdCounters=mpAtmCCPortAlarmStatRedLcdCounters, mpAtmCCAtmMultiIfIndex=mpAtmCCAtmMultiIfIndex, mpAtmCCStaticPvpIndex=mpAtmCCStaticPvpIndex, mpAtmCCPortResInfoSvccVciHuntWay=mpAtmCCPortResInfoSvccVciHuntWay, mpAtmCCSoftPvcCalledTargetVci=mpAtmCCSoftPvcCalledTargetVci, mpAtmCCBwInfoPortRcvUsedBwCps=mpAtmCCBwInfoPortRcvUsedBwCps, mpAtmCCUpgcRegiEntry=mpAtmCCUpgcRegiEntry, mpAtmCCPgcRegiAdminStatus=mpAtmCCPgcRegiAdminStatus, mpAtmCCPortBandwidthInfomationEntry=mpAtmCCPortBandwidthInfomationEntry, mpAtmCallCtl=mpAtmCallCtl, mpAtmCCPgcRegiEntry=mpAtmCCPgcRegiEntry, mpAtmCCPortResInfoMaxVciBits=mpAtmCCPortResInfoMaxVciBits, mpAtmCCVpTunStatRcvCellsCounters=mpAtmCCVpTunStatRcvCellsCounters, mpAtmCCSoftPvcTransmitTrafficDescrIndex=mpAtmCCSoftPvcTransmitTrafficDescrIndex, mpFfr=mpFfr, mpAtmCCStaticPvcLowVpi=mpAtmCCStaticPvcLowVpi, mpAtmCCUpgcCtlCountPgc=mpAtmCCUpgcCtlCountPgc, mpAtmCCAtmMultiCtlEntry=mpAtmCCAtmMultiCtlEntry, datax=datax, mpAtmCCAtmMultiConfRootOperStatus=mpAtmCCAtmMultiConfRootOperStatus, mpAtmCCSoftPvpVpi=mpAtmCCSoftPvpVpi, mpAtmCCSoftPvcOriginalAddress=mpAtmCCSoftPvcOriginalAddress, mpAtmCCOuspStatisticsTable=mpAtmCCOuspStatisticsTable, mpAtmCCPvcTraceCtlVpi=mpAtmCCPvcTraceCtlVpi, mpAtmCCStaticPvcHighVpi=mpAtmCCStaticPvcHighVpi, mpAtmCCAtmMultiConfLeafVpTunneling=mpAtmCCAtmMultiConfLeafVpTunneling, mpAtmCCVccStatRegStatus=mpAtmCCVccStatRegStatus, mpAtmCCSoftPvcCladType=mpAtmCCSoftPvcCladType, mpAtmCCIlmiEntry=mpAtmCCIlmiEntry, mpAtmCCStaticPvpSeqNo=mpAtmCCStaticPvpSeqNo, mpAtmCCPortResourceInfomationEntry=mpAtmCCPortResourceInfomationEntry, mpAtmCCProtocolTrapInfoIndex=mpAtmCCProtocolTrapInfoIndex, mpAtmCCStaticPvcLowVci=mpAtmCCStaticPvcLowVci, mpAtmCCStaticPvpPvpId=mpAtmCCStaticPvpPvpId, mpAtmCCVpStatVpi=mpAtmCCVpStatVpi, mpAtmCCPathTestSendCellsCounters=mpAtmCCPathTestSendCellsCounters, mpAtmCCPgcStaticPvcDestIfIndex=mpAtmCCPgcStaticPvcDestIfIndex, mpEventLog=mpEventLog, mpAtmCCStaticPvcHighIfIndex=mpAtmCCStaticPvcHighIfIndex, mpAtmCCPvcGroupActiveInfoTable=mpAtmCCPvcGroupActiveInfoTable, mpAtmCCPgcPvcDestVpi=mpAtmCCPgcPvcDestVpi, mpAtmCCUnitePvcGroupControlTable=mpAtmCCUnitePvcGroupControlTable, mpAtmCCStaticPvcSeqNo=mpAtmCCStaticPvcSeqNo, mpAtmCCSoftPvpErrInfo=mpAtmCCSoftPvpErrInfo, mpAtmCCAtmMultiConfNextLeaf=mpAtmCCAtmMultiConfNextLeaf, mpAtmCCPhyStatCorrectHecErrCounters=mpAtmCCPhyStatCorrectHecErrCounters, mpAtmCCPgcPvcDestVci=mpAtmCCPgcPvcDestVci, mpAtmCCSscopTimerCc=mpAtmCCSscopTimerCc, mpAtmCCPvcTraceInfoSysName=mpAtmCCPvcTraceInfoSysName, mpAtmCCSscopTimerPoll=mpAtmCCSscopTimerPoll, mpAtmCCBwInfoPortEntry=mpAtmCCBwInfoPortEntry, mpAtmCCSoftPvpOperStatus=mpAtmCCSoftPvpOperStatus, mpAtmCCSoftPvpCalledPgcRequest=mpAtmCCSoftPvpCalledPgcRequest, mpInsCtl=mpInsCtl, mpAtmCCBaseGroup=mpAtmCCBaseGroup, mpAtmCCAtmMultiSeqNo=mpAtmCCAtmMultiSeqNo, mpDbAccess=mpDbAccess, mpAtmCCVpStatInDropCells=mpAtmCCVpStatInDropCells, mpAtmCCVccStatusOrgPort=mpAtmCCVccStatusOrgPort, datax_mib=datax_mib, mpAtmCCSoftPvpCalledAdminStatus=mpAtmCCSoftPvpCalledAdminStatus, mpAtmCCAtmMultiConfVcRdiResponse=mpAtmCCAtmMultiConfVcRdiResponse, mpAtmCCPortBwInfoVciCounters=mpAtmCCPortBwInfoVciCounters, mpAtmCCSoftPvcLastReleaseCause=mpAtmCCSoftPvcLastReleaseCause, mpAtmCCVpTunneling=mpAtmCCVpTunneling, mpAtmCCAtmMultiConfLeafVci=mpAtmCCAtmMultiConfLeafVci, mpAtmCCSoftPvcLeafReference=mpAtmCCSoftPvcLeafReference, mpAtmCCVpStatOutCells=mpAtmCCVpStatOutCells, mpAtmCCSoftPvcCalledVpi=mpAtmCCSoftPvcCalledVpi, mpAtmCCPhyStatRcvCellsCounters=mpAtmCCPhyStatRcvCellsCounters, mpAtmCCSoftPvpCalledErrInfo=mpAtmCCSoftPvpCalledErrInfo, mpAtmCCStaticPvcIndex=mpAtmCCStaticPvcIndex, mpAtmCCSoftPvcCalledIfIndex=mpAtmCCSoftPvcCalledIfIndex, mpAtmCCVcStatOutCells=mpAtmCCVcStatOutCells, mpAtmCCPvcGroupCutoverEnable=mpAtmCCPvcGroupCutoverEnable, mpAtmCCSscopTimerNoResponce=mpAtmCCSscopTimerNoResponce, mmn9120=mmn9120, mpAtmCCPhyStatisticsTable=mpAtmCCPhyStatisticsTable, mpAtmCCPgcPvcVci=mpAtmCCPgcPvcVci, mpAtmCCPgcRegiErrInfo=mpAtmCCPgcRegiErrInfo, mpAtmCCUpgcCtlResult=mpAtmCCUpgcCtlResult, internet=internet, mpAtmCCPortResInfoMaxVPC=mpAtmCCPortResInfoMaxVPC)
