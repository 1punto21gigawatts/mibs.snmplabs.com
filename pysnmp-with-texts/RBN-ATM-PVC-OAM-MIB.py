#
# PySNMP MIB module RBN-ATM-PVC-OAM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RBN-ATM-PVC-OAM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:52:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
rbnMgmt, = mibBuilder.importSymbols("RBN-SMI", "rbnMgmt")
RbnPort, RbnSlot = mibBuilder.importSymbols("RBN-TC", "RbnPort", "RbnSlot")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, IpAddress, MibIdentifier, Counter32, ModuleIdentity, Bits, Counter64, Integer32, TimeTicks, NotificationType, iso, Gauge32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "IpAddress", "MibIdentifier", "Counter32", "ModuleIdentity", "Bits", "Counter64", "Integer32", "TimeTicks", "NotificationType", "iso", "Gauge32", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
rbnAtmPvcOamMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2352, 2, 19))
rbnAtmPvcOamMib.setRevisions(('2002-11-13 00:00', '2002-02-05 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rbnAtmPvcOamMib.setRevisionsDescriptions(('Replaced the SYNTAX of rbnAtmPvcOamStatusSlot and rbnAtmPvcOamStatusPort by the textual conventions RbnSlot and RbnPort, respectively. Updated CONTACT-INFO.', 'Initial version.',))
if mibBuilder.loadTexts: rbnAtmPvcOamMib.setLastUpdated('200211130000Z')
if mibBuilder.loadTexts: rbnAtmPvcOamMib.setOrganization('Redback Networks, Inc.')
if mibBuilder.loadTexts: rbnAtmPvcOamMib.setContactInfo(' RedBack Networks, Inc. Postal: 300 Holger Way San Jose, CA 95134 USA Phone: +1 408 750 5000 Fax: +1 408 750 5599 E-mail: mib-info@redback.com ')
if mibBuilder.loadTexts: rbnAtmPvcOamMib.setDescription('Defines the objects required to monitor the ATM PVC OAM (Operation, Administration, and Maintenance) function. The OAM functionality may be enabled on one or more ATM PVCs in a system. When this functionality is enabled on a given PVC, the system will periodically generate OAM F5 end-to-end loopback cells on the PVC. The primary goal of this function is to insure that an ATM PVC is brought down if the loss of network connectivity to the remote end is detected by the failure of the F5 OAM heartbeat cell. In addition, when this function is enabled on a PVC, receipt of an incoming F5 OAM VC-AIS (Virtual Circuit - Alarm Indication Signal) cell or F5 OAM VC-RDI (Virtual Circuit - Remote Detection Indicator) cell will also cause the associated PVC to be brought down. ')
rbnAtmPvcOamMibNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 19, 0))
rbnAtmPvcOamMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 19, 1))
rbnAtmPvcOamMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 19, 2))
rbnAtmPvcOamStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 19, 1, 1), )
if mibBuilder.loadTexts: rbnAtmPvcOamStatusTable.setStatus('current')
if mibBuilder.loadTexts: rbnAtmPvcOamStatusTable.setDescription('A table which contains the status of the ATM PVC OAM function for every ATM PVC in the managed system. There will be one entry in this table for each ATM PVC active in the system, whether the PVC is statically configured or was created on-demand. ')
rbnAtmPvcOamStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 19, 1, 1, 1), ).setIndexNames((0, "RBN-ATM-PVC-OAM-MIB", "rbnAtmPvcOamStatusSlot"), (0, "RBN-ATM-PVC-OAM-MIB", "rbnAtmPvcOamStatusPort"), (0, "RBN-ATM-PVC-OAM-MIB", "rbnAtmPvcOamStatusVpi"), (0, "RBN-ATM-PVC-OAM-MIB", "rbnAtmPvcOamStatusVci"))
if mibBuilder.loadTexts: rbnAtmPvcOamStatusEntry.setStatus('current')
if mibBuilder.loadTexts: rbnAtmPvcOamStatusEntry.setDescription('An entry which contains the status of the ATM PVC OAM function for a given ATM PVC. ')
rbnAtmPvcOamStatusSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 19, 1, 1, 1, 1), RbnSlot())
if mibBuilder.loadTexts: rbnAtmPvcOamStatusSlot.setStatus('current')
if mibBuilder.loadTexts: rbnAtmPvcOamStatusSlot.setDescription('The slot containing the given ATM PVC.')
rbnAtmPvcOamStatusPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 19, 1, 1, 1, 2), RbnPort())
if mibBuilder.loadTexts: rbnAtmPvcOamStatusPort.setStatus('current')
if mibBuilder.loadTexts: rbnAtmPvcOamStatusPort.setDescription('The port containing the given ATM PVC.')
rbnAtmPvcOamStatusVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 19, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: rbnAtmPvcOamStatusVpi.setStatus('current')
if mibBuilder.loadTexts: rbnAtmPvcOamStatusVpi.setDescription('The VPI value of the given ATM PVC.')
rbnAtmPvcOamStatusVci = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 19, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: rbnAtmPvcOamStatusVci.setStatus('current')
if mibBuilder.loadTexts: rbnAtmPvcOamStatusVci.setDescription('The VCI value of the given ATM PVC.')
rbnAtmPvcOamStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 19, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noOam", 1), ("oamUp", 2), ("oamDownLoopback", 3), ("oamDownAis", 4), ("oamDownRdi", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnAtmPvcOamStatusState.setStatus('current')
if mibBuilder.loadTexts: rbnAtmPvcOamStatusState.setDescription('The state of the ATM PVC OAM function on a given ATM PVC. A value of noOam indicates the ATM PVC OAM function is not active on the given ATM PVC A value of oamUp indicates the ATM PVC OAM function is active on the given ATM PVC and no failure condition is currently being detected on the circuit A value of oamDownLoopback indicates the ATM PVC OAM function is active on the given ATM PVC and F5 OAM loopback cell management has detected a fault on the circuit A value of oamDownAis indicates the ATM PVC OAM function is active on the given ATM PVC and a VC-AIS cell was recently received which indicates a fault on the circuit A value of oamDownRdi indicates the ATM PVC OAM function is active on the given ATM PVC and a VC-RDI cell was recently received which indicates a fault on the circuit ')
rbnAtmPvcOamStatusStateChange = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 19, 0, 1)).setObjects(("RBN-ATM-PVC-OAM-MIB", "rbnAtmPvcOamStatusState"))
if mibBuilder.loadTexts: rbnAtmPvcOamStatusStateChange.setStatus('current')
if mibBuilder.loadTexts: rbnAtmPvcOamStatusStateChange.setDescription('A notification indicating that the state of an ATM PVC has transitioned as a result of the ATM PVC OAM function. This notification will be sent if the value of rbnAtmPvcOamStatusState transitions from oamUp to any of the three oamDown values, or if it transitions from any of the three oamDown values to oamUp. ')
rbnAtmPvcOamCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 19, 2, 1))
rbnAtmPvcOamGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 19, 2, 2))
rbnAtmPvcOamCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 19, 2, 1, 1)).setObjects(("RBN-ATM-PVC-OAM-MIB", "rbnAtmPvcOamGroup"), ("RBN-ATM-PVC-OAM-MIB", "rbnAtmPvcOamNotifyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnAtmPvcOamCompliance = rbnAtmPvcOamCompliance.setStatus('current')
if mibBuilder.loadTexts: rbnAtmPvcOamCompliance.setDescription('The compliance statement for SNMP entities which implement the Redback ATM PVC OAM MIB.')
rbnAtmPvcOamGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 19, 2, 2, 1)).setObjects(("RBN-ATM-PVC-OAM-MIB", "rbnAtmPvcOamStatusState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnAtmPvcOamGroup = rbnAtmPvcOamGroup.setStatus('current')
if mibBuilder.loadTexts: rbnAtmPvcOamGroup.setDescription('The collection of objects which allow monitoring of the ATM PVC OAM function.')
rbnAtmPvcOamNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2352, 2, 19, 2, 2, 2)).setObjects(("RBN-ATM-PVC-OAM-MIB", "rbnAtmPvcOamStatusStateChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnAtmPvcOamNotifyGroup = rbnAtmPvcOamNotifyGroup.setStatus('current')
if mibBuilder.loadTexts: rbnAtmPvcOamNotifyGroup.setDescription('The collection of notifications which allow monitoring of the ATM PVC OAM function.')
mibBuilder.exportSymbols("RBN-ATM-PVC-OAM-MIB", rbnAtmPvcOamNotifyGroup=rbnAtmPvcOamNotifyGroup, PYSNMP_MODULE_ID=rbnAtmPvcOamMib, rbnAtmPvcOamMib=rbnAtmPvcOamMib, rbnAtmPvcOamStatusState=rbnAtmPvcOamStatusState, rbnAtmPvcOamStatusVpi=rbnAtmPvcOamStatusVpi, rbnAtmPvcOamStatusSlot=rbnAtmPvcOamStatusSlot, rbnAtmPvcOamStatusStateChange=rbnAtmPvcOamStatusStateChange, rbnAtmPvcOamMibNotifications=rbnAtmPvcOamMibNotifications, rbnAtmPvcOamMibConformance=rbnAtmPvcOamMibConformance, rbnAtmPvcOamStatusTable=rbnAtmPvcOamStatusTable, rbnAtmPvcOamStatusPort=rbnAtmPvcOamStatusPort, rbnAtmPvcOamStatusVci=rbnAtmPvcOamStatusVci, rbnAtmPvcOamMibObjects=rbnAtmPvcOamMibObjects, rbnAtmPvcOamGroups=rbnAtmPvcOamGroups, rbnAtmPvcOamCompliance=rbnAtmPvcOamCompliance, rbnAtmPvcOamGroup=rbnAtmPvcOamGroup, rbnAtmPvcOamStatusEntry=rbnAtmPvcOamStatusEntry, rbnAtmPvcOamCompliances=rbnAtmPvcOamCompliances)
