#
# PySNMP MIB module SNARLSNMP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SNARLSNMP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:08:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Opaque, Counter64, Gauge32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ModuleIdentity, TimeTicks, enterprises, NotificationType, NotificationType, ObjectIdentity, Integer32, iso, IpAddress, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Opaque", "Counter64", "Gauge32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ModuleIdentity", "TimeTicks", "enterprises", "NotificationType", "NotificationType", "ObjectIdentity", "Integer32", "iso", "IpAddress", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
snarlsnmp = ModuleIdentity((1, 3, 6, 1, 4, 1, 15553))
if mibBuilder.loadTexts: snarlsnmp.setLastUpdated('200212141400Z')
if mibBuilder.loadTexts: snarlsnmp.setOrganization('SnarlSNMP Dynamic Web Application Monitor Developers Group')
if mibBuilder.loadTexts: snarlsnmp.setContactInfo('http://snarl-snmp.org')
if mibBuilder.loadTexts: snarlsnmp.setDescription('SnarlSNMP is an application to monitor dynamic web pages')
class TruthValue(TextualConvention, Integer32):
    description = 'True is a boolean one and false is a bolean zero'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("false", 0), ("true", 1))

class Comparative(TextualConvention, Integer32):
    description = 'True is a boolean one and false is a bolean zero'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1))
    namedValues = NamedValues(("smaller", -1), ("equal", 0), ("bigger", 1))

class AgeComparative(TextualConvention, Integer32):
    description = 'True is a boolean one and false is a bolean zero'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 1))
    namedValues = NamedValues(("smaller", -1), ("equal", 0), ("bigger", 1))

class Float(TextualConvention, Opaque):
    description = "A single precision floating-point number. The semantics and encoding are identical for type 'single' defined in IEEE Standard for Binary Floating-Point, ANSI/IEEE Std 754-1985. The value is restricted to the BER serialization of the following ASN.1 type: FLOATTYPE ::= [120] IMPLICIT FloatType (note: the value 120 is the sum of '30'h and '48'h) The BER serialization of the length for values of this type must use the definite length, short encoding form. For example, the BER serialization of value 123 of type FLOATTYPE is '9f780442f60000'h. (The tag is '9f78'h; the length is '04'h; and the value is '42f60000'h.) The BER serialization of value '9f780442f60000'h of data type Opaque is '44079f780442f60000'h. (The tag is '44'h; the length is '07'h; and the value is '9f780442f60000'h."
    status = 'current'
    subtypeSpec = Opaque.subtypeSpec + ValueSizeConstraint(7, 7)
    fixedLength = 7

snarl = MibIdentifier((1, 3, 6, 1, 4, 1, 15553, 1))
snarlGlobalInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 15553, 1, 1))
snarlTotalTaskCount = MibScalar((1, 3, 6, 1, 4, 1, 15553, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snarlTotalTaskCount.setStatus('current')
if mibBuilder.loadTexts: snarlTotalTaskCount.setDescription('The total number of configured tasks within snarl')
snarlTotalTransfers = MibScalar((1, 3, 6, 1, 4, 1, 15553, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snarlTotalTransfers.setStatus('current')
if mibBuilder.loadTexts: snarlTotalTransfers.setDescription('The total number of transfers done.')
snarlTotalTransferVolume = MibScalar((1, 3, 6, 1, 4, 1, 15553, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snarlTotalTransferVolume.setStatus('current')
if mibBuilder.loadTexts: snarlTotalTransferVolume.setDescription('The total transfer volume in number of bytes.')
siteTable = MibTable((1, 3, 6, 1, 4, 1, 15553, 1, 2), )
if mibBuilder.loadTexts: siteTable.setStatus('current')
if mibBuilder.loadTexts: siteTable.setDescription('The table of monitored URLs.')
siteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1), ).setIndexNames((0, "SNARLSNMP-MIB", "siteIndex"))
if mibBuilder.loadTexts: siteEntry.setStatus('current')
if mibBuilder.loadTexts: siteEntry.setDescription('The data table of one monitored URL.')
siteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteIndex.setStatus('current')
if mibBuilder.loadTexts: siteIndex.setDescription('The index number for this task.')
siteName = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteName.setStatus('current')
if mibBuilder.loadTexts: siteName.setDescription('The group name of the site directive this task belongs to.')
siteID = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteID.setStatus('current')
if mibBuilder.loadTexts: siteID.setDescription('The URL ID of this task.')
siteInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteInterval.setStatus('current')
if mibBuilder.loadTexts: siteInterval.setDescription('The interval between two consecutive checks in seconds.')
siteURL = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteURL.setStatus('current')
if mibBuilder.loadTexts: siteURL.setDescription('The URL in full notation.')
siteDynamicURLRegexPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteDynamicURLRegexPattern.setStatus('current')
if mibBuilder.loadTexts: siteDynamicURLRegexPattern.setDescription('The regular expression pattern to be applied when searching for a URL in a downloaded document.')
siteDynmaicURLRegexCompilation = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteDynmaicURLRegexCompilation.setStatus('current')
if mibBuilder.loadTexts: siteDynmaicURLRegexCompilation.setDescription('The result of the regular expression compilation.')
siteDynmaicURLRegexError = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteDynmaicURLRegexError.setStatus('current')
if mibBuilder.loadTexts: siteDynmaicURLRegexError.setDescription('The error code of the regular expression match')
siteDynamicURL = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteDynamicURL.setStatus('current')
if mibBuilder.loadTexts: siteDynamicURL.setDescription('The dynamic URL that was fetched from another document for this task.')
siteGetDynamicURLFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteGetDynamicURLFrom.setStatus('current')
if mibBuilder.loadTexts: siteGetDynamicURLFrom.setDescription('The task Id from which to fetch the dynamic URL.')
siteProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteProxy.setStatus('current')
if mibBuilder.loadTexts: siteProxy.setDescription('The access method of the URL - direct (empty) or via proxy.')
siteMultiFormData = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteMultiFormData.setStatus('current')
if mibBuilder.loadTexts: siteMultiFormData.setDescription('The multi form data for a http POST oeration.')
siteFormData = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteFormData.setStatus('current')
if mibBuilder.loadTexts: siteFormData.setDescription('The effective multi form data for a http POST oeration, containing dynamically appended data.')
siteEffectiveURL = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteEffectiveURL.setStatus('current')
if mibBuilder.loadTexts: siteEffectiveURL.setDescription("The effective URL, it my differ from siteURL by following http redirects or by fetching dynamic URL's.")
siteURLHTTPCode = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteURLHTTPCode.setStatus('current')
if mibBuilder.loadTexts: siteURLHTTPCode.setDescription('The result code of the last http operation with the main URL of this task.')
sitePerformanceDNS = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sitePerformanceDNS.setStatus('current')
if mibBuilder.loadTexts: sitePerformanceDNS.setDescription('The cumulative elapsed time for the DNS lookup in milliseconds. This time is the sum of all DNS lookup times when following http redirects.')
sitePerformanceConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sitePerformanceConnect.setStatus('current')
if mibBuilder.loadTexts: sitePerformanceConnect.setDescription('The cumulative elapsed time until the connection was established. This time is the sum of all connection times when following http redirects.')
sitePerformanceFirstByte = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sitePerformanceFirstByte.setStatus('current')
if mibBuilder.loadTexts: sitePerformanceFirstByte.setDescription('The time elapsed until the first byte was received in milliseconds. This time is the sum of all elapsed first byte reception times when following http redirects.')
sitePerformanceTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sitePerformanceTotal.setStatus('current')
if mibBuilder.loadTexts: sitePerformanceTotal.setDescription('The total time elapsed until the transaction is over. This time is absolute for the last transaction only.')
sitePerformanceTotalWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sitePerformanceTotalWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: sitePerformanceTotalWarningThreshold.setDescription('The threshold in ms for when a WARNING trap will be sent.')
sitePerformanceTotalCriticalThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sitePerformanceTotalCriticalThreshold.setStatus('current')
if mibBuilder.loadTexts: sitePerformanceTotalCriticalThreshold.setDescription('The threshold in ms for when a CRITICAL trap will be sent.')
siteRegexPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteRegexPattern.setStatus('current')
if mibBuilder.loadTexts: siteRegexPattern.setDescription('The regular expression for a pattern match on the contents of the URL.')
siteRegexCompilation = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteRegexCompilation.setStatus('current')
if mibBuilder.loadTexts: siteRegexCompilation.setDescription('The result of the regular expression compilation for the URL content match regular expression.')
siteRegexPatternMatchFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteRegexPatternMatchFlag.setStatus('current')
if mibBuilder.loadTexts: siteRegexPatternMatchFlag.setDescription('Flag 0 (false) means no match, 1 (true) means match.')
siteRegexPatternAlertOnMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 25), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteRegexPatternAlertOnMatch.setStatus('current')
if mibBuilder.loadTexts: siteRegexPatternAlertOnMatch.setDescription('If true a trap will be sent if URL content matches regular expression. If false a trap will be sent if URL content does not match regular expression.')
siteContentMatchSize = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteContentMatchSize.setStatus('current')
if mibBuilder.loadTexts: siteContentMatchSize.setDescription('The static size of the URL to be matched.')
siteContentActualSize = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteContentActualSize.setStatus('current')
if mibBuilder.loadTexts: siteContentActualSize.setDescription('The actual size of the downloaded URL.')
siteContentSizeMatchFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 28), Comparative()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteContentSizeMatchFlag.setStatus('current')
if mibBuilder.loadTexts: siteContentSizeMatchFlag.setDescription('Flag 0 (smaller) means URL content size is smaller than siteContentMatchSize, Flag 1 (equal) means URL content size is of same siteContentMatchSize, Flag 2 (bigger) means URL content size is bigger than siteContentMatchSize. ')
siteContentSizeAlertOnMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 29), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteContentSizeAlertOnMatch.setStatus('current')
if mibBuilder.loadTexts: siteContentSizeAlertOnMatch.setDescription('If true a trap will be sent if URL content size matches. If false a trap will be sent if URL content size does not match.')
siteURLContentPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteURLContentPattern.setStatus('current')
if mibBuilder.loadTexts: siteURLContentPattern.setDescription('The URL of the contents to be matched against the contents of this URL.')
siteURLContentPatternMatchFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 31), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteURLContentPatternMatchFlag.setStatus('current')
if mibBuilder.loadTexts: siteURLContentPatternMatchFlag.setDescription('Flag 0 (false) means no match, Flag 1 (true) means contents matches.')
siteURLContentPatternAlertOnMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 32), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteURLContentPatternAlertOnMatch.setStatus('current')
if mibBuilder.loadTexts: siteURLContentPatternAlertOnMatch.setDescription('If true a trap will be sent if both URL contents match. If false a trap will be sent if both URL contents do not match.')
siteURLContentPatternProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteURLContentPatternProxy.setStatus('current')
if mibBuilder.loadTexts: siteURLContentPatternProxy.setDescription('The proxy for URL of siteURLContentPattern.')
siteURLContentPatternHTTPCode = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteURLContentPatternHTTPCode.setStatus('current')
if mibBuilder.loadTexts: siteURLContentPatternHTTPCode.setDescription('The result code of the last http operation with the siteURLContentPattern URL of this task.')
siteURLSize = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteURLSize.setStatus('current')
if mibBuilder.loadTexts: siteURLSize.setDescription('The URL which content size in number of bytes needs to be matched against the content size in number of bytes of this URL.')
siteURLSizeMatchFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 36), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteURLSizeMatchFlag.setStatus('current')
if mibBuilder.loadTexts: siteURLSizeMatchFlag.setDescription('Flag 0 (false) means contents size of URL matches the size in number of bytes of this URL. Flag 1 (true) means contents size of URL does not match the content size in number of bytes of this URL, ')
siteURLSizeAlertOnMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 37), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteURLSizeAlertOnMatch.setStatus('current')
if mibBuilder.loadTexts: siteURLSizeAlertOnMatch.setDescription('Flag 1 (true) means a trap will be sent if both URL content sizes in number of bytes match. Flag 0 (false) means a trap will be sent if both URL content sizes in number of bytes do not match.')
siteURLSizeProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 38), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteURLSizeProxy.setStatus('current')
if mibBuilder.loadTexts: siteURLSizeProxy.setDescription('The proxy for URL of siteURLSize.')
siteURLSizeHTTPCode = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteURLSizeHTTPCode.setStatus('current')
if mibBuilder.loadTexts: siteURLSizeHTTPCode.setDescription('he result code of the last http operation with the siteURLSize URL of this task.')
siteFetchRegex = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 40), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteFetchRegex.setStatus('current')
if mibBuilder.loadTexts: siteFetchRegex.setDescription('The regular expression to be matched against the content of this URL. The regular expression match result is kept in siteFetchRegexSubResult 0 - 3 for subpatterns.')
siteFetchRegexCompilationError = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 41), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteFetchRegexCompilationError.setStatus('current')
if mibBuilder.loadTexts: siteFetchRegexCompilationError.setDescription('The result of the regular expression compilation for the siteFetchRegex regular expression.')
siteFetchRegexMatchingError = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 42), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteFetchRegexMatchingError.setStatus('current')
if mibBuilder.loadTexts: siteFetchRegexMatchingError.setDescription('The error message for the regular expression match for the siteFetchRegex regular expression.')
siteFetchRegexSubResult0 = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 43), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteFetchRegexSubResult0.setStatus('current')
if mibBuilder.loadTexts: siteFetchRegexSubResult0.setDescription('The siteFetchRegex sub pattern 0.')
siteFetchRegexSubResult1 = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 44), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteFetchRegexSubResult1.setStatus('current')
if mibBuilder.loadTexts: siteFetchRegexSubResult1.setDescription('The siteFetchRegex sub pattern 1.')
siteFetchRegexSubResult2 = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 45), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteFetchRegexSubResult2.setStatus('current')
if mibBuilder.loadTexts: siteFetchRegexSubResult2.setDescription('The siteFetchRegex sub pattern 2.')
siteFetchRegexSubResult3 = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 46), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteFetchRegexSubResult3.setStatus('current')
if mibBuilder.loadTexts: siteFetchRegexSubResult3.setDescription('The siteFetchRegex sub pattern 3.')
siteFetchRegexSubResult4 = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 47), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteFetchRegexSubResult4.setStatus('current')
if mibBuilder.loadTexts: siteFetchRegexSubResult4.setDescription('The siteFetchRegex sub pattern 4.')
siteFetchRegexSubResult5 = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 48), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteFetchRegexSubResult5.setStatus('current')
if mibBuilder.loadTexts: siteFetchRegexSubResult5.setDescription('The siteFetchRegex sub pattern 5.')
siteFetchRegexSubResult6 = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 49), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteFetchRegexSubResult6.setStatus('current')
if mibBuilder.loadTexts: siteFetchRegexSubResult6.setDescription('The siteFetchRegex sub pattern 6.')
siteFetchRegexSubResult7 = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 50), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteFetchRegexSubResult7.setStatus('current')
if mibBuilder.loadTexts: siteFetchRegexSubResult7.setDescription('The siteFetchRegex sub pattern 7.')
siteAppendRegexResultFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 51), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteAppendRegexResultFrom.setStatus('current')
if mibBuilder.loadTexts: siteAppendRegexResultFrom.setDescription('The ID of the URL within this group from that a regular expression match result should be appended to the main URL of this task.')
siteAppendRegexResultFromIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteAppendRegexResultFromIndex.setStatus('current')
if mibBuilder.loadTexts: siteAppendRegexResultFromIndex.setDescription('The index 0 - 7 for the regular expression sub pattern result that should be appended to the main URL of this task.')
siteNumericalRegexSubMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteNumericalRegexSubMatch.setStatus('current')
if mibBuilder.loadTexts: siteNumericalRegexSubMatch.setDescription('The index number of the regular expression match result from the FetchRegex directive to be used in this numerical match.')
siteNumericalPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 54), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteNumericalPattern.setStatus('current')
if mibBuilder.loadTexts: siteNumericalPattern.setDescription('The number in string form to compare with the siteNumericalRegexSubMatch.')
siteNumericalAlertOn = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 55), Comparative()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteNumericalAlertOn.setStatus('current')
if mibBuilder.loadTexts: siteNumericalAlertOn.setDescription('The action code for alerting smaller, equal or bigger.')
siteFileTime = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteFileTime.setStatus('current')
if mibBuilder.loadTexts: siteFileTime.setDescription('The time this downloaded file time was created. (if supported by respective protocol).')
siteDateAgeRegexConstruct = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 57), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteDateAgeRegexConstruct.setStatus('current')
if mibBuilder.loadTexts: siteDateAgeRegexConstruct.setDescription('The string constructed from static text and the submatches from FetchRegex. (Example: $2/$1/$3)')
siteDateAgePattern = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 58), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteDateAgePattern.setStatus('current')
if mibBuilder.loadTexts: siteDateAgePattern.setDescription('The amount of time in string form to compare with the sitedateAgeRegexCandidate.')
siteDateAgeAlertOn = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 59), AgeComparative()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteDateAgeAlertOn.setStatus('current')
if mibBuilder.loadTexts: siteDateAgeAlertOn.setDescription('The action code for alerting younger, equal or older')
siteTaskSuspendStart = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 60), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteTaskSuspendStart.setStatus('current')
if mibBuilder.loadTexts: siteTaskSuspendStart.setDescription('Next time this task will be suspended.')
siteTaskSuspendEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 61), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteTaskSuspendEnd.setStatus('current')
if mibBuilder.loadTexts: siteTaskSuspendEnd.setDescription('Next time this task will be reactivated vom suspension.')
siteStatusNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 62), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteStatusNormal.setStatus('current')
if mibBuilder.loadTexts: siteStatusNormal.setDescription('True if this task is currently at status NORMAL false if at other status.')
siteStatusWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 63), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteStatusWarning.setStatus('current')
if mibBuilder.loadTexts: siteStatusWarning.setDescription('True if this task is currently at status WARNING or CRITICAL false if at other status.')
siteStatusCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 64), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteStatusCritical.setStatus('current')
if mibBuilder.loadTexts: siteStatusCritical.setDescription('True if this task is currently at status CRITICAL false if at other status.')
siteGroupStatusNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 65), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteGroupStatusNormal.setStatus('current')
if mibBuilder.loadTexts: siteGroupStatusNormal.setDescription('True if the group this task belongs to is currently at status NORMAL false if at other status.')
siteGroupStatusWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 66), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteGroupStatusWarning.setStatus('current')
if mibBuilder.loadTexts: siteGroupStatusWarning.setDescription('True if the group this task belongs to is currently at status WARNING or CRITICAL false if at other status.')
siteGroupStatusCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 67), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteGroupStatusCritical.setStatus('current')
if mibBuilder.loadTexts: siteGroupStatusCritical.setDescription('True if the group this task belongs to is currently at status CRITICAL false if at other status.')
siteReliability = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 68), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteReliability.setStatus('current')
if mibBuilder.loadTexts: siteReliability.setDescription('The reliability measure for this task measured in (accumulated time at status WARNING + accumulated time at status CRITICAL) divided by (accumulated running time of this task) * 10000.')
siteMTBWarnings = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 69), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteMTBWarnings.setStatus('current')
if mibBuilder.loadTexts: siteMTBWarnings.setDescription('The mean time between status WARNING measure for this task measured in (accumulated time between status WARNING) divided by (accumulated different WARNINGs - 1).')
siteMTTRWarnings = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 70), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteMTTRWarnings.setStatus('current')
if mibBuilder.loadTexts: siteMTTRWarnings.setDescription('The mean time to repair WARNINGs measure for this task measured in (accumulated time of status WARNING) divided by (accumulated different WARNINGs).')
siteAccumulatedWarnings = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteAccumulatedWarnings.setStatus('current')
if mibBuilder.loadTexts: siteAccumulatedWarnings.setDescription('The number of accumulated different WARNINGs this task generated. ')
siteMTBCriticals = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 72), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteMTBCriticals.setStatus('current')
if mibBuilder.loadTexts: siteMTBCriticals.setDescription('The mean time between status CRITICAL measure for this task measured in (accumulated time between status CRITICAL) divided by (accumulated different CRITICALs - 1)')
siteMTTRCriticals = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 73), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteMTTRCriticals.setStatus('current')
if mibBuilder.loadTexts: siteMTTRCriticals.setDescription('The mean time to repair CRITICALs measure for this task measured in (accumulated time of status CRITICAL) divided by (accumulated different CRITICALs)')
siteAccumulatedCriticals = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 74), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteAccumulatedCriticals.setStatus('current')
if mibBuilder.loadTexts: siteAccumulatedCriticals.setDescription('The number of accumulated different CRITICALs this task generated. ')
siteGroupReliability = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 75), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteGroupReliability.setStatus('current')
if mibBuilder.loadTexts: siteGroupReliability.setDescription('The reliability measure for this group measured in (accumulated time at status WARNING + accumulated time at status CRITICAL) divided by (accumulated running time of this group) * 10000')
siteGroupMTBWarnings = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 76), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteGroupMTBWarnings.setStatus('current')
if mibBuilder.loadTexts: siteGroupMTBWarnings.setDescription('The mean time between status WARNING measure for this group measured in (accumulated time between status WARNING) divided by (accumulated different WARNINGs - 1)')
siteGroupMTTRWarnings = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 77), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteGroupMTTRWarnings.setStatus('current')
if mibBuilder.loadTexts: siteGroupMTTRWarnings.setDescription('The mean time to repair WARNINGs measure for this group measured in (accumulated time of status WARNING) divided by (accumulated different WARNINGs)')
siteGroupAccumulatedWarnings = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 78), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteGroupAccumulatedWarnings.setStatus('current')
if mibBuilder.loadTexts: siteGroupAccumulatedWarnings.setDescription('The number of accumulated different WARNINGs this group generated. ')
siteGroupMTBCriticals = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 79), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteGroupMTBCriticals.setStatus('current')
if mibBuilder.loadTexts: siteGroupMTBCriticals.setDescription('The mean time between status CRITICAL measure for this group measured in (accumulated time between status CRITICAL) divided by (accumulated different CRITICALs)')
siteGroupMTTRCriticals = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 80), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteGroupMTTRCriticals.setStatus('current')
if mibBuilder.loadTexts: siteGroupMTTRCriticals.setDescription('The mean time to repair CRITICALs measure for this group measured in (accumulated time of status CRITICAL) divided by (accumulated different CRITICALs)')
siteGroupAccumulatedCriticals = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteGroupAccumulatedCriticals.setStatus('current')
if mibBuilder.loadTexts: siteGroupAccumulatedCriticals.setDescription('The number of accumulated different CRITICALs this group generated. ')
siteLastRunRelativeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 82), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteLastRunRelativeTime.setStatus('current')
if mibBuilder.loadTexts: siteLastRunRelativeTime.setDescription('The last time this task actively conducted tests in timeticks ago.')
siteLastRunAbsTimeString = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 83), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteLastRunAbsTimeString.setStatus('current')
if mibBuilder.loadTexts: siteLastRunAbsTimeString.setDescription('The last absolute time this task actively conducted tests in string form.')
siteNextRunRelativeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 84), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteNextRunRelativeTime.setStatus('current')
if mibBuilder.loadTexts: siteNextRunRelativeTime.setDescription('The next time this task will actively conduct tests in timeticks to go.')
siteNextRunAbsTimeString = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 85), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteNextRunAbsTimeString.setStatus('current')
if mibBuilder.loadTexts: siteNextRunAbsTimeString.setDescription('The next absolute time this task will actively conduct tests in string form.')
siteFirstRun = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 86), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteFirstRun.setStatus('current')
if mibBuilder.loadTexts: siteFirstRun.setDescription('The time epoch of this task. This is the time when this task started.')
siteTotalTransfers = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 87), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteTotalTransfers.setStatus('current')
if mibBuilder.loadTexts: siteTotalTransfers.setDescription('The total number of transfers for this task.')
siteTotalTransferVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 15553, 1, 2, 1, 88), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteTotalTransferVolume.setStatus('current')
if mibBuilder.loadTexts: siteTotalTransferVolume.setDescription('The total transfer volume for this task mod (2 to power of 32).')
groupStatus = MibScalar((1, 3, 6, 1, 4, 1, 15553, 1, 100), Integer32())
if mibBuilder.loadTexts: groupStatus.setStatus('current')
if mibBuilder.loadTexts: groupStatus.setDescription('The group status in variable bound to a trap.')
proxyStatus = MibScalar((1, 3, 6, 1, 4, 1, 15553, 1, 101), Integer32())
if mibBuilder.loadTexts: proxyStatus.setStatus('current')
if mibBuilder.loadTexts: proxyStatus.setDescription('The proxy status in variable bound to a trap.')
siteStatus = MibScalar((1, 3, 6, 1, 4, 1, 15553, 1, 102), Integer32())
if mibBuilder.loadTexts: siteStatus.setStatus('current')
if mibBuilder.loadTexts: siteStatus.setDescription('The site status in variable bound to a trap.')
subTaskID = MibScalar((1, 3, 6, 1, 4, 1, 15553, 1, 103), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("general", 1), ("performance", 2), ("httpCode", 3), ("matchRegex", 4), ("matchSize", 5), ("urlSizeMatch", 6), ("urlContentMatch", 7), ("numericalMatch", 8), ("dateAgeMatch", 9), ("suspension", 10), ("warmStart", 11), ("coldStart", 12), ("heartBeat", 13), ("syncRequest", 14))))
if mibBuilder.loadTexts: subTaskID.setStatus('current')
if mibBuilder.loadTexts: subTaskID.setDescription('The subTaskID in variable bound to a trap.')
eventTime = MibScalar((1, 3, 6, 1, 4, 1, 15553, 1, 104), Integer32())
if mibBuilder.loadTexts: eventTime.setStatus('current')
if mibBuilder.loadTexts: eventTime.setDescription('The unix time in variable bound to a trap.')
siteTrapMessage = MibScalar((1, 3, 6, 1, 4, 1, 15553, 1, 105), DisplayString())
if mibBuilder.loadTexts: siteTrapMessage.setStatus('current')
if mibBuilder.loadTexts: siteTrapMessage.setDescription('The status message of the trap.')
snarlsnmpInfo = NotificationType((1, 3, 6, 1, 4, 1, 15553) + (0,1)).setObjects(("SNARLSNMP-MIB", "siteIndex"), ("SNARLSNMP-MIB", "subTaskID"), ("SNARLSNMP-MIB", "siteTrapMessage"), ("SNARLSNMP-MIB", "groupStatus"), ("SNARLSNMP-MIB", "siteName"), ("SNARLSNMP-MIB", "siteID"), ("SNARLSNMP-MIB", "siteProxy"), ("SNARLSNMP-MIB", "eventTime"), ("SNARLSNMP-MIB", "siteStatus"), ("SNARLSNMP-MIB", "proxyStatus"))
if mibBuilder.loadTexts: snarlsnmpInfo.setDescription('An snarlsnmpInfo trap signifies that the sending protocol entity has undergone minor run changes that usually require no special attention. The information given in this trap are mainly for logging purposes')
snarlsnmpNormal = NotificationType((1, 3, 6, 1, 4, 1, 15553) + (0,2)).setObjects(("SNARLSNMP-MIB", "siteIndex"), ("SNARLSNMP-MIB", "subTaskID"), ("SNARLSNMP-MIB", "siteTrapMessage"), ("SNARLSNMP-MIB", "groupStatus"), ("SNARLSNMP-MIB", "siteName"), ("SNARLSNMP-MIB", "siteID"), ("SNARLSNMP-MIB", "siteProxy"), ("SNARLSNMP-MIB", "eventTime"), ("SNARLSNMP-MIB", "siteStatus"), ("SNARLSNMP-MIB", "proxyStatus"))
if mibBuilder.loadTexts: snarlsnmpNormal.setDescription('An snarlsnmpNormal trap signifies that the sending protocol entity is working properly')
snarlsnmpWarning = NotificationType((1, 3, 6, 1, 4, 1, 15553) + (0,3)).setObjects(("SNARLSNMP-MIB", "siteIndex"), ("SNARLSNMP-MIB", "subTaskID"), ("SNARLSNMP-MIB", "siteTrapMessage"), ("SNARLSNMP-MIB", "groupStatus"), ("SNARLSNMP-MIB", "siteName"), ("SNARLSNMP-MIB", "siteID"), ("SNARLSNMP-MIB", "siteProxy"), ("SNARLSNMP-MIB", "eventTime"), ("SNARLSNMP-MIB", "siteStatus"), ("SNARLSNMP-MIB", "proxyStatus"))
if mibBuilder.loadTexts: snarlsnmpWarning.setDescription('An snarlsnmpWarning trap signifies that the sending protocol entity is impaired and requires attention')
snarlsnmpCritical = NotificationType((1, 3, 6, 1, 4, 1, 15553) + (0,4)).setObjects(("SNARLSNMP-MIB", "siteIndex"), ("SNARLSNMP-MIB", "subTaskID"), ("SNARLSNMP-MIB", "siteTrapMessage"), ("SNARLSNMP-MIB", "groupStatus"), ("SNARLSNMP-MIB", "siteName"), ("SNARLSNMP-MIB", "siteID"), ("SNARLSNMP-MIB", "siteProxy"), ("SNARLSNMP-MIB", "eventTime"), ("SNARLSNMP-MIB", "siteStatus"), ("SNARLSNMP-MIB", "proxyStatus"))
if mibBuilder.loadTexts: snarlsnmpCritical.setDescription('An snarlsnmpCritical trap signifies that the sending protocol entity is having major problems and need immediate attention')
snarlsnmpSuspended = NotificationType((1, 3, 6, 1, 4, 1, 15553) + (0,5)).setObjects(("SNARLSNMP-MIB", "siteIndex"), ("SNARLSNMP-MIB", "subTaskID"), ("SNARLSNMP-MIB", "siteTrapMessage"), ("SNARLSNMP-MIB", "groupStatus"), ("SNARLSNMP-MIB", "siteName"), ("SNARLSNMP-MIB", "siteID"), ("SNARLSNMP-MIB", "siteProxy"), ("SNARLSNMP-MIB", "eventTime"), ("SNARLSNMP-MIB", "siteStatus"), ("SNARLSNMP-MIB", "proxyStatus"))
if mibBuilder.loadTexts: snarlsnmpSuspended.setDescription('An snarlsnmpSuspended signfies that the sending task is about to be suspended')
snarlsnmpResumed = NotificationType((1, 3, 6, 1, 4, 1, 15553) + (0,6)).setObjects(("SNARLSNMP-MIB", "siteIndex"), ("SNARLSNMP-MIB", "subTaskID"), ("SNARLSNMP-MIB", "siteTrapMessage"), ("SNARLSNMP-MIB", "groupStatus"), ("SNARLSNMP-MIB", "siteName"), ("SNARLSNMP-MIB", "siteID"), ("SNARLSNMP-MIB", "siteProxy"), ("SNARLSNMP-MIB", "eventTime"), ("SNARLSNMP-MIB", "siteStatus"), ("SNARLSNMP-MIB", "proxyStatus"))
if mibBuilder.loadTexts: snarlsnmpResumed.setDescription('An snarlsnmpResumed trap signfies that the sending task is about to resume from suspension')
snarlsnmpGenericInfo = NotificationType((1, 3, 6, 1, 4, 1, 15553) + (0,7)).setObjects(("SNARLSNMP-MIB", "siteIndex"), ("SNARLSNMP-MIB", "subTaskID"), ("SNARLSNMP-MIB", "siteTrapMessage"), ("SNARLSNMP-MIB", "groupStatus"), ("SNARLSNMP-MIB", "siteName"), ("SNARLSNMP-MIB", "siteID"), ("SNARLSNMP-MIB", "siteProxy"), ("SNARLSNMP-MIB", "eventTime"), ("SNARLSNMP-MIB", "siteStatus"), ("SNARLSNMP-MIB", "proxyStatus"))
if mibBuilder.loadTexts: snarlsnmpGenericInfo.setDescription('An snarlsnmpGenericInfo trap signifies that the sending protocol entity sends logging information')
snarlsnmpStateUnknown = NotificationType((1, 3, 6, 1, 4, 1, 15553) + (0,8)).setObjects(("SNARLSNMP-MIB", "siteIndex"), ("SNARLSNMP-MIB", "subTaskID"), ("SNARLSNMP-MIB", "siteTrapMessage"), ("SNARLSNMP-MIB", "groupStatus"), ("SNARLSNMP-MIB", "siteName"), ("SNARLSNMP-MIB", "siteID"), ("SNARLSNMP-MIB", "siteProxy"), ("SNARLSNMP-MIB", "eventTime"), ("SNARLSNMP-MIB", "siteStatus"), ("SNARLSNMP-MIB", "proxyStatus"))
if mibBuilder.loadTexts: snarlsnmpStateUnknown.setDescription('An snarlsnmpStateUnknown trap signifies that the sending protocol entity is undefined state')
mibBuilder.exportSymbols("SNARLSNMP-MIB", snarlsnmpNormal=snarlsnmpNormal, siteTotalTransfers=siteTotalTransfers, siteURLSizeAlertOnMatch=siteURLSizeAlertOnMatch, snarlTotalTransferVolume=snarlTotalTransferVolume, siteURLContentPatternHTTPCode=siteURLContentPatternHTTPCode, siteAppendRegexResultFromIndex=siteAppendRegexResultFromIndex, sitePerformanceTotalCriticalThreshold=sitePerformanceTotalCriticalThreshold, siteInterval=siteInterval, siteMultiFormData=siteMultiFormData, siteNumericalPattern=siteNumericalPattern, siteMTBWarnings=siteMTBWarnings, siteLastRunRelativeTime=siteLastRunRelativeTime, PYSNMP_MODULE_ID=snarlsnmp, sitePerformanceTotalWarningThreshold=sitePerformanceTotalWarningThreshold, siteTaskSuspendEnd=siteTaskSuspendEnd, siteLastRunAbsTimeString=siteLastRunAbsTimeString, snarlTotalTransfers=snarlTotalTransfers, siteURLSizeProxy=siteURLSizeProxy, siteGroupMTBCriticals=siteGroupMTBCriticals, siteURLContentPattern=siteURLContentPattern, siteFetchRegexCompilationError=siteFetchRegexCompilationError, siteMTTRCriticals=siteMTTRCriticals, siteName=siteName, siteProxy=siteProxy, siteRegexCompilation=siteRegexCompilation, siteFormData=siteFormData, siteContentSizeMatchFlag=siteContentSizeMatchFlag, snarlsnmpGenericInfo=snarlsnmpGenericInfo, Comparative=Comparative, snarlTotalTaskCount=snarlTotalTaskCount, eventTime=eventTime, siteStatusCritical=siteStatusCritical, siteFetchRegexSubResult1=siteFetchRegexSubResult1, siteMTTRWarnings=siteMTTRWarnings, sitePerformanceDNS=sitePerformanceDNS, TruthValue=TruthValue, siteAccumulatedWarnings=siteAccumulatedWarnings, siteFetchRegexSubResult7=siteFetchRegexSubResult7, siteGroupAccumulatedWarnings=siteGroupAccumulatedWarnings, siteGroupStatusNormal=siteGroupStatusNormal, subTaskID=subTaskID, siteContentSizeAlertOnMatch=siteContentSizeAlertOnMatch, siteGroupReliability=siteGroupReliability, siteGetDynamicURLFrom=siteGetDynamicURLFrom, siteDateAgePattern=siteDateAgePattern, siteFetchRegexSubResult0=siteFetchRegexSubResult0, siteURLSize=siteURLSize, siteStatusWarning=siteStatusWarning, siteDynamicURL=siteDynamicURL, siteReliability=siteReliability, siteGroupStatusWarning=siteGroupStatusWarning, siteAccumulatedCriticals=siteAccumulatedCriticals, siteDynamicURLRegexPattern=siteDynamicURLRegexPattern, siteTaskSuspendStart=siteTaskSuspendStart, siteID=siteID, snarlsnmpStateUnknown=snarlsnmpStateUnknown, siteEffectiveURL=siteEffectiveURL, siteNumericalAlertOn=siteNumericalAlertOn, siteEntry=siteEntry, AgeComparative=AgeComparative, siteDynmaicURLRegexError=siteDynmaicURLRegexError, siteRegexPatternMatchFlag=siteRegexPatternMatchFlag, siteURLHTTPCode=siteURLHTTPCode, Float=Float, snarlsnmp=snarlsnmp, siteURL=siteURL, siteFirstRun=siteFirstRun, siteDateAgeAlertOn=siteDateAgeAlertOn, sitePerformanceTotal=sitePerformanceTotal, siteURLSizeMatchFlag=siteURLSizeMatchFlag, snarlsnmpInfo=snarlsnmpInfo, siteGroupMTTRWarnings=siteGroupMTTRWarnings, siteGroupStatusCritical=siteGroupStatusCritical, sitePerformanceConnect=sitePerformanceConnect, sitePerformanceFirstByte=sitePerformanceFirstByte, siteContentMatchSize=siteContentMatchSize, snarlGlobalInfo=snarlGlobalInfo, siteFetchRegexSubResult6=siteFetchRegexSubResult6, groupStatus=groupStatus, siteGroupMTTRCriticals=siteGroupMTTRCriticals, siteFileTime=siteFileTime, siteURLContentPatternMatchFlag=siteURLContentPatternMatchFlag, snarlsnmpCritical=snarlsnmpCritical, siteDateAgeRegexConstruct=siteDateAgeRegexConstruct, siteURLSizeHTTPCode=siteURLSizeHTTPCode, siteStatus=siteStatus, snarl=snarl, snarlsnmpResumed=snarlsnmpResumed, siteTotalTransferVolume=siteTotalTransferVolume, siteNumericalRegexSubMatch=siteNumericalRegexSubMatch, siteFetchRegexSubResult2=siteFetchRegexSubResult2, siteNextRunAbsTimeString=siteNextRunAbsTimeString, siteFetchRegexSubResult5=siteFetchRegexSubResult5, siteTable=siteTable, siteMTBCriticals=siteMTBCriticals, siteContentActualSize=siteContentActualSize, siteFetchRegexMatchingError=siteFetchRegexMatchingError, siteFetchRegexSubResult4=siteFetchRegexSubResult4, siteURLContentPatternProxy=siteURLContentPatternProxy, snarlsnmpWarning=snarlsnmpWarning, siteRegexPatternAlertOnMatch=siteRegexPatternAlertOnMatch, siteFetchRegexSubResult3=siteFetchRegexSubResult3, siteStatusNormal=siteStatusNormal, siteRegexPattern=siteRegexPattern, siteIndex=siteIndex, siteGroupAccumulatedCriticals=siteGroupAccumulatedCriticals, siteNextRunRelativeTime=siteNextRunRelativeTime, siteGroupMTBWarnings=siteGroupMTBWarnings, siteFetchRegex=siteFetchRegex, snarlsnmpSuspended=snarlsnmpSuspended, proxyStatus=proxyStatus, siteDynmaicURLRegexCompilation=siteDynmaicURLRegexCompilation, siteTrapMessage=siteTrapMessage, siteAppendRegexResultFrom=siteAppendRegexResultFrom, siteURLContentPatternAlertOnMatch=siteURLContentPatternAlertOnMatch)
