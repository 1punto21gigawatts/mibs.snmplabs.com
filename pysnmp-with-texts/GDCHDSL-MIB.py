#
# PySNMP MIB module GDCHDSL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GDCHDSL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:18:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
SCinstance, = mibBuilder.importSymbols("GDCMACRO-MIB", "SCinstance")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, TimeTicks, Integer32, Unsigned32, MibIdentifier, enterprises, Bits, IpAddress, iso, Gauge32, Counter32, Counter64, ModuleIdentity, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "TimeTicks", "Integer32", "Unsigned32", "MibIdentifier", "enterprises", "Bits", "IpAddress", "iso", "Gauge32", "Counter32", "Counter64", "ModuleIdentity", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
gdc = MibIdentifier((1, 3, 6, 1, 4, 1, 498))
hdsl = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11))
gdcHdslSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 1))
hdsl700G2 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 2))
hdsl700G3 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 3))
hdsl730D1 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 4))
hdsl730D2 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 5))
hdsl720G1 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 6))
hdsl720G2 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 7))
hdsl702G2 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 8))
hdsl710D2 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 9))
hdsl700G2RP = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 10))
hdsl710D2RP = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 11))
hdsl720G2RP = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 12))
hdsl730D2RP = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 13))
hdsl701T2 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 14))
hdsl701T2RP = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 15))
hdsl721T1 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 16))
hdsl721T2 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 17))
hdsl721T2RP = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 18))
hdsl731D1 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 19))
hdsl731D2 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 20))
hdsl731D2RP = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 21))
hdsl700AG2 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 22))
hdsl700AG2NZ = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 23))
hdslGT1030 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 25))
hdslGT2030 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 26))
uas7722 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 27))
hdslGT1020 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 28))
hdslGT2020 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 29))
hdsl711D2 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 30))
gdcHdslVersion = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 1, 1))
gdcHdslMaintenance = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 1, 2))
gdcHdslConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 1, 3))
gdcHdslDiagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 1, 4))
gdcHdslPerformance = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 1, 5))
gdcHdslStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 1, 6))
gdcHdslDiagnosticResults = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 1, 7))
gdcFractional = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 1, 8))
gdcHdslAlarmThresholds = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 11, 1, 9))
gdcHdslSystemMIBversion = MibScalar((1, 3, 6, 1, 4, 1, 498, 11, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslSystemMIBversion.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslSystemMIBversion.setDescription("Identifies the version of the MIB. The format of the version is x.yzT, where 'x' identifies the major revision number, 'y' identifies the minor revision number, 'z' identifies the typographical revision, and T identifies the test revision. Acceptable values for the individual revision components are as follows: x: 1 - 9 y: 0 - 9 z: 0 - 9 T: A - Z Upon formal release, no designation for the test revision will be present.")
gdcHdslVersionTable = MibTable((1, 3, 6, 1, 4, 1, 498, 11, 1, 1, 2), )
if mibBuilder.loadTexts: gdcHdslVersionTable.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslVersionTable.setDescription(' ')
gdcHdslVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 11, 1, 1, 2, 1), ).setIndexNames((0, "GDCHDSL-MIB", "gdcHdslVersionIndex"))
if mibBuilder.loadTexts: gdcHdslVersionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslVersionEntry.setDescription('An entry in the GDC Hdsl Version Table.')
gdcHdslVersionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 1, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslVersionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslVersionIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable. This has the form of a SCinstance which defines the slot, line, drop, and sub-identifier. The table describes the maintenance objects for the unit and references the unit interface (cc = 00).')
gdcHdslFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslFirmwareRev.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslFirmwareRev.setDescription('The version number of the firmware, to allow products to know which revision is installed. The released version number is sequenced from , A-, ... AA, ... ZZ. Test versions are numerical from 01 to 99.')
gdcHdslModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslModelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslModelNumber.setDescription('This variable is used to determine the type of card family installed ex. ')
gdcHdslDownloadTable = MibTable((1, 3, 6, 1, 4, 1, 498, 11, 1, 1, 3), )
if mibBuilder.loadTexts: gdcHdslDownloadTable.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslDownloadTable.setDescription('The Hdsl download table ')
gdcHdslDownloadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 11, 1, 1, 3, 1), ).setIndexNames((0, "GDCHDSL-MIB", "gdcHdslDownloadIndex"))
if mibBuilder.loadTexts: gdcHdslDownloadEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslDownloadEntry.setDescription('An entry in the GDC gdcHdslSystem Download Table.')
gdcHdslDownloadIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 1, 3, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslDownloadIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslDownloadIndex.setDescription('Integer value which uniquely identifies the GDCHDSL to which this entry is applicable. SCinstance is defined to be SLDi where: S (byte value) - physical shelf slot location (01-32) L (byte value) - line number (01) D (byte value) - drop number (00-31) i (byte value) - loop or interface number (00-03)')
gdcHdslActiveFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslActiveFirmwareRev.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslActiveFirmwareRev.setDescription('The version number of the firmware currently executing. The format is MM.NN.BB where: MM: Major Revision (0-99) NN: Minor Revision (0-99) BB: Bug Fix Revision (0-99) Valid [i]nterface = 0')
gdcHdslStoredFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslStoredFirmwareRev.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslStoredFirmwareRev.setDescription('The version number of the firmware stored (in a compressed format) but not currently executing. MM: Major Revision (0-99) NN: Minor Revision (0-99) BB: Bug Fix Revision (0-99) Valid [i]nterface = 0')
gdcHdslStoredFirmwareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("statBlank", 1), ("statDownLoading", 2), ("statOK", 3), ("statCheckSumBad", 4), ("statUnZipping", 5), ("statBadUnZip", 6), ("statDownloadAborted", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslStoredFirmwareStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslStoredFirmwareStatus.setDescription('This object represents the state of the Non-Active or Stored firmware: statBlank(1) Factory Default statDownLoading(2) In process of downloading firmware statOK(3) Zipped version checksum succesful (OK to switch) (can set gdcHdslSwitchActiveFirmware to switchActive(2)) statCheckSumBad(4) Failed checksum after download statUnZipping(5) In process of uncompressing into active area statBadUnZip(6) Failed last uncompress statDownloadAborted(7) Download aborted by user Valid [i]nterface = 0')
gdcHdslSwitchActiveFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("switchNorm", 1), ("switchActive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslSwitchActiveFirmware.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslSwitchActiveFirmware.setDescription('This object is used to switch the active executing firmware from the version in gdcHdslActiveFirmwareRev to the version in gdcHdslStoredFirmwareRev. When a switchActive(2) is set (write only) the element will: 1) reboot 2) uncompress stored code into active area 3) perform checksum on active area 4) Set gdcHdslStoredStatus object to indicate results 5) If succesfull: update gdcHdslActiveFirmwareRev and gdcHdslStoredFirmwareRev and begin executing If failed: replace active area with previous revision The switchNorm(1) enumeration will always be read. Setting switchActive(2) when the gdcHdslStoredFirmwareStatus is not statOK(3) will result in an error. Valid [i]nterface = 0')
gdcHdslDownloadingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disableAll", 1), ("enableAndWait", 2), ("enableAndSwitch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslDownloadingMode.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslDownloadingMode.setDescription('This object is used to configure the download mode: disableAll(1) Prevents any firmware downloading to GDCHDSL enableAndWait(2) Allows downloading zipped code to be stored only! enableAndSwitch(3) Allows downloading and then unzips and begins executing the new code Valid [i]nterface = 0')
gdcHdslEraseFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("erase", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslEraseFlash.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslEraseFlash.setDescription('A set of this object to erase(2) will erase the application stored in flash. After setting this object, there should be a delay of at least 2 minutes before downloading the unit.')
gdcHdslMaintenanceTable = MibTable((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1), )
if mibBuilder.loadTexts: gdcHdslMaintenanceTable.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslMaintenanceTable.setDescription('The table describes the maintenance objects for the unit and references the unit interface (cc = 00).')
gdcHdslMaintenanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1), ).setIndexNames((0, "GDCHDSL-MIB", "gdcHdslMaintenanceLineIndex"))
if mibBuilder.loadTexts: gdcHdslMaintenanceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslMaintenanceEntry.setDescription('An entry in the GDC HDSL Maintenance Configuration Table.')
gdcHdslMaintenanceLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslMaintenanceLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslMaintenanceLineIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable. This has the form of a SCinstance which defines the slot, line, drop, and sub-identifier. The table describes the maintenance objects for the unit and references the unit interface (cc = 00).')
gdcHdslSoftReset = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("norm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslSoftReset.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslSoftReset.setDescription('Supports the action of soft resetting the unit. When this object is set to reset(1), then the unit performs a soft reset, whose meaning is specific to the type of unit being managed. The value norm(2) can not be set by management.')
gdcHdslConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("software", 1), ("hardware", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslConfigMode.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslConfigMode.setDescription('The hardware configuration mode of the unit. A unit may be configured through hardware switches, jumper, straps, etc. The value software(1) indicates that the unit is software configurable. The value of hardware(2) indicates that some options are hard configured and that software configuration is not permitted of these options.')
gdcHdslSysUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslSysUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslSysUpTime.setDescription('This variable is used to report the elapsed system tick time for conversion to real time at the controller and is not related to the sysUpTime referenced in MIB-II. Upon power-up of the unit, the elapsed time is cleared. The elapsed time counter rolls over upon reaching the maximum count.')
gdcHdslUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ltu", 1), ("ntu", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslUnitType.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslUnitType.setDescription(' This variable is used to define HDSL unit type. When this object is set to ltu(1), the unit is a Line Terminating Unit and serves as master. When this object is set to ntu(2), the unit is a network terminating unit.')
gdcHdslDefaultInit = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("factoryDefault", 1), ("normal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslDefaultInit.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslDefaultInit.setDescription('This is used to allow the NonVolatile Configuration to be set to a factory default state. When this value is set to factoryDefault(1) the unit will perform a reset to make the default configuration take affect. The value of normal(2) will be returned when the initialization is complete. The value normal(2) can not be set by management.')
gdcHdslDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("voice", 1), ("data", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslDataType.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslDataType.setDescription(' This variable is used to define the HDSL data type. When this object is set to data(2) the data pass through the unit is digital data. When is set to voice(1) the data pass rhrough the unit is voice data. ')
gdcHdslLoopProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pointopoint", 1), ("pointomultipoint", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslLoopProvision.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslLoopProvision.setDescription(' This variable is used to define HDSL unit loop provision. When this variable is set to pointopoint(1), the unit is connected to another HDSL unit. When is set to pointomultipoint(2), the unit is connected to more than one other HDSL units or data grooming. ')
gdcHdslNumberofLoops = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("oneLoop", 1), ("twoLoops", 2), ("threeLoops", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslNumberofLoops.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslNumberofLoops.setDescription(' This variable is used to define HDSL unit loop configuration. It can be set for one to threee loops.')
gdcHdslFrontPanel = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inhibit", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslFrontPanel.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslFrontPanel.setDescription(' This variable is used to define the front Panel operation.')
gdcHdslRoutingConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("twoLoops", 1), ("threeLoops", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslRoutingConfig.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslRoutingConfig.setDescription(' This variable is used to define HDSL ......')
gdcHdslPrivateStorage1 = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslPrivateStorage1.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslPrivateStorage1.setDescription(' This variable is used for general purpose storage.')
gdcHdslPrivateStorage2 = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslPrivateStorage2.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslPrivateStorage2.setDescription(' This variable is used for general purpose storage.')
gdcHdslPrivateStorage3 = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslPrivateStorage3.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslPrivateStorage3.setDescription(' This variable is used for general purpose storage.')
gdcHdslLedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslLedStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslLedStatus.setDescription('Returns a bitwise snapshot of the front panel LED state. Octet 1 bit 7 - not used bit 6 - not used bit 5 - not used bit 4 - not used bit 3 - NORM E1 bit 2 - ES E1 bit 1 - AL bit 0 - TM Octet 2 bit 7 - not used bit 6 - not used bit 5 - NORM L3 bit 4 - ES L3 bit 3 - NORM L2 bit 2 - ES L2 bit 1 - NORM L1 bit 0 - ES L1')
fracExecution = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("execute", 1), ("norm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fracExecution.setStatus('mandatory')
if mibBuilder.loadTexts: fracExecution.setDescription(' For Set, only execute is allowed.')
gdcHdslAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslAlarmStatus.setDescription('The current alarms of the unit without the alarm masks.')
gdcHdslV54Config = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inhibit", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslV54Config.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslV54Config.setDescription('This object selects the ability of the unit to recognize V.54 pattern. Only applicable to DC730 & DC731 units.')
gdcHdslFPRDLConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("eoc", 1), ("v54", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslFPRDLConfig.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslFPRDLConfig.setDescription('This object selects the pattern to be transmitted when RDL test is selected via the front panel RDL switch. Only applicable to DC730 & DC731 units.')
gdcHdslRLTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("mins10", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslRLTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslRLTimeOut.setDescription('This object selects the RLTimeOut to be disabled(1) or set to 10 minutes(2). Only applicable to SC710D2 units.')
gdcHdslRPEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inhibit", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslRPEnable.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslRPEnable.setDescription('This object selects the Remote power to be enabled(2) or disabled(1). Only applicable RP products which are on the shelf.')
gdcHdslLedStatus1 = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 2, 1, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslLedStatus1.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslLedStatus1.setDescription('Returns a bitwise snapshot of the front panel LED state. This mib object is only used for the new HDSl elements. Octet 1 bit 7 - not used bit 6 - EIA RD bit 5 - EIA CO bit 4 - EIA RS bit 3 - NORM E1/T1 NORM bit 2 - ES E1/T1 ER bit 1 - AL bit 0 - TM Octet 2 bit 7 - not used bit 6 - EIA SD bit 5 - NORM L3 bit 4 - ES L3 bit 3 - NORM L2 bit 2 - ES L2 bit 1 - NORM L1 bit 0 - ES L1 Octet 3 bit 7 - not used bit 6 - not used bit 5 - ST (GT10xx, GT20xx) bit 4 - RL (GT10xx, GT20xx) bit 3 - LL (GT10xx, GT20xx) bit 2 - INS (uas7722) bit 1 - RPF FAULT bit 0 - RPF NORM ')
gdcHdslE1ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 1), )
if mibBuilder.loadTexts: gdcHdslE1ConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslE1ConfigTable.setDescription('The GDC E1 Configuration table. Information in the entries of this table are used to configure E1 interface.')
gdcHdslE1ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 1, 1), ).setIndexNames((0, "GDCHDSL-MIB", "gdcHdslE1ConfigIndex"))
if mibBuilder.loadTexts: gdcHdslE1ConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslE1ConfigEntry.setDescription('The GDC E1 Configuration table entry. The information in this entry augments are used to configure E1 interface. ')
gdcHdslE1ConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslE1ConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslE1ConfigIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable. This has the form of a SCinstance which defines the slot, line, drop, and sub-identifier. In which this case is an E1 interface (cc=01).')
gdcHdslE1FramingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("framed", 1), ("unframed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslE1FramingMode.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslE1FramingMode.setDescription(' This variable is used to determine E1 framing mode. ')
gdcHdslE1LineUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tlu", 1), ("ilu", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslE1LineUnit.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslE1LineUnit.setDescription(' This variable is used to determine operating mode of the HDSL system with respect to E1 trunk. When this variable is set to tlu(1), the system operates as a termination line unit. When this variable is set to ilu(2) the system operates as an intermediate line unit.')
gdcHdslE1LineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ami", 1), ("hdb3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslE1LineCoding.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslE1LineCoding.setDescription('This variable describes the variety of Zero Code Suppression used on the link, which in turn affects a number of its characteristics. E1 links, with or without CRC, use HDB3 or AMI. AMI refers to a mode wherein no zero code suppression is present and the line encoding does not solve the problem directly. In this application, the higher layer must provide data which meets or exceeds the pulse density re- quirements, such as inverting HDLC data.')
gdcHdslDteConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 2), )
if mibBuilder.loadTexts: gdcHdslDteConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslDteConfigTable.setDescription('The GDC DTE Configuration table. ')
gdcHdslDteConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 2, 1), ).setIndexNames((0, "GDCHDSL-MIB", "gdcHdslDteConfigIndex"))
if mibBuilder.loadTexts: gdcHdslDteConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslDteConfigEntry.setDescription('The GDC DTE Configuration table entry. ')
gdcHdslDteConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslDteConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslDteConfigIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable. This has the form of a SCinstance which defines the slot, line, drop. ')
gdcHdslDteCtsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forcedOn", 1), ("onWithRts", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslDteCtsMode.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslDteCtsMode.setDescription(' This variable controls the function of CTS. ')
gdcHdslDteDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslDteDataRate.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslDteDataRate.setDescription(' This variable represents the DTE data Rate in 64K increments.')
gdcHdslDteTxClkSource = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("externalTiming", 1), ("internalTiming", 2), ("loopTiming", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslDteTxClkSource.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslDteTxClkSource.setDescription("The source of Tranmit Clock. 'ExternalTiming' indicates that recovered re- ceive clock from another interface is used as the transmit clock. 'InternalTiming' indicates that a local clock source is used. 'loopTiming' indicates that the recovered re- ceive clock is used as the transmit clock.")
gdcHdslT1ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 3), )
if mibBuilder.loadTexts: gdcHdslT1ConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslT1ConfigTable.setDescription('The GDC T1 Configuration table. Information in the entries of this table are used to configure T1 interface.')
gdcHdslT1ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 3, 1), ).setIndexNames((0, "GDCHDSL-MIB", "gdcHdslT1ConfigIndex"))
if mibBuilder.loadTexts: gdcHdslT1ConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslT1ConfigEntry.setDescription('The GDC T1 Configuration table entry. The information in this entry augments are used to configure T1 interface. ')
gdcHdslT1ConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 3, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslT1ConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslT1ConfigIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable. This has the form of a SCinstance which defines the slot, line, drop, and sub-identifier. In which this case is an T1 interface (cc=01).')
gdcHdslT1InterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dsx1", 1), ("ds1", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslT1InterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslT1InterfaceType.setDescription('This variable is used to set T1 Interface Type ')
gdcHdslT1FramingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("esfANSI", 1), ("esf54016", 2), ("sf", 3), ("unframed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslT1FramingMode.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslT1FramingMode.setDescription(' This variable is used to determine T1 framing mode. ')
gdcHdslT1TxPreequalization = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("preq0to133ft", 1), ("preq133to266ft", 2), ("preq266to399ft", 3), ("preq399to533ft", 4), ("preq533to655ft", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslT1TxPreequalization.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslT1TxPreequalization.setDescription('This variable is used to set T1 Tx Line Preequalization ')
gdcHdslT1TxBulidOut = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bo0dB", 1), ("bo75dB", 2), ("bo150dB", 3), ("bo225dB", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslT1TxBulidOut.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslT1TxBulidOut.setDescription('This variable is used to set T1 Tx Line Bulid Out ')
gdcHdslT1InbandLBType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inhibit", 1), ("lineloopback", 2), ("payloadloopback", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslT1InbandLBType.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslT1InbandLBType.setDescription('This variable is used to set T1 Inband LoopBack Type or Inhibit(1) this loopback')
gdcHdslT1FDLMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslT1FDLMode.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslT1FDLMode.setDescription('This variable is used to enable/disable T1 FDL Mode')
gdcHdslT1AISLoopdownTime = MibScalar((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inhibit", 1), ("ld5secs", 2), ("ld10secs", 3), ("ld20secs", 4), ("ld40secs", 5), ("ld60secs", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslT1AISLoopdownTime.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslT1AISLoopdownTime.setDescription('This variable is used to set T1 AIS Loopdown Time ')
gdcHdslT1LineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ami", 1), ("b8zs", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslT1LineCoding.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslT1LineCoding.setDescription('This variable describes the variety of Zero Code Suppression used on the link, which in turn affects a number of its characteristics. E1 links, with or without CRC, use HDB3 or AMI. AMI refers to a mode wherein no zero code suppression is present and the line encoding does not solve the problem directly. In this application, the higher layer must provide data which meets or exceeds the pulse density re- quirements, such as inverting HDLC data.')
gdcHdslT1TxClkSource = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("externalTiming", 1), ("internalTiming", 2), ("loopTiming", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslT1TxClkSource.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslT1TxClkSource.setDescription("The source of Tranmit Clock. 'ExternalTiming' indicates that recovered re- ceive clock from another interface is used as the transmit clock. 'InternalTiming' indicates that a local clock source is used. 'loopTiming' indicates that the recovered re- ceive clock is used as the transmit clock.")
gdcHdslDiagTable = MibTable((1, 3, 6, 1, 4, 1, 498, 11, 1, 4, 1), )
if mibBuilder.loadTexts: gdcHdslDiagTable.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslDiagTable.setDescription('The GDC HDSL Diagnostics table. ')
gdcHdslDiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 11, 1, 4, 1, 1), ).setIndexNames((0, "GDCHDSL-MIB", "gdcHdslDiagIndex"))
if mibBuilder.loadTexts: gdcHdslDiagEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslDiagEntry.setDescription('The GDC HDSL Diagnostics table entry. ')
gdcHdslDiagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 4, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslDiagIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslDiagIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable. This has the form of a SCinstance which defines the slot, line, drop, and sub-identifier, which in this case is a network interface.')
gdcHdslLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7))).clone(namedValues=NamedValues(("noLoop", 1), ("lineLoop", 2), ("localLoop", 3), ("lineandlocalLoop", 4), ("dataLoop", 6), ("remoteLoop", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslLoopback.setDescription(' This variable supports the action of a diagnostic loop at the point indicated. dataLoop & remoteLoop are only supported by uas7722 ')
gdcHdslBertTest = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inhibit", 1), ("enable", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslBertTest.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslBertTest.setDescription(' This variable supports the action of Bit error rate test. When set to inhibit(1) no bert test is in process. When set to enable (2) BERT is in process')
gdcHdslDiagResultsTable = MibTable((1, 3, 6, 1, 4, 1, 498, 11, 1, 7, 1), )
if mibBuilder.loadTexts: gdcHdslDiagResultsTable.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslDiagResultsTable.setDescription('The GDC HDSL Diagnostics table. ')
gdcHdslDiagResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 11, 1, 7, 1, 1), ).setIndexNames((0, "GDCHDSL-MIB", "gdcHdslDiagResultsIndex"))
if mibBuilder.loadTexts: gdcHdslDiagResultsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslDiagResultsEntry.setDescription('The GDC HDSL Diagnostics table entry. ')
gdcHdslDiagResultsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 7, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslDiagResultsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslDiagResultsIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable. This has the form of a SCinstance which defines the slot, line, drop, and sub-identifier, which in this case is a network interface.')
gdcHdslTestExecutionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inSync", 1), ("notInSync", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslTestExecutionStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslTestExecutionStatus.setDescription('The current execution status of the diagnostic test. When set to inSync(1), BERT test is in sync and BER rate is valid. When set to notInSync(2), BERT test is not in Sync and BER rate is not valid. ')
gdcHdslDiagResultErr = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslDiagResultErr.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslDiagResultErr.setDescription('The results of the last diagnostic test. This can be the current test running or the last completed test. Note that the interpretation of these results may be affected by the value of the gdcTestExecutionStatus object.')
gdcHdslDiagResultInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslDiagResultInterval.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslDiagResultInterval.setDescription('This variable represents the Ber test intervals. A time interval is defined as the time required for transmission of a block of 2^24 bits. ')
gdcHdslV54RDLTest = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notInV54Test", 1), ("txV54Test", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslV54RDLTest.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslV54RDLTest.setDescription('This variable indicates that the front panel RL button is selected and transmitting a V54 pattern. Applicable only to DC730 units.')
gdcHdslCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 1), )
if mibBuilder.loadTexts: gdcHdslCurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslCurrentTable.setDescription('The GDC Hdsl Current Performance table. Information in the entries of this table support the HDSL Scheduled Performance Reports.')
gdcHdslCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 1, 1), ).setIndexNames((0, "GDCHDSL-MIB", "gdcHdslCurrentIndex"))
if mibBuilder.loadTexts: gdcHdslCurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslCurrentEntry.setDescription('An entry in the Current table.')
gdcHdslCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslCurrentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslCurrentIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable. This has the form of a SCinstance which defines the slot, line, drop, and interface, which in this case can be an E1 or Loop interface.')
gdcHdslCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslCurrentESs.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslCurrentESs.setDescription('The number of Errored Seconds, encountered by an E1 or Loop interface in the current 15 minute inter- val.')
gdcHdslCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslCurrentSESs.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslCurrentSESs.setDescription('The number of Severely Errored Seconds encoun- tered by a Loop or E1 interface in the current 15 minute interval.')
gdcHdslCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslCurrentUASs.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslCurrentUASs.setDescription('The number of Unavailable Seconds encountered by a Loop or E1 interface in the current 15 minute in- terval.')
gdcHdslCurrentDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslCurrentDMs.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslCurrentDMs.setDescription('The number of Degraded Minutes (DMs) encoun- tered by a Loop or E1 interface in the current 15 minute interval.')
gdcHdslCurrentFEBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslCurrentFEBEs.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslCurrentFEBEs.setDescription('The number of Far End Block Errors encountered by a Loop or E1 interface in the current 15 minute interval.')
gdcHdslCurrentStats = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslCurrentStats.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslCurrentStats.setDescription("The number of Current ES, SES, UAS, DM and FEBE's encountered by a Loop or E1 interface in the current 15 minute interval.")
gdcHdslIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 2), )
if mibBuilder.loadTexts: gdcHdslIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslIntervalTable.setDescription('The Loop or E1 Interval table.')
gdcHdslIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 2, 1), ).setIndexNames((0, "GDCHDSL-MIB", "gdcHdslIntervalIndex"), (0, "GDCHDSL-MIB", "gdcHdslIntervalNumber"))
if mibBuilder.loadTexts: gdcHdslIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslIntervalEntry.setDescription('An entry in the Interval table.')
gdcHdslIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslIntervalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslIntervalIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable. This has the form of a SCinstance which defines the slot, line, drop, and interface, which in this case is a Loop or E1 interface.')
gdcHdslIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslIntervalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslIntervalNumber.setDescription('A number between 1 and 96, where 1 is the most recently completed 15 minute interval and 96 is the least recently completed 15 minutes inter- val (assuming that all 96 intervals are valid).')
gdcHdslIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslIntervalESs.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslIntervalESs.setDescription('The number of Errored Seconds encountered by a Loop or E1 interface in one of the previous 96, indi- vidual 15 minute, intervals.')
gdcHdslIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslIntervalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslIntervalSESs.setDescription('The number of Severely Errored Seconds encoun- tered by a Loop or E1 interface in one of the previous 96, individual 15 minute, intervals.')
gdcHdslIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslIntervalUASs.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslIntervalUASs.setDescription('The number of Unavailable Seconds encountered by a Loop or E1 interface in one of the previous 96, individual 15 minute, intervals.')
gdcHdslIntervalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslIntervalDMs.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslIntervalDMs.setDescription('The number of Degraded Minutes (DMs) encoun- tered by a Loop or E1 interface in one of the previous 96, individual 15 minute, intervals.')
gdcHdslIntervalFEBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslIntervalFEBEs.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslIntervalFEBEs.setDescription(' This variable represents the HDSL loops Far end block errors.')
gdcHdslIntervalStats = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslIntervalStats.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslIntervalStats.setDescription(' This variable represents stats at the HDSL loops.')
gdcHdslTotalTable = MibTable((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 3), )
if mibBuilder.loadTexts: gdcHdslTotalTable.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslTotalTable.setDescription('The GDC HDSL Total Performance table. Information in the entries of this table support the HDSL Scheduled Performance Reports. 24 hour interval.')
gdcHdslTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 3, 1), ).setIndexNames((0, "GDCHDSL-MIB", "gdcHdslTotalIndex"))
if mibBuilder.loadTexts: gdcHdslTotalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslTotalEntry.setDescription('An entry in the Total table.')
gdcHdslTotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 3, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslTotalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslTotalIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable. This has the form of a SCinstance which defines the slot, line, drop, and interface, which in this case is a Loop or E1 interface.')
gdcHdslTotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslTotalESs.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslTotalESs.setDescription('The number of Errored Seconds encountered by a Loop or E1interface in the previous 24 hour interval')
gdcHdslTotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslTotalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslTotalSESs.setDescription('The number of Severely Errored Seconds encoun- tered by a Loop or E1 interface in the previous 24 hour interval.')
gdcHdslTotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslTotalUASs.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslTotalUASs.setDescription('The number of Unavailable Seconds encountered by a Loop or E1 interface in the previous 24 hour in- terval.')
gdcHdslTotalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslTotalDMs.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslTotalDMs.setDescription('The number of Degraded Minutes (DMs) encoun- tered by a Loop or E1 interface in the previous 24 hour interval.')
gdcHdslTotalFEBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslTotalFEBEs.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslTotalFEBEs.setDescription('The number of Far End Block Errors en- countered by a Loop or E1 interface in the current 15 minute interval.')
gdcHdslTotalStats = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslTotalStats.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslTotalStats.setDescription('The number of Total stats encountered by a Loop or E1 interface in the current 15 minute interval.')
gdcHdslIntervalMaintenanceTable = MibTable((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 4), )
if mibBuilder.loadTexts: gdcHdslIntervalMaintenanceTable.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslIntervalMaintenanceTable.setDescription('The GDC Loop/E1/T1 Interval table. ')
gdcHdslIntervalMaintenanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 4, 1), ).setIndexNames((0, "GDCHDSL-MIB", "gdcHdslIntervalMaintenanceIndex"))
if mibBuilder.loadTexts: gdcHdslIntervalMaintenanceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslIntervalMaintenanceEntry.setDescription('The GDC Loop/E1/T1 Interval table entry. ')
gdcHdslIntervalMaintenanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 4, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslIntervalMaintenanceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslIntervalMaintenanceIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable. This has the form of a SCinstance which defines the slot, line, drop, and interface, which in this case is a Loop or E1/T1 interface.')
gdcHdslResetIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslResetIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslResetIntervals.setDescription(' This variable is used to reset Loop/E1/T1 performance intervals. When it is set to reset, the Loop/E1/T1 performance tables are reset to zero.')
gdcHdslNumberofValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslNumberofValidIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslNumberofValidIntervals.setDescription(' This variable is used to read the number of intervals collected. Each interval is an increment of 15 minutes.')
gdcHdslResetMajorAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clearAlarm", 1), ("normalAlarm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslResetMajorAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslResetMajorAlarm.setDescription(' This variable is used to reset alarm per Loop basis.')
gdcHdslResetMinorAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clearAlarm", 1), ("normalAlarm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslResetMinorAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslResetMinorAlarm.setDescription(' This variable is used to reset alarm per Loop basis.')
gdcHdslT1CurrentTable = MibTable((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 5), )
if mibBuilder.loadTexts: gdcHdslT1CurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslT1CurrentTable.setDescription('The GDC Hdsl Current Performance table. Information in the entries of this table support the HDSL Scheduled Performance Reports.')
gdcHdslT1CurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 5, 1), ).setIndexNames((0, "GDCHDSL-MIB", "gdcHdslT1CurrentIndex"))
if mibBuilder.loadTexts: gdcHdslT1CurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslT1CurrentEntry.setDescription('An entry in the Current table.')
gdcHdslT1CurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 5, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslT1CurrentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslT1CurrentIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable. This has the form of a SCinstance which defines the slot, line, drop, and interface, which in this case can be an T1 interface.')
gdcHdslT1CurrentStats = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslT1CurrentStats.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslT1CurrentStats.setDescription('The number of Current ES, SES, UAS, BES,LOFC,CSS. encountered by T1 interface in the current 15 minute interval.')
gdcHdslT1IntervalTable = MibTable((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 6), )
if mibBuilder.loadTexts: gdcHdslT1IntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslT1IntervalTable.setDescription('The T1 Interval table.')
gdcHdslT1IntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 6, 1), ).setIndexNames((0, "GDCHDSL-MIB", "gdcHdslT1IntervalIndex"), (0, "GDCHDSL-MIB", "gdcHdslT1IntervalNumber"))
if mibBuilder.loadTexts: gdcHdslT1IntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslT1IntervalEntry.setDescription('An entry in the Interval table.')
gdcHdslT1IntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 6, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslT1IntervalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslT1IntervalIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable. This has the form of a SCinstance which defines the slot, line, drop, and interface, which in this case is T1 interface.')
gdcHdslT1IntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslT1IntervalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslT1IntervalNumber.setDescription('A number between 1 and 96, where 1 is the most recently completed 15 minute interval and 96 is the least recently completed 15 minutes inter- val (assuming that all 96 intervals are valid).')
gdcHdslT1IntervalStats = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslT1IntervalStats.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslT1IntervalStats.setDescription(' This variable represents stats(ES, SES, UAS, BES,LOFC,CSS.) for T1 interface.')
gdcHdslT1TotalTable = MibTable((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 7), )
if mibBuilder.loadTexts: gdcHdslT1TotalTable.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslT1TotalTable.setDescription('The GDC HDSL Total Performance table. Information in the entries of this table support the HDSL Scheduled Performance Reports. 24 hour interval.')
gdcHdslT1TotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 7, 1), ).setIndexNames((0, "GDCHDSL-MIB", "gdcHdslT1TotalIndex"))
if mibBuilder.loadTexts: gdcHdslT1TotalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslT1TotalEntry.setDescription('An entry in the Total table.')
gdcHdslT1TotalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 7, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslT1TotalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslT1TotalIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable. This has the form of a SCinstance which defines the slot, line, drop, and interface, which in this case is T1 interface.')
gdcHdslT1TotalStats = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 5, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslT1TotalStats.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslT1TotalStats.setDescription('The number of Total stats encountered by T1 interface in the current 15 minute interval.')
gdcHdslLoopStatusTable = MibTable((1, 3, 6, 1, 4, 1, 498, 11, 1, 6, 1), )
if mibBuilder.loadTexts: gdcHdslLoopStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslLoopStatusTable.setDescription('The table describes the Status objects for the loops and references the loop interfaces (cc = 02-04).')
gdcHdslLoopStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 11, 1, 6, 1, 1), ).setIndexNames((0, "GDCHDSL-MIB", "gdcHdslLoopStatusLineIndex"))
if mibBuilder.loadTexts: gdcHdslLoopStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslLoopStatusEntry.setDescription('An entry in the GDC HDSL Status Configuration Table.')
gdcHdslLoopStatusLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 6, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslLoopStatusLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslLoopStatusLineIndex.setDescription('This object identifies Status parameters associated with the managed object.')
gdcHdslLoopStartUp = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("norm", 1), ("start", 2), ("cancel", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslLoopStartUp.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslLoopStartUp.setDescription(' Supports the action of initializing HDSL loop startup sequence. When set to start(2), HDSL unit will reinitialize the start up sequence. When set to cancel(3), the unit will abort the start up sequence. When set to norm(1), the unit will operate normal.')
gdcHdslLoopTipRingReversalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("reversed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslLoopTipRingReversalMode.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslLoopTipRingReversalMode.setDescription('Signals the loop Tip and Ring status. When norm(1), loop operates normal. When reverse(2), loop Tip and Ring have been reversed. ')
gdcHdslLoopSignaltoNoiseMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslLoopSignaltoNoiseMargin.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslLoopSignaltoNoiseMargin.setDescription(' Represents the loop signal to noise margin in dB units.')
gdcHdslLoopSNFrac = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslLoopSNFrac.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslLoopSNFrac.setDescription(' This variable is used to be used with the gdcHdslLoopSignaltoNoiseMargin variable if the following manor: a) Only the values 0 and 5 are allowed. b) The value of zero means gdcHdslLoopSignaltoNoiseMargin is a whole number. c) The value of five means gdcHdslLoopSignaltoNoiseMargin is a real number and that 0.5 must be added to it.')
gdcHdslLoopSNAttenSense = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("positive", 1), ("negative", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslLoopSNAttenSense.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslLoopSNAttenSense.setDescription(' This variable identifies the sense of the gdcHdslLoopSignaltoNoiseMargin variable. ')
gdcHdslLoopPulseAtten = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslLoopPulseAtten.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslLoopPulseAtten.setDescription(' Represents twice the HDSL loop Pulse Attenuation level in dB units.')
gdcHdslLoopPulseAttenFrac = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslLoopPulseAttenFrac.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslLoopPulseAttenFrac.setDescription(' This variable is used to be used with the gdcHdslLoopPulseAtten variable if the following manor: a) Only the values 0 and 5 are allowed. b) The value of zero means gdcHdslLoopPulseAtten is a whole number. c) The value of five means gdcHdslLoopPulseAtten is a real number and that 0.5 must be added to it.')
gdcHdslLoopGain = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("low", 1), ("high", 2), ("ok", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslLoopGain.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslLoopGain.setDescription(' Represents the HDSL loop gain setting. ')
gdcHdslLoopExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("exchange", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslLoopExchange.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslLoopExchange.setDescription(' This variable is used to represent the HDSL loop status. When the value is returned to norm(1), HDSL loops are correctly connected. When the value is returned as exchange(2), the HDSl loop has been interchange by error.')
gdcHdslDteStatusTable = MibTable((1, 3, 6, 1, 4, 1, 498, 11, 1, 6, 2), )
if mibBuilder.loadTexts: gdcHdslDteStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslDteStatusTable.setDescription('The GDC DTE Status table. ')
gdcHdslDteStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 11, 1, 6, 2, 1), ).setIndexNames((0, "GDCHDSL-MIB", "gdcHdslDteStatusIndex"))
if mibBuilder.loadTexts: gdcHdslDteStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslDteStatusEntry.setDescription('The GDC DTE Configuration table entry. ')
gdcHdslDteStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 6, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslDteStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslDteStatusIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable. This has the form of a SCinstance which defines the slot, line, drop. ')
gdcHdslDteDTRstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslDteDTRstatus.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslDteDTRstatus.setDescription('DTR EIA status indicator ')
gdcHdslDteDCDstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslDteDCDstatus.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslDteDCDstatus.setDescription('CO EIA status indicator ')
gdcHdslDteRTSstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslDteRTSstatus.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslDteRTSstatus.setDescription('RTS EIA indicator')
gdcHdslDteDSRstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslDteDSRstatus.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslDteDSRstatus.setDescription('DSR EIA indicator')
gdcHdslDteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 6, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gdcHdslDteStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslDteStatus.setDescription('Dte leads status P1.7 not used .6 EIA DCD .5 EIA DTR .4 EIA RTS .3 EIA DSR .2 not used .1 not used .0 not used ')
hdslFracTable = MibTable((1, 3, 6, 1, 4, 1, 498, 11, 1, 8, 1), )
if mibBuilder.loadTexts: hdslFracTable.setStatus('mandatory')
if mibBuilder.loadTexts: hdslFracTable.setDescription('The DS1 Fractional table.')
hdslFracEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 11, 1, 8, 1, 1), ).setIndexNames((0, "GDCHDSL-MIB", "hdslFracIndex"))
if mibBuilder.loadTexts: hdslFracEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hdslFracEntry.setDescription('An entry in the DS1 Fractional table.')
hdslFracIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 8, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslFracIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hdslFracIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable. This has the form of a SCinstance which defines the slot, line, drop. ')
channelmapping = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 8, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: channelmapping.setStatus('mandatory')
if mibBuilder.loadTexts: channelmapping.setDescription('The object contains the channel mapping for multipoint. Time slot 0 is used in all loops. P1.8 f/u P1.7 \\ P1.6 \\ P1.5 \\ P1.4 \\ This byte contains the starting time slot P1.3 / P1.2 / P1.1 / P1.0 / P2.8 f/u P2.7 \\ P2.6 \\ P2.5 \\ P2.4 \\ This byte contains the number of consecutive time slots P2.3 / P2.2 / P2.1 / P2.0 /')
gdcHdslHighway = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("notAssigned", 1), ("highway1", 2), ("highway2", 3), ("highway3", 4), ("highway4", 5), ("highway5", 6), ("highway6", 7), ("highway7", 8), ("highway8", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslHighway.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslHighway.setDescription('Object to select the data highway for Loop n.')
gdcHdslTimeSlot16 = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("used", 1), ("skipped", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gdcHdslTimeSlot16.setStatus('mandatory')
if mibBuilder.loadTexts: gdcHdslTimeSlot16.setDescription('Object to select if Time Slot 16 is being used either to pass data, or skipped from passing any data for Loop n.')
hdslAlarmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 11, 1, 9, 1), )
if mibBuilder.loadTexts: hdslAlarmConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: hdslAlarmConfigTable.setDescription('The hdslAlarmConfigTable contains entries that configure alarm reporting. The structure of the table is such that alarm configuration is supported on a unit and interface basis, and then on an alarm type basis within the interface. For simplicity sake alarms, be they unit or interface related, are represented in one table.')
hdslAlarmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 11, 1, 9, 1, 1), ).setIndexNames((0, "GDCHDSL-MIB", "hdslAlarmConfigIndex"), (0, "GDCHDSL-MIB", "hdslAlarmConfigIdentifier"))
if mibBuilder.loadTexts: hdslAlarmConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hdslAlarmConfigEntry.setDescription('An entry in the hdslAlarmConfigTable table.')
hdslAlarmConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 9, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslAlarmConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hdslAlarmConfigIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable.')
hdslAlarmConfigIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 9, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hdslAlarmConfigIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: hdslAlarmConfigIdentifier.setDescription('The unique alarm identifier assigned to this alarm type. The format of this identifier is an OBJECT IDENTIFIER that has the following format: {iso(1) org(3) dod(6) internet(1) private(4) enterprises(1) gdc(498) xxx(x) alarm(z) yyy(y) where xxx(x) is the administratively assigned family object identifier (z) is the object identifier for alarms in the family defined MIB and yyy(y) is the administratively assigned alarm type identifier for this alarm.')
hdslAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 11, 1, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("thres1E04", 1), ("thres1E05", 2), ("thres1E06", 3), ("thres1E07", 4), ("thres1E08", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hdslAlarmThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: hdslAlarmThreshold.setDescription('This function sets/reads the Major or Minor BER alarm threshold criteria.')
mibBuilder.exportSymbols("GDCHDSL-MIB", hdslAlarmThreshold=hdslAlarmThreshold, hdsl710D2RP=hdsl710D2RP, gdcHdslCurrentSESs=gdcHdslCurrentSESs, hdsl700G2=hdsl700G2, gdcHdslIntervalMaintenanceTable=gdcHdslIntervalMaintenanceTable, gdcHdslLoopStatusLineIndex=gdcHdslLoopStatusLineIndex, gdcHdslV54RDLTest=gdcHdslV54RDLTest, gdcHdslMaintenanceTable=gdcHdslMaintenanceTable, hdsl700G3=hdsl700G3, hdslAlarmConfigTable=hdslAlarmConfigTable, gdcHdslE1LineCoding=gdcHdslE1LineCoding, gdcHdslT1CurrentStats=gdcHdslT1CurrentStats, gdcHdslT1TxClkSource=gdcHdslT1TxClkSource, hdsl721T2RP=hdsl721T2RP, channelmapping=channelmapping, hdsl730D2RP=hdsl730D2RP, gdcHdslIntervalMaintenanceEntry=gdcHdslIntervalMaintenanceEntry, hdsl721T1=hdsl721T1, gdcHdslMaintenance=gdcHdslMaintenance, gdcHdslCurrentFEBEs=gdcHdslCurrentFEBEs, gdcHdslLoopProvision=gdcHdslLoopProvision, gdcHdslFirmwareRev=gdcHdslFirmwareRev, gdcHdslFrontPanel=gdcHdslFrontPanel, gdcHdslTotalSESs=gdcHdslTotalSESs, gdcHdslLedStatus1=gdcHdslLedStatus1, gdcHdslT1IntervalNumber=gdcHdslT1IntervalNumber, gdcHdslRoutingConfig=gdcHdslRoutingConfig, gdcHdslDiagnostics=gdcHdslDiagnostics, gdcHdslResetIntervals=gdcHdslResetIntervals, gdcHdslNumberofValidIntervals=gdcHdslNumberofValidIntervals, hdsl731D1=hdsl731D1, hdsl701T2RP=hdsl701T2RP, gdcHdslIntervalTable=gdcHdslIntervalTable, gdcHdslDteStatusEntry=gdcHdslDteStatusEntry, hdslFracEntry=hdslFracEntry, gdcHdslAlarmThresholds=gdcHdslAlarmThresholds, gdcHdslDiagIndex=gdcHdslDiagIndex, hdslGT1020=hdslGT1020, gdcHdslTotalUASs=gdcHdslTotalUASs, gdcHdslTotalEntry=gdcHdslTotalEntry, gdcHdslT1TotalTable=gdcHdslT1TotalTable, gdcHdslT1AISLoopdownTime=gdcHdslT1AISLoopdownTime, gdcHdslT1InbandLBType=gdcHdslT1InbandLBType, hdslFracIndex=hdslFracIndex, gdcHdslFPRDLConfig=gdcHdslFPRDLConfig, hdsl710D2=hdsl710D2, gdcHdslPrivateStorage3=gdcHdslPrivateStorage3, gdcHdslIntervalFEBEs=gdcHdslIntervalFEBEs, hdsl=hdsl, gdcHdslTotalDMs=gdcHdslTotalDMs, gdcHdslSoftReset=gdcHdslSoftReset, gdcHdslBertTest=gdcHdslBertTest, gdcHdslT1ConfigEntry=gdcHdslT1ConfigEntry, gdcHdslLoopPulseAtten=gdcHdslLoopPulseAtten, hdsl720G1=hdsl720G1, gdcHdslStoredFirmwareStatus=gdcHdslStoredFirmwareStatus, gdcHdslTotalESs=gdcHdslTotalESs, gdcHdslIntervalMaintenanceIndex=gdcHdslIntervalMaintenanceIndex, gdcHdslPrivateStorage1=gdcHdslPrivateStorage1, gdcFractional=gdcFractional, fracExecution=fracExecution, gdcHdslDiagResultsIndex=gdcHdslDiagResultsIndex, gdcHdslTestExecutionStatus=gdcHdslTestExecutionStatus, hdsl731D2RP=hdsl731D2RP, gdcHdslDiagResultsEntry=gdcHdslDiagResultsEntry, gdcHdslSystemMIBversion=gdcHdslSystemMIBversion, hdsl720G2RP=hdsl720G2RP, hdslGT2030=hdslGT2030, gdcHdslRPEnable=gdcHdslRPEnable, gdcHdslIntervalSESs=gdcHdslIntervalSESs, gdcHdslSwitchActiveFirmware=gdcHdslSwitchActiveFirmware, gdcHdslT1IntervalStats=gdcHdslT1IntervalStats, gdcHdslE1ConfigTable=gdcHdslE1ConfigTable, gdcHdslCurrentIndex=gdcHdslCurrentIndex, hdslFracTable=hdslFracTable, gdcHdslT1FramingMode=gdcHdslT1FramingMode, gdcHdslT1InterfaceType=gdcHdslT1InterfaceType, gdcHdslUnitType=gdcHdslUnitType, gdcHdslAlarmStatus=gdcHdslAlarmStatus, gdcHdslT1IntervalTable=gdcHdslT1IntervalTable, hdsl721T2=hdsl721T2, gdcHdslRLTimeOut=gdcHdslRLTimeOut, gdcHdslIntervalIndex=gdcHdslIntervalIndex, gdcHdslVersionTable=gdcHdslVersionTable, gdcHdslVersion=gdcHdslVersion, gdcHdslT1TxBulidOut=gdcHdslT1TxBulidOut, gdcHdslResetMajorAlarm=gdcHdslResetMajorAlarm, gdcHdslDownloadTable=gdcHdslDownloadTable, hdslGT2020=hdslGT2020, gdcHdslNumberofLoops=gdcHdslNumberofLoops, gdcHdslDteStatusIndex=gdcHdslDteStatusIndex, gdcHdslT1TotalEntry=gdcHdslT1TotalEntry, gdcHdslLoopGain=gdcHdslLoopGain, hdslGT1030=hdslGT1030, gdcHdslLoopStatusTable=gdcHdslLoopStatusTable, gdcHdslTimeSlot16=gdcHdslTimeSlot16, gdcHdslDteConfigTable=gdcHdslDteConfigTable, hdsl700AG2=hdsl700AG2, gdcHdslMaintenanceEntry=gdcHdslMaintenanceEntry, gdcHdslDteDSRstatus=gdcHdslDteDSRstatus, gdcHdslVersionIndex=gdcHdslVersionIndex, gdcHdslCurrentTable=gdcHdslCurrentTable, gdcHdslLoopSNFrac=gdcHdslLoopSNFrac, gdcHdslE1LineUnit=gdcHdslE1LineUnit, gdcHdslVersionEntry=gdcHdslVersionEntry, gdcHdslDownloadIndex=gdcHdslDownloadIndex, gdcHdslT1ConfigTable=gdcHdslT1ConfigTable, gdcHdslDownloadingMode=gdcHdslDownloadingMode, gdcHdslT1CurrentIndex=gdcHdslT1CurrentIndex, gdcHdslIntervalEntry=gdcHdslIntervalEntry, gdcHdslSysUpTime=gdcHdslSysUpTime, gdcHdslDiagResultErr=gdcHdslDiagResultErr, hdsl700G2RP=hdsl700G2RP, gdcHdslLoopback=gdcHdslLoopback, gdcHdslCurrentUASs=gdcHdslCurrentUASs, gdcHdslTotalStats=gdcHdslTotalStats, gdcHdslCurrentESs=gdcHdslCurrentESs, gdcHdslLoopPulseAttenFrac=gdcHdslLoopPulseAttenFrac, gdcHdslTotalTable=gdcHdslTotalTable, gdcHdslT1IntervalEntry=gdcHdslT1IntervalEntry, gdcHdslPrivateStorage2=gdcHdslPrivateStorage2, gdcHdslLoopStartUp=gdcHdslLoopStartUp, gdcHdslIntervalDMs=gdcHdslIntervalDMs, gdcHdslDiagResultInterval=gdcHdslDiagResultInterval, gdcHdslDiagnosticResults=gdcHdslDiagnosticResults, gdcHdslSystem=gdcHdslSystem, gdcHdslDteConfigIndex=gdcHdslDteConfigIndex, gdcHdslCurrentEntry=gdcHdslCurrentEntry, hdsl701T2=hdsl701T2, hdslAlarmConfigEntry=hdslAlarmConfigEntry, gdcHdslDteTxClkSource=gdcHdslDteTxClkSource, gdcHdslLoopStatusEntry=gdcHdslLoopStatusEntry, hdslAlarmConfigIdentifier=hdslAlarmConfigIdentifier, gdcHdslTotalIndex=gdcHdslTotalIndex, gdcHdslTotalFEBEs=gdcHdslTotalFEBEs, gdcHdslLoopSNAttenSense=gdcHdslLoopSNAttenSense, gdc=gdc, gdcHdslModelNumber=gdcHdslModelNumber, hdsl702G2=hdsl702G2, hdsl730D1=hdsl730D1, gdcHdslEraseFlash=gdcHdslEraseFlash, gdcHdslDataType=gdcHdslDataType, gdcHdslPerformance=gdcHdslPerformance, gdcHdslIntervalESs=gdcHdslIntervalESs, gdcHdslT1IntervalIndex=gdcHdslT1IntervalIndex, gdcHdslLoopExchange=gdcHdslLoopExchange, hdslAlarmConfigIndex=hdslAlarmConfigIndex, gdcHdslT1LineCoding=gdcHdslT1LineCoding, gdcHdslLoopTipRingReversalMode=gdcHdslLoopTipRingReversalMode, uas7722=uas7722, gdcHdslLedStatus=gdcHdslLedStatus, gdcHdslT1TotalIndex=gdcHdslT1TotalIndex, gdcHdslE1FramingMode=gdcHdslE1FramingMode, gdcHdslDteDTRstatus=gdcHdslDteDTRstatus, gdcHdslV54Config=gdcHdslV54Config, hdsl711D2=hdsl711D2, gdcHdslT1FDLMode=gdcHdslT1FDLMode, gdcHdslResetMinorAlarm=gdcHdslResetMinorAlarm, gdcHdslDteStatus=gdcHdslDteStatus, gdcHdslDteConfigEntry=gdcHdslDteConfigEntry, gdcHdslDteDataRate=gdcHdslDteDataRate, gdcHdslDiagResultsTable=gdcHdslDiagResultsTable, gdcHdslDteStatusTable=gdcHdslDteStatusTable, gdcHdslIntervalStats=gdcHdslIntervalStats, gdcHdslDteCtsMode=gdcHdslDteCtsMode, gdcHdslDiagTable=gdcHdslDiagTable, gdcHdslT1TxPreequalization=gdcHdslT1TxPreequalization, gdcHdslMaintenanceLineIndex=gdcHdslMaintenanceLineIndex, gdcHdslCurrentStats=gdcHdslCurrentStats, gdcHdslIntervalUASs=gdcHdslIntervalUASs, gdcHdslDefaultInit=gdcHdslDefaultInit, gdcHdslConfiguration=gdcHdslConfiguration, gdcHdslDownloadEntry=gdcHdslDownloadEntry, gdcHdslE1ConfigEntry=gdcHdslE1ConfigEntry, gdcHdslHighway=gdcHdslHighway, gdcHdslDteRTSstatus=gdcHdslDteRTSstatus, gdcHdslDiagEntry=gdcHdslDiagEntry, gdcHdslT1ConfigIndex=gdcHdslT1ConfigIndex, gdcHdslStoredFirmwareRev=gdcHdslStoredFirmwareRev, gdcHdslLoopSignaltoNoiseMargin=gdcHdslLoopSignaltoNoiseMargin, hdsl720G2=hdsl720G2, gdcHdslStatus=gdcHdslStatus, gdcHdslConfigMode=gdcHdslConfigMode, gdcHdslT1TotalStats=gdcHdslT1TotalStats, gdcHdslT1CurrentTable=gdcHdslT1CurrentTable, gdcHdslE1ConfigIndex=gdcHdslE1ConfigIndex, gdcHdslIntervalNumber=gdcHdslIntervalNumber, gdcHdslT1CurrentEntry=gdcHdslT1CurrentEntry, hdsl730D2=hdsl730D2, hdsl700AG2NZ=hdsl700AG2NZ, gdcHdslDteDCDstatus=gdcHdslDteDCDstatus, hdsl731D2=hdsl731D2, gdcHdslActiveFirmwareRev=gdcHdslActiveFirmwareRev, gdcHdslCurrentDMs=gdcHdslCurrentDMs)
