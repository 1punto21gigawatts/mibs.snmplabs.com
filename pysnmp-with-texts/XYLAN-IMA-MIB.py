#
# PySNMP MIB module XYLAN-IMA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XYLAN-IMA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:45:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, ModuleIdentity, NotificationType, Bits, Counter64, Gauge32, ObjectIdentity, Unsigned32, Counter32, iso, TimeTicks, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "ModuleIdentity", "NotificationType", "Bits", "Counter64", "Gauge32", "ObjectIdentity", "Unsigned32", "Counter32", "iso", "TimeTicks", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
xylanPportArch, = mibBuilder.importSymbols("XYLAN-BASE-MIB", "xylanPportArch")
xylanImaMib = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 11, 3))
xylanImaLinkTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 11, 3, 1), )
if mibBuilder.loadTexts: xylanImaLinkTable.setStatus('mandatory')
if mibBuilder.loadTexts: xylanImaLinkTable.setDescription('A table of IMA link status and configuration information.')
xylanImaLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 11, 3, 1, 1), ).setIndexNames((0, "XYLAN-IMA-MIB", "xylanImaLinkSlotIndex"), (0, "XYLAN-IMA-MIB", "xylanImaLinkPortIndex"))
if mibBuilder.loadTexts: xylanImaLinkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xylanImaLinkEntry.setDescription('An entry in the table containing information about the IMA Link.')
xylanImaLinkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanImaLinkSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xylanImaLinkSlotIndex.setDescription('A unique value which identifies this slot.')
xylanImaLinkPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanImaLinkPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xylanImaLinkPortIndex.setDescription('A unique value which identifies this port.')
xylanImaLinkDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanImaLinkDescription.setStatus('mandatory')
if mibBuilder.loadTexts: xylanImaLinkDescription.setDescription('A description for this link.')
xylanImaLinkAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanImaLinkAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xylanImaLinkAdminStatus.setDescription('The desired state of this link.')
xylanImaLinkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanImaLinkIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xylanImaLinkIfIndex.setDescription('This indicates the ifIndex of this link.')
xylanImaLinkRxIcpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanImaLinkRxIcpCells.setStatus('mandatory')
if mibBuilder.loadTexts: xylanImaLinkRxIcpCells.setDescription('This object indicates number of good ICP cells have been received on this link.')
xylanImaLinkTxIcpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanImaLinkTxIcpCells.setStatus('mandatory')
if mibBuilder.loadTexts: xylanImaLinkTxIcpCells.setDescription('This object indicates number of good ICP cells have been transmitted on this link.')
xylanImaLinkRxFillerCells = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanImaLinkRxFillerCells.setStatus('mandatory')
if mibBuilder.loadTexts: xylanImaLinkRxFillerCells.setDescription('This object indicates number of good filler cells have been received on this link.')
xylanImaLinkTxFillerCells = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanImaLinkTxFillerCells.setStatus('mandatory')
if mibBuilder.loadTexts: xylanImaLinkTxFillerCells.setDescription('This object indicates number of good filler cells have been transmitted on this link.')
xylanImaLinkRxAtmLayerCells = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanImaLinkRxAtmLayerCells.setStatus('mandatory')
if mibBuilder.loadTexts: xylanImaLinkRxAtmLayerCells.setDescription('This object indicates number of ATM layer cells have been received on this link.')
xylanImaLinkTxAtmLayerCells = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanImaLinkTxAtmLayerCells.setStatus('mandatory')
if mibBuilder.loadTexts: xylanImaLinkTxAtmLayerCells.setDescription('This object indicates number of ATM layer cells have been transmitted on this link.')
xylanImaLinkRxBadIcpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanImaLinkRxBadIcpCells.setStatus('mandatory')
if mibBuilder.loadTexts: xylanImaLinkRxBadIcpCells.setDescription('This object indicates number of invalid ICP cells have been received on this link.')
xylanImaLinkRxBadCrcIcpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanImaLinkRxBadCrcIcpCells.setStatus('mandatory')
if mibBuilder.loadTexts: xylanImaLinkRxBadCrcIcpCells.setDescription('This object indicates number of ICP cells with bad CRC-10 have been received on this link.')
xylanImaLinkCellsInRxBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 3, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanImaLinkCellsInRxBuffer.setStatus('mandatory')
if mibBuilder.loadTexts: xylanImaLinkCellsInRxBuffer.setDescription('This object indicates number of cells that are currently in receive buffer on this link.')
xylanImaLinkRxBufferFlush = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 3, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanImaLinkRxBufferFlush.setStatus('mandatory')
if mibBuilder.loadTexts: xylanImaLinkRxBufferFlush.setDescription('This object indicates number of times that receive buffer is flushed on this link.')
xylanImaLinkRxBufferOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 3, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanImaLinkRxBufferOverflow.setStatus('mandatory')
if mibBuilder.loadTexts: xylanImaLinkRxBufferOverflow.setDescription('This object indicates number of times that receive buffer is overflowed on this link.')
xylanImaLinkRxCellDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 3, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanImaLinkRxCellDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: xylanImaLinkRxCellDiscarded.setDescription('This object indicates number of receive cells that have been discarded on this link.')
xylanImaLinkRxStuffEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 3, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanImaLinkRxStuffEvents.setStatus('mandatory')
if mibBuilder.loadTexts: xylanImaLinkRxStuffEvents.setDescription('This object indicates number of stuff events that have been received on this link.')
xylanImaLinkTxStuffEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 3, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanImaLinkTxStuffEvents.setStatus('mandatory')
if mibBuilder.loadTexts: xylanImaLinkTxStuffEvents.setDescription('This object indicates number of stuff events that have been transmitted on this link.')
xylanImaLinkClearStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanImaLinkClearStatistics.setStatus('mandatory')
if mibBuilder.loadTexts: xylanImaLinkClearStatistics.setDescription("Setting this object to clear(2) will clear all statistics of this link to zero's.")
xylanImaGroupTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 11, 3, 2), )
if mibBuilder.loadTexts: xylanImaGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: xylanImaGroupTable.setDescription('A table of IMA Group status and configuration information.')
xylanImaGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 11, 3, 2, 1), ).setIndexNames((0, "XYLAN-IMA-MIB", "xylanImaGroupIndex"))
if mibBuilder.loadTexts: xylanImaGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xylanImaGroupEntry.setDescription('An entry in the table containing information about the IMA Group.')
xylanImaGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanImaGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xylanImaGroupIndex.setDescription('A unique value which identifies this group.')
xylanImaGroupDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanImaGroupDescription.setStatus('mandatory')
if mibBuilder.loadTexts: xylanImaGroupDescription.setDescription('A string description of this IMA group.')
xylanImaGroupAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanImaGroupAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xylanImaGroupAdminStatus.setDescription('The desired state of this group.')
xylanImaGroupMaxDelaySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanImaGroupMaxDelaySlot.setStatus('mandatory')
if mibBuilder.loadTexts: xylanImaGroupMaxDelaySlot.setDescription('A unique value which identifies slot where the link experiences with maximum differential delay within this IMA group.')
xylanImaGroupMaxDelayPort = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanImaGroupMaxDelayPort.setStatus('mandatory')
if mibBuilder.loadTexts: xylanImaGroupMaxDelayPort.setDescription('A unique value which identifies port where the link experiences with maximum differential delay within this IMA group.')
xylanImaGroupAtmLayerSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanImaGroupAtmLayerSlot.setStatus('mandatory')
if mibBuilder.loadTexts: xylanImaGroupAtmLayerSlot.setDescription('A unique value which identifies slot of an ATM layer port where this IMA group is mapped to.')
xylanImaGroupAtmLayerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanImaGroupAtmLayerPort.setStatus('mandatory')
if mibBuilder.loadTexts: xylanImaGroupAtmLayerPort.setDescription('A unique value which identifies port of an ATM layer port where this IMA group is mapped to.')
xylanImaGroupRxAtmLayerCells = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanImaGroupRxAtmLayerCells.setStatus('mandatory')
if mibBuilder.loadTexts: xylanImaGroupRxAtmLayerCells.setDescription('This object indicates number of ATM layer cells have been received on this group.')
xylanImaGroupTxAtmLayerCells = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanImaGroupTxAtmLayerCells.setStatus('mandatory')
if mibBuilder.loadTexts: xylanImaGroupTxAtmLayerCells.setDescription('This object indicates number of ATM layer cells have been transmitted on this group.')
xylanImaGroupPhyFrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("esf", 2), ("sf", 3), ("e1", 4), ("e1-crc", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanImaGroupPhyFrameFormat.setStatus('mandatory')
if mibBuilder.loadTexts: xylanImaGroupPhyFrameFormat.setDescription('This object indicates frame format of all physical links assigned to this group.')
xylanImaGroupPhyLoopbackMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("payloop", 2), ("line", 3), ("other", 4), ("inward", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanImaGroupPhyLoopbackMode.setStatus('mandatory')
if mibBuilder.loadTexts: xylanImaGroupPhyLoopbackMode.setDescription('This object indicates loopback configuration of all physical links assigned to this group.')
xylanImaGroupPhyLineLength = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanImaGroupPhyLineLength.setStatus('mandatory')
if mibBuilder.loadTexts: xylanImaGroupPhyLineLength.setDescription('This object indicates line length of all physical links assigned to this group.')
xylanImaGroupPhyTxClkSource = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loopTiming", 1), ("localTiming", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanImaGroupPhyTxClkSource.setStatus('mandatory')
if mibBuilder.loadTexts: xylanImaGroupPhyTxClkSource.setDescription('This object indicates transmit clock source of all physical links assigned to this group.')
xylanImaGroupClearStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanImaGroupClearStatistics.setStatus('mandatory')
if mibBuilder.loadTexts: xylanImaGroupClearStatistics.setDescription("Setting this object to clear(2) will clear all statistics of this group to zero's.")
xylanImaGroupPhyUniqueParameter = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 11, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanImaGroupPhyUniqueParameter.setStatus('mandatory')
if mibBuilder.loadTexts: xylanImaGroupPhyUniqueParameter.setDescription('Whenever a PHY configuration (xylanImaGroupPhyTxClkSource, xylanImaGroupPhyLineLength, xylanImaGroupPhyLoopbackMode, xylanImaGroupPhyFrameFormat) is changed, and this this object is set to yes(1), the new PHY configuration will be applied to all physical ports (T1/E1) in the group.')
mibBuilder.exportSymbols("XYLAN-IMA-MIB", xylanImaGroupMaxDelayPort=xylanImaGroupMaxDelayPort, xylanImaLinkCellsInRxBuffer=xylanImaLinkCellsInRxBuffer, xylanImaLinkRxAtmLayerCells=xylanImaLinkRxAtmLayerCells, xylanImaLinkRxCellDiscarded=xylanImaLinkRxCellDiscarded, xylanImaLinkTxIcpCells=xylanImaLinkTxIcpCells, xylanImaMib=xylanImaMib, xylanImaLinkRxFillerCells=xylanImaLinkRxFillerCells, xylanImaLinkRxBufferOverflow=xylanImaLinkRxBufferOverflow, xylanImaGroupPhyLoopbackMode=xylanImaGroupPhyLoopbackMode, xylanImaLinkIfIndex=xylanImaLinkIfIndex, xylanImaLinkTxStuffEvents=xylanImaLinkTxStuffEvents, xylanImaLinkRxBufferFlush=xylanImaLinkRxBufferFlush, xylanImaGroupAtmLayerSlot=xylanImaGroupAtmLayerSlot, xylanImaGroupEntry=xylanImaGroupEntry, xylanImaLinkAdminStatus=xylanImaLinkAdminStatus, xylanImaLinkTxAtmLayerCells=xylanImaLinkTxAtmLayerCells, xylanImaLinkRxStuffEvents=xylanImaLinkRxStuffEvents, xylanImaGroupTable=xylanImaGroupTable, xylanImaGroupPhyLineLength=xylanImaGroupPhyLineLength, xylanImaLinkPortIndex=xylanImaLinkPortIndex, xylanImaGroupDescription=xylanImaGroupDescription, xylanImaGroupAdminStatus=xylanImaGroupAdminStatus, xylanImaGroupMaxDelaySlot=xylanImaGroupMaxDelaySlot, xylanImaGroupRxAtmLayerCells=xylanImaGroupRxAtmLayerCells, xylanImaGroupClearStatistics=xylanImaGroupClearStatistics, xylanImaGroupTxAtmLayerCells=xylanImaGroupTxAtmLayerCells, xylanImaLinkRxIcpCells=xylanImaLinkRxIcpCells, xylanImaLinkTxFillerCells=xylanImaLinkTxFillerCells, xylanImaLinkRxBadCrcIcpCells=xylanImaLinkRxBadCrcIcpCells, xylanImaGroupAtmLayerPort=xylanImaGroupAtmLayerPort, xylanImaLinkClearStatistics=xylanImaLinkClearStatistics, xylanImaLinkRxBadIcpCells=xylanImaLinkRxBadIcpCells, xylanImaGroupPhyUniqueParameter=xylanImaGroupPhyUniqueParameter, xylanImaLinkEntry=xylanImaLinkEntry, xylanImaGroupPhyTxClkSource=xylanImaGroupPhyTxClkSource, xylanImaLinkDescription=xylanImaLinkDescription, xylanImaLinkTable=xylanImaLinkTable, xylanImaLinkSlotIndex=xylanImaLinkSlotIndex, xylanImaGroupIndex=xylanImaGroupIndex, xylanImaGroupPhyFrameFormat=xylanImaGroupPhyFrameFormat)
