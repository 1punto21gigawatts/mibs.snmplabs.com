#
# PySNMP MIB module AVAYA-WLAN-MOB-SW-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AVAYA-WLAN-MOB-SW-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:32:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
InetAddress, InetPortNumber, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetPortNumber", "InetAddressType")
VlanIdOrNone, PortList = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIdOrNone", "PortList")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ObjectIdentity, TimeTicks, IpAddress, Bits, Integer32, iso, Counter32, ModuleIdentity, MibIdentifier, Unsigned32, Counter64, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ObjectIdentity", "TimeTicks", "IpAddress", "Bits", "Integer32", "iso", "Counter32", "ModuleIdentity", "MibIdentifier", "Unsigned32", "Counter64", "NotificationType")
MacAddress, RowStatus, TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "RowStatus", "TextualConvention", "DisplayString", "TruthValue")
avayaWlanMibs, = mibBuilder.importSymbols("SYNOPTICS-ROOT-MIB", "avayaWlanMibs")
avayaWlanMobSwMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 45, 7, 10))
avayaWlanMobSwMib.setRevisions(('2010-03-30 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: avayaWlanMobSwMib.setRevisionsDescriptions(('v1: Initial version.',))
if mibBuilder.loadTexts: avayaWlanMobSwMib.setLastUpdated('201006090000Z')
if mibBuilder.loadTexts: avayaWlanMobSwMib.setOrganization('Avaya')
if mibBuilder.loadTexts: avayaWlanMobSwMib.setContactInfo('Avaya')
if mibBuilder.loadTexts: avayaWlanMobSwMib.setDescription("Avaya WLAN Mobility Switch MIB Copyright 2010 Avaya, Inc. All rights reserved. This Avaya SNMP Management Information Base Specification (Specification) embodies Avaya's confidential and proprietary intellectual property. Avaya retains all title and ownership in the Specification, including any revisions. This Specification is supplied 'AS IS,' and Avaya makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
avWlanMobSwObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 7, 10, 1))
avWlanMobAgentObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 1))
avWlanMobAgentVlanTable = MibTable((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 1, 1), )
if mibBuilder.loadTexts: avWlanMobAgentVlanTable.setStatus('current')
if mibBuilder.loadTexts: avWlanMobAgentVlanTable.setDescription('This is the configuration table for mobility VLANs.')
avWlanMobAgentVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 1, 1, 1), ).setIndexNames((1, "AVAYA-WLAN-MOB-SW-MIB", "avWlanMobAgentVlanName"))
if mibBuilder.loadTexts: avWlanMobAgentVlanEntry.setStatus('current')
if mibBuilder.loadTexts: avWlanMobAgentVlanEntry.setDescription('Configuration settings for a mobility VLAN.')
avWlanMobAgentVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: avWlanMobAgentVlanName.setStatus('current')
if mibBuilder.loadTexts: avWlanMobAgentVlanName.setDescription('This object uniquely identifies a mobility VLAN.')
avWlanMobAgentVlanLVID = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 1, 1, 1, 2), VlanIdOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avWlanMobAgentVlanLVID.setStatus('current')
if mibBuilder.loadTexts: avWlanMobAgentVlanLVID.setDescription('The local VLAN ID. This maps the global VLAN to a locally defined VLAN.')
avWlanMobAgentVlanL3Mobility = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("server", 2), ("client", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avWlanMobAgentVlanL3Mobility.setStatus('current')
if mibBuilder.loadTexts: avWlanMobAgentVlanL3Mobility.setDescription('This object indicates the L3 mobility mode for the VLAN. The meaning of the values is: none(1) - L3 mobility is not enabled for this VLAN (L2 mobility is supported, which is the default behaviour when a VLAN is mapped). server(2) - L3 mobility is enabled for this VLAN, and this switch can act as a server for this mobility VLAN. The rest of the parameters for the VLAN are valid. client(3) - L3 mobility is enabled for this VLAN, and this switch is configured as a static client for this VLAN. All ports in the mapped Local VLAN will be remotely connected to this mobility VLAN.')
avWlanMobAgentVlanWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avWlanMobAgentVlanWeight.setStatus('current')
if mibBuilder.loadTexts: avWlanMobAgentVlanWeight.setDescription('This object specifies a weight value to be used to compute the priority used to determine the winning server amongst a number of switches configured as server for this VLAN.')
avWlanMobAgentVlanTrack = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 1, 1, 1, 5), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avWlanMobAgentVlanTrack.setStatus('current')
if mibBuilder.loadTexts: avWlanMobAgentVlanTrack.setDescription('The objects specifies a list of ports whose status will be tracked to determine the priority used to elect the VLAN server for this VLAN. This list must be a subset of the member ports of the local VLAN mapped to this mobility VLAN. The default value for this object is the complete set of member ports of the local VLAN.')
avWlanMobAgentVlanScope = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("domain", 1), ("enterprise", 2))).clone('domain')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avWlanMobAgentVlanScope.setStatus('current')
if mibBuilder.loadTexts: avWlanMobAgentVlanScope.setDescription('for future use')
avWlanMobAgentVlanWcValidated = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 1, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobAgentVlanWcValidated.setStatus('current')
if mibBuilder.loadTexts: avWlanMobAgentVlanWcValidated.setDescription('Indicates whether the Mobility VLAN name for this entry was received from (and thus validated by) the managing controller. Mostly useful for validating mappings that were manually added offline before the switch associated to the controller.')
avWlanMobAgentVlanAdminMapped = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 1, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobAgentVlanAdminMapped.setStatus('current')
if mibBuilder.loadTexts: avWlanMobAgentVlanAdminMapped.setDescription('Indicates whether the LVID mapping for this entry was set by admin or auto-assigned by the switch itself. Has no meaning if the LVID value is 0')
avWlanMobAgentVlanActive = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 1, 1, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobAgentVlanActive.setStatus('current')
if mibBuilder.loadTexts: avWlanMobAgentVlanActive.setDescription("Indicates whether the LVID mapping is in 'Active' state. For mapping to be 'Active', the following conditions have to be satisfied: - Mobility VLAN has to be received from (validated by) WC. - LVID element has to be mapped a value other than 0. - LVID has to represent a valid local VLAN on this switch.")
avWlanMobAgentVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 1, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avWlanMobAgentVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: avWlanMobAgentVlanRowStatus.setDescription("This variable is used to create or delete entries in the table. Only the entries manually added offline that have not (yet) been 'validated' by the managing Controller can be deleted from this table.")
avWlanMobSwScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 2))
avWlanMobSwVLANPeriodicAdvInterval = MibScalar((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 2, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: avWlanMobSwVLANPeriodicAdvInterval.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwVLANPeriodicAdvInterval.setDescription('Period for sending VLAN advertisements.')
avWlanMobSwVMMMaxRetransmits = MibScalar((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 2, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avWlanMobSwVMMMaxRetransmits.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwVMMMaxRetransmits.setDescription('VMM max retransmits.')
avWlanMobSwKeepAliveInterval = MibScalar((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 2, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(3000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: avWlanMobSwKeepAliveInterval.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwKeepAliveInterval.setDescription('Keep alive interval.')
avWlanMobSwKeepAliveNumRetries = MibScalar((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 2, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avWlanMobSwKeepAliveNumRetries.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwKeepAliveNumRetries.setDescription('Kepp alive number of retries.')
avWlanMobSwTransMaxRetransmits = MibScalar((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 2, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avWlanMobSwTransMaxRetransmits.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwTransMaxRetransmits.setDescription('Trans max retransmits.')
avWlanMobSwLocalDeviceId = MibScalar((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 2, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwLocalDeviceId.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwLocalDeviceId.setDescription('This object contains the MAC address that uniquely identifies the local mobility switch. This value is what is used to identify this switch in peer switches and controllers, and is used as an index value in various MIBs to identify entries that pertain to the local switch.')
avWlanMobSwAllStatisticsReset = MibScalar((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avWlanMobSwAllStatisticsReset.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwAllStatisticsReset.setDescription('When we set this object to reset, all the statistics for every tunnel will be cleared. Read on this object will always return none.')
avWlanMobSwAllStatisticsResetStatus = MibScalar((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notStarted", 1), ("requested", 2), ("inProgress", 3), ("success", 4), ("partialSuccess", 5), ("failure", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwAllStatisticsResetStatus.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwAllStatisticsResetStatus.setDescription('This object indicates the current status of the switch statistics reset request. Default value is not started.')
avWlanMobSwCtrlAddrType = MibScalar((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 2, 9), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwCtrlAddrType.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwCtrlAddrType.setDescription('The type of internet address contained in the corresponding instance of avWlanMobSwCtrlAddr. Currently only ipv4(1) and ipv6(2) are allowed.')
avWlanMobSwCtrlAddr = MibScalar((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 2, 10), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwCtrlAddr.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwCtrlAddr.setDescription('The System internet address of the controller that is managing this mobility switch. The type of address contained in this object is indicated by the corresponding instance of avWlanMobSwCtrlAddrType.')
avWlanMobSwNumMobilityTunnels = MibScalar((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwNumMobilityTunnels.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwNumMobilityTunnels.setDescription('The current number of Mobility tunnels establisted on this switch.')
avWlanMobSwNumAccessTunnels = MibScalar((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwNumAccessTunnels.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwNumAccessTunnels.setDescription('The current number of Access tunnels establisted on this switch.')
avWlanMobSwNumResPeerAccessTunnels = MibScalar((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwNumResPeerAccessTunnels.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwNumResPeerAccessTunnels.setDescription('The current number of Access tunnels establisted on this switch that are managed by its resiliency peer. Initially intended for switches running as SMLT pairs.')
avWlanMobSwFdbGlobalFlushAction = MibScalar((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("flushAll", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avWlanMobSwFdbGlobalFlushAction.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwFdbGlobalFlushAction.setDescription('When we set this object to flushAll(2), all the FDB entries learned by mobility switch will be flushed. Read on this object will always return none.')
avWlanMobSwFdbGlobalFlushActionStatus = MibScalar((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notStarted", 1), ("inProgress", 2), ("success", 3), ("partialFailure", 4), ("failure", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwFdbGlobalFlushActionStatus.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwFdbGlobalFlushActionStatus.setDescription('This object indicates the current status of flushing all fdb entries learned by the mobility swithc request. Default value is not started.')
avWlanMobSwPurgeInactiveMaps = MibScalar((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("purge", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avWlanMobSwPurgeInactiveMaps.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwPurgeInactiveMaps.setDescription('Setting this object would purge all the inactive mappings from the mobility agent vlan table (avWlanMobAgentVlanTable) ie entries whose value of avWlanMobAgentVlanActive is False. Read from this field always returns none (1).')
avWlanMobSwDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 3), )
if mibBuilder.loadTexts: avWlanMobSwDeviceTable.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwDeviceTable.setDescription('Despite the somewhat misleading name, this table contains status entries of the Access and Mobility tunnels that are established at the local switch.')
avWlanMobSwDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 3, 1), ).setIndexNames((0, "AVAYA-WLAN-MOB-SW-MIB", "avWlanMobSwDeviceType"), (0, "AVAYA-WLAN-MOB-SW-MIB", "avWlanMobSwDeviceId"))
if mibBuilder.loadTexts: avWlanMobSwDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwDeviceEntry.setDescription('A peer mobility switch or an access point.')
avWlanMobSwDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mobTunnel", 1), ("accessTunnel", 2), ("resPeerAccessTunnel", 3))))
if mibBuilder.loadTexts: avWlanMobSwDeviceType.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwDeviceType.setDescription('The tunnel type.')
avWlanMobSwDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 3, 1, 2), MacAddress())
if mibBuilder.loadTexts: avWlanMobSwDeviceId.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwDeviceId.setDescription('The MAC address that uniquely identifies the peer mobility switch or access point on the other side of the tunnel.')
avWlanMobSwDeviceAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 3, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwDeviceAddrType.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwDeviceAddrType.setDescription('This object indicates the type of internet address in the corresponding instance of avWlanMobSwDeviceAddr. Currently, only the values ipv4(1) and ipv6(2) are allowed.')
avWlanMobSwDeviceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 3, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwDeviceAddr.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwDeviceAddr.setDescription('The address of the peer mobility switch or access point. The type of address is indicated by the corresponding instance of avWlanMobSwDeviceAddrType.')
avWlanMobSwDeviceUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 3, 1, 5), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwDeviceUdpPort.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwDeviceUdpPort.setDescription('Indicates the UDP port which the peer mobility switch or access point will use for control protocol communication with the local switch.')
avWlanMobSwDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwDeviceStatus.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwDeviceStatus.setDescription('Indicates the status of the mobility tunnel connection to this peer mobility switch, or the access tunnel to this access point.')
avWlanMobSwDeviceLocalUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 3, 1, 7), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwDeviceLocalUdpPort.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwDeviceLocalUdpPort.setDescription('Indicates the local UDP port through which the current Mobility Tunnel(or Resiliency Tunnel) or Access Tunnel is connected.')
avWlanMobSwDeviceInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwDeviceInterfaceId.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwDeviceInterfaceId.setDescription('Used to display Logical Port for the tunnel.')
avWlanMobPeerVlansAdvertisedTable = MibTable((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 4), )
if mibBuilder.loadTexts: avWlanMobPeerVlansAdvertisedTable.setStatus('current')
if mibBuilder.loadTexts: avWlanMobPeerVlansAdvertisedTable.setDescription('This table contains a list of the Mobility VLANs that are advertised by each peer Mobility Switch with which the local mobility switch has established a mobility tunnel.')
avWlanMobPeerVlansAdvertisedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 4, 1), ).setIndexNames((0, "AVAYA-WLAN-MOB-SW-MIB", "avWlanMobPeerVlansAdvertisedId"), (1, "AVAYA-WLAN-MOB-SW-MIB", "avWlanMobPeerVlansAdvertisedVlanName"))
if mibBuilder.loadTexts: avWlanMobPeerVlansAdvertisedEntry.setStatus('current')
if mibBuilder.loadTexts: avWlanMobPeerVlansAdvertisedEntry.setDescription('A mobility vlan advertised by a peer mobility switch.')
avWlanMobPeerVlansAdvertisedId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 4, 1, 1), MacAddress())
if mibBuilder.loadTexts: avWlanMobPeerVlansAdvertisedId.setStatus('current')
if mibBuilder.loadTexts: avWlanMobPeerVlansAdvertisedId.setDescription('The MAC address that uniquely identifies the peer mobility switch.')
avWlanMobPeerVlansAdvertisedVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 4, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: avWlanMobPeerVlansAdvertisedVlanName.setStatus('current')
if mibBuilder.loadTexts: avWlanMobPeerVlansAdvertisedVlanName.setDescription('This object indicates the name of the advertised mobility VLAN.')
avWlanMobPeerVlansAdvertisedPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobPeerVlansAdvertisedPriority.setStatus('current')
if mibBuilder.loadTexts: avWlanMobPeerVlansAdvertisedPriority.setDescription('This object indicates the priority of the advertised mobility VLAN.')
avWlanMobVlanServerTable = MibTable((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 5), )
if mibBuilder.loadTexts: avWlanMobVlanServerTable.setStatus('current')
if mibBuilder.loadTexts: avWlanMobVlanServerTable.setDescription('This table contains the currently selected server for each mobility vlan.')
avWlanMobVlanServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 5, 1), ).setIndexNames((1, "AVAYA-WLAN-MOB-SW-MIB", "avWlanMobVlanServerVlanName"))
if mibBuilder.loadTexts: avWlanMobVlanServerEntry.setStatus('current')
if mibBuilder.loadTexts: avWlanMobVlanServerEntry.setDescription('A mobility vlan advertised by a peer mobility switch.')
avWlanMobVlanServerVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 5, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: avWlanMobVlanServerVlanName.setStatus('current')
if mibBuilder.loadTexts: avWlanMobVlanServerVlanName.setDescription('This object identifies the mobility vlan.')
avWlanMobVlanServerId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 5, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobVlanServerId.setStatus('current')
if mibBuilder.loadTexts: avWlanMobVlanServerId.setDescription('This object identifies the currently selected server for this mobility vlan. Note that the internet address and status of this server can be retrieved from the corresponding entry in the avWlanMobSwDeviceTable.')
avWlanMobVlanServerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 5, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobVlanServerPriority.setStatus('current')
if mibBuilder.loadTexts: avWlanMobVlanServerPriority.setDescription('This object indicates the priority of the VLAN.')
avWlanMobVlanPeerAdvertiserTable = MibTable((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 6), )
if mibBuilder.loadTexts: avWlanMobVlanPeerAdvertiserTable.setStatus('current')
if mibBuilder.loadTexts: avWlanMobVlanPeerAdvertiserTable.setDescription('This table contains a list of all peer mobility switches that are advertising each mobility vlan.')
avWlanMobVlanPeerAdvertiserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 6, 1), ).setIndexNames((0, "AVAYA-WLAN-MOB-SW-MIB", "avWlanMobVlanPeerAdvertiserVlanName"), (0, "AVAYA-WLAN-MOB-SW-MIB", "avWlanMobVlanPeerAdvertiserId"))
if mibBuilder.loadTexts: avWlanMobVlanPeerAdvertiserEntry.setStatus('current')
if mibBuilder.loadTexts: avWlanMobVlanPeerAdvertiserEntry.setDescription('A mobility switch that is advertising a particular mobility vlan.')
avWlanMobVlanPeerAdvertiserVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 6, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: avWlanMobVlanPeerAdvertiserVlanName.setStatus('current')
if mibBuilder.loadTexts: avWlanMobVlanPeerAdvertiserVlanName.setDescription('This object identifies the mobility vlan.')
avWlanMobVlanPeerAdvertiserId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 6, 1, 2), MacAddress())
if mibBuilder.loadTexts: avWlanMobVlanPeerAdvertiserId.setStatus('current')
if mibBuilder.loadTexts: avWlanMobVlanPeerAdvertiserId.setDescription('This object identifies a peer mobility switch that is advertising this mobility vlan. Note that the internet address and status of this peer can be retrieved from the corresponding entry in the avWlanMobSwDeviceTable.')
avWlanMobVlanPeerAdvertiserPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 6, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobVlanPeerAdvertiserPriority.setStatus('current')
if mibBuilder.loadTexts: avWlanMobVlanPeerAdvertiserPriority.setDescription('This object indicates the priority of the VLAN.')
avWlanMobTunnelStatsTable = MibTable((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 7), )
if mibBuilder.loadTexts: avWlanMobTunnelStatsTable.setStatus('deprecated')
if mibBuilder.loadTexts: avWlanMobTunnelStatsTable.setDescription('This table contains statistics for each mobility tunnel.')
avWlanMobTunnelStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 7, 1), ).setIndexNames((0, "AVAYA-WLAN-MOB-SW-MIB", "avWlanMobTunnelStatsDeviceId"))
if mibBuilder.loadTexts: avWlanMobTunnelStatsEntry.setStatus('deprecated')
if mibBuilder.loadTexts: avWlanMobTunnelStatsEntry.setDescription('mobility/access tunnel statistics')
avWlanMobTunnelStatsDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 7, 1, 1), MacAddress())
if mibBuilder.loadTexts: avWlanMobTunnelStatsDeviceId.setStatus('deprecated')
if mibBuilder.loadTexts: avWlanMobTunnelStatsDeviceId.setDescription('This object identifies the peer mobility switch to which this tunnel is connected.')
avWlanMobTunnelStatsIngressPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 7, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobTunnelStatsIngressPkts.setStatus('deprecated')
if mibBuilder.loadTexts: avWlanMobTunnelStatsIngressPkts.setDescription('Total packets received on the tunnel.')
avWlanMobTunnelStatsIngressMcast = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 7, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobTunnelStatsIngressMcast.setStatus('deprecated')
if mibBuilder.loadTexts: avWlanMobTunnelStatsIngressMcast.setDescription('Multicast packets recvd on the tunnel.')
avWlanMobTunnelStatsIngressBcast = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 7, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobTunnelStatsIngressBcast.setStatus('deprecated')
if mibBuilder.loadTexts: avWlanMobTunnelStatsIngressBcast.setDescription('Broadcasts recvd on the tunnel.')
avWlanMobTunnelStatsIngressOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 7, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobTunnelStatsIngressOctets.setStatus('deprecated')
if mibBuilder.loadTexts: avWlanMobTunnelStatsIngressOctets.setDescription('Total octets recvd on the tunnel.')
avWlanMobTunnelStatsIngressError = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 7, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobTunnelStatsIngressError.setStatus('deprecated')
if mibBuilder.loadTexts: avWlanMobTunnelStatsIngressError.setDescription('Total packets with errors recvd on tunnel.')
avWlanMobTunnelStatsIngressDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 7, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobTunnelStatsIngressDropped.setStatus('deprecated')
if mibBuilder.loadTexts: avWlanMobTunnelStatsIngressDropped.setDescription('Total packets that were dropped by ingress processing - e.g. incorrect vlan or WDP disabled or rate limited.')
avWlanMobTunnelStatsIngressPkts64 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 7, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobTunnelStatsIngressPkts64.setStatus('deprecated')
if mibBuilder.loadTexts: avWlanMobTunnelStatsIngressPkts64.setDescription('Total number of 64 byte packets received on tunnel.')
avWlanMobTunnelStatsIngressPkts65to127 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 7, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobTunnelStatsIngressPkts65to127.setStatus('deprecated')
if mibBuilder.loadTexts: avWlanMobTunnelStatsIngressPkts65to127.setDescription('Total number of 65 byte to 127 byte packets received on the tunnel.')
avWlanMobTunnelStatsIngressPkts128to255 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 7, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobTunnelStatsIngressPkts128to255.setStatus('deprecated')
if mibBuilder.loadTexts: avWlanMobTunnelStatsIngressPkts128to255.setDescription('Total number of 128 byte to 255 byte packets recvd.')
avWlanMobTunnelStatsIngressPkts256to511 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 7, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobTunnelStatsIngressPkts256to511.setStatus('deprecated')
if mibBuilder.loadTexts: avWlanMobTunnelStatsIngressPkts256to511.setDescription('Total number of 256 byte to 511 byte packets recvd.')
avWlanMobTunnelStatsIngressPkts512to1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 7, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobTunnelStatsIngressPkts512to1023.setStatus('deprecated')
if mibBuilder.loadTexts: avWlanMobTunnelStatsIngressPkts512to1023.setDescription('Total number of 512 byte to 1023 byte packets recvd.')
avWlanMobTunnelStatsIngressPkts1024to1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 7, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobTunnelStatsIngressPkts1024to1518.setStatus('deprecated')
if mibBuilder.loadTexts: avWlanMobTunnelStatsIngressPkts1024to1518.setDescription('Total number of 1024 byte to 1518 byte packets recvd.')
avWlanMobTunnelStatsIngressPkts1522to9216 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 7, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobTunnelStatsIngressPkts1522to9216.setStatus('deprecated')
if mibBuilder.loadTexts: avWlanMobTunnelStatsIngressPkts1522to9216.setDescription('Jumbo frames ingressing on the tunnel.')
avWlanMobTunnelStatsIngressFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 7, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobTunnelStatsIngressFragments.setStatus('deprecated')
if mibBuilder.loadTexts: avWlanMobTunnelStatsIngressFragments.setDescription('Total CAPWAP fragments ingressing on the tunnel.')
avWlanMobTunnelStatsIngressFragmentsDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 7, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobTunnelStatsIngressFragmentsDrop.setStatus('deprecated')
if mibBuilder.loadTexts: avWlanMobTunnelStatsIngressFragmentsDrop.setDescription('Total number of CAPWAP fragments dropped because they could not be re-assembled.')
avWlanMobTunnelStatsIngressKeepAliveReq = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 7, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobTunnelStatsIngressKeepAliveReq.setStatus('deprecated')
if mibBuilder.loadTexts: avWlanMobTunnelStatsIngressKeepAliveReq.setDescription('Total keep alive requests received on this tunnel.')
avWlanMobTunnelStatsIngressKeepAliveRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 7, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobTunnelStatsIngressKeepAliveRsp.setStatus('deprecated')
if mibBuilder.loadTexts: avWlanMobTunnelStatsIngressKeepAliveRsp.setDescription('Total keep alive responses received on this tunnel.')
avWlanMobTunnelStatsIngressDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 7, 1, 19), CounterBasedGauge64()).setUnits('bits/seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobTunnelStatsIngressDataRate.setStatus('deprecated')
if mibBuilder.loadTexts: avWlanMobTunnelStatsIngressDataRate.setDescription('Data rate of ingress traffic over the past second.')
avWlanMobTunnelStatsEgressPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 7, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobTunnelStatsEgressPkts.setStatus('deprecated')
if mibBuilder.loadTexts: avWlanMobTunnelStatsEgressPkts.setDescription('Total packets egressing on the tunnel.')
avWlanMobTunnelStatsEgressMcast = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 7, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobTunnelStatsEgressMcast.setStatus('deprecated')
if mibBuilder.loadTexts: avWlanMobTunnelStatsEgressMcast.setDescription('Multicast packets egressing on the tunnel.')
avWlanMobTunnelStatsEgressBcast = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 7, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobTunnelStatsEgressBcast.setStatus('deprecated')
if mibBuilder.loadTexts: avWlanMobTunnelStatsEgressBcast.setDescription('Broadcast packets egressing on the tunnel.')
avWlanMobTunnelStatsEgressOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 7, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobTunnelStatsEgressOctets.setStatus('deprecated')
if mibBuilder.loadTexts: avWlanMobTunnelStatsEgressOctets.setDescription('Total octets egressing on the tunnel.')
avWlanMobTunnelStatsEgressError = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 7, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobTunnelStatsEgressError.setStatus('deprecated')
if mibBuilder.loadTexts: avWlanMobTunnelStatsEgressError.setDescription('Total packets with errors sent on tunnel.')
avWlanMobTunnelStatsEgressDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 7, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobTunnelStatsEgressDropped.setStatus('deprecated')
if mibBuilder.loadTexts: avWlanMobTunnelStatsEgressDropped.setDescription('Total packets dropped on the egress due to e.g. rate limiting or vlan filtering.')
avWlanMobTunnelStatsEgressPkts64 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 7, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobTunnelStatsEgressPkts64.setStatus('deprecated')
if mibBuilder.loadTexts: avWlanMobTunnelStatsEgressPkts64.setDescription('Total 64 byte packets egressing on the tunnel.')
avWlanMobTunnelStatsEgressPkts65to127 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 7, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobTunnelStatsEgressPkts65to127.setStatus('deprecated')
if mibBuilder.loadTexts: avWlanMobTunnelStatsEgressPkts65to127.setDescription('Total 65 byte to 127 byte packets egressing on the tunnel.')
avWlanMobTunnelStatsEgressPkts128to255 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 7, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobTunnelStatsEgressPkts128to255.setStatus('deprecated')
if mibBuilder.loadTexts: avWlanMobTunnelStatsEgressPkts128to255.setDescription('Total 128 byte to 255 byte packets egressing on the tunnel.')
avWlanMobTunnelStatsEgressPkts256to511 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 7, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobTunnelStatsEgressPkts256to511.setStatus('deprecated')
if mibBuilder.loadTexts: avWlanMobTunnelStatsEgressPkts256to511.setDescription('Total 256 byte to 511 byte packets egressing on the tunnel.')
avWlanMobTunnelStatsEgressPkts512to1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 7, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobTunnelStatsEgressPkts512to1023.setStatus('deprecated')
if mibBuilder.loadTexts: avWlanMobTunnelStatsEgressPkts512to1023.setDescription('Total 512 byte to 1023 byte packets egressing on the tunnel.')
avWlanMobTunnelStatsEgressPkts1024to1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 7, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobTunnelStatsEgressPkts1024to1518.setStatus('deprecated')
if mibBuilder.loadTexts: avWlanMobTunnelStatsEgressPkts1024to1518.setDescription('Total 1024 byte to 1518 byte packets egressing on the tunnel.')
avWlanMobTunnelStatsEgressPkts1522to9216 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 7, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobTunnelStatsEgressPkts1522to9216.setStatus('deprecated')
if mibBuilder.loadTexts: avWlanMobTunnelStatsEgressPkts1522to9216.setDescription('Jumbo frame egressing on the tunnel.')
avWlanMobTunnelStatsEgressFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 7, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobTunnelStatsEgressFragments.setStatus('deprecated')
if mibBuilder.loadTexts: avWlanMobTunnelStatsEgressFragments.setDescription('Total number of CAPWAP fragments transmitted.')
avWlanMobTunnelStatsEgressKeepAliveReq = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 7, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobTunnelStatsEgressKeepAliveReq.setStatus('deprecated')
if mibBuilder.loadTexts: avWlanMobTunnelStatsEgressKeepAliveReq.setDescription('Total keep alive requests transmitted from this tunnel.')
avWlanMobTunnelStatsEgressKeepAliveRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 7, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobTunnelStatsEgressKeepAliveRsp.setStatus('deprecated')
if mibBuilder.loadTexts: avWlanMobTunnelStatsEgressKeepAliveRsp.setDescription('Total keep alive responses transmitted from this tunnel.')
avWlanMobTunnelStatsEgressDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 7, 1, 36), CounterBasedGauge64()).setUnits('bits/seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobTunnelStatsEgressDataRate.setStatus('deprecated')
if mibBuilder.loadTexts: avWlanMobTunnelStatsEgressDataRate.setDescription('Data rate of egress traffic over the past second.')
avWlanMobTunnelStatsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 7, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avWlanMobTunnelStatsReset.setStatus('deprecated')
if mibBuilder.loadTexts: avWlanMobTunnelStatsReset.setDescription('This is an action object. When this object is set to reset(2), statistics for the tunnel will be cleared. Read on this object always returns none(1).')
avWlanMobSwTunnelStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 8), )
if mibBuilder.loadTexts: avWlanMobSwTunnelStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwTunnelStatisticsTable.setDescription('This table contains statistics for each mobility/access tunnel.')
avWlanMobSwTunnelStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 8, 1), ).setIndexNames((0, "AVAYA-WLAN-MOB-SW-MIB", "avWlanMobSwDeviceType"), (0, "AVAYA-WLAN-MOB-SW-MIB", "avWlanMobSwDeviceId"))
if mibBuilder.loadTexts: avWlanMobSwTunnelStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwTunnelStatisticsEntry.setDescription('Each entry in this table contain statistics available for each mobility/access tunnel established at the switch.')
avWlanMobSwTunnelIngressPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 8, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwTunnelIngressPkts.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwTunnelIngressPkts.setDescription('Total packets received on the tunnel.')
avWlanMobSwTunnelIngressMcast = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 8, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwTunnelIngressMcast.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwTunnelIngressMcast.setDescription('Multicast packets recvd on the tunnel.')
avWlanMobSwTunnelIngressBcast = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 8, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwTunnelIngressBcast.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwTunnelIngressBcast.setDescription('Broadcasts recvd on the tunnel.')
avWlanMobSwTunnelIngressOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 8, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwTunnelIngressOctets.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwTunnelIngressOctets.setDescription('Total octets recvd on the tunnel.')
avWlanMobSwTunnelIngressError = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 8, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwTunnelIngressError.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwTunnelIngressError.setDescription('Total packets with errors recvd on tunnel.')
avWlanMobSwTunnelIngressDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 8, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwTunnelIngressDropped.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwTunnelIngressDropped.setDescription('Total packets that were dropped by ingress processing - e.g. incorrect vlan or WDP disabled or rate limited.')
avWlanMobSwTunnelIngressPkts64 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 8, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwTunnelIngressPkts64.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwTunnelIngressPkts64.setDescription('Total number of 64 byte packets received on tunnel.')
avWlanMobSwTunnelIngressPkts65to127 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 8, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwTunnelIngressPkts65to127.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwTunnelIngressPkts65to127.setDescription('Total number of 65 byte to 127 byte packets received on the tunnel.')
avWlanMobSwTunnelIngressPkts128to255 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 8, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwTunnelIngressPkts128to255.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwTunnelIngressPkts128to255.setDescription('Total number of 128 byte to 255 byte packets recvd.')
avWlanMobSwTunnelIngressPkts256to511 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 8, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwTunnelIngressPkts256to511.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwTunnelIngressPkts256to511.setDescription('Total number of 256 byte to 511 byte packets recvd.')
avWlanMobSwTunnelIngressPkts512to1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 8, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwTunnelIngressPkts512to1023.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwTunnelIngressPkts512to1023.setDescription('Total number of 512 byte to 1023 byte packets recvd.')
avWlanMobSwTunnelIngressPkts1024to1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 8, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwTunnelIngressPkts1024to1518.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwTunnelIngressPkts1024to1518.setDescription('Total number of 1024 byte to 1518 byte packets recvd.')
avWlanMobSwTunnelIngressPkts1522to9216 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 8, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwTunnelIngressPkts1522to9216.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwTunnelIngressPkts1522to9216.setDescription('Jumbo frames ingressing on the tunnel.')
avWlanMobSwTunnelIngressFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 8, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwTunnelIngressFragments.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwTunnelIngressFragments.setDescription('Total CAPWAP fragments ingressing on the tunnel.')
avWlanMobSwTunnelIngressFragmentsDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 8, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwTunnelIngressFragmentsDrop.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwTunnelIngressFragmentsDrop.setDescription('Total number of CAPWAP fragments dropped because they could not be re-assembled.')
avWlanMobSwTunnelIngressKeepAliveReq = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 8, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwTunnelIngressKeepAliveReq.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwTunnelIngressKeepAliveReq.setDescription('Total keep alive requests received on this tunnel.')
avWlanMobSwTunnelIngressKeepAliveRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 8, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwTunnelIngressKeepAliveRsp.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwTunnelIngressKeepAliveRsp.setDescription('Total keep alive responses received on this tunnel.')
avWlanMobSwTunnelIngressDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 8, 1, 18), CounterBasedGauge64()).setUnits('bits/seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwTunnelIngressDataRate.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwTunnelIngressDataRate.setDescription('Data rate of ingress traffic over the past second.')
avWlanMobSwTunnelEgressPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 8, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwTunnelEgressPkts.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwTunnelEgressPkts.setDescription('Total packets egressing on the tunnel.')
avWlanMobSwTunnelEgressMcast = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 8, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwTunnelEgressMcast.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwTunnelEgressMcast.setDescription('Multicast packets egressing on the tunnel.')
avWlanMobSwTunnelEgressBcast = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 8, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwTunnelEgressBcast.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwTunnelEgressBcast.setDescription('Broadcast packets egressing on the tunnel.')
avWlanMobSwTunnelEgressOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 8, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwTunnelEgressOctets.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwTunnelEgressOctets.setDescription('Total octets egressing on the tunnel.')
avWlanMobSwTunnelEgressError = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 8, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwTunnelEgressError.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwTunnelEgressError.setDescription('Total packets with errors sent on tunnel.')
avWlanMobSwTunnelEgressDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 8, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwTunnelEgressDropped.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwTunnelEgressDropped.setDescription('Total packets dropped on the egress due to e.g. rate limiting or vlan filtering.')
avWlanMobSwTunnelEgressPkts64 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 8, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwTunnelEgressPkts64.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwTunnelEgressPkts64.setDescription('Total 64 byte packets egressing on the tunnel.')
avWlanMobSwTunnelEgressPkts65to127 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 8, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwTunnelEgressPkts65to127.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwTunnelEgressPkts65to127.setDescription('Total 65 byte to 127 byte packets egressing on the tunnel.')
avWlanMobSwTunnelEgressPkts128to255 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 8, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwTunnelEgressPkts128to255.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwTunnelEgressPkts128to255.setDescription('Total 128 byte to 255 byte packets egressing on the tunnel.')
avWlanMobSwTunnelEgressPkts256to511 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 8, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwTunnelEgressPkts256to511.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwTunnelEgressPkts256to511.setDescription('Total 256 byte to 511 byte packets egressing on the tunnel.')
avWlanMobSwTunnelEgressPkts512to1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 8, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwTunnelEgressPkts512to1023.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwTunnelEgressPkts512to1023.setDescription('Total 512 byte to 1023 byte packets egressing on the tunnel.')
avWlanMobSwTunnelEgressPkts1024to1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 8, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwTunnelEgressPkts1024to1518.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwTunnelEgressPkts1024to1518.setDescription('Total 1024 byte to 1518 byte packets egressing on the tunnel.')
avWlanMobSwTunnelEgressPkts1522to9216 = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 8, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwTunnelEgressPkts1522to9216.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwTunnelEgressPkts1522to9216.setDescription('Jumbo frame egressing on the tunnel.')
avWlanMobSwTunnelEgressFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 8, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwTunnelEgressFragments.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwTunnelEgressFragments.setDescription('Total number of CAPWAP fragments transmitted.')
avWlanMobSwTunnelEgressKeepAliveReq = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 8, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwTunnelEgressKeepAliveReq.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwTunnelEgressKeepAliveReq.setDescription('Total keep alive requests transmitted from this tunnel.')
avWlanMobSwTunnelEgressKeepAliveRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 8, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwTunnelEgressKeepAliveRsp.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwTunnelEgressKeepAliveRsp.setDescription('Total keep alive responses transmitted from this tunnel.')
avWlanMobSwTunnelEgressDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 8, 1, 35), CounterBasedGauge64()).setUnits('bits/seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwTunnelEgressDataRate.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwTunnelEgressDataRate.setDescription('Data rate of egress traffic over the past second.')
avWlanMobSwTunnelResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 8, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avWlanMobSwTunnelResetStats.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwTunnelResetStats.setDescription('This is an action object. When this object is set to reset(2), statistics for the tunnel will be cleared. Read on this object always returns none(1).')
avWlanMobSwTunnelIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 8, 1, 37), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwTunnelIpAddressType.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwTunnelIpAddressType.setDescription('This object indicates the type of internet address in the corresponding instance of rcWlanMobSwTunnelIPAddress. Currently, only the values ipv4(1) and ipv6(2) are allowed.')
avWlanMobSwTunnelIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 8, 1, 38), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwTunnelIpAddress.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwTunnelIpAddress.setDescription('This object contains the IP address that will be used to display Wireless LAN switch tunnel.')
avWlanMobSwTunnelInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 8, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwTunnelInterfaceId.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwTunnelInterfaceId.setDescription('Used to display Logical Port for the tunnel.')
avWlanMobSwControllerTable = MibTable((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 9), )
if mibBuilder.loadTexts: avWlanMobSwControllerTable.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwControllerTable.setDescription('The table defines System IPs of the Controllers for this switch. The controllers are used in the round robin fashion.')
avWlanMobSwControllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 9, 1), ).setIndexNames((0, "AVAYA-WLAN-MOB-SW-MIB", "avWlanMobSwControllerId"))
if mibBuilder.loadTexts: avWlanMobSwControllerEntry.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwControllerEntry.setDescription('Entry containing configuration information for a particular Controller.')
avWlanMobSwControllerId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: avWlanMobSwControllerId.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwControllerId.setDescription('Index into the table.')
avWlanMobSwControllerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 9, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avWlanMobSwControllerAddrType.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwControllerAddrType.setDescription('The type of internet address contained in the corresponding instance of avWlanMobSwControllerAddr. Currently only ipv4(1) and ipv6(2) are allowed.')
avWlanMobSwControllerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 9, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avWlanMobSwControllerAddr.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwControllerAddr.setDescription('The internet address of the configured Controller IP address. The type of address contained in this object is indicated by the corresponding instance of avWlanMobSwControllerAddrType.')
avWlanMobSwControllerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 9, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: avWlanMobSwControllerRowStatus.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwControllerRowStatus.setDescription('This variable is used to create or delete entries in the table.')
avWlanMobSwFdbTable = MibTable((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 10), )
if mibBuilder.loadTexts: avWlanMobSwFdbTable.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwFdbTable.setDescription('This table contains FDB entries for wireless traffic.')
avWlanMobSwFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 10, 1), ).setIndexNames((0, "AVAYA-WLAN-MOB-SW-MIB", "avWlanMobSwFdbVlanId"), (0, "AVAYA-WLAN-MOB-SW-MIB", "avWlanMobSwFdbMacAddress"))
if mibBuilder.loadTexts: avWlanMobSwFdbEntry.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwFdbEntry.setDescription('Information about a specific unicast MAC address for which the mobility switch has forwarding information.')
avWlanMobSwFdbVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 10, 1, 1), VlanIdOrNone())
if mibBuilder.loadTexts: avWlanMobSwFdbVlanId.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwFdbVlanId.setDescription('Local VLAN ID')
avWlanMobSwFdbMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 10, 1, 2), MacAddress())
if mibBuilder.loadTexts: avWlanMobSwFdbMacAddress.setReference('IEEE 802.1D-1990: Section 3.9.1, 3.9.2')
if mibBuilder.loadTexts: avWlanMobSwFdbMacAddress.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwFdbMacAddress.setDescription('A unicast MAC address for which the mobility switch has forwarding and/or filtering information.')
avWlanMobSwFdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("learned", 3), ("self", 4), ("static", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwFdbType.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwFdbType.setDescription('This object indicates the type of this entry other(1) - invalid(2) - learned(3) - self(4) - static(5) - ')
avWlanMobSwFdbTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mobTunnel", 1), ("accessTunnel", 2), ("resPeerAccessTunnel", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwFdbTunnelType.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwFdbTunnelType.setDescription('This indicates the type of the tunnel the entry is learned on')
avWlanMobSwFdbRemoteEndpointId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 10, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwFdbRemoteEndpointId.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwFdbRemoteEndpointId.setDescription("The MAC address of the FDB entry's remote end point.")
avWlanMobSwFdbRemoteEndpointAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 10, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwFdbRemoteEndpointAddrType.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwFdbRemoteEndpointAddrType.setDescription("This object indicates the type of internet address of the FDB entry's remote end point .")
avWlanMobSwFdbRemoteEndpointAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 10, 1, 7), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwFdbRemoteEndpointAddr.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwFdbRemoteEndpointAddr.setDescription('The address of the remote end point(mobility switch or access point). The type of address is indicated by the corresponding instance of avWlanMobSwRemoteEndPointAddrType.')
avWlanMobSwFdbRemoteEndpointUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 10, 1, 8), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwFdbRemoteEndpointUdpPort.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwFdbRemoteEndpointUdpPort.setDescription('Indicates the UDP port used by the remote end point of the tunnel.')
avWlanMobSwFdbLocalEndpointUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 10, 1, 9), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwFdbLocalEndpointUdpPort.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwFdbLocalEndpointUdpPort.setDescription('Indicates the UDP port used by the local end point of the tunnel.')
avWlanMobSwFdbInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 10, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avWlanMobSwFdbInterfaceId.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwFdbInterfaceId.setDescription('Used to display Logical Port for the tunnel.')
avWlanMobSwFdbFlushAction = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 7, 10, 1, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("flush", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: avWlanMobSwFdbFlushAction.setStatus('current')
if mibBuilder.loadTexts: avWlanMobSwFdbFlushAction.setDescription('When this object is set to flush(2), the FDB entry learned by mobility switch will be flushed. Read on this object will always return none(1).')
mibBuilder.exportSymbols("AVAYA-WLAN-MOB-SW-MIB", avWlanMobTunnelStatsEgressPkts=avWlanMobTunnelStatsEgressPkts, avWlanMobTunnelStatsEgressDropped=avWlanMobTunnelStatsEgressDropped, avWlanMobSwTunnelIngressPkts=avWlanMobSwTunnelIngressPkts, avWlanMobTunnelStatsEgressFragments=avWlanMobTunnelStatsEgressFragments, avWlanMobTunnelStatsEgressKeepAliveReq=avWlanMobTunnelStatsEgressKeepAliveReq, avWlanMobVlanServerPriority=avWlanMobVlanServerPriority, avWlanMobTunnelStatsIngressPkts128to255=avWlanMobTunnelStatsIngressPkts128to255, avWlanMobPeerVlansAdvertisedEntry=avWlanMobPeerVlansAdvertisedEntry, avWlanMobSwTunnelEgressError=avWlanMobSwTunnelEgressError, avWlanMobSwTunnelIpAddressType=avWlanMobSwTunnelIpAddressType, avWlanMobTunnelStatsReset=avWlanMobTunnelStatsReset, avWlanMobSwTunnelIngressOctets=avWlanMobSwTunnelIngressOctets, avWlanMobSwFdbRemoteEndpointId=avWlanMobSwFdbRemoteEndpointId, avWlanMobSwTunnelEgressMcast=avWlanMobSwTunnelEgressMcast, avWlanMobAgentVlanAdminMapped=avWlanMobAgentVlanAdminMapped, avWlanMobSwFdbTunnelType=avWlanMobSwFdbTunnelType, avWlanMobSwTunnelIngressDataRate=avWlanMobSwTunnelIngressDataRate, avWlanMobVlanPeerAdvertiserEntry=avWlanMobVlanPeerAdvertiserEntry, avWlanMobTunnelStatsEntry=avWlanMobTunnelStatsEntry, avWlanMobTunnelStatsEgressPkts64=avWlanMobTunnelStatsEgressPkts64, avWlanMobSwFdbMacAddress=avWlanMobSwFdbMacAddress, avWlanMobPeerVlansAdvertisedVlanName=avWlanMobPeerVlansAdvertisedVlanName, avWlanMobTunnelStatsDeviceId=avWlanMobTunnelStatsDeviceId, avWlanMobAgentVlanScope=avWlanMobAgentVlanScope, avWlanMobVlanPeerAdvertiserPriority=avWlanMobVlanPeerAdvertiserPriority, avWlanMobTunnelStatsEgressPkts65to127=avWlanMobTunnelStatsEgressPkts65to127, avWlanMobSwDeviceId=avWlanMobSwDeviceId, avWlanMobSwTunnelIngressKeepAliveRsp=avWlanMobSwTunnelIngressKeepAliveRsp, avWlanMobVlanServerEntry=avWlanMobVlanServerEntry, avWlanMobSwTunnelEgressPkts512to1023=avWlanMobSwTunnelEgressPkts512to1023, avWlanMobSwTransMaxRetransmits=avWlanMobSwTransMaxRetransmits, avWlanMobTunnelStatsEgressPkts1024to1518=avWlanMobTunnelStatsEgressPkts1024to1518, avWlanMobAgentVlanEntry=avWlanMobAgentVlanEntry, avWlanMobSwNumResPeerAccessTunnels=avWlanMobSwNumResPeerAccessTunnels, avWlanMobSwFdbType=avWlanMobSwFdbType, avWlanMobTunnelStatsTable=avWlanMobTunnelStatsTable, avWlanMobSwTunnelIngressKeepAliveReq=avWlanMobSwTunnelIngressKeepAliveReq, avWlanMobSwTunnelEgressPkts1522to9216=avWlanMobSwTunnelEgressPkts1522to9216, avWlanMobSwTunnelEgressFragments=avWlanMobSwTunnelEgressFragments, avWlanMobSwDeviceUdpPort=avWlanMobSwDeviceUdpPort, avWlanMobSwVMMMaxRetransmits=avWlanMobSwVMMMaxRetransmits, avWlanMobSwDeviceInterfaceId=avWlanMobSwDeviceInterfaceId, avWlanMobTunnelStatsEgressKeepAliveRsp=avWlanMobTunnelStatsEgressKeepAliveRsp, avWlanMobSwTunnelStatisticsEntry=avWlanMobSwTunnelStatisticsEntry, avWlanMobSwControllerAddr=avWlanMobSwControllerAddr, avWlanMobTunnelStatsEgressPkts512to1023=avWlanMobTunnelStatsEgressPkts512to1023, avWlanMobSwTunnelIngressError=avWlanMobSwTunnelIngressError, avWlanMobSwNumMobilityTunnels=avWlanMobSwNumMobilityTunnels, avWlanMobSwPurgeInactiveMaps=avWlanMobSwPurgeInactiveMaps, avWlanMobSwTunnelIngressPkts128to255=avWlanMobSwTunnelIngressPkts128to255, avWlanMobTunnelStatsEgressOctets=avWlanMobTunnelStatsEgressOctets, avWlanMobSwTunnelEgressPkts1024to1518=avWlanMobSwTunnelEgressPkts1024to1518, avWlanMobAgentVlanTrack=avWlanMobAgentVlanTrack, avWlanMobSwCtrlAddrType=avWlanMobSwCtrlAddrType, avWlanMobSwTunnelEgressKeepAliveReq=avWlanMobSwTunnelEgressKeepAliveReq, avWlanMobTunnelStatsIngressFragments=avWlanMobTunnelStatsIngressFragments, avWlanMobAgentVlanTable=avWlanMobAgentVlanTable, avWlanMobSwFdbEntry=avWlanMobSwFdbEntry, avWlanMobSwFdbFlushAction=avWlanMobSwFdbFlushAction, avWlanMobSwControllerRowStatus=avWlanMobSwControllerRowStatus, avWlanMobSwDeviceType=avWlanMobSwDeviceType, avWlanMobSwKeepAliveInterval=avWlanMobSwKeepAliveInterval, avWlanMobSwDeviceLocalUdpPort=avWlanMobSwDeviceLocalUdpPort, avWlanMobTunnelStatsIngressPkts=avWlanMobTunnelStatsIngressPkts, avWlanMobSwTunnelEgressPkts64=avWlanMobSwTunnelEgressPkts64, avayaWlanMobSwMib=avayaWlanMobSwMib, avWlanMobSwDeviceStatus=avWlanMobSwDeviceStatus, avWlanMobTunnelStatsIngressPkts64=avWlanMobTunnelStatsIngressPkts64, avWlanMobTunnelStatsIngressKeepAliveReq=avWlanMobTunnelStatsIngressKeepAliveReq, avWlanMobSwTunnelIngressDropped=avWlanMobSwTunnelIngressDropped, avWlanMobSwFdbGlobalFlushAction=avWlanMobSwFdbGlobalFlushAction, avWlanMobSwTunnelResetStats=avWlanMobSwTunnelResetStats, avWlanMobAgentVlanWeight=avWlanMobAgentVlanWeight, avWlanMobSwTunnelIngressFragmentsDrop=avWlanMobSwTunnelIngressFragmentsDrop, avWlanMobSwDeviceAddr=avWlanMobSwDeviceAddr, avWlanMobSwTunnelIngressBcast=avWlanMobSwTunnelIngressBcast, avWlanMobSwCtrlAddr=avWlanMobSwCtrlAddr, avWlanMobTunnelStatsIngressPkts1522to9216=avWlanMobTunnelStatsIngressPkts1522to9216, avWlanMobTunnelStatsEgressPkts256to511=avWlanMobTunnelStatsEgressPkts256to511, avWlanMobAgentVlanActive=avWlanMobAgentVlanActive, avWlanMobVlanPeerAdvertiserId=avWlanMobVlanPeerAdvertiserId, avWlanMobVlanServerVlanName=avWlanMobVlanServerVlanName, avWlanMobSwScalars=avWlanMobSwScalars, avWlanMobTunnelStatsIngressPkts1024to1518=avWlanMobTunnelStatsIngressPkts1024to1518, avWlanMobSwTunnelIngressPkts1522to9216=avWlanMobSwTunnelIngressPkts1522to9216, avWlanMobSwControllerEntry=avWlanMobSwControllerEntry, avWlanMobTunnelStatsIngressDataRate=avWlanMobTunnelStatsIngressDataRate, avWlanMobSwTunnelStatisticsTable=avWlanMobSwTunnelStatisticsTable, avWlanMobSwLocalDeviceId=avWlanMobSwLocalDeviceId, avWlanMobSwDeviceTable=avWlanMobSwDeviceTable, avWlanMobVlanServerId=avWlanMobVlanServerId, avWlanMobSwAllStatisticsReset=avWlanMobSwAllStatisticsReset, avWlanMobSwControllerId=avWlanMobSwControllerId, avWlanMobSwControllerAddrType=avWlanMobSwControllerAddrType, avWlanMobSwAllStatisticsResetStatus=avWlanMobSwAllStatisticsResetStatus, avWlanMobSwTunnelEgressPkts=avWlanMobSwTunnelEgressPkts, avWlanMobTunnelStatsIngressError=avWlanMobTunnelStatsIngressError, avWlanMobVlanServerTable=avWlanMobVlanServerTable, avWlanMobTunnelStatsIngressPkts256to511=avWlanMobTunnelStatsIngressPkts256to511, avWlanMobTunnelStatsIngressMcast=avWlanMobTunnelStatsIngressMcast, avWlanMobSwTunnelIngressPkts1024to1518=avWlanMobSwTunnelIngressPkts1024to1518, avWlanMobTunnelStatsIngressPkts65to127=avWlanMobTunnelStatsIngressPkts65to127, avWlanMobSwKeepAliveNumRetries=avWlanMobSwKeepAliveNumRetries, avWlanMobSwFdbGlobalFlushActionStatus=avWlanMobSwFdbGlobalFlushActionStatus, avWlanMobAgentVlanL3Mobility=avWlanMobAgentVlanL3Mobility, avWlanMobSwTunnelIngressPkts64=avWlanMobSwTunnelIngressPkts64, avWlanMobSwTunnelIngressPkts512to1023=avWlanMobSwTunnelIngressPkts512to1023, avWlanMobSwTunnelEgressOctets=avWlanMobSwTunnelEgressOctets, avWlanMobVlanPeerAdvertiserVlanName=avWlanMobVlanPeerAdvertiserVlanName, avWlanMobAgentVlanWcValidated=avWlanMobAgentVlanWcValidated, PYSNMP_MODULE_ID=avayaWlanMobSwMib, avWlanMobTunnelStatsIngressOctets=avWlanMobTunnelStatsIngressOctets, avWlanMobSwTunnelEgressBcast=avWlanMobSwTunnelEgressBcast, avWlanMobTunnelStatsIngressPkts512to1023=avWlanMobTunnelStatsIngressPkts512to1023, avWlanMobAgentVlanRowStatus=avWlanMobAgentVlanRowStatus, avWlanMobPeerVlansAdvertisedId=avWlanMobPeerVlansAdvertisedId, avWlanMobTunnelStatsIngressFragmentsDrop=avWlanMobTunnelStatsIngressFragmentsDrop, avWlanMobSwTunnelEgressPkts65to127=avWlanMobSwTunnelEgressPkts65to127, avWlanMobSwFdbInterfaceId=avWlanMobSwFdbInterfaceId, avWlanMobSwFdbVlanId=avWlanMobSwFdbVlanId, avWlanMobTunnelStatsEgressMcast=avWlanMobTunnelStatsEgressMcast, avWlanMobTunnelStatsEgressDataRate=avWlanMobTunnelStatsEgressDataRate, avWlanMobSwFdbTable=avWlanMobSwFdbTable, avWlanMobSwTunnelEgressPkts128to255=avWlanMobSwTunnelEgressPkts128to255, avWlanMobSwTunnelIngressFragments=avWlanMobSwTunnelIngressFragments, avWlanMobAgentVlanName=avWlanMobAgentVlanName, avWlanMobTunnelStatsIngressDropped=avWlanMobTunnelStatsIngressDropped, avWlanMobSwTunnelEgressDataRate=avWlanMobSwTunnelEgressDataRate, avWlanMobSwTunnelIngressMcast=avWlanMobSwTunnelIngressMcast, avWlanMobSwFdbRemoteEndpointAddr=avWlanMobSwFdbRemoteEndpointAddr, avWlanMobTunnelStatsEgressError=avWlanMobTunnelStatsEgressError, avWlanMobVlanPeerAdvertiserTable=avWlanMobVlanPeerAdvertiserTable, avWlanMobSwNumAccessTunnels=avWlanMobSwNumAccessTunnels, avWlanMobPeerVlansAdvertisedPriority=avWlanMobPeerVlansAdvertisedPriority, avWlanMobSwTunnelEgressPkts256to511=avWlanMobSwTunnelEgressPkts256to511, avWlanMobSwObjects=avWlanMobSwObjects, avWlanMobSwDeviceAddrType=avWlanMobSwDeviceAddrType, avWlanMobTunnelStatsEgressBcast=avWlanMobTunnelStatsEgressBcast, avWlanMobAgentVlanLVID=avWlanMobAgentVlanLVID, avWlanMobSwTunnelIngressPkts256to511=avWlanMobSwTunnelIngressPkts256to511, avWlanMobTunnelStatsEgressPkts128to255=avWlanMobTunnelStatsEgressPkts128to255, avWlanMobAgentObjects=avWlanMobAgentObjects, avWlanMobSwTunnelInterfaceId=avWlanMobSwTunnelInterfaceId, avWlanMobTunnelStatsEgressPkts1522to9216=avWlanMobTunnelStatsEgressPkts1522to9216, avWlanMobSwTunnelIngressPkts65to127=avWlanMobSwTunnelIngressPkts65to127, avWlanMobTunnelStatsIngressKeepAliveRsp=avWlanMobTunnelStatsIngressKeepAliveRsp, avWlanMobSwControllerTable=avWlanMobSwControllerTable, avWlanMobPeerVlansAdvertisedTable=avWlanMobPeerVlansAdvertisedTable, avWlanMobSwFdbRemoteEndpointUdpPort=avWlanMobSwFdbRemoteEndpointUdpPort, avWlanMobSwFdbLocalEndpointUdpPort=avWlanMobSwFdbLocalEndpointUdpPort, avWlanMobSwTunnelIpAddress=avWlanMobSwTunnelIpAddress, avWlanMobSwVLANPeriodicAdvInterval=avWlanMobSwVLANPeriodicAdvInterval, avWlanMobTunnelStatsIngressBcast=avWlanMobTunnelStatsIngressBcast, avWlanMobSwDeviceEntry=avWlanMobSwDeviceEntry, avWlanMobSwTunnelEgressDropped=avWlanMobSwTunnelEgressDropped, avWlanMobSwFdbRemoteEndpointAddrType=avWlanMobSwFdbRemoteEndpointAddrType, avWlanMobSwTunnelEgressKeepAliveRsp=avWlanMobSwTunnelEgressKeepAliveRsp)
