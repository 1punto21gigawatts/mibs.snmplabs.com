#
# PySNMP MIB module XMSERVD-PERF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XMSERVD-PERF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:44:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, ModuleIdentity, NotificationType, enterprises, MibIdentifier, Counter32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, internet, Bits, Counter64, iso, Gauge32, IpAddress, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ModuleIdentity", "NotificationType", "enterprises", "MibIdentifier", "Counter32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "internet", "Bits", "Counter64", "iso", "Gauge32", "IpAddress", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
directory = MibIdentifier((1, 3, 6, 1, 1))
mgmt = MibIdentifier((1, 3, 6, 1, 2))
experimental = MibIdentifier((1, 3, 6, 1, 3))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2))
ibmAgents = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3))
aix = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1))
aixRT = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 1))
aixRISC6000 = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2))
risc6000agents = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 1))
risc6000snmpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 1, 1))
risc6000gated = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 1, 2))
risc6000xmservd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 1, 3))
risc6000ibm7318 = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 1, 4))
risc6000clsmuxpd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 1, 5))
risc6000private = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2))
risc6000samples = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 1))
risc6000sampleAgents = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 1, 1))
risc6000perf = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2))
xmd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1))
risc6000public = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 3))
aix370 = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 3))
aixPS2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 4))
mvs = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 2))
mvs370 = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 2, 1))
vm = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 3))
vm370 = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 3, 1))
os2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 4))
ps2PS2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 4, 1))
os400 = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 5))
os400as400 = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 5, 1))
xmdCPU = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 1))
xmdCPUGluser = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 1, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdCPUGluser.setStatus('mandatory')
if mibBuilder.loadTexts: xmdCPUGluser.setDescription('System-wide time executing in user mode (percent)')
xmdCPUGlkern = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 1, 102), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdCPUGlkern.setStatus('mandatory')
if mibBuilder.loadTexts: xmdCPUGlkern.setDescription('System-wide time executing in kernel mode (percent)')
xmdCPUGlwait = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 1, 103), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdCPUGlwait.setStatus('mandatory')
if mibBuilder.loadTexts: xmdCPUGlwait.setDescription('System-wide time waiting for IO (percent)')
xmdCPUGlidle = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 1, 104), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdCPUGlidle.setStatus('mandatory')
if mibBuilder.loadTexts: xmdCPUGlidle.setDescription('System-wide time CPU is idle (percent)')
xmdCPUGluticks = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 1, 121), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdCPUGluticks.setStatus('mandatory')
if mibBuilder.loadTexts: xmdCPUGluticks.setDescription('System-wide CPU ticks executing in user mode')
xmdCPUGlkticks = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 1, 122), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdCPUGlkticks.setStatus('mandatory')
if mibBuilder.loadTexts: xmdCPUGlkticks.setDescription('System-wide CPU ticks executing in kernel mode')
xmdCPUGlwticks = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 1, 123), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdCPUGlwticks.setStatus('mandatory')
if mibBuilder.loadTexts: xmdCPUGlwticks.setDescription('System-wide CPU ticks waiting for IO')
xmdCPUGliticks = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 1, 124), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdCPUGliticks.setStatus('mandatory')
if mibBuilder.loadTexts: xmdCPUGliticks.setDescription('System-wide CPU ticks while CPU is idle')
xmdMem = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2))
xmdMemReal = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 1))
xmdMemRealSize = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemRealSize.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemRealSize.setDescription('Size of physical memory (4K pages)')
xmdMemRealNumfrb = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemRealNumfrb.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemRealNumfrb.setDescription('Number of pages on free list')
xmdMemRealNoncomp = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemRealNoncomp.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemRealNoncomp.setDescription('Number of non-computational pages resident in memory')
xmdMemRealComp = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemRealComp.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemRealComp.setDescription('Number of computational pages resident in memory')
xmdMemRealNumlocal = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemRealNumlocal.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemRealNumlocal.setDescription('Number of local pages resident in memory')
xmdMemRealNumclient = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemRealNumclient.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemRealNumclient.setDescription('Number of client pages resident in memory')
xmdMemRealMaxclient = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemRealMaxclient.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemRealMaxclient.setDescription('Maximum number of client pages allowed')
xmdMemRealPdecay = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemRealPdecay.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemRealPdecay.setDescription('Decay rate for repaging values')
xmdMemRealSysrepag = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemRealSysrepag.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemRealSysrepag.setDescription('Global repaging rate')
xmdMemRealEfree = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemRealEfree.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemRealEfree.setDescription('% memory which is free')
xmdMemRealEpinned = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemRealEpinned.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemRealEpinned.setDescription('% memory which is pinned')
xmdMemRealEcomp = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemRealEcomp.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemRealEcomp.setDescription('% memory allocated to computational segments')
xmdMemRealEnoncomp = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemRealEnoncomp.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemRealEnoncomp.setDescription('% memory allocated to non-computational segments')
xmdMemRealElocal = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemRealElocal.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemRealElocal.setDescription('% memory allocated to local segments')
xmdMemRealEclnt = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemRealEclnt.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemRealEclnt.setDescription('% memory allocated to client segments')
xmdMemRealWseguse = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemRealWseguse.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemRealWseguse.setDescription('working seg in use pages')
xmdMemRealPseguse = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemRealPseguse.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemRealPseguse.setDescription('persistent seg in use pages')
xmdMemRealClseguse = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemRealClseguse.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemRealClseguse.setDescription('client seg in use pages')
xmdMemRealWsegpin = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemRealWsegpin.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemRealWsegpin.setDescription('working seg pinned pages')
xmdMemRealPsegpin = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemRealPsegpin.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemRealPsegpin.setDescription('persistent seg pinned pages')
xmdMemRealClsegpin = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemRealClsegpin.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemRealClsegpin.setDescription('client seg pinned pages')
xmdMemVirt = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 2))
xmdMemVirtPagein = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemVirtPagein.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemVirtPagein.setDescription('4K pages read by VMM')
xmdMemVirtPageout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemVirtPageout.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemVirtPageout.setDescription('4K pages written by VMM')
xmdMemVirtPgspgin = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemVirtPgspgin.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemVirtPgspgin.setDescription('4K pages read from paging space by VMM')
xmdMemVirtPgspgout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemVirtPgspgout.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemVirtPgspgout.setDescription('4K pages written to paging space by VMM')
xmdMemVirtSio = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemVirtSio.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemVirtSio.setDescription('4K IO requests initiated by VMM')
xmdMemVirtIodone = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemVirtIodone.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemVirtIodone.setDescription('4K IO requests completed by VMM')
xmdMemVirtZerofill = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemVirtZerofill.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemVirtZerofill.setDescription('Page faults satisfied by zero-filling memory frames')
xmdMemVirtPagexct = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemVirtPagexct.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemVirtPagexct.setDescription('Total page faults')
xmdMemVirtPgrclm = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemVirtPgrclm.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemVirtPgrclm.setDescription('Page faults satisfied by page reclaims')
xmdMemVirtLockexct = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemVirtLockexct.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemVirtLockexct.setDescription('Page faults due to lock misses')
xmdMemVirtBacktrk = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemVirtBacktrk.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemVirtBacktrk.setDescription('Page faults while satisfying previous page-faults')
xmdMemVirtExfill = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemVirtExfill.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemVirtExfill.setDescription('Instruction page faults')
xmdMemVirtScan = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemVirtScan.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemVirtScan.setDescription('Physical memory 4K frames examined by VMM')
xmdMemVirtCycle = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemVirtCycle.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemVirtCycle.setDescription('Complete scans of physical memory by VMM')
xmdMemVirtSteal = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemVirtSteal.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemVirtSteal.setDescription('Physical memory 4K frames stolen by VMM')
xmdMemVirtFreewt = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemVirtFreewt.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemVirtFreewt.setDescription('Process waits due to page replacement')
xmdMemVirtExtendwt = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemVirtExtendwt.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemVirtExtendwt.setDescription('Process waits due to commit in progress')
xmdMemVirtPendiowt = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemVirtPendiowt.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemVirtPendiowt.setDescription('Process waits due to pageins')
xmdMemVirtPfavail = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 2, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemVirtPfavail.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemVirtPfavail.setDescription('Pages not pinned')
xmdMemVirtWcomrepag = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 2, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemVirtWcomrepag.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemVirtWcomrepag.setDescription('Weighted repage rate to computational segments')
xmdMemVirtWncomrepag = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 2, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemVirtWncomrepag.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemVirtWncomrepag.setDescription('Weighted repage rate to non-computational segments')
xmdMemVirtComrepag = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 2, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemVirtComrepag.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemVirtComrepag.setDescription('Repage rate to computational segments')
xmdMemVirtEcomrepag = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 2, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemVirtEcomrepag.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemVirtEcomrepag.setDescription('% of repage requests coming from computational segments')
xmdMemVirtNcomrepag = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 2, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemVirtNcomrepag.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemVirtNcomrepag.setDescription('Repage rate to non-computational segments')
xmdMemVirtEncomrepag = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 2, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemVirtEncomrepag.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemVirtEncomrepag.setDescription('% of repage requests coming from non-computational segments')
xmdMemVirtComrepl = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 2, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemVirtComrepl.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemVirtComrepl.setDescription('Page replace rate in computational segments')
xmdMemVirtEcomrepl = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 2, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemVirtEcomrepl.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemVirtEcomrepl.setDescription('% of page replace requests coming from computational segments')
xmdMemVirtNcomrepl = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 2, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemVirtNcomrepl.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemVirtNcomrepl.setDescription('Page replace rate in non-computational segments')
xmdMemVirtEncomrepl = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 2, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemVirtEncomrepl.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemVirtEncomrepl.setDescription('% of page replace requests coming from non-comp segments')
xmdMemVirtTotpends = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 2, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemVirtTotpends.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemVirtTotpends.setDescription('Number of page replacement pageouts pending')
xmdMemVirtCompends = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 2, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemVirtCompends.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemVirtCompends.setDescription('Number of computational page replacement pageouts pending')
xmdMemVirtNcompends = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 2, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemVirtNcompends.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemVirtNcompends.setDescription('Number of non-comp page replacement pageouts pending')
xmdMemVirtCltpends = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 2, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemVirtCltpends.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemVirtCltpends.setDescription('Total number of client page replacement pageouts pending')
xmdMemVirtNpswarn = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 2, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemVirtNpswarn.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemVirtNpswarn.setDescription('Threshold (pages) for warning user of paging space shortage')
xmdMemVirtNpskill = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 2, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemVirtNpskill.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemVirtNpskill.setDescription('Threshold for killing processes due to paging space shortage')
xmdMemVirtMaxfree = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 2, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemVirtMaxfree.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemVirtMaxfree.setDescription('Number of free pages attempted created by page replacement')
xmdMemVirtMinfree = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 2, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemVirtMinfree.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemVirtMinfree.setDescription('Page replacement starts when less than minfree pages are free')
xmdMemVirtMinperm = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 2, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemVirtMinperm.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemVirtMinperm.setDescription('Minimum number of non-computational pages kept resident')
xmdMemVirtMaxpgahead = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 2, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemVirtMaxpgahead.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemVirtMaxpgahead.setDescription('Maximum number of pageahead pages')
xmdMemVirtMinpgahead = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 2, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemVirtMinpgahead.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemVirtMinpgahead.setDescription('Minimum number of pageahead pages')
xmdMemVirtMaxpout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 2, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemVirtMaxpout.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemVirtMaxpout.setDescription('Maximum pages queued for a file (write behind maximum)')
xmdMemVirtMinpout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 2, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemVirtMinpout.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemVirtMinpout.setDescription('Minimum pages queued for a file (write behind maximum)')
xmdMemKmem = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 4), )
if mibBuilder.loadTexts: xmdMemKmem.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemKmem.setDescription('Kernel memory allocation statistics')
xmdMemKmemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 4, 1), )
if mibBuilder.loadTexts: xmdMemKmemEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemKmemEntry.setDescription('Element of above table')
xmdMemKmemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemKmemIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemKmemIndex.setDescription('Index Number')
xmdMemKmemInstName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemKmemInstName.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemKmemInstName.setDescription('Instance Name')
xmdMemKmemInuse = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemKmemInuse.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemKmemInuse.setDescription('Count of kernel memory buffers in use')
xmdMemKmemCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemKmemCalls.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemKmemCalls.setDescription('Number of requests for a kernel memory buffer')
xmdMemKmemFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemKmemFailures.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemKmemFailures.setDescription('Number of failed requests for a kernel memory buffer')
xmdMemKmemMemuse = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemKmemMemuse.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemKmemMemuse.setDescription('Current memory use (bytes)')
xmdMemKmemMemmax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemKmemMemmax.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemKmemMemmax.setDescription('Maximum memory ever used (bytes)')
xmdMemKmemBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdMemKmemBlocks.setStatus('mandatory')
if mibBuilder.loadTexts: xmdMemKmemBlocks.setDescription('Number of times blocked for kernel map')
xmdPagSp = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 3), )
if mibBuilder.loadTexts: xmdPagSp.setStatus('mandatory')
if mibBuilder.loadTexts: xmdPagSp.setDescription('Paging space statistics')
xmdPagSpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 3, 1), )
if mibBuilder.loadTexts: xmdPagSpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xmdPagSpEntry.setDescription('Element of above table')
xmdPagSpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdPagSpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xmdPagSpIndex.setDescription('Index Number')
xmdPagSpInstName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdPagSpInstName.setStatus('mandatory')
if mibBuilder.loadTexts: xmdPagSpInstName.setDescription('Instance Name')
xmdPagSpSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdPagSpSize.setStatus('mandatory')
if mibBuilder.loadTexts: xmdPagSpSize.setDescription('Size of paging space (4K pages)')
xmdPagSpEfree = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdPagSpEfree.setStatus('mandatory')
if mibBuilder.loadTexts: xmdPagSpEfree.setDescription('Free portion of this paging space (percent)')
xmdPagSpIocnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdPagSpIocnt.setStatus('mandatory')
if mibBuilder.loadTexts: xmdPagSpIocnt.setDescription('Pending IOs for this paging space')
xmdPagSpTotalsize = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdPagSpTotalsize.setStatus('mandatory')
if mibBuilder.loadTexts: xmdPagSpTotalsize.setDescription('Total active paging space size (4K pages)')
xmdPagSpTotalfree = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 3, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdPagSpTotalfree.setStatus('mandatory')
if mibBuilder.loadTexts: xmdPagSpTotalfree.setDescription('Total free disk paging space (4K pages)')
xmdPagSpEtotalfree = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 3, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdPagSpEtotalfree.setStatus('mandatory')
if mibBuilder.loadTexts: xmdPagSpEtotalfree.setDescription('Total free disk paging space (percent)')
xmdPagSpEtotalused = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 3, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdPagSpEtotalused.setStatus('mandatory')
if mibBuilder.loadTexts: xmdPagSpEtotalused.setDescription('Total used disk paging space (percent)')
xmdPagSpPgspgin = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdPagSpPgspgin.setStatus('mandatory')
if mibBuilder.loadTexts: xmdPagSpPgspgin.setDescription('4K pages read from paging space by VMM')
xmdPagSpPgspgout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdPagSpPgspgout.setStatus('mandatory')
if mibBuilder.loadTexts: xmdPagSpPgspgout.setDescription('4K pages written to paging space by VMM')
xmdDisk = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 4), )
if mibBuilder.loadTexts: xmdDisk.setStatus('mandatory')
if mibBuilder.loadTexts: xmdDisk.setDescription('Disk and CD ROM statistics')
xmdDiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 4, 1), )
if mibBuilder.loadTexts: xmdDiskEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xmdDiskEntry.setDescription('Element of above table')
xmdDiskIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdDiskIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xmdDiskIndex.setDescription('Index Number')
xmdDiskInstName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdDiskInstName.setStatus('mandatory')
if mibBuilder.loadTexts: xmdDiskInstName.setDescription('Instance Name')
xmdDiskBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdDiskBusy.setStatus('mandatory')
if mibBuilder.loadTexts: xmdDiskBusy.setDescription('Time disk is busy (percent)')
xmdDiskXfer = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdDiskXfer.setStatus('mandatory')
if mibBuilder.loadTexts: xmdDiskXfer.setDescription('Transfers to/from disk')
xmdDiskRblk = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdDiskRblk.setStatus('mandatory')
if mibBuilder.loadTexts: xmdDiskRblk.setDescription('512 byte blocks read from disk')
xmdDiskWblk = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdDiskWblk.setStatus('mandatory')
if mibBuilder.loadTexts: xmdDiskWblk.setDescription('512 byte blocks written to disk')
xmdLAN = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 5), )
if mibBuilder.loadTexts: xmdLAN.setStatus('mandatory')
if mibBuilder.loadTexts: xmdLAN.setDescription('LAN Interfaces')
xmdLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 5, 1), )
if mibBuilder.loadTexts: xmdLANEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xmdLANEntry.setDescription('Element of above table')
xmdLANIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdLANIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xmdLANIndex.setDescription('Index Number')
xmdLANInstName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdLANInstName.setStatus('mandatory')
if mibBuilder.loadTexts: xmdLANInstName.setDescription('Instance Name')
xmdLANBytesout = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdLANBytesout.setStatus('mandatory')
if mibBuilder.loadTexts: xmdLANBytesout.setDescription('Count of bytes transmitted correctly')
xmdLANKbytesout = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdLANKbytesout.setStatus('mandatory')
if mibBuilder.loadTexts: xmdLANKbytesout.setDescription('Count of Kbytes transmitted correctly')
xmdLANBytesin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdLANBytesin.setStatus('mandatory')
if mibBuilder.loadTexts: xmdLANBytesin.setDescription('Count of bytes received correctly')
xmdLANKbytesin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdLANKbytesin.setStatus('mandatory')
if mibBuilder.loadTexts: xmdLANKbytesin.setDescription('Count of Kbytes received correctly')
xmdLANFramesout = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdLANFramesout.setStatus('mandatory')
if mibBuilder.loadTexts: xmdLANFramesout.setDescription('Count of frames transmitted correctly')
xmdLANFramesin = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdLANFramesin.setStatus('mandatory')
if mibBuilder.loadTexts: xmdLANFramesin.setDescription('Count of frames received correctly')
xmdLANXmiterrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdLANXmiterrors.setStatus('mandatory')
if mibBuilder.loadTexts: xmdLANXmiterrors.setDescription('Count of frame transmit errors at adapter level')
xmdLANRcverrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdLANRcverrors.setStatus('mandatory')
if mibBuilder.loadTexts: xmdLANRcverrors.setDescription('Count of frame receive errors at adapter level')
xmdLANIbadpacks = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdLANIbadpacks.setStatus('mandatory')
if mibBuilder.loadTexts: xmdLANIbadpacks.setDescription('Count of bad packets received from this device')
xmdLANXmitque = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdLANXmitque.setStatus('mandatory')
if mibBuilder.loadTexts: xmdLANXmitque.setDescription('Number of transmits currently queued for this device')
xmdLANHighxmitq = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdLANHighxmitq.setStatus('mandatory')
if mibBuilder.loadTexts: xmdLANHighxmitq.setDescription('Maximum transmits ever queued for this device')
xmdLANRecvintr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdLANRecvintr.setStatus('mandatory')
if mibBuilder.loadTexts: xmdLANRecvintr.setDescription('Receive data interrupts for this device')
xmdLANXmitintr = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdLANXmitintr.setStatus('mandatory')
if mibBuilder.loadTexts: xmdLANXmitintr.setDescription('Transmit complete interrupts for this device')
xmdLANXmitovfl = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdLANXmitovfl.setStatus('mandatory')
if mibBuilder.loadTexts: xmdLANXmitovfl.setDescription('Count of transmit queue overflows')
xmdLANXmitdrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdLANXmitdrops.setStatus('mandatory')
if mibBuilder.loadTexts: xmdLANXmitdrops.setDescription('Count of transmit packets dropped at device driver level')
xmdLANRecvdrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdLANRecvdrops.setStatus('mandatory')
if mibBuilder.loadTexts: xmdLANRecvdrops.setDescription('Count of receive packets dropped at device driver level')
xmdProc = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 6), )
if mibBuilder.loadTexts: xmdProc.setStatus('mandatory')
if mibBuilder.loadTexts: xmdProc.setDescription('Process statistics')
xmdProcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 6, 1), )
if mibBuilder.loadTexts: xmdProcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xmdProcEntry.setDescription('Element of above table')
xmdProcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdProcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xmdProcIndex.setDescription('Index Number')
xmdProcInstName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdProcInstName.setStatus('mandatory')
if mibBuilder.loadTexts: xmdProcInstName.setDescription('Instance Name')
xmdProcNice = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdProcNice.setStatus('mandatory')
if mibBuilder.loadTexts: xmdProcNice.setDescription('Process nice value')
xmdProcRepage = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdProcRepage.setStatus('mandatory')
if mibBuilder.loadTexts: xmdProcRepage.setDescription('Process repage count')
xmdProcMajflt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdProcMajflt.setStatus('mandatory')
if mibBuilder.loadTexts: xmdProcMajflt.setDescription('Process page faults involving IO')
xmdProcMinflt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdProcMinflt.setStatus('mandatory')
if mibBuilder.loadTexts: xmdProcMinflt.setDescription('Process page faults not involving IO')
xmdProcCpums = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdProcCpums.setStatus('mandatory')
if mibBuilder.loadTexts: xmdProcCpums.setDescription('CPU time in milliseconds in interval')
xmdProcCpuacc = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdProcCpuacc.setStatus('mandatory')
if mibBuilder.loadTexts: xmdProcCpuacc.setDescription('CPU time in milliseconds in life of process')
xmdProcCpupct = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdProcCpupct.setStatus('mandatory')
if mibBuilder.loadTexts: xmdProcCpupct.setDescription('CPU time in percent in interval')
xmdProcUsercpu = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdProcUsercpu.setStatus('mandatory')
if mibBuilder.loadTexts: xmdProcUsercpu.setDescription('Process CPU use in user mode (percent)')
xmdProcKerncpu = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdProcKerncpu.setStatus('mandatory')
if mibBuilder.loadTexts: xmdProcKerncpu.setDescription('Process CPU use in kernel mode (percent)')
xmdProcWorkmem = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdProcWorkmem.setStatus('mandatory')
if mibBuilder.loadTexts: xmdProcWorkmem.setDescription('Physical memory used by process private data (4K pages)')
xmdProcCodemem = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdProcCodemem.setStatus('mandatory')
if mibBuilder.loadTexts: xmdProcCodemem.setDescription('Physical memory used by process code (4K pages)')
xmdProcPagsp = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdProcPagsp.setStatus('mandatory')
if mibBuilder.loadTexts: xmdProcPagsp.setDescription('Page space used by process private data (4K pages)')
xmdProcNsignals = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdProcNsignals.setStatus('mandatory')
if mibBuilder.loadTexts: xmdProcNsignals.setDescription('Signals received by process')
xmdProcNvcsw = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdProcNvcsw.setStatus('mandatory')
if mibBuilder.loadTexts: xmdProcNvcsw.setDescription('Voluntary context switches by process')
xmdProcTsize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdProcTsize.setStatus('mandatory')
if mibBuilder.loadTexts: xmdProcTsize.setDescription('Code size (bytes)')
xmdProcMaxrss = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 6, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdProcMaxrss.setStatus('mandatory')
if mibBuilder.loadTexts: xmdProcMaxrss.setDescription('Maximum code+data resident set size (4K pages)')
xmdProcPswitch = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 6, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdProcPswitch.setStatus('mandatory')
if mibBuilder.loadTexts: xmdProcPswitch.setDescription('Process context switches')
xmdProcRunque = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdProcRunque.setStatus('mandatory')
if mibBuilder.loadTexts: xmdProcRunque.setDescription('Average count of processes that are waiting for the cpu')
xmdProcRunocc = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 6, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdProcRunocc.setStatus('mandatory')
if mibBuilder.loadTexts: xmdProcRunocc.setDescription('Number of samplings of runque')
xmdProcSwpque = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 6, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdProcSwpque.setStatus('mandatory')
if mibBuilder.loadTexts: xmdProcSwpque.setDescription('Average count of processes waiting to be paged in')
xmdProcSwpocc = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 6, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdProcSwpocc.setStatus('mandatory')
if mibBuilder.loadTexts: xmdProcSwpocc.setDescription('Number of samplings of swpque')
xmdProcKsched = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 6, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdProcKsched.setStatus('mandatory')
if mibBuilder.loadTexts: xmdProcKsched.setDescription('Number of kernel process creations')
xmdProcKexit = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 6, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdProcKexit.setStatus('mandatory')
if mibBuilder.loadTexts: xmdProcKexit.setDescription('Number of kernel process exits')
xmdSyscall = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 7))
xmdSyscallTotal = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 7, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdSyscallTotal.setStatus('mandatory')
if mibBuilder.loadTexts: xmdSyscallTotal.setDescription('Total system calls')
xmdSyscallRead = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 7, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdSyscallRead.setStatus('mandatory')
if mibBuilder.loadTexts: xmdSyscallRead.setDescription('Read system calls')
xmdSyscallWrite = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 7, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdSyscallWrite.setStatus('mandatory')
if mibBuilder.loadTexts: xmdSyscallWrite.setDescription('Write system calls')
xmdSyscallFork = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 7, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdSyscallFork.setStatus('mandatory')
if mibBuilder.loadTexts: xmdSyscallFork.setDescription('Fork system calls')
xmdSyscallExec = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 7, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdSyscallExec.setStatus('mandatory')
if mibBuilder.loadTexts: xmdSyscallExec.setDescription('Exec system calls')
xmdSysIO = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 8))
xmdSysIOReadch = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 8, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdSysIOReadch.setStatus('mandatory')
if mibBuilder.loadTexts: xmdSysIOReadch.setDescription('Bytes read through the read sys call')
xmdSysIOReadchkb = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 8, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdSysIOReadchkb.setStatus('mandatory')
if mibBuilder.loadTexts: xmdSysIOReadchkb.setDescription('KBytes read through the read sys call')
xmdSysIOWritech = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 8, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdSysIOWritech.setStatus('mandatory')
if mibBuilder.loadTexts: xmdSysIOWritech.setDescription('Bytes written through the write sys call')
xmdSysIOWritechkb = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 8, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdSysIOWritechkb.setStatus('mandatory')
if mibBuilder.loadTexts: xmdSysIOWritechkb.setDescription('KBytes written through the write sys call')
xmdSysIOLbread = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 8, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdSysIOLbread.setStatus('mandatory')
if mibBuilder.loadTexts: xmdSysIOLbread.setDescription('Logical reads from a block device via buffer cache')
xmdSysIOLbwrite = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 8, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdSysIOLbwrite.setStatus('mandatory')
if mibBuilder.loadTexts: xmdSysIOLbwrite.setDescription('Logical writes to a block device via buffer cache')
xmdSysIOBread = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 8, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdSysIOBread.setStatus('mandatory')
if mibBuilder.loadTexts: xmdSysIOBread.setDescription('Physical 4K reads from a block device to buffer cache')
xmdSysIOBwrite = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 8, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdSysIOBwrite.setStatus('mandatory')
if mibBuilder.loadTexts: xmdSysIOBwrite.setDescription('Physical 4K writes to a block device from buffer cache')
xmdSysIOPhread = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 8, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdSysIOPhread.setStatus('mandatory')
if mibBuilder.loadTexts: xmdSysIOPhread.setDescription('Physical reads directly from a raw device')
xmdSysIOPhwrite = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 8, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdSysIOPhwrite.setStatus('mandatory')
if mibBuilder.loadTexts: xmdSysIOPhwrite.setDescription('Physical writes directly to a raw device')
xmdSysIOTtyraw = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 8, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdSysIOTtyraw.setStatus('mandatory')
if mibBuilder.loadTexts: xmdSysIOTtyraw.setDescription('Raw characters read from TTYs')
xmdSysIOTtycan = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 8, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdSysIOTtycan.setStatus('mandatory')
if mibBuilder.loadTexts: xmdSysIOTtycan.setDescription('Processed characters read from TTYs')
xmdSysIOTtyout = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 8, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdSysIOTtyout.setStatus('mandatory')
if mibBuilder.loadTexts: xmdSysIOTtyout.setDescription('Characters written to TTYs')
xmdIPC = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 9))
xmdIPCMsg = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 9, 1))
xmdIPCMsgMsgmax = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPCMsgMsgmax.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPCMsgMsgmax.setDescription('Max message size')
xmdIPCMsgQuemax = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPCMsgQuemax.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPCMsgQuemax.setDescription('Max number of bytes on queue')
xmdIPCMsgQueids = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPCMsgQueids.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPCMsgQueids.setDescription('Number of message queue identifiers')
xmdIPCMsgIdmax = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPCMsgIdmax.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPCMsgIdmax.setDescription('Max number of messages per queue id')
xmdIPCSem = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 9, 2))
xmdIPCSemSemids = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 9, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPCSemSemids.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPCSemSemids.setDescription('Number of semaphore ids')
xmdIPCSemMaxsems = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 9, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPCSemMaxsems.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPCSemMaxsems.setDescription('Max number of semaphores per id')
xmdIPCSemMaxops = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 9, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPCSemMaxops.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPCSemMaxops.setDescription('Max number of operations per semop call')
xmdIPCSemMaxundo = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 9, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPCSemMaxundo.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPCSemMaxundo.setDescription('Max number of undo entries per process')
xmdIPCSemUndosiz = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 9, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPCSemUndosiz.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPCSemUndosiz.setDescription('Size in bytes of undo structure')
xmdIPCSemSemmaxv = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 9, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPCSemSemmaxv.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPCSemSemmaxv.setDescription('Semaphore maximum value')
xmdIPCSemSemmaxe = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 9, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPCSemSemmaxe.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPCSemSemmaxe.setDescription('Adjust on exit maximum value')
xmdIPCShm = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 9, 3))
xmdIPCShmShmmax = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 9, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPCShmShmmax.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPCShmShmmax.setDescription('Max shared memory segment size')
xmdIPCShmShmmin = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 9, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPCShmShmmin.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPCShmShmmin.setDescription('Min shared memory segment size')
xmdIPCShmShmids = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 9, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPCShmShmids.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPCShmShmids.setDescription('Number of shared memory identifiers')
xmdIPCLocks = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 9, 4))
xmdIPCLocksNumrecs = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 9, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPCLocksNumrecs.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPCLocksNumrecs.setDescription('Number of records configured in system')
xmdIPCLocksRecsused = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 9, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPCLocksRecsused.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPCLocksRecsused.setDescription('Number of records currently in use')
xmdIPCLocksOverrun = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 9, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPCLocksOverrun.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPCLocksOverrun.setDescription('Number of times system ran out of record locks')
xmdIPCLocksRecstot = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 9, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPCLocksRecstot.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPCLocksRecstot.setDescription('Number records used since system boot')
xmdIPCLocksRecsync = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 9, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPCLocksRecsync.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPCLocksRecsync.setDescription('Number records reserved for sync mode change')
xmdFS = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 10), )
if mibBuilder.loadTexts: xmdFS.setStatus('mandatory')
if mibBuilder.loadTexts: xmdFS.setDescription('File system statistics')
xmdFSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 10, 1), )
if mibBuilder.loadTexts: xmdFSEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xmdFSEntry.setDescription('Element of above table')
xmdFSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdFSIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xmdFSIndex.setDescription('Index Number')
xmdFSInstName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdFSInstName.setStatus('mandatory')
if mibBuilder.loadTexts: xmdFSInstName.setDescription('Instance Name')
xmdFSFree = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdFSFree.setStatus('mandatory')
if mibBuilder.loadTexts: xmdFSFree.setDescription('Free space in volume group, MB')
xmdFSPpsize = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdFSPpsize.setStatus('mandatory')
if mibBuilder.loadTexts: xmdFSPpsize.setDescription('Physical partition size')
xmdFSLvcount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdFSLvcount.setStatus('mandatory')
if mibBuilder.loadTexts: xmdFSLvcount.setDescription('Number of logical volumes in VG')
xmdFSPvcount = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdFSPvcount.setStatus('mandatory')
if mibBuilder.loadTexts: xmdFSPvcount.setDescription('Number of physical volumes in VG')
xmdFSIget = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 10, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdFSIget.setStatus('mandatory')
if mibBuilder.loadTexts: xmdFSIget.setDescription('Calls to inode lookup routines')
xmdFSNamei = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 10, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdFSNamei.setStatus('mandatory')
if mibBuilder.loadTexts: xmdFSNamei.setDescription('Calls to pathname lookup routine')
xmdFSDirblk = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 10, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdFSDirblk.setStatus('mandatory')
if mibBuilder.loadTexts: xmdFSDirblk.setDescription('Directory blocks scanned by directory search routine')
xmdIP = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 11))
xmdIPRcvtotal = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 11, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPRcvtotal.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPRcvtotal.setDescription('Total IP packets received')
xmdIPRcvfrag = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 11, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPRcvfrag.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPRcvfrag.setDescription('IP fragments received')
xmdIPForward = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 11, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPForward.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPForward.setDescription('IP packets forwarded')
xmdIPRcvdgrm = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 11, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPRcvdgrm.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPRcvdgrm.setDescription('Successfully received IP datagrams')
xmdIPSnddgrm = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 11, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPSnddgrm.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPSnddgrm.setDescription('Transmitted IP datagrams')
xmdIPReasmok = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 11, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPReasmok.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPReasmok.setDescription('Total packets reassembled OK')
xmdIPFragok = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 11, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPFragok.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPFragok.setDescription('Output packets fragmented OK')
xmdIPNetIF = MibTable((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 11, 10), )
if mibBuilder.loadTexts: xmdIPNetIF.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPNetIF.setDescription('IP interface statistics')
xmdIPNetIFEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 11, 10, 1), )
if mibBuilder.loadTexts: xmdIPNetIFEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPNetIFEntry.setDescription('Element of above table')
xmdIPNetIFIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 11, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPNetIFIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPNetIFIndex.setDescription('Index Number')
xmdIPNetIFInstName = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 11, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPNetIFInstName.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPNetIFInstName.setDescription('Instance Name')
xmdIPNetIFIpacket = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 11, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPNetIFIpacket.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPNetIFIpacket.setDescription('Packets received')
xmdIPNetIFIoctet = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 11, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPNetIFIoctet.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPNetIFIoctet.setDescription('Bytes received')
xmdIPNetIFIoctetkb = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 11, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPNetIFIoctetkb.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPNetIFIoctetkb.setDescription('KBytes received')
xmdIPNetIFIerror = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 11, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPNetIFIerror.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPNetIFIerror.setDescription('Input errors')
xmdIPNetIFImcastpkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 11, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPNetIFImcastpkt.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPNetIFImcastpkt.setDescription('Multicast packets received')
xmdIPNetIFIqdrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 11, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPNetIFIqdrop.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPNetIFIqdrop.setDescription('Input packets dropped')
xmdIPNetIFIunknproto = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 11, 10, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPNetIFIunknproto.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPNetIFIunknproto.setDescription('Packets received with unknown protocol')
xmdIPNetIFOpacket = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 11, 10, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPNetIFOpacket.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPNetIFOpacket.setDescription('Packets transmitted')
xmdIPNetIFOoctet = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 11, 10, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPNetIFOoctet.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPNetIFOoctet.setDescription('Bytes transmitted')
xmdIPNetIFOoctetkb = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 11, 10, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPNetIFOoctetkb.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPNetIFOoctetkb.setDescription('KBytes transmitted')
xmdIPNetIFOerror = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 11, 10, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPNetIFOerror.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPNetIFOerror.setDescription('Output errors')
xmdIPNetIFOmcastpkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 11, 10, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPNetIFOmcastpkt.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPNetIFOmcastpkt.setDescription('Multicast packets transmitted')
xmdIPNetIFOquelen = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 11, 10, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPNetIFOquelen.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPNetIFOquelen.setDescription('Number of packets in transmit queue')
xmdIPNetIFOquemax = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 11, 10, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPNetIFOquemax.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPNetIFOquemax.setDescription('Maximum number of packets in transmit queue')
xmdIPNetIFOdrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 11, 10, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPNetIFOdrops.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPNetIFOdrops.setDescription('Number of packets dropped from transmit queue')
xmdIPRouting = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 11, 11))
xmdIPRoutingBadred = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 11, 11, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPRoutingBadred.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPRoutingBadred.setDescription('Bogus redirect calls')
xmdIPRoutingDynamic = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 11, 11, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPRoutingDynamic.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPRoutingDynamic.setDescription('Routes created by redirects')
xmdIPRoutingNewgate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 11, 11, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPRoutingNewgate.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPRoutingNewgate.setDescription('Routes modified by redirects')
xmdIPRoutingUnreach = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 11, 11, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPRoutingUnreach.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPRoutingUnreach.setDescription('Lookups which failed')
xmdIPRoutingWildc = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 11, 11, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdIPRoutingWildc.setStatus('mandatory')
if mibBuilder.loadTexts: xmdIPRoutingWildc.setDescription('Lookups satisfied by a wildcard')
xmdTCP = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 12))
xmdTCPConattmpt = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 12, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdTCPConattmpt.setStatus('mandatory')
if mibBuilder.loadTexts: xmdTCPConattmpt.setDescription('TCP connections initiated')
xmdTCPAccept = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 12, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdTCPAccept.setStatus('mandatory')
if mibBuilder.loadTexts: xmdTCPAccept.setDescription('TCP connections accepted')
xmdTCPConnects = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 12, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdTCPConnects.setStatus('mandatory')
if mibBuilder.loadTexts: xmdTCPConnects.setDescription('Total TCP connections established')
xmdTCPClose = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 12, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdTCPClose.setStatus('mandatory')
if mibBuilder.loadTexts: xmdTCPClose.setDescription('TCP connections closed')
xmdTCPSndtotal = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 12, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdTCPSndtotal.setStatus('mandatory')
if mibBuilder.loadTexts: xmdTCPSndtotal.setDescription('Total TCP packets sent')
xmdTCPSndpack = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 12, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdTCPSndpack.setStatus('mandatory')
if mibBuilder.loadTexts: xmdTCPSndpack.setDescription('TCP data packets sent')
xmdTCPSndbyte = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 12, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdTCPSndbyte.setStatus('mandatory')
if mibBuilder.loadTexts: xmdTCPSndbyte.setDescription('TCP data bytes sent')
xmdTCPSndkbyte = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 12, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdTCPSndkbyte.setStatus('mandatory')
if mibBuilder.loadTexts: xmdTCPSndkbyte.setDescription('TCP data Kbytes sent')
xmdTCPSndrexmitpack = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 12, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdTCPSndrexmitpack.setStatus('mandatory')
if mibBuilder.loadTexts: xmdTCPSndrexmitpack.setDescription('TCP data packets retransmitted')
xmdTCPSndrexmitbyte = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 12, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdTCPSndrexmitbyte.setStatus('mandatory')
if mibBuilder.loadTexts: xmdTCPSndrexmitbyte.setDescription('TCP data bytes retransmitted')
xmdTCPSndack = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 12, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdTCPSndack.setStatus('mandatory')
if mibBuilder.loadTexts: xmdTCPSndack.setDescription('TCP ack-only packets sent')
xmdTCPSndprobe = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 12, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdTCPSndprobe.setStatus('mandatory')
if mibBuilder.loadTexts: xmdTCPSndprobe.setDescription('TCP window probes sent')
xmdTCPSndurg = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 12, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdTCPSndurg.setStatus('mandatory')
if mibBuilder.loadTexts: xmdTCPSndurg.setDescription('TCP packets sent with URG only')
xmdTCPSndwinup = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 12, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdTCPSndwinup.setStatus('mandatory')
if mibBuilder.loadTexts: xmdTCPSndwinup.setDescription('TCP window update-only packets sent')
xmdTCPSndctrl = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 12, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdTCPSndctrl.setStatus('mandatory')
if mibBuilder.loadTexts: xmdTCPSndctrl.setDescription('TCP control (SYN|FIN|RST) packets sent')
xmdTCPRcvtotal = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 12, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdTCPRcvtotal.setStatus('mandatory')
if mibBuilder.loadTexts: xmdTCPRcvtotal.setDescription('TCP total packets received')
xmdTCPRcvpack = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 12, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdTCPRcvpack.setStatus('mandatory')
if mibBuilder.loadTexts: xmdTCPRcvpack.setDescription('TCP data packets received in sequence')
xmdTCPRcvbyte = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 12, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdTCPRcvbyte.setStatus('mandatory')
if mibBuilder.loadTexts: xmdTCPRcvbyte.setDescription('TCP data bytes received in sequence')
xmdTCPRcvkbyte = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 12, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdTCPRcvkbyte.setStatus('mandatory')
if mibBuilder.loadTexts: xmdTCPRcvkbyte.setDescription('TCP data Kbytes received in sequence')
xmdTCPRcvduppack = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 12, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdTCPRcvduppack.setStatus('mandatory')
if mibBuilder.loadTexts: xmdTCPRcvduppack.setDescription('TCP duplicate-only packets received')
xmdTCPRcvdupbyte = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 12, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdTCPRcvdupbyte.setStatus('mandatory')
if mibBuilder.loadTexts: xmdTCPRcvdupbyte.setDescription('TCP duplicate-only bytes received')
xmdTCPRcvpartduppack = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 12, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdTCPRcvpartduppack.setStatus('mandatory')
if mibBuilder.loadTexts: xmdTCPRcvpartduppack.setDescription('TCP partially duplicate packets received')
xmdTCPRcvpartdupbyte = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 12, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdTCPRcvpartdupbyte.setStatus('mandatory')
if mibBuilder.loadTexts: xmdTCPRcvpartdupbyte.setDescription('TCP partially duplicate bytes received')
xmdTCPRcvoopack = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 12, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdTCPRcvoopack.setStatus('mandatory')
if mibBuilder.loadTexts: xmdTCPRcvoopack.setDescription('TCP out-of-order packets received')
xmdTCPRcvoobyte = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 12, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdTCPRcvoobyte.setStatus('mandatory')
if mibBuilder.loadTexts: xmdTCPRcvoobyte.setDescription('TCP out-of-order bytes received')
xmdTCPRcvaftwinpack = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 12, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdTCPRcvaftwinpack.setStatus('mandatory')
if mibBuilder.loadTexts: xmdTCPRcvaftwinpack.setDescription('TCP packets received with after window data')
xmdTCPRcvaftwinbyte = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 12, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdTCPRcvaftwinbyte.setStatus('mandatory')
if mibBuilder.loadTexts: xmdTCPRcvaftwinbyte.setDescription('TCP bytes received after window')
xmdTCPRcvwinprobe = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 12, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdTCPRcvwinprobe.setStatus('mandatory')
if mibBuilder.loadTexts: xmdTCPRcvwinprobe.setDescription('TCP window-probe packets received')
xmdTCPRcvdupack = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 12, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdTCPRcvdupack.setStatus('mandatory')
if mibBuilder.loadTexts: xmdTCPRcvdupack.setDescription('TCP duplicate acks received')
xmdTCPRcvackpack = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 12, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdTCPRcvackpack.setStatus('mandatory')
if mibBuilder.loadTexts: xmdTCPRcvackpack.setDescription('TCP ack packets received')
xmdTCPRcvackbyte = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 12, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdTCPRcvackbyte.setStatus('mandatory')
if mibBuilder.loadTexts: xmdTCPRcvackbyte.setDescription('TCP bytes acknowledged by received acks')
xmdTCPRcvwinup = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 12, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdTCPRcvwinup.setStatus('mandatory')
if mibBuilder.loadTexts: xmdTCPRcvwinup.setDescription('TCP window update packets received')
xmdUDP = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 13))
xmdUDPRcvdgrm = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 13, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdUDPRcvdgrm.setStatus('mandatory')
if mibBuilder.loadTexts: xmdUDPRcvdgrm.setDescription('UDP packets received')
xmdUDPNoport = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 13, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdUDPNoport.setStatus('mandatory')
if mibBuilder.loadTexts: xmdUDPNoport.setDescription('No socket on port')
xmdUDPFullsock = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 13, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdUDPFullsock.setStatus('mandatory')
if mibBuilder.loadTexts: xmdUDPFullsock.setDescription('UDP packets not delivered, input socket full')
xmdUDPSnddgrm = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 13, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdUDPSnddgrm.setStatus('mandatory')
if mibBuilder.loadTexts: xmdUDPSnddgrm.setDescription('UDP packets sent')
xmdUDPNoportbc = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 13, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdUDPNoportbc.setStatus('mandatory')
if mibBuilder.loadTexts: xmdUDPNoportbc.setDescription('No socket on port for broadcast')
xmdUDPHdrops = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 13, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdUDPHdrops.setStatus('mandatory')
if mibBuilder.loadTexts: xmdUDPHdrops.setDescription('Packets shorter than header')
xmdUDPBadsum = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 13, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdUDPBadsum.setStatus('mandatory')
if mibBuilder.loadTexts: xmdUDPBadsum.setDescription('Packets with checksum error')
xmdUDPBadlen = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 13, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdUDPBadlen.setStatus('mandatory')
if mibBuilder.loadTexts: xmdUDPBadlen.setDescription('Packets where data length larger than packet')
xmdUDPCachmiss = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 13, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdUDPCachmiss.setStatus('mandatory')
if mibBuilder.loadTexts: xmdUDPCachmiss.setDescription('Input packets missing pcb cache')
xmdRTime = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 14))
xmdRTimeLAN = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 14, 1))
xmdRTimeARM = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 14, 2))
xmdRPC = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 16))
xmdRPCClntCo = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 16, 1))
xmdRPCClntCoCalls = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 16, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdRPCClntCoCalls.setStatus('mandatory')
if mibBuilder.loadTexts: xmdRPCClntCoCalls.setDescription('Total NFS client RPC calls')
xmdRPCClntCoBadcalls = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 16, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdRPCClntCoBadcalls.setStatus('mandatory')
if mibBuilder.loadTexts: xmdRPCClntCoBadcalls.setDescription('Rejected NFS client RPC calls')
xmdRPCClntCoBadxids = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 16, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdRPCClntCoBadxids.setStatus('mandatory')
if mibBuilder.loadTexts: xmdRPCClntCoBadxids.setDescription('Bad NFS client RPC call responses')
xmdRPCClntCoTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 16, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdRPCClntCoTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: xmdRPCClntCoTimeouts.setDescription('Timed out NFS client RPC calls with no reply')
xmdRPCClntCoNewcreds = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 16, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdRPCClntCoNewcreds.setStatus('mandatory')
if mibBuilder.loadTexts: xmdRPCClntCoNewcreds.setDescription('Total NFS client RPC authentication refreshes')
xmdRPCClntCoBadverfs = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 16, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdRPCClntCoBadverfs.setStatus('mandatory')
if mibBuilder.loadTexts: xmdRPCClntCoBadverfs.setDescription('Total NFS client RPC bad verifier in response')
xmdRPCClntCoTimers = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 16, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdRPCClntCoTimers.setStatus('mandatory')
if mibBuilder.loadTexts: xmdRPCClntCoTimers.setDescription('NFS client RPC timout greater than timeout value ')
xmdRPCClntCoCantconn = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 16, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdRPCClntCoCantconn.setStatus('mandatory')
if mibBuilder.loadTexts: xmdRPCClntCoCantconn.setDescription('Failed NFS client RPC calls')
xmdRPCClntCoNomem = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 16, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdRPCClntCoNomem.setStatus('mandatory')
if mibBuilder.loadTexts: xmdRPCClntCoNomem.setDescription('NFS client RPC calls memory allocation failure')
xmdRPCClntCoInterrupts = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 16, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdRPCClntCoInterrupts.setStatus('mandatory')
if mibBuilder.loadTexts: xmdRPCClntCoInterrupts.setDescription('NFS client RPC calls fail due to interrupt')
xmdRPCClntCl = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 16, 2))
xmdRPCClntClCalls = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 16, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdRPCClntClCalls.setStatus('mandatory')
if mibBuilder.loadTexts: xmdRPCClntClCalls.setDescription('Total NFS client RPC calls')
xmdRPCClntClBadcalls = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 16, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdRPCClntClBadcalls.setStatus('mandatory')
if mibBuilder.loadTexts: xmdRPCClntClBadcalls.setDescription('Rejected NFS client RPC calls')
xmdRPCClntClRetrans = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 16, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdRPCClntClRetrans.setStatus('mandatory')
if mibBuilder.loadTexts: xmdRPCClntClRetrans.setDescription('Retransmitted NFS client RPC calls')
xmdRPCClntClBadxids = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 16, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdRPCClntClBadxids.setStatus('mandatory')
if mibBuilder.loadTexts: xmdRPCClntClBadxids.setDescription('Bad NFS client RPC call responses')
xmdRPCClntClTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 16, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdRPCClntClTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: xmdRPCClntClTimeouts.setDescription('Timed out NFS client RPC calls with no reply')
xmdRPCClntClNewcreds = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 16, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdRPCClntClNewcreds.setStatus('mandatory')
if mibBuilder.loadTexts: xmdRPCClntClNewcreds.setDescription('Total NFS client RPC authentication refreshes')
xmdRPCClntClBadverfs = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 16, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdRPCClntClBadverfs.setStatus('mandatory')
if mibBuilder.loadTexts: xmdRPCClntClBadverfs.setDescription('Total NFS client RPC bad verifier in response')
xmdRPCClntClTimers = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 16, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdRPCClntClTimers.setStatus('mandatory')
if mibBuilder.loadTexts: xmdRPCClntClTimers.setDescription('NFS client RPC timout greater than timeout value ')
xmdRPCClntClNomem = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 16, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdRPCClntClNomem.setStatus('mandatory')
if mibBuilder.loadTexts: xmdRPCClntClNomem.setDescription('NFS client RPC calls memory allocation failure')
xmdRPCClntClCantsend = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 16, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdRPCClntClCantsend.setStatus('mandatory')
if mibBuilder.loadTexts: xmdRPCClntClCantsend.setDescription('NFS client RPC calls not sent')
xmdRPCSvrCo = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 16, 3))
xmdRPCSvrCoCalls = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 16, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdRPCSvrCoCalls.setStatus('mandatory')
if mibBuilder.loadTexts: xmdRPCSvrCoCalls.setDescription('Total NFS server RPC requests')
xmdRPCSvrCoBadcalls = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 16, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdRPCSvrCoBadcalls.setStatus('mandatory')
if mibBuilder.loadTexts: xmdRPCSvrCoBadcalls.setDescription('Rejected NFS server RPC requests')
xmdRPCSvrCoNullrecv = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 16, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdRPCSvrCoNullrecv.setStatus('mandatory')
if mibBuilder.loadTexts: xmdRPCSvrCoNullrecv.setDescription('NFS server RPC calls failed due to unavailable packet')
xmdRPCSvrCoBadlen = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 16, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdRPCSvrCoBadlen.setStatus('mandatory')
if mibBuilder.loadTexts: xmdRPCSvrCoBadlen.setDescription('NFS server RPC requests failed due to bad length')
xmdRPCSvrCoXdrcall = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 16, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdRPCSvrCoXdrcall.setStatus('mandatory')
if mibBuilder.loadTexts: xmdRPCSvrCoXdrcall.setDescription('NFS server RPC requests failed due to bad header')
xmdRPCSvrCoDupchecks = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 16, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdRPCSvrCoDupchecks.setStatus('mandatory')
if mibBuilder.loadTexts: xmdRPCSvrCoDupchecks.setDescription('NFS server RPC calls found in request cache')
xmdRPCSvrCoDupreqs = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 16, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdRPCSvrCoDupreqs.setStatus('mandatory')
if mibBuilder.loadTexts: xmdRPCSvrCoDupreqs.setDescription('Total NFS server RPC call duplicates')
xmdRPCSvrCl = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 16, 4))
xmdRPCSvrClCalls = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 16, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdRPCSvrClCalls.setStatus('mandatory')
if mibBuilder.loadTexts: xmdRPCSvrClCalls.setDescription('Total NFS server RPC requests')
xmdRPCSvrClBadcalls = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 16, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdRPCSvrClBadcalls.setStatus('mandatory')
if mibBuilder.loadTexts: xmdRPCSvrClBadcalls.setDescription('Rejected NFS server RPC requests')
xmdRPCSvrClNullrecv = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 16, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdRPCSvrClNullrecv.setStatus('mandatory')
if mibBuilder.loadTexts: xmdRPCSvrClNullrecv.setDescription('NFS server RPC calls failed due to unavailable packet')
xmdRPCSvrClBadlen = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 16, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdRPCSvrClBadlen.setStatus('mandatory')
if mibBuilder.loadTexts: xmdRPCSvrClBadlen.setDescription('NFS server RPC requests failed due to bad length')
xmdRPCSvrClXdrcall = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 16, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdRPCSvrClXdrcall.setStatus('mandatory')
if mibBuilder.loadTexts: xmdRPCSvrClXdrcall.setDescription('NFS server RPC requests failed due to bad header')
xmdRPCSvrClDupchecks = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 16, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdRPCSvrClDupchecks.setStatus('mandatory')
if mibBuilder.loadTexts: xmdRPCSvrClDupchecks.setDescription('NFS server RPC calls found in request cache')
xmdRPCSvrClDupreqs = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 16, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdRPCSvrClDupreqs.setStatus('mandatory')
if mibBuilder.loadTexts: xmdRPCSvrClDupreqs.setDescription('Total NFS server RPC call duplicates')
xmdNFS = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17))
xmdNFSClient = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 1))
xmdNFSClientCalls = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSClientCalls.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSClientCalls.setDescription('Total NFS client requests')
xmdNFSClientBadcalls = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSClientBadcalls.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSClientBadcalls.setDescription('NFS client failed calls')
xmdNFSServer = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 2))
xmdNFSServerCalls = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSServerCalls.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSServerCalls.setDescription('Total NFS server requests')
xmdNFSServerBadcalls = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSServerBadcalls.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSServerBadcalls.setDescription('NFS server failed requests')
xmdNFSV2Clnt = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 3))
xmdNFSV2ClntNull = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV2ClntNull.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV2ClntNull.setDescription('NFS server null requests')
xmdNFSV2ClntGetattr = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV2ClntGetattr.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV2ClntGetattr.setDescription('NFS server getattr requests')
xmdNFSV2ClntSetattr = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV2ClntSetattr.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV2ClntSetattr.setDescription('NFS server setattr requests')
xmdNFSV2ClntRoot = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV2ClntRoot.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV2ClntRoot.setDescription('NFS server root requests')
xmdNFSV2ClntLookup = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV2ClntLookup.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV2ClntLookup.setDescription('NFS server file name lookup requests')
xmdNFSV2ClntReadlink = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV2ClntReadlink.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV2ClntReadlink.setDescription('NFS server readlink requests')
xmdNFSV2ClntRead = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV2ClntRead.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV2ClntRead.setDescription('NFS server read requests')
xmdNFSV2ClntWrcache = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV2ClntWrcache.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV2ClntWrcache.setDescription('NFS server wrcache requests')
xmdNFSV2ClntWrite = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV2ClntWrite.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV2ClntWrite.setDescription('NFS server write requests')
xmdNFSV2ClntCreate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV2ClntCreate.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV2ClntCreate.setDescription('NFS server file creation requests')
xmdNFSV2ClntRemove = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV2ClntRemove.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV2ClntRemove.setDescription('NFS server file removal requests')
xmdNFSV2ClntRename = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV2ClntRename.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV2ClntRename.setDescription('NFS server file rename requests')
xmdNFSV2ClntLink = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV2ClntLink.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV2ClntLink.setDescription('NFS server link creation requests')
xmdNFSV2ClntSymlink = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV2ClntSymlink.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV2ClntSymlink.setDescription('NFS server symbolic link creation requests')
xmdNFSV2ClntMkdir = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV2ClntMkdir.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV2ClntMkdir.setDescription('NFS server directory creation requests')
xmdNFSV2ClntRmdir = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 3, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV2ClntRmdir.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV2ClntRmdir.setDescription('NFS server directory removal requests')
xmdNFSV2ClntReaddir = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 3, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV2ClntReaddir.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV2ClntReaddir.setDescription('NFS server read-directory requests')
xmdNFSV2ClntStatfs = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 3, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV2ClntStatfs.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV2ClntStatfs.setDescription('NFS server file stat requests')
xmdNFSV2Svr = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 4))
xmdNFSV2SvrNull = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV2SvrNull.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV2SvrNull.setDescription('NFS server null requests')
xmdNFSV2SvrGetattr = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV2SvrGetattr.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV2SvrGetattr.setDescription('NFS server getattr requests')
xmdNFSV2SvrSetattr = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV2SvrSetattr.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV2SvrSetattr.setDescription('NFS server setattr requests')
xmdNFSV2SvrRoot = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV2SvrRoot.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV2SvrRoot.setDescription('NFS server root requests')
xmdNFSV2SvrLookup = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV2SvrLookup.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV2SvrLookup.setDescription('NFS server file name lookup requests')
xmdNFSV2SvrReadlink = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV2SvrReadlink.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV2SvrReadlink.setDescription('NFS server readlink requests')
xmdNFSV2SvrRead = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV2SvrRead.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV2SvrRead.setDescription('NFS server read requests')
xmdNFSV2SvrWrcache = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV2SvrWrcache.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV2SvrWrcache.setDescription('NFS server cache requests')
xmdNFSV2SvrWrite = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV2SvrWrite.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV2SvrWrite.setDescription('NFS server write requests')
xmdNFSV2SvrCreate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV2SvrCreate.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV2SvrCreate.setDescription('NFS server file creation requests')
xmdNFSV2SvrRemove = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 4, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV2SvrRemove.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV2SvrRemove.setDescription('NFS server file removal requests')
xmdNFSV2SvrRename = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 4, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV2SvrRename.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV2SvrRename.setDescription('NFS server file rename requests')
xmdNFSV2SvrLink = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 4, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV2SvrLink.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV2SvrLink.setDescription('NFS server link creation requests')
xmdNFSV2SvrSymlink = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 4, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV2SvrSymlink.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV2SvrSymlink.setDescription('NFS server symbolic link creation requests')
xmdNFSV2SvrMkdir = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 4, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV2SvrMkdir.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV2SvrMkdir.setDescription('NFS server directory creation requests')
xmdNFSV2SvrRmdir = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 4, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV2SvrRmdir.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV2SvrRmdir.setDescription('NFS server directory removal requests')
xmdNFSV2SvrReaddir = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 4, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV2SvrReaddir.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV2SvrReaddir.setDescription('NFS server read-directory requests')
xmdNFSV2SvrStatfs = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 4, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV2SvrStatfs.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV2SvrStatfs.setDescription('NFS server file stat requests')
xmdNFSV3Clnt = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 5))
xmdNFSV3ClntNull = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV3ClntNull.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV3ClntNull.setDescription('NFS V3 client null requests')
xmdNFSV3ClntGetattr = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV3ClntGetattr.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV3ClntGetattr.setDescription('NFS V3 client getattr requests')
xmdNFSV3ClntSetattr = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV3ClntSetattr.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV3ClntSetattr.setDescription('NFS V3 client setattr requests')
xmdNFSV3ClntLookup = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV3ClntLookup.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV3ClntLookup.setDescription('NFS V3 client file name lookup requests')
xmdNFSV3ClntAccess = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV3ClntAccess.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV3ClntAccess.setDescription('NFS V3 client access requests')
xmdNFSV3ClntReadlink = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV3ClntReadlink.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV3ClntReadlink.setDescription('NFS V3 client readlink requests')
xmdNFSV3ClntRead = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV3ClntRead.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV3ClntRead.setDescription('NFS V3 client read requests')
xmdNFSV3ClntWrite = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 5, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV3ClntWrite.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV3ClntWrite.setDescription('NFS V3 client write requests')
xmdNFSV3ClntCreate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 5, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV3ClntCreate.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV3ClntCreate.setDescription('NFS V3 client file creation requests')
xmdNFSV3ClntMkdir = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 5, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV3ClntMkdir.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV3ClntMkdir.setDescription('NFS V3 client directory creation requests')
xmdNFSV3ClntSymlink = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 5, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV3ClntSymlink.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV3ClntSymlink.setDescription('NFS V3 client symbolic link creation requests')
xmdNFSV3ClntMknod = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 5, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV3ClntMknod.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV3ClntMknod.setDescription('NFS V3 client mknod creation requests')
xmdNFSV3ClntRemove = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 5, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV3ClntRemove.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV3ClntRemove.setDescription('NFS V3 client file removal requests')
xmdNFSV3ClntRmdir = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 5, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV3ClntRmdir.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV3ClntRmdir.setDescription('NFS V3 client directory removal requests')
xmdNFSV3ClntRename = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 5, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV3ClntRename.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV3ClntRename.setDescription('NFS V3 client file rename requests')
xmdNFSV3ClntLink = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 5, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV3ClntLink.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV3ClntLink.setDescription('NFS V3 client link creation requests')
xmdNFSV3ClntReaddir = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 5, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV3ClntReaddir.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV3ClntReaddir.setDescription('NFS V3 client read-directory requests')
xmdNFSV3ClntReaddir_plus = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 5, 18), Counter32()).setLabel("xmdNFSV3ClntReaddir-plus").setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV3ClntReaddir_plus.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV3ClntReaddir_plus.setDescription('NFS V3 client read-directory plus requests')
xmdNFSV3ClntFsstat = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 5, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV3ClntFsstat.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV3ClntFsstat.setDescription('NFS V3 client file stat requests')
xmdNFSV3ClntFsinfo = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 5, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV3ClntFsinfo.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV3ClntFsinfo.setDescription('NFS V3 client file info requests')
xmdNFSV3ClntPathconf = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 5, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV3ClntPathconf.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV3ClntPathconf.setDescription('NFS V3 client path configure requests')
xmdNFSV3ClntCommit = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 5, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV3ClntCommit.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV3ClntCommit.setDescription('NFS V3 client commit requests')
xmdNFSV3Svr = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 6))
xmdNFSV3SvrNull = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 6, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV3SvrNull.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV3SvrNull.setDescription('NFS server null requests')
xmdNFSV3SvrGetattr = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 6, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV3SvrGetattr.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV3SvrGetattr.setDescription('NFS server getattr requests')
xmdNFSV3SvrSetattr = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 6, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV3SvrSetattr.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV3SvrSetattr.setDescription('NFS server setattr requests')
xmdNFSV3SvrLookup = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 6, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV3SvrLookup.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV3SvrLookup.setDescription('NFS server file name lookup requests')
xmdNFSV3SvrAccess = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 6, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV3SvrAccess.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV3SvrAccess.setDescription('NFS server file access requests')
xmdNFSV3SvrReadlink = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 6, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV3SvrReadlink.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV3SvrReadlink.setDescription('NFS server readlink requests')
xmdNFSV3SvrRead = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 6, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV3SvrRead.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV3SvrRead.setDescription('NFS server read requests')
xmdNFSV3SvrWrite = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 6, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV3SvrWrite.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV3SvrWrite.setDescription('NFS server write requests')
xmdNFSV3SvrCreate = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 6, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV3SvrCreate.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV3SvrCreate.setDescription('NFS server file creation requests')
xmdNFSV3SvrMkdir = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 6, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV3SvrMkdir.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV3SvrMkdir.setDescription('NFS server director6 creation requests')
xmdNFSV3SvrSymlink = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 6, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV3SvrSymlink.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV3SvrSymlink.setDescription('NFS server symbolic link creation requests')
xmdNFSV3SvrMknod = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 6, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV3SvrMknod.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV3SvrMknod.setDescription('NFS server mknode creation requests')
xmdNFSV3SvrRemove = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 6, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV3SvrRemove.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV3SvrRemove.setDescription('NFS server file removal requests')
xmdNFSV3SvrRmdir = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 6, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV3SvrRmdir.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV3SvrRmdir.setDescription('NFS server directory removal requests')
xmdNFSV3SvrRename = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 6, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV3SvrRename.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV3SvrRename.setDescription('NFS server file rename requests')
xmdNFSV3SvrLink = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 6, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV3SvrLink.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV3SvrLink.setDescription('NFS server link creation requests')
xmdNFSV3SvrReaddir = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 6, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV3SvrReaddir.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV3SvrReaddir.setDescription('NFS server read-directory requests')
xmdNFSV3SvrReaddir_plus = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 6, 18), Counter32()).setLabel("xmdNFSV3SvrReaddir-plus").setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV3SvrReaddir_plus.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV3SvrReaddir_plus.setDescription('NFS server read-directory plus requests')
xmdNFSV3SvrFsstat = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 6, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV3SvrFsstat.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV3SvrFsstat.setDescription('NFS server file stat requests')
xmdNFSV3SvrFsinfo = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 6, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV3SvrFsinfo.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV3SvrFsinfo.setDescription('NFS server file info requests')
xmdNFSV3SvrPathconf = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 6, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV3SvrPathconf.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV3SvrPathconf.setDescription('NFS server path configure requests')
xmdNFSV3SvrCommit = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 17, 6, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdNFSV3SvrCommit.setStatus('mandatory')
if mibBuilder.loadTexts: xmdNFSV3SvrCommit.setDescription('NFS server commit requests')
xmdDCE = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 28))
xmdSpmi = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 98))
xmdSpmiUsers = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 98, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdSpmiUsers.setStatus('mandatory')
if mibBuilder.loadTexts: xmdSpmiUsers.setDescription('Count of common shared memory users')
xmdSpmiStatsets = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 98, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdSpmiStatsets.setStatus('mandatory')
if mibBuilder.loadTexts: xmdSpmiStatsets.setDescription('Count of defined StatSets')
xmdSpmiDdscount = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 98, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdSpmiDdscount.setStatus('mandatory')
if mibBuilder.loadTexts: xmdSpmiDdscount.setDescription('Count of active dynamic data suppliers')
xmdSpmiConsumers = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 98, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdSpmiConsumers.setStatus('mandatory')
if mibBuilder.loadTexts: xmdSpmiConsumers.setDescription('Count of active data consumers')
xmdSpmiComused = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 98, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdSpmiComused.setStatus('mandatory')
if mibBuilder.loadTexts: xmdSpmiComused.setDescription('kbytes of common shared memory in use')
xmdSpmiHotsets = MibScalar((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 98, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmdSpmiHotsets.setStatus('mandatory')
if mibBuilder.loadTexts: xmdSpmiHotsets.setDescription('Count of defined HotSets')
xmdDDS = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 3, 1, 2, 2, 2, 1, 99))
mibBuilder.exportSymbols("XMSERVD-PERF-MIB", xmdMemVirtPageout=xmdMemVirtPageout, xmdMemVirtPagexct=xmdMemVirtPagexct, xmdIPCSemSemids=xmdIPCSemSemids, xmdRPCClntClNomem=xmdRPCClntClNomem, xmdUDPBadsum=xmdUDPBadsum, xmdMemVirtCltpends=xmdMemVirtCltpends, xmdSyscall=xmdSyscall, xmdRPCClntClCalls=xmdRPCClntClCalls, risc6000ibm7318=risc6000ibm7318, xmdSyscallRead=xmdSyscallRead, xmdIPCSemMaxsems=xmdIPCSemMaxsems, xmdTCPSndtotal=xmdTCPSndtotal, xmdProcCpums=xmdProcCpums, xmdNFSV3SvrCreate=xmdNFSV3SvrCreate, xmdCPUGliticks=xmdCPUGliticks, xmdIPCLocksRecsync=xmdIPCLocksRecsync, xmdSysIOTtyraw=xmdSysIOTtyraw, xmdRPCClntClBadcalls=xmdRPCClntClBadcalls, xmdProcNsignals=xmdProcNsignals, xmdNFSV3SvrCommit=xmdNFSV3SvrCommit, xmdLANHighxmitq=xmdLANHighxmitq, xmdProc=xmdProc, xmdRPCClntCl=xmdRPCClntCl, xmdRPCClntClNewcreds=xmdRPCClntClNewcreds, xmdNFSV2SvrSymlink=xmdNFSV2SvrSymlink, xmdMemRealEpinned=xmdMemRealEpinned, mvs370=mvs370, xmdNFSV3ClntGetattr=xmdNFSV3ClntGetattr, xmdRPCClntCoCalls=xmdRPCClntCoCalls, xmdIPCShmShmmax=xmdIPCShmShmmax, xmdLAN=xmdLAN, xmdSysIOLbread=xmdSysIOLbread, xmdNFSV2ClntMkdir=xmdNFSV2ClntMkdir, xmdDiskXfer=xmdDiskXfer, xmdMem=xmdMem, xmdDiskBusy=xmdDiskBusy, xmdIPNetIFOquemax=xmdIPNetIFOquemax, aix=aix, xmdNFSClientBadcalls=xmdNFSClientBadcalls, xmdNFSV3SvrFsinfo=xmdNFSV3SvrFsinfo, xmdRPCSvrClCalls=xmdRPCSvrClCalls, xmdMemKmemMemmax=xmdMemKmemMemmax, xmdNFSV3SvrMknod=xmdNFSV3SvrMknod, xmdMemVirtPgspgout=xmdMemVirtPgspgout, xmdMemVirtTotpends=xmdMemVirtTotpends, xmdNFSV2SvrSetattr=xmdNFSV2SvrSetattr, xmdNFSClientCalls=xmdNFSClientCalls, xmdCPUGlkern=xmdCPUGlkern, xmdMemVirtWncomrepag=xmdMemVirtWncomrepag, xmdIPFragok=xmdIPFragok, xmdUDPHdrops=xmdUDPHdrops, xmdFSLvcount=xmdFSLvcount, xmdNFSV3SvrReadlink=xmdNFSV3SvrReadlink, xmdNFSV3SvrRemove=xmdNFSV3SvrRemove, xmdProcKexit=xmdProcKexit, xmdNFSV3ClntAccess=xmdNFSV3ClntAccess, mgmt=mgmt, xmdIPCSemSemmaxv=xmdIPCSemSemmaxv, xmdLANXmitintr=xmdLANXmitintr, xmdIPCSemUndosiz=xmdIPCSemUndosiz, xmdNFSV2SvrMkdir=xmdNFSV2SvrMkdir, xmdCPU=xmdCPU, xmdProcMaxrss=xmdProcMaxrss, risc6000sampleAgents=risc6000sampleAgents, xmdSyscallWrite=xmdSyscallWrite, aixRT=aixRT, xmdFSInstName=xmdFSInstName, xmdNFSV2ClntRemove=xmdNFSV2ClntRemove, xmdUDPRcvdgrm=xmdUDPRcvdgrm, xmdMemVirtNpswarn=xmdMemVirtNpswarn, xmdMemVirtZerofill=xmdMemVirtZerofill, xmdIPCMsgIdmax=xmdIPCMsgIdmax, xmdIPCShmShmids=xmdIPCShmShmids, xmdMemVirtIodone=xmdMemVirtIodone, xmdMemRealPsegpin=xmdMemRealPsegpin, xmdIPRoutingUnreach=xmdIPRoutingUnreach, xmdMemRealNumfrb=xmdMemRealNumfrb, xmdNFSV3SvrRmdir=xmdNFSV3SvrRmdir, xmdRPCClntCoBadcalls=xmdRPCClntCoBadcalls, xmdNFSV3SvrLink=xmdNFSV3SvrLink, xmdRPCSvrClNullrecv=xmdRPCSvrClNullrecv, xmdFSPpsize=xmdFSPpsize, xmdRPCClntClRetrans=xmdRPCClntClRetrans, xmdProcCpuacc=xmdProcCpuacc, xmdMemVirtPagein=xmdMemVirtPagein, xmdSysIOTtycan=xmdSysIOTtycan, xmdMemVirtNcompends=xmdMemVirtNcompends, xmdTCPSndrexmitbyte=xmdTCPSndrexmitbyte, xmdIPCShmShmmin=xmdIPCShmShmmin, xmdRPCSvrCoNullrecv=xmdRPCSvrCoNullrecv, xmdMemVirtMinpgahead=xmdMemVirtMinpgahead, xmdIPNetIFOdrops=xmdIPNetIFOdrops, xmdRPCClntCoInterrupts=xmdRPCClntCoInterrupts, xmdTCPRcvackpack=xmdTCPRcvackpack, xmdNFSServerBadcalls=xmdNFSServerBadcalls, xmdNFSV2SvrRmdir=xmdNFSV2SvrRmdir, xmdRPCSvrCo=xmdRPCSvrCo, xmdCPUGluticks=xmdCPUGluticks, xmdSysIO=xmdSysIO, xmdMemRealPseguse=xmdMemRealPseguse, xmdRPCClntClBadxids=xmdRPCClntClBadxids, xmdIPRouting=xmdIPRouting, xmdMemRealEclnt=xmdMemRealEclnt, xmdNFSV3ClntReaddir=xmdNFSV3ClntReaddir, xmdMemRealSysrepag=xmdMemRealSysrepag, xmdRPCSvrClDupchecks=xmdRPCSvrClDupchecks, xmdTCPRcvpartdupbyte=xmdTCPRcvpartdupbyte, xmdIPNetIF=xmdIPNetIF, xmdIPNetIFIoctetkb=xmdIPNetIFIoctetkb, xmdMemVirtExtendwt=xmdMemVirtExtendwt, xmdMemRealMaxclient=xmdMemRealMaxclient, xmdNFSClient=xmdNFSClient, xmdTCPRcvpack=xmdTCPRcvpack, xmdIPNetIFIunknproto=xmdIPNetIFIunknproto, xmdRPCClntCo=xmdRPCClntCo, xmdNFSV2ClntReaddir=xmdNFSV2ClntReaddir, xmdNFSV3SvrMkdir=xmdNFSV3SvrMkdir, xmdRPCClntCoBadverfs=xmdRPCClntCoBadverfs, xmdIPRcvtotal=xmdIPRcvtotal, xmdSpmiHotsets=xmdSpmiHotsets, xmdMemVirtPendiowt=xmdMemVirtPendiowt, xmdFSDirblk=xmdFSDirblk, xmdNFSV2SvrLookup=xmdNFSV2SvrLookup, xmdMemKmemInuse=xmdMemKmemInuse, xmdIPNetIFIoctet=xmdIPNetIFIoctet, xmdDiskIndex=xmdDiskIndex, xmdNFSV3ClntMkdir=xmdNFSV3ClntMkdir, xmdNFSV3SvrPathconf=xmdNFSV3SvrPathconf, xmdProcNice=xmdProcNice, xmdMemVirtPgspgin=xmdMemVirtPgspgin, xmdIPNetIFIerror=xmdIPNetIFIerror, xmdUDPCachmiss=xmdUDPCachmiss, xmdTCPRcvdupbyte=xmdTCPRcvdupbyte, xmdNFSV2SvrReadlink=xmdNFSV2SvrReadlink, xmdIPNetIFOoctet=xmdIPNetIFOoctet, xmdNFSV2ClntSymlink=xmdNFSV2ClntSymlink, risc6000perf=risc6000perf, xmdTCPRcvwinprobe=xmdTCPRcvwinprobe, xmdMemVirtWcomrepag=xmdMemVirtWcomrepag, xmdMemRealNoncomp=xmdMemRealNoncomp, xmdTCPSndrexmitpack=xmdTCPSndrexmitpack, xmdIPCLocksRecstot=xmdIPCLocksRecstot, xmdNFSV2SvrRemove=xmdNFSV2SvrRemove, xmdNFSV3SvrReaddir_plus=xmdNFSV3SvrReaddir_plus, xmdIPCMsg=xmdIPCMsg, xmdProcKsched=xmdProcKsched, xmdIPCLocksRecsused=xmdIPCLocksRecsused, xmdIPNetIFInstName=xmdIPNetIFInstName, vm370=vm370, xmdProcInstName=xmdProcInstName, xmdCPUGlkticks=xmdCPUGlkticks, xmdSysIOReadch=xmdSysIOReadch, xmdMemRealSize=xmdMemRealSize, xmdMemVirtBacktrk=xmdMemVirtBacktrk, xmdMemVirtMaxpgahead=xmdMemVirtMaxpgahead, xmdNFSV3ClntRemove=xmdNFSV3ClntRemove, xmdTCPSndack=xmdTCPSndack, xmdMemVirtComrepl=xmdMemVirtComrepl, xmdRPCClntClBadverfs=xmdRPCClntClBadverfs, xmdNFSV3ClntCommit=xmdNFSV3ClntCommit, xmdIPNetIFOerror=xmdIPNetIFOerror, xmdMemVirtPgrclm=xmdMemVirtPgrclm, xmdNFSV2ClntWrite=xmdNFSV2ClntWrite, xmdMemVirtSio=xmdMemVirtSio, xmdNFSV3ClntReadlink=xmdNFSV3ClntReadlink, xmdNFSV3ClntWrite=xmdNFSV3ClntWrite, xmdFSNamei=xmdFSNamei, xmdMemVirtScan=xmdMemVirtScan, xmdLANBytesin=xmdLANBytesin, xmdSysIOPhwrite=xmdSysIOPhwrite, xmdNFSV2ClntSetattr=xmdNFSV2ClntSetattr, xmdMemVirtNpskill=xmdMemVirtNpskill, xmdFSPvcount=xmdFSPvcount, xmdNFSV2ClntStatfs=xmdNFSV2ClntStatfs, xmdFSEntry=xmdFSEntry, xmdNFSV3ClntNull=xmdNFSV3ClntNull, xmdIPCMsgQuemax=xmdIPCMsgQuemax, xmdNFSV2ClntLookup=xmdNFSV2ClntLookup, xmdSysIOPhread=xmdSysIOPhread, xmdUDPNoport=xmdUDPNoport, xmdSysIOLbwrite=xmdSysIOLbwrite, xmdMemVirtMinfree=xmdMemVirtMinfree, xmdLANXmiterrors=xmdLANXmiterrors, xmdNFSV2SvrReaddir=xmdNFSV2SvrReaddir, xmdSysIOTtyout=xmdSysIOTtyout, xmdNFSV2Svr=xmdNFSV2Svr, xmdNFS=xmdNFS, xmdProcCpupct=xmdProcCpupct, xmdNFSV2SvrRename=xmdNFSV2SvrRename, xmdMemVirtCycle=xmdMemVirtCycle, xmdTCPRcvbyte=xmdTCPRcvbyte, xmdCPUGlwait=xmdCPUGlwait, xmdNFSV2SvrRoot=xmdNFSV2SvrRoot, xmdIPCSemSemmaxe=xmdIPCSemSemmaxe, xmdRPCClntCoNomem=xmdRPCClntCoNomem, xmdMemVirtMinpout=xmdMemVirtMinpout, xmdCPUGlwticks=xmdCPUGlwticks, xmdRPCClntCoTimers=xmdRPCClntCoTimers, xmdIPNetIFOoctetkb=xmdIPNetIFOoctetkb, xmdNFSV2SvrLink=xmdNFSV2SvrLink, xmdNFSV2ClntNull=xmdNFSV2ClntNull, xmdIPCMsgMsgmax=xmdIPCMsgMsgmax, xmdCPUGlidle=xmdCPUGlidle, xmdIPCSem=xmdIPCSem, enterprises=enterprises, mvs=mvs, xmdFS=xmdFS, xmdMemVirtMaxfree=xmdMemVirtMaxfree, xmdNFSV2Clnt=xmdNFSV2Clnt, xmdNFSV3ClntRename=xmdNFSV3ClntRename, ps2PS2=ps2PS2, xmdTCPRcvtotal=xmdTCPRcvtotal, xmdPagSpEntry=xmdPagSpEntry, xmdFSIndex=xmdFSIndex, xmdIPCLocksOverrun=xmdIPCLocksOverrun, xmdTCPRcvdupack=xmdTCPRcvdupack, xmdDDS=xmdDDS, xmdPagSpTotalfree=xmdPagSpTotalfree, xmdIPCLocksNumrecs=xmdIPCLocksNumrecs, xmdSyscallExec=xmdSyscallExec, xmdMemKmemIndex=xmdMemKmemIndex, xmdLANIndex=xmdLANIndex, xmdProcSwpocc=xmdProcSwpocc, xmdIPRoutingNewgate=xmdIPRoutingNewgate, xmdPagSpTotalsize=xmdPagSpTotalsize, xmdUDPNoportbc=xmdUDPNoportbc, directory=directory, xmdMemRealEnoncomp=xmdMemRealEnoncomp, xmdMemVirtNcomrepag=xmdMemVirtNcomrepag, risc6000agents=risc6000agents, xmdMemVirtEncomrepl=xmdMemVirtEncomrepl, xmdNFSV3ClntSymlink=xmdNFSV3ClntSymlink, xmdDiskInstName=xmdDiskInstName, xmdMemRealWseguse=xmdMemRealWseguse, xmdTCPSndkbyte=xmdTCPSndkbyte, xmdLANXmitdrops=xmdLANXmitdrops, risc6000gated=risc6000gated, xmdMemKmemEntry=xmdMemKmemEntry, xmdMemRealEcomp=xmdMemRealEcomp, aixPS2=aixPS2, xmdSysIOWritechkb=xmdSysIOWritechkb, xmdNFSV2ClntReadlink=xmdNFSV2ClntReadlink, xmdLANFramesin=xmdLANFramesin, xmdProcRunque=xmdProcRunque, vm=vm, xmdFSFree=xmdFSFree, xmdLANInstName=xmdLANInstName, xmdNFSV2ClntRead=xmdNFSV2ClntRead, xmdNFSV3SvrReaddir=xmdNFSV3SvrReaddir, xmdProcEntry=xmdProcEntry, xmdIPCMsgQueids=xmdIPCMsgQueids, xmdNFSV2SvrWrite=xmdNFSV2SvrWrite, xmdRPCClntCoBadxids=xmdRPCClntCoBadxids, xmdTCPRcvaftwinbyte=xmdTCPRcvaftwinbyte)
mibBuilder.exportSymbols("XMSERVD-PERF-MIB", xmdIPCSemMaxundo=xmdIPCSemMaxundo, xmdMemRealClsegpin=xmdMemRealClsegpin, xmdTCPSndurg=xmdTCPSndurg, xmdTCPRcvduppack=xmdTCPRcvduppack, xmdNFSV2ClntWrcache=xmdNFSV2ClntWrcache, xmdNFSV3ClntReaddir_plus=xmdNFSV3ClntReaddir_plus, xmdDiskRblk=xmdDiskRblk, private=private, xmdIPC=xmdIPC, risc6000private=risc6000private, experimental=experimental, xmdNFSV3ClntFsinfo=xmdNFSV3ClntFsinfo, xmdRPCSvrCl=xmdRPCSvrCl, xmdTCPSndpack=xmdTCPSndpack, xmdNFSV3ClntRmdir=xmdNFSV3ClntRmdir, xmdSpmiComused=xmdSpmiComused, xmdIPCSemMaxops=xmdIPCSemMaxops, xmdRPCClntClTimers=xmdRPCClntClTimers, xmdPagSpIocnt=xmdPagSpIocnt, xmdProcUsercpu=xmdProcUsercpu, xmdDCE=xmdDCE, xmdNFSV3SvrWrite=xmdNFSV3SvrWrite, xmdLANXmitovfl=xmdLANXmitovfl, xmdProcKerncpu=xmdProcKerncpu, xmdSyscallFork=xmdSyscallFork, aixRISC6000=aixRISC6000, xmdIPNetIFOpacket=xmdIPNetIFOpacket, xmdLANRecvintr=xmdLANRecvintr, xmdNFSV3ClntSetattr=xmdNFSV3ClntSetattr, xmdNFSV3SvrSetattr=xmdNFSV3SvrSetattr, xmdMemRealWsegpin=xmdMemRealWsegpin, xmdIPRcvdgrm=xmdIPRcvdgrm, xmdDiskWblk=xmdDiskWblk, risc6000snmpd=risc6000snmpd, xmdPagSpPgspgout=xmdPagSpPgspgout, xmdRPCSvrClXdrcall=xmdRPCSvrClXdrcall, xmdUDPSnddgrm=xmdUDPSnddgrm, xmdNFSV3SvrGetattr=xmdNFSV3SvrGetattr, xmdRPCClntCoCantconn=xmdRPCClntCoCantconn, xmdNFSV3SvrFsstat=xmdNFSV3SvrFsstat, xmdMemVirtExfill=xmdMemVirtExfill, xmdMemRealClseguse=xmdMemRealClseguse, xmdMemVirtLockexct=xmdMemVirtLockexct, xmdPagSpEfree=xmdPagSpEfree, xmdSyscallTotal=xmdSyscallTotal, xmdMemVirtEncomrepag=xmdMemVirtEncomrepag, xmdIPForward=xmdIPForward, xmdLANIbadpacks=xmdLANIbadpacks, xmdMemRealPdecay=xmdMemRealPdecay, os2=os2, xmdProcTsize=xmdProcTsize, xmdNFSV2SvrWrcache=xmdNFSV2SvrWrcache, xmdNFSV2SvrGetattr=xmdNFSV2SvrGetattr, xmdSpmi=xmdSpmi, xmdRPCSvrClBadlen=xmdRPCSvrClBadlen, xmdIP=xmdIP, xmdPagSpPgspgin=xmdPagSpPgspgin, xmdIPReasmok=xmdIPReasmok, xmdMemVirtSteal=xmdMemVirtSteal, xmdRPCClntCoTimeouts=xmdRPCClntCoTimeouts, xmdNFSV3ClntLink=xmdNFSV3ClntLink, xmdIPRoutingDynamic=xmdIPRoutingDynamic, xmdLANKbytesout=xmdLANKbytesout, xmdTCPRcvackbyte=xmdTCPRcvackbyte, xmdNFSServer=xmdNFSServer, xmdNFSV2ClntRoot=xmdNFSV2ClntRoot, xmdLANEntry=xmdLANEntry, xmdMemVirtEcomrepag=xmdMemVirtEcomrepag, xmdMemVirtCompends=xmdMemVirtCompends, xmdLANRecvdrops=xmdLANRecvdrops, xmdIPNetIFOmcastpkt=xmdIPNetIFOmcastpkt, xmdTCPSndctrl=xmdTCPSndctrl, risc6000public=risc6000public, ibm=ibm, xmdTCPConnects=xmdTCPConnects, xmdRPCSvrCoDupchecks=xmdRPCSvrCoDupchecks, xmdCPUGluser=xmdCPUGluser, xmdLANFramesout=xmdLANFramesout, xmdIPNetIFIndex=xmdIPNetIFIndex, xmdNFSV3SvrSymlink=xmdNFSV3SvrSymlink, xmdSysIOBwrite=xmdSysIOBwrite, xmdNFSV3ClntRead=xmdNFSV3ClntRead, xmdIPSnddgrm=xmdIPSnddgrm, xmdPagSpEtotalused=xmdPagSpEtotalused, xmdMemRealElocal=xmdMemRealElocal, risc6000clsmuxpd=risc6000clsmuxpd, xmdTCPSndbyte=xmdTCPSndbyte, xmdMemKmemFailures=xmdMemKmemFailures, xmdNFSV2SvrRead=xmdNFSV2SvrRead, xmdNFSV2ClntCreate=xmdNFSV2ClntCreate, xmdNFSV2ClntLink=xmdNFSV2ClntLink, xmdFSIget=xmdFSIget, xmdPagSpInstName=xmdPagSpInstName, xmdProcMinflt=xmdProcMinflt, xmdRPCSvrCoBadcalls=xmdRPCSvrCoBadcalls, xmdProcSwpque=xmdProcSwpque, xmdUDPBadlen=xmdUDPBadlen, xmdMemVirt=xmdMemVirt, xmdRPCSvrCoDupreqs=xmdRPCSvrCoDupreqs, xmdMemVirtEcomrepl=xmdMemVirtEcomrepl, xmdRPCSvrClDupreqs=xmdRPCSvrClDupreqs, xmdMemVirtMaxpout=xmdMemVirtMaxpout, xmdNFSV3Clnt=xmdNFSV3Clnt, xmdMemVirtPfavail=xmdMemVirtPfavail, xmdMemKmemBlocks=xmdMemKmemBlocks, xmdTCPSndwinup=xmdTCPSndwinup, xmdMemKmemInstName=xmdMemKmemInstName, xmdNFSV3ClntCreate=xmdNFSV3ClntCreate, xmdProcMajflt=xmdProcMajflt, xmdProcRepage=xmdProcRepage, xmdIPCShm=xmdIPCShm, xmdIPCLocks=xmdIPCLocks, xmdRPCSvrCoXdrcall=xmdRPCSvrCoXdrcall, ibmAgents=ibmAgents, xmdNFSV2SvrNull=xmdNFSV2SvrNull, xmdPagSpEtotalfree=xmdPagSpEtotalfree, xmdIPNetIFOquelen=xmdIPNetIFOquelen, xmdRTimeLAN=xmdRTimeLAN, xmdNFSV2ClntGetattr=xmdNFSV2ClntGetattr, xmdMemVirtMinperm=xmdMemVirtMinperm, xmdNFSV3ClntMknod=xmdNFSV3ClntMknod, xmdMemRealEfree=xmdMemRealEfree, xmdPagSpSize=xmdPagSpSize, risc6000xmservd=risc6000xmservd, xmdIPRoutingWildc=xmdIPRoutingWildc, xmdTCPRcvaftwinpack=xmdTCPRcvaftwinpack, xmdProcCodemem=xmdProcCodemem, xmdSpmiConsumers=xmdSpmiConsumers, xmdProcPswitch=xmdProcPswitch, xmdNFSV3SvrLookup=xmdNFSV3SvrLookup, xmdMemRealComp=xmdMemRealComp, xmdLANXmitque=xmdLANXmitque, xmdNFSV2SvrCreate=xmdNFSV2SvrCreate, xmdNFSV2ClntRename=xmdNFSV2ClntRename, xmdIPNetIFIqdrop=xmdIPNetIFIqdrop, xmdIPRoutingBadred=xmdIPRoutingBadred, xmdRTime=xmdRTime, xmdNFSV3SvrRead=xmdNFSV3SvrRead, xmdMemKmemCalls=xmdMemKmemCalls, xmdMemReal=xmdMemReal, xmdNFSV3SvrAccess=xmdNFSV3SvrAccess, xmdMemVirtComrepag=xmdMemVirtComrepag, xmdDiskEntry=xmdDiskEntry, xmdUDP=xmdUDP, xmdNFSV3ClntFsstat=xmdNFSV3ClntFsstat, xmdTCPRcvkbyte=xmdTCPRcvkbyte, xmdRTimeARM=xmdRTimeARM, xmd=xmd, os400as400=os400as400, xmdTCPClose=xmdTCPClose, xmdSysIOWritech=xmdSysIOWritech, xmdNFSV2ClntRmdir=xmdNFSV2ClntRmdir, xmdTCPRcvwinup=xmdTCPRcvwinup, xmdNFSV3SvrNull=xmdNFSV3SvrNull, xmdRPC=xmdRPC, xmdMemKmem=xmdMemKmem, xmdProcRunocc=xmdProcRunocc, xmdNFSV2SvrStatfs=xmdNFSV2SvrStatfs, xmdMemRealNumclient=xmdMemRealNumclient, xmdUDPFullsock=xmdUDPFullsock, xmdSysIOBread=xmdSysIOBread, risc6000samples=risc6000samples, os400=os400, xmdLANBytesout=xmdLANBytesout, xmdDisk=xmdDisk, xmdProcIndex=xmdProcIndex, xmdIPNetIFEntry=xmdIPNetIFEntry, xmdRPCClntCoNewcreds=xmdRPCClntCoNewcreds, xmdNFSV3ClntPathconf=xmdNFSV3ClntPathconf, xmdLANRcverrors=xmdLANRcverrors, xmdIPNetIFImcastpkt=xmdIPNetIFImcastpkt, xmdRPCSvrClBadcalls=xmdRPCSvrClBadcalls, xmdRPCClntClCantsend=xmdRPCClntClCantsend, xmdMemVirtNcomrepl=xmdMemVirtNcomrepl, xmdSysIOReadchkb=xmdSysIOReadchkb, xmdSpmiStatsets=xmdSpmiStatsets, xmdMemKmemMemuse=xmdMemKmemMemuse, xmdProcPagsp=xmdProcPagsp, xmdTCPRcvoobyte=xmdTCPRcvoobyte, xmdIPRcvfrag=xmdIPRcvfrag, xmdPagSp=xmdPagSp, xmdNFSV3ClntLookup=xmdNFSV3ClntLookup, xmdPagSpIndex=xmdPagSpIndex, xmdTCPRcvoopack=xmdTCPRcvoopack, xmdNFSV3SvrRename=xmdNFSV3SvrRename, xmdMemVirtFreewt=xmdMemVirtFreewt, xmdSpmiDdscount=xmdSpmiDdscount, xmdProcWorkmem=xmdProcWorkmem, xmdRPCClntClTimeouts=xmdRPCClntClTimeouts, xmdRPCSvrCoBadlen=xmdRPCSvrCoBadlen, aix370=aix370, xmdTCPConattmpt=xmdTCPConattmpt, xmdSpmiUsers=xmdSpmiUsers, xmdLANKbytesin=xmdLANKbytesin, xmdTCPRcvpartduppack=xmdTCPRcvpartduppack, xmdMemRealNumlocal=xmdMemRealNumlocal, xmdProcNvcsw=xmdProcNvcsw, xmdRPCSvrCoCalls=xmdRPCSvrCoCalls, xmdNFSV3Svr=xmdNFSV3Svr, xmdIPNetIFIpacket=xmdIPNetIFIpacket, xmdTCP=xmdTCP, xmdTCPSndprobe=xmdTCPSndprobe, xmdNFSServerCalls=xmdNFSServerCalls, xmdTCPAccept=xmdTCPAccept)
