#
# PySNMP MIB module Unisphere-Data-DVMRP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Unisphere-Data-DVMRP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:30:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
dvmrpInterfaceEntry, = mibBuilder.importSymbols("DVMRP-STD-MIB", "dvmrpInterfaceEntry")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, NotificationType, ObjectIdentity, IpAddress, Unsigned32, Counter32, TimeTicks, MibIdentifier, Counter64, Bits, ModuleIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "NotificationType", "ObjectIdentity", "IpAddress", "Unsigned32", "Counter32", "TimeTicks", "MibIdentifier", "Counter64", "Bits", "ModuleIdentity", "Integer32")
DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TextualConvention")
usDataMibs, = mibBuilder.importSymbols("Unisphere-Data-MIBs", "usDataMibs")
usdDvmrpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44))
usdDvmrpMIB.setRevisions(('2001-05-11 15:46',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: usdDvmrpMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: usdDvmrpMIB.setLastUpdated('200105111546Z')
if mibBuilder.loadTexts: usdDvmrpMIB.setOrganization('Unisphere Networks, Inc.')
if mibBuilder.loadTexts: usdDvmrpMIB.setContactInfo(' Unisphere Networks, Inc. Postal: 10 Technology Park Drive Westford, MA 01886 USA Tel: +1 978 589 5800 Email: mib@UnisphereNetworks.com')
if mibBuilder.loadTexts: usdDvmrpMIB.setDescription('The Enterprise MIB module for management of Unisphere DVMRP routers.')
usdDvmrpMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1))
usdDvmrp = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1))
usdDvmrpScalar = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 1))
usdDvmrpAdminState = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdDvmrpAdminState.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpAdminState.setDescription('Controls whether usdDvmrp is enabled or not.')
usdDvmrpMcastAdminState = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDvmrpMcastAdminState.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpMcastAdminState.setDescription('Whether Multicast is enabled or not. This is settable via the multicast component.')
usdDvmrpRouteHogNotification = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdDvmrpRouteHogNotification.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpRouteHogNotification.setDescription('The number of routes allowed within a 1 minute interval before a trap is issued warning that there may be a route surge going on.')
usdDvmrpRouteLimit = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usdDvmrpRouteLimit.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpRouteLimit.setDescription('The limit on the number of routes that may be advertised on a usdDvmrp interface.')
usdDvmrpS32PrunesOnly = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDvmrpS32PrunesOnly.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpS32PrunesOnly.setDescription('Identifies when Dvmrp is sending prunes and grafts with only a 32 bit source masks.')
usdDvmrpAclDistNbrTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 2), )
if mibBuilder.loadTexts: usdDvmrpAclDistNbrTable.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpAclDistNbrTable.setDescription('The (conceptual) table listing the access lists distance for a list of neighbors.')
usdDvmrpAclDistNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 2, 1), ).setIndexNames((0, "Unisphere-Data-DVMRP-MIB", "usdDvmrpAclDistNbrIfIndex"), (0, "Unisphere-Data-DVMRP-MIB", "usdDvmrpAclDistNbrAclListName"))
if mibBuilder.loadTexts: usdDvmrpAclDistNbrEntry.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpAclDistNbrEntry.setDescription('An entry (conceptual row) in the usdDvmrpAclDistNbrTable.')
usdDvmrpAclDistNbrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdDvmrpAclDistNbrIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpAclDistNbrIfIndex.setDescription('The ifIndex value of the interface for which DVMRP is enabled.')
usdDvmrpAclDistNbrAclListName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80)))
if mibBuilder.loadTexts: usdDvmrpAclDistNbrAclListName.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpAclDistNbrAclListName.setDescription('The name of the access list to be used in the filter')
usdDvmrpAclDistNbrDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDvmrpAclDistNbrDistance.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpAclDistNbrDistance.setDescription('The administritive distance metric that will be used')
usdDvmrpAclDistNbrNbrListName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDvmrpAclDistNbrNbrListName.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpAclDistNbrNbrListName.setDescription('This is the access list of nbrs for this accept-filter to be applied, this field must be supplied when the row is created')
usdDvmrpAclDistNbrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDvmrpAclDistNbrStatus.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpAclDistNbrStatus.setDescription('The status of this entry.')
usdDvmrpLocalAddrTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 3), )
if mibBuilder.loadTexts: usdDvmrpLocalAddrTable.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpLocalAddrTable.setDescription('The (conceptual) table listing the local addresses. This is used to retrive all of the addresses configured on a DVMRP interface.')
usdDvmrpLocalAddrTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 3, 1), ).setIndexNames((0, "Unisphere-Data-DVMRP-MIB", "usdDvmrpLocalAddrIfIndex"), (0, "Unisphere-Data-DVMRP-MIB", "usdDvmrpLocalAddrAddrOrIfIndex"))
if mibBuilder.loadTexts: usdDvmrpLocalAddrTableEntry.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpLocalAddrTableEntry.setDescription('An entry (conceptual row) in the usdDvmrpLocalAddrTable.')
usdDvmrpLocalAddrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdDvmrpLocalAddrIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpLocalAddrIfIndex.setDescription('The ifIndex value of the interface for which DVMRP is enabled.')
usdDvmrpLocalAddrAddrOrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 3, 1, 2), Unsigned32())
if mibBuilder.loadTexts: usdDvmrpLocalAddrAddrOrIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpLocalAddrAddrOrIfIndex.setDescription('For unnumbered interfaces, this takes on the value of the ifIndex. For numbered interfaces, this is the address of one of the addresses associated with the interface.')
usdDvmrpLocalAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDvmrpLocalAddrMask.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpLocalAddrMask.setDescription('The Ip Address mask associated with this entry.')
usdDvmrpSummaryAddrTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 4), )
if mibBuilder.loadTexts: usdDvmrpSummaryAddrTable.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpSummaryAddrTable.setDescription('The (conceptual) table listing the DVMRP summary addresses. This is used to retrive all of the summary address configured on a DVMRP interface.')
usdDvmrpSummaryAddrTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 4, 1), ).setIndexNames((0, "Unisphere-Data-DVMRP-MIB", "usdDvmrpSummaryAddrIfIndex"), (0, "Unisphere-Data-DVMRP-MIB", "usdDvmrpSummaryAddrAddress"), (0, "Unisphere-Data-DVMRP-MIB", "usdDvmrpSummaryAddrMask"))
if mibBuilder.loadTexts: usdDvmrpSummaryAddrTableEntry.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpSummaryAddrTableEntry.setDescription('An entry (conceptual row) in the usdDvmrpSummaryAddrTable.')
usdDvmrpSummaryAddrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: usdDvmrpSummaryAddrIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpSummaryAddrIfIndex.setDescription('The ifIndex value of the interface for which DVMRP is enabled.')
usdDvmrpSummaryAddrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 4, 1, 2), IpAddress())
if mibBuilder.loadTexts: usdDvmrpSummaryAddrAddress.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpSummaryAddrAddress.setDescription('This is the summary address that will be created')
usdDvmrpSummaryAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 4, 1, 3), IpAddress())
if mibBuilder.loadTexts: usdDvmrpSummaryAddrMask.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpSummaryAddrMask.setDescription('The mask of the summary address to be created')
usdDvmrpSummaryAddrCost = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDvmrpSummaryAddrCost.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpSummaryAddrCost.setDescription('The administritive distance metric used to actually calculate distance vectors.')
usdDvmrpSummaryAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDvmrpSummaryAddrStatus.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpSummaryAddrStatus.setDescription('The status of this entry.')
usdDvmrpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 5), )
if mibBuilder.loadTexts: usdDvmrpInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpInterfaceTable.setDescription("The (conceptual) table listing the router's multicast-capable interfaces. This table augments the DvmrpInterfaceTable.")
usdDvmrpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 5, 1), )
dvmrpInterfaceEntry.registerAugmentions(("Unisphere-Data-DVMRP-MIB", "usdDvmrpInterfaceEntry"))
usdDvmrpInterfaceEntry.setIndexNames(*dvmrpInterfaceEntry.getIndexNames())
if mibBuilder.loadTexts: usdDvmrpInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpInterfaceEntry.setDescription('An entry (conceptual row) in the usdDvmrpInterfaceTable. This row extends ipMRouteInterfaceEntry in the IP Multicast MIB, where the threshold object resides.')
usdDvmrpInterfaceAutoSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDvmrpInterfaceAutoSummary.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpInterfaceAutoSummary.setDescription('Enables or disable auto-summarization on this interface.')
usdDvmrpInterfaceMetricOffsetOut = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDvmrpInterfaceMetricOffsetOut.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpInterfaceMetricOffsetOut.setDescription('The distance metric for this interface which is used to calculate outbound distance vectors.')
usdDvmrpInterfaceMetricOffsetIn = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDvmrpInterfaceMetricOffsetIn.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpInterfaceMetricOffsetIn.setDescription('The distance metric for this interface which is used to calculate inbound distance vectors.')
usdDvmrpInterfaceAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdDvmrpInterfaceAdminState.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpInterfaceAdminState.setDescription('Controls whether DVMRP is enabled or not.')
usdDvmrpPruneTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 6), )
if mibBuilder.loadTexts: usdDvmrpPruneTable.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpPruneTable.setDescription("The (conceptual) table listing the router's upstream prune state.")
usdDvmrpPruneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 6, 1), ).setIndexNames((0, "Unisphere-Data-DVMRP-MIB", "usdDvmrpPruneGroup"), (0, "Unisphere-Data-DVMRP-MIB", "usdDvmrpPruneSource"), (0, "Unisphere-Data-DVMRP-MIB", "usdDvmrpPruneSourceMask"))
if mibBuilder.loadTexts: usdDvmrpPruneEntry.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpPruneEntry.setDescription('An entry (conceptual row) in the usdDvmrpPruneTable.')
usdDvmrpPruneGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: usdDvmrpPruneGroup.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpPruneGroup.setDescription('The group address which has been pruned.')
usdDvmrpPruneSource = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 6, 1, 2), IpAddress())
if mibBuilder.loadTexts: usdDvmrpPruneSource.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpPruneSource.setDescription('The address of the source or source network which has been pruned.')
usdDvmrpPruneSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 6, 1, 3), IpAddress())
if mibBuilder.loadTexts: usdDvmrpPruneSourceMask.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpPruneSourceMask.setDescription("The address of the source or source network which has been pruned. The mask must either be all 1's, or else usdDvmrpPruneSource and usdDvmrpPruneSourceMask must match usdDvmrpRouteSource and usdDvmrpRouteSourceMask for some entry in the usdDvmrpRouteTable.")
usdDvmrpPruneIIFIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 6, 1, 4), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDvmrpPruneIIFIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpPruneIIFIfIndex.setDescription('The ifIndex of the upstream interface for this source group entry.')
usdDvmrpPruneUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 6, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDvmrpPruneUpTime.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpPruneUpTime.setDescription('This is the amount of time that this prune has remained valid')
usdDvmrpSrcGrpOifTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 7), )
if mibBuilder.loadTexts: usdDvmrpSrcGrpOifTable.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpSrcGrpOifTable.setDescription('The (conceptual) OIFs for particular source group entries.')
usdDvmrpSrcGrpOifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 7, 1), ).setIndexNames((0, "Unisphere-Data-DVMRP-MIB", "usdDvmrpSrcGrpOifGroup"), (0, "Unisphere-Data-DVMRP-MIB", "usdDvmrpSrcGrpOifSource"), (0, "Unisphere-Data-DVMRP-MIB", "usdDvmrpSrcGrpOifSourceMask"), (0, "Unisphere-Data-DVMRP-MIB", "usdDvmrpSrcGrpOifOIFIfIndex"))
if mibBuilder.loadTexts: usdDvmrpSrcGrpOifEntry.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpSrcGrpOifEntry.setDescription('An entry (conceptual row) in the usdDvmrpSrcGrpOifTable.')
usdDvmrpSrcGrpOifGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 7, 1, 1), IpAddress())
if mibBuilder.loadTexts: usdDvmrpSrcGrpOifGroup.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpSrcGrpOifGroup.setDescription('The group address which has been pruned')
usdDvmrpSrcGrpOifSource = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 7, 1, 2), IpAddress())
if mibBuilder.loadTexts: usdDvmrpSrcGrpOifSource.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpSrcGrpOifSource.setDescription('The address of the source or source network which has been pruned')
usdDvmrpSrcGrpOifSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 7, 1, 3), IpAddress())
if mibBuilder.loadTexts: usdDvmrpSrcGrpOifSourceMask.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpSrcGrpOifSourceMask.setDescription("The address of the source or source network which has been pruned. The mask must either be all 1's, or else usdDvmrpPruneSource and usdDvmrpPruneSourceMask must match usdDvmrpRouteSource and usdDvmrpRouteSourceMask for some entry in the usdDvmrpRouteTable.")
usdDvmrpSrcGrpOifOIFIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 7, 1, 4), InterfaceIndex())
if mibBuilder.loadTexts: usdDvmrpSrcGrpOifOIFIfIndex.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpSrcGrpOifOIFIfIndex.setDescription('The ifIndex of one of the downstream interfaces for this source group entry.')
usdDvmrpSrcGrpOifOIFPruned = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDvmrpSrcGrpOifOIFPruned.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpSrcGrpOifOIFPruned.setDescription('If true this oif has been pruned')
usdDvmrpSrcGrpOifOIFDnTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 7, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdDvmrpSrcGrpOifOIFDnTTL.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpSrcGrpOifOIFDnTTL.setDescription('The timeout for this OIF. If usdDvmrpSrcGrpOifOIFPruned is false then this is undefined.')
usdDvmrpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 0))
usdDvmrpRouteHogNotificationTrap = NotificationType((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 1, 1, 0, 1))
if mibBuilder.loadTexts: usdDvmrpRouteHogNotificationTrap.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpRouteHogNotificationTrap.setDescription('This is an indication that the route hog notification limit has been exceeded during the past minute. It may mean that a route surge is going on.')
usdDvmrpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 4))
usdDvmrpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 4, 1))
usdDvmrpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 4, 2))
usdDvmrpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 4, 1, 1)).setObjects(("Unisphere-Data-DVMRP-MIB", "usdDvmrpBaseGroup"), ("Unisphere-Data-DVMRP-MIB", "usdDvmrpAclDistNbrGroup"), ("Unisphere-Data-DVMRP-MIB", "usdDvmrpInterfaceGroup"), ("Unisphere-Data-DVMRP-MIB", "usdDvmrpSourceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdDvmrpCompliance = usdDvmrpCompliance.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpCompliance.setDescription('The compliance statement for entities which implement the Unisphere DVMRP MIB.')
usdDvmrpBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 4, 2, 1)).setObjects(("Unisphere-Data-DVMRP-MIB", "usdDvmrpAdminState"), ("Unisphere-Data-DVMRP-MIB", "usdDvmrpMcastAdminState"), ("Unisphere-Data-DVMRP-MIB", "usdDvmrpRouteHogNotification"), ("Unisphere-Data-DVMRP-MIB", "usdDvmrpRouteLimit"), ("Unisphere-Data-DVMRP-MIB", "usdDvmrpS32PrunesOnly"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdDvmrpBaseGroup = usdDvmrpBaseGroup.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpBaseGroup.setDescription('A collection of objects providing basic management of DVMRP in a Unisphere product.')
usdDvmrpAclDistNbrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 4, 2, 2)).setObjects(("Unisphere-Data-DVMRP-MIB", "usdDvmrpAclDistNbrDistance"), ("Unisphere-Data-DVMRP-MIB", "usdDvmrpAclDistNbrNbrListName"), ("Unisphere-Data-DVMRP-MIB", "usdDvmrpAclDistNbrStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdDvmrpAclDistNbrGroup = usdDvmrpAclDistNbrGroup.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpAclDistNbrGroup.setDescription('A collection of objects providing management of DVMRP access list distance neighbors in a Unisphere product.')
usdDvmrpInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 4, 2, 3)).setObjects(("Unisphere-Data-DVMRP-MIB", "usdDvmrpLocalAddrMask"), ("Unisphere-Data-DVMRP-MIB", "usdDvmrpSummaryAddrCost"), ("Unisphere-Data-DVMRP-MIB", "usdDvmrpSummaryAddrStatus"), ("Unisphere-Data-DVMRP-MIB", "usdDvmrpInterfaceAutoSummary"), ("Unisphere-Data-DVMRP-MIB", "usdDvmrpInterfaceMetricOffsetOut"), ("Unisphere-Data-DVMRP-MIB", "usdDvmrpInterfaceMetricOffsetIn"), ("Unisphere-Data-DVMRP-MIB", "usdDvmrpInterfaceAdminState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdDvmrpInterfaceGroup = usdDvmrpInterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpInterfaceGroup.setDescription('A collection of objects providing management of a DVMRP interface in a Unisphere product.')
usdDvmrpSourceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 4, 2, 4)).setObjects(("Unisphere-Data-DVMRP-MIB", "usdDvmrpPruneIIFIfIndex"), ("Unisphere-Data-DVMRP-MIB", "usdDvmrpPruneUpTime"), ("Unisphere-Data-DVMRP-MIB", "usdDvmrpSrcGrpOifOIFPruned"), ("Unisphere-Data-DVMRP-MIB", "usdDvmrpSrcGrpOifOIFDnTTL"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdDvmrpSourceGroup = usdDvmrpSourceGroup.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpSourceGroup.setDescription('A collection of objects providing management of a DVMRP source group in a Unisphere product.')
usdDvmrpNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 44, 4, 2, 8)).setObjects(("Unisphere-Data-DVMRP-MIB", "usdDvmrpRouteHogNotificationTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdDvmrpNotificationGroup = usdDvmrpNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: usdDvmrpNotificationGroup.setDescription('A notification for signaling important DVMRP events.')
mibBuilder.exportSymbols("Unisphere-Data-DVMRP-MIB", usdDvmrpSourceGroup=usdDvmrpSourceGroup, usdDvmrpAdminState=usdDvmrpAdminState, usdDvmrpNotificationGroup=usdDvmrpNotificationGroup, usdDvmrpInterfaceMetricOffsetOut=usdDvmrpInterfaceMetricOffsetOut, usdDvmrpInterfaceGroup=usdDvmrpInterfaceGroup, usdDvmrpSummaryAddrMask=usdDvmrpSummaryAddrMask, usdDvmrpPruneUpTime=usdDvmrpPruneUpTime, usdDvmrpCompliance=usdDvmrpCompliance, usdDvmrpAclDistNbrGroup=usdDvmrpAclDistNbrGroup, usdDvmrpAclDistNbrDistance=usdDvmrpAclDistNbrDistance, usdDvmrpAclDistNbrAclListName=usdDvmrpAclDistNbrAclListName, usdDvmrpInterfaceAutoSummary=usdDvmrpInterfaceAutoSummary, usdDvmrpSummaryAddrCost=usdDvmrpSummaryAddrCost, usdDvmrpTraps=usdDvmrpTraps, usdDvmrpScalar=usdDvmrpScalar, usdDvmrpSrcGrpOifOIFDnTTL=usdDvmrpSrcGrpOifOIFDnTTL, usdDvmrpAclDistNbrStatus=usdDvmrpAclDistNbrStatus, usdDvmrpLocalAddrTable=usdDvmrpLocalAddrTable, usdDvmrpLocalAddrAddrOrIfIndex=usdDvmrpLocalAddrAddrOrIfIndex, usdDvmrpSummaryAddrAddress=usdDvmrpSummaryAddrAddress, usdDvmrpSummaryAddrStatus=usdDvmrpSummaryAddrStatus, usdDvmrpInterfaceMetricOffsetIn=usdDvmrpInterfaceMetricOffsetIn, usdDvmrpRouteHogNotification=usdDvmrpRouteHogNotification, usdDvmrpConformance=usdDvmrpConformance, usdDvmrpGroups=usdDvmrpGroups, usdDvmrpPruneIIFIfIndex=usdDvmrpPruneIIFIfIndex, usdDvmrpLocalAddrMask=usdDvmrpLocalAddrMask, usdDvmrpPruneEntry=usdDvmrpPruneEntry, usdDvmrpAclDistNbrIfIndex=usdDvmrpAclDistNbrIfIndex, usdDvmrpBaseGroup=usdDvmrpBaseGroup, usdDvmrpSrcGrpOifSourceMask=usdDvmrpSrcGrpOifSourceMask, usdDvmrpSummaryAddrTableEntry=usdDvmrpSummaryAddrTableEntry, usdDvmrp=usdDvmrp, usdDvmrpInterfaceTable=usdDvmrpInterfaceTable, usdDvmrpRouteLimit=usdDvmrpRouteLimit, usdDvmrpInterfaceEntry=usdDvmrpInterfaceEntry, usdDvmrpAclDistNbrNbrListName=usdDvmrpAclDistNbrNbrListName, usdDvmrpSummaryAddrIfIndex=usdDvmrpSummaryAddrIfIndex, usdDvmrpAclDistNbrEntry=usdDvmrpAclDistNbrEntry, usdDvmrpSrcGrpOifEntry=usdDvmrpSrcGrpOifEntry, usdDvmrpPruneTable=usdDvmrpPruneTable, usdDvmrpSrcGrpOifTable=usdDvmrpSrcGrpOifTable, usdDvmrpSrcGrpOifOIFIfIndex=usdDvmrpSrcGrpOifOIFIfIndex, usdDvmrpLocalAddrTableEntry=usdDvmrpLocalAddrTableEntry, usdDvmrpSrcGrpOifGroup=usdDvmrpSrcGrpOifGroup, usdDvmrpMIB=usdDvmrpMIB, usdDvmrpSrcGrpOifOIFPruned=usdDvmrpSrcGrpOifOIFPruned, usdDvmrpCompliances=usdDvmrpCompliances, usdDvmrpPruneSource=usdDvmrpPruneSource, usdDvmrpSrcGrpOifSource=usdDvmrpSrcGrpOifSource, usdDvmrpMIBObjects=usdDvmrpMIBObjects, usdDvmrpS32PrunesOnly=usdDvmrpS32PrunesOnly, usdDvmrpRouteHogNotificationTrap=usdDvmrpRouteHogNotificationTrap, usdDvmrpPruneGroup=usdDvmrpPruneGroup, usdDvmrpAclDistNbrTable=usdDvmrpAclDistNbrTable, usdDvmrpMcastAdminState=usdDvmrpMcastAdminState, PYSNMP_MODULE_ID=usdDvmrpMIB, usdDvmrpInterfaceAdminState=usdDvmrpInterfaceAdminState, usdDvmrpLocalAddrIfIndex=usdDvmrpLocalAddrIfIndex, usdDvmrpPruneSourceMask=usdDvmrpPruneSourceMask, usdDvmrpSummaryAddrTable=usdDvmrpSummaryAddrTable)
