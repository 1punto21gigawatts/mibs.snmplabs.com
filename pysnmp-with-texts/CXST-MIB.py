#
# PySNMP MIB module CXST-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXST-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:33:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
cxST, = mibBuilder.importSymbols("CXProduct-SMI", "cxST")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, IpAddress, Unsigned32, TimeTicks, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, NotificationType, ObjectIdentity, MibIdentifier, Bits, Gauge32, Integer32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "IpAddress", "Unsigned32", "TimeTicks", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "NotificationType", "ObjectIdentity", "MibIdentifier", "Bits", "Gauge32", "Integer32", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
stTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 60, 10), )
if mibBuilder.loadTexts: stTable.setStatus('mandatory')
if mibBuilder.loadTexts: stTable.setDescription('A table containing configuration parameters, controls, status and statistics for the S/T Interface Transceiver Driver.')
stEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 60, 10, 1), ).setIndexNames((0, "CXST-MIB", "stSlotNumberIndex"))
if mibBuilder.loadTexts: stEntry.setStatus('mandatory')
if mibBuilder.loadTexts: stEntry.setDescription('The entry index in the ISDN S/T Interface Transceiver Driver table.')
stSlotNumberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 60, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stSlotNumberIndex.setStatus('mandatory')
if mibBuilder.loadTexts: stSlotNumberIndex.setDescription('Indicates the physical slot number of the I/O card in the CX900/CX900 PRO. Range of Values: 1-6 for CX900, 1-8 for CX900 PRO Default Value: none')
stRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 60, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: stRowStatus.setDescription('Determines whether this entry is to be removed from service (i.e. invalidated) within the ST Driver. Options: invalid (1): row is flagged; after next reset values will be disabled and row will be deleted from table valid (2): values are enabled Default Value: valid Configuration Changed: administrative ')
stPS1Detection = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 60, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stPS1Detection.setStatus('mandatory')
if mibBuilder.loadTexts: stPS1Detection.setDescription('Indicates whether or not the driver has to wait for the detection of the Power Source 1 before generating an activation request at system power-up. Options: disabled (1): Power source 1 detection is not performed. enabled (2): Power source 1 detection is performed. Default Value: disabled (1)')
stTimer1 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 60, 10, 1, 11), Integer32().clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stTimer1.setStatus('mandatory')
if mibBuilder.loadTexts: stTimer1.setDescription('Indicates the maximum duration (in seconds) allocated for ISDN link synchronization at the NT interface as specified in the I.430 standard. Default Value: 15')
stTimer3 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 60, 10, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stTimer3.setStatus('mandatory')
if mibBuilder.loadTexts: stTimer3.setDescription('Indicates the maximum duration (in seconds) allocated for ISDN link synchronization at the TE interface as specified in the I.430 standard. Default Value: 10')
stTest = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 60, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("internal2B1D", 2), ("internal2B", 3), ("external", 4), ("stLpbk", 5), ("testSignal", 6))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stTest.setStatus('mandatory')
if mibBuilder.loadTexts: stTest.setDescription("Indicates if the driver needs to configure the S/T Interface in a test mode. Options: disabled (1): Test mode is disabled internal2B1D (2): The B1, B2 and D channel data received from the CPU are sent back unchanged. internal2B (3): The B1 and B2 channel data received from the CPU are sent back unchanged. external (4): An 'analog' loopback is performed if the transmit pair is shorted to the received pair. stLpbk (5): The B1 and B2 channel data received from the line interface are sent back unchanged. testSignal (6): The device transmits a 96 kHz square wave test signal on the line interface. Default Value: disabled (1)")
stPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 60, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("portDown", 1), ("portUp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: stPortStatus.setDescription('Indicates the status of the port on this I/O card. Options: portDown (1): port is down portUp (2): port is up Default Value: none')
stRxInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 60, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("info0", 1), ("info1", 2), ("info2", 3), ("info3", 4), ("info4", 5), ("infoX", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stRxInfoState.setStatus('mandatory')
if mibBuilder.loadTexts: stRxInfoState.setDescription('Indicates the signal that is received across the S/T reference point according to I.430 standard, table 4. Options: info0: INFO0 signal received from the TE or the NT info1: INFO1 signal received from the TE info2: INFO2 signal received from the NT info3: INFO3 signal received from the TE info4: INFO4 signal received from the NT infoX: INFOX signal received from the TE or the NT Default Value: none')
stTxInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 60, 10, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("info0", 1), ("info1", 2), ("info2", 3), ("info3", 4), ("info4", 5), ("infoX", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stTxInfoState.setStatus('mandatory')
if mibBuilder.loadTexts: stTxInfoState.setDescription('Indicates the signal that is transmitted across the S/T reference point according to I.430 standard, table 4. Options: info0: INFO0 signal transmitted to the TE or the NT info1: INFO1 signal transmitted to the NT info2: INFO2 signal transmitted to the TE info3: INFO3 signal transmitted to the NT info4: INFO4 signal transmitted to the TE infoX: INFOX signal transmitted to the TE or the NT Default Value: none')
stErrorIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 60, 10, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("errorDetected", 1), ("noError", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stErrorIndicator.setStatus('mandatory')
if mibBuilder.loadTexts: stErrorIndicator.setDescription('Indicates if an error condition has been detected by the activation state machine. Error conditions: - lost of framing element; - invalid info received. Options: errorDetected (1): an error condition has occurred. noError (2): no error condition has occurred. Default Value: none')
stFrameSync = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 60, 10, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noSync", 1), ("sync", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stFrameSync.setStatus('mandatory')
if mibBuilder.loadTexts: stFrameSync.setDescription('Indicates if the frame synchronization is achieved Options: noSync (1): frame synchronization is not achieved Sync (2): frame synchronization is achieved Default Value: none')
stPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 60, 10, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("te", 1), ("nt", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stPortMode.setStatus('mandatory')
if mibBuilder.loadTexts: stPortMode.setDescription('Indicates in which mode the ST port is functioning. Options: te (1): Terminal Endpoint, port is in user mode nt (2): Network Termination, port is in network mode. Default Value: none')
stActivation = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 60, 10, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stActivation.setStatus('mandatory')
if mibBuilder.loadTexts: stActivation.setDescription('Indicates the number of activation requests received by this I/O card. Range of Values: 0-4294967295 Default Value: none')
stDeactivation = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 60, 10, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stDeactivation.setStatus('mandatory')
if mibBuilder.loadTexts: stDeactivation.setDescription('Indicates the number of deactivation requests received by this I/O card. Range of Values: 0-4294967295 Default Value: none')
stTransition = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 60, 10, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stTransition.setStatus('mandatory')
if mibBuilder.loadTexts: stTransition.setDescription('Indicates the number of down-to-up or up-to-down transitions that have occurred on this I/O card. Range of Values: 0-4294967295 Default Value: none')
stNbErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 60, 10, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stNbErrors.setStatus('mandatory')
if mibBuilder.loadTexts: stNbErrors.setDescription('Indicates the number of times the transceiver has indicated that an error condition has been detected by the activation state machine as outlined in CCITT I.430, ETSI ETS 300012 and ANSI T1.605 standards. Range of Values: 0-4294967295 Default Value: none')
stFrameSyncLost = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 60, 10, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stFrameSyncLost.setStatus('mandatory')
if mibBuilder.loadTexts: stFrameSyncLost.setDescription("Indicates the number of times the transceiver has lost it's frame synchronization. Range of Values: 0-4294967295 Default Value: none")
stMissingAMIViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 60, 10, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stMissingAMIViolation.setStatus('mandatory')
if mibBuilder.loadTexts: stMissingAMIViolation.setDescription('Indicates the number of frames not containing the right number of AMI violations. Range of Values: 0-255 Default Value: none')
stUnbalancedFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 60, 10, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stUnbalancedFrame.setStatus('mandatory')
if mibBuilder.loadTexts: stUnbalancedFrame.setDescription('Indicates the number of unbalanced frames. Range of Values: 0-255 Default Value: none')
stClearStat = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 60, 10, 1, 60), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: stClearStat.setStatus('mandatory')
if mibBuilder.loadTexts: stClearStat.setDescription('Clears all S/T driver statistic counters for this I/O card. Options: clearStats : clears statistics Default value: none')
stPortCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 60, 10, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("portDown", 1), ("portUp", 2), ("portReset", 3), ("openBChannels", 4)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: stPortCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: stPortCtrl.setDescription('Either brings up/down the port on this I/O card or reset it. Options: portDown (1): bring port down portUp (2): bring port up portReset (3): port is reset and configuration is saved openBChannels (4): both B channels are opened (for test purpose only). Default Value: none')
mibBuilder.exportSymbols("CXST-MIB", stRxInfoState=stRxInfoState, stPortMode=stPortMode, stFrameSync=stFrameSync, stTimer1=stTimer1, stPS1Detection=stPS1Detection, stNbErrors=stNbErrors, stEntry=stEntry, stTable=stTable, stClearStat=stClearStat, stUnbalancedFrame=stUnbalancedFrame, stTxInfoState=stTxInfoState, stFrameSyncLost=stFrameSyncLost, stTest=stTest, stRowStatus=stRowStatus, stSlotNumberIndex=stSlotNumberIndex, stPortStatus=stPortStatus, stActivation=stActivation, stErrorIndicator=stErrorIndicator, stTransition=stTransition, stDeactivation=stDeactivation, stMissingAMIViolation=stMissingAMIViolation, stTimer3=stTimer3, stPortCtrl=stPortCtrl)
