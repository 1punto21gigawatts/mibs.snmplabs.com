#
# PySNMP MIB module CISCO-ZS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ZS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:54:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
FcGs3RejectReasonCode, = mibBuilder.importSymbols("CISCO-NS-MIB", "FcGs3RejectReasonCode")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
FcNameId, FcAddressId, DomainIdOrZero, VsanIndex = mibBuilder.importSymbols("CISCO-ST-TC", "FcNameId", "FcAddressId", "DomainIdOrZero", "VsanIndex")
vsanIndex, = mibBuilder.importSymbols("CISCO-VSAN-MIB", "vsanIndex")
ifIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndexOrZero")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, MibIdentifier, Bits, ObjectIdentity, Integer32, IpAddress, Unsigned32, NotificationType, Counter64, Gauge32, iso, TimeTicks, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "MibIdentifier", "Bits", "ObjectIdentity", "Integer32", "IpAddress", "Unsigned32", "NotificationType", "Counter64", "Gauge32", "iso", "TimeTicks", "ModuleIdentity")
TimeStamp, TextualConvention, TruthValue, RowStatus, TestAndIncr, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TextualConvention", "TruthValue", "RowStatus", "TestAndIncr", "DisplayString")
ciscoZsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 294))
ciscoZsMIB.setRevisions(('2005-11-10 00:00', '2005-04-07 00:00', '2004-09-01 00:00', '2004-01-27 00:00', '2003-12-12 00:00', '2003-08-25 00:00', '2003-08-01 00:00', '2003-03-26 00:00', '2003-01-17 00:00', '2002-11-08 00:00', '2002-10-28 00:00', '2002-10-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoZsMIB.setRevisionsDescriptions(("Added new enum 'ipAddrv6' to ZoneMemberType TC. Added description to the object zoneMemberID corresponding to this enum. Added zoneSetZoneListTable and zoneSetEnforcedZoneListTable to increase the number of zones that can be associated with a zoneset to 8192 from 2048. Changed the upper limit of zoneIndex and zoneMemberParentIndex objects to 8192 from 2048. Added zoneCompactTable and zoneCompactNotify. Added new enum 'deviceAlias' to ZoneMemberType TC. Deprecated zoneCopyActiveToFullOnVsan object. Added new objects zoneCopyActToFullSpinLock, zoneCopyActToFullMode and zoneCopyActToFullVsan. Enhanced zoneMergeFailure notification to include information regarding the details of merge failure.", 'Added zoneDbHardZoningEnabled to zoneDbTable. Added zoneSetClone, zoneClone and zoneAliasClone objects. Added zoneActivateNotify notification. Added zoneSwitchWwn object to be used in zoneActivateNotify notification.', 'Added objects zoneQos, zoneQosPriority, zoneBroadcast and zoneAttribObjIndex to zoneTable. Added objects zoneEnforcedZoneQos, zoneEnforcedZoneQosPriority and zoneEnforcedZoneBroadcast to zoneEnforcedZoneTable. Added zoneDefaultZoneQos, zoneDefaultZoneQosPriority and zoneDefaultZoneBroadcast to zoneDefaultZoneTable. Changed DESCRIPTION of zoneSetName and zoneAliasName objects to indicate that they support renaming.', 'Added zoneZoneSetDistributeVsan, zoneZoneSetDistributeResult and zoneZoneSetDistributeFailReason objects for supporting full zoneset distribution.', 'Added new notification zoneUnsuppMemInIntOpModeNotify and corresponding notification control object zoneUnsuppMemInIntOpNotifyEnable. Added object zoneVsanId to be used in the above notification.', 'Added zoneCopyTable. Added 2 new member types to ZoneMemberType TC - domainIntf and ipAddr.', 'Added zoneLunStatsTable and zoneRoZoneStatsTable. Changed the max size of zoneMemberID and zoneEnforcedMemberID to 255 from 256. Added zoneDefaultZoneReadOnly object to zoneDefaultZoneTable. Modified the DESCRIPTION of zoneName object in zoneTable so that it can be renamed. Added zoneAliasLastChange object to zoneAliasTable. Deprecated zoneEnforcedZoneAliasTable. Added 2 new member types (domainPort and intf) to ZoneMemberType TC.', 'Added TC FcChangeProtoFailCause and objects zoneSetFailCause and zoneSetFailDomId to the zoneSetActivateTable. Added objects zoneDbEnforcedEqualsLocal and zoneDbClearDb to new table zoneDbTable. Added zoneReadOnly object to zoneTable and zoneEnforcedZoneReadOnly object to zoneEnforcedZoneTable.', 'Added symNodeName, a new enumeration to the ZoneMemberType TC.', 'Added zoneCopyActiveToFullOnVsan object.', 'Added zoneSetPropagationTable.', 'Initial version of this MIB.',))
if mibBuilder.loadTexts: ciscoZsMIB.setLastUpdated('200511100000Z')
if mibBuilder.loadTexts: ciscoZsMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoZsMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553 -NETS E-mail: cs-san@cisco.com')
if mibBuilder.loadTexts: ciscoZsMIB.setDescription("The MIB module for the management of zoning within the framework of Cisco's Zoning Server (ZS) Archi- tecture which realizes the FC-GS3 requirements for Zone Server. This MIB enables managers to configure and monitor zoning server parameters. Additionally, Cisco's Zoning Server allows for configuration of Lun zoning, which is an extension to the Zoning Server standard specified by FC-GS3. Glossary of terms used ---------------------- VSAN - Virtual Storage Area Network. Zone Merge - When the ISL (Inter Switch Link) between 2 switches is brought up, the zoning databases on the 2 switches are compared by means of the Zone Merge protocol. If the 2 databases can be merged, the ISL is brought up. Otherwise, the link is isolated.")
ciscoZoningMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 294, 1))
zoneServerMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 294, 2))
zoneConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1))
zoneStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 2))
zoneInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 3))
zoneNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 4))
zoneNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 4, 0))
class ZoneMemberType(TextualConvention, Integer32):
    description = 'Represents the addressing mechanism by which a member is identified. wwn(1) - The Port World Wide Name (PWWN). domainPort(2) - Domain and Port number format. fcAddr(3) - FC-ID. fwwn(4) - Fabric Port World Wide Name. This is used for Port based zoning. symNodeName(5) - Symbolic Node Name used for iSCSI zoning. intf(6) - interface format. domainIntf(7) - Domain and Interface format. ipAddr(8) - IPv4 address format. ipAddrv6(9) - IPv6 address format. deviceAlias(10) - Device Alias. This is a human readable string used to alias a World Wide Name (WWN). It is defined in CISCO-FC-DEVICE-ALIAS-MIB.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("wwn", 1), ("domainPort", 2), ("fcAddr", 3), ("fwwn", 4), ("symNodeName", 5), ("intf", 6), ("domainIntf", 7), ("ipAddr", 8), ("ipAddrv6", 9), ("deviceAlias", 10))

class FcZoneServerRejReasonExpl(TextualConvention, Integer32):
    description = 'The reject reason code explanation for a zone server request. noAdditionalExplanation(1) - there is no additional explanation. zonesNotSupported(2) - zones are not supported. zoneSetNameUnknown(3) - zone set name is not known. noZoneSetActive(4) - no zone set is currently active. zoneNameUnknown(5) - zone name is unknown. zoneStateUnknown(6) - state of the zone is not known. incorrectPayloadLen(7) - payload len is not correct. tooLargeZoneSet(8) - zone set is larger than permitted size. deactivateZoneSetFailed(9) - deactivation of zone set failed. reqNotSupported(10) - request is not supported. capabilityNotSupported(11) - capability is not supported. zoneMemberIDTypeNotSupp(12)- type of zone member is not supported. invalidZoneSetDefinition(13) - zone set definition is invalid.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("noAdditionalExplanation", 1), ("zonesNotSupported", 2), ("zoneSetNameUnknown", 3), ("noZoneSetActive", 4), ("zoneNameUnknown", 5), ("zoneStateUnknown", 6), ("incorrectPayloadLen", 7), ("tooLargeZoneSet", 8), ("deactivateZoneSetFailed", 9), ("reqNotSupported", 10), ("capabilityNotSupported", 11), ("zoneMemberIDTypeNotSupp", 12), ("invalidZoneSetDefinition", 13))

class FcList(TextualConvention, OctetString):
    description = "Represents a list of entities. Each octet within the value of an object of this type, specifies a set of eight entities, with the first octet specifying entities 1 through 8, the second octet specifying entities 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered entity and the least significant bit represents the highest numbered entity. If the length of an object of this type is less than 256 bytes, then the entities which are not represented are not considered to be part of this list, i.e., effectively, the string is extended to be of length 256 bytes by appending bytes containing x'00'. Note that this means that the zero length string represents the 'list is empty' value."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 256)

class FcChangeProtoFailCause(TextualConvention, Integer32):
    description = "The reason for the failure of Change Protocol, which kicks in due to zone set activation/de-activation. none(1) - no error. rcvdSfcBusy(2) - the local Zone Server received a busy from one of the Zone Servers in the fabric in response to SFC. rcvdUfcBusy(3) - the local Zone Server received a busy from one of the Zone Servers in the fabric in response to UFC. acaRetryExceed(4) - the number of ACA retries by the local Zone Server has exceeded the retry count. sfcRetryExceed(5) - the number of SFC retries by the local Zone Server has exceeded the retry count. ufcRetryExceed(6) - the number of UFC retries by the local Zone Server has exceeded the retry count. unsuppCmd(7) - the local Zone Server has received response from one of the Zone Servers in the fabric that it does not support the particular command. notAuth(8) - the local Zone Server has received response from one of the Zone Servers in the fabric that the local Zone Server is not authorized to carry out the particular command. fabricChange(9) - the local Zone Server has received response from one of the Zone Servers that the fabric from it's viewpoint is changing. updateNotStaged(10) - the local Zone Server has received response from one of the Zone Servers in the fabric that it has received a UFC before an SFC. invalidZsetFormat(11) - the local Zone Server has received response from one of the Zone Servers in the fabric that the zone set format in the pdu sent to it is invalid. systemErr(12) - a system error has occured on the local Zone Server. vsanNotPresent(13) - the specified VSAN is not present on the local Zone Server. vsanInactive(14) - the specifed VSAN is not active on the local Zone Server. zsetNotPresent(15) - the specified zone set is not present on the local Zone Server. dbUpdateInProgress(16) - the local Zone Server's database is being updated. zsetNotActive(17) - the zone set specified for deactivation is not active on the local Zone Server. hwOperFailed(18) - the hardware update on the local Zone Server failed. fc2SeqSizeExceed(19) - the Change Protocol frame has exceeded the allowed maximum FC-2 sequence size on the local Zone Server. fc2SendFailed(20) - the FC-2 stack failed to send the frame on the local Zone Server. zsetUnchangedAndActive(21) - the zone set specified for activation is already active and unchanged since the last activation on the local Zone Server. fabricUnstable(22) - the fabric has become unstable as detected by the local Zone Server. nonInteropMember(23) - one or more of the members specified in the zone set(s) to be activated, are in non-interoperable format and the interop mode is turned on, on the local Zone Server. lcUpgradeInProgress(24) - line card upgrade is in progress on the local Zone Server."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))
    namedValues = NamedValues(("none", 1), ("rcvdSfcBusy", 2), ("rcvdUfcBusy", 3), ("acaRetryExceed", 4), ("sfcRetryExceed", 5), ("ufcRetryExceed", 6), ("unsuppCmd", 7), ("notAuth", 8), ("fabricChange", 9), ("updateNotStaged", 10), ("invalidZsetFormat", 11), ("systemErr", 12), ("vsanNotPresent", 13), ("vsanInactive", 14), ("zsetNotPresent", 15), ("dbUpdateInProgress", 16), ("zsetNotActive", 17), ("hwOperFailed", 18), ("fc2SeqSizeExceed", 19), ("fc2SendFailed", 20), ("zsetUnchangedAndActive", 21), ("fabricUnstable", 22), ("nonInteropMember", 23), ("lcUpgradeInProgress", 24))

class ZoneCopyProtocol(TextualConvention, Integer32):
    description = 'The protocol to be used for copying the active zoneset over the network. If the copy is to occur on the local device, then the method of transfer is left to the implementation and is not restricted to these protocols.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("tftp", 1), ("ftp", 2), ("sftp", 3), ("scp", 4))

class ZoneFileType(TextualConvention, Integer32):
    description = 'The various types of files onto which the active zoneset can be copied. networkFile(1) - the active zoneset needs to be copied over the network. localFile(2) - the active zoneset needs to be copied to a file on the local device.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("networkFile", 1), ("localFile", 2))

class ZoneQosPriorityLevel(TextualConvention, Integer32):
    description = 'Specifies the priority level for qos attribute applied to a zone. none - not applicable. low - indicates low priority. medium - indicates medium priority. high - indicates high priority.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("none", 1), ("low", 2), ("medium", 3), ("high", 4))

class ZoneMergeFailCause(TextualConvention, Integer32):
    description = 'Specifies the reason for zone merge failure. When the Zone Merge takes place, the local database is compared with the database of the adjacent switch. The following errors/mismatches can take place: other - reason other than those specified below. zoningModeMismatch - mismatch in zoning modes between the 2 switches. qosNotEnabled - qos is not enabled on one of the switches and qos attribute is present in one of the zones. qosConflict - conflict between VSAN based Qos and zone attribute qos. bcastNotEnabled - broadcast service has not been enabled on one of the switches and broadcast attribute is present in one of the zones. mergeCtrlMismatch - there is a mismatch in the merge control flag value. defZoneMismatch - there is a mismatch in the default zone policy. qosAttrMissing - qos attribute is missing. bcastAttrMissing - broadcast attribute is missing. rdonlyAttrMissing - read only attribute is missing. memberMismatch - there is a mismatch in the members. invPayloadFormat - the payload format is invalid. sizeExceeded - the payload exceeded the maximum size. unlicensedMember - a member is unlicensed. nonInteropZoneset - a zone attribute/member which cannot be supported in the current interop mode of the switch.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))
    namedValues = NamedValues(("other", 1), ("zoningModeMismatch", 2), ("qosNotEnabled", 3), ("qosConflict", 4), ("bcastNotEnabled", 5), ("mergeCtrlMismatch", 6), ("defZoneMismatch", 7), ("qosAttrMissing", 8), ("bcastAttrMissing", 9), ("rdonlyAttrMissing", 10), ("memberMismatch", 11), ("invPayloadFormat", 12), ("sizeExceeded", 13), ("unlicensedMember", 14), ("nonInteropZoneset", 15))

zoneDefaultZoneTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 1), )
if mibBuilder.loadTexts: zoneDefaultZoneTable.setStatus('current')
if mibBuilder.loadTexts: zoneDefaultZoneTable.setDescription('A table containing information on all default zones on all VSANs on the local Zone Server.')
zoneDefaultZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanIndex"))
if mibBuilder.loadTexts: zoneDefaultZoneEntry.setStatus('current')
if mibBuilder.loadTexts: zoneDefaultZoneEntry.setDescription('An entry (conceptual row) in this table.')
zoneDefaultZoneBehaviour = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('deny')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zoneDefaultZoneBehaviour.setStatus('current')
if mibBuilder.loadTexts: zoneDefaultZoneBehaviour.setDescription("This object controls the behaviour of the default zone on this VSAN. If this object is set to 'permit', then the members of the default zone on this VSAN can communicate with each other. If this object is set to 'deny', then the members of the default zone on this VSAN cannot communicate with each other.")
zoneDefaultZoneReadOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 1, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zoneDefaultZoneReadOnly.setStatus('current')
if mibBuilder.loadTexts: zoneDefaultZoneReadOnly.setDescription("This object indicates if only SCSI read operations are allowed on members of the default zone which are SCSI targets, on this VSAN. If this object is set to 'true', then only SCSI read operations are permitted. So, this default zone becomes a read-only default zone on this VSAN. If this object is set to 'false', then both SCSI read and write operations are permitted.")
zoneDefaultZoneQos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zoneDefaultZoneQos.setStatus('current')
if mibBuilder.loadTexts: zoneDefaultZoneQos.setDescription("This object specifies if qos attribute for the default zone on this VSAN is enabled. If this object is set to 'true', then qos attribute for the default zone on this VSAN is enabled. If this object is set to 'false', then qos attribute for the default zone on this VSAN is disabled. If this attribute is enabled for this default zone, then only traffic with the configured priority level will be allowed between the members of this default zone. The priority can be specified by means of the corresponding instance of zoneDefaultZoneQosPriority object.")
zoneDefaultZoneQosPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 1, 1, 4), ZoneQosPriorityLevel().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zoneDefaultZoneQosPriority.setStatus('current')
if mibBuilder.loadTexts: zoneDefaultZoneQosPriority.setDescription("Specifies the qos priority value. The value of this object is relevant only if the corresponding instance of zoneDefaultZoneQos object is enabled by setting it to 'true'.")
zoneDefaultZoneBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zoneDefaultZoneBroadcast.setStatus('current')
if mibBuilder.loadTexts: zoneDefaultZoneBroadcast.setDescription("This object specifies if broadcast zoning is enabled on this default zone on this VSAN. If this object is set to 'true', then it is enabled. If this object is set to 'false', then it is disabled. If broadcast zoning is enabled on this default zone, then broadcast frames generated by a member in this default zone will be restricted to members in this default zone.")
zoneSetPropagationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 2), )
if mibBuilder.loadTexts: zoneSetPropagationTable.setStatus('current')
if mibBuilder.loadTexts: zoneSetPropagationTable.setDescription('A table containing information related to propagation of zone set information during Merge/Change protocols on all VSANs on the local Zone Server.')
zoneSetPropagationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanIndex"))
if mibBuilder.loadTexts: zoneSetPropagationEntry.setStatus('current')
if mibBuilder.loadTexts: zoneSetPropagationEntry.setDescription('An entry (conceptual row) in this table.')
zoneSetPropagationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fullZoneSet", 1), ("activeZoneSet", 2))).clone('activeZoneSet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zoneSetPropagationMode.setStatus('current')
if mibBuilder.loadTexts: zoneSetPropagationMode.setDescription("This object controls the way zone set information is propagated during Merge/Change protocols on this VSAN. If this object is set to 'fullZoneSet', then the entire zone set database is sent during Change/Merge protocol exchanges on this VSAN. If this object is set to 'activeZoneSet', only the active zone set is sent during Change/Merge protocol exchanges on this VSAN.")
zoneSetNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8388608))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneSetNumber.setStatus('current')
if mibBuilder.loadTexts: zoneSetNumber.setDescription('The number of entries currently present in the zoneSetTable.')
zoneSetTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 4), )
if mibBuilder.loadTexts: zoneSetTable.setStatus('current')
if mibBuilder.loadTexts: zoneSetTable.setDescription('A table containing information on each Zone Set which is configured and available on any VSAN known to the local Zone Server. The zoneSetTable lists all the zone sets configured on all the VSANs configured on the local zone server. There could be multiple zone sets configured on a VSAN. But only one zone set is allowed to be active at a time in each VSAN. A Zone Set is a collection of zones.')
zoneSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 4, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanIndex"), (0, "CISCO-ZS-MIB", "zoneSetIndex"))
if mibBuilder.loadTexts: zoneSetEntry.setStatus('current')
if mibBuilder.loadTexts: zoneSetEntry.setDescription('An entry (conceptual row) in the zoneSetTable. The zone sets are defined with respect to a VSAN. Hence, this table is indexed by the vsanIndex, in addition to the zoneSetIndex. The sequence of operations to be performed in order to create a zone set is as follows: - create zone entries in the ZoneTable. - create an entry in this table and set the zoneSetZoneList bitmap object to contain the required zones. - Note that it is perfectly valid to create an empty zone set.')
zoneSetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048)))
if mibBuilder.loadTexts: zoneSetIndex.setStatus('current')
if mibBuilder.loadTexts: zoneSetIndex.setDescription('The index of a zone set. This object uniquely identifies a zone set on a particular VSAN.')
zoneSetName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 4, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zoneSetName.setStatus('current')
if mibBuilder.loadTexts: zoneSetName.setDescription("The name of this zone set. The zoneSetName should be unique within a VSAN. The zone set can be renamed by setting this object to a new value. This object MUST be set before or concurrently with setting the corresponding instance of zoneSetRowStatus to 'active'.")
zoneSetZoneList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 4, 1, 3), FcList().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zoneSetZoneList.setStatus('current')
if mibBuilder.loadTexts: zoneSetZoneList.setDescription("The set of zones which form this zone set on this VSAN. The zones are identified by zoneIndex object in the zoneTable. If a particular bit has a value of '1', then the corresponding zone is a part of this zone set. All other zones have '0' in their positions or not present in the string. The default value is the zero length string.")
zoneSetLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 4, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneSetLastChange.setStatus('current')
if mibBuilder.loadTexts: zoneSetLastChange.setDescription('The value of sysUpTime at the time of the last change to this zone set entry. If the entry has not been modified since the last re-initialization of the local network management system, then this object will contain a zero value.')
zoneSetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zoneSetRowStatus.setStatus('current')
if mibBuilder.loadTexts: zoneSetRowStatus.setDescription("The status of this conceptual row. This object can not be set to 'active' unless the corresponding value of zoneSetName is unique within the VSAN.")
zoneSetClone = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 4, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zoneSetClone.setStatus('current')
if mibBuilder.loadTexts: zoneSetClone.setDescription('Setting this object to a name will result in this zone set being cloned and the cloned zone set will be set to this name. When this object is read, the zero-length string is returned.')
zoneSetActivateTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 5), )
if mibBuilder.loadTexts: zoneSetActivateTable.setStatus('current')
if mibBuilder.loadTexts: zoneSetActivateTable.setDescription('This table contains atmost one entry for each VSAN that is configured. These entries reflect the state of the activation of a zone set on the corresponding VSAN. The management station needs to create an entry in this table on the desired VSAN before a zone set can be activated on that VSAN.')
zoneSetActivateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 5, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanIndex"))
if mibBuilder.loadTexts: zoneSetActivateEntry.setStatus('current')
if mibBuilder.loadTexts: zoneSetActivateEntry.setDescription('An entry (conceptual row) in this table.')
zoneSetActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zoneSetActivate.setStatus('current')
if mibBuilder.loadTexts: zoneSetActivate.setDescription('Setting this object to a value is a request for a zone set to be activated on the particular VSAN, i.e., for the current configuration of that zone set to be cloned with the clone becoming the active zone set for the particular VSAN. Setting this object to a value (say, N) identifies the zone set to be cloned as the zone set identified by zoneSetIndex object having the same value N. Even though there could be multiple zone sets on a VSAN, only one can be active at a time. If a zone set is already active on a VSAN and a second zone set is activated on the same VSAN, then the first zone set is automatically deactivated and the second zone set is activated. The value of this object when read is always 0.')
zoneSetActivateResult = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("activateSuccess", 1), ("activateFailure", 2), ("deactivateSuccess", 3), ("deactivateFailure", 4), ("inProgress", 5), ("newEntry", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneSetActivateResult.setStatus('current')
if mibBuilder.loadTexts: zoneSetActivateResult.setDescription("This object indicates the outcome of the most recent activation/deactivation. When the value of this object is 'inProgress', the values of the corresponding instances of zoneSetActivate, zoneSetDeActivate and zoneSetActivateRowStatus cannot be modified. The value 'newEntry' indicates that after the entry has been created, activation/de-activation has not yet been attempted on the entry.")
zoneSetDeActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deactivate", 1), ("noop", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zoneSetDeActivate.setStatus('current')
if mibBuilder.loadTexts: zoneSetDeActivate.setDescription("Setting this object to 'deactivate' is a request to deactivate the currently active zone set on this VSAN. No action is taken if this object is set to 'noop'. The value of this object when read is always 'noop'.")
zoneSetActivateRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zoneSetActivateRowStatus.setStatus('current')
if mibBuilder.loadTexts: zoneSetActivateRowStatus.setDescription('The status of this conceptual row.')
zoneSetFailCause = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 5, 1, 5), FcChangeProtoFailCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneSetFailCause.setStatus('current')
if mibBuilder.loadTexts: zoneSetFailCause.setDescription("The reason for the failure of the zone set activation/de-activation. The value of this object contains the reason for the failure only if the value of the corresponding instance of zoneSetActivateResult is either 'activateFailure' or 'deactivateFailure'.")
zoneSetFailDomId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 5, 1, 6), DomainIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneSetFailDomId.setStatus('current')
if mibBuilder.loadTexts: zoneSetFailDomId.setDescription('The domain id of the device in the fabric that has caused the Change Protocol to fail. This object will contain a valid domain id if the activation/deactivation has failed and the corresponding instance of zoneSetFailCause has a value between rcvdSfcBusy(2) and invalidZsetFormat(11). These errors are flagged by Zone Server modules running on other devices in the entire fabric as part of the Change Protocol. The remaining errors are those that are detected on the local Zone Server. In that case, this object will contain the value 0.')
zoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8388608))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneNumber.setStatus('current')
if mibBuilder.loadTexts: zoneNumber.setDescription('The number of entries currently present in the zoneTable.')
zoneTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 7), )
if mibBuilder.loadTexts: zoneTable.setStatus('current')
if mibBuilder.loadTexts: zoneTable.setDescription('This table gives information on all the zones/aliases and lists all their members.')
zoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 7, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanIndex"), (0, "CISCO-ZS-MIB", "zoneIndex"))
if mibBuilder.loadTexts: zoneEntry.setStatus('current')
if mibBuilder.loadTexts: zoneEntry.setDescription('An entry (conceptual row) in the zoneTable. The sequence of operations to be performed in order to create a zone is as follows: - create an entry in this table. - create zone members in the zoneMemberTable that belong to this zone. - if aliases need to be created, create an alias entry in the zoneAliasTable, create alias members in the zoneMemberTable and associate the alias with the required zone entry by setting the zoneAliasList object in this table appropriately.')
zoneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192)))
if mibBuilder.loadTexts: zoneIndex.setStatus('current')
if mibBuilder.loadTexts: zoneIndex.setDescription('The index of a zone on this VSAN.')
zoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 7, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zoneName.setStatus('current')
if mibBuilder.loadTexts: zoneName.setDescription("The name of this zone. The zoneName should be unique within a VSAN. The zone can be renamed by setting this object to a new value. This object MUST be set before or concurrently with setting the corresponding instance of zoneRowStatus to 'active'.")
zoneMemberList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 7, 1, 3), FcList().clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneMemberList.setStatus('current')
if mibBuilder.loadTexts: zoneMemberList.setDescription("The set of zone members that form this zone on this VSAN. The zone members are identified by zoneMemberIndex object in the zoneMemberTable. If a particular bit has a value of '1', then the corresponding zone member is a part of this zone. All other zone members have '0' in their positions or not present in the string. This object is read-only; changes to its value are made by the agent as and when associated entries are created/deleted in the zoneMemberTable. The default value is the zero length string.")
zoneAliasList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 7, 1, 4), FcList().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zoneAliasList.setStatus('current')
if mibBuilder.loadTexts: zoneAliasList.setDescription("The set of aliases that form this zone on this VSAN. The aliases are identified by the zoneAliasIndex object in the zoneAliasTable. If a particular bit has a value of '1', then the corresponding alias is a part of this zone. All other aliases have '0' in their positions or not present in the string. The default value is the zero length string.")
zoneLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 7, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneLastChange.setStatus('current')
if mibBuilder.loadTexts: zoneLastChange.setDescription('The value of sysUpTime at the time of the last change to this zone entry. If the entry has not been modified since the last re-initialization of the local network management system, then this object will contain a zero value.')
zoneRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 7, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zoneRowStatus.setStatus('current')
if mibBuilder.loadTexts: zoneRowStatus.setDescription("The status of this conceptual row. This object can not be set to 'active' unless the corresponding value of zoneName is unique within the VSAN.")
zoneReadOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 7, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zoneReadOnly.setStatus('current')
if mibBuilder.loadTexts: zoneReadOnly.setDescription("This object indicates if only SCSI read operations are allowed on the members of this zone which are SCSI targets. If the value of this object is set to 'true', then only SCSI read operations are permitted. So, this becomes a read-only zone. If the value of this object is set to 'false', then both SCSI read and write operations are permitted.")
zoneQos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 7, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zoneQos.setStatus('current')
if mibBuilder.loadTexts: zoneQos.setDescription("This object specifies if qos attribute for this zone is enabled. If this object is set to 'true', then qos attribute for this zone is enabled. If this object is set to 'false', then qos attribute for this zone is disabled. If this attribute is enabled for this zone, then only traffic with the configured priority level will be allowed between the members of this zone. The priority can be specified by means of the corresponding instance of zoneQosPriority object.")
zoneQosPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 7, 1, 9), ZoneQosPriorityLevel().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zoneQosPriority.setStatus('current')
if mibBuilder.loadTexts: zoneQosPriority.setDescription("Specifies the qos priority value. The value of this object is relevant only if the corresponding instance of zoneQos object is enabled by setting it to 'true'.")
zoneBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 7, 1, 10), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zoneBroadcast.setStatus('current')
if mibBuilder.loadTexts: zoneBroadcast.setDescription("This object specifies if broadcast zoning is enabled on this zone. If this object is set to 'true', then it is enabled. If this object is set to 'false', then it is disabled. If broadcast zoning is enabled on this zone, then broadcast frames generated by a member in this zone will be restricted to members in this zone.")
zoneClone = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 7, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zoneClone.setStatus('current')
if mibBuilder.loadTexts: zoneClone.setDescription('Setting this object to a name will result in this zone being cloned and the cloned zone will be set to this name. When this object is read, the zero-length string is returned.')
zoneAliasNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8388608))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneAliasNumber.setStatus('current')
if mibBuilder.loadTexts: zoneAliasNumber.setDescription('The number of entries currently present in the zoneAliasTable.')
zoneAliasTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 9), )
if mibBuilder.loadTexts: zoneAliasTable.setStatus('current')
if mibBuilder.loadTexts: zoneAliasTable.setDescription('This table gives information on all the aliases and their members.')
zoneAliasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 9, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanIndex"), (0, "CISCO-ZS-MIB", "zoneAliasIndex"))
if mibBuilder.loadTexts: zoneAliasEntry.setStatus('current')
if mibBuilder.loadTexts: zoneAliasEntry.setDescription('An entry (conceptual row) in this table.')
zoneAliasIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 9, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048)))
if mibBuilder.loadTexts: zoneAliasIndex.setStatus('current')
if mibBuilder.loadTexts: zoneAliasIndex.setDescription('The index of an alias entry on this VSAN.')
zoneAliasName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 9, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zoneAliasName.setStatus('current')
if mibBuilder.loadTexts: zoneAliasName.setDescription("The name of this alias. The name of the alias should be unique within a VSAN. The alias can be renamed by setting this object to a new value. This object MUST be set before or concurrently with setting the corresponding instance of zoneAliasRowStatus to 'active'.")
zoneAliasMemberList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 9, 1, 3), FcList().clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneAliasMemberList.setStatus('current')
if mibBuilder.loadTexts: zoneAliasMemberList.setDescription("The set of zone members which form this alias on this VSAN. The members of an alias are identified by the zoneMemberIndex object in the zoneMemberTable. If a particular bit has a value of '1', then the corresponding zone member is a part of this alias. All other zone members have '0' in their positions or not present in the string. This object is read-only; changes to its value are made by the agent as and when associated entries are created/deleted in the zoneMemberTable. The default value is the zero length string.")
zoneAliasRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 9, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zoneAliasRowStatus.setStatus('current')
if mibBuilder.loadTexts: zoneAliasRowStatus.setDescription("The status of this conceptual row. This object can not be set to 'active' unless the corresponding value of zoneAliasName is unique within the VSAN.")
zoneAliasLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 9, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneAliasLastChange.setStatus('current')
if mibBuilder.loadTexts: zoneAliasLastChange.setDescription('The value of sysUpTime at the time of the last change to this alias entry. If the entry has not been modified since the last re-initialization of the local network management system, then this object will contain a zero value.')
zoneAliasClone = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 9, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zoneAliasClone.setStatus('current')
if mibBuilder.loadTexts: zoneAliasClone.setDescription('Setting this object to a name will result in this alias being cloned and the cloned alias will be set to this name. When this object is read, the zero-length string is returned.')
zoneMemberNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777216))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneMemberNumber.setStatus('current')
if mibBuilder.loadTexts: zoneMemberNumber.setDescription('The number of entries currently present in the zoneMemberTable.')
zoneMemberTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 11), )
if mibBuilder.loadTexts: zoneMemberTable.setStatus('current')
if mibBuilder.loadTexts: zoneMemberTable.setDescription('This table contains all members of a zone/alias and information about those members.')
zoneMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 11, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanIndex"), (0, "CISCO-ZS-MIB", "zoneMemberTypeIndex"), (0, "CISCO-ZS-MIB", "zoneMemberParentIndex"), (0, "CISCO-ZS-MIB", "zoneMemberIndex"))
if mibBuilder.loadTexts: zoneMemberEntry.setStatus('current')
if mibBuilder.loadTexts: zoneMemberEntry.setDescription("An entry (conceptual row) in the zoneMemberTable. Each entry represents the relationship between a member and (one of) its 'parent(s)', i.e., a zone or alias to which the member belongs, within a particular VSAN.")
zoneMemberTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("zone", 1), ("alias", 2))))
if mibBuilder.loadTexts: zoneMemberTypeIndex.setStatus('current')
if mibBuilder.loadTexts: zoneMemberTypeIndex.setDescription('This object determines whether this member belongs to a zone or an alias.')
zoneMemberParentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192)))
if mibBuilder.loadTexts: zoneMemberParentIndex.setStatus('current')
if mibBuilder.loadTexts: zoneMemberParentIndex.setDescription("This object contains the value of the index of the zone or alias to which this member belongs to. If the value of the corresponding instance of zoneMemberTypeIndex is 'zone', then this object will contain the value of the zoneIndex object of the zone to which this member belongs to. If the value of the corresponding instance of zoneMemberTypeIndex is 'alias', then this object will contain the value of the zoneAliasIndex object of the alias to which this member belongs to.")
zoneMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048)))
if mibBuilder.loadTexts: zoneMemberIndex.setStatus('current')
if mibBuilder.loadTexts: zoneMemberIndex.setDescription('The index of this zone member on this VSAN on this zone/alias.')
zoneMemberFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 11, 1, 4), ZoneMemberType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zoneMemberFormat.setStatus('current')
if mibBuilder.loadTexts: zoneMemberFormat.setDescription("This object identifies the format of the zone/alias member's identifier contained in zoneMemberID. This object cannot be modified while the corresponding value of zoneMemberRowStatus object is 'active'.")
zoneMemberID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 11, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zoneMemberID.setStatus('current')
if mibBuilder.loadTexts: zoneMemberID.setDescription("This object represents the zone/alias member ID. The interpretation of this object depends on the zoneMemberFormat object. If the value of corresponding instance of zoneMemberFormat object is 'wwn', then this object holds an 8 octet long Port WWN. If the value of corresponding instance of zoneMemberFormat object is 'domainPort', then this object contains a 2 octet value. The first octet will represent the domain and the second octet will represent the port. If the value of the corresponding instance of zoneMemberFormat object is 'fcAddr', then this object contains the 3 octet N_Port FC-ID. If the value of the corresponding instance of zoneMemberFormat object is 'fwwn', then this object contains the 8 octet Fabric Port WWN. If the value of the corresponding instance of zoneMemberFormat object is 'symNodeName', then this object contains a symbolic node name which could be of length 1 to 255 bytes. If the value of corresponding instance of zoneMemberFormat object is 'intf', then this object will contain a 12 octet value which is a concatenation of 4 octets containing an interface index (ifIndex) encoded in network byte order, and 8 octets containing the WWN of a switch. If the value of corresponding instance of zoneMemberFormat object is 'domainIntf', then this object will contain a 5 octet value which is a concatenation of 1 octet representing the domain and 4 octets representing an interface index (ifIndex) encoded in network byte order. If the value of corresponding instance of zoneMemberFormat object is 'ipAddr', then this object will contain a 4 octet IP address value followed by an optional 4 octets of subnet mask. If the value of corresponding instance of zoneMemberFormat object is 'ipAddrv6', then this object will contain a 16 octet IPv6 address value followed by an optional 4 octets of prefix length encoded in network byte order. If the value of the corresponding instance of zoneMemberFormat object is 'deviceAlias', then this object contains a Device Alias which could be of length 1 to 64 bytes. This object cannot be modified while the corresponding value of zoneMemberRowStatus object is 'active'.")
zoneMemberLunID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 11, 1, 6), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(8, 8), )).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zoneMemberLunID.setStatus('current')
if mibBuilder.loadTexts: zoneMemberLunID.setDescription("This object specifies the Lun ID if Lun zoning is configured. If this object is the zero-length string, then Lun zoning is not configured. Lun zoning cannot be configured when the corresponding instance of zoneMemberFormat object has a value of 'fwwn', 'intf' or 'symNodeName'. This object cannot be modified while the corresponding value of zoneMemberRowStatus object is 'active'.")
zoneMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 11, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zoneMemberRowStatus.setStatus('current')
if mibBuilder.loadTexts: zoneMemberRowStatus.setDescription("The status of this conceptual row. zoneMemberID and zoneMemberFormat objects MUST be set before or concurrently with setting the corresponding instance of zoneMemberRowStatus to 'active'. If Lun zoning needs to be configured, then zoneMemberLunID object also needs to be set before or concurrently with setting the corresponding instance of zoneMemberRowStatus to 'active'.")
zoneEnforcedZoneSetNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneEnforcedZoneSetNumber.setStatus('current')
if mibBuilder.loadTexts: zoneEnforcedZoneSetNumber.setDescription('The number of entries currently present in the zoneEnforcedZoneSetTable.')
zoneEnforcedZoneSetTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 13), )
if mibBuilder.loadTexts: zoneEnforcedZoneSetTable.setStatus('current')
if mibBuilder.loadTexts: zoneEnforcedZoneSetTable.setDescription('A table containing information on all currently enforced zone sets (active zone sets) on all VSANs. Only one zone set can be activated per VSAN. The active zone set is one which is copied from the zone set database (zoneSetTable) at the time it was activated. This active zone set is then enforced on the fabric. This active zone set cannot be modified. Note that this table will be empty when no zone set is activated.')
zoneEnforcedZoneSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 13, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanIndex"))
if mibBuilder.loadTexts: zoneEnforcedZoneSetEntry.setStatus('current')
if mibBuilder.loadTexts: zoneEnforcedZoneSetEntry.setDescription('An entry (conceptual row) in the zoneEnforcedZoneSetTable.')
zoneEnforcedZoneSetName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 13, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneEnforcedZoneSetName.setStatus('current')
if mibBuilder.loadTexts: zoneEnforcedZoneSetName.setDescription('The name of this zone set on this VSAN.')
zoneEnforcedZoneSetZoneList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 13, 1, 2), FcList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneEnforcedZoneSetZoneList.setStatus('current')
if mibBuilder.loadTexts: zoneEnforcedZoneSetZoneList.setDescription('The set of zones which form this zone set on this VSAN. This object was copied from the zoneSetZoneList object in the zoneSetTable at the time when the currently active zone set was activated.')
zoneEnforcedZoneSetActivateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 13, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneEnforcedZoneSetActivateTime.setStatus('current')
if mibBuilder.loadTexts: zoneEnforcedZoneSetActivateTime.setDescription('The sysUpTime at which this entry was most recently activated. If this entry has been activated prior to the last re-initialization of the local network management system, then this object will contain a zero value.')
zoneEnforcedZoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8388608))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneEnforcedZoneNumber.setStatus('current')
if mibBuilder.loadTexts: zoneEnforcedZoneNumber.setDescription('The number of entries currently present in the zoneEnforcedZoneTable.')
zoneEnforcedZoneTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 15), )
if mibBuilder.loadTexts: zoneEnforcedZoneTable.setStatus('current')
if mibBuilder.loadTexts: zoneEnforcedZoneTable.setDescription('This table contains all the zones/aliases that are present in the active zone sets on all VSANs.')
zoneEnforcedZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 15, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanIndex"), (0, "CISCO-ZS-MIB", "zoneIndex"))
if mibBuilder.loadTexts: zoneEnforcedZoneEntry.setStatus('current')
if mibBuilder.loadTexts: zoneEnforcedZoneEntry.setDescription('An entry (conceptual row) in this table.')
zoneEnforcedZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 15, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneEnforcedZoneName.setStatus('current')
if mibBuilder.loadTexts: zoneEnforcedZoneName.setDescription('The name of this zone.')
zoneEnforcedZoneMemberList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 15, 1, 2), FcList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneEnforcedZoneMemberList.setStatus('current')
if mibBuilder.loadTexts: zoneEnforcedZoneMemberList.setDescription('The set of members that form this zone on this VSAN. This object was copied from the zoneMemberList object in the zoneTable at the time when the currently active zone set was activated.')
zoneEnforcedZoneAliasList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 15, 1, 3), FcList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneEnforcedZoneAliasList.setStatus('current')
if mibBuilder.loadTexts: zoneEnforcedZoneAliasList.setDescription('The set of aliases that form this zone on this VSAN. This object was copied from the zoneAliasList object in the zoneTable at the time when the currently active zone set was activated.')
zoneEnforcedZoneActivateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 15, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneEnforcedZoneActivateTime.setStatus('current')
if mibBuilder.loadTexts: zoneEnforcedZoneActivateTime.setDescription('The sysUpTime at which this entry was most recently activated. If this entry has been activated prior to the last re-initialization of the local network management system, then this object will contain a zero value.')
zoneEnforcedZoneReadOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 15, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneEnforcedZoneReadOnly.setStatus('current')
if mibBuilder.loadTexts: zoneEnforcedZoneReadOnly.setDescription('This object indicates whether this is a read-only zone. This object was copied from the zoneReadOnly object in the zoneTable at the time when the currently active zone set was activated.')
zoneEnforcedZoneQos = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 15, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneEnforcedZoneQos.setStatus('current')
if mibBuilder.loadTexts: zoneEnforcedZoneQos.setDescription('This object indicates whether this is a qos enabled zone. This object was copied from the zoneQos object in the zoneTable at the time when the currently active zone set was activated.')
zoneEnforcedZoneQosPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 15, 1, 7), ZoneQosPriorityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneEnforcedZoneQosPriority.setStatus('current')
if mibBuilder.loadTexts: zoneEnforcedZoneQosPriority.setDescription('This object indicates the priority of qos if it is a qos enabled zone. This object was copied from the zoneQosPriority object in the zoneTable at the time when the currently active zone set was activated.')
zoneEnforcedZoneBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 15, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneEnforcedZoneBroadcast.setStatus('current')
if mibBuilder.loadTexts: zoneEnforcedZoneBroadcast.setDescription('This object indicates whether broadcast zoning is enabled. This object was copied from the zoneBroadcast object in the zoneTable at the time when the currently active zone set was activated.')
zoneEnforcedZoneAliasNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8488608))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneEnforcedZoneAliasNumber.setStatus('deprecated')
if mibBuilder.loadTexts: zoneEnforcedZoneAliasNumber.setDescription('The number of entries currently present in the zoneEnforcedZoneAliasTable.')
zoneEnforcedZoneAliasTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 17), )
if mibBuilder.loadTexts: zoneEnforcedZoneAliasTable.setStatus('deprecated')
if mibBuilder.loadTexts: zoneEnforcedZoneAliasTable.setDescription('This table contains all the aliases that are a part of active zone sets on all VSANs.')
zoneEnforcedZoneAliasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 17, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanIndex"), (0, "CISCO-ZS-MIB", "zoneAliasIndex"))
if mibBuilder.loadTexts: zoneEnforcedZoneAliasEntry.setStatus('deprecated')
if mibBuilder.loadTexts: zoneEnforcedZoneAliasEntry.setDescription('An entry (conceptual row) in this table.')
zoneEnforcedZoneAliasName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 17, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneEnforcedZoneAliasName.setStatus('deprecated')
if mibBuilder.loadTexts: zoneEnforcedZoneAliasName.setDescription('The name of this alias.')
zoneEnforcedZoneAliasMemberList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 17, 1, 2), FcList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneEnforcedZoneAliasMemberList.setStatus('deprecated')
if mibBuilder.loadTexts: zoneEnforcedZoneAliasMemberList.setDescription('The set of members that form this alias on this VSAN. This object was copied from the zoneAliasMemberList object in the zoneAliasTable at the time when the currently active zone set was activated.')
zoneEnforcedZoneMemberNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777216))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneEnforcedZoneMemberNumber.setStatus('current')
if mibBuilder.loadTexts: zoneEnforcedZoneMemberNumber.setDescription('The number of entries currently present in the zoneEnforcedZoneMemberTable.')
zoneEnforcedZoneMemberTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 19), )
if mibBuilder.loadTexts: zoneEnforcedZoneMemberTable.setStatus('current')
if mibBuilder.loadTexts: zoneEnforcedZoneMemberTable.setDescription('This table contains all members that are part of a zone/alias and are part of the active zone sets on all VSANs.')
zoneEnforcedZoneMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 19, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanIndex"), (0, "CISCO-ZS-MIB", "zoneMemberTypeIndex"), (0, "CISCO-ZS-MIB", "zoneMemberParentIndex"), (0, "CISCO-ZS-MIB", "zoneMemberIndex"))
if mibBuilder.loadTexts: zoneEnforcedZoneMemberEntry.setStatus('current')
if mibBuilder.loadTexts: zoneEnforcedZoneMemberEntry.setDescription('An entry (conceptual row) in this table.')
zoneEnforcedZoneMemberFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 19, 1, 1), ZoneMemberType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneEnforcedZoneMemberFormat.setStatus('current')
if mibBuilder.loadTexts: zoneEnforcedZoneMemberFormat.setDescription('This object identifies the address format of this member. The address is contained in the corresponding instance of zoneEnforcedZoneMemberID object.')
zoneEnforcedZoneMemberID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 19, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneEnforcedZoneMemberID.setStatus('current')
if mibBuilder.loadTexts: zoneEnforcedZoneMemberID.setDescription("This object represents this member's address. This object was copied from the zoneMemberID object in the zoneMemberTable at the time when the currently active zone set was activated.")
zoneEnforcedZoneMemberLunID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 19, 1, 3), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(8, 8), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneEnforcedZoneMemberLunID.setStatus('current')
if mibBuilder.loadTexts: zoneEnforcedZoneMemberLunID.setDescription('This object specifies the Lun ID if LUN zoning is configured. This object was copied from the zoneMemberLunID object in the zoneMemberTable at the time when the currently active zone set was activated.')
zoneMergeFailRecoverSpinLock = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 20), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zoneMergeFailRecoverSpinLock.setStatus('current')
if mibBuilder.loadTexts: zoneMergeFailRecoverSpinLock.setDescription("This object is used to facilitate modification of zoneMergeFailRecoverInterface, zoneMergeFailRecoverVsan and zoneMergeFailRecoverOper by multiple managers. The procedure for modifying these objects is as follows: 1. Determine new values for zoneMergeFailRecoverInterface, zoneMergeFail- RecoverVsan and zoneMergeFailRecoverOper. 2. Retrieve the value of zoneMergeFailRecoverSpinLock. 3. Set the value of zoneMergeFailRecoverSpinLock to the retrieved value, and (in the same PDU) the value of zoneMergeFailRecoverInterface to the new value. If the set fails for zoneMergeFailRecoverSpinLock object, go back to step 2. 4. Set the value of zoneMergeFailRecoverSpinLock to the retrieved value plus one, and (in the same PDU) the value of zoneMergeFailRecoverVsan to the new value. If the set fails for zoneMergeFailRecoverSpinLock object, go back to step 2. 5. Set the value of zoneMergeFailRecoverSpinLock to the retrieved value plus two, and (in the same PDU) the value of zoneMergeFailRecoverOper to the new value. If the set fails for zoneMergeFailRecoverSpinLock object, go back to step 2. Note that if it's possible to include zoneMergeFailRecoverVsan and/or zoneMergeFailRecoverOper in the (Set Req) PDU of an earlier step, then steps 4 and/or 5 can be eliminated.")
zoneMergeFailRecoverInterface = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 21), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zoneMergeFailRecoverInterface.setStatus('current')
if mibBuilder.loadTexts: zoneMergeFailRecoverInterface.setDescription('The interface on which the Merge Failure Recovery needs to be carried out. The value of this object before the first set operation will be zero.')
zoneMergeFailRecoverVsan = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 22), VsanIndex().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zoneMergeFailRecoverVsan.setStatus('current')
if mibBuilder.loadTexts: zoneMergeFailRecoverVsan.setDescription('The VSAN on which the Merge Failure Recovery needs to be carried out.')
zoneMergeFailRecoverOper = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("import", 1), ("export", 2), ("noop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zoneMergeFailRecoverOper.setStatus('current')
if mibBuilder.loadTexts: zoneMergeFailRecoverOper.setDescription("The operation to be carried out. If this object is set to 'import', then the Active Zone Set from across the isolated link is imported. If this object is set to 'export', then the Active Zone Set on the local system is exported across the isolated link. No action is taken if this object is set to 'noop'. The value of this object when read is always 'noop'.")
zoneMergeFailRecoverResult = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("success", 1), ("failure", 2), ("inProgress", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneMergeFailRecoverResult.setStatus('current')
if mibBuilder.loadTexts: zoneMergeFailRecoverResult.setDescription("The result of the last Merge Failure Recovery operation that was attempted. If the value of this object is 'success', then the merge fail recovery operation was successful. If the value of this object is 'failure', then the merge fail recovery operation failed. If the value of this object is 'inProgress', then the merge fail recovery operation is still in progress.")
zoneCopyActiveToFullOnVsan = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 25), VsanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zoneCopyActiveToFullOnVsan.setStatus('deprecated')
if mibBuilder.loadTexts: zoneCopyActiveToFullOnVsan.setDescription('The VSAN on which the enforced zone set (active zone set) needs to be copied to the zone set database (full zone set). Setting this object to a valid VSAN will trigger a copy of the enforced zone set on that VSAN to the zone set database on the same VSAN. Setting this object to an invalid VSAN-id will result in an error and no copy will take place.')
zoneTotalGS3Rejects = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneTotalGS3Rejects.setStatus('current')
if mibBuilder.loadTexts: zoneTotalGS3Rejects.setDescription('The total number of GS3 requests rejected by this Zone Server across all VSANs.')
zoneStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 2, 2), )
if mibBuilder.loadTexts: zoneStatsTable.setStatus('current')
if mibBuilder.loadTexts: zoneStatsTable.setDescription('This table contains statistic counters which are maintained by the Zone Server. These counters are maintained per VSAN.')
zoneStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanIndex"))
if mibBuilder.loadTexts: zoneStatsEntry.setStatus('current')
if mibBuilder.loadTexts: zoneStatsEntry.setDescription('An entry (conceptual row) in this table.')
zoneTxMergeReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 2, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneTxMergeReqs.setStatus('current')
if mibBuilder.loadTexts: zoneTxMergeReqs.setDescription('The number of Merge Request Frames sent by this Zone Server to other Zone Servers in the fabric on this VSAN.')
zoneRxMergeAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneRxMergeAccepts.setStatus('current')
if mibBuilder.loadTexts: zoneRxMergeAccepts.setDescription('The number of Merge Accept Frames received by this Zone Server from other Zone Servers in the fabric on this VSAN.')
zoneRxMergeReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneRxMergeReqs.setStatus('current')
if mibBuilder.loadTexts: zoneRxMergeReqs.setDescription('The number of Merge Request Frames received by this Zone Server from other Zone Servers in the fabric on this VSAN.')
zoneTxMergeAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneTxMergeAccepts.setStatus('current')
if mibBuilder.loadTexts: zoneTxMergeAccepts.setDescription('The number of Merge Accept Frames sent by this Zone Server to other Zone Servers in the fabric on this VSAN.')
zoneTxChangeReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneTxChangeReqs.setStatus('current')
if mibBuilder.loadTexts: zoneTxChangeReqs.setDescription('The number of Change Requests sent by this Zone Server to other Zone Servers in the fabric on this VSAN. This includes Acquire Change Authorization requests, Stage Fabric Config Update requests, Update Fabric Config requests and Release Change Authorization requests.')
zoneRxChangeAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneRxChangeAccepts.setStatus('current')
if mibBuilder.loadTexts: zoneRxChangeAccepts.setDescription('The number of Change Responses received by this Zone Server from other Zone Servers in the fabric on this VSAN. This includes Acquire Change Authorization Accept, Stage Fabric Config Update Accept, Update Fabric Config Accept and Release Change Authorization Accept frames.')
zoneRxChangeReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneRxChangeReqs.setStatus('current')
if mibBuilder.loadTexts: zoneRxChangeReqs.setDescription('The number of Change Requests received by this Zone Server from other Zone Servers in the fabric on this VSAN. This includes Acquire Change Authorization requests, Stage Fabric Config Update requests, Update Fabric Config requests and Release Change Authorization requests.')
zoneTxChangeAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneTxChangeAccepts.setStatus('current')
if mibBuilder.loadTexts: zoneTxChangeAccepts.setDescription('The number of Change Responses sent by this Zone Server to other Zone Servers in the fabric on this VSAN. This includes Acquire Change Authorization Accept, Stage Fabric Config Update Accept, Update Fabric Config Accept and Release Change Authorization Accept frames.')
zoneRxGS3Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneRxGS3Reqs.setStatus('current')
if mibBuilder.loadTexts: zoneRxGS3Reqs.setDescription('The number of GS3 requests received by this Zone Server on this VSAN.')
zoneTxGS3Rejects = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneTxGS3Rejects.setStatus('current')
if mibBuilder.loadTexts: zoneTxGS3Rejects.setDescription('The number of GS3 requests rejected by this Zone Server on this VSAN.')
zoneLunStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 2, 3), )
if mibBuilder.loadTexts: zoneLunStatsTable.setStatus('current')
if mibBuilder.loadTexts: zoneLunStatsTable.setDescription("This table contains statistic counters related to LUNs. These counters are populated by the local Zone Server based on SCSI frames that are forwarded to it because the LUNs being accessed have been zoned out from a initiator's list of accessible LUNs. These counters are maintained per VSAN, per SCSI initiator-target pair, per LUN.")
zoneLunStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 2, 3, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanIndex"), (0, "CISCO-ZS-MIB", "zoneLunSrcFcId"), (0, "CISCO-ZS-MIB", "zoneLunDstFcId"), (0, "CISCO-ZS-MIB", "zoneLunNum"))
if mibBuilder.loadTexts: zoneLunStatsEntry.setStatus('current')
if mibBuilder.loadTexts: zoneLunStatsEntry.setDescription("Each entry provides SCSI statistics, at the local Zone Server, for the host identified by zoneLunSrcFcId trying to access the LUN identified by zoneLunNum, that has been zoned out from zoneLunSrcFcId's list of accessible LUNs, on the disk identified by zoneLunDstFcId on the VSAN identified by vsanIndex.")
zoneLunSrcFcId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 2, 3, 1, 1), FcAddressId())
if mibBuilder.loadTexts: zoneLunSrcFcId.setStatus('current')
if mibBuilder.loadTexts: zoneLunSrcFcId.setDescription('The FC-ID of a SCSI initiator that is accessing a LUN identified by zoneLunNum.')
zoneLunDstFcId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 2, 3, 1, 2), FcAddressId())
if mibBuilder.loadTexts: zoneLunDstFcId.setStatus('current')
if mibBuilder.loadTexts: zoneLunDstFcId.setDescription('The FC-ID of a SCSI target containing the LUN identified by zoneLunNum.')
zoneLunNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 2, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8))
if mibBuilder.loadTexts: zoneLunNum.setStatus('current')
if mibBuilder.loadTexts: zoneLunNum.setDescription('The LUN that is being accessed.')
zoneLunRxInqReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneLunRxInqReqs.setReference('Section 7.4 INQUIRY command. SCSI Primary Commands- 3 (SPC-3)')
if mibBuilder.loadTexts: zoneLunRxInqReqs.setStatus('current')
if mibBuilder.loadTexts: zoneLunRxInqReqs.setDescription('The number of SCSI INQUIRY commands that have been received by the local Zone Server from the SCSI initiator zoneLunSrcFcId to the SCSI target zoneLunDstFcId for the LUN zoneLunNum, on the VSAN vsanIndex.')
zoneLunRxRepLunReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneLunRxRepLunReqs.setReference('Section 7.22 REPORT LUNS command. SCSI Primary Commands- 3 (SPC-3)')
if mibBuilder.loadTexts: zoneLunRxRepLunReqs.setStatus('current')
if mibBuilder.loadTexts: zoneLunRxRepLunReqs.setDescription('The number of SCSI Report LUNs commands that have been received by the local Zone Server from the SCSI initiator zoneLunSrcFcId to the SCSI target zoneLunDstFcId for the LUN zoneLunNum, on the VSAN vsanIndex. Typically the Report LUNs command is sent only for LUN 0.')
zoneLunRxSenseReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneLunRxSenseReqs.setReference('Section 7.25 REQUEST SENSE command. SCSI Primary Commands- 3 (SPC-3)')
if mibBuilder.loadTexts: zoneLunRxSenseReqs.setStatus('current')
if mibBuilder.loadTexts: zoneLunRxSenseReqs.setDescription('The number of SCSI SENSE commands that have been received by the local Zone Server from the SCSI initiator zoneLunSrcFcId to the SCSI target zoneLunDstFcId for the LUN zoneLunNum, on the VSAN vsanIndex.')
zoneLunRxOtherCmds = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneLunRxOtherCmds.setStatus('current')
if mibBuilder.loadTexts: zoneLunRxOtherCmds.setDescription('The number of SCSI Read, Write, Seek etc. commands received by the local Zone Server from the SCSI initiator zoneLunSrcFcId to the SCSI target zoneLunDstFcId for the LUN zoneLunNum, on the VSAN vsanIndex, during changes to the zoning configuration.')
zoneLunTxInqDataNoLus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneLunTxInqDataNoLus.setReference('Section 5.9.3 Incorrect Logical Unit Selection SCSI Architectural Model- 2 (SAM-2)')
if mibBuilder.loadTexts: zoneLunTxInqDataNoLus.setStatus('current')
if mibBuilder.loadTexts: zoneLunTxInqDataNoLus.setDescription("The number of 'No LU' error responses sent by the local Zone Server in response to SCSI INQUIRY commands from the SCSI initiator zoneLunSrcFcId to the SCSI target zoneLunDstFcId for the LUN zoneLunNum, on the VSAN vsanIndex.")
zoneLunTxIllegalReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneLunTxIllegalReqs.setReference('Section 5.9.3 Incorrect Logical Unit Selection SCSI Architectural Model- 2 (SAM-2)')
if mibBuilder.loadTexts: zoneLunTxIllegalReqs.setStatus('current')
if mibBuilder.loadTexts: zoneLunTxIllegalReqs.setDescription("The number of 'Illegal Request Check Condition' responses sent by the local Zone Server in response to SCSI commands from the SCSI initiator zoneLunSrcFcId to the SCSI target zoneLunDstFcId for the LUN zoneLunNum, on the VSAN vsanIndex.")
zoneRoZoneStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 2, 4), )
if mibBuilder.loadTexts: zoneRoZoneStatsTable.setStatus('current')
if mibBuilder.loadTexts: zoneRoZoneStatsTable.setDescription('This table contains statistic counter(s) related to read-only zones which are maintained by the Zone Server. These counters are maintained per VSAN, per SCSI initiator target pair, per LUN.')
zoneRoZoneStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 2, 4, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanIndex"), (0, "CISCO-ZS-MIB", "zoneRoZoneSrcFcId"), (0, "CISCO-ZS-MIB", "zoneRoZoneDstFcId"), (0, "CISCO-ZS-MIB", "zoneRoZoneLunNum"))
if mibBuilder.loadTexts: zoneRoZoneStatsEntry.setStatus('current')
if mibBuilder.loadTexts: zoneRoZoneStatsEntry.setDescription('Each entry provides statistics for the host identified by zoneRoZoneSrcFcId accessing the LUN identified by zoneRoZoneLunNum on the disk identified by zoneRoZoneDstFcId on the VSAN identified by vsanIndex.')
zoneRoZoneSrcFcId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 2, 4, 1, 1), FcAddressId())
if mibBuilder.loadTexts: zoneRoZoneSrcFcId.setStatus('current')
if mibBuilder.loadTexts: zoneRoZoneSrcFcId.setDescription('The FC-ID of a SCSI initiator that is accessing a LUN identified by zoneRoZoneLunNum.')
zoneRoZoneDstFcId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 2, 4, 1, 2), FcAddressId())
if mibBuilder.loadTexts: zoneRoZoneDstFcId.setStatus('current')
if mibBuilder.loadTexts: zoneRoZoneDstFcId.setDescription('The FC-ID of a SCSI target containing the LUN identified by zoneRoZoneLunNum.')
zoneRoZoneLunNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 2, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8))
if mibBuilder.loadTexts: zoneRoZoneLunNum.setStatus('current')
if mibBuilder.loadTexts: zoneRoZoneLunNum.setDescription('The LUN that is being accessed.')
zoneRoZoneTxDataProts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneRoZoneTxDataProts.setReference('Section 5.1.13 Error Reporting, SCSI-3 Block Commands (SBC)')
if mibBuilder.loadTexts: zoneRoZoneTxDataProts.setStatus('current')
if mibBuilder.loadTexts: zoneRoZoneTxDataProts.setDescription("The number of 'Data protected Check Condition' error responses sent by the local Zone Server, when the SCSI initiator identified by zoneRoZoneSrcFcId tries to modify a LUN identified by zoneRoZoneLunNum on the SCSI target zoneRoZoneDstFcId.")
zoneServiceRejReasonCode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 3, 1), FcGs3RejectReasonCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneServiceRejReasonCode.setStatus('current')
if mibBuilder.loadTexts: zoneServiceRejReasonCode.setDescription('This object contains the reason code corresponding to the latest Zone Server request rejection.')
zoneServiceRejReasonCodeExp = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 3, 2), FcZoneServerRejReasonExpl()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneServiceRejReasonCodeExp.setStatus('current')
if mibBuilder.loadTexts: zoneServiceRejReasonCodeExp.setDescription("This object contains the reason code explanation if the reason code is 'Unable to perform command req'. This object also corresponds to the latest Zone Server request rejection.")
zoneMergeFailureVSANNum = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 3, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneMergeFailureVSANNum.setStatus('current')
if mibBuilder.loadTexts: zoneMergeFailureVSANNum.setDescription('This object contains the number of the VSAN on an interface on which the last zone merge failed. If the zone merge has failed on all VSANs, then this object will contain the value of 0.')
zoneMergeSuccessVSANNum = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 3, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneMergeSuccessVSANNum.setStatus('current')
if mibBuilder.loadTexts: zoneMergeSuccessVSANNum.setDescription('This object contains the number of the VSAN on an interface on which the last zone merge succeeded. If the zone merge has succeeded on all VSANs, then this object will contain the value of 0.')
zoneMergeFailureObject = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 3, 5), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: zoneMergeFailureObject.setStatus('current')
if mibBuilder.loadTexts: zoneMergeFailureObject.setDescription('This object contains the name of the zoning database object which was the cause of the merge failure. In cases where it is not applicable, this object will contain the null string.')
zoneMergeFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 3, 6), ZoneMergeFailCause()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: zoneMergeFailureReason.setStatus('current')
if mibBuilder.loadTexts: zoneMergeFailureReason.setDescription('This object contains the reason for the the merge failure.')
zoneServiceReqRejNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 26), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zoneServiceReqRejNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: zoneServiceReqRejNotifyEnable.setDescription("This object specifies if the Zone Server should issue a 'zoneServiceReqRejNotify' notification. If the value of this object is 'true', then the notification is issued. If the value of this object is 'false', then the notification is not issued.")
zoneMergeFailureNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 27), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zoneMergeFailureNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: zoneMergeFailureNotifyEnable.setDescription("This object specifies if the zone server should issue a zoneMergeFailureNotify notification. If the value of this object is 'true', then the notification is issued. If the value of this object is 'false', then the notification is not issued.")
zoneMergeSuccessNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 28), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zoneMergeSuccessNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: zoneMergeSuccessNotifyEnable.setDescription("This object specifies if the zone server should issue a zoneMergeSuccessNotify notification. If the value of this object is 'true', then the notification is issued. If the value of this object is 'false', then the notification is not issued.")
zoneDefZoneBehvrChngNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 29), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zoneDefZoneBehvrChngNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: zoneDefZoneBehvrChngNotifyEnable.setDescription("This object specifies if the zone server should issue a zoneDefZoneBehaviourChngNotify notification. If the value of this object is 'true', then the notification is issued. If the value of this object is 'false', then the notification is not issued.")
zoneDbTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 30), )
if mibBuilder.loadTexts: zoneDbTable.setStatus('current')
if mibBuilder.loadTexts: zoneDbTable.setDescription('This table contains one entry for each VSAN that is configured. These entries provide the capability to perform operations on the local zone server database on a VSAN.')
zoneDbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 30, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanIndex"))
if mibBuilder.loadTexts: zoneDbEntry.setStatus('current')
if mibBuilder.loadTexts: zoneDbEntry.setDescription('An entry (conceptual row) in this table.')
zoneDbClearDb = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 30, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zoneDbClearDb.setStatus('current')
if mibBuilder.loadTexts: zoneDbClearDb.setDescription("Setting this object to 'clear(1)', will result in the local zone server database being deleted on this VSAN. Setting this object to 'noop(2)', results in no action. When read, the value of this object is always 'noop(2)'.")
zoneDbEnforcedEqualsLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 30, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneDbEnforcedEqualsLocal.setStatus('current')
if mibBuilder.loadTexts: zoneDbEnforcedEqualsLocal.setDescription("This object indicates if the enforced database is the same as the local database on this VSAN. If the value of this object is 'true', then they are the same. If the value of this object is 'false', then they are not the same.")
zoneDbHardZoningEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 30, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneDbHardZoningEnabled.setStatus('current')
if mibBuilder.loadTexts: zoneDbHardZoningEnabled.setDescription("This object indicates if hard zoning is enabled on this VSAN. Hard Zoning is a mechanism by which zoning is enforced in hardware. If the value of this object is 'true', then hard zoning is enabled on this VSAN. If the value of this object is 'false', then hard zoning is not enabled on this VSAN.")
zoneCopyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 31), )
if mibBuilder.loadTexts: zoneCopyTable.setStatus('current')
if mibBuilder.loadTexts: zoneCopyTable.setDescription('In this table, for each VSAN that is configured, atmost one entry can be created. These entries provide the capability to copy the active zone set on a VSAN to a file on the local device and/or to a remote device over the network. At any point of time, only one copy operation can be active for all the VSANs. If a second copy is attempted, it will result in error.')
zoneCopyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 31, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanIndex"))
if mibBuilder.loadTexts: zoneCopyEntry.setStatus('current')
if mibBuilder.loadTexts: zoneCopyEntry.setDescription('An entry (conceptual row) in this table.')
zoneCopyProto = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 31, 1, 1), ZoneCopyProtocol().clone('tftp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zoneCopyProto.setStatus('current')
if mibBuilder.loadTexts: zoneCopyProto.setDescription('The protocol to be used for the copy of the active zone set on this VSAN. If the copy needs to take place on the local device, then the value of this object will be ignored.')
zoneCopyDestFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 31, 1, 2), ZoneFileType().clone('localFile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zoneCopyDestFileType.setStatus('current')
if mibBuilder.loadTexts: zoneCopyDestFileType.setDescription("The type of file to which the active zoneset needs to be copied. If the value of this object is set to 'networkFile(1)', then values must be set for the corresponding instances of zoneCopyServerAddr and zoneCopyDestFileName objects. If the value of this object is set to 'localFile(2)', then the corresponding instance of zoneCopyDestFileName must be set.")
zoneCopyServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 31, 1, 3), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zoneCopyServerAddrType.setStatus('current')
if mibBuilder.loadTexts: zoneCopyServerAddrType.setDescription('The type of address of the remote device as specified by the corresponding instance of zoneCopyServerAddr object.')
zoneCopyServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 31, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zoneCopyServerAddr.setStatus('current')
if mibBuilder.loadTexts: zoneCopyServerAddr.setDescription("The ip address of the remote device to which the active zoneset on this VSAN needs to be copied. This object must be set to a valid value when the corresponding instance of zoneCopyDestFileType is set to 'networkFile' before the copy can be initiated by means of the zoneCopyStartCopy object. The protocol to be used for the copy operation is specified by the value of the corresponding instance of zoneCopyProto object.")
zoneCopyDestFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 31, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zoneCopyDestFileName.setStatus('current')
if mibBuilder.loadTexts: zoneCopyDestFileName.setDescription('The file-name, including the full path, of the file to which the active zoneset on this VSAN needs to be copied. This object must be set to a valid value before the copy can be initiated by means of the zoneCopyStartCopy object.')
zoneCopyUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 31, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zoneCopyUserName.setStatus('current')
if mibBuilder.loadTexts: zoneCopyUserName.setDescription("The user name on the remote device onto which the active zoneset on this VSAN needs to be copied. This object needs to be set only if the value of the corresponding instance of zoneCopyDestFileType object is 'networkFile'.")
zoneCopyUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 31, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zoneCopyUserPassword.setStatus('current')
if mibBuilder.loadTexts: zoneCopyUserPassword.setDescription("The password corresponding to the user name specified by zoneCopyUserName object on the remote device. This object is meaningful only if the corresponding instance of zoneCopyDestFileType object is 'networkFile' and the protocol to be used as specified by zoneCopyProto is 'ftp' or 'sftp' or 'scp'. The value of this object when read is always the zero length string for security reasons.")
zoneCopyStartCopy = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 31, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copy", 1), ("noop", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zoneCopyStartCopy.setStatus('current')
if mibBuilder.loadTexts: zoneCopyStartCopy.setDescription("This object provides the capability to start the copy operation of the active zoneset on this VSAN to the desired destination. When set to 'copy(1)', the copy of the active zoneset on this VSAN is started. No action is taken if this object is set to 'noop(2)'. The value of this object when read is always 'noop'.")
zoneCopyState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 31, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("success", 1), ("timeout", 2), ("badFileName", 3), ("inProgress", 4), ("badUserNamePasswd", 5), ("incompleteConfig", 6), ("unknown", 7), ("sysErr", 8), ("anotherCopyInProgress", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneCopyState.setStatus('current')
if mibBuilder.loadTexts: zoneCopyState.setDescription('The result of the most recent copy operation on this VSAN. success(1) - indicates that the copy operation was successful. timeout(2) - indicates that the copy operation failed due to a timeout. badFileName(3) - indicates that the file name/ path/permissions are incorrect. inProgress(4) - indicates that this copy operation is currently in progress. badUserNamePasswd(5) - indicates that the user name/password of the remote device is incorrect. incompleteConfig(6) - configuration is incomplete. unknown(7) - error is unknown. sysErr(8) - system error anotherCopyInProgress(9) - indicates that a copy operation on the same VSAN or another VSAN is already in progress.')
zoneCopyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 31, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zoneCopyRowStatus.setStatus('current')
if mibBuilder.loadTexts: zoneCopyRowStatus.setDescription('The status of this conceptual row.')
zoneUnsuppMemInIntOpNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 32), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zoneUnsuppMemInIntOpNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: zoneUnsuppMemInIntOpNotifyEnable.setDescription("This object specifies if the zone server should issue a zoneUnsuppMemInIntOpModeNotify notification. If the value of this object is 'true', then the notification is issued. If the value of this object is 'false', then the notification is not issued.")
zoneVsanId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 33), VsanIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: zoneVsanId.setStatus('current')
if mibBuilder.loadTexts: zoneVsanId.setDescription('This object represents the VSAN id on which a mismatch between the operating mode of the local switch and the type of zone members has been detected.')
zoneZoneSetDistributeVsan = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 34), VsanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zoneZoneSetDistributeVsan.setStatus('current')
if mibBuilder.loadTexts: zoneZoneSetDistributeVsan.setDescription("This object represents the VSAN on which the full zoneset information needs to be distributed throughout the fabric. Setting this object to a valid VSAN will trigger such an operation. Setting this object to an invalid VSAN will result in an error and no action will be taken. It is to be noted that this operation of full zoneset distribution on this VSAN is done immediately and this is independent of activation/deactivation. This is supported only in 'interop' modes 2 and 3. When a full zoneset distribute operation is in process on a VSAN, any attempt to start the same on another VSAN will result in error.")
zoneZoneSetDistributeResult = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("success", 1), ("failure", 2), ("inProgress", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneZoneSetDistributeResult.setStatus('current')
if mibBuilder.loadTexts: zoneZoneSetDistributeResult.setDescription('The outcome of the full zoneset distribute operation on the VSAN indicated by zoneZoneSetDistributeVsan object.')
zoneZoneSetDistributeFailReason = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 36), FcChangeProtoFailCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneZoneSetDistributeFailReason.setStatus('current')
if mibBuilder.loadTexts: zoneZoneSetDistributeFailReason.setDescription('If the outcome of distributing the full zoneset on a VSAN is failure, then this object will contain the reason for the failure. In other cases, the value of this object does not make sense.')
zoneSwitchWwn = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 37), FcNameId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: zoneSwitchWwn.setStatus('current')
if mibBuilder.loadTexts: zoneSwitchWwn.setDescription('This object represents the WWN of the local device. It is used in the notification zoneActivateNotify.')
zoneSetZoneListTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 38), )
if mibBuilder.loadTexts: zoneSetZoneListTable.setStatus('current')
if mibBuilder.loadTexts: zoneSetZoneListTable.setDescription('This table is an extension to the zoneSetTable defined above. The object zoneSetZoneList in zoneSetTable represents the set of zones that form a zoneset. However, this object has the limitation of being able to represent only 2048 zones. This table which extends the zoneSetTable overcomes this limitation and the number of zones that form a zoneset is increased to 8192.')
zoneSetZoneListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 38, 1), )
zoneSetEntry.registerAugmentions(("CISCO-ZS-MIB", "zoneSetZoneListEntry"))
zoneSetZoneListEntry.setIndexNames(*zoneSetEntry.getIndexNames())
if mibBuilder.loadTexts: zoneSetZoneListEntry.setStatus('current')
if mibBuilder.loadTexts: zoneSetZoneListEntry.setDescription('An entry (conceptual row) in this table represents a set of 6144 zones that can be associated with the zoneset represented by zoneSetIndex on VSAN represented by vsanIndex.')
zoneSetZoneListBmap4k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 38, 1, 1), FcList().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zoneSetZoneListBmap4k.setStatus('current')
if mibBuilder.loadTexts: zoneSetZoneListBmap4k.setDescription("The set of zones from ids 2049 to 4096 which form this zone set on this VSAN. The zones are identified by zoneIndex object in the zoneTable. If a particular bit has a value of '1', then the corresponding zone is a part of this zone set. All other zones have '0' in their positions or not present in the string. The default value is the zero length string.")
zoneSetZoneListBmap6k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 38, 1, 2), FcList().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zoneSetZoneListBmap6k.setStatus('current')
if mibBuilder.loadTexts: zoneSetZoneListBmap6k.setDescription("The set of zones from ids 4097 to 6144 which form this zone set on this VSAN. The zones are identified by zoneIndex object in the zoneTable. If a particular bit has a value of '1', then the corresponding zone is a part of this zone set. All other zones have '0' in their positions or not present in the string. The default value is the zero length string.")
zoneSetZoneListBmap8k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 38, 1, 3), FcList().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zoneSetZoneListBmap8k.setStatus('current')
if mibBuilder.loadTexts: zoneSetZoneListBmap8k.setDescription("The set of zones from ids 6145 to 8192 which form this zone set on this VSAN. The zones are identified by zoneIndex object in the zoneTable. If a particular bit has a value of '1', then the corresponding zone is a part of this zone set. All other zones have '0' in their positions or not present in the string. The default value is the zero length string.")
zoneSetEnforcedZoneListTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 39), )
if mibBuilder.loadTexts: zoneSetEnforcedZoneListTable.setStatus('current')
if mibBuilder.loadTexts: zoneSetEnforcedZoneListTable.setDescription('This table is an extension to the zoneEnforcedZoneSetTable defined above. The object zoneEnforcedZoneSetZoneList in zoneEnforcedZoneSetTable represents the set of enforced zones that form an enforced zoneset. However, this object has the limitation of being able to represent only 2048 zones. This table which extends the zoneEnforcedZoneSetTable overcomes this limitation and the number of enforced zones that form an enforced zoneset is increased to 8192.')
zoneSetEnforcedZoneListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 39, 1), )
zoneEnforcedZoneSetEntry.registerAugmentions(("CISCO-ZS-MIB", "zoneSetEnforcedZoneListEntry"))
zoneSetEnforcedZoneListEntry.setIndexNames(*zoneEnforcedZoneSetEntry.getIndexNames())
if mibBuilder.loadTexts: zoneSetEnforcedZoneListEntry.setStatus('current')
if mibBuilder.loadTexts: zoneSetEnforcedZoneListEntry.setDescription('An entry (conceptual row) in this table represents a set of upto 6144 enforced zones that can be associated with the enforced zoneset on VSAN represented by vsanIndex.')
zoneSetEnforcedZoneListBmap4k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 39, 1, 1), FcList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneSetEnforcedZoneListBmap4k.setStatus('current')
if mibBuilder.loadTexts: zoneSetEnforcedZoneListBmap4k.setDescription("The set of zones from ids 2049 to 4096 which form the enforced zone set on this VSAN. The enforced zones are identified by zoneIndex object in the zoneEnforcedZoneTable. If a particular bit has a value of '1', then the corresponding zone is a part of this zone set. All other zones have '0' in their positions or not present in the string.")
zoneSetEnforcedZoneListBmap6k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 39, 1, 2), FcList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneSetEnforcedZoneListBmap6k.setStatus('current')
if mibBuilder.loadTexts: zoneSetEnforcedZoneListBmap6k.setDescription("The set of zones from ids 4097 to 6144 which form the enforced zone set on this VSAN. The enforced zones are identified by zoneIndex object in the zoneEnforcedZoneTable. If a particular bit has a value of '1', then the corresponding zone is a part of this zone set. All other zones have '0' in their positions or not present in the string.")
zoneSetEnforcedZoneListBmap8k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 39, 1, 3), FcList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zoneSetEnforcedZoneListBmap8k.setStatus('current')
if mibBuilder.loadTexts: zoneSetEnforcedZoneListBmap8k.setDescription("The set of zones from ids 6145 to 8192 which form the enforced zone set on this VSAN. The enforced zones are identified by zoneIndex object in the zoneEnforcedZoneTable. If a particular bit has a value of '1', then the corresponding zone is a part of this zone set. All other zones have '0' in their positions or not present in the string.")
zoneCompactTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 40), )
if mibBuilder.loadTexts: zoneCompactTable.setStatus('current')
if mibBuilder.loadTexts: zoneCompactTable.setDescription("The zoneSetZoneList object and the zoneSetZoneListTable allow upto 8192 zones to be associated with a zoneset. This is done with the help of 4 bitmaps each of which represent 2048 zones. There may exist a situation where the 'lowest' bitmap may not be fully populated but 'higher' bitmaps may have bits set in them. Semantically what this means is: the lowest 2048 zones have not been fully associated, but zones with higher ids have been associated. This kind of a situation causes problems for management stations which are only aware of older versions of this MIB. They are only aware of zoneSetZoneList object and hence only the 'lowest' 2048 zones that are associated with a zoneset. In the above situation, the total number of zones associated with the zoneset could be less than 2048. But by virtue of being distributed in the 'higher' bitmaps, those zones will not be seen by those management stations as they are not aware of the new objects in zoneSetZoneListTable. In such a situation, a management station which is aware of this version of the MIB, can choose to compact the zones associated with zonesets on a VSAN, so that the holes in the lowest 2048 zones are filled. Note that this table facilitates compaction of only the first 2048 zones and not zones belonging to 'higher' bitmaps.")
zoneCompactEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 40, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanIndex"))
if mibBuilder.loadTexts: zoneCompactEntry.setStatus('current')
if mibBuilder.loadTexts: zoneCompactEntry.setDescription('An entry allows compaction to be carried out on a VSAN.')
zoneCompactFirst2k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 40, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("compact", 1), ("noop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zoneCompactFirst2k.setStatus('current')
if mibBuilder.loadTexts: zoneCompactFirst2k.setDescription("Setting this object to 'compact' will result in compaction of the lowest 2048 zones that are associated to zonesets on this VSAN. Zones present in higher bitmaps will be moved down so that the holes in the lowest 2048 zones are filled. As a result of this, the ids of the corresponding zones are changed and a management station should re-read the zoneTable. If such a compaction is not possible or the lowest 2048 zones are already compacted, the SET operation will result in error. If a compaction operation goes through successfully, then the notification zoneCompactNotify is generated. Setting this object to 'noop', will result in no action being taken. The value of this object when read is always 'noop'.")
zoneCompactVsan = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 41), VsanIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: zoneCompactVsan.setStatus('current')
if mibBuilder.loadTexts: zoneCompactVsan.setDescription('This object represents the VSAN on which a successful zone compaction has taken place. It is used in the notification zoneCompactNotify.')
zoneCopyActToFullSpinLock = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 42), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zoneCopyActToFullSpinLock.setStatus('current')
if mibBuilder.loadTexts: zoneCopyActToFullSpinLock.setDescription("This object is used to facilitate modification of zoneCopyActToFullMode and zoneCopyActToFullOnVsan by multiple managers. The procedure for modifying these objects is as follows: 1. Determine new values for zoneCopyActToFullMode, zoneCopyActToFullOnVsan. 2. Retrieve the value of zoneCopyActToFullSpinLock. 3. Set the value of zoneCopyActToFullSpinLock to the retrieved value, and (in the same PDU) the value of zoneCopyActToFullMode to the new value. If the set fails for zoneCopyActToFullSpinLock, go back to step 2. 4. Set the value of zoneCopyActToFullSpinLock to the retrieved value plus one, and (in the same PDU) the value of zoneCopyActToFullOnVsan to the new value. If the set fails for zoneCopyActToFullSpinLock object, go back to step 2. Note that if it's possible to include zoneCopyActToFullOnVsan in the (Set Req) PDU of the earlier step, then step 4 can be eliminated.")
zoneCopyActToFullMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("includeAutoZones", 1), ("excludeAutoZones", 2), ("noop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zoneCopyActToFullMode.setStatus('current')
if mibBuilder.loadTexts: zoneCopyActToFullMode.setDescription("Setting this object to 'includeAutoZones', results in certain internal zones created by Zone Server being copied along with the enforced database to the full zoneset database. Setting this object to 'excludeAutoZones', does not copy those zones. Setting this object to 'noop' results in no action being taken. The value of this object when read is always 'noop'.")
zoneCopyActToFullVsan = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 1, 44), VsanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zoneCopyActToFullVsan.setStatus('current')
if mibBuilder.loadTexts: zoneCopyActToFullVsan.setDescription('The VSAN on which the enforced zone set (active zone set) needs to be copied to the zone set database (full zone set). Setting this object to a valid VSAN will trigger a copy of the enforced zone set on that VSAN to the zone set database on the same VSAN. Setting this object to an invalid VSAN-id will result in an error and no copy will take place.')
zoneServiceReqRejNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 4, 0, 1)).setObjects(("CISCO-ZS-MIB", "zoneMemberFormat"), ("CISCO-ZS-MIB", "zoneMemberID"), ("CISCO-ZS-MIB", "zoneServiceRejReasonCode"), ("CISCO-ZS-MIB", "zoneServiceRejReasonCodeExp"))
if mibBuilder.loadTexts: zoneServiceReqRejNotify.setStatus('current')
if mibBuilder.loadTexts: zoneServiceReqRejNotify.setDescription('This notification is generated whenever the local Zone Server rejects a registration request. The Zone Server should update the zoneServiceRejReasonCode and zoneServiceRejReason- CodeExp objects with the corresponding reason code and reason code explanation before sending the notification. The zoneMemberType and zoneMemberID identify the source of the request.')
zoneMergeFailureNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 4, 0, 2)).setObjects(("IF-MIB", "ifIndex"), ("CISCO-ZS-MIB", "zoneMergeFailureVSANNum"), ("CISCO-ZS-MIB", "zoneMergeFailureObject"), ("CISCO-ZS-MIB", "zoneMergeFailureReason"))
if mibBuilder.loadTexts: zoneMergeFailureNotify.setStatus('current')
if mibBuilder.loadTexts: zoneMergeFailureNotify.setDescription('This notification is generated whenever there is a zone merge failure. If all VSANs on a link have a zone-merge failure at the same time, then just one notification is generated in which zoneMergeFailureVSANNum object has a zero value. The zoneMergeFailureObject and zoneMergeFailureReason assist in providing information regarding the point of merge failure.')
zoneMergeSuccessNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 4, 0, 3)).setObjects(("IF-MIB", "ifIndex"), ("CISCO-ZS-MIB", "zoneMergeSuccessVSANNum"))
if mibBuilder.loadTexts: zoneMergeSuccessNotify.setStatus('current')
if mibBuilder.loadTexts: zoneMergeSuccessNotify.setDescription('This notification is generated whenever a zone merge happens successfully. If all VSANs on a link have a zone-merge success at the same time, then just one notification is generated in which zoneMergeSuccessVSANNum object has a zero value.')
zoneDefZoneBehaviourChngNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 4, 0, 4)).setObjects(("CISCO-ZS-MIB", "zoneDefaultZoneBehaviour"))
if mibBuilder.loadTexts: zoneDefZoneBehaviourChngNotify.setStatus('current')
if mibBuilder.loadTexts: zoneDefZoneBehaviourChngNotify.setDescription('This notification is generated whenever the value of zoneDefaultZoneBehaviour changes.')
zoneUnsuppMemInIntOpModeNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 4, 0, 5)).setObjects(("CISCO-ZS-MIB", "zoneVsanId"))
if mibBuilder.loadTexts: zoneUnsuppMemInIntOpModeNotify.setStatus('current')
if mibBuilder.loadTexts: zoneUnsuppMemInIntOpModeNotify.setDescription("This notification is generated whenever one or more zone members are not supported in the mode in which the local switch is currently configured to function. The switch can be configured to operate in certain 'interoperable' modes on a VSAN basis to enable it to work with switches from other vendors. The zoneVsanId object identifies the VSAN on which the mismatch has been identified.")
zoneActivateNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 4, 0, 6)).setObjects(("CISCO-ZS-MIB", "zoneSetActivateResult"), ("CISCO-ZS-MIB", "zoneSwitchWwn"))
if mibBuilder.loadTexts: zoneActivateNotify.setStatus('current')
if mibBuilder.loadTexts: zoneActivateNotify.setDescription('This notification is generated whenever a zone set is activated/deactivated on a VSAN. The zoneSetActivateResult object denotes the outcome of the activation/deactivation. The zoneSwitchWwn object represents the WWN of the local device.')
zoneCompactNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 294, 1, 4, 0, 7)).setObjects(("CISCO-ZS-MIB", "zoneCompactVsan"))
if mibBuilder.loadTexts: zoneCompactNotify.setStatus('current')
if mibBuilder.loadTexts: zoneCompactNotify.setDescription('This notification is generated whenever a zone compaction on the VSAN specified by zoneCompactVsan happens successfully.')
zoneServerMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 294, 2, 1))
zoneServerMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 294, 2, 2))
zoneServerMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 294, 2, 1, 1)).setObjects(("CISCO-ZS-MIB", "zoneConfigurationGroup"), ("CISCO-ZS-MIB", "zoneStatisticsGroup"), ("CISCO-ZS-MIB", "zoneNotificationControlGroup"), ("CISCO-ZS-MIB", "zoneNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zoneServerMIBCompliance = zoneServerMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: zoneServerMIBCompliance.setDescription('The compliance statement for entities which implement the Zone Server.')
zoneServerMIBCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 294, 2, 1, 2)).setObjects(("CISCO-ZS-MIB", "zoneConfigurationGroup1"), ("CISCO-ZS-MIB", "zoneStatisticsGroup"), ("CISCO-ZS-MIB", "zoneNotificationControlGroup"), ("CISCO-ZS-MIB", "zoneNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zoneServerMIBCompliance1 = zoneServerMIBCompliance1.setStatus('deprecated')
if mibBuilder.loadTexts: zoneServerMIBCompliance1.setDescription('The compliance statement for entities which implement the Zone Server.')
zoneServerMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 294, 2, 1, 3)).setObjects(("CISCO-ZS-MIB", "zoneConfigurationGroup2"), ("CISCO-ZS-MIB", "zoneStatisticsGroup"), ("CISCO-ZS-MIB", "zoneNotificationControlGroup"), ("CISCO-ZS-MIB", "zoneNotificationGroup"), ("CISCO-ZS-MIB", "zoneLunStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zoneServerMIBComplianceRev2 = zoneServerMIBComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: zoneServerMIBComplianceRev2.setDescription('The compliance statement for entities which implement the Zone Server.')
zoneServerMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 294, 2, 1, 4)).setObjects(("CISCO-ZS-MIB", "zoneConfigurationGroup3"), ("CISCO-ZS-MIB", "zoneStatisticsGroup"), ("CISCO-ZS-MIB", "zoneNotificationControlGroup"), ("CISCO-ZS-MIB", "zoneNotificationGroup"), ("CISCO-ZS-MIB", "zoneLunStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zoneServerMIBComplianceRev3 = zoneServerMIBComplianceRev3.setStatus('deprecated')
if mibBuilder.loadTexts: zoneServerMIBComplianceRev3.setDescription('The compliance statement for entities which implement the Zone Server.')
zoneServerMIBComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 294, 2, 1, 5)).setObjects(("CISCO-ZS-MIB", "zoneConfigurationGroup3"), ("CISCO-ZS-MIB", "zoneStatisticsGroup"), ("CISCO-ZS-MIB", "zoneNotificationControlGroup1"), ("CISCO-ZS-MIB", "zoneNotificationGroup1"), ("CISCO-ZS-MIB", "zoneLunStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zoneServerMIBComplianceRev4 = zoneServerMIBComplianceRev4.setStatus('deprecated')
if mibBuilder.loadTexts: zoneServerMIBComplianceRev4.setDescription('The compliance statement for entities which implement the Zone Server.')
zoneServerMIBComplianceRev5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 294, 2, 1, 6)).setObjects(("CISCO-ZS-MIB", "zoneConfigurationGroup4"), ("CISCO-ZS-MIB", "zoneStatisticsGroup"), ("CISCO-ZS-MIB", "zoneNotificationControlGroup1"), ("CISCO-ZS-MIB", "zoneNotificationGroup1"), ("CISCO-ZS-MIB", "zoneLunStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zoneServerMIBComplianceRev5 = zoneServerMIBComplianceRev5.setStatus('deprecated')
if mibBuilder.loadTexts: zoneServerMIBComplianceRev5.setDescription('The compliance statement for entities which implement the Zone Server.')
zoneServerMIBComplianceRev6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 294, 2, 1, 7)).setObjects(("CISCO-ZS-MIB", "zoneConfigurationGroup5"), ("CISCO-ZS-MIB", "zoneStatisticsGroup"), ("CISCO-ZS-MIB", "zoneNotificationControlGroup1"), ("CISCO-ZS-MIB", "zoneNotificationGroup1"), ("CISCO-ZS-MIB", "zoneLunStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zoneServerMIBComplianceRev6 = zoneServerMIBComplianceRev6.setStatus('deprecated')
if mibBuilder.loadTexts: zoneServerMIBComplianceRev6.setDescription('The compliance statement for entities which implement the Zone Server.')
zoneServerMIBComplianceRev7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 294, 2, 1, 8)).setObjects(("CISCO-ZS-MIB", "zoneConfigurationGroup6"), ("CISCO-ZS-MIB", "zoneStatisticsGroup"), ("CISCO-ZS-MIB", "zoneNotificationControlGroup1"), ("CISCO-ZS-MIB", "zoneNotificationGroup2"), ("CISCO-ZS-MIB", "zoneNotificationControlGroup1Sup1"), ("CISCO-ZS-MIB", "zoneLunStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zoneServerMIBComplianceRev7 = zoneServerMIBComplianceRev7.setStatus('deprecated')
if mibBuilder.loadTexts: zoneServerMIBComplianceRev7.setDescription('The compliance statement for entities which implement the Zone Server.')
zoneServerMIBComplianceRev8 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 294, 2, 1, 9)).setObjects(("CISCO-ZS-MIB", "zoneConfigurationGroup7"), ("CISCO-ZS-MIB", "zoneStatisticsGroup"), ("CISCO-ZS-MIB", "zoneNotificationControlGroup1"), ("CISCO-ZS-MIB", "zoneNotificationGroup2"), ("CISCO-ZS-MIB", "zoneNotificationControlGroup1Sup1"), ("CISCO-ZS-MIB", "zoneConfigGroupSup2"), ("CISCO-ZS-MIB", "zoneLunStatsGroup"), ("CISCO-ZS-MIB", "zoneConfigGroupSup1"), ("CISCO-ZS-MIB", "zoneNotificationControlGroup1Sup2"), ("CISCO-ZS-MIB", "zoneNotificationGroup2Sup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zoneServerMIBComplianceRev8 = zoneServerMIBComplianceRev8.setStatus('current')
if mibBuilder.loadTexts: zoneServerMIBComplianceRev8.setDescription('The compliance statement for entities which implement the Zone Server.')
zoneConfigurationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 294, 2, 2, 1)).setObjects(("CISCO-ZS-MIB", "zoneSetPropagationMode"), ("CISCO-ZS-MIB", "zoneDefaultZoneBehaviour"), ("CISCO-ZS-MIB", "zoneSetNumber"), ("CISCO-ZS-MIB", "zoneSetName"), ("CISCO-ZS-MIB", "zoneSetZoneList"), ("CISCO-ZS-MIB", "zoneSetLastChange"), ("CISCO-ZS-MIB", "zoneSetRowStatus"), ("CISCO-ZS-MIB", "zoneSetActivate"), ("CISCO-ZS-MIB", "zoneSetActivateResult"), ("CISCO-ZS-MIB", "zoneSetDeActivate"), ("CISCO-ZS-MIB", "zoneSetActivateRowStatus"), ("CISCO-ZS-MIB", "zoneNumber"), ("CISCO-ZS-MIB", "zoneName"), ("CISCO-ZS-MIB", "zoneMemberList"), ("CISCO-ZS-MIB", "zoneAliasList"), ("CISCO-ZS-MIB", "zoneLastChange"), ("CISCO-ZS-MIB", "zoneRowStatus"), ("CISCO-ZS-MIB", "zoneAliasNumber"), ("CISCO-ZS-MIB", "zoneAliasName"), ("CISCO-ZS-MIB", "zoneAliasMemberList"), ("CISCO-ZS-MIB", "zoneAliasRowStatus"), ("CISCO-ZS-MIB", "zoneMemberNumber"), ("CISCO-ZS-MIB", "zoneMemberFormat"), ("CISCO-ZS-MIB", "zoneMemberID"), ("CISCO-ZS-MIB", "zoneMemberLunID"), ("CISCO-ZS-MIB", "zoneMemberRowStatus"), ("CISCO-ZS-MIB", "zoneEnforcedZoneSetNumber"), ("CISCO-ZS-MIB", "zoneEnforcedZoneSetName"), ("CISCO-ZS-MIB", "zoneEnforcedZoneSetZoneList"), ("CISCO-ZS-MIB", "zoneEnforcedZoneSetActivateTime"), ("CISCO-ZS-MIB", "zoneEnforcedZoneNumber"), ("CISCO-ZS-MIB", "zoneEnforcedZoneName"), ("CISCO-ZS-MIB", "zoneEnforcedZoneMemberList"), ("CISCO-ZS-MIB", "zoneEnforcedZoneAliasList"), ("CISCO-ZS-MIB", "zoneEnforcedZoneActivateTime"), ("CISCO-ZS-MIB", "zoneEnforcedZoneAliasNumber"), ("CISCO-ZS-MIB", "zoneEnforcedZoneAliasName"), ("CISCO-ZS-MIB", "zoneEnforcedZoneAliasMemberList"), ("CISCO-ZS-MIB", "zoneEnforcedZoneMemberNumber"), ("CISCO-ZS-MIB", "zoneEnforcedZoneMemberFormat"), ("CISCO-ZS-MIB", "zoneEnforcedZoneMemberID"), ("CISCO-ZS-MIB", "zoneEnforcedZoneMemberLunID"), ("CISCO-ZS-MIB", "zoneMergeFailRecoverSpinLock"), ("CISCO-ZS-MIB", "zoneMergeFailRecoverInterface"), ("CISCO-ZS-MIB", "zoneMergeFailRecoverVsan"), ("CISCO-ZS-MIB", "zoneMergeFailRecoverOper"), ("CISCO-ZS-MIB", "zoneMergeFailRecoverResult"), ("CISCO-ZS-MIB", "zoneCopyActiveToFullOnVsan"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zoneConfigurationGroup = zoneConfigurationGroup.setStatus('deprecated')
if mibBuilder.loadTexts: zoneConfigurationGroup.setDescription('A collection of objects for displaying and configuring Zone Membership.')
zoneStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 294, 2, 2, 2)).setObjects(("CISCO-ZS-MIB", "zoneTotalGS3Rejects"), ("CISCO-ZS-MIB", "zoneTxMergeReqs"), ("CISCO-ZS-MIB", "zoneRxMergeAccepts"), ("CISCO-ZS-MIB", "zoneRxMergeReqs"), ("CISCO-ZS-MIB", "zoneTxMergeAccepts"), ("CISCO-ZS-MIB", "zoneTxChangeReqs"), ("CISCO-ZS-MIB", "zoneRxChangeAccepts"), ("CISCO-ZS-MIB", "zoneRxChangeReqs"), ("CISCO-ZS-MIB", "zoneTxChangeAccepts"), ("CISCO-ZS-MIB", "zoneRxGS3Reqs"), ("CISCO-ZS-MIB", "zoneTxGS3Rejects"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zoneStatisticsGroup = zoneStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: zoneStatisticsGroup.setDescription('A collection of objects for displaying the Zone Server statistics information.')
zoneNotificationControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 294, 2, 2, 3)).setObjects(("CISCO-ZS-MIB", "zoneServiceReqRejNotifyEnable"), ("CISCO-ZS-MIB", "zoneMergeFailureNotifyEnable"), ("CISCO-ZS-MIB", "zoneMergeSuccessNotifyEnable"), ("CISCO-ZS-MIB", "zoneDefZoneBehvrChngNotifyEnable"), ("CISCO-ZS-MIB", "zoneServiceRejReasonCode"), ("CISCO-ZS-MIB", "zoneServiceRejReasonCodeExp"), ("CISCO-ZS-MIB", "zoneMergeFailureVSANNum"), ("CISCO-ZS-MIB", "zoneMergeSuccessVSANNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zoneNotificationControlGroup = zoneNotificationControlGroup.setStatus('deprecated')
if mibBuilder.loadTexts: zoneNotificationControlGroup.setDescription('A collection of notification control and notification information objects for monitoring Zone Server request rejection and zone merge failures.')
zoneNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 294, 2, 2, 4)).setObjects(("CISCO-ZS-MIB", "zoneServiceReqRejNotify"), ("CISCO-ZS-MIB", "zoneMergeFailureNotify"), ("CISCO-ZS-MIB", "zoneMergeSuccessNotify"), ("CISCO-ZS-MIB", "zoneDefZoneBehaviourChngNotify"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zoneNotificationGroup = zoneNotificationGroup.setStatus('deprecated')
if mibBuilder.loadTexts: zoneNotificationGroup.setDescription('A collection of notification(s) for monitoring Zone Server request rejection, zone merge failures and successes and default zoning behavioural changes.')
zoneConfigurationGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 294, 2, 2, 5)).setObjects(("CISCO-ZS-MIB", "zoneSetPropagationMode"), ("CISCO-ZS-MIB", "zoneDefaultZoneBehaviour"), ("CISCO-ZS-MIB", "zoneSetNumber"), ("CISCO-ZS-MIB", "zoneSetName"), ("CISCO-ZS-MIB", "zoneSetZoneList"), ("CISCO-ZS-MIB", "zoneSetLastChange"), ("CISCO-ZS-MIB", "zoneSetRowStatus"), ("CISCO-ZS-MIB", "zoneSetActivate"), ("CISCO-ZS-MIB", "zoneSetActivateResult"), ("CISCO-ZS-MIB", "zoneSetDeActivate"), ("CISCO-ZS-MIB", "zoneSetActivateRowStatus"), ("CISCO-ZS-MIB", "zoneSetFailCause"), ("CISCO-ZS-MIB", "zoneSetFailDomId"), ("CISCO-ZS-MIB", "zoneNumber"), ("CISCO-ZS-MIB", "zoneName"), ("CISCO-ZS-MIB", "zoneMemberList"), ("CISCO-ZS-MIB", "zoneAliasList"), ("CISCO-ZS-MIB", "zoneLastChange"), ("CISCO-ZS-MIB", "zoneRowStatus"), ("CISCO-ZS-MIB", "zoneReadOnly"), ("CISCO-ZS-MIB", "zoneAliasNumber"), ("CISCO-ZS-MIB", "zoneAliasName"), ("CISCO-ZS-MIB", "zoneAliasMemberList"), ("CISCO-ZS-MIB", "zoneAliasRowStatus"), ("CISCO-ZS-MIB", "zoneMemberNumber"), ("CISCO-ZS-MIB", "zoneMemberFormat"), ("CISCO-ZS-MIB", "zoneMemberID"), ("CISCO-ZS-MIB", "zoneMemberLunID"), ("CISCO-ZS-MIB", "zoneMemberRowStatus"), ("CISCO-ZS-MIB", "zoneEnforcedZoneSetNumber"), ("CISCO-ZS-MIB", "zoneEnforcedZoneSetName"), ("CISCO-ZS-MIB", "zoneEnforcedZoneSetZoneList"), ("CISCO-ZS-MIB", "zoneEnforcedZoneSetActivateTime"), ("CISCO-ZS-MIB", "zoneEnforcedZoneNumber"), ("CISCO-ZS-MIB", "zoneEnforcedZoneName"), ("CISCO-ZS-MIB", "zoneEnforcedZoneMemberList"), ("CISCO-ZS-MIB", "zoneEnforcedZoneAliasList"), ("CISCO-ZS-MIB", "zoneEnforcedZoneActivateTime"), ("CISCO-ZS-MIB", "zoneEnforcedZoneReadOnly"), ("CISCO-ZS-MIB", "zoneEnforcedZoneAliasNumber"), ("CISCO-ZS-MIB", "zoneEnforcedZoneAliasName"), ("CISCO-ZS-MIB", "zoneEnforcedZoneAliasMemberList"), ("CISCO-ZS-MIB", "zoneEnforcedZoneMemberNumber"), ("CISCO-ZS-MIB", "zoneEnforcedZoneMemberFormat"), ("CISCO-ZS-MIB", "zoneEnforcedZoneMemberID"), ("CISCO-ZS-MIB", "zoneEnforcedZoneMemberLunID"), ("CISCO-ZS-MIB", "zoneMergeFailRecoverSpinLock"), ("CISCO-ZS-MIB", "zoneMergeFailRecoverInterface"), ("CISCO-ZS-MIB", "zoneMergeFailRecoverVsan"), ("CISCO-ZS-MIB", "zoneMergeFailRecoverOper"), ("CISCO-ZS-MIB", "zoneMergeFailRecoverResult"), ("CISCO-ZS-MIB", "zoneCopyActiveToFullOnVsan"), ("CISCO-ZS-MIB", "zoneDbClearDb"), ("CISCO-ZS-MIB", "zoneDbEnforcedEqualsLocal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zoneConfigurationGroup1 = zoneConfigurationGroup1.setStatus('deprecated')
if mibBuilder.loadTexts: zoneConfigurationGroup1.setDescription('A collection of objects for displaying and configuring Zone Membership and deleting the local zone server database.')
zoneConfigurationGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 294, 2, 2, 6)).setObjects(("CISCO-ZS-MIB", "zoneSetPropagationMode"), ("CISCO-ZS-MIB", "zoneDefaultZoneBehaviour"), ("CISCO-ZS-MIB", "zoneDefaultZoneReadOnly"), ("CISCO-ZS-MIB", "zoneSetNumber"), ("CISCO-ZS-MIB", "zoneSetName"), ("CISCO-ZS-MIB", "zoneSetZoneList"), ("CISCO-ZS-MIB", "zoneSetLastChange"), ("CISCO-ZS-MIB", "zoneSetRowStatus"), ("CISCO-ZS-MIB", "zoneSetActivate"), ("CISCO-ZS-MIB", "zoneSetActivateResult"), ("CISCO-ZS-MIB", "zoneSetDeActivate"), ("CISCO-ZS-MIB", "zoneSetActivateRowStatus"), ("CISCO-ZS-MIB", "zoneSetFailCause"), ("CISCO-ZS-MIB", "zoneSetFailDomId"), ("CISCO-ZS-MIB", "zoneNumber"), ("CISCO-ZS-MIB", "zoneName"), ("CISCO-ZS-MIB", "zoneMemberList"), ("CISCO-ZS-MIB", "zoneAliasList"), ("CISCO-ZS-MIB", "zoneLastChange"), ("CISCO-ZS-MIB", "zoneRowStatus"), ("CISCO-ZS-MIB", "zoneReadOnly"), ("CISCO-ZS-MIB", "zoneAliasNumber"), ("CISCO-ZS-MIB", "zoneAliasName"), ("CISCO-ZS-MIB", "zoneAliasMemberList"), ("CISCO-ZS-MIB", "zoneAliasRowStatus"), ("CISCO-ZS-MIB", "zoneAliasLastChange"), ("CISCO-ZS-MIB", "zoneMemberNumber"), ("CISCO-ZS-MIB", "zoneMemberFormat"), ("CISCO-ZS-MIB", "zoneMemberID"), ("CISCO-ZS-MIB", "zoneMemberLunID"), ("CISCO-ZS-MIB", "zoneMemberRowStatus"), ("CISCO-ZS-MIB", "zoneEnforcedZoneSetNumber"), ("CISCO-ZS-MIB", "zoneEnforcedZoneSetName"), ("CISCO-ZS-MIB", "zoneEnforcedZoneSetZoneList"), ("CISCO-ZS-MIB", "zoneEnforcedZoneSetActivateTime"), ("CISCO-ZS-MIB", "zoneEnforcedZoneNumber"), ("CISCO-ZS-MIB", "zoneEnforcedZoneName"), ("CISCO-ZS-MIB", "zoneEnforcedZoneMemberList"), ("CISCO-ZS-MIB", "zoneEnforcedZoneAliasList"), ("CISCO-ZS-MIB", "zoneEnforcedZoneActivateTime"), ("CISCO-ZS-MIB", "zoneEnforcedZoneReadOnly"), ("CISCO-ZS-MIB", "zoneEnforcedZoneMemberNumber"), ("CISCO-ZS-MIB", "zoneEnforcedZoneMemberFormat"), ("CISCO-ZS-MIB", "zoneEnforcedZoneMemberID"), ("CISCO-ZS-MIB", "zoneEnforcedZoneMemberLunID"), ("CISCO-ZS-MIB", "zoneMergeFailRecoverSpinLock"), ("CISCO-ZS-MIB", "zoneMergeFailRecoverInterface"), ("CISCO-ZS-MIB", "zoneMergeFailRecoverVsan"), ("CISCO-ZS-MIB", "zoneMergeFailRecoverOper"), ("CISCO-ZS-MIB", "zoneMergeFailRecoverResult"), ("CISCO-ZS-MIB", "zoneCopyActiveToFullOnVsan"), ("CISCO-ZS-MIB", "zoneDbClearDb"), ("CISCO-ZS-MIB", "zoneDbEnforcedEqualsLocal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zoneConfigurationGroup2 = zoneConfigurationGroup2.setStatus('deprecated')
if mibBuilder.loadTexts: zoneConfigurationGroup2.setDescription('A collection of objects for displaying and configuring Zone Membership and deleting the local zone server database.')
zoneLunStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 294, 2, 2, 7)).setObjects(("CISCO-ZS-MIB", "zoneLunRxInqReqs"), ("CISCO-ZS-MIB", "zoneLunRxRepLunReqs"), ("CISCO-ZS-MIB", "zoneLunRxSenseReqs"), ("CISCO-ZS-MIB", "zoneLunRxOtherCmds"), ("CISCO-ZS-MIB", "zoneLunTxInqDataNoLus"), ("CISCO-ZS-MIB", "zoneLunTxIllegalReqs"), ("CISCO-ZS-MIB", "zoneRoZoneTxDataProts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zoneLunStatsGroup = zoneLunStatsGroup.setStatus('current')
if mibBuilder.loadTexts: zoneLunStatsGroup.setDescription('A collection of objects for displaying the Zone Server LUN statistics information.')
zoneConfigurationGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 294, 2, 2, 8)).setObjects(("CISCO-ZS-MIB", "zoneSetPropagationMode"), ("CISCO-ZS-MIB", "zoneDefaultZoneBehaviour"), ("CISCO-ZS-MIB", "zoneDefaultZoneReadOnly"), ("CISCO-ZS-MIB", "zoneSetNumber"), ("CISCO-ZS-MIB", "zoneSetName"), ("CISCO-ZS-MIB", "zoneSetZoneList"), ("CISCO-ZS-MIB", "zoneSetLastChange"), ("CISCO-ZS-MIB", "zoneSetRowStatus"), ("CISCO-ZS-MIB", "zoneSetActivate"), ("CISCO-ZS-MIB", "zoneSetActivateResult"), ("CISCO-ZS-MIB", "zoneSetDeActivate"), ("CISCO-ZS-MIB", "zoneSetActivateRowStatus"), ("CISCO-ZS-MIB", "zoneSetFailCause"), ("CISCO-ZS-MIB", "zoneSetFailDomId"), ("CISCO-ZS-MIB", "zoneNumber"), ("CISCO-ZS-MIB", "zoneName"), ("CISCO-ZS-MIB", "zoneMemberList"), ("CISCO-ZS-MIB", "zoneAliasList"), ("CISCO-ZS-MIB", "zoneLastChange"), ("CISCO-ZS-MIB", "zoneRowStatus"), ("CISCO-ZS-MIB", "zoneReadOnly"), ("CISCO-ZS-MIB", "zoneAliasNumber"), ("CISCO-ZS-MIB", "zoneAliasName"), ("CISCO-ZS-MIB", "zoneAliasMemberList"), ("CISCO-ZS-MIB", "zoneAliasRowStatus"), ("CISCO-ZS-MIB", "zoneAliasLastChange"), ("CISCO-ZS-MIB", "zoneMemberNumber"), ("CISCO-ZS-MIB", "zoneMemberFormat"), ("CISCO-ZS-MIB", "zoneMemberID"), ("CISCO-ZS-MIB", "zoneMemberLunID"), ("CISCO-ZS-MIB", "zoneMemberRowStatus"), ("CISCO-ZS-MIB", "zoneEnforcedZoneSetNumber"), ("CISCO-ZS-MIB", "zoneEnforcedZoneSetName"), ("CISCO-ZS-MIB", "zoneEnforcedZoneSetZoneList"), ("CISCO-ZS-MIB", "zoneEnforcedZoneSetActivateTime"), ("CISCO-ZS-MIB", "zoneEnforcedZoneNumber"), ("CISCO-ZS-MIB", "zoneEnforcedZoneName"), ("CISCO-ZS-MIB", "zoneEnforcedZoneMemberList"), ("CISCO-ZS-MIB", "zoneEnforcedZoneAliasList"), ("CISCO-ZS-MIB", "zoneEnforcedZoneActivateTime"), ("CISCO-ZS-MIB", "zoneEnforcedZoneReadOnly"), ("CISCO-ZS-MIB", "zoneEnforcedZoneMemberNumber"), ("CISCO-ZS-MIB", "zoneEnforcedZoneMemberFormat"), ("CISCO-ZS-MIB", "zoneEnforcedZoneMemberID"), ("CISCO-ZS-MIB", "zoneEnforcedZoneMemberLunID"), ("CISCO-ZS-MIB", "zoneMergeFailRecoverSpinLock"), ("CISCO-ZS-MIB", "zoneMergeFailRecoverInterface"), ("CISCO-ZS-MIB", "zoneMergeFailRecoverVsan"), ("CISCO-ZS-MIB", "zoneMergeFailRecoverOper"), ("CISCO-ZS-MIB", "zoneMergeFailRecoverResult"), ("CISCO-ZS-MIB", "zoneCopyActiveToFullOnVsan"), ("CISCO-ZS-MIB", "zoneDbClearDb"), ("CISCO-ZS-MIB", "zoneDbEnforcedEqualsLocal"), ("CISCO-ZS-MIB", "zoneCopyProto"), ("CISCO-ZS-MIB", "zoneCopyDestFileType"), ("CISCO-ZS-MIB", "zoneCopyServerAddrType"), ("CISCO-ZS-MIB", "zoneCopyServerAddr"), ("CISCO-ZS-MIB", "zoneCopyDestFileName"), ("CISCO-ZS-MIB", "zoneCopyUserName"), ("CISCO-ZS-MIB", "zoneCopyUserPassword"), ("CISCO-ZS-MIB", "zoneCopyStartCopy"), ("CISCO-ZS-MIB", "zoneCopyState"), ("CISCO-ZS-MIB", "zoneCopyRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zoneConfigurationGroup3 = zoneConfigurationGroup3.setStatus('deprecated')
if mibBuilder.loadTexts: zoneConfigurationGroup3.setDescription('A collection of objects for displaying and configuring Zone Membership and deleting the local zone server database.')
zoneNotificationControlGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 294, 2, 2, 9)).setObjects(("CISCO-ZS-MIB", "zoneServiceReqRejNotifyEnable"), ("CISCO-ZS-MIB", "zoneMergeFailureNotifyEnable"), ("CISCO-ZS-MIB", "zoneMergeSuccessNotifyEnable"), ("CISCO-ZS-MIB", "zoneDefZoneBehvrChngNotifyEnable"), ("CISCO-ZS-MIB", "zoneUnsuppMemInIntOpNotifyEnable"), ("CISCO-ZS-MIB", "zoneServiceRejReasonCode"), ("CISCO-ZS-MIB", "zoneServiceRejReasonCodeExp"), ("CISCO-ZS-MIB", "zoneMergeFailureVSANNum"), ("CISCO-ZS-MIB", "zoneMergeSuccessVSANNum"), ("CISCO-ZS-MIB", "zoneVsanId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zoneNotificationControlGroup1 = zoneNotificationControlGroup1.setStatus('current')
if mibBuilder.loadTexts: zoneNotificationControlGroup1.setDescription('A collection of notification control and notification information objects for monitoring Zone Server request rejection and zone merge failures.')
zoneNotificationGroup1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 294, 2, 2, 10)).setObjects(("CISCO-ZS-MIB", "zoneServiceReqRejNotify"), ("CISCO-ZS-MIB", "zoneMergeFailureNotify"), ("CISCO-ZS-MIB", "zoneMergeSuccessNotify"), ("CISCO-ZS-MIB", "zoneDefZoneBehaviourChngNotify"), ("CISCO-ZS-MIB", "zoneUnsuppMemInIntOpModeNotify"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zoneNotificationGroup1 = zoneNotificationGroup1.setStatus('deprecated')
if mibBuilder.loadTexts: zoneNotificationGroup1.setDescription('A collection of notification(s) for monitoring Zone Server request rejection, zone merge failures and successes and default zoning behavioural changes.')
zoneConfigurationGroup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 294, 2, 2, 11)).setObjects(("CISCO-ZS-MIB", "zoneSetPropagationMode"), ("CISCO-ZS-MIB", "zoneDefaultZoneBehaviour"), ("CISCO-ZS-MIB", "zoneDefaultZoneReadOnly"), ("CISCO-ZS-MIB", "zoneSetNumber"), ("CISCO-ZS-MIB", "zoneSetName"), ("CISCO-ZS-MIB", "zoneSetZoneList"), ("CISCO-ZS-MIB", "zoneSetLastChange"), ("CISCO-ZS-MIB", "zoneSetRowStatus"), ("CISCO-ZS-MIB", "zoneSetActivate"), ("CISCO-ZS-MIB", "zoneSetActivateResult"), ("CISCO-ZS-MIB", "zoneSetDeActivate"), ("CISCO-ZS-MIB", "zoneSetActivateRowStatus"), ("CISCO-ZS-MIB", "zoneSetFailCause"), ("CISCO-ZS-MIB", "zoneSetFailDomId"), ("CISCO-ZS-MIB", "zoneNumber"), ("CISCO-ZS-MIB", "zoneName"), ("CISCO-ZS-MIB", "zoneMemberList"), ("CISCO-ZS-MIB", "zoneAliasList"), ("CISCO-ZS-MIB", "zoneLastChange"), ("CISCO-ZS-MIB", "zoneRowStatus"), ("CISCO-ZS-MIB", "zoneReadOnly"), ("CISCO-ZS-MIB", "zoneAliasNumber"), ("CISCO-ZS-MIB", "zoneAliasName"), ("CISCO-ZS-MIB", "zoneAliasMemberList"), ("CISCO-ZS-MIB", "zoneAliasRowStatus"), ("CISCO-ZS-MIB", "zoneAliasLastChange"), ("CISCO-ZS-MIB", "zoneMemberNumber"), ("CISCO-ZS-MIB", "zoneMemberFormat"), ("CISCO-ZS-MIB", "zoneMemberID"), ("CISCO-ZS-MIB", "zoneMemberLunID"), ("CISCO-ZS-MIB", "zoneMemberRowStatus"), ("CISCO-ZS-MIB", "zoneEnforcedZoneSetNumber"), ("CISCO-ZS-MIB", "zoneEnforcedZoneSetName"), ("CISCO-ZS-MIB", "zoneEnforcedZoneSetZoneList"), ("CISCO-ZS-MIB", "zoneEnforcedZoneSetActivateTime"), ("CISCO-ZS-MIB", "zoneEnforcedZoneNumber"), ("CISCO-ZS-MIB", "zoneEnforcedZoneName"), ("CISCO-ZS-MIB", "zoneEnforcedZoneMemberList"), ("CISCO-ZS-MIB", "zoneEnforcedZoneAliasList"), ("CISCO-ZS-MIB", "zoneEnforcedZoneActivateTime"), ("CISCO-ZS-MIB", "zoneEnforcedZoneReadOnly"), ("CISCO-ZS-MIB", "zoneEnforcedZoneMemberNumber"), ("CISCO-ZS-MIB", "zoneEnforcedZoneMemberFormat"), ("CISCO-ZS-MIB", "zoneEnforcedZoneMemberID"), ("CISCO-ZS-MIB", "zoneEnforcedZoneMemberLunID"), ("CISCO-ZS-MIB", "zoneMergeFailRecoverSpinLock"), ("CISCO-ZS-MIB", "zoneMergeFailRecoverInterface"), ("CISCO-ZS-MIB", "zoneMergeFailRecoverVsan"), ("CISCO-ZS-MIB", "zoneMergeFailRecoverOper"), ("CISCO-ZS-MIB", "zoneMergeFailRecoverResult"), ("CISCO-ZS-MIB", "zoneCopyActiveToFullOnVsan"), ("CISCO-ZS-MIB", "zoneDbClearDb"), ("CISCO-ZS-MIB", "zoneDbEnforcedEqualsLocal"), ("CISCO-ZS-MIB", "zoneCopyProto"), ("CISCO-ZS-MIB", "zoneCopyDestFileType"), ("CISCO-ZS-MIB", "zoneCopyServerAddrType"), ("CISCO-ZS-MIB", "zoneCopyServerAddr"), ("CISCO-ZS-MIB", "zoneCopyDestFileName"), ("CISCO-ZS-MIB", "zoneCopyUserName"), ("CISCO-ZS-MIB", "zoneCopyUserPassword"), ("CISCO-ZS-MIB", "zoneCopyStartCopy"), ("CISCO-ZS-MIB", "zoneCopyState"), ("CISCO-ZS-MIB", "zoneCopyRowStatus"), ("CISCO-ZS-MIB", "zoneZoneSetDistributeVsan"), ("CISCO-ZS-MIB", "zoneZoneSetDistributeResult"), ("CISCO-ZS-MIB", "zoneZoneSetDistributeFailReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zoneConfigurationGroup4 = zoneConfigurationGroup4.setStatus('deprecated')
if mibBuilder.loadTexts: zoneConfigurationGroup4.setDescription('A collection of objects for displaying and configuring Zone Membership and deleting the local zone server database.')
zoneConfigurationGroup5 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 294, 2, 2, 12)).setObjects(("CISCO-ZS-MIB", "zoneSetPropagationMode"), ("CISCO-ZS-MIB", "zoneDefaultZoneBehaviour"), ("CISCO-ZS-MIB", "zoneDefaultZoneReadOnly"), ("CISCO-ZS-MIB", "zoneDefaultZoneQos"), ("CISCO-ZS-MIB", "zoneDefaultZoneQosPriority"), ("CISCO-ZS-MIB", "zoneDefaultZoneBroadcast"), ("CISCO-ZS-MIB", "zoneSetNumber"), ("CISCO-ZS-MIB", "zoneSetName"), ("CISCO-ZS-MIB", "zoneSetZoneList"), ("CISCO-ZS-MIB", "zoneSetLastChange"), ("CISCO-ZS-MIB", "zoneSetRowStatus"), ("CISCO-ZS-MIB", "zoneSetActivate"), ("CISCO-ZS-MIB", "zoneSetActivateResult"), ("CISCO-ZS-MIB", "zoneSetDeActivate"), ("CISCO-ZS-MIB", "zoneSetActivateRowStatus"), ("CISCO-ZS-MIB", "zoneSetFailCause"), ("CISCO-ZS-MIB", "zoneSetFailDomId"), ("CISCO-ZS-MIB", "zoneNumber"), ("CISCO-ZS-MIB", "zoneName"), ("CISCO-ZS-MIB", "zoneMemberList"), ("CISCO-ZS-MIB", "zoneAliasList"), ("CISCO-ZS-MIB", "zoneLastChange"), ("CISCO-ZS-MIB", "zoneRowStatus"), ("CISCO-ZS-MIB", "zoneReadOnly"), ("CISCO-ZS-MIB", "zoneQos"), ("CISCO-ZS-MIB", "zoneQosPriority"), ("CISCO-ZS-MIB", "zoneBroadcast"), ("CISCO-ZS-MIB", "zoneAliasNumber"), ("CISCO-ZS-MIB", "zoneAliasName"), ("CISCO-ZS-MIB", "zoneAliasMemberList"), ("CISCO-ZS-MIB", "zoneAliasRowStatus"), ("CISCO-ZS-MIB", "zoneAliasLastChange"), ("CISCO-ZS-MIB", "zoneMemberNumber"), ("CISCO-ZS-MIB", "zoneMemberFormat"), ("CISCO-ZS-MIB", "zoneMemberID"), ("CISCO-ZS-MIB", "zoneMemberLunID"), ("CISCO-ZS-MIB", "zoneMemberRowStatus"), ("CISCO-ZS-MIB", "zoneEnforcedZoneSetNumber"), ("CISCO-ZS-MIB", "zoneEnforcedZoneSetName"), ("CISCO-ZS-MIB", "zoneEnforcedZoneSetZoneList"), ("CISCO-ZS-MIB", "zoneEnforcedZoneSetActivateTime"), ("CISCO-ZS-MIB", "zoneEnforcedZoneNumber"), ("CISCO-ZS-MIB", "zoneEnforcedZoneName"), ("CISCO-ZS-MIB", "zoneEnforcedZoneMemberList"), ("CISCO-ZS-MIB", "zoneEnforcedZoneAliasList"), ("CISCO-ZS-MIB", "zoneEnforcedZoneActivateTime"), ("CISCO-ZS-MIB", "zoneEnforcedZoneReadOnly"), ("CISCO-ZS-MIB", "zoneEnforcedZoneQos"), ("CISCO-ZS-MIB", "zoneEnforcedZoneQosPriority"), ("CISCO-ZS-MIB", "zoneEnforcedZoneBroadcast"), ("CISCO-ZS-MIB", "zoneEnforcedZoneMemberNumber"), ("CISCO-ZS-MIB", "zoneEnforcedZoneMemberFormat"), ("CISCO-ZS-MIB", "zoneEnforcedZoneMemberID"), ("CISCO-ZS-MIB", "zoneEnforcedZoneMemberLunID"), ("CISCO-ZS-MIB", "zoneMergeFailRecoverSpinLock"), ("CISCO-ZS-MIB", "zoneMergeFailRecoverInterface"), ("CISCO-ZS-MIB", "zoneMergeFailRecoverVsan"), ("CISCO-ZS-MIB", "zoneMergeFailRecoverOper"), ("CISCO-ZS-MIB", "zoneMergeFailRecoverResult"), ("CISCO-ZS-MIB", "zoneCopyActiveToFullOnVsan"), ("CISCO-ZS-MIB", "zoneDbClearDb"), ("CISCO-ZS-MIB", "zoneDbEnforcedEqualsLocal"), ("CISCO-ZS-MIB", "zoneCopyProto"), ("CISCO-ZS-MIB", "zoneCopyDestFileType"), ("CISCO-ZS-MIB", "zoneCopyServerAddrType"), ("CISCO-ZS-MIB", "zoneCopyServerAddr"), ("CISCO-ZS-MIB", "zoneCopyDestFileName"), ("CISCO-ZS-MIB", "zoneCopyUserName"), ("CISCO-ZS-MIB", "zoneCopyUserPassword"), ("CISCO-ZS-MIB", "zoneCopyStartCopy"), ("CISCO-ZS-MIB", "zoneCopyState"), ("CISCO-ZS-MIB", "zoneCopyRowStatus"), ("CISCO-ZS-MIB", "zoneZoneSetDistributeVsan"), ("CISCO-ZS-MIB", "zoneZoneSetDistributeResult"), ("CISCO-ZS-MIB", "zoneZoneSetDistributeFailReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zoneConfigurationGroup5 = zoneConfigurationGroup5.setStatus('deprecated')
if mibBuilder.loadTexts: zoneConfigurationGroup5.setDescription('A collection of objects for displaying and configuring Zone Membership and deleting the local zone server database.')
zoneConfigurationGroup6 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 294, 2, 2, 13)).setObjects(("CISCO-ZS-MIB", "zoneSetPropagationMode"), ("CISCO-ZS-MIB", "zoneDefaultZoneBehaviour"), ("CISCO-ZS-MIB", "zoneDefaultZoneReadOnly"), ("CISCO-ZS-MIB", "zoneDefaultZoneQos"), ("CISCO-ZS-MIB", "zoneDefaultZoneQosPriority"), ("CISCO-ZS-MIB", "zoneDefaultZoneBroadcast"), ("CISCO-ZS-MIB", "zoneSetNumber"), ("CISCO-ZS-MIB", "zoneSetName"), ("CISCO-ZS-MIB", "zoneSetZoneList"), ("CISCO-ZS-MIB", "zoneSetLastChange"), ("CISCO-ZS-MIB", "zoneSetRowStatus"), ("CISCO-ZS-MIB", "zoneSetClone"), ("CISCO-ZS-MIB", "zoneSetActivate"), ("CISCO-ZS-MIB", "zoneSetActivateResult"), ("CISCO-ZS-MIB", "zoneSetDeActivate"), ("CISCO-ZS-MIB", "zoneSetActivateRowStatus"), ("CISCO-ZS-MIB", "zoneSetFailCause"), ("CISCO-ZS-MIB", "zoneSetFailDomId"), ("CISCO-ZS-MIB", "zoneNumber"), ("CISCO-ZS-MIB", "zoneName"), ("CISCO-ZS-MIB", "zoneMemberList"), ("CISCO-ZS-MIB", "zoneAliasList"), ("CISCO-ZS-MIB", "zoneLastChange"), ("CISCO-ZS-MIB", "zoneRowStatus"), ("CISCO-ZS-MIB", "zoneReadOnly"), ("CISCO-ZS-MIB", "zoneQos"), ("CISCO-ZS-MIB", "zoneQosPriority"), ("CISCO-ZS-MIB", "zoneBroadcast"), ("CISCO-ZS-MIB", "zoneClone"), ("CISCO-ZS-MIB", "zoneAliasNumber"), ("CISCO-ZS-MIB", "zoneAliasName"), ("CISCO-ZS-MIB", "zoneAliasMemberList"), ("CISCO-ZS-MIB", "zoneAliasRowStatus"), ("CISCO-ZS-MIB", "zoneAliasLastChange"), ("CISCO-ZS-MIB", "zoneAliasClone"), ("CISCO-ZS-MIB", "zoneMemberNumber"), ("CISCO-ZS-MIB", "zoneMemberFormat"), ("CISCO-ZS-MIB", "zoneMemberID"), ("CISCO-ZS-MIB", "zoneMemberLunID"), ("CISCO-ZS-MIB", "zoneMemberRowStatus"), ("CISCO-ZS-MIB", "zoneEnforcedZoneSetNumber"), ("CISCO-ZS-MIB", "zoneEnforcedZoneSetName"), ("CISCO-ZS-MIB", "zoneEnforcedZoneSetZoneList"), ("CISCO-ZS-MIB", "zoneEnforcedZoneSetActivateTime"), ("CISCO-ZS-MIB", "zoneEnforcedZoneNumber"), ("CISCO-ZS-MIB", "zoneEnforcedZoneName"), ("CISCO-ZS-MIB", "zoneEnforcedZoneMemberList"), ("CISCO-ZS-MIB", "zoneEnforcedZoneAliasList"), ("CISCO-ZS-MIB", "zoneEnforcedZoneActivateTime"), ("CISCO-ZS-MIB", "zoneEnforcedZoneReadOnly"), ("CISCO-ZS-MIB", "zoneEnforcedZoneQos"), ("CISCO-ZS-MIB", "zoneEnforcedZoneQosPriority"), ("CISCO-ZS-MIB", "zoneEnforcedZoneBroadcast"), ("CISCO-ZS-MIB", "zoneEnforcedZoneMemberNumber"), ("CISCO-ZS-MIB", "zoneEnforcedZoneMemberFormat"), ("CISCO-ZS-MIB", "zoneEnforcedZoneMemberID"), ("CISCO-ZS-MIB", "zoneEnforcedZoneMemberLunID"), ("CISCO-ZS-MIB", "zoneMergeFailRecoverSpinLock"), ("CISCO-ZS-MIB", "zoneMergeFailRecoverInterface"), ("CISCO-ZS-MIB", "zoneMergeFailRecoverVsan"), ("CISCO-ZS-MIB", "zoneMergeFailRecoverOper"), ("CISCO-ZS-MIB", "zoneMergeFailRecoverResult"), ("CISCO-ZS-MIB", "zoneCopyActiveToFullOnVsan"), ("CISCO-ZS-MIB", "zoneDbClearDb"), ("CISCO-ZS-MIB", "zoneDbEnforcedEqualsLocal"), ("CISCO-ZS-MIB", "zoneDbHardZoningEnabled"), ("CISCO-ZS-MIB", "zoneCopyProto"), ("CISCO-ZS-MIB", "zoneCopyDestFileType"), ("CISCO-ZS-MIB", "zoneCopyServerAddrType"), ("CISCO-ZS-MIB", "zoneCopyServerAddr"), ("CISCO-ZS-MIB", "zoneCopyDestFileName"), ("CISCO-ZS-MIB", "zoneCopyUserName"), ("CISCO-ZS-MIB", "zoneCopyUserPassword"), ("CISCO-ZS-MIB", "zoneCopyStartCopy"), ("CISCO-ZS-MIB", "zoneCopyState"), ("CISCO-ZS-MIB", "zoneCopyRowStatus"), ("CISCO-ZS-MIB", "zoneZoneSetDistributeVsan"), ("CISCO-ZS-MIB", "zoneZoneSetDistributeResult"), ("CISCO-ZS-MIB", "zoneZoneSetDistributeFailReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zoneConfigurationGroup6 = zoneConfigurationGroup6.setStatus('deprecated')
if mibBuilder.loadTexts: zoneConfigurationGroup6.setDescription('A collection of objects for displaying and configuring Zone Membership and deleting the local zone server database.')
zoneNotificationGroup2 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 294, 2, 2, 14)).setObjects(("CISCO-ZS-MIB", "zoneServiceReqRejNotify"), ("CISCO-ZS-MIB", "zoneMergeFailureNotify"), ("CISCO-ZS-MIB", "zoneMergeSuccessNotify"), ("CISCO-ZS-MIB", "zoneDefZoneBehaviourChngNotify"), ("CISCO-ZS-MIB", "zoneUnsuppMemInIntOpModeNotify"), ("CISCO-ZS-MIB", "zoneActivateNotify"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zoneNotificationGroup2 = zoneNotificationGroup2.setStatus('current')
if mibBuilder.loadTexts: zoneNotificationGroup2.setDescription('A collection of notification(s) for monitoring Zone Server request rejection, zone merge failures and successes and default zoning behavioural changes.')
zoneNotificationControlGroup1Sup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 294, 2, 2, 15)).setObjects(("CISCO-ZS-MIB", "zoneSwitchWwn"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zoneNotificationControlGroup1Sup1 = zoneNotificationControlGroup1Sup1.setStatus('current')
if mibBuilder.loadTexts: zoneNotificationControlGroup1Sup1.setDescription('A group that supplements zoneNotificationControlGroup1 with additional object(s).')
zoneConfigGroupSup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 294, 2, 2, 16)).setObjects(("CISCO-ZS-MIB", "zoneSetZoneListBmap4k"), ("CISCO-ZS-MIB", "zoneSetZoneListBmap6k"), ("CISCO-ZS-MIB", "zoneSetZoneListBmap8k"), ("CISCO-ZS-MIB", "zoneSetEnforcedZoneListBmap4k"), ("CISCO-ZS-MIB", "zoneSetEnforcedZoneListBmap6k"), ("CISCO-ZS-MIB", "zoneSetEnforcedZoneListBmap8k"), ("CISCO-ZS-MIB", "zoneCompactFirst2k"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zoneConfigGroupSup1 = zoneConfigGroupSup1.setStatus('current')
if mibBuilder.loadTexts: zoneConfigGroupSup1.setDescription('A collection of objects to associate zones to zonesets and facilitate compaction of first 2k zones associated with zonesets.')
zoneNotificationControlGroup1Sup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 294, 2, 2, 17)).setObjects(("CISCO-ZS-MIB", "zoneCompactVsan"), ("CISCO-ZS-MIB", "zoneMergeFailureObject"), ("CISCO-ZS-MIB", "zoneMergeFailureReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zoneNotificationControlGroup1Sup2 = zoneNotificationControlGroup1Sup2.setStatus('current')
if mibBuilder.loadTexts: zoneNotificationControlGroup1Sup2.setDescription('A group that supplements zoneNotificationControlGroup1 with additional notification information object(s).')
zoneNotificationGroup2Sup1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 294, 2, 2, 18)).setObjects(("CISCO-ZS-MIB", "zoneCompactNotify"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zoneNotificationGroup2Sup1 = zoneNotificationGroup2Sup1.setStatus('current')
if mibBuilder.loadTexts: zoneNotificationGroup2Sup1.setDescription('A group that supplements zoneNotificationGroup2 with additional notification(s).')
zoneConfigGroupSup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 294, 2, 2, 19)).setObjects(("CISCO-ZS-MIB", "zoneCopyActToFullSpinLock"), ("CISCO-ZS-MIB", "zoneCopyActToFullMode"), ("CISCO-ZS-MIB", "zoneCopyActToFullVsan"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zoneConfigGroupSup2 = zoneConfigGroupSup2.setStatus('current')
if mibBuilder.loadTexts: zoneConfigGroupSup2.setDescription('A collection of objects to copy active zonesets to full zonesets on a VSAN.')
zoneConfigurationGroup7 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 294, 2, 2, 20)).setObjects(("CISCO-ZS-MIB", "zoneSetPropagationMode"), ("CISCO-ZS-MIB", "zoneDefaultZoneBehaviour"), ("CISCO-ZS-MIB", "zoneDefaultZoneReadOnly"), ("CISCO-ZS-MIB", "zoneDefaultZoneQos"), ("CISCO-ZS-MIB", "zoneDefaultZoneQosPriority"), ("CISCO-ZS-MIB", "zoneDefaultZoneBroadcast"), ("CISCO-ZS-MIB", "zoneSetNumber"), ("CISCO-ZS-MIB", "zoneSetName"), ("CISCO-ZS-MIB", "zoneSetZoneList"), ("CISCO-ZS-MIB", "zoneSetLastChange"), ("CISCO-ZS-MIB", "zoneSetRowStatus"), ("CISCO-ZS-MIB", "zoneSetClone"), ("CISCO-ZS-MIB", "zoneSetActivate"), ("CISCO-ZS-MIB", "zoneSetActivateResult"), ("CISCO-ZS-MIB", "zoneSetDeActivate"), ("CISCO-ZS-MIB", "zoneSetActivateRowStatus"), ("CISCO-ZS-MIB", "zoneSetFailCause"), ("CISCO-ZS-MIB", "zoneSetFailDomId"), ("CISCO-ZS-MIB", "zoneNumber"), ("CISCO-ZS-MIB", "zoneName"), ("CISCO-ZS-MIB", "zoneMemberList"), ("CISCO-ZS-MIB", "zoneAliasList"), ("CISCO-ZS-MIB", "zoneLastChange"), ("CISCO-ZS-MIB", "zoneRowStatus"), ("CISCO-ZS-MIB", "zoneReadOnly"), ("CISCO-ZS-MIB", "zoneQos"), ("CISCO-ZS-MIB", "zoneQosPriority"), ("CISCO-ZS-MIB", "zoneBroadcast"), ("CISCO-ZS-MIB", "zoneClone"), ("CISCO-ZS-MIB", "zoneAliasNumber"), ("CISCO-ZS-MIB", "zoneAliasName"), ("CISCO-ZS-MIB", "zoneAliasMemberList"), ("CISCO-ZS-MIB", "zoneAliasRowStatus"), ("CISCO-ZS-MIB", "zoneAliasLastChange"), ("CISCO-ZS-MIB", "zoneAliasClone"), ("CISCO-ZS-MIB", "zoneMemberNumber"), ("CISCO-ZS-MIB", "zoneMemberFormat"), ("CISCO-ZS-MIB", "zoneMemberID"), ("CISCO-ZS-MIB", "zoneMemberLunID"), ("CISCO-ZS-MIB", "zoneMemberRowStatus"), ("CISCO-ZS-MIB", "zoneEnforcedZoneSetNumber"), ("CISCO-ZS-MIB", "zoneEnforcedZoneSetName"), ("CISCO-ZS-MIB", "zoneEnforcedZoneSetZoneList"), ("CISCO-ZS-MIB", "zoneEnforcedZoneSetActivateTime"), ("CISCO-ZS-MIB", "zoneEnforcedZoneNumber"), ("CISCO-ZS-MIB", "zoneEnforcedZoneName"), ("CISCO-ZS-MIB", "zoneEnforcedZoneMemberList"), ("CISCO-ZS-MIB", "zoneEnforcedZoneAliasList"), ("CISCO-ZS-MIB", "zoneEnforcedZoneActivateTime"), ("CISCO-ZS-MIB", "zoneEnforcedZoneReadOnly"), ("CISCO-ZS-MIB", "zoneEnforcedZoneQos"), ("CISCO-ZS-MIB", "zoneEnforcedZoneQosPriority"), ("CISCO-ZS-MIB", "zoneEnforcedZoneBroadcast"), ("CISCO-ZS-MIB", "zoneEnforcedZoneMemberNumber"), ("CISCO-ZS-MIB", "zoneEnforcedZoneMemberFormat"), ("CISCO-ZS-MIB", "zoneEnforcedZoneMemberID"), ("CISCO-ZS-MIB", "zoneEnforcedZoneMemberLunID"), ("CISCO-ZS-MIB", "zoneMergeFailRecoverSpinLock"), ("CISCO-ZS-MIB", "zoneMergeFailRecoverInterface"), ("CISCO-ZS-MIB", "zoneMergeFailRecoverVsan"), ("CISCO-ZS-MIB", "zoneMergeFailRecoverOper"), ("CISCO-ZS-MIB", "zoneMergeFailRecoverResult"), ("CISCO-ZS-MIB", "zoneDbClearDb"), ("CISCO-ZS-MIB", "zoneDbEnforcedEqualsLocal"), ("CISCO-ZS-MIB", "zoneDbHardZoningEnabled"), ("CISCO-ZS-MIB", "zoneCopyProto"), ("CISCO-ZS-MIB", "zoneCopyDestFileType"), ("CISCO-ZS-MIB", "zoneCopyServerAddrType"), ("CISCO-ZS-MIB", "zoneCopyServerAddr"), ("CISCO-ZS-MIB", "zoneCopyDestFileName"), ("CISCO-ZS-MIB", "zoneCopyUserName"), ("CISCO-ZS-MIB", "zoneCopyUserPassword"), ("CISCO-ZS-MIB", "zoneCopyStartCopy"), ("CISCO-ZS-MIB", "zoneCopyState"), ("CISCO-ZS-MIB", "zoneCopyRowStatus"), ("CISCO-ZS-MIB", "zoneZoneSetDistributeVsan"), ("CISCO-ZS-MIB", "zoneZoneSetDistributeResult"), ("CISCO-ZS-MIB", "zoneZoneSetDistributeFailReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zoneConfigurationGroup7 = zoneConfigurationGroup7.setStatus('current')
if mibBuilder.loadTexts: zoneConfigurationGroup7.setDescription('A collection of objects for displaying and configuring Zone Membership and deleting the local zone server database.')
mibBuilder.exportSymbols("CISCO-ZS-MIB", zoneCopyDestFileType=zoneCopyDestFileType, zoneEntry=zoneEntry, zoneEnforcedZoneMemberFormat=zoneEnforcedZoneMemberFormat, zoneDefaultZoneReadOnly=zoneDefaultZoneReadOnly, zoneSetZoneList=zoneSetZoneList, zoneLunNum=zoneLunNum, zoneEnforcedZoneMemberTable=zoneEnforcedZoneMemberTable, zoneServerMIBCompliance=zoneServerMIBCompliance, zoneCopyActToFullVsan=zoneCopyActToFullVsan, zoneDbHardZoningEnabled=zoneDbHardZoningEnabled, zoneDefaultZoneBroadcast=zoneDefaultZoneBroadcast, zoneSetEntry=zoneSetEntry, zoneCopyUserName=zoneCopyUserName, zoneLunStatsTable=zoneLunStatsTable, zoneStatsTable=zoneStatsTable, zoneDefaultZoneQosPriority=zoneDefaultZoneQosPriority, zoneCopyProto=zoneCopyProto, zoneTxMergeReqs=zoneTxMergeReqs, zoneServerMIBComplianceRev8=zoneServerMIBComplianceRev8, zoneDefaultZoneTable=zoneDefaultZoneTable, zoneCompactNotify=zoneCompactNotify, zoneAliasName=zoneAliasName, zoneServiceRejReasonCode=zoneServiceRejReasonCode, zoneCompactVsan=zoneCompactVsan, zoneConfigurationGroup1=zoneConfigurationGroup1, zoneDefaultZoneQos=zoneDefaultZoneQos, zoneSetName=zoneSetName, zoneConfigurationGroup3=zoneConfigurationGroup3, zoneMemberFormat=zoneMemberFormat, zoneConfigGroupSup2=zoneConfigGroupSup2, zoneNotificationControlGroup1=zoneNotificationControlGroup1, zoneLastChange=zoneLastChange, zoneMergeFailureNotify=zoneMergeFailureNotify, zoneEnforcedZoneAliasList=zoneEnforcedZoneAliasList, zoneServerMIBCompliance1=zoneServerMIBCompliance1, zoneEnforcedZoneMemberLunID=zoneEnforcedZoneMemberLunID, zoneCompactFirst2k=zoneCompactFirst2k, zoneDbEntry=zoneDbEntry, zoneNotification=zoneNotification, zoneCompactEntry=zoneCompactEntry, zoneConfiguration=zoneConfiguration, zoneEnforcedZoneAliasEntry=zoneEnforcedZoneAliasEntry, zoneLunRxRepLunReqs=zoneLunRxRepLunReqs, zoneMergeFailRecoverResult=zoneMergeFailRecoverResult, zoneLunRxSenseReqs=zoneLunRxSenseReqs, zoneRoZoneLunNum=zoneRoZoneLunNum, zoneAliasList=zoneAliasList, zoneMergeSuccessNotifyEnable=zoneMergeSuccessNotifyEnable, zoneMemberID=zoneMemberID, zoneEnforcedZoneQos=zoneEnforcedZoneQos, zoneSetEnforcedZoneListBmap8k=zoneSetEnforcedZoneListBmap8k, zoneUnsuppMemInIntOpModeNotify=zoneUnsuppMemInIntOpModeNotify, ZoneMergeFailCause=ZoneMergeFailCause, zoneNotificationGroup2=zoneNotificationGroup2, zoneVsanId=zoneVsanId, zoneCopyActiveToFullOnVsan=zoneCopyActiveToFullOnVsan, zoneSetActivateRowStatus=zoneSetActivateRowStatus, zoneEnforcedZoneReadOnly=zoneEnforcedZoneReadOnly, zoneSetZoneListTable=zoneSetZoneListTable, zoneNotificationGroup1=zoneNotificationGroup1, zoneLunStatsEntry=zoneLunStatsEntry, ciscoZsMIB=ciscoZsMIB, FcList=FcList, zoneSetActivateTable=zoneSetActivateTable, zoneLunRxOtherCmds=zoneLunRxOtherCmds, zoneTxGS3Rejects=zoneTxGS3Rejects, zoneSetFailCause=zoneSetFailCause, zoneAliasTable=zoneAliasTable, zoneMemberTypeIndex=zoneMemberTypeIndex, zoneMergeFailRecoverVsan=zoneMergeFailRecoverVsan, zoneMergeFailRecoverSpinLock=zoneMergeFailRecoverSpinLock, zoneEnforcedZoneBroadcast=zoneEnforcedZoneBroadcast, zoneMergeFailRecoverInterface=zoneMergeFailRecoverInterface, zoneNotificationControlGroup=zoneNotificationControlGroup, zoneServiceRejReasonCodeExp=zoneServiceRejReasonCodeExp, zoneTxChangeAccepts=zoneTxChangeAccepts, zoneSetEnforcedZoneListBmap6k=zoneSetEnforcedZoneListBmap6k, zoneCopyServerAddr=zoneCopyServerAddr, zoneCopyActToFullSpinLock=zoneCopyActToFullSpinLock, zoneTable=zoneTable, zoneSetPropagationMode=zoneSetPropagationMode, zoneMemberEntry=zoneMemberEntry, zoneInformation=zoneInformation, zoneAliasMemberList=zoneAliasMemberList, zoneSetActivate=zoneSetActivate, zoneTotalGS3Rejects=zoneTotalGS3Rejects, zoneRxMergeReqs=zoneRxMergeReqs, zoneCopyUserPassword=zoneCopyUserPassword, zoneEnforcedZoneAliasMemberList=zoneEnforcedZoneAliasMemberList, zoneSetLastChange=zoneSetLastChange, zoneBroadcast=zoneBroadcast, zoneNotificationControlGroup1Sup2=zoneNotificationControlGroup1Sup2, ZoneQosPriorityLevel=ZoneQosPriorityLevel, zoneEnforcedZoneActivateTime=zoneEnforcedZoneActivateTime, zoneSetFailDomId=zoneSetFailDomId, zoneServerMIBComplianceRev5=zoneServerMIBComplianceRev5, zoneLunSrcFcId=zoneLunSrcFcId, zoneSetPropagationTable=zoneSetPropagationTable, zoneIndex=zoneIndex, zoneRxMergeAccepts=zoneRxMergeAccepts, zoneQosPriority=zoneQosPriority, zoneConfigurationGroup7=zoneConfigurationGroup7, zoneServerMIBComplianceRev4=zoneServerMIBComplianceRev4, zoneMemberNumber=zoneMemberNumber, FcChangeProtoFailCause=FcChangeProtoFailCause, zoneMemberTable=zoneMemberTable, zoneEnforcedZoneSetNumber=zoneEnforcedZoneSetNumber, zoneActivateNotify=zoneActivateNotify, ZoneFileType=ZoneFileType, zoneNumber=zoneNumber, zoneLunTxInqDataNoLus=zoneLunTxInqDataNoLus, zoneTxMergeAccepts=zoneTxMergeAccepts, zoneEnforcedZoneSetZoneList=zoneEnforcedZoneSetZoneList, zoneServerMIBConformance=zoneServerMIBConformance, zoneCopyDestFileName=zoneCopyDestFileName, PYSNMP_MODULE_ID=ciscoZsMIB, zoneSetDeActivate=zoneSetDeActivate, zoneEnforcedZoneTable=zoneEnforcedZoneTable, zoneAliasLastChange=zoneAliasLastChange, zoneMergeFailRecoverOper=zoneMergeFailRecoverOper, zoneStatsEntry=zoneStatsEntry, zoneSetEnforcedZoneListTable=zoneSetEnforcedZoneListTable, zoneConfigurationGroup=zoneConfigurationGroup, zoneEnforcedZoneAliasNumber=zoneEnforcedZoneAliasNumber, zoneAliasClone=zoneAliasClone, zoneSetTable=zoneSetTable, zoneMemberLunID=zoneMemberLunID, zoneZoneSetDistributeFailReason=zoneZoneSetDistributeFailReason, zoneServerMIBComplianceRev7=zoneServerMIBComplianceRev7, ZoneCopyProtocol=ZoneCopyProtocol, zoneRowStatus=zoneRowStatus, zoneEnforcedZoneMemberList=zoneEnforcedZoneMemberList, zoneMergeSuccessVSANNum=zoneMergeSuccessVSANNum, zoneRxChangeReqs=zoneRxChangeReqs, zoneCopyState=zoneCopyState, zoneSetNumber=zoneSetNumber, zoneName=zoneName, zoneReadOnly=zoneReadOnly, zoneMergeFailureObject=zoneMergeFailureObject, zoneNotificationGroup=zoneNotificationGroup, zoneSetEnforcedZoneListEntry=zoneSetEnforcedZoneListEntry, zoneZoneSetDistributeResult=zoneZoneSetDistributeResult, zoneAliasIndex=zoneAliasIndex, zoneQos=zoneQos, zoneTxChangeReqs=zoneTxChangeReqs, zoneRxChangeAccepts=zoneRxChangeAccepts, zoneRoZoneStatsEntry=zoneRoZoneStatsEntry, zoneServerMIBComplianceRev2=zoneServerMIBComplianceRev2, zoneSetZoneListEntry=zoneSetZoneListEntry, zoneEnforcedZoneSetActivateTime=zoneEnforcedZoneSetActivateTime, zoneServiceReqRejNotifyEnable=zoneServiceReqRejNotifyEnable, zoneDbEnforcedEqualsLocal=zoneDbEnforcedEqualsLocal, zoneDbTable=zoneDbTable, zoneRoZoneStatsTable=zoneRoZoneStatsTable, zoneAliasRowStatus=zoneAliasRowStatus, zoneServerMIBComplianceRev6=zoneServerMIBComplianceRev6, zoneServiceReqRejNotify=zoneServiceReqRejNotify, ciscoZoningMIBObjects=ciscoZoningMIBObjects, zoneRxGS3Reqs=zoneRxGS3Reqs, zoneLunDstFcId=zoneLunDstFcId, zoneLunStatsGroup=zoneLunStatsGroup, zoneSetPropagationEntry=zoneSetPropagationEntry, zoneEnforcedZoneAliasName=zoneEnforcedZoneAliasName, zoneUnsuppMemInIntOpNotifyEnable=zoneUnsuppMemInIntOpNotifyEnable, FcZoneServerRejReasonExpl=FcZoneServerRejReasonExpl, zoneMergeFailureNotifyEnable=zoneMergeFailureNotifyEnable, zoneSetActivateEntry=zoneSetActivateEntry, zoneCopyRowStatus=zoneCopyRowStatus, zoneSetZoneListBmap4k=zoneSetZoneListBmap4k, zoneEnforcedZoneMemberNumber=zoneEnforcedZoneMemberNumber, zoneClone=zoneClone, zoneConfigurationGroup4=zoneConfigurationGroup4, zoneServerMIBGroups=zoneServerMIBGroups, zoneDbClearDb=zoneDbClearDb, zoneMemberParentIndex=zoneMemberParentIndex, zoneConfigurationGroup5=zoneConfigurationGroup5, zoneSetActivateResult=zoneSetActivateResult, zoneServerMIBComplianceRev3=zoneServerMIBComplianceRev3, zoneCopyEntry=zoneCopyEntry, zoneDefZoneBehaviourChngNotify=zoneDefZoneBehaviourChngNotify, zoneEnforcedZoneMemberEntry=zoneEnforcedZoneMemberEntry, zoneSetRowStatus=zoneSetRowStatus, ZoneMemberType=ZoneMemberType, zoneRoZoneTxDataProts=zoneRoZoneTxDataProts, zoneConfigurationGroup2=zoneConfigurationGroup2, zoneSetIndex=zoneSetIndex, zoneCopyTable=zoneCopyTable, zoneConfigurationGroup6=zoneConfigurationGroup6, zoneSetEnforcedZoneListBmap4k=zoneSetEnforcedZoneListBmap4k, zoneEnforcedZoneMemberID=zoneEnforcedZoneMemberID, zoneEnforcedZoneEntry=zoneEnforcedZoneEntry, zoneSetZoneListBmap6k=zoneSetZoneListBmap6k, zoneMergeFailureVSANNum=zoneMergeFailureVSANNum, zoneLunRxInqReqs=zoneLunRxInqReqs, zoneNotifications=zoneNotifications, zoneMemberIndex=zoneMemberIndex, zoneEnforcedZoneSetName=zoneEnforcedZoneSetName, zoneCopyStartCopy=zoneCopyStartCopy, zoneConfigGroupSup1=zoneConfigGroupSup1, zoneRoZoneSrcFcId=zoneRoZoneSrcFcId, zoneDefaultZoneEntry=zoneDefaultZoneEntry, zoneSetClone=zoneSetClone, zoneEnforcedZoneSetEntry=zoneEnforcedZoneSetEntry, zoneEnforcedZoneName=zoneEnforcedZoneName, zoneMergeSuccessNotify=zoneMergeSuccessNotify, zoneAliasEntry=zoneAliasEntry, zoneStatisticsGroup=zoneStatisticsGroup, zoneEnforcedZoneQosPriority=zoneEnforcedZoneQosPriority, zoneEnforcedZoneAliasTable=zoneEnforcedZoneAliasTable, zoneEnforcedZoneNumber=zoneEnforcedZoneNumber, zoneServerMIBCompliances=zoneServerMIBCompliances, zoneEnforcedZoneSetTable=zoneEnforcedZoneSetTable, zoneLunTxIllegalReqs=zoneLunTxIllegalReqs, zoneCompactTable=zoneCompactTable, zoneRoZoneDstFcId=zoneRoZoneDstFcId, zoneMemberList=zoneMemberList, zoneMemberRowStatus=zoneMemberRowStatus, zoneDefaultZoneBehaviour=zoneDefaultZoneBehaviour, zoneCopyActToFullMode=zoneCopyActToFullMode, zoneZoneSetDistributeVsan=zoneZoneSetDistributeVsan, zoneNotificationControlGroup1Sup1=zoneNotificationControlGroup1Sup1, zoneSetZoneListBmap8k=zoneSetZoneListBmap8k, zoneAliasNumber=zoneAliasNumber, zoneMergeFailureReason=zoneMergeFailureReason, zoneDefZoneBehvrChngNotifyEnable=zoneDefZoneBehvrChngNotifyEnable, zoneSwitchWwn=zoneSwitchWwn, zoneCopyServerAddrType=zoneCopyServerAddrType, zoneNotificationGroup2Sup1=zoneNotificationGroup2Sup1, zoneStats=zoneStats)
