#
# PySNMP MIB module APPN-TRAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APPN-TRAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:24:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
dlurDlusSessnStatus, = mibBuilder.importSymbols("APPN-DLUR-MIB", "dlurDlusSessnStatus")
appnObjects, appnIsInP2SFmdPius, appnCompliances, appnIsInS2PNonFmdPius, appnIsInS2PFmdBytes, appnIsInS2PNonFmdBytes, appnIsInP2SFmdBytes, appnIsInP2SNonFmdPius, appnIsInP2SNonFmdBytes, appnIsInSessUpTime, appnLocalTgOperational, appnLocalTgCpCpSession, appnLsOperState, appnGroups, appnIsInS2PFmdPius, appnPortOperState, appnMIB = mibBuilder.importSymbols("APPN-MIB", "appnObjects", "appnIsInP2SFmdPius", "appnCompliances", "appnIsInS2PNonFmdPius", "appnIsInS2PFmdBytes", "appnIsInS2PNonFmdBytes", "appnIsInP2SFmdBytes", "appnIsInP2SNonFmdPius", "appnIsInP2SNonFmdBytes", "appnIsInSessUpTime", "appnLocalTgOperational", "appnLocalTgCpCpSession", "appnLsOperState", "appnGroups", "appnIsInS2PFmdPius", "appnPortOperState", "appnMIB")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Bits, MibIdentifier, IpAddress, Unsigned32, Integer32, ModuleIdentity, ObjectIdentity, Counter64, Counter32, NotificationType, TimeTicks, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Bits", "MibIdentifier", "IpAddress", "Unsigned32", "Integer32", "ModuleIdentity", "ObjectIdentity", "Counter64", "Counter32", "NotificationType", "TimeTicks", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
appnTrapMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 34, 4, 0))
if mibBuilder.loadTexts: appnTrapMIB.setLastUpdated('9808310000Z')
if mibBuilder.loadTexts: appnTrapMIB.setOrganization('IETF SNA NAU MIB WG / AIW APPN MIBs SIG')
if mibBuilder.loadTexts: appnTrapMIB.setContactInfo(' Bob Clouston Cisco Systems 7025 Kit Creek Road P.O. Box 14987 Research Triangle Park, NC 27709, USA Tel: 1 919 472 2333 E-mail: clouston@cisco.com Bob Moore IBM Corporation 4205 S. Miami Boulevard BRQA/501 P.O. Box 12195 Research Triangle Park, NC 27709, USA Tel: 1 919 254 4436 E-mail: remoore@us.ibm.com ')
if mibBuilder.loadTexts: appnTrapMIB.setDescription('This MIB module defines notifications to be generated by network devices with APPN capabilities. It presupposes support for the APPN MIB. It also presupposes support for the DLUR MIB for implementations that support the DLUR-related groups.')
appnIsrAccountingDataTrap = NotificationType((1, 3, 6, 1, 2, 1, 34, 4, 0, 1)).setObjects(("APPN-MIB", "appnIsInP2SFmdPius"), ("APPN-MIB", "appnIsInS2PFmdPius"), ("APPN-MIB", "appnIsInP2SNonFmdPius"), ("APPN-MIB", "appnIsInS2PNonFmdPius"), ("APPN-MIB", "appnIsInP2SFmdBytes"), ("APPN-MIB", "appnIsInS2PFmdBytes"), ("APPN-MIB", "appnIsInP2SNonFmdBytes"), ("APPN-MIB", "appnIsInS2PNonFmdBytes"), ("APPN-MIB", "appnIsInSessUpTime"))
if mibBuilder.loadTexts: appnIsrAccountingDataTrap.setStatus('current')
if mibBuilder.loadTexts: appnIsrAccountingDataTrap.setDescription('When it has been enabled, this notification is generated by an APPN node whenever an ISR session passing through the node is taken down, regardless of whether the session went down normally or abnormally. Its purpose is to allow a management application (primarily an accounting application) that is monitoring the ISR counts to receive the final values of these counts, so that the application can properly account for the amounts the counts were incremented since the last time the application polled them. The appnIsInSessUpTime object provides the total amount of time that the session was active. This notification is not a substitute for polling the ISR counts. In particular, the count values reported in this notification cannot be assumed to be the complete totals for the life of the session, since they may have wrapped while the session was up. The session to which the objects in this notification apply is identified by the fully qualified CP name and PCID that make up the table index. An instance of this notification will contain exactly one instance of each of its objects, and these objects will all belong to the same conceptual row of the appnIsInTable. Generation of this notification is controlled by the same object in the APPN MIB, appnIsInGlobeCtrAdminStatus, that controls whether the count objects themselves are being incremented.')
appnLocalTgOperStateChangeTrap = NotificationType((1, 3, 6, 1, 2, 1, 34, 4, 0, 2)).setObjects(("APPN-TRAP-MIB", "appnLocalTgTableChanges"), ("APPN-MIB", "appnLocalTgOperational"))
if mibBuilder.loadTexts: appnLocalTgOperStateChangeTrap.setStatus('current')
if mibBuilder.loadTexts: appnLocalTgOperStateChangeTrap.setDescription("When it has been enabled, this notification makes it possible for an APPN topology application to get asynchronous notifications of local TG operational state changes, and thus to reduce the frequency with which it polls for these changes. This notification is sent whenever there is a change to the appnLocalTgOperational object in a row of the appnLocalTgTable. This notification is only sent for row creation if the row is created with a value of 'true' for appnLocalTgOperational. This notification is only sent for row deletion if the last value of appnLocalTgOperational was 'true'. In this case, the value of appnLocalTgOperational in the notification shall be 'false', since the deletion of a row indicates that the TG is no longer operational. The notification is more than a simple 'poll me now' indication. It carries both a count of local TG topology changes, and the current operational state itself. The count of changes allows an application to detect lost notifications, either when polling or upon receiving a subsequent notification, at which point it knows it must retrieve the entire appnLocalTgTable again. This is the same count as used in the appnLocalCpCpStateChangeTrap. A lost notification could indicate a local TG CP-CP session state change or an operational state change. Generation of this notification is controlled by the appnTrapControl object.")
appnLocalTgCpCpChangeTrap = NotificationType((1, 3, 6, 1, 2, 1, 34, 4, 0, 3)).setObjects(("APPN-TRAP-MIB", "appnLocalTgTableChanges"), ("APPN-MIB", "appnLocalTgCpCpSession"))
if mibBuilder.loadTexts: appnLocalTgCpCpChangeTrap.setStatus('current')
if mibBuilder.loadTexts: appnLocalTgCpCpChangeTrap.setDescription("When it has been enabled, this notification makes it possible for an APPN topology application to get asynchronous notifications of local TG control-point to control-point (CP-CP) session state changes, and thus to reduce the frequency with which it polls for these changes. This notification is sent whenever there is a change to the appnLocalTgCpCpSession object but NOT the appnLocalTgOperational object in a row of the appnLocalTgTable. This notification is never sent for appnLocalTgTable row creation or deletion. The notification is more than a simple 'poll me now' indication. It carries both a count of local TG topology changes, and the current CP-CP session state itself. The count of changes allows an application to detect lost notifications, either when polling or upon receiving a subsequent notification, at which point it knows it must retrieve the entire appnLocalTgTable again. This is the same count as used in the appnLocalTgOperStateChangeTrap. A lost notification could indicate a local TG CP-CP session state change or an operational state change. Generation of this notification is controlled by the appnTrapControl object.")
appnPortOperStateChangeTrap = NotificationType((1, 3, 6, 1, 2, 1, 34, 4, 0, 4)).setObjects(("APPN-TRAP-MIB", "appnPortTableChanges"), ("APPN-MIB", "appnPortOperState"))
if mibBuilder.loadTexts: appnPortOperStateChangeTrap.setStatus('current')
if mibBuilder.loadTexts: appnPortOperStateChangeTrap.setDescription("When it has been enabled, this notification makes it possible for an APPN topology application to get asynchronous notifications of port operational state changes, and thus to reduce the frequency with which it polls for these changes. This notification is only sent when a appnPortOperState has transitioned to a value of 'active' or 'inactive'. This notification is sent whenever there is a appnPortOperState object transition to 'inactive' or 'active' state in the appnPortTable. This notification is only sent for row creation if the row is created with a value of 'active' for appnPortOperState. This notification is only sent for row deletion if the last value of appnPortOperState was 'active'. In this case, the value of appnPortOperState in the notification shall be 'inactive', since the deletion of a row indicates that the port is no longer active. The notification is more than a simple 'poll me now' indication. It carries both a count of port table changes, and the operational state itself. The count of changes allows an application to detect lost notifications, either when polling or upon receiving a subsequent notification, at which point it knows it must retrieve the entire appnPortTable again. Generation of this notification is controlled by the appnTrapControl object.")
appnLsOperStateChangeTrap = NotificationType((1, 3, 6, 1, 2, 1, 34, 4, 0, 5)).setObjects(("APPN-TRAP-MIB", "appnLsTableChanges"), ("APPN-MIB", "appnLsOperState"))
if mibBuilder.loadTexts: appnLsOperStateChangeTrap.setStatus('current')
if mibBuilder.loadTexts: appnLsOperStateChangeTrap.setDescription("When it has been enabled, this notification makes it possible for an APPN topology application to get asynchronous notifications of link station operational state changes, and thus to reduce the frequency with which it polls for these changes. This notification is only sent when a appnLsOperState has transitioned to a value of 'active' or 'inactive'. This notification is sent whenever there is a appnLsOperState object transition to 'inactive' or 'active' state in the appnLsTable. This notification is only sent for row creation if the row is created with a value of 'active' for appnLsOperState. This notification is only sent for row deletion if the last value of appnLsOperState was 'active'. In this case, the value of appnLsOperState in the notification shall be 'inactive', since the deletion of a row indicates that the link station is no longer active. The notification is more than a simple 'poll me now' indication. It carries both a count of link station table changes, and the operational state itself. The count of changes allows an application to detect lost notifications, either when polling or upon receiving a subsequent notification, at which point it knows it must retrieve the entire appnLsTable again. Generation of this notification is controlled by the appnTrapControl object.")
dlurDlusStateChangeTrap = NotificationType((1, 3, 6, 1, 2, 1, 34, 4, 0, 6)).setObjects(("APPN-TRAP-MIB", "dlurDlusTableChanges"), ("APPN-DLUR-MIB", "dlurDlusSessnStatus"))
if mibBuilder.loadTexts: dlurDlusStateChangeTrap.setStatus('current')
if mibBuilder.loadTexts: dlurDlusStateChangeTrap.setDescription("When it has been enabled, this notification makes it possible for an APPN topology application to get asynchronous notifications of DLUR-DLUS session changes, and thus to reduce the frequency with which it polls for these changes. This notification is sent whenever there is a dlurDlusSessnStatus object transition to 'inactive' or 'active' state in the dlurDlusTable. This notification is only sent for row creation if the row is created with a value of 'active' for dlurDlusSessnStatus. This notification is only sent for row deletion if the last value of dlurDlusSessnStatus was 'active'. In this case, the value of dlurDlusSessnStatus in the notification shall be 'inactive', since the deletion of a row indicates that the session is no longer active. The notification is more than a simple 'poll me now' indication. It carries both a count of DLUR-DLUS table changes, and the session status itself. The count of changes allows an application to detect lost notifications, either when polling or upon receiving a subsequent notification, at which point it knows it must retrieve the entire dlurDlusTable again. Generation of this notification is controlled by the appnTrapControl object.")
appnTrapObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 34, 4, 1, 7))
appnTrapControl = MibScalar((1, 3, 6, 1, 2, 1, 34, 4, 1, 7, 1), Bits().clone(namedValues=NamedValues(("appnLocalTgOperStateChangeTrap", 0), ("appnLocalTgCpCpChangeTrap", 1), ("appnPortOperStateChangeTrap", 2), ("appnLsOperStateChangeTrap", 3), ("dlurDlusStateChangeTrap", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appnTrapControl.setStatus('current')
if mibBuilder.loadTexts: appnTrapControl.setDescription("An object to turn APPN notification generation on and off. Setting a notification type's bit to 1 enables generation of notifications of that type, subject to further filtering resulting from entries in the snmpNotificationMIB. Setting this bit to 0 disables generation of notifications of that type. Note that generation of the appnIsrAccountingDataTrap is controlled by the appnIsInGlobeCtrAdminStatus object in the APPN MIB: if counts of intermediate session traffic are being kept at all, then the notification is also enabled.")
appnLocalTgTableChanges = MibScalar((1, 3, 6, 1, 2, 1, 34, 4, 1, 7, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLocalTgTableChanges.setStatus('current')
if mibBuilder.loadTexts: appnLocalTgTableChanges.setDescription('A count of the number of times a row in the appnLocalTgTable has changed status since the APPN node was last reinitialized. This counter is incremented whenever a condition is detected that would cause a appnLocalTgOperStateChangeTrap or appnLocalTgCpCpChangeTrap notification to be sent, whether or not those notifications are enabled.')
appnPortTableChanges = MibScalar((1, 3, 6, 1, 2, 1, 34, 4, 1, 7, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnPortTableChanges.setStatus('current')
if mibBuilder.loadTexts: appnPortTableChanges.setDescription('A count of the number of times a row in the appnPortTable has changed status since the APPN node was last reinitialized. This counter is incremented whenever a condition is detected that would cause a appnPortOperStateChangeTrap notification to be sent, whether or not this notification is enabled.')
appnLsTableChanges = MibScalar((1, 3, 6, 1, 2, 1, 34, 4, 1, 7, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appnLsTableChanges.setStatus('current')
if mibBuilder.loadTexts: appnLsTableChanges.setDescription('A count of the number of times a row in the appnLsTable has changed status since the APPN node was last reinitialized. This counter is incremented whenever a condition is detected that would cause a appnLsOperStateChangeTrap notification to be sent, whether or not this notification is enabled.')
dlurDlusTableChanges = MibScalar((1, 3, 6, 1, 2, 1, 34, 4, 1, 7, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlurDlusTableChanges.setStatus('current')
if mibBuilder.loadTexts: dlurDlusTableChanges.setDescription('A count of the number of times a row in the dlurDlusTable has changed status since the APPN node was last reinitialized. This counter is incremented whenever a condition is detected that would cause a dlurDlusStateChangeTrap notification to be sent, whether or not this notification is enabled.')
appnTrapMibCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 34, 4, 3, 1, 2)).setObjects(("APPN-TRAP-MIB", "appnTrapMibIsrNotifGroup"), ("APPN-TRAP-MIB", "appnTrapMibTopoConfGroup"), ("APPN-TRAP-MIB", "appnTrapMibTopoNotifGroup"), ("APPN-TRAP-MIB", "appnTrapMibDlurConfGroup"), ("APPN-TRAP-MIB", "appnTrapMibDlurNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    appnTrapMibCompliance = appnTrapMibCompliance.setStatus('current')
if mibBuilder.loadTexts: appnTrapMibCompliance.setDescription('The compliance statement for the SNMP entities that implement the APPN-TRAP-MIB.')
appnTrapMibIsrNotifGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 34, 4, 3, 2, 21)).setObjects(("APPN-TRAP-MIB", "appnIsrAccountingDataTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    appnTrapMibIsrNotifGroup = appnTrapMibIsrNotifGroup.setStatus('current')
if mibBuilder.loadTexts: appnTrapMibIsrNotifGroup.setDescription("A notification for reporting the final values of the APPN MIB's ISR counters.")
appnTrapMibTopoConfGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 34, 4, 3, 2, 22)).setObjects(("APPN-TRAP-MIB", "appnTrapControl"), ("APPN-TRAP-MIB", "appnLocalTgTableChanges"), ("APPN-TRAP-MIB", "appnPortTableChanges"), ("APPN-TRAP-MIB", "appnLsTableChanges"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    appnTrapMibTopoConfGroup = appnTrapMibTopoConfGroup.setStatus('current')
if mibBuilder.loadTexts: appnTrapMibTopoConfGroup.setDescription('A collection of objects for reducing the polling associated with the local topology tables in the APPN MIB. Nodes that implement this group SHALL also implement the appnTrapMibTopoNotifGroup.')
appnTrapMibTopoNotifGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 34, 4, 3, 2, 23)).setObjects(("APPN-TRAP-MIB", "appnLocalTgOperStateChangeTrap"), ("APPN-TRAP-MIB", "appnLocalTgCpCpChangeTrap"), ("APPN-TRAP-MIB", "appnPortOperStateChangeTrap"), ("APPN-TRAP-MIB", "appnLsOperStateChangeTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    appnTrapMibTopoNotifGroup = appnTrapMibTopoNotifGroup.setStatus('current')
if mibBuilder.loadTexts: appnTrapMibTopoNotifGroup.setDescription('A collection of notifications for reducing the polling associated with the local topology tables in the APPN MIB. Nodes that implement this group SHALL also implement the appnTrapMibTopoConfGroup.')
appnTrapMibDlurConfGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 34, 4, 3, 2, 24)).setObjects(("APPN-TRAP-MIB", "appnTrapControl"), ("APPN-TRAP-MIB", "dlurDlusTableChanges"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    appnTrapMibDlurConfGroup = appnTrapMibDlurConfGroup.setStatus('current')
if mibBuilder.loadTexts: appnTrapMibDlurConfGroup.setDescription('A collection of objects for reducing the polling associated with the dlurDlusTable in the DLUR MIB. Nodes that implement this group SHALL also implement the appnTrapMibDlurNotifGroup.')
appnTrapMibDlurNotifGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 34, 4, 3, 2, 25)).setObjects(("APPN-TRAP-MIB", "dlurDlusStateChangeTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    appnTrapMibDlurNotifGroup = appnTrapMibDlurNotifGroup.setStatus('current')
if mibBuilder.loadTexts: appnTrapMibDlurNotifGroup.setDescription('A notification for reducing the polling associated with the dlurDlusTable in the DLUR MIB. Nodes that implement this group SHALL also implement the appnTrapMibDlurConfGroup.')
mibBuilder.exportSymbols("APPN-TRAP-MIB", appnLocalTgTableChanges=appnLocalTgTableChanges, appnIsrAccountingDataTrap=appnIsrAccountingDataTrap, appnTrapControl=appnTrapControl, PYSNMP_MODULE_ID=appnTrapMIB, appnTrapMibDlurNotifGroup=appnTrapMibDlurNotifGroup, appnTrapMibIsrNotifGroup=appnTrapMibIsrNotifGroup, appnPortTableChanges=appnPortTableChanges, appnPortOperStateChangeTrap=appnPortOperStateChangeTrap, appnTrapObjects=appnTrapObjects, appnLsTableChanges=appnLsTableChanges, appnTrapMibTopoConfGroup=appnTrapMibTopoConfGroup, appnLocalTgCpCpChangeTrap=appnLocalTgCpCpChangeTrap, dlurDlusTableChanges=dlurDlusTableChanges, appnLocalTgOperStateChangeTrap=appnLocalTgOperStateChangeTrap, appnTrapMIB=appnTrapMIB, appnTrapMibCompliance=appnTrapMibCompliance, appnLsOperStateChangeTrap=appnLsOperStateChangeTrap, appnTrapMibTopoNotifGroup=appnTrapMibTopoNotifGroup, appnTrapMibDlurConfGroup=appnTrapMibDlurConfGroup, dlurDlusStateChangeTrap=dlurDlusStateChangeTrap)
