#
# PySNMP MIB module TPT-PORT-MAPPING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TPT-PORT-MAPPING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:26:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, MibIdentifier, IpAddress, NotificationType, ObjectIdentity, ModuleIdentity, TimeTicks, Integer32, Counter32, Unsigned32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "MibIdentifier", "IpAddress", "NotificationType", "ObjectIdentity", "ModuleIdentity", "TimeTicks", "Integer32", "Counter32", "Unsigned32", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
tpt_tpa_objs, = mibBuilder.importSymbols("TPT-TPAMIBS-MIB", "tpt-tpa-objs")
tpt_port_mapping_objs = ModuleIdentity((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 16)).setLabel("tpt-port-mapping-objs")
tpt_port_mapping_objs.setRevisions(('2016-10-03 12:00', '2016-05-25 18:54',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: tpt_port_mapping_objs.setRevisionsDescriptions(('Fixed portMappingPhysicalVlanId to use Integer32 instead of INTEGER.', 'Updated copyright information. Minor MIB syntax fixes.',))
if mibBuilder.loadTexts: tpt_port_mapping_objs.setLastUpdated('201610031200Z')
if mibBuilder.loadTexts: tpt_port_mapping_objs.setOrganization('Trend Micro, Inc.')
if mibBuilder.loadTexts: tpt_port_mapping_objs.setContactInfo('www.trendmicro.com')
if mibBuilder.loadTexts: tpt_port_mapping_objs.setDescription("Configurable logical to physical port mapping on a device. Copyright (C) 2016 Trend Micro Incorporated. All Rights Reserved. Trend Micro makes no warranty of any kind with regard to this material, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose. Trend Micro shall not be liable for errors contained herein or for incidental or consequential damages in connection with the furnishing, performance, or use of this material. This document contains proprietary information, which is protected by copyright. No part of this document may be photocopied, reproduced, or translated into another language without the prior written consent of Trend Micro. The information is provided 'as is' without warranty of any kind and is subject to change without notice. The only warranties for Trend Micro products and services are set forth in the express warranty statements accompanying such products and services. Nothing herein should be construed as constituting an additional warranty. Trend Micro shall not be liable for technical or editorial errors or omissions contained herein. TippingPoint(R), the TippingPoint logo, and Digital Vaccine(R) are registered trademarks of Trend Micro. All other company and product names may be trademarks of their respective holders. All rights reserved. This document contains confidential information, trade secrets or both, which are the property of Trend Micro. No part of this documentation may be reproduced in any form or by any means or used to make any derivative work (such as translation, transformation, or adaptation) without written permission from Trend Micro or one of its subsidiaries. All other company and product names may be trademarks of their respective holders. ")
portMappingTable = MibTable((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 16, 1), )
if mibBuilder.loadTexts: portMappingTable.setStatus('current')
if mibBuilder.loadTexts: portMappingTable.setDescription('Table of logical slots/ports on the device and their mapping to the physical ports.')
portMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 16, 1, 1), ).setIndexNames((0, "TPT-PORT-MAPPING-MIB", "portMappingLogicalSlot"), (0, "TPT-PORT-MAPPING-MIB", "portMappingLogicalPort"))
if mibBuilder.loadTexts: portMappingEntry.setStatus('current')
if mibBuilder.loadTexts: portMappingEntry.setDescription('An entry in the slot/port table. Rows cannot be created or deleted.')
portMappingLogicalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 16, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMappingLogicalSlot.setStatus('current')
if mibBuilder.loadTexts: portMappingLogicalSlot.setDescription('Slot number for this logical port.')
portMappingLogicalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 16, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMappingLogicalPort.setStatus('current')
if mibBuilder.loadTexts: portMappingLogicalPort.setDescription('Port number for this logical port.')
portMappingLogicalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 16, 1, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMappingLogicalIfIndex.setStatus('current')
if mibBuilder.loadTexts: portMappingLogicalIfIndex.setDescription('The entry in the IF-MIB interface table that corresponds to this logical port.')
portMappingPhysicalSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 16, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMappingPhysicalSlot.setStatus('current')
if mibBuilder.loadTexts: portMappingPhysicalSlot.setDescription('Slot number for the mapped physical port.')
portMappingPhysicalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 16, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMappingPhysicalPort.setStatus('current')
if mibBuilder.loadTexts: portMappingPhysicalPort.setDescription('Port number for the mapped physical port.')
portMappingPhysicalIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 16, 1, 1, 6), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMappingPhysicalIfIndex.setStatus('current')
if mibBuilder.loadTexts: portMappingPhysicalIfIndex.setDescription('The entry in the IF-MIB interface table that corresponds to the mapped physical port.')
portMappingSegmentName = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 16, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMappingSegmentName.setStatus('obsolete')
if mibBuilder.loadTexts: portMappingSegmentName.setDescription('The name of the segment pertaining to this logical port.')
portMappingPhysicalVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 16, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMappingPhysicalVlanId.setStatus('current')
if mibBuilder.loadTexts: portMappingPhysicalVlanId.setDescription('The VLAN ID used on the physical port. 0 indicates the traffic is untagged or not applicable for this port.')
mibBuilder.exportSymbols("TPT-PORT-MAPPING-MIB", portMappingPhysicalVlanId=portMappingPhysicalVlanId, portMappingPhysicalIfIndex=portMappingPhysicalIfIndex, portMappingLogicalPort=portMappingLogicalPort, portMappingEntry=portMappingEntry, portMappingSegmentName=portMappingSegmentName, portMappingLogicalSlot=portMappingLogicalSlot, portMappingLogicalIfIndex=portMappingLogicalIfIndex, portMappingPhysicalPort=portMappingPhysicalPort, tpt_port_mapping_objs=tpt_port_mapping_objs, PYSNMP_MODULE_ID=tpt_port_mapping_objs, portMappingPhysicalSlot=portMappingPhysicalSlot, portMappingTable=portMappingTable)
