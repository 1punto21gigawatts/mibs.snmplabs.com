#
# PySNMP MIB module MARVELL-LBD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MARVELL-LBD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:09:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
rnd, = mibBuilder.importSymbols("RADLAN-MIB", "rnd")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Integer32, TimeTicks, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, ModuleIdentity, Counter32, iso, Unsigned32, MibIdentifier, Counter64, Bits, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Integer32", "TimeTicks", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "ModuleIdentity", "Counter32", "iso", "Unsigned32", "MibIdentifier", "Counter64", "Bits", "Gauge32")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
rlLbd = ModuleIdentity((1, 3, 6, 1, 4, 1, 89, 127))
rlLbd.setRevisions(('2007-11-07 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rlLbd.setRevisionsDescriptions(('Initial version of this MIB.',))
if mibBuilder.loadTexts: rlLbd.setLastUpdated('200711070000Z')
if mibBuilder.loadTexts: rlLbd.setOrganization('Marvell Semiconductor, Inc.')
if mibBuilder.loadTexts: rlLbd.setContactInfo('www.marvell.com')
if mibBuilder.loadTexts: rlLbd.setDescription('The private MIB module definition for Loopback Detection MIB.')
rlLbdEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 127, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlLbdEnable.setStatus('current')
if mibBuilder.loadTexts: rlLbdEnable.setDescription('Enable/Disable Loopback Detection in the switch.')
rlLbdDetectionInterval = MibScalar((1, 3, 6, 1, 4, 1, 89, 127, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 60))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlLbdDetectionInterval.setStatus('current')
if mibBuilder.loadTexts: rlLbdDetectionInterval.setDescription('The time in seconds that should pass between unicast LBD packets.')
rlLbdMode = MibScalar((1, 3, 6, 1, 4, 1, 89, 127, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("source-mac-addr", 1), ("base-mac-addr", 2), ("broadcast-mac-addr", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlLbdMode.setStatus('current')
if mibBuilder.loadTexts: rlLbdMode.setDescription('Loopback detection mode.')
rlLbdPortTable = MibTable((1, 3, 6, 1, 4, 1, 89, 127, 4), )
if mibBuilder.loadTexts: rlLbdPortTable.setStatus('current')
if mibBuilder.loadTexts: rlLbdPortTable.setDescription('The table contains Admin configuration and operational status per port.')
rlLbdPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 127, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: rlLbdPortEntry.setStatus('current')
if mibBuilder.loadTexts: rlLbdPortEntry.setDescription('Each entry represent a port. Per port contains LBD Admin configuration (SET) and status (GET), LBD Operational status and LBD Vlan configuration (SET) and status (GET).')
rlLbdPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 127, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlLbdPortAdminStatus.setStatus('current')
if mibBuilder.loadTexts: rlLbdPortAdminStatus.setDescription('Enable/Disable Loopback Detection on port')
rlLbdPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 127, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2), ("loopDetected", 3))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlLbdPortOperStatus.setStatus('current')
if mibBuilder.loadTexts: rlLbdPortOperStatus.setDescription("Indicates Loopback Detection operational status on port. 'inactive' means that the port is not working in loop-detected operational state; 'active' means that the port is Up and working in state of loop-detecting; 'loop-detected' means that the system has detected loop on the port.")
mibBuilder.exportSymbols("MARVELL-LBD-MIB", rlLbdPortAdminStatus=rlLbdPortAdminStatus, rlLbdEnable=rlLbdEnable, rlLbdPortEntry=rlLbdPortEntry, rlLbd=rlLbd, rlLbdPortTable=rlLbdPortTable, rlLbdPortOperStatus=rlLbdPortOperStatus, rlLbdDetectionInterval=rlLbdDetectionInterval, rlLbdMode=rlLbdMode, PYSNMP_MODULE_ID=rlLbd)
