#
# PySNMP MIB module HOTWIRE-XDSL-INTERFACE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HOTWIRE-XDSL-INTERFACE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:33:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
pdnPortConfigVNID, = mibBuilder.importSymbols("HOT-DOMAIN-MIB", "pdnPortConfigVNID")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
xdsl, = mibBuilder.importSymbols("PDN-HEADER-MIB", "xdsl")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Counter32, NotificationType, MibIdentifier, Counter64, Gauge32, ModuleIdentity, TimeTicks, Integer32, Unsigned32, IpAddress, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter32", "NotificationType", "MibIdentifier", "Counter64", "Gauge32", "ModuleIdentity", "TimeTicks", "Integer32", "Unsigned32", "IpAddress", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
xdslDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1))
class DisplayString(OctetString):
    pass

xdslDevIfStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 1))
xdslDevIfConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 2))
xdslRemoteSys = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 3))
xdslRemoteDTEStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 4))
xdslDevMvlIfConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 5))
xdslDevNAPCustomerAccount = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 6))
xdslLinkUpDownInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 7))
xdslRemoteInjection = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 8))
xdslDevIDSLConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 9))
xdslDevIfIntervalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 1, 1), )
if mibBuilder.loadTexts: xdslDevIfIntervalStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfIntervalStatsTable.setDescription("The xdslIfStatsTable provides statistics specific to the xDSL link. Statistics are collected on a per port basis and on specified intervals. Hence as such this table is indexed by the xdslDevIfStatsIfIndex and xdslDevIfStatsInterval. Also Statistics are grouped into remote and central statistics. By 'remote' we mean the statistics collected by the device at the customer premises and by 'central' we mean the statistics collected by the device located at the central office. The objects which are not grouped into these two groups are related to both ends of the xDSL link.")
xdslDevIfIntervalStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 1, 1, 1), ).setIndexNames((0, "HOTWIRE-XDSL-INTERFACE-MIB", "xdslDevIfStatsIfIndex"), (0, "HOTWIRE-XDSL-INTERFACE-MIB", "xdslDevIfStatsInterval"))
if mibBuilder.loadTexts: xdslDevIfIntervalStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfIntervalStatsEntry.setDescription('Describes a specific xDSL satistics entry.')
xdslDevIfStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDevIfStatsIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfStatsIfIndex.setDescription('The value of this object corresponds directly to each DSL interface as described in ifTable.')
xdslDevIfStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32))).clone(namedValues=NamedValues(("first15MinuteSlice", 1), ("second15MinuteSlice", 2), ("third15MinuteSlice", 3), ("fourth15MinuteSlice", 4), ("currentHour", 5), ("current15Minutes", 6), ("hour1of24hrs", 7), ("hour2of24hrs", 8), ("hour3of24hrs", 9), ("hour4of24hrs", 10), ("hour5of24hrs", 11), ("hour6of24hrs", 12), ("hour7of24hrs", 13), ("hour8of24hrs", 14), ("hour9of24hrs", 15), ("hour10of24hrs", 16), ("hour11of24hrs", 17), ("hour12of24hrs", 18), ("hour13of24hrs", 19), ("hour14of24hrs", 20), ("hour15of24hrs", 21), ("hour16of24hrs", 22), ("hour17of24hrs", 23), ("hour18of24hrs", 24), ("hour19of24hrs", 25), ("hour20of24hrs", 26), ("hour21of24hrs", 27), ("hour22of24hrs", 28), ("hour23of24hrs", 29), ("hour24of24hrs", 30), ("current24Hours", 31), ("previousDay", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDevIfStatsInterval.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfStatsInterval.setDescription('The value of this object corresponds to the interval of time during which statistics were collected. previousDay(32) will have the statistics collected from 12 midnight previous calendar day ')
xdslDevIfStatsValid15MinuteIntervalCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDevIfStatsValid15MinuteIntervalCount.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfStatsValid15MinuteIntervalCount.setDescription('Reflects the number of 15 minute intervals during which link was up and statistics were received from the remote end')
xdslDevIfStatsElapsedTimeLinkUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDevIfStatsElapsedTimeLinkUp.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfStatsElapsedTimeLinkUp.setDescription('Reflects the elapsed time since the link was up.')
xdslDevIfStatsLinkDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDevIfStatsLinkDownCount.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfStatsLinkDownCount.setDescription('Reflects the number of times that the xDSL link has gone to a down state. This may be due to shutting down of the customers side of the link. It could also be due to error conditions which result in the going down. A large number of these per unit time (synchronized off sysUpTime) would be indicative of an error condition.')
xdslDevIfStatsUpStreamSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDevIfStatsUpStreamSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfStatsUpStreamSpeed.setDescription('The speed in the upstream (from the remote to the central site) direction. This object compliments the ifSpeed object in the ifTable which represents the speed in the downstream (from the central to the remote site) direction. The speed is measured in bits per second.')
xdslDevIfStatsCentralReceiverGain = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDevIfStatsCentralReceiverGain.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfStatsCentralReceiverGain.setDescription('Reflects the receiver gain at the central site.')
xdslDevIfStatsCentralRecMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDevIfStatsCentralRecMargin.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfStatsCentralRecMargin.setDescription('Reflects the margin at the central site.')
xdslDevIfStatsCentralRecAttenuationEstimate = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDevIfStatsCentralRecAttenuationEstimate.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfStatsCentralRecAttenuationEstimate.setDescription('Reflects the attenuation estimate at the central site.')
xdslDevIfStatsCentralRecTransmitPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDevIfStatsCentralRecTransmitPower.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfStatsCentralRecTransmitPower.setDescription('Reflects the transmit power at the central site.')
xdslDevIfStatsCentralRecErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 1, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDevIfStatsCentralRecErrorRate.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfStatsCentralRecErrorRate.setDescription('Reflects the error rate at the central site. This string will represent a floating point number of the form. [ErrRate][eE][+-][ErrRateBase] where ErrRate and ErrRateBase are integers. In Other Words ErrRate * [10^ -ErrRateBase] shown below are example of the values returned. 123456E-5 = 1.23456 344567e-6 = 0.344567')
xdslDevIfStatsCentralRecErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDevIfStatsCentralRecErroredSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfStatsCentralRecErroredSeconds.setDescription('Reflects the errored seconds at the central site.')
xdslDevIfStatsCentralRecSeverelyErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDevIfStatsCentralRecSeverelyErroredSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfStatsCentralRecSeverelyErroredSeconds.setDescription('Reflects the severely errored seconds at the central site.')
xdslDevIfStatsRemoteReceiverGain = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDevIfStatsRemoteReceiverGain.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfStatsRemoteReceiverGain.setDescription('Reflects the receiver gain at the remote site')
xdslDevIfStatsRemoteRecMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDevIfStatsRemoteRecMargin.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfStatsRemoteRecMargin.setDescription('Reflects the margin at the remote site')
xdslDevIfStatsRemoteRecAttenuationEstimate = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDevIfStatsRemoteRecAttenuationEstimate.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfStatsRemoteRecAttenuationEstimate.setDescription('Reflects the attenuation estimate at the remote site')
xdslDevIfStatsRemoteRecTransmitPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDevIfStatsRemoteRecTransmitPower.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfStatsRemoteRecTransmitPower.setDescription('Reflects the transmit power at the remote site.')
xdslDevIfStatsRemoteRecErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 1, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDevIfStatsRemoteRecErrorRate.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfStatsRemoteRecErrorRate.setDescription('Reflects the error rate at the remote site. This string will represent a floating point number of the form a.b. [ErrRate][eE][+-][ErrRateBase] where ErrRate and ErrRateBase are integers. In Other Words ErrRate * [10^ -ErrRateBase] shown below are example of the values returned. 123456E-5 = 1.23456 344567e-6 = 0.344567')
xdslDevIfStatsRemoteRecErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 1, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDevIfStatsRemoteRecErroredSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfStatsRemoteRecErroredSeconds.setDescription('Reflects the errored seconds at the remote site.')
xdslDevIfStatsRemoteRecSeverelyErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 1, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDevIfStatsRemoteRecSeverelyErroredSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfStatsRemoteRecSeverelyErroredSeconds.setDescription('Reflects the severely errored seconds at the remote site.')
xdslDevIfStatsRemoteOctetsCorrected = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDevIfStatsRemoteOctetsCorrected.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfStatsRemoteOctetsCorrected.setDescription('This object reflects the number of octets corrected when reed-solomon is turned on at the remote site.')
xdslDevIfStatsRemoteOctetsNotCorrected = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 1, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDevIfStatsRemoteOctetsNotCorrected.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfStatsRemoteOctetsNotCorrected.setDescription('This object reflects the number of octets not corrected when reed-solomon is turned on at the remote site.')
xdslDevIfStatsRemoteReceivedKiloOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 1, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDevIfStatsRemoteReceivedKiloOctets.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfStatsRemoteReceivedKiloOctets.setDescription('The number of octets that have been received by the xDSL interface at the remote site divided by 1000.')
xdslDevIfStatsRemoteReceivedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 1, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDevIfStatsRemoteReceivedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfStatsRemoteReceivedPkts.setDescription('The number of good packets that have been received by the xDSL interface at the remote site.')
xdslDevIfStatsRemoteRecErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 1, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDevIfStatsRemoteRecErrPkts.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfStatsRemoteRecErrPkts.setDescription('Reflects the number packet receive with error by the xDSL interface at the remote site.')
xdslDevIfStatsRemoteDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 1, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDevIfStatsRemoteDroppedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfStatsRemoteDroppedPkts.setDescription('Reflects the number of good packets that have been received by the xDSL interface at the remote site, but have been dropped due to insufficient buffer capacity.')
xdslDevIfStatsRemoteTransmittedKiloOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 1, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDevIfStatsRemoteTransmittedKiloOctets.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfStatsRemoteTransmittedKiloOctets.setDescription('The number of octets that have been transmitted by the xDSL interface at the remote site divided by 1000.')
xdslDevIfStatsRemoteTransmittedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 1, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDevIfStatsRemoteTransmittedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfStatsRemoteTransmittedPkts.setDescription('The number of pkts that have been transmitted by the xDSL interface at the remote site.')
xdslDevIfStatsCentralRecErroredMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 1, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDevIfStatsCentralRecErroredMinutes.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfStatsCentralRecErroredMinutes.setDescription('Reflects the errored minutes at the central site.')
xdslDevIfStatsCentralRecSeverelyErroredMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 1, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDevIfStatsCentralRecSeverelyErroredMinutes.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfStatsCentralRecSeverelyErroredMinutes.setDescription('Reflects the severely errored minutes at the central site.')
xdslDevIfStatsRemoteRecErroredMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 1, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDevIfStatsRemoteRecErroredMinutes.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfStatsRemoteRecErroredMinutes.setDescription('Reflects the errored minutes at the remote site.')
xdslDevIfStatsRemoteRecSeverelyErroredMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 1, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDevIfStatsRemoteRecSeverelyErroredMinutes.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfStatsRemoteRecSeverelyErroredMinutes.setDescription('Reflects the severely errored minutes at the remote site.')
xdslDevIfStatsCentralReceivedKiloOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 1, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDevIfStatsCentralReceivedKiloOctets.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfStatsCentralReceivedKiloOctets.setDescription('The number of octets that have been received by the xDSL interface at the central site divided by 1000.')
xdslDevIfStatsCentralTransmittedKiloOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 1, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDevIfStatsCentralTransmittedKiloOctets.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfStatsCentralTransmittedKiloOctets.setDescription('The number of octets that have been transmitted by the xDSL interface at the central site divided by 1000.')
xdslDevIfStatsCentralTransmittedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 1, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDevIfStatsCentralTransmittedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfStatsCentralTransmittedPkts.setDescription('The number of packets that have been transmitted by the xDSL interface at the central site.')
xdslDevIfStatsCentralReceivedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 1, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDevIfStatsCentralReceivedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfStatsCentralReceivedPkts.setDescription('The number of packets that have been received by the xDSL interface at the central site.')
xdslDevIfStatsCentralErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 1, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDevIfStatsCentralErrPkts.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfStatsCentralErrPkts.setDescription('The number of packets that have been received by the xDSL interface at the central site with error.')
xdslDevIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 2, 1), )
if mibBuilder.loadTexts: xdslDevIfConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfConfigTable.setDescription("The xdslDevIfConfigTable provides config information specific to a xDSL device, or system. The table is indexed by an object which corresponds to ifIndex. These ifIndex entries, themselves, denote and identify specific xdsl interfaces on the board or module. Also the configuration parameters are grouped into two broad categories, 'up' and 'down'. 'up' reflects the upstream direction (from the customer premises to the central office). 'Down' reflects the downstream direction (from the central office to the customer premises)")
xdslDevIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 2, 1, 1), ).setIndexNames((0, "HOTWIRE-XDSL-INTERFACE-MIB", "xdslDevIfConfigIfIndex"))
if mibBuilder.loadTexts: xdslDevIfConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfConfigEntry.setDescription('Describes a specific xDSL interface entry.')
xdslDevIfConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDevIfConfigIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfConfigIfIndex.setDescription('The value of this object corresponds directly to each xDSL interface as described in ifTable. ')
xdslDevIfConfigPortSpeedBehaviour = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fixed", 1), ("adaptive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevIfConfigPortSpeedBehaviour.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfConfigPortSpeedBehaviour.setDescription('The value of this object corresponds to the behaviour of the specified port. The default value for this object is fixed (1). ')
xdslDevIfConfigUpFixedPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29))).clone(namedValues=NamedValues(("s272", 1), ("s408", 2), ("s544", 3), ("s680", 4), ("s816", 5), ("s952", 6), ("s1088", 7), ("s91", 8), ("s476", 9), ("s340", 10), ("s204", 11), ("s136", 12), ("s119", 13), ("s102", 14), ("s85", 15), ("s68", 16), ("s51", 17), ("s45", 18), ("s34", 19), ("s11", 20), ("s2320", 21), ("s2046", 22), ("s1552", 23), ("s1040", 24), ("s784", 25), ("s528", 26), ("s400", 27), ("s277", 28), ("s144", 29)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevIfConfigUpFixedPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfConfigUpFixedPortSpeed.setDescription('The value of this object corresponds to the upstream speed of the specified port for fixed port speed behaviour. All the speeds enumerated above are in kbps. If the port speed behaviour is adaptive an error of noSuchName will be returned by the agent. The default value for this object is s1088 (7).')
xdslDevIfConfigDownFixedPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))).clone(namedValues=NamedValues(("s640", 1), ("s960", 2), ("s1280", 3), ("s1600", 4), ("s1920", 5), ("s2240", 6), ("s2560", 7), ("s2688", 8), ("s3200", 9), ("s4480", 10), ("s5120", 11), ("s6272", 12), ("s7168", 13), ("s1024", 14), ("s896", 15), ("s768", 16), ("s512", 17), ("s384", 18), ("s256", 19), ("s2320", 20), ("s2046", 21), ("s1552", 22), ("s1040", 23), ("s784", 24), ("s528", 25), ("s400", 26), ("s277", 27), ("s144", 28)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevIfConfigDownFixedPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfConfigDownFixedPortSpeed.setDescription('The value of this object corresponds to the downstream speed of the specified port for fixed port speed behaviour. All the speeds enumerated above are in kbps. if the port speed behaviour is adaptive an error of noSuchName will be returned by the agent. The default value for this object is s2560 (7).')
xdslDevIfConfigUpAdaptiveUpperBoundPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("s272", 1), ("s408", 2), ("s544", 3), ("s680", 4), ("s816", 5), ("s952", 6), ("s1088", 7), ("s91", 8), ("s476", 9), ("s340", 10), ("s204", 11), ("s136", 12), ("s119", 13), ("s102", 14), ("s85", 15), ("s68", 16), ("s51", 17), ("s45", 18), ("s34", 19), ("s11", 20)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevIfConfigUpAdaptiveUpperBoundPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfConfigUpAdaptiveUpperBoundPortSpeed.setDescription('The value of this object corresponds to the upper bound for the upstream port speed of the specified port for adaptive port speed behaviour. The speeds are measured in kbps. If the port speed behaviour is fixed an error of noSuchName will be returned by the agent. The default value for this object is s1088.')
xdslDevIfConfigUpAdaptiveLowerBoundPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("s272", 1), ("s408", 2), ("s544", 3), ("s680", 4), ("s816", 5), ("s952", 6), ("s1088", 7), ("s91", 8), ("s476", 9), ("s340", 10), ("s204", 11), ("s136", 12), ("s119", 13), ("s102", 14), ("s85", 15), ("s68", 16), ("s51", 17), ("s45", 18), ("s34", 19), ("s11", 20)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevIfConfigUpAdaptiveLowerBoundPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfConfigUpAdaptiveLowerBoundPortSpeed.setDescription('The value of this object corresponds to the lower bound for the upstream port speed of the specified port for adaptive port speed behaviour in kbps. If the port speed behaviour is fixed an error of noSuchName will be returned by the agent. The default value for this object s272.')
xdslDevIfConfigDownAdaptiveUpperBoundPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("s640", 1), ("s960", 2), ("s1280", 3), ("s1600", 4), ("s1920", 5), ("s2240", 6), ("s2560", 7), ("s2688", 8), ("s3200", 9), ("s4480", 10), ("s5120", 11), ("s6272", 12), ("s7168", 13), ("s1024", 14), ("s896", 15), ("s768", 16), ("s512", 17), ("s384", 18), ("s256", 19)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevIfConfigDownAdaptiveUpperBoundPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfConfigDownAdaptiveUpperBoundPortSpeed.setDescription('The value of this object corresponds to the upper bound allowed for the downstream port speed of the specified port for adaptive port speed behaviour. The speeds are measured in kbps. if the port speed behaviour is fixed an error of noSuchName will be returned by the agent. The default value for this object is s2560 (7).')
xdslDevIfConfigDownAdaptiveLowerBoundPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("s640", 1), ("s960", 2), ("s1280", 3), ("s1600", 4), ("s1920", 5), ("s2240", 6), ("s2560", 7), ("s2688", 8), ("s3200", 9), ("s4480", 10), ("s5120", 11), ("s6272", 12), ("s7168", 13), ("s1024", 14), ("s896", 15), ("s768", 16), ("s512", 17), ("s384", 18), ("s256", 19)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevIfConfigDownAdaptiveLowerBoundPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfConfigDownAdaptiveLowerBoundPortSpeed.setDescription('The value of this object corresponds to the Minimum lower bound allowed for the downstream port speed of the specified port for adaptive port speed behaviour. If the port speed behaviour is fixed an error of noSuchName will be returned by the agent. The speeds are measured in kbps. The default value for this object is s640(1).')
xdslDevIfConfigReedSolomonDownForwardErrorCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("minimizeError", 1), ("minimizeDelay", 2), ("reedSolomonNotSupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevIfConfigReedSolomonDownForwardErrorCorrection.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfConfigReedSolomonDownForwardErrorCorrection.setDescription('The value of this object corresponds to the Reed-Solomon forward error correction in the downstream direction. The default value of this object should be minimizeError (1).')
xdslDevIfConfigMarginThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 2, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevIfConfigMarginThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfConfigMarginThreshold.setDescription('The value of this object corresponds to the offset from the startup margin. The threshold margin is calculated by subtracting the offset from the startup margin. Permissible range of values are between -7 and 14. A value of -9999 disables the threshold check. The default value of this object is 3')
xdslDevIfConfigEstimatedHrErrRateThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 2, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevIfConfigEstimatedHrErrRateThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfConfigEstimatedHrErrRateThreshold.setDescription('The value of this object corresponds to the estimated error rate threshold value on an hourly basis. A value of -9999 disables the threshold check. The default value for this object is 1000.')
xdslDevIfConfigEstimatedDayErrRateThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 2, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevIfConfigEstimatedDayErrRateThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfConfigEstimatedDayErrRateThreshold.setDescription('The value of this object corresponds to the estimated error rate threshold value on a daily basis. A value of -9999 disables this threshold check. The default value for this object is 10000')
xdslDevIfConfigPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 2, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevIfConfigPortID.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfConfigPortID.setDescription('The value of this object corresponds to 40 character information only field that identifies what the DSL port is connected to (Circuit ID, MDF location, Customer name, etc.)')
xdslDevIfLinkUpDownTransitionThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 2, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevIfLinkUpDownTransitionThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfLinkUpDownTransitionThreshold.setDescription("The value of this object corresponds to the threshold value for link up-down transitions. If link up-down's exceed this threshold value a xdslLinkupDownTransitions trap is generated. This value would represent the number of link up-down transitions in a 15 minute interval. A value of -9999 disables the threshold check. The default value for this object is 0")
xdslDevIfConfigStartUpMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-3, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevIfConfigStartUpMargin.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfConfigStartUpMargin.setDescription(' The value of this object corresponds to the startup value of the margin for a DSL interface (specified by ifIndex). The unit is db (decibels. The higher the margin the better the quality of the line. The default value of this object is 3.')
xdslDevIfConfigTxPowerAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 2, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevIfConfigTxPowerAttenuation.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfConfigTxPowerAttenuation.setDescription(' This value corresponds to the Transmitt Power Attenuation in dB for the access node. This value represents the downstream power level in dB. Permissible range of values are between -6 and 0. The default value of this object is 0 dB. The power levels +3 and +6 may be used in future.')
xdslDevIfConfigSnTxPowerAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 2, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevIfConfigSnTxPowerAttenuation.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIfConfigSnTxPowerAttenuation.setDescription(' This value corresponds to the Transmitt Power Attenuation in dB for the service node. This value represents the upstream power level in dB. The default value of this object is -6 dB.')
xdslRemoteSysTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 3, 1), )
if mibBuilder.loadTexts: xdslRemoteSysTable.setStatus('mandatory')
if mibBuilder.loadTexts: xdslRemoteSysTable.setDescription('The Remote System information table. This table is based on the mib-2 system mib.')
xdslRemoteSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 3, 1, 1), ).setIndexNames((0, "HOTWIRE-XDSL-INTERFACE-MIB", "xdslRemoteSysIndex"))
if mibBuilder.loadTexts: xdslRemoteSysEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xdslRemoteSysEntry.setDescription('Describes a specific xDSL interface Remote Endpoint entry.')
xdslRemoteSysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslRemoteSysIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xdslRemoteSysIndex.setDescription('Refer to the mib-2 system MIB for a description.')
xdslRemoteSysDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslRemoteSysDescr.setStatus('mandatory')
if mibBuilder.loadTexts: xdslRemoteSysDescr.setDescription('Refer to the mib-2 system MIB for a description.')
xdslRemoteSysObjectID = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 3, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslRemoteSysObjectID.setStatus('mandatory')
if mibBuilder.loadTexts: xdslRemoteSysObjectID.setDescription('Refer to the mib-2 system MIB for a description.')
xdslRemoteSysUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 3, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslRemoteSysUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: xdslRemoteSysUpTime.setDescription('Refer to the mib-2 system MIB for a description.')
xdslRemoteSysContact = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslRemoteSysContact.setStatus('mandatory')
if mibBuilder.loadTexts: xdslRemoteSysContact.setDescription('Refer to the mib-2 system MIB for a description.')
xdslRemoteSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 3, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslRemoteSysName.setStatus('mandatory')
if mibBuilder.loadTexts: xdslRemoteSysName.setDescription('Refer to the mib-2 system MIB for a description.')
xdslRemoteSysLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 3, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslRemoteSysLocation.setStatus('mandatory')
if mibBuilder.loadTexts: xdslRemoteSysLocation.setDescription('Refer to the mib-2 system MIB for a description.')
xdslRemoteSysServices = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslRemoteSysServices.setStatus('mandatory')
if mibBuilder.loadTexts: xdslRemoteSysServices.setDescription('Refer to the mib-2 system MIB for a description.')
xdslRemoteSysCircuitId = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 3, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslRemoteSysCircuitId.setStatus('mandatory')
if mibBuilder.loadTexts: xdslRemoteSysCircuitId.setDescription('The value of this object reflects the Circuit ID for a Service Node.')
xdslRemoteDTEStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 4, 1), )
if mibBuilder.loadTexts: xdslRemoteDTEStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: xdslRemoteDTEStatusTable.setDescription('The Remote DTE Status table. This provides status information about the DTE port of the DSL RTUs.')
xdslRemoteDTEStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 4, 1, 1), ).setIndexNames((0, "HOTWIRE-XDSL-INTERFACE-MIB", "xdslRemoteDTEStatusIndex"))
if mibBuilder.loadTexts: xdslRemoteDTEStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xdslRemoteDTEStatusEntry.setDescription(' This provides status information about the DTE port of a specific DSL RTU.')
xdslRemoteDTEStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslRemoteDTEStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xdslRemoteDTEStatusIndex.setDescription('The value of this object corresponds directly to each DSL interface as described in the ifTable.')
xdslRemoteDTEState = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inService", 1), ("outOfService", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslRemoteDTEState.setStatus('mandatory')
if mibBuilder.loadTexts: xdslRemoteDTEState.setDescription('The value of this object reflects the state of the DTE interface of the DSL RTU.')
xdslRemoteDTEType = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("v35", 1), ("eia530", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslRemoteDTEType.setStatus('mandatory')
if mibBuilder.loadTexts: xdslRemoteDTEType.setDescription('The value of this object reflects the configuration of the DTE interface of the DSL RTU.')
xdslRemoteDTEClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslRemoteDTEClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: xdslRemoteDTEClockSource.setDescription('The value of this object reflects the timing configuration of the DTE interface of the DSL RTU.')
xdslRemoteDTEStrobe = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("risingEdge", 1), ("fallingEdge", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslRemoteDTEStrobe.setStatus('mandatory')
if mibBuilder.loadTexts: xdslRemoteDTEStrobe.setDescription('The value of this object reflects the clock edge timing configuration of the DTE interface of the DSL RTU.')
xdslRemoteDTELoopbackState = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslRemoteDTELoopbackState.setStatus('mandatory')
if mibBuilder.loadTexts: xdslRemoteDTELoopbackState.setDescription('The value of this object reflects the loopback state of the DTE interface of the DSL RTU.')
xdslDevMvlIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 5, 1), )
if mibBuilder.loadTexts: xdslDevMvlIfConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevMvlIfConfigTable.setDescription('The xdslDevMvlIfConfigTable provides config information specific to a xDSL(MVL) device, or system. The table is indexed by an object which corresponds to ifIndex. These ifIndex entries, themselves, denote and identify specific xdsl(Mvl) interfaces on the board or module. ')
xdslDevMvlIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 5, 1, 1), ).setIndexNames((0, "HOTWIRE-XDSL-INTERFACE-MIB", "xdslDevMvlIfConfigIfIndex"))
if mibBuilder.loadTexts: xdslDevMvlIfConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevMvlIfConfigEntry.setDescription('Describes a specific xDSL(MVL) interface entry.')
xdslDevMvlIfConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDevMvlIfConfigIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevMvlIfConfigIfIndex.setDescription('The value of this object corresponds directly to each xDSL(MVL) interface as described in ifTable. ')
xdslDevMvlIfConfigUpperBoundPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 5, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevMvlIfConfigUpperBoundPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevMvlIfConfigUpperBoundPortSpeed.setDescription('The value of this object corresponds to the upper bound port speed of the specified port. The speeds are measured in kbps. Supported speeds are 128, 192, 256, 320, 384, 448, 512 576, 640, 704, 768. The default value of this object is 768 ')
xdslDevMvlIfConfigMarginThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 5, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevMvlIfConfigMarginThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevMvlIfConfigMarginThreshold.setDescription('The value of this object corresponds to the Margin threshold value. Permissible range of values are between -5 and 9. A value of -9999 disables the threshold check. The default value is 3')
xdslDevMvlIfConfigPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 5, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevMvlIfConfigPortID.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevMvlIfConfigPortID.setDescription('The value of this object corresponds to 40 character information only field that identifies what the DSL port is connected to (Circuit ID, MDF location, Customer name, etc.)')
xdslDevMvlIfLinkUpDownTransitionThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 5, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevMvlIfLinkUpDownTransitionThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevMvlIfLinkUpDownTransitionThreshold.setDescription("The value of this object corresponds to the threshold value for link up-down transitions. If link up-down's exceed this threshold value a xdslLinkupDownTransitions trap is generated. This value would represent the number of link up-down transitions in a 15 minute interval. A value of -9999 disables the threshold check. The default value for this object is 0")
xdslDevMvlIfConfigOnHookTxPowerAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 5, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevMvlIfConfigOnHookTxPowerAttenuation.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevMvlIfConfigOnHookTxPowerAttenuation.setDescription(' This value corresponds to the On-hook Transmitt Power Attenuation in dB for the access node and the service node. This value represents both downstream and upstream power level in dB while the phone is On-hook. Permissible range of values are between -2 and +10. The default value of this object is 10 dB.')
xdslDevMvlIfConfigOffHookTxPowerAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 5, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevMvlIfConfigOffHookTxPowerAttenuation.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevMvlIfConfigOffHookTxPowerAttenuation.setDescription(' This value corresponds to the Off-hook Transmitt Power Attenuation in dB for the access node and the service node. This value represents both downstream and upstream power level in dB while the phone is Off-hook. Permissible range of values are between -2 and +7. The default value of this object is 7 dB. ')
xdslDevNAPCustomerAccountTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 6, 1), )
if mibBuilder.loadTexts: xdslDevNAPCustomerAccountTable.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevNAPCustomerAccountTable.setDescription('The xdslDevNAPCustomerAccountTable provides customer accounting information on each DSL port. Network Access Providers can accurately bill their end station DSL customers by the amount of usage. The table is indexed by ifIndex and xdslDevNAPCustomerAccountInterval The ifIndex identifies specific xdsl interface on the device and xdslDevNAPCustomerAccountInterval specifies the accounting information is for the current day or the previous day. Customer data excludes all traffic used for management purpose.')
xdslDevNAPCustomerAccountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 6, 1, 1), ).setIndexNames((0, "HOTWIRE-XDSL-INTERFACE-MIB", "xdslDevNAPCustomerAccountIfIndex"), (0, "HOTWIRE-XDSL-INTERFACE-MIB", "xdslDevNAPCustomerAccountInterval"))
if mibBuilder.loadTexts: xdslDevNAPCustomerAccountEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevNAPCustomerAccountEntry.setDescription('Provides customer related accounting information specific to an xDSL interface entry.')
xdslDevNAPCustomerAccountIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDevNAPCustomerAccountIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevNAPCustomerAccountIfIndex.setDescription('The value of this object corresponds directly to each xDSL interface as described in ifTable. ')
xdslDevNAPCustomerAccountInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("currentDay", 1), ("previousDay", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDevNAPCustomerAccountInterval.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevNAPCustomerAccountInterval.setDescription('The value of this object corresponds to the interval of time during which customer accounting data were collected. Day starts at 12.01 midnight ')
xdslDevNAPCustomerAccountRecKiloOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDevNAPCustomerAccountRecKiloOctets.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevNAPCustomerAccountRecKiloOctets.setDescription("Customer data received at the AN's DSL port in 1000 Octets. The default value of this object is 0 ")
xdslDevNAPCustomerAccountTrxKiloOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDevNAPCustomerAccountTrxKiloOctets.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevNAPCustomerAccountTrxKiloOctets.setDescription("Customer data transmitted over the AN's DSL port in 1000 Octets. The default value of this object is 0 ")
xdslDevIDSLConfigTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 9, 1), )
if mibBuilder.loadTexts: xdslDevIDSLConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIDSLConfigTable.setDescription('The xdslDevIDSLConfigTable provides configuration specific to the IDSL link.')
xdslDevIDSLConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 9, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xdslDevIDSLConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIDSLConfigEntry.setDescription('Describes a specific IDSL configuration entry.')
xdslDevIDSLConfigPortSpeedBehaviour = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fixed", 1), ("adaptive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevIDSLConfigPortSpeedBehaviour.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIDSLConfigPortSpeedBehaviour.setDescription('The value of this object corresponds to the behaviour of the specified port. The default value for this object is fixed (1). ')
xdslDevIDSLConfigPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 9, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevIDSLConfigPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIDSLConfigPortSpeed.setDescription('The value of this object corresponds to both upstream and downstream speed of the specified port. All the speeds are in kbps. The default value for this object is 128 kbps.')
xdslDevIDSLConfigPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 9, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevIDSLConfigPortID.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIDSLConfigPortID.setDescription('The value of this object corresponds to 40 character information only field that identifies what the DSL port is connected to (Circuit ID, MDF location, Customer name, etc.)')
xdslDevIDSLTimingPortTransceiverMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("networkTiming", 1), ("localTiming", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevIDSLTimingPortTransceiverMode.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIDSLTimingPortTransceiverMode.setDescription('The transceiver mode selected on the timing source port. Only one IDSL port can be set to NT mode. This timing will then be distributed to all other IDSL ports in the chassis that are set to LT. The selected xdslDevIDSLPrimaryTimingSourcePort provides clocking signals to the DSLAM when the transceiver mode is set to Network timing. The port selected for Network Timing mode will probably not used for customer data, but will receive a 2.048 Mhz Network clocking signal from a central office timing source and distribute this timing to other IDSL port cards.')
xdslDevIDSLConfigMarginThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 9, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevIDSLConfigMarginThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIDSLConfigMarginThreshold.setDescription('The value of this object corresponds to the Margin threshold value. A value of -9999 disables the threshold check. The value range of this object is -5 to 10. The default value is 3')
xdslDevIDSLLinkUpDownTransitionThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 9, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xdslDevIDSLLinkUpDownTransitionThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDevIDSLLinkUpDownTransitionThreshold.setDescription("The value of this object corresponds to the threshold value for link up-down transitions. If link up-down's exceed this threshold value a xdslLinkupDownTransitions trap is generated. This value would represent the number of link up-down transitions in a 15 minute interval. A value of -9999 disables the threshold check. The value range of this object is 0 to 1000. The default value for this object is 0")
xdslLinkDownReason = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)))
if mibBuilder.loadTexts: xdslLinkDownReason.setStatus('mandatory')
if mibBuilder.loadTexts: xdslLinkDownReason.setDescription('This entry contains the reason as to why the DSL Link went down. This information is obtained when the DSL Link is coming up')
xdslRemoteInjectionType = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("filter", 1))))
if mibBuilder.loadTexts: xdslRemoteInjectionType.setStatus('deprecated')
if mibBuilder.loadTexts: xdslRemoteInjectionType.setDescription('The value of this object corresponds to the remote injection type')
xdslLinkUpDownTransitions = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1) + (0,1)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xdslLinkUpDownTransitions.setDescription("This trap signifies that the sending protocol entity recognizes that one of the xDSL communication links is in a fluctuating state. This is a trap of 'minor' class.")
xdslPortSpeedLow = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1) + (0,2)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xdslPortSpeedLow.setDescription("This trap signifies that the port speed of the xDSL link has dropped below a threshold value. This is a trap of 'warning' class")
xdslPortSpeedNormal = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1) + (0,102)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xdslPortSpeedNormal.setDescription("This trap signifies that the port speed of the xDSL link has has gone above the threshold value. This is a trap of 'warning' class. This trap compliments the xdslPortSpeedLow Trap")
xdslMarginLow = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1) + (0,3)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xdslMarginLow.setDescription("This trap signifies that the margin estimate is below a customer set threshold value. this is a trap of 'minor' class.")
xdslMarginNormal = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1) + (0,103)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xdslMarginNormal.setDescription("This trap signifies that the margin estimate has gone above a customer set threshold value. this is a trap of 'minor' class. this trap compliments the xdslMarginLow trap")
xdslErrorRateHigh = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1) + (0,4)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xdslErrorRateHigh.setDescription("This trap signifies that the error rate estimates is above a customer set threshold value. This is a trap of 'minor' class.")
xdslErrorRateNormal = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1) + (0,104)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xdslErrorRateNormal.setDescription("This trap signifies that the error rate estimates gone below a customer set threshold value. This is a trap of 'minor' class. This trap compliments the xdslErrorRateHigh trap.")
xdslPortFailure = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1) + (0,5)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xdslPortFailure.setDescription("This trap signifies that the processor detected a bad modem set. This is a trap of 'major' class")
xdslPortOperational = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1) + (0,105)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xdslPortOperational.setDescription("This trap signifies that the modem set which was bad is now operational. This is a trap of 'major' class. This trap compliments the xdslPortFailure trap.")
xdslTestStart = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1) + (0,6)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xdslTestStart.setDescription('This trap signifies that a diagnostic test has started on one of the ports')
xdslTestOver = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1) + (0,106)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xdslTestOver.setDescription('This trap signifies that the test has completed on one of the ports. This trap compliments the xdslTestStart trap.')
xdslRtuTypeMismatch = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1) + (0,7)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xdslRtuTypeMismatch.setDescription('The RTU configured in the DSL card does NOT match with the RTU connected to the DSL port indicated by the ifIndex.')
xdslRtuTypeMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1) + (0,107)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xdslRtuTypeMismatchClear.setDescription('The RTU configured in the DSL card does match with the RTU connected to the DSL port indicated by the ifIndex.')
xdslRtuSelfTestFail = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1) + (0,16)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xdslRtuSelfTestFail.setDescription('A self test failure from the RTU connected to the DSL port indicated by the ifIndex.')
xdslRtuLastGasp = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1) + (0,17)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xdslRtuLastGasp.setDescription('Card received LastGap message from SN followed by a link down condition one minute later. ')
xdslSNDeviceFail = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1) + (0,18)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xdslSNDeviceFail.setDescription('Operating software has detected an internal device failure. The RTU is still operating.')
xdslSNSelfTestFail = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1) + (0,19)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xdslSNSelfTestFail.setDescription("Failure of the RTU's hardware components. This trap is only set if the hardware failure still allows sending traps.")
xdslSNFatalReset = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1) + (0,20)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xdslSNFatalReset.setDescription('Fatal error device reset')
xdslLinkDownAnalysisTrap = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1) + (0,21)).setObjects(("IF-MIB", "ifIndex"), ("HOTWIRE-XDSL-INTERFACE-MIB", "xdslLinkDownReason"))
if mibBuilder.loadTexts: xdslLinkDownAnalysisTrap.setDescription('This trap signifies that the sending protocol entity recognizes that the xDSL communication link is up. LinkDownReason conveys the reason for link down.')
xdslRemoteInjectionFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1) + (0,22)).setObjects(("IF-MIB", "ifIndex"), ("HOT-DOMAIN-MIB", "pdnPortConfigVNID"), ("HOTWIRE-XDSL-INTERFACE-MIB", "xdslRemoteInjectionType"))
if mibBuilder.loadTexts: xdslRemoteInjectionFailureTrap.setDescription('This trap signifies that the injection of filters to SN failed It is of warning class')
xdslRemoteInjectionIncompatibleTrap = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1) + (0,23)).setObjects(("IF-MIB", "ifIndex"), ("HOT-DOMAIN-MIB", "pdnPortConfigVNID"), ("HOTWIRE-XDSL-INTERFACE-MIB", "xdslRemoteInjectionType"))
if mibBuilder.loadTexts: xdslRemoteInjectionIncompatibleTrap.setDescription('This trap signifies that the injection of filters is not supported by the SN. It is of warning class')
xdslLossOfNetworkTimingSignalTrap = NotificationType((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 8, 1) + (0,24)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: xdslLossOfNetworkTimingSignalTrap.setDescription('This trap is generated by an IDSL port card when it detects that the line supplying timing signals to the chassis on the port designated as NT has dropped. The ifIndex corresponds to the port designated as NT.')
mibBuilder.exportSymbols("HOTWIRE-XDSL-INTERFACE-MIB", xdslRemoteDTEStrobe=xdslRemoteDTEStrobe, xdslDevIfStatsRemoteRecErroredMinutes=xdslDevIfStatsRemoteRecErroredMinutes, xdslRemoteDTELoopbackState=xdslRemoteDTELoopbackState, xdslDevIfConfigTable=xdslDevIfConfigTable, xdslErrorRateHigh=xdslErrorRateHigh, xdslRemoteSys=xdslRemoteSys, xdslRemoteSysIndex=xdslRemoteSysIndex, xdslDevIfStatsRemoteDroppedPkts=xdslDevIfStatsRemoteDroppedPkts, xdslDevMvlIfConfigTable=xdslDevMvlIfConfigTable, xdslSNDeviceFail=xdslSNDeviceFail, xdslRemoteInjectionType=xdslRemoteInjectionType, xdslDevIfStatsRemoteReceiverGain=xdslDevIfStatsRemoteReceiverGain, xdslDevMvlIfConfigEntry=xdslDevMvlIfConfigEntry, xdslDevIfStatsValid15MinuteIntervalCount=xdslDevIfStatsValid15MinuteIntervalCount, xdslDevIfConfigTxPowerAttenuation=xdslDevIfConfigTxPowerAttenuation, xdslDevIfStatsRemoteRecTransmitPower=xdslDevIfStatsRemoteRecTransmitPower, xdslDevIfLinkUpDownTransitionThreshold=xdslDevIfLinkUpDownTransitionThreshold, xdslDevIfStatsInterval=xdslDevIfStatsInterval, xdslDevIfStatsCentralRecAttenuationEstimate=xdslDevIfStatsCentralRecAttenuationEstimate, xdslDevMvlIfConfigIfIndex=xdslDevMvlIfConfigIfIndex, xdslDevIfConfigPortSpeedBehaviour=xdslDevIfConfigPortSpeedBehaviour, xdslDevIfConfigEntry=xdslDevIfConfigEntry, xdslRemoteDTEClockSource=xdslRemoteDTEClockSource, xdslTestStart=xdslTestStart, xdslLinkDownAnalysisTrap=xdslLinkDownAnalysisTrap, xdslDevIfStatsElapsedTimeLinkUp=xdslDevIfStatsElapsedTimeLinkUp, xdslDevIfIntervalStatsEntry=xdslDevIfIntervalStatsEntry, xdslRtuLastGasp=xdslRtuLastGasp, xdslDevIfStatsCentralRecErrorRate=xdslDevIfStatsCentralRecErrorRate, xdslSNFatalReset=xdslSNFatalReset, xdslPortOperational=xdslPortOperational, xdslErrorRateNormal=xdslErrorRateNormal, xdslDevIfStatsRemoteOctetsCorrected=xdslDevIfStatsRemoteOctetsCorrected, xdslDevIfStatsRemoteRecAttenuationEstimate=xdslDevIfStatsRemoteRecAttenuationEstimate, xdslDevIfStatsCentralReceivedKiloOctets=xdslDevIfStatsCentralReceivedKiloOctets, xdslDevIfStatsCentralRecSeverelyErroredSeconds=xdslDevIfStatsCentralRecSeverelyErroredSeconds, xdslRemoteSysName=xdslRemoteSysName, xdslDevIDSLTimingPortTransceiverMode=xdslDevIDSLTimingPortTransceiverMode, xdslDevIfStatsCentralTransmittedPkts=xdslDevIfStatsCentralTransmittedPkts, xdslLinkUpDownTransitions=xdslLinkUpDownTransitions, xdslDevIfStatsCentralRecErroredMinutes=xdslDevIfStatsCentralRecErroredMinutes, xdslDevIDSLConfigMarginThreshold=xdslDevIDSLConfigMarginThreshold, xdslPortSpeedNormal=xdslPortSpeedNormal, xdslDevIfConfigMarginThreshold=xdslDevIfConfigMarginThreshold, xdslLinkDownReason=xdslLinkDownReason, xdslDevIfConfigEstimatedHrErrRateThreshold=xdslDevIfConfigEstimatedHrErrRateThreshold, xdslDevice=xdslDevice, xdslDevIDSLConfigPortSpeedBehaviour=xdslDevIDSLConfigPortSpeedBehaviour, xdslDevIfStatsRemoteRecErroredSeconds=xdslDevIfStatsRemoteRecErroredSeconds, xdslDevIfStatsRemoteTransmittedPkts=xdslDevIfStatsRemoteTransmittedPkts, xdslDevIfConfigReedSolomonDownForwardErrorCorrection=xdslDevIfConfigReedSolomonDownForwardErrorCorrection, xdslPortSpeedLow=xdslPortSpeedLow, xdslDevIDSLConfigTable=xdslDevIDSLConfigTable, xdslRtuTypeMismatchClear=xdslRtuTypeMismatchClear, xdslDevIfStatsIfIndex=xdslDevIfStatsIfIndex, xdslDevIfStatsCentralTransmittedKiloOctets=xdslDevIfStatsCentralTransmittedKiloOctets, xdslMarginNormal=xdslMarginNormal, xdslDevMvlIfConfigPortID=xdslDevMvlIfConfigPortID, xdslDevIfStatsRemoteRecErrorRate=xdslDevIfStatsRemoteRecErrorRate, xdslRemoteSysEntry=xdslRemoteSysEntry, xdslDevIDSLConfigPortSpeed=xdslDevIDSLConfigPortSpeed, xdslDevNAPCustomerAccountRecKiloOctets=xdslDevNAPCustomerAccountRecKiloOctets, xdslDevIfConfigUpAdaptiveLowerBoundPortSpeed=xdslDevIfConfigUpAdaptiveLowerBoundPortSpeed, xdslTestOver=xdslTestOver, xdslDevIfStatsCentralErrPkts=xdslDevIfStatsCentralErrPkts, xdslDevIfStatsLinkDownCount=xdslDevIfStatsLinkDownCount, xdslRemoteDTEStatusEntry=xdslRemoteDTEStatusEntry, xdslRemoteSysContact=xdslRemoteSysContact, xdslDevIfConfigIfIndex=xdslDevIfConfigIfIndex, xdslDevIDSLLinkUpDownTransitionThreshold=xdslDevIDSLLinkUpDownTransitionThreshold, xdslRemoteInjectionIncompatibleTrap=xdslRemoteInjectionIncompatibleTrap, xdslRemoteDTEType=xdslRemoteDTEType, xdslDevNAPCustomerAccountInterval=xdslDevNAPCustomerAccountInterval, xdslDevIfStatsRemoteOctetsNotCorrected=xdslDevIfStatsRemoteOctetsNotCorrected, xdslDevIfStatsRemoteReceivedPkts=xdslDevIfStatsRemoteReceivedPkts, xdslDevIfConfigStartUpMargin=xdslDevIfConfigStartUpMargin, xdslRemoteInjection=xdslRemoteInjection, xdslRtuTypeMismatch=xdslRtuTypeMismatch, xdslDevIfStatsRemoteReceivedKiloOctets=xdslDevIfStatsRemoteReceivedKiloOctets, xdslDevIDSLConfig=xdslDevIDSLConfig, xdslDevIfConfigDownAdaptiveLowerBoundPortSpeed=xdslDevIfConfigDownAdaptiveLowerBoundPortSpeed, xdslDevIfConfigPortID=xdslDevIfConfigPortID, xdslRtuSelfTestFail=xdslRtuSelfTestFail, xdslDevIfConfigEstimatedDayErrRateThreshold=xdslDevIfConfigEstimatedDayErrRateThreshold, xdslDevMvlIfConfigUpperBoundPortSpeed=xdslDevMvlIfConfigUpperBoundPortSpeed, xdslDevIfStatsCentralRecMargin=xdslDevIfStatsCentralRecMargin, xdslDevIfStatsCentralReceivedPkts=xdslDevIfStatsCentralReceivedPkts, xdslDevNAPCustomerAccountEntry=xdslDevNAPCustomerAccountEntry, xdslPortFailure=xdslPortFailure, xdslRemoteSysUpTime=xdslRemoteSysUpTime, xdslDevIfStatsRemoteRecSeverelyErroredSeconds=xdslDevIfStatsRemoteRecSeverelyErroredSeconds, xdslDevIfStatsCentralRecSeverelyErroredMinutes=xdslDevIfStatsCentralRecSeverelyErroredMinutes, xdslDevIfStatsRemoteTransmittedKiloOctets=xdslDevIfStatsRemoteTransmittedKiloOctets, xdslRemoteDTEStatusTable=xdslRemoteDTEStatusTable, xdslDevMvlIfLinkUpDownTransitionThreshold=xdslDevMvlIfLinkUpDownTransitionThreshold, xdslDevIDSLConfigEntry=xdslDevIDSLConfigEntry, xdslDevIfStatsCentralRecTransmitPower=xdslDevIfStatsCentralRecTransmitPower, xdslRemoteSysCircuitId=xdslRemoteSysCircuitId, xdslSNSelfTestFail=xdslSNSelfTestFail, xdslDevIfConfigDownFixedPortSpeed=xdslDevIfConfigDownFixedPortSpeed, xdslLinkUpDownInformation=xdslLinkUpDownInformation, xdslDevIDSLConfigPortID=xdslDevIDSLConfigPortID, xdslRemoteSysDescr=xdslRemoteSysDescr, xdslDevMvlIfConfigOffHookTxPowerAttenuation=xdslDevMvlIfConfigOffHookTxPowerAttenuation, xdslDevIfStats=xdslDevIfStats, xdslDevIfConfigUpAdaptiveUpperBoundPortSpeed=xdslDevIfConfigUpAdaptiveUpperBoundPortSpeed, xdslDevNAPCustomerAccount=xdslDevNAPCustomerAccount, xdslDevMvlIfConfigMarginThreshold=xdslDevMvlIfConfigMarginThreshold, xdslRemoteInjectionFailureTrap=xdslRemoteInjectionFailureTrap, xdslLossOfNetworkTimingSignalTrap=xdslLossOfNetworkTimingSignalTrap, xdslDevIfStatsRemoteRecErrPkts=xdslDevIfStatsRemoteRecErrPkts, xdslRemoteSysLocation=xdslRemoteSysLocation, xdslDevMvlIfConfig=xdslDevMvlIfConfig, xdslDevIfIntervalStatsTable=xdslDevIfIntervalStatsTable, xdslDevIfConfigDownAdaptiveUpperBoundPortSpeed=xdslDevIfConfigDownAdaptiveUpperBoundPortSpeed, xdslDevIfStatsCentralReceiverGain=xdslDevIfStatsCentralReceiverGain, xdslRemoteSysServices=xdslRemoteSysServices, xdslDevIfStatsCentralRecErroredSeconds=xdslDevIfStatsCentralRecErroredSeconds, xdslDevIfConfigSnTxPowerAttenuation=xdslDevIfConfigSnTxPowerAttenuation, xdslRemoteDTEStatusIndex=xdslRemoteDTEStatusIndex, xdslDevNAPCustomerAccountIfIndex=xdslDevNAPCustomerAccountIfIndex, xdslRemoteDTEState=xdslRemoteDTEState, xdslDevNAPCustomerAccountTable=xdslDevNAPCustomerAccountTable, xdslDevIfConfigUpFixedPortSpeed=xdslDevIfConfigUpFixedPortSpeed, xdslDevNAPCustomerAccountTrxKiloOctets=xdslDevNAPCustomerAccountTrxKiloOctets, xdslMarginLow=xdslMarginLow, xdslRemoteSysTable=xdslRemoteSysTable, xdslDevIfConfig=xdslDevIfConfig, xdslDevMvlIfConfigOnHookTxPowerAttenuation=xdslDevMvlIfConfigOnHookTxPowerAttenuation, xdslDevIfStatsRemoteRecSeverelyErroredMinutes=xdslDevIfStatsRemoteRecSeverelyErroredMinutes, xdslRemoteSysObjectID=xdslRemoteSysObjectID, DisplayString=DisplayString, xdslDevIfStatsUpStreamSpeed=xdslDevIfStatsUpStreamSpeed, xdslDevIfStatsRemoteRecMargin=xdslDevIfStatsRemoteRecMargin, xdslRemoteDTEStatus=xdslRemoteDTEStatus)
