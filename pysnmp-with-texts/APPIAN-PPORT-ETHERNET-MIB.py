#
# PySNMP MIB module APPIAN-PPORT-ETHERNET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APPIAN-PPORT-ETHERNET-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:23:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
acChassisCurrentTime, acChassisRingId = mibBuilder.importSymbols("APPIAN-CHASSIS-MIB", "acChassisCurrentTime", "acChassisRingId")
AcNodeId, AcAdminStatus, acPport, AcSlotNumber, AcPortNumber, AcOpStatus = mibBuilder.importSymbols("APPIAN-SMI-MIB", "AcNodeId", "AcAdminStatus", "acPport", "AcSlotNumber", "AcPortNumber", "AcOpStatus")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, Bits, NotificationType, MibIdentifier, TimeTicks, Integer32, ObjectIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Gauge32, ModuleIdentity, Counter64, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Bits", "NotificationType", "MibIdentifier", "TimeTicks", "Integer32", "ObjectIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Gauge32", "ModuleIdentity", "Counter64", "Counter32")
PhysAddress, DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "DisplayString", "TruthValue", "TextualConvention")
acEnet = ModuleIdentity((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3))
acEnet.setRevisions(('1900-02-23 16:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: acEnet.setRevisionsDescriptions(('Draft revision, Engineering use only.',))
if mibBuilder.loadTexts: acEnet.setLastUpdated('0002231600Z')
if mibBuilder.loadTexts: acEnet.setOrganization('Appian Communications, Inc.')
if mibBuilder.loadTexts: acEnet.setContactInfo('Douglas Theriault')
if mibBuilder.loadTexts: acEnet.setDescription('Appian Communications Ethernet Access MIB which contains the configuration and statistics attributes for an 802.3 physical interface.')
class AcEnetSpeed(TextualConvention, Integer32):
    description = 'The physical speed of this 802.3 port expressed as an integer enumeration.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("mb10", 1), ("mb100", 2), ("gb1", 3))

class AcEnetDuplexity(TextualConvention, Integer32):
    description = 'The duplexity mode for the 802.3 interface. The interface can be configured for auto(1), full(2), or half(3) duplex mode. Auto is the default and when set will negotiate with the far end for proper mode.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("full", 1), ("half", 2))

class AcEnetLinkState(TextualConvention, Integer32):
    description = 'Attribute which identifies the current physical state of the link.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("unknown", 0), ("link", 1), ("nolink", 2))

acEnetStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1), )
if mibBuilder.loadTexts: acEnetStatsTable.setStatus('current')
if mibBuilder.loadTexts: acEnetStatsTable.setDescription('A table containing the statistics parameters for 10/100Mb and 1Gb Ethernet access ports. The index keys used in this table (slot.port) are mapped to ifIndex under the appian(2785).interfaces(4).ifTable(1) group. The statistics table will be automatically created by the access driver, regardless if configuration exists on the port or not.')
acEnetStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1), ).setIndexNames((0, "APPIAN-PPORT-ETHERNET-MIB", "acEnetStatsNodeId"), (0, "APPIAN-PPORT-ETHERNET-MIB", "acEnetStatsSlot"), (0, "APPIAN-PPORT-ETHERNET-MIB", "acEnetStatsPort"))
if mibBuilder.loadTexts: acEnetStatsEntry.setStatus('current')
if mibBuilder.loadTexts: acEnetStatsEntry.setDescription('A row in the Ethernet Statistics table containing all Ethernet level statistics for a specific Ethernet access port. Rows in the statistics table are automatically instantiated as soon as an acEnetCfgEntry exists.')
acEnetStatsNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acEnetStatsNodeId.setStatus('current')
if mibBuilder.loadTexts: acEnetStatsNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acEnetStatsSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acEnetStatsSlot.setStatus('current')
if mibBuilder.loadTexts: acEnetStatsSlot.setDescription('The slot number within the chassis where this module entry resides.')
acEnetStatsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acEnetStatsPort.setStatus('current')
if mibBuilder.loadTexts: acEnetStatsPort.setDescription('The port number on the module which represents this instance of an Ethernet access port.')
acEnetStatsPktsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsPktsRx.setStatus('current')
if mibBuilder.loadTexts: acEnetStatsPktsRx.setDescription('The total number of packets received on this interface expressed as a 64bit integer.')
acEnetStatsPktsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsPktsTx.setStatus('current')
if mibBuilder.loadTexts: acEnetStatsPktsTx.setDescription('The total number of packets transmitted on this interface expressed as a 64bit integer.')
acEnetStatsOctetsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsOctetsRx.setStatus('current')
if mibBuilder.loadTexts: acEnetStatsOctetsRx.setDescription('The total number of octets (bytes) received on this interface expressed as a 64bit integer.')
acEnetStatsOctetsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsOctetsTx.setStatus('current')
if mibBuilder.loadTexts: acEnetStatsOctetsTx.setDescription('The total number of octets (bytes) transmitted on this interface expressed as a 64bit integer.')
acEnetStatsBcastPktsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsBcastPktsRx.setStatus('current')
if mibBuilder.loadTexts: acEnetStatsBcastPktsRx.setDescription('The total number of broadcast packets received on this interface expressed as a 64bit integer.')
acEnetStatsBcastPktsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsBcastPktsTx.setStatus('current')
if mibBuilder.loadTexts: acEnetStatsBcastPktsTx.setDescription('The total number of broadcast packets transmitted on this interface expressed as a 64bit integer.')
acEnetStatsMcastPktsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsMcastPktsRx.setStatus('current')
if mibBuilder.loadTexts: acEnetStatsMcastPktsRx.setDescription('The total number of Multicast packets received on this interface expressed as a 64bit integer.')
acEnetStatsMcastPktsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsMcastPktsTx.setStatus('current')
if mibBuilder.loadTexts: acEnetStatsMcastPktsTx.setDescription('The total number of Multicast packets transmitted on this interface expressed as a 64bit integer.')
acEnetStatsCrcAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsCrcAlignErrors.setStatus('current')
if mibBuilder.loadTexts: acEnetStatsCrcAlignErrors.setDescription('The total number of CRC alignment errors received on this interface expressed as a 64bit integer.')
acEnetStatsUndersizedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsUndersizedPkts.setStatus('current')
if mibBuilder.loadTexts: acEnetStatsUndersizedPkts.setDescription('The total number of packets received on this interface which were below a minimum 64byte length, expressed as a 64bit integer.')
acEnetStatsOversizedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsOversizedPkts.setStatus('current')
if mibBuilder.loadTexts: acEnetStatsOversizedPkts.setDescription('The total number of packets received on this interface which were determined to be greater than 1522 bytes in length, expressed as a 64bit integer.')
acEnetStatsFragmentedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsFragmentedPkts.setStatus('current')
if mibBuilder.loadTexts: acEnetStatsFragmentedPkts.setDescription('The total number of fragmented frames detected on this interface expressed as a 64bit integer.')
acEnetStatsJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsJabbers.setStatus('current')
if mibBuilder.loadTexts: acEnetStatsJabbers.setDescription('The total number of babbling jabbers detected on this interface, expressed as a 64bit integer.')
acEnetStatsCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsCollisions.setStatus('current')
if mibBuilder.loadTexts: acEnetStatsCollisions.setDescription('The total number of collisions detected on this interface during transmission attempts which have exceeded the maximum count of (16) per frame. This counter is expressed as a 64bit integer.')
acEnetStatsPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsPkts64Octets.setStatus('current')
if mibBuilder.loadTexts: acEnetStatsPkts64Octets.setDescription('The total number of frames transmitted and received which were exactly 64 bytes in length. This counter is expressed as a 64bit integer. This allows us to support the RMON mib.')
acEnetStatsPkts65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsPkts65to127Octets.setStatus('current')
if mibBuilder.loadTexts: acEnetStatsPkts65to127Octets.setDescription('The total number of packets transmitted and received on this interface which were between 65 and 127 bytes in length, expressed as a 64bit integer. This allows us to support the RMON mib.')
acEnetStatsPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsPkts128to255Octets.setStatus('current')
if mibBuilder.loadTexts: acEnetStatsPkts128to255Octets.setDescription('The total number of packets transmitted and received on this interface which were between 128 and 255 bytes in length, expressed as a 64bit integer. This allows us to support the RMON mib.')
acEnetStatsPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsPkts256to511Octets.setStatus('current')
if mibBuilder.loadTexts: acEnetStatsPkts256to511Octets.setDescription('The total number of packets transmitted and received on this interface which were between 256 and 511 bytes in length, expressed as a 64bit integer. This allows us to support the RMON mib.')
acEnetStatsPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsPkts512to1023Octets.setStatus('current')
if mibBuilder.loadTexts: acEnetStatsPkts512to1023Octets.setDescription('The total number of packets transmitted and received on this interface which were between 512 and 1023 bytes in length, expressed as a 64bit integer. This allows us to support the RMON mib.')
acEnetStatsPkts1024to1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsPkts1024to1518Octets.setStatus('current')
if mibBuilder.loadTexts: acEnetStatsPkts1024to1518Octets.setDescription('The total number of packets transmitted and received on this interface which were between 1024 and 1518 bytes in length, expressed as a 64bit integer. This allows us to support the RMON mib.')
acEnetStatsCurrentRxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsCurrentRxBandwidth.setStatus('current')
if mibBuilder.loadTexts: acEnetStatsCurrentRxBandwidth.setDescription('The current receive bandwidth expressed as a percentage value between 0 and 100%. Bandwidth is calculated by the ethernet driver upon the request for this attribute. The value is calculated by the equation: bw = (( octets-rx-delta / speed ) / 100 ) The delta counter is a value kept internally by the driver and not exposed in the MIB. The bandwidth value is represented as a whole number only.')
acEnetStatsCurrentTxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsCurrentTxBandwidth.setStatus('current')
if mibBuilder.loadTexts: acEnetStatsCurrentTxBandwidth.setDescription('The current transmit bandwidth expressed as a percentage value between 0 and 100%. Bandwidth is calculated by the ethernet driver upon the request for this attribute. The value is calculated by the equation: bw = (( octets-tx-delta / speed ) / 100 ) The delta counter is a value kept internally by the driver and not exposed in the MIB. The bandwidth value is represented as a whole number only.')
acEnetStatsPausePktsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsPausePktsRx.setReference('[IEEE 802.3 Std.], 30.3.4.3, aPAUSEMACCtrlFramesReceived.')
if mibBuilder.loadTexts: acEnetStatsPausePktsRx.setStatus('current')
if mibBuilder.loadTexts: acEnetStatsPausePktsRx.setDescription('A count of MAC Control frames received on this interface with an opcode indicating the PAUSE operation. This counter does not increment when the interface is operating in half-duplex mode. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times.')
acEnetStatsPausePktsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsPausePktsTx.setReference('[IEEE 802.3 Std.], 30.3.4.2, aPAUSEMACCtrlFramesTransmitted.')
if mibBuilder.loadTexts: acEnetStatsPausePktsTx.setStatus('current')
if mibBuilder.loadTexts: acEnetStatsPausePktsTx.setDescription('A count of MAC Control frames transmitted on this interface with an opcode indicating the PAUSE operation. This counter does not increment when the interface is operating in half-duplex mode. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times.')
acEnetStatsPkts1519to1522Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 1, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetStatsPkts1519to1522Octets.setStatus('current')
if mibBuilder.loadTexts: acEnetStatsPkts1519to1522Octets.setDescription('The total number of packets transmitted and received on this interface which were between 1519 and 1522 bytes in length, expressed as a 64bit integer. This allows us to support the RMON mib.')
acEnetCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2), )
if mibBuilder.loadTexts: acEnetCfgTable.setStatus('current')
if mibBuilder.loadTexts: acEnetCfgTable.setDescription('A table of configuration instances for Ethernet Access ports. This table is automatically created based on what hardware is installed in the slot.')
acEnetCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2, 1), ).setIndexNames((0, "APPIAN-PPORT-ETHERNET-MIB", "acEnetCfgNodeId"), (0, "APPIAN-PPORT-ETHERNET-MIB", "acEnetCfgSlot"), (0, "APPIAN-PPORT-ETHERNET-MIB", "acEnetCfgPort"))
if mibBuilder.loadTexts: acEnetCfgEntry.setStatus('current')
if mibBuilder.loadTexts: acEnetCfgEntry.setDescription('A row which contains the configuration parameters for an Ethernet Access port. These rows must be created by the EMS or CLI, and are not automatically instantiated by default.')
acEnetCfgNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acEnetCfgNodeId.setStatus('current')
if mibBuilder.loadTexts: acEnetCfgNodeId.setDescription('The node id is the id for this specific node in the OSAP ring.')
acEnetCfgSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2, 1, 2), AcSlotNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acEnetCfgSlot.setStatus('current')
if mibBuilder.loadTexts: acEnetCfgSlot.setDescription('The physical I/O slot where this access port is located.')
acEnetCfgPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2, 1, 3), AcPortNumber()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acEnetCfgPort.setStatus('current')
if mibBuilder.loadTexts: acEnetCfgPort.setDescription('The physical connector on the I/O module for this Ethernet port.')
acEnetCfgAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2, 1, 4), AcAdminStatus().clone('inactivate')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acEnetCfgAdminStatus.setStatus('current')
if mibBuilder.loadTexts: acEnetCfgAdminStatus.setDescription('Appian Administrative Status attribute used to set the provisioning state as either activate(1), inactivate(2) or delete(3). Refer to the Appian-SMI.mib file for additional information. Setting acEnetCfgAdminStatus to inactivate(2) disables the ethernet port.')
acEnetCfgOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2, 1, 5), AcOpStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetCfgOpStatus.setStatus('current')
if mibBuilder.loadTexts: acEnetCfgOpStatus.setDescription('The current operational status for the Ethernet module controlling this port.')
acEnetCfgOpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetCfgOpCode.setStatus('current')
if mibBuilder.loadTexts: acEnetCfgOpCode.setDescription('Provides a detailed status code which can be used to isolate a problem or state condition reported in acEnetCfgOpStatus.')
acEnetCfgStatsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acEnetCfgStatsReset.setStatus('current')
if mibBuilder.loadTexts: acEnetCfgStatsReset.setDescription('Setting this attribute to True(1) will force all statistics for this row to be cleared and set to zero (0) values. Used for debugging, clearing statistics can trouble with trending and long term statistics collection by AppianVista or 3rd party trending tools. Note: Reading this attribute will always return false().')
acEnetCfgMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("mbe", 1), ("gbe", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetCfgMediaType.setStatus('current')
if mibBuilder.loadTexts: acEnetCfgMediaType.setDescription('Attribute to determine if this module is a 10mb/100mb or 1gb interface.')
acEnetCfgPhysicalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2, 1, 9), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 13))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetCfgPhysicalAddress.setStatus('current')
if mibBuilder.loadTexts: acEnetCfgPhysicalAddress.setDescription('The physical address (MAC Address) assigned to this physical Ethernet port.')
acEnetCfgActiveMediaSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2, 1, 10), AcSlotNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetCfgActiveMediaSlot.setStatus('current')
if mibBuilder.loadTexts: acEnetCfgActiveMediaSlot.setDescription('This object identifies the slot in the chassis carrying the active media board for this port.')
acEnetCfgStandbyMediaSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2, 1, 11), AcSlotNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetCfgStandbyMediaSlot.setStatus('current')
if mibBuilder.loadTexts: acEnetCfgStandbyMediaSlot.setDescription('This object identifies the slot in the chassis carrying the standby media board for this port.')
acEnetCfgMultiServiceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acEnetCfgMultiServiceEnable.setStatus('current')
if mibBuilder.loadTexts: acEnetCfgMultiServiceEnable.setDescription('Flag used to enable or disable multi-service for this Ethernet access port. When set to True(2), the port is used for multi-service.')
acEnetCfgSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2, 1, 13), AcEnetSpeed().clone('mb100')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acEnetCfgSpeed.setStatus('current')
if mibBuilder.loadTexts: acEnetCfgSpeed.setDescription('The desired configured speed of the physical interface.')
acEnetCfgDuplexity = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2, 1, 14), AcEnetDuplexity().clone('full')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acEnetCfgDuplexity.setStatus('current')
if mibBuilder.loadTexts: acEnetCfgDuplexity.setDescription('The desired configured duplexity mode. By default set to full(1) but for interfacing to some older hubs, which do not perform link duplexity negotiation properly, manual configuration may be necessary.')
acEnetCfgCurrentSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2, 1, 15), AcEnetSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetCfgCurrentSpeed.setStatus('current')
if mibBuilder.loadTexts: acEnetCfgCurrentSpeed.setDescription('The current operational interface speed for this Ethernet port as determined by the MAC PHY interface. If using Auto Negotiation, the current speed may be different than the configured speed.')
acEnetCfgCurrentDuplexity = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2, 1, 16), AcEnetDuplexity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetCfgCurrentDuplexity.setStatus('current')
if mibBuilder.loadTexts: acEnetCfgCurrentDuplexity.setDescription('The current operational duplexity mode for this Ethernet port as determined by the MAC PHY interface. If using Auto Negotiation, the current duplexity may be different than the configured duplexity.')
acEnetCfgInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('Ethernet Interface')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acEnetCfgInterfaceName.setStatus('current')
if mibBuilder.loadTexts: acEnetCfgInterfaceName.setDescription('The user configurable interface name which is an ASCII string up to 64 characters in length.')
acEnetCfgLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2, 1, 18), AcEnetLinkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetCfgLinkState.setStatus('current')
if mibBuilder.loadTexts: acEnetCfgLinkState.setDescription('The link state for this physical interface. Link state is determined by the Ethernet PHY logic and indicates whether or not the cable is properly connected and signal is present.')
acEnetCfgAutoNegotiate = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2, 1, 19), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acEnetCfgAutoNegotiate.setStatus('current')
if mibBuilder.loadTexts: acEnetCfgAutoNegotiate.setDescription('Setting this attribute to True(1) will force this interface to use Auto Negotiation to determine interface speed and duplexity. When set in this mode, the values of acEnetCfgSpeed and acEnetCfgDuplexity will be ignored. The interface shall advertise the ability to run at 10M and 100M, and will advertise both half and full duplex capabilities. When this attribute is set to False(0), the interface will be configured according to the values in the acEnetCfgSpeed and acEnetCfgDuplexity attributes.')
acEnetCfgPauseAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("enabledXmit", 2), ("enabledRcv", 3), ("enabledXmitAndRcv", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acEnetCfgPauseAdminMode.setStatus('current')
if mibBuilder.loadTexts: acEnetCfgPauseAdminMode.setDescription("This object is used to configure the default administrative PAUSE mode for this interface. This object represents the administratively-configured PAUSE mode for this interface. If auto-negotiation is not enabled or is not implemented for the active MAU attached to this interface, the value of this object determines the operational PAUSE mode of the interface whenever it is operating in full-duplex mode. In this case, a set to this object will force the interface into the specified mode. If auto-negotiation is implemented and enabled for the MAU attached to this interface, the PAUSE mode for this interface is determined by auto-negotiation, and the value of this object denotes the mode to which the interface will automatically revert if/when auto-negotiation is later disabled. Note that the value of this object is ignored when the interface is not operating in full-duplex mode. An attempt to set this object to 'enabledXmit(2)' or 'enabledRcv(3)' will fail on interfaces that do not support operation at greater than 100 Mb/s.")
acEnetCfgPauseOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("enabledXmit", 2), ("enabledRcv", 3), ("enabledXmitAndRcv", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acEnetCfgPauseOperMode.setStatus('current')
if mibBuilder.loadTexts: acEnetCfgPauseOperMode.setDescription("This object reflects the PAUSE mode currently in use on this interface, as determined by either (1) the result of the auto-negotiation function or (2) if auto-negotiation is not enabled or is not implemented for the active MAU attached to this interface, by the value of acPauseAdminMode. Interfaces operating at 100 Mb/s or less will never return 'enabledXmit(2)' or 'enabledRcv(3)'. Interfaces operating in half-duplex mode will always return 'disabled(1)'. Interfaces on which auto-negotiation is enabled but not yet completed should return the value 'disabled(1)'.")
acEnetTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 0))
acEnetLinkDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 0, 1)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-ETHERNET-MIB", "acEnetCfgNodeId"), ("APPIAN-PPORT-ETHERNET-MIB", "acEnetCfgSlot"), ("APPIAN-PPORT-ETHERNET-MIB", "acEnetCfgPort"))
if mibBuilder.loadTexts: acEnetLinkDownTrap.setStatus('current')
if mibBuilder.loadTexts: acEnetLinkDownTrap.setDescription('The physical cable for this Ethernet interface has been detected as disconnected.')
acEnetLinkUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 0, 2)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-ETHERNET-MIB", "acEnetCfgNodeId"), ("APPIAN-PPORT-ETHERNET-MIB", "acEnetCfgSlot"), ("APPIAN-PPORT-ETHERNET-MIB", "acEnetCfgPort"))
if mibBuilder.loadTexts: acEnetLinkUpTrap.setStatus('current')
if mibBuilder.loadTexts: acEnetLinkUpTrap.setDescription('The physical cable for this Ethernet interface has been detected as connected.')
acEnetStatsResetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 0, 3)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-ETHERNET-MIB", "acEnetCfgNodeId"), ("APPIAN-PPORT-ETHERNET-MIB", "acEnetCfgSlot"), ("APPIAN-PPORT-ETHERNET-MIB", "acEnetCfgPort"))
if mibBuilder.loadTexts: acEnetStatsResetTrap.setStatus('current')
if mibBuilder.loadTexts: acEnetStatsResetTrap.setDescription('The Ethernet statistics for this interface have been reset to zero (0) which may effect long term trending functions monitoring this interface.')
acEnetFailoverTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 0, 4)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-ETHERNET-MIB", "acEnetCfgNodeId"), ("APPIAN-PPORT-ETHERNET-MIB", "acEnetCfgSlot"), ("APPIAN-PPORT-ETHERNET-MIB", "acEnetCfgPort"), ("APPIAN-PPORT-ETHERNET-MIB", "acEnetCfgOpCode"))
if mibBuilder.loadTexts: acEnetFailoverTrap.setStatus('current')
if mibBuilder.loadTexts: acEnetFailoverTrap.setDescription('A failover condition has been detected. Control has been changed to the standby Ethernet media module. Refer to acEnetCfgActiveMediaSlot and acEnetCfgStandbyMediaSlot for active and standby configuration.')
acEnetCfgErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 2785, 2, 3, 3, 0, 5)).setObjects(("APPIAN-CHASSIS-MIB", "acChassisCurrentTime"), ("APPIAN-CHASSIS-MIB", "acChassisRingId"), ("APPIAN-PPORT-ETHERNET-MIB", "acEnetCfgNodeId"), ("APPIAN-PPORT-ETHERNET-MIB", "acEnetCfgSlot"), ("APPIAN-PPORT-ETHERNET-MIB", "acEnetCfgPort"), ("APPIAN-PPORT-ETHERNET-MIB", "acEnetCfgOpCode"))
if mibBuilder.loadTexts: acEnetCfgErrorTrap.setStatus('current')
if mibBuilder.loadTexts: acEnetCfgErrorTrap.setDescription('A configuration request to the Ethernet configuration table for an interface has been detected as invalid or corrupt.')
mibBuilder.exportSymbols("APPIAN-PPORT-ETHERNET-MIB", acEnetStatsSlot=acEnetStatsSlot, AcEnetSpeed=AcEnetSpeed, acEnetStatsPkts128to255Octets=acEnetStatsPkts128to255Octets, acEnetStatsPkts65to127Octets=acEnetStatsPkts65to127Octets, acEnetStatsPkts256to511Octets=acEnetStatsPkts256to511Octets, acEnetCfgCurrentSpeed=acEnetCfgCurrentSpeed, acEnetCfgNodeId=acEnetCfgNodeId, AcEnetLinkState=AcEnetLinkState, acEnetStatsPktsTx=acEnetStatsPktsTx, acEnetStatsOctetsRx=acEnetStatsOctetsRx, acEnetStatsCrcAlignErrors=acEnetStatsCrcAlignErrors, acEnetStatsResetTrap=acEnetStatsResetTrap, acEnetStatsPausePktsRx=acEnetStatsPausePktsRx, acEnetStatsPkts1024to1518Octets=acEnetStatsPkts1024to1518Octets, acEnetCfgMultiServiceEnable=acEnetCfgMultiServiceEnable, acEnetStatsCurrentTxBandwidth=acEnetStatsCurrentTxBandwidth, acEnetStatsPkts64Octets=acEnetStatsPkts64Octets, acEnetCfgStandbyMediaSlot=acEnetCfgStandbyMediaSlot, acEnetStatsUndersizedPkts=acEnetStatsUndersizedPkts, acEnetLinkDownTrap=acEnetLinkDownTrap, acEnetStatsPausePktsTx=acEnetStatsPausePktsTx, acEnetCfgInterfaceName=acEnetCfgInterfaceName, acEnetCfgPauseAdminMode=acEnetCfgPauseAdminMode, acEnetStatsBcastPktsRx=acEnetStatsBcastPktsRx, acEnetStatsMcastPktsTx=acEnetStatsMcastPktsTx, acEnetStatsOctetsTx=acEnetStatsOctetsTx, acEnetStatsMcastPktsRx=acEnetStatsMcastPktsRx, acEnetCfgErrorTrap=acEnetCfgErrorTrap, acEnetStatsJabbers=acEnetStatsJabbers, acEnetCfgStatsReset=acEnetCfgStatsReset, acEnetCfgPauseOperMode=acEnetCfgPauseOperMode, acEnetCfgOpCode=acEnetCfgOpCode, acEnetCfgActiveMediaSlot=acEnetCfgActiveMediaSlot, acEnetStatsBcastPktsTx=acEnetStatsBcastPktsTx, acEnetCfgCurrentDuplexity=acEnetCfgCurrentDuplexity, acEnetStatsOversizedPkts=acEnetStatsOversizedPkts, acEnetTraps=acEnetTraps, acEnetStatsPkts512to1023Octets=acEnetStatsPkts512to1023Octets, acEnetCfgAdminStatus=acEnetCfgAdminStatus, acEnetCfgAutoNegotiate=acEnetCfgAutoNegotiate, acEnetCfgLinkState=acEnetCfgLinkState, acEnetStatsFragmentedPkts=acEnetStatsFragmentedPkts, acEnetStatsTable=acEnetStatsTable, acEnetCfgPort=acEnetCfgPort, acEnetCfgOpStatus=acEnetCfgOpStatus, acEnetStatsPkts1519to1522Octets=acEnetStatsPkts1519to1522Octets, acEnetCfgSpeed=acEnetCfgSpeed, acEnetStatsPort=acEnetStatsPort, PYSNMP_MODULE_ID=acEnet, acEnetCfgDuplexity=acEnetCfgDuplexity, acEnetCfgEntry=acEnetCfgEntry, acEnetCfgPhysicalAddress=acEnetCfgPhysicalAddress, acEnetCfgTable=acEnetCfgTable, acEnetStatsPktsRx=acEnetStatsPktsRx, acEnet=acEnet, acEnetStatsCurrentRxBandwidth=acEnetStatsCurrentRxBandwidth, AcEnetDuplexity=AcEnetDuplexity, acEnetStatsEntry=acEnetStatsEntry, acEnetStatsNodeId=acEnetStatsNodeId, acEnetCfgSlot=acEnetCfgSlot, acEnetLinkUpTrap=acEnetLinkUpTrap, acEnetFailoverTrap=acEnetFailoverTrap, acEnetStatsCollisions=acEnetStatsCollisions, acEnetCfgMediaType=acEnetCfgMediaType)
