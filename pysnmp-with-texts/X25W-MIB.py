#
# PySNMP MIB module X25W-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/X25W-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:42:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, IpAddress, NotificationType, TimeTicks, enterprises, iso, experimental, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, MibIdentifier, Unsigned32, ModuleIdentity, Bits, Integer32, Counter32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "IpAddress", "NotificationType", "TimeTicks", "enterprises", "iso", "experimental", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "MibIdentifier", "Unsigned32", "ModuleIdentity", "Bits", "Integer32", "Counter32", "Gauge32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
usr = MibIdentifier((1, 3, 6, 1, 4, 1, 429))
nas = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1))
x25w = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 8))
x25wanAdmn = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 8, 1))
x25wanAdmnTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 8, 1, 1), )
if mibBuilder.loadTexts: x25wanAdmnTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25wanAdmnTable.setDescription('The x25 WAN Admn table contains an entry for each manageable X.25 Subnet in the chassis. It provides a means to configure serial interface associated with the subnet.')
x25wanAdmnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 8, 1, 1, 1), ).setIndexNames((0, "X25W-MIB", "x25wanAdmnIndex"))
if mibBuilder.loadTexts: x25wanAdmnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25wanAdmnEntry.setDescription('There is one x25 WAN Cfg entry per x.25 subnet in the NAS chassis.')
x25wanAdmnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanAdmnIndex.setStatus('mandatory')
if mibBuilder.loadTexts: x25wanAdmnIndex.setDescription("A unique value for each X.25 Subnet in the chassis. The value of this object matches the value of the index of the corresponding X.25 Subnet's entry in the entity table of the chassis MIB.")
x25wanAdmnType = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rs232", 1), ("v35", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25wanAdmnType.setStatus('mandatory')
if mibBuilder.loadTexts: x25wanAdmnType.setDescription('Defines which physical serial interface type is implemented.')
x25wanAdmnSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 393216))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25wanAdmnSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: x25wanAdmnSpeed.setDescription('Defines the serial port speed used in applications where the Gateway NAC generates a clock. This object will not effect the clock speed when the host provides the clock source. Default=57600.')
x25wanAdmnLinkAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dsr", 1), ("dcd", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25wanAdmnLinkAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: x25wanAdmnLinkAvailable.setDescription('Defines whether the WAN interface looks at DCD rather than DSR to determine that the physical layer is active.')
x25wanAdmnClockSouce = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dceRxTx", 1), ("dceRxOnly", 2), ("brgRxTx", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25wanAdmnClockSouce.setStatus('mandatory')
if mibBuilder.loadTexts: x25wanAdmnClockSouce.setDescription('Determines the source of the synchronous data clock.')
x25wanAdmnMaxFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 519))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25wanAdmnMaxFrmSize.setStatus('mandatory')
if mibBuilder.loadTexts: x25wanAdmnMaxFrmSize.setDescription('Determines the maximum received frame size allowed on the X.25 WAN. Default=300.')
x25wanOper = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 8, 2))
x25wanOperTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 8, 2, 1), )
if mibBuilder.loadTexts: x25wanOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25wanOperTable.setDescription('')
x25wanOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 8, 2, 1, 1), ).setIndexNames((0, "X25W-MIB", "x25wanOperIndex"))
if mibBuilder.loadTexts: x25wanOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25wanOperEntry.setDescription('')
x25wanOperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanOperIndex.setStatus('mandatory')
if mibBuilder.loadTexts: x25wanOperIndex.setDescription('')
x25wanOperType = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rs232", 1), ("v35", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanOperType.setStatus('mandatory')
if mibBuilder.loadTexts: x25wanOperType.setDescription('')
x25wanOperSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 393216))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanOperSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: x25wanOperSpeed.setDescription('')
x25wanOperLinkAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dsr", 1), ("dcd", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanOperLinkAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: x25wanOperLinkAvailable.setDescription('')
x25wanOperClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dceRxTx", 1), ("dceRxOnly", 2), ("brgRxTx", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanOperClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: x25wanOperClockSource.setDescription('')
x25wanOperMaxFrmSize = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 519))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanOperMaxFrmSize.setStatus('mandatory')
if mibBuilder.loadTexts: x25wanOperMaxFrmSize.setDescription('')
x25wanStats = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 8, 3))
x25wanStatsTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 8, 3, 1), )
if mibBuilder.loadTexts: x25wanStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25wanStatsTable.setDescription('The x25wanStatsTable is composed of counters which allow the operator to view activity which can indicate the health of the WAN connection.')
x25wanStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 8, 3, 1, 1), ).setIndexNames((0, "X25W-MIB", "x25wanStatsIndex"))
if mibBuilder.loadTexts: x25wanStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25wanStatsEntry.setDescription('There is one X.25 WAN status entry for each x.25 subnet installed in the NAS chassis.')
x25wanStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanStatsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: x25wanStatsIndex.setDescription('A unique value for each X25 WAN port in the NAS chassis. The value of this index matches is the entity index associated with this X25 subnet found in the USR Chassis MIB.')
x25wanStatsGoodFramesTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanStatsGoodFramesTxs.setStatus('mandatory')
if mibBuilder.loadTexts: x25wanStatsGoodFramesTxs.setDescription('A count of the number of good frames transmitted since this entity was initialized.')
x25wanStatsGoodFramesRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanStatsGoodFramesRxs.setStatus('mandatory')
if mibBuilder.loadTexts: x25wanStatsGoodFramesRxs.setDescription('A count of the good frames received since this entity was intitalized.')
x25wanStatsTxUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanStatsTxUnderruns.setStatus('mandatory')
if mibBuilder.loadTexts: x25wanStatsTxUnderruns.setDescription('A count of the number of transmit underruns that have been seen by this entity since initialization.')
x25wanStatsRxOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanStatsRxOverruns.setStatus('mandatory')
if mibBuilder.loadTexts: x25wanStatsRxOverruns.setDescription('The number of receiver overruns detected by this entity since intitialization.')
x25wanStatsRxCrcErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanStatsRxCrcErrs.setStatus('mandatory')
if mibBuilder.loadTexts: x25wanStatsRxCrcErrs.setDescription('The number of received crc errors since this entity was intitialized.')
x25wanStatsRxFrameNoBufs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanStatsRxFrameNoBufs.setStatus('mandatory')
if mibBuilder.loadTexts: x25wanStatsRxFrameNoBufs.setDescription('The number of times this entity has recieved data without a buffer to place it into.')
x25wanStatsUnrecoveredRxs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanStatsUnrecoveredRxs.setStatus('mandatory')
if mibBuilder.loadTexts: x25wanStatsUnrecoveredRxs.setDescription('The number of overrun frames that the entity was unable to recover.')
x25wanStatsRxOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanStatsRxOverflows.setStatus('mandatory')
if mibBuilder.loadTexts: x25wanStatsRxOverflows.setDescription('The number of receive buffer overflows seen by this entity since initialization.')
x25wanStatsRxAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanStatsRxAborts.setStatus('mandatory')
if mibBuilder.loadTexts: x25wanStatsRxAborts.setDescription('The number of recieve frame aborts seen by this entity since initialization.')
x25wanStatsRxTooLongs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanStatsRxTooLongs.setStatus('mandatory')
if mibBuilder.loadTexts: x25wanStatsRxTooLongs.setDescription('The number of frames recieved that exceeded the defined maximum receive frame size.')
x25wanStatsTxTooShorts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanStatsTxTooShorts.setStatus('mandatory')
if mibBuilder.loadTexts: x25wanStatsTxTooShorts.setDescription('The number of times that the upper protocol layers attempted to transmit too small a frame.')
x25wanStatsRxTooShorts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanStatsRxTooShorts.setStatus('mandatory')
if mibBuilder.loadTexts: x25wanStatsRxTooShorts.setDescription('A count of the number of frames received that were smaller than the minimum frame size.')
x25wanStatsTxBadPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanStatsTxBadPackets.setStatus('mandatory')
if mibBuilder.loadTexts: x25wanStatsTxBadPackets.setDescription('The number of bad packets that the WAN interface received for transmission from the upper layers of the X.25 protocol stack.')
x25wanStatsTxRingQFulls = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanStatsTxRingQFulls.setStatus('mandatory')
if mibBuilder.loadTexts: x25wanStatsTxRingQFulls.setDescription('A count of the number of times the circular buffer used for transmission was full when a transmission was attempted by the upper layers of the X.25 protocol stack.')
x25wanStatsRxRingQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 3, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanStatsRxRingQSize.setStatus('mandatory')
if mibBuilder.loadTexts: x25wanStatsRxRingQSize.setDescription('A number that indicates the received circular queue size on the X.25 WAN.')
x25wanStatsDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanStatsDSR.setStatus('mandatory')
if mibBuilder.loadTexts: x25wanStatsDSR.setDescription('X.25 WAN interface DSR signal status.')
x25wanStatsCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanStatsCTS.setStatus('mandatory')
if mibBuilder.loadTexts: x25wanStatsCTS.setDescription('X.25 WAN interface CTS signal status.')
x25wanStatsDCD = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanStatsDCD.setStatus('mandatory')
if mibBuilder.loadTexts: x25wanStatsDCD.setDescription('X.25 WAN interface DCD signal status.')
x25wanTrapEna = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 8, 4))
x25wanTrapEnaTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 8, 4, 1), )
if mibBuilder.loadTexts: x25wanTrapEnaTable.setStatus('mandatory')
if mibBuilder.loadTexts: x25wanTrapEnaTable.setDescription('The x25 WAN Trap Enable table contains an entry for each manageable X.25 Subnet in the chassis. It provides a means to enable reporting of traps associated with the subnet.')
x25wanTrapEnaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 8, 4, 1, 1), ).setIndexNames((0, "X25W-MIB", "x25wanTrapEnaIndex"))
if mibBuilder.loadTexts: x25wanTrapEnaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: x25wanTrapEnaEntry.setDescription('There is one x25 WAN Cfg entry per x.25 subnet in the NAS chassis.')
x25wanTrapEnaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25wanTrapEnaIndex.setStatus('mandatory')
if mibBuilder.loadTexts: x25wanTrapEnaIndex.setDescription("A unique value for each X.25 Subnet in the chassis. The value of this object matches the value of the index of the corresponding X.25 Subnet's entry in the entity table of the chassis MIB.")
x25wanTrapEnaOutOfSvc = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25wanTrapEnaOutOfSvc.setStatus('mandatory')
if mibBuilder.loadTexts: x25wanTrapEnaOutOfSvc.setDescription('Enables generation of a trap when the WAN port status changes from Link Active to Out Of Service.')
x25wanTrapEnaLinkActive = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 8, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25wanTrapEnaLinkActive.setStatus('mandatory')
if mibBuilder.loadTexts: x25wanTrapEnaLinkActive.setDescription('Enables generation of a trap when the WAN port status changes from Out Of Service to Link Active.')
mibBuilder.exportSymbols("X25W-MIB", x25wanAdmnTable=x25wanAdmnTable, x25wanAdmnLinkAvailable=x25wanAdmnLinkAvailable, x25wanStatsRxFrameNoBufs=x25wanStatsRxFrameNoBufs, x25wanTrapEnaOutOfSvc=x25wanTrapEnaOutOfSvc, usr=usr, x25wanStatsTxBadPackets=x25wanStatsTxBadPackets, x25wanTrapEnaIndex=x25wanTrapEnaIndex, x25wanStatsGoodFramesTxs=x25wanStatsGoodFramesTxs, x25wanOperMaxFrmSize=x25wanOperMaxFrmSize, x25wanStatsGoodFramesRxs=x25wanStatsGoodFramesRxs, x25wanOperEntry=x25wanOperEntry, x25wanStatsIndex=x25wanStatsIndex, x25wanAdmnIndex=x25wanAdmnIndex, x25wanTrapEnaLinkActive=x25wanTrapEnaLinkActive, x25wanOper=x25wanOper, x25wanTrapEnaTable=x25wanTrapEnaTable, x25wanStatsCTS=x25wanStatsCTS, x25wanStatsDSR=x25wanStatsDSR, x25wanStatsTable=x25wanStatsTable, x25wanOperTable=x25wanOperTable, x25wanStatsDCD=x25wanStatsDCD, x25wanStatsRxOverflows=x25wanStatsRxOverflows, x25wanOperClockSource=x25wanOperClockSource, x25wanAdmnMaxFrmSize=x25wanAdmnMaxFrmSize, x25wanStatsRxTooShorts=x25wanStatsRxTooShorts, x25wanStatsTxTooShorts=x25wanStatsTxTooShorts, x25wanStatsRxRingQSize=x25wanStatsRxRingQSize, x25wanStatsEntry=x25wanStatsEntry, x25wanAdmnSpeed=x25wanAdmnSpeed, x25wanStatsRxOverruns=x25wanStatsRxOverruns, x25wanTrapEna=x25wanTrapEna, x25wanAdmnEntry=x25wanAdmnEntry, x25wanOperIndex=x25wanOperIndex, x25wanOperSpeed=x25wanOperSpeed, x25wanStatsRxCrcErrs=x25wanStatsRxCrcErrs, x25wanStatsTxUnderruns=x25wanStatsTxUnderruns, x25wanStatsRxTooLongs=x25wanStatsRxTooLongs, x25wanStatsTxRingQFulls=x25wanStatsTxRingQFulls, nas=nas, x25w=x25w, x25wanAdmnType=x25wanAdmnType, x25wanStats=x25wanStats, x25wanStatsRxAborts=x25wanStatsRxAborts, x25wanTrapEnaEntry=x25wanTrapEnaEntry, x25wanStatsUnrecoveredRxs=x25wanStatsUnrecoveredRxs, x25wanAdmn=x25wanAdmn, x25wanOperType=x25wanOperType, x25wanOperLinkAvailable=x25wanOperLinkAvailable, x25wanAdmnClockSouce=x25wanAdmnClockSouce)
