#
# PySNMP MIB module BAY-STACK-EAPOL-EXTENSION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAY-STACK-EAPOL-EXTENSION-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:35:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
VlanId, VlanIdOrNone, VlanIdOrAny = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId", "VlanIdOrNone", "VlanIdOrAny")
LPortSet, = mibBuilder.importSymbols("RAPID-CITY", "LPortSet")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, Counter32, ModuleIdentity, MibIdentifier, NotificationType, Gauge32, Integer32, iso, TimeTicks, Bits, IpAddress, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter32", "ModuleIdentity", "MibIdentifier", "NotificationType", "Gauge32", "Integer32", "iso", "TimeTicks", "Bits", "IpAddress", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64")
DisplayString, MacAddress, RowStatus, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "RowStatus", "TextualConvention", "TruthValue")
bayStackMibs, = mibBuilder.importSymbols("SYNOPTICS-ROOT-MIB", "bayStackMibs")
bayStackEapExtMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 45, 5, 3))
bayStackEapExtMib.setRevisions(('2015-09-10 00:00', '2015-08-05 00:00', '2015-07-20 00:00', '2015-03-31 00:00', '2014-12-22 00:00', '2014-09-01 00:00', '2013-03-04 00:00', '2013-02-08 00:00', '2013-01-17 00:00', '2012-11-27 00:00', '2012-11-05 00:00', '2012-08-01 00:00', '2012-05-23 00:00', '2012-03-01 00:00', '2011-10-06 00:00', '2011-07-22 00:00', '2011-06-26 00:00', '2010-09-07 00:00', '2010-01-25 00:00', '2010-01-11 00:00', '2008-11-11 00:00', '2008-07-03 00:00', '2008-06-30 00:00', '2008-04-14 00:00', '2008-03-28 00:00', '2007-11-09 00:00', '2006-11-01 00:00', '2006-05-24 00:00', '2005-06-27 00:00', '2005-03-10 00:00', '2005-02-17 00:00', '2004-11-11 00:00', '2004-08-31 00:00', '2004-07-20 00:00', '2003-09-18 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: bayStackEapExtMib.setRevisionsDescriptions(('v036: Added bseeAutoPortConfigModeSwitchToMHMV, bseeAutoPortConfigModeSwitchToMHMVAction, bseeAutoPortConfigModeSwitchToMHMVResult', "v035: Remove bseePortConfigFailOpenVlanNoChange and cover it's functionality inside bseePortConfigFailOpenVlanId", 'v034: Added bseePortConfigFailOpenVlanId bseePortConfigFailOpenVlanEnabled bseePortConfigFailOpenVlanNoChange bseePortConfigFailOpenVlanUBP', 'v033: Extend the range for bseeMultiHostNonEapStatusState with the value lldpAuthenticated(7)', 'v032: Added bseeMultiHostStatusFaBindings & bseeMultiHostNonEapStatusFaBindings', 'v031: Added bseePortConfigMultiHostSingleAuthNoLimit', 'v030: Added bseePortConfigMultiHostMaxMacs', 'v029: Added bseeDefaultEapAll & bseePortConfigDefaultEapAll', 'v028: Added bseeMultiHostFailOpenVlanDisableEapMode & bseePaeSystemOperState', 'v027: Added the padding bit in bseeMultihostNonEapRadiusPasswordAttributeFormat', 'v026: Added support for NEAP freeform password', 'v025: Added bseeMultiHostFailOpenVlanContinuityModeEnabled', 'v024: Added bseeMultiHostAdacNonEapEnabled, bseePortConfigMultiHostAdacNonEapEnabled.', 'v023: Added bseeMultiHostDhcpAuthPhoneTable.', 'v022: Added bseeAllowPortMirroringOnEap.', 'v021: Added bseeMultiHostAdacDummyRadiusRequests.', 'v020: Added bseeMultiHostBlockDifferentVlanAuth & bseePortConfigMultiHostBlockDifferentVlanAuth.', 'v019: Added bseePortConfigMultiHostClearNeap.', 'v018: Added bseeMultiHostStatusVid, bseeMultiHostStatusPri, bseeMultiHostNonEapStatusVid, bseeMultiHostNonEapStatusPri.', 'v017: Added bseeMultiHostMultiVlan.', 'v016: Added support for fail-open and voip vlan.', 'v015: Added support for using most recent RADIUS-assigned vlan.', 'v014: Added support for EAPOL supplicants.', 'v013: Added bseeMultiHostEapProtocolEnabled and bseePortConfigEapProtocolEnabled.', 'v012: Added bseePortConfigProcessRadiusRequestsServerPackets', 'v011: Added bseeMultiHostAllowNonEapRadiusAssignedVlan and bseePortConfigMultiHostAllowNonEapRadiusAssignedVlan.', 'v010 Added support for various additional EAP features: - allowing IP phones based on DHCP - allowing use of radius assigned VLAN in multihost-eap mode - use of unicast packets for Eap-ReqId packets - fail or not-fail EAP users on radius timeout (default is to fail)', 'v009: Added non-eap ubp support, filter-on-mac ubp support, configurable non-eap radius password attribute format support, re-auth of individual MAC addrs support.', 'v008: Added MHSA support. Added new non-eap auth reasons.', 'v007: Cleaned up some DESCRIPTION clauses. Added bseeMultiHostNonEapStatusTable.', 'v006: Added objects: bseeMultiHostAllowNonEapClient bseeMultiHostRadiusAuthNonEapClient bseePortConfigMultiHostRadiusAuthNonEapClient deprecated bseePortConfigMultiHostNonEapMacSource.', 'v005: Added bseeMultiHostNonEapMacTable.', 'v004: Changes to have separate enable/disable flag for guest vlan and remediation vlan. Added objects: bseeGuestVlanEnabled bseeRemediationVlanEnabled bseePortConfigGuestVlanEnabled', 'v003: Added enhancements for guest vlan, remediation vlan, and multihost support.', 'v001: Initial version.',))
if mibBuilder.loadTexts: bayStackEapExtMib.setLastUpdated('201509100000Z')
if mibBuilder.loadTexts: bayStackEapExtMib.setOrganization('Avaya')
if mibBuilder.loadTexts: bayStackEapExtMib.setContactInfo('Avaya')
if mibBuilder.loadTexts: bayStackEapExtMib.setDescription("BayStack EAPOL Extension MIB Copyright 2003-2010 Avaya All rights reserved. This Avaya SNMP Management Information Base Specification (Specification) embodies Avaya's confidential and proprietary intellectual property. Avaya retains all title and ownership in the Specification, including any revisions. This Specification is supplied 'AS IS,' and Avaya makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
bseeNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 3, 2))
bseeNotifications0 = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 3, 2, 0))
bseeObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 3, 1))
bseeUserBasedPoliciesEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeUserBasedPoliciesEnabled.setStatus('current')
if mibBuilder.loadTexts: bseeUserBasedPoliciesEnabled.setDescription('This object indicates whether EAPOL User-based policies are enabled or disabled.')
bseeGuestVlanId = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 2), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeGuestVlanId.setStatus('current')
if mibBuilder.loadTexts: bseeGuestVlanId.setDescription('This object specifies the ID of the global default guest VLAN. This VLAN is used for ports which do not have a configured guest VLAN. Access to the guest VLAN is allowed for MAC addresses before EAP authentication has been performed. However, if the value of bseeGuestVlanEnabled is false(2), then access to the guest VLAN is not allowed for ports that do not have a configured guest VLAN.')
bseeRemediationVlanId = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 3), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeRemediationVlanId.setStatus('current')
if mibBuilder.loadTexts: bseeRemediationVlanId.setDescription('This object specifies the ID of the remediation VLAN. If EAP authentication fails for a port, MAC addresses on that port are restricted to access only the remediation VLAN. However, if the value of bseeRemediationVlanEnabled is false(2), then access is not allowed at all for a port when EAP authentication fails.')
bseeMaximumEapClientMacs = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMaximumEapClientMacs.setStatus('current')
if mibBuilder.loadTexts: bseeMaximumEapClientMacs.setDescription('This object specifies the global maximum number of EAP authenticated MAC addresses allowed.')
bseeMaximumNonEapClientMacs = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 800))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMaximumNonEapClientMacs.setStatus('current')
if mibBuilder.loadTexts: bseeMaximumNonEapClientMacs.setDescription('This object specifies the global maximum number of non-EAP authenticated MAC addresses allowed.')
bseeGuestVlanEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeGuestVlanEnabled.setStatus('current')
if mibBuilder.loadTexts: bseeGuestVlanEnabled.setDescription('This object specifies whether access to the global default guest VLAN is allowed.')
bseeRemediationVlanEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeRemediationVlanEnabled.setStatus('current')
if mibBuilder.loadTexts: bseeRemediationVlanEnabled.setDescription('This object specifies whether access to the remediation VLAN is allowed.')
bseeMultiHostAllowNonEapClient = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostAllowNonEapClient.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostAllowNonEapClient.setDescription('This object controls whether non-EAP clients (MAC addresses) are allowed. This is the system-wide setting. The associated per-port setting (bseePortConfigMultiHostAllowNonEapClient) must also be true for non-EAP clients to be allowed on a particular port.')
bseeMultiHostRadiusAuthNonEapClient = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostRadiusAuthNonEapClient.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostRadiusAuthNonEapClient.setDescription('This object controls whether non-EAP clients (MAC addresses) may be authenticated using RADIUS. This is the system-wide setting. The associated per-port setting (bseePortConfigMultiHostRadiusAuthNonEapClient) must also be true for non-EAP clients to be authenticated using RADIUS on a particular port.')
bseeMultiHostSingleAuthEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostSingleAuthEnabled.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostSingleAuthEnabled.setDescription('This object controls whether non-EAP clients (MAC addresses) may be automatically authenticated on a port after an EAP client has been authenticated (known as MHSA). This is the system-wide setting. The associated per-port setting must also be true for non-EAP clients to be authenticated in this way.')
bseeUserBasedPoliciesFilterOnMac = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeUserBasedPoliciesFilterOnMac.setStatus('current')
if mibBuilder.loadTexts: bseeUserBasedPoliciesFilterOnMac.setDescription('This object indicates whether the EAPOL User-based policy filters that are installed on ports will be dynamically modified to include the MAC address for which the filters are installed.')
bseeMultiHostNonEapUserBasedPoliciesEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostNonEapUserBasedPoliciesEnabled.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostNonEapUserBasedPoliciesEnabled.setDescription('This object indicates whether non-EAPOL User-based policies are enabled or disabled.')
bseeMultiHostNonEapUserBasedPoliciesFilterOnMac = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostNonEapUserBasedPoliciesFilterOnMac.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostNonEapUserBasedPoliciesFilterOnMac.setDescription('This object indicates whether the non-EAPOL User-based policy filters that are installed on ports will be dynamically modified to include the MAC address for which the filters are installed.')
bseeMultihostNonEapRadiusPasswordAttributeFormat = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 14), Bits().clone(namedValues=NamedValues(("ipAddr", 0), ("macAddr", 1), ("portNumber", 2), ("key", 3), ("padding", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultihostNonEapRadiusPasswordAttributeFormat.setStatus('current')
if mibBuilder.loadTexts: bseeMultihostNonEapRadiusPasswordAttributeFormat.setDescription("This object controls the format of the RADIUS password attribute that is included in requests to the RADIUS server for authenticating non-EAP clients (MAC addresses). If the ipAddr(0) bit is set, the password attribute will contain the switch's IP address encoded as a string of four 3-digit 0-padded integers. For example, the encoding for the IP address 47.80.225.1 would be '047080225001'. If the macAddr(1) bit is set, the password attribute will contain the MAC address to be authenticated as a string of six 2-digit hex numbers. For example, the MAC address 00:08:01:0a:33:34 would be encoded as '0008010a3334'. If the portNumber(2) bit is set, the password attribute will contain the port number on which the MAC address was seen, encoded as a string of two 2-digit 0-padded integers. The first integer is the unit/slot number, and the second number is the port number on that unit/slot. For a standalone stackable unit, the unit/slot number will be 0. For example, the encoding for unit/port 1/23 would be '0123', and the encoding for port 7 on a standalone stackable unit would be '0007'. If the key(3) bit is set, the password attribute will contain a custom configured string of up to 32 characters in length. If padding(4) bit is set, the password will contain dots even if fields in the password are blank. For instance, IP and Key will be represented as IP...Key. If the bit is not set, there will be dots only to separate fields. IP and Key will be IP.Key, while IP, Mac, Port or Key alone will be as they are, with no dots. The fields in the password attribute will appear in the order of the bits defined in this object, i.e., IP addr, followed by MAC addr, followed by port number, and finally by the key. Fields are separated by a '.' character. The separators are present regardless of whether a field is present if padding is used. So, for example, if all four fields are present, the password attribute might contain: 047080225001.0008010a3334.0123.ERS4000isGreat If none of the three fields are present, the password attribute will be '...' with padding used, or '' with no padding.")
bseeMultiHostAllowNonEapPhones = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 15), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostAllowNonEapPhones.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostAllowNonEapPhones.setDescription('This object indicates whether IP phones will be allowed access based on DHCP.')
bseeMultiHostAllowRadiusAssignedVlan = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 16), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostAllowRadiusAssignedVlan.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostAllowRadiusAssignedVlan.setDescription('This object indicates whether to allow the use of RADIUS-assigned VLANs in multihost-eap mode.')
bseeMultiHostEapPacketMode = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("multicast", 1), ("unicast", 2))).clone('multicast')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostEapPacketMode.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostEapPacketMode.setDescription('This object indicates whether to use unicast or multicast packets for Eap-ReqId packets. Normally, multicast packets are used.')
bseeMultiHostEapRadiusTimeoutMode = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fail", 1), ("doNotFail", 2))).clone('fail')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostEapRadiusTimeoutMode.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostEapRadiusTimeoutMode.setDescription('This object indicates whether or not to fail authentication of EAP users on a RADIUS timeout.')
bseeMultiHostAllowNonEapRadiusAssignedVlan = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 19), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostAllowNonEapRadiusAssignedVlan.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostAllowNonEapRadiusAssignedVlan.setDescription('This object indicates whether to allow the use of RADIUS-assigned VLANs in multihost-eap mode for non-EAP clients.')
bseeMultiHostEapProtocolEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 20), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostEapProtocolEnabled.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostEapProtocolEnabled.setDescription('This object controls whether processing of EAP protocol packets is enabled.')
bseeMultiHostUseMostRecentRadiusAssignedVlan = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 21), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostUseMostRecentRadiusAssignedVlan.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostUseMostRecentRadiusAssignedVlan.setDescription('Controls whether to use most recent RADIUS-assigned VLAN.')
bseeMultiHostFailOpenVlanId = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 22), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostFailOpenVlanId.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostFailOpenVlanId.setDescription('This object specifies the ID of the global fail-over Vlan.')
bseeMultiHostFailOpenVlanEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 23), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostFailOpenVlanEnabled.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostFailOpenVlanEnabled.setDescription('This object specifies whether to use the fail-over Vlan.')
bseeMultiHostMultiVlan = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 24), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostMultiVlan.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostMultiVlan.setDescription('This object specifies whether to use the multi-VLAN functionality with MHMA mode.')
bseeMultiHostNeapReauthenticationEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 25), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostNeapReauthenticationEnabled.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostNeapReauthenticationEnabled.setDescription("This object specifies whether to use 'NEAP re-authentication' feature")
bseeMultiHostBlockDifferentVlanAuth = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 26), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostBlockDifferentVlanAuth.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostBlockDifferentVlanAuth.setDescription('This object specifies whether to block authentication of clients which have an associated RADIUS assigned VLAN with an invalid value or different from first client authenticated on the same port')
bseeMultiHostAdacDummyRadiusRequests = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 27), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostAdacDummyRadiusRequests.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostAdacDummyRadiusRequests.setDescription('This object specifies whether to send or not dummy RADIUS requests for NEAP users authenticated as ADAC NEAP')
bseeAllowPortMirroringOnEap = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 28), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeAllowPortMirroringOnEap.setStatus('current')
if mibBuilder.loadTexts: bseeAllowPortMirroringOnEap.setDescription('This object specifies whether EAP enabled ports can be involved in port mirroring')
bseeMultiHostAdacNonEapEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 29), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostAdacNonEapEnabled.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostAdacNonEapEnabled.setDescription('This object specifies whether the authentication of Non-EAP phones using ADAC is allowed.')
bseeMultiHostFailOpenVlanContinuityModeEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 30), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostFailOpenVlanContinuityModeEnabled.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostFailOpenVlanContinuityModeEnabled.setDescription('This object specifies whether to use the fail-over Vlan continuity mode.')
bseeMultiHostNonEapRadiusPasswordFreeformKey = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 31), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostNonEapRadiusPasswordFreeformKey.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostNonEapRadiusPasswordFreeformKey.setDescription('This command specifies a custom string to be put in the password used to authenticate Non-EAP clients via RADIUS server.')
bseeMultiHostFailOpenVlanDisableEapMode = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 32), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostFailOpenVlanDisableEapMode.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostFailOpenVlanDisableEapMode.setDescription('This object specifies whether to use the Fail Open VLAN Disable EAP Mode.')
bseePaeSystemOperState = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: bseePaeSystemOperState.setStatus('current')
if mibBuilder.loadTexts: bseePaeSystemOperState.setDescription('The oper state of EAP when ports are in Fail Open VLAN Disable EAP Mode.')
bseeDefaultEapAll = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 34), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeDefaultEapAll.setStatus('current')
if mibBuilder.loadTexts: bseeDefaultEapAll.setDescription('This object specifies whether to default all global EAP settings.')
bseeAutoPortConfigModeSwitchToMHMV = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 35), LPortSet()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeAutoPortConfigModeSwitchToMHMV.setStatus('current')
if mibBuilder.loadTexts: bseeAutoPortConfigModeSwitchToMHMV.setDescription('This object specifies the port list on which is applied the configuration.')
bseeAutoPortConfigModeSwitchToMHMVAction = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("apply", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeAutoPortConfigModeSwitchToMHMVAction.setStatus('current')
if mibBuilder.loadTexts: bseeAutoPortConfigModeSwitchToMHMVAction.setDescription('This object specifies the action that is going to be made on the indicated port. At retrieval, the value is always none(1).')
bseeAutoPortConfigModeSwitchToMHMVStatus = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("passed", 1), ("inProgress", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bseeAutoPortConfigModeSwitchToMHMVStatus.setStatus('current')
if mibBuilder.loadTexts: bseeAutoPortConfigModeSwitchToMHMVStatus.setDescription('This object specifies the action result on the indicated port')
bseePortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 3, 3), )
if mibBuilder.loadTexts: bseePortConfigTable.setStatus('current')
if mibBuilder.loadTexts: bseePortConfigTable.setDescription('This table is used to control the EAP multihost configuration for each port in the system.')
bseePortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1), ).setIndexNames((0, "BAY-STACK-EAPOL-EXTENSION-MIB", "bseePortConfigPortNumber"))
if mibBuilder.loadTexts: bseePortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: bseePortConfigEntry.setDescription('The EAP multihost configuration for a port.')
bseePortConfigPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: bseePortConfigPortNumber.setStatus('current')
if mibBuilder.loadTexts: bseePortConfigPortNumber.setDescription('The Port number associated with this Port.')
bseePortConfigGuestVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 2), VlanIdOrNone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigGuestVlanId.setStatus('current')
if mibBuilder.loadTexts: bseePortConfigGuestVlanId.setDescription('This object specifies the ID of the guest VLAN for this port. Access to the guest VLAN is allowed for MAC addresses before EAP authentication has been performed. If the value of this object is 0, then the global guest VLAN ID is used for this port, as specified in bseeGuestVlanId. However, if the value of the associated instance of bseePortConfigGuestVlanEnabled is false(2), then access to the guest VLAN is not allowed for the port, regardless of the value of bseePortConfigGuestVlanId.')
bseePortConfigMultiHostEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigMultiHostEnabled.setStatus('current')
if mibBuilder.loadTexts: bseePortConfigMultiHostEnabled.setDescription('This object controls whether EAP multihost is enabled for a port.')
bseePortConfigMultiHostEapMaxNumMacs = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigMultiHostEapMaxNumMacs.setStatus('current')
if mibBuilder.loadTexts: bseePortConfigMultiHostEapMaxNumMacs.setDescription('This object specifies the maximum number of EAP-authentication MAC addresses allowed on this port. A value of 0 indicates that there is no port-specific limit.')
bseePortConfigMultiHostAllowNonEapClient = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigMultiHostAllowNonEapClient.setStatus('current')
if mibBuilder.loadTexts: bseePortConfigMultiHostAllowNonEapClient.setDescription('This object controls whether non-EAP clients (MAC addresses) are allowed on the port.')
bseePortConfigMultiHostNonEapMacSource = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("autoLearn", 1), ("userConfig", 2), ("radius", 3))).clone('userConfig')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigMultiHostNonEapMacSource.setStatus('deprecated')
if mibBuilder.loadTexts: bseePortConfigMultiHostNonEapMacSource.setDescription('This object controls the source for finding allowed non-EAP MAC addresses.')
bseePortConfigMultiHostNonEapMaxNumMacs = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigMultiHostNonEapMaxNumMacs.setStatus('current')
if mibBuilder.loadTexts: bseePortConfigMultiHostNonEapMaxNumMacs.setDescription('This object specifies the maximum number of non-EAP authenticated MAC addresses allowed on this port.')
bseePortConfigGuestVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigGuestVlanEnabled.setStatus('current')
if mibBuilder.loadTexts: bseePortConfigGuestVlanEnabled.setDescription('This object controls whether access to the guest VLAN is allowed for a port.')
bseePortConfigMultiHostRadiusAuthNonEapClient = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigMultiHostRadiusAuthNonEapClient.setStatus('current')
if mibBuilder.loadTexts: bseePortConfigMultiHostRadiusAuthNonEapClient.setDescription('This object controls whether non-EAP clients (MAC addresses) may authenticated using RADIUS on the port.')
bseePortConfigMultiHostSingleAuthEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigMultiHostSingleAuthEnabled.setStatus('current')
if mibBuilder.loadTexts: bseePortConfigMultiHostSingleAuthEnabled.setDescription('This object controls whether non-EAP clients (MAC addresses) may be automatically authenticated on the port after an EAP client has been authenticated (known as MHSA).')
bseePortConfigMultiHostAllowNonEapPhones = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigMultiHostAllowNonEapPhones.setStatus('current')
if mibBuilder.loadTexts: bseePortConfigMultiHostAllowNonEapPhones.setDescription('This object indicates whether IP phones will be allowed access based on DHCP.')
bseePortConfigMultiHostAllowRadiusAssignedVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 12), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigMultiHostAllowRadiusAssignedVlan.setStatus('current')
if mibBuilder.loadTexts: bseePortConfigMultiHostAllowRadiusAssignedVlan.setDescription('This object indicates whether to allow the use of RADIUS-assigned VLANs in multihost-eap mode.')
bseePortConfigMultiHostEapPacketMode = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("multicast", 1), ("unicast", 2))).clone('multicast')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigMultiHostEapPacketMode.setStatus('current')
if mibBuilder.loadTexts: bseePortConfigMultiHostEapPacketMode.setDescription('This object indicates whether to use unicast or multicast packets for Eap-ReqId packets. Normally, multicast packets are used.')
bseePortConfigMultiHostEapRadiusTimeoutMode = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fail", 1), ("doNotFail", 2))).clone('fail')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigMultiHostEapRadiusTimeoutMode.setStatus('current')
if mibBuilder.loadTexts: bseePortConfigMultiHostEapRadiusTimeoutMode.setDescription('This object indicates whether or not to fail authentication of EAP users on a RADIUS timeout.')
bseePortConfigMultiHostAllowNonEapRadiusAssignedVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 15), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigMultiHostAllowNonEapRadiusAssignedVlan.setStatus('current')
if mibBuilder.loadTexts: bseePortConfigMultiHostAllowNonEapRadiusAssignedVlan.setDescription('This object indicates whether to allow the use of RADIUS-assigned VLANs in multihost-eap mode for non-EAP clients.')
bseePortConfigProcessRadiusRequestsServerPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 16), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigProcessRadiusRequestsServerPackets.setStatus('current')
if mibBuilder.loadTexts: bseePortConfigProcessRadiusRequestsServerPackets.setDescription('This object indicates whether to process any RADIUS requests-server packets that are received on this port.')
bseePortConfigEapProtocolEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 17), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigEapProtocolEnabled.setStatus('current')
if mibBuilder.loadTexts: bseePortConfigEapProtocolEnabled.setDescription('This object controls whether EAP protocol packets are processed on this port.')
bseePortConfigMultiHostUseMostRecentRadiusAssignedVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 18), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigMultiHostUseMostRecentRadiusAssignedVlan.setStatus('current')
if mibBuilder.loadTexts: bseePortConfigMultiHostUseMostRecentRadiusAssignedVlan.setDescription('Controls whether to use most recent RADIUS-assigned VLAN.')
bseePortConfigMultiHostClearNeap = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 19), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigMultiHostClearNeap.setStatus('current')
if mibBuilder.loadTexts: bseePortConfigMultiHostClearNeap.setDescription('Setting this object will clear NEAP authenticated clients from the authentication list. If the value is set to 00:00:00:00:00:00, all clients will be cleared from this port. Otherwise, only a specific client will be cleared.')
bseePortConfigMultiHostBlockDifferentVlanAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 20), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigMultiHostBlockDifferentVlanAuth.setStatus('current')
if mibBuilder.loadTexts: bseePortConfigMultiHostBlockDifferentVlanAuth.setDescription('Controls whether to block authentication of clients which have an associated RADIUS assigned VLAN with an invalid value or different from first client authenticated on the same port.')
bseePortConfigMultiHostAdacNonEapEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 21), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigMultiHostAdacNonEapEnabled.setStatus('current')
if mibBuilder.loadTexts: bseePortConfigMultiHostAdacNonEapEnabled.setDescription('This object specifies whether the authentication of Non-EAP phones using ADAC is allowed on this port.')
bseePortConfigDefaultEapAll = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 22), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigDefaultEapAll.setStatus('current')
if mibBuilder.loadTexts: bseePortConfigDefaultEapAll.setDescription('This object specifies whether to default all EAP settings on this port.')
bseePortConfigMultiHostMaxMacs = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigMultiHostMaxMacs.setStatus('current')
if mibBuilder.loadTexts: bseePortConfigMultiHostMaxMacs.setDescription('This object specifies the maximum number of EAP and NEAP clients allowed on this port.')
bseePortConfigMultiHostSingleAuthNoLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 24), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigMultiHostSingleAuthNoLimit.setStatus('current')
if mibBuilder.loadTexts: bseePortConfigMultiHostSingleAuthNoLimit.setDescription('This object specifies if we limit the number of non-eap clients on a port authenticated in MHSA.')
bseePortConfigFailOpenVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigFailOpenVlanId.setStatus('current')
if mibBuilder.loadTexts: bseePortConfigFailOpenVlanId.setDescription('This object specifies the ID of the fail-open VLAN for this port in the following format: -1 : Port PVID is used as Fail Open VLAN 0 : the global fail-open VLAN ID is used for this port, as specified in bseeMultiHostFailOpenVlanId. 1-4094 : range of values used for fail-open VLAN ID on this port However, if the value of the associated instance of bseePortConfigFailOpenVlanEnabled is false(2), then access to the fail-open VLAN is not allowed for the port, regardless of the value of bseePortConfigFailOpenVlanId.')
bseePortConfigFailOpenVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 26), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigFailOpenVlanEnabled.setStatus('current')
if mibBuilder.loadTexts: bseePortConfigFailOpenVlanEnabled.setDescription('This object controls whether fail-open is enabled for a port.')
bseePortConfigFailOpenVlanUBP = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 3, 1, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseePortConfigFailOpenVlanUBP.setStatus('current')
if mibBuilder.loadTexts: bseePortConfigFailOpenVlanUBP.setDescription('This object represents the UBP filter name of the fail-open policy')
bseeMultiHostStatusTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 3, 4), )
if mibBuilder.loadTexts: bseeMultiHostStatusTable.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostStatusTable.setDescription('This table provides the EAP authentication status per-MAC address per-port.')
bseeMultiHostStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 3, 4, 1), ).setIndexNames((0, "BAY-STACK-EAPOL-EXTENSION-MIB", "bseeMultiHostStatusPortNumber"), (0, "BAY-STACK-EAPOL-EXTENSION-MIB", "bseeMultiHostStatusClientMACAddr"))
if mibBuilder.loadTexts: bseeMultiHostStatusEntry.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostStatusEntry.setDescription('The status of EAP authentication of clients for a port.')
bseeMultiHostStatusPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: bseeMultiHostStatusPortNumber.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostStatusPortNumber.setDescription('The Port number associated with this client.')
bseeMultiHostStatusClientMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 4, 1, 2), MacAddress())
if mibBuilder.loadTexts: bseeMultiHostStatusClientMACAddr.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostStatusClientMACAddr.setDescription('The MAC address of the client.')
bseeMultiHostStatusPaeState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("initialize", 1), ("disconnected", 2), ("connecting", 3), ("authenticating", 4), ("authenticated", 5), ("aborting", 6), ("held", 7), ("forceAuth", 8), ("forceUnauth", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bseeMultiHostStatusPaeState.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostStatusPaeState.setDescription('The current value of the Authenticator PAE state machine.')
bseeMultiHostStatusBackendAuthState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("request", 1), ("response", 2), ("success", 3), ("fail", 4), ("timeout", 5), ("idle", 6), ("initialize", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bseeMultiHostStatusBackendAuthState.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostStatusBackendAuthState.setDescription('The current state of the Backend Authentication state machine.')
bseeMultiHostStatusReauthenticate = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reauthenticate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostStatusReauthenticate.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostStatusReauthenticate.setDescription('Setting this object to reauthenticate(2) will force the client to be reauthenticated. When retrieved, the value of this object is always other(1).')
bseeMultiHostStatusVid = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 4, 1, 6), VlanIdOrAny()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bseeMultiHostStatusVid.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostStatusVid.setDescription('The Vlan ID associated with this client for MultiVlan capabilities. If MultiVlan is not enabled for this client, the value of this object will be 4095.')
bseeMultiHostStatusPri = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bseeMultiHostStatusPri.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostStatusPri.setDescription('The Vlan priority value associated with this client for MultiVlan capabilities. If MultiVlan is not enabled for this client, the value of this object will be 8.')
bseeMultiHostStatusFaBindings = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 4, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bseeMultiHostStatusFaBindings.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostStatusFaBindings.setDescription('The EAP vlan:isid bindings. Vlan is represented on 2 bytes. Isid is represented on 4 bytes. The output OctetString would be a continuous hexadecimal representation of VLAN followed by corresponding ISID. Example: Length(bytes): |--2--|--4--|--2--|--4--|--2--|--4--|---2--|---4--| OctetString: VLAN0 ISID0 VLAN1 ISID1 ... ... VLAN15 ISID15 . There are no spaces between VLANx and ISIDx.')
bseeMultiHostSessionStatsTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 3, 5), )
if mibBuilder.loadTexts: bseeMultiHostSessionStatsTable.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostSessionStatsTable.setDescription('A table that contains the session statistics objects for the Authenticator PAE associated with each EAP client on each Port. An entry appears in this table for each client MAC address on each port that may authenticate access to itself.')
bseeMultiHostSessionStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 3, 5, 1), ).setIndexNames((0, "BAY-STACK-EAPOL-EXTENSION-MIB", "bseeMultiHostSessionStatsPortNumber"), (0, "BAY-STACK-EAPOL-EXTENSION-MIB", "bseeMultiHostSessionStatsClientMACAddr"))
if mibBuilder.loadTexts: bseeMultiHostSessionStatsEntry.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostSessionStatsEntry.setDescription('The session statistics information for an Authenticator PAE. This shows the current values being collected for each session that is still in progress, or the final values for the last valid session for each client where there is no session currently active. This is similar to the dot1xAuthSessionStatsTable, except that it provides information per-port-per-MAC, rather than just per-port.')
bseeMultiHostSessionStatsPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 5, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: bseeMultiHostSessionStatsPortNumber.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostSessionStatsPortNumber.setDescription('The Port number associated with this client.')
bseeMultiHostSessionStatsClientMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 5, 1, 2), MacAddress())
if mibBuilder.loadTexts: bseeMultiHostSessionStatsClientMACAddr.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostSessionStatsClientMACAddr.setDescription('The MAC address of this client.')
bseeMultiHostSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 5, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bseeMultiHostSessionId.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostSessionId.setDescription('A unique identifier for the session, in the form of a printable ASCII string of at least three characters.')
bseeMultiHostSessionAuthenticMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("remoteAuthServer", 1), ("localAuthServer", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bseeMultiHostSessionAuthenticMethod.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostSessionAuthenticMethod.setDescription('The authentication method used to establish the session.')
bseeMultiHostSessionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 5, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bseeMultiHostSessionTime.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostSessionTime.setDescription('The duration of the session in seconds.')
bseeMultiHostSessionTerminateCause = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 999))).clone(namedValues=NamedValues(("supplicantLogoff", 1), ("portFailure", 2), ("supplicantRestart", 3), ("reauthFailed", 4), ("authControlForceUnauth", 5), ("portReInit", 6), ("portAdminDisabled", 7), ("notTerminatedYet", 999)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bseeMultiHostSessionTerminateCause.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostSessionTerminateCause.setDescription('The reason for the session termination.')
bseeMultiHostSessionUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 5, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bseeMultiHostSessionUserName.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostSessionUserName.setDescription('The User-Name representing the identity of the Supplicant PAE.')
bseeMultiHostNonEapMacTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 3, 6), )
if mibBuilder.loadTexts: bseeMultiHostNonEapMacTable.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostNonEapMacTable.setDescription('A table that contains the non-EAP MAC addresses that are allowed access to EAP-enabled interfaces.')
bseeMultiHostNonEapMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 3, 6, 1), ).setIndexNames((0, "BAY-STACK-EAPOL-EXTENSION-MIB", "bseeMultiHostNonEapMacPortNumber"), (0, "BAY-STACK-EAPOL-EXTENSION-MIB", "bseeMultiHostNonEapMacClientMACAddr"))
if mibBuilder.loadTexts: bseeMultiHostNonEapMacEntry.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostNonEapMacEntry.setDescription('An allowed non-EAP MAC address.')
bseeMultiHostNonEapMacPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 6, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: bseeMultiHostNonEapMacPortNumber.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostNonEapMacPortNumber.setDescription('The Port number on which the MAC address is allowed.')
bseeMultiHostNonEapMacClientMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 6, 1, 2), MacAddress())
if mibBuilder.loadTexts: bseeMultiHostNonEapMacClientMACAddr.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostNonEapMacClientMACAddr.setDescription('The MAC address allowed on the port.')
bseeMultiHostNonEapMacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bseeMultiHostNonEapMacRowStatus.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostNonEapMacRowStatus.setDescription('This is used to control creation/deletion of entries in this table.')
bseeMultiHostNonEapStatusTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 3, 7), )
if mibBuilder.loadTexts: bseeMultiHostNonEapStatusTable.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostNonEapStatusTable.setDescription('This table provides the authentication status of non-EAP clients per-MAC address per-port.')
bseeMultiHostNonEapStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 3, 7, 1), ).setIndexNames((0, "BAY-STACK-EAPOL-EXTENSION-MIB", "bseeMultiHostNonEapStatusPortNumber"), (0, "BAY-STACK-EAPOL-EXTENSION-MIB", "bseeMultiHostNonEapStatusClientMACAddr"))
if mibBuilder.loadTexts: bseeMultiHostNonEapStatusEntry.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostNonEapStatusEntry.setDescription('The status of authentication of a non-EAP client for a port.')
bseeMultiHostNonEapStatusPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 7, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: bseeMultiHostNonEapStatusPortNumber.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostNonEapStatusPortNumber.setDescription('The Port number associated with this client.')
bseeMultiHostNonEapStatusClientMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 7, 1, 2), MacAddress())
if mibBuilder.loadTexts: bseeMultiHostNonEapStatusClientMACAddr.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostNonEapStatusClientMACAddr.setDescription('The MAC address of the client.')
bseeMultiHostNonEapStatusState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("rejected", 1), ("locallyAuthenticated", 2), ("radiusPending", 3), ("radiusAuthenticated", 4), ("adacAuthenticated", 5), ("mhsaAuthenticated", 6), ("lldpAuthenticated", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bseeMultiHostNonEapStatusState.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostNonEapStatusState.setDescription('The authentication status. Values are: rejected(1) - the MAC address could not be authenticated on this port locallyAuthenticated(2) - the MAC address was authenticated using the local table of allowed clients radiusPending(3) - the MAC address is awaiting authentication by a RADIUS server radiusAuthenticated(4) - the MAC address was authenticated by a RADIUS server adacAuthenticated(5) - the MAC address was authenticated using ADAC configuration tables mhsaAuthenticated(6) - the MAC address was auto-authenticated on a port following a successful authentication of an EAP client lldpAuthenticated(7) - the MAC address was authenticated using the LLDP mechanism')
bseeMultiHostNonEapStatusReauthenticate = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reauthenticate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostNonEapStatusReauthenticate.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostNonEapStatusReauthenticate.setDescription('Setting this object to reauthenticate(2) will force the MAC address to be reauthenticated. When retrieved, the value of this object is always other(1).')
bseeMultiHostNonEapStatusVid = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 7, 1, 5), VlanIdOrAny()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bseeMultiHostNonEapStatusVid.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostNonEapStatusVid.setDescription('The Vlan ID associated with this client for MultiVlan capabilities. If MultiVlan is not enabled for this client, the value of this object will be 4095.')
bseeMultiHostNonEapStatusPri = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bseeMultiHostNonEapStatusPri.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostNonEapStatusPri.setDescription('The Vlan priority value associated with this client for MultiVlan capabilities. If MultiVlan is not enabled for this client, the value of this object will be 8.')
bseeMultiHostNonEapStatusFaBindings = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 7, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bseeMultiHostNonEapStatusFaBindings.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostNonEapStatusFaBindings.setDescription('The NEAP vlan:isid bindings. Vlan is represented on 2 bytes. Isid is represented on 4 bytes. The output OctetString would be a continuous hexadecimal representation of VLAN followed by corresponding ISID. Example: Length(bytes): |--2--|--4--|--2--|--4--|--2--|--4--|---2--|---4--| OctetString: VLAN0 ISID0 VLAN1 ISID1 ... ... VLAN15 ISID15 . There are no spaces between VLANx and ISIDx.')
bseeSupplicantObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 3, 8))
bseeSupplicantEnabled = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 3, 8, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeSupplicantEnabled.setStatus('current')
if mibBuilder.loadTexts: bseeSupplicantEnabled.setDescription('Indicates whether supplicant functionality is enabled or disabled. A value of true(1) means enabled.')
bseeSupplicantUserTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 3, 9), )
if mibBuilder.loadTexts: bseeSupplicantUserTable.setReference('9.5.1')
if mibBuilder.loadTexts: bseeSupplicantUserTable.setStatus('current')
if mibBuilder.loadTexts: bseeSupplicantUserTable.setDescription('A table that contains the user name and password for the Supplicant PAE associated with each port. An entry appears in this table for each port that may authenticate itself when challenged by a remote system.')
bseeSupplicantUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 3, 9, 1), ).setIndexNames((0, "BAY-STACK-EAPOL-EXTENSION-MIB", "bseeSupplicantPortNumber"))
if mibBuilder.loadTexts: bseeSupplicantUserEntry.setStatus('current')
if mibBuilder.loadTexts: bseeSupplicantUserEntry.setDescription('The configuration information for a Supplicant PAE.')
bseeSupplicantPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 9, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: bseeSupplicantPortNumber.setStatus('current')
if mibBuilder.loadTexts: bseeSupplicantPortNumber.setDescription("A unique value for each interface. Its value ranges between 1 and the value of ifNumber. The value for each interface must remain constant at least from one re-initialization of the entity's network management system to the next re- initialization.")
bseeSupplicantUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 9, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeSupplicantUserName.setStatus('current')
if mibBuilder.loadTexts: bseeSupplicantUserName.setDescription('The user name currently in use by the Supplicant PAE state machine.')
bseeSupplicantPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 9, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeSupplicantPassword.setStatus('current')
if mibBuilder.loadTexts: bseeSupplicantPassword.setDescription('The password currently in use by the Supplicant PAE state machine.')
bseeSupplicantUserState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2), ("logoff", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeSupplicantUserState.setStatus('current')
if mibBuilder.loadTexts: bseeSupplicantUserState.setDescription('Input the user state to logoff.')
bseeMultiHostVoipVlanTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 3, 10), )
if mibBuilder.loadTexts: bseeMultiHostVoipVlanTable.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostVoipVlanTable.setDescription('A table that contains EAP VoIP Vlan settings.')
bseeMultiHostVoipVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 3, 10, 1), ).setIndexNames((0, "BAY-STACK-EAPOL-EXTENSION-MIB", "bseeMultiHostVoipVlanIndex"))
if mibBuilder.loadTexts: bseeMultiHostVoipVlanEntry.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostVoipVlanEntry.setDescription('The configuration information for an EAP VoIP Vlan.')
bseeMultiHostVoipVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: bseeMultiHostVoipVlanIndex.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostVoipVlanIndex.setDescription('A unique identifier for each entry.')
bseeMultiHostVoipVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 10, 1, 2), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostVoipVlanId.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostVoipVlanId.setDescription('This object specifies the Vlan ID of the VoIP Vlan.')
bseeMultiHostVoipVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 10, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bseeMultiHostVoipVlanEnabled.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostVoipVlanEnabled.setDescription('This object specifies whether to use this VoIP Vlan.')
bseeMultiHostDhcpAuthPhoneTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 3, 11), )
if mibBuilder.loadTexts: bseeMultiHostDhcpAuthPhoneTable.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostDhcpAuthPhoneTable.setDescription('This table provides the list of DHCP authenticated IP phones per-MAC address per-port.')
bseeMultiHostDhcpAuthPhoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 3, 11, 1), ).setIndexNames((0, "BAY-STACK-EAPOL-EXTENSION-MIB", "bseeMultiHostDhcpAuthPhonePortNumber"), (0, "BAY-STACK-EAPOL-EXTENSION-MIB", "bseeMultiHostDhcpAuthPhoneClientMACAddr"))
if mibBuilder.loadTexts: bseeMultiHostDhcpAuthPhoneEntry.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostDhcpAuthPhoneEntry.setDescription('The DHCP authenticated IP phone for a port.')
bseeMultiHostDhcpAuthPhonePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 11, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: bseeMultiHostDhcpAuthPhonePortNumber.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostDhcpAuthPhonePortNumber.setDescription('The port number associated with the DHCP authenticated IP phone.')
bseeMultiHostDhcpAuthPhoneClientMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 11, 1, 2), MacAddress())
if mibBuilder.loadTexts: bseeMultiHostDhcpAuthPhoneClientMACAddr.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostDhcpAuthPhoneClientMACAddr.setDescription('The MAC address of the DHCP authenticated IP phone.')
bseeMultiHostDhcpAuthPhoneUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 3, 11, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bseeMultiHostDhcpAuthPhoneUserName.setStatus('current')
if mibBuilder.loadTexts: bseeMultiHostDhcpAuthPhoneUserName.setDescription('The user name currently in use by the DHCP authenticated IP phone.')
mibBuilder.exportSymbols("BAY-STACK-EAPOL-EXTENSION-MIB", bseeAutoPortConfigModeSwitchToMHMVAction=bseeAutoPortConfigModeSwitchToMHMVAction, bseeMultiHostSessionStatsClientMACAddr=bseeMultiHostSessionStatsClientMACAddr, bseePortConfigMultiHostAllowNonEapPhones=bseePortConfigMultiHostAllowNonEapPhones, bseePortConfigMultiHostRadiusAuthNonEapClient=bseePortConfigMultiHostRadiusAuthNonEapClient, bseeSupplicantPortNumber=bseeSupplicantPortNumber, bseePortConfigEntry=bseePortConfigEntry, bseeMultiHostStatusPri=bseeMultiHostStatusPri, bseeMultiHostDhcpAuthPhoneClientMACAddr=bseeMultiHostDhcpAuthPhoneClientMACAddr, bseeMultiHostStatusFaBindings=bseeMultiHostStatusFaBindings, bseeMultiHostSessionAuthenticMethod=bseeMultiHostSessionAuthenticMethod, bseeUserBasedPoliciesFilterOnMac=bseeUserBasedPoliciesFilterOnMac, bseeMultiHostAllowNonEapClient=bseeMultiHostAllowNonEapClient, bseeNotifications=bseeNotifications, bseePortConfigMultiHostEapRadiusTimeoutMode=bseePortConfigMultiHostEapRadiusTimeoutMode, bseeSupplicantEnabled=bseeSupplicantEnabled, bseeMultiHostNonEapMacTable=bseeMultiHostNonEapMacTable, bseeMultiHostVoipVlanIndex=bseeMultiHostVoipVlanIndex, bseeMultiHostNonEapMacClientMACAddr=bseeMultiHostNonEapMacClientMACAddr, bseeAutoPortConfigModeSwitchToMHMVStatus=bseeAutoPortConfigModeSwitchToMHMVStatus, bseeMultiHostNonEapStatusPortNumber=bseeMultiHostNonEapStatusPortNumber, bseeAllowPortMirroringOnEap=bseeAllowPortMirroringOnEap, bseeMultiHostDhcpAuthPhoneTable=bseeMultiHostDhcpAuthPhoneTable, bseeObjects=bseeObjects, bseeMultiHostEapProtocolEnabled=bseeMultiHostEapProtocolEnabled, bseeDefaultEapAll=bseeDefaultEapAll, bseeMultiHostSessionTime=bseeMultiHostSessionTime, bseePortConfigMultiHostAllowNonEapRadiusAssignedVlan=bseePortConfigMultiHostAllowNonEapRadiusAssignedVlan, bseePortConfigFailOpenVlanEnabled=bseePortConfigFailOpenVlanEnabled, bseeSupplicantPassword=bseeSupplicantPassword, bseeMultiHostSessionStatsPortNumber=bseeMultiHostSessionStatsPortNumber, bseeMultiHostDhcpAuthPhoneEntry=bseeMultiHostDhcpAuthPhoneEntry, bseeMultiHostStatusClientMACAddr=bseeMultiHostStatusClientMACAddr, bseePortConfigMultiHostNonEapMaxNumMacs=bseePortConfigMultiHostNonEapMaxNumMacs, bseeMultiHostSessionTerminateCause=bseeMultiHostSessionTerminateCause, bseeMultiHostAllowNonEapRadiusAssignedVlan=bseeMultiHostAllowNonEapRadiusAssignedVlan, bseeMultiHostNonEapMacEntry=bseeMultiHostNonEapMacEntry, bseeRemediationVlanId=bseeRemediationVlanId, bseePortConfigFailOpenVlanUBP=bseePortConfigFailOpenVlanUBP, bseePortConfigGuestVlanId=bseePortConfigGuestVlanId, bseeGuestVlanId=bseeGuestVlanId, bseeMultiHostNonEapStatusEntry=bseeMultiHostNonEapStatusEntry, bseeMultiHostNonEapMacPortNumber=bseeMultiHostNonEapMacPortNumber, bseeMultiHostNonEapStatusState=bseeMultiHostNonEapStatusState, bseeMultiHostSessionStatsTable=bseeMultiHostSessionStatsTable, bayStackEapExtMib=bayStackEapExtMib, bseePortConfigMultiHostEapMaxNumMacs=bseePortConfigMultiHostEapMaxNumMacs, bseeAutoPortConfigModeSwitchToMHMV=bseeAutoPortConfigModeSwitchToMHMV, bseeMultiHostStatusReauthenticate=bseeMultiHostStatusReauthenticate, bseeMultiHostMultiVlan=bseeMultiHostMultiVlan, bseePortConfigMultiHostAdacNonEapEnabled=bseePortConfigMultiHostAdacNonEapEnabled, bseeMultiHostEapPacketMode=bseeMultiHostEapPacketMode, bseeMultiHostNonEapUserBasedPoliciesEnabled=bseeMultiHostNonEapUserBasedPoliciesEnabled, bseeMultiHostFailOpenVlanEnabled=bseeMultiHostFailOpenVlanEnabled, bseePortConfigMultiHostEnabled=bseePortConfigMultiHostEnabled, bseeSupplicantObjects=bseeSupplicantObjects, bseeGuestVlanEnabled=bseeGuestVlanEnabled, bseeMultiHostAdacDummyRadiusRequests=bseeMultiHostAdacDummyRadiusRequests, bseeMultihostNonEapRadiusPasswordAttributeFormat=bseeMultihostNonEapRadiusPasswordAttributeFormat, bseePortConfigTable=bseePortConfigTable, bseeMultiHostSingleAuthEnabled=bseeMultiHostSingleAuthEnabled, bseePortConfigMultiHostSingleAuthNoLimit=bseePortConfigMultiHostSingleAuthNoLimit, bseePortConfigFailOpenVlanId=bseePortConfigFailOpenVlanId, bseePaeSystemOperState=bseePaeSystemOperState, bseePortConfigMultiHostSingleAuthEnabled=bseePortConfigMultiHostSingleAuthEnabled, bseePortConfigMultiHostClearNeap=bseePortConfigMultiHostClearNeap, bseeMultiHostStatusPortNumber=bseeMultiHostStatusPortNumber, bseeMultiHostNonEapStatusFaBindings=bseeMultiHostNonEapStatusFaBindings, bseeMultiHostStatusPaeState=bseeMultiHostStatusPaeState, bseeMultiHostAllowNonEapPhones=bseeMultiHostAllowNonEapPhones, bseeMultiHostNonEapStatusTable=bseeMultiHostNonEapStatusTable, bseePortConfigPortNumber=bseePortConfigPortNumber, bseeMultiHostVoipVlanEntry=bseeMultiHostVoipVlanEntry, bseePortConfigEapProtocolEnabled=bseePortConfigEapProtocolEnabled, bseeMultiHostNonEapRadiusPasswordFreeformKey=bseeMultiHostNonEapRadiusPasswordFreeformKey, bseeMultiHostNonEapStatusVid=bseeMultiHostNonEapStatusVid, PYSNMP_MODULE_ID=bayStackEapExtMib, bseePortConfigDefaultEapAll=bseePortConfigDefaultEapAll, bseeMultiHostFailOpenVlanContinuityModeEnabled=bseeMultiHostFailOpenVlanContinuityModeEnabled, bseeMultiHostVoipVlanTable=bseeMultiHostVoipVlanTable, bseePortConfigMultiHostAllowRadiusAssignedVlan=bseePortConfigMultiHostAllowRadiusAssignedVlan, bseeMultiHostBlockDifferentVlanAuth=bseeMultiHostBlockDifferentVlanAuth, bseeSupplicantUserName=bseeSupplicantUserName, bseeUserBasedPoliciesEnabled=bseeUserBasedPoliciesEnabled, bseePortConfigMultiHostEapPacketMode=bseePortConfigMultiHostEapPacketMode, bseeMultiHostNonEapStatusReauthenticate=bseeMultiHostNonEapStatusReauthenticate, bseeSupplicantUserEntry=bseeSupplicantUserEntry, bseeMaximumNonEapClientMacs=bseeMaximumNonEapClientMacs, bseeSupplicantUserTable=bseeSupplicantUserTable, bseeMultiHostVoipVlanId=bseeMultiHostVoipVlanId, bseePortConfigMultiHostNonEapMacSource=bseePortConfigMultiHostNonEapMacSource, bseeMultiHostNeapReauthenticationEnabled=bseeMultiHostNeapReauthenticationEnabled, bseePortConfigProcessRadiusRequestsServerPackets=bseePortConfigProcessRadiusRequestsServerPackets, bseeMultiHostStatusEntry=bseeMultiHostStatusEntry, bseeMultiHostVoipVlanEnabled=bseeMultiHostVoipVlanEnabled, bseeMaximumEapClientMacs=bseeMaximumEapClientMacs, bseeMultiHostRadiusAuthNonEapClient=bseeMultiHostRadiusAuthNonEapClient, bseePortConfigMultiHostAllowNonEapClient=bseePortConfigMultiHostAllowNonEapClient, bseeMultiHostAllowRadiusAssignedVlan=bseeMultiHostAllowRadiusAssignedVlan, bseePortConfigMultiHostMaxMacs=bseePortConfigMultiHostMaxMacs, bseeMultiHostStatusBackendAuthState=bseeMultiHostStatusBackendAuthState, bseeSupplicantUserState=bseeSupplicantUserState, bseePortConfigGuestVlanEnabled=bseePortConfigGuestVlanEnabled, bseeMultiHostNonEapMacRowStatus=bseeMultiHostNonEapMacRowStatus, bseeMultiHostAdacNonEapEnabled=bseeMultiHostAdacNonEapEnabled, bseeMultiHostSessionStatsEntry=bseeMultiHostSessionStatsEntry, bseeMultiHostStatusVid=bseeMultiHostStatusVid, bseeMultiHostFailOpenVlanDisableEapMode=bseeMultiHostFailOpenVlanDisableEapMode, bseeMultiHostStatusTable=bseeMultiHostStatusTable, bseeMultiHostSessionUserName=bseeMultiHostSessionUserName, bseePortConfigMultiHostUseMostRecentRadiusAssignedVlan=bseePortConfigMultiHostUseMostRecentRadiusAssignedVlan, bseeMultiHostEapRadiusTimeoutMode=bseeMultiHostEapRadiusTimeoutMode, bseeMultiHostNonEapStatusClientMACAddr=bseeMultiHostNonEapStatusClientMACAddr, bseeMultiHostDhcpAuthPhoneUserName=bseeMultiHostDhcpAuthPhoneUserName, bseeMultiHostFailOpenVlanId=bseeMultiHostFailOpenVlanId, bseeMultiHostUseMostRecentRadiusAssignedVlan=bseeMultiHostUseMostRecentRadiusAssignedVlan, bseeRemediationVlanEnabled=bseeRemediationVlanEnabled, bseeMultiHostNonEapUserBasedPoliciesFilterOnMac=bseeMultiHostNonEapUserBasedPoliciesFilterOnMac, bseeMultiHostSessionId=bseeMultiHostSessionId, bseeNotifications0=bseeNotifications0, bseeMultiHostDhcpAuthPhonePortNumber=bseeMultiHostDhcpAuthPhonePortNumber, bseeMultiHostNonEapStatusPri=bseeMultiHostNonEapStatusPri, bseePortConfigMultiHostBlockDifferentVlanAuth=bseePortConfigMultiHostBlockDifferentVlanAuth)
