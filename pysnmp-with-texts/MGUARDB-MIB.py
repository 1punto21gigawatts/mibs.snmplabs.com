#
# PySNMP MIB module MGUARDB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MGUARDB-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:11:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, Bits, TimeTicks, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, iso, NotificationType, ModuleIdentity, IpAddress, Integer32, MibIdentifier, Gauge32, enterprises, Counter32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Bits", "TimeTicks", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "iso", "NotificationType", "ModuleIdentity", "IpAddress", "Integer32", "MibIdentifier", "Gauge32", "enterprises", "Counter32", "Unsigned32")
RowStatus, MacAddress, TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "MacAddress", "TruthValue", "TextualConvention", "DisplayString")
innominate = MibIdentifier((1, 3, 6, 1, 4, 1, 15450))
mGuardb = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2))
mGuardVPN = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 1))
mGuardFirewall = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 2))
mGuardNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 3))
mGuardSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 4))
mGuardSNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 5))
mGuardNTP = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 6))
mGuardUpdate = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 7))
mGuardRedundancy = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 9))
mGuardInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 10))
mGuardLogging = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 11))
mGuardContFilt = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 12))
mGuardBlade = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 13))
mGuardProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 14))
mGuardUsers = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 15))
mGuardVPNMachine = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 1, 1))
mGuardVPNMachineCert = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 1, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNMachineCert.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNMachineCert.setDescription('Machine certificate and private key of this device.')
mGuardVPNMachinePrivate = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNMachinePrivate.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNMachinePrivate.setDescription('Private key')
mGuardVPNConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2), )
if mibBuilder.loadTexts: mGuardVPNConnectionTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNConnectionTable.setDescription("A table containing the configuration of the local device's VPN connections.")
mGuardVPNConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardVPNconIndex"))
if mibBuilder.loadTexts: mGuardVPNConnectionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNConnectionEntry.setDescription('Configuration of a single VPN connection.')
mGuardVPNconIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250)))
if mibBuilder.loadTexts: mGuardVPNconIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNconIndex.setDescription('Index to identify the connection.')
mGuardVPNconName = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNconName.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNconName.setDescription('Descriptive name of the connection.')
mGuardVPNconEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNconEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNconEnabled.setDescription('Is the connection enabled: yes / no .')
mGuardVPNremGW = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNremGW.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNremGW.setDescription('Remote VPN gateway.')
mGuardVPNconType = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("transport", 1), ("tunnel", 2), ("l2tp-w2k", 3), ("l2tp-ssh", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNconType.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNconType.setDescription('Type of VPN connection: transport / tunnel / l2tp-w2k / l2tp-ssh')
mGuardVPNlocalNet = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNlocalNet.setStatus('deprecated')
if mibBuilder.loadTexts: mGuardVPNlocalNet.setDescription('Local net address for VPN connection in tunnel mode.')
mGuardVPNlocalMask = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNlocalMask.setStatus('deprecated')
if mibBuilder.loadTexts: mGuardVPNlocalMask.setDescription('Local netmask for VPN connection in tunnel mode.')
mGuardVPNremoteNet = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNremoteNet.setStatus('deprecated')
if mibBuilder.loadTexts: mGuardVPNremoteNet.setDescription('Remote net address for VPN connection in tunnel mode.')
mGuardVPNremoteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNremoteMask.setStatus('deprecated')
if mibBuilder.loadTexts: mGuardVPNremoteMask.setDescription('Remote netmask for VPN connection in tunnel mode.')
mGuardVPNauthType = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("psk", 1), ("x509", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNauthType.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNauthType.setDescription('Authentification mode of the VPN connection: psk / x509')
mGuardVPNpsk = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNpsk.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNpsk.setDescription('Pre Shared Secret')
mGuardVPNx509 = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNx509.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNx509.setDescription('X.509 certificate')
mGuardVPNikeDH = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("all", 1), ("modp1024", 2), ("modp1536", 3), ("modp2048", 4), ("modp3072", 5), ("modp4096", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNikeDH.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNikeDH.setDescription('IKE DH algorithm.')
mGuardVPNikeHash = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all", 1), ("md5", 2), ("sha1", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNikeHash.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNikeHash.setDescription('IKE hash algorithm: all / md5 / sha1')
mGuardVPNipsecHash = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all", 1), ("md5", 2), ("sha1", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNipsecHash.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNipsecHash.setDescription('ipsec hash algorithm: all / md5 / sha1')
mGuardVPNikeAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("des", 1), ("tripledes168", 2), ("aes128", 3), ("aes192", 4), ("aes256", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNikeAlg.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNikeAlg.setDescription('IKE encryption algorithm: des / 3des168 / aes128 / aes192 / aes256')
mGuardVPNipsecAlg = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("des", 1), ("tripledes168", 2), ("aes128", 3), ("aes192", 4), ("aes256", 5), ("null", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNipsecAlg.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNipsecAlg.setDescription('ipsec encryption algorithm: des/ 3des168 / aes128 / aes192 / aes256 / null')
mGuardVPNpfs = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("no", 1), ("all", 2), ("modp1024", 3), ("modp1536", 4), ("modp2048", 5), ("modp3072", 6), ("modp4096", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNpfs.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNpfs.setDescription('ipsec perfect forward secrecy: no / all / modp1024 / modp1536 / modp2048 / modp3072 / modp4096')
mGuardVPNconStartUp = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("initiate", 1), ("waitForRemote", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNconStartUp.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNconStartUp.setDescription('Recognize the startup of the VPN connection or wait for connection startup of the remote gateway: yes / no .')
mGuardVPNvirtIPMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dhcp-over-ipsec", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNvirtIPMethod.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNvirtIPMethod.setDescription("This option isn't implemented yet.")
mGuardVPNvirtIP = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2, 1, 21), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNvirtIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNvirtIP.setDescription('Virtual IP to use')
mGuardVPNFWLogDefIn = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNFWLogDefIn.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNFWLogDefIn.setDescription('Log entries for undefined incoming connection attemps ?')
mGuardVPNFWLogDefOut = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNFWLogDefOut.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNFWLogDefOut.setDescription('Log entries for undefined outgoing connection attemps ?')
mGuardVPNProtoAH = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNProtoAH.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNProtoAH.setDescription("Use the AH protocoll. Only 'no' is supported.")
mGuardVPNProtoESP = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNProtoESP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNProtoESP.setDescription("Use the ESP protocoll. Only 'yes' is supported.")
mGuardVPNComp = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNComp.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNComp.setDescription("Use IPsec compression. Only 'no' is supported.")
mGuardVPNLocalIDMode = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("freeswan", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNLocalIDMode.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNLocalIDMode.setDescription("Mode for local ID. This option isn't implemented yet.")
mGuardVPNLocalID = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2, 1, 30), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNLocalID.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNLocalID.setDescription('Local ID.')
mGuardVPNRemoteIDMode = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("freeswan", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNRemoteIDMode.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNRemoteIDMode.setDescription("Mode for remote ID. This option isn't implemented yet.")
mGuardVPNRemoteID = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2, 1, 32), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNRemoteID.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNRemoteID.setDescription('Local ID.')
mGuardVPNIkeLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNIkeLifetime.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNIkeLifetime.setDescription('ISAKMP SA lifetime (seconds).')
mGuardVPNIpsecLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNIpsecLifetime.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNIpsecLifetime.setDescription('IPSec SA lifetime (seconds).')
mGuardVPNRekeyMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNRekeyMargin.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNRekeyMargin.setDescription('Rekey Margin (seconds).')
mGuardVPNRekeyFuzz = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNRekeyFuzz.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNRekeyFuzz.setDescription('Rekey fuzz (in percent).')
mGuardVPNKeyingTries = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2, 1, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNKeyingTries.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNKeyingTries.setDescription('Rekey fuzz (in percent).')
mGuardVPNRekey = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNRekey.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNRekey.setDescription("Renegotiate connection after the keys have expired? Must be set to 'no' on both end to be effective.")
mGuardVPNDPDAction = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hold", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNDPDAction.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNDPDAction.setDescription("What to do in case DPD found out that the connection is dead: 'hold': renegotiate connection. 'clear': clear connection and don't renegotiate.")
mGuardVPNDPDDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNDPDDelay.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNDPDDelay.setDescription("Interval in seconds to wait before sending DPD requests when the remote end didn't send data. The default value is 30.")
mGuardVPNDPDTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2, 1, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNDPDTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNDPDTimeout.setDescription('Interval in seconds before declaring the remote end as dead after sending the first DPD request. The default value is 120.')
mGuardVPNRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2, 1, 42), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNRowStatus.setDescription('RowStatus')
mGuardVPNAggressive = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNAggressive.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNAggressive.setDescription('Wether to use/accept aggressive mode VPn connections for this one.')
mGuardVPNlocal = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2, 1, 44), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNlocal.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNlocal.setDescription('Local network for VPN connection in tunnel mode in CIDR notation.')
mGuardVPNremote = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 2, 1, 45), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNremote.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNremote.setDescription('Remote network for VPN connection in tunnel mode in CIDR notation.')
mGuardVPNFW = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 1, 3))
mGuardVPNFWINTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 1, 3, 1), )
if mibBuilder.loadTexts: mGuardVPNFWINTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNFWINTable.setDescription('Table of firewall rules for incoming packets.')
mGuardVPNFWINEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 1, 3, 1, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardVPNFWINconIndex"), (0, "MGUARDB-MIB", "mGuardVPNFWINruleIndex"))
if mibBuilder.loadTexts: mGuardVPNFWINEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNFWINEntry.setDescription('An entry containing data of a single rule.')
mGuardVPNFWINconIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250)))
if mibBuilder.loadTexts: mGuardVPNFWINconIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNFWINconIndex.setDescription('Index to identify the rule.')
mGuardVPNFWINruleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250)))
if mibBuilder.loadTexts: mGuardVPNFWINruleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNFWINruleIndex.setDescription('Index to identify the rule.')
mGuardVPNFWINsourceIP = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 3, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNFWINsourceIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNFWINsourceIP.setDescription("The rule's source IP address")
mGuardVPNFWINdestinationIP = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 3, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNFWINdestinationIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNFWINdestinationIP.setDescription("The rule's source IP address")
mGuardVPNFWINsport = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 3, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNFWINsport.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNFWINsport.setDescription("The rule's source port")
mGuardVPNFWINdport = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 3, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNFWINdport.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNFWINdport.setDescription("The rule's destination port")
mGuardVPNFWINtarget = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("accept", 1), ("reject", 2), ("drop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNFWINtarget.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNFWINtarget.setDescription("The rule's target")
mGuardVPNFWINproto = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2), ("icmp", 3), ("all", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNFWINproto.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNFWINproto.setDescription("The rule's transport protocol")
mGuardVPNFWINlog = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNFWINlog.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNFWINlog.setDescription('Log packets matching this rule.')
mGuardVPNFWINRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 3, 1, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNFWINRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNFWINRowStatus.setDescription('RowStatus')
mGuardVPNFWINcomment = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 3, 1, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNFWINcomment.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNFWINcomment.setDescription('Commentary or name for this rule.')
mGuardVPNFWOUTTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 1, 3, 2), )
if mibBuilder.loadTexts: mGuardVPNFWOUTTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNFWOUTTable.setDescription('Table of firewall rules for outgoing packets.')
mGuardVPNFWOUTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 1, 3, 2, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardVPNFWOUTconIndex"), (0, "MGUARDB-MIB", "mGuardVPNFWOUTruleIndex"))
if mibBuilder.loadTexts: mGuardVPNFWOUTEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNFWOUTEntry.setDescription('An entry containing data of a single rule.')
mGuardVPNFWOUTconIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250)))
if mibBuilder.loadTexts: mGuardVPNFWOUTconIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNFWOUTconIndex.setDescription('Index to identify the rule.')
mGuardVPNFWOUTruleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250)))
if mibBuilder.loadTexts: mGuardVPNFWOUTruleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNFWOUTruleIndex.setDescription('Index to identify the rule.')
mGuardVPNFWOUTsourceIP = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 3, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNFWOUTsourceIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNFWOUTsourceIP.setDescription("The rule's source IP address")
mGuardVPNFWOUTdestinationIP = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 3, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNFWOUTdestinationIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNFWOUTdestinationIP.setDescription("The rule's source IP address")
mGuardVPNFWOUTsport = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 3, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNFWOUTsport.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNFWOUTsport.setDescription("The rule's source port")
mGuardVPNFWOUTdport = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 3, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNFWOUTdport.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNFWOUTdport.setDescription("The rule's destination port")
mGuardVPNFWOUTtarget = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("accept", 1), ("reject", 2), ("drop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNFWOUTtarget.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNFWOUTtarget.setDescription("The rule's target")
mGuardVPNFWOUTproto = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2), ("icmp", 3), ("all", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNFWOUTproto.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNFWOUTproto.setDescription("The rule's transport protocol")
mGuardVPNFWOUTlog = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNFWOUTlog.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNFWOUTlog.setDescription('Log packets matching this rule.')
mGuardVPNFWOUTRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 3, 2, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNFWOUTRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNFWOUTRowStatus.setDescription('RowStatus')
mGuardVPNFWOUTcomment = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 3, 2, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNFWOUTcomment.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNFWOUTcomment.setDescription('Commentary or name for this rule.')
mGuardVPNDynDNS = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 1, 4))
mGuardVPNDynDNSRegister = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 1, 4, 1))
mGuardVPNDynDNSReg = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 1, 4, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNDynDNSReg.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNDynDNSReg.setDescription(' Register at a DynDNS service: no, yes')
mGuardVPNDynDNSRegInterval = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 1, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNDynDNSRegInterval.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNDynDNSRegInterval.setDescription(' Refresh interval for registration.')
mGuardVPNDynDNSRegServer = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 1, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNDynDNSRegServer.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNDynDNSRegServer.setDescription('DynDNS server.')
mGuardVPNDynDNSRegLogin = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 1, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNDynDNSRegLogin.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNDynDNSRegLogin.setDescription('Login for DynDNS server.')
mGuardVPNDynDNSRegPasswd = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 1, 4, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNDynDNSRegPasswd.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNDynDNSRegPasswd.setDescription('Password for DynDNS server.')
mGuardVPNDynDNSRegProvider = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inominate", 1), ("dyndns", 2), ("dns4biz", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNDynDNSRegProvider.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNDynDNSRegProvider.setDescription('DynDNS provider')
mGuardVPNDynDNSRegHostname = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 1, 4, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNDynDNSRegHostname.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNDynDNSRegHostname.setDescription('Hostname to register')
mGuardVPNDynDNSCheck = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 1, 4, 2))
mGuardVPNDynDNSCheckDo = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 1, 4, 2, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNDynDNSCheckDo.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNDynDNSCheckDo.setDescription('Should hostnames of remote vpn gateways be checked after certain time intervals in case they are at a DynDNS provider? : no,yes')
mGuardVPNDynDNSCheckRefresh = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 1, 4, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNDynDNSCheckRefresh.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNDynDNSCheckRefresh.setDescription('Refresh interval for checking DNS names of remote VPN peers.')
mGuardVPNL2TP = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 1, 5))
mGuardVPNL2TPStart = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNL2TPStart.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNL2TPStart.setDescription('Start the L2TP Server ? yes,no')
mGuardVPNL2TPLocalIP = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 1, 5, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNL2TPLocalIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNL2TPLocalIP.setDescription('Local IP for L2TP connections')
mGuardVPNL2TPRemoteIPRangeStart = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 1, 5, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNL2TPRemoteIPRangeStart.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNL2TPRemoteIPRangeStart.setDescription('Start of range of remote IPs.')
mGuardVPNL2TPRemoteIPRangeEnd = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 1, 5, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNL2TPRemoteIPRangeEnd.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNL2TPRemoteIPRangeEnd.setDescription('End of range of remote IPs.')
mGuardVPNL2TPpppdOptTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 1, 5, 5), )
if mibBuilder.loadTexts: mGuardVPNL2TPpppdOptTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNL2TPpppdOptTable.setDescription('A table of options set for the pppd process implementing IPsec/L2TP.')
mGuardVPNL2TPpppdOptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 1, 5, 5, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardVPNL2TPpppdOptIndex"))
if mibBuilder.loadTexts: mGuardVPNL2TPpppdOptEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNL2TPpppdOptEntry.setDescription('A single option set for pppd. ')
mGuardVPNL2TPpppdOptIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 5, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: mGuardVPNL2TPpppdOptIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNL2TPpppdOptIndex.setDescription('Table index.')
mGuardVPNL2TPpppdOptValue = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 5, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNL2TPpppdOptValue.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNL2TPpppdOptValue.setDescription('The pppd option.')
mGuardVPNL2TPpppdOptRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 1, 5, 5, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNL2TPpppdOptRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNL2TPpppdOptRowStatus.setDescription('Row Status')
mGuardVPNSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 1, 6))
mGuardVPNRequireUniqueIDs = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNRequireUniqueIDs.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNRequireUniqueIDs.setDescription('Allow only one open connection per identity (ie. X.509 certificate).')
mGuardVPNNatTraversal = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNNatTraversal.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNNatTraversal.setDescription('Encapsulate ESP traffic into IKE (UDP) packets to pass IPsec unaware NAT routers.')
mGuardVPNNatTPortfloating = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNNatTPortfloating.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNNatTPortfloating.setDescription('Some NAT routers fail to perform NAT originating low UDP ports. This option moves IKE from UDP 500 to UDP 4500 if possible')
mGuardVPNNatTKeepAliveInterval = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 1, 6, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNNatTKeepAliveInterval.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNNatTKeepAliveInterval.setDescription('NAT-T Keepalive Interval (in seconds). Keepalives will tell the NAT router not to close the connection. ')
mGuardVPNNatTKeepAliveForce = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 1, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNNatTKeepAliveForce.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNNatTKeepAliveForce.setDescription('Force NAT-T Keepalive ?')
mGuardVPNIkeLog = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 1, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNIkeLog.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNIkeLog.setDescription('Log verbose information on IKE ?')
mGuardVPNHideTos = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 1, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNHideTos.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNHideTos.setDescription('When set to yes the TOS bit will be cleared on IPsec output. ')
mGuardVPNmtu = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 1, 6, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNmtu.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNmtu.setDescription('ipsec0 mtu')
mGuardVPNStrictCRLPolicy = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 1, 6, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNStrictCRLPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNStrictCRLPolicy.setDescription('Use a strict CRL policy?')
mGuardVPNNoCertReqSend = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 1, 6, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardVPNNoCertReqSend.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVPNNoCertReqSend.setDescription("Don't send certificate requests?")
mGuardFirewallIncoming = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 2, 1))
mGuardFirewallIncomingTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 2, 1, 1), )
if mibBuilder.loadTexts: mGuardFirewallIncomingTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallIncomingTable.setDescription('A table containing firewall rules for incoming packets.')
mGuardFirewallIncomingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 2, 1, 1, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardFWINruleIndex"))
if mibBuilder.loadTexts: mGuardFirewallIncomingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallIncomingEntry.setDescription('An entry containing data of a single rule.')
mGuardFWINruleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250)))
if mibBuilder.loadTexts: mGuardFWINruleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFWINruleIndex.setDescription('Index to identify the rule.')
mGuardFWINsourceIP = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 1, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFWINsourceIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFWINsourceIP.setDescription("The rule's source IP address")
mGuardFWINdestinationIP = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 1, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFWINdestinationIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFWINdestinationIP.setDescription("The rule's source IP address")
mGuardFWINsport = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 1, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFWINsport.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFWINsport.setDescription("The rule's source port")
mGuardFWINdport = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 1, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFWINdport.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFWINdport.setDescription("The rule's destination port")
mGuardFWINtarget = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("accept", 1), ("reject", 2), ("drop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFWINtarget.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFWINtarget.setDescription("The rule's target")
mGuardFWINproto = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2), ("icmp", 3), ("all", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFWINproto.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFWINproto.setDescription("The rule's transport protocol")
mGuardFWINlog = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFWINlog.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFWINlog.setDescription(' Log packets matching this rule ?')
mGuardFWINRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 1, 1, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFWINRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFWINRowStatus.setDescription('RowStatus')
mGuardFWINcomment = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 1, 1, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFWINcomment.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFWINcomment.setDescription('Commentary or name for this rule.')
mGuardFirewallINLogDefault = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFirewallINLogDefault.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallINLogDefault.setDescription('Log entries for unknown connection attemps ?')
mGuardFirewallOutgoing = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 2, 2))
mGuardFirewallOutgoingTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 2, 2, 1), )
if mibBuilder.loadTexts: mGuardFirewallOutgoingTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallOutgoingTable.setDescription('A table containing firewall rules for outgoing packets.')
mGuardFirewallOutgoingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 2, 2, 1, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardFWOUTruleIndex"))
if mibBuilder.loadTexts: mGuardFirewallOutgoingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallOutgoingEntry.setDescription('An entry containing data of a single rule.')
mGuardFWOUTruleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250)))
if mibBuilder.loadTexts: mGuardFWOUTruleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFWOUTruleIndex.setDescription('Index to identify the rule.')
mGuardFWOUTsourceIP = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFWOUTsourceIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFWOUTsourceIP.setDescription("The rule's source IP address")
mGuardFWOUTdestinationIP = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 2, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFWOUTdestinationIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFWOUTdestinationIP.setDescription("The rule's source IP address")
mGuardFWOUTsport = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 2, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFWOUTsport.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFWOUTsport.setDescription("The rule's source port")
mGuardFWOUTdport = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 2, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFWOUTdport.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFWOUTdport.setDescription("The rule's destination port")
mGuardFWOUTtarget = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("accept", 1), ("reject", 2), ("drop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFWOUTtarget.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFWOUTtarget.setDescription("The rule's target")
mGuardFWOUTproto = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2), ("icmp", 3), ("all", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFWOUTproto.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFWOUTproto.setDescription("The rule's transport protocol")
mGuardFWOUTlog = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFWOUTlog.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFWOUTlog.setDescription(' Log packets matching this rule ?')
mGuardFWOUTRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 2, 1, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFWOUTRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFWOUTRowStatus.setDescription('RowStatus')
mGuardFWOUTcomment = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 2, 1, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFWOUTcomment.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFWOUTcomment.setDescription('Commentary or name for this rule.')
mGuardFirewallOUTLogDefault = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFirewallOUTLogDefault.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallOUTLogDefault.setDescription('Log entries for unknown connection attemps ?')
mGuardFirewallPortforwarding = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 2, 3))
mGuardFirewallPortforwardTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 2, 3, 1), )
if mibBuilder.loadTexts: mGuardFirewallPortforwardTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallPortforwardTable.setDescription('A table containing firewall rules for portforwarding.')
mGuardFirewallPortforwardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 2, 3, 1, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardFWPORTFORWruleIndex"))
if mibBuilder.loadTexts: mGuardFirewallPortforwardEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallPortforwardEntry.setDescription('An entry containing data of a single rule.')
mGuardFWPORTFORWruleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250)))
if mibBuilder.loadTexts: mGuardFWPORTFORWruleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFWPORTFORWruleIndex.setDescription('Index to identify the rule.')
mGuardFWPORTFORWinIP = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFWPORTFORWinIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFWPORTFORWinIP.setDescription("The rule's incoming IP address")
mGuardFWPORTFORWoutIP = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 3, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFWPORTFORWoutIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFWPORTFORWoutIP.setDescription("The rule's redirect IP address")
mGuardFWPORTFORWinport = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 3, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFWPORTFORWinport.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFWPORTFORWinport.setDescription("The rule's incoming port")
mGuardFWPORTFORWoutport = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 3, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFWPORTFORWoutport.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFWPORTFORWoutport.setDescription("The rule's destination port")
mGuardFWPORTFORWproto = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFWPORTFORWproto.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFWPORTFORWproto.setDescription("The rule's transport protocol")
mGuardFWPORTFORWlog = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFWPORTFORWlog.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFWPORTFORWlog.setDescription(' Log packets matching this rule ?')
mGuardFWPORTFORWRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 3, 1, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFWPORTFORWRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFWPORTFORWRowStatus.setDescription('RowStatus')
mGuardFWPORTFORWsrcIP = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 3, 1, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFWPORTFORWsrcIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFWPORTFORWsrcIP.setDescription("The rule's source IP address")
mGuardFWPORTFORWsrcport = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 3, 1, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFWPORTFORWsrcport.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFWPORTFORWsrcport.setDescription("The rule's source port")
mGuardFWPORTFORWcomment = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 3, 1, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFWPORTFORWcomment.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFWPORTFORWcomment.setDescription('Commentary or name for this rule.')
mGuardFirewallNAT = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 2, 4))
mGuardFirewallNATRuleTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 2, 4, 1), )
if mibBuilder.loadTexts: mGuardFirewallNATRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallNATRuleTable.setDescription('A table containing firewall rules for network address translation.')
mGuardFirewallNATRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 2, 4, 1, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardFWNATruleIndex"))
if mibBuilder.loadTexts: mGuardFirewallNATRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallNATRuleEntry.setDescription('An entry containing data of a single rule.')
mGuardFWNATruleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250)))
if mibBuilder.loadTexts: mGuardFWNATruleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFWNATruleIndex.setDescription('Index to identify the rule.')
mGuardFWNATIP = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 4, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFWNATIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFWNATIP.setDescription("The rule's source IP address")
mGuardFWNATRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 4, 1, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFWNATRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFWNATRowStatus.setDescription('RowStatus')
mGuardFWNATOutIP = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 4, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFWNATOutIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFWNATOutIP.setDescription('Reserved for future use')
mGuardFirewallExtended = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 2, 5))
mGuardFirewallIPConntrackMax = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 2, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFirewallIPConntrackMax.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallIPConntrackMax.setDescription('Maximum size of connection tracking table')
mGuardFirewallIPSynfloodLimitInt = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 2, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFirewallIPSynfloodLimitInt.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallIPSynfloodLimitInt.setDescription('Maximum number of new outgoing TCP connections (SYN) per second')
mGuardFirewallIPSynfloodLimitExt = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 2, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFirewallIPSynfloodLimitExt.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallIPSynfloodLimitExt.setDescription('Maximum number of new incoming TCP connections (SYN) per second')
mGuardFirewallICMPLimitInt = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 2, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFirewallICMPLimitInt.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallICMPLimitInt.setDescription('Maximum number of outgoing ping frames (ICMP Echo Request) per second')
mGuardFirewallICMPLimitExt = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 2, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFirewallICMPLimitExt.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallICMPLimitExt.setDescription('Maximum number of incoming ping frames (ICMP Echo Request) per second')
mGuardFirewallEnableConntrackFTP = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 2, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFirewallEnableConntrackFTP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallEnableConntrackFTP.setDescription('Enable active FTP NAT/Connection Tracking support')
mGuardFirewallConntrackIRC = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 2, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFirewallConntrackIRC.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallConntrackIRC.setDescription('Enable IRC NAT/Connection Tracking support')
mGuardFirewallConntrackPPTP = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 2, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFirewallConntrackPPTP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallConntrackPPTP.setDescription('Enable PPTP NAT/Connection Tracking support')
mGuardFirewallARPLimitInt = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 2, 5, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFirewallARPLimitInt.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallARPLimitInt.setDescription('Maximum number of outgoing arp request frames per second (stealth mode only)')
mGuardFirewallARPLimitExt = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 2, 5, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFirewallARPLimitExt.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallARPLimitExt.setDescription('Maximum number of incoming arp request frames per second (stealth mode only)')
mGuardFirewallICMPPolicy = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 2, 5, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("drop", 1), ("ping", 2), ("all", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFirewallICMPPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallICMPPolicy.setDescription('Allow incoming ICMP frames to the mGuard itself (router modes only): drop: default, ping: allow incoming ICMP echo request (required to answer ping), all: allow all incoming ICMP request to reach the TCP stack. Note: ICMP packets related to established connections are handled by the connection tracking. This setting is used for unrelated ICMP traffic.')
mGuardFirewallConntrackH323 = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 2, 5, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFirewallConntrackH323.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallConntrackH323.setDescription('Enable H323 NAT/Connection Tracking support')
mGuardFirewallIpUncleanMatch = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 2, 5, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFirewallIpUncleanMatch.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallIpUncleanMatch.setDescription('Enable IP Unclean Match')
mGuardFirewall11NAT = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 2, 6))
mGuardFirewall11NATRuleTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 2, 6, 1), )
if mibBuilder.loadTexts: mGuardFirewall11NATRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewall11NATRuleTable.setDescription('A table containing firewall rules for network address translation.')
mGuardFirewall11NATRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 2, 6, 1, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardFW11NATruleIndex"))
if mibBuilder.loadTexts: mGuardFirewall11NATRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewall11NATRuleEntry.setDescription('An entry containing data of a single rule.')
mGuardFW11NATruleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250)))
if mibBuilder.loadTexts: mGuardFW11NATruleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFW11NATruleIndex.setDescription('Index to identify the rule.')
mGuardFW11NATLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 6, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFW11NATLocal.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFW11NATLocal.setDescription('Network for 1:1 NAT on local interface.')
mGuardFW11NATRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 6, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFW11NATRemote.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFW11NATRemote.setDescription('Network for 1:1 NAT on remote interface.')
mGuardFW11NATMask = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 6, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFW11NATMask.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFW11NATMask.setDescription('Netmask for 1:1 NAT between 0 and 32.')
mGuardFW11NATLog = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFW11NATLog.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFW11NATLog.setDescription('Log entries for this rule?')
mGuardFW11NATRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 6, 1, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFW11NATRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFW11NATRowStatus.setDescription('RowStatus')
mGuardFirewallUserFW = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 2, 7))
mGuardFirewallUserFWEnabled = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFirewallUserFWEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallUserFWEnabled.setDescription('Enable the user firewall.')
mGuardFirewallUserFWTemplateTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 2, 7, 2), )
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateTable.setDescription('A table containing user firewall templates.')
mGuardFirewallUserFWTemplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 2, 7, 2, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardFirewallUserFWTemplateIndex"))
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateEntry.setDescription('An entry containing a single user firewall template.')
mGuardFirewallUserFWTemplateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateIndex.setDescription('Index to identify the user firewall template entry.')
mGuardFirewallUserFWTemplateEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateEnabled.setDescription('Enable this user firewall template.')
mGuardFirewallUserFWTemplateName = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 7, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateName.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateName.setDescription('A descriptive name of the user firewall template.')
mGuardFirewallUserFWTemplateComment = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 7, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateComment.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateComment.setDescription('A comment associated with the user firewall template.')
mGuardFirewallUserFWTemplateTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateTimeout.setDescription('The timeout in seconds of the user firewall template.')
mGuardFirewallUserFWTemplateSrcIP = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 7, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateSrcIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateSrcIP.setDescription('The source IP address of the user firewall template.')
mGuardFirewallUserFWTemplateRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 7, 2, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateRowStatus.setDescription('Row Status')
mGuardFirewallUserFWTemplateUserTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 2, 7, 3), )
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateUserTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateUserTable.setDescription('A table containing the users associated with a user firewall template.')
mGuardFirewallUserFWTemplateUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 2, 7, 3, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardFirewallUserFWTemplateUserTemplateIndex"), (0, "MGUARDB-MIB", "mGuardFirewallUserFWTemplateUserIndex"))
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateUserEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateUserEntry.setDescription('An entry containing a single user associated with a user firewall template.')
mGuardFirewallUserFWTemplateUserTemplateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateUserTemplateIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateUserTemplateIndex.setDescription('Index to identify the user firewall template entry.')
mGuardFirewallUserFWTemplateUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 7, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateUserIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateUserIndex.setDescription('Index to identify the user within the user firewall template entry.')
mGuardFirewallUserFWTemplateUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 7, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateUserName.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateUserName.setDescription('The username of the user within the user firewall template entry.')
mGuardFirewallUserFWTemplateUserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 7, 3, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateUserRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateUserRowStatus.setDescription('Row Status')
mGuardFirewallUserFWTemplateRuleTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 2, 7, 4), )
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateRuleTable.setDescription('A table containing the rules associated with a user firewall template.')
mGuardFirewallUserFWTemplateRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 2, 7, 4, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardFirewallUserFWTemplateRuleTemplateIndex"), (0, "MGUARDB-MIB", "mGuardFirewallUserFWTemplateRuleIndex"))
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateRuleEntry.setDescription('An entry containing a single rule associated with a user firewall template.')
mGuardFirewallUserFWTemplateRuleTemplateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateRuleTemplateIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateRuleTemplateIndex.setDescription('Index to identify the user firewall template entry.')
mGuardFirewallUserFWTemplateRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 7, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateRuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateRuleIndex.setDescription('Index to identify the rule within the user firewall template entry.')
mGuardFirewallUserFWTemplateRuleProto = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 7, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2), ("icmp", 3), ("all", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateRuleProto.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateRuleProto.setDescription('The protocol of the rule within the user firewall template entry.')
mGuardFirewallUserFWTemplateRuleSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 7, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateRuleSrcPort.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateRuleSrcPort.setDescription('The source port or port range of the rule within the user firewall template entry.')
mGuardFirewallUserFWTemplateRuleDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 7, 4, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateRuleDstPort.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateRuleDstPort.setDescription('The destination port or port range of the rule within the user firewall template entry.')
mGuardFirewallUserFWTemplateRuleDstIP = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 7, 4, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateRuleDstIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateRuleDstIP.setDescription('The destination IP address of the rule within the user firewall template entry.')
mGuardFirewallUserFWTemplateRuleLog = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 7, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateRuleLog.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateRuleLog.setDescription('Log packets matching the rule within the user firewall template entry.')
mGuardFirewallUserFWTemplateRuleComment = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 7, 4, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateRuleComment.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateRuleComment.setDescription('A comment associated with the rule within the user firewall template entry.')
mGuardFirewallUserFWTemplateRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 2, 7, 4, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateRuleRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardFirewallUserFWTemplateRuleRowStatus.setDescription('Row Status')
mGuardNetworkMode = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("stealth", 1), ("router", 2), ("pppoe", 3), ("pptp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardNetworkMode.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardNetworkMode.setDescription('Network mode: router,stealth')
mGuardStealth = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 3, 2))
mGuardStealthIPConfMode = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("autoDetect", 1), ("static", 2), ("multi", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardStealthIPConfMode.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardStealthIPConfMode.setDescription('Type of IP Stack configuration in stealth mode. autodetect, static, multiple-clients')
mGuardStealthIPConfStatic = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 3, 2, 2))
mGuardStealthStaticIP = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 2, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardStealthStaticIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardStealthStaticIP.setDescription('IP address of the protected client in stealth mode (using static ip configuration).')
mGuardStealthStaticMAC = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 2, 2, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardStealthStaticMAC.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardStealthStaticMAC.setDescription('MAC address of protected client in stealth mode (using static ip configuration).')
mGuardStealthStaticActivate = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("activate", 1), ("valuescached", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardStealthStaticActivate.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardStealthStaticActivate.setDescription('Button to activate Stealth Static IP configuration.')
mGuardStealthManageIP = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 2, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardStealthManageIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardStealthManageIP.setDescription('The management IP address of this system in stealth mode When set, this value is internally cached inside the agent until it is explicitly activated by writing the mGuardStealthManageActivate object. When read the currently active setting is returned, not regarding any cached values.')
mGuardStealthManageNetmask = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 2, 2, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardStealthManageNetmask.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardStealthManageNetmask.setDescription('The management IP netmask of this system in stealth mode When set, this value is internally cached inside the agent until it is explicitly activated by writing the mGuardStealthManageActivate object. When read the currently active setting is returned, not regarding any cached values.')
mGuardStealthManageGateway = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 2, 2, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardStealthManageGateway.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardStealthManageGateway.setDescription('The default gateway for the management IP of the mGuard in stealth mode When set, this value is internally cached inside the agent until it is explicitly activated by writing the mGuardStealthManageActivate object. When read the currently active setting is returned, not regarding any cached values.')
mGuardStealthManageActivate = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 2, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("activate", 1), ("valuescached", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardStealthManageActivate.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardStealthManageActivate.setDescription('Button to activate the stealth management IP configuration. When activate(1) is written, any cached values for the mGuardStealthManageIP, mGuardStealthManageNetmask, and mGuardStealthManageGateway objects are activated. When read and one or more of the above mentioned objects have been cached, valuescached(2) is returned, not regarding whether the cached valued and the current value are different.')
mGuardStealthHiDiscoveryRelay = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardStealthHiDiscoveryRelay.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardStealthHiDiscoveryRelay.setDescription('Relay/bridge HiDiscovery queries when in Stealth Mode.')
mGuardStealthHiDiscoveryState = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("readwrite", 1), ("disabled", 2), ("readonly", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardStealthHiDiscoveryState.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardStealthHiDiscoveryState.setDescription('Enable HiDiscovery in StealthMode. This is mutually exclusive with the two HiDiscovery router mode settings of course.')
mGuardStealthL2Filter = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 3, 2, 5))
mGuardL2FilterInternTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 3, 2, 5, 1), )
if mibBuilder.loadTexts: mGuardL2FilterInternTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardL2FilterInternTable.setDescription('Table of firewall rules for Layer 2 filtering on internal interface.')
mGuardL2FilterInternEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 3, 2, 5, 1, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardL2FilterInternRuleIndex"))
if mibBuilder.loadTexts: mGuardL2FilterInternEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardL2FilterInternEntry.setDescription('A single rule for Layer-2 filter in internal interface. ')
mGuardL2FilterInternRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 2, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: mGuardL2FilterInternRuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardL2FilterInternRuleIndex.setDescription('Table index.')
mGuardL2FilterInternRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 2, 5, 1, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardL2FilterInternRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardL2FilterInternRowStatus.setDescription('Row Status.')
mGuardL2FilterInternSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 2, 5, 1, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardL2FilterInternSrcMac.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardL2FilterInternSrcMac.setDescription('Source MAC Address to apply this filter rule for.')
mGuardL2FilterInternDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 2, 5, 1, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardL2FilterInternDstMac.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardL2FilterInternDstMac.setDescription('Desitination MAC Address to apply this filter rule for.')
mGuardL2FilterInternEthType = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 2, 5, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardL2FilterInternEthType.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardL2FilterInternEthType.setDescription('Ethernet type to apply this filter rule for.')
mGuardL2FilterInternTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 2, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("accept", 1), ("reject", 2), ("drop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardL2FilterInternTarget.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardL2FilterInternTarget.setDescription("The rule's target")
mGuardL2FilterInternComment = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 2, 5, 1, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardL2FilterInternComment.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardL2FilterInternComment.setDescription('Comment or name for this rule.')
mGuardL2FilterExternTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 3, 2, 5, 2), )
if mibBuilder.loadTexts: mGuardL2FilterExternTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardL2FilterExternTable.setDescription('Table of firewall rules for Layer 2 filterin on external interface.')
mGuardL2FilterExternEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 3, 2, 5, 2, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardL2FilterExternRuleIndex"))
if mibBuilder.loadTexts: mGuardL2FilterExternEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardL2FilterExternEntry.setDescription('A single rule for Layer-2 filter in external interface. ')
mGuardL2FilterExternRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 2, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: mGuardL2FilterExternRuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardL2FilterExternRuleIndex.setDescription('Table index.')
mGuardL2FilterExternRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 2, 5, 2, 1, 2), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardL2FilterExternRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardL2FilterExternRowStatus.setDescription('Row Status.')
mGuardL2FilterExternSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 2, 5, 2, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardL2FilterExternSrcMac.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardL2FilterExternSrcMac.setDescription('Source MAC Address to apply this filter rule for.')
mGuardL2FilterExternDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 2, 5, 2, 1, 4), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardL2FilterExternDstMac.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardL2FilterExternDstMac.setDescription('Desitination MAC Address to apply this filter rule for.')
mGuardL2FilterExternEthType = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 2, 5, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardL2FilterExternEthType.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardL2FilterExternEthType.setDescription('Ethernet type to apply this filter rule for.')
mGuardL2FilterExternTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 2, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("accept", 1), ("reject", 2), ("drop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardL2FilterExternTarget.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardL2FilterExternTarget.setDescription("The rule's target")
mGuardL2FilterExternComment = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 2, 5, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardL2FilterExternComment.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardL2FilterExternComment.setDescription('Comment or name for this rule.')
mGuardStealthL2ForwardGVRP = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 2, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardStealthL2ForwardGVRP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardStealthL2ForwardGVRP.setDescription('Enable GVRP forwarding in StealthMode.')
mGuardStealthL2ForwardSTP = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 2, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardStealthL2ForwardSTP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardStealthL2ForwardSTP.setDescription('Enable STP forwarding in StealthMode.')
mGuardStealthL2ForwardDHCP = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 2, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardStealthL2ForwardDHCP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardStealthL2ForwardDHCP.setDescription('Enable DHCP forwarding in StealthMode. This will allow computers on the internal/protected side to receive their configuration via DHCP even if no special DHCP rule is configured in the firewall')
mGuardStealthInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 3, 2, 6))
mGuardStealthMTU = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 2, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardStealthMTU.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardStealthMTU.setDescription('MTU to use in Stealth Mode.')
mGuardStealthVlanMTU = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 2, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardStealthVlanMTU.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardStealthVlanMTU.setDescription('MTU to use in Stealth Mode for VLAN packets.')
mGuardStealthManageUseVLAN = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 2, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardStealthManageUseVLAN.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardStealthManageUseVLAN.setDescription('Use VLAn tagging for the management IP address in Stealth Mode.')
mGuardStealthManageVLanID = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 2, 6, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardStealthManageVLanID.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardStealthManageVLanID.setDescription('VLAN ID for the management IP address in Stealth Mode.')
mGuardRouter = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3))
mGuardRouterLocal = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 1))
mGuardRouterLocalIP = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardRouterLocalIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRouterLocalIP.setDescription('The internal IP address of this device in router mode. When set, this value is internally cached inside the agent until it is explicitly activated by writing the mGuardRouterLocalActivate object. When read the currently active setting is returned, not regarding any cached values.')
mGuardRouterLocalNetmask = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardRouterLocalNetmask.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRouterLocalNetmask.setDescription('The internal subnet mask of this device in router mode. When set, this value is internally cached inside the agent until it is explicitly activated by writing the mGuardRouterLocalActivate object. When read the currently active setting is returned, not regarding any cached values.')
mGuardRouterLocalActivate = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("activate", 1), ("valuescached", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardRouterLocalActivate.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRouterLocalActivate.setDescription('Button to activate the router local IP configuration. When activate(1) is written, any cached values for the mGuardRouterLocalIP, mGuardRouterLocalNetmask, and mGuardRouterExternStaticGateway objects are activated. When read and one or more of the above mentioned objects have been cached, valuescached(2) is returned, not regarding whether the cached valued and the current value are different.')
mGuardRouterLocalAliasesTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 1, 4), )
if mibBuilder.loadTexts: mGuardRouterLocalAliasesTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRouterLocalAliasesTable.setDescription('A table containing aliases for the local interface.')
mGuardRouterLocalAliasesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 1, 4, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardLocalAliasIndex"))
if mibBuilder.loadTexts: mGuardRouterLocalAliasesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRouterLocalAliasesEntry.setDescription('An entry containing a single alias for the local interface.')
mGuardLocalAliasIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: mGuardLocalAliasIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardLocalAliasIndex.setDescription('Identifier.')
mGuardLocalAliasIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 1, 4, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardLocalAliasIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardLocalAliasIpAddress.setDescription('IP address.')
mGuardLocalAliasNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 1, 4, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardLocalAliasNetmask.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardLocalAliasNetmask.setDescription('Netmask.')
mGuardLocalAliasRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 1, 4, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardLocalAliasRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardLocalAliasRowStatus.setDescription('RowStatus')
mGuardLocalAliasUseVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardLocalAliasUseVLAN.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardLocalAliasUseVLAN.setDescription('Use VLAn tagging with this Alias interface.')
mGuardLocalAliasVLANid = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 1, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardLocalAliasVLANid.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardLocalAliasVLANid.setDescription('VLAN ID to be used with this Alias.')
mGuardLocalRoutesTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 1, 5), )
if mibBuilder.loadTexts: mGuardLocalRoutesTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardLocalRoutesTable.setDescription('A table containing additional internal routes interface.')
mGuardLocalRoutesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 1, 5, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardLocalRouteIndex"))
if mibBuilder.loadTexts: mGuardLocalRoutesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardLocalRoutesEntry.setDescription('An entry containing a single internal route.')
mGuardLocalRouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: mGuardLocalRouteIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardLocalRouteIndex.setDescription('Identifier.')
mGuardLocalRouteNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 1, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardLocalRouteNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardLocalRouteNetwork.setDescription('Routed network.')
mGuardLocalRouteGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 1, 5, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardLocalRouteGateway.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardLocalRouteGateway.setDescription('Routing gateway.')
mGuardLocalRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 1, 5, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardLocalRouteRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardLocalRouteRowStatus.setDescription('RowStatus')
mGuardRouterLocalDevMTU = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardRouterLocalDevMTU.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRouterLocalDevMTU.setDescription('Set the MTU for the local interface. Router-Mode only.')
mGuardRouterLocalUseVLAN = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardRouterLocalUseVLAN.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRouterLocalUseVLAN.setDescription('Use VLAN for the local interface. Router-Mode only.')
mGuardRouterLocalVlanId = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardRouterLocalVlanId.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRouterLocalVlanId.setDescription('VLAN-ID for the local interface, used only if set to use VLAN. Router-Mode only.')
mGuardRouterLocalDevVlanMTU = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardRouterLocalDevVlanMTU.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRouterLocalDevVlanMTU.setDescription('Set the MTU for the VLAN if enabled on local interface. Router-Mode only.')
mGuardRouterExtern = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 2))
mGuardRouterExternDHCP = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardRouterExternDHCP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRouterExternDHCP.setDescription('When enabled, retrieve the external IP via DHCP, otherwise use the value stored in mGuardRouterExternStaticIP.')
mGuardRouterExternStatic = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 2, 2))
mGuardRouterExternStaticIP = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 2, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardRouterExternStaticIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRouterExternStaticIP.setDescription('The external IP address of this device in router mode (when statically configured). When set, this value is internally cached inside the agent until it is explicitly activated by writing the mGuardRouterExternStaticActivate object. When read the currently active setting is returned, not regarding any cached values.')
mGuardRouterExternStaticNetmask = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 2, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardRouterExternStaticNetmask.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRouterExternStaticNetmask.setDescription('The external netmask of this device in router mode (when statically configured). When set, this value is internally cached inside the agent until it is explicitly activated by writing the mGuardRouterExternStaticActivate object. When read the currently active setting is returned, not regarding any cached values.')
mGuardRouterExternStaticGateway = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 2, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardRouterExternStaticGateway.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRouterExternStaticGateway.setDescription('The (extern) default gateway of this device in router mode (when statically configured). When set, this value is internally cached inside the agent until it is explicitly activated by writing the mGuardRouterExternStaticActivate or mGuardRouterLocalActivate object. When read the currently active setting is returned, not regarding any cached values.')
mGuardRouterExternActivate = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("activate", 1), ("valuescached", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardRouterExternActivate.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRouterExternActivate.setDescription('Button to activate the router extern IP configuration. When activate(1) is written, any cached values for the mGuardRouterExternStaticIP, mGuardRouterExternStaticNetmask, and mGuardRouterExternStaticGateway objects are activated. When read and one or more of the above mentioned objects have been cached, valuescached(2) is returned, not regarding whether the cached valued and the current value are different.')
mGuardRouterExternDevMTU = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardRouterExternDevMTU.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRouterExternDevMTU.setDescription('Set the MTU for the external interface. Router-Mode only.')
mGuardRouterExternUseVLAN = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardRouterExternUseVLAN.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRouterExternUseVLAN.setDescription('Use VLAN for the external interface. Router-Mode only.')
mGuardRouterExternVlanId = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardRouterExternVlanId.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRouterExternVlanId.setDescription('VLAN-ID for the external interface, used only if set to use VLAN. Router-Mode only.')
mGuardRouterExternDevVlanMTU = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 2, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardRouterExternDevVlanMTU.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRouterExternDevVlanMTU.setDescription('Set the MTU for the VLAN if enabled on external interface. Router-Mode only.')
mGuardRouterExternAliasesTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 2, 2, 5), )
if mibBuilder.loadTexts: mGuardRouterExternAliasesTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRouterExternAliasesTable.setDescription('A table containing aliases for the external interface.')
mGuardRouterExternAliasesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 2, 2, 5, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardExternAliasIndex"))
if mibBuilder.loadTexts: mGuardRouterExternAliasesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRouterExternAliasesEntry.setDescription('An entry containing a single alias for the extern interface.')
mGuardExternAliasIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 2, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: mGuardExternAliasIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardExternAliasIndex.setDescription('Identifier.')
mGuardExternAliasIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 2, 2, 5, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardExternAliasIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardExternAliasIpAddress.setDescription('IP address.')
mGuardExternAliasNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 2, 2, 5, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardExternAliasNetmask.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardExternAliasNetmask.setDescription('Netmask.')
mGuardExternAliasRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 2, 2, 5, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardExternAliasRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardExternAliasRowStatus.setDescription('RowStatus')
mGuardExternAliasUseVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 2, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardExternAliasUseVLAN.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardExternAliasUseVLAN.setDescription('Use VLAn tagging with this Alias interface.')
mGuardExternAliasVLANid = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 2, 2, 5, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardExternAliasVLANid.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardExternAliasVLANid.setDescription('VLAN ID to be used with this Alias.')
mGuardExternRoutesTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 2, 2, 6), )
if mibBuilder.loadTexts: mGuardExternRoutesTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardExternRoutesTable.setDescription('A table containing additional external routes.')
mGuardExternRoutesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 2, 2, 6, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardExternRouteIndex"))
if mibBuilder.loadTexts: mGuardExternRoutesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardExternRoutesEntry.setDescription('An entry containing a single external route.')
mGuardExternRouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 2, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: mGuardExternRouteIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardExternRouteIndex.setDescription('Identifier.')
mGuardExternRouteNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 2, 2, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardExternRouteNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardExternRouteNetwork.setDescription('Routed network.')
mGuardExternRouteGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 2, 2, 6, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardExternRouteGateway.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardExternRouteGateway.setDescription('Routing gateway.')
mGuardExternRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 2, 2, 6, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardExternRouteRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardExternRouteRowStatus.setDescription('RowStatus')
mGuardRouterHiDiscovery = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 3))
mGuardRouterHiDiscoveryIntern = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("readwrite", 1), ("disabled", 2), ("readonly", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardRouterHiDiscoveryIntern.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRouterHiDiscoveryIntern.setDescription('Enable HiDiscovery on internal interface in RouterMode.')
mGuardRouterHiDiscoveryExtern = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("readwrite", 1), ("disabled", 2), ("readonly", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardRouterHiDiscoveryExtern.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRouterHiDiscoveryExtern.setDescription('Enable HiDiscovery on external interface in RouterMode.')
mGuardPPPOE = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 3, 4))
mGuardPPPOELogin = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 4, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardPPPOELogin.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardPPPOELogin.setDescription('PPPoE login user name.')
mGuardPPPOEPasswd = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 4, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardPPPOEPasswd.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardPPPOEPasswd.setDescription('PPPoE login password.')
mGuardPPPOEMSS = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 4, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardPPPOEMSS.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardPPPOEMSS.setDescription('The maximum segment size used for PPPoE')
mGuardPPPOEServiceName = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 4, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardPPPOEServiceName.setStatus('obsolete')
if mibBuilder.loadTexts: mGuardPPPOEServiceName.setDescription('The service name used for PPPoE, normally not used!')
mGuardPPPOEAccessConcentName = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 4, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardPPPOEAccessConcentName.setStatus('obsolete')
if mibBuilder.loadTexts: mGuardPPPOEAccessConcentName.setDescription('The access concentrator name used for PPPoE, normally not used!')
mGuardPPPOEHostUnique = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardPPPOEHostUnique.setStatus('obsolete')
if mibBuilder.loadTexts: mGuardPPPOEHostUnique.setDescription("Set 'Host-Unique' tag for discovery, required for operation with several daemons")
mGuardPPPOEpppdOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 3, 4, 7), )
if mibBuilder.loadTexts: mGuardPPPOEpppdOptionsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardPPPOEpppdOptionsTable.setDescription('A table of options set for the pppd process implementing PPPOE.')
mGuardPPPOEpppdOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 3, 4, 7, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardPPPOEpppdOptionsIndex"))
if mibBuilder.loadTexts: mGuardPPPOEpppdOptionsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardPPPOEpppdOptionsEntry.setDescription('A single option set for pppd. ')
mGuardPPPOEpppdOptionsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 4, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: mGuardPPPOEpppdOptionsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardPPPOEpppdOptionsIndex.setDescription('Table index.')
mGuardPPPOEpppdOptionsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 4, 7, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardPPPOEpppdOptionsValue.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardPPPOEpppdOptionsValue.setDescription('The pppd option.')
mGuardPPPOEpppdOptionsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 4, 7, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardPPPOEpppdOptionsRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardPPPOEpppdOptionsRowStatus.setDescription('Row Status')
mGuardDHCP = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5))
mGuardDHCPInt = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 1))
mGuardDHCPExt = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 2))
mGuardDHCPIntStart = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("enabled-relay", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDHCPIntStart.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPIntStart.setDescription('Enable the internal DHCP/DHCP Relay Server ?')
mGuardDHCPIntPoolEnable = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDHCPIntPoolEnable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPIntPoolEnable.setDescription('Enable the dynamic DHCP Pool ?')
mGuardDHCPIntRangeStart = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDHCPIntRangeStart.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPIntRangeStart.setDescription('Start of ip range provided by the builtin DHCP Server for the internal network.')
mGuardDHCPIntRangeEnd = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDHCPIntRangeEnd.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPIntRangeEnd.setDescription('End of ip range provided by the builtin DHCP Server for the internal network.')
mGuardDHCPIntNetmask = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDHCPIntNetmask.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPIntNetmask.setDescription('Netmask provided by the builtin DHCP Server for the internal network.')
mGuardDHCPIntGateway = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDHCPIntGateway.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPIntGateway.setDescription('Default gateway provided by the builtin DHCP Server for the internal network.')
mGuardDHCPIntDnsServer = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDHCPIntDnsServer.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPIntDnsServer.setDescription('DNS Server provided by the builtin DHCP server.')
mGuardDHCPIntStaticTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 1, 8), )
if mibBuilder.loadTexts: mGuardDHCPIntStaticTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPIntStaticTable.setDescription('A table containing static MAC-IP address allocations.')
mGuardDHCPIntStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 1, 8, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardDHCPIntStaticIndex"))
if mibBuilder.loadTexts: mGuardDHCPIntStaticEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPIntStaticEntry.setDescription('An entry containing a single MAC-IP address allocation.')
mGuardDHCPIntStaticIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250)))
if mibBuilder.loadTexts: mGuardDHCPIntStaticIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPIntStaticIndex.setDescription('Index to identify allocation entry.')
mGuardDHCPIntStaticMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 1, 8, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDHCPIntStaticMAC.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPIntStaticMAC.setDescription("The client's MAC address")
mGuardDHCPIntStaticIP = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 1, 8, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDHCPIntStaticIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPIntStaticIP.setDescription('The allocated IP address')
mGuardDHCPIntStaticRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 1, 8, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDHCPIntStaticRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPIntStaticRowStatus.setDescription('RowStatus')
mGuardDHCPIntBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDHCPIntBroadcast.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPIntBroadcast.setDescription('Broadcast address provided by the builtin DHCP server.')
mGuardDHCPIntWINS = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDHCPIntWINS.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPIntWINS.setDescription('WINS provided by the builtin DHCP Server for the internal network.')
mGuardDHCPIntLeaseTime = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDHCPIntLeaseTime.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPIntLeaseTime.setDescription('Lifetime for DHCP Leases')
mGuardDHCPIntRelayServerTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 1, 50), )
if mibBuilder.loadTexts: mGuardDHCPIntRelayServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPIntRelayServerTable.setDescription('List of DHCP Servers to relay to.')
mGuardDHCPIntRelayServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 1, 50, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardDHCPIntRelayServerIndex"))
if mibBuilder.loadTexts: mGuardDHCPIntRelayServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPIntRelayServerEntry.setDescription('An entry containing a DHCP Relay Server IP.')
mGuardDHCPIntRelayServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 1, 50, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: mGuardDHCPIntRelayServerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPIntRelayServerIndex.setDescription('Index to identify relay server entry.')
mGuardDHCPIntRelayServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 1, 50, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDHCPIntRelayServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPIntRelayServerIP.setDescription('The allocated IP address')
mGuardDHCPIntRelayRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 1, 50, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDHCPIntRelayRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPIntRelayRowStatus.setDescription('RowStatus')
mGuardDHCPIntRelayMaxHop = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 1, 51), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDHCPIntRelayMaxHop.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPIntRelayMaxHop.setDescription('Maximal number of Hops when relaying.')
mGuardDHCPIntRelayAppend = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 1, 52), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDHCPIntRelayAppend.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPIntRelayAppend.setDescription('Whether to append DHCP Relay Agent Information.')
mGuardDHCPIntRelayAppendLimit = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 1, 53), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDHCPIntRelayAppendLimit.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPIntRelayAppendLimit.setDescription('When appending DHCP Relay Agent Information would exceed this limit, it is not appended.')
mGuardDHCPIntRelayCircuitInfo = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("if-idx", 2), ("if-name", 3), ("if-mac", 4), ("if-ip", 5), ("sysname", 6), ("text", 7), ("if-prefixed-ip", 8), ("rs2", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDHCPIntRelayCircuitInfo.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPIntRelayCircuitInfo.setDescription('What to append as Circuit ID: none: no Cicuit ID if-idx: the system interface index (1 octet) if-name: the systems interface name (ascii) if-mac: the MAC address (6 octets) if-ip: the IP address (4 octets) sysname: the systems hostname text: a text defined in mGuardDHCPIntRelayCircuitText.0 if-prefixed-ip: prefix IP with 0xA1 Sub Remote ID (2+4 octets) rs2: Hirschmann RS2 Sub Circuit Information')
mGuardDHCPIntRelayCircuitText = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 1, 55), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDHCPIntRelayCircuitText.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPIntRelayCircuitText.setDescription('Text in case mGuardDHCPIntRelayCircuitInfo.0 is set to text(7).')
mGuardDHCPIntRelayRemoteInfo = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("if-idx", 2), ("if-name", 3), ("if-mac", 4), ("if-ip", 5), ("sysname", 6), ("text", 7), ("if-prefixed-ip", 8), ("rs2", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDHCPIntRelayRemoteInfo.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPIntRelayRemoteInfo.setDescription('What to append as Remote ID: none: no Cicuit ID if-idx: the system interface index (1 octet) if-name: the systems interface name (ascii) if-mac: the MAC address (6 octets) if-ip: the IP address (4 octets) sysname: the systems hostname text: a text defined in mGuardDHCPIntRelayRemoteText.0 if-prefixed-ip: prefix IP with 0xA1 Sub Remote ID (2+4 octets) rs2: Hirschmann RS2 Sub Circuit Information')
mGuardDHCPIntRelayRemoteText = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 1, 57), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDHCPIntRelayRemoteText.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPIntRelayRemoteText.setDescription('Text in case mGuardDHCPIntRelayRemoteInfo.0 is set to text(7).')
mGuardDHCPExtStart = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("enabled-relay", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDHCPExtStart.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPExtStart.setDescription('Enable the external DHCP/DHCP Relay Server ?')
mGuardDHCPExtPoolEnable = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDHCPExtPoolEnable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPExtPoolEnable.setDescription('Enable the dynamic DHCP Pool ?')
mGuardDHCPExtRangeStart = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDHCPExtRangeStart.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPExtRangeStart.setDescription('Start of ip range provided by the builtin DHCP Server for the external network.')
mGuardDHCPExtRangeEnd = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDHCPExtRangeEnd.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPExtRangeEnd.setDescription('End of ip range provided by the builtin DHCP Server for the external network.')
mGuardDHCPExtNetmask = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 2, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDHCPExtNetmask.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPExtNetmask.setDescription('Netmask provided by the builtin DHCP Server for the external network.')
mGuardDHCPExtGateway = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 2, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDHCPExtGateway.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPExtGateway.setDescription('Default gateway provided by the builtin DHCP Server for the external network.')
mGuardDHCPExtDnsServer = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 2, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDHCPExtDnsServer.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPExtDnsServer.setDescription('DNS Server provided by the builtin DHCP server.')
mGuardDHCPExtStaticTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 2, 8), )
if mibBuilder.loadTexts: mGuardDHCPExtStaticTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPExtStaticTable.setDescription('A table containing static MAC-IP address allocations.')
mGuardDHCPExtStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 2, 8, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardDHCPExtStaticIndex"))
if mibBuilder.loadTexts: mGuardDHCPExtStaticEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPExtStaticEntry.setDescription('An entry containing a single MAC-IP address allocation.')
mGuardDHCPExtStaticIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250)))
if mibBuilder.loadTexts: mGuardDHCPExtStaticIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPExtStaticIndex.setDescription('Index to identify allocation entry.')
mGuardDHCPExtStaticMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 2, 8, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDHCPExtStaticMAC.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPExtStaticMAC.setDescription("The client's MAC address")
mGuardDHCPExtStaticIP = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 2, 8, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDHCPExtStaticIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPExtStaticIP.setDescription('The allocated IP address')
mGuardDHCPExtStaticRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 2, 8, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDHCPExtStaticRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPExtStaticRowStatus.setDescription('RowStatus')
mGuardDHCPExtBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 2, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDHCPExtBroadcast.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPExtBroadcast.setDescription('Broadcast address provided by the builtin DHCP server.')
mGuardDHCPExtWINS = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 2, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDHCPExtWINS.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPExtWINS.setDescription('WINS provided by the builtin DHCP Server for the external network.')
mGuardDHCPExtLeaseTime = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 2, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDHCPExtLeaseTime.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPExtLeaseTime.setDescription('Lifetime for DHCP Leases')
mGuardDHCPExtRelayServerTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 2, 50), )
if mibBuilder.loadTexts: mGuardDHCPExtRelayServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPExtRelayServerTable.setDescription('List of DHCP Servers to relay to.')
mGuardDHCPExtRelayServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 2, 50, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardDHCPExtRelayServerIndex"))
if mibBuilder.loadTexts: mGuardDHCPExtRelayServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPExtRelayServerEntry.setDescription('An entry containing a DHCP Relay Server IP.')
mGuardDHCPExtRelayServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 2, 50, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: mGuardDHCPExtRelayServerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPExtRelayServerIndex.setDescription('Index to identify relay server entry.')
mGuardDHCPExtRelayServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 2, 50, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDHCPExtRelayServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPExtRelayServerIP.setDescription('The allocated IP address')
mGuardDHCPExtRelayRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 2, 50, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDHCPExtRelayRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPExtRelayRowStatus.setDescription('RowStatus')
mGuardDHCPExtRelayMaxHop = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 2, 51), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDHCPExtRelayMaxHop.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPExtRelayMaxHop.setDescription('Maximal number of Hops when relaying.')
mGuardDHCPExtRelayAppend = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 2, 52), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDHCPExtRelayAppend.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPExtRelayAppend.setDescription('Whether to append DHCP Relay Agent Information.')
mGuardDHCPExtRelayAppendLimit = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 2, 53), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDHCPExtRelayAppendLimit.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPExtRelayAppendLimit.setDescription('When appending DHCP Relay Agent Information would exceed this limit, it is not appended.')
mGuardDHCPExtRelayCircuitInfo = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 2, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("if-idx", 2), ("if-name", 3), ("if-mac", 4), ("if-ip", 5), ("sysname", 6), ("text", 7), ("if-prefixed-ip", 8), ("rs2", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDHCPExtRelayCircuitInfo.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPExtRelayCircuitInfo.setDescription('What to append as Circuit ID: none: no Cicuit ID if-idx: the system interface index (1 octet) if-name: the systems interface name (ascii) if-mac: the MAC address (6 octets) if-ip: the IP address (4 octets) sysname: the systems hostname text: a text defined in mGuardDHCPExtRelayCircuitText.0 if-prefixed-ip: prefix IP with 0xA1 Sub Remote ID (2+4 octets) rs2: Hirschmann RS2 Sub Circuit Information')
mGuardDHCPExtRelayCircuitText = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 2, 55), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDHCPExtRelayCircuitText.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPExtRelayCircuitText.setDescription('Text in case mGuardDHCPExtRelayCircuitInfo.0 is set to text(7).')
mGuardDHCPExtRelayRemoteInfo = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 2, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 1), ("if-idx", 2), ("if-name", 3), ("if-mac", 4), ("if-ip", 5), ("sysname", 6), ("text", 7), ("if-prefixed-ip", 8), ("rs2", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDHCPExtRelayRemoteInfo.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPExtRelayRemoteInfo.setDescription('What to append as Remote ID: none: no Cicuit ID if-idx: the system interface index (1 octet) if-name: the systems interface name (ascii) if-mac: the MAC address (6 octets) if-ip: the IP address (4 octets) sysname: the systems hostname text: a text defined in mGuardDHCPExtRelayRemoteText.0 if-prefixed-ip: prefix IP with 0xA1 Sub Remote ID (2+4 octets) rs2: Hirschmann RS2 Sub Circuit Information')
mGuardDHCPExtRelayRemoteText = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 5, 2, 57), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDHCPExtRelayRemoteText.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPExtRelayRemoteText.setDescription('Text in case mGuardDHCPExtRelayRemoteInfo.0 is set to text(7).')
mGuardDNS = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 3, 6))
mGuardDNSSearchPath = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 6, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDNSSearchPath.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDNSSearchPath.setDescription('Domain search path.')
mGuardDNSServerType = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("root", 1), ("provider", 2), ("user", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDNSServerType.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDNSServerType.setDescription('Type of DNS Servers to query: root: DNS root servers provider: Provider defined DNS Servers (via DHCP,PPPOE) user: User defined DNS Servers')
mGuardDNSUserDefinedServerTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 3, 6, 3), )
if mibBuilder.loadTexts: mGuardDNSUserDefinedServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDNSUserDefinedServerTable.setDescription(' A table containing user defined DNS Servers')
mGuardDNSUserDefinedServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 3, 6, 3, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuarddnsServerIndex"))
if mibBuilder.loadTexts: mGuardDNSUserDefinedServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDNSUserDefinedServerEntry.setDescription('A mGuardDNSServer entry.')
mGuarddnsServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: mGuarddnsServerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuarddnsServerIndex.setDescription('Index to identify DNS Server entry.')
mGuarddnsServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 6, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuarddnsServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuarddnsServerIP.setDescription('DNS Server IP address.')
mGuarddnsServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 6, 3, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuarddnsServerRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuarddnsServerRowStatus.setDescription('RowStatus')
mGuardDNSCacheEnabled = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardDNSCacheEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDNSCacheEnabled.setDescription('Enable or disable built-in DNS cache feature')
mGuardNetworkStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 3, 7))
mGuardNetworkStatMode = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 7, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardNetworkStatMode.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardNetworkStatMode.setDescription('Current network mode of this device.')
mGuardNetworkStatExtIP = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 7, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardNetworkStatExtIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardNetworkStatExtIP.setDescription('external IP address of this device.')
mGuardNetworkStatGateway = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 7, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardNetworkStatGateway.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardNetworkStatGateway.setDescription('Default gateway via the external IP address.')
mGuardNetworkStatVPN = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 7, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardNetworkStatVPN.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardNetworkStatVPN.setDescription('Statistics about the VPN connections (total/used/up).')
mGuardNetworkStatDynIPReg = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 7, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardNetworkStatDynIPReg.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardNetworkStatDynIPReg.setDescription('Statistics about VPN DynIP registration.')
mGuardNetworkStatHTTPSRemAccess = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 7, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardNetworkStatHTTPSRemAccess.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardNetworkStatHTTPSRemAccess.setDescription('Status of HTTPS remote access (yes/no).')
mGuardNetworkStatSSHRemoteAccess = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 7, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardNetworkStatSSHRemoteAccess.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardNetworkStatSSHRemoteAccess.setDescription('Status of SSH remote access (yes/no).')
mGuardNetworkSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 7, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardNetworkSoftwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardNetworkSoftwareVersion.setDescription('Current software version.')
mGuardNetworkStatUptime = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 7, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardNetworkStatUptime.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardNetworkStatUptime.setDescription('Uptime.')
mGuardNetworkStatLanguage = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 7, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardNetworkStatLanguage.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardNetworkStatLanguage.setDescription('GAI Language.')
mGuardHostname = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardHostname.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardHostname.setDescription('The hostname of this system')
mGuardHostnameMode = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("userDefined", 1), ("providerDefined", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardHostnameMode.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardHostnameMode.setDescription('Hostname mode: 1: defined by mGuardHostname, 2: provider defined (e.g. DHCP) ')
mGuardPPTP = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 3, 10))
mGuardPPTPLogin = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 10, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardPPTPLogin.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardPPTPLogin.setDescription('PPTP login')
mGuardPPTPassword = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 10, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardPPTPassword.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardPPTPassword.setDescription('PPTP password')
mGuardPPTPLocalIPMode = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dhcp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardPPTPLocalIPMode.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardPPTPLocalIPMode.setDescription('When set to static will use the value from mGuardPPTPLocalIP on it external interface connecting to the PPTP server/modem. Otherwise it it use DHCP.')
mGuardPPTPLocalIP = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 10, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardPPTPLocalIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardPPTPLocalIP.setDescription('The external IP of this system when connecting to the PPTP server/modem when mGuardPPTPLocalIPMode is set to static.')
mGuardPPTPModemIP = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 10, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardPPTPModemIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardPPTPModemIP.setDescription('The IP of the PPTP server/modem.')
mGuardPPTPpppdOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 3, 10, 6), )
if mibBuilder.loadTexts: mGuardPPTPpppdOptionsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardPPTPpppdOptionsTable.setDescription('A table of options set for the pppd process implementing PPTP.')
mGuardPPTPpppdOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 3, 10, 6, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardPPTPpppdOptionsIndex"))
if mibBuilder.loadTexts: mGuardPPTPpppdOptionsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardPPTPpppdOptionsEntry.setDescription('A single option set for pppd. ')
mGuardPPTPpppdOptionsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 10, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: mGuardPPTPpppdOptionsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardPPTPpppdOptionsIndex.setDescription('Table index.')
mGuardPPTPpppdOptionsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 10, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardPPTPpppdOptionsValue.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardPPTPpppdOptionsValue.setDescription('The pppd option.')
mGuardPPTPpppdOptionsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 10, 6, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardPPTPpppdOptionsRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardPPTPpppdOptionsRowStatus.setDescription('Row Status')
mGuardSerial = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 3, 11))
mGuardSerialBaud = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSerialBaud.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSerialBaud.setDescription('Baudrate for the serial line. Possible values are 9600, 19200, 38400, 57600')
mGuardSerialHWHandshakeEnable = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSerialHWHandshakeEnable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSerialHWHandshakeEnable.setDescription('Enable hardware handshake')
mGuardSerialPPP = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 3, 11, 3))
mGuardSerialPPPEnable = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 11, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSerialPPPEnable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSerialPPPEnable.setDescription('Enable PPP')
mGuardSerialPPPLogin = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 11, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSerialPPPLogin.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSerialPPPLogin.setDescription('Login for Serial PPP.')
mGuardSerialPPPPasswd = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 11, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSerialPPPPasswd.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSerialPPPPasswd.setDescription('Password for Serial PPP.')
mGuardSerialPPPLocalIP = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 11, 3, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSerialPPPLocalIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSerialPPPLocalIP.setDescription('Local IP address for PPP.')
mGuardSerialPPPRemoteIP = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 11, 3, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSerialPPPRemoteIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSerialPPPRemoteIP.setDescription('Remote IP address for PPP.')
mGuardSerialPPPFWIN = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 3, 11, 3, 6))
mGuardSerialPPPFWINTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 3, 11, 3, 6, 1), )
if mibBuilder.loadTexts: mGuardSerialPPPFWINTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSerialPPPFWINTable.setDescription('A table containing firewall rules for incoming packets.')
mGuardSerialPPPFWINEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 3, 11, 3, 6, 1, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardFWINruleIndex"))
if mibBuilder.loadTexts: mGuardSerialPPPFWINEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSerialPPPFWINEntry.setDescription('An entry containing data of a single rule.')
mGuardSerialPPPFWINruleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 11, 3, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250)))
if mibBuilder.loadTexts: mGuardSerialPPPFWINruleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSerialPPPFWINruleIndex.setDescription('Index to identify the rule.')
mGuardSerialPPPFWINsourceIP = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 11, 3, 6, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSerialPPPFWINsourceIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSerialPPPFWINsourceIP.setDescription("The rule's source IP address")
mGuardSerialPPPFWINdestinationIP = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 11, 3, 6, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSerialPPPFWINdestinationIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSerialPPPFWINdestinationIP.setDescription("The rule's source IP address")
mGuardSerialPPPFWINsport = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 11, 3, 6, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSerialPPPFWINsport.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSerialPPPFWINsport.setDescription("The rule's source port")
mGuardSerialPPPFWINdport = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 11, 3, 6, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSerialPPPFWINdport.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSerialPPPFWINdport.setDescription("The rule's destination port")
mGuardSerialPPPFWINtarget = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 11, 3, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("accept", 1), ("reject", 2), ("drop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSerialPPPFWINtarget.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSerialPPPFWINtarget.setDescription("The rule's target")
mGuardSerialPPPFWINproto = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 11, 3, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2), ("icmp", 3), ("all", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSerialPPPFWINproto.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSerialPPPFWINproto.setDescription("The rule's protocol")
mGuardSerialPPPFWINlog = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 11, 3, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSerialPPPFWINlog.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSerialPPPFWINlog.setDescription('Log packets matching this rule ?')
mGuardSerialPPPFWINRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 11, 3, 6, 1, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSerialPPPFWINRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSerialPPPFWINRowStatus.setDescription('RowStatus')
mGuardSerialPPPFWINcomment = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 11, 3, 6, 1, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSerialPPPFWINcomment.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSerialPPPFWINcomment.setDescription('Commentary or name for this rule.')
mGuardSerialPPPFWINLogDefault = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 11, 3, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSerialPPPFWINLogDefault.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSerialPPPFWINLogDefault.setDescription('Log entries for undefined incoming connection attemps.')
mGuardSerialPPPFWOUT = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 3, 11, 3, 7))
mGuardSerialPPPFWOUTTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 3, 11, 3, 7, 1), )
if mibBuilder.loadTexts: mGuardSerialPPPFWOUTTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSerialPPPFWOUTTable.setDescription('A table containing firewall rules for incoming packets.')
mGuardSerialPPPFWOUTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 3, 11, 3, 7, 1, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardSerialPPPFWOUTruleIndex"))
if mibBuilder.loadTexts: mGuardSerialPPPFWOUTEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSerialPPPFWOUTEntry.setDescription('An entry containing data of a single rule.')
mGuardSerialPPPFWOUTruleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 11, 3, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250)))
if mibBuilder.loadTexts: mGuardSerialPPPFWOUTruleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSerialPPPFWOUTruleIndex.setDescription('Index to identify the rule.')
mGuardSerialPPPFWOUTsourceIP = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 11, 3, 7, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSerialPPPFWOUTsourceIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSerialPPPFWOUTsourceIP.setDescription("The rule's source IP address")
mGuardSerialPPPFWOUTtargetIP = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 11, 3, 7, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSerialPPPFWOUTtargetIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSerialPPPFWOUTtargetIP.setDescription("The rule's source IP address")
mGuardSerialPPPFWOUTsport = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 11, 3, 7, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSerialPPPFWOUTsport.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSerialPPPFWOUTsport.setDescription("The rule's source port")
mGuardSerialPPPFWOUTdport = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 11, 3, 7, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSerialPPPFWOUTdport.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSerialPPPFWOUTdport.setDescription("The rule's destination port")
mGuardSerialPPPFWOUTtarget = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 11, 3, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("accept", 1), ("reject", 2), ("drop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSerialPPPFWOUTtarget.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSerialPPPFWOUTtarget.setDescription("The rule's target")
mGuardSerialPPPFWOUTproto = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 11, 3, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tcp", 1), ("udp", 2), ("icmp", 3), ("all", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSerialPPPFWOUTproto.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSerialPPPFWOUTproto.setDescription("The rule's protocol")
mGuardSerialPPPFWOUTlog = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 11, 3, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSerialPPPFWOUTlog.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSerialPPPFWOUTlog.setDescription('Log packets matching this rule ?')
mGuardSerialPPPFWOUTRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 11, 3, 7, 1, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSerialPPPFWOUTRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSerialPPPFWOUTRowStatus.setDescription('RowStatus')
mGuardSerialPPPFWOUTcomment = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 3, 11, 3, 7, 1, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSerialPPPFWOUTcomment.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSerialPPPFWOUTcomment.setDescription('Commentary or name for this rule.')
mGuardSerialPPPFWOUTLogDefault = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 11, 3, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSerialPPPFWOUTLogDefault.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSerialPPPFWOUTLogDefault.setDescription('Log entries for unknown outgoing connection attemps ?')
mGuardArpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 3, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardArpTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardArpTimeout.setDescription('Global ARP timeout in seconds.')
mGuardPasswords = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 4, 1))
mGuardRootPassword = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 4, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardRootPassword.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRootPassword.setDescription('Object to change the root password. Change by setting: <old root password> <new root password>')
mGuardAdminPassword = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardAdminPassword.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardAdminPassword.setDescription('Object to change the admin password.')
mGuardUserPassword = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardUserPassword.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardUserPassword.setDescription('Object to change the user password.')
mGuardUserPwdEnable = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardUserPwdEnable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardUserPwdEnable.setDescription('Enable user password ? yes,no')
mGuardHTTPSRemoteAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 4, 2))
mGuardHTTPSRemoteEnable = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 4, 2, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardHTTPSRemoteEnable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardHTTPSRemoteEnable.setDescription(' Value to control HTTPS remote access: yes: enabled no: disabled')
mGuardHTTPSRemotePort = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 4, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardHTTPSRemotePort.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardHTTPSRemotePort.setDescription('Port for HTTPS remote Access (regularly 443), service names allowed.')
mGuardHTTPSRemoteFWRuleTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 4, 2, 3), )
if mibBuilder.loadTexts: mGuardHTTPSRemoteFWRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardHTTPSRemoteFWRuleTable.setDescription('A table containing firewall rules to allow HTTPS remote access.')
mGuardHTTPSRemoteFWRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 4, 2, 3, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardHTTPSFWruleIndex"))
if mibBuilder.loadTexts: mGuardHTTPSRemoteFWRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardHTTPSRemoteFWRuleEntry.setDescription('An entry containing a single firewall rule to allow HTTPS remote access.')
mGuardHTTPSFWruleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 4, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: mGuardHTTPSFWruleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardHTTPSFWruleIndex.setDescription('Index to identify rule.')
mGuardHTTPSFWsourceIP = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 4, 2, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardHTTPSFWsourceIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardHTTPSFWsourceIP.setDescription("The rule's source IP address ")
mGuardHTTPSFWinterface = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 4, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("extern", 1), ("intern", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardHTTPSFWinterface.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardHTTPSFWinterface.setDescription('The network interface the rule belongs to (extern/intern).')
mGuardHTTPSFWtarget = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 4, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("accept", 1), ("reject", 2), ("drop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardHTTPSFWtarget.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardHTTPSFWtarget.setDescription('The target of the rule (accept,reject,drop).')
mGuardHTTPSFWlog = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 4, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardHTTPSFWlog.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardHTTPSFWlog.setDescription(' Log packets matching this rule ?')
mGuardHTTPSFWRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 4, 2, 3, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardHTTPSFWRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardHTTPSFWRowStatus.setDescription('RowStatus')
mGuardHTTPSFWcomment = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 4, 2, 3, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardHTTPSFWcomment.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardHTTPSFWcomment.setDescription('Commentary or name for this rule.')
mGuardSSHRemoteAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 4, 3))
mGuardSSHRemoteEnable = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 4, 3, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSSHRemoteEnable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSSHRemoteEnable.setDescription(' Value to control SSH remote access: yes: enabled no: disabled')
mGuardSSHRemotePort = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 4, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSSHRemotePort.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSSHRemotePort.setDescription('Port for SSH remote Access (regularly 22), service names allowed.')
mGuardSSHRemoteFWRuleTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 4, 3, 3), )
if mibBuilder.loadTexts: mGuardSSHRemoteFWRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSSHRemoteFWRuleTable.setDescription('A table containing firewall rules to allow SSH remote access.')
mGuardSSHRemoteFWRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 4, 3, 3, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardSSHFWruleIndex"))
if mibBuilder.loadTexts: mGuardSSHRemoteFWRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSSHRemoteFWRuleEntry.setDescription('An entry containing a single firewall rule to allow SSH remote access.')
mGuardSSHFWruleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 4, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: mGuardSSHFWruleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSSHFWruleIndex.setDescription('Index to identify rule.')
mGuardSSHFWsourceIP = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 4, 3, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSSHFWsourceIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSSHFWsourceIP.setDescription("The rule's source IP address ")
mGuardSSHFWinterface = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 4, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("extern", 1), ("intern", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSSHFWinterface.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSSHFWinterface.setDescription('The network interface the rule belongs to (extern/intern).')
mGuardSSHFWtarget = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 4, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("accept", 1), ("reject", 2), ("drop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSSHFWtarget.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSSHFWtarget.setDescription('The target of the rule (accept/reject/drop).')
mGuardSSHFWlog = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 4, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSSHFWlog.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSSHFWlog.setDescription(' Log packets matching this rule ?')
mGuardSSHFWRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 4, 3, 3, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSSHFWRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSSHFWRowStatus.setDescription('RowStatus')
mGuardSSHFWcomment = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 4, 3, 3, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSSHFWcomment.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSSHFWcomment.setDescription('Commentary or name for this rule.')
mGuardWebInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 4, 4))
mGuardWebInterfaceLanguage = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 4, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("automatic", 1), ("english", 2), ("german", 3), ("japanese", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardWebInterfaceLanguage.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardWebInterfaceLanguage.setDescription('The language used in the web interface.')
mGuardWebInterfaceSessionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 4, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardWebInterfaceSessionTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardWebInterfaceSessionTimeout.setDescription('The session timeout of the web interface in seconds. If no changes are submitted for the specified time, the session is terminated and it will be necessary to log in again before further use of the web interface.')
mGuardWebInterfaceApplyButtonScope = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 4, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("page", 1), ("session", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardWebInterfaceApplyButtonScope.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardWebInterfaceApplyButtonScope.setDescription('The scope of the Apply button in the web interface.')
mGuardSysProduct = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 51001, 51002, 51003, 51011, 51012, 51013, 51020, 51021, 51030, 51031, 51032, 51033, 51040, 51044, 51052, 51053, 51060, 51062, 51063))).clone(namedValues=NamedValues(("unknown", 1), ("mGuard-smart-pr", 51001), ("mGuard-core-266", 51002), ("mGuard-smart-gw-266", 51003), ("mGuard-smart-enxl", 51011), ("mGuard-core-533", 51012), ("mGuard-smart-gw-533", 51013), ("mGuard-smart", 51020), ("mGuard-smart-en", 51021), ("mGuard-pci", 51030), ("mGuard-pci-pr", 51031), ("mGuard-pci-en", 51032), ("mGuard-pci-enxl", 51033), ("mGuard-industrial-enfw", 51040), ("mGuard-industrial-enxl", 51044), ("mGuard-blade-en", 51052), ("mGuard-blade-enxl", 51053), ("mGuard-delta", 51060), ("mGuard-delta-en", 51062), ("mGuard-delta-enxl", 51063)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardSysProduct.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSysProduct.setDescription('Manufacturer-defined product identifier.')
mGuardHardwareInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 4, 5))
mGuardHardware = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 4, 5, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardHardware.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardHardware.setDescription('The hardware of the mGuard.')
mGuardCPU = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 4, 5, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardCPU.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardCPU.setDescription('The CPU name.')
mGuardCPUFamily = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 4, 5, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardCPUFamily.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardCPUFamily.setDescription('The CPU family.')
mGuardCPUStepping = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 4, 5, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardCPUStepping.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardCPUStepping.setDescription('The CPU stepping.')
mGuardCPUSpeed = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 4, 5, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardCPUSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardCPUSpeed.setDescription('The CPU speed in MHz.')
mGuardSystemTemperature = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 4, 5, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardSystemTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSystemTemperature.setDescription('The current system temperature (in degrees Celsius).')
mGuardUptime = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 4, 5, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardUptime.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardUptime.setDescription('The system uptime.')
mGuardUSMem = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 4, 5, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardUSMem.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardUSMem.setDescription('The userspace memory.')
mGuardMAC1 = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 4, 5, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardMAC1.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardMAC1.setDescription('The MAC address of the first network interface.')
mGuardMAC2 = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 4, 5, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardMAC2.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardMAC2.setDescription('The MAC address of the second network interface.')
mGuardMAC3 = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 4, 5, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardMAC3.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardMAC3.setDescription('The MAC address of the third network interface.')
mGuardSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 4, 5, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSerialNumber.setDescription("The system's serial number .")
mGuardVerParSet = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 4, 5, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardVerParSet.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVerParSet.setDescription('The parameterset version.')
mGuardProductName = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 4, 5, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardProductName.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardProductName.setDescription('The product name.')
mGuardOEMName = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 4, 5, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardOEMName.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardOEMName.setDescription('The name of the OEM.')
mGuardOEMSerial = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 4, 5, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardOEMSerial.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardOEMSerial.setDescription('The OEM serial number .')
mGuardManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 4, 5, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardManufacturer.setDescription('The system manufacturer.')
mGuardManuDate = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 4, 5, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardManuDate.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardManuDate.setDescription('Date of manufacturing.')
mGuardBootLoader = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 4, 5, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardBootLoader.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardBootLoader.setDescription('The bootloader used at production .')
mGuardHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 4, 5, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardHardwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardHardwareVersion.setDescription('The hardware version.')
mGuardRescueSystem = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 4, 5, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardRescueSystem.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRescueSystem.setDescription('The rescue system used at production .')
mGuardProdSoft = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 4, 5, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardProdSoft.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardProdSoft.setDescription('The software used at production .')
mGuardVersions = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 4, 7))
mGuardVersion = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 4, 7, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardVersion.setDescription('The current version.')
mGuardBaseVersion = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 4, 7, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardBaseVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardBaseVersion.setDescription('The base version.')
mGuardUpdates = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 4, 7, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardUpdates.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardUpdates.setDescription('Performed updates.')
mGuardPackageVersionTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 4, 7, 4), )
if mibBuilder.loadTexts: mGuardPackageVersionTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardPackageVersionTable.setDescription('Package descriptions.')
mGuardPackageVersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 4, 7, 4, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardPkgIndex"))
if mibBuilder.loadTexts: mGuardPackageVersionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardPackageVersionEntry.setDescription('Description of a single package.')
mGuardPkgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 4, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250)))
if mibBuilder.loadTexts: mGuardPkgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardPkgIndex.setDescription('Index to identify package.')
mGuardPkgName = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 4, 7, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardPkgName.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardPkgName.setDescription('Package name.')
mGuardPkgVerNum = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 4, 7, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardPkgVerNum.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardPkgVerNum.setDescription('Package version number.')
mGuardPkgVerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 4, 7, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardPkgVerVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardPkgVerVersion.setDescription('Package version.')
mGuardPkgVerFlavour = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 4, 7, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardPkgVerFlavour.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardPkgVerFlavour.setDescription('Package flavour.')
mGuardAction = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reboot", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardAction.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardAction.setDescription('If set to 1, the system reboots.')
mGuardSNMPenableV3 = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSNMPenableV3.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSNMPenableV3.setDescription('Should SNMPv3 be enabled ?')
mGuardSNMPenableV1 = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSNMPenableV1.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSNMPenableV1.setDescription('Should SNMPv1 be enabled ?')
mGuardSNMPport = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 5, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSNMPport.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSNMPport.setDescription('The port the snmp agent listens to.')
mGuardSNMPv1ROCommunity = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 5, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSNMPv1ROCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSNMPv1ROCommunity.setDescription('Read-only community string for SNMPv1.')
mGuardSNMPv1RWCommunity = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 5, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSNMPv1RWCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSNMPv1RWCommunity.setDescription('Read-write community string for SNMPv1.')
mGuardSNMPFWRuleTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 5, 6), )
if mibBuilder.loadTexts: mGuardSNMPFWRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSNMPFWRuleTable.setDescription('A table containing firewall rules to allow SNMP access.')
mGuardSNMPFWRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 5, 6, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardSNMPFWruleIndex"))
if mibBuilder.loadTexts: mGuardSNMPFWRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSNMPFWRuleEntry.setDescription('An entry containing a single firewall rule to allow SNMP access.')
mGuardSNMPFWruleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 5, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: mGuardSNMPFWruleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSNMPFWruleIndex.setDescription('Index to identify rule.')
mGuardSNMPFWsourceIP = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 5, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSNMPFWsourceIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSNMPFWsourceIP.setDescription("The rule's source IP address ")
mGuardSNMPFWinterface = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 5, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("extern", 1), ("intern", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSNMPFWinterface.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSNMPFWinterface.setDescription('The network interface the rule belongs to (extern/intern).')
mGuardSNMPFWtarget = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 5, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("accept", 1), ("reject", 2), ("drop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSNMPFWtarget.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSNMPFWtarget.setDescription('The target of the rule (accept/reject/drop).')
mGuardSNMPFWlog = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 5, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSNMPFWlog.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSNMPFWlog.setDescription(' Log packets matching this rule ?')
mGuardSNMPFWRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 5, 6, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSNMPFWRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSNMPFWRowStatus.setDescription('RowStatus')
mGuardSNMPFWcomment = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 5, 6, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSNMPFWcomment.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSNMPFWcomment.setDescription('Commentary or name for this rule.')
mGuardSNMPTrapReceiverTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 5, 7), )
if mibBuilder.loadTexts: mGuardSNMPTrapReceiverTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSNMPTrapReceiverTable.setDescription('Trap messages are sent across a network to an SNMP Network Manager. These messages alert the manager to events occurring within the security gateway or on the network. Up to six simultaneous trap receivers are supported.')
mGuardSNMPTrapReceiverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 5, 7, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardSNMPTrapReceiverIndex"))
if mibBuilder.loadTexts: mGuardSNMPTrapReceiverEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSNMPTrapReceiverEntry.setDescription("Security gateway's Snmp Trap Receiver Config entry")
mGuardSNMPTrapReceiverIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 5, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: mGuardSNMPTrapReceiverIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSNMPTrapReceiverIndex.setDescription("The security gateway's Snmp Trap Receiver Index")
mGuardSNMPTrapReceiverCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 5, 7, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSNMPTrapReceiverCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSNMPTrapReceiverCommunity.setDescription("The security gateway's Snmp Trap Receiver Community Name. This is the SNMP community name of the remote network manager; the name can be up to 16 characters (????), and is case-sensitive.")
mGuardSNMPTrapReceiverIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 5, 7, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSNMPTrapReceiverIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSNMPTrapReceiverIPAddress.setDescription('IP Address - Each IP address parameter is four integer numbers. The numbers range from 0 to 255.')
mGuardSNMPTrapReceiverName = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 5, 7, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSNMPTrapReceiverName.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSNMPTrapReceiverName.setDescription('The name of this Trap Receiver entry ')
mGuardSNMPTrapReceiverRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 5, 7, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSNMPTrapReceiverRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSNMPTrapReceiverRowStatus.setDescription("The security gateway's Snmp Trap Reciever Row Status.")
mGuardSNMPTrapConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 5, 8))
mGuardSNMPAuthenticationTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 5, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSNMPAuthenticationTrapFlag.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSNMPAuthenticationTrapFlag.setDescription('Authentication Flag - Enable/Disable SNMP authentication trap.')
mGuardSNMPLinkUpDownTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 5, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSNMPLinkUpDownTrapFlag.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSNMPLinkUpDownTrapFlag.setDescription('Link Up/Down Flag - Enable/Disable Link Up/Link Down traps for the entire security gateway.')
mGuardSNMPColdStartTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 5, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSNMPColdStartTrapFlag.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSNMPColdStartTrapFlag.setDescription('ColdStart Flag - Enable/Disable SNMP coldstart trap.')
mGuardSNMPTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 5, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSNMPTrapFlag.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSNMPTrapFlag.setDescription('Enables/Disables the traps with enterprise = mGuardb.')
mGuardSNMPChassisTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 5, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSNMPChassisTrapFlag.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSNMPChassisTrapFlag.setDescription('Enables/Disables the traps with enterprise = hmChassis.')
mGuardSNMPAgentTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 5, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSNMPAgentTrapFlag.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSNMPAgentTrapFlag.setDescription('Enables/Disables the traps with enterprise = hmAgent.')
mGuardSNMPAvFailTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 5, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSNMPAvFailTrapFlag.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSNMPAvFailTrapFlag.setDescription('Enables/Disables the traps with AntiVirus failures (update or engine failures).')
mGuardSNMPAvInfoTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 5, 8, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSNMPAvInfoTrapFlag.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSNMPAvInfoTrapFlag.setDescription('Enables/Disables the traps with informational AntiVirus messages.')
mGuardSNMPBladeStateTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 5, 8, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSNMPBladeStateTrapFlag.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSNMPBladeStateTrapFlag.setDescription('Enables/Disables traps sent at blade status change.')
mGuardSNMPBladeConfigTrapFlag = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 5, 8, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSNMPBladeConfigTrapFlag.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSNMPBladeConfigTrapFlag.setDescription('Enables/Disables traps sent at automatic blade configuration or backup.')
mGuardSNMPRouterRedundancyStatusFlag = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 5, 8, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardSNMPRouterRedundancyStatusFlag.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSNMPRouterRedundancyStatusFlag.setDescription('Enables/Disables traps sent at change of HA state.')
mGuardNTPactivate = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardNTPactivate.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardNTPactivate.setDescription('Activate NTP ?')
mGuardNTPtimestamp = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardNTPtimestamp.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardNTPtimestamp.setDescription('Time stamp in filesystem ?')
mGuardNTPServerTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 6, 3), )
if mibBuilder.loadTexts: mGuardNTPServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardNTPServerTable.setDescription('A table of NTP Servers.')
mGuardNTPTimezone = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 6, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardNTPTimezone.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardNTPTimezone.setDescription('Timezone in POSIX.1 notation')
mGuardNTPStatus = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 6, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardNTPStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardNTPStatus.setDescription('NTP state')
mGuardNTPServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 6, 3, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardNTPServerIndex"))
if mibBuilder.loadTexts: mGuardNTPServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardNTPServerEntry.setDescription('A single NTP Server.')
mGuardNTPServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: mGuardNTPServerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardNTPServerIndex.setDescription('Table index')
mGuardNTPServerHost = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 6, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardNTPServerHost.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardNTPServerHost.setDescription('Hostname or IP address of the NTP Server.')
mGuardNTPServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 6, 3, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardNTPServerRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardNTPServerRowStatus.setDescription('Row status')
mGuardUpdateServerTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 7, 1), )
if mibBuilder.loadTexts: mGuardUpdateServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardUpdateServerTable.setDescription('A table of update server repositories.')
mGuardUpdateServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 7, 1, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardUpdateServerIndex"))
if mibBuilder.loadTexts: mGuardUpdateServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardUpdateServerEntry.setDescription('A single update server repository. ')
mGuardUpdateServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: mGuardUpdateServerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardUpdateServerIndex.setDescription('Table index.')
mGuardUpdateServer = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 7, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardUpdateServer.setStatus('deprecated')
if mibBuilder.loadTexts: mGuardUpdateServer.setDescription('URL of the update server.')
mGuardUpdateServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 7, 1, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardUpdateServerRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardUpdateServerRowStatus.setDescription('Row Status')
mGuardUpdateServerProto = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 7, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardUpdateServerProto.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardUpdateServerProto.setDescription('Protocol, either https or http')
mGuardUpdateServerHost = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 7, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardUpdateServerHost.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardUpdateServerHost.setDescription('Hostname of the update server.')
mGuardUpdateServerLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 7, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardUpdateServerLogin.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardUpdateServerLogin.setDescription('Login on the update server.')
mGuardUpdateServerPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 7, 1, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardUpdateServerPassword.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardUpdateServerPassword.setDescription('Password on the update server.')
mGuardSNMPError = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardSNMPError.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardSNMPError.setDescription('Field, providing textual description of errors caused by SNMP operations.')
mGuardRouterRedundancy = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 9, 2))
mGuardRouterRedundancyEnable = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 9, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardRouterRedundancyEnable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRouterRedundancyEnable.setDescription('Enable Router Redundancy.')
mGuardRouterRedundancyTrack = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 9, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardRouterRedundancyTrack.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRouterRedundancyTrack.setDescription('Run ICMP checks against redundancy peer.')
mGuardRouterRedundancyInternalID = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 9, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardRouterRedundancyInternalID.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRouterRedundancyInternalID.setDescription('Internal ID of the virtual router.')
mGuardRouterRedundancyExternalID = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 9, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardRouterRedundancyExternalID.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRouterRedundancyExternalID.setDescription('External ID of the virtual router.')
mGuardRouterRedundancyPassword = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 9, 2, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardRouterRedundancyPassword.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRouterRedundancyPassword.setDescription('Passwort for synchronization between the virtual router peers.')
mGuardRouterRedundancyPeerIntern = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 9, 2, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardRouterRedundancyPeerIntern.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRouterRedundancyPeerIntern.setDescription('Internal IP of the VR peer.')
mGuardRouterRedundancyPeerExtern = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 9, 2, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardRouterRedundancyPeerExtern.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRouterRedundancyPeerExtern.setDescription('External IP of the VR peer.')
mGuardRouterRedundancyPriority = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 9, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardRouterRedundancyPriority.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRouterRedundancyPriority.setDescription('Priority for the virtual router.')
mGuardRouterRedundancyVirtIpInt = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 9, 2, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardRouterRedundancyVirtIpInt.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRouterRedundancyVirtIpInt.setDescription('Virtual IP address of the HA cluster for the internal network.')
mGuardRouterRedundancyVirtIpExt = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 9, 2, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardRouterRedundancyVirtIpExt.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRouterRedundancyVirtIpExt.setDescription('Virtual IP address of the HA cluster for the external network.')
mGuardRouterRedundancyWantState = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 9, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("master", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardRouterRedundancyWantState.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRouterRedundancyWantState.setDescription('HA cluster state to start this mGuard with at boot time.')
mGuardRouterRedExtHostCheckTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 9, 2, 12), )
if mibBuilder.loadTexts: mGuardRouterRedExtHostCheckTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRouterRedExtHostCheckTable.setDescription('A table of hosts to check with ICMP for detecting the VR state.')
mGuardRouterRedExtHostCheckEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 9, 2, 12, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardRouterRedExtHostCheckIndex"))
if mibBuilder.loadTexts: mGuardRouterRedExtHostCheckEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRouterRedExtHostCheckEntry.setDescription('External hosts to check with ICMP for detecting the VR state.')
mGuardRouterRedExtHostCheckIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 9, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: mGuardRouterRedExtHostCheckIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRouterRedExtHostCheckIndex.setDescription('Table index.')
mGuardRouterRedExtHostCheckIP = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 9, 2, 12, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardRouterRedExtHostCheckIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRouterRedExtHostCheckIP.setDescription('The IP address.')
mGuardRouterRedExtHostCheckRowSt = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 9, 2, 12, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardRouterRedExtHostCheckRowSt.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRouterRedExtHostCheckRowSt.setDescription('Row Status')
mGuardRouterRedIntHostCheckTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 9, 2, 13), )
if mibBuilder.loadTexts: mGuardRouterRedIntHostCheckTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRouterRedIntHostCheckTable.setDescription('A table of hosts to check with ICMP for detecting the VR state.')
mGuardRouterRedIntHostCheckEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 9, 2, 13, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardRouterRedIntHostCheckIndex"))
if mibBuilder.loadTexts: mGuardRouterRedIntHostCheckEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRouterRedIntHostCheckEntry.setDescription('External hosts to check with ICMP for detecting the VR state.')
mGuardRouterRedIntHostCheckIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 9, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: mGuardRouterRedIntHostCheckIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRouterRedIntHostCheckIndex.setDescription('Table index.')
mGuardRouterRedIntHostCheckIP = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 9, 2, 13, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardRouterRedIntHostCheckIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRouterRedIntHostCheckIP.setDescription('The IP address.')
mGuardRouterRedIntHostCheckRowSt = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 9, 2, 13, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardRouterRedIntHostCheckRowSt.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRouterRedIntHostCheckRowSt.setDescription('Row Status')
mGuardRouterRedundancyState = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 9, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("backup", 1), ("master", 2), ("fault", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardRouterRedundancyState.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRouterRedundancyState.setDescription('Current HA cluster state.')
mGuardHTTPSLastAccessIP = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 10, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardHTTPSLastAccessIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardHTTPSLastAccessIP.setDescription('Address of the last IP from which a wrong authentication information was sent for HTTPS access was sent.')
mGuardShellLastAccessIP = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 10, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardShellLastAccessIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardShellLastAccessIP.setDescription('Address of the last IP from which a login event occured.')
mGuardDHCPLastAccessMAC = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 10, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardDHCPLastAccessMAC.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardDHCPLastAccessMAC.setDescription('MAC Address of the last unknown client trying to obtain a lease.')
mGuardTrapResources = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4))
mGuardTResDiscFull = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("free", 1), ("tight", 2), ("full", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardTResDiscFull.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardTResDiscFull.setDescription('Status of file system free space. If multiple file systems, the worst state is used.')
mGuardTResCpuLoadHigh = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardTResCpuLoadHigh.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardTResCpuLoadHigh.setDescription('CPU load (uptime*10).')
mGuardTResMemoryFull = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardTResMemoryFull.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardTResMemoryFull.setDescription('Free memory (RAM) in KiByte.')
mGuardTResColdstart = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardTResColdstart.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardTResColdstart.setDescription('Trap sent when system rebooted (snmp daemon started).')
mGuardTResAV = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4, 6))
mGuardTResAvUpdateDone = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4, 6, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardTResAvUpdateDone.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardTResAvUpdateDone.setDescription('AV Update was performed successfully.')
mGuardTResAvUpdateError = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4, 6, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardTResAvUpdateError.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardTResAvUpdateError.setDescription('Error when performing AV Update.')
mGuardTResAvVirusDetected = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4, 6, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardTResAvVirusDetected.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardTResAvVirusDetected.setDescription('AV found a virus.')
mGuardTResAvFileNotScanned = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4, 6, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardTResAvFileNotScanned.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardTResAvFileNotScanned.setDescription('The file was not scanned for viruses.')
mGuardTResAvFailed = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4, 6, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardTResAvFailed.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardTResAvFailed.setDescription('General AV failure.')
mGuardTResPlatformSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4, 7))
mGuardTResIndustrial = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4, 7, 1))
mGuardTResIndustrialPower = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4, 7, 1, 1))
mGuardTResIndustrialTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4, 7, 1, 2))
mGuardPSTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4, 7, 1, 1, 2), )
if mibBuilder.loadTexts: mGuardPSTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardPSTable.setDescription('This table contains all variables related to the power supply units of the chassis/switch. For each power supply slot exists one instance.')
mGuardPSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4, 7, 1, 1, 2, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardPSSysID"), (0, "MGUARDB-MIB", "mGuardPSID"))
if mibBuilder.loadTexts: mGuardPSEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardPSEntry.setDescription('Power supply entry')
mGuardPSSysID = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4, 7, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardPSSysID.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardPSSysID.setDescription('The value of SysID is assigned so as to uniquely identify a chassis/switch among the subordinate managed objects of the system.')
mGuardPSID = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4, 7, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardPSID.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardPSID.setDescription('This Index is used to identify the associated power supply unit.')
mGuardPSState = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4, 7, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2), ("notInstalled", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardPSState.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardPSState.setDescription('Indicates the operational state of the associated power supply. If the value of this variable changes, a mGuardPowerSupply trap is sent.')
mGuardTResIndustrialTempHiLimit = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4, 7, 1, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardTResIndustrialTempHiLimit.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardTResIndustrialTempHiLimit.setDescription('Upper limit of allowed system temperature.')
mGuardTResIndustrialTempLowLimit = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4, 7, 1, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardTResIndustrialTempLowLimit.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardTResIndustrialTempLowLimit.setDescription('Lower limit of allowed system temperature.')
mGuardTResAutoConfigAdapterState = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notPresent", 1), ("removed", 2), ("ok", 3), ("notInSync", 4), ("outOfMemory", 5), ("wrongMachine", 6), ("checksumErr", 7), ("genericErr", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardTResAutoConfigAdapterState.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardTResAutoConfigAdapterState.setDescription('Trap sent when ACA was accessed.')
mGuardTResSignalRelais = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4, 7, 1, 3))
mGuardTResSignalRelaisState = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4, 7, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardTResSignalRelaisState.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardTResSignalRelaisState.setDescription('Current state of the signal relais (1=on, 2=off).')
mGuardTResSignalRelaisReason = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4, 7, 1, 3, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardTResSignalRelaisReason.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardTResSignalRelaisReason.setDescription('Reason why the signal relais was triggered.')
mGuardTResSignalRelaisReasonIdx = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4, 7, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardTResSignalRelaisReasonIdx.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardTResSignalRelaisReasonIdx.setDescription('Reason number (ue0=1, ue1=2, number of TX bytes for eth).')
mGuardTResSignalRelaisPowerAlarm = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4, 7, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardTResSignalRelaisPowerAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardTResSignalRelaisPowerAlarm.setDescription('Enables/disables an alarm for the signalling relay of the powersupply state.')
mGuardTResSignalRelaisMode = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4, 7, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standard", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardTResSignalRelaisMode.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardTResSignalRelaisMode.setDescription('When set to standard, this is the default, the signalling relay shows the state of hmRS2SigRelayState. When set to manual, the relay is controlled by the configured Manual State.')
mGuardTResSignalRelaisManualStat = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4, 7, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardTResSignalRelaisManualStat.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardTResSignalRelaisManualStat.setDescription('When set to on, this is the default, the signalling relay is opened. When set to off the relay is closed.')
mGuardTResSignalLinkTable = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4, 7, 1, 5))
mGuardTResSigLinkID = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4, 7, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardTResSigLinkID.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardTResSigLinkID.setDescription('This index is used to identify the associated link and corresponds with ifMauIfIndex.')
mGuardTResSigLinkAlarm = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4, 7, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardTResSigLinkAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardTResSigLinkAlarm.setDescription('DURABLE: { off:all } Indicates whether an alarm for the signalling relay of the associated link will be produced or not, so you can mask the value of ifMauMediaAvailable.')
mGuardTResBladeCTRL = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4, 7, 2))
mGuardTResBladeInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4, 7, 2, 1))
mGuardTResBladeCtrlCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4, 7, 2, 5))
mGuardTResBladeRackID = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4, 7, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardTResBladeRackID.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardTResBladeRackID.setDescription('Rack ID in question when sending a Blade-related SNMP trap.')
mGuardTResBladeSlotNr = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardTResBladeSlotNr.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardTResBladeSlotNr.setDescription('Slot ID in question when sending a Blade-related SNMP trap.')
mGuardTResBladeCtrlPowerStatus = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4, 7, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("absent", 1), ("present", 2), ("online", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardTResBladeCtrlPowerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardTResBladeCtrlPowerStatus.setDescription("Status of the BladePack's power supplies when sending an SNMP trap.")
mGuardTResBladeCtrlRunStatus = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4, 7, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("absent", 1), ("present", 2), ("online", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardTResBladeCtrlRunStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardTResBladeCtrlRunStatus.setDescription("Status of the Blade's run status when sending an SNMP trap.")
mGuardTResBladeCtrlCfgBackup = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4, 7, 2, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3))).clone(namedValues=NamedValues(("downloaded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardTResBladeCtrlCfgBackup.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardTResBladeCtrlCfgBackup.setDescription('Reason/details for configuration backup to Blade CTRL when sending an SNMP trap.')
mGuardTResBladeCtrlCfgRestored = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4, 7, 2, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("manual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardTResBladeCtrlCfgRestored.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardTResBladeCtrlCfgRestored.setDescription('Reason for configuration restore from Blade CTRL when sending an SNMP trap.')
mGuardTResRedundancy = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4, 8))
mGuardTResRedundacyReason = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4, 8, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardTResRedundacyReason.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardTResRedundacyReason.setDescription('Reason for redundancy status change.')
mGuardTResRedundacyBackupDown = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 10, 4, 8, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardTResRedundacyBackupDown.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardTResRedundacyBackupDown.setDescription('Information sent by Master device when Backup device is not reachable.')
mGuardLoggingRemoteActivate = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardLoggingRemoteActivate.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardLoggingRemoteActivate.setDescription('Activate remote logging?')
mGuardLoggingRemoteIP = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 11, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardLoggingRemoteIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardLoggingRemoteIP.setDescription('IP address of the remote log server')
mGuardLoggingRemotePort = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 11, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardLoggingRemotePort.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardLoggingRemotePort.setDescription('UDP port of the remote logging service')
mGuardContFiltAVP = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 12, 1))
mGuardContFiltHTTP = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 12, 2))
mGuardContFiltPOP3 = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 12, 3))
mGuardContFiltSMTP = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 12, 4))
mGuardContFiltFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 12, 5))
mGuardContFiltAVPSchedule = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 15, 30, 60, 120, 360, 720, 1440))).clone(namedValues=NamedValues(("never", 1), ("onboot", 2), ("quarterhourly", 15), ("halfhourly", 30), ("hourly", 60), ("bihourly", 120), ("triplehourly", 360), ("sixhourly", 720), ("twicedayly", 1440)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltAVPSchedule.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltAVPSchedule.setDescription('The period used when updating the antivirus database')
mGuardContFiltAVPServerTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 12, 1, 2), )
if mibBuilder.loadTexts: mGuardContFiltAVPServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltAVPServerTable.setDescription('A table of update server repositories.')
mGuardContFiltAVPServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 12, 1, 2, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardContFiltAVPServerIndex"))
if mibBuilder.loadTexts: mGuardContFiltAVPServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltAVPServerEntry.setDescription('A single update server repository. ')
mGuardContFiltAVPServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 12, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: mGuardContFiltAVPServerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltAVPServerIndex.setDescription('Table index.')
mGuardContFiltAVPServerURL = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 12, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltAVPServerURL.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltAVPServerURL.setDescription('URL of the update server.')
mGuardContFiltAVPServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 12, 1, 2, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltAVPServerRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltAVPServerRowStatus.setDescription('Row Status')
mGuardContFiltAVPHTTPProxy = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 12, 1, 3))
mGuardContFiltAVPHTTPProxyLogin = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 12, 1, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltAVPHTTPProxyLogin.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltAVPHTTPProxyLogin.setDescription('Login for a HTTP proxy for retrival of anti-virus patterns.')
mGuardContFiltAVPHTTPProxyPasswd = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 12, 1, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltAVPHTTPProxyPasswd.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltAVPHTTPProxyPasswd.setDescription('Password for mGuardContFiltAVPHTTPProxyLogin.')
mGuardContFiltAVPHTTPProxyServer = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 12, 1, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltAVPHTTPProxyServer.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltAVPHTTPProxyServer.setDescription('Hostname or IP of an HTTP proxy for retrival of anti-virus patterns.')
mGuardContFiltAVPHTTPProxyPort = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 12, 1, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltAVPHTTPProxyPort.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltAVPHTTPProxyPort.setDescription('Port of an HTTP proxy for retrival of anti-virus patterns, eg. 3128.')
mGuardContFiltAVPLogLevel = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 12, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltAVPLogLevel.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltAVPLogLevel.setDescription('AVP log detail level with 0 lowest 5 highest, defaults to 2.')
mGuardContFiltAVPMaxConnections = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 12, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltAVPMaxConnections.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltAVPMaxConnections.setDescription('Maximum number of connections the AVP will handle.')
mGuardContFiltAVPScanTimeout = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 12, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltAVPScanTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltAVPScanTimeout.setDescription('Maximum time the protocol wrapper will wait for the scan engine in seconds.')
mGuardContFiltAVPpass = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 12, 1, 8))
mGuardContFiltAVPpassCorrupt = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 12, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltAVPpassCorrupt.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltAVPpassCorrupt.setDescription('Let corrupt (archive) files pass, treat them as not virus infected.')
mGuardContFiltAVPpassEncrypted = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 12, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltAVPpassEncrypted.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltAVPpassEncrypted.setDescription('Let encrypted files pass, treat them as not virus infected.')
mGuardContFiltAVPpassSuspicious = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 12, 1, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltAVPpassSuspicious.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltAVPpassSuspicious.setDescription('Let suspicious files (e.g. known spyware) pass, treat them as not virus infected.')
mGuardContFiltAVPpassWarnings = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 12, 1, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltAVPpassWarnings.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltAVPpassWarnings.setDescription('Let files pass that triggered a warning, treat them as not virus infected.')
mGuardContFiltQuarantine = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 12, 1, 9))
mGuardContFiltQuarantineClean = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 12, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltQuarantineClean.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltQuarantineClean.setDescription('Send clean files to quarantine server for debugging (warning: do not violate privacy law with this option!).')
mGuardContFiltQuarantineError = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 12, 1, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltQuarantineError.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltQuarantineError.setDescription('Send files producing an error to quarantine server for debugging (warning: do not violate privacy law with this option!).')
mGuardContFiltQuarantineVirus = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 12, 1, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltQuarantineVirus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltQuarantineVirus.setDescription('Send files found to be infected to quarantine server for debugging (warning: do not violate privacy law with this option!).')
mGuardContFiltQuarantineSrvIP = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 12, 1, 9, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltQuarantineSrvIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltQuarantineSrvIP.setDescription('IP Address of the quarantine server.')
mGuardContFiltQuarantineSrvPort = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 12, 1, 9, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltQuarantineSrvPort.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltQuarantineSrvPort.setDescription('Port used for/on the quarantine server (Innominate Quarantine Server Protocol).')
mGuardContFiltInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 12, 1, 10))
mGuardContFiltInfoFlashID = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 12, 1, 10, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardContFiltInfoFlashID.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltInfoFlashID.setDescription('Flash ID of the device to be used for license handling.')
mGuardContFiltHTTPEnable = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 12, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltHTTPEnable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltHTTPEnable.setDescription('Enable HTTP procotol proxy')
mGuardContFiltHTTPVirusAction = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 12, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("error", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltHTTPVirusAction.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltHTTPVirusAction.setDescription('Action to take on virus detection')
mGuardContFiltHTTPMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 12, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(200000, 500000, 1000000, 2000000, 4000000, 5000000, 8000000, 10000000))).clone(namedValues=NamedValues(("dottwomeg", 200000), ("dotfivemeg", 500000), ("onemeg", 1000000), ("twomeg", 2000000), ("fourmeg", 4000000), ("fivemeg", 5000000), ("eightmeg", 8000000), ("tenmeg", 10000000)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltHTTPMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltHTTPMaxSize.setDescription('Maximum object size to be handled (actually sizes may depend on software version and underlying hardware.')
mGuardContFiltHTTPExceedAction = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 12, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("block", 1), ("pass", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltHTTPExceedAction.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltHTTPExceedAction.setDescription('Action to take if an object exceeds the maximum handled size')
mGuardContFiltHTTPSrvrTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 12, 2, 5), )
if mibBuilder.loadTexts: mGuardContFiltHTTPSrvrTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltHTTPSrvrTable.setDescription('A table of update server repositories.')
mGuardContFiltHTTPSrvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 12, 2, 5, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardContFiltHTTPSrvrIndex"))
if mibBuilder.loadTexts: mGuardContFiltHTTPSrvrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltHTTPSrvrEntry.setDescription('A single update server repository. ')
mGuardContFiltHTTPSrvrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 12, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: mGuardContFiltHTTPSrvrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltHTTPSrvrIndex.setDescription('Table index.')
mGuardContFiltHTTPSrvrIP = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 12, 2, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltHTTPSrvrIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltHTTPSrvrIP.setDescription('IP address expression for http server(s).')
mGuardContFiltHTTPSrvrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 12, 2, 5, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltHTTPSrvrPort.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltHTTPSrvrPort.setDescription('Port the HTTP server listens to..')
mGuardContFiltHTTPSrvrScanAction = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 12, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("scan", 1), ("noscan", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltHTTPSrvrScanAction.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltHTTPSrvrScanAction.setDescription('Action to be taken when contacting respective servers.')
mGuardContFiltHTTPSrvrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 12, 2, 5, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltHTTPSrvrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltHTTPSrvrRowStatus.setDescription('Row Status')
mGuardContFiltHTTPSrvrComment = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 12, 2, 5, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltHTTPSrvrComment.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltHTTPSrvrComment.setDescription('Comment for this rule.')
mGuardContFiltPOP3Enable = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 12, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltPOP3Enable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltPOP3Enable.setDescription('Enable POP3 procotol proxy')
mGuardContFiltPOP3VirusAction = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 12, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("error", 1), ("mail", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltPOP3VirusAction.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltPOP3VirusAction.setDescription('Action to take on virus detection')
mGuardContFiltPOP3MaxSize = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 12, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(200000, 500000, 1000000, 2000000, 4000000, 5000000, 8000000, 10000000))).clone(namedValues=NamedValues(("dottwomeg", 200000), ("dotfivemeg", 500000), ("onemeg", 1000000), ("twomeg", 2000000), ("fourmeg", 4000000), ("fivemeg", 5000000), ("eightmeg", 8000000), ("tenmeg", 10000000)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltPOP3MaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltPOP3MaxSize.setDescription('Maximum object size to be handled (actually sizes may depend on software version and underlying hardware.')
mGuardContFiltPOP3ExceedAction = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 12, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("block", 1), ("pass", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltPOP3ExceedAction.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltPOP3ExceedAction.setDescription('Action to take if an object exceeds the maximum handled size')
mGuardContFiltPOP3SrvrTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 12, 3, 5), )
if mibBuilder.loadTexts: mGuardContFiltPOP3SrvrTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltPOP3SrvrTable.setDescription('A table of update server repositories.')
mGuardContFiltPOP3SrvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 12, 3, 5, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardContFiltPOP3SrvrIndex"))
if mibBuilder.loadTexts: mGuardContFiltPOP3SrvrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltPOP3SrvrEntry.setDescription('A single update server repository. ')
mGuardContFiltPOP3SrvrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 12, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: mGuardContFiltPOP3SrvrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltPOP3SrvrIndex.setDescription('Table index.')
mGuardContFiltPOP3SrvrIP = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 12, 3, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltPOP3SrvrIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltPOP3SrvrIP.setDescription('IP address expression for pop3 server(s).')
mGuardContFiltPOP3SrvrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 12, 3, 5, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltPOP3SrvrPort.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltPOP3SrvrPort.setDescription('Port expression for pop3 server(s).')
mGuardContFiltPOP3SrvrScanAction = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 12, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("scan", 1), ("noscan", 2))))
if mibBuilder.loadTexts: mGuardContFiltPOP3SrvrScanAction.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltPOP3SrvrScanAction.setDescription('Action to be taken when contacting respective servers.')
mGuardContFiltPOP3SrvrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 12, 3, 5, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltPOP3SrvrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltPOP3SrvrRowStatus.setDescription('Row Status')
mGuardContFiltPOP3SrvrComment = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 12, 3, 5, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltPOP3SrvrComment.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltPOP3SrvrComment.setDescription('Comment for this rule.')
mGuardContFiltSMTPEnable = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 12, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltSMTPEnable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltSMTPEnable.setDescription('Enable SMTP procotol proxy')
mGuardContFiltSMTPVirusAction = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 12, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("error", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltSMTPVirusAction.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltSMTPVirusAction.setDescription('Action to take on virus detection')
mGuardContFiltSMTPMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 12, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(200000, 500000, 1000000, 2000000, 4000000, 5000000, 8000000, 10000000))).clone(namedValues=NamedValues(("dottwomeg", 200000), ("dotfivemeg", 500000), ("onemeg", 1000000), ("twomeg", 2000000), ("fourmeg", 4000000), ("fivemeg", 5000000), ("eightmeg", 8000000), ("tenmeg", 10000000)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltSMTPMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltSMTPMaxSize.setDescription('Maximum object size to be handled (actually sizes may depend on software version and underlying hardware.')
mGuardContFiltSMTPExceedAction = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 12, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("block", 1), ("pass", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltSMTPExceedAction.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltSMTPExceedAction.setDescription('Action to take if an object exceeds the maximum handled size')
mGuardContFiltSMTPSrvrTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 12, 4, 5), )
if mibBuilder.loadTexts: mGuardContFiltSMTPSrvrTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltSMTPSrvrTable.setDescription('A table of update server repositories.')
mGuardContFiltSMTPSrvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 12, 4, 5, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardContFiltSMTPSrvrIndex"))
if mibBuilder.loadTexts: mGuardContFiltSMTPSrvrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltSMTPSrvrEntry.setDescription('A single update server repository. ')
mGuardContFiltSMTPSrvrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 12, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: mGuardContFiltSMTPSrvrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltSMTPSrvrIndex.setDescription('Table index.')
mGuardContFiltSMTPSrvrIP = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 12, 4, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltSMTPSrvrIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltSMTPSrvrIP.setDescription('IP address expression for smtp server(s).')
mGuardContFiltSMTPSrvrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 12, 4, 5, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltSMTPSrvrPort.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltSMTPSrvrPort.setDescription('Port expression for smtp server(s).')
mGuardContFiltSMTPSrvrScanAction = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 12, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("scan", 1), ("noscan", 2))))
if mibBuilder.loadTexts: mGuardContFiltSMTPSrvrScanAction.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltSMTPSrvrScanAction.setDescription('Action to be taken when contacting respective servers.')
mGuardContFiltSMTPSrvrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 12, 4, 5, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltSMTPSrvrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltSMTPSrvrRowStatus.setDescription('Row Status')
mGuardContFiltSMTPSrvrComment = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 12, 4, 5, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltSMTPSrvrComment.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltSMTPSrvrComment.setDescription('Comment for this rule.')
mGuardContFiltFTPEnable = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 12, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltFTPEnable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltFTPEnable.setDescription('Enable FTP procotol proxy')
mGuardContFiltFTPVirusAction = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 12, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("error", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltFTPVirusAction.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltFTPVirusAction.setDescription('Action to take on virus detection')
mGuardContFiltFTPMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 12, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(200000, 500000, 1000000, 2000000, 4000000, 5000000, 8000000, 10000000))).clone(namedValues=NamedValues(("dottwomeg", 200000), ("dotfivemeg", 500000), ("onemeg", 1000000), ("twomeg", 2000000), ("fourmeg", 4000000), ("fivemeg", 5000000), ("eightmeg", 8000000), ("tenmeg", 10000000)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltFTPMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltFTPMaxSize.setDescription('Maximum object size to be handled (actually sizes may depend on software version and underlying hardware.')
mGuardContFiltFTPExceedAction = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 12, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("block", 1), ("pass", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltFTPExceedAction.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltFTPExceedAction.setDescription('Action to take if an object exceeds the maximum handled size')
mGuardContFiltFTPSrvrTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 12, 5, 5), )
if mibBuilder.loadTexts: mGuardContFiltFTPSrvrTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltFTPSrvrTable.setDescription('A table of update server repositories.')
mGuardContFiltFTPSrvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 12, 5, 5, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardContFiltFTPSrvrIndex"))
if mibBuilder.loadTexts: mGuardContFiltFTPSrvrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltFTPSrvrEntry.setDescription('A single update server repository. ')
mGuardContFiltFTPSrvrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 12, 5, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: mGuardContFiltFTPSrvrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltFTPSrvrIndex.setDescription('Table index.')
mGuardContFiltFTPSrvrIP = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 12, 5, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltFTPSrvrIP.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltFTPSrvrIP.setDescription('IP address expression for smtp server(s).')
mGuardContFiltFTPSrvrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 12, 5, 5, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltFTPSrvrPort.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltFTPSrvrPort.setDescription('Port expression for smtp server(s).')
mGuardContFiltFTPSrvrScanAction = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 12, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("scan", 1), ("noscan", 2))))
if mibBuilder.loadTexts: mGuardContFiltFTPSrvrScanAction.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltFTPSrvrScanAction.setDescription('Action to be taken when contacting respective servers.')
mGuardContFiltFTPSrvrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 12, 5, 5, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltFTPSrvrRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltFTPSrvrRowStatus.setDescription('Row Status')
mGuardContFiltFTPSrvrComment = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 12, 5, 5, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardContFiltFTPSrvrComment.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardContFiltFTPSrvrComment.setDescription('Comment for this rule.')
mGuardBladeRackID = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 13, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardBladeRackID.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardBladeRackID.setDescription('Blade rack ID, read-only on a blade, read-write on a controller')
mGuardBladeSlotID = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 13, 2), Integer32())
if mibBuilder.loadTexts: mGuardBladeSlotID.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardBladeSlotID.setDescription('Blade slot ID, slot ID in a mGuard Rack')
mGuardBladeCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 13, 3), )
if mibBuilder.loadTexts: mGuardBladeCtrlTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardBladeCtrlTable.setDescription('Overview of controlled blades.')
mGuardBladeCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 13, 3, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardBladeCtrlIndex"))
if mibBuilder.loadTexts: mGuardBladeCtrlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardBladeCtrlEntry.setDescription('A single update server repository. ')
mGuardBladeCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 13, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: mGuardBladeCtrlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardBladeCtrlIndex.setDescription('Table index.')
mGuardBladeCtrlDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 13, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardBladeCtrlDevice.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardBladeCtrlDevice.setDescription('The name of the device inside the slot.')
mGuardBladeCtrlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 13, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("absent", 1), ("present", 2), ("online", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardBladeCtrlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardBladeCtrlStatus.setDescription('The status of the blade/slot.')
mGuardBladeCtrlAVRRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 13, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardBladeCtrlAVRRevision.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardBladeCtrlAVRRevision.setDescription('The AVR revision of the blades bus controller.')
mGuardBladeCtrlSlotID = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 13, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardBladeCtrlSlotID.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardBladeCtrlSlotID.setDescription('The blades slot ID, as seen by the blade.')
mGuardBladeCtrlProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 13, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardBladeCtrlProductID.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardBladeCtrlProductID.setDescription('The blades product ID.')
mGuardBladeCtrlAssemblyID = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 13, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardBladeCtrlAssemblyID.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardBladeCtrlAssemblyID.setDescription('The blades assembly ID.')
mGuardBladeCtrlSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 13, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardBladeCtrlSerial.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardBladeCtrlSerial.setDescription('The blades serial number.')
mGuardBladeCtrlFlashID = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 13, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardBladeCtrlFlashID.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardBladeCtrlFlashID.setDescription('The blades Flash ID.')
mGuardBladeCtrlVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 13, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardBladeCtrlVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardBladeCtrlVersion.setDescription('The blades software version.')
mGuardBladeCtrlBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 13, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardBladeCtrlBackup.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardBladeCtrlBackup.setDescription('Wether to automatically pull the configuration off the blade/slot.')
mGuardBladeCtrlRestore = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 13, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardBladeCtrlRestore.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardBladeCtrlRestore.setDescription('Wether to automatically push the configuration to the blade freshly inserted into the slot.')
mGuardBladePwrTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 13, 4), )
if mibBuilder.loadTexts: mGuardBladePwrTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardBladePwrTable.setDescription('Overview of controlled power supplies.')
mGuardBladePwrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 13, 4, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardBladePwrIndex"))
if mibBuilder.loadTexts: mGuardBladePwrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardBladePwrEntry.setDescription('Table entry.')
mGuardBladePwrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 13, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: mGuardBladePwrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardBladePwrIndex.setDescription('Table index.')
mGuardBladePwrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 13, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("absent", 1), ("fatal", 2), ("defect", 3), ("ok", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mGuardBladePwrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardBladePwrStatus.setDescription('Status of the power supply.')
mGuardProfilePush = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 14, 1))
mGuardProfilePull = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 14, 2))
mGuardProfilePullSchedule = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 14, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 15, 30, 60, 120, 360, 720, 1440))).clone(namedValues=NamedValues(("never", 1), ("onboot", 2), ("quarterhourly", 15), ("halfhourly", 30), ("hourly", 60), ("bihourly", 120), ("triplehourly", 360), ("sixhourly", 720), ("twicedayly", 1440)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardProfilePullSchedule.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardProfilePullSchedule.setDescription('The period used when polling remote configuration profiles.')
mGuardProfilePullHTTPS = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 14, 2, 2))
mGuardProfilePullHTTPSCert = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 14, 2, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardProfilePullHTTPSCert.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardProfilePullHTTPSCert.setDescription('X.509 Certificate of the HTTPS server to pull configuration profiles from. This used to authenticate the HTTPS server.')
mGuardProfilePullHTTPSServer = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 14, 2, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardProfilePullHTTPSServer.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardProfilePullHTTPSServer.setDescription('Hostname or IP of the HTTPS server to pull configuration profiles from.')
mGuardProfilePullHTTPSPort = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 14, 2, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardProfilePullHTTPSPort.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardProfilePullHTTPSPort.setDescription('Port of the HTTPS server to pull configuration profiles from. Usually 443.')
mGuardProfilePullHTTPSFile = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 14, 2, 2, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardProfilePullHTTPSFile.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardProfilePullHTTPSFile.setDescription("Filename of the configuration to pull. Default is an empty name, in which case the serialnumber with the extension '.atv' is used.")
mGuardProfilePullHTTPSLogin = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 14, 2, 2, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardProfilePullHTTPSLogin.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardProfilePullHTTPSLogin.setDescription('Login on the HTTPS server to pull configuration profiles from.')
mGuardProfilePullHTTPSPasswd = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 14, 2, 2, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardProfilePullHTTPSPasswd.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardProfilePullHTTPSPasswd.setDescription('Password on the HTTPS server to pull configuration profiles from.')
mGuardProfilePullHTTPSDirectory = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 14, 2, 2, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardProfilePullHTTPSDirectory.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardProfilePullHTTPSDirectory.setDescription('Directory on the HTTPS server to pull configuration profiles from.')
mGuardRemoteUsers = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 15, 1))
mGuardRADIUS = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 15, 1, 1))
mGuardRADIUSTimeout = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardRADIUSTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRADIUSTimeout.setDescription('Time to wait before deciding that a RADIUS server has not responded to a request.')
mGuardRADIUSRetries = MibScalar((1, 3, 6, 1, 4, 1, 15450, 2, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardRADIUSRetries.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRADIUSRetries.setDescription('The number of packets of sent to a RADIUS server before giving up.')
mGuardRADIUSServerTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 15, 1, 1, 3), )
if mibBuilder.loadTexts: mGuardRADIUSServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRADIUSServerTable.setDescription('A table containing RADIUS servers.')
mGuardRADIUSServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 15, 1, 1, 3, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardRADIUSServerIndex"))
if mibBuilder.loadTexts: mGuardRADIUSServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRADIUSServerEntry.setDescription('An entry containing a single RADIUS server.')
mGuardRADIUSServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 15, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: mGuardRADIUSServerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRADIUSServerIndex.setDescription('Index to identify RADIUS server entry.')
mGuardRADIUSServerHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 15, 1, 1, 3, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardRADIUSServerHostname.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRADIUSServerHostname.setDescription('The hostname or IP address of the RADIUS server.')
mGuardRADIUSServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 15, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardRADIUSServerPort.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRADIUSServerPort.setDescription('The port number of the RADIUS server.')
mGuardRADIUSServerSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 15, 1, 1, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardRADIUSServerSecret.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRADIUSServerSecret.setDescription('The secret shared with the RADIUS server.')
mGuardRADIUSServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 15, 1, 1, 3, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardRADIUSServerRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardRADIUSServerRowStatus.setDescription('Row Status')
mGuardUserFWUsers = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 15, 1, 2))
mGuardUserFWUserTable = MibTable((1, 3, 6, 1, 4, 1, 15450, 2, 15, 1, 2, 1), )
if mibBuilder.loadTexts: mGuardUserFWUserTable.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardUserFWUserTable.setDescription('A table containing user firewall users.')
mGuardUserFWUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15450, 2, 15, 1, 2, 1, 1), ).setIndexNames((0, "MGUARDB-MIB", "mGuardUserFWUserIndex"))
if mibBuilder.loadTexts: mGuardUserFWUserEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardUserFWUserEntry.setDescription('An entry containing a single user firewall user.')
mGuardUserFWUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 15, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: mGuardUserFWUserIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardUserFWUserIndex.setDescription('Index to identify the user firewall user entry.')
mGuardUserFWUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 15, 1, 2, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardUserFWUserName.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardUserFWUserName.setDescription('The username of the user firewall user entry.')
mGuardUserFWUserAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 15, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("radius", 1), ("local", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardUserFWUserAuthMethod.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardUserFWUserAuthMethod.setDescription('The authentication method of the user firewall user entry.')
mGuardUserFWUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 15, 1, 2, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardUserFWUserPassword.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardUserFWUserPassword.setDescription('The password of the user firewall user entry. The password can be set, but not obtained. If the variable is read, a * character is returned.')
mGuardUserFWUserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 15450, 2, 15, 1, 2, 1, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mGuardUserFWUserRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mGuardUserFWUserRowStatus.setDescription('Row Status')
mGuardTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 10, 5))
mGuardTrapDiscFull = NotificationType((1, 3, 6, 1, 4, 1, 15450, 2, 10, 5) + (0,1)).setObjects(("MGUARDB-MIB", "mGuardTResDiscFull"))
if mibBuilder.loadTexts: mGuardTrapDiscFull.setDescription('Status of file system free space. If multiple file systems, the worst state is used.')
mGuardTrapCpuLoadHigh = NotificationType((1, 3, 6, 1, 4, 1, 15450, 2, 10, 5) + (0,2)).setObjects(("MGUARDB-MIB", "mGuardTResCpuLoadHigh"))
if mibBuilder.loadTexts: mGuardTrapCpuLoadHigh.setDescription('CPU load above 1.')
mGuardTrapMemoryFull = NotificationType((1, 3, 6, 1, 4, 1, 15450, 2, 10, 5) + (0,3)).setObjects(("MGUARDB-MIB", "mGuardTResMemoryFull"))
if mibBuilder.loadTexts: mGuardTrapMemoryFull.setDescription('Free memory (RAM) low.')
mGuardTrapColdstart = NotificationType((1, 3, 6, 1, 4, 1, 15450, 2, 10, 5) + (0,4)).setObjects(("MGUARDB-MIB", "mGuardTResColdstart"))
if mibBuilder.loadTexts: mGuardTrapColdstart.setDescription('Trap sent when system rebooted (snmp daemon started).')
mGuardHTTPSLoginTrap = NotificationType((1, 3, 6, 1, 4, 1, 15450, 2) + (0,1)).setObjects(("MGUARDB-MIB", "mGuardHTTPSLastAccessIP"))
if mibBuilder.loadTexts: mGuardHTTPSLoginTrap.setDescription('This trap is sent when someone is trying to open a HTTPS session using the wrong password. mGuardHTTPSLastAccessIP contains the IP address of the last unsuccessfull login request.')
mGuardShellLoginTrap = NotificationType((1, 3, 6, 1, 4, 1, 15450, 2) + (0,2)).setObjects(("MGUARDB-MIB", "mGuardShellLastAccessIP"))
if mibBuilder.loadTexts: mGuardShellLoginTrap.setDescription('This trap is sent when someone opens the shell through SSH or serial console. mGuardShellAccessLastIP contains the IP address of the login request. The value of mGuardShellAccessLastIP is 0.0.0.0, if the request was sent via serial console. ')
mGuardDHCPNewClientTrap = NotificationType((1, 3, 6, 1, 4, 1, 15450, 2) + (0,3)).setObjects(("MGUARDB-MIB", "mGuardDHCPLastAccessMAC"))
if mibBuilder.loadTexts: mGuardDHCPNewClientTrap.setDescription('This trap is sent when a DHCP request was received from an unknown client')
mGuardTrapAV = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 10, 6))
mGuardTrapAvUpdateDone = NotificationType((1, 3, 6, 1, 4, 1, 15450, 2, 10, 6) + (0,1)).setObjects(("MGUARDB-MIB", "mGuardTResAvUpdateDone"))
if mibBuilder.loadTexts: mGuardTrapAvUpdateDone.setDescription('AV Update was performed successfully.')
mGuardTrapAvUpdateError = NotificationType((1, 3, 6, 1, 4, 1, 15450, 2, 10, 6) + (0,2)).setObjects(("MGUARDB-MIB", "mGuardTResAvUpdateError"))
if mibBuilder.loadTexts: mGuardTrapAvUpdateError.setDescription('Error when performing AV Update.')
mGuardTrapAvVirusDetected = NotificationType((1, 3, 6, 1, 4, 1, 15450, 2, 10, 6) + (0,3)).setObjects(("MGUARDB-MIB", "mGuardTResAvVirusDetected"))
if mibBuilder.loadTexts: mGuardTrapAvVirusDetected.setDescription('AV found a virus.')
mGuardTrapAvFileNotScanned = NotificationType((1, 3, 6, 1, 4, 1, 15450, 2, 10, 6) + (0,4)).setObjects(("MGUARDB-MIB", "mGuardTResAvFileNotScanned"))
if mibBuilder.loadTexts: mGuardTrapAvFileNotScanned.setDescription('The file was not scanned for viruses.')
mGuardTrapAvFailed = NotificationType((1, 3, 6, 1, 4, 1, 15450, 2, 10, 6) + (0,5)).setObjects(("MGUARDB-MIB", "mGuardTResAvFailed"))
if mibBuilder.loadTexts: mGuardTrapAvFailed.setDescription('General AV failure.')
mGuardTrapPlatformSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 10, 7))
mGuardTrapIndustrial = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 10, 7, 1))
mGuardTrapIndustrialPowerStatus = NotificationType((1, 3, 6, 1, 4, 1, 15450, 2, 10, 7, 1) + (0,2)).setObjects(("MGUARDB-MIB", "mGuardPSState"))
if mibBuilder.loadTexts: mGuardTrapIndustrialPowerStatus.setDescription('Trap sent when power supply failure was detected.')
mGuardTrapIndustrialTemperature = NotificationType((1, 3, 6, 1, 4, 1, 15450, 2, 10, 7, 1) + (0,1)).setObjects(("MGUARDB-MIB", "mGuardSystemTemperature"), ("MGUARDB-MIB", "mGuardTResIndustrialTempHiLimit"), ("MGUARDB-MIB", "mGuardTResIndustrialTempLowLimit"))
if mibBuilder.loadTexts: mGuardTrapIndustrialTemperature.setDescription('Trap reporting temperature exceeding the given limits.')
mGuardTrapSignalRelais = NotificationType((1, 3, 6, 1, 4, 1, 15450, 2, 10, 7, 1) + (0,3)).setObjects(("MGUARDB-MIB", "mGuardTResSignalRelaisState"), ("MGUARDB-MIB", "mGuardTResSignalRelaisReason"), ("MGUARDB-MIB", "mGuardTResSignalRelaisReasonIdx"))
if mibBuilder.loadTexts: mGuardTrapSignalRelais.setDescription('Current state of the signal relais changed (0=off, 1=on).')
mGuardTrapAutoConfigAdapterState = NotificationType((1, 3, 6, 1, 4, 1, 15450, 2, 10, 7, 1) + (0,4)).setObjects(("MGUARDB-MIB", "mGuardTResAutoConfigAdapterState"))
if mibBuilder.loadTexts: mGuardTrapAutoConfigAdapterState.setDescription('Trap sent when ACA was accessed.')
mGuardTrapBladeCTRL = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 10, 7, 2))
mGuardTrapBladeCtrlCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 10, 7, 2, 5))
mGuardTrapBladeCtrlPowerStatus = NotificationType((1, 3, 6, 1, 4, 1, 15450, 2, 10, 7, 2) + (0,2)).setObjects(("MGUARDB-MIB", "mGuardTResBladeRackID"), ("MGUARDB-MIB", "mGuardTResBladeSlotNr"), ("MGUARDB-MIB", "mGuardTResBladeCtrlPowerStatus"))
if mibBuilder.loadTexts: mGuardTrapBladeCtrlPowerStatus.setDescription("BladePack's power supplies status changed.")
mGuardTrapBladeCtrlRunStatus = NotificationType((1, 3, 6, 1, 4, 1, 15450, 2, 10, 7, 2) + (0,3)).setObjects(("MGUARDB-MIB", "mGuardTResBladeRackID"), ("MGUARDB-MIB", "mGuardTResBladeSlotNr"), ("MGUARDB-MIB", "mGuardTResBladeCtrlRunStatus"))
if mibBuilder.loadTexts: mGuardTrapBladeCtrlRunStatus.setDescription("Blade's run status changed.")
mGuardTrapBladeCtrlCfgBackup = NotificationType((1, 3, 6, 1, 4, 1, 15450, 2, 10, 7, 2, 5) + (0,1)).setObjects(("MGUARDB-MIB", "mGuardTResBladeRackID"), ("MGUARDB-MIB", "mGuardTResBladeSlotNr"), ("MGUARDB-MIB", "mGuardTResBladeCtrlCfgBackup"))
if mibBuilder.loadTexts: mGuardTrapBladeCtrlCfgBackup.setDescription('Configuration backup to Blade CTRL is triggered.')
mGuardTrapBladeCtrlCfgRestored = NotificationType((1, 3, 6, 1, 4, 1, 15450, 2, 10, 7, 2, 5) + (0,2)).setObjects(("MGUARDB-MIB", "mGuardTResBladeRackID"), ("MGUARDB-MIB", "mGuardTResBladeSlotNr"), ("MGUARDB-MIB", "mGuardTResBladeCtrlCfgRestored"))
if mibBuilder.loadTexts: mGuardTrapBladeCtrlCfgRestored.setDescription('Configuration restore from Blade CTRL is triggered.')
mGuardTrapRouterRedundancy = MibIdentifier((1, 3, 6, 1, 4, 1, 15450, 2, 10, 8))
mGuardTrapRouterRedundancyStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 15450, 2, 10, 8) + (0,1)).setObjects(("MGUARDB-MIB", "mGuardRouterRedundancyState"), ("MGUARDB-MIB", "mGuardTResRedundacyReason"))
if mibBuilder.loadTexts: mGuardTrapRouterRedundancyStatusChange.setDescription('Current HA cluster state changed.')
mGuardTrapRouterRedundancyBackupDown = NotificationType((1, 3, 6, 1, 4, 1, 15450, 2, 10, 8) + (0,2)).setObjects(("MGUARDB-MIB", "mGuardTResRedundacyBackupDown"))
if mibBuilder.loadTexts: mGuardTrapRouterRedundancyBackupDown.setDescription('Backup device is not reachable by Master device (This trap is only sent, when ICMP checks are activated).')
mibBuilder.exportSymbols("MGUARDB-MIB", mGuardSSHFWlog=mGuardSSHFWlog, mGuardSerialPPPFWOUTtarget=mGuardSerialPPPFWOUTtarget, mGuardTResColdstart=mGuardTResColdstart, mGuardNetworkStatus=mGuardNetworkStatus, mGuardContFiltHTTPSrvrPort=mGuardContFiltHTTPSrvrPort, mGuardStealthL2ForwardSTP=mGuardStealthL2ForwardSTP, mGuardTResSignalLinkTable=mGuardTResSignalLinkTable, mGuardSerialPPPFWINtarget=mGuardSerialPPPFWINtarget, mGuardVPNConnectionEntry=mGuardVPNConnectionEntry, mGuardVPNFWOUTRowStatus=mGuardVPNFWOUTRowStatus, mGuardContFiltQuarantineVirus=mGuardContFiltQuarantineVirus, mGuardDHCPExtRelayAppend=mGuardDHCPExtRelayAppend, mGuardDHCPExtRelayServerTable=mGuardDHCPExtRelayServerTable, mGuardFirewallOutgoing=mGuardFirewallOutgoing, mGuardPSID=mGuardPSID, mGuardUserFWUserAuthMethod=mGuardUserFWUserAuthMethod, mGuardUpdateServerIndex=mGuardUpdateServerIndex, mGuardFWINsourceIP=mGuardFWINsourceIP, mGuardTResAutoConfigAdapterState=mGuardTResAutoConfigAdapterState, mGuardFirewallPortforwarding=mGuardFirewallPortforwarding, mGuardContFiltQuarantine=mGuardContFiltQuarantine, mGuardContFiltHTTPSrvrRowStatus=mGuardContFiltHTTPSrvrRowStatus, mGuardSNMPFWRuleTable=mGuardSNMPFWRuleTable, mGuardTResAvUpdateError=mGuardTResAvUpdateError, mGuardL2FilterInternEthType=mGuardL2FilterInternEthType, mGuardL2FilterExternDstMac=mGuardL2FilterExternDstMac, mGuardVPNFWINsport=mGuardVPNFWINsport, mGuardVPNmtu=mGuardVPNmtu, mGuardSNMP=mGuardSNMP, mGuardVPNipsecHash=mGuardVPNipsecHash, mGuardRouter=mGuardRouter, mGuardSerialPPPFWOUTsport=mGuardSerialPPPFWOUTsport, mGuardL2FilterInternSrcMac=mGuardL2FilterInternSrcMac, mGuardSerialPPPFWINproto=mGuardSerialPPPFWINproto, mGuardSerialNumber=mGuardSerialNumber, mGuardDHCPIntStaticTable=mGuardDHCPIntStaticTable, mGuardLocalRouteRowStatus=mGuardLocalRouteRowStatus, mGuardVPNikeHash=mGuardVPNikeHash, mGuardFirewallUserFWTemplateUserTable=mGuardFirewallUserFWTemplateUserTable, mGuardBaseVersion=mGuardBaseVersion, mGuardL2FilterInternRuleIndex=mGuardL2FilterInternRuleIndex, mGuardContFiltQuarantineSrvIP=mGuardContFiltQuarantineSrvIP, mGuardVPNAggressive=mGuardVPNAggressive, mGuardL2FilterExternTarget=mGuardL2FilterExternTarget, mGuardExternRouteNetwork=mGuardExternRouteNetwork, mGuardFirewallUserFWTemplateRuleEntry=mGuardFirewallUserFWTemplateRuleEntry, mGuardDHCPExtRelayRemoteText=mGuardDHCPExtRelayRemoteText, mGuardSNMPError=mGuardSNMPError, mGuardSSHFWcomment=mGuardSSHFWcomment, mGuardSerialPPPFWOUTtargetIP=mGuardSerialPPPFWOUTtargetIP, mGuardSNMPBladeStateTrapFlag=mGuardSNMPBladeStateTrapFlag, mGuardContFiltAVPServerEntry=mGuardContFiltAVPServerEntry, mGuardContFiltPOP3SrvrComment=mGuardContFiltPOP3SrvrComment, mGuardTResMemoryFull=mGuardTResMemoryFull, mGuardHTTPSFWinterface=mGuardHTTPSFWinterface, mGuardBladeCtrlEntry=mGuardBladeCtrlEntry, mGuardBladeCtrlDevice=mGuardBladeCtrlDevice, mGuardFirewallUserFWTemplateRowStatus=mGuardFirewallUserFWTemplateRowStatus, mGuardRemoteUsers=mGuardRemoteUsers, mGuardVPNL2TPpppdOptRowStatus=mGuardVPNL2TPpppdOptRowStatus, mGuardVPNMachineCert=mGuardVPNMachineCert, mGuardPPTPpppdOptionsTable=mGuardPPTPpppdOptionsTable, mGuardContFiltHTTPSrvrTable=mGuardContFiltHTTPSrvrTable, mGuardRADIUSServerSecret=mGuardRADIUSServerSecret, mGuardMAC1=mGuardMAC1, mGuardSSHFWinterface=mGuardSSHFWinterface, mGuardTResIndustrialTemperature=mGuardTResIndustrialTemperature, mGuardContFiltInfoFlashID=mGuardContFiltInfoFlashID, mGuardTResSignalRelaisReason=mGuardTResSignalRelaisReason, mGuardSNMPColdStartTrapFlag=mGuardSNMPColdStartTrapFlag, mGuardFWINdestinationIP=mGuardFWINdestinationIP, mGuardFWPORTFORWinport=mGuardFWPORTFORWinport, mGuardFirewallUserFWTemplateRuleComment=mGuardFirewallUserFWTemplateRuleComment, mGuardStealthHiDiscoveryState=mGuardStealthHiDiscoveryState, mGuardFW11NATruleIndex=mGuardFW11NATruleIndex, mGuardMAC3=mGuardMAC3, mGuardRouterRedIntHostCheckIndex=mGuardRouterRedIntHostCheckIndex, mGuardHTTPSFWRowStatus=mGuardHTTPSFWRowStatus, mGuardL2FilterExternTable=mGuardL2FilterExternTable, mGuardSNMPTrapReceiverRowStatus=mGuardSNMPTrapReceiverRowStatus, mGuardDHCPIntStaticEntry=mGuardDHCPIntStaticEntry, mGuardRescueSystem=mGuardRescueSystem, mGuardVPNFWINRowStatus=mGuardVPNFWINRowStatus, mGuardStealthL2Filter=mGuardStealthL2Filter, mGuardVPNconName=mGuardVPNconName, mGuardFWOUTRowStatus=mGuardFWOUTRowStatus, mGuardDHCPExtRelayAppendLimit=mGuardDHCPExtRelayAppendLimit, mGuardVPNRequireUniqueIDs=mGuardVPNRequireUniqueIDs, mGuardFWINproto=mGuardFWINproto, mGuardL2FilterExternRuleIndex=mGuardL2FilterExternRuleIndex, mGuardL2FilterInternRowStatus=mGuardL2FilterInternRowStatus, mGuardOEMSerial=mGuardOEMSerial, mGuardProfilePullHTTPSDirectory=mGuardProfilePullHTTPSDirectory, mGuardOEMName=mGuardOEMName, mGuardContFiltAVPHTTPProxy=mGuardContFiltAVPHTTPProxy, mGuardVPNDynDNSRegLogin=mGuardVPNDynDNSRegLogin, mGuardTResBladeRackID=mGuardTResBladeRackID, mGuardContFiltAVPpassEncrypted=mGuardContFiltAVPpassEncrypted, mGuardDHCPIntPoolEnable=mGuardDHCPIntPoolEnable, mGuardDHCPNewClientTrap=mGuardDHCPNewClientTrap, mGuardPPPOEMSS=mGuardPPPOEMSS, mGuardFWPORTFORWoutport=mGuardFWPORTFORWoutport, mGuardTResBladeCtrlCfgBackup=mGuardTResBladeCtrlCfgBackup, mGuardLogging=mGuardLogging, mGuardRouterLocalAliasesTable=mGuardRouterLocalAliasesTable, mGuardPPPOE=mGuardPPPOE, mGuardPSEntry=mGuardPSEntry, mGuardRADIUSTimeout=mGuardRADIUSTimeout, mGuardExternRouteGateway=mGuardExternRouteGateway, mGuardVPNFWOUTlog=mGuardVPNFWOUTlog, mGuardContFiltAVPHTTPProxyPort=mGuardContFiltAVPHTTPProxyPort, mGuardTResSignalRelais=mGuardTResSignalRelais, mGuardVPNL2TPLocalIP=mGuardVPNL2TPLocalIP, mGuardVPNx509=mGuardVPNx509, mGuardSNMPAgentTrapFlag=mGuardSNMPAgentTrapFlag, mGuardFWNATOutIP=mGuardFWNATOutIP, mGuardFirewallIncomingTable=mGuardFirewallIncomingTable, mGuardDHCPExtRelayCircuitText=mGuardDHCPExtRelayCircuitText, mGuardTResDiscFull=mGuardTResDiscFull, mGuardContFiltHTTPVirusAction=mGuardContFiltHTTPVirusAction, mGuardSSHRemoteEnable=mGuardSSHRemoteEnable, mGuardProfilePush=mGuardProfilePush, mGuardL2FilterExternEntry=mGuardL2FilterExternEntry, mGuardVPNFWOUTTable=mGuardVPNFWOUTTable, mGuardFirewallUserFWTemplateUserTemplateIndex=mGuardFirewallUserFWTemplateUserTemplateIndex, mGuardProfilePullHTTPSPasswd=mGuardProfilePullHTTPSPasswd, mGuardNTP=mGuardNTP, mGuardContFiltPOP3SrvrEntry=mGuardContFiltPOP3SrvrEntry, mGuardDHCPExt=mGuardDHCPExt, mGuardTResRedundancy=mGuardTResRedundancy, mGuardBladeCtrlIndex=mGuardBladeCtrlIndex, mGuardFirewallUserFWTemplateRuleDstIP=mGuardFirewallUserFWTemplateRuleDstIP, mGuarddnsServerRowStatus=mGuarddnsServerRowStatus, mGuardCPUStepping=mGuardCPUStepping, mGuardCPUFamily=mGuardCPUFamily, mGuardRouterRedExtHostCheckIP=mGuardRouterRedExtHostCheckIP, mGuardContFiltHTTPSrvrIP=mGuardContFiltHTTPSrvrIP, mGuardVPNFWINdport=mGuardVPNFWINdport, mGuardFirewallConntrackPPTP=mGuardFirewallConntrackPPTP, mGuardContFiltSMTPSrvrComment=mGuardContFiltSMTPSrvrComment, mGuardVPNremGW=mGuardVPNremGW, mGuardVPNComp=mGuardVPNComp, mGuardTrapAvVirusDetected=mGuardTrapAvVirusDetected, mGuardExternRoutesTable=mGuardExternRoutesTable, mGuardStealthManageIP=mGuardStealthManageIP, mGuardSerialPPPFWINruleIndex=mGuardSerialPPPFWINruleIndex, mGuardFW11NATMask=mGuardFW11NATMask, mGuardHTTPSRemoteAccess=mGuardHTTPSRemoteAccess, mGuardUSMem=mGuardUSMem, mGuardPkgVerFlavour=mGuardPkgVerFlavour, mGuardFWOUTlog=mGuardFWOUTlog, mGuardSerialPPPFWINdestinationIP=mGuardSerialPPPFWINdestinationIP, mGuardFWINlog=mGuardFWINlog, mGuardContFiltSMTPSrvrEntry=mGuardContFiltSMTPSrvrEntry, mGuardManuDate=mGuardManuDate, mGuardPPPOEpppdOptionsRowStatus=mGuardPPPOEpppdOptionsRowStatus, mGuardSerialPPPFWOUTEntry=mGuardSerialPPPFWOUTEntry, mGuardVPNFWOUTsport=mGuardVPNFWOUTsport, mGuardPPPOEpppdOptionsIndex=mGuardPPPOEpppdOptionsIndex, mGuardSerialPPPFWINdport=mGuardSerialPPPFWINdport, mGuardNetworkStatLanguage=mGuardNetworkStatLanguage, mGuardUserFWUserPassword=mGuardUserFWUserPassword, mGuardDHCPExtStaticMAC=mGuardDHCPExtStaticMAC, mGuardRouterLocalVlanId=mGuardRouterLocalVlanId, mGuardDHCPIntRangeStart=mGuardDHCPIntRangeStart, mGuardSNMPFWsourceIP=mGuardSNMPFWsourceIP, mGuardContFiltSMTPExceedAction=mGuardContFiltSMTPExceedAction, mGuardFWPORTFORWRowStatus=mGuardFWPORTFORWRowStatus, mGuardTrapAvUpdateError=mGuardTrapAvUpdateError, mGuardSNMPFWcomment=mGuardSNMPFWcomment, mGuardDHCPIntStaticIP=mGuardDHCPIntStaticIP, mGuardTrapAvFailed=mGuardTrapAvFailed, mGuardSerialPPPFWINlog=mGuardSerialPPPFWINlog, mGuardNTPtimestamp=mGuardNTPtimestamp, mGuardUpdateServerRowStatus=mGuardUpdateServerRowStatus, mGuardRouterRedundancyWantState=mGuardRouterRedundancyWantState, mGuardSerialBaud=mGuardSerialBaud, mGuardDHCPIntRelayCircuitText=mGuardDHCPIntRelayCircuitText, mGuardVPNFWOUTsourceIP=mGuardVPNFWOUTsourceIP, mGuardBladeCtrlBackup=mGuardBladeCtrlBackup, mGuardRouterLocalNetmask=mGuardRouterLocalNetmask, mGuardFWPORTFORWlog=mGuardFWPORTFORWlog, mGuardVPNFWOUTconIndex=mGuardVPNFWOUTconIndex, mGuardPPTPpppdOptionsRowStatus=mGuardPPTPpppdOptionsRowStatus, mGuardContFiltHTTPSrvrScanAction=mGuardContFiltHTTPSrvrScanAction, mGuardRouterExternStatic=mGuardRouterExternStatic, mGuardHTTPSFWtarget=mGuardHTTPSFWtarget, mGuardFWINruleIndex=mGuardFWINruleIndex, mGuardExternAliasRowStatus=mGuardExternAliasRowStatus, mGuardLoggingRemoteActivate=mGuardLoggingRemoteActivate, mGuardVPNRekeyMargin=mGuardVPNRekeyMargin, mGuardTrapResources=mGuardTrapResources, mGuardFirewall11NATRuleTable=mGuardFirewall11NATRuleTable, mGuardSerialPPPFWOUTTable=mGuardSerialPPPFWOUTTable, mGuardLocalAliasIndex=mGuardLocalAliasIndex, mGuardFirewallEnableConntrackFTP=mGuardFirewallEnableConntrackFTP, mGuardRouterHiDiscoveryExtern=mGuardRouterHiDiscoveryExtern, mGuardStealthIPConfMode=mGuardStealthIPConfMode, mGuardNTPServerEntry=mGuardNTPServerEntry, mGuardBladeCtrlProductID=mGuardBladeCtrlProductID, mGuardVPNL2TPpppdOptEntry=mGuardVPNL2TPpppdOptEntry, mGuardSerialPPPLogin=mGuardSerialPPPLogin, mGuardVPNFWOUTdestinationIP=mGuardVPNFWOUTdestinationIP, mGuardVPNconIndex=mGuardVPNconIndex, mGuardUserFWUserTable=mGuardUserFWUserTable, mGuardRouterExternDHCP=mGuardRouterExternDHCP, mGuardExternAliasIndex=mGuardExternAliasIndex, mGuardSerialPPPRemoteIP=mGuardSerialPPPRemoteIP, mGuardContFiltPOP3=mGuardContFiltPOP3, mGuardFirewallARPLimitExt=mGuardFirewallARPLimitExt, mGuardFirewallUserFWTemplateEntry=mGuardFirewallUserFWTemplateEntry, mGuardTrapAutoConfigAdapterState=mGuardTrapAutoConfigAdapterState, mGuardWebInterfaceLanguage=mGuardWebInterfaceLanguage, mGuardSNMPTrapConfigGroup=mGuardSNMPTrapConfigGroup, mGuardTResIndustrialTempLowLimit=mGuardTResIndustrialTempLowLimit, mGuardContFiltFTPSrvrRowStatus=mGuardContFiltFTPSrvrRowStatus, mGuardVPNNoCertReqSend=mGuardVPNNoCertReqSend, mGuardVPNProtoAH=mGuardVPNProtoAH, mGuardDHCPIntStaticMAC=mGuardDHCPIntStaticMAC, mGuardSerialPPPFWIN=mGuardSerialPPPFWIN, mGuardSSHRemoteFWRuleEntry=mGuardSSHRemoteFWRuleEntry, mGuardStealthStaticIP=mGuardStealthStaticIP, mGuardRouterLocalDevMTU=mGuardRouterLocalDevMTU, mGuardVPNNatTraversal=mGuardVPNNatTraversal, mGuardFWPORTFORWsrcIP=mGuardFWPORTFORWsrcIP, mGuardFWPORTFORWproto=mGuardFWPORTFORWproto, mGuardRouterRedExtHostCheckEntry=mGuardRouterRedExtHostCheckEntry, mGuardStealthManageUseVLAN=mGuardStealthManageUseVLAN, mGuardDHCPExtStaticIndex=mGuardDHCPExtStaticIndex, mGuardDHCPIntRelayMaxHop=mGuardDHCPIntRelayMaxHop, mGuardLocalAliasUseVLAN=mGuardLocalAliasUseVLAN, mGuardUserPwdEnable=mGuardUserPwdEnable, mGuardFirewallNATRuleEntry=mGuardFirewallNATRuleEntry, mGuardLocalAliasNetmask=mGuardLocalAliasNetmask, mGuardBootLoader=mGuardBootLoader, mGuardTrapAvFileNotScanned=mGuardTrapAvFileNotScanned, mGuardNTPStatus=mGuardNTPStatus, mGuardBladePwrStatus=mGuardBladePwrStatus, mGuardDNSCacheEnabled=mGuardDNSCacheEnabled, mGuardSystemTemperature=mGuardSystemTemperature, mGuardSerialPPPFWINcomment=mGuardSerialPPPFWINcomment, mGuardNTPServerIndex=mGuardNTPServerIndex, mGuardPPTPModemIP=mGuardPPTPModemIP, mGuardTrapBladeCTRL=mGuardTrapBladeCTRL, mGuardFirewallOutgoingEntry=mGuardFirewallOutgoingEntry, mGuardDHCPLastAccessMAC=mGuardDHCPLastAccessMAC, mGuardFWOUTdestinationIP=mGuardFWOUTdestinationIP, mGuardRADIUSServerPort=mGuardRADIUSServerPort, mGuardDNSUserDefinedServerTable=mGuardDNSUserDefinedServerTable, mGuardFWNATRowStatus=mGuardFWNATRowStatus, mGuardFWINtarget=mGuardFWINtarget, mGuardLoggingRemoteIP=mGuardLoggingRemoteIP, mGuardTResAV=mGuardTResAV, mGuardVPNDynDNSCheckDo=mGuardVPNDynDNSCheckDo)
mibBuilder.exportSymbols("MGUARDB-MIB", mGuardDHCPIntRelayRowStatus=mGuardDHCPIntRelayRowStatus, mGuardNTPServerRowStatus=mGuardNTPServerRowStatus, mGuardTrapBladeCtrlCfgBackup=mGuardTrapBladeCtrlCfgBackup, mGuardFWNATruleIndex=mGuardFWNATruleIndex, mGuardVPNL2TPRemoteIPRangeStart=mGuardVPNL2TPRemoteIPRangeStart, mGuardDNSUserDefinedServerEntry=mGuardDNSUserDefinedServerEntry, mGuardSerialPPP=mGuardSerialPPP, mGuardFWPORTFORWruleIndex=mGuardFWPORTFORWruleIndex, mGuardContFiltPOP3SrvrRowStatus=mGuardContFiltPOP3SrvrRowStatus, mGuardRouterLocalAliasesEntry=mGuardRouterLocalAliasesEntry, mGuardSNMPTrapReceiverEntry=mGuardSNMPTrapReceiverEntry, mGuardContFiltFTPVirusAction=mGuardContFiltFTPVirusAction, mGuardDHCPIntBroadcast=mGuardDHCPIntBroadcast, mGuardVPNL2TPpppdOptTable=mGuardVPNL2TPpppdOptTable, mGuardTrapRouterRedundancy=mGuardTrapRouterRedundancy, mGuardExternRouteIndex=mGuardExternRouteIndex, mGuardSNMPRouterRedundancyStatusFlag=mGuardSNMPRouterRedundancyStatusFlag, mGuardSSHRemoteAccess=mGuardSSHRemoteAccess, mGuardSerialPPPPasswd=mGuardSerialPPPPasswd, mGuardPackageVersionEntry=mGuardPackageVersionEntry, mGuardRouterExternVlanId=mGuardRouterExternVlanId, mGuardb=mGuardb, mGuardRouterRedundancyTrack=mGuardRouterRedundancyTrack, mGuardDHCPExtRelayServerIndex=mGuardDHCPExtRelayServerIndex, mGuardTResAvVirusDetected=mGuardTResAvVirusDetected, mGuardVPNDPDDelay=mGuardVPNDPDDelay, mGuardSNMPTrapReceiverIndex=mGuardSNMPTrapReceiverIndex, mGuardContFiltAVPServerTable=mGuardContFiltAVPServerTable, mGuardDHCPExtRelayServerIP=mGuardDHCPExtRelayServerIP, mGuardFWPORTFORWsrcport=mGuardFWPORTFORWsrcport, mGuardTResBladeInfo=mGuardTResBladeInfo, mGuardVPNNatTKeepAliveInterval=mGuardVPNNatTKeepAliveInterval, mGuardDHCPExtRangeEnd=mGuardDHCPExtRangeEnd, mGuardRouterRedIntHostCheckEntry=mGuardRouterRedIntHostCheckEntry, mGuardArpTimeout=mGuardArpTimeout, mGuardSSHFWsourceIP=mGuardSSHFWsourceIP, mGuardVPNSettings=mGuardVPNSettings, mGuardVPNL2TPpppdOptIndex=mGuardVPNL2TPpppdOptIndex, mGuardLocalAliasRowStatus=mGuardLocalAliasRowStatus, mGuardVPNDynDNSRegInterval=mGuardVPNDynDNSRegInterval, mGuardVPNDynDNSCheckRefresh=mGuardVPNDynDNSCheckRefresh, mGuardTResBladeSlotNr=mGuardTResBladeSlotNr, mGuardExternAliasUseVLAN=mGuardExternAliasUseVLAN, mGuardUserFWUserName=mGuardUserFWUserName, mGuardTrapAvUpdateDone=mGuardTrapAvUpdateDone, mGuardSerialPPPFWOUTcomment=mGuardSerialPPPFWOUTcomment, mGuardSerialPPPFWINRowStatus=mGuardSerialPPPFWINRowStatus, mGuardProductName=mGuardProductName, mGuarddnsServerIndex=mGuarddnsServerIndex, mGuardPkgIndex=mGuardPkgIndex, mGuardContFiltAVPpassSuspicious=mGuardContFiltAVPpassSuspicious, mGuardTrapBladeCtrlPowerStatus=mGuardTrapBladeCtrlPowerStatus, mGuardVPNFWOUTcomment=mGuardVPNFWOUTcomment, mGuardFirewallPortforwardTable=mGuardFirewallPortforwardTable, mGuardVPNMachinePrivate=mGuardVPNMachinePrivate, mGuardRouterRedundancyInternalID=mGuardRouterRedundancyInternalID, mGuarddnsServerIP=mGuarddnsServerIP, mGuardProfilePullHTTPSServer=mGuardProfilePullHTTPSServer, mGuardSerialPPPFWOUTlog=mGuardSerialPPPFWOUTlog, mGuardUpdateServerLogin=mGuardUpdateServerLogin, mGuardNetwork=mGuardNetwork, mGuardVPNNatTKeepAliveForce=mGuardVPNNatTKeepAliveForce, mGuardRouterRedundancyPeerIntern=mGuardRouterRedundancyPeerIntern, mGuardTResRedundacyReason=mGuardTResRedundacyReason, mGuardSNMPChassisTrapFlag=mGuardSNMPChassisTrapFlag, mGuardPPTPLogin=mGuardPPTPLogin, mGuardContFiltSMTPSrvrTable=mGuardContFiltSMTPSrvrTable, mGuardVPNL2TP=mGuardVPNL2TP, mGuardDHCPIntRelayCircuitInfo=mGuardDHCPIntRelayCircuitInfo, mGuardSNMPLinkUpDownTrapFlag=mGuardSNMPLinkUpDownTrapFlag, mGuardNTPServerHost=mGuardNTPServerHost, mGuardHardware=mGuardHardware, mGuardTrapColdstart=mGuardTrapColdstart, mGuardFirewallOutgoingTable=mGuardFirewallOutgoingTable, mGuardL2FilterExternRowStatus=mGuardL2FilterExternRowStatus, mGuardNetworkStatVPN=mGuardNetworkStatVPN, mGuardDHCPIntLeaseTime=mGuardDHCPIntLeaseTime, mGuardNetworkStatUptime=mGuardNetworkStatUptime, mGuardVPNStrictCRLPolicy=mGuardVPNStrictCRLPolicy, mGuardRouterExternUseVLAN=mGuardRouterExternUseVLAN, mGuardNetworkSoftwareVersion=mGuardNetworkSoftwareVersion, mGuardDHCPExtStaticRowStatus=mGuardDHCPExtStaticRowStatus, mGuardPPPOEpppdOptionsEntry=mGuardPPPOEpppdOptionsEntry, mGuardContFiltPOP3VirusAction=mGuardContFiltPOP3VirusAction, mGuardRouterLocalIP=mGuardRouterLocalIP, mGuardHTTPSLastAccessIP=mGuardHTTPSLastAccessIP, mGuardTResSigLinkID=mGuardTResSigLinkID, mGuardContFiltSMTPSrvrIndex=mGuardContFiltSMTPSrvrIndex, mGuardContFiltAVPServerURL=mGuardContFiltAVPServerURL, mGuardFirewall11NATRuleEntry=mGuardFirewall11NATRuleEntry, mGuardRouterRedundancy=mGuardRouterRedundancy, mGuardVPNFWINdestinationIP=mGuardVPNFWINdestinationIP, mGuardFirewallConntrackH323=mGuardFirewallConntrackH323, mGuardTrapIndustrialTemperature=mGuardTrapIndustrialTemperature, mGuardVPNconStartUp=mGuardVPNconStartUp, mGuardTrapMemoryFull=mGuardTrapMemoryFull, mGuardFirewallUserFW=mGuardFirewallUserFW, mGuardStealthL2ForwardDHCP=mGuardStealthL2ForwardDHCP, mGuardSNMPenableV1=mGuardSNMPenableV1, mGuardRouterExternStaticNetmask=mGuardRouterExternStaticNetmask, mGuardSNMPTrapReceiverCommunity=mGuardSNMPTrapReceiverCommunity, mGuardDHCPExtStaticIP=mGuardDHCPExtStaticIP, mGuardUsers=mGuardUsers, mGuardPPPOEpppdOptionsValue=mGuardPPPOEpppdOptionsValue, mGuardVPNRowStatus=mGuardVPNRowStatus, mGuardContFiltFTPEnable=mGuardContFiltFTPEnable, mGuardBladePwrIndex=mGuardBladePwrIndex, mGuardNetworkStatDynIPReg=mGuardNetworkStatDynIPReg, mGuardSerialHWHandshakeEnable=mGuardSerialHWHandshakeEnable, mGuardUpdates=mGuardUpdates, mGuardRouterExternAliasesTable=mGuardRouterExternAliasesTable, mGuardFirewallICMPLimitExt=mGuardFirewallICMPLimitExt, mGuardFirewallUserFWTemplateRuleDstPort=mGuardFirewallUserFWTemplateRuleDstPort, mGuardContFiltPOP3SrvrTable=mGuardContFiltPOP3SrvrTable, mGuardRADIUSServerEntry=mGuardRADIUSServerEntry, mGuardTrapSignalRelais=mGuardTrapSignalRelais, mGuardProfilePullHTTPSLogin=mGuardProfilePullHTTPSLogin, mGuardBladePwrTable=mGuardBladePwrTable, mGuardVPNvirtIPMethod=mGuardVPNvirtIPMethod, mGuardFirewallUserFWTemplateTimeout=mGuardFirewallUserFWTemplateTimeout, mGuardStealthL2ForwardGVRP=mGuardStealthL2ForwardGVRP, mGuardHTTPSFWlog=mGuardHTTPSFWlog, mGuardContFiltAVPHTTPProxyLogin=mGuardContFiltAVPHTTPProxyLogin, mGuardContFiltAVPpassWarnings=mGuardContFiltAVPpassWarnings, mGuardManufacturer=mGuardManufacturer, mGuardLocalRouteIndex=mGuardLocalRouteIndex, mGuardFirewall=mGuardFirewall, mGuardBladeCtrlAVRRevision=mGuardBladeCtrlAVRRevision, mGuardFirewallUserFWTemplateUserRowStatus=mGuardFirewallUserFWTemplateUserRowStatus, mGuardVPNL2TPStart=mGuardVPNL2TPStart, mGuardDHCPExtStaticTable=mGuardDHCPExtStaticTable, mGuardRootPassword=mGuardRootPassword, mGuardUpdateServerHost=mGuardUpdateServerHost, mGuardVPNL2TPpppdOptValue=mGuardVPNL2TPpppdOptValue, mGuardSNMPAvFailTrapFlag=mGuardSNMPAvFailTrapFlag, mGuardFirewallUserFWTemplateRuleProto=mGuardFirewallUserFWTemplateRuleProto, mGuardDHCPIntNetmask=mGuardDHCPIntNetmask, mGuardSerialPPPFWOUTruleIndex=mGuardSerialPPPFWOUTruleIndex, mGuardUserFWUserEntry=mGuardUserFWUserEntry, mGuardBlade=mGuardBlade, mGuardVPNauthType=mGuardVPNauthType, mGuardVPNProtoESP=mGuardVPNProtoESP, mGuardFirewallICMPLimitInt=mGuardFirewallICMPLimitInt, mGuardDHCPIntRelayServerIP=mGuardDHCPIntRelayServerIP, mGuardContFiltHTTPSrvrIndex=mGuardContFiltHTTPSrvrIndex, mGuardContFiltFTPSrvrPort=mGuardContFiltFTPSrvrPort, mGuardVPNIkeLog=mGuardVPNIkeLog, mGuardTResIndustrial=mGuardTResIndustrial, mGuardFirewallUserFWTemplateUserIndex=mGuardFirewallUserFWTemplateUserIndex, mGuardSNMPFWlog=mGuardSNMPFWlog, mGuardTrapRouterRedundancyBackupDown=mGuardTrapRouterRedundancyBackupDown, mGuardRouterExternStaticIP=mGuardRouterExternStaticIP, mGuardBladeCtrlRestore=mGuardBladeCtrlRestore, mGuardFirewallUserFWTemplateComment=mGuardFirewallUserFWTemplateComment, mGuardFWOUTtarget=mGuardFWOUTtarget, mGuardContFiltAVPSchedule=mGuardContFiltAVPSchedule, mGuardFirewallIPConntrackMax=mGuardFirewallIPConntrackMax, mGuardPPPOEHostUnique=mGuardPPPOEHostUnique, mGuardVPNKeyingTries=mGuardVPNKeyingTries, mGuardFWOUTdport=mGuardFWOUTdport, mGuardRouterRedIntHostCheckTable=mGuardRouterRedIntHostCheckTable, mGuardDHCPExtRelayServerEntry=mGuardDHCPExtRelayServerEntry, mGuardSSHFWRowStatus=mGuardSSHFWRowStatus, mGuardVPNconEnabled=mGuardVPNconEnabled, mGuardTrapIndustrialPowerStatus=mGuardTrapIndustrialPowerStatus, mGuardVPNpfs=mGuardVPNpfs, mGuardPPTPpppdOptionsIndex=mGuardPPTPpppdOptionsIndex, mGuardVPNDynDNS=mGuardVPNDynDNS, mGuardVPNpsk=mGuardVPNpsk, mGuardStealthManageActivate=mGuardStealthManageActivate, mGuardStealthStaticMAC=mGuardStealthStaticMAC, mGuardHostnameMode=mGuardHostnameMode, mGuardHardwareVersion=mGuardHardwareVersion, mGuardFirewallINLogDefault=mGuardFirewallINLogDefault, mGuardRouterExternAliasesEntry=mGuardRouterExternAliasesEntry, mGuardDHCPIntRelayRemoteText=mGuardDHCPIntRelayRemoteText, mGuardRouterRedundancyExternalID=mGuardRouterRedundancyExternalID, mGuardVPNFWINlog=mGuardVPNFWINlog, mGuardContFiltFTP=mGuardContFiltFTP, mGuardRouterRedundancyEnable=mGuardRouterRedundancyEnable, mGuardFirewallARPLimitInt=mGuardFirewallARPLimitInt, mGuardLocalAliasVLANid=mGuardLocalAliasVLANid, mGuardVPNlocal=mGuardVPNlocal, mGuardDHCPIntStaticRowStatus=mGuardDHCPIntStaticRowStatus, mGuardVPNHideTos=mGuardVPNHideTos, mGuardVPNFW=mGuardVPNFW, mGuardContFiltSMTPSrvrPort=mGuardContFiltSMTPSrvrPort, mGuardStealthMTU=mGuardStealthMTU, mGuardTResBladeCtrlCfg=mGuardTResBladeCtrlCfg, mGuardSerialPPPFWINEntry=mGuardSerialPPPFWINEntry, mGuardUpdateServerPassword=mGuardUpdateServerPassword, mGuardProfilePullHTTPSCert=mGuardProfilePullHTTPSCert, mGuardContFiltSMTP=mGuardContFiltSMTP, mGuardFW11NATLog=mGuardFW11NATLog, mGuardNTPTimezone=mGuardNTPTimezone, mGuardContFiltAVPLogLevel=mGuardContFiltAVPLogLevel, mGuardTResAvFailed=mGuardTResAvFailed, mGuardTResSignalRelaisMode=mGuardTResSignalRelaisMode, mGuardContFiltQuarantineError=mGuardContFiltQuarantineError, mGuardVPNFWINruleIndex=mGuardVPNFWINruleIndex, mGuardVPNRekey=mGuardVPNRekey, mGuardContFiltFTPMaxSize=mGuardContFiltFTPMaxSize, mGuardVPNDynDNSRegPasswd=mGuardVPNDynDNSRegPasswd, mGuardPackageVersionTable=mGuardPackageVersionTable, mGuardVPNFWOUTtarget=mGuardVPNFWOUTtarget, mGuardHTTPSRemotePort=mGuardHTTPSRemotePort, mGuardL2FilterExternSrcMac=mGuardL2FilterExternSrcMac, mGuardSNMPFWruleIndex=mGuardSNMPFWruleIndex, mGuardVPNikeDH=mGuardVPNikeDH, mGuardFirewallUserFWTemplateRuleIndex=mGuardFirewallUserFWTemplateRuleIndex, mGuardContFiltPOP3SrvrScanAction=mGuardContFiltPOP3SrvrScanAction, mGuardPSState=mGuardPSState, mGuardDHCPExtGateway=mGuardDHCPExtGateway, mGuardSerial=mGuardSerial, mGuardContFiltAVPpassCorrupt=mGuardContFiltAVPpassCorrupt, mGuardContFiltSMTPMaxSize=mGuardContFiltSMTPMaxSize, mGuardWebInterfaceApplyButtonScope=mGuardWebInterfaceApplyButtonScope, mGuardFirewallUserFWTemplateRuleSrcPort=mGuardFirewallUserFWTemplateRuleSrcPort, mGuardVPNFWINcomment=mGuardVPNFWINcomment, mGuardContFiltPOP3SrvrIndex=mGuardContFiltPOP3SrvrIndex, mGuardPPPOEAccessConcentName=mGuardPPPOEAccessConcentName, mGuardSNMPFWRowStatus=mGuardSNMPFWRowStatus, mGuardContFiltSMTPEnable=mGuardContFiltSMTPEnable, mGuardDHCPIntRangeEnd=mGuardDHCPIntRangeEnd, mGuardUptime=mGuardUptime, mGuardContFiltSMTPSrvrScanAction=mGuardContFiltSMTPSrvrScanAction, mGuardSerialPPPFWINsport=mGuardSerialPPPFWINsport, mGuardProfilePullHTTPSFile=mGuardProfilePullHTTPSFile, mGuardRouterLocalActivate=mGuardRouterLocalActivate, mGuardContFiltAVPpass=mGuardContFiltAVPpass, mGuardContFiltAVPScanTimeout=mGuardContFiltAVPScanTimeout, mGuardL2FilterExternEthType=mGuardL2FilterExternEthType, mGuardProfilePullHTTPSPort=mGuardProfilePullHTTPSPort, mGuardContFiltAVP=mGuardContFiltAVP, mGuardVPNLocalIDMode=mGuardVPNLocalIDMode, mGuardDHCPIntRelayServerTable=mGuardDHCPIntRelayServerTable, mGuardRouterRedundancyVirtIpInt=mGuardRouterRedundancyVirtIpInt, mGuardTrapDiscFull=mGuardTrapDiscFull, mGuardSNMPv1ROCommunity=mGuardSNMPv1ROCommunity, mGuardContFiltHTTPExceedAction=mGuardContFiltHTTPExceedAction, mGuardContFiltInfo=mGuardContFiltInfo, mGuardUserFWUserRowStatus=mGuardUserFWUserRowStatus, mGuardVPNremoteMask=mGuardVPNremoteMask, mGuardUpdateServerEntry=mGuardUpdateServerEntry, mGuardRouterLocalUseVLAN=mGuardRouterLocalUseVLAN, mGuardRouterRedIntHostCheckRowSt=mGuardRouterRedIntHostCheckRowSt, mGuardBladeRackID=mGuardBladeRackID, mGuardLocalRoutesTable=mGuardLocalRoutesTable, innominate=innominate, mGuardVPNFWOUTproto=mGuardVPNFWOUTproto, mGuardBladeCtrlFlashID=mGuardBladeCtrlFlashID, mGuardContFiltHTTPSrvrComment=mGuardContFiltHTTPSrvrComment, mGuardVPNRekeyFuzz=mGuardVPNRekeyFuzz, mGuardRouterExternDevMTU=mGuardRouterExternDevMTU)
mibBuilder.exportSymbols("MGUARDB-MIB", mGuardFWOUTruleIndex=mGuardFWOUTruleIndex, mGuardVPNRemoteID=mGuardVPNRemoteID, mGuardPPTPLocalIP=mGuardPPTPLocalIP, mGuardVPNconType=mGuardVPNconType, mGuardStealthHiDiscoveryRelay=mGuardStealthHiDiscoveryRelay, mGuardDHCPIntDnsServer=mGuardDHCPIntDnsServer, mGuardSNMPFWRuleEntry=mGuardSNMPFWRuleEntry, mGuardPPTPLocalIPMode=mGuardPPTPLocalIPMode, mGuardContFiltPOP3SrvrPort=mGuardContFiltPOP3SrvrPort, mGuardDHCPExtNetmask=mGuardDHCPExtNetmask, mGuardBladeCtrlTable=mGuardBladeCtrlTable, mGuardSerialPPPFWOUTdport=mGuardSerialPPPFWOUTdport, mGuardFirewallUserFWTemplateEnabled=mGuardFirewallUserFWTemplateEnabled, mGuardUpdateServerProto=mGuardUpdateServerProto, mGuardRouterRedundancyPeerExtern=mGuardRouterRedundancyPeerExtern, mGuardProfilePull=mGuardProfilePull, mGuardPPPOEPasswd=mGuardPPPOEPasswd, mGuardPPTPpppdOptionsValue=mGuardPPTPpppdOptionsValue, mGuardFWPORTFORWcomment=mGuardFWPORTFORWcomment, mGuardInfo=mGuardInfo, mGuardVPNFWINproto=mGuardVPNFWINproto, mGuardProdSoft=mGuardProdSoft, mGuardExternAliasVLANid=mGuardExternAliasVLANid, mGuardContFiltPOP3MaxSize=mGuardContFiltPOP3MaxSize, mGuardTrapPlatformSpecific=mGuardTrapPlatformSpecific, mGuardStealth=mGuardStealth, mGuardL2FilterInternEntry=mGuardL2FilterInternEntry, mGuardDHCPIntRelayServerEntry=mGuardDHCPIntRelayServerEntry, mGuardPPPOEServiceName=mGuardPPPOEServiceName, mGuardFWINRowStatus=mGuardFWINRowStatus, mGuardRouterHiDiscovery=mGuardRouterHiDiscovery, mGuardVPNMachine=mGuardVPNMachine, mGuardExternRoutesEntry=mGuardExternRoutesEntry, mGuardTrapAV=mGuardTrapAV, mGuardCPU=mGuardCPU, mGuardLocalRouteNetwork=mGuardLocalRouteNetwork, mGuardPkgVerVersion=mGuardPkgVerVersion, mGuardContFiltAVPServerIndex=mGuardContFiltAVPServerIndex, mGuardDHCPExtStart=mGuardDHCPExtStart, mGuardDHCPInt=mGuardDHCPInt, mGuardDHCPExtDnsServer=mGuardDHCPExtDnsServer, mGuardRouterLocal=mGuardRouterLocal, mGuardTResSignalRelaisManualStat=mGuardTResSignalRelaisManualStat, mGuardDHCPIntRelayServerIndex=mGuardDHCPIntRelayServerIndex, mGuardDHCPExtStaticEntry=mGuardDHCPExtStaticEntry, mGuardVPNikeAlg=mGuardVPNikeAlg, mGuardPasswords=mGuardPasswords, mGuardSNMPTrapReceiverIPAddress=mGuardSNMPTrapReceiverIPAddress, mGuardVPNDynDNSRegServer=mGuardVPNDynDNSRegServer, mGuardContFiltAVPMaxConnections=mGuardContFiltAVPMaxConnections, mGuardRADIUSServerRowStatus=mGuardRADIUSServerRowStatus, mGuardTrapBladeCtrlCfgRestored=mGuardTrapBladeCtrlCfgRestored, mGuardHTTPSFWsourceIP=mGuardHTTPSFWsourceIP, mGuardContFiltQuarantineSrvPort=mGuardContFiltQuarantineSrvPort, mGuardRouterExternDevVlanMTU=mGuardRouterExternDevVlanMTU, mGuardVPNConnectionTable=mGuardVPNConnectionTable, mGuardDHCPExtWINS=mGuardDHCPExtWINS, mGuardAdminPassword=mGuardAdminPassword, mGuardTResSignalRelaisPowerAlarm=mGuardTResSignalRelaisPowerAlarm, mGuardL2FilterExternComment=mGuardL2FilterExternComment, mGuardDHCPIntRelayRemoteInfo=mGuardDHCPIntRelayRemoteInfo, mGuardContFiltPOP3SrvrIP=mGuardContFiltPOP3SrvrIP, mGuardFW11NATLocal=mGuardFW11NATLocal, mGuardNTPServerTable=mGuardNTPServerTable, mGuardWebInterfaceSessionTimeout=mGuardWebInterfaceSessionTimeout, mGuardTrapRouterRedundancyStatusChange=mGuardTrapRouterRedundancyStatusChange, mGuardContFiltFTPSrvrTable=mGuardContFiltFTPSrvrTable, mGuardDHCPExtRelayRowStatus=mGuardDHCPExtRelayRowStatus, mGuardTResAvFileNotScanned=mGuardTResAvFileNotScanned, mGuardVPNIpsecLifetime=mGuardVPNIpsecLifetime, mGuardRouterRedExtHostCheckRowSt=mGuardRouterRedExtHostCheckRowSt, mGuardVPN=mGuardVPN, mGuardUserFWUsers=mGuardUserFWUsers, mGuardSNMPenableV3=mGuardSNMPenableV3, mGuardFWINsport=mGuardFWINsport, mGuardRouterRedExtHostCheckIndex=mGuardRouterRedExtHostCheckIndex, mGuardSerialPPPFWOUTproto=mGuardSerialPPPFWOUTproto, mGuardTResSignalRelaisState=mGuardTResSignalRelaisState, mGuardVPNremote=mGuardVPNremote, mGuardFirewallUserFWTemplateRuleTemplateIndex=mGuardFirewallUserFWTemplateRuleTemplateIndex, mGuardDHCP=mGuardDHCP, mGuardSysProduct=mGuardSysProduct, mGuardNetworkStatGateway=mGuardNetworkStatGateway, mGuardLocalAliasIpAddress=mGuardLocalAliasIpAddress, mGuardUpdateServerTable=mGuardUpdateServerTable, mGuardVPNipsecAlg=mGuardVPNipsecAlg, mGuardAction=mGuardAction, mGuardDHCPExtPoolEnable=mGuardDHCPExtPoolEnable, mGuardNetworkStatExtIP=mGuardNetworkStatExtIP, mGuardFirewallICMPPolicy=mGuardFirewallICMPPolicy, mGuardStealthVlanMTU=mGuardStealthVlanMTU, mGuardVPNlocalNet=mGuardVPNlocalNet, mGuardFWINcomment=mGuardFWINcomment, mGuardVPNFWLogDefOut=mGuardVPNFWLogDefOut, mGuardDHCPIntRelayAppend=mGuardDHCPIntRelayAppend, mGuardDHCPExtLeaseTime=mGuardDHCPExtLeaseTime, mGuardBladeCtrlVersion=mGuardBladeCtrlVersion, mGuardTResBladeCtrlPowerStatus=mGuardTResBladeCtrlPowerStatus, mGuardL2FilterInternTarget=mGuardL2FilterInternTarget, mGuardFirewallOUTLogDefault=mGuardFirewallOUTLogDefault, mGuardContFiltPOP3ExceedAction=mGuardContFiltPOP3ExceedAction, mGuardLocalRoutesEntry=mGuardLocalRoutesEntry, mGuardSSHRemoteFWRuleTable=mGuardSSHRemoteFWRuleTable, mGuardHTTPSLoginTrap=mGuardHTTPSLoginTrap, mGuardFirewallUserFWTemplateRuleLog=mGuardFirewallUserFWTemplateRuleLog, mGuardL2FilterInternTable=mGuardL2FilterInternTable, mGuardStealthManageNetmask=mGuardStealthManageNetmask, mGuardSerialPPPLocalIP=mGuardSerialPPPLocalIP, mGuardPPTP=mGuardPPTP, mGuardContFiltFTPExceedAction=mGuardContFiltFTPExceedAction, mGuardBladeSlotID=mGuardBladeSlotID, mGuardFWOUTsport=mGuardFWOUTsport, mGuardFirewallIpUncleanMatch=mGuardFirewallIpUncleanMatch, mGuardPkgName=mGuardPkgName, mGuardSNMPTrapFlag=mGuardSNMPTrapFlag, mGuardDHCPExtBroadcast=mGuardDHCPExtBroadcast, mGuardDHCPIntStart=mGuardDHCPIntStart, mGuardMAC2=mGuardMAC2, mGuardFWOUTsourceIP=mGuardFWOUTsourceIP, mGuardContFiltAVPServerRowStatus=mGuardContFiltAVPServerRowStatus, mGuardContFiltHTTPSrvrEntry=mGuardContFiltHTTPSrvrEntry, mGuardSNMPTrapReceiverTable=mGuardSNMPTrapReceiverTable, mGuardDHCPExtRelayCircuitInfo=mGuardDHCPExtRelayCircuitInfo, mGuardFirewallNAT=mGuardFirewallNAT, mGuardRADIUSRetries=mGuardRADIUSRetries, mGuardDHCPIntStaticIndex=mGuardDHCPIntStaticIndex, mGuardNetworkMode=mGuardNetworkMode, mGuardRouterRedundancyVirtIpExt=mGuardRouterRedundancyVirtIpExt, mGuardDNSServerType=mGuardDNSServerType, mGuardSerialPPPFWOUTsourceIP=mGuardSerialPPPFWOUTsourceIP, mGuardFirewallUserFWTemplateUserEntry=mGuardFirewallUserFWTemplateUserEntry, mGuardContFiltFTPSrvrComment=mGuardContFiltFTPSrvrComment, mGuardVPNL2TPRemoteIPRangeEnd=mGuardVPNL2TPRemoteIPRangeEnd, mGuardTResBladeCtrlRunStatus=mGuardTResBladeCtrlRunStatus, mGuardSerialPPPFWOUTLogDefault=mGuardSerialPPPFWOUTLogDefault, mGuardVPNFWINconIndex=mGuardVPNFWINconIndex, mGuardFirewallPortforwardEntry=mGuardFirewallPortforwardEntry, mGuardFirewallUserFWTemplateName=mGuardFirewallUserFWTemplateName, mGuardRADIUSServerTable=mGuardRADIUSServerTable, mGuardL2FilterInternDstMac=mGuardL2FilterInternDstMac, mGuardNetworkStatSSHRemoteAccess=mGuardNetworkStatSSHRemoteAccess, mGuardContFiltHTTP=mGuardContFiltHTTP, mGuardFirewallUserFWTemplateSrcIP=mGuardFirewallUserFWTemplateSrcIP, mGuardFirewallUserFWEnabled=mGuardFirewallUserFWEnabled, mGuardHostname=mGuardHostname, mGuardSSHFWruleIndex=mGuardSSHFWruleIndex, mGuardCPUSpeed=mGuardCPUSpeed, mGuardTResIndustrialTempHiLimit=mGuardTResIndustrialTempHiLimit, mGuardContFiltHTTPMaxSize=mGuardContFiltHTTPMaxSize, mGuardFWINdport=mGuardFWINdport, mGuardVPNDynDNSRegProvider=mGuardVPNDynDNSRegProvider, mGuardVersion=mGuardVersion, mGuardPPPOEpppdOptionsTable=mGuardPPPOEpppdOptionsTable, mGuardSerialPPPFWOUT=mGuardSerialPPPFWOUT, mGuardTResBladeCtrlCfgRestored=mGuardTResBladeCtrlCfgRestored, mGuardTResIndustrialPower=mGuardTResIndustrialPower, mGuardFirewall11NAT=mGuardFirewall11NAT, mGuardFWNATIP=mGuardFWNATIP, mGuardVPNIkeLifetime=mGuardVPNIkeLifetime, mGuardTResBladeCTRL=mGuardTResBladeCTRL, mGuardVPNvirtIP=mGuardVPNvirtIP, mGuardFirewallIncomingEntry=mGuardFirewallIncomingEntry, mGuardContFilt=mGuardContFilt, mGuardNetworkStatMode=mGuardNetworkStatMode, mGuardFW11NATRowStatus=mGuardFW11NATRowStatus, mGuardStealthManageGateway=mGuardStealthManageGateway, mGuardStealthStaticActivate=mGuardStealthStaticActivate, mGuardRouterRedIntHostCheckIP=mGuardRouterRedIntHostCheckIP, mGuardDHCPExtRelayMaxHop=mGuardDHCPExtRelayMaxHop, mGuardVPNFWINTable=mGuardVPNFWINTable, mGuardSSHFWtarget=mGuardSSHFWtarget, mGuardFWOUTproto=mGuardFWOUTproto, mGuardRouterExtern=mGuardRouterExtern, mGuardFirewallIPSynfloodLimitExt=mGuardFirewallIPSynfloodLimitExt, mGuardRouterExternStaticGateway=mGuardRouterExternStaticGateway, mGuardRouterRedundancyPriority=mGuardRouterRedundancyPriority, mGuardVPNlocalMask=mGuardVPNlocalMask, mGuardContFiltAVPHTTPProxyPasswd=mGuardContFiltAVPHTTPProxyPasswd, mGuardVPNFWINtarget=mGuardVPNFWINtarget, mGuardTrapIndustrial=mGuardTrapIndustrial, mGuardVPNFWOUTruleIndex=mGuardVPNFWOUTruleIndex, mGuardTResAvUpdateDone=mGuardTResAvUpdateDone, mGuardRouterHiDiscoveryIntern=mGuardRouterHiDiscoveryIntern, mGuardDHCPIntRelayAppendLimit=mGuardDHCPIntRelayAppendLimit, mGuardSerialPPPEnable=mGuardSerialPPPEnable, mGuardContFiltFTPSrvrIndex=mGuardContFiltFTPSrvrIndex, mGuardSerialPPPFWINTable=mGuardSerialPPPFWINTable, mGuardVerParSet=mGuardVerParSet, mGuardVPNRemoteIDMode=mGuardVPNRemoteIDMode, mGuardDHCPExtRelayRemoteInfo=mGuardDHCPExtRelayRemoteInfo, mGuardNTPactivate=mGuardNTPactivate, mGuardProfilePullHTTPS=mGuardProfilePullHTTPS, mGuardHTTPSFWruleIndex=mGuardHTTPSFWruleIndex, mGuardVPNNatTPortfloating=mGuardVPNNatTPortfloating, mGuardRouterRedundancyPassword=mGuardRouterRedundancyPassword, mGuardDHCPIntGateway=mGuardDHCPIntGateway, mGuardTraps=mGuardTraps, mGuardPSSysID=mGuardPSSysID, mGuardShellLastAccessIP=mGuardShellLastAccessIP, mGuardRouterExternActivate=mGuardRouterExternActivate, mGuardPSTable=mGuardPSTable, mGuardExternAliasNetmask=mGuardExternAliasNetmask, mGuardUpdate=mGuardUpdate, mGuardVPNDPDAction=mGuardVPNDPDAction, mGuardL2FilterInternComment=mGuardL2FilterInternComment, mGuardVPNDynDNSCheck=mGuardVPNDynDNSCheck, mGuardSerialPPPFWOUTRowStatus=mGuardSerialPPPFWOUTRowStatus, mGuardLocalRouteGateway=mGuardLocalRouteGateway, mGuardContFiltSMTPVirusAction=mGuardContFiltSMTPVirusAction, mGuardBladeCtrlStatus=mGuardBladeCtrlStatus, mGuardFWPORTFORWoutIP=mGuardFWPORTFORWoutIP, mGuardFirewallUserFWTemplateIndex=mGuardFirewallUserFWTemplateIndex, mGuardContFiltAVPHTTPProxyServer=mGuardContFiltAVPHTTPProxyServer, mGuardUserFWUserIndex=mGuardUserFWUserIndex, mGuardVPNFWOUTEntry=mGuardVPNFWOUTEntry, mGuardUpdateServer=mGuardUpdateServer, mGuardTResPlatformSpecific=mGuardTResPlatformSpecific, mGuardDHCPIntWINS=mGuardDHCPIntWINS, mGuardRedundancy=mGuardRedundancy, mGuardHTTPSFWcomment=mGuardHTTPSFWcomment, mGuardStealthManageVLanID=mGuardStealthManageVLanID, mGuardContFiltFTPSrvrIP=mGuardContFiltFTPSrvrIP, mGuardContFiltFTPSrvrScanAction=mGuardContFiltFTPSrvrScanAction, mGuardBladePwrEntry=mGuardBladePwrEntry, mGuardVPNLocalID=mGuardVPNLocalID, mGuardSerialPPPFWINLogDefault=mGuardSerialPPPFWINLogDefault, mGuardFWOUTcomment=mGuardFWOUTcomment, mGuardDNS=mGuardDNS, mGuardRouterRedExtHostCheckTable=mGuardRouterRedExtHostCheckTable, mGuardSNMPBladeConfigTrapFlag=mGuardSNMPBladeConfigTrapFlag, mGuardExternAliasIpAddress=mGuardExternAliasIpAddress, mGuardRouterRedundancyState=mGuardRouterRedundancyState, mGuardPPTPpppdOptionsEntry=mGuardPPTPpppdOptionsEntry, mGuardTrapBladeCtrlCfg=mGuardTrapBladeCtrlCfg, mGuardFWPORTFORWinIP=mGuardFWPORTFORWinIP, mGuardUserPassword=mGuardUserPassword, mGuardVPNDynDNSRegHostname=mGuardVPNDynDNSRegHostname, mGuardHardwareInformation=mGuardHardwareInformation, mGuardTResRedundacyBackupDown=mGuardTResRedundacyBackupDown, mGuardRADIUSServerIndex=mGuardRADIUSServerIndex, mGuardVPNDynDNSReg=mGuardVPNDynDNSReg, mGuardDNSSearchPath=mGuardDNSSearchPath, mGuardWebInterface=mGuardWebInterface, mGuardVersions=mGuardVersions, mGuardPkgVerNum=mGuardPkgVerNum, mGuardHTTPSRemoteEnable=mGuardHTTPSRemoteEnable, mGuardSystem=mGuardSystem, mGuardSNMPAvInfoTrapFlag=mGuardSNMPAvInfoTrapFlag, mGuardFirewallUserFWTemplateRuleTable=mGuardFirewallUserFWTemplateRuleTable, mGuardExternRouteRowStatus=mGuardExternRouteRowStatus, mGuardDHCPExtRangeStart=mGuardDHCPExtRangeStart, mGuardVPNDynDNSRegister=mGuardVPNDynDNSRegister, mGuardSerialPPPFWINsourceIP=mGuardSerialPPPFWINsourceIP, mGuardTResSignalRelaisReasonIdx=mGuardTResSignalRelaisReasonIdx)
mibBuilder.exportSymbols("MGUARDB-MIB", mGuardBladeCtrlSerial=mGuardBladeCtrlSerial, mGuardFirewallNATRuleTable=mGuardFirewallNATRuleTable, mGuardRouterLocalDevVlanMTU=mGuardRouterLocalDevVlanMTU, mGuardFirewallIncoming=mGuardFirewallIncoming, mGuardPPPOELogin=mGuardPPPOELogin, mGuardContFiltSMTPSrvrRowStatus=mGuardContFiltSMTPSrvrRowStatus, mGuardShellLoginTrap=mGuardShellLoginTrap, mGuardVPNDPDTimeout=mGuardVPNDPDTimeout, mGuardFirewallExtended=mGuardFirewallExtended, mGuardTResCpuLoadHigh=mGuardTResCpuLoadHigh, mGuardFirewallConntrackIRC=mGuardFirewallConntrackIRC, mGuardContFiltSMTPSrvrIP=mGuardContFiltSMTPSrvrIP, mGuardLoggingRemotePort=mGuardLoggingRemotePort, mGuardFirewallIPSynfloodLimitInt=mGuardFirewallIPSynfloodLimitInt, mGuardNetworkStatHTTPSRemAccess=mGuardNetworkStatHTTPSRemAccess, mGuardSNMPport=mGuardSNMPport, mGuardSNMPFWinterface=mGuardSNMPFWinterface, mGuardHTTPSRemoteFWRuleEntry=mGuardHTTPSRemoteFWRuleEntry, mGuardStealthInterface=mGuardStealthInterface, mGuardHTTPSRemoteFWRuleTable=mGuardHTTPSRemoteFWRuleTable, mGuardContFiltPOP3Enable=mGuardContFiltPOP3Enable, mGuardVPNFWINEntry=mGuardVPNFWINEntry, mGuardVPNremoteNet=mGuardVPNremoteNet, mGuardSSHRemotePort=mGuardSSHRemotePort, mGuardContFiltFTPSrvrEntry=mGuardContFiltFTPSrvrEntry, mGuardVPNFWOUTdport=mGuardVPNFWOUTdport, mGuardFirewallUserFWTemplateUserName=mGuardFirewallUserFWTemplateUserName, mGuardStealthIPConfStatic=mGuardStealthIPConfStatic, mGuardPPTPassword=mGuardPPTPassword, mGuardContFiltHTTPEnable=mGuardContFiltHTTPEnable, mGuardProfile=mGuardProfile, mGuardBladeCtrlSlotID=mGuardBladeCtrlSlotID, mGuardSNMPv1RWCommunity=mGuardSNMPv1RWCommunity, mGuardVPNFWLogDefIn=mGuardVPNFWLogDefIn, mGuardFirewallUserFWTemplateRuleRowStatus=mGuardFirewallUserFWTemplateRuleRowStatus, mGuardBladeCtrlAssemblyID=mGuardBladeCtrlAssemblyID, mGuardProfilePullSchedule=mGuardProfilePullSchedule, mGuardRADIUSServerHostname=mGuardRADIUSServerHostname, mGuardSNMPAuthenticationTrapFlag=mGuardSNMPAuthenticationTrapFlag, mGuardTResSigLinkAlarm=mGuardTResSigLinkAlarm, mGuardRADIUS=mGuardRADIUS, mGuardFirewallUserFWTemplateTable=mGuardFirewallUserFWTemplateTable, mGuardTrapBladeCtrlRunStatus=mGuardTrapBladeCtrlRunStatus, mGuardTrapCpuLoadHigh=mGuardTrapCpuLoadHigh, mGuardSNMPFWtarget=mGuardSNMPFWtarget, mGuardFW11NATRemote=mGuardFW11NATRemote, mGuardVPNFWINsourceIP=mGuardVPNFWINsourceIP, mGuardContFiltQuarantineClean=mGuardContFiltQuarantineClean, mGuardSNMPTrapReceiverName=mGuardSNMPTrapReceiverName)
