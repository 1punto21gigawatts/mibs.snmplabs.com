#
# PySNMP MIB module GENOSALARMNOTIFICATION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GENOSALARMNOTIFICATION-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:19:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Counter32, NotificationType, Integer32, enterprises, TimeTicks, Counter64, Bits, Unsigned32, IpAddress, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, iso, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter32", "NotificationType", "Integer32", "enterprises", "TimeTicks", "Counter64", "Bits", "Unsigned32", "IpAddress", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "iso", "ModuleIdentity")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
alcatel = MibIdentifier((1, 3, 6, 1, 4, 1, 637))
nmu = MibIdentifier((1, 3, 6, 1, 4, 1, 637, 65))
genos = MibIdentifier((1, 3, 6, 1, 4, 1, 637, 65, 1))
alarmHandoff = ModuleIdentity((1, 3, 6, 1, 4, 1, 637, 65, 1, 1))
if mibBuilder.loadTexts: alarmHandoff.setLastUpdated('9807030000Z')
if mibBuilder.loadTexts: alarmHandoff.setOrganization('Alcatel GENOS Development')
if mibBuilder.loadTexts: alarmHandoff.setContactInfo('')
if mibBuilder.loadTexts: alarmHandoff.setDescription('The MIB module for GENOS alarm handoff')
alarmHandoffObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 1))
unsolicitedEventsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unsolicitedEventsEnabled.setStatus('current')
if mibBuilder.loadTexts: unsolicitedEventsEnabled.setDescription('Status indicating if unsolicited alarm traps are to be generated')
alarmTable = MibTable((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 1, 2), )
if mibBuilder.loadTexts: alarmTable.setStatus('current')
if mibBuilder.loadTexts: alarmTable.setDescription('The list of currently raised alarms')
alarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 1, 2, 1), ).setIndexNames((0, "GENOSALARMNOTIFICATION-MIB", "currentAlarmId"))
if mibBuilder.loadTexts: alarmEntry.setStatus('current')
if mibBuilder.loadTexts: alarmEntry.setDescription('Each entry contains 1 alarm description')
class AlarmId(Counter32):
    subtypeSpec = Counter32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

currentAlarmId = MibTableColumn((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 1, 2, 1, 1), AlarmId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentAlarmId.setStatus('current')
if mibBuilder.loadTexts: currentAlarmId.setDescription('A unique identifier for an alarm')
friendlyName = MibTableColumn((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: friendlyName.setStatus('current')
if mibBuilder.loadTexts: friendlyName.setDescription('The source of the alarm in a human readable form')
eventTime = MibTableColumn((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventTime.setStatus('current')
if mibBuilder.loadTexts: eventTime.setDescription('The time the alarm event occurred')
eventType = MibTableColumn((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventType.setStatus('current')
if mibBuilder.loadTexts: eventType.setDescription('A conversion of the X721 notification types to a human readable form')
probableCause = MibTableColumn((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: probableCause.setStatus('current')
if mibBuilder.loadTexts: probableCause.setDescription('A conversion of the local and global OIDs to a human readable form')
perceivedSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perceivedSeverity.setStatus('current')
if mibBuilder.loadTexts: perceivedSeverity.setDescription('The perceived Severity of the of the alarm it will be one of: indeterminate critical major minor warning cleared')
additionalText = MibTableColumn((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: additionalText.setStatus('current')
if mibBuilder.loadTexts: additionalText.setDescription('Additional text for the alarm')
specificProblems = MibTableColumn((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 1, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: specificProblems.setStatus('current')
if mibBuilder.loadTexts: specificProblems.setDescription('Specific Problems of the alarm')
acknowledgementStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 1, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acknowledgementStatus.setStatus('current')
if mibBuilder.loadTexts: acknowledgementStatus.setDescription('The Acknowledgement Status of the alarm')
reserveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 1, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: reserveStatus.setStatus('current')
if mibBuilder.loadTexts: reserveStatus.setDescription('The Reserve Status of the alarm')
additionalInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 1, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: additionalInformation.setStatus('current')
if mibBuilder.loadTexts: additionalInformation.setDescription('The Additional Information of the alarm')
neLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 1, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neLocationName.setStatus('current')
if mibBuilder.loadTexts: neLocationName.setDescription('The NE Location Name of the alarm')
managedobjectInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 1, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: managedobjectInstance.setStatus('current')
if mibBuilder.loadTexts: managedobjectInstance.setDescription('The managed object Instance of the alarm')
acknowledgementUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 1, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acknowledgementUserName.setStatus('current')
if mibBuilder.loadTexts: acknowledgementUserName.setDescription('acknowledgement User Name')
asIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 1, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asIdentity.setStatus('current')
if mibBuilder.loadTexts: asIdentity.setDescription('The identity of the AS')
alarmHandoffTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 2))
alarmRaise = NotificationType((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 2, 1)).setObjects(("GENOSALARMNOTIFICATION-MIB", "currentAlarmId"), ("GENOSALARMNOTIFICATION-MIB", "friendlyName"), ("GENOSALARMNOTIFICATION-MIB", "eventTime"), ("GENOSALARMNOTIFICATION-MIB", "eventType"), ("GENOSALARMNOTIFICATION-MIB", "probableCause"), ("GENOSALARMNOTIFICATION-MIB", "perceivedSeverity"), ("GENOSALARMNOTIFICATION-MIB", "additionalText"), ("GENOSALARMNOTIFICATION-MIB", "specificProblems"), ("GENOSALARMNOTIFICATION-MIB", "acknowledgementStatus"), ("GENOSALARMNOTIFICATION-MIB", "reserveStatus"), ("GENOSALARMNOTIFICATION-MIB", "additionalInformation"), ("GENOSALARMNOTIFICATION-MIB", "neLocationName"), ("GENOSALARMNOTIFICATION-MIB", "managedobjectInstance"), ("GENOSALARMNOTIFICATION-MIB", "acknowledgementUserName"), ("GENOSALARMNOTIFICATION-MIB", "asIdentity"))
if mibBuilder.loadTexts: alarmRaise.setStatus('current')
if mibBuilder.loadTexts: alarmRaise.setDescription('Notification that an alarm is currently active')
alarmClear = NotificationType((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 2, 2)).setObjects(("GENOSALARMNOTIFICATION-MIB", "currentAlarmId"), ("GENOSALARMNOTIFICATION-MIB", "eventTime"), ("GENOSALARMNOTIFICATION-MIB", "friendlyName"), ("GENOSALARMNOTIFICATION-MIB", "probableCause"), ("GENOSALARMNOTIFICATION-MIB", "asIdentity"))
if mibBuilder.loadTexts: alarmClear.setStatus('current')
if mibBuilder.loadTexts: alarmClear.setDescription('Notification that an alarm has been cleared')
alarmAck = NotificationType((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 2, 3)).setObjects(("GENOSALARMNOTIFICATION-MIB", "listAlarmIds"), ("GENOSALARMNOTIFICATION-MIB", "operatorName"), ("GENOSALARMNOTIFICATION-MIB", "asIdentity"))
if mibBuilder.loadTexts: alarmAck.setStatus('current')
if mibBuilder.loadTexts: alarmAck.setDescription('Notification that an alarm has been acknowledged')
alarmPurge = NotificationType((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 2, 4)).setObjects(("GENOSALARMNOTIFICATION-MIB", "purgelistAlarmIds"), ("GENOSALARMNOTIFICATION-MIB", "asIdentity"))
if mibBuilder.loadTexts: alarmPurge.setStatus('current')
if mibBuilder.loadTexts: alarmPurge.setDescription('Notification that an alarm has been purged')
alarmReserve = NotificationType((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 2, 5)).setObjects(("GENOSALARMNOTIFICATION-MIB", "reservelistAlarmIds"), ("GENOSALARMNOTIFICATION-MIB", "reserveoperatorName"), ("GENOSALARMNOTIFICATION-MIB", "asIdentity"))
if mibBuilder.loadTexts: alarmReserve.setStatus('current')
if mibBuilder.loadTexts: alarmReserve.setDescription('Notification that an alarm has been reserved')
alarmUnreserve = NotificationType((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 2, 6)).setObjects(("GENOSALARMNOTIFICATION-MIB", "unreservelistAlarmIds"), ("GENOSALARMNOTIFICATION-MIB", "unreserveoperatorName"), ("GENOSALARMNOTIFICATION-MIB", "asIdentity"))
if mibBuilder.loadTexts: alarmUnreserve.setStatus('current')
if mibBuilder.loadTexts: alarmUnreserve.setDescription('Notification that an alarm has been unreserved')
asConnectionStatus = NotificationType((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 2, 7)).setObjects(("GENOSALARMNOTIFICATION-MIB", "asconnectionstatus"), ("GENOSALARMNOTIFICATION-MIB", "asId"))
if mibBuilder.loadTexts: asConnectionStatus.setStatus('current')
if mibBuilder.loadTexts: asConnectionStatus.setDescription('Notification that an AS status is changed')
alarmUnAck = NotificationType((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 2, 8)).setObjects(("GENOSALARMNOTIFICATION-MIB", "unacklistAlarmIds"), ("GENOSALARMNOTIFICATION-MIB", "unackoperatorName"), ("GENOSALARMNOTIFICATION-MIB", "asIdentity"))
if mibBuilder.loadTexts: alarmUnAck.setStatus('current')
if mibBuilder.loadTexts: alarmUnAck.setDescription('Notification that an alarm has been unacknowledged')
alarmHandoffAck = MibIdentifier((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 3))
listAlarmIds = MibScalar((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: listAlarmIds.setStatus('current')
if mibBuilder.loadTexts: listAlarmIds.setDescription('The list of Alarms which are acknowledged by the Operator ')
operatorName = MibScalar((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: operatorName.setStatus('current')
if mibBuilder.loadTexts: operatorName.setDescription('The name of the Operator that performed the acknowledgement ')
ackasIdentityFilter = MibScalar((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ackasIdentityFilter.setStatus('current')
if mibBuilder.loadTexts: ackasIdentityFilter.setDescription('Dinamic Filter for AS Identity ')
alarmHandoffFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 4))
friendlyNameFilter = MibScalar((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 4, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: friendlyNameFilter.setStatus('current')
if mibBuilder.loadTexts: friendlyNameFilter.setDescription('Dinamic Filter for Friendly name ')
eventTimeFilter = MibScalar((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 4, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eventTimeFilter.setStatus('current')
if mibBuilder.loadTexts: eventTimeFilter.setDescription('Dinamic Filter for event Time')
eventTypeFilter = MibScalar((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 4, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eventTypeFilter.setStatus('current')
if mibBuilder.loadTexts: eventTypeFilter.setDescription('Dinamic Filter for event Type')
probableCauseFilter = MibScalar((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 4, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: probableCauseFilter.setStatus('current')
if mibBuilder.loadTexts: probableCauseFilter.setDescription('Dinamic Filter for probable Cause')
perceivedSeverityFilter = MibScalar((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 4, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: perceivedSeverityFilter.setStatus('current')
if mibBuilder.loadTexts: perceivedSeverityFilter.setDescription('Dinamic Filter for perceived Severity')
specificProblemsFilter = MibScalar((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 4, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: specificProblemsFilter.setStatus('current')
if mibBuilder.loadTexts: specificProblemsFilter.setDescription('Dinamic Filter for specific Problems')
nelocationNameFilter = MibScalar((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 4, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nelocationNameFilter.setStatus('current')
if mibBuilder.loadTexts: nelocationNameFilter.setDescription('Dinamic Filter for nelocation name ')
additionalInformationFilter = MibScalar((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 4, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: additionalInformationFilter.setStatus('current')
if mibBuilder.loadTexts: additionalInformationFilter.setDescription('Dinamic Filter for additional Information ')
managedobjectInstanceFilter = MibScalar((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 4, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: managedobjectInstanceFilter.setStatus('current')
if mibBuilder.loadTexts: managedobjectInstanceFilter.setDescription('Dinamic Filter for managed object Instance ')
asIdentityFilter = MibScalar((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 4, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asIdentityFilter.setStatus('current')
if mibBuilder.loadTexts: asIdentityFilter.setDescription('Dinamic Filter for AS Identity ')
alarmHandoffPurge = MibIdentifier((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 5))
purgelistAlarmIds = MibScalar((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 5, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: purgelistAlarmIds.setStatus('current')
if mibBuilder.loadTexts: purgelistAlarmIds.setDescription('The list of Alarms which are purged by the Operator ')
purgeoperatorName = MibScalar((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 5, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: purgeoperatorName.setStatus('current')
if mibBuilder.loadTexts: purgeoperatorName.setDescription('The name of the Operator that performed the purge ')
purgeasIdentityFilter = MibScalar((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 5, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: purgeasIdentityFilter.setStatus('current')
if mibBuilder.loadTexts: purgeasIdentityFilter.setDescription('Dinamic Filter for AS Identity ')
alarmHandoffReserve = MibIdentifier((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 6))
reservelistAlarmIds = MibScalar((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 6, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reservelistAlarmIds.setStatus('current')
if mibBuilder.loadTexts: reservelistAlarmIds.setDescription('The list of Alarms which are reserved by the Operator ')
reserveoperatorName = MibScalar((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 6, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reserveoperatorName.setStatus('current')
if mibBuilder.loadTexts: reserveoperatorName.setDescription('The name of the Operator that performed the reserved ')
reserveasIdentityFilter = MibScalar((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 6, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reserveasIdentityFilter.setStatus('current')
if mibBuilder.loadTexts: reserveasIdentityFilter.setDescription('Dinamic Filter for AS Identity ')
alarmHandoffUnreserve = MibIdentifier((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 7))
unreservelistAlarmIds = MibScalar((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 7, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unreservelistAlarmIds.setStatus('current')
if mibBuilder.loadTexts: unreservelistAlarmIds.setDescription('The list of Alarms which are unreserved by the Operator ')
unreserveoperatorName = MibScalar((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 7, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unreserveoperatorName.setStatus('current')
if mibBuilder.loadTexts: unreserveoperatorName.setDescription('The name of the Operator that performed the unreserved ')
unreserveasIdentityFilter = MibScalar((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 7, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unreserveasIdentityFilter.setStatus('current')
if mibBuilder.loadTexts: unreserveasIdentityFilter.setDescription('Dinamic Filter for AS Identity ')
alarmHandoffasConnectionStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 8))
asconnectionstatus = MibScalar((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 8, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asconnectionstatus.setStatus('current')
if mibBuilder.loadTexts: asconnectionstatus.setDescription('The status of the AS ')
asId = MibScalar((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 8, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asId.setStatus('current')
if mibBuilder.loadTexts: asId.setDescription('The identity of the AS ')
alarmHandoffUnAck = MibIdentifier((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 9))
unacklistAlarmIds = MibScalar((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 9, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unacklistAlarmIds.setStatus('current')
if mibBuilder.loadTexts: unacklistAlarmIds.setDescription('The list of Alarms which are unacknowledged by the Operator ')
unackoperatorName = MibScalar((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 9, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unackoperatorName.setStatus('current')
if mibBuilder.loadTexts: unackoperatorName.setDescription('The name of the Operator that performed the unacknowledgement ')
unackasIdentityFilter = MibScalar((1, 3, 6, 1, 4, 1, 637, 65, 1, 1, 9, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unackasIdentityFilter.setStatus('current')
if mibBuilder.loadTexts: unackasIdentityFilter.setDescription('Dinamic Filter for AS Identity ')
mibBuilder.exportSymbols("GENOSALARMNOTIFICATION-MIB", alarmHandoffObjects=alarmHandoffObjects, eventTime=eventTime, unreserveasIdentityFilter=unreserveasIdentityFilter, friendlyName=friendlyName, genos=genos, alarmEntry=alarmEntry, alarmHandoffFilter=alarmHandoffFilter, reserveasIdentityFilter=reserveasIdentityFilter, asIdentity=asIdentity, unackoperatorName=unackoperatorName, asId=asId, eventTimeFilter=eventTimeFilter, alarmHandoffUnreserve=alarmHandoffUnreserve, alarmAck=alarmAck, asIdentityFilter=asIdentityFilter, additionalInformation=additionalInformation, reservelistAlarmIds=reservelistAlarmIds, alarmHandoffReserve=alarmHandoffReserve, alarmUnreserve=alarmUnreserve, alarmPurge=alarmPurge, probableCause=probableCause, asconnectionstatus=asconnectionstatus, PYSNMP_MODULE_ID=alarmHandoff, friendlyNameFilter=friendlyNameFilter, asConnectionStatus=asConnectionStatus, alarmHandoffUnAck=alarmHandoffUnAck, eventType=eventType, currentAlarmId=currentAlarmId, reserveStatus=reserveStatus, perceivedSeverity=perceivedSeverity, alarmTable=alarmTable, AlarmId=AlarmId, unsolicitedEventsEnabled=unsolicitedEventsEnabled, neLocationName=neLocationName, alarmRaise=alarmRaise, probableCauseFilter=probableCauseFilter, purgeoperatorName=purgeoperatorName, purgeasIdentityFilter=purgeasIdentityFilter, listAlarmIds=listAlarmIds, specificProblems=specificProblems, alarmHandoff=alarmHandoff, managedobjectInstance=managedobjectInstance, alarmHandoffasConnectionStatus=alarmHandoffasConnectionStatus, unackasIdentityFilter=unackasIdentityFilter, alcatel=alcatel, additionalText=additionalText, alarmUnAck=alarmUnAck, alarmHandoffAck=alarmHandoffAck, operatorName=operatorName, alarmHandoffPurge=alarmHandoffPurge, perceivedSeverityFilter=perceivedSeverityFilter, acknowledgementUserName=acknowledgementUserName, alarmHandoffTraps=alarmHandoffTraps, eventTypeFilter=eventTypeFilter, unreservelistAlarmIds=unreservelistAlarmIds, managedobjectInstanceFilter=managedobjectInstanceFilter, acknowledgementStatus=acknowledgementStatus, unreserveoperatorName=unreserveoperatorName, specificProblemsFilter=specificProblemsFilter, nmu=nmu, reserveoperatorName=reserveoperatorName, alarmClear=alarmClear, unacklistAlarmIds=unacklistAlarmIds, alarmReserve=alarmReserve, purgelistAlarmIds=purgelistAlarmIds, ackasIdentityFilter=ackasIdentityFilter, additionalInformationFilter=additionalInformationFilter, nelocationNameFilter=nelocationNameFilter)
