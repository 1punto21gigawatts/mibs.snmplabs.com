#
# PySNMP MIB module ALANTEC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALANTEC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:16:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, ModuleIdentity, Integer32, TimeTicks, enterprises, Counter64, Unsigned32, MibIdentifier, Gauge32, ObjectIdentity, Bits, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "ModuleIdentity", "Integer32", "TimeTicks", "enterprises", "Counter64", "Unsigned32", "MibIdentifier", "Gauge32", "ObjectIdentity", "Bits", "NotificationType")
PhysAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "DisplayString", "TextualConvention")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

alantec = MibIdentifier((1, 3, 6, 1, 4, 1, 390))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 390, 1))
common = MibIdentifier((1, 3, 6, 1, 4, 1, 390, 2))
powerhub = MibIdentifier((1, 3, 6, 1, 4, 1, 390, 1, 1))
powerbits = MibIdentifier((1, 3, 6, 1, 4, 1, 390, 1, 2))
powerhub7000 = MibIdentifier((1, 3, 6, 1, 4, 1, 390, 1, 3))
alsystem = MibIdentifier((1, 3, 6, 1, 4, 1, 390, 2, 1))
albridge = MibIdentifier((1, 3, 6, 1, 4, 1, 390, 2, 2))
almgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 390, 2, 3))
alrip = MibIdentifier((1, 3, 6, 1, 4, 1, 390, 2, 4))
altcp = MibIdentifier((1, 3, 6, 1, 4, 1, 390, 2, 5))
alip = MibIdentifier((1, 3, 6, 1, 4, 1, 390, 2, 6))
alat = MibIdentifier((1, 3, 6, 1, 4, 1, 390, 2, 7))
aldecnet = MibIdentifier((1, 3, 6, 1, 4, 1, 390, 2, 8))
alipx = MibIdentifier((1, 3, 6, 1, 4, 1, 390, 2, 9))
alsnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 390, 2, 10))
alchassis = MibIdentifier((1, 3, 6, 1, 4, 1, 390, 1, 3, 1))
alSlotTable = MibTable((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 1), )
if mibBuilder.loadTexts: alSlotTable.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotTable.setDescription('A table that contains information about each slot in the PowerHub 7000 chassis.')
alSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 1, 1), ).setIndexNames((0, "ALANTEC-MIB", "alSlotNumber"))
if mibBuilder.loadTexts: alSlotEntry.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotEntry.setDescription('Information about a specific slot.')
alSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotNumber.setDescription('The slot number for which the following information applies.')
alSlotCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("universal-ethernet", 1), ("utp-4X4", 2), ("utp-4X6", 3), ("fddi-dual-das", 4), ("fddi-single-das", 5), ("utp-16X1", 6), ("utp-13X1", 7), ("fddi-dual-universal", 8), ("fddi-single-universal", 9), ("fddi-concentrator", 10), ("cddi-concentrator", 11), ("fast-thernet", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotCardType.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotCardType.setDescription('The card type for this slot.')
alSlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("not-equipped", 1), ("not-present", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotStatus.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotStatus.setDescription('The status of the card in this slot.')
alSlotModel = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotModel.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotModel.setDescription('The model number for this card.')
alSlotRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotRevision.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotRevision.setDescription('The revision number for this card.')
alSlotIssue = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotIssue.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotIssue.setDescription('The issue number for this slot.')
alSlotDeviation = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotDeviation.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotDeviation.setDescription('The deviation for this slot.')
alSlotSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotSerialNumber.setDescription('The serial number of this card this slot.')
alSlotPower5 = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotPower5.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotPower5.setDescription('The number of milliamps. of current drawn by this slot at 5 Volts.')
alSlotPower12 = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotPower12.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotPower12.setDescription('The number of milliamps. of current drawn by this slot at 12 Volts.')
alSlotPower33 = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotPower33.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotPower33.setDescription('The number of milliamps. of current drawn by this slot at 3.3 Volts.')
alSlotPowerOther = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotPowerOther.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotPowerOther.setDescription('The number of milliamps. of current drawn by this slot at OTHER voltage.')
alVportTable = MibTable((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 2), )
if mibBuilder.loadTexts: alVportTable.setStatus('mandatory')
if mibBuilder.loadTexts: alVportTable.setDescription('A table that contains information about each virtual port in the PowerHub 7000 chassis.')
alVportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 2, 1), ).setIndexNames((0, "ALANTEC-MIB", "alVportNumber"))
if mibBuilder.loadTexts: alVportEntry.setStatus('mandatory')
if mibBuilder.loadTexts: alVportEntry.setDescription('Information about a specific virtual port.')
alVportNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alVportNumber.setStatus('mandatory')
if mibBuilder.loadTexts: alVportNumber.setDescription('The virtual port number for which the following information applies.')
alVportSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alVportSlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: alVportSlotNumber.setDescription('The slot number for the virtual port number which is identified by the instance of alVportNumber.')
alVportPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alVportPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: alVportPortNumber.setDescription('The physical port number on the slot for a virtual port number which is identified by an instance of alVportNumber.')
alVportPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 7))).clone(namedValues=NamedValues(("bnc", 1), ("fiber", 2), ("aui", 3), ("not-stuffed", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alVportPortType.setStatus('mandatory')
if mibBuilder.loadTexts: alVportPortType.setDescription('The port type for the virtual port which is identified by the instance of alVportNumber.')
alVportStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bad", 1), ("removed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alVportStatus.setStatus('mandatory')
if mibBuilder.loadTexts: alVportStatus.setDescription('The port status for the virtual port which is identified by the instance of alVportNumber.')
alVportControllerType = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alVportControllerType.setStatus('mandatory')
if mibBuilder.loadTexts: alVportControllerType.setDescription('The controller type for the virtual port which is identified by the instance of alVportNumber.')
alSlotToVportTable = MibTable((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 3), )
if mibBuilder.loadTexts: alSlotToVportTable.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotToVportTable.setDescription('A table that contains information about each virtual port in the PowerHub 7000 chassis.')
alSlotVportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 3, 1), ).setIndexNames((0, "ALANTEC-MIB", "alSlotVportSlotNumber"), (0, "ALANTEC-MIB", "alSlotVportPortNumber"))
if mibBuilder.loadTexts: alSlotVportEntry.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotVportEntry.setDescription('Information about a specific virtual port.')
alSlotVportSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotVportSlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotVportSlotNumber.setDescription('The slot number for the virtual port number which is identified by the instance of alVportNumber.')
alSlotVportPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotVportPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotVportPortNumber.setDescription('The physical port number on the slot for a virtual port number which is identified by an instance of alVportNumber.')
alSlotVportNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotVportNumber.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotVportNumber.setDescription('The virtual port number for which the following information applies.')
alSlotVportPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotVportPortType.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotVportPortType.setDescription('The port type for the virtual port which is identified by the instance of alVportNumber.')
alSlotVportStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotVportStatus.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotVportStatus.setDescription('The port status for the virtual port which is identified by the instance of alVportNumber.')
alSlotVportControllerType = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alSlotVportControllerType.setStatus('mandatory')
if mibBuilder.loadTexts: alSlotVportControllerType.setDescription('The controller type for the virtual port which is identified by the instance of alVportNumber.')
alPSTable = MibTable((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 4), )
if mibBuilder.loadTexts: alPSTable.setStatus('mandatory')
if mibBuilder.loadTexts: alPSTable.setDescription('A table that contains information about each power supply in the PowerHub 7000 chassis.')
alPSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 4, 1), ).setIndexNames((0, "ALANTEC-MIB", "alPSNumber"))
if mibBuilder.loadTexts: alPSEntry.setStatus('mandatory')
if mibBuilder.loadTexts: alPSEntry.setDescription('Information about a specific power supply.')
alPSNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alPSNumber.setStatus('mandatory')
if mibBuilder.loadTexts: alPSNumber.setDescription('The power supply number')
alPSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alPSStatus.setStatus('mandatory')
if mibBuilder.loadTexts: alPSStatus.setDescription('The status of the power supply identified by the instance of alPSNumber.')
alCpuSlot = MibScalar((1, 3, 6, 1, 4, 1, 390, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alCpuSlot.setStatus('mandatory')
if mibBuilder.loadTexts: alCpuSlot.setDescription('The slot number in which the packet engine resides')
alChassisType = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("model3100", 1), ("model3200", 2), ("model3300", 3), ("model3500", 4), ("model3401", 5), ("model3402", 6), ("model3403", 7), ("model3404", 8), ("model3405", 9), ("model3406", 10), ("model3407", 11), ("model3410", 12), ("model3411", 13), ("model3412", 14), ("model3420", 15), ("model3421", 16), ("model3422", 17), ("model3423", 18), ("model3424", 19), ("model3425", 20), ("model5001", 21), ("model5002", 22), ("model5003", 23), ("model5004", 24), ("model5005", 25), ("model5006", 26)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alChassisType.setStatus('mandatory')
if mibBuilder.loadTexts: alChassisType.setDescription('The model type of the PowerHub')
alMcpuRtVer = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alMcpuRtVer.setStatus('mandatory')
if mibBuilder.loadTexts: alMcpuRtVer.setDescription('Runtime software version of the motherboard CPU; it is an ASCII string that describes the version as well as the date and time the software was released from the factory.')
alMcpuPromVer = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alMcpuPromVer.setStatus('mandatory')
if mibBuilder.loadTexts: alMcpuPromVer.setDescription('PROM software version of the motherboard CPU; it is an ASCII string that describes the version as well as the date and time the software was released from the factory.')
alFcpuOneRtVer = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alFcpuOneRtVer.setStatus('mandatory')
if mibBuilder.loadTexts: alFcpuOneRtVer.setDescription('Runtime software version of F-bus CPU for the first FDDI board.')
alFcpuTwoRtVer = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alFcpuTwoRtVer.setStatus('mandatory')
if mibBuilder.loadTexts: alFcpuTwoRtVer.setDescription('Runtime software version of F-bus CPU for the second FDDI board.')
alFcpuOnePromVer = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alFcpuOnePromVer.setStatus('mandatory')
if mibBuilder.loadTexts: alFcpuOnePromVer.setDescription('PROM software version of F-bus CPU for the first FDDI board.')
alFcpuTwoPromVer = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alFcpuTwoPromVer.setStatus('mandatory')
if mibBuilder.loadTexts: alFcpuTwoPromVer.setDescription('PROM software version of F-bus CPU for the second FDDI board.')
alRcpuOneRtVer = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRcpuOneRtVer.setStatus('mandatory')
if mibBuilder.loadTexts: alRcpuOneRtVer.setDescription('Runtime software version of Ring CPU for the first FDDI board.')
alRcpuTwoRtVer = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRcpuTwoRtVer.setStatus('mandatory')
if mibBuilder.loadTexts: alRcpuTwoRtVer.setDescription('Runtime software version of Ring CPU for the second FDDI board.')
alRcpuOnePromVer = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRcpuOnePromVer.setStatus('mandatory')
if mibBuilder.loadTexts: alRcpuOnePromVer.setDescription('PROM software version of Ring CPU for the first FDDI board.')
alRcpuTwoPromVer = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRcpuTwoPromVer.setStatus('mandatory')
if mibBuilder.loadTexts: alRcpuTwoPromVer.setDescription('PROM software version of Ring CPU for the second FDDI board.')
alBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 2, 1), )
if mibBuilder.loadTexts: alBridgeTable.setStatus('mandatory')
if mibBuilder.loadTexts: alBridgeTable.setDescription('A table that contains information about unicast entries for which the bridge has forwarding and/or filtering information. This information is used by the transparent bridging function in determining how to propagate a received frame.')
alBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 2, 1, 1), ).setIndexNames((0, "ALANTEC-MIB", "alBridgeEntryAddress"))
if mibBuilder.loadTexts: alBridgeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: alBridgeEntry.setDescription('Information about a specific unicast MAC address for which the bridge has some forwarding and/or filtering information.')
alBridgeEntryAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alBridgeEntryAddress.setStatus('mandatory')
if mibBuilder.loadTexts: alBridgeEntryAddress.setDescription('The MAC address for which the bridge has forwarding and/or filtering information.')
alBridgeEntryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alBridgeEntryPort.setStatus('mandatory')
if mibBuilder.loadTexts: alBridgeEntryPort.setDescription('The port number of the port on which a frame having a source address equal to the value of the corresponding instance of alBridgeEntryAddress has been seen.')
alBridgeEntryLink = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alBridgeEntryLink.setStatus('mandatory')
if mibBuilder.loadTexts: alBridgeEntryLink.setDescription('The link number on the port on which a frame having as ource address equal to the value of the corresponding instance of alBridgeEntryAddress has been seen. Only applies to the UTP port type.')
alBridgeEntryRule = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alBridgeEntryRule.setStatus('mandatory')
if mibBuilder.loadTexts: alBridgeEntryRule.setDescription('The rule number that is applied to packets that are forwarded to or from this address.')
alBridgeEntryFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alBridgeEntryFlags.setStatus('mandatory')
if mibBuilder.loadTexts: alBridgeEntryFlags.setDescription('The status of this entry.')
alBridgeTblClear = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alBridgeTblClear.setStatus('mandatory')
if mibBuilder.loadTexts: alBridgeTblClear.setDescription('When set, clears the Bridge table.')
alBrFlushCache = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alBrFlushCache.setStatus('mandatory')
if mibBuilder.loadTexts: alBrFlushCache.setDescription('When set, flushes the cache.')
alPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 2, 4), )
if mibBuilder.loadTexts: alPortStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: alPortStatsTable.setDescription(' Per port statistics ')
portStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 2, 4, 1), ).setIndexNames((0, "ALANTEC-MIB", "portStatsPort"))
if mibBuilder.loadTexts: portStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: portStatsEntry.setDescription(' ')
portStatsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPort.setStatus('mandatory')
if mibBuilder.loadTexts: portStatsPort.setDescription(' ')
portStatsPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPktsIn.setStatus('mandatory')
if mibBuilder.loadTexts: portStatsPktsIn.setDescription(' ')
portStatsPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPktsOut.setStatus('mandatory')
if mibBuilder.loadTexts: portStatsPktsOut.setDescription(' ')
portStatsOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsOctetsIn.setStatus('mandatory')
if mibBuilder.loadTexts: portStatsOctetsIn.setDescription(' ')
portStatsOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsOctetsOut.setStatus('mandatory')
if mibBuilder.loadTexts: portStatsOctetsOut.setDescription(' ')
portStatsMultiCastPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsMultiCastPktsIn.setStatus('mandatory')
if mibBuilder.loadTexts: portStatsMultiCastPktsIn.setDescription(' ')
portStatsMulticastPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsMulticastPktsOut.setStatus('mandatory')
if mibBuilder.loadTexts: portStatsMulticastPktsOut.setDescription(' ')
portStatsTableMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsTableMisses.setStatus('mandatory')
if mibBuilder.loadTexts: portStatsTableMisses.setDescription(' ')
portStatsRcvBuffErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsRcvBuffErrs.setStatus('mandatory')
if mibBuilder.loadTexts: portStatsRcvBuffErrs.setDescription(' ')
portStatsXmitBuffErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsXmitBuffErrs.setStatus('mandatory')
if mibBuilder.loadTexts: portStatsXmitBuffErrs.setDescription(' ')
portStatsTotalCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsTotalCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: portStatsTotalCollisions.setDescription(' ')
portStatsRcvCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsRcvCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: portStatsRcvCollisions.setDescription(' ')
portStatsXmitCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsXmitCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: portStatsXmitCollisions.setDescription(' ')
portStatsXmitQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsXmitQLen.setStatus('mandatory')
if mibBuilder.loadTexts: portStatsXmitQLen.setDescription(' ')
portStatsPeakUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPeakUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: portStatsPeakUtilization.setDescription(' ')
portStatsCurrUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsCurrUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: portStatsCurrUtilization.setDescription(' ')
portStatsLossOfCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsLossOfCarrier.setStatus('mandatory')
if mibBuilder.loadTexts: portStatsLossOfCarrier.setDescription(' ')
portStatsExcessRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsExcessRetries.setStatus('mandatory')
if mibBuilder.loadTexts: portStatsExcessRetries.setDescription(' ')
alBridgeStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alBridgeStatsClear.setStatus('mandatory')
if mibBuilder.loadTexts: alBridgeStatsClear.setDescription('When set, clears the statistics for the bridge.')
alBridgePPControl = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alBridgePPControl.setStatus('mandatory')
if mibBuilder.loadTexts: alBridgePPControl.setDescription('When set to 0 , disables the port to port collection of the stats; when set to 1, enables the port to port stats collection; when set to 2, clears the port to port stats.')
alPortToPortTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 2, 7), )
if mibBuilder.loadTexts: alPortToPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: alPortToPortTable.setDescription('Statistics for port to port traffic.')
portToPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 2, 7, 1), ).setIndexNames((0, "ALANTEC-MIB", "alPPSourecPort"), (0, "ALANTEC-MIB", "alPPDestinationPort"))
if mibBuilder.loadTexts: portToPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: portToPortEntry.setDescription(' Statistics for port to port traffic')
alPPSourecPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alPPSourecPort.setStatus('mandatory')
if mibBuilder.loadTexts: alPPSourecPort.setDescription('Source port number')
alPPDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alPPDestinationPort.setStatus('mandatory')
if mibBuilder.loadTexts: alPPDestinationPort.setDescription('Source port number')
portToPortPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portToPortPackets.setStatus('mandatory')
if mibBuilder.loadTexts: portToPortPackets.setDescription(' ')
portToPortOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portToPortOctets.setStatus('mandatory')
if mibBuilder.loadTexts: portToPortOctets.setDescription(' ')
alPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 2, 8), )
if mibBuilder.loadTexts: alPortConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: alPortConfigTable.setDescription(' Per port configuration for configuring Source and Destination Rules etc.')
portConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 2, 8, 1), ).setIndexNames((0, "ALANTEC-MIB", "portConfigPort"))
if mibBuilder.loadTexts: portConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: portConfigEntry.setDescription(' ')
portConfigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portConfigPort.setStatus('mandatory')
if mibBuilder.loadTexts: portConfigPort.setDescription(' The port number for this table entry')
portConfigSrcRule = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 8, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigSrcRule.setStatus('mandatory')
if mibBuilder.loadTexts: portConfigSrcRule.setDescription('Source Rule for the port number identified by the instance of portConfigPort')
portConfigDstRule = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 8, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigDstRule.setStatus('mandatory')
if mibBuilder.loadTexts: portConfigDstRule.setDescription('Destination Rule for the port number identified by the instance of portConfigPort')
portConfigBlockLearnedEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 8, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portConfigBlockLearnedEntries.setStatus('mandatory')
if mibBuilder.loadTexts: portConfigBlockLearnedEntries.setDescription('When set to True (1), the port identified by the instance of portConfigPort will block the learned entries; if set to False (0) the port will not block the learned entries')
alBridgeIpBridging = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 2, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alBridgeIpBridging.setStatus('mandatory')
if mibBuilder.loadTexts: alBridgeIpBridging.setDescription('When set to enable(1), enables the IP bridging and if set to disable(0), disables the IP bridging.')
alBrTemplateTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 2, 10), )
if mibBuilder.loadTexts: alBrTemplateTable.setStatus('mandatory')
if mibBuilder.loadTexts: alBrTemplateTable.setDescription(' Per template information')
brTemplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 2, 10, 1), ).setIndexNames((0, "ALANTEC-MIB", "brTemplateNumber"))
if mibBuilder.loadTexts: brTemplateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: brTemplateEntry.setDescription(' ')
brTemplateNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 10, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brTemplateNumber.setStatus('mandatory')
if mibBuilder.loadTexts: brTemplateNumber.setDescription('The number of the template with which it is identified.')
brTemplateOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 10, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brTemplateOffset.setStatus('mandatory')
if mibBuilder.loadTexts: brTemplateOffset.setDescription('A displacement, in octets, from the beginning of the packet. This must be a multiple of 4 in the range from 0 to 124 decimal. A value of -1 will delete the entry')
brTemplateMask = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 10, 1, 3), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brTemplateMask.setStatus('mandatory')
if mibBuilder.loadTexts: brTemplateMask.setDescription(' ')
brTemplateComparator = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 10, 1, 4), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brTemplateComparator.setStatus('mandatory')
if mibBuilder.loadTexts: brTemplateComparator.setDescription(' ')
brTemplateOption = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 10, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brTemplateOption.setStatus('mandatory')
if mibBuilder.loadTexts: brTemplateOption.setDescription(' ')
alBrRuleTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 2, 11), )
if mibBuilder.loadTexts: alBrRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: alBrRuleTable.setDescription(' Per rule information')
brRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 2, 11, 1), ).setIndexNames((0, "ALANTEC-MIB", "brRuleNumber"))
if mibBuilder.loadTexts: brRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: brRuleEntry.setDescription(' ')
brRuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 11, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brRuleNumber.setStatus('mandatory')
if mibBuilder.loadTexts: brRuleNumber.setDescription('The number of the rule with which it is identified.')
brRuleStatement = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 11, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brRuleStatement.setStatus('mandatory')
if mibBuilder.loadTexts: brRuleStatement.setDescription('Rule statement')
alBrRuleToNodeTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 2, 12), )
if mibBuilder.loadTexts: alBrRuleToNodeTable.setStatus('mandatory')
if mibBuilder.loadTexts: alBrRuleToNodeTable.setDescription(' ')
alBrRuleToNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 2, 12, 1), ).setIndexNames((0, "ALANTEC-MIB", "brRuleToNodePort"))
if mibBuilder.loadTexts: alBrRuleToNodeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: alBrRuleToNodeEntry.setDescription(' ')
brRuleToNodePort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 12, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brRuleToNodePort.setStatus('mandatory')
if mibBuilder.loadTexts: brRuleToNodePort.setDescription('The number of the port for which this rule applies')
brRuleToNodeMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 12, 1, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brRuleToNodeMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: brRuleToNodeMacAddr.setDescription('The source MAC address')
brRuleToNodeRule = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 12, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brRuleToNodeRule.setStatus('mandatory')
if mibBuilder.loadTexts: brRuleToNodeRule.setDescription('The rule number that applies to this entry.')
alBrGroupTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 2, 13), )
if mibBuilder.loadTexts: alBrGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: alBrGroupTable.setDescription(' ')
alBrGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 2, 13, 1), ).setIndexNames((0, "ALANTEC-MIB", "brGroupNumber"))
if mibBuilder.loadTexts: alBrGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: alBrGroupEntry.setDescription(' ')
brGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 13, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brGroupNumber.setStatus('mandatory')
if mibBuilder.loadTexts: brGroupNumber.setDescription('The group number by which the group is identified with.')
brGroupPortsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 13, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brGroupPortsMask.setStatus('mandatory')
if mibBuilder.loadTexts: brGroupPortsMask.setDescription('The ports associated with the group number identified by the instance of brGroupNumber.')
brGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 13, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brGroupName.setStatus('mandatory')
if mibBuilder.loadTexts: brGroupName.setDescription('The name of the group for which this entry applies')
alBridgeSTPControl = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 2, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alBridgeSTPControl.setStatus('mandatory')
if mibBuilder.loadTexts: alBridgeSTPControl.setDescription('When set to 0 , disables the spanning tree. set to 1, enables the spanning tree.')
alPortStateTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 2, 15), )
if mibBuilder.loadTexts: alPortStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: alPortStateTable.setDescription(' Per port state information about spanning tree, dignostics and management.')
portStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 2, 15, 1), ).setIndexNames((0, "ALANTEC-MIB", "portStatePort"))
if mibBuilder.loadTexts: portStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: portStateEntry.setDescription(' ')
portStatePort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatePort.setStatus('mandatory')
if mibBuilder.loadTexts: portStatePort.setDescription(' The port number for this table entry')
portStateDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStateDiag.setStatus('mandatory')
if mibBuilder.loadTexts: portStateDiag.setDescription('The diagnostics state of the port')
portStateMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 15, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStateMgmt.setStatus('mandatory')
if mibBuilder.loadTexts: portStateMgmt.setDescription('The management state of the port')
portStateStp = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 15, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStateStp.setStatus('mandatory')
if mibBuilder.loadTexts: portStateStp.setDescription('The spanning tree state of the port. ')
portStatePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 2, 15, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatePortName.setStatus('mandatory')
if mibBuilder.loadTexts: portStatePortName.setDescription('The name of this port')
alLinkStatsCollect = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alLinkStatsCollect.setStatus('mandatory')
if mibBuilder.loadTexts: alLinkStatsCollect.setDescription('When set to enable(1), per link stats collection is enabled; when set to disable(0), the per link stats are not collected.')
alLinkStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alLinkStatsClear.setStatus('mandatory')
if mibBuilder.loadTexts: alLinkStatsClear.setDescription('When set, clears the link stats')
alLinkStatsTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 3, 4), )
if mibBuilder.loadTexts: alLinkStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: alLinkStatsTable.setDescription('Per link stats table')
linkStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 3, 4, 1), ).setIndexNames((0, "ALANTEC-MIB", "linkStatsPort"), (0, "ALANTEC-MIB", "linkStatsLink"))
if mibBuilder.loadTexts: linkStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: linkStatsEntry.setDescription(' ')
linkStatsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsPort.setStatus('mandatory')
if mibBuilder.loadTexts: linkStatsPort.setDescription('Port Number')
linkStatsLink = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsLink.setStatus('mandatory')
if mibBuilder.loadTexts: linkStatsLink.setDescription('Link Number')
linkStatsPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsPktsIn.setStatus('mandatory')
if mibBuilder.loadTexts: linkStatsPktsIn.setDescription('Pkts In - corresponds to pi')
linkStatsOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsOctetsIn.setStatus('mandatory')
if mibBuilder.loadTexts: linkStatsOctetsIn.setDescription('Octets In - corresponds to oi')
linkStatsBMCastPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsBMCastPktsIn.setStatus('mandatory')
if mibBuilder.loadTexts: linkStatsBMCastPktsIn.setDescription('Bmcast Pks In - corresponds to bpi')
linkStatsGiantPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsGiantPkts.setStatus('mandatory')
if mibBuilder.loadTexts: linkStatsGiantPkts.setDescription('Giant Pkts - corresponds to gp')
linkStatsFrameErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsFrameErrs.setStatus('mandatory')
if mibBuilder.loadTexts: linkStatsFrameErrs.setDescription('Frame Errors - corresponds to fa')
linkStatsFCSErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsFCSErrs.setStatus('mandatory')
if mibBuilder.loadTexts: linkStatsFCSErrs.setDescription('FCS Errors corresponds to fcs')
linkStatsRcvCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkStatsRcvCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: linkStatsRcvCollisions.setDescription('Receive Collisions- corresponds to rc')
alLinkControlTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 3, 5), )
if mibBuilder.loadTexts: alLinkControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: alLinkControlTable.setDescription('Per link stats table')
linkControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 3, 5, 1), ).setIndexNames((0, "ALANTEC-MIB", "linkControlPort"), (0, "ALANTEC-MIB", "linkControlLink"))
if mibBuilder.loadTexts: linkControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: linkControlEntry.setDescription(' ')
linkControlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkControlPort.setStatus('mandatory')
if mibBuilder.loadTexts: linkControlPort.setDescription('Port number for this entry.')
linkControlLink = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkControlLink.setStatus('mandatory')
if mibBuilder.loadTexts: linkControlLink.setDescription('Link number for this entry.')
linkControlEnlState = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkControlEnlState.setStatus('mandatory')
if mibBuilder.loadTexts: linkControlEnlState.setDescription('Enable state for the link corresponds to enl option in lkd command.')
linkControlLinkTest = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkControlLinkTest.setStatus('mandatory')
if mibBuilder.loadTexts: linkControlLinkTest.setDescription('Link test status for the link; corresponds to lt option of the lkd command.')
linkControlPartition = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkControlPartition.setStatus('mandatory')
if mibBuilder.loadTexts: linkControlPartition.setDescription('Partitioning state of the link')
linkControlPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkControlPolarity.setStatus('mandatory')
if mibBuilder.loadTexts: linkControlPolarity.setDescription('Polarity of the link')
linkControlEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 5, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkControlEnable.setStatus('mandatory')
if mibBuilder.loadTexts: linkControlEnable.setDescription('Setting the value of this object to Enable (1), will enable the link and setting to Disable(2), will disable the link.')
alPortLinkTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 3, 6), )
if mibBuilder.loadTexts: alPortLinkTable.setStatus('mandatory')
if mibBuilder.loadTexts: alPortLinkTable.setDescription(' Per port link type ')
portLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 3, 6, 1), ).setIndexNames((0, "ALANTEC-MIB", "portLinkPort"))
if mibBuilder.loadTexts: portLinkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: portLinkEntry.setDescription(' ')
portLinkPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portLinkPort.setStatus('mandatory')
if mibBuilder.loadTexts: portLinkPort.setDescription('The port number for which the port type is to be set')
portLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("aui", 1), ("bnc", 2), ("bnct", 3), ("utp", 4), ("fiber", 5), ("unknown", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLinkType.setStatus('mandatory')
if mibBuilder.loadTexts: portLinkType.setDescription('The type of port')
alFiberStatsTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 3, 7), )
if mibBuilder.loadTexts: alFiberStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: alFiberStatsTable.setDescription(' Per port fiber stats and Fiber Security')
fiberStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 3, 7, 1), ).setIndexNames((0, "ALANTEC-MIB", "fiberStatsPort"))
if mibBuilder.loadTexts: fiberStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fiberStatsEntry.setDescription(' ')
fiberStatsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fiberStatsPort.setStatus('mandatory')
if mibBuilder.loadTexts: fiberStatsPort.setDescription('The fiber port for which the stats are requested or the Fiber violation is set ')
fiberAuiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fiberAuiStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fiberAuiStatus.setDescription('The fiber aui status for the port that is specified by the instance of fiberStatsPort')
fiberSecurityViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("detect", 1), ("ignore", 2), ("clear", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fiberSecurityViolation.setStatus('mandatory')
if mibBuilder.loadTexts: fiberSecurityViolation.setDescription('The fiber port for which the stats are requested or the Fiber violation is set ')
alPortMonitorClose = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 3, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alPortMonitorClose.setStatus('mandatory')
if mibBuilder.loadTexts: alPortMonitorClose.setDescription('Setting the value to close(1), will turn the port monitoring off.')
alPortMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 3, 9), )
if mibBuilder.loadTexts: alPortMonitorTable.setStatus('mandatory')
if mibBuilder.loadTexts: alPortMonitorTable.setDescription(' ')
portMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 3, 9, 1), ).setIndexNames((0, "ALANTEC-MIB", "portMonSrcPort"), (0, "ALANTEC-MIB", "portMonDstPort"))
if mibBuilder.loadTexts: portMonitorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: portMonitorEntry.setDescription(' ')
portMonSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 9, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMonSrcPort.setStatus('mandatory')
if mibBuilder.loadTexts: portMonSrcPort.setDescription('The traffic to/from this port will be monitored on the portMonDstPort')
portMonDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 9, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMonDstPort.setStatus('mandatory')
if mibBuilder.loadTexts: portMonDstPort.setDescription('The traffic to/from portMonSrcPort will be monitored on this port ')
portMonTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("forwarded", 1), ("incoming", 2), ("forwardedincoming", 3), ("generated", 4), ("forwardedgenerated", 5), ("incominggenerated", 6), ("all", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMonTrafficType.setStatus('mandatory')
if mibBuilder.loadTexts: portMonTrafficType.setDescription(' Setting this value to 1, will let the port monitor monitor forwarded traffic; setting to 0 means the forwarded traffic will not be monitored.')
alReboot = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 3, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alReboot.setStatus('mandatory')
if mibBuilder.loadTexts: alReboot.setDescription('Setting the value to Reboot(1), will reboot the PowerHub.')
alPortMonitorViewTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 3, 11), )
if mibBuilder.loadTexts: alPortMonitorViewTable.setStatus('mandatory')
if mibBuilder.loadTexts: alPortMonitorViewTable.setDescription(' ')
portMonitorViewEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 3, 11, 1), ).setIndexNames((0, "ALANTEC-MIB", "portMonViewSrcPort"), (0, "ALANTEC-MIB", "portMonViewDstPort"))
if mibBuilder.loadTexts: portMonitorViewEntry.setStatus('mandatory')
if mibBuilder.loadTexts: portMonitorViewEntry.setDescription(' ')
portMonViewSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMonViewSrcPort.setStatus('mandatory')
if mibBuilder.loadTexts: portMonViewSrcPort.setDescription('The traffic from this port to the port designated by portMonViewDstPort will be monitored on portMonViewMonitorPort.')
portMonViewDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMonViewDstPort.setStatus('mandatory')
if mibBuilder.loadTexts: portMonViewDstPort.setDescription('The traffic to this port from the port designated by portMonViewSrcPort will be monitored on portMonViewMonitorPort.')
portMonViewMonitorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 3, 11, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMonViewMonitorPort.setStatus('mandatory')
if mibBuilder.loadTexts: portMonViewMonitorPort.setDescription('The traffic to portMonViewDstPort from the port designated by portMonViewSrcPort will be monitored on portMonViewMonitorPort.')
alRipConfigTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 4, 1), )
if mibBuilder.loadTexts: alRipConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: alRipConfigTable.setDescription(' Per port RIP configuration.')
ripConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 4, 1, 1), ).setIndexNames((0, "ALANTEC-MIB", "ripConfigPort"))
if mibBuilder.loadTexts: ripConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ripConfigEntry.setDescription(' ')
ripConfigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripConfigPort.setStatus('mandatory')
if mibBuilder.loadTexts: ripConfigPort.setDescription('Port number for which the RIP parameters are to be set or viewed.')
ripConfigTalk = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 4, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripConfigTalk.setStatus('mandatory')
if mibBuilder.loadTexts: ripConfigTalk.setDescription('Controls whether the hub generates RIP packets on the port identified by the instance of ripConfigPort.')
ripConfigListen = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 4, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripConfigListen.setStatus('mandatory')
if mibBuilder.loadTexts: ripConfigListen.setDescription('Controls whether the hub processes RIP packets received on the port identified by the instance of ripConfigPort.')
ripConfigPoison = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 4, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripConfigPoison.setStatus('mandatory')
if mibBuilder.loadTexts: ripConfigPoison.setDescription('Controls what happens when a route goes down. If set to no(0), the hub simply stops reporting the route. If set to yes(1), the hub reports it one more time, but with a metric value of 16, which infinity as far as RIP is concerned. Thus other routers learn immediately that the route is down.')
ripConfigRptStaticRt = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 4, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripConfigRptStaticRt.setStatus('mandatory')
if mibBuilder.loadTexts: ripConfigRptStaticRt.setDescription('When RIP packets are generated on the port, controls whether the hub reports the static routes in its route table.')
ripConfigRptDefaultRt = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 4, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripConfigRptDefaultRt.setStatus('mandatory')
if mibBuilder.loadTexts: ripConfigRptDefaultRt.setDescription('When RIP packets are generated on the port, controls whether the hub reports the default routes, if any, in ints route table.')
ripConfigAccptDefaultRt = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 4, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripConfigAccptDefaultRt.setStatus('mandatory')
if mibBuilder.loadTexts: ripConfigAccptDefaultRt.setDescription('When RIP packets are received on the port, controls whether the hub accepts(learns) a default route that is reported in a RIP packet.')
alRipstatsClear = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alRipstatsClear.setStatus('mandatory')
if mibBuilder.loadTexts: alRipstatsClear.setDescription('When set, clears the RIP stats')
alRipStatPktsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatPktsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: alRipStatPktsRcvd.setDescription('Packets Received.')
alRipStatPktsXmitted = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatPktsXmitted.setStatus('mandatory')
if mibBuilder.loadTexts: alRipStatPktsXmitted.setDescription('Packets Sent.')
alRipStatReqsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatReqsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: alRipStatReqsRcvd.setDescription('Requests Received.')
alRipStatRespRcvd = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatRespRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: alRipStatRespRcvd.setDescription('Responses Received.')
alRipStatReqsXmitted = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatReqsXmitted.setStatus('mandatory')
if mibBuilder.loadTexts: alRipStatReqsXmitted.setDescription('Requests Sent.')
alRipStatRespXmitted = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatRespXmitted.setStatus('mandatory')
if mibBuilder.loadTexts: alRipStatRespXmitted.setDescription('Responses Sent.')
alRipStatRouteTimeOuts = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatRouteTimeOuts.setStatus('mandatory')
if mibBuilder.loadTexts: alRipStatRouteTimeOuts.setDescription('Route Timeouts.')
alRipStatShortPkts = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatShortPkts.setStatus('mandatory')
if mibBuilder.loadTexts: alRipStatShortPkts.setDescription('Short packets received.')
alRipStatBadVer = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatBadVer.setStatus('mandatory')
if mibBuilder.loadTexts: alRipStatBadVer.setDescription('Bad version pkts received.')
alRipStatBadZeroes = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatBadZeroes.setStatus('mandatory')
if mibBuilder.loadTexts: alRipStatBadZeroes.setDescription('Bad zeroes received.')
alRipStatBadSrcPort = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatBadSrcPort.setStatus('mandatory')
if mibBuilder.loadTexts: alRipStatBadSrcPort.setDescription('Packets with bad Source port received.')
alRipStatBadSrcIp = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatBadSrcIp.setStatus('mandatory')
if mibBuilder.loadTexts: alRipStatBadSrcIp.setDescription('Packets with bad source IP address received.')
alRipStatPktsSelf = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatPktsSelf.setStatus('mandatory')
if mibBuilder.loadTexts: alRipStatPktsSelf.setDescription('Packets from self received.')
alRipStatPktsQueued = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatPktsQueued.setStatus('mandatory')
if mibBuilder.loadTexts: alRipStatPktsQueued.setDescription('Packets queued.')
alRipStatFreeQueue = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatFreeQueue.setStatus('mandatory')
if mibBuilder.loadTexts: alRipStatFreeQueue.setDescription('Free entries in the RIP processing queue.')
alRipDynPktsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynPktsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: alRipDynPktsRcvd.setDescription('Packets Received.')
alRipDynPktsXmitted = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynPktsXmitted.setStatus('mandatory')
if mibBuilder.loadTexts: alRipDynPktsXmitted.setDescription('Packets Sent.')
alRipDynReqsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynReqsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: alRipDynReqsRcvd.setDescription('Requests Received.')
alRipDynRespRcvd = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynRespRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: alRipDynRespRcvd.setDescription('Responses Received.')
alRipDynReqsXmitted = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynReqsXmitted.setStatus('mandatory')
if mibBuilder.loadTexts: alRipDynReqsXmitted.setDescription('Requests Sent.')
alRipDynRespXmitted = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynRespXmitted.setStatus('mandatory')
if mibBuilder.loadTexts: alRipDynRespXmitted.setDescription('Responses Sent.')
alRipDynRouteTimeOuts = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynRouteTimeOuts.setStatus('mandatory')
if mibBuilder.loadTexts: alRipDynRouteTimeOuts.setDescription('Route Timeouts.')
alRipDynShortPkts = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynShortPkts.setStatus('mandatory')
if mibBuilder.loadTexts: alRipDynShortPkts.setDescription('Short packets received.')
alRipDynBadVer = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynBadVer.setStatus('mandatory')
if mibBuilder.loadTexts: alRipDynBadVer.setDescription('Bad version pkts received.')
alRipDynBadZeroes = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynBadZeroes.setStatus('mandatory')
if mibBuilder.loadTexts: alRipDynBadZeroes.setDescription('Bad zeroes received.')
alRipDynBadSrcPort = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynBadSrcPort.setStatus('mandatory')
if mibBuilder.loadTexts: alRipDynBadSrcPort.setDescription('Packets with bad Source port received.')
alRipDynBadSrcIp = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynBadSrcIp.setStatus('mandatory')
if mibBuilder.loadTexts: alRipDynBadSrcIp.setDescription('Packets with bad source IP address received.')
alRipDynPktsSelf = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynPktsSelf.setStatus('mandatory')
if mibBuilder.loadTexts: alRipDynPktsSelf.setDescription('Packets from self received.')
alRipDynPktsQueued = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynPktsQueued.setStatus('mandatory')
if mibBuilder.loadTexts: alRipDynPktsQueued.setDescription('Packets queued.')
alRipDynFreeQueue = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 4, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynFreeQueue.setStatus('mandatory')
if mibBuilder.loadTexts: alRipDynFreeQueue.setDescription('Free entries in the RIP processing queue.')
alRipAccptFilTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 4, 33), )
if mibBuilder.loadTexts: alRipAccptFilTable.setStatus('mandatory')
if mibBuilder.loadTexts: alRipAccptFilTable.setDescription('RIP Accept filter table')
ripAccptFilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 4, 33, 1), ).setIndexNames((0, "ALANTEC-MIB", "ripAccptFilNumber"))
if mibBuilder.loadTexts: ripAccptFilEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ripAccptFilEntry.setDescription('RIP Accept filter entry ')
ripAccptFilNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 4, 33, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripAccptFilNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ripAccptFilNumber.setDescription('Filter Number; Range 1-64')
ripAccptFilAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 4, 33, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripAccptFilAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ripAccptFilAddr.setDescription('Valid network or subnet address')
ripAccptFilMask = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 4, 33, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripAccptFilMask.setStatus('mandatory')
if mibBuilder.loadTexts: ripAccptFilMask.setDescription('Mask')
ripAccptFilPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 4, 33, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripAccptFilPort.setStatus('mandatory')
if mibBuilder.loadTexts: ripAccptFilPort.setDescription('Port number on which network should be accepted or not. Range 1-14. CVG This range will change for PH2??')
alRipReportFilTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 4, 34), )
if mibBuilder.loadTexts: alRipReportFilTable.setStatus('mandatory')
if mibBuilder.loadTexts: alRipReportFilTable.setDescription('RIP Report filter table')
ripReportFilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 4, 34, 1), ).setIndexNames((0, "ALANTEC-MIB", "ripReportFilNumber"))
if mibBuilder.loadTexts: ripReportFilEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ripReportFilEntry.setDescription('RIP Report filter entry ')
ripReportFilNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 4, 34, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripReportFilNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ripReportFilNumber.setDescription('Filter Number; Range 1-64')
ripReportFilAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 4, 34, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripReportFilAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ripReportFilAddr.setDescription('Valid network or subnet address')
ripReportFilMask = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 4, 34, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripReportFilMask.setStatus('mandatory')
if mibBuilder.loadTexts: ripReportFilMask.setDescription('Mask')
ripReportFilPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 4, 34, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripReportFilPort.setStatus('mandatory')
if mibBuilder.loadTexts: ripReportFilPort.setDescription('Port number on which network should be reported or not. Port number range 1-14 CVG This range will probably change for PH2??.')
alTcpConnIdleTime = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alTcpConnIdleTime.setStatus('mandatory')
if mibBuilder.loadTexts: alTcpConnIdleTime.setDescription('Time in minutes before sending keep-alives. The range is 5 to 30 minutes.')
alTcpKeepAliveInt = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alTcpKeepAliveInt.setStatus('mandatory')
if mibBuilder.loadTexts: alTcpKeepAliveInt.setDescription('Time interval in seconds between two successive keep-alive sends. The range is 30 to 240 seconds.')
alTcpDisconnectInt = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alTcpDisconnectInt.setStatus('mandatory')
if mibBuilder.loadTexts: alTcpDisconnectInt.setDescription('Time interval in seconds, before an idle connection is dropped. This equals to the sum of alTcpConnIdleTime plus eight times the alTcpKeepAliveInt interval.')
alTcpShortSegRcvd = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alTcpShortSegRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: alTcpShortSegRcvd.setDescription('Number of short segments received.')
alTcpStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alTcpStatsClear.setStatus('mandatory')
if mibBuilder.loadTexts: alTcpStatsClear.setDescription('When set to 1, clears the TCP stats.')
alTcpConnTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 5, 6), )
if mibBuilder.loadTexts: alTcpConnTable.setStatus('mandatory')
if mibBuilder.loadTexts: alTcpConnTable.setDescription('A table containing TCP connection-specific information.')
alTcpConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 5, 6, 1), ).setIndexNames((0, "ALANTEC-MIB", "alTcpConnId"))
if mibBuilder.loadTexts: alTcpConnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: alTcpConnEntry.setDescription('Information about a particular current TCP connection. An object of this type is transient, in that it ceases to exist when (or soon after) the connection makes the transition to the CLOSED state.')
alTcpConnId = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 5, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alTcpConnId.setStatus('mandatory')
if mibBuilder.loadTexts: alTcpConnId.setDescription('The connection Identifier by which a connection is addressed.')
alTcpConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 5, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("closed", 1), ("listen", 2), ("synSent", 3), ("synReceived", 4), ("established", 5), ("finWait1", 6), ("finWait2", 7), ("closeWait", 8), ("lastAck", 9), ("closing", 10), ("timeWait", 11), ("deleteTCB", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alTcpConnState.setStatus('mandatory')
if mibBuilder.loadTexts: alTcpConnState.setDescription("The state of this TCP connection. The only value which may be set by a management station is deleteTCB(12). Accordingly, it is appropriate for an agent to return a `badValue' response if a management station attempts to set this object to any other value. If a management station sets this object to the value deleteTCB(12), then this has the effect of deleting the TCB (as defined in RFC 793) of the corresponding connection on the managed node, resulting in immediate termination of the connection.")
alTcpConnLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 5, 6, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alTcpConnLocalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: alTcpConnLocalAddress.setDescription('The local IP address for this TCP connection. In the case of a connection in the listen state which is willing to accept connections for any IP interface associated with the node, the value 0.0.0.0 is used.')
alTcpConnLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 5, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alTcpConnLocalPort.setStatus('mandatory')
if mibBuilder.loadTexts: alTcpConnLocalPort.setDescription('The local port number for this TCP connection.')
alTcpConnRemAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 5, 6, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alTcpConnRemAddress.setStatus('mandatory')
if mibBuilder.loadTexts: alTcpConnRemAddress.setDescription('The remote IP address for this TCP connection.')
alTcpConnRemPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 5, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alTcpConnRemPort.setStatus('mandatory')
if mibBuilder.loadTexts: alTcpConnRemPort.setDescription('The remote port number for this TCP connection.')
alTcpFilTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 5, 7), )
if mibBuilder.loadTexts: alTcpFilTable.setStatus('mandatory')
if mibBuilder.loadTexts: alTcpFilTable.setDescription('TCP filter table')
tcpFilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 5, 7, 1), ).setIndexNames((0, "ALANTEC-MIB", "tcpFilNumber"))
if mibBuilder.loadTexts: tcpFilEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tcpFilEntry.setDescription('TCP filter entry ')
tcpFilNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 5, 7, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpFilNumber.setStatus('mandatory')
if mibBuilder.loadTexts: tcpFilNumber.setDescription('Filter Number; Range 1-32')
tcpFilSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 5, 7, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpFilSrcAddr.setStatus('mandatory')
if mibBuilder.loadTexts: tcpFilSrcAddr.setDescription('Source address')
tcpFilSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 5, 7, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpFilSrcMask.setStatus('mandatory')
if mibBuilder.loadTexts: tcpFilSrcMask.setDescription('Mask')
tcpFilProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 5, 7, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpFilProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: tcpFilProtocol.setDescription('tcp(1) or udp(2)')
tcpFilDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 5, 7, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpFilDstPort.setStatus('mandatory')
if mibBuilder.loadTexts: tcpFilDstPort.setDescription('smtp(1000), telnet(2000), ftp(3000) or valid port Number')
alArpTableClear = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alArpTableClear.setStatus('mandatory')
if mibBuilder.loadTexts: alArpTableClear.setDescription('When set, clears the ARP table.')
alArpAge = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alArpAge.setStatus('mandatory')
if mibBuilder.loadTexts: alArpAge.setDescription('Timeout in minutes for aging ARP entries; when set to zero, set-arpage is turned off.')
alArpStatReqsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alArpStatReqsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: alArpStatReqsRcvd.setDescription('Requests Received.')
alArpStatRepliesRcvd = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alArpStatRepliesRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: alArpStatRepliesRcvd.setDescription('Replies Received.')
alArpStatInvalidOpcodes = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alArpStatInvalidOpcodes.setStatus('mandatory')
if mibBuilder.loadTexts: alArpStatInvalidOpcodes.setDescription('Invalid Opcodes Received.')
alArpStatRequestsSent = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alArpStatRequestsSent.setStatus('mandatory')
if mibBuilder.loadTexts: alArpStatRequestsSent.setDescription('Requests Sent.')
alArpStatRepliesSent = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alArpStatRepliesSent.setStatus('mandatory')
if mibBuilder.loadTexts: alArpStatRepliesSent.setDescription('Replies Sent.')
alArpDynReqsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alArpDynReqsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: alArpDynReqsRcvd.setDescription('Requests Received.')
alArpDynRepliesRcvd = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alArpDynRepliesRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: alArpDynRepliesRcvd.setDescription('Replies Received.')
alArpDynInvalidOpcodes = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alArpDynInvalidOpcodes.setStatus('mandatory')
if mibBuilder.loadTexts: alArpDynInvalidOpcodes.setDescription('Invalid Opcodes Received.')
alArpDynRequestsSent = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 6, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alArpDynRequestsSent.setStatus('mandatory')
if mibBuilder.loadTexts: alArpDynRequestsSent.setDescription('Requests Sent.')
alArpDynRepliesSent = MibScalar((1, 3, 6, 1, 4, 1, 390, 2, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alArpDynRepliesSent.setStatus('mandatory')
if mibBuilder.loadTexts: alArpDynRepliesSent.setDescription('Replies Sent.')
alArpProxyTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 6, 13), )
if mibBuilder.loadTexts: alArpProxyTable.setStatus('mandatory')
if mibBuilder.loadTexts: alArpProxyTable.setDescription(' Per port proxy arp enable/disable ')
arpProxyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 6, 13, 1), ).setIndexNames((0, "ALANTEC-MIB", "arpProxyPort"))
if mibBuilder.loadTexts: arpProxyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: arpProxyEntry.setDescription(' ')
arpProxyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpProxyPort.setStatus('mandatory')
if mibBuilder.loadTexts: arpProxyPort.setDescription('Port Number ')
arpProxyEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 13, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpProxyEnable.setStatus('mandatory')
if mibBuilder.loadTexts: arpProxyEnable.setDescription('If set to Enable(1), enables proxy arp for arp requests received on the port identified by the instance of arpProxyPort. If set to Disable(0), it disables the proxy arp for arp requests received on the ports identified by the instance of arpProxyPort.')
alIpTemplateTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 6, 14), )
if mibBuilder.loadTexts: alIpTemplateTable.setStatus('mandatory')
if mibBuilder.loadTexts: alIpTemplateTable.setDescription(' Per template information')
ipTemplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 6, 14, 1), ).setIndexNames((0, "ALANTEC-MIB", "ipTemplateNumber"))
if mibBuilder.loadTexts: ipTemplateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipTemplateEntry.setDescription(' ')
ipTemplateNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 14, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTemplateNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ipTemplateNumber.setDescription('The number of the template with which it is identified.')
ipTemplateDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 14, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTemplateDelete.setStatus('mandatory')
if mibBuilder.loadTexts: ipTemplateDelete.setDescription('When set to Delete(1), this entry is deleted.')
ipTemplateAction = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("block", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTemplateAction.setStatus('mandatory')
if mibBuilder.loadTexts: ipTemplateAction.setDescription('Whether the packet being filtered should be forwarded or blocked')
ipTemplateSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 14, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTemplateSrcAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ipTemplateSrcAddr.setDescription("The portion of the packet's source address specified by ipTemplateSrcMask is matched with this address.")
ipTemplateSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 14, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTemplateSrcMask.setStatus('mandatory')
if mibBuilder.loadTexts: ipTemplateSrcMask.setDescription('Source Mask. The portion specified by this mask is matched with source address.')
ipTemplateDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 14, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTemplateDstAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ipTemplateDstAddr.setDescription("The portion of the packet's destination address specified by ipTemplateDstMask is matched with this address.")
ipTemplateDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 14, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTemplateDstMask.setStatus('mandatory')
if mibBuilder.loadTexts: ipTemplateDstMask.setDescription('Destination mask. The portion specified by this mask is matched with destination address.')
ipTemplateProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 14, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTemplateProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: ipTemplateProtocol.setDescription('Determines the type of packets that need to be filtered')
ipTemplateOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 14, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTemplateOperator.setStatus('mandatory')
if mibBuilder.loadTexts: ipTemplateOperator.setDescription('Allowed only if the protocol field is tcp or udp.')
ipTemplateDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 14, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTemplateDstPort.setStatus('mandatory')
if mibBuilder.loadTexts: ipTemplateDstPort.setDescription('This is expressed as either a well-known protocol name or a well-known tcp or udp port number')
alIpRuleTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 6, 15), )
if mibBuilder.loadTexts: alIpRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: alIpRuleTable.setDescription(' Per template information')
ipRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 6, 15, 1), ).setIndexNames((0, "ALANTEC-MIB", "ipRuleNumber"))
if mibBuilder.loadTexts: ipRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipRuleEntry.setDescription(' ')
ipRuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 15, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRuleNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ipRuleNumber.setDescription('The number of the rule with which it is identified.')
ipRuleDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 15, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRuleDelete.setStatus('mandatory')
if mibBuilder.loadTexts: ipRuleDelete.setDescription('If set to 1 the entry is deleted.')
ipRuleTemplates = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 15, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRuleTemplates.setStatus('mandatory')
if mibBuilder.loadTexts: ipRuleTemplates.setDescription('The templates associated with the rule identified by the instance of ipRuleNumber.')
ipAcsCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 6, 16), )
if mibBuilder.loadTexts: ipAcsCtrlTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipAcsCtrlTable.setDescription('Per port IP access control filters ')
ipAcsCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 6, 16, 1), ).setIndexNames((0, "ALANTEC-MIB", "ipAcsCtrlPort"))
if mibBuilder.loadTexts: ipAcsCtrlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipAcsCtrlEntry.setDescription(' ')
ipAcsCtrlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 16, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAcsCtrlPort.setStatus('mandatory')
if mibBuilder.loadTexts: ipAcsCtrlPort.setDescription('Port number of the port for which the source and destination access filter apply. ')
ipAcsCtrlDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 16, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAcsCtrlDelete.setStatus('mandatory')
if mibBuilder.loadTexts: ipAcsCtrlDelete.setDescription('If set to 1, the entry is deleted.')
ipAcsCtrlSrcRule = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 16, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAcsCtrlSrcRule.setStatus('mandatory')
if mibBuilder.loadTexts: ipAcsCtrlSrcRule.setDescription('Source IP access filter rule ')
ipAcsCtrlDstRule = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 16, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAcsCtrlDstRule.setStatus('mandatory')
if mibBuilder.loadTexts: ipAcsCtrlDstRule.setDescription('Destination IP access filter rule ')
ipFilStatStatsTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 6, 17), )
if mibBuilder.loadTexts: ipFilStatStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipFilStatStatsTable.setDescription(' Per template static statistics -- stats from the beginning of the last system reboot.')
ipFilStatStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 6, 17, 1), ).setIndexNames((0, "ALANTEC-MIB", "ipFilStatStatsTemplate"))
if mibBuilder.loadTexts: ipFilStatStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipFilStatStatsEntry.setDescription(' ')
ipFilStatStatsTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFilStatStatsTemplate.setStatus('mandatory')
if mibBuilder.loadTexts: ipFilStatStatsTemplate.setDescription('The template number for which the stats are displayed')
ipFilStatStatsInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFilStatStatsInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ipFilStatStatsInPkts.setDescription('The number of packets that matched the template identified by the instance of ipFilStatStatsTemplate. The template has to be a Source template.')
ipFilStatStatsInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 17, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFilStatStatsInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: ipFilStatStatsInBytes.setDescription('The number of bytes that matched the template identified by the instance of ipFilStatStatsTemplate. The template has to be a Source template.')
ipFilStatStatsOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 17, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFilStatStatsOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ipFilStatStatsOutPkts.setDescription('The number of packets that matched the template identified by the instance of ipFilStatStatsTemplate. The template has to be a Destination template.')
ipFilStatStatsOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 17, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFilStatStatsOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: ipFilStatStatsOutBytes.setDescription('The number of bytes that matched the template identified by the instance of ipFilStatStatsTemplate. The template has to be a Destination template.')
ipFilDynStatsTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 6, 18), )
if mibBuilder.loadTexts: ipFilDynStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipFilDynStatsTable.setDescription(' Per template dynamic statistics -- stats from the beginning of the last clear.')
ipFilDynStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 6, 18, 1), ).setIndexNames((0, "ALANTEC-MIB", "ipFilDynStatsTemplate"))
if mibBuilder.loadTexts: ipFilDynStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipFilDynStatsEntry.setDescription(' ')
ipFilDynStatsTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFilDynStatsTemplate.setStatus('mandatory')
if mibBuilder.loadTexts: ipFilDynStatsTemplate.setDescription('The template number for which the stats are displayed')
ipFilDynStatsInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 18, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFilDynStatsInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ipFilDynStatsInPkts.setDescription('The number of packets that matched the template identified by the instance of ipFilDynStatsTemplate. The template has to be a Source template.')
ipFilDynStatsInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 18, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFilDynStatsInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: ipFilDynStatsInBytes.setDescription('The number of bytes that matched the template identified by the instance of ipFilDynStatsTemplate. The template has to be a Source template.')
ipFilDynStatsOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 18, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFilDynStatsOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ipFilDynStatsOutPkts.setDescription('The number of packets that matched the template identified by the instance of ipFilDynStatsTemplate. The template has to be a Destination template.')
ipFilDynStatsOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 18, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFilDynStatsOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: ipFilDynStatsOutBytes.setDescription('The number of bytes that matched the template identified by the instance of ipFilDynStatsTemplate. The template has to be a Destination template.')
ipFilDynStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 18, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilDynStatsClear.setStatus('mandatory')
if mibBuilder.loadTexts: ipFilDynStatsClear.setDescription('Setting the value of 1, it will clear all the stats for the template identified by the instance of ipFilDynStatsTemplate.')
alIpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 6, 19), )
if mibBuilder.loadTexts: alIpInterfaceTable.setStatus('mandatory')
if mibBuilder.loadTexts: alIpInterfaceTable.setDescription('Interface table corresponding to the command - interface-table.')
alIpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 6, 19, 1), ).setIndexNames((0, "ALANTEC-MIB", "ipInterfaceNumber"), (0, "ALANTEC-MIB", "ipInterfaceAddress"))
if mibBuilder.loadTexts: alIpInterfaceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: alIpInterfaceEntry.setDescription(' ')
ipInterfaceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 19, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ipInterfaceNumber.setDescription(' ')
ipInterfaceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 19, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ipInterfaceAddress.setDescription(' ')
ipInterfaceSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 19, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: ipInterfaceSubnetMask.setDescription(' ')
ipInterfaceMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 19, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceMtu.setStatus('mandatory')
if mibBuilder.loadTexts: ipInterfaceMtu.setDescription(' ')
ipInterfaceBroadCast = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 19, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceBroadCast.setStatus('mandatory')
if mibBuilder.loadTexts: ipInterfaceBroadCast.setDescription(' ')
ipInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 19, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceState.setStatus('mandatory')
if mibBuilder.loadTexts: ipInterfaceState.setDescription(' ')
ipInterfaceCost = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 19, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceCost.setStatus('mandatory')
if mibBuilder.loadTexts: ipInterfaceCost.setDescription(' ')
ipInterfacePktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 19, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInterfacePktsIn.setStatus('mandatory')
if mibBuilder.loadTexts: ipInterfacePktsIn.setDescription(' ')
ipInterfaceOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 19, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInterfaceOctetsIn.setStatus('mandatory')
if mibBuilder.loadTexts: ipInterfaceOctetsIn.setDescription(' ')
ipInterfacePktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 19, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInterfacePktsOut.setStatus('mandatory')
if mibBuilder.loadTexts: ipInterfacePktsOut.setDescription(' ')
ipInterfaceOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 19, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInterfaceOctetsOut.setStatus('mandatory')
if mibBuilder.loadTexts: ipInterfaceOctetsOut.setDescription(' ')
alIpRtCacheTable = MibTable((1, 3, 6, 1, 4, 1, 390, 2, 6, 20), )
if mibBuilder.loadTexts: alIpRtCacheTable.setStatus('mandatory')
if mibBuilder.loadTexts: alIpRtCacheTable.setDescription('IP Route Cache for all ports')
alIpRtCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 390, 2, 6, 20, 1), ).setIndexNames((0, "ALANTEC-MIB", "ipRtCachePort"), (0, "ALANTEC-MIB", "ipRtCacheDstAddress"))
if mibBuilder.loadTexts: alIpRtCacheEntry.setStatus('mandatory')
if mibBuilder.loadTexts: alIpRtCacheEntry.setDescription('IP Route cache for each port ')
ipRtCachePort = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 20, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRtCachePort.setStatus('mandatory')
if mibBuilder.loadTexts: ipRtCachePort.setDescription(' ')
ipRtCacheDstAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 20, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRtCacheDstAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ipRtCacheDstAddress.setDescription(' ')
ipRtCacheClear = MibTableColumn((1, 3, 6, 1, 4, 1, 390, 2, 6, 20, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRtCacheClear.setStatus('mandatory')
if mibBuilder.loadTexts: ipRtCacheClear.setDescription('Setting this to Clear(1), will clear the routecache for the port and Destination address identified by the instance of ipRtCachePort and ipRtCacheDstAddress.')
mibBuilder.exportSymbols("ALANTEC-MIB", ripReportFilMask=ripReportFilMask, alSlotSerialNumber=alSlotSerialNumber, alBrGroupTable=alBrGroupTable, alBridgeIpBridging=alBridgeIpBridging, alRipDynRouteTimeOuts=alRipDynRouteTimeOuts, portToPortEntry=portToPortEntry, alSlotVportEntry=alSlotVportEntry, portMonViewSrcPort=portMonViewSrcPort, ipFilStatStatsTemplate=ipFilStatStatsTemplate, portConfigPort=portConfigPort, brGroupNumber=brGroupNumber, alRipDynReqsXmitted=alRipDynReqsXmitted, alArpAge=alArpAge, portStatsTotalCollisions=portStatsTotalCollisions, alSlotVportNumber=alSlotVportNumber, alBridgeEntryLink=alBridgeEntryLink, ipTemplateDstPort=ipTemplateDstPort, alRipStatReqsRcvd=alRipStatReqsRcvd, alBrRuleTable=alBrRuleTable, aldecnet=aldecnet, alBridgeStatsClear=alBridgeStatsClear, alRipDynFreeQueue=alRipDynFreeQueue, alSlotEntry=alSlotEntry, portStatsPktsOut=portStatsPktsOut, alTcpConnLocalPort=alTcpConnLocalPort, ipFilDynStatsInBytes=ipFilDynStatsInBytes, ipInterfaceOctetsOut=ipInterfaceOctetsOut, portToPortPackets=portToPortPackets, linkStatsFrameErrs=linkStatsFrameErrs, powerhub=powerhub, alPortLinkTable=alPortLinkTable, ipRuleDelete=ipRuleDelete, ipInterfacePktsIn=ipInterfacePktsIn, alRcpuTwoPromVer=alRcpuTwoPromVer, alRipStatRespXmitted=alRipStatRespXmitted, alRipStatRouteTimeOuts=alRipStatRouteTimeOuts, portStateEntry=portStateEntry, ipRtCacheClear=ipRtCacheClear, linkControlEnlState=linkControlEnlState, alBridgeEntry=alBridgeEntry, ipInterfaceAddress=ipInterfaceAddress, alArpStatRepliesSent=alArpStatRepliesSent, ripConfigPort=ripConfigPort, portStatsPort=portStatsPort, portStatsMulticastPktsOut=portStatsMulticastPktsOut, ipInterfaceCost=ipInterfaceCost, alTcpConnState=alTcpConnState, ipInterfaceOctetsIn=ipInterfaceOctetsIn, alFcpuTwoRtVer=alFcpuTwoRtVer, alBridgeEntryPort=alBridgeEntryPort, alTcpConnId=alTcpConnId, alRipStatPktsRcvd=alRipStatPktsRcvd, portStatsEntry=portStatsEntry, fiberStatsEntry=fiberStatsEntry, MacAddress=MacAddress, linkStatsEntry=linkStatsEntry, alArpStatRepliesRcvd=alArpStatRepliesRcvd, alRipConfigTable=alRipConfigTable, portConfigBlockLearnedEntries=portConfigBlockLearnedEntries, ipTemplateDelete=ipTemplateDelete, portLinkType=portLinkType, alTcpStatsClear=alTcpStatsClear, powerhub7000=powerhub7000, ipRtCacheDstAddress=ipRtCacheDstAddress, alRipStatPktsSelf=alRipStatPktsSelf, alSlotModel=alSlotModel, alantec=alantec, alTcpConnEntry=alTcpConnEntry, portStatsXmitCollisions=portStatsXmitCollisions, alLinkStatsTable=alLinkStatsTable, ipFilDynStatsInPkts=ipFilDynStatsInPkts, ipFilStatStatsEntry=ipFilStatStatsEntry, alVportStatus=alVportStatus, alArpStatReqsRcvd=alArpStatReqsRcvd, alArpTableClear=alArpTableClear, alReboot=alReboot, alat=alat, ripConfigEntry=ripConfigEntry, linkStatsPort=linkStatsPort, ripConfigRptStaticRt=ripConfigRptStaticRt, alArpDynRepliesRcvd=alArpDynRepliesRcvd, brTemplateOption=brTemplateOption, portStatsOctetsOut=portStatsOctetsOut, fiberStatsPort=fiberStatsPort, ipAcsCtrlSrcRule=ipAcsCtrlSrcRule, products=products, alPPSourecPort=alPPSourecPort, ipTemplateSrcMask=ipTemplateSrcMask, alTcpShortSegRcvd=alTcpShortSegRcvd, alRipDynReqsRcvd=alRipDynReqsRcvd, portLinkEntry=portLinkEntry, alRcpuTwoRtVer=alRcpuTwoRtVer, tcpFilSrcAddr=tcpFilSrcAddr, alVportSlotNumber=alVportSlotNumber, alMcpuRtVer=alMcpuRtVer, portStatsRcvCollisions=portStatsRcvCollisions, alSlotVportPortNumber=alSlotVportPortNumber, portStatePortName=portStatePortName, alPortMonitorTable=alPortMonitorTable, altcp=altcp, fiberAuiStatus=fiberAuiStatus, alBridgeEntryFlags=alBridgeEntryFlags, alTcpConnLocalAddress=alTcpConnLocalAddress, alSlotVportPortType=alSlotVportPortType, alRipDynBadZeroes=alRipDynBadZeroes, ipInterfaceMtu=ipInterfaceMtu, alTcpConnRemAddress=alTcpConnRemAddress, ripReportFilPort=ripReportFilPort, alSlotCardType=alSlotCardType, alTcpFilTable=alTcpFilTable, alChassisType=alChassisType, alBridgeEntryRule=alBridgeEntryRule, brRuleToNodeMacAddr=brRuleToNodeMacAddr, alPSEntry=alPSEntry, alRipStatReqsXmitted=alRipStatReqsXmitted, alRipDynBadSrcIp=alRipDynBadSrcIp, alRcpuOnePromVer=alRcpuOnePromVer, alRipstatsClear=alRipstatsClear, alPortStatsTable=alPortStatsTable, portMonitorEntry=portMonitorEntry, alBridgePPControl=alBridgePPControl, alRcpuOneRtVer=alRcpuOneRtVer, alTcpConnRemPort=alTcpConnRemPort, linkControlPolarity=linkControlPolarity, ipFilDynStatsClear=ipFilDynStatsClear, brRuleToNodeRule=brRuleToNodeRule, alPSNumber=alPSNumber, alTcpKeepAliveInt=alTcpKeepAliveInt, alSlotPower12=alSlotPower12, tcpFilEntry=tcpFilEntry, ipTemplateEntry=ipTemplateEntry, brRuleStatement=brRuleStatement, alRipDynPktsRcvd=alRipDynPktsRcvd, alSlotDeviation=alSlotDeviation, alRipAccptFilTable=alRipAccptFilTable, ipAcsCtrlPort=ipAcsCtrlPort, brTemplateEntry=brTemplateEntry, portMonSrcPort=portMonSrcPort, alRipStatRespRcvd=alRipStatRespRcvd, alRipDynRespRcvd=alRipDynRespRcvd, ripConfigRptDefaultRt=ripConfigRptDefaultRt, portLinkPort=portLinkPort, portStatsPeakUtilization=portStatsPeakUtilization, portStatsMultiCastPktsIn=portStatsMultiCastPktsIn, alRipStatFreeQueue=alRipStatFreeQueue, alPortMonitorViewTable=alPortMonitorViewTable, alRipReportFilTable=alRipReportFilTable, alrip=alrip, portMonViewDstPort=portMonViewDstPort, ipFilDynStatsTemplate=ipFilDynStatsTemplate, alip=alip, linkControlLinkTest=linkControlLinkTest, alIpRuleTable=alIpRuleTable, alCpuSlot=alCpuSlot, fiberSecurityViolation=fiberSecurityViolation, alRipDynPktsXmitted=alRipDynPktsXmitted, albridge=albridge, brTemplateOffset=brTemplateOffset, ripReportFilNumber=ripReportFilNumber, portStatsExcessRetries=portStatsExcessRetries, portStatsXmitQLen=portStatsXmitQLen, alVportEntry=alVportEntry, ripAccptFilAddr=ripAccptFilAddr, arpProxyEntry=arpProxyEntry, brGroupPortsMask=brGroupPortsMask, alPortMonitorClose=alPortMonitorClose, portStatsTableMisses=portStatsTableMisses, ipAcsCtrlDstRule=ipAcsCtrlDstRule, ipFilStatStatsTable=ipFilStatStatsTable, portStatsOctetsIn=portStatsOctetsIn, alRipDynBadSrcPort=alRipDynBadSrcPort, alVportNumber=alVportNumber, tcpFilSrcMask=tcpFilSrcMask, portStateMgmt=portStateMgmt, alRipDynShortPkts=alRipDynShortPkts, ripAccptFilNumber=ripAccptFilNumber, alRipStatBadSrcPort=alRipStatBadSrcPort, ipFilStatStatsOutPkts=ipFilStatStatsOutPkts, linkStatsRcvCollisions=linkStatsRcvCollisions, alBrFlushCache=alBrFlushCache, ipFilStatStatsOutBytes=ipFilStatStatsOutBytes, alsystem=alsystem, alRipStatBadVer=alRipStatBadVer, alSlotVportControllerType=alSlotVportControllerType, ripAccptFilPort=ripAccptFilPort, portConfigDstRule=portConfigDstRule, alRipStatPktsQueued=alRipStatPktsQueued, alFcpuTwoPromVer=alFcpuTwoPromVer, powerbits=powerbits, ipTemplateNumber=ipTemplateNumber, ipAcsCtrlEntry=ipAcsCtrlEntry, linkStatsOctetsIn=linkStatsOctetsIn, ipTemplateProtocol=ipTemplateProtocol, alLinkStatsClear=alLinkStatsClear, alTcpDisconnectInt=alTcpDisconnectInt, alPSStatus=alPSStatus, alSlotVportSlotNumber=alSlotVportSlotNumber, brTemplateMask=brTemplateMask, alchassis=alchassis, ipInterfaceSubnetMask=ipInterfaceSubnetMask, ripConfigAccptDefaultRt=ripConfigAccptDefaultRt, ripConfigPoison=ripConfigPoison, ripConfigTalk=ripConfigTalk, alArpStatInvalidOpcodes=alArpStatInvalidOpcodes, ipTemplateDstMask=ipTemplateDstMask, alPortToPortTable=alPortToPortTable, linkStatsLink=linkStatsLink, alSlotPower33=alSlotPower33, alSlotVportStatus=alSlotVportStatus, ripReportFilAddr=ripReportFilAddr, portMonViewMonitorPort=portMonViewMonitorPort, alArpProxyTable=alArpProxyTable, ipAcsCtrlDelete=ipAcsCtrlDelete, ipRtCachePort=ipRtCachePort, alPSTable=alPSTable, alSlotStatus=alSlotStatus, brTemplateComparator=brTemplateComparator, ipTemplateDstAddr=ipTemplateDstAddr, alIpInterfaceEntry=alIpInterfaceEntry, portMonDstPort=portMonDstPort, alArpDynInvalidOpcodes=alArpDynInvalidOpcodes, portMonTrafficType=portMonTrafficType, alRipDynBadVer=alRipDynBadVer, linkStatsPktsIn=linkStatsPktsIn, ipFilDynStatsOutBytes=ipFilDynStatsOutBytes, alBridgeEntryAddress=alBridgeEntryAddress, portStatsLossOfCarrier=portStatsLossOfCarrier, portStatsPktsIn=portStatsPktsIn, portConfigEntry=portConfigEntry, portMonitorViewEntry=portMonitorViewEntry, portStatsRcvBuffErrs=portStatsRcvBuffErrs, ripReportFilEntry=ripReportFilEntry, ipFilStatStatsInPkts=ipFilStatStatsInPkts, ipFilDynStatsEntry=ipFilDynStatsEntry, arpProxyPort=arpProxyPort, alArpDynReqsRcvd=alArpDynReqsRcvd, alVportPortNumber=alVportPortNumber, alRipStatBadZeroes=alRipStatBadZeroes, alRipDynPktsSelf=alRipDynPktsSelf, alRipStatBadSrcIp=alRipStatBadSrcIp, alBrRuleToNodeTable=alBrRuleToNodeTable, ipTemplateSrcAddr=ipTemplateSrcAddr, ipAcsCtrlTable=ipAcsCtrlTable, alTcpConnTable=alTcpConnTable, alSlotIssue=alSlotIssue, brRuleEntry=brRuleEntry, alRipStatShortPkts=alRipStatShortPkts, alBrTemplateTable=alBrTemplateTable, linkControlEntry=linkControlEntry, portStateDiag=portStateDiag, alBridgeTblClear=alBridgeTblClear, tcpFilDstPort=tcpFilDstPort, ripAccptFilMask=ripAccptFilMask, alArpStatRequestsSent=alArpStatRequestsSent)
mibBuilder.exportSymbols("ALANTEC-MIB", alLinkStatsCollect=alLinkStatsCollect, alSlotRevision=alSlotRevision, portStatsCurrUtilization=portStatsCurrUtilization, ipFilDynStatsTable=ipFilDynStatsTable, ipRuleTemplates=ipRuleTemplates, alBrGroupEntry=alBrGroupEntry, linkControlLink=linkControlLink, tcpFilProtocol=tcpFilProtocol, ipInterfaceBroadCast=ipInterfaceBroadCast, alLinkControlTable=alLinkControlTable, arpProxyEnable=arpProxyEnable, portStateStp=portStateStp, alSlotNumber=alSlotNumber, common=common, alPPDestinationPort=alPPDestinationPort, linkControlEnable=linkControlEnable, alSlotToVportTable=alSlotToVportTable, ipRuleNumber=ipRuleNumber, alSlotTable=alSlotTable, alFcpuOnePromVer=alFcpuOnePromVer, brGroupName=brGroupName, portStatsXmitBuffErrs=portStatsXmitBuffErrs, alSlotPowerOther=alSlotPowerOther, ripAccptFilEntry=ripAccptFilEntry, alIpRtCacheEntry=alIpRtCacheEntry, ipFilDynStatsOutPkts=ipFilDynStatsOutPkts, ipTemplateOperator=ipTemplateOperator, alRipStatPktsXmitted=alRipStatPktsXmitted, alVportPortType=alVportPortType, ripConfigListen=ripConfigListen, linkStatsGiantPkts=linkStatsGiantPkts, alSlotPower5=alSlotPower5, ipInterfaceState=ipInterfaceState, linkControlPort=linkControlPort, alIpTemplateTable=alIpTemplateTable, alArpDynRepliesSent=alArpDynRepliesSent, ipTemplateAction=ipTemplateAction, linkStatsFCSErrs=linkStatsFCSErrs, alBridgeTable=alBridgeTable, alTcpConnIdleTime=alTcpConnIdleTime, linkControlPartition=linkControlPartition, alPortStateTable=alPortStateTable, alRipDynPktsQueued=alRipDynPktsQueued, brTemplateNumber=brTemplateNumber, alMcpuPromVer=alMcpuPromVer, ipRuleEntry=ipRuleEntry, alBrRuleToNodeEntry=alBrRuleToNodeEntry, alVportTable=alVportTable, ipInterfaceNumber=ipInterfaceNumber, portConfigSrcRule=portConfigSrcRule, alsnmp=alsnmp, alRipDynRespXmitted=alRipDynRespXmitted, ipInterfacePktsOut=ipInterfacePktsOut, alBridgeSTPControl=alBridgeSTPControl, linkStatsBMCastPktsIn=linkStatsBMCastPktsIn, alFiberStatsTable=alFiberStatsTable, alVportControllerType=alVportControllerType, alFcpuOneRtVer=alFcpuOneRtVer, alArpDynRequestsSent=alArpDynRequestsSent, portToPortOctets=portToPortOctets, alipx=alipx, tcpFilNumber=tcpFilNumber, almgmt=almgmt, alPortConfigTable=alPortConfigTable, brRuleToNodePort=brRuleToNodePort, brRuleNumber=brRuleNumber, alIpInterfaceTable=alIpInterfaceTable, portStatePort=portStatePort, alIpRtCacheTable=alIpRtCacheTable, ipFilStatStatsInBytes=ipFilStatStatsInBytes)
