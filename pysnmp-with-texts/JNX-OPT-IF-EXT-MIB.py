#
# PySNMP MIB module JNX-OPT-IF-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JNX-OPT-IF-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:58:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
jnxoptIfOChSinkCurrentEntry, jnxoptIfMibModule, JnxoptIfDirectionality, jnxoptIfOChConfigEntry = mibBuilder.importSymbols("JNX-OPT-IF-MIB", "jnxoptIfOChSinkCurrentEntry", "jnxoptIfMibModule", "JnxoptIfDirectionality", "jnxoptIfOChConfigEntry")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ModuleIdentity, Gauge32, Counter64, iso, NotificationType, ObjectIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, TimeTicks, Counter32, Integer32, IpAddress, transmission, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Gauge32", "Counter64", "iso", "NotificationType", "ObjectIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "TimeTicks", "Counter32", "Integer32", "IpAddress", "transmission", "MibIdentifier")
RowStatus, DateAndTime, TruthValue, TextualConvention, RowPointer, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DateAndTime", "TruthValue", "TextualConvention", "RowPointer", "DisplayString")
jnxoptIfExtMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3))
jnxoptIfExtMibModule.setRevisions(('2012-04-25 00:00', '2013-01-25 00:00', '2013-02-27 00:00', '2013-11-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxoptIfExtMibModule.setRevisionsDescriptions(('Draft version 1.0', 'Draft version 2.0', 'Update FEC error count to Counter64', 'Enhancement for OTN PM 24 hour TCA thresholds',))
if mibBuilder.loadTexts: jnxoptIfExtMibModule.setLastUpdated('201204250000Z')
if mibBuilder.loadTexts: jnxoptIfExtMibModule.setOrganization('IETF Ops/Camp MIB Working Group')
if mibBuilder.loadTexts: jnxoptIfExtMibModule.setContactInfo(' Email: Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net')
if mibBuilder.loadTexts: jnxoptIfExtMibModule.setDescription('The MIB module to describe Black Link extension to rfc3591. It is the enterprise version of the draft draft-galikunze-ccamp-g-698-2-snmp-mib-02 ')
class JnxoptIfChannelSpacing(TextualConvention, Integer32):
    description = 'Channel spacing 1 - 100 GHz 2 - 50 GHz 3 - 25 GHz 4 - 12.5 GHz 5 - 6.25 GHz '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("spacing100Ghz", 1), ("spacing50Ghz", 2), ("spacing25Ghz", 3), ("spacing12point5Ghz", 4), ("spacing6point5Ghz", 5))

class JnxoptIfBitRateLineCoding(TextualConvention, Integer32):
    description = 'Optical tributary signal class 1 - NRZ 2.5G (from nominally 622 Mbit/s to nominally 2.67 Gbit/s) 2 - NRZ 10G nominally 2.4 Gbit/s to nominally 10.71 Gbit/s. 3 - 40 Gbits/s 4 - 100 Gbits/s 5 - 400 Gbits/s 40 Gbits/s and above are under study.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("rate2point5G", 1), ("rate10G", 2), ("rate40G", 3), ("rate100G", 4), ("rate400G", 5))

class JnxoptIfFiberTypeRecommendation(TextualConvention, Integer32):
    description = 'Fiber Types - ITU-T Recs G.652, G.653, G.654 and G.655 One for recommendation and one for category. G.652 A, B, C, D G.653 A, B G.654 A, B, C G.655 C, D, E G.656 G.657 A, B '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("g652", 1), ("g653", 2), ("g654", 3), ("g655", 4), ("g656", 5), ("g657", 6))

class JnxoptIfFiberTypeCategory(TextualConvention, Integer32):
    description = 'Fiber Types - ITU-T Recs G.652, G.653, G.654 and G.655 G.652 A, B, C, D G.653 A, B G.654 A, B, C G.655 C, D, E G.656 G.657 A, B Categories - A, B, C, D and E '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("categoryA", 1), ("categoryB", 2), ("categoryC", 3), ("categoryD", 4), ("categoryE", 5))

class JnxoptIfOTNType(TextualConvention, Integer32):
    description = 'This parameter indicates the parameters for the table are for the Near End or Far End performance data. 1 - Near End 2 - Far End '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("nearEnd", 1), ("farEnd", 2))

class JnxoptIfOTNDirection(TextualConvention, Integer32):
    description = ' Indicates the direction as Rx/Tx or bi-directional.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("jnxTxDir", 1), ("jnxRxDir", 2), ("jnxBiDir", 3))

class JnxoptIfOTNLayer(TextualConvention, Integer32):
    description = 'This parameter indicates the parameters for the table are for OTUk, ODUk, TCM performance data. 1 - OTUk 2 - ODUk 3 - TCM The ODUk layer and TCM sublayer PM is not related to the black link PM management, but since this could be a common PM model for the ODUk layer and TCM layers, we include it here so it may be used for simple scenarios where only lower order ODUk or higher order ODUk is present. For scenarios where both lower order ODUk and higher order ODUk are present, further extension to the MIB model is required, in particular for the indexing for these layers.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("jnxoptIfOTUkLayer", 1), ("jnxoptIfODUkLayer", 2), ("jnxoptIfTCMSubLayer", 3))

class JnxoptIfOTNOChAlarms(TextualConvention, Integer32):
    description = 'This is the possible alarms from the OCh and OTUk layer.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))
    namedValues = NamedValues(("jnxoptIfOtnNoAlarm", 0), ("jnxoptIfOtnLosAlarm", 1), ("jnxoptIfOtnLofAlarm", 2), ("jnxoptIfOtnLomAlarm", 3), ("jnxoptIfOtuSsfAlarm", 4), ("jnxoptIfOtuBdiAlarm", 5), ("jnxoptIfOtuTimAlarm", 6), ("jnxoptIfOtuIaeAlarm", 7), ("jnxoptIfOtuBiaeAlarm", 8), ("jnxoptIfOtuTsfAlarm", 9), ("jnxoptIfOtuDegAlarm", 10), ("jnxoptIfOtuFecExcessiveErrsAlarm", 11), ("jnxoptIf15MinThreshBBETCA", 12), ("jnxoptIf15MinThreshESTCA", 13), ("jnxoptIf15MinThreshSESTCA", 14), ("jnxoptIf15MinThreshUASTCA", 15), ("jnxoptIf15MinThreshBip8TCA", 16), ("jnxoptIf15MinThUnCorrectedWordsTCA", 17), ("jnxoptIf15MinThreshPreFECBERTCA", 18), ("jnxoptIf24HourThreshBBETCA", 19), ("jnxoptIf24HourThreshESTCA", 20), ("jnxoptIf24HourThreshSESTCA", 21), ("jnxoptIf24HourThreshUASTCA", 22), ("jnxoptIf24HourThreshBip8TCA", 23), ("jnxoptIf24HourThreshPreFECBERTCA", 24), ("jnxoptIfOtuAisAlarm", 25))

class JnxoptIfOTNODUkTcmAlarms(TextualConvention, Integer32):
    description = 'This is the alarms from the ODUk and TCM layer.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))
    namedValues = NamedValues(("jnxoptIfOtnOdukTcmNoAlarm", 0), ("jnxoptIfOdukTcmOciAlarm", 1), ("jnxoptIfOdukTcmLckAlarm", 2), ("jnxoptIfOdukTcmBdiAlarm", 3), ("jnxoptIfOdukTcmTimAlarm", 4), ("jnxoptIfOdukTcmDegAlarm", 5), ("jnxoptIfOdukTcmIaeAlarm", 6), ("jnxoptIfOdukTcmLTCAlarm", 7), ("jnxoptIfOdukTcmCSfAlarm", 8), ("jnxoptIfOdukTcmSSfAlarm", 9), ("jnxoptIfOdukTcmTSfAlarm", 10), ("jnxoptIfOdukTcm15MinThreshBBETCA", 11), ("jnxoptIfOdukTcm15MinThreshESTCA", 12), ("jnxoptIfOdukTcm15MinThreshSESTCA", 13), ("jnxoptIfOdukTcm15MinThreshUASTCA", 14), ("jnxoptIfOdukTcm15MinThreshBip8TCA", 15), ("jnxoptIfOdukTcmAisAlarm", 16), ("jnxoptIfOdukPtmAlarm", 17), ("jnxoptIfOdukTcm24HourThreshBBETCA", 18), ("jnxoptIfOdukTcm24HourThreshESTCA", 19), ("jnxoptIfOdukTcm24HourThreshSESTCA", 20), ("jnxoptIfOdukTcm24HourThreshUASTCA", 21), ("jnxoptIfOdukTcm24HourThreshBip8TCA", 22))

class JnxoptIfOTNAlarmSeverity(TextualConvention, Integer32):
    description = 'Severity of the Notification'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("jnxCritical", 1), ("jnxMajor", 2), ("jnxMinor", 3), ("jnxInfo", 4))

jnxoptIfOTNNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 0))
jnxoptIfOPSmEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 1))
jnxoptIfOChSrcSinkGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2))
jnxoptIfOTNPMGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3))
jnxoptIfOTNAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 4))
jnxoptIfOPSmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 1, 1), )
if mibBuilder.loadTexts: jnxoptIfOPSmConfigTable.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOPSmConfigTable.setDescription('A table of OPS General config parameters.')
jnxoptIfOPSmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOPSmConfigEntry.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOPSmConfigEntry.setDescription('An conceptual row of OPS General config parameters.')
jnxoptIfOPSmDirectionality = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 1, 1, 1, 1), JnxoptIfDirectionality()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOPSmDirectionality.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOPSmDirectionality.setDescription('Indicates the directionality of the entity.')
jnxoptIfOPSmFiberTypeRecommendation = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 1, 1, 1, 2), JnxoptIfFiberTypeRecommendation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOPSmFiberTypeRecommendation.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOPSmFiberTypeRecommendation.setDescription('Fiber type as per fibre types are chosen from those defined in ITU-T Recs G.652, G.653, G.654, G.655, G.656 and G.657.')
jnxoptIfOPSmFiberTypeCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 1, 1, 1, 3), JnxoptIfFiberTypeCategory()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOPSmFiberTypeCategory.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOPSmFiberTypeCategory.setDescription('Fiber type as per fibre types are chosen from those defined in ITU-T Recs G.652, G.653, and G.655. The categories are A, B, C, D and E.')
jnxoptIfOChConfigExtTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1), )
if mibBuilder.loadTexts: jnxoptIfOChConfigExtTable.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChConfigExtTable.setDescription('A table of Och General config extension parameters')
jnxoptIfOChConfigExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1), )
jnxoptIfOChConfigEntry.registerAugmentions(("JNX-OPT-IF-EXT-MIB", "jnxoptIfOChConfigExtEntry"))
jnxoptIfOChConfigExtEntry.setIndexNames(*jnxoptIfOChConfigEntry.getIndexNames())
if mibBuilder.loadTexts: jnxoptIfOChConfigExtEntry.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChConfigExtEntry.setDescription('A conceptual row that contains OCh configuration extension information of an interface.')
jnxoptIfOChMiminumChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1, 1), JnxoptIfChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChMiminumChannelSpacing.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChMiminumChannelSpacing.setDescription('A minimum nominal difference in frequency (GHz) between two adjacent channels.')
jnxoptIfOChBitRateLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1, 2), JnxoptIfBitRateLineCoding()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChBitRateLineCoding.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChBitRateLineCoding.setDescription('Optical tributary signal class NRZ 2.5G (from nominally 622 Mbit/s to nominally 2.67 Gbit/s) NRZ 10G (nominally 2.4 Gbit/s to nominally 10.71 Gbit/s) ')
jnxoptIfOChFEC = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOChFEC.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChFEC.setDescription("This parameter indicates what Forward Error Correction (FEC) code is used at Source and Sink. GFEC (from G709) and the I.x EFEC's (G.975 - Table I.1 super FEC). 1 - No FEC 2 - GFEC 3 - I.2 EFEC 4 - I.3 EFEC 5 - I.4 EFEC 6 - I.5 EFEC 7 - I.6 EFEC 8 - I.7 EFEC 9 - I.8 EFEC 10 - I.9 EFEC 11 - 100G FEC (for new applications) 12 - 100G EFEC (for new applications) 99 - Vendor Specific ")
jnxoptIfOChSinkMaximumBERMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkMaximumBERMantissa.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChSinkMaximumBERMantissa.setDescription('This parameter indicate the maximum Bit(mantissa) error rate can be supported by the application at the Receiver. In case of FEC applications it is intended after the FEC correction.')
jnxoptIfOChSinkMaximumBERExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkMaximumBERExponent.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChSinkMaximumBERExponent.setDescription('This parameter indicate the maximum Bit(exponent) error rate can be supported by the application at the Receiver. In case of FEC applications it is intended after the FEC correction.')
jnxoptIfOChMinWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1, 6), Unsigned32()).setUnits('0.01 nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChMinWavelength.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChMinWavelength.setDescription('This parameter indicate minimum wavelength spectrum in a definite wavelength Band (L, C and S) ')
jnxoptIfOChMaxWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1, 7), Unsigned32()).setUnits('0.01 nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChMaxWavelength.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChMaxWavelength.setDescription('This parameter indicate maximum wavelength spectrum in a definite wavelength Band (L, C and S) ')
jnxoptIfOChWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1, 8), Unsigned32()).setUnits('0.01 nm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOChWavelength.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChWavelength.setDescription('This parameter indicates the wavelength value.')
jnxoptIfOChVendorTransceiverClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChVendorTransceiverClass.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChVendorTransceiverClass.setDescription('As defined in G.698 Vendors can summarize a set of parameters in a single proprietary parameter: the Class of transceiver. The Transceiver classification will be based on the Vendor Name and the main TX and RX parameters (i.e. Trunk Mode, Framing, Bit rate, Trunk Type etc). If this parameter is used, the MIB parameters specifying the Transceiver characteristics may not be significant and the vendor will be responsible to specify the Class contents and values. The Vendor can publish the parameters of its Classes or declare to be compatible with published Classes.(G) Optional for compliance. (not mentioned in G.698) ')
jnxoptIfOChOpticalInterfaceApplicationCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChOpticalInterfaceApplicationCode.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChOpticalInterfaceApplicationCode.setDescription('This parameter indicates the transceiver application code at Ss and Rs as defined in [ITU.G698.2] Chapter 5.3 ')
jnxoptIfOChLaserAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOChLaserAdminState.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChLaserAdminState.setDescription('The configured State of the laser: 0 - disabled 1 - enabled ')
jnxoptIfOChLaserOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("fault", 2), ("degraded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChLaserOperationalState.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChLaserOperationalState.setDescription('The Operational Status of Laser: 0 - disabled 1 - Enabled 2 - fault 3 - degraded')
jnxoptIfOChAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOChAdminState.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChAdminState.setDescription('The Administrative Status of an Interface: 0 - Out of Service 1 - In Service ')
jnxoptIfOChOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("fault", 2), ("degraded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChOperationalState.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChOperationalState.setDescription('The Operational Status of an Interface: 0 - disabled 1 - enabled 2 - Fault 3 - Degraded')
jnxoptIfOChSrcConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 2), )
if mibBuilder.loadTexts: jnxoptIfOChSrcConfigTable.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChSrcConfigTable.setDescription('A configuration table of OCh Src (Ss) parameters.')
jnxoptIfOChSrcConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOChSrcConfigEntry.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChSrcConfigEntry.setDescription('A conceptual row that contains the Src (Ss) configuration parameters for a given interface.')
jnxoptIfOChMinimumMeanChannelOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 2, 1, 1), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChMinimumMeanChannelOutputPower.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChMinimumMeanChannelOutputPower.setDescription('The minimum mean launched power at Ss is the average power (in dbm) of a pseudo-random data sequence coupled into the DWDM link.')
jnxoptIfOChMaximumMeanChannelOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 2, 1, 2), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChMaximumMeanChannelOutputPower.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChMaximumMeanChannelOutputPower.setDescription('The maximum mean launched power at Ss is the average power (in dbm) of a pseudo-random data sequence coupled into the DWDM link.')
jnxoptIfOChMinimumCentralFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 2, 1, 3), Unsigned32()).setUnits('0.01 THz').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChMinimumCentralFrequency.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChMinimumCentralFrequency.setDescription('The minimum central frequency is the nominal single-channel frequency (in THz) on which the digital coded information of the particular optical channel is modulated by use of the NRZ line code. Eg 191.5THz will be represented as 19150 ')
jnxoptIfOChMaximumCentralFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 2, 1, 4), Unsigned32()).setUnits('0.01 THz').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChMaximumCentralFrequency.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChMaximumCentralFrequency.setDescription('The maximum central frequency is the nominal single-channel frequency (in THz) on which the digital coded information of the particular optical channel is modulated by use of the NRZ line code. Eg 191.5THz will be represented as 19150 ')
jnxoptIfOChMaximumSpectralExcursion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 2, 1, 5), Unsigned32()).setUnits('0.1 GHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChMaximumSpectralExcursion.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChMaximumSpectralExcursion.setDescription('This is the maximum acceptable difference between the nominal central frequency (in GHz) of the channel and the minus 15 dB points of the transmitter spectrum furthest from the nominal central frequency measured at point Ss.')
jnxoptIfOChMaximumTxDispersionOSNRPenalty = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 2, 1, 6), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChMaximumTxDispersionOSNRPenalty.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChMaximumTxDispersionOSNRPenalty.setDescription('Defines a reference receiver that this penalty is measured with. Lowest OSNR at Ss with worst case (residual) dispersion minus the Lowest OSNR at Ss with no dispersion. Lowest OSNR at Ss with no dispersion ')
jnxoptIfOChSrcSinkConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 3), )
if mibBuilder.loadTexts: jnxoptIfOChSrcSinkConfigTable.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChSrcSinkConfigTable.setDescription('A table of paramters for the optical path from Src to Sink (Ss to Rs).')
jnxoptIfOChSrcSinkConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOChSrcSinkConfigEntry.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChSrcSinkConfigEntry.setDescription('A conceptual row that contains the optical path Src-Sink (Ss-Rs) configuration parameters for a given interface.')
jnxoptIfOChSrcSinkMinimumChromaticDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 3, 1, 1), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcSinkMinimumChromaticDispersion.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChSrcSinkMinimumChromaticDispersion.setDescription("These parameters define the minimum value of the optical path 'end to end chromatic dispersion' (in ps/nm) that the system shall be able to tolerate.")
jnxoptIfOChSrcSinkMaximumChromaticDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 3, 1, 2), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcSinkMaximumChromaticDispersion.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChSrcSinkMaximumChromaticDispersion.setDescription("These parameters define the maximum value of the optical path 'end to end chromatic dispersion' (in ps/nm) that the system shall be able to tolerate.")
jnxoptIfOChSrcSinkMinimumSrcOpticalReturnLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 3, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcSinkMinimumSrcOpticalReturnLoss.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChSrcSinkMinimumSrcOpticalReturnLoss.setDescription('These parameter defines minimum optical return loss (in dB) of the cable plant at the source reference point (Src/Ss), including any connectors.')
jnxoptIfOChSrcSinkMaximumDiscreteReflectanceSrcToSink = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 3, 1, 4), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcSinkMaximumDiscreteReflectanceSrcToSink.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChSrcSinkMaximumDiscreteReflectanceSrcToSink.setDescription('Optical reflectance is defined to be the ratio of the reflected optical power pre.sent at a point, to the optical power incident to that point. Control of reflections is discussed extensively in ITU-T Rec. G.957.')
jnxoptIfOChSrcSinkMaximumDifferentialGroupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 3, 1, 5), Integer32()).setUnits('ps').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcSinkMaximumDifferentialGroupDelay.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChSrcSinkMaximumDifferentialGroupDelay.setDescription('Differential group delay (DGD) is the time difference between the fractions of a pulse that are transmitted in the two principal states of polarization of an optical signal. For distances greater than several kilometres, and assuming random (strong) polarization mode coupling, DGD in a fibre can be statistically modelled as having a Maxwellian distribution.')
jnxoptIfOChSrcSinkMaximumPolarisationDependentLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 3, 1, 6), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcSinkMaximumPolarisationDependentLoss.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChSrcSinkMaximumPolarisationDependentLoss.setDescription('The polarisation dependent loss (PDL) is the difference (in dB) between the maximum and minimum values of the channel insertion loss (or gain) of the black-link from point SS to RS due to a variation of the state of polarization (SOP) over all SOPs.')
jnxoptIfOChSrcSinkMaximumInterChannelCrosstalk = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 3, 1, 7), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcSinkMaximumInterChannelCrosstalk.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChSrcSinkMaximumInterChannelCrosstalk.setDescription("Inter-channel crosstalk is defined as the ratio of total power in all of the disturbing channels to that in the wanted channel, where the wanted and disturbing channels are at different wavelengths. The parameter specify the isolation of a link conforming to the 'black-link' approach such that under the worst- case operating conditions the inter-channel crosstalk at any reference point RS is less than the maximum inter-channel crosstalk value.")
jnxoptIfOChSrcSinkInterFerometricCrosstalk = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 3, 1, 8), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcSinkInterFerometricCrosstalk.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChSrcSinkInterFerometricCrosstalk.setDescription("This parameter places a requirement on the isolation of a link conforming to the 'black-link' approach such that under the worst case operating conditions the interferometric crosstalk at any reference point RS is less than the maximum interferometric crosstalk value..")
jnxoptIfOChSrcSinkOpticalPathOSNRPenalty = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 3, 1, 9), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSrcSinkOpticalPathOSNRPenalty.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChSrcSinkOpticalPathOSNRPenalty.setDescription('The optical path OSNR penalty is defined as the difference between the Lowest OSNR at Rs and Lowest OSNR at Ss that meets the BER requirement.')
jnxoptIfOChSinkConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 4), )
if mibBuilder.loadTexts: jnxoptIfOChSinkConfigTable.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChSinkConfigTable.setDescription('A table of OCh Sink (Rs) configuration parameters.')
jnxoptIfOChSinkConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOChSinkConfigEntry.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChSinkConfigEntry.setDescription('A conceptual row that contains the Sink (Rs) configuration parameters for a given interface.')
jnxoptIfOChSinkMinimumMeanIntputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 4, 1, 1), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkMinimumMeanIntputPower.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChSinkMinimumMeanIntputPower.setDescription(' The minimum values of the average received power (in dbm at point the Sink (Rs).')
jnxoptIfOChSinkMaximumMeanIntputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 4, 1, 2), Integer32()).setUnits('0.01 dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkMaximumMeanIntputPower.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChSinkMaximumMeanIntputPower.setDescription('The maximum values of the average received power (in dbm) at point the Sink (Rs).')
jnxoptIfOChSinkMinimumOSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 4, 1, 3), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkMinimumOSNR.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChSinkMinimumOSNR.setDescription('The minimum optical signal-to-noise ratio (OSNR) is the minimum value of the ratio of the signal power in the wanted channel to the highest noise power density in the range of the central frequency plus and minus the maximum spectral excursion.')
jnxoptIfOChSinkOSNRTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 2, 4, 1, 4), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkOSNRTolerance.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChSinkOSNRTolerance.setDescription('The receiver OSNR tolerance is defined as the minimum value of OSNR at point Sink (Rs) that can be tolerated while maintaining the maximum BER of the application. Sink (Rs).')
jnxoptIfOChSinkCurrentExtTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 1), )
if mibBuilder.loadTexts: jnxoptIfOChSinkCurrentExtTable.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChSinkCurrentExtTable.setDescription('A table of OCh sink etxension to the performance monitoring information for the current 15-minute interval.')
jnxoptIfOChSinkCurrentExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 1, 1), )
jnxoptIfOChSinkCurrentEntry.registerAugmentions(("JNX-OPT-IF-EXT-MIB", "jnxoptIfOChSinkCurrentExtEntry"))
jnxoptIfOChSinkCurrentExtEntry.setIndexNames(*jnxoptIfOChSinkCurrentEntry.getIndexNames())
if mibBuilder.loadTexts: jnxoptIfOChSinkCurrentExtEntry.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChSinkCurrentExtEntry.setDescription('A conceptual row that contains OCh sink performance monitoring information for an interface for the current 15-minute interval.')
jnxoptIfOChSinkCurrentChromaticDispersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 1, 1, 1), Integer32()).setUnits('ps/nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkCurrentChromaticDispersion.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChSinkCurrentChromaticDispersion.setDescription('Residual Chromatic Dispersion measured at Rx Transceiver port.')
jnxoptIfOChSinkCurrentOSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 1, 1, 2), Integer32()).setUnits('0.1 dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkCurrentOSNR.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChSinkCurrentOSNR.setDescription('Current Optical Signal to Noise Ratio (OSNR) estimated at Rx Transceiver port .')
jnxoptIfOChSinkCurrentQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOChSinkCurrentQ.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOChSinkCurrentQ.setDescription("'Q' factor estimated at Rx Transceiver port.")
jnxoptIfOTNPMConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2), )
if mibBuilder.loadTexts: jnxoptIfOTNPMConfigTable.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMConfigTable.setDescription("A table of performance monitoring configuration for the type 'jnxoptIfOTNPMConfigLayer' layer.")
jnxoptIfOTNPMConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMConfigType"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMConfigLayer"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMConfigTCMLevel"))
if mibBuilder.loadTexts: jnxoptIfOTNPMConfigEntry.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMConfigEntry.setDescription("A conceptual entry in the performance monitoring configuration for the type 'jnxoptIfOTNPMConfigLayer' layer.")
jnxoptIfOTNPMConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 1), JnxoptIfOTNType())
if mibBuilder.loadTexts: jnxoptIfOTNPMConfigType.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMConfigType.setDescription('This parameter indicates the parameters for the table are for the Near End or Far End performance data. 1 - Near End 2 - Far End ')
jnxoptIfOTNPMConfigLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 2), JnxoptIfOTNLayer())
if mibBuilder.loadTexts: jnxoptIfOTNPMConfigLayer.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMConfigLayer.setDescription('This parameter indicates the parameters for the table are for OTUk, ODUk, TCMn performance data. 1 - OTUk 2 - ODUk 3 - TCM The ODUk/TCM sublayer PM is not related to the black link PM management, but since this is a common PM model for the ODU/TCM layer, we may include it here.')
jnxoptIfOTNPMConfigTCMLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 6)))
if mibBuilder.loadTexts: jnxoptIfOTNPMConfigTCMLevel.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMConfigTCMLevel.setDescription('This parameter indicates the TCM level (1-6) if the PM is of the type TCM. This will be 0 for OTUK/ODUK.')
jnxoptIfOTNPMESRInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPMESRInterval.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMESRInterval.setDescription('This parameter indicates the measurement interval for error seconds ratio.')
jnxoptIfOTNPMSESRInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 5), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPMSESRInterval.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMSESRInterval.setDescription('This parameter indicates the measurement interval for severely error seconds ratio.')
jnxoptIfOTNPMValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMValidIntervals.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMValidIntervals.setDescription('The number of contiguous 15 minute intervals for which valid PM data is available for the particular interface.')
jnxoptIfOTNPM15MinBip8Threshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPM15MinBip8Threshold.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPM15MinBip8Threshold.setDescription("The number of Bip8 encountered by the interface within any given 15 minutes performance data collection period, which causes the SNMP agent to send jnxoptIf15MinThreshBip8TCA. One notification will be sent per interval per interface. A value of `0' will disable the notification.")
jnxoptIfOTNPM15MinESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPM15MinESsThreshold.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPM15MinESsThreshold.setDescription("The number of ES encountered by the interface within any given 15 minutes performance data collection period, which causes the SNMP agent to send jnxoptIf15MinThreshEsTCA. One notification will be sent per interval per interface. A value of `0' will disable the notification.")
jnxoptIfOTNPM15MinSESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPM15MinSESsThreshold.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPM15MinSESsThreshold.setDescription("The number of SES encountered by the interface within any given 15 minutes performance data collection period, which causes the SNMP agent to send jnxoptIf15MinThreshSESTCA. One notification will be sent per interval per interface. A value of `0' will disable the notification.")
jnxoptIfOTNPM15MinUASsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPM15MinUASsThreshold.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPM15MinUASsThreshold.setDescription("The number of UAS encountered by the interface within any given 15 minutes performance data collection period, which causes the SNMP agent to send jnxoptIf15MinThreshUASTCA. One notification will be sent per interval per interface. A value of `0' will disable the notification.")
jnxoptIfOTNPM15MinBBEsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPM15MinBBEsThreshold.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPM15MinBBEsThreshold.setDescription("The number of UAS encountered by the interface within any given 15 minutes performance data collection period, which causes the SNMP agent to send jnxoptIf15MinThreshBBETCA. One notification will be sent per interval per interface. A value of `0' will disable the notification.")
jnxoptIfOTNPM24HourBip8Threshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPM24HourBip8Threshold.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPM24HourBip8Threshold.setDescription("The number of Bip8 encountered by the interface within any given 24 Hour performance data collection period, which causes the SNMP agent to send jnxoptIf15MinThreshBip8TCA. One notification will be sent per interval per interface. A value of `0' will disable the notification.")
jnxoptIfOTNPM24HourESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPM24HourESsThreshold.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPM24HourESsThreshold.setDescription("The number of ES encountered by the interface within any given 24 hour performance data collection period, which causes the SNMP agent to send jnxoptIf24HourThreshEsTCA. One notification will be sent per 24 hour per interface. A value of `0' will disable the notification.")
jnxoptIfOTNPM24HourSESsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPM24HourSESsThreshold.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPM24HourSESsThreshold.setDescription("The number of SES encountered by the interface within any given 24 hour performance data collection period, which causes the SNMP agent to send jnxoptIf24HourThreshSESsTCA. One notification will be sent per 24 hour per interface. A value of `0' will disable the notification.")
jnxoptIfOTNPM24HourUASsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPM24HourUASsThreshold.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPM24HourUASsThreshold.setDescription("The number of SES encountered by the interface within any given 24 hour performance data collection period, which causes the SNMP agent to send jnxoptIf24HourThreshUASsTCA. One notification will be sent per 24 hour per interface. A value of `0' will disable the notification.")
jnxoptIfOTNPM24HourBBEsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPM24HourBBEsThreshold.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPM24HourBBEsThreshold.setDescription("The number of BBE encountered by the interface within any given 24 hour performance data collection period, which causes the SNMP agent to send jnxoptIf24HourThreshBBEsTCA. One notification will be sent per 24 hour per interface. A value of `0' will disable the notification.")
jnxoptIfOTNPMBip8EnableTCA = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPMBip8EnableTCA.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMBip8EnableTCA.setDescription(" Enable TCA's - 15minute and 24hr for Bip8 ")
jnxoptIfOTNPMESsEnableTCA = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPMESsEnableTCA.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMESsEnableTCA.setDescription(" Enable TCA's - 15minute and 24hr for ESs ")
jnxoptIfOTNPMSESsEnableTCA = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 19), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPMSESsEnableTCA.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMSESsEnableTCA.setDescription(" Enable TCA's - 15minute and 24hr for SESs ")
jnxoptIfOTNPMUASsEnableTCA = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 20), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPMUASsEnableTCA.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMUASsEnableTCA.setDescription(" Enable TCA's - 15minute and 24hr for UASs ")
jnxoptIfOTNPMBBEsEnableTCA = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 2, 1, 21), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPMBBEsEnableTCA.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMBBEsEnableTCA.setDescription(" Enable TCA's - 15minute and 24hr for BBEs ")
jnxoptIfOTNPMCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3), )
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentTable.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentTable.setDescription('A table for the Performance monitoring Current Table.')
jnxoptIfOTNPMCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMCurrentType"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMCurrentLayer"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMCurrentTCMLevel"))
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentEntry.setDescription("A conceptual entry in the Near end or Far End performance monitoring Current table for the type 'jnxoptIfOTNPMCurrentLayer' layer.")
jnxoptIfOTNPMCurrentType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1, 1), JnxoptIfOTNType())
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentType.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentType.setDescription('This parameter indicates the parameters for the table are for the Near End or Far End performance data. 1 - Near End 2 - Far End ')
jnxoptIfOTNPMCurrentLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1, 2), JnxoptIfOTNLayer())
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentLayer.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentLayer.setDescription('This parameter indicates the parameters for the table are for OTUk, ODUk, TCMn performance data. 1 - OTUk (OCh which is used for the black link) 2 - ODUk 3 - TCM The ODUk/TCM sublayer PM is not related to the black link PM management, but since this is a common PM model for the ODU/TCM layer, we may include it here.')
jnxoptIfOTNPMCurrentTCMLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 6)))
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentTCMLevel.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentTCMLevel.setDescription('This parameter indicates the TCM level (1-6) if the PM is of the type TCM. This will be 0 for OTUK/ODUK.')
jnxoptIfOTNPMCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentSuspectedFlag.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentSuspectedFlag.setDescription('If true, the data in this entry may be unreliable.')
jnxoptIfOTNPMCurrentBip8 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentBip8.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentBip8.setDescription('Number of Failures occurred in an observation period.')
jnxoptIfOTNPMCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentESs.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentESs.setDescription('This is the number of seconds in which one or more bits are in error or during which Loss of Signal (LOS) or Alarm Indication Signal (AIS) is detected.')
jnxoptIfOTNPMCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentSESs.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentSESs.setDescription('The number of seconds which have a severe error. This is the number of seconds in which the bit-error ratio = 1x10Eminus3 or during which Loss of Signal (LOS) or Alarm Indication Signal (AIS) is detected.')
jnxoptIfOTNPMCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentUASs.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentUASs.setDescription('It is the number of unavailable seconds. A period of unavailable time begins at the onset of ten consecutive SES events. These ten seconds are considered to be part of unavailable time. A new period of available time begins at the onset of ten consecutive non-SES events. These ten seconds are considered to be part of available time.')
jnxoptIfOTNPMCurrentBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentBBEs.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentBBEs.setDescription('An errored block not occurring as part of an SES.')
jnxoptIfOTNPMCurrentESR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1, 10), Unsigned32()).setUnits('.001').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentESR.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentESR.setDescription('The ratio of ES in available time to total seconds in available time during a fixed measurement interval.')
jnxoptIfOTNPMCurrentSESR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1, 11), Unsigned32()).setUnits('.001').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentSESR.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentSESR.setDescription('The ratio of SES in available time to total seconds in available time during a fixed measurement interval.')
jnxoptIfOTNPMCurrentBBER = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1, 12), Unsigned32()).setUnits('.001').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentBBER.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentBBER.setDescription('The ratio of BER in available time to total seconds in available time during a fixed measurement interval.')
jnxoptIfOTNPMCurrentElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1, 13), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentElapsedTime.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentElapsedTime.setDescription('Time elapsed for this 15 minute interval')
jnxoptIfOTNPMCurSuspectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurSuspectReason.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurSuspectReason.setDescription('If SuspectedFlag is true, the reson for the PM data being suspect. 0 - not applicable 1 - unknown 2 - new object 3 - interface disabled 4 - clock shift detected 5 - cleared by user 6 - interval too short secs < 890 7 - interval too long secs > 910 8 - near end unavailable 9 - far end unavailable 10 - partial data 11 - missing intervals due to restarts ')
jnxoptIfOTNPMIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4), )
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalTable.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalTable.setDescription('A Performance monitoring Interval Table.')
jnxoptIfOTNPMIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMIntervalType"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMIntervalLayer"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMIntervalTCMLevel"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMIntervalNumber"))
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalEntry.setDescription("A conceptual entry in the Near end or Far End performance monitoring Interval table for the type 'jnxoptIfOTNPMIntervalLayer' layer.")
jnxoptIfOTNPMIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 1), JnxoptIfOTNType())
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalType.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalType.setDescription('This parameter indicates the parameters for the table are for the Near End or Far End performance data. 1 - Near End 2 - Far End ')
jnxoptIfOTNPMIntervalLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 2), JnxoptIfOTNLayer())
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalLayer.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalLayer.setDescription('This parameter indicates the parameters for the table are for OTUk, ODUk, TCMn performance data. 1 - OTUk 2 - ODUk 3 - TCM The ODUk/TCM sublayer PM is not related to the black link PM management, but since this is a common PM model for the ODU/TCM layer, we may include it here.')
jnxoptIfOTNPMIntervalTCMLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 6)))
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalTCMLevel.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalTCMLevel.setDescription('This parameter indicates the TCM level (1-6) if the PM is of the type TCM. This will be 0 for OTUK/ODUK.')
jnxoptIfOTNPMIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalNumber.setDescription('A number between 1 and 96, where 1 is the most recently completed 15 minute interval and 96 is the 15 minutes interval completed 23 hours and 45 minutes prior to interval 1.')
jnxoptIfOTNPMIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalSuspectedFlag.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalSuspectedFlag.setDescription('If true, the data in this entry may be unreliable.')
jnxoptIfOTNPMIntervalBip8 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalBip8.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalBip8.setDescription('Number of Failures occurred in an observation period.')
jnxoptIfOTNPMIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalESs.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalESs.setDescription('It is a one-second period in which one or more bits are in error or during which Loss of Signal (LOS) or Alarm Indication Signal (AIS) is detected.')
jnxoptIfOTNPMIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalSESs.setDescription('The number of seconds which have a severe error. It is a one-second period which has a bit-error ratio = 1x10Eminus3 or during which Loss of Signal (LOS) or Alarm Indication Signal (AIS) is detected.')
jnxoptIfOTNPMIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalUASs.setDescription('It is the number of unavailable seconds in this 15 minute interval. A period of unavailable time begins at the onset of ten consecutive SES events. These ten seconds are considered to be part of unavailable time. A new period of available time begins at the onset of ten consecutive non-SES events. These ten seconds are considered to be part of available time.')
jnxoptIfOTNPMIntervalBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalBBEs.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalBBEs.setDescription('An errored block not occurring as part of an SES.')
jnxoptIfOTNPMIntervalESR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 11), Unsigned32()).setUnits('.001').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalESR.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalESR.setDescription('The ratio of ES in available time to total seconds in available time during a fixed measurement interval.')
jnxoptIfOTNPMIntervalSESR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 12), Unsigned32()).setUnits('.001').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalSESR.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalSESR.setDescription('The ratio of SES in available time to total seconds in available time during a fixed measurement interval.')
jnxoptIfOTNPMIntervalBBER = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 13), Unsigned32()).setUnits('.001').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalBBER.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalBBER.setDescription('The ratio of BBE in available time to total seconds in available time during a fixed measurement interval.')
jnxoptIfOTNPMIntervalTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalTimeStamp.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalTimeStamp.setDescription('Time stamp of this interval.')
jnxoptIfOTNPMIntSuspectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntSuspectReason.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMIntSuspectReason.setDescription('If SuspectedFlag is true, the reson for the PM data being suspect. 0 - not applicable 1 - unknown 2 - new object 3 - interface disabled 4 - clock shift detected 5 - cleared by user 6 - interval too short secs < 890 7 - interval too long secs > 910 8 - near end unavailable 9 - far end unavailable 10 - partial data 11 - missing intervals due to restarts ')
jnxoptIfOTNPMCurrentDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5), )
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayTable.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayTable.setDescription('A Performance monitoring Current Day Table.')
jnxoptIfOTNPMCurrentDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMCurrentDayType"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMCurrentDayLayer"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMCurrentDayTCMLevel"))
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayEntry.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayEntry.setDescription("A conceptual entry in the Near end or Far End performance monitoring Current day table for the type 'jnxoptIfOTNPMCurrentDayLayer' layer.")
jnxoptIfOTNPMCurrentDayType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1, 1), JnxoptIfOTNType())
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayType.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayType.setDescription('This parameter indicates the parameters for the table are for the Near End or Far End performance data. 1 - Near End 2 - Far End ')
jnxoptIfOTNPMCurrentDayLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1, 2), JnxoptIfOTNLayer())
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayLayer.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayLayer.setDescription('This parameter indicates the parameters for the table are for OTUk, ODUk, TCMn performance data. 1 - OTUk 2 - ODUk 3 - TCM The ODUk/TCM sublayer PM is not related to the black link PM management, but since this is a common PM model for the ODU/TCM layer, we may include it here.')
jnxoptIfOTNPMCurrentDayTCMLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 6)))
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayTCMLevel.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayTCMLevel.setDescription('This parameter indicates the TCM level (1-6) if the PM is of the type TCM. This will be 0 for OTUK/ODUK.')
jnxoptIfOTNPMCurrentDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDaySuspectedFlag.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDaySuspectedFlag.setDescription('If true, the data in this entry may be unreliable.')
jnxoptIfOTNPMCurrentDayBip8 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayBip8.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayBip8.setDescription('Number of Failures occurred in an observation period.')
jnxoptIfOTNPMCurrentDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayESs.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayESs.setDescription('The number of seconds which have an error. It is a one-second period in which one or more bits are in error or during which Loss of Signal (LOS) or Alarm Indication Signal (AIS) is detected.')
jnxoptIfOTNPMCurrentDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDaySESs.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDaySESs.setDescription('The number of seconds which have a severe error. It is a one-second period which has a bit-error ratio = 1x10Eminus3 or during which Loss of Signal (LOS) or Alarm Indication Signal (AIS) is detected.')
jnxoptIfOTNPMCurrentDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayUASs.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayUASs.setDescription('It is the number of unavailable seconds in the cunrrent day. A period of unavailable time begins at the onset of ten consecutive SES events. These ten seconds are considered to be part of unavailable time. A new period of available time begins at the onset of ten consecutive non-SES events. These ten seconds are considered to be part of available time.')
jnxoptIfOTNPMCurrentDayBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayBBEs.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayBBEs.setDescription('An errored block not occurring as part of an SES.')
jnxoptIfOTNPMCurrentDayESR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1, 10), Unsigned32()).setUnits('.001').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayESR.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayESR.setDescription('The ratio of ES in available time to total seconds in available time during a fixed measurement interval.')
jnxoptIfOTNPMCurrentDaySESR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1, 11), Unsigned32()).setUnits('.001').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDaySESR.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDaySESR.setDescription('The ratio of SES in available time to total seconds in available time during a fixed measurement interval.')
jnxoptIfOTNPMCurrentDayBBER = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1, 12), Unsigned32()).setUnits('.001').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayBBER.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayBBER.setDescription('The ratio of BBE in available time to total seconds in available time during a fixed measurement interval.')
jnxoptIfOTNPMCurrentDayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1, 13), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayElapsedTime.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayElapsedTime.setDescription('Time elapsed for current day')
jnxoptIfOTNPMCurDaySuspectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurDaySuspectReason.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurDaySuspectReason.setDescription('If SuspectedFlag is true, the reson for the PM data being suspect. 0 - not applicable 1 - unknown 2 - new object 3 - interface disabled 4 - clock shift detected 5 - cleared by user 6 - partial data 7 - one or more intervals are invaild ')
jnxoptIfOTNPMPrevDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6), )
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayTable.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayTable.setDescription('A Performance monitoring Previous Day Table.')
jnxoptIfOTNPMPrevDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMPrevDayType"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMPrevDayLayer"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMPrevDayTCMLevel"))
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayEntry.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayEntry.setDescription("A conceptual entry in the Near end or Far End performance monitoring previous day table for the type 'jnxoptIfOTNPMPrevDayLayer' layer.")
jnxoptIfOTNPMPrevDayType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1, 1), JnxoptIfOTNType())
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayType.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayType.setDescription('This parameter indicates the parameters for the table are for the Near End or Far End performance data. 1 - Near End 2 - Far End ')
jnxoptIfOTNPMPrevDayLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1, 2), JnxoptIfOTNLayer())
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayLayer.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayLayer.setDescription('This parameter indicates the parameters for the table are for OTUk, ODUk, TCMn performance data. 1 - OTUk 2 - ODUk 3 - TCM The ODUk/TCM sublayer PM is not related to the black link PM management, but since this is a common PM model for the ODU/TCM layer, we may include it here.')
jnxoptIfOTNPMPrevDayTCMLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 6)))
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayTCMLevel.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayTCMLevel.setDescription('This parameter indicates the TCM level (1-6) if the PM is of the type TCM.')
jnxoptIfOTNPMPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDaySuspectedFlag.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDaySuspectedFlag.setDescription('If true, the data in this entry may be unreliable.')
jnxoptIfOTNPMPrevDayBip8 = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayBip8.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayBip8.setDescription('Number of pre FEC failures occurred in an observation period.')
jnxoptIfOTNPMPrevDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayESs.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayESs.setDescription('The number of seconds which have an error. It is a one-second period in which one or more bits are in error or during which Loss of Signal (LOS) or Alarm Indication Signal (AIS) is detected.')
jnxoptIfOTNPMPrevDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDaySESs.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDaySESs.setDescription('The number of seconds which have a severe error. A severely errored second, is a one-second period which has a bit-error ratio = 1x10Eminus3 or during which Loss of Signal (LOS) or Alarm Indication Signal (AIS) is detected.')
jnxoptIfOTNPMPrevDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayUASs.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayUASs.setDescription('It is the number of unavailable seconds in the previous day. A period of unavailable time begins at the onset of ten consecutive SES events. These ten seconds are considered to be part of unavailable time. A new period of available time begins at the onset of ten consecutive non-SES events. These ten seconds are considered to be part of available time.')
jnxoptIfOTNPMPrevDayBBEs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayBBEs.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayBBEs.setDescription('An errored block not occurring as part of an SES.')
jnxoptIfOTNPMPrevDayESR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1, 10), Unsigned32()).setUnits('.001').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayESR.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayESR.setDescription('The ratio of ES in available time to total seconds in available time during a fixed measurement interval.')
jnxoptIfOTNPMPrevDaySESR = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1, 11), Unsigned32()).setUnits('.001').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDaySESR.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDaySESR.setDescription('The ratio of SES in available time to total seconds in available time during a fixed measurement interval.')
jnxoptIfOTNPMPrevDayBBER = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1, 12), Unsigned32()).setUnits('.001').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayBBER.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayBBER.setDescription('The ratio of BBE in available time to total seconds in available time during a fixed measurement interval.')
jnxoptIfOTNPMPrevDayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayTimeStamp.setDescription('Time stamp of this interval.')
jnxoptIfOTNPMPrevDaySuspectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDaySuspectReason.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDaySuspectReason.setDescription('If SuspectedFlag is true, the reson for the PM data being suspect. 0 - not applicable 1 - unknown 2 - new object 3 - clock shift detected 4 - cleared by user 5 - partial data 6 - missing intervals due to restarts 7 - one or more intervals are invaild ')
jnxoptIfOTNPMFECConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 7), )
if mibBuilder.loadTexts: jnxoptIfOTNPMFECConfigTable.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMFECConfigTable.setDescription('A table of performance monitoring FEC configuration.')
jnxoptIfOTNPMFECConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMFECConfigType"))
if mibBuilder.loadTexts: jnxoptIfOTNPMFECConfigEntry.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMFECConfigEntry.setDescription('A conceptual entry in the performance monitoring FEC configuration layer.')
jnxoptIfOTNPMFECConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 7, 1, 1), JnxoptIfOTNType())
if mibBuilder.loadTexts: jnxoptIfOTNPMFECConfigType.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMFECConfigType.setDescription('This parameter indicates the parameters for the table are for the Near End or Far End performance data. 1 - Near End 2 - Far End ')
jnxoptIfOTNPMFECValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 7, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMFECValidIntervals.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMFECValidIntervals.setDescription('The number of contiguous 15 minute intervals for which valid FEC PM data is available for the particular interface.')
jnxoptIfOTNPM15MinPreFECBERMantissaThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 7, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPM15MinPreFECBERMantissaThreshold.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPM15MinPreFECBERMantissaThreshold.setDescription("BER (mantissa) by the interface within any given 15 minutes performance data collection period, which causes the SNMP agent to send jnxoptIf15MinThreshPreFECBERTCA. One notification will be sent per interval per interface. A value of `0' will disable the notification.")
jnxoptIfOTNPM15MinPreFECBERExponentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 7, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPM15MinPreFECBERExponentThreshold.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPM15MinPreFECBERExponentThreshold.setDescription("The Pre FEC BER (exponent) by the interface within any given 15 minutes performance data collection period, which causes the SNMP agent to send jnxoptIf15MinThreshPreFECBERTCA. One notification will be sent per interval per interface. A value of `0' will disable the notification.")
jnxoptIfOTNPM24HourPreFECBERMantissaThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 7, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPM24HourPreFECBERMantissaThreshold.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPM24HourPreFECBERMantissaThreshold.setDescription("BER (mantissa) by the interface within any given 24 Hour performance data collection period, which causes the SNMP agent to send jnxoptIf5s24Hour15MinThreshPreFECBERTCA. One notification will be sent per 24 hour period per interface. A value of `0' will disable the notification.")
jnxoptIfOTNPM24HourPreFECBERExponentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 7, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPM24HourPreFECBERExponentThreshold.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPM24HourPreFECBERExponentThreshold.setDescription("The Pre FEC BER (exponent) by the interface within any given 24 Hour performance data collection period, which causes the SNMP agent to send jnxoptIf5s24Hour15MinThreshPreFECBERTCA. One notification will be sent per 24 hour period per interface. A value of `0' will disable the notification.")
jnxoptIfOTNPMFECBEREnableTCA = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 7, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: jnxoptIfOTNPMFECBEREnableTCA.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMFECBEREnableTCA.setDescription(" Enable TCA's - 15minute and 24hr for FEC BER ")
jnxoptIfOTNPMFECCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8), )
if mibBuilder.loadTexts: jnxoptIfOTNPMFECCurrentTable.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMFECCurrentTable.setDescription('A Performance monitoring FEC Current Table.')
jnxoptIfOTNPMFECCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMFECCurrentType"))
if mibBuilder.loadTexts: jnxoptIfOTNPMFECCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMFECCurrentEntry.setDescription('A conceptual entry in the Near end or Far End performance monitoring FEC current table.')
jnxoptIfOTNPMFECCurrentType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1, 1), JnxoptIfOTNType())
if mibBuilder.loadTexts: jnxoptIfOTNPMFECCurrentType.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMFECCurrentType.setDescription('This parameter indicates the parameters for the table are for the Near End or Far End performance data. 1 - Near End 2 - Far End ')
jnxoptIfOTNPMFECCurrentSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMFECCurrentSuspectedFlag.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMFECCurrentSuspectedFlag.setDescription('If true, the data in this entry may be unreliable.')
jnxoptIfOTNPMCurrentFECCorrectedErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentFECCorrectedErr.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentFECCorrectedErr.setDescription('The number of bits corrected by the FEC are counted in the interval.')
jnxoptIfOTNPMCurrentFECUncorrectedWords = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentFECUncorrectedWords.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentFECUncorrectedWords.setDescription('The number of un-corrected words by the FEC are counted over the interval.')
jnxoptIfOTNPMCurrentFECBERMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentFECBERMantissa.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentFECBERMantissa.setDescription('The number of Errored bits at receiving side before the FEC function counted over one second .. mantissa.')
jnxoptIfOTNPMCurrentFECBERExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentFECBERExponent.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentFECBERExponent.setDescription('The number of Errored bits at receiving side before the FEC function counted over one second .. exponent (eg -1).')
jnxoptIfOTNPMCurrentFECMinBERMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentFECMinBERMantissa.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentFECMinBERMantissa.setDescription('The minimum number of Errored bits at receiving side before the FEC function counted over one second .. mantissa.')
jnxoptIfOTNPMCurrentFECMinBERExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentFECMinBERExponent.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentFECMinBERExponent.setDescription('The minimum number of Errored bits at receiving side before the FEC function counted over one second .. exponent (eg -1).')
jnxoptIfOTNPMCurrentFECMaxBERMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentFECMaxBERMantissa.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentFECMaxBERMantissa.setDescription('The maximum number of Errored bits at receiving side before the FEC function counted over one second .. mantissa.')
jnxoptIfOTNPMCurrentFECMaxBERExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentFECMaxBERExponent.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentFECMaxBERExponent.setDescription('The maximum number of Errored bits at receiving side before the FEC function counted over one second .. exponent (eg -1).')
jnxoptIfOTNPMCurrentFECAvgBERMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentFECAvgBERMantissa.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentFECAvgBERMantissa.setDescription('The average number of Errored bits at receiving side before the FEC function counted over one second .. mantissa.')
jnxoptIfOTNPMCurrentFECAvgBERExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentFECAvgBERExponent.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentFECAvgBERExponent.setDescription('The average number of Errored bits at receiving side before the FEC function counted over one second .. exponent (eg -1).')
jnxoptIfOTNPMCurrentFECElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1, 13), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentFECElapsedTime.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentFECElapsedTime.setDescription('Time elapsed for this 15 minute interval.')
jnxoptIfOTNPMFECCurSuspectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 8, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMFECCurSuspectReason.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMFECCurSuspectReason.setDescription('If SuspectedFlag is true, the reson for the PM data being suspect. 0 - not applicable 1 - unknown 2 - new object 3 - interface disabled 4 - clock shift detected 5 - cleared by user 6 - interval too short secs < 890 7 - interval too long secs > 910 8 - near end unavailable 9 - far end unavailable 10 - partial data 11 - missing intervals due to restarts ')
jnxoptIfOTNPMFECIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9), )
if mibBuilder.loadTexts: jnxoptIfOTNPMFECIntervalTable.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMFECIntervalTable.setDescription('A Performance monitoring FEC Interval Table.')
jnxoptIfOTNPMFECIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMFECIntervalType"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMFECIntervalNumber"))
if mibBuilder.loadTexts: jnxoptIfOTNPMFECIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMFECIntervalEntry.setDescription('A conceptual entry in the Near end or Far End performance monitoring FEC interval table.')
jnxoptIfOTNPMFECIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9, 1, 1), JnxoptIfOTNType())
if mibBuilder.loadTexts: jnxoptIfOTNPMFECIntervalType.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMFECIntervalType.setDescription('This parameter indicates the parameters for the table are for the Near End or Far End performance data. 1 - Near End 2 - Far End ')
jnxoptIfOTNPMFECIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9, 1, 2), Unsigned32())
if mibBuilder.loadTexts: jnxoptIfOTNPMFECIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMFECIntervalNumber.setDescription('A number between 1 and 96, where 1 is the most recently completed 15 minute interval and 96 is the 15 minutes interval completed 23 hours and 45 minutes prior to interval 1.')
jnxoptIfOTNPMFECIntervalSuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMFECIntervalSuspectedFlag.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMFECIntervalSuspectedFlag.setDescription('If true, the data in this entry may be unreliable.')
jnxoptIfOTNPMIntervalFECCorrectedErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalFECCorrectedErr.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalFECCorrectedErr.setDescription('The number of bits corrected by the FEC are counted in the interval.')
jnxoptIfOTNPMIntervalFECUncorrectedWords = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalFECUncorrectedWords.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalFECUncorrectedWords.setDescription('The number of words un-corrected words by the FEC are counted over the interval.')
jnxoptIfOTNPMIntervalMinFECBERMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalMinFECBERMantissa.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalMinFECBERMantissa.setDescription('The minimun bit error rate at receiving side before the FEC function counted over one second .. mantissa. This is the minimum Pre FEC BER in the current 24hour period.')
jnxoptIfOTNPMIntervalMinFECBERExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalMinFECBERExponent.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalMinFECBERExponent.setDescription('The minimun bit error rate at receiving side before the FEC function counted over one second .. exponent. This is the minimum Pre FEC BER in the current 24hour period.')
jnxoptIfOTNPMIntervalMaxFECBERMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalMaxFECBERMantissa.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalMaxFECBERMantissa.setDescription('The maximun bit error rate at receiving side before the FEC function counted over one second .. mantissa. This is the maximum Pre FEC BER in the current 24hour period.')
jnxoptIfOTNPMIntervalMaxFECBERExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalMaxFECBERExponent.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalMaxFECBERExponent.setDescription('The maximun bit error rate at receiving side before the FEC function counted over one second .. exponent. This is the maximum Pre FEC BER in the current 24hour period.')
jnxoptIfOTNPMIntervalAvgFECBERMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalAvgFECBERMantissa.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalAvgFECBERMantissa.setDescription('The average bit error rate at receiving side before the FEC function counted over one second .. mantissa. This is the average Pre FEC BER in the current 24hour period.')
jnxoptIfOTNPMIntervalAvgFECBERExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalAvgFECBERExponent.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMIntervalAvgFECBERExponent.setDescription('The average bit error rate at receiving side before the FEC function counted over one second .. exponent. This is the average Pre FEC BER in the current 24hour period.')
jnxoptIfOTNPMFECIntervalTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMFECIntervalTimeStamp.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMFECIntervalTimeStamp.setDescription('Time stamp of this interval.')
jnxoptIfOTNPMFECIntSuspectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 9, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMFECIntSuspectReason.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMFECIntSuspectReason.setDescription('If SuspectedFlag is true, the reson for the PM data being suspect. 0 - not applicable 1 - unknown 2 - new object 3 - interface disabled 4 - clock shift detected 5 - cleared by user 6 - interval too short secs < 890 7 - interval too long secs > 910 8 - near end unavailable 9 - far end unavailable 10 - partial data 11 - missing intervals due to restarts ')
jnxoptIfOTNPMFECCurrentDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 10), )
if mibBuilder.loadTexts: jnxoptIfOTNPMFECCurrentDayTable.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMFECCurrentDayTable.setDescription('A Performance monitoring FEC current day table.')
jnxoptIfOTNPMFECCurrentDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMFECCurrentDayType"))
if mibBuilder.loadTexts: jnxoptIfOTNPMFECCurrentDayEntry.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMFECCurrentDayEntry.setDescription('A conceptual entry in the Near end or Far End performance monitoring FEC current day table.')
jnxoptIfOTNPMFECCurrentDayType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 10, 1, 1), JnxoptIfOTNType())
if mibBuilder.loadTexts: jnxoptIfOTNPMFECCurrentDayType.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMFECCurrentDayType.setDescription('This parameter indicates the parameters for the table are for the Near End or Far End performance data. 1 - Near End 2 - Far End ')
jnxoptIfOTNPMFECCurrentDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 10, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMFECCurrentDaySuspectedFlag.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMFECCurrentDaySuspectedFlag.setDescription('If true, the data in this entry may be unreliable.')
jnxoptIfOTNPMCurrentDayFECCorrectedErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 10, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayFECCorrectedErr.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayFECCorrectedErr.setDescription('The number of bits corrected by the FEC are counted in the interval.')
jnxoptIfOTNPMCurrentDayFECUncorrectedWords = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 10, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayFECUncorrectedWords.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayFECUncorrectedWords.setDescription('The number of words un-corrected by the FEC are counted over the Day.')
jnxoptIfOTNPMCurrentDayMinFECBERMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 10, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayMinFECBERMantissa.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayMinFECBERMantissa.setDescription('The minimun bit error rate at receiving side before the FEC function counted over one second .. mantissa. This is the minimum PreFEC BER in the current 24hour period.')
jnxoptIfOTNPMCurrentDayMinFECBERExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 10, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayMinFECBERExponent.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayMinFECBERExponent.setDescription('The minimun bit error rate at receiving side before the FEC function counted over one second .. exponent. This is the minimum PreFEC BER in the current 24hour period.')
jnxoptIfOTNPMCurrentDayMaxFECBERMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 10, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayMaxFECBERMantissa.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayMaxFECBERMantissa.setDescription('The maximun bit error rate at receiving side before the FEC function counted over one second .. mantissa. This is the maximum PreFEC BER in the current 24hour period.')
jnxoptIfOTNPMCurrentDayMaxFECBERExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 10, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayMaxFECBERExponent.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayMaxFECBERExponent.setDescription('The maximun bit error rate at receiving side before the FEC function counted over one second .. exponent. This is the maximum PreFEC BER in the current 24hour period.')
jnxoptIfOTNPMCurrentDayAvgFECBERMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 10, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayAvgFECBERMantissa.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayAvgFECBERMantissa.setDescription('The average bit error rate at receiving side before the FEC function counted over one second .. mantissa. This is the average PreFEC BER in the current 24hour period.')
jnxoptIfOTNPMCurrentDayAvgFECBERExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 10, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayAvgFECBERExponent.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMCurrentDayAvgFECBERExponent.setDescription('The average bit error rate at receiving side before the FEC function counted over one second .. exponent. This is the average PreFEC BER in the current 24hour period.')
jnxoptIfOTNPMFECCurrentDayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 10, 1, 11), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMFECCurrentDayElapsedTime.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMFECCurrentDayElapsedTime.setDescription('Time elapsed for current day.')
jnxoptIfOTNPMFECCurDaySuspectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 10, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMFECCurDaySuspectReason.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMFECCurDaySuspectReason.setDescription('If SuspectedFlag is true, the reson for the PM data being suspect. 0 - not applicable 1 - unknown 2 - new object 3 - clock shift detected 4 - cleared by user 5 - partial data 6 - missing intervals due to restarts 7 - one or more intervals are invaild ')
jnxoptIfOTNPMFECPrevDayTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 11), )
if mibBuilder.loadTexts: jnxoptIfOTNPMFECPrevDayTable.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMFECPrevDayTable.setDescription('A Performance monitoring FEC previous day table.')
jnxoptIfOTNPMFECPrevDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 11, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNPMFECPrevDayType"))
if mibBuilder.loadTexts: jnxoptIfOTNPMFECPrevDayEntry.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMFECPrevDayEntry.setDescription('A conceptual entry in the Near end or Far End performance monitoring FEC previous day table.')
jnxoptIfOTNPMFECPrevDayType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 11, 1, 1), JnxoptIfOTNType())
if mibBuilder.loadTexts: jnxoptIfOTNPMFECPrevDayType.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMFECPrevDayType.setDescription('This parameter indicates the parameters for the table are for the Near End or Far End performance data. 1 - Near End 2 - Far End ')
jnxoptIfOTNPMFECPrevDaySuspectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 11, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMFECPrevDaySuspectedFlag.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMFECPrevDaySuspectedFlag.setDescription('If true, the data in this entry may be unreliable.')
jnxoptIfOTNPMPrevDayFECCorrectedErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 11, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayFECCorrectedErr.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayFECCorrectedErr.setDescription('The number of bits corrected by the FEC are counted in the previous day.')
jnxoptIfOTNPMPrevDayFECUncorrectedWords = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 11, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayFECUncorrectedWords.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayFECUncorrectedWords.setDescription('The number of un-corrected words by the FEC are counted over the previous Day.')
jnxoptIfOTNPMPrevDayMinFECBERMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 11, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayMinFECBERMantissa.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayMinFECBERMantissa.setDescription('The maximun bit error rate at receiving side before the FEC function counted over one second .. mantissa. This is the maximum Pre FEC BER in the previous 24hour period.')
jnxoptIfOTNPMPrevDayMinFECBERExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 11, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayMinFECBERExponent.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayMinFECBERExponent.setDescription('The minimun bit error rate at receiving side before the FEC function counted over one second .. exponent. This is the maximum Pre FEC BER in the previous 24hour period.')
jnxoptIfOTNPMPrevDayMaxFECBERMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 11, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayMaxFECBERMantissa.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayMaxFECBERMantissa.setDescription('The maximun bit error rate at receiving side before the FEC function counted over one second .. mantissa. This is the maximum Pre FEC BER in the previous 24hour period (mantissa).')
jnxoptIfOTNPMPrevDayMaxFECBERExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 11, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayMaxFECBERExponent.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayMaxFECBERExponent.setDescription('The maximun bit error rate at receiving side before the FEC function counted over one second .. exponent (eg -3). This is the maximum Pre FEC BER in the previous 24hour period.')
jnxoptIfOTNPMPrevDayAvgFECBERMantissa = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 11, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayAvgFECBERMantissa.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayAvgFECBERMantissa.setDescription('The average bit error rate at receiving side before the FEC function counted over one second .. mantissa. This is the average Pre FEC BER during the previous 24hour period (mantissa).')
jnxoptIfOTNPMPrevDayAvgFECBERExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 11, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayAvgFECBERExponent.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMPrevDayAvgFECBERExponent.setDescription('The average bit error rate at receiving side before the FEC function counted over one second .. exponent (eg -3). This is the average Pre FEC BER during the previous 24hour period.')
jnxoptIfOTNPMFECPrevDayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 11, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMFECPrevDayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMFECPrevDayTimeStamp.setDescription('Time stamp for the Prev day.')
jnxoptIfOTNPMFECPrevDaySuspectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 3, 11, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxoptIfOTNPMFECPrevDaySuspectReason.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNPMFECPrevDaySuspectReason.setDescription('If SuspectedFlag is true, the reson for the PM data being suspect. 0 - not applicable 1 - unknown 2 - new object 3 - clock shift detected 4 - cleared by user 5 - partial data 6 - missing intervals due to restarts 7 - one or more intervals are invaild ')
jnxoptIfOTNAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 4, 1), )
if mibBuilder.loadTexts: jnxoptIfOTNAlarmTable.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNAlarmTable.setDescription('A table of alarm entries.')
jnxoptIfOTNAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxoptIfOTNAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNAlarmEntry.setDescription('A conceptual entry in the alarm table.')
jnxoptIfOTNAlarmLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 4, 1, 1, 1), JnxoptIfOTNType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxoptIfOTNAlarmLocation.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNAlarmLocation.setDescription('The object identifies indicates if this entry was for Near end/Far end.')
jnxoptIfOTNAlarmDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 4, 1, 1, 2), JnxoptIfOTNDirection()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxoptIfOTNAlarmDirection.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNAlarmDirection.setDescription('The object identifies indicates if this entry was for for the Tx/Rx or both.')
jnxoptIfOTNAlarmLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 4, 1, 1, 3), JnxoptIfOTNLayer()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxoptIfOTNAlarmLayer.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNAlarmLayer.setDescription('This specifies which sublayer this alarm is for.')
jnxoptIfOTNAlarmTCMLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 4, 1, 1, 4), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxoptIfOTNAlarmTCMLevel.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNAlarmTCMLevel.setDescription('TCM level 1-6 of the alarm. It will be 0 if alarm sublayer is OCh, OTUk or ODUk.')
jnxoptIfOTNOChOTUkAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 4, 1, 1, 5), JnxoptIfOTNOChAlarms()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxoptIfOTNOChOTUkAlarmType.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNOChOTUkAlarmType.setDescription("This specifies the type of alarm of the sublayer 'jnxoptIfOTNAlarmLayer' for OCh/OTUk .")
jnxoptIfOTNAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 4, 1, 1, 6), JnxoptIfOTNAlarmSeverity()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxoptIfOTNAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNAlarmSeverity.setDescription('The object identifies the severity of the last alarm/alert that most recently was set or cleared.')
jnxoptIfOTNAlarmDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 4, 1, 1, 7), DateAndTime()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxoptIfOTNAlarmDate.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNAlarmDate.setDescription('This specifies the date and time when this alarm occurred.')
jnxoptIfOTNODUkTcmAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 4, 1, 1, 8), JnxoptIfOTNODUkTcmAlarms()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxoptIfOTNODUkTcmAlarmType.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNODUkTcmAlarmType.setDescription("This specifies the type of alarm of the sublayer 'jnxoptIfOTNAlarmLayer' for ODUk/TCM .")
jnxoptIfOTNOChOTUkAlarmSet = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 0, 1)).setObjects(("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmLocation"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmDirection"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmLayer"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmTCMLevel"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNOChOTUkAlarmType"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmSeverity"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmDate"))
if mibBuilder.loadTexts: jnxoptIfOTNOChOTUkAlarmSet.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNOChOTUkAlarmSet.setDescription('Notification of a recently set OTN alarm of Layer and Type.')
jnxoptIfOTNOChOTUkAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 0, 2)).setObjects(("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmLocation"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmDirection"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmLayer"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmTCMLevel"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNOChOTUkAlarmType"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmSeverity"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmDate"))
if mibBuilder.loadTexts: jnxoptIfOTNOChOTUkAlarmClear.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNOChOTUkAlarmClear.setDescription('Notification of a recently clear OTN alarm of Layer and Type.')
jnxoptIfOTNODUkTcmAlarmSet = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 0, 3)).setObjects(("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmLocation"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmDirection"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmLayer"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmTCMLevel"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNODUkTcmAlarmType"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmSeverity"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmDate"))
if mibBuilder.loadTexts: jnxoptIfOTNODUkTcmAlarmSet.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNODUkTcmAlarmSet.setDescription('Notification of a recently set OTN alarm of Layer and Type.')
jnxoptIfOTNODUkTcmAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 73, 1, 3, 0, 4)).setObjects(("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmLocation"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmDirection"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmLayer"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmTCMLevel"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNODUkTcmAlarmType"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmSeverity"), ("JNX-OPT-IF-EXT-MIB", "jnxoptIfOTNAlarmDate"))
if mibBuilder.loadTexts: jnxoptIfOTNODUkTcmAlarmClear.setStatus('current')
if mibBuilder.loadTexts: jnxoptIfOTNODUkTcmAlarmClear.setDescription('Notification of a recently clear OTN alarm of Layer and Type.')
mibBuilder.exportSymbols("JNX-OPT-IF-EXT-MIB", jnxoptIfOChLaserAdminState=jnxoptIfOChLaserAdminState, jnxoptIfOChOperationalState=jnxoptIfOChOperationalState, jnxoptIfOChSrcSinkConfigEntry=jnxoptIfOChSrcSinkConfigEntry, jnxoptIfOTNPMCurrentUASs=jnxoptIfOTNPMCurrentUASs, jnxoptIfOTNPMFECPrevDayTable=jnxoptIfOTNPMFECPrevDayTable, jnxoptIfOTNPMFECCurrentDayType=jnxoptIfOTNPMFECCurrentDayType, jnxoptIfOTNPMPrevDaySuspectReason=jnxoptIfOTNPMPrevDaySuspectReason, jnxoptIfOTNAlarmTable=jnxoptIfOTNAlarmTable, jnxoptIfOTNPMFECCurrentDayEntry=jnxoptIfOTNPMFECCurrentDayEntry, jnxoptIfOTNPMIntervalTCMLevel=jnxoptIfOTNPMIntervalTCMLevel, jnxoptIfOTNPMConfigTCMLevel=jnxoptIfOTNPMConfigTCMLevel, jnxoptIfOTNPMCurSuspectReason=jnxoptIfOTNPMCurSuspectReason, jnxoptIfOTNPMPrevDayEntry=jnxoptIfOTNPMPrevDayEntry, jnxoptIfOTNPMPrevDaySESR=jnxoptIfOTNPMPrevDaySESR, jnxoptIfOTNPMCurrentDayTable=jnxoptIfOTNPMCurrentDayTable, jnxoptIfOChSinkMaximumBERExponent=jnxoptIfOChSinkMaximumBERExponent, jnxoptIfOChMiminumChannelSpacing=jnxoptIfOChMiminumChannelSpacing, jnxoptIfOTNPMCurrentESs=jnxoptIfOTNPMCurrentESs, jnxoptIfOTNPMPrevDayMaxFECBERMantissa=jnxoptIfOTNPMPrevDayMaxFECBERMantissa, jnxoptIfOTNPMCurrentBBER=jnxoptIfOTNPMCurrentBBER, jnxoptIfOTNPMCurrentDayLayer=jnxoptIfOTNPMCurrentDayLayer, jnxoptIfOTNPMCurrentFECMinBERMantissa=jnxoptIfOTNPMCurrentFECMinBERMantissa, jnxoptIfOChMinimumCentralFrequency=jnxoptIfOChMinimumCentralFrequency, jnxoptIfOChMaximumTxDispersionOSNRPenalty=jnxoptIfOChMaximumTxDispersionOSNRPenalty, jnxoptIfOTNPMPrevDayUASs=jnxoptIfOTNPMPrevDayUASs, jnxoptIfOTNPM15MinPreFECBERExponentThreshold=jnxoptIfOTNPM15MinPreFECBERExponentThreshold, jnxoptIfOChFEC=jnxoptIfOChFEC, jnxoptIfOTNPM15MinPreFECBERMantissaThreshold=jnxoptIfOTNPM15MinPreFECBERMantissaThreshold, jnxoptIfOTNPMPrevDayAvgFECBERExponent=jnxoptIfOTNPMPrevDayAvgFECBERExponent, jnxoptIfOTNPMCurrentFECBERExponent=jnxoptIfOTNPMCurrentFECBERExponent, jnxoptIfOTNPMIntervalAvgFECBERMantissa=jnxoptIfOTNPMIntervalAvgFECBERMantissa, jnxoptIfOChSinkMinimumMeanIntputPower=jnxoptIfOChSinkMinimumMeanIntputPower, jnxoptIfOChSinkCurrentExtEntry=jnxoptIfOChSinkCurrentExtEntry, jnxoptIfOTNPMIntSuspectReason=jnxoptIfOTNPMIntSuspectReason, jnxoptIfOTNAlarmLocation=jnxoptIfOTNAlarmLocation, JnxoptIfBitRateLineCoding=JnxoptIfBitRateLineCoding, JnxoptIfOTNODUkTcmAlarms=JnxoptIfOTNODUkTcmAlarms, jnxoptIfOChConfigExtEntry=jnxoptIfOChConfigExtEntry, jnxoptIfOTNPMCurrentDayAvgFECBERMantissa=jnxoptIfOTNPMCurrentDayAvgFECBERMantissa, jnxoptIfOChSinkConfigEntry=jnxoptIfOChSinkConfigEntry, jnxoptIfOTNPMCurrentFECMinBERExponent=jnxoptIfOTNPMCurrentFECMinBERExponent, jnxoptIfOPSmFiberTypeRecommendation=jnxoptIfOPSmFiberTypeRecommendation, jnxoptIfOTNOChOTUkAlarmClear=jnxoptIfOTNOChOTUkAlarmClear, jnxoptIfOTNPMFECCurrentDayTable=jnxoptIfOTNPMFECCurrentDayTable, jnxoptIfOTNPMCurrentFECElapsedTime=jnxoptIfOTNPMCurrentFECElapsedTime, jnxoptIfOTNPMFECIntervalTable=jnxoptIfOTNPMFECIntervalTable, jnxoptIfOTNPMPrevDayMinFECBERExponent=jnxoptIfOTNPMPrevDayMinFECBERExponent, jnxoptIfOChSrcConfigEntry=jnxoptIfOChSrcConfigEntry, jnxoptIfOTNPMConfigType=jnxoptIfOTNPMConfigType, jnxoptIfOTNPMFECConfigType=jnxoptIfOTNPMFECConfigType, jnxoptIfOChMaxWavelength=jnxoptIfOChMaxWavelength, jnxoptIfOTNPMIntervalSESs=jnxoptIfOTNPMIntervalSESs, jnxoptIfOChSinkConfigTable=jnxoptIfOChSinkConfigTable, jnxoptIfOTNAlarmLayer=jnxoptIfOTNAlarmLayer, jnxoptIfOTNPMCurrentDayESs=jnxoptIfOTNPMCurrentDayESs, jnxoptIfOTNPMIntervalBBEs=jnxoptIfOTNPMIntervalBBEs, jnxoptIfOTNPMIntervalBip8=jnxoptIfOTNPMIntervalBip8, jnxoptIfOTNODUkTcmAlarmType=jnxoptIfOTNODUkTcmAlarmType, jnxoptIfOTNPMCurrentBip8=jnxoptIfOTNPMCurrentBip8, jnxoptIfOTNPMFECPrevDayEntry=jnxoptIfOTNPMFECPrevDayEntry, jnxoptIfOTNPMPrevDayFECCorrectedErr=jnxoptIfOTNPMPrevDayFECCorrectedErr, jnxoptIfOTNODUkTcmAlarmClear=jnxoptIfOTNODUkTcmAlarmClear, jnxoptIfOTNPMCurrentLayer=jnxoptIfOTNPMCurrentLayer, jnxoptIfOTNAlarmTCMLevel=jnxoptIfOTNAlarmTCMLevel, JnxoptIfOTNOChAlarms=JnxoptIfOTNOChAlarms, jnxoptIfOTNPMFECIntervalNumber=jnxoptIfOTNPMFECIntervalNumber, jnxoptIfOTNPMPrevDayESR=jnxoptIfOTNPMPrevDayESR, jnxoptIfOTNPMUASsEnableTCA=jnxoptIfOTNPMUASsEnableTCA, jnxoptIfOChMaximumSpectralExcursion=jnxoptIfOChMaximumSpectralExcursion, jnxoptIfOChOpticalInterfaceApplicationCode=jnxoptIfOChOpticalInterfaceApplicationCode, jnxoptIfOTNPMIntervalSESR=jnxoptIfOTNPMIntervalSESR, jnxoptIfOTNOChOTUkAlarmSet=jnxoptIfOTNOChOTUkAlarmSet, jnxoptIfOTNPMFECConfigTable=jnxoptIfOTNPMFECConfigTable, jnxoptIfOTNPMValidIntervals=jnxoptIfOTNPMValidIntervals, jnxoptIfOTNPMCurrentSuspectedFlag=jnxoptIfOTNPMCurrentSuspectedFlag, jnxoptIfOTNPMCurrentFECCorrectedErr=jnxoptIfOTNPMCurrentFECCorrectedErr, jnxoptIfOTNPMCurrentDayMaxFECBERMantissa=jnxoptIfOTNPMCurrentDayMaxFECBERMantissa, jnxoptIfOChMaximumCentralFrequency=jnxoptIfOChMaximumCentralFrequency, JnxoptIfFiberTypeRecommendation=JnxoptIfFiberTypeRecommendation, jnxoptIfExtMibModule=jnxoptIfExtMibModule, jnxoptIfOTNPMCurrentBBEs=jnxoptIfOTNPMCurrentBBEs, jnxoptIfOTNPMIntervalMinFECBERExponent=jnxoptIfOTNPMIntervalMinFECBERExponent, jnxoptIfOChSrcSinkOpticalPathOSNRPenalty=jnxoptIfOChSrcSinkOpticalPathOSNRPenalty, jnxoptIfOTNPMConfigTable=jnxoptIfOTNPMConfigTable, jnxoptIfOChSrcSinkConfigTable=jnxoptIfOChSrcSinkConfigTable, jnxoptIfOTNPMPrevDayLayer=jnxoptIfOTNPMPrevDayLayer, jnxoptIfOTNPMFECCurrentSuspectedFlag=jnxoptIfOTNPMFECCurrentSuspectedFlag, jnxoptIfOChSrcSinkMaximumInterChannelCrosstalk=jnxoptIfOChSrcSinkMaximumInterChannelCrosstalk, jnxoptIfOTNPMIntervalESs=jnxoptIfOTNPMIntervalESs, jnxoptIfOTNPMCurrentDaySESR=jnxoptIfOTNPMCurrentDaySESR, jnxoptIfOTNPM24HourBip8Threshold=jnxoptIfOTNPM24HourBip8Threshold, jnxoptIfOTNPMCurrentDayBBER=jnxoptIfOTNPMCurrentDayBBER, jnxoptIfOChSinkMinimumOSNR=jnxoptIfOChSinkMinimumOSNR, jnxoptIfOChSinkCurrentOSNR=jnxoptIfOChSinkCurrentOSNR, jnxoptIfOTNPMGroup=jnxoptIfOTNPMGroup, jnxoptIfOTNPMIntervalESR=jnxoptIfOTNPMIntervalESR, jnxoptIfOTNPMCurrentDayTCMLevel=jnxoptIfOTNPMCurrentDayTCMLevel, jnxoptIfOTNPMCurrentFECMaxBERExponent=jnxoptIfOTNPMCurrentFECMaxBERExponent, jnxoptIfOPSmEntry=jnxoptIfOPSmEntry, jnxoptIfOTNPMIntervalNumber=jnxoptIfOTNPMIntervalNumber, jnxoptIfOTNPMFECPrevDayType=jnxoptIfOTNPMFECPrevDayType, jnxoptIfOTNPMCurrentSESR=jnxoptIfOTNPMCurrentSESR, jnxoptIfOTNPMCurrentFECMaxBERMantissa=jnxoptIfOTNPMCurrentFECMaxBERMantissa, jnxoptIfOTNPMFECIntSuspectReason=jnxoptIfOTNPMFECIntSuspectReason, jnxoptIfOTNPMCurrentDaySESs=jnxoptIfOTNPMCurrentDaySESs, jnxoptIfOTNPMIntervalFECUncorrectedWords=jnxoptIfOTNPMIntervalFECUncorrectedWords, jnxoptIfOTNPMFECCurrentDayElapsedTime=jnxoptIfOTNPMFECCurrentDayElapsedTime, jnxoptIfOTNPMFECCurrentTable=jnxoptIfOTNPMFECCurrentTable, jnxoptIfOChMaximumMeanChannelOutputPower=jnxoptIfOChMaximumMeanChannelOutputPower, jnxoptIfOChMinimumMeanChannelOutputPower=jnxoptIfOChMinimumMeanChannelOutputPower, jnxoptIfOTNPMCurrentFECBERMantissa=jnxoptIfOTNPMCurrentFECBERMantissa, jnxoptIfOTNAlarmDate=jnxoptIfOTNAlarmDate, jnxoptIfOTNPMFECPrevDaySuspectedFlag=jnxoptIfOTNPMFECPrevDaySuspectedFlag, jnxoptIfOTNPMCurrentESR=jnxoptIfOTNPMCurrentESR, jnxoptIfOTNPMCurrentSESs=jnxoptIfOTNPMCurrentSESs, jnxoptIfOTNPMFECConfigEntry=jnxoptIfOTNPMFECConfigEntry, jnxoptIfOTNPMFECIntervalTimeStamp=jnxoptIfOTNPMFECIntervalTimeStamp, JnxoptIfOTNType=JnxoptIfOTNType, jnxoptIfOTNPM15MinBip8Threshold=jnxoptIfOTNPM15MinBip8Threshold, jnxoptIfOChSrcConfigTable=jnxoptIfOChSrcConfigTable, jnxoptIfOTNPMPrevDayMinFECBERMantissa=jnxoptIfOTNPMPrevDayMinFECBERMantissa, jnxoptIfOTNPMPrevDayAvgFECBERMantissa=jnxoptIfOTNPMPrevDayAvgFECBERMantissa, jnxoptIfOChSinkMaximumBERMantissa=jnxoptIfOChSinkMaximumBERMantissa, jnxoptIfOChSinkCurrentQ=jnxoptIfOChSinkCurrentQ, jnxoptIfOTNAlarm=jnxoptIfOTNAlarm, jnxoptIfOTNPMFECIntervalEntry=jnxoptIfOTNPMFECIntervalEntry, jnxoptIfOTNPMCurrentTCMLevel=jnxoptIfOTNPMCurrentTCMLevel, jnxoptIfOTNPMPrevDaySESs=jnxoptIfOTNPMPrevDaySESs, jnxoptIfOTNPMIntervalEntry=jnxoptIfOTNPMIntervalEntry, jnxoptIfOTNPMSESRInterval=jnxoptIfOTNPMSESRInterval, jnxoptIfOTNPMIntervalMaxFECBERExponent=jnxoptIfOTNPMIntervalMaxFECBERExponent, jnxoptIfOTNPMPrevDayBip8=jnxoptIfOTNPMPrevDayBip8, jnxoptIfOTNPMIntervalType=jnxoptIfOTNPMIntervalType, jnxoptIfOTNPMCurrentDayType=jnxoptIfOTNPMCurrentDayType, jnxoptIfOTNPMIntervalFECCorrectedErr=jnxoptIfOTNPMIntervalFECCorrectedErr, jnxoptIfOTNPMFECCurrentDaySuspectedFlag=jnxoptIfOTNPMFECCurrentDaySuspectedFlag, jnxoptIfOTNAlarmSeverity=jnxoptIfOTNAlarmSeverity, jnxoptIfOTNPMIntervalMinFECBERMantissa=jnxoptIfOTNPMIntervalMinFECBERMantissa, jnxoptIfOTNPMBip8EnableTCA=jnxoptIfOTNPMBip8EnableTCA, jnxoptIfOPSmDirectionality=jnxoptIfOPSmDirectionality, jnxoptIfOTNPMFECCurDaySuspectReason=jnxoptIfOTNPMFECCurDaySuspectReason, jnxoptIfOTNPM15MinSESsThreshold=jnxoptIfOTNPM15MinSESsThreshold, jnxoptIfOTNPMIntervalBBER=jnxoptIfOTNPMIntervalBBER, jnxoptIfOTNPM24HourPreFECBERExponentThreshold=jnxoptIfOTNPM24HourPreFECBERExponentThreshold, jnxoptIfOTNPMFECCurrentType=jnxoptIfOTNPMFECCurrentType, jnxoptIfOTNPMFECCurSuspectReason=jnxoptIfOTNPMFECCurSuspectReason, jnxoptIfOTNPM15MinESsThreshold=jnxoptIfOTNPM15MinESsThreshold, jnxoptIfOTNPMPrevDayTimeStamp=jnxoptIfOTNPMPrevDayTimeStamp, jnxoptIfOTNPMIntervalTimeStamp=jnxoptIfOTNPMIntervalTimeStamp, jnxoptIfOTNPMCurDaySuspectReason=jnxoptIfOTNPMCurDaySuspectReason, jnxoptIfOTNPM24HourBBEsThreshold=jnxoptIfOTNPM24HourBBEsThreshold, jnxoptIfOTNPMConfigLayer=jnxoptIfOTNPMConfigLayer, jnxoptIfOTNPMCurrentDayFECUncorrectedWords=jnxoptIfOTNPMCurrentDayFECUncorrectedWords, jnxoptIfOChBitRateLineCoding=jnxoptIfOChBitRateLineCoding, jnxoptIfOChSinkCurrentChromaticDispersion=jnxoptIfOChSinkCurrentChromaticDispersion, jnxoptIfOTNPM24HourUASsThreshold=jnxoptIfOTNPM24HourUASsThreshold, jnxoptIfOTNPMIntervalMaxFECBERMantissa=jnxoptIfOTNPMIntervalMaxFECBERMantissa, jnxoptIfOTNPMFECValidIntervals=jnxoptIfOTNPMFECValidIntervals, jnxoptIfOChSinkMaximumMeanIntputPower=jnxoptIfOChSinkMaximumMeanIntputPower, jnxoptIfOTNNotifications=jnxoptIfOTNNotifications, jnxoptIfOChSrcSinkInterFerometricCrosstalk=jnxoptIfOChSrcSinkInterFerometricCrosstalk, jnxoptIfOTNPMPrevDayType=jnxoptIfOTNPMPrevDayType, jnxoptIfOChSrcSinkMaximumChromaticDispersion=jnxoptIfOChSrcSinkMaximumChromaticDispersion, JnxoptIfChannelSpacing=JnxoptIfChannelSpacing, jnxoptIfOChSrcSinkMaximumDiscreteReflectanceSrcToSink=jnxoptIfOChSrcSinkMaximumDiscreteReflectanceSrcToSink, jnxoptIfOTNPM24HourSESsThreshold=jnxoptIfOTNPM24HourSESsThreshold, jnxoptIfOTNPMCurrentDayESR=jnxoptIfOTNPMCurrentDayESR, jnxoptIfOTNPMCurrentFECAvgBERMantissa=jnxoptIfOTNPMCurrentFECAvgBERMantissa, jnxoptIfOTNPM15MinUASsThreshold=jnxoptIfOTNPM15MinUASsThreshold, jnxoptIfOTNPM24HourESsThreshold=jnxoptIfOTNPM24HourESsThreshold, jnxoptIfOTNPMCurrentFECUncorrectedWords=jnxoptIfOTNPMCurrentFECUncorrectedWords, jnxoptIfOChSinkCurrentExtTable=jnxoptIfOChSinkCurrentExtTable, jnxoptIfOTNPMCurrentDayElapsedTime=jnxoptIfOTNPMCurrentDayElapsedTime, jnxoptIfOTNPMPrevDayBBER=jnxoptIfOTNPMPrevDayBBER, jnxoptIfOTNPMCurrentDayBBEs=jnxoptIfOTNPMCurrentDayBBEs, jnxoptIfOTNPMIntervalSuspectedFlag=jnxoptIfOTNPMIntervalSuspectedFlag, jnxoptIfOTNPMPrevDayESs=jnxoptIfOTNPMPrevDayESs, jnxoptIfOPSmFiberTypeCategory=jnxoptIfOPSmFiberTypeCategory, jnxoptIfOTNODUkTcmAlarmSet=jnxoptIfOTNODUkTcmAlarmSet, jnxoptIfOTNPMFECIntervalType=jnxoptIfOTNPMFECIntervalType, jnxoptIfOChSrcSinkMaximumDifferentialGroupDelay=jnxoptIfOChSrcSinkMaximumDifferentialGroupDelay, JnxoptIfOTNAlarmSeverity=JnxoptIfOTNAlarmSeverity, jnxoptIfOTNPMIntervalLayer=jnxoptIfOTNPMIntervalLayer, jnxoptIfOPSmConfigEntry=jnxoptIfOPSmConfigEntry, jnxoptIfOTNAlarmDirection=jnxoptIfOTNAlarmDirection, jnxoptIfOTNPMESRInterval=jnxoptIfOTNPMESRInterval, jnxoptIfOChSrcSinkMaximumPolarisationDependentLoss=jnxoptIfOChSrcSinkMaximumPolarisationDependentLoss, jnxoptIfOTNPMCurrentDayEntry=jnxoptIfOTNPMCurrentDayEntry, jnxoptIfOChVendorTransceiverClass=jnxoptIfOChVendorTransceiverClass, JnxoptIfOTNLayer=JnxoptIfOTNLayer, jnxoptIfOTNPMBBEsEnableTCA=jnxoptIfOTNPMBBEsEnableTCA, jnxoptIfOTNPMFECPrevDaySuspectReason=jnxoptIfOTNPMFECPrevDaySuspectReason, jnxoptIfOTNPMFECIntervalSuspectedFlag=jnxoptIfOTNPMFECIntervalSuspectedFlag, jnxoptIfOTNPMFECBEREnableTCA=jnxoptIfOTNPMFECBEREnableTCA, JnxoptIfFiberTypeCategory=JnxoptIfFiberTypeCategory, PYSNMP_MODULE_ID=jnxoptIfExtMibModule, jnxoptIfOChMinWavelength=jnxoptIfOChMinWavelength, jnxoptIfOTNPMESsEnableTCA=jnxoptIfOTNPMESsEnableTCA, jnxoptIfOTNPMIntervalUASs=jnxoptIfOTNPMIntervalUASs, jnxoptIfOTNPMSESsEnableTCA=jnxoptIfOTNPMSESsEnableTCA, jnxoptIfOChConfigExtTable=jnxoptIfOChConfigExtTable, jnxoptIfOTNPMCurrentType=jnxoptIfOTNPMCurrentType, jnxoptIfOTNPMCurrentDaySuspectedFlag=jnxoptIfOTNPMCurrentDaySuspectedFlag, jnxoptIfOChSrcSinkMinimumChromaticDispersion=jnxoptIfOChSrcSinkMinimumChromaticDispersion, jnxoptIfOTNPMCurrentDayFECCorrectedErr=jnxoptIfOTNPMCurrentDayFECCorrectedErr, jnxoptIfOTNOChOTUkAlarmType=jnxoptIfOTNOChOTUkAlarmType, jnxoptIfOTNPMIntervalTable=jnxoptIfOTNPMIntervalTable, jnxoptIfOTNPMPrevDayTable=jnxoptIfOTNPMPrevDayTable, jnxoptIfOTNPMPrevDayBBEs=jnxoptIfOTNPMPrevDayBBEs, jnxoptIfOTNPMCurrentDayUASs=jnxoptIfOTNPMCurrentDayUASs, jnxoptIfOTNPMIntervalAvgFECBERExponent=jnxoptIfOTNPMIntervalAvgFECBERExponent, jnxoptIfOTNPMConfigEntry=jnxoptIfOTNPMConfigEntry, jnxoptIfOTNPMFECPrevDayTimeStamp=jnxoptIfOTNPMFECPrevDayTimeStamp, jnxoptIfOTNPMPrevDayMaxFECBERExponent=jnxoptIfOTNPMPrevDayMaxFECBERExponent, jnxoptIfOTNPM24HourPreFECBERMantissaThreshold=jnxoptIfOTNPM24HourPreFECBERMantissaThreshold, jnxoptIfOTNPMCurrentFECAvgBERExponent=jnxoptIfOTNPMCurrentFECAvgBERExponent, jnxoptIfOChLaserOperationalState=jnxoptIfOChLaserOperationalState, jnxoptIfOChSinkOSNRTolerance=jnxoptIfOChSinkOSNRTolerance, jnxoptIfOTNPMCurrentEntry=jnxoptIfOTNPMCurrentEntry, jnxoptIfOPSmConfigTable=jnxoptIfOPSmConfigTable, jnxoptIfOTNPMCurrentDayMinFECBERExponent=jnxoptIfOTNPMCurrentDayMinFECBERExponent, jnxoptIfOTNPMFECCurrentEntry=jnxoptIfOTNPMFECCurrentEntry, jnxoptIfOTNPMCurrentDayMaxFECBERExponent=jnxoptIfOTNPMCurrentDayMaxFECBERExponent, jnxoptIfOTNPMCurrentElapsedTime=jnxoptIfOTNPMCurrentElapsedTime, jnxoptIfOChSrcSinkGroup=jnxoptIfOChSrcSinkGroup, jnxoptIfOTNPMCurrentTable=jnxoptIfOTNPMCurrentTable, jnxoptIfOTNPMPrevDaySuspectedFlag=jnxoptIfOTNPMPrevDaySuspectedFlag, jnxoptIfOTNPMCurrentDayBip8=jnxoptIfOTNPMCurrentDayBip8, jnxoptIfOTNPMPrevDayTCMLevel=jnxoptIfOTNPMPrevDayTCMLevel, jnxoptIfOTNPMPrevDayFECUncorrectedWords=jnxoptIfOTNPMPrevDayFECUncorrectedWords, jnxoptIfOTNAlarmEntry=jnxoptIfOTNAlarmEntry, jnxoptIfOTNPM15MinBBEsThreshold=jnxoptIfOTNPM15MinBBEsThreshold, jnxoptIfOTNPMCurrentDayMinFECBERMantissa=jnxoptIfOTNPMCurrentDayMinFECBERMantissa, jnxoptIfOTNPMCurrentDayAvgFECBERExponent=jnxoptIfOTNPMCurrentDayAvgFECBERExponent, jnxoptIfOChWavelength=jnxoptIfOChWavelength, jnxoptIfOChSrcSinkMinimumSrcOpticalReturnLoss=jnxoptIfOChSrcSinkMinimumSrcOpticalReturnLoss, jnxoptIfOChAdminState=jnxoptIfOChAdminState, JnxoptIfOTNDirection=JnxoptIfOTNDirection)
