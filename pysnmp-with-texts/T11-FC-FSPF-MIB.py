#
# PySNMP MIB module T11-FC-FSPF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/T11-FC-FSPF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:14:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
fcmInstanceIndex, FcDomainIdOrZero, fcmSwitchIndex = mibBuilder.importSymbols("FC-MGMT-MIB", "fcmInstanceIndex", "FcDomainIdOrZero", "fcmSwitchIndex")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
iso, Counter64, TimeTicks, Gauge32, mib_2, Integer32, Unsigned32, Bits, NotificationType, Counter32, MibIdentifier, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter64", "TimeTicks", "Gauge32", "mib-2", "Integer32", "Unsigned32", "Bits", "NotificationType", "Counter32", "MibIdentifier", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "ObjectIdentity")
TruthValue, TextualConvention, RowStatus, DisplayString, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "RowStatus", "DisplayString", "StorageType")
t11FamConfigDomainId, = mibBuilder.importSymbols("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamConfigDomainId")
T11FabricIndex, = mibBuilder.importSymbols("T11-TC-MIB", "T11FabricIndex")
t11FcFspfMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 143))
t11FcFspfMIB.setRevisions(('2006-08-14 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: t11FcFspfMIB.setRevisionsDescriptions(('Initial version of this MIB module published as RFC4626.',))
if mibBuilder.loadTexts: t11FcFspfMIB.setLastUpdated('200608140000Z')
if mibBuilder.loadTexts: t11FcFspfMIB.setOrganization('T11')
if mibBuilder.loadTexts: t11FcFspfMIB.setContactInfo('Claudio DeSanti Cisco Systems, Inc. 170 West Tasman Drive San Jose, CA 95134 USA EMail: cds@cisco.com Keith McCloghrie Cisco Systems, Inc. 170 West Tasman Drive San Jose, CA USA 95134 Email: kzm@cisco.com')
if mibBuilder.loadTexts: t11FcFspfMIB.setDescription('The MIB module for managing the Fabric Shortest Path First (FSPF) protocol. FSPF is specified in FC-SW-4. Copyright (C) The Internet Society (2006). This version of this MIB module is part of RFC 4626; see the RFC itself for full legal notices.')
t11FspfNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 143, 0))
t11FspfObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 143, 1))
t11FspfConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 143, 2))
t11FspfConfiguration = MibIdentifier((1, 3, 6, 1, 2, 1, 143, 1, 1))
t11FspfDatabase = MibIdentifier((1, 3, 6, 1, 2, 1, 143, 1, 2))
class T11FspfLsrType(TextualConvention, Integer32):
    reference = 'Fibre Channel - Switch Fabric - 4 (FC-SW-4), ANSI INCITS 418-2006, section 6.1.9.3.'
    description = 'Type of the Link State Record. FC-SW-4 defines two types of LSRs and allows for the possibility for more will be defined in the future: 01 - Switch Link Record 02 - Obsolete 240 - 255 - Vendor Specific others - Reserved. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class T11FspfLinkType(TextualConvention, Integer32):
    reference = 'Fibre Channel - Switch Fabric - 4 (FC-SW-4), ANSI INCITS 418-2006, section 6.1.9.4.'
    description = 'Type of an the FSPF Link. Presently defined values: 1 - Point-to-Point 240-255 - Vendor Specific all others - Reserved. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class T11FspfInterfaceState(TextualConvention, Integer32):
    reference = 'Fibre Channel - Switch Fabric - 4 (FC-SW-4), ANSI INCITS 418-2006, section 8.7.'
    description = 'The state of the FSPF Neighbor Finite State Machine for the neighbor (switch) on a particular interface. Possible values are : down(1) - Down init(2) - Init dbExchange(3) - Database Exchange dbAckwait(4) - Database AckWait dbWait(5) - Database Wait full(6) - Full (Connected) '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("down", 1), ("init", 2), ("dbExchange", 3), ("dbAckwait", 4), ("dbWait", 5), ("full", 6))

class T11FspfLastCreationTime(TextualConvention, TimeTicks):
    description = 'This TC describes an object that stores the last time it, and the row containing it, was created. This can be used by management applications to determine that a row has been deleted and re-created between reads, causing an otherwise undetectable discontinuity in the data.'
    status = 'current'

t11FspfTable = MibTable((1, 3, 6, 1, 2, 1, 143, 1, 1, 1), )
if mibBuilder.loadTexts: t11FspfTable.setStatus('current')
if mibBuilder.loadTexts: t11FspfTable.setDescription("This table allows the users to configure and monitor FSPF's per-Fabric parameters and statistics on all Fabrics known to locally managed switches. Entries are created/removed by the agent if and when (Virtual) Fabrics are created/deleted.")
t11FspfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 143, 1, 1, 1, 1), ).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "FC-MGMT-MIB", "fcmSwitchIndex"), (0, "T11-FC-FSPF-MIB", "t11FspfFabricIndex"))
if mibBuilder.loadTexts: t11FspfEntry.setStatus('current')
if mibBuilder.loadTexts: t11FspfEntry.setDescription("An entry containing FSPF variables, parameters, and statistics on a particular switch (identified by values of fcmInstanceIndex and fcmSwitchIndex) for a particular Fabric (identified by a t11FspfFabricIndex value). (Note that the local switch's per-fabric Domain-ID is available in t11FamConfigDomainId, which is defined in T11-FC-FABRIC-ADDR-MGR-MIB.)")
t11FspfFabricIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 1, 1, 1, 1), T11FabricIndex())
if mibBuilder.loadTexts: t11FspfFabricIndex.setStatus('current')
if mibBuilder.loadTexts: t11FspfFabricIndex.setDescription('A unique index value that uniquely identifies a particular Fabric. In a Fabric conformant to FC-SW-4, multiple Virtual Fabrics can operate within one (or more) physical infrastructures. In such a case, index value is used to uniquely identify a particular Fabric within a physical infrastructure. In a Fabric that has (can have) only a single Fabric operating within the physical infrastructure, the value of this Fabric Index will always be 1.')
t11FspfMinLsArrival = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1000)).setUnits('milliSeconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: t11FspfMinLsArrival.setReference('Fibre Channel - Switch Fabric - 4 (FC-SW-4), ANSI INCITS 418-2006, sections 8.6.4.5 & 15.1.')
if mibBuilder.loadTexts: t11FspfMinLsArrival.setStatus('current')
if mibBuilder.loadTexts: t11FspfMinLsArrival.setDescription('The minimum time after accepting a Link State Record (LSR) on this Fabric before accepting another update of the same LSR on the same Fabric. An LSR update that is not accepted because of this time interval is discarded.')
t11FspfMinLsInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(5000)).setUnits('milliSeconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: t11FspfMinLsInterval.setReference('Fibre Channel - Switch Fabric - 4 (FC-SW-4), ANSI INCITS 418-2006, section 15.1.')
if mibBuilder.loadTexts: t11FspfMinLsInterval.setStatus('current')
if mibBuilder.loadTexts: t11FspfMinLsInterval.setDescription('The minimum time after this switch sends an LSR on this Fabric before it will send another update of the same LSR on the same Fabric.')
t11FspfLsRefreshTime = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 1, 1, 1, 4), Unsigned32().clone(30)).setUnits('Minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FspfLsRefreshTime.setReference('Fibre Channel - Switch Fabric - 4 (FC-SW-4), ANSI INCITS 418-2006, sections 8.5.1 & 15.1.')
if mibBuilder.loadTexts: t11FspfLsRefreshTime.setStatus('current')
if mibBuilder.loadTexts: t11FspfLsRefreshTime.setDescription('The interval between transmission of refresh LSRs on this Fabric.')
t11FspfMaxAge = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 1, 1, 1, 5), Unsigned32().clone(60)).setUnits('Minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FspfMaxAge.setReference('Fibre Channel - Switch Fabric - 4 (FC-SW-4), ANSI INCITS 418-2006, section 15.1.')
if mibBuilder.loadTexts: t11FspfMaxAge.setStatus('current')
if mibBuilder.loadTexts: t11FspfMaxAge.setDescription('The maximum age an LSR will be retained in the FSPF database on this Fabric. An LSR is removed from the database after MaxAge is reached.')
t11FspfMaxAgeDiscards = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FspfMaxAgeDiscards.setStatus('current')
if mibBuilder.loadTexts: t11FspfMaxAgeDiscards.setDescription('The number of LSRs discarded due to their age reaching t11FspfMaxAge in this Fabric. The last discontinuity of this counter is indicated by t11FspfCreateTime.')
t11FspfPathComputations = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FspfPathComputations.setReference('Fibre Channel - Switch Fabric - 4 (FC-SW-4), ANSI INCITS 418-2006, section 8.1.1.')
if mibBuilder.loadTexts: t11FspfPathComputations.setStatus('current')
if mibBuilder.loadTexts: t11FspfPathComputations.setDescription('The number of times that the path computation algorithm has been invoked by this Switch on this Fabric to compute a set of minimum cost paths for this Fabric. The last discontinuity of this counter is indicated by t11FspfCreateTime.')
t11FspfChecksumErrors = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FspfChecksumErrors.setReference('Fibre Channel - Switch Fabric - 4 (FC-SW-4), ANSI INCITS 418-2006, section 8.5.4.')
if mibBuilder.loadTexts: t11FspfChecksumErrors.setStatus('current')
if mibBuilder.loadTexts: t11FspfChecksumErrors.setDescription('The number of FSPF checksum errors that were detected locally (and therefore discarded) on this Fabric. The last discontinuity of this counter is indicated by t11FspfCreateTime.')
t11FspfLsrs = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 1, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FspfLsrs.setStatus('current')
if mibBuilder.loadTexts: t11FspfLsrs.setDescription('The current number of entries for this Fabric in the t11FspfLsrTable.')
t11FspfCreateTime = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 1, 1, 1, 10), T11FspfLastCreationTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FspfCreateTime.setStatus('current')
if mibBuilder.loadTexts: t11FspfCreateTime.setDescription('The value of sysUpTime when this entry was last created.')
t11FspfAdminStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t11FspfAdminStatus.setReference('T11-FC-ROUTE-MIB, The Fibre Channel Routing Information MIB, RFC4625.')
if mibBuilder.loadTexts: t11FspfAdminStatus.setStatus('current')
if mibBuilder.loadTexts: t11FspfAdminStatus.setDescription("The desired state of FSPF in this Fabric. If value of this object is set to 'up', then FSPF is enabled in this Fabric. If set to 'down', then FSPF is disabled in this Fabric -- when FSPF is disabled, FSPF provides no routes to be included in the T11-FC-ROUTE-MIB module. (see the T11-FC-ROUTE-MIB).")
t11FspfOperStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FspfOperStatus.setStatus('current')
if mibBuilder.loadTexts: t11FspfOperStatus.setDescription("State of FSPF in this Fabric. If 't11FspfAdminStatus' is 'down', then the 't11FspfOperStatus' should be 'down'. If 't11FspfAdminStatus' is changed to 'up', then 't11FspfOperStatus' should change to 'up' as and when FSPF is active in this Fabric.")
t11FspfNbrStateChangNotifyEnable = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 1, 1, 1, 13), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t11FspfNbrStateChangNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: t11FspfNbrStateChangNotifyEnable.setDescription("Specifies whether or not the local agent should issue the notification 't11FspfNbrStateChangNotify' when the local switch learns of a change of state in the FSPF Neighbor Finite State Machine on an interface in this Fabric. If the value of the object is 'true, then the notification is generated. If the value is 'false', notification is not generated.")
t11FspfSetToDefault = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("noOp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t11FspfSetToDefault.setStatus('current')
if mibBuilder.loadTexts: t11FspfSetToDefault.setDescription("Setting this value to 'default' changes the value of each and every writable object in this row to its default value. No action is taken if this object is set to 'noOp'. The value of the object, when read, is always 'noOp'.")
t11FspfStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 1, 1, 1, 15), StorageType().clone('nonVolatile')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t11FspfStorageType.setStatus('current')
if mibBuilder.loadTexts: t11FspfStorageType.setDescription("The storage type for read-write objects in this conceptual row. Conceptual rows having the value 'permanent' need not allow write-access to any columnar objects in the row.")
t11FspfIfTable = MibTable((1, 3, 6, 1, 2, 1, 143, 1, 1, 2), )
if mibBuilder.loadTexts: t11FspfIfTable.setStatus('current')
if mibBuilder.loadTexts: t11FspfIfTable.setDescription("This table allows the users to configure and monitor the FSPF parameters that are per-interface (identified by a t11FspfIfIndex value), per-Fabric (identified by a t11FspfFabricIndex value), and per-switch (identified by values of fcmInstanceIndex and fcmSwitchIndex). Creating a row in this table via t11FspfIfRowStatus provides the means to specify non-default parameter value(s) for an interface at a time when the relevant row in this table would not otherwise exist because the interface is either down or it is not an E_Port, but the corresponding row in the t11FspfTable must already exist. After the non-default values have been specified for a port's parameters, they need to be retained in this table, even when the port becomes 'isolated'. However, having unnecessary rows in this table clutters it up and makes those rows that are useful harder for an NMS to find. Therefore, when an E_Port becomes isolated, its row gets deleted if and only if all of its parameter values are the default values; also, when an E_Port becomes non-isolated in a particular Fabric, a row in this table needs to exist and is automatically created, if necessary. The specific conditions for an automated/implicit deletion of a row are: a) if the corresponding interface is no longer an E_Port (e.g., a G_Port which is dynamically determined to be an F_Port), and all configurable parameters have default values; or b) if the interface identified by t11FspfIfIndex no longer exists (e.g., because a line-card is physically removed); or c) if the corresponding row in the t11FspfTable is deleted. ")
t11FspfIfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 143, 1, 1, 2, 1), ).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "FC-MGMT-MIB", "fcmSwitchIndex"), (0, "T11-FC-FSPF-MIB", "t11FspfFabricIndex"), (0, "T11-FC-FSPF-MIB", "t11FspfIfIndex"))
if mibBuilder.loadTexts: t11FspfIfEntry.setStatus('current')
if mibBuilder.loadTexts: t11FspfIfEntry.setDescription('An entry containing FSPF information for the interface identified by t11FspfIfIndex, on the fabric identified by t11FspfFabricIndex, on the switch identified by fcmSwitchIndex.')
t11FspfIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: t11FspfIfIndex.setStatus('current')
if mibBuilder.loadTexts: t11FspfIfIndex.setDescription('The value of ifIndex that identifies the local Fibre Channel interface for which this entry contains FSPF information.')
t11FspfIfHelloInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(20)).setUnits('Seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FspfIfHelloInterval.setStatus('current')
if mibBuilder.loadTexts: t11FspfIfHelloInterval.setDescription('Interval between the periodic HELLO messages sent on this interface in this Fabric to verify the link health. Note that this value must be same at both ends of a link in this Fabric.')
t11FspfIfDeadInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 65535)).clone(80)).setUnits('Seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FspfIfDeadInterval.setStatus('current')
if mibBuilder.loadTexts: t11FspfIfDeadInterval.setDescription('Maximum time for which no HELLO messages can be received on this interface in this Fabric. After this time, the interface is assumed to be broken and removed from the database. Note that this value must be greater than the HELLO interval specified on this interface in this Fabric.')
t11FspfIfRetransmitInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 1, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(5)).setUnits('Seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FspfIfRetransmitInterval.setStatus('current')
if mibBuilder.loadTexts: t11FspfIfRetransmitInterval.setDescription('The time after which an unacknowledged LSR is retransmitted on this interface in this Fabric.')
t11FspfIfInLsuPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FspfIfInLsuPkts.setStatus('current')
if mibBuilder.loadTexts: t11FspfIfInLsuPkts.setDescription('Number of Link State Update (LSU) packets received on this interface in this Fabric. The last discontinuity of this counter is indicated by t11FspfIfCreateTime.')
t11FspfIfInLsaPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FspfIfInLsaPkts.setStatus('current')
if mibBuilder.loadTexts: t11FspfIfInLsaPkts.setDescription('Number of Link State Acknowledgement (LSA) packets received on this interface in this Fabric. The last discontinuity of this counter is indicated by t11FspfIfCreateTime.')
t11FspfIfOutLsuPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FspfIfOutLsuPkts.setStatus('current')
if mibBuilder.loadTexts: t11FspfIfOutLsuPkts.setDescription('Number of Link State Update (LSU) packets transmitted on this interface in this Fabric. The last discontinuity of this counter is indicated by t11FspfIfCreateTime.')
t11FspfIfOutLsaPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FspfIfOutLsaPkts.setStatus('current')
if mibBuilder.loadTexts: t11FspfIfOutLsaPkts.setDescription('Number of Link State Acknowledgement (LSA) packets transmitted on this interface in this Fabric. The last discontinuity of this counter is indicated by t11FspfIfCreateTime.')
t11FspfIfOutHelloPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FspfIfOutHelloPkts.setStatus('current')
if mibBuilder.loadTexts: t11FspfIfOutHelloPkts.setDescription('Number of HELLO packets transmitted on this interface in this Fabric. The last discontinuity of this counter is indicated by t11FspfIfCreateTime.')
t11FspfIfInHelloPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FspfIfInHelloPkts.setStatus('current')
if mibBuilder.loadTexts: t11FspfIfInHelloPkts.setDescription('Number of HELLO packets received on this interface in this Fabric. The last discontinuity of this counter is indicated by t11FspfIfCreateTime.')
t11FspfIfRetransmittedLsuPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FspfIfRetransmittedLsuPkts.setStatus('current')
if mibBuilder.loadTexts: t11FspfIfRetransmittedLsuPkts.setDescription('The number of LSU packets that contained one or more retransmitted LSRs, and that were transmitted on this interface in this Fabric. The last discontinuity of this counter is indicated by t11FspfIfCreateTime.')
t11FspfIfInErrorPkts = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FspfIfInErrorPkts.setStatus('current')
if mibBuilder.loadTexts: t11FspfIfInErrorPkts.setDescription('Number of invalid FSPF control packets received on this interface in this Fabric. The last discontinuity of this counter is indicated by t11FspfIfCreateTime.')
t11FspfIfNbrState = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 1, 2, 1, 13), T11FspfInterfaceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FspfIfNbrState.setReference('Fibre Channel - Switch Fabric - 4 (FC-SW-4), ANSI INCITS 418-2006, section 8.7')
if mibBuilder.loadTexts: t11FspfIfNbrState.setStatus('current')
if mibBuilder.loadTexts: t11FspfIfNbrState.setDescription("The state of FSPF's 'neighbor state machine', which is the operational state of the interaction with the neighbor's interface that is connected to this interface. If the 't11FspfIfAdminStatus' is 'down', then this object should be 'down'. If the 't11FspfIfAdminStatus' is 'up', then this object's value depends on the state of FSPF's 'neighbor state machine' on this interface in this Fabric.")
t11FspfIfNbrDomainId = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 1, 2, 1, 14), FcDomainIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FspfIfNbrDomainId.setStatus('current')
if mibBuilder.loadTexts: t11FspfIfNbrDomainId.setDescription('The Domain Id of the neighbor in this Fabric.')
t11FspfIfNbrPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 1, 2, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FspfIfNbrPortIndex.setReference('Fibre Channel - Switch Fabric - 4 (FC-SW-4), ANSI INCITS 418-2006, section 6.1.9.4.')
if mibBuilder.loadTexts: t11FspfIfNbrPortIndex.setStatus('current')
if mibBuilder.loadTexts: t11FspfIfNbrPortIndex.setDescription("The index, as known by the neighbor, of the neighbor's interface that is connected to this interface in this Fabric.")
t11FspfIfAdminStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('up')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FspfIfAdminStatus.setStatus('current')
if mibBuilder.loadTexts: t11FspfIfAdminStatus.setDescription("The desired state of FSPF on this interface in this Fabric, whenever 't11FspfAdminStatus' is 'up'. If the value of this object is set to 'up', then FSPF is enabled on this interface in this Fabric. If set to 'down', then FSPF is disabled on this interface in this Fabric. Note that the operational state of FSPF on an interface is given by t11FspfIfNbrState.")
t11FspfIfCreateTime = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 1, 2, 1, 17), T11FspfLastCreationTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FspfIfCreateTime.setStatus('current')
if mibBuilder.loadTexts: t11FspfIfCreateTime.setDescription('The value of sysUpTime when this entry was last created.')
t11FspfIfSetToDefault = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("noOp", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FspfIfSetToDefault.setStatus('current')
if mibBuilder.loadTexts: t11FspfIfSetToDefault.setDescription("Setting this value to 'default' changes the value of each and every writable object in this row to its default value. If all the configuration parameters have their default values, and if the interface is down, then the row is deleted automatically. No action is taken if this object is set to 'noOp'. The value of the object, when read, is always 'noOp'.")
t11FspfIfLinkCostFactor = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 1, 2, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FspfIfLinkCostFactor.setReference('Fibre Channel - Switch Fabric - 4 (FC-SW-4), ANSI INCITS 418-2006, section 8.5.5; and IF-MIB, RFC 2863.')
if mibBuilder.loadTexts: t11FspfIfLinkCostFactor.setStatus('current')
if mibBuilder.loadTexts: t11FspfIfLinkCostFactor.setDescription('The administrative factor used in calculating the cost of sending a frame on this interface in this Fabric. The formula used to calculate the link cost is: Link Cost = S * (1.0625e12 / ifSpeed) where: S = (the value of this object / 100) ifSpeed = interface speed (as defined in the IF-MIB). ')
t11FspfIfStorageType = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 1, 2, 1, 20), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FspfIfStorageType.setStatus('current')
if mibBuilder.loadTexts: t11FspfIfStorageType.setDescription("The storage type for this conceptual row. Conceptual rows having the value 'permanent' need not allow write-access to any columnar objects in the row.")
t11FspfIfRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 1, 2, 1, 21), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: t11FspfIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: t11FspfIfRowStatus.setDescription("The status of the conceptual row. This object can be used to create an entry only if there is an entry in the t11FspfTable for the corresponding Fabric, and if the interface is either isolated or is a non-E_port. Setting this object to 'destroy' will typically fail; to reverse the creation process, set the corresponding instance of t11FspfIfSetToDefault to 'default'.")
t11FspfLsrTable = MibTable((1, 3, 6, 1, 2, 1, 143, 1, 2, 1), )
if mibBuilder.loadTexts: t11FspfLsrTable.setStatus('current')
if mibBuilder.loadTexts: t11FspfLsrTable.setDescription("This table is the database of all the latest incarnations of the Link State Records (LSRs) that are currently contained in the topology database, for all interfaces on all Fabrics known to locally managed switches. A Fabric's topology database contains the LSRs that have been either issued or received by a local switch on that Fabric, and that have not reached t11FspfMaxAge.")
t11FspfLsrEntry = MibTableRow((1, 3, 6, 1, 2, 1, 143, 1, 2, 1, 1), ).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "FC-MGMT-MIB", "fcmSwitchIndex"), (0, "T11-FC-FSPF-MIB", "t11FspfFabricIndex"), (0, "T11-FC-FSPF-MIB", "t11FspfLsrDomainId"), (0, "T11-FC-FSPF-MIB", "t11FspfLsrType"))
if mibBuilder.loadTexts: t11FspfLsrEntry.setStatus('current')
if mibBuilder.loadTexts: t11FspfLsrEntry.setDescription('This gives information for the most recent update of an LSR. There is one entry for every LSR issued or received by a locally managed switch (identified by fcmInstanceIndex and fcmSwitchIndex) in a Fabric (identified by t11FspfFabricIndex).')
t11FspfLsrDomainId = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 2, 1, 1, 1), FcDomainIdOrZero())
if mibBuilder.loadTexts: t11FspfLsrDomainId.setStatus('current')
if mibBuilder.loadTexts: t11FspfLsrDomainId.setDescription('Domain Id of the LSR owner in this Fabric. It is the Link State Id of this LSR.')
t11FspfLsrType = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 2, 1, 1, 2), T11FspfLsrType())
if mibBuilder.loadTexts: t11FspfLsrType.setStatus('current')
if mibBuilder.loadTexts: t11FspfLsrType.setDescription('Type of this LSR.')
t11FspfLsrAdvDomainId = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 2, 1, 1, 3), FcDomainIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FspfLsrAdvDomainId.setStatus('current')
if mibBuilder.loadTexts: t11FspfLsrAdvDomainId.setDescription('Domain Id of the switch that is advertising the LSR on the behalf of the switch owning it.')
t11FspfLsrAge = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 2, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FspfLsrAge.setStatus('current')
if mibBuilder.loadTexts: t11FspfLsrAge.setDescription('The time since this LSR was inserted into the database.')
t11FspfLsrIncarnationNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 2, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FspfLsrIncarnationNumber.setStatus('current')
if mibBuilder.loadTexts: t11FspfLsrIncarnationNumber.setDescription('The link state incarnation number of this LSR. This is used to identify most recent instance of an LSR while updating the topology database when an LSR is received. The updating of an LSR includes incrementing its incarnation number prior to transmission of the updated LSR. So, the most recent LSR is the one with the largest incarnation number.')
t11FspfLsrCheckSum = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 2, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FspfLsrCheckSum.setStatus('current')
if mibBuilder.loadTexts: t11FspfLsrCheckSum.setDescription('The checksum of the LSR.')
t11FspfLsrLinks = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 2, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65355))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FspfLsrLinks.setStatus('current')
if mibBuilder.loadTexts: t11FspfLsrLinks.setDescription('Number of entries in the t11FspfLinkTable associated with this LSR.')
t11FspfLinkNumber = MibScalar((1, 3, 6, 1, 2, 1, 143, 1, 2, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FspfLinkNumber.setStatus('current')
if mibBuilder.loadTexts: t11FspfLinkNumber.setDescription('The number of rows in the t11FspfLinkTable.')
t11FspfLinkTable = MibTable((1, 3, 6, 1, 2, 1, 143, 1, 2, 4), )
if mibBuilder.loadTexts: t11FspfLinkTable.setStatus('current')
if mibBuilder.loadTexts: t11FspfLinkTable.setDescription('This table contains the list of Inter-Switch Links and their information that is part of an LSR, either received or transmitted.')
t11FspfLinkEntry = MibTableRow((1, 3, 6, 1, 2, 1, 143, 1, 2, 4, 1), ).setIndexNames((0, "FC-MGMT-MIB", "fcmInstanceIndex"), (0, "FC-MGMT-MIB", "fcmSwitchIndex"), (0, "T11-FC-FSPF-MIB", "t11FspfFabricIndex"), (0, "T11-FC-FSPF-MIB", "t11FspfLsrDomainId"), (0, "T11-FC-FSPF-MIB", "t11FspfLsrType"), (0, "T11-FC-FSPF-MIB", "t11FspfLinkIndex"))
if mibBuilder.loadTexts: t11FspfLinkEntry.setStatus('current')
if mibBuilder.loadTexts: t11FspfLinkEntry.setDescription('An entry that contains information about a link contained in an LSR in this Fabric. An entry is created whenever a new link appears in an (issued or received) LSR. An entry is deleted when a link no longer appears in an (issued or received) LSR.')
t11FspfLinkIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 2, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: t11FspfLinkIndex.setStatus('current')
if mibBuilder.loadTexts: t11FspfLinkIndex.setDescription('An arbitrary index of this link.')
t11FspfLinkNbrDomainId = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 2, 4, 1, 2), FcDomainIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FspfLinkNbrDomainId.setStatus('current')
if mibBuilder.loadTexts: t11FspfLinkNbrDomainId.setDescription('The Domain Id of the neighbor on the other end of this link in this Fabric.')
t11FspfLinkPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 2, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FspfLinkPortIndex.setStatus('current')
if mibBuilder.loadTexts: t11FspfLinkPortIndex.setDescription("The source E_port of this link, as indicated by the index value in the LSR received from the switch identified by 't11FspfLsrDomainId'.")
t11FspfLinkNbrPortIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 2, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FspfLinkNbrPortIndex.setStatus('current')
if mibBuilder.loadTexts: t11FspfLinkNbrPortIndex.setDescription("The destination E_port of this link, as indicated by the index value in the LSR received from the switch identified by 't11FspfLinkNbrDomainId'.")
t11FspfLinkType = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 2, 4, 1, 5), T11FspfLinkType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FspfLinkType.setStatus('current')
if mibBuilder.loadTexts: t11FspfLinkType.setDescription('The type of this link.')
t11FspfLinkCost = MibTableColumn((1, 3, 6, 1, 2, 1, 143, 1, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t11FspfLinkCost.setStatus('current')
if mibBuilder.loadTexts: t11FspfLinkCost.setDescription('The cost of sending a frame on this link in this Fabric. Link cost is calculated using the formula: link cost = S * (1.0625e12 / Signalling Rate) For issued LSRs, S is determined by the value of t11FspfIfLinkCostFactor for the corresponding interface and Fabric.')
t11FspfIfPrevNbrState = MibScalar((1, 3, 6, 1, 2, 1, 143, 1, 1, 3), T11FspfInterfaceState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: t11FspfIfPrevNbrState.setStatus('current')
if mibBuilder.loadTexts: t11FspfIfPrevNbrState.setDescription("The previous state of FSPF's Neighbor Finite State Machine on an interface. This object is only used in the 't11FspfNbrStateChangNotify' notification.")
t11FspfNbrStateChangNotify = NotificationType((1, 3, 6, 1, 2, 1, 143, 0, 1)).setObjects(("IF-MIB", "ifIndex"), ("T11-FC-FABRIC-ADDR-MGR-MIB", "t11FamConfigDomainId"), ("T11-FC-FSPF-MIB", "t11FspfIfNbrDomainId"), ("T11-FC-FSPF-MIB", "t11FspfIfNbrState"), ("T11-FC-FSPF-MIB", "t11FspfIfPrevNbrState"))
if mibBuilder.loadTexts: t11FspfNbrStateChangNotify.setStatus('current')
if mibBuilder.loadTexts: t11FspfNbrStateChangNotify.setDescription("This notification signifies that there has been a change in the state of an FSPF neighbor. This is generated when the FSPF state changes to a terminal state, through either regression (i.e., goes from Full to Init or Down) or progression (i.e., from any state to Full). The value of 't11FspfIfNbrState' is the state of the neighbor after the change.")
t11FspfMIBCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 143, 2, 1))
t11FspfMIBGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 143, 2, 2))
t11FspfMIBCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 143, 2, 1, 1)).setObjects(("T11-FC-FSPF-MIB", "t11FspfGeneralGroup"), ("T11-FC-FSPF-MIB", "t11FspfIfGroup"), ("T11-FC-FSPF-MIB", "t11FspfDatabaseGroup"), ("T11-FC-FSPF-MIB", "t11FspfNotificationGroup"), ("T11-FC-FSPF-MIB", "t11FspfIfCounterGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    t11FspfMIBCompliance = t11FspfMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: t11FspfMIBCompliance.setDescription('The compliance statement for entities that implement the FSPF.')
t11FspfGeneralGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 143, 2, 2, 1)).setObjects(("T11-FC-FSPF-MIB", "t11FspfMinLsArrival"), ("T11-FC-FSPF-MIB", "t11FspfMinLsInterval"), ("T11-FC-FSPF-MIB", "t11FspfLsRefreshTime"), ("T11-FC-FSPF-MIB", "t11FspfMaxAge"), ("T11-FC-FSPF-MIB", "t11FspfMaxAgeDiscards"), ("T11-FC-FSPF-MIB", "t11FspfPathComputations"), ("T11-FC-FSPF-MIB", "t11FspfChecksumErrors"), ("T11-FC-FSPF-MIB", "t11FspfLsrs"), ("T11-FC-FSPF-MIB", "t11FspfCreateTime"), ("T11-FC-FSPF-MIB", "t11FspfAdminStatus"), ("T11-FC-FSPF-MIB", "t11FspfOperStatus"), ("T11-FC-FSPF-MIB", "t11FspfNbrStateChangNotifyEnable"), ("T11-FC-FSPF-MIB", "t11FspfSetToDefault"), ("T11-FC-FSPF-MIB", "t11FspfStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    t11FspfGeneralGroup = t11FspfGeneralGroup.setStatus('current')
if mibBuilder.loadTexts: t11FspfGeneralGroup.setDescription('A collection of objects for displaying and configuring FSPF parameters.')
t11FspfIfGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 143, 2, 2, 2)).setObjects(("T11-FC-FSPF-MIB", "t11FspfIfHelloInterval"), ("T11-FC-FSPF-MIB", "t11FspfIfDeadInterval"), ("T11-FC-FSPF-MIB", "t11FspfIfRetransmitInterval"), ("T11-FC-FSPF-MIB", "t11FspfIfNbrState"), ("T11-FC-FSPF-MIB", "t11FspfIfNbrDomainId"), ("T11-FC-FSPF-MIB", "t11FspfIfNbrPortIndex"), ("T11-FC-FSPF-MIB", "t11FspfIfAdminStatus"), ("T11-FC-FSPF-MIB", "t11FspfIfCreateTime"), ("T11-FC-FSPF-MIB", "t11FspfIfSetToDefault"), ("T11-FC-FSPF-MIB", "t11FspfIfLinkCostFactor"), ("T11-FC-FSPF-MIB", "t11FspfIfRowStatus"), ("T11-FC-FSPF-MIB", "t11FspfIfStorageType"), ("T11-FC-FSPF-MIB", "t11FspfIfPrevNbrState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    t11FspfIfGroup = t11FspfIfGroup.setStatus('current')
if mibBuilder.loadTexts: t11FspfIfGroup.setDescription('A collection of objects for displaying the FSPF interface information.')
t11FspfIfCounterGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 143, 2, 2, 3)).setObjects(("T11-FC-FSPF-MIB", "t11FspfIfInLsuPkts"), ("T11-FC-FSPF-MIB", "t11FspfIfInLsaPkts"), ("T11-FC-FSPF-MIB", "t11FspfIfOutLsuPkts"), ("T11-FC-FSPF-MIB", "t11FspfIfOutLsaPkts"), ("T11-FC-FSPF-MIB", "t11FspfIfOutHelloPkts"), ("T11-FC-FSPF-MIB", "t11FspfIfInHelloPkts"), ("T11-FC-FSPF-MIB", "t11FspfIfRetransmittedLsuPkts"), ("T11-FC-FSPF-MIB", "t11FspfIfInErrorPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    t11FspfIfCounterGroup = t11FspfIfCounterGroup.setStatus('current')
if mibBuilder.loadTexts: t11FspfIfCounterGroup.setDescription('A collection of objects for counting particular FSPF-packet occurrences on an interface.')
t11FspfDatabaseGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 143, 2, 2, 4)).setObjects(("T11-FC-FSPF-MIB", "t11FspfLsrAdvDomainId"), ("T11-FC-FSPF-MIB", "t11FspfLsrAge"), ("T11-FC-FSPF-MIB", "t11FspfLsrIncarnationNumber"), ("T11-FC-FSPF-MIB", "t11FspfLsrCheckSum"), ("T11-FC-FSPF-MIB", "t11FspfLsrLinks"), ("T11-FC-FSPF-MIB", "t11FspfLinkNbrDomainId"), ("T11-FC-FSPF-MIB", "t11FspfLinkPortIndex"), ("T11-FC-FSPF-MIB", "t11FspfLinkNbrPortIndex"), ("T11-FC-FSPF-MIB", "t11FspfLinkType"), ("T11-FC-FSPF-MIB", "t11FspfLinkCost"), ("T11-FC-FSPF-MIB", "t11FspfLinkNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    t11FspfDatabaseGroup = t11FspfDatabaseGroup.setStatus('current')
if mibBuilder.loadTexts: t11FspfDatabaseGroup.setDescription('A collection of objects for displaying the FSPF topology database information.')
t11FspfNotificationGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 143, 2, 2, 5)).setObjects(("T11-FC-FSPF-MIB", "t11FspfNbrStateChangNotify"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    t11FspfNotificationGroup = t11FspfNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: t11FspfNotificationGroup.setDescription('A collection of notifications for FSPF.')
mibBuilder.exportSymbols("T11-FC-FSPF-MIB", t11FspfIfRowStatus=t11FspfIfRowStatus, t11FspfLinkNumber=t11FspfLinkNumber, t11FspfEntry=t11FspfEntry, t11FspfMIBGroups=t11FspfMIBGroups, t11FspfIfAdminStatus=t11FspfIfAdminStatus, t11FspfMIBCompliances=t11FspfMIBCompliances, t11FspfIfCreateTime=t11FspfIfCreateTime, t11FspfObjects=t11FspfObjects, t11FspfLinkIndex=t11FspfLinkIndex, t11FspfIfNbrDomainId=t11FspfIfNbrDomainId, t11FspfIfInHelloPkts=t11FspfIfInHelloPkts, t11FspfMinLsInterval=t11FspfMinLsInterval, t11FspfNotifications=t11FspfNotifications, t11FspfIfLinkCostFactor=t11FspfIfLinkCostFactor, t11FspfNbrStateChangNotifyEnable=t11FspfNbrStateChangNotifyEnable, T11FspfLsrType=T11FspfLsrType, t11FspfLsrType=t11FspfLsrType, t11FspfDatabase=t11FspfDatabase, t11FspfIfEntry=t11FspfIfEntry, t11FspfLinkCost=t11FspfLinkCost, t11FspfIfTable=t11FspfIfTable, t11FspfLsrs=t11FspfLsrs, T11FspfLinkType=T11FspfLinkType, t11FspfIfOutHelloPkts=t11FspfIfOutHelloPkts, t11FspfMinLsArrival=t11FspfMinLsArrival, t11FspfIfOutLsaPkts=t11FspfIfOutLsaPkts, t11FspfFabricIndex=t11FspfFabricIndex, t11FspfSetToDefault=t11FspfSetToDefault, t11FcFspfMIB=t11FcFspfMIB, t11FspfIfStorageType=t11FspfIfStorageType, t11FspfIfOutLsuPkts=t11FspfIfOutLsuPkts, t11FspfConformance=t11FspfConformance, t11FspfIfInLsaPkts=t11FspfIfInLsaPkts, t11FspfOperStatus=t11FspfOperStatus, t11FspfIfPrevNbrState=t11FspfIfPrevNbrState, t11FspfAdminStatus=t11FspfAdminStatus, t11FspfIfNbrPortIndex=t11FspfIfNbrPortIndex, t11FspfLsrLinks=t11FspfLsrLinks, t11FspfStorageType=t11FspfStorageType, t11FspfLinkNbrPortIndex=t11FspfLinkNbrPortIndex, t11FspfTable=t11FspfTable, t11FspfLsrAge=t11FspfLsrAge, t11FspfMaxAge=t11FspfMaxAge, t11FspfLinkEntry=t11FspfLinkEntry, t11FspfMIBCompliance=t11FspfMIBCompliance, t11FspfLinkType=t11FspfLinkType, t11FspfDatabaseGroup=t11FspfDatabaseGroup, t11FspfLinkTable=t11FspfLinkTable, t11FspfIfNbrState=t11FspfIfNbrState, t11FspfLsRefreshTime=t11FspfLsRefreshTime, t11FspfMaxAgeDiscards=t11FspfMaxAgeDiscards, T11FspfLastCreationTime=T11FspfLastCreationTime, t11FspfIfInLsuPkts=t11FspfIfInLsuPkts, t11FspfIfIndex=t11FspfIfIndex, t11FspfIfInErrorPkts=t11FspfIfInErrorPkts, t11FspfGeneralGroup=t11FspfGeneralGroup, t11FspfIfSetToDefault=t11FspfIfSetToDefault, t11FspfLsrIncarnationNumber=t11FspfLsrIncarnationNumber, T11FspfInterfaceState=T11FspfInterfaceState, t11FspfPathComputations=t11FspfPathComputations, t11FspfNbrStateChangNotify=t11FspfNbrStateChangNotify, t11FspfIfGroup=t11FspfIfGroup, t11FspfIfDeadInterval=t11FspfIfDeadInterval, t11FspfLinkPortIndex=t11FspfLinkPortIndex, t11FspfIfCounterGroup=t11FspfIfCounterGroup, t11FspfConfiguration=t11FspfConfiguration, t11FspfIfRetransmittedLsuPkts=t11FspfIfRetransmittedLsuPkts, t11FspfLsrEntry=t11FspfLsrEntry, t11FspfLsrDomainId=t11FspfLsrDomainId, t11FspfIfHelloInterval=t11FspfIfHelloInterval, t11FspfChecksumErrors=t11FspfChecksumErrors, PYSNMP_MODULE_ID=t11FcFspfMIB, t11FspfLsrTable=t11FspfLsrTable, t11FspfLsrCheckSum=t11FspfLsrCheckSum, t11FspfLsrAdvDomainId=t11FspfLsrAdvDomainId, t11FspfNotificationGroup=t11FspfNotificationGroup, t11FspfIfRetransmitInterval=t11FspfIfRetransmitInterval, t11FspfLinkNbrDomainId=t11FspfLinkNbrDomainId, t11FspfCreateTime=t11FspfCreateTime)
