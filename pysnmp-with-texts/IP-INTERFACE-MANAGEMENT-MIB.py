#
# PySNMP MIB module IP-INTERFACE-MANAGEMENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IP-INTERFACE-MANAGEMENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:55:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
cjnMgmt, = mibBuilder.importSymbols("Cajun-ROOT", "cjnMgmt")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, IpAddress, Unsigned32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter64, NotificationType, ObjectIdentity, iso, ModuleIdentity, MibIdentifier, Bits, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "IpAddress", "Unsigned32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter64", "NotificationType", "ObjectIdentity", "iso", "ModuleIdentity", "MibIdentifier", "Bits", "Integer32")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
cjnIpIfMgmt = ModuleIdentity((1, 3, 6, 1, 4, 1, 1751, 2, 43, 3, 1))
if mibBuilder.loadTexts: cjnIpIfMgmt.setLastUpdated('9902110000Z')
if mibBuilder.loadTexts: cjnIpIfMgmt.setOrganization("Lucent's Concord Technology Center (CTC)")
if mibBuilder.loadTexts: cjnIpIfMgmt.setContactInfo('Erick Crowell -- ecrowell@lucent.com Ira Steckler -- isteckler@lucent.com')
if mibBuilder.loadTexts: cjnIpIfMgmt.setDescription('Cajun Private IP Interface Management MIB')
cjnIpIfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 2, 43, 3, 1, 1))
cjnIpIfNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 1751, 2, 43, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpIfNextIndex.setStatus('current')
if mibBuilder.loadTexts: cjnIpIfNextIndex.setDescription('The next available IfIndex. This number should be used to create new rows in the IpIfTable')
cjnIpIfTable = MibTable((1, 3, 6, 1, 4, 1, 1751, 2, 43, 3, 1, 1, 2), )
if mibBuilder.loadTexts: cjnIpIfTable.setStatus('current')
if mibBuilder.loadTexts: cjnIpIfTable.setDescription('A list of Cajun IP interface entries. The number of entries is given by the value of cjnIpIfNumber.')
cjnIpIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1751, 2, 43, 3, 1, 1, 2, 1), ).setIndexNames((0, "IP-INTERFACE-MANAGEMENT-MIB", "cjnIpIfIndex"))
if mibBuilder.loadTexts: cjnIpIfEntry.setStatus('current')
if mibBuilder.loadTexts: cjnIpIfEntry.setDescription('An cajun IP Interface instance ')
cjnIpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 3, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpIfIndex.setStatus('current')
if mibBuilder.loadTexts: cjnIpIfIndex.setDescription("The globally unique identifier for this interface. This number MUST correlate with the IfTable's IfIndex in MIB-II or RFC2233")
cjnIpIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 3, 1, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: cjnIpIfRowStatus.setDescription('The Status of this entry in the table. Note the available states: active(1), -- Obviously Active. notInService(2) -- Interface configured but disabled. notReady(3), -- Interface NOT configured. createAndGo(4), createAndWait(5) or destroy(6) ')
cjnIpIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 3, 1, 1, 2, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpIfIpAddress.setStatus('current')
if mibBuilder.loadTexts: cjnIpIfIpAddress.setDescription('The IP Address associated with this IP interface.')
cjnIpIfIpSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 3, 1, 1, 2, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpIfIpSubnetMask.setStatus('current')
if mibBuilder.loadTexts: cjnIpIfIpSubnetMask.setDescription('The IP Subnet Mask associated with this IP interface.')
cjnIpIfMacFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 3, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ethernetV2", 0), ("snap", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpIfMacFormat.setStatus('current')
if mibBuilder.loadTexts: cjnIpIfMacFormat.setDescription('The ethernet framing type used on this IP interface.')
cjnIpIfVlanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 3, 1, 1, 2, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpIfVlanIfIndex.setStatus('current')
if mibBuilder.loadTexts: cjnIpIfVlanIfIndex.setDescription("The interface index of the VLAN or Ethernet or Serial console for this interface. This number MUST correlate with the IfTable's IfIndex in MIB-II or RFC2233.")
cjnIpIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 3, 1, 1, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpIfName.setStatus('current')
if mibBuilder.loadTexts: cjnIpIfName.setDescription('The protocol Unique name associated with this interface. This name is limited to 32 characters and may appear in other protocol interface entry such as IPX, Appletalk but MAY NOT be duplicated within the cjnIpIfTable. In otherwords other protocols can use this interface name but IP may only have this name associated with one interface.')
cjnIpIfIpRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 3, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("routingAndMgmt", 0), ("mgmtOnly", 1), ("routingOnly", 2))).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpIfIpRouting.setStatus('current')
if mibBuilder.loadTexts: cjnIpIfIpRouting.setDescription('The Consumption / Forwarding mode assocated with this IP Interface. The RoutingAndMgmt mode enables IP Routing and local Packet consumption. The MgmtOnly mode disables IP Forwarding but continues to allow local Packet consumption on this interface. The routingOnly mode is disables Local Packet consumption but continues to allow IP Forwarding on this interface')
cjnIpIfSpoofCheckEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 3, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpIfSpoofCheckEnabled.setStatus('current')
if mibBuilder.loadTexts: cjnIpIfSpoofCheckEnabled.setDescription('This feature is not supported at this time.')
cjnIpIfProxyArpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 3, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpIfProxyArpEnabled.setStatus('current')
if mibBuilder.loadTexts: cjnIpIfProxyArpEnabled.setDescription('enables / disables Proxy Arp functionality on this interface.')
cjnIpIfIcmpRedirEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 3, 1, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpIfIcmpRedirEnabled.setStatus('current')
if mibBuilder.loadTexts: cjnIpIfIcmpRedirEnabled.setDescription('enables / disables Icmp Redirect messages from originating from this interface.')
cjnIpIfUdpRbcastMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 3, 1, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("inbound", 1), ("outbound", 2), ("both", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpIfUdpRbcastMode.setStatus('current')
if mibBuilder.loadTexts: cjnIpIfUdpRbcastMode.setDescription('configures the NetBIOS UDP Rebroadcast mode on this interface.')
cjnIpIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 3, 1, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpIfAdminStatus.setStatus('current')
if mibBuilder.loadTexts: cjnIpIfAdminStatus.setDescription('The administrative state of this interface.')
cjnIpIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 3, 1, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cjnIpIfStatus.setStatus('current')
if mibBuilder.loadTexts: cjnIpIfStatus.setDescription('The current state of this interface.')
cjnIpIfBootpDhcpGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 1751, 2, 43, 3, 1, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cjnIpIfBootpDhcpGateway.setStatus('current')
if mibBuilder.loadTexts: cjnIpIfBootpDhcpGateway.setDescription("Enable or disable the designation of this interface as that which will 'receive' BOOTP/DHCP requests with a source IP address of 0.0.0.0. This is used on a multinetted interface when it is otherwise ambiguous as to which interface 'receives' the request, and is important because the IP address of the receiving interface is inserted into the giaddr field of the request before the request is relayed to the BOOTP/DHCP server. If this attribute is disabled, then: - if only one IP interface exists on a VLAN, that IP address is inserted into the request - if more than one IP address exists on a VLAN, the router will choose an interface If more than one IP interface on a given VLAN has this attribute enabled, the router will choose an interface among those with the attribute enabled.")
mibBuilder.exportSymbols("IP-INTERFACE-MANAGEMENT-MIB", cjnIpIfSpoofCheckEnabled=cjnIpIfSpoofCheckEnabled, cjnIpIfMgmt=cjnIpIfMgmt, cjnIpIfGroup=cjnIpIfGroup, cjnIpIfVlanIfIndex=cjnIpIfVlanIfIndex, cjnIpIfRowStatus=cjnIpIfRowStatus, cjnIpIfProxyArpEnabled=cjnIpIfProxyArpEnabled, cjnIpIfBootpDhcpGateway=cjnIpIfBootpDhcpGateway, cjnIpIfIpAddress=cjnIpIfIpAddress, cjnIpIfUdpRbcastMode=cjnIpIfUdpRbcastMode, cjnIpIfEntry=cjnIpIfEntry, cjnIpIfNextIndex=cjnIpIfNextIndex, cjnIpIfIcmpRedirEnabled=cjnIpIfIcmpRedirEnabled, PYSNMP_MODULE_ID=cjnIpIfMgmt, cjnIpIfStatus=cjnIpIfStatus, cjnIpIfTable=cjnIpIfTable, cjnIpIfIndex=cjnIpIfIndex, cjnIpIfName=cjnIpIfName, cjnIpIfAdminStatus=cjnIpIfAdminStatus, cjnIpIfMacFormat=cjnIpIfMacFormat, cjnIpIfIpSubnetMask=cjnIpIfIpSubnetMask, cjnIpIfIpRouting=cjnIpIfIpRouting)
