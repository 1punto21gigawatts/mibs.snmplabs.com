#
# PySNMP MIB module BLADETYPE4-NETWORK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BLADETYPE4-NETWORK-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:39:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
BridgeId, = mibBuilder.importSymbols("BRIDGE-MIB", "BridgeId")
hpSwitchBladeType4_Mgmt, hpSwitchBladeType4_Products = mibBuilder.importSymbols("HP-SWITCH-PL-MIB", "hpSwitchBladeType4-Mgmt", "hpSwitchBladeType4-Products")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysLocation, sysName, sysContact = mibBuilder.importSymbols("SNMPv2-MIB", "sysLocation", "sysName", "sysContact")
Bits, iso, enterprises, TimeTicks, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Unsigned32, MibIdentifier, Counter32, Gauge32, ModuleIdentity, Integer32, ObjectIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "iso", "enterprises", "TimeTicks", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Unsigned32", "MibIdentifier", "Counter32", "Gauge32", "ModuleIdentity", "Integer32", "ObjectIdentity", "IpAddress")
DisplayString, PhysAddress, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "PhysAddress", "TextualConvention", "MacAddress")
class PortNumber(TextualConvention, Unsigned32):
    description = 'Represents a port number of a switch. '
    status = 'current'

hpProLiant_GbE2c_InterconnectSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 1, 1)).setLabel("hpProLiant-GbE2c-InterconnectSwitch")
agent = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1))
agentConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1))
agentStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2))
agentInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3))
agentOper = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 4))
agSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1))
agPortConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2))
agRadiusConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 3))
agNTP = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 4))
agSyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5))
agTransfer = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 7))
agApply = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 8))
agTacacsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 10))
agMgmtNetConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 11))
agAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 12))
agSSHConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 13))
pktStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 1))
mpCpuStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 2))
portStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3))
agClearStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 7))
ntpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 9))
aclStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 12))
memoryStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 13))
hardware = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 1))
portInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 2))
agDiff = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 4))
agCfgDump = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 5))
geaportInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 7))
ufdInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 8))
sfpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 9))
agNTPOper = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 4, 2))
hwPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPartNumber.setStatus('current')
if mibBuilder.loadTexts: hwPartNumber.setDescription('The hardware part number of the Bladetype2 Switch.')
hwRevision = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRevision.setStatus('current')
if mibBuilder.loadTexts: hwRevision.setDescription('The hardware revision. If the revision is not available, a zero length string should be returned.')
hwSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSerialNumber.setStatus('current')
if mibBuilder.loadTexts: hwSerialNumber.setDescription('The switch serial number.')
agPortOperTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 4, 1), )
if mibBuilder.loadTexts: agPortOperTable.setStatus('current')
if mibBuilder.loadTexts: agPortOperTable.setDescription('The table of port operations.')
agPortOperTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 4, 1, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "portOperIdx"))
if mibBuilder.loadTexts: agPortOperTableEntry.setStatus('current')
if mibBuilder.loadTexts: agPortOperTableEntry.setDescription('A row in the port operations table.')
portOperIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 4, 1, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOperIdx.setStatus('current')
if mibBuilder.loadTexts: portOperIdx.setDescription('The port index.')
portOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portOperState.setStatus('current')
if mibBuilder.loadTexts: portOperState.setDescription('Enable/Disable port.')
portOperRmon = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portOperRmon.setStatus('current')
if mibBuilder.loadTexts: portOperRmon.setDescription('Enable/Disable RMON for port.')
portOperDot1xTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 4, 3), )
if mibBuilder.loadTexts: portOperDot1xTable.setStatus('current')
if mibBuilder.loadTexts: portOperDot1xTable.setDescription('The table of port operations.')
portOperDot1xTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 4, 3, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "portOperDot1xIndx"))
if mibBuilder.loadTexts: portOperDot1xTableEntry.setStatus('current')
if mibBuilder.loadTexts: portOperDot1xTableEntry.setDescription('A row in the port 802.1x operation table.')
portOperDot1xIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 4, 3, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOperDot1xIndx.setStatus('current')
if mibBuilder.loadTexts: portOperDot1xIndx.setDescription('The port index.')
portOperDot1xReset = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portOperDot1xReset.setStatus('current')
if mibBuilder.loadTexts: portOperDot1xReset.setDescription('Reinitialize 802.1x access control on port.')
portOperDot1xReauth = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portOperDot1xReauth.setStatus('current')
if mibBuilder.loadTexts: portOperDot1xReauth.setDescription('Initiate reauthentication on port.')
ntpOperSendReq = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpOperSendReq.setStatus('current')
if mibBuilder.loadTexts: ntpOperSendReq.setDescription('Allows the user to send requests to the NTP server.')
portInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 2, 1), )
if mibBuilder.loadTexts: portInfoTable.setStatus('current')
if mibBuilder.loadTexts: portInfoTable.setDescription('The table of port information.')
portInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 2, 1, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "portInfoIndx"))
if mibBuilder.loadTexts: portInfoTableEntry.setStatus('current')
if mibBuilder.loadTexts: portInfoTableEntry.setDescription('A row in the port information table.')
portInfoIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 2, 1, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoIndx.setStatus('current')
if mibBuilder.loadTexts: portInfoIndx.setDescription('The port index.')
portInfoSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("mbs10", 2), ("mbs100", 3), ("mbs1000", 4), ("any", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoSpeed.setStatus('current')
if mibBuilder.loadTexts: portInfoSpeed.setDescription('The current operational speed of the port.')
portInfoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("full-duplex", 2), ("half-duplex", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoMode.setStatus('current')
if mibBuilder.loadTexts: portInfoMode.setDescription('The current operational mode of the port.')
portInfoFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("transmit", 2), ("receive", 3), ("both", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoFlowCtrl.setStatus('current')
if mibBuilder.loadTexts: portInfoFlowCtrl.setDescription('The current operational flow control of the port.')
portInfoLink = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("disabled", 3), ("inoperative", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoLink.setStatus('current')
if mibBuilder.loadTexts: portInfoLink.setDescription('The current operational link status of the port.')
portInfoPhyIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPhyIfDescr.setStatus('current')
if mibBuilder.loadTexts: portInfoPhyIfDescr.setDescription('A textual string containing information about the interface. This string should include the name of the manufacturer, the product name and the version of the hardware interface.')
portInfoPhyIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32))).clone(namedValues=NamedValues(("other", 1), ("regular1822", 2), ("hdh1822", 3), ("ddn-x25", 4), ("rfc877-x25", 5), ("ethernet-csmacd", 6), ("iso88023-csmacd", 7), ("iso88024-tokenBus", 8), ("iso88025-tokenRing", 9), ("iso88026-man", 10), ("starLan", 11), ("proteon-10Mbit", 12), ("proteon-80Mbit", 13), ("hyperchannel", 14), ("fddi", 15), ("lapb", 16), ("sdlc", 17), ("ds1", 18), ("e1", 19), ("basicISDN", 20), ("primaryISDN", 21), ("propPointToPointSerial", 22), ("ppp", 23), ("softwareLoopback", 24), ("eon", 25), ("ethernet-3Mbit", 26), ("nsip", 27), ("slip", 28), ("ultra", 29), ("ds3", 30), ("sip", 31), ("frame-relay", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPhyIfType.setStatus('current')
if mibBuilder.loadTexts: portInfoPhyIfType.setDescription("The type of interface, distinguished according to the physical/link protocol(s) immediately `below' the network layer in the protocol stack.")
portInfoPhyIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPhyIfMtu.setStatus('current')
if mibBuilder.loadTexts: portInfoPhyIfMtu.setDescription('The size of the largest datagram which can be sent/received on the interface, specified in octets. For interfaces that are used for transmitting network datagrams, this is the size of the largest network datagram that can be sent on the interface.')
portInfoPhyIfPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 2, 1, 1, 9), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPhyIfPhysAddress.setStatus('current')
if mibBuilder.loadTexts: portInfoPhyIfPhysAddress.setDescription("The interface's address at the protocol layer immediately `below' the network layer in the protocol stack. For interfaces which do not have such an address (e.g., a serial line), this object should contain an octet string of zero length.")
portInfoPhyIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPhyIfOperStatus.setStatus('current')
if mibBuilder.loadTexts: portInfoPhyIfOperStatus.setDescription('The current operational state of the interface. The testing(3) state indicates that no operational packets can be passed.')
portInfoPhyIfLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 2, 1, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPhyIfLastChange.setStatus('current')
if mibBuilder.loadTexts: portInfoPhyIfLastChange.setDescription('The value of sysUpTime at the time the interface entered its current operational state. If the current state was entered prior to the last re- initialization of the local network management subsystem, then this object contains a zero value.')
portInfoMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("auto", 0), ("copper", 1), ("fiber", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoMedia.setStatus('current')
if mibBuilder.loadTexts: portInfoMedia.setDescription('The switch port media.')
portInfoPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 2, 1, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPvid.setStatus('current')
if mibBuilder.loadTexts: portInfoPvid.setDescription('This is the operational port vlan-id of the port. Typically, the value of this object is the same as the value of the agPortCurCfgPVID object. But if, for example, 802.1x is enabled on the port and the port is assigned a vlan-id via 802.1x, this port will be moved to the assigned vlan even when the port is configured with a different PVID.')
portInfoVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("untagged", 0), ("tagged", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoVlanTag.setStatus('current')
if mibBuilder.loadTexts: portInfoVlanTag.setDescription('This is the operational VLAN tag state of the port. Typically, the value of this object is the same as the value of the agPortCurCfgVlanTag objec. But if, for example, 802.1x is enabled on the port and if the port is assigned a vlan via 802.1x, the port will be operationally untagged even if the port is configured to be tagged.')
agApplyConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("apply", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agApplyConfiguration.setStatus('current')
if mibBuilder.loadTexts: agApplyConfiguration.setDescription('This is an action object to apply the changes made to configuration of the switch. By setting the value to apply(2), all the changes made since the last apply are written to the new_config block. other(1) is returned when this object ie read. ')
agSavePending = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("saveNeeded", 1), ("noSaveNeeded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSavePending.setStatus('current')
if mibBuilder.loadTexts: agSavePending.setDescription('This object, when read, gives the user information whether an save action is needed and that the configuration has been applied but not saved to the flash.')
agSaveConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("saveActive", 2), ("notSaveActive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agSaveConfiguration.setStatus('current')
if mibBuilder.loadTexts: agSaveConfiguration.setDescription('This is an action object to write current configuration to nonvolatile storage. When issued with the saveActive, the active configuration in flash is saved to backup in flash and then the new configuration is saved to the active configuration in flash. When issued with notSaveActive, the active configuration is NOT saved to the flash and the active configuration is overwritten with the new configuration. ok(1) is returned always when read.')
agRevert = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("revert", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agRevert.setStatus('current')
if mibBuilder.loadTexts: agRevert.setDescription('This is an action object to revert the unapplied changes made to the switch. By setting the value to revert(2), all the unapplied changes will be reverted. This action will copy the current_config to the new_config block. other(1) is returned when this object is read. ')
agRevertApply = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("revertApply", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agRevertApply.setStatus('current')
if mibBuilder.loadTexts: agRevertApply.setDescription('This is an action object to revert the unsaved changes made to the switch. By setting the value to revertApply(2), all the unsaved as well as unapplied changes will be reverted. other(1) is returned when this object is read. ')
agReset = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("coldReset", 2), ("warmReset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agReset.setStatus('current')
if mibBuilder.loadTexts: agReset.setDescription('This is an action object to reboot the switch. other(1) is returned always when read. The following values are writable: coldReset(2)... warmReset(3)...')
agConfigForNxtReset = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("active", 2), ("backup", 3), ("default", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agConfigForNxtReset.setStatus('current')
if mibBuilder.loadTexts: agConfigForNxtReset.setDescription('The configuration information to be loaded from at next reset. The following values are writable: active(2)...active configuration block backup(3)...backup configuration block default(4)..default configuration block')
agImageForNxtReset = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("image1", 2), ("image2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agImageForNxtReset.setStatus('current')
if mibBuilder.loadTexts: agImageForNxtReset.setDescription('The software image to be booted from at next reset. The following values are writable: image1(2)...image 1 image2(3)...image 2')
agSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: agSoftwareVersion.setDescription("The version of the software image that is currently running on the system in the form of 'major.minor.maintenance.bugfix'. A zero length string is returned if version is not available.")
agBootVer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agBootVer.setStatus('current')
if mibBuilder.loadTexts: agBootVer.setDescription("The version of the boot code in the form of 'major.minor.bugfix'. A zero length string is returned if version is not available.")
agImage1Ver = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agImage1Ver.setStatus('current')
if mibBuilder.loadTexts: agImage1Ver.setDescription("The version of the software image stored in image 1 storage in the form of 'major.minor.bugfix'. A zero length string is returned if version is not available or there is no valid software image.")
agImage2Ver = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agImage2Ver.setStatus('current')
if mibBuilder.loadTexts: agImage2Ver.setDescription("The version of the software image stored in image 2 storage in the form of 'major.minor.bugfix'. A zero length string is returned if version is not available or there is no valid software image.")
agRtcDate = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agRtcDate.setStatus('current')
if mibBuilder.loadTexts: agRtcDate.setDescription("The date on the real time clock in the form of 'mm/dd/yy'. A zero length string is returned if date is not available.")
agRtcTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agRtcTime.setStatus('current')
if mibBuilder.loadTexts: agRtcTime.setDescription("The time on the real time clock in the form of 'hh:mm:ss'. A zero length string is returned if time is not available.")
agLastSetErrorReason = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agLastSetErrorReason.setStatus('current')
if mibBuilder.loadTexts: agLastSetErrorReason.setDescription('The error reason of the last SET failure.')
agCurCfgHttpServerPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgHttpServerPort.setStatus('current')
if mibBuilder.loadTexts: agCurCfgHttpServerPort.setDescription('The TCP port number that the HTTP server is listening to in the current_configuration block.')
agNewCfgHttpServerPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgHttpServerPort.setStatus('current')
if mibBuilder.loadTexts: agNewCfgHttpServerPort.setDescription('The TCP port number that the HTTP server is listening to in the new_configuration block.')
agCurCfgLoginBanner = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgLoginBanner.setStatus('current')
if mibBuilder.loadTexts: agCurCfgLoginBanner.setDescription('The user defined login banner.')
agNewCfgLoginBanner = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgLoginBanner.setStatus('current')
if mibBuilder.loadTexts: agNewCfgLoginBanner.setDescription('The user defined login banner.')
agCurCfgConsole = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgConsole.setStatus('current')
if mibBuilder.loadTexts: agCurCfgConsole.setDescription('Enable or disable console output of syslog messages.')
agNewCfgConsole = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgConsole.setStatus('current')
if mibBuilder.loadTexts: agNewCfgConsole.setDescription('Enable or disable console output of syslog messages.')
agCurCfgBootp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgBootp.setStatus('current')
if mibBuilder.loadTexts: agCurCfgBootp.setDescription('Enable or disable the use of BootP, as currently configured in the current_configuration block.')
agNewCfgBootp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgBootp.setStatus('current')
if mibBuilder.loadTexts: agNewCfgBootp.setDescription('Enable or disable the use of BootP, in the new_configuration block.')
agSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSlotNumber.setStatus('current')
if mibBuilder.loadTexts: agSlotNumber.setDescription('Identifies the slot in which this switch is installed. If the agent implementing this MIB is not a blade in a chassis this value has no meaning.')
agCurCfgSnmpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSnmpTimeout.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSnmpTimeout.setDescription("Once SNMP operations like agApplyConfig, agDiffState and agDumpState, which use the state machine are done the resources used by these operations need to be freed by setting the state back to 'idle' so others can issue the commands via SNMP. agSnmpTimeout indicates the number of minutes before the resources are freed and the state set back to 'idle' if this operation is not performed by the user.")
agNewCfgSnmpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSnmpTimeout.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSnmpTimeout.setDescription("Once SNMP operations like agApplyConfig, agDiffState and agDumpState, which use the state machine are done the resources used by these operations need to be freed by setting the state back to 'idle' so others can issue the commands via SNMP. agSnmpTimeout indicates the number of minutes before the resources are freed and the state set back to 'idle' if this operation is not performed by the user.")
agCurCfgTelnetServerPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgTelnetServerPort.setStatus('current')
if mibBuilder.loadTexts: agCurCfgTelnetServerPort.setDescription('The TCP port number that the telnet server listens for telnet sessions.')
agNewCfgTelnetServerPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgTelnetServerPort.setStatus('current')
if mibBuilder.loadTexts: agNewCfgTelnetServerPort.setDescription('The TCP port number that the telnet server listens for telnet sessions.')
agClearFlashDump = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agClearFlashDump.setStatus('current')
if mibBuilder.loadTexts: agClearFlashDump.setDescription('This is an action object to clear the FLASH dump. ok(1) is returned when this object is read. ')
agRackId = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agRackId.setStatus('current')
if mibBuilder.loadTexts: agRackId.setDescription('The rack unique identifier.')
agChassis = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agChassis.setStatus('current')
if mibBuilder.loadTexts: agChassis.setDescription('Chassis serial number.')
agCurCfgTftpServerPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgTftpServerPort.setStatus('current')
if mibBuilder.loadTexts: agCurCfgTftpServerPort.setDescription('The TCP port number that the TFTP server is listening to in the current_configuration block.')
agNewCfgTftpServerPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgTftpServerPort.setStatus('current')
if mibBuilder.loadTexts: agNewCfgTftpServerPort.setDescription('The TCP port number that the TFTP server is listening to in the new_configuration block.')
agCurCfgTrapSrcIf = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgTrapSrcIf.setStatus('current')
if mibBuilder.loadTexts: agCurCfgTrapSrcIf.setDescription('The SNMP trap source interface number.')
agNewCfgTrapSrcIf = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgTrapSrcIf.setStatus('current')
if mibBuilder.loadTexts: agNewCfgTrapSrcIf.setDescription('The SNMP trap source interface number.')
agCurCfgHttpsServerPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgHttpsServerPort.setStatus('current')
if mibBuilder.loadTexts: agCurCfgHttpsServerPort.setDescription('The TCP port number that the HTTPS server is listening to in the current_configuration block.')
agNewCfgHttpsServerPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgHttpsServerPort.setStatus('current')
if mibBuilder.loadTexts: agNewCfgHttpsServerPort.setDescription('The TCP port number that the HTTPS server is listening to in the new_configuration block.')
agCurDaylightSavings = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254), SingleValueConstraint(255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420))).clone(namedValues=NamedValues(("none", 0), ("africa-Algeria", 1), ("africa-Angola", 2), ("africa-Benin", 3), ("africa-Botswana", 4), ("africa-Burkina-Faso", 5), ("africa-Burundi", 6), ("africa-Cameroon", 7), ("africa-Central-African-Rep", 8), ("africa-Chad", 9), ("africa-Congo-WestDemRepCongo", 10), ("africa-Congo-EastDemRepCongo", 11), ("africa-Congo-Rep", 12), ("africa-Cote-dIvoire", 13), ("africa-Djibouti", 14), ("africa-Egypt", 15), ("africa-Equatorial-Guinea", 16), ("africa-Eritrea", 17), ("africa-Ethiopia", 18), ("africa-Gabon", 19), ("africa-Gambia", 20), ("africa-Ghana", 21), ("africa-Guinea", 22), ("africa-Guinea-Bissau", 23), ("africa-Kenya", 24), ("africa-Lesotho", 25), ("africa-Liberia", 26), ("africa-Libya", 27), ("africa-Malawi", 28), ("africa-Mali-SouthWestMali", 29), ("africa-Mali-NorthEastMali", 30), ("africa-Mauritania", 31), ("africa-Morocco", 32), ("africa-Mozambique", 33), ("africa-Namibia", 34), ("africa-Niger", 35), ("africa-Nigeria", 36), ("africa-Rwanda", 37), ("africa-SaoTome-And-Principe", 38), ("africa-Senegal", 39), ("africa-SierraLeone", 40), ("africa-Somalia", 41), ("africa-SouthAfrica", 42), ("africa-Spain-Mainland", 43), ("africa-Spain-CeutaMelilla", 44), ("africa-Spain-CanaryIslands", 45), ("africa-Sudan", 46), ("africa-Swaziland", 47), ("africa-Tanzania", 48), ("africa-Togo", 49), ("africa-Tunisia", 50), ("africa-Uganda", 51), ("africa-Western-Sahara", 52), ("africa-Zambia", 53), ("africa-Zimbabwe", 54), ("americas-Anguilla", 55), ("americas-Antigua-Barbuda", 56), ("americas-Argentina-EArgentina", 57), ("americas-Argentina-MostLocations", 58), ("americas-Argentina-Jujuy", 59), ("americas-Argentina-Catamarca", 60), ("americas-Argentina-Mendoza", 61), ("americas-Aruba", 62), ("americas-Bahamas", 63), ("americas-Barbados", 64), ("americas-Belize", 65), ("americas-Bolivia", 66), ("americas-Brazil-AtlanticIslands", 67), ("americas-Brazil-AmapaEPara", 68), ("americas-Brazil-NEBrazil", 69), ("americas-Brazil-Pernambuco", 70), ("americas-Brazil-Tocantins", 71), ("americas-Brazil-AlagoasSergipe", 72), ("americas-Brazil-SSEBrazil", 73), ("americas-Brazil-MatoGrossoDoSul", 74), ("americas-Brazil-WParaRondonia", 75), ("americas-Brazil-Roraima", 76), ("americas-Brazil-EAmazonas", 77), ("americas-Brazil-WAmazonas", 78), ("americas-Brazil-Acre", 79), ("americas-Canada-NewfoundlandIsland", 80), ("americas-Canada-AtlanTime-NovaScotia", 81), ("americas-Canada-AtlanTime-ELabrador", 82), ("americas-Canada-EastTime-OntarioMostlocation", 83), ("americas-Canada-EastTime-ThunderBay", 84), ("americas-Canada-EastStdTime-PangnirtungNunavut", 85), ("americas-Canada-EastStdTime-EastNunavut", 86), ("americas-Canada-EastStdTime-CenNunavut", 87), ("americas-Canada-CenTime-ManitobaWestOntario", 88), ("americas-Canada-CenTime-RainyRiver", 89), ("americas-Canada-CenTime-WestNunavut", 90), ("americas-Canada-CenStdTime-SaskatchewanMostlocation", 91), ("americas-Canada-CenStdTime-SaskatchewanMidwest", 92), ("americas-Canada-MountTime-AlbertaEastBritishColumbia", 93), ("americas-Canada-MountTime-CentralNorthwestTerritories", 94), ("americas-Canada-MountTime-WestNorthwestTerritories", 95), ("americas-Canada-MountStdTime-EastBritishColumbia", 96), ("americas-Canada-PacificTime-WestBritishColumbia", 97), ("americas-Canada-PacificTime-SouthYukon", 98), ("americas-Canada-PacificTime-NorthYukon", 99), ("americas-CaymanIslands", 100), ("americas-Chile-MostLocation", 101), ("americas-Chile-EasterIsland", 102), ("americas-Colombia", 103), ("americas-CostaRica", 104), ("americas-Cuba", 105), ("americas-Dominica", 106), ("americas-DominicanRepublic", 107), ("americas-Ecuador", 108), ("americas-ElSalvado", 109), ("americas-FrenchGuiana", 110), ("americas-Greenland-MostLocation", 111), ("americas-Greenland-EastCoastNorthScoresbysund", 112), ("americas-Greenland-ScoresbysundIttoqqortoormiit", 113), ("americas-Greenland-ThulePituffik", 114), ("americas-Grenada", 115), ("americas-Guadeloupe", 116), ("americas-Guatemala", 117), ("americas-Guyana", 118), ("americas-Haiti", 119), ("americas-Honduras", 120), ("americas-Jamaica", 121), ("americas-Martinique", 122), ("americas-Mexico-CentTime-Mostlocations", 123), ("americas-Mexico-CentTime-QuintanaRoo", 124), ("americas-Mexico-CentTime-CampecheYucatan", 125), ("americas-Mexico-CentTime-CoahDurangoNLTamaulipas", 126), ("americas-Mexico-MountTime-SBajaNayaritSinaloa", 127), ("americas-Mexico-MountTime-Chihuahua", 128), ("americas-Mexico-MountStdTime-Sonora", 129), ("americas-Mexico-PacificTime", 130), ("americas-Montserrat", 131), ("americas-NetherlandsAntilles", 132), ("americas-Nicaragua", 133), ("americas-Panama", 134), ("americas-Paraguay", 135), ("americas-Peru", 136), ("americas-PuertoRico", 137), ("americas-StKittsAndNevis", 138), ("americas-StLucia", 139), ("americas-StPierreAndMiquelon", 140), ("americas-StVincent", 141), ("americas-Suriname", 142), ("americas-TrinidadAndTobago", 143), ("americas-TurksAndCaicosIs", 144), ("americas-USA-EastTime", 145), ("americas-USA-EastTime-MichiganMostLocation", 146), ("americas-USA-EastTime-KentuckyLouisvilleArea", 147), ("americas-USA-EastTime-KentuckyWayneCounty", 148), ("americas-USA-EastStdTime-IndianaMostLocations", 149), ("americas-USA-EastStdTime-IndianaCrawfordCounty", 150), ("americas-USA-EastStdTime-IndianaStarkeCounty", 151), ("americas-USA-EastStdTime-IndianaSwitzerlandCounty", 152), ("americas-USA-CentTime", 153), ("americas-USA-CentTime-MichiganWisconsinborder", 154), ("americas-USA-CentTime-NorthDakotaOliverCounty", 155), ("americas-USA-MountTime", 156), ("americas-USA-MountTime-SouthIdahoAndEastOregon", 157), ("americas-USA-MountTime-Navajo", 158), ("americas-USA-MountStdTime-Arizona", 159), ("americas-USA-PacificTime", 160), ("americas-USA-AlaskaTime", 161), ("americas-USA-AlaskaTime-AlaskaPanhandle", 162), ("americas-USA-AlaskaTime-AlaskaPanhandleNeck", 163), ("americas-USA-AlaskaTime-WestAlaska", 164), ("americas-USA-AleutianIslands", 165), ("americas-USA-Hawaii", 166), ("americas-Uruguay", 167), ("americas-Venezuela", 168), ("americas-VirginIslands-UK", 169), ("americas-VirginIslands-US", 170), ("antarctica-McMurdoStationRossIsland", 171), ("antarctica-Amundsen-ScottStationSouthPole", 172), ("antarctica-PalmerStationAnversIsland", 173), ("antarctica-MawsonStationHolmeBay", 174), ("antarctica-DavisStationVestfoldHills", 175), ("antarctica-CaseyStationBaileyPeninsula", 176), ("antarctica-VostokStationSMagneticPole", 177), ("antarctica-Dumont-dUrvilleBaseTerreAdelie", 178), ("antarctica-SyowaStationEOngulI", 179), ("arcticOcean-Svalbard", 180), ("arcticOcean-JanMayen", 181), ("asia-Afghanistan", 182), ("asia-Armenia", 183), ("asia-Azerbaijan", 184), ("asia-Bahrain", 185), ("asia-Bangladesh", 186), ("asia-Bhutan", 187), ("asia-Brunei", 188), ("asia-Cambodia", 189), ("asia-China-EastChinaBeijingGuangdongShanghai", 190), ("asia-China-Heilongjiang", 191), ("asia-China-CentralChinaGansuGuizhouSichuanYunnan", 192), ("asia-China-TibetmostofXinjiangUyghur", 193), ("asia-China-SouthwestXinjiangUyghur", 194), ("asia-Cyprus", 195), ("asia-EastTimor", 196), ("asia-Georgia", 197), ("asia-HongKong", 198), ("asia-India", 199), ("asia-Indonesia-JavaAndSumatra", 200), ("asia-Indonesia-WestCentralBorneo", 201), ("asia-Indonesia-EastSouthBorneoBaliWestTimor", 202), ("asia-Indonesia-IrianJayaAndMoluccas", 203), ("asia-Iran", 204), ("asia-Iraq", 205), ("asia-Israel", 206), ("asia-Japan", 207), ("asia-Jordan", 208), ("asia-Kazakhstan-MostLocations", 209), ("asia-Kazakhstan-QyzylordaKyzylorda", 210), ("asia-Kazakhstan-Aqtobe", 211), ("asia-Kazakhstan-AtyrauMangghystau", 212), ("asia-Kazakhstan-WestKazakhstan", 213), ("asia-Korea-North", 214), ("asia-Korea-South", 215), ("asia-Kuwait", 216), ("asia-Kyrgyzstan", 217), ("asia-Laos", 218), ("asia-Lebanon", 219), ("asia-Macau", 220), ("asia-Malaysia-PeninsularMalaysia", 221), ("asia-Malaysia-SabahSarawak", 222), ("asia-Mongolia-MostLocations", 223), ("asia-Mongolia-BayanOlgiyGoviAltaiHovdUvsZavkhan", 224), ("asia-Mongolia-DornodSukhbaatar", 225), ("asia-Myanmar", 226), ("asia-Nepal", 227), ("asia-Oman", 228), ("asia-Pakistan", 229), ("asia-Palestine", 230), ("asia-Philippines", 231), ("asia-Qatar", 232), ("asia-Russia-Moscow-01Kaliningrad", 233), ("asia-Russia-Moscow00WestRussia", 234), ("asia-Russia-Moscow01CaspianSea", 235), ("asia-Russia-Moscow02Urals", 236), ("asia-Russia-Moscow03WestSiberia", 237), ("asia-Russia-Moscow03Novosibirsk", 238), ("asia-Russia-Moscow04YeniseiRiver", 239), ("asia-Russia-Moscow05LakeBaikal", 240), ("asia-Russia-Moscow06LenaRiver", 241), ("asia-Russia-Moscow07AmurRiver", 242), ("asia-Russia-Moscow07SakhalinIsland", 243), ("asia-Russia-Moscow08Magadan", 244), ("asia-Russia-Moscow09Kamchatka", 245), ("asia-Russia-Moscow10BeringSea", 246), ("asia-SaudiArabia", 247), ("asia-Singapore", 248), ("asia-SriLanka", 249), ("asia-Syria", 250), ("asia-Taiwan", 251), ("asia-Tajikistan", 252), ("asia-Thailand", 253), ("asia-Turkmenistan", 254)) + NamedValues(("asia-UnitedArabEmirates", 255), ("asia-Uzbekistan-WestUzbekistan", 256), ("asia-Uzbekistan-EastUzbekistan", 257), ("asia-Vietnam", 258), ("asia-Yemen", 259), ("atlanticOcean-Bermuda", 260), ("atlanticOcean-CapeVerde", 261), ("atlanticOcean-FaeroeIslands", 262), ("atlanticOcean-FalklandIslands", 263), ("atlanticOcean-Iceland", 264), ("atlanticOcean-Portugal-Mainland", 265), ("atlanticOcean-Portugal-MadeiraIslands", 266), ("atlanticOcean-Portugal-Azores", 267), ("atlanticOcean-SouthGeorgia-SouthSandwichIslands", 268), ("atlanticOcean-Spain-Mainland", 269), ("atlanticOcean-Spain-CeutaMelilla", 270), ("atlanticOcean-Spain-CanaryIslands", 271), ("atlanticOcean-StHelena", 272), ("atlanticOcean-Svalbard-JanMayen", 273), ("australia-LordHoweIsland", 274), ("australia-Tasmania", 275), ("australia-Victoria", 276), ("australia-NewSouthWales-MostLocations", 277), ("australia-NewSouthWales-Yancowinna", 278), ("australia-Queensland-MostLocations", 279), ("australia-Queensland-HolidayIslands", 280), ("australia-SouthAustralia", 281), ("australia-NorthernTerritory", 282), ("australia-WesternAustralia", 283), ("europe-Albania", 284), ("europe-Andorra", 285), ("europe-Austria", 286), ("europe-Belarus", 287), ("europe-Belgium", 288), ("europe-BosniaHerzegovina", 289), ("europe-Britain-UKGreatBritain", 290), ("europe-Britain-UKNorthernIreland", 291), ("europe-Bulgaria", 292), ("europe-Croatia", 293), ("europe-CzechRepublic", 294), ("europe-Denmark", 295), ("europe-Estonia", 296), ("europe-Finland", 297), ("europe-France", 298), ("europe-Germany", 299), ("europe-Gibraltar", 300), ("europe-Greece", 301), ("europe-Hungary", 302), ("europe-Ireland", 303), ("europe-Italy", 304), ("europe-Latvia", 305), ("europe-Liechtenstein", 306), ("europe-Lithuania", 307), ("europe-Luxembourg", 308), ("europe-Macedonia", 309), ("europe-Malta", 310), ("europe-Moldova", 311), ("europe-Monaco", 312), ("europe-Netherlands", 313), ("europe-Norway", 314), ("europe-Poland", 315), ("europe-Portugal-Mainland", 316), ("europe-Portugal-MadeiraIslands", 317), ("europe-Portugal-Azores", 318), ("europe-Romania", 319), ("europe-Russia-Moscow-01Kaliningrad", 320), ("europe-Russia-Moscow00WestRussia", 321), ("europe-Russia-Moscow01CaspianSea", 322), ("europe-Russia-Moscow02Urals", 323), ("europe-Russia-Moscow03WestSiberia", 324), ("europe-Russia-Moscow03Novosibirsk", 325), ("europe-Russia-Moscow04YeniseiRiver", 326), ("europe-Russia-Moscow05LakeBaikal", 327), ("europe-Russia-Moscow06LenaRiver", 328), ("europe-Russia-Moscow07AmurRiver", 329), ("europe-Russia-Moscow07SakhalinIsland", 330), ("europe-Russia-Moscow08Magadan", 331), ("europe-Russia-Moscow09Kamchatka", 332), ("europe-Russia-Moscow10BeringSea", 333), ("europe-SanMarino", 334), ("europe-Slovakia", 335), ("europe-Slovenia", 336), ("europe-Spain-Mainland", 337), ("europe-Spain-CeutaAndMelilla", 338), ("europe-Spain-CanaryIslands", 339), ("europe-Sweden", 340), ("europe-Switzerland", 341), ("europe-Turkey", 342), ("europe-Ukraine-MostLocations", 343), ("europe-Ukraine-Ruthenia", 344), ("europe-Ukraine-Zaporozhye-ELugansk", 345), ("europe-Ukraine-CentralCrimea", 346), ("europe-VaticanCity", 347), ("europe-Yugoslavia", 348), ("indianOcean-BritishIndianOceanTerritory", 349), ("indianOcean-ChristmasIsland", 350), ("indianOcean-CocosOrKeelingIslands", 351), ("indianOcean-Comoros", 352), ("indianOcean-FrenchSouthernAndAntarcticLands", 353), ("indianOcean-Madagascar", 354), ("indianOcean-Maldives", 355), ("indianOcean-Mauritius", 356), ("indianOcean-Mayotte", 357), ("indianOcean-Reunion", 358), ("indianOcean-Seychelles", 359), ("pacificOcean-Chile-MostLocations", 360), ("pacificOcean-Chile-EasterIslandSalayGomez", 361), ("pacificOcean-CookIslands", 362), ("pacificOcean-Ecuador", 363), ("pacificOcean-Fiji", 364), ("pacificOcean-FrenchPolynesia-SocietyIslands", 365), ("pacificOcean-FrenchPolynesia-MarquesasIslands", 366), ("pacificOcean-FrenchPolynesia-GambierIslands", 367), ("pacificOcean-Guam", 368), ("pacificOcean-Kiribati-GilbertIslands", 369), ("pacificOcean-Kiribati-PhoenixIslands", 370), ("pacificOcean-Kiribati-LineIslands", 371), ("pacificOcean-MarshallIslands-MostLocations", 372), ("pacificOcean-MarshallIslands-Kwajalein", 373), ("pacificOcean-Micronesia-Yap", 374), ("pacificOcean-Micronesia-TrukOrChuuk", 375), ("pacificOcean-Micronesia-PonapeOrPohnpei", 376), ("pacificOcean-Micronesia-Kosrae", 377), ("pacificOcean-Nauru", 378), ("pacificOcean-NewCaledonia", 379), ("pacificOcean-NewZealand-MostLocations", 380), ("pacificOcean-NewZealand-ChathamIslands", 381), ("pacificOcean-Niue", 382), ("pacificOcean-NorfolkIsland", 383), ("pacificOcean-NorthernMarianaIslands", 384), ("pacificOcean-Palau", 385), ("pacificOcean-PapuaNewGuinea", 386), ("pacificOcean-Pitcairn", 387), ("pacificOcean-SamoaAmerican", 388), ("pacificOcean-SamoaWestern", 389), ("pacificOcean-SolomonIslands", 390), ("pacificOcean-Tokelau", 391), ("pacificOcean-Tonga", 392), ("pacificOcean-Tuvalu", 393), ("pacificOceanUSA-EastTime", 394), ("pacificOceanUSA-EastTime-MichiganMostLocations", 395), ("pacificOceanUSA-EastTime-KentuckyLouisvilleArea", 396), ("pacificOceanUSA-EastTime-KentuckyWayneCounty", 397), ("pacificOceanUSA-EastStdTime-IndianaMostLocations", 398), ("pacificOceanUSA-EastStdTime-IndianaCrawfordCounty", 399), ("pacificOceanUSA-EastStdTime-IndianaStarkeCounty", 400), ("pacificOceanUSA-EastStdTime-IndianaSwitzerlandCounty", 401), ("pacificOceanUSA-CentTime", 402), ("pacificOceanUSA-CentTime-MichiganWisconsinborder", 403), ("pacificOceanUSA-CentTime-NorthDakotaOliverCounty", 404), ("pacificOceanUSA-MountTime", 405), ("pacificOceanUSA-MountTime-SouthIdahoAndEastOregon", 406), ("pacificOceanUSA-MountTime-Navajo", 407), ("pacificOceanUSA-MountStdTime-Arizona", 408), ("pacificOceanUSA-PacificTime", 409), ("pacificOceanUSA-AlaskaTime", 410), ("pacificOceanUSA-AlaskaTime-AlaskaPanhandle", 411), ("pacificOceanUSA-AlaskaTime-AlaskaPanhandleNeck", 412), ("pacificOceanUSA-AlaskaTime-WestAlaska", 413), ("pacificOceanUSA-AleutianIslands", 414), ("pacificOceanUSA-Hawaii", 415), ("pacificOcean-USMinorOutlyingIslands-JohnstonAtoll", 416), ("pacificOcean-USMinorOutlyingIslands-MidwayIslands", 417), ("pacificOcean-USMinorOutlyingIslands-WakeIsland", 418), ("pacificOcean-Vanuatu", 419), ("pacificOcean-WallisAndFutuna", 420)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurDaylightSavings.setStatus('current')
if mibBuilder.loadTexts: agCurDaylightSavings.setDescription('The daylight savings location. Note: Locations are alphabetically ordered and the corresponding code is not reflected in CLI.')
agNewDaylightSavings = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254), SingleValueConstraint(255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420))).clone(namedValues=NamedValues(("none", 0), ("africa-Algeria", 1), ("africa-Angola", 2), ("africa-Benin", 3), ("africa-Botswana", 4), ("africa-Burkina-Faso", 5), ("africa-Burundi", 6), ("africa-Cameroon", 7), ("africa-Central-African-Rep", 8), ("africa-Chad", 9), ("africa-Congo-WestDemRepCongo", 10), ("africa-Congo-EastDemRepCongo", 11), ("africa-Congo-Rep", 12), ("africa-Cote-dIvoire", 13), ("africa-Djibouti", 14), ("africa-Egypt", 15), ("africa-Equatorial-Guinea", 16), ("africa-Eritrea", 17), ("africa-Ethiopia", 18), ("africa-Gabon", 19), ("africa-Gambia", 20), ("africa-Ghana", 21), ("africa-Guinea", 22), ("africa-Guinea-Bissau", 23), ("africa-Kenya", 24), ("africa-Lesotho", 25), ("africa-Liberia", 26), ("africa-Libya", 27), ("africa-Malawi", 28), ("africa-Mali-SouthWestMali", 29), ("africa-Mali-NorthEastMali", 30), ("africa-Mauritania", 31), ("africa-Morocco", 32), ("africa-Mozambique", 33), ("africa-Namibia", 34), ("africa-Niger", 35), ("africa-Nigeria", 36), ("africa-Rwanda", 37), ("africa-SaoTome-And-Principe", 38), ("africa-Senegal", 39), ("africa-SierraLeone", 40), ("africa-Somalia", 41), ("africa-SouthAfrica", 42), ("africa-Spain-Mainland", 43), ("africa-Spain-CeutaMelilla", 44), ("africa-Spain-CanaryIslands", 45), ("africa-Sudan", 46), ("africa-Swaziland", 47), ("africa-Tanzania", 48), ("africa-Togo", 49), ("africa-Tunisia", 50), ("africa-Uganda", 51), ("africa-Western-Sahara", 52), ("africa-Zambia", 53), ("africa-Zimbabwe", 54), ("americas-Anguilla", 55), ("americas-Antigua-Barbuda", 56), ("americas-Argentina-EArgentina", 57), ("americas-Argentina-MostLocations", 58), ("americas-Argentina-Jujuy", 59), ("americas-Argentina-Catamarca", 60), ("americas-Argentina-Mendoza", 61), ("americas-Aruba", 62), ("americas-Bahamas", 63), ("americas-Barbados", 64), ("americas-Belize", 65), ("americas-Bolivia", 66), ("americas-Brazil-AtlanticIslands", 67), ("americas-Brazil-AmapaEPara", 68), ("americas-Brazil-NEBrazil", 69), ("americas-Brazil-Pernambuco", 70), ("americas-Brazil-Tocantins", 71), ("americas-Brazil-AlagoasSergipe", 72), ("americas-Brazil-SSEBrazil", 73), ("americas-Brazil-MatoGrossoDoSul", 74), ("americas-Brazil-WParaRondonia", 75), ("americas-Brazil-Roraima", 76), ("americas-Brazil-EAmazonas", 77), ("americas-Brazil-WAmazonas", 78), ("americas-Brazil-Acre", 79), ("americas-Canada-NewfoundlandIsland", 80), ("americas-Canada-AtlanTime-NovaScotia", 81), ("americas-Canada-AtlanTime-ELabrador", 82), ("americas-Canada-EastTime-OntarioMostlocation", 83), ("americas-Canada-EastTime-ThunderBay", 84), ("americas-Canada-EastStdTime-PangnirtungNunavut", 85), ("americas-Canada-EastStdTime-EastNunavut", 86), ("americas-Canada-EastStdTime-CenNunavut", 87), ("americas-Canada-CenTime-ManitobaWestOntario", 88), ("americas-Canada-CenTime-RainyRiver", 89), ("americas-Canada-CenTime-WestNunavut", 90), ("americas-Canada-CenStdTime-SaskatchewanMostlocation", 91), ("americas-Canada-CenStdTime-SaskatchewanMidwest", 92), ("americas-Canada-MountTime-AlbertaEastBritishColumbia", 93), ("americas-Canada-MountTime-CentralNorthwestTerritories", 94), ("americas-Canada-MountTime-WestNorthwestTerritories", 95), ("americas-Canada-MountStdTime-EastBritishColumbia", 96), ("americas-Canada-PacificTime-WestBritishColumbia", 97), ("americas-Canada-PacificTime-SouthYukon", 98), ("americas-Canada-PacificTime-NorthYukon", 99), ("americas-CaymanIslands", 100), ("americas-Chile-MostLocation", 101), ("americas-Chile-EasterIsland", 102), ("americas-Colombia", 103), ("americas-CostaRica", 104), ("americas-Cuba", 105), ("americas-Dominica", 106), ("americas-DominicanRepublic", 107), ("americas-Ecuador", 108), ("americas-ElSalvado", 109), ("americas-FrenchGuiana", 110), ("americas-Greenland-MostLocation", 111), ("americas-Greenland-EastCoastNorthScoresbysund", 112), ("americas-Greenland-ScoresbysundIttoqqortoormiit", 113), ("americas-Greenland-ThulePituffik", 114), ("americas-Grenada", 115), ("americas-Guadeloupe", 116), ("americas-Guatemala", 117), ("americas-Guyana", 118), ("americas-Haiti", 119), ("americas-Honduras", 120), ("americas-Jamaica", 121), ("americas-Martinique", 122), ("americas-Mexico-CentTime-Mostlocations", 123), ("americas-Mexico-CentTime-QuintanaRoo", 124), ("americas-Mexico-CentTime-CampecheYucatan", 125), ("americas-Mexico-CentTime-CoahDurangoNLTamaulipas", 126), ("americas-Mexico-MountTime-SBajaNayaritSinaloa", 127), ("americas-Mexico-MountTime-Chihuahua", 128), ("americas-Mexico-MountStdTime-Sonora", 129), ("americas-Mexico-PacificTime", 130), ("americas-Montserrat", 131), ("americas-NetherlandsAntilles", 132), ("americas-Nicaragua", 133), ("americas-Panama", 134), ("americas-Paraguay", 135), ("americas-Peru", 136), ("americas-PuertoRico", 137), ("americas-StKittsAndNevis", 138), ("americas-StLucia", 139), ("americas-StPierreAndMiquelon", 140), ("americas-StVincent", 141), ("americas-Suriname", 142), ("americas-TrinidadAndTobago", 143), ("americas-TurksAndCaicosIs", 144), ("americas-USA-EastTime", 145), ("americas-USA-EastTime-MichiganMostLocation", 146), ("americas-USA-EastTime-KentuckyLouisvilleArea", 147), ("americas-USA-EastTime-KentuckyWayneCounty", 148), ("americas-USA-EastStdTime-IndianaMostLocations", 149), ("americas-USA-EastStdTime-IndianaCrawfordCounty", 150), ("americas-USA-EastStdTime-IndianaStarkeCounty", 151), ("americas-USA-EastStdTime-IndianaSwitzerlandCounty", 152), ("americas-USA-CentTime", 153), ("americas-USA-CentTime-MichiganWisconsinborder", 154), ("americas-USA-CentTime-NorthDakotaOliverCounty", 155), ("americas-USA-MountTime", 156), ("americas-USA-MountTime-SouthIdahoAndEastOregon", 157), ("americas-USA-MountTime-Navajo", 158), ("americas-USA-MountStdTime-Arizona", 159), ("americas-USA-PacificTime", 160), ("americas-USA-AlaskaTime", 161), ("americas-USA-AlaskaTime-AlaskaPanhandle", 162), ("americas-USA-AlaskaTime-AlaskaPanhandleNeck", 163), ("americas-USA-AlaskaTime-WestAlaska", 164), ("americas-USA-AleutianIslands", 165), ("americas-USA-Hawaii", 166), ("americas-Uruguay", 167), ("americas-Venezuela", 168), ("americas-VirginIslands-UK", 169), ("americas-VirginIslands-US", 170), ("antarctica-McMurdoStationRossIsland", 171), ("antarctica-Amundsen-ScottStationSouthPole", 172), ("antarctica-PalmerStationAnversIsland", 173), ("antarctica-MawsonStationHolmeBay", 174), ("antarctica-DavisStationVestfoldHills", 175), ("antarctica-CaseyStationBaileyPeninsula", 176), ("antarctica-VostokStationSMagneticPole", 177), ("antarctica-Dumont-dUrvilleBaseTerreAdelie", 178), ("antarctica-SyowaStationEOngulI", 179), ("arcticOcean-Svalbard", 180), ("arcticOcean-JanMayen", 181), ("asia-Afghanistan", 182), ("asia-Armenia", 183), ("asia-Azerbaijan", 184), ("asia-Bahrain", 185), ("asia-Bangladesh", 186), ("asia-Bhutan", 187), ("asia-Brunei", 188), ("asia-Cambodia", 189), ("asia-China-EastChinaBeijingGuangdongShanghai", 190), ("asia-China-Heilongjiang", 191), ("asia-China-CentralChinaGansuGuizhouSichuanYunnan", 192), ("asia-China-TibetmostofXinjiangUyghur", 193), ("asia-China-SouthwestXinjiangUyghur", 194), ("asia-Cyprus", 195), ("asia-EastTimor", 196), ("asia-Georgia", 197), ("asia-HongKong", 198), ("asia-India", 199), ("asia-Indonesia-JavaAndSumatra", 200), ("asia-Indonesia-WestCentralBorneo", 201), ("asia-Indonesia-EastSouthBorneoBaliWestTimor", 202), ("asia-Indonesia-IrianJayaAndMoluccas", 203), ("asia-Iran", 204), ("asia-Iraq", 205), ("asia-Israel", 206), ("asia-Japan", 207), ("asia-Jordan", 208), ("asia-Kazakhstan-MostLocations", 209), ("asia-Kazakhstan-QyzylordaKyzylorda", 210), ("asia-Kazakhstan-Aqtobe", 211), ("asia-Kazakhstan-AtyrauMangghystau", 212), ("asia-Kazakhstan-WestKazakhstan", 213), ("asia-Korea-North", 214), ("asia-Korea-South", 215), ("asia-Kuwait", 216), ("asia-Kyrgyzstan", 217), ("asia-Laos", 218), ("asia-Lebanon", 219), ("asia-Macau", 220), ("asia-Malaysia-PeninsularMalaysia", 221), ("asia-Malaysia-SabahSarawak", 222), ("asia-Mongolia-MostLocations", 223), ("asia-Mongolia-BayanOlgiyGoviAltaiHovdUvsZavkhan", 224), ("asia-Mongolia-DornodSukhbaatar", 225), ("asia-Myanmar", 226), ("asia-Nepal", 227), ("asia-Oman", 228), ("asia-Pakistan", 229), ("asia-Palestine", 230), ("asia-Philippines", 231), ("asia-Qatar", 232), ("asia-Russia-Moscow-01Kaliningrad", 233), ("asia-Russia-Moscow00WestRussia", 234), ("asia-Russia-Moscow01CaspianSea", 235), ("asia-Russia-Moscow02Urals", 236), ("asia-Russia-Moscow03WestSiberia", 237), ("asia-Russia-Moscow03Novosibirsk", 238), ("asia-Russia-Moscow04YeniseiRiver", 239), ("asia-Russia-Moscow05LakeBaikal", 240), ("asia-Russia-Moscow06LenaRiver", 241), ("asia-Russia-Moscow07AmurRiver", 242), ("asia-Russia-Moscow07SakhalinIsland", 243), ("asia-Russia-Moscow08Magadan", 244), ("asia-Russia-Moscow09Kamchatka", 245), ("asia-Russia-Moscow10BeringSea", 246), ("asia-SaudiArabia", 247), ("asia-Singapore", 248), ("asia-SriLanka", 249), ("asia-Syria", 250), ("asia-Taiwan", 251), ("asia-Tajikistan", 252), ("asia-Thailand", 253), ("asia-Turkmenistan", 254)) + NamedValues(("asia-UnitedArabEmirates", 255), ("asia-Uzbekistan-WestUzbekistan", 256), ("asia-Uzbekistan-EastUzbekistan", 257), ("asia-Vietnam", 258), ("asia-Yemen", 259), ("atlanticOcean-Bermuda", 260), ("atlanticOcean-CapeVerde", 261), ("atlanticOcean-FaeroeIslands", 262), ("atlanticOcean-FalklandIslands", 263), ("atlanticOcean-Iceland", 264), ("atlanticOcean-Portugal-Mainland", 265), ("atlanticOcean-Portugal-MadeiraIslands", 266), ("atlanticOcean-Portugal-Azores", 267), ("atlanticOcean-SouthGeorgia-SouthSandwichIslands", 268), ("atlanticOcean-Spain-Mainland", 269), ("atlanticOcean-Spain-CeutaMelilla", 270), ("atlanticOcean-Spain-CanaryIslands", 271), ("atlanticOcean-StHelena", 272), ("atlanticOcean-Svalbard-JanMayen", 273), ("australia-LordHoweIsland", 274), ("australia-Tasmania", 275), ("australia-Victoria", 276), ("australia-NewSouthWales-MostLocations", 277), ("australia-NewSouthWales-Yancowinna", 278), ("australia-Queensland-MostLocations", 279), ("australia-Queensland-HolidayIslands", 280), ("australia-SouthAustralia", 281), ("australia-NorthernTerritory", 282), ("australia-WesternAustralia", 283), ("europe-Albania", 284), ("europe-Andorra", 285), ("europe-Austria", 286), ("europe-Belarus", 287), ("europe-Belgium", 288), ("europe-BosniaHerzegovina", 289), ("europe-Britain-UKGreatBritain", 290), ("europe-Britain-UKNorthernIreland", 291), ("europe-Bulgaria", 292), ("europe-Croatia", 293), ("europe-CzechRepublic", 294), ("europe-Denmark", 295), ("europe-Estonia", 296), ("europe-Finland", 297), ("europe-France", 298), ("europe-Germany", 299), ("europe-Gibraltar", 300), ("europe-Greece", 301), ("europe-Hungary", 302), ("europe-Ireland", 303), ("europe-Italy", 304), ("europe-Latvia", 305), ("europe-Liechtenstein", 306), ("europe-Lithuania", 307), ("europe-Luxembourg", 308), ("europe-Macedonia", 309), ("europe-Malta", 310), ("europe-Moldova", 311), ("europe-Monaco", 312), ("europe-Netherlands", 313), ("europe-Norway", 314), ("europe-Poland", 315), ("europe-Portugal-Mainland", 316), ("europe-Portugal-MadeiraIslands", 317), ("europe-Portugal-Azores", 318), ("europe-Romania", 319), ("europe-Russia-Moscow-01Kaliningrad", 320), ("europe-Russia-Moscow00WestRussia", 321), ("europe-Russia-Moscow01CaspianSea", 322), ("europe-Russia-Moscow02Urals", 323), ("europe-Russia-Moscow03WestSiberia", 324), ("europe-Russia-Moscow03Novosibirsk", 325), ("europe-Russia-Moscow04YeniseiRiver", 326), ("europe-Russia-Moscow05LakeBaikal", 327), ("europe-Russia-Moscow06LenaRiver", 328), ("europe-Russia-Moscow07AmurRiver", 329), ("europe-Russia-Moscow07SakhalinIsland", 330), ("europe-Russia-Moscow08Magadan", 331), ("europe-Russia-Moscow09Kamchatka", 332), ("europe-Russia-Moscow10BeringSea", 333), ("europe-SanMarino", 334), ("europe-Slovakia", 335), ("europe-Slovenia", 336), ("europe-Spain-Mainland", 337), ("europe-Spain-CeutaAndMelilla", 338), ("europe-Spain-CanaryIslands", 339), ("europe-Sweden", 340), ("europe-Switzerland", 341), ("europe-Turkey", 342), ("europe-Ukraine-MostLocations", 343), ("europe-Ukraine-Ruthenia", 344), ("europe-Ukraine-Zaporozhye-ELugansk", 345), ("europe-Ukraine-CentralCrimea", 346), ("europe-VaticanCity", 347), ("europe-Yugoslavia", 348), ("indianOcean-BritishIndianOceanTerritory", 349), ("indianOcean-ChristmasIsland", 350), ("indianOcean-CocosOrKeelingIslands", 351), ("indianOcean-Comoros", 352), ("indianOcean-FrenchSouthernAndAntarcticLands", 353), ("indianOcean-Madagascar", 354), ("indianOcean-Maldives", 355), ("indianOcean-Mauritius", 356), ("indianOcean-Mayotte", 357), ("indianOcean-Reunion", 358), ("indianOcean-Seychelles", 359), ("pacificOcean-Chile-MostLocations", 360), ("pacificOcean-Chile-EasterIslandSalayGomez", 361), ("pacificOcean-CookIslands", 362), ("pacificOcean-Ecuador", 363), ("pacificOcean-Fiji", 364), ("pacificOcean-FrenchPolynesia-SocietyIslands", 365), ("pacificOcean-FrenchPolynesia-MarquesasIslands", 366), ("pacificOcean-FrenchPolynesia-GambierIslands", 367), ("pacificOcean-Guam", 368), ("pacificOcean-Kiribati-GilbertIslands", 369), ("pacificOcean-Kiribati-PhoenixIslands", 370), ("pacificOcean-Kiribati-LineIslands", 371), ("pacificOcean-MarshallIslands-MostLocations", 372), ("pacificOcean-MarshallIslands-Kwajalein", 373), ("pacificOcean-Micronesia-Yap", 374), ("pacificOcean-Micronesia-TrukOrChuuk", 375), ("pacificOcean-Micronesia-PonapeOrPohnpei", 376), ("pacificOcean-Micronesia-Kosrae", 377), ("pacificOcean-Nauru", 378), ("pacificOcean-NewCaledonia", 379), ("pacificOcean-NewZealand-MostLocations", 380), ("pacificOcean-NewZealand-ChathamIslands", 381), ("pacificOcean-Niue", 382), ("pacificOcean-NorfolkIsland", 383), ("pacificOcean-NorthernMarianaIslands", 384), ("pacificOcean-Palau", 385), ("pacificOcean-PapuaNewGuinea", 386), ("pacificOcean-Pitcairn", 387), ("pacificOcean-SamoaAmerican", 388), ("pacificOcean-SamoaWestern", 389), ("pacificOcean-SolomonIslands", 390), ("pacificOcean-Tokelau", 391), ("pacificOcean-Tonga", 392), ("pacificOcean-Tuvalu", 393), ("pacificOceanUSA-EastTime", 394), ("pacificOceanUSA-EastTime-MichiganMostLocations", 395), ("pacificOceanUSA-EastTime-KentuckyLouisvilleArea", 396), ("pacificOceanUSA-EastTime-KentuckyWayneCounty", 397), ("pacificOceanUSA-EastStdTime-IndianaMostLocations", 398), ("pacificOceanUSA-EastStdTime-IndianaCrawfordCounty", 399), ("pacificOceanUSA-EastStdTime-IndianaStarkeCounty", 400), ("pacificOceanUSA-EastStdTime-IndianaSwitzerlandCounty", 401), ("pacificOceanUSA-CentTime", 402), ("pacificOceanUSA-CentTime-MichiganWisconsinborder", 403), ("pacificOceanUSA-CentTime-NorthDakotaOliverCounty", 404), ("pacificOceanUSA-MountTime", 405), ("pacificOceanUSA-MountTime-SouthIdahoAndEastOregon", 406), ("pacificOceanUSA-MountTime-Navajo", 407), ("pacificOceanUSA-MountStdTime-Arizona", 408), ("pacificOceanUSA-PacificTime", 409), ("pacificOceanUSA-AlaskaTime", 410), ("pacificOceanUSA-AlaskaTime-AlaskaPanhandle", 411), ("pacificOceanUSA-AlaskaTime-AlaskaPanhandleNeck", 412), ("pacificOceanUSA-AlaskaTime-WestAlaska", 413), ("pacificOceanUSA-AleutianIslands", 414), ("pacificOceanUSA-Hawaii", 415), ("pacificOcean-USMinorOutlyingIslands-JohnstonAtoll", 416), ("pacificOcean-USMinorOutlyingIslands-MidwayIslands", 417), ("pacificOcean-USMinorOutlyingIslands-WakeIsland", 418), ("pacificOcean-Vanuatu", 419), ("pacificOceanWallisAndFutuna", 420)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewDaylightSavings.setStatus('current')
if mibBuilder.loadTexts: agNewDaylightSavings.setDescription('The daylight savings location. Note: Locations are alphabetically ordered and the corresponding code is not reflected in CLI.')
agCurCfgSysDlight = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSysDlight.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSysDlight.setDescription('Current daylight savings time status.')
agNewCfgSysDlight = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSysDlight.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSysDlight.setDescription('Enable/disable daylight savings time.')
agCurCfgIdleCLITimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgIdleCLITimeout.setStatus('current')
if mibBuilder.loadTexts: agCurCfgIdleCLITimeout.setDescription('Set idle CLI sessions timeout.')
agNewCfgIdleCLITimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgIdleCLITimeout.setStatus('current')
if mibBuilder.loadTexts: agNewCfgIdleCLITimeout.setDescription('Set idle CLI sessions timeout.')
agCurCfgUfdTrap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgUfdTrap.setStatus('current')
if mibBuilder.loadTexts: agCurCfgUfdTrap.setDescription('The current status of the UFDFO SNMP trap.')
agNewCfgUfdTrap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgUfdTrap.setStatus('current')
if mibBuilder.loadTexts: agNewCfgUfdTrap.setDescription('Enable or disable sending UFDFO SNMP trap.')
agCurCfgReminders = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgReminders.setStatus('current')
if mibBuilder.loadTexts: agCurCfgReminders.setDescription('Current status of reminders feature.')
agNewCfgReminders = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgReminders.setStatus('current')
if mibBuilder.loadTexts: agNewCfgReminders.setDescription('Enable or disable reminders feature.')
agCurBootNxtCliMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bladeos-cli", 1), ("iscli", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurBootNxtCliMode.setStatus('current')
if mibBuilder.loadTexts: agCurBootNxtCliMode.setDescription('Current boot mode.')
agNewBootNxtCliMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bladeos-cli", 1), ("iscli", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewBootNxtCliMode.setStatus('current')
if mibBuilder.loadTexts: agNewBootNxtCliMode.setDescription('Next cli boot mode.')
agCurBootNxtCliModePrompt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurBootNxtCliModePrompt.setStatus('current')
if mibBuilder.loadTexts: agCurBootNxtCliModePrompt.setDescription('Current status of selectable CLI mode prompt.')
agNewBootNxtCliModePrompt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 79), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewBootNxtCliModePrompt.setStatus('current')
if mibBuilder.loadTexts: agNewBootNxtCliModePrompt.setDescription('Next status of selectable CLI mode prompt.')
agCurCfgDhcp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgDhcp.setStatus('current')
if mibBuilder.loadTexts: agCurCfgDhcp.setDescription('Enable or disable the use of DHCP, as currently configured in the current_configuration block.')
agNewCfgDhcp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgDhcp.setStatus('current')
if mibBuilder.loadTexts: agNewCfgDhcp.setDescription('Enable or disable the use of DHCP, in the new_configuration block.')
agCfgL3Status = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCfgL3Status.setStatus('current')
if mibBuilder.loadTexts: agCfgL3Status.setDescription('The current status of L3 feature.')
agCurCfgHprompt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 73), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgHprompt.setStatus('current')
if mibBuilder.loadTexts: agCurCfgHprompt.setDescription('Current status of hprompt.')
agNewCfgHprompt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgHprompt.setStatus('current')
if mibBuilder.loadTexts: agNewCfgHprompt.setDescription('New status of hpprompt.')
agCurCfgLoginNotice = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 76), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgLoginNotice.setStatus('current')
if mibBuilder.loadTexts: agCurCfgLoginNotice.setDescription('The user defined login notice.')
agNewCfgLoginNotice = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 77), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgLoginNotice.setStatus('current')
if mibBuilder.loadTexts: agNewCfgLoginNotice.setDescription('The user defined login notice.')
agCurCfgOldDst = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 82), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgOldDst.setStatus('current')
if mibBuilder.loadTexts: agCurCfgOldDst.setDescription('Enable or disable system DST for US.')
agNewCfgOldDst = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 83), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgOldDst.setStatus('current')
if mibBuilder.loadTexts: agNewCfgOldDst.setDescription('Enable or disable system DST for US.')
agHavePanicDump = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 91), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("havePanic", 1), ("noHavePanic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agHavePanicDump.setStatus('current')
if mibBuilder.loadTexts: agHavePanicDump.setDescription('This object, when read, gives the user the information whether a panic dump exist in flash.')
agCurHttpAcces = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 92), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurHttpAcces.setStatus('current')
if mibBuilder.loadTexts: agCurHttpAcces.setDescription('Current HTTP server access state.')
agNewHttpAcces = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 93), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewHttpAcces.setStatus('current')
if mibBuilder.loadTexts: agNewHttpAcces.setDescription('New HTTP server acces state.')
agCurCfgHttpsServerAccess = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 94), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgHttpsServerAccess.setStatus('current')
if mibBuilder.loadTexts: agCurCfgHttpsServerAccess.setDescription('Current HTTPS server access state.')
agNewCfgHttpsServerAccess = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 95), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgHttpsServerAccess.setStatus('current')
if mibBuilder.loadTexts: agNewCfgHttpsServerAccess.setDescription('Enable/disable HTTPS server access.')
agCurCfgTelnetAccess = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 96), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgTelnetAccess.setStatus('current')
if mibBuilder.loadTexts: agCurCfgTelnetAccess.setDescription('Current telnet access state.')
agNewCfgTelnetAccess = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 97), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgTelnetAccess.setStatus('current')
if mibBuilder.loadTexts: agNewCfgTelnetAccess.setDescription('Enable/disable telnet access.')
agCurCfgResetControl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 102), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgResetControl.setStatus('current')
if mibBuilder.loadTexts: agCurCfgResetControl.setDescription('Current reset control state.')
agNewCfgResetControl = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 1, 103), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgResetControl.setStatus('current')
if mibBuilder.loadTexts: agNewCfgResetControl.setDescription('Enable/disable reset control after panic.')
agCurCfgSyslogHost = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogHost.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogHost.setDescription('The syslog host IP address, as currently configured in the current_configuration block.')
agNewCfgSyslogHost = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogHost.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogHost.setDescription('The syslog host IP address, in the new_configuration block.')
agCurCfgSyslog2Host = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslog2Host.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslog2Host.setDescription('The second syslog host IP address, as currently configured in the current_configuration block.')
agNewCfgSyslog2Host = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslog2Host.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslog2Host.setDescription('The second syslog host IP address, in the new_configuration block.')
agCurCfgSyslogFac = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogFac.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogFac.setDescription('The facility of syslog host in the current_configuration block.')
agNewCfgSyslogFac = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogFac.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogFac.setDescription('The facility of syslog host in the new_configuration block.')
agCurCfgSyslog2Fac = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslog2Fac.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslog2Fac.setDescription('The facility of syslog2 host in the current_configuration block.')
agNewCfgSyslog2Fac = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslog2Fac.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslog2Fac.setDescription('The facility of syslogs host in the new_configuration block.')
agCurCfgSyslogSev = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emerg0", 1), ("alert1", 2), ("crit2", 3), ("err3", 4), ("warning4", 5), ("notice5", 6), ("info6", 7), ("debug7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogSev.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogSev.setDescription('The severity of syslog host in the current configuration block.')
agNewCfgSyslogSev = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emerg0", 1), ("alert1", 2), ("crit2", 3), ("err3", 4), ("warning4", 5), ("notice5", 6), ("info6", 7), ("debug7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogSev.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogSev.setDescription('The severity of syslog host in the new configuration block.')
agCurCfgSyslog2Sev = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emerg0", 1), ("alert1", 2), ("crit2", 3), ("err3", 4), ("warning4", 5), ("notice5", 6), ("info6", 7), ("debug7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslog2Sev.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslog2Sev.setDescription('The severity of syslog2 host in the current configuration block.')
agNewCfgSyslog2Sev = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emerg0", 1), ("alert1", 2), ("crit2", 3), ("err3", 4), ("warning4", 5), ("notice5", 6), ("info6", 7), ("debug7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslog2Sev.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslog2Sev.setDescription('The severity of syslogs host in the new configuration block.')
agClrSyslogMsgs = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agClrSyslogMsgs.setStatus('current')
if mibBuilder.loadTexts: agClrSyslogMsgs.setDescription('Clears all current Syslog messages.')
agSyslogMsgTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSyslogMsgTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: agSyslogMsgTableMaxSize.setDescription('The maximum number of rows in the syslog message table.')
agSyslogMsgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 11), )
if mibBuilder.loadTexts: agSyslogMsgTable.setStatus('current')
if mibBuilder.loadTexts: agSyslogMsgTable.setDescription('The table of syslog messages.')
agSyslogMsgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 11, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "agSyslogMsgIndex"))
if mibBuilder.loadTexts: agSyslogMsgTableEntry.setStatus('current')
if mibBuilder.loadTexts: agSyslogMsgTableEntry.setDescription('A syslog message stored on the switch.')
agSyslogMsgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSyslogMsgIndex.setStatus('current')
if mibBuilder.loadTexts: agSyslogMsgIndex.setDescription('The syslog message table index.')
agSyslogMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSyslogMessage.setStatus('current')
if mibBuilder.loadTexts: agSyslogMessage.setDescription('The syslog message.')
agLog = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 12))
agNewCfgSyslogTrapConsole = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapConsole.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapConsole.setDescription('Enable or disable console syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapConsole = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapConsole.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapConsole.setDescription('Enable or disable console syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapSystem = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 12, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapSystem.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapSystem.setDescription('Enable or disable system level syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapSystem = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 12, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapSystem.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapSystem.setDescription('Enable or disable system level syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapMgmt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 12, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapMgmt.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapMgmt.setDescription('Enable or disable management(flash, config, login) syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapMgmt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 12, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapMgmt.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapMgmt.setDescription('Enable or disable management(flash, config, login) syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapCli = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 12, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapCli.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapCli.setDescription('Enable or disable CLI generated error syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapCli = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 12, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapCli.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapCli.setDescription('Enable or disable CLI generated error syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapStg = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 12, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapStg.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapStg.setDescription('Enable or disable spanning tree syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapStg = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 12, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapStg.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapStg.setDescription('Enable or disable spanning tree syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapVlan = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 12, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapVlan.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapVlan.setDescription('Enable or disable VLAN syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapVlan = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 12, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapVlan.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapVlan.setDescription('Enable or disable VLAN syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapSsh = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 12, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapSsh.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapSsh.setDescription('Enable or disable SSH, RADIUS syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapSsh = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 12, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapSsh.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapSsh.setDescription('Enable or disable SSH, RADIUS syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapVrrp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 12, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapVrrp.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapVrrp.setDescription('Enable or disable VRRP syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapVrrp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 12, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapVrrp.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapVrrp.setDescription('Enable or disable VRRP syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapNtp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 12, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapNtp.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapNtp.setDescription('Enable or disable NTP syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapNtp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 12, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapNtp.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapNtp.setDescription('Enable or disable NTP syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapIp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 12, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapIp.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapIp.setDescription('Enable or disable IP related syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapIp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 12, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapIp.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapIp.setDescription('Enable or disable IP related syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapWeb = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 12, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapWeb.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapWeb.setDescription('Enable or disable WEBUI related syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapWeb = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 12, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapWeb.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapWeb.setDescription('Enable or disable WEBUI related syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapOspf = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 12, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapOspf.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapOspf.setDescription('Enable or disable OSPF related syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapOspf = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 12, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapOspf.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapOspf.setDescription('Enable or disable OSPF related syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapRmon = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 12, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapRmon.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapRmon.setDescription('Enable or disable rmon related syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapRmon = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 12, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapRmon.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapRmon.setDescription('Enable or disable rmon related syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapUfd = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 12, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapUfd.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapUfd.setDescription('Enable or disable UFD related syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapUfd = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 12, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapUfd.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapUfd.setDescription('Enable or disable UFD related syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrap8021x = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 12, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrap8021x.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrap8021x.setDescription('Enable or disable 802.1 related syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrap8021x = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 12, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrap8021x.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrap8021x.setDescription('Enable or disable 802.1 related syslog and SNMP trap, in the new_configuration block.')
agNewCfgSyslogTrapCfg = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 12, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapCfg.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapCfg.setDescription('Enable or disable CFG related syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapCfg = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 12, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapCfg.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapCfg.setDescription('Enable or disable CFG related syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapAll = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 12, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapAll.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapAll.setDescription('Enable or disable all syslog and SNMP traps, in the new_configuration block.')
agCurCfgSyslogTrapAll = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 5, 12, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapAll.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapAll.setDescription('Enable or disable all syslog and SNMP traps, as currently configured in the current_configuration block.')
agTransferServer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTransferServer.setStatus('current')
if mibBuilder.loadTexts: agTransferServer.setDescription('The FTP/TFTP server IP address or domain name.')
agTransferImage = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("image1", 2), ("image2", 3), ("boot", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTransferImage.setStatus('current')
if mibBuilder.loadTexts: agTransferImage.setDescription('Whether the image file should be loaded in image1 or image2 or boot in flash.')
agTransferImageFileName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 7, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTransferImageFileName.setStatus('current')
if mibBuilder.loadTexts: agTransferImageFileName.setDescription('The image file name to be downloaded.')
agTransferCfgFileName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 7, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTransferCfgFileName.setStatus('current')
if mibBuilder.loadTexts: agTransferCfgFileName.setDescription('The configuration file name.')
agTransferDumpFileName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 7, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTransferDumpFileName.setStatus('current')
if mibBuilder.loadTexts: agTransferDumpFileName.setDescription('The core dump file name.')
agTransferAction = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("img-get", 2), ("cfg-get", 3), ("cfg-put", 4), ("dump-put", 5), ("img-put", 7), ("tsdump-put", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTransferAction.setStatus('current')
if mibBuilder.loadTexts: agTransferAction.setDescription('This is an action object to perform various FTP/TFTP Get or Put functions. The FTP/TFTP sever is specified in agTransferServer object. img-get(2) - Download switch image from a specified image file(agTransferImageFileName) on the FTP/TFTP server to the destinated storage(agTransferImage). cfg-get(3) - Download switch configuration from a specified file(agTransferCfgFileName) on the FTP/TFTP server. cfg-put(4) - Upload switch configuration to a specified file(agTransferCfgFileName) on the FTP/TFTP server. dump-put(5)- Download switch core dump to a specified file(agTransferDumpFileName) on the FTP/TFTP server. img-put(7) - Upload specified switch image to a specified image file(agTransferImageFileName) on the FTP/TFTP server. tsdump-put(5)- Download switch core dump to a specified file (agTransferTSDumpFileName) on the FTP/TFTP server. other(1) is returned always when read.')
agTransferLastActionStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 7, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agTransferLastActionStatus.setStatus('current')
if mibBuilder.loadTexts: agTransferLastActionStatus.setDescription('The recorded status of the previous FTP/TFTP activity.')
agTransferUserName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 7, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTransferUserName.setStatus('current')
if mibBuilder.loadTexts: agTransferUserName.setDescription('The username for FTP server or blank for TFTP server.')
agTransferPassword = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 7, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTransferPassword.setStatus('current')
if mibBuilder.loadTexts: agTransferPassword.setDescription('The password for FTP server.')
agTransferTSDumpFileName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 7, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTransferTSDumpFileName.setStatus('current')
if mibBuilder.loadTexts: agTransferTSDumpFileName.setDescription('The TS dump file name.')
agTransferLastConfigurationActionStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 7, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("successfully", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agTransferLastConfigurationActionStatus.setStatus('current')
if mibBuilder.loadTexts: agTransferLastConfigurationActionStatus.setDescription("The status of the last configuration action using the file ftp/tftp'd from the server.")
agPortTableMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortTableMaxEnt.setStatus('current')
if mibBuilder.loadTexts: agPortTableMaxEnt.setDescription('The maximum number of rows in the port configuration host table.')
agPortCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 2), )
if mibBuilder.loadTexts: agPortCurCfgTable.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgTable.setDescription('The table of port configuration in the current_configuration block.')
agPortCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 2, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "agPortCurCfgIndx"))
if mibBuilder.loadTexts: agPortCurCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgTableEntry.setDescription('A row in the port table in the current_configuration block.')
agPortCurCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 2, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgIndx.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgIndx.setDescription('The index of the row in port configurations table.')
agPortCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgState.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgState.setDescription('This is the state of the port.')
agPortCurCfgVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("tagged", 2), ("untagged", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgVlanTag.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgVlanTag.setDescription('This is VLAN tag state of the port')
agPortCurCfgRmon = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgRmon.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgRmon.setDescription('This object is used to turn RMON on or off on the port.')
agPortCurCfgPVID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgPVID.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgPVID.setDescription('The default VLAN ID for the port. ')
agPortCurCfgGigEthAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgGigEthAutoNeg.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgGigEthAutoNeg.setDescription('This object is used to turn the autonegotiation on or off for gigabit Ethernet connection.')
agPortCurCfgGigEthSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("mbs10", 2), ("mbs100", 3), ("any", 4), ("mbs1000", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgGigEthSpeed.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgGigEthSpeed.setDescription('Selects the port speed for gigabit Ethernet connection.')
agPortCurCfgGigEthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("full-duplex", 2), ("half-duplex", 3), ("any", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgGigEthMode.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgGigEthMode.setDescription('This object is used to select port mode for gigabit Ethernet connection.')
agPortCurCfgGigEthFctl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("transmit", 2), ("receive", 3), ("both", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgGigEthFctl.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgGigEthFctl.setDescription('This object is used to select port flow control for gigabit Ethernet connection.')
agPortCurCfgPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 2, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 65))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgPortName.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgPortName.setDescription('The switch port name.')
agPortCurCfgLinkTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgLinkTrap.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgLinkTrap.setDescription("Indicates whether linkUp/linkDown traps should be generated for this interface. By default, this object should have the value enabled(1) for interfaces which do not operate on 'top' of any other interface (as defined in the ifStackTable), and disabled(2) otherwise.")
agPortCurCfgTagPVID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("tagged", 2), ("untagged", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgTagPVID.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgTagPVID.setDescription('This is PVID tag state of the port')
agPortCurCfgMulticastThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgMulticastThreshold.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgMulticastThreshold.setDescription("Current status of the port's Multicast Threshold.")
agPortCurCfgMulticastThresholdRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgMulticastThresholdRate.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgMulticastThresholdRate.setDescription("Current port's Multicast Threshold Rate.")
agPortCurCfgBroadcastThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgBroadcastThreshold.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgBroadcastThreshold.setDescription("Current status of the port's Broadcast Threshold.")
agPortCurCfgBroadcastThresholdRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgBroadcastThresholdRate.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgBroadcastThresholdRate.setDescription("Current port's Broadcast Threshold Rate.")
agPortCurCfgDLFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgDLFThreshold.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgDLFThreshold.setDescription("Current status of the port's Destination Lookup Fail Threshold.")
agPortCurCfgDLFThresholdRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgDLFThresholdRate.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgDLFThresholdRate.setDescription("Current port's Destination Lookup Fail Threshold Rate.")
agPortCurCfgPortMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("auto", 0), ("copper", 1), ("fiber", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgPortMedia.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgPortMedia.setDescription('The switch port media.')
agPortCurCfgPortMediat = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("copper", 1), ("sfp", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgPortMediat.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgPortMediat.setDescription('The switch port media.')
agPortCurCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 2, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 65))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgType.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgType.setDescription('The switch port type.')
agPortNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 3), )
if mibBuilder.loadTexts: agPortNewCfgTable.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgTable.setDescription('The table of port configuration in the new_configuration block.')
agPortNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 3, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "agPortNewCfgIndx"))
if mibBuilder.loadTexts: agPortNewCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgTableEntry.setDescription('A row in the port configuration table in the new_configuration block.')
agPortNewCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 3, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortNewCfgIndx.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgIndx.setDescription('The index of the row in port configurations table.')
agPortNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgState.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgState.setDescription('This is the state of the port.')
agPortNewCfgVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("tagged", 2), ("untagged", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgVlanTag.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgVlanTag.setDescription('This is VLAN tag state of the port')
agPortNewCfgRmon = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgRmon.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgRmon.setDescription('This object is used to turn RMON on or off on the port.')
agPortNewCfgPVID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgPVID.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgPVID.setDescription('The default VLAN ID for the port. ')
agPortNewCfgGigEthAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgGigEthAutoNeg.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgGigEthAutoNeg.setDescription('This object is used to turn the autonegotiation on or off for gigabit Ethernet connection.')
agPortNewCfgGigEthSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("mbs10", 2), ("mbs100", 3), ("any", 4), ("mbs1000", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgGigEthSpeed.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgGigEthSpeed.setDescription('Selects the port speed for gigabit Ethernet connection.')
agPortNewCfgGigEthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("full-duplex", 2), ("half-duplex", 3), ("any", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgGigEthMode.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgGigEthMode.setDescription('This object is used to select port mode for gigabit Ethernet connection. ')
agPortNewCfgGigEthFctl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("transmit", 2), ("receive", 3), ("both", 4), ("none", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgGigEthFctl.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgGigEthFctl.setDescription('This object is used to select port flow control for gigabit Ethernet connection.')
agPortNewCfgPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 65))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgPortName.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgPortName.setDescription('The switch port name.')
agPortNewCfgLinkTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgLinkTrap.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgLinkTrap.setDescription("Indicates whether linkUp/linkDown traps should be generated for this interface. By default, this object should have the value enabled(1) for interfaces which do not operate on 'top' of any other interface (as defined in the ifStackTable), and disabled(2) otherwise.")
agPortNewCfgTagPVID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("tagged", 2), ("untagged", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgTagPVID.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgTagPVID.setDescription('This is PVID tag state of the port')
agPortNewCfgMulticastThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgMulticastThreshold.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgMulticastThreshold.setDescription("New status of the port's Multicast Threshold.")
agPortNewCfgMulticastThresholdRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 3, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgMulticastThresholdRate.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgMulticastThresholdRate.setDescription("New port's Multicast Threshold Rate.")
agPortNewCfgBroadcastThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgBroadcastThreshold.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgBroadcastThreshold.setDescription("New status of the port's Broadcast Threshold.")
agPortNewCfgBroadcastThresholdRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 3, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgBroadcastThresholdRate.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgBroadcastThresholdRate.setDescription("New port's Broadcast Threshold Rate.")
agPortNewCfgDLFThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgDLFThreshold.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgDLFThreshold.setDescription("New status of the port's Destination Lookup Fail Threshold.")
agPortNewCfgDLFThresholdRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 3, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgDLFThresholdRate.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgDLFThresholdRate.setDescription("New port's Destination Lookup Fail Threshold Rate.")
agPortNewCfgPortMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("auto", 0), ("copper", 1), ("fiber", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgPortMedia.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgPortMedia.setDescription("New status of the port's Media.")
agPortNewCfgPortMediat = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("copper", 1), ("sfp", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgPortMediat.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgPortMediat.setDescription("New status of the port's Media.")
agPortNewCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 2, 3, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 65))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortNewCfgType.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgType.setDescription('The switch port type.')
sshCurCfgIntrval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 13, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshCurCfgIntrval.setStatus('current')
if mibBuilder.loadTexts: sshCurCfgIntrval.setDescription('Interval for generating the RSA server key.')
sshNewCfgIntrval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 13, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshNewCfgIntrval.setStatus('current')
if mibBuilder.loadTexts: sshNewCfgIntrval.setDescription('Set Interval for generating the RSA server key.')
sshCurCfgScpAdm = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 13, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshCurCfgScpAdm.setStatus('current')
if mibBuilder.loadTexts: sshCurCfgScpAdm.setDescription('SCP-only admin password.')
sshNewCfgScpAdm = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 13, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshNewCfgScpAdm.setStatus('current')
if mibBuilder.loadTexts: sshNewCfgScpAdm.setDescription('Set SCP-only admin password.')
sshNewCfgHKeyGen = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 13, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("generate", 1), ("other", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshNewCfgHKeyGen.setStatus('current')
if mibBuilder.loadTexts: sshNewCfgHKeyGen.setDescription('This is an action object to generate the RSA host key. other(2) is returned always when read. The following values are writable: generate(1).. Generate the RSA host key.')
sshNewCfgSKeyGen = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 13, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("generate", 1), ("other", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshNewCfgSKeyGen.setStatus('current')
if mibBuilder.loadTexts: sshNewCfgSKeyGen.setDescription('This is an action object to generate the RSA server key. other(2) is returned always when read. The following values are writable: generate(1).. Generate the RSA server key.')
sshCurCfgSSHPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 13, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshCurCfgSSHPort.setStatus('current')
if mibBuilder.loadTexts: sshCurCfgSSHPort.setDescription('SSH server port number.')
sshNewCfgSSHPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 13, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshNewCfgSSHPort.setStatus('current')
if mibBuilder.loadTexts: sshNewCfgSSHPort.setDescription('Set SSH server port number.')
sshCurCfgScpApplySave = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 13, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshCurCfgScpApplySave.setStatus('current')
if mibBuilder.loadTexts: sshCurCfgScpApplySave.setDescription('SCP apply and save.')
sshNewCfgScpApplySave = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 13, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshNewCfgScpApplySave.setStatus('current')
if mibBuilder.loadTexts: sshNewCfgScpApplySave.setDescription('Enable/Disable the SCP apply and save.')
sshCurCfgStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 13, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshCurCfgStatus.setStatus('current')
if mibBuilder.loadTexts: sshCurCfgStatus.setDescription('SSH server status.')
sshNewCfgStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 13, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshNewCfgStatus.setStatus('current')
if mibBuilder.loadTexts: sshNewCfgStatus.setDescription('Turn SSH server ON/OFF.')
sshCurVersion1Support = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 13, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshCurVersion1Support.setStatus('current')
if mibBuilder.loadTexts: sshCurVersion1Support.setDescription('Indicates whether the SSH version1 is supported or not.')
sshNewVersion1Support = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 13, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshNewVersion1Support.setStatus('current')
if mibBuilder.loadTexts: sshNewVersion1Support.setDescription('Enable/Disable the SSH version1 support')
radCurCfgPrimaryServer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 3, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgPrimaryServer.setStatus('current')
if mibBuilder.loadTexts: radCurCfgPrimaryServer.setDescription('The IP address of the Primary RADIUS server.')
radNewCfgPrimaryServer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgPrimaryServer.setStatus('current')
if mibBuilder.loadTexts: radNewCfgPrimaryServer.setDescription('The IP address of the Primary RADIUS server.')
radCurCfgSecondaryServer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 3, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgSecondaryServer.setStatus('current')
if mibBuilder.loadTexts: radCurCfgSecondaryServer.setDescription('The IP address of the Secondary RADIUS server.')
radNewCfgSecondaryServer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 3, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgSecondaryServer.setStatus('current')
if mibBuilder.loadTexts: radNewCfgSecondaryServer.setDescription('The IP address of the Secondary RADIUS server.')
radCurCfgPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1500, 3000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgPort.setStatus('current')
if mibBuilder.loadTexts: radCurCfgPort.setDescription('Specify the RADIUS port number.')
radNewCfgPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1500, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgPort.setStatus('current')
if mibBuilder.loadTexts: radNewCfgPort.setDescription('Speicfy the RADIUS port number.')
radCurCfgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgTimeout.setStatus('current')
if mibBuilder.loadTexts: radCurCfgTimeout.setDescription('The maximum number of seconds before resending authentication to RADIUS server.')
radNewCfgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgTimeout.setStatus('current')
if mibBuilder.loadTexts: radNewCfgTimeout.setDescription('The maximum number of seconds before resending authentication to RADIUS server.')
radCurCfgRetries = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgRetries.setStatus('current')
if mibBuilder.loadTexts: radCurCfgRetries.setDescription('Number of retries to the RADIUS server.')
radNewCfgRetries = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgRetries.setStatus('current')
if mibBuilder.loadTexts: radNewCfgRetries.setDescription('Number of retries to the RADIUS server.')
radCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgState.setStatus('current')
if mibBuilder.loadTexts: radCurCfgState.setDescription('Enable or disable RADIUS authentication.')
radNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgState.setStatus('current')
if mibBuilder.loadTexts: radNewCfgState.setDescription('Enable or disable RADIUS authentication.')
radCurCfgAuthenString = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 3, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgAuthenString.setStatus('current')
if mibBuilder.loadTexts: radCurCfgAuthenString.setDescription('The RADIUS authentication string.')
radNewCfgAuthenString = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 3, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgAuthenString.setStatus('current')
if mibBuilder.loadTexts: radNewCfgAuthenString.setDescription('The RADIUS authentication string.')
radCurCfgBackdoor = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgBackdoor.setStatus('current')
if mibBuilder.loadTexts: radCurCfgBackdoor.setDescription('Enable or disable RADIUS backdoor for telnet/ssh/http/https.')
radNewCfgBackdoor = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgBackdoor.setStatus('current')
if mibBuilder.loadTexts: radNewCfgBackdoor.setDescription('Enable or disable RADIUS backdoor for telnet/ssh/http/https.')
radCurCfgAuthenSecondString = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 3, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgAuthenSecondString.setStatus('current')
if mibBuilder.loadTexts: radCurCfgAuthenSecondString.setDescription('The second RADIUS authentication string.')
radNewCfgAuthenSecondString = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 3, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgAuthenSecondString.setStatus('current')
if mibBuilder.loadTexts: radNewCfgAuthenSecondString.setDescription('The second RADIUS authentication string.')
radCurCfgSecBd = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgSecBd.setStatus('current')
if mibBuilder.loadTexts: radCurCfgSecBd.setDescription('Enable or disable RADIUS secure backdoor for telnet.')
radNewCfgSecBd = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 3, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgSecBd.setStatus('current')
if mibBuilder.loadTexts: radNewCfgSecBd.setDescription('Enable or disable RADIUS secure backdoor for telnet.')
agCurCfgNTPServer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 4, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPServer.setStatus('current')
if mibBuilder.loadTexts: agCurCfgNTPServer.setDescription('The NTP Server Address.')
agNewCfgNTPServer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPServer.setStatus('current')
if mibBuilder.loadTexts: agNewCfgNTPServer.setDescription('The NTP Server Address.')
agCurCfgNTPResyncInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 44640))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPResyncInterval.setStatus('current')
if mibBuilder.loadTexts: agCurCfgNTPResyncInterval.setDescription('The NTP Server resync interval in minutes.')
agNewCfgNTPResyncInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 44640))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPResyncInterval.setStatus('current')
if mibBuilder.loadTexts: agNewCfgNTPResyncInterval.setDescription('The NTP Server resync interval in minutes.')
agCurCfgNTPService = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPService.setStatus('current')
if mibBuilder.loadTexts: agCurCfgNTPService.setDescription('Enable/disable NTP Service.')
agNewCfgNTPService = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPService.setStatus('current')
if mibBuilder.loadTexts: agNewCfgNTPService.setDescription('Enable/disable NTP Service.')
agCurCfgNTPSecServer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 4, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPSecServer.setStatus('current')
if mibBuilder.loadTexts: agCurCfgNTPSecServer.setDescription('The Secondary NTP Server Address.')
agNewCfgNTPSecServer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 4, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPSecServer.setStatus('current')
if mibBuilder.loadTexts: agNewCfgNTPSecServer.setDescription('The Secondary NTP Server Address.')
agApplyPending = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("applyNeeded", 2), ("noApplyNeeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agApplyPending.setStatus('current')
if mibBuilder.loadTexts: agApplyPending.setDescription('This object, when read, gives the user information whether an apply action is needed and that the configuration has been chaged by the user actions. The user then can apply the changes by setting proper value to the object agApplyConfiguration described above.')
agApplyConfig = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("apply", 1), ("idle", 2), ("inprogress", 3), ("complete", 4), ("failed", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agApplyConfig.setStatus('current')
if mibBuilder.loadTexts: agApplyConfig.setDescription("When this object is read the current state is returned. idle(3) indicates that there is no apply in progess. complete(5) indicates that the last apply operation is completed. Setting the value to apply(1), will write all the changes made since the last apply to the current configuration block. If the apply is successful this variable will return the state 'complete' else it will return 'failed'. In case of failure, to read the reason for failure use the agApplyTable.")
agApplyTableSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agApplyTableSize.setStatus('current')
if mibBuilder.loadTexts: agApplyTableSize.setDescription('The number of strings in the apply table.')
agApplyTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 8, 5), )
if mibBuilder.loadTexts: agApplyTable.setStatus('current')
if mibBuilder.loadTexts: agApplyTable.setDescription('The table of URL path for URL load balancing in the current_config.')
agApplyTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 8, 5, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "agApplyIndex"))
if mibBuilder.loadTexts: agApplyTableEntry.setStatus('current')
if mibBuilder.loadTexts: agApplyTableEntry.setDescription('Information about an URL path for URL load balancing.')
agApplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 8, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agApplyIndex.setStatus('current')
if mibBuilder.loadTexts: agApplyIndex.setDescription('The table index.')
agApplyString = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 8, 5, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agApplyString.setStatus('current')
if mibBuilder.loadTexts: agApplyString.setDescription('A string in the apply table.')
tacCurCfgPrimaryServer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 10, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgPrimaryServer.setStatus('current')
if mibBuilder.loadTexts: tacCurCfgPrimaryServer.setDescription('The IP address of the Primary TACACS+ server.')
tacNewCfgPrimaryServer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 10, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgPrimaryServer.setStatus('current')
if mibBuilder.loadTexts: tacNewCfgPrimaryServer.setDescription('The IP address of the Primary TACACS+ server.')
tacCurCfgSecondaryServer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 10, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgSecondaryServer.setStatus('current')
if mibBuilder.loadTexts: tacCurCfgSecondaryServer.setDescription('The IP address of the Secondary TACACS+ server.')
tacNewCfgSecondaryServer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 10, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgSecondaryServer.setStatus('current')
if mibBuilder.loadTexts: tacNewCfgSecondaryServer.setDescription('The IP address of the Secondary TACACS+ server.')
tacCurCfgPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 10, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgPort.setStatus('current')
if mibBuilder.loadTexts: tacCurCfgPort.setDescription('Specify the TACACS+ port number.')
tacNewCfgPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 10, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgPort.setStatus('current')
if mibBuilder.loadTexts: tacNewCfgPort.setDescription('Specify the TACACS+ port number.')
tacCurCfgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 10, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgTimeout.setStatus('current')
if mibBuilder.loadTexts: tacCurCfgTimeout.setDescription('The maximum number of seconds before resending authentication to TACACS+ server.')
tacNewCfgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 10, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgTimeout.setStatus('current')
if mibBuilder.loadTexts: tacNewCfgTimeout.setDescription('The maximum number of seconds before resending authentication to TACACS+ server.')
tacCurCfgRetries = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 10, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgRetries.setStatus('current')
if mibBuilder.loadTexts: tacCurCfgRetries.setDescription('Number of retries to the TACACS+ server.')
tacNewCfgRetries = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 10, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgRetries.setStatus('current')
if mibBuilder.loadTexts: tacNewCfgRetries.setDescription('Number of retries to the TACACS+ server.')
tacCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 10, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgState.setStatus('current')
if mibBuilder.loadTexts: tacCurCfgState.setDescription('Enable or disable TACACS+ authentication.')
tacNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 10, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgState.setStatus('current')
if mibBuilder.loadTexts: tacNewCfgState.setDescription('Enable or disable TACACS+ authentication.')
tacCurCfgAuthenString = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 10, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgAuthenString.setStatus('current')
if mibBuilder.loadTexts: tacCurCfgAuthenString.setDescription('The TACACS+ authentication string.')
tacNewCfgAuthenString = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 10, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgAuthenString.setStatus('current')
if mibBuilder.loadTexts: tacNewCfgAuthenString.setDescription('The TACACS+ authentication string.')
tacCurCfgBackdoor = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 10, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgBackdoor.setStatus('current')
if mibBuilder.loadTexts: tacCurCfgBackdoor.setDescription('Enable or disable TACACS+ backdoor for telnet/ssh/http/https.')
tacNewCfgBackdoor = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 10, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgBackdoor.setStatus('current')
if mibBuilder.loadTexts: tacNewCfgBackdoor.setDescription('Enable or disable TACACS+ backdoor for telnet/ssh/http/https.')
tacCurCfgAuthenSecondString = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 10, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgAuthenSecondString.setStatus('current')
if mibBuilder.loadTexts: tacCurCfgAuthenSecondString.setDescription('The second TACACS+ authentication string.')
tacNewCfgAuthenSecondString = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 10, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgAuthenSecondString.setStatus('current')
if mibBuilder.loadTexts: tacNewCfgAuthenSecondString.setDescription('The second TACACS+ authentication string.')
tacCurCfgCmdAuthor = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 10, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgCmdAuthor.setStatus('current')
if mibBuilder.loadTexts: tacCurCfgCmdAuthor.setDescription('Enable or disable TACACS+ command authorization.')
tacNewCfgCmdAuthor = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 10, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgCmdAuthor.setStatus('current')
if mibBuilder.loadTexts: tacNewCfgCmdAuthor.setDescription('Enable or disable TACACS+ command authorization.')
tacCurCfgSecBd = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 10, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgSecBd.setStatus('current')
if mibBuilder.loadTexts: tacCurCfgSecBd.setDescription('Enable or disable TACACS+ secure backdoor for telnet.')
tacNewCfgSecBd = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 10, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgSecBd.setStatus('current')
if mibBuilder.loadTexts: tacNewCfgSecBd.setDescription('Enable or disable TACACS+ secure backdoor for telnet.')
tacCurCfgCmdLogging = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 10, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgCmdLogging.setStatus('current')
if mibBuilder.loadTexts: tacCurCfgCmdLogging.setDescription('Enable or disable TACACS+ command logging.')
tacNewCfgCmdLogging = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 10, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgCmdLogging.setStatus('current')
if mibBuilder.loadTexts: tacNewCfgCmdLogging.setDescription('Enable or disable TACACS+ command logging.')
tacCurCfgCmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 10, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgCmap.setStatus('current')
if mibBuilder.loadTexts: tacCurCfgCmap.setDescription('Enable/Disable Tacacs+ new prividlege level maping.')
tacNewCfgCmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 10, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgCmap.setStatus('current')
if mibBuilder.loadTexts: tacNewCfgCmap.setDescription('Enable/Disable Tacacs+ new prividlege level maping.')
agTacacsUserMapCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 10, 31), )
if mibBuilder.loadTexts: agTacacsUserMapCurCfgTable.setStatus('current')
if mibBuilder.loadTexts: agTacacsUserMapCurCfgTable.setDescription('The table of tacacs+ user map current configuration.')
agTacacsUserMapCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 10, 31, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "agTacacsUserMapCurCfgUId"))
if mibBuilder.loadTexts: agTacacsUserMapCurCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: agTacacsUserMapCurCfgTableEntry.setDescription('A row in the tacacs+ user mapping table.')
agTacacsUserMapCurCfgUId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 10, 31, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agTacacsUserMapCurCfgUId.setStatus('current')
if mibBuilder.loadTexts: agTacacsUserMapCurCfgUId.setDescription('The current config remote privilege identifier. The identifier value corresponds to the remote privilege.')
agTacacsUserMapCurCfgMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 10, 31, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("user", 1), ("oper", 2), ("admin", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agTacacsUserMapCurCfgMapping.setStatus('current')
if mibBuilder.loadTexts: agTacacsUserMapCurCfgMapping.setDescription('Current Tacacs+ user privilege mappings. The correspondence between the local privilege and the remote privilege is: - The remote privilege is the privilege identifier value - The local privilege is the mapped value(user, oper, admin) Example: For the remote privilege 15, we have the index 16: agTacacsUserMapCurCfgUId.16 = 15.')
agTacacsUserMapNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 10, 32), )
if mibBuilder.loadTexts: agTacacsUserMapNewCfgTable.setStatus('current')
if mibBuilder.loadTexts: agTacacsUserMapNewCfgTable.setDescription('The table of tacacs+ user map new configuration.')
tacNewCfgDirectedRequest = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 10, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("restricted", 2), ("no-truncate", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgDirectedRequest.setStatus('current')
if mibBuilder.loadTexts: tacNewCfgDirectedRequest.setDescription('Enable/Disable tacacs directed request.')
tacCurCfgDirectedRequest = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 10, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("restricted", 2), ("no-truncate", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgDirectedRequest.setStatus('current')
if mibBuilder.loadTexts: tacCurCfgDirectedRequest.setDescription('The current tacacs directed request state.')
agTacacsUserMapNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 10, 32, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "agTacacsUserMapNewCfgUId"))
if mibBuilder.loadTexts: agTacacsUserMapNewCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: agTacacsUserMapNewCfgTableEntry.setDescription('A row in the tacacs+ user mapping table.')
agTacacsUserMapNewCfgUId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 10, 32, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agTacacsUserMapNewCfgUId.setStatus('current')
if mibBuilder.loadTexts: agTacacsUserMapNewCfgUId.setDescription('The new config remote privilege identifier. The identifier value corresponds to the remote privilege.')
agTacacsUserMapNewCfgMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 10, 32, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("user", 1), ("oper", 2), ("admin", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agTacacsUserMapNewCfgMapping.setStatus('current')
if mibBuilder.loadTexts: agTacacsUserMapNewCfgMapping.setDescription('Set new Tacacs+ user privilege mappings. The correspondence between the local privilege and the remote privilege is: - The remote privilege is the privilege identifier value - The local privilege is the mapped value(user, oper, admin) Example: For the remote privilege 15, we have the index 16: agTacacsUserMapNewCfgUId.16 = 15.')
agMgmtNetTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtNetTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: agMgmtNetTableMaxSize.setDescription('The maximum number of entries in the Management Network Table.')
agCurCfgMgmtNetTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 11, 2), )
if mibBuilder.loadTexts: agCurCfgMgmtNetTable.setStatus('current')
if mibBuilder.loadTexts: agCurCfgMgmtNetTable.setDescription('The table for Management Network definitions in the current configuration block.')
agCurCfgMgmtNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 11, 2, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "agCurCfgMgmtNetIndex"))
if mibBuilder.loadTexts: agCurCfgMgmtNetEntry.setStatus('current')
if mibBuilder.loadTexts: agCurCfgMgmtNetEntry.setDescription('A row in the management network definition table.')
agCurCfgMgmtNetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgMgmtNetIndex.setStatus('current')
if mibBuilder.loadTexts: agCurCfgMgmtNetIndex.setDescription('The index of the Management Network Definition table.')
agCurCfgMgmtNetSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 11, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgMgmtNetSubnet.setStatus('current')
if mibBuilder.loadTexts: agCurCfgMgmtNetSubnet.setDescription('The Management Network Address in the current_configuration block.')
agCurCfgMgmtNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 11, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgMgmtNetMask.setStatus('current')
if mibBuilder.loadTexts: agCurCfgMgmtNetMask.setDescription('The Management Network Mask in the current_configuration block.')
agNewCfgMgmtNetTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 11, 3), )
if mibBuilder.loadTexts: agNewCfgMgmtNetTable.setStatus('current')
if mibBuilder.loadTexts: agNewCfgMgmtNetTable.setDescription('The table for Management Network definitions in the new configuration block.')
agNewCfgMgmtNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 11, 3, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "agNewCfgMgmtNetIndex"))
if mibBuilder.loadTexts: agNewCfgMgmtNetEntry.setStatus('current')
if mibBuilder.loadTexts: agNewCfgMgmtNetEntry.setDescription('A row in the management network definition table.')
agNewCfgMgmtNetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 11, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agNewCfgMgmtNetIndex.setStatus('current')
if mibBuilder.loadTexts: agNewCfgMgmtNetIndex.setDescription('The index of the Management Network Definition table.')
agNewCfgMgmtNetSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 11, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agNewCfgMgmtNetSubnet.setStatus('current')
if mibBuilder.loadTexts: agNewCfgMgmtNetSubnet.setDescription('The Management Network Address in the new_configuration block.')
agNewCfgMgmtNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 11, 3, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agNewCfgMgmtNetMask.setStatus('current')
if mibBuilder.loadTexts: agNewCfgMgmtNetMask.setDescription('The Management Network Mask in the new_configuration block.')
agNewCfgMgmtNetDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 11, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agNewCfgMgmtNetDelete.setStatus('current')
if mibBuilder.loadTexts: agNewCfgMgmtNetDelete.setDescription('By setting the value to delete(2), the entire row is deleted.')
agMgmtNetClear = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 11, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agMgmtNetClear.setStatus('current')
if mibBuilder.loadTexts: agMgmtNetClear.setDescription('By setting the value to delete(2), the entire table is cleared.')
agAccessUserMaxUserID = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAccessUserMaxUserID.setStatus('current')
if mibBuilder.loadTexts: agAccessUserMaxUserID.setDescription('The maximum number of Users ID.')
agAccessUserCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 12, 2), )
if mibBuilder.loadTexts: agAccessUserCurCfgTable.setStatus('current')
if mibBuilder.loadTexts: agAccessUserCurCfgTable.setDescription('The table of Access user configuration.')
agAccessUserCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 12, 2, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "agAccessUserCurCfgUId"))
if mibBuilder.loadTexts: agAccessUserCurCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: agAccessUserCurCfgTableEntry.setDescription('A row in the Access user configuration table.')
agAccessUserCurCfgUId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 12, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAccessUserCurCfgUId.setStatus('current')
if mibBuilder.loadTexts: agAccessUserCurCfgUId.setDescription('The User identifier.')
agAccessUserCurCos = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 6))).clone(namedValues=NamedValues(("user", 0), ("oper", 3), ("admin", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAccessUserCurCos.setStatus('current')
if mibBuilder.loadTexts: agAccessUserCurCos.setDescription('The user class of service.')
agAccessUserCurCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 12, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAccessUserCurCfgName.setStatus('current')
if mibBuilder.loadTexts: agAccessUserCurCfgName.setDescription('The user name.')
agAccessUserCurCfgPswd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 12, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAccessUserCurCfgPswd.setStatus('current')
if mibBuilder.loadTexts: agAccessUserCurCfgPswd.setDescription('The character string representing the user passworde.')
agAccessUserCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 12, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAccessUserCurCfgState.setStatus('current')
if mibBuilder.loadTexts: agAccessUserCurCfgState.setDescription('Enable or disable a user.')
agAccessUserNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 12, 3), )
if mibBuilder.loadTexts: agAccessUserNewCfgTable.setStatus('current')
if mibBuilder.loadTexts: agAccessUserNewCfgTable.setDescription('The table of Access user configuration.')
agAccessUserNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 12, 3, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "agAccessUserNewCfgUId"))
if mibBuilder.loadTexts: agAccessUserNewCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: agAccessUserNewCfgTableEntry.setDescription('A row in the Access user configuration table.')
agAccessUserNewCfgUId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 12, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAccessUserNewCfgUId.setStatus('current')
if mibBuilder.loadTexts: agAccessUserNewCfgUId.setDescription('The User identifier.')
agAccessUserNewCos = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 12, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 6))).clone(namedValues=NamedValues(("user", 0), ("oper", 3), ("admin", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agAccessUserNewCos.setStatus('current')
if mibBuilder.loadTexts: agAccessUserNewCos.setDescription('The user class of service.')
agAccessUserNewCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 12, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agAccessUserNewCfgName.setStatus('current')
if mibBuilder.loadTexts: agAccessUserNewCfgName.setDescription('The user name.')
agAccessUserNewCfgPswd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 12, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agAccessUserNewCfgPswd.setStatus('current')
if mibBuilder.loadTexts: agAccessUserNewCfgPswd.setDescription('The character string representing the user passworde.')
agAccessUserNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 12, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agAccessUserNewCfgState.setStatus('current')
if mibBuilder.loadTexts: agAccessUserNewCfgState.setDescription('Enable or disable a user.')
agAccessUserNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 1, 12, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agAccessUserNewCfgDelete.setStatus('current')
if mibBuilder.loadTexts: agAccessUserNewCfgDelete.setDescription('This is an action object to create or delete a User. other(1) is returned always when read. The following values are writable: delete(2)...to delete a User')
pktStatsAllocs = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsAllocs.setStatus('current')
if mibBuilder.loadTexts: pktStatsAllocs.setDescription('Total number of packet allocations from the packet buffer pool by the TCP/IP protocol stack.')
pktStatsFrees = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsFrees.setStatus('current')
if mibBuilder.loadTexts: pktStatsFrees.setDescription('Total number of times the packet buffers are freed(released) to the packet buffer pool by the TCP/IP protocol stack.')
pktStatsAllocFails = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsAllocFails.setStatus('current')
if mibBuilder.loadTexts: pktStatsAllocFails.setDescription('Total number of packet allocation failures from the packet buffer pool by the TCP/IP protocol stack.')
pktStatsMediums = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsMediums.setStatus('current')
if mibBuilder.loadTexts: pktStatsMediums.setDescription('Total number of packet allocations with size greater than 128 bytes and less than or equal to 1536 bytes from the packet buffer pool by the TCP/IP protocol stack.')
pktStatsJumbos = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsJumbos.setStatus('current')
if mibBuilder.loadTexts: pktStatsJumbos.setDescription('Total number of packet allocations with size larger than 1536 bytes from the packet buffer pool by the TCP/IP protocol stack.')
pktStatsSmalls = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsSmalls.setStatus('current')
if mibBuilder.loadTexts: pktStatsSmalls.setDescription('Total number of packet allocations with size less than or eqaul to 128 bytes from the packet buffer pool by the TCP/IP protocol stack.')
pktStatsMediumsHiWatermark = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsMediumsHiWatermark.setStatus('current')
if mibBuilder.loadTexts: pktStatsMediumsHiWatermark.setDescription('The highest number of packet allocations with size greater than 128 bytes and less than or equal to 1536 bytes from the packet buffer pool by the TCP/IP protocol stack.')
pktStatsJumbosHiWatermark = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsJumbosHiWatermark.setStatus('current')
if mibBuilder.loadTexts: pktStatsJumbosHiWatermark.setDescription('The highest number of packet allocations with size larger than 1536 bytes from the packet buffer pool by the TCP/IP protocol stack.')
pktStatsSmallsHiWatermark = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsSmallsHiWatermark.setStatus('current')
if mibBuilder.loadTexts: pktStatsSmallsHiWatermark.setDescription('The highest number of packet allocations with size less than or eqaul to 128 bytes from the packet buffer pool by the TCP/IP protocol stack.')
mpCpuStatsUtil1Second = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpCpuStatsUtil1Second.setStatus('current')
if mibBuilder.loadTexts: mpCpuStatsUtil1Second.setDescription('The utilization of MP CPU over 1 second. It shows the percentage.')
mpCpuStatsUtil4Seconds = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpCpuStatsUtil4Seconds.setStatus('current')
if mibBuilder.loadTexts: mpCpuStatsUtil4Seconds.setDescription('The utilization of MP CPU over 4 seconds. It shows the percentage.')
mpCpuStatsUtil64Seconds = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpCpuStatsUtil64Seconds.setStatus('current')
if mibBuilder.loadTexts: mpCpuStatsUtil64Seconds.setDescription('The utilization of MP CPU over 64 seconds. It shows the percentage.')
portStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 1), )
if mibBuilder.loadTexts: portStatsTable.setStatus('current')
if mibBuilder.loadTexts: portStatsTable.setDescription('The table of port statistics.')
portStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 1, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "portStatsIndx"))
if mibBuilder.loadTexts: portStatsTableEntry.setStatus('current')
if mibBuilder.loadTexts: portStatsTableEntry.setDescription('A row in the port stats table.')
portStatsIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 1, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsIndx.setStatus('current')
if mibBuilder.loadTexts: portStatsIndx.setDescription('The port index.')
portStatsPhyIfInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInOctets.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfInOctets.setDescription('The total number of octets received on the interface, including framing characters.')
portStatsPhyIfInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInUcastPkts.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfInUcastPkts.setDescription('The number of subnetwork-unicast packets delivered to a higher-layer protocol.')
portStatsPhyIfInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInNUcastPkts.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfInNUcastPkts.setDescription('The number of non-unicast (i.e., subnetwork- broadcast or subnetwork-multicast) packets delivered to a higher-layer protocol.')
portStatsPhyIfInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInDiscards.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfInDiscards.setDescription('The number of inbound packets which were chosen to be discarded even though no errors had been detected to prevent their being deliverable to a higher-layer protocol. One possible reason for discarding such a packet could be to free up buffer space.')
portStatsPhyIfInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInErrors.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfInErrors.setDescription('The number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol.')
portStatsPhyIfInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInUnknownProtos.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfInUnknownProtos.setDescription('The number of packets received via the interface which were discarded because of an unknown or unsupported protocol.')
portStatsPhyIfOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutOctets.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfOutOctets.setDescription('The total number of octets transmitted out of the interface, including framing characters.')
portStatsPhyIfOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutUcastPkts.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfOutUcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted to a subnetwork-unicast address, including those that were discarded or not sent.')
portStatsPhyIfOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutNUcastPkts.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfOutNUcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted to a non- unicast (i.e., a subnetwork-broadcast or subnetwork-multicast) address, including those that were discarded or not sent.')
portStatsPhyIfOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutDiscards.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfOutDiscards.setDescription('The number of outbound packets which were chosen to be discarded even though no errors had been detected to prevent their being transmitted. One possible reason for discarding such a packet could be to free up buffer space.')
portStatsPhyIfOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutErrors.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfOutErrors.setDescription('The number of outbound packets that could not be transmitted because of errors.')
portStatsPhyIfOutQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutQLen.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfOutQLen.setDescription('The length of the output packet queue (in packets).')
portStatsPhyIfInBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfInBroadcastPkts.setDescription('The number of packets, delivered by this sub-layer to a higher (sub-)layer, which were addressed to a broadcast address at this sub-layer.')
portStatsPhyIfOutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfOutBroadcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted, and which were addressed to a broadcast address at this sub-layer, including those that were discarded or not sent.')
portStatsPhyIfInMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfInMulticastPkts.setDescription('The number of packets, delivered by this sub-layer to a higher (sub-)layer, which were addressed to a multicast address at this sub-layer.')
portStatsPhyIfOutMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfOutMulticastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted, and which were addressed to a multicast address at this sub-layer, including those that were discarded or not sent.')
portStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("ok", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portStatsClear.setStatus('current')
if mibBuilder.loadTexts: portStatsClear.setDescription('Setting this value to clear(1) clears the stats for this port.')
portStatsLinkStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsLinkStateChange.setStatus('current')
if mibBuilder.loadTexts: portStatsLinkStateChange.setDescription('Number of link state changes.')
portStatsPhyIfInFctlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInFctlPkts.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfInFctlPkts.setDescription('The number of inbound flow control packets.')
portStatsPhyIfOutFctlPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutFctlPkts.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfOutFctlPkts.setDescription('The number of outbound flow control packets.')
dot1xPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 2), )
if mibBuilder.loadTexts: dot1xPortStatsTable.setStatus('current')
if mibBuilder.loadTexts: dot1xPortStatsTable.setDescription('The table of 802.1x port statistics.')
dot1xPortStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 2, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "dot1xPortStatsIndx"))
if mibBuilder.loadTexts: dot1xPortStatsTableEntry.setStatus('current')
if mibBuilder.loadTexts: dot1xPortStatsTableEntry.setDescription('A row in the 802.1x port stats table.')
dot1xPortStatsIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 2, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xPortStatsIndx.setStatus('current')
if mibBuilder.loadTexts: dot1xPortStatsIndx.setDescription('The 802.1x port stats index.')
eapolFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapolFramesRx.setStatus('current')
if mibBuilder.loadTexts: eapolFramesRx.setDescription('')
eapolFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapolFramesTx.setStatus('current')
if mibBuilder.loadTexts: eapolFramesTx.setDescription('')
eapolStartFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapolStartFramesRx.setStatus('current')
if mibBuilder.loadTexts: eapolStartFramesRx.setDescription('')
eapolLogoffFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapolLogoffFramesRx.setStatus('current')
if mibBuilder.loadTexts: eapolLogoffFramesRx.setDescription('')
eapolRespIdFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapolRespIdFramesRx.setStatus('current')
if mibBuilder.loadTexts: eapolRespIdFramesRx.setDescription('')
eapolRespFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapolRespFramesRx.setStatus('current')
if mibBuilder.loadTexts: eapolRespFramesRx.setDescription('')
eapolReqIdFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapolReqIdFramesTx.setStatus('current')
if mibBuilder.loadTexts: eapolReqIdFramesTx.setDescription('')
eapolReqFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapolReqFramesTx.setStatus('current')
if mibBuilder.loadTexts: eapolReqFramesTx.setDescription('')
invalidEapolFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invalidEapolFramesRx.setStatus('current')
if mibBuilder.loadTexts: invalidEapolFramesRx.setDescription('')
eapLengthErrorFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapLengthErrorFramesRx.setStatus('current')
if mibBuilder.loadTexts: eapLengthErrorFramesRx.setDescription('')
authEntersConnecting = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authEntersConnecting.setStatus('current')
if mibBuilder.loadTexts: authEntersConnecting.setDescription('')
authEapLogoffsWhileConnecting = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authEapLogoffsWhileConnecting.setStatus('current')
if mibBuilder.loadTexts: authEapLogoffsWhileConnecting.setDescription('')
authEntersAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authEntersAuthenticating.setStatus('current')
if mibBuilder.loadTexts: authEntersAuthenticating.setDescription('')
authSuccessesWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authSuccessesWhileAuthenticating.setStatus('current')
if mibBuilder.loadTexts: authSuccessesWhileAuthenticating.setDescription('')
authTimeoutsWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authTimeoutsWhileAuthenticating.setStatus('current')
if mibBuilder.loadTexts: authTimeoutsWhileAuthenticating.setDescription('')
authFailWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authFailWhileAuthenticating.setStatus('current')
if mibBuilder.loadTexts: authFailWhileAuthenticating.setDescription('')
authReauthsWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authReauthsWhileAuthenticating.setStatus('current')
if mibBuilder.loadTexts: authReauthsWhileAuthenticating.setDescription('')
authEapStartsWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authEapStartsWhileAuthenticating.setStatus('current')
if mibBuilder.loadTexts: authEapStartsWhileAuthenticating.setDescription('')
authEapLogoffWhileAuthenticating = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authEapLogoffWhileAuthenticating.setStatus('current')
if mibBuilder.loadTexts: authEapLogoffWhileAuthenticating.setDescription('')
authReauthsWhileAuthenticated = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authReauthsWhileAuthenticated.setStatus('current')
if mibBuilder.loadTexts: authReauthsWhileAuthenticated.setDescription('')
authEapStartsWhileAuthenticated = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authEapStartsWhileAuthenticated.setStatus('current')
if mibBuilder.loadTexts: authEapStartsWhileAuthenticated.setDescription('')
authEapLogoffWhileAuthenticated = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authEapLogoffWhileAuthenticated.setStatus('current')
if mibBuilder.loadTexts: authEapLogoffWhileAuthenticated.setDescription('')
backendResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backendResponses.setStatus('current')
if mibBuilder.loadTexts: backendResponses.setDescription('')
backendAccessChallenges = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backendAccessChallenges.setStatus('current')
if mibBuilder.loadTexts: backendAccessChallenges.setDescription('')
backendOtherRequestsToSupplicant = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backendOtherRequestsToSupplicant.setStatus('current')
if mibBuilder.loadTexts: backendOtherRequestsToSupplicant.setDescription('')
backendNonNakResponsesFromSupplicant = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backendNonNakResponsesFromSupplicant.setStatus('current')
if mibBuilder.loadTexts: backendNonNakResponsesFromSupplicant.setDescription('')
backendAuthSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backendAuthSuccesses.setStatus('current')
if mibBuilder.loadTexts: backendAuthSuccesses.setDescription('')
backendAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backendAuthFails.setStatus('current')
if mibBuilder.loadTexts: backendAuthFails.setDescription('')
lastEapolFrameVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastEapolFrameVersion.setStatus('current')
if mibBuilder.loadTexts: lastEapolFrameVersion.setDescription('')
lastEapolFrameSource = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 2, 1, 31), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastEapolFrameSource.setStatus('current')
if mibBuilder.loadTexts: lastEapolFrameSource.setDescription('')
allportsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 3), )
if mibBuilder.loadTexts: allportsStatsTable.setStatus('current')
if mibBuilder.loadTexts: allportsStatsTable.setDescription('The table of all ports statistics.')
allportsStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 3, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "allportsStatsIndx"))
if mibBuilder.loadTexts: allportsStatsTableEntry.setStatus('current')
if mibBuilder.loadTexts: allportsStatsTableEntry.setDescription('A row in the table of all ports statistics.')
allportsStatsIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 3, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsIndx.setStatus('current')
if mibBuilder.loadTexts: allportsStatsIndx.setDescription('The port number.')
allportsStatsDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsDescr.setStatus('current')
if mibBuilder.loadTexts: allportsStatsDescr.setDescription('The port description.')
allportsStatsSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("mbs10", 2), ("mbs100", 3), ("mbs1000", 4), ("any", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsSpeed.setStatus('current')
if mibBuilder.loadTexts: allportsStatsSpeed.setDescription('The current operational speed of the port.')
allportsStatsPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 3, 1, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsPhysAddress.setStatus('current')
if mibBuilder.loadTexts: allportsStatsPhysAddress.setDescription('The port MAC Address.')
allportsStatsAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsAdminStatus.setStatus('current')
if mibBuilder.loadTexts: allportsStatsAdminStatus.setDescription('The port Admin state.')
allportsStatsOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsOperStatus.setStatus('current')
if mibBuilder.loadTexts: allportsStatsOperStatus.setDescription('The port Operational Status.')
allportsStatsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsInOctets.setStatus('current')
if mibBuilder.loadTexts: allportsStatsInOctets.setDescription('Octets In for port.')
allportsStatsOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsOutOctets.setStatus('current')
if mibBuilder.loadTexts: allportsStatsOutOctets.setDescription('Octets Out for port.')
allportsStatsInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsInPkts.setStatus('current')
if mibBuilder.loadTexts: allportsStatsInPkts.setDescription('Packets In for port.')
allportsStatsOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsOutPkts.setStatus('current')
if mibBuilder.loadTexts: allportsStatsOutPkts.setDescription('Packets Out for port.')
allportsStatsInUcast = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsInUcast.setStatus('current')
if mibBuilder.loadTexts: allportsStatsInUcast.setDescription('Unicast Packets In for port.')
allportsStatsOutUcast = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsOutUcast.setStatus('current')
if mibBuilder.loadTexts: allportsStatsOutUcast.setDescription('Unicast Packets Out for port.')
allportsStatsInBcast = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsInBcast.setStatus('current')
if mibBuilder.loadTexts: allportsStatsInBcast.setDescription('Broadcasts Packets In for port.')
allportsStatsOutBcast = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 3, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsOutBcast.setStatus('current')
if mibBuilder.loadTexts: allportsStatsOutBcast.setDescription('Broadcasts Packets Out for port.')
allportsStatsInMcast = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsInMcast.setStatus('current')
if mibBuilder.loadTexts: allportsStatsInMcast.setDescription('Multicast Packets In for port.')
allportsStatsOutMcast = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 3, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsOutMcast.setStatus('current')
if mibBuilder.loadTexts: allportsStatsOutMcast.setDescription('Multicast Packets Out for port.')
allportsStatsInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsInDiscards.setStatus('current')
if mibBuilder.loadTexts: allportsStatsInDiscards.setDescription('Discarded Packets for port.')
allportsStatsOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsOutDiscards.setStatus('current')
if mibBuilder.loadTexts: allportsStatsOutDiscards.setDescription('Outbound Packets for port.')
allportsStatsInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsInErrors.setStatus('current')
if mibBuilder.loadTexts: allportsStatsInErrors.setDescription('Error Packets for port.')
allportsStatsOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsOutErrors.setStatus('current')
if mibBuilder.loadTexts: allportsStatsOutErrors.setDescription('Not sent packets due to error.')
allportsStatsInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 3, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsInUnknownProtos.setStatus('current')
if mibBuilder.loadTexts: allportsStatsInUnknownProtos.setDescription('Unknown protocol packets.')
allportsStatsOutQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 3, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsOutQLen.setStatus('current')
if mibBuilder.loadTexts: allportsStatsOutQLen.setDescription('Outbound Packet Queue Length.')
allportsStatsipInReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsipInReceives.setStatus('current')
if mibBuilder.loadTexts: allportsStatsipInReceives.setDescription('Ip In Receives.')
allportsStatsipInHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsipInHeaderErrors.setStatus('current')
if mibBuilder.loadTexts: allportsStatsipInHeaderErrors.setDescription('Ip In Header Errors.')
allportsStatsipInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsipInDiscards.setStatus('current')
if mibBuilder.loadTexts: allportsStatsipInDiscards.setDescription('Ip In Discards.')
allportsStatsLinkStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: allportsStatsLinkStateChange.setStatus('current')
if mibBuilder.loadTexts: allportsStatsLinkStateChange.setDescription('Number of link state changes.')
clearPortsStats = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clearPortsStats.setStatus('current')
if mibBuilder.loadTexts: clearPortsStats.setDescription('Setting this to clear(2) results in clearing the statistics for all ports.')
agDiffState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("diff", 1), ("flashdiff", 2), ("idle", 3), ("inprogress", 4), ("complete", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agDiffState.setStatus('current')
if mibBuilder.loadTexts: agDiffState.setDescription('When this object is read the current state is returned. idle(3) indicates that there is no diff in progess. complete(5) indicates that the last diff operation is completed. Setting the value to diff(1), will start a new diff operation Diff compares the new configuration with the current configuration and shows the pending configuration changes. Setting the value to flashdiff(2), will start a new diff operation. flashdiff compares new configuration with the flash configuration. To read the configuration changes use the agDiffTable once the state of this variable returns complete.')
agDiffTableSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDiffTableSize.setStatus('current')
if mibBuilder.loadTexts: agDiffTableSize.setDescription('The number of strings in the diff table.')
agDiffTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 4, 4), )
if mibBuilder.loadTexts: agDiffTable.setStatus('current')
if mibBuilder.loadTexts: agDiffTable.setDescription('The table of URL path for URL load balancing in the current_config.')
agDiffTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 4, 4, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "agDiffIndex"))
if mibBuilder.loadTexts: agDiffTableEntry.setStatus('current')
if mibBuilder.loadTexts: agDiffTableEntry.setDescription('Information about an URL path for URL load balancing.')
agDiffIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDiffIndex.setStatus('current')
if mibBuilder.loadTexts: agDiffIndex.setDescription('The table index.')
agDiffString = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 4, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDiffString.setStatus('current')
if mibBuilder.loadTexts: agDiffString.setDescription('A string in the diff table.')
agCfgDumpState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dump", 1), ("idle", 2), ("inprogress", 3), ("complete", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agCfgDumpState.setStatus('current')
if mibBuilder.loadTexts: agCfgDumpState.setDescription("When this object is read the current state is returned. idle(2) indicates that there is no dump in progess. complete(4) indicates that the last dump operation is completed. Setting the value to dump(1), will start a new dump operation Dump will show the current configuration. To read the configuration dump use the agCfgDumpTable once the state of this variable returns complete. Once the agCfgDumpTable is read the state should be set back to 'idle' which frees the dump buffer and others can issue a dump command via SNMP.")
agCfgDumpTableSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCfgDumpTableSize.setStatus('current')
if mibBuilder.loadTexts: agCfgDumpTableSize.setDescription('The number of strings in the dump table.')
agCfgDumpTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 5, 4), )
if mibBuilder.loadTexts: agCfgDumpTable.setStatus('current')
if mibBuilder.loadTexts: agCfgDumpTable.setDescription('The table of dump strings.')
agCfgDumpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 5, 4, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "agCfgDumpIndex"))
if mibBuilder.loadTexts: agCfgDumpTableEntry.setStatus('current')
if mibBuilder.loadTexts: agCfgDumpTableEntry.setDescription('An entry in the dump table.')
agCfgDumpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCfgDumpIndex.setStatus('current')
if mibBuilder.loadTexts: agCfgDumpIndex.setDescription('The table index.')
agCfgDumpString = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 5, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCfgDumpString.setStatus('current')
if mibBuilder.loadTexts: agCfgDumpString.setDescription('A string in the dump table.')
totalMemoryStats = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalMemoryStats.setStatus('current')
if mibBuilder.loadTexts: totalMemoryStats.setDescription('The total memory in bytes.')
memoryFreeStats = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 13, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryFreeStats.setStatus('current')
if mibBuilder.loadTexts: memoryFreeStats.setDescription('The free memory in bytes.')
memorySharedStats = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 13, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memorySharedStats.setStatus('current')
if mibBuilder.loadTexts: memorySharedStats.setDescription('The shared memory in bytes.')
memoryBufferStats = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 13, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryBufferStats.setStatus('current')
if mibBuilder.loadTexts: memoryBufferStats.setDescription('The buffer memory in bytes.')
swapTotalStats = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 13, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swapTotalStats.setStatus('current')
if mibBuilder.loadTexts: swapTotalStats.setDescription('The total swap memory in bytes.')
swapFreeStats = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 13, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swapFreeStats.setStatus('current')
if mibBuilder.loadTexts: swapFreeStats.setDescription('The free swap memory in bytes.')
highTotalStats = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 13, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: highTotalStats.setStatus('current')
if mibBuilder.loadTexts: highTotalStats.setDescription('The total high memory in bytes.')
highFreeStats = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 13, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: highFreeStats.setStatus('current')
if mibBuilder.loadTexts: highFreeStats.setDescription('The free high memory in bytes.')
geaportInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 7, 1), )
if mibBuilder.loadTexts: geaportInfoTable.setStatus('current')
if mibBuilder.loadTexts: geaportInfoTable.setDescription('The table of gea port mapping.')
geaportInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 7, 1, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "geaportInfoLogicalIndex"))
if mibBuilder.loadTexts: geaportInfoTableEntry.setStatus('current')
if mibBuilder.loadTexts: geaportInfoTableEntry.setDescription('An entry in the geaport table mapping.')
geaportInfoLogicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 7, 1, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geaportInfoLogicalIndex.setStatus('current')
if mibBuilder.loadTexts: geaportInfoLogicalIndex.setDescription('The logical port index.')
geaportInfoPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geaportInfoPort.setStatus('current')
if mibBuilder.loadTexts: geaportInfoPort.setDescription('The GEA Port (0-based).')
geaportInfoUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: geaportInfoUnit.setStatus('current')
if mibBuilder.loadTexts: geaportInfoUnit.setDescription('The GEA Unit.')
ufdInfoState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdInfoState.setStatus('current')
if mibBuilder.loadTexts: ufdInfoState.setDescription('Uplink Failure Detection State.')
ufdInfoLtMStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("forwarding", 3), ("blocked", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdInfoLtMStatus.setStatus('current')
if mibBuilder.loadTexts: ufdInfoLtMStatus.setDescription('LtM Status.')
ufdInfoLtMPorts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 8, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdInfoLtMPorts.setStatus('current')
if mibBuilder.loadTexts: ufdInfoLtMPorts.setDescription('The LtM port list. The ports are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ port 8 || || || ||___ port 7 || |____ port 6 || . . . ||_________ port 1 |__________ reserved where x : 1 - The represented port belongs to LtM 0 - The represented port does not belong to LtM.')
ufdInfoLtMTrunks = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 8, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdInfoLtMTrunks.setStatus('current')
if mibBuilder.loadTexts: ufdInfoLtMTrunks.setDescription('The LtM trunk list. The trunks are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ trunk 8 || || || ||___ trunk 7 || |____ trunk 6 || . . . ||_________ trunk 1 |__________ reserved where x : 1 - The represented trunk belongs to LtM 0 - The represented trunk does not belong to LtM.')
ufdInfoLtMAdminkey = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdInfoLtMAdminkey.setStatus('current')
if mibBuilder.loadTexts: ufdInfoLtMAdminkey.setDescription('The LtM admin key.')
ufdInfoLtDStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("autoDisabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdInfoLtDStatus.setStatus('current')
if mibBuilder.loadTexts: ufdInfoLtDStatus.setDescription('LtD status.')
ufdInfoLtDPorts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 8, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdInfoLtDPorts.setStatus('current')
if mibBuilder.loadTexts: ufdInfoLtDPorts.setDescription('The LtD port list. The ports are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ port 8 || || || ||___ port 7 || |____ port 6 || . . . ||_________ port 1 |__________ reserved where x : 1 - The represented port belongs to LtD 0 - The represented port does not belong to LtD.')
ufdInfoLtDTrunks = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 8, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdInfoLtDTrunks.setStatus('current')
if mibBuilder.loadTexts: ufdInfoLtDTrunks.setDescription('The LtD trunk list. The trunks are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ trunk 8 || || || ||___ trunk 7 || |____ trunk 6 || . . . ||_________ trunk 1 |__________ reserved where x : 1 - The represented trunk belongs to LtD 0 - The represented trunk does not belong to LtD.')
ufdInfoLtDAdminkeyMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 8, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdInfoLtDAdminkeyMaxEnt.setStatus('current')
if mibBuilder.loadTexts: ufdInfoLtDAdminkeyMaxEnt.setDescription('The maximum number of rows in the LtD admin key configuration table.')
ufdInfoLtDAdminkeyTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 8, 10), )
if mibBuilder.loadTexts: ufdInfoLtDAdminkeyTable.setStatus('current')
if mibBuilder.loadTexts: ufdInfoLtDAdminkeyTable.setDescription('The table of LtD admin key configuration.')
ufdInfoLtDAdminkeyTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 8, 10, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ufdInfoLtDAdminkey"))
if mibBuilder.loadTexts: ufdInfoLtDAdminkeyTableEntry.setStatus('current')
if mibBuilder.loadTexts: ufdInfoLtDAdminkeyTableEntry.setDescription('A row in the LtD admin key table.')
ufdInfoLtDAdminkey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 8, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdInfoLtDAdminkey.setStatus('current')
if mibBuilder.loadTexts: ufdInfoLtDAdminkey.setDescription('The LtD admin key.')
sfpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 9, 1), )
if mibBuilder.loadTexts: sfpInfoTable.setStatus('current')
if mibBuilder.loadTexts: sfpInfoTable.setDescription('The table of external port SFP information.')
sfpInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 9, 1, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "sfpInfoIndx"))
if mibBuilder.loadTexts: sfpInfoTableEntry.setStatus('current')
if mibBuilder.loadTexts: sfpInfoTableEntry.setDescription('A row in the external port SFP information table.')
sfpInfoIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 9, 1, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpInfoIndx.setStatus('current')
if mibBuilder.loadTexts: sfpInfoIndx.setDescription('The external port SFX index.')
sfpInfoPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 9, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpInfoPort.setStatus('current')
if mibBuilder.loadTexts: sfpInfoPort.setDescription('External Port SFP/XFP alias.')
sfpInfoDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 9, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpInfoDevice.setStatus('current')
if mibBuilder.loadTexts: sfpInfoDevice.setDescription('External Port SFP/XFP Device.')
sfpInfoTXEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5))).clone(namedValues=NamedValues(("notInstalled", 1), ("enabled", 2), ("disabled", 3), ("notAvailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpInfoTXEnable.setStatus('current')
if mibBuilder.loadTexts: sfpInfoTXEnable.setDescription('External Port SFP/XFP TX-Enable.')
sfpInfoRXSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notInstalled", 1), ("down", 2), ("link", 3), ("notAvailable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpInfoRXSignal.setStatus('current')
if mibBuilder.loadTexts: sfpInfoRXSignal.setDescription('External Port SFP/XFP RX-Signal.')
sfpInfoTXFault = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notInstalled", 1), ("fault", 2), ("none", 3), ("notAvailable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpInfoTXFault.setStatus('current')
if mibBuilder.loadTexts: sfpInfoTXFault.setDescription('External Port SFP/XFP TX-Fault.')
sfpInfoApproved = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notInstalled", 1), ("notApproved", 2), ("sfpApproved", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpInfoApproved.setStatus('current')
if mibBuilder.loadTexts: sfpInfoApproved.setDescription('External Port SFP/XFP Approval.')
sfpInfoVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 9, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpInfoVendor.setStatus('current')
if mibBuilder.loadTexts: sfpInfoVendor.setDescription('External Port SFP/XFP device vendor.')
sfpInfoSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 3, 9, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpInfoSerial.setStatus('current')
if mibBuilder.loadTexts: sfpInfoSerial.setDescription('External Port SFP/XFP device serial.')
ntpPrimaryServerReqSent = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpPrimaryServerReqSent.setStatus('current')
if mibBuilder.loadTexts: ntpPrimaryServerReqSent.setDescription('The total number of NTP requests sent to Primary NTP Server.')
ntpPrimaryServerRespRcvd = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpPrimaryServerRespRcvd.setStatus('current')
if mibBuilder.loadTexts: ntpPrimaryServerRespRcvd.setDescription('The total number of NTP responces received from Primary NTP Server.')
ntpPrimaryServerUpdates = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpPrimaryServerUpdates.setStatus('current')
if mibBuilder.loadTexts: ntpPrimaryServerUpdates.setDescription('The total number of NTP Updates by Primary NTP Server.')
ntpSecondaryServerReqSent = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 9, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpSecondaryServerReqSent.setStatus('current')
if mibBuilder.loadTexts: ntpSecondaryServerReqSent.setDescription('The total number of NTP requests sent to Secondary NTP Server.')
ntpSecondaryServerRespRcvd = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpSecondaryServerRespRcvd.setStatus('current')
if mibBuilder.loadTexts: ntpSecondaryServerRespRcvd.setDescription('The total number of NTP responces received from Secondary NTP Server.')
ntpSecondaryServerUpdates = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 9, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpSecondaryServerUpdates.setStatus('current')
if mibBuilder.loadTexts: ntpSecondaryServerUpdates.setDescription('The total number of NTP Updates by Secondary NTP Server.')
ntpLastUpdateServer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 9, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpLastUpdateServer.setStatus('current')
if mibBuilder.loadTexts: ntpLastUpdateServer.setDescription('The type of ntp server updated last time.')
ntpLastUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 9, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpLastUpdateTime.setStatus('current')
if mibBuilder.loadTexts: ntpLastUpdateTime.setDescription('The last time updated by ntp server.')
ntpClearStats = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpClearStats.setStatus('current')
if mibBuilder.loadTexts: ntpClearStats.setDescription('Setting this value to clear(2) clears the stats for ntp.')
ntpSystemCurrentTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 9, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpSystemCurrentTime.setStatus('current')
if mibBuilder.loadTexts: ntpSystemCurrentTime.setDescription('The current system time.')
aclStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 12, 1), )
if mibBuilder.loadTexts: aclStatsTable.setStatus('current')
if mibBuilder.loadTexts: aclStatsTable.setDescription('The table of ACL statistics.')
aclStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 12, 1, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "aclStatsIndex"))
if mibBuilder.loadTexts: aclStatsTableEntry.setStatus('current')
if mibBuilder.loadTexts: aclStatsTableEntry.setDescription('Statistics about a particular ACL configuration entry.')
aclStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclStatsIndex.setStatus('current')
if mibBuilder.loadTexts: aclStatsIndex.setDescription('The acl index.')
aclStatsHits = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 12, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclStatsHits.setStatus('current')
if mibBuilder.loadTexts: aclStatsHits.setDescription('Total number of hits for this ACL entry')
aclClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclClearStats.setStatus('current')
if mibBuilder.loadTexts: aclClearStats.setDescription('Setting this value to clear(2) clears the stats for the ACL.')
snmpClearStats = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 1, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpClearStats.setStatus('current')
if mibBuilder.loadTexts: snmpClearStats.setDescription('Setting this to clear(2) results in clearing the SNMP statistics.')
layer3 = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3))
layer3Configs = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1))
layer3Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2))
layer3Info = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3))
layer3Oper = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 4))
ipInterfaceCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 1))
ipGatewayCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 2))
ipStaticRouteCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 3))
ipForwardCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 4))
vrrpCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6))
arpCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 7))
ipBootpCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 8))
dnsCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 9))
ipNwfCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 10))
ipRmapCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 11))
ospfCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13))
ipGeneralCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 14))
igmpCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15))
rip2Cfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18))
arpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 2))
routeStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 3))
vrrpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 4))
ospfStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5))
clearStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 6))
igmpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 7))
ipStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 8))
icmpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 9))
tcpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 10))
udpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 11))
rip2Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 13))
dnsStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 14))
geal3Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 15))
ipRoutingInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 1))
arpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 2))
vrrpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 3))
ospfInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4))
igmpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 5))
rip2Info = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 7))
ipInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8))
vrrpOper = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 4, 1))
dhcpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 15))
dhcpInfoMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 15, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpInfoMacAddr.setStatus('current')
if mibBuilder.loadTexts: dhcpInfoMacAddr.setDescription('The MAC address of the interface.')
dhcpInfoAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 15, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpInfoAddr.setStatus('current')
if mibBuilder.loadTexts: dhcpInfoAddr.setDescription('The IP address of the interface.')
dhcpInfoSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 15, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpInfoSubnetMask.setStatus('current')
if mibBuilder.loadTexts: dhcpInfoSubnetMask.setDescription('The subnet mask of the interface.')
dhcpInfoDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 15, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpInfoDefaultGateway.setStatus('current')
if mibBuilder.loadTexts: dhcpInfoDefaultGateway.setDescription('The IP address of default gateway for the interface.')
dhcpInfoServer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 15, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpInfoServer.setStatus('current')
if mibBuilder.loadTexts: dhcpInfoServer.setDescription('The IP address of the DHCP server that leased the ip of the interface.')
dhcpInfoLeaseObtained = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 15, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpInfoLeaseObtained.setStatus('current')
if mibBuilder.loadTexts: dhcpInfoLeaseObtained.setDescription('The time and date when the lease was obtained .')
dhcpInfoLeaseExpires = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 15, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpInfoLeaseExpires.setStatus('current')
if mibBuilder.loadTexts: dhcpInfoLeaseExpires.setDescription('The time and date when the lease was obtained .')
ipInterfaceTableMax = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInterfaceTableMax.setStatus('current')
if mibBuilder.loadTexts: ipInterfaceTableMax.setDescription('The maximum number of rows in the IP interface table.')
ipCurCfgIntfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 1, 2), )
if mibBuilder.loadTexts: ipCurCfgIntfTable.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgIntfTable.setDescription('The table of IP interface configuration.')
ipCurCfgIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 1, 2, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ipCurCfgIntfIndex"))
if mibBuilder.loadTexts: ipCurCfgIntfEntry.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgIntfEntry.setDescription('A row in the Ip interface table')
ipCurCfgIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfIndex.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgIntfIndex.setDescription('The interface number for which the IP information is related.')
ipCurCfgIntfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 1, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfAddr.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgIntfAddr.setDescription('The IP address of the interface.')
ipCurCfgIntfMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 1, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfMask.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgIntfMask.setDescription('The subnet mask of the interface.')
ipCurCfgIntfBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 1, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfBroadcast.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgIntfBroadcast.setDescription('The broadcast address of the interface.')
ipCurCfgIntfVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfVlan.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgIntfVlan.setDescription('The VLAN associated with the interface.')
ipCurCfgIntfState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfState.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgIntfState.setDescription('The state of the interface.')
ipCurCfgIntfBootpRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfBootpRelay.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgIntfBootpRelay.setDescription('Enable/disable BOOTP relay.')
ipNewCfgIntfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 1, 3), )
if mibBuilder.loadTexts: ipNewCfgIntfTable.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgIntfTable.setDescription('The table of interface configuration in the New Configuration Block.')
ipNewCfgIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 1, 3, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ipNewCfgIntfIndex"))
if mibBuilder.loadTexts: ipNewCfgIntfEntry.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgIntfEntry.setDescription('A row in the Ip interface table')
ipNewCfgIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgIntfIndex.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgIntfIndex.setDescription('The interface number for which the IP information is related.')
ipNewCfgIntfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 1, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfAddr.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgIntfAddr.setDescription('The IP address of the interface.')
ipNewCfgIntfMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 1, 3, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfMask.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgIntfMask.setDescription('The subnet mask of the interface.')
ipNewCfgIntfVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfVlan.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgIntfVlan.setDescription('The VLAN associated with the interface.')
ipNewCfgIntfState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfState.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgIntfState.setDescription('The state of the interface.')
ipNewCfgIntfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfDelete.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgIntfDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
ipNewCfgIntfBootpRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfBootpRelay.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgIntfBootpRelay.setDescription('Enable/disable BOOTP relay.')
ipGatewayTableMax = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipGatewayTableMax.setStatus('current')
if mibBuilder.loadTexts: ipGatewayTableMax.setDescription('The maximum number of rows in the IP gateway table.')
ipCurCfgGwTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 2, 4), )
if mibBuilder.loadTexts: ipCurCfgGwTable.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgGwTable.setDescription('The table of gateways in the Current configuration Block.')
ipCurCfgGwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 2, 4, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ipCurCfgGwIndex"))
if mibBuilder.loadTexts: ipCurCfgGwEntry.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgGwEntry.setDescription('A row in the Ip gateway table')
ipCurCfgGwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwIndex.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgGwIndex.setDescription('The gateway number for which the information is related.')
ipCurCfgGwAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 2, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwAddr.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgGwAddr.setDescription('The IP address of the default gateway.')
ipCurCfgGwInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwInterval.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgGwInterval.setDescription('The interval between ping attempts.')
ipCurCfgGwRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwRetry.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgGwRetry.setDescription('The number of failed attempts to declare the default gateway DOWN.')
ipCurCfgGwState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwState.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgGwState.setDescription('The state of the default gateway.')
ipCurCfgGwArp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwArp.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgGwArp.setDescription('The state of ARP only health checks.')
ipNewCfgGwTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 2, 5), )
if mibBuilder.loadTexts: ipNewCfgGwTable.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgGwTable.setDescription('The table of gateway configuration in the new configuration block.')
ipNewCfgGwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 2, 5, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ipNewCfgGwIndex"))
if mibBuilder.loadTexts: ipNewCfgGwEntry.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgGwEntry.setDescription('A row in the Ip default gateway table')
ipNewCfgGwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgGwIndex.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgGwIndex.setDescription('The gateway number for which the information is related.')
ipNewCfgGwAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 2, 5, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgGwAddr.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgGwAddr.setDescription('The IP address of the default gateway.')
ipNewCfgGwInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgGwInterval.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgGwInterval.setDescription('The interval in seconds between ping attempts.')
ipNewCfgGwRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgGwRetry.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgGwRetry.setDescription('The number of failed attempts to declare the default gateway DOWN.')
ipNewCfgGwState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgGwState.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgGwState.setDescription('The state of the default gateway.')
ipNewCfgGwDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgGwDelete.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgGwDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
ipNewCfgGwArp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgGwArp.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgGwArp.setDescription('The state of the ARP only health checks.')
ipStaticRouteTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStaticRouteTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: ipStaticRouteTableMaxSize.setDescription('The maximum number of rows in the Static Route table.')
ipCurCfgStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 3, 2), )
if mibBuilder.loadTexts: ipCurCfgStaticRouteTable.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgStaticRouteTable.setDescription('The table of static routes in the current configuration block.')
ipCurCfgStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 3, 2, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ipCurCfgStaticRouteIndx"))
if mibBuilder.loadTexts: ipCurCfgStaticRouteEntry.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgStaticRouteEntry.setDescription('A row in the static IP route table')
ipCurCfgStaticRouteIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRouteIndx.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgStaticRouteIndx.setDescription('The index of the static routing table.')
ipCurCfgStaticRouteDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 3, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRouteDestIp.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgStaticRouteDestIp.setDescription('The destination IP address of this route.')
ipCurCfgStaticRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 3, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRouteMask.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgStaticRouteMask.setDescription('The destination IP address of this route.')
ipCurCfgStaticRouteGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 3, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRouteGateway.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgStaticRouteGateway.setDescription('The destination IP address of this route.')
ipCurCfgStaticRouteInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRouteInterface.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgStaticRouteInterface.setDescription('The IP interface of this route. The IP address of the specified interface shall be use as source IP when performs routing.')
ipNewCfgStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 3, 3), )
if mibBuilder.loadTexts: ipNewCfgStaticRouteTable.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgStaticRouteTable.setDescription('The table of static routes in the new configuration block.')
ipStaticRouteClearAllByDestIp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 3, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipStaticRouteClearAllByDestIp.setStatus('current')
if mibBuilder.loadTexts: ipStaticRouteClearAllByDestIp.setDescription('Clears all static routes with the specified destination IP address.')
ipStaticRouteClearAllByGatewayIp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 3, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipStaticRouteClearAllByGatewayIp.setStatus('current')
if mibBuilder.loadTexts: ipStaticRouteClearAllByGatewayIp.setDescription('Clears all static routes with the specified gateway IP address.')
ipStaticRouteClearAllByInterface = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipStaticRouteClearAllByInterface.setStatus('current')
if mibBuilder.loadTexts: ipStaticRouteClearAllByInterface.setDescription('Clears all routes on the specified inteface number.')
ipStaticRouteClearAll = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipStaticRouteClearAll.setStatus('current')
if mibBuilder.loadTexts: ipStaticRouteClearAll.setDescription('When set to clear(2),clears all static routes. Otherwhise nothing is done.')
ipNewCfgStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 3, 3, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ipNewCfgStaticRouteIndx"))
if mibBuilder.loadTexts: ipNewCfgStaticRouteEntry.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgStaticRouteEntry.setDescription('A row in the static IP route table')
ipNewCfgStaticRouteIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgStaticRouteIndx.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgStaticRouteIndx.setDescription('The index of the static routing table.')
ipNewCfgStaticRouteDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 3, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticRouteDestIp.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgStaticRouteDestIp.setDescription('The destination IP address of this route.')
ipNewCfgStaticRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 3, 3, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticRouteMask.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgStaticRouteMask.setDescription('The subnet mask of this route.')
ipNewCfgStaticRouteGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 3, 3, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticRouteGateway.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgStaticRouteGateway.setDescription('The IP address of the gateway for this route.')
ipNewCfgStaticRouteAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticRouteAction.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgStaticRouteAction.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
ipNewCfgStaticRouteInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 3, 3, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticRouteInterface.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgStaticRouteInterface.setDescription('The IP interface of this route. The IP address of the specified interface shall be use as source IP when performs routing.')
ripCurCfgIntfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 1), )
if mibBuilder.loadTexts: ripCurCfgIntfTable.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgIntfTable.setDescription('The table of RIP on IP interface configuration in the current_config.')
ripCurCfgIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 1, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ripCurCfgIntfIndex"))
if mibBuilder.loadTexts: ripCurCfgIntfEntry.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgIntfEntry.setDescription('Information about RIP on IP interface.')
ripCurCfgIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfIndex.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgIntfIndex.setDescription('The interface number for which the RIP information is related.')
ripCurCfgIntfVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ripVersion1", 1), ("ripVersion2", 2), ("ripVersionBoth", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfVersion.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgIntfVersion.setDescription('RIP version.')
ripCurCfgIntfSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfSupply.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgIntfSupply.setDescription('Enable or disable supplying route updates.')
ripCurCfgIntfListen = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfListen.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgIntfListen.setDescription('Enable or disable listening to route updates.')
ripCurCfgIntfDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("both", 1), ("listen", 2), ("supply", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfDefault.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgIntfDefault.setDescription('Specifies what RIP does with default routes.')
ripCurCfgIntfTrigUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfTrigUpdate.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgIntfTrigUpdate.setDescription('Enable or disable tirggered updates.')
ripCurCfgIntfMcastUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfMcastUpdate.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgIntfMcastUpdate.setDescription('Enable or disable multicast updates.')
ripCurCfgIntfPoisonReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfPoisonReverse.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgIntfPoisonReverse.setDescription('RIP poison reverse.')
ripCurCfgIntfState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfState.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgIntfState.setDescription('Enable or disable RIP protocol.')
ripCurCfgIntfMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfMetric.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgIntfMetric.setDescription('RIP route metric for this interface.')
ripCurCfgIntfAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("password", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfAuth.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgIntfAuth.setDescription('Enable or disable RIP update authorization with a simple plain text password.')
ripCurCfgIntfKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfKey.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgIntfKey.setDescription('RIP update authentication password.')
ripCurCfgIntfSplitHorizon = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfSplitHorizon.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgIntfSplitHorizon.setDescription('RIP split horizon.')
ripNewCfgIntfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 2), )
if mibBuilder.loadTexts: ripNewCfgIntfTable.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgIntfTable.setDescription('The table of RIP on IP interface configuration in the new_config.')
ripNewCfgIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 2, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ripNewCfgIntfIndex"))
if mibBuilder.loadTexts: ripNewCfgIntfEntry.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgIntfEntry.setDescription('Information about RIP on IP interface.')
ripNewCfgIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripNewCfgIntfIndex.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgIntfIndex.setDescription('The interface number for which the RIP information is related.')
ripNewCfgIntfVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ripVersion1", 1), ("ripVersion2", 2), ("ripVersionBoth", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgIntfVersion.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgIntfVersion.setDescription('RIP version.')
ripNewCfgIntfSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgIntfSupply.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgIntfSupply.setDescription('Enable or disable supplying route updates.')
ripNewCfgIntfListen = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgIntfListen.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgIntfListen.setDescription('Enable or disable listening to route updates.')
ripNewCfgIntfDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("both", 1), ("listen", 2), ("supply", 3), ("none", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ripNewCfgIntfDefault.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgIntfDefault.setDescription('Specifies what RIP does with default routes. The default routes action could be set to listen/supply/both/none.')
ripNewCfgIntfTrigUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgIntfTrigUpdate.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgIntfTrigUpdate.setDescription('Enable or disable tirggered updates.')
ripNewCfgIntfMcastUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgIntfMcastUpdate.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgIntfMcastUpdate.setDescription('Enable or disable multicast updates.')
ripNewCfgIntfPoisonReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgIntfPoisonReverse.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgIntfPoisonReverse.setDescription('RIP poison reverse.')
ripNewCfgIntfState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ripNewCfgIntfState.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgIntfState.setDescription('Enable or disable RIP protocol.')
ripNewCfgIntfMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgIntfMetric.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgIntfMetric.setDescription('RIP route metric for this interface.')
ripNewCfgIntfAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("password", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgIntfAuth.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgIntfAuth.setDescription('Enable or disable RIP update authorization with a simple plain text password.')
ripNewCfgIntfKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ripNewCfgIntfKey.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgIntfKey.setDescription('RIP update authentication password.')
ripNewCfgIntfSplitHorizon = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgIntfSplitHorizon.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgIntfSplitHorizon.setDescription('RIP split horizon.')
ripGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 3))
rip2CurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rip2CurCfgState.setStatus('current')
if mibBuilder.loadTexts: rip2CurCfgState.setDescription('RIP global state.')
rip2NewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rip2NewCfgState.setStatus('current')
if mibBuilder.loadTexts: rip2NewCfgState.setDescription('Globally turn RIP on or off.')
rip2CurCfgUpdatePeriod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rip2CurCfgUpdatePeriod.setStatus('current')
if mibBuilder.loadTexts: rip2CurCfgUpdatePeriod.setDescription('Update Period in seconds.')
rip2NewCfgUpdatePeriod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rip2NewCfgUpdatePeriod.setStatus('current')
if mibBuilder.loadTexts: rip2NewCfgUpdatePeriod.setDescription('Update Period in seconds.')
ripRouteRedistribution = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 4))
ripRedistributeStatic = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 4, 1))
ripCurCfgStaticMetric = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgStaticMetric.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgStaticMetric.setDescription('The metric to be assigned to static routes. A value of 0 indicates none.')
ripNewCfgStaticMetric = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgStaticMetric.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgStaticMetric.setDescription('The metric to be assigned to static routes. A value of 0 indicates none.')
ripCurCfgStaticOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 4, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgStaticOutRmapList.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgStaticOutRmapList.setDescription('The route maps present in the out route map list. The route maps are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Rmap 9 || || || ||___ Rmap 8 || |____ Rmap 7 || . . . ||_________ Rmap 2 |__________ Rmap 1 where x : 1 - The represented route map is selected 0 - The represented route map is not selected')
ripNewCfgStaticOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 4, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripNewCfgStaticOutRmapList.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgStaticOutRmapList.setDescription('The route maps present in the out route map list. The route maps are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Rmap 9 || || || ||___ Rmap 8 || |____ Rmap 7 || . . . ||_________ Rmap 2 |__________ Rmap 1 where x : 1 - The represented route map is selected 0 - The represented route map is not selected')
ripNewCfgStaticAddOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgStaticAddOutRmap.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgStaticAddOutRmap.setDescription('The route map to be add into out-rmap list. When read, 0 is returned.')
ripNewCfgStaticRemoveOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgStaticRemoveOutRmap.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgStaticRemoveOutRmap.setDescription('The route map to be removed from out-rmap list. When read, 0 is returned.')
ripRedistributeFixed = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 4, 4))
ripCurCfgFixedMetric = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 4, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgFixedMetric.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgFixedMetric.setDescription('The export metric for fixed routes. A value of 0 indicates none')
ripNewCfgFixedMetric = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 4, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgFixedMetric.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgFixedMetric.setDescription('The export metric for fixed routes. A value of 0 indicates none')
ripCurCfgFixedOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 4, 4, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgFixedOutRmapList.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgFixedOutRmapList.setDescription('The route maps present in the out route map list. The route maps are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Rmap 9 || || || ||___ Rmap 8 || |____ Rmap 7 || . . . ||_________ Rmap 2 |__________ Rmap 1 where x : 1 - The represented route map is selected 0 - The represented route map is not selected')
ripNewCfgFixedOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 4, 4, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripNewCfgFixedOutRmapList.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgFixedOutRmapList.setDescription('The route maps present in the out route map list. The route maps are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Rmap 9 || || || ||___ Rmap 8 || |____ Rmap 7 || . . . ||_________ Rmap 2 |__________ Rmap 1 where x : 1 - The represented route map is selected 0 - The represented route map is not selected')
ripNewCfgFixedAddOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 4, 4, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgFixedAddOutRmap.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgFixedAddOutRmap.setDescription('The route map to be add into out-rmap list. When read, 0 is returned.')
ripNewCfgFixedRemoveOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 4, 4, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgFixedRemoveOutRmap.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgFixedRemoveOutRmap.setDescription('The route map to be removed from out-rmap list. When read, 0 is returned.')
ripRedistributeOspf = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 4, 5))
ripCurCfgOspfMetric = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 4, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgOspfMetric.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgOspfMetric.setDescription('The export metric for RIP routes. A value of 0 indicates none')
ripNewCfgOspfMetric = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 4, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgOspfMetric.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgOspfMetric.setDescription('The export metric for RIP routes. A value of 0 indicates none')
ripCurCfgOspfOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 4, 5, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgOspfOutRmapList.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgOspfOutRmapList.setDescription('The route maps present in the out route map list. The route maps are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Rmap 9 || || || ||___ Rmap 8 || |____ Rmap 7 || . . . ||_________ Rmap 2 |__________ Rmap 1 where x : 1 - The represented route map is selected 0 - The represented route map is not selected')
ripNewCfgOspfOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 4, 5, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripNewCfgOspfOutRmapList.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgOspfOutRmapList.setDescription('The route maps present in the out route map list. The route maps are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Rmap 9 || || || ||___ Rmap 8 || |____ Rmap 7 || . . . ||_________ Rmap 2 |__________ Rmap 1 where x : 1 - The represented route map is selected 0 - The represented route map is not selected')
ripNewCfgOspfAddOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 4, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgOspfAddOutRmap.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgOspfAddOutRmap.setDescription('The route map to be add into out-rmap list. When read, 0 is returned.')
ripNewCfgOspfRemoveOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 4, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgOspfRemoveOutRmap.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgOspfRemoveOutRmap.setDescription('The route map to be removed from out-rmap list. When read, 0 is returned.')
ripRedistributeEospf = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 4, 6))
ripCurCfgEospfMetric = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 4, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgEospfMetric.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgEospfMetric.setDescription('The export metric for RIP routes. A value of 0 indicates none')
ripNewCfgEospfMetric = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 4, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgEospfMetric.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgEospfMetric.setDescription('The export metric for RIP routes. A value of 0 indicates none')
ripCurCfgEospfOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 4, 6, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgEospfOutRmapList.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgEospfOutRmapList.setDescription('The route maps present in the out route map list. The route maps are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Rmap 9 || || || ||___ Rmap 8 || |____ Rmap 7 || . . . ||_________ Rmap 2 |__________ Rmap 1 where x : 1 - The represented route map is selected 0 - The represented route map is not selected')
ripNewCfgEospfOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 4, 6, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripNewCfgEospfOutRmapList.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgEospfOutRmapList.setDescription('The route maps present in the out route map list. The route maps are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Rmap 9 || || || ||___ Rmap 8 || |____ Rmap 7 || . . . ||_________ Rmap 2 |__________ Rmap 1 where x : 1 - The represented route map is selected 0 - The represented route map is not selected')
ripNewCfgEospfAddOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 4, 6, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgEospfAddOutRmap.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgEospfAddOutRmap.setDescription('The route map to be add into out-rmap list. When read, 0 is returned.')
ripNewCfgEospfRemoveOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 18, 4, 6, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgEospfRemoveOutRmap.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgEospfRemoveOutRmap.setDescription('The route map to be removed from out-rmap list. When read, 0 is returned.')
ipFwdGeneralCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 4, 1))
ipFwdCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdCurCfgState.setStatus('current')
if mibBuilder.loadTexts: ipFwdCurCfgState.setDescription('IP forwarding global state.')
ipFwdNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFwdNewCfgState.setStatus('current')
if mibBuilder.loadTexts: ipFwdNewCfgState.setDescription('IP forwarding global state.')
ipFwdCurCfgDirectedBcast = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdCurCfgDirectedBcast.setStatus('current')
if mibBuilder.loadTexts: ipFwdCurCfgDirectedBcast.setDescription('Enable or disable forwarding directed broadcasts.')
ipFwdNewCfgDirectedBcast = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFwdNewCfgDirectedBcast.setStatus('current')
if mibBuilder.loadTexts: ipFwdNewCfgDirectedBcast.setDescription('Enable or disable forwarding directed broadcasts.')
arpCurCfgReARPPeriod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpCurCfgReARPPeriod.setStatus('current')
if mibBuilder.loadTexts: arpCurCfgReARPPeriod.setDescription('Re-ARP Period in seconds.')
arpNewCfgReARPPeriod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpNewCfgReARPPeriod.setStatus('current')
if mibBuilder.loadTexts: arpNewCfgReARPPeriod.setDescription('Re-ARP Period in seconds.')
ipStaticArpTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 7, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStaticArpTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: ipStaticArpTableMaxSize.setDescription('The maximum number of rows in the Static ARP table.')
ipCurCfgStaticArpTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 7, 4), )
if mibBuilder.loadTexts: ipCurCfgStaticArpTable.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgStaticArpTable.setDescription('The table of static ARPs in the current configuration block.')
ipCurCfgStaticArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 7, 4, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ipCurCfgStaticArpIndx"))
if mibBuilder.loadTexts: ipCurCfgStaticArpEntry.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgStaticArpEntry.setDescription('A row in the static ARP table')
ipCurCfgStaticArpIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 7, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticArpIndx.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgStaticArpIndx.setDescription('The index of the static ARP table.')
ipCurCfgStaticArpIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 7, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticArpIp.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgStaticArpIp.setDescription('The IP address for the ARP entry.')
ipCurCfgStaticArpMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 7, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticArpMAC.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgStaticArpMAC.setDescription('The MAC address for the ARP entry.')
ipCurCfgStaticArpVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 7, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticArpVlan.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgStaticArpVlan.setDescription('The VLAN for the ARP entry.')
ipCurCfgStaticArpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 7, 4, 1, 5), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticArpPort.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgStaticArpPort.setDescription('The port for the ARP entry.')
ipNewCfgStaticArpTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 7, 5), )
if mibBuilder.loadTexts: ipNewCfgStaticArpTable.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgStaticArpTable.setDescription('The table of static ARPs in the new configuration block.')
ipNewCfgStaticArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 7, 5, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ipNewCfgStaticArpIndx"))
if mibBuilder.loadTexts: ipNewCfgStaticArpEntry.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgStaticArpEntry.setDescription('A row in the static ARP table')
ipNewCfgStaticArpIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 7, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgStaticArpIndx.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgStaticArpIndx.setDescription('The index of the static ARP table.')
ipNewCfgStaticArpIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 7, 5, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticArpIp.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgStaticArpIp.setDescription('The IP address for the ARP entry.')
ipNewCfgStaticArpMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 7, 5, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticArpMAC.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgStaticArpMAC.setDescription('The MAC address for the ARP entry.')
ipNewCfgStaticArpVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 7, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticArpVlan.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgStaticArpVlan.setDescription('The VLAN for the ARP entry.')
ipNewCfgStaticArpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 7, 5, 1, 5), PortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticArpPort.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgStaticArpPort.setDescription('The port for the ARP entry.')
ipNewCfgStaticArpAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 7, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticArpAction.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgStaticArpAction.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
ipStaticArpClearAll = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipStaticArpClearAll.setStatus('current')
if mibBuilder.loadTexts: ipStaticArpClearAll.setDescription('When set to clear(2),clears all static ARP entries. Otherwhise nothing is done.')
vrrpGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 1))
vrrpCurCfgGenState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenState.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgGenState.setDescription('Enable or disable VRRP operation globally.')
vrrpNewCfgGenState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenState.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgGenState.setDescription('Enable or disable VRRP operation globally.')
vrrpCurCfgGenTckVirtRtrInc = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckVirtRtrInc.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgGenTckVirtRtrInc.setDescription('The increment of VRRP virtual router priority. The priority is adjusted by tracking the state of other virtual routers.')
vrrpNewCfgGenTckVirtRtrInc = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckVirtRtrInc.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgGenTckVirtRtrInc.setDescription('The increment of VRRP virtual router priority. The priority is adjusted by tracking the state of other virtual routers.')
vrrpCurCfgGenTckIpIntfInc = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckIpIntfInc.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgGenTckIpIntfInc.setDescription('The increment of VRRP virtual router priority. The priority is adjusted by tracking the state of other router interfaces.')
vrrpNewCfgGenTckIpIntfInc = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckIpIntfInc.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgGenTckIpIntfInc.setDescription('The increment of VRRP virtual router priority. The priority is adjusted by tracking the state of other router interfaces.')
vrrpCurCfgGenTckVlanPortInc = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckVlanPortInc.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgGenTckVlanPortInc.setDescription('The increment of VRRP virtual router priority. The priority is adjusted by tracking the port state of ports that belongs to the same virtual LAN as the virtual router.')
vrrpNewCfgGenTckVlanPortInc = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckVlanPortInc.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgGenTckVlanPortInc.setDescription('The increment of VRRP virtual router priority. The priority is adjusted by tracking the port state of ports that belongs to the same virtual LAN as the virtual router.')
vrrpVirtRtrTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpVirtRtrTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: vrrpVirtRtrTableMaxSize.setDescription('The maximum number of entries in VRRP virtual router table.')
vrrpCurCfgVirtRtrTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 3), )
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTable.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTable.setDescription('The table of VRRP virtual routers configuration in current_config.')
vrrpCurCfgVirtRtrTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 3, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "vrrpCurCfgVirtRtrIndx"))
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTableEntry.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTableEntry.setDescription('Information about a VRRP virtual router.')
vrrpCurCfgVirtRtrIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrIndx.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrIndx.setDescription('The VRRP virtual router table index.')
vrrpCurCfgVirtRtrID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrID.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrID.setDescription('The VRRP virtual router identifier.')
vrrpCurCfgVirtRtrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrAddr.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrAddr.setDescription('The VRRP virtual router IP address.')
vrrpCurCfgVirtRtrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrIfIndex.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrIfIndex.setDescription('The IfIndex that the VRRP virtual router is representing.')
vrrpCurCfgVirtRtrInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrInterval.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrInterval.setDescription('The time interval between VRRP advertisements in seconds. When FAST_ADVERTISEMENT is enabled, this object indicates advertisement interval in centi-seconds')
vrrpCurCfgVirtRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrPriority.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrPriority.setDescription('The priority value to be used by the specified VRRP virtual routers.')
vrrpCurCfgVirtRtrPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrPreempt.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrPreempt.setDescription('This is for controlling whether a higher priority Backup VRRP virtual router preempts a low priority Master. enabled(1) - allow preemption disabled(2) - prohibit preemption')
vrrpCurCfgVirtRtrState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrState.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrState.setDescription('Enable or disable the VRRP virtual router.')
vrrpCurCfgVirtRtrTckVirtRtr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckVirtRtr.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckVirtRtr.setDescription('Enable or disable tracking other virtual routers for priority adjustment. The priority increment is defined in vrrpCurCfgGenTckVirtRtrInc.')
vrrpCurCfgVirtRtrTckIpIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckIpIntf.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckIpIntf.setDescription('Enable or disable tracking other router interfaces for priority adjustment. The priority increment is defined in vrrpCurCfgGenTckIpIntfInc.')
vrrpCurCfgVirtRtrTckVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckVlanPort.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckVlanPort.setDescription('Enable or disable tracking port state of VLAN ports for priority adjustment. The priority increment is defined in vrrpCurCfgGenTckVlanPortInc.')
vrrpNewCfgVirtRtrTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 4), )
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTable.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTable.setDescription('The table of VRRP virtual routers configuration in current_config.')
vrrpNewCfgVirtRtrTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 4, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "vrrpNewCfgVirtRtrIndx"))
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTableEntry.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTableEntry.setDescription('Information about a VRRP virtual router.')
vrrpNewCfgVirtRtrIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrIndx.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrIndx.setDescription('The VRRP virtual router table index.')
vrrpNewCfgVirtRtrID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrID.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrID.setDescription('The VRRP virtual router identifier.')
vrrpNewCfgVirtRtrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 4, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrAddr.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrAddr.setDescription('The VRRP virtual router IP address.')
vrrpNewCfgVirtRtrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 4, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrIfIndex.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrIfIndex.setDescription('The IfIndex that the VRRP virtual router is representing.')
vrrpNewCfgVirtRtrInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrInterval.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrInterval.setDescription('The time interval between VRRP advertisements in seconds. When FAST_ADVERTISEMENT is enabled, this object indicates advertisement interval in centi-seconds')
vrrpNewCfgVirtRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrPriority.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrPriority.setDescription('The priority value to be used by the specified VRRP virtual router.')
vrrpNewCfgVirtRtrPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrPreempt.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrPreempt.setDescription('This is for controlling whether a higher priority Backup VRRP virtual router preempts a low priority Master. enabled(1) - allow preemption disabled(2) - prohibit preemption')
vrrpNewCfgVirtRtrState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrState.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrState.setDescription('Enable or disable the VRRP virtual router.')
vrrpNewCfgVirtRtrDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrDelete.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than delete(2) has no effect on the state of the row.')
vrrpNewCfgVirtRtrTckVirtRtr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckVirtRtr.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckVirtRtr.setDescription('Enable or disable tracking other virtual routers for priority adjustment. the priority increment is defined in vrrpNewCfgGenTckVirtRtrInc.')
vrrpNewCfgVirtRtrTckIpIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckIpIntf.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckIpIntf.setDescription('Enable or disable tracking other router interfaces for priority adjustment. the priority increment is defined in vrrpNewCfgGenTckIpIntfInc.')
vrrpNewCfgVirtRtrTckVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckVlanPort.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckVlanPort.setDescription('Enable or disable tracking port state of VLAN ports for priority adjustment. the priority increment is defined in vrrpNewCfgGenTckVlanPortInc.')
vrrpIfTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpIfTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: vrrpIfTableMaxSize.setDescription('The maximum number of entries in VRRP interface table.')
vrrpCurCfgIfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 6), )
if mibBuilder.loadTexts: vrrpCurCfgIfTable.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgIfTable.setDescription('The table of VRRP interface configuration in current_config.')
vrrpCurCfgIfTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 6, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "vrrpCurCfgIfIndx"))
if mibBuilder.loadTexts: vrrpCurCfgIfTableEntry.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgIfTableEntry.setDescription('Information about a VRRP interface.')
vrrpCurCfgIfIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgIfIndx.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgIfIndx.setDescription('The VRRP interface index. This is eqivalent to IfIndex.')
vrrpCurCfgIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("simple-text-password", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgIfAuthType.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgIfAuthType.setDescription('Type of authentication being used. none(1) - no authentication simple-text-password(2) - use password specified in vrrpCurCfgIfPasswd for authentication.')
vrrpCurCfgIfPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgIfPasswd.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgIfPasswd.setDescription('The password for authentication.')
vrrpNewCfgIfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 7), )
if mibBuilder.loadTexts: vrrpNewCfgIfTable.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgIfTable.setDescription('The table of VRRP interface configuration in current_config.')
vrrpNewCfgIfTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 7, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "vrrpNewCfgIfIndx"))
if mibBuilder.loadTexts: vrrpNewCfgIfTableEntry.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgIfTableEntry.setDescription('Information about a VRRP interface.')
vrrpNewCfgIfIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpNewCfgIfIndx.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgIfIndx.setDescription('The VRRP interface index. This is eqivalent to IfIndex.')
vrrpNewCfgIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("simple-text-password", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgIfAuthType.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgIfAuthType.setDescription('Type of authentication being used. none(1) - no authentication simple-text-password(2) - use password specified in vrrpNewCfgIfPasswd for authentication.')
vrrpNewCfgIfPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgIfPasswd.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgIfPasswd.setDescription('The password for authentication.')
vrrpNewCfgIfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgIfDelete.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgIfDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than delete(2) has no effect on the state of the row.')
vrrpVirtRtrGrpTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpVirtRtrGrpTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: vrrpVirtRtrGrpTableMaxSize.setDescription('The maximum number of entries in VRRP Group table.')
vrrpCurCfgVirtRtrGrpTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 9), )
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTable.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTable.setDescription('The table of VRRP virtual router group in current_config.')
vrrpCurCfgVirtRtrGrpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 9, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "vrrpCurCfgVirtRtrGrpIndx"))
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTableEntry.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTableEntry.setDescription('Information about a VRRP failover virtual router.')
vrrpCurCfgVirtRtrGrpIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpIndx.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpIndx.setDescription('The VRRP virtual router table index.')
vrrpCurCfgVirtRtrGrpID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpID.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpID.setDescription('The VRRP virtual router identifier.')
vrrpCurCfgVirtRtrGrpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpIfIndex.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpIfIndex.setDescription('The IfIndex that the VRRP virtual router is representing.')
vrrpCurCfgVirtRtrGrpInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpInterval.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpInterval.setDescription('The time interval between VRRP advertisements in seconds.')
vrrpCurCfgVirtRtrGrpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpPriority.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpPriority.setDescription('The priority value to be used by the specified VRRP virtual routers.')
vrrpCurCfgVirtRtrGrpPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpPreempt.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpPreempt.setDescription('This is for controlling whether a higher priority Backup VRRP virtual router preempts a low priority Master. enabled(1) - allow preemption disabled(2) - prohibit preemption')
vrrpCurCfgVirtRtrGrpState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpState.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpState.setDescription('Enable or disable the VRRP virtual router.')
vrrpCurCfgVirtRtrGrpTckIpIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckIpIntf.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckIpIntf.setDescription('Enable or disable tracking other router interfaces for priority adjustment. the priority increment is defined in vrrpCurCfgGenTckIpIntfInc.')
vrrpCurCfgVirtRtrGrpTckVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 9, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckVlanPort.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckVlanPort.setDescription('Enable or disable tracking port state of VLAN ports for priority adjustment. the priority increment is defined in vrrpCurCfgGenTckVlanPortInc.')
vrrpNewCfgVirtRtrGrpTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 10), )
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTable.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTable.setDescription('The table of VRRP virtual router group configuration in new_config.')
vrrpNewCfgVirtRtrGrpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 10, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "vrrpNewCfgVirtRtrGrpIndx"))
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTableEntry.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTableEntry.setDescription('Information about a VRRP failover virtual router.')
vrrpNewCfgVirtRtrGrpIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpIndx.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpIndx.setDescription('The VRRP virtual router table index.')
vrrpNewCfgVirtRtrGrpID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpID.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpID.setDescription('The VRRP virtual router identifier.')
vrrpNewCfgVirtRtrGrpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 10, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpIfIndex.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpIfIndex.setDescription('The IfIndex that the VRRP virtual router is representing.')
vrrpNewCfgVirtRtrGrpInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpInterval.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpInterval.setDescription('The time interval between VRRP advertisements in seconds.')
vrrpNewCfgVirtRtrGrpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpPriority.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpPriority.setDescription('The priority value to be used by the specified VRRP virtual router.')
vrrpNewCfgVirtRtrGrpPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpPreempt.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpPreempt.setDescription('This is for controlling whether a higher priority Backup VRRP virtual router preempts a low priority Master. enabled(1) - allow preemption disabled(2) - prohibit preemption')
vrrpNewCfgVirtRtrGrpState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpState.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpState.setDescription('Enable or disable the VRRP virtual router.')
vrrpNewCfgVirtRtrGrpDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpDelete.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than delete(2) has no effect on the state of the row.')
vrrpNewCfgVirtRtrGrpTckIpIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckIpIntf.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckIpIntf.setDescription('Enable or disable tracking other router interfaces for priority adjustment. the priority increment is defined in vrrpNewCfgGenTckIpIntfInc.')
vrrpNewCfgVirtRtrGrpTckVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 6, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckVlanPort.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckVlanPort.setDescription('Enable or disable tracking port state of VLAN ports for priority adjustment. the priority increment is defined in vrrpNewCfgGenTckVlanPortInc.')
dnsCurCfgPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 9, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurCfgPrimaryIpAddr.setStatus('current')
if mibBuilder.loadTexts: dnsCurCfgPrimaryIpAddr.setDescription('The DNS primary IP address in the current_configuration block.')
dnsNewCfgPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 9, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsNewCfgPrimaryIpAddr.setStatus('current')
if mibBuilder.loadTexts: dnsNewCfgPrimaryIpAddr.setDescription('The DNS primary IP address in the new_configuration block.')
dnsCurCfgSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 9, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurCfgSecondaryIpAddr.setStatus('current')
if mibBuilder.loadTexts: dnsCurCfgSecondaryIpAddr.setDescription('The DNS primary IP address in the current_configuration block.')
dnsNewCfgSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 9, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsNewCfgSecondaryIpAddr.setStatus('current')
if mibBuilder.loadTexts: dnsNewCfgSecondaryIpAddr.setDescription('The DNS primary IP address in the new_configuration block.')
dnsCurCfgDomainName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 9, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 191))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurCfgDomainName.setStatus('current')
if mibBuilder.loadTexts: dnsCurCfgDomainName.setDescription('The DNS doamin name in the current_configuration block.')
dnsNewCfgDomainName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 9, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 191))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsNewCfgDomainName.setStatus('current')
if mibBuilder.loadTexts: dnsNewCfgDomainName.setDescription('The DNS doamin name in the new_configuration block.')
ipNwfTableMax = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNwfTableMax.setStatus('current')
if mibBuilder.loadTexts: ipNwfTableMax.setDescription('The maximum number of rows in the IP network filter table.')
ipCurCfgNwfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 10, 2), )
if mibBuilder.loadTexts: ipCurCfgNwfTable.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgNwfTable.setDescription('The table of IP network filter configuration in the current_config.')
ipCurCfgNwfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 10, 2, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ipCurCfgNwfIndex"))
if mibBuilder.loadTexts: ipCurCfgNwfEntry.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgNwfEntry.setDescription('Information about an IP network filter.')
ipCurCfgNwfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgNwfIndex.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgNwfIndex.setDescription('The netowrk filter number for which the NWF is related.')
ipCurCfgNwfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 10, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgNwfAddr.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgNwfAddr.setDescription('The IP address of the network filter.')
ipCurCfgNwfMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 10, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgNwfMask.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgNwfMask.setDescription('The IP network filter mask.')
ipCurCfgNwfState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgNwfState.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgNwfState.setDescription('Enable or disable the network filter.')
ipNewCfgNwfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 10, 3), )
if mibBuilder.loadTexts: ipNewCfgNwfTable.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgNwfTable.setDescription('The table of IP network filter configuration in the current_config.')
ipNewCfgNwfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 10, 3, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ipNewCfgNwfIndex"))
if mibBuilder.loadTexts: ipNewCfgNwfEntry.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgNwfEntry.setDescription('Information about an IP network filter.')
ipNewCfgNwfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 10, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgNwfIndex.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgNwfIndex.setDescription('The netowrk filter number for which the NWF is related.')
ipNewCfgNwfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 10, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgNwfAddr.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgNwfAddr.setDescription('The IP address of the network filter.')
ipNewCfgNwfMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 10, 3, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgNwfMask.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgNwfMask.setDescription('The IP network filter mask.')
ipNewCfgNwfState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgNwfState.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgNwfState.setDescription('Enable or disable the network filter.')
ipNewCfgNwfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 10, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgNwfDelete.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgNwfDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
ipRmapTableMax = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRmapTableMax.setStatus('current')
if mibBuilder.loadTexts: ipRmapTableMax.setDescription('The maximum number of rows in the IP route map table.')
ipCurCfgRmapTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 11, 2), )
if mibBuilder.loadTexts: ipCurCfgRmapTable.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgRmapTable.setDescription('The table of IP route map configuration in the current_config.')
ipCurCfgRmapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 11, 2, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ipCurCfgRmapIndex"))
if mibBuilder.loadTexts: ipCurCfgRmapEntry.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgRmapEntry.setDescription('Information about an IP route map.')
ipCurCfgRmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgRmapIndex.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgRmapIndex.setDescription('The route map number for which the RMAP is related.')
ipCurCfgRmapMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 11, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgRmapMetric.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgRmapMetric.setDescription('The metric of the route map. 4294967295 means none')
ipCurCfgRmapPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 11, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgRmapPrec.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgRmapPrec.setDescription('The precedence of the route map.')
ipCurCfgRmapState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 11, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgRmapState.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgRmapState.setDescription('Enable or disable the route map.')
ipCurCfgRmapMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 11, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgRmapMetricType.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgRmapMetricType.setDescription('The OSPF metric-type of the matched route.')
ipNewCfgRmapTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 11, 3), )
if mibBuilder.loadTexts: ipNewCfgRmapTable.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgRmapTable.setDescription('The table of IP route map configuration in the current_config.')
ipNewCfgRmapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 11, 3, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ipNewCfgRmapIndex"))
if mibBuilder.loadTexts: ipNewCfgRmapEntry.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgRmapEntry.setDescription('Information about an IP route map.')
ipNewCfgRmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 11, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgRmapIndex.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgRmapIndex.setDescription('The route map number for which the RMAP is related.')
ipNewCfgRmapMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 11, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgRmapMetric.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgRmapMetric.setDescription('The metric of the route map. 16777215 means none')
ipNewCfgRmapPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 11, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgRmapPrec.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgRmapPrec.setDescription('The precedence of the route map.')
ipNewCfgRmapState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 11, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgRmapState.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgRmapState.setDescription('Enable or disable the route map.')
ipNewCfgRmapMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 11, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgRmapMetricType.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgRmapMetricType.setDescription('The OSPF metric-type of the matched route.')
ipNewCfgRmapDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 11, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgRmapDelete.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgRmapDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
ipAlistTableMax = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 11, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAlistTableMax.setStatus('current')
if mibBuilder.loadTexts: ipAlistTableMax.setDescription('The maximum number of rows in the IP route map table.')
ipCurCfgAlistTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 11, 5), )
if mibBuilder.loadTexts: ipCurCfgAlistTable.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgAlistTable.setDescription('The table of IP route map access list configuration in the current_config.')
ipCurCfgAlistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 11, 5, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ipCurCfgAlistRmapIndex"), (0, "BLADETYPE4-NETWORK-MIB", "ipCurCfgAlistIndex"))
if mibBuilder.loadTexts: ipCurCfgAlistEntry.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgAlistEntry.setDescription('Information about an IP route map.')
ipCurCfgAlistRmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 11, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgAlistRmapIndex.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgAlistRmapIndex.setDescription('The route map number for which the RMAP is related.')
ipCurCfgAlistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 11, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgAlistIndex.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgAlistIndex.setDescription('The access list number for which the access list is related.')
ipCurCfgAlistNwf = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 11, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgAlistNwf.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgAlistNwf.setDescription('The network filter number of the route map access list. 0 means none')
ipCurCfgAlistMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 11, 5, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgAlistMetric.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgAlistMetric.setDescription('The metric of the route map access list. 4294967295 means none')
ipCurCfgAlistAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 11, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgAlistAction.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgAlistAction.setDescription('Action of the route map access list.')
ipCurCfgAlistState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 11, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgAlistState.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgAlistState.setDescription('Enable or disable the route map access list.')
ipNewCfgAlistTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 11, 6), )
if mibBuilder.loadTexts: ipNewCfgAlistTable.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgAlistTable.setDescription('The table of IP route map access list configuration in the current_config.')
ipNewCfgAlistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 11, 6, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ipNewCfgAlistRmapIndex"), (0, "BLADETYPE4-NETWORK-MIB", "ipNewCfgAlistIndex"))
if mibBuilder.loadTexts: ipNewCfgAlistEntry.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgAlistEntry.setDescription('Information about an IP route map.')
ipNewCfgAlistRmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 11, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgAlistRmapIndex.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgAlistRmapIndex.setDescription('The route map number for which the RMAP is related.')
ipNewCfgAlistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 11, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgAlistIndex.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgAlistIndex.setDescription('The access list number for which the access list is related.')
ipNewCfgAlistNwf = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 11, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgAlistNwf.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgAlistNwf.setDescription('The network filter number of the route map access list. 0 means none')
ipNewCfgAlistMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 11, 6, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgAlistMetric.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgAlistMetric.setDescription('The metric of the route map access list. 16777215 means none')
ipNewCfgAlistAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 11, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgAlistAction.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgAlistAction.setDescription('Action of the route map access list.')
ipNewCfgAlistState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 11, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgAlistState.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgAlistState.setDescription('Enable or disable the route map access list.')
ipNewCfgAlistDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 11, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgAlistDelete.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgAlistDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
ospfGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 1))
ospfCurCfgDefaultRouteMetric = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgDefaultRouteMetric.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgDefaultRouteMetric.setDescription('Specify the metric to be assigned.')
ospfNewCfgDefaultRouteMetric = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777214))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgDefaultRouteMetric.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgDefaultRouteMetric.setDescription('Specify the metric to be assigned.')
ospfCurCfgDefaultRouteMetricType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgDefaultRouteMetricType.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgDefaultRouteMetricType.setDescription('Specify the AS External metric type to be assigned.')
ospfNewCfgDefaultRouteMetricType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgDefaultRouteMetricType.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgDefaultRouteMetricType.setDescription('Specify the AS External metric type to be assigned.')
ospfIntfTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: ospfIntfTableMaxSize.setDescription('The maximum number of rows in the OSPF Interface table.')
ospfAreaTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: ospfAreaTableMaxSize.setDescription('The maximum number of rows in the OSPF Area table.')
ospfRangeTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfRangeTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: ospfRangeTableMaxSize.setDescription('The maximum number of rows in the OSPF Range table.')
ospfVirtIntfTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVirtIntfTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: ospfVirtIntfTableMaxSize.setDescription('The maximum number of rows in the OSPF Virtual Interface table.')
ospfHostTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfHostTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: ospfHostTableMaxSize.setDescription('The maximum number of rows in the OSPF Host table.')
ospfCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgState.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgState.setDescription('OSPF global state.')
ospfNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgState.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgState.setDescription('Globally turn OSPF on or off.')
ospfCurCfgLSDB = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgLSDB.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgLSDB.setDescription('The LSDB limit for external LSA.')
ospfNewCfgLSDB = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgLSDB.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgLSDB.setDescription('Set the LSDB limit for external LSA.')
ospfCurCfgAreaTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 2), )
if mibBuilder.loadTexts: ospfCurCfgAreaTable.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgAreaTable.setDescription('The table of OSPF Area configuration in the current_config.')
ospfCurCfgAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 2, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ospfCurCfgAreaIndex"))
if mibBuilder.loadTexts: ospfCurCfgAreaEntry.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgAreaEntry.setDescription('Information about a OSPF area.')
ospfCurCfgAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgAreaIndex.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgAreaIndex.setDescription('The OSPF area number for which the OSPF area table is related.')
ospfCurCfgAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgAreaId.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgAreaId.setDescription('The IP Address of the OSPF area.')
ospfCurCfgAreaSpfInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgAreaSpfInterval.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgAreaSpfInterval.setDescription('The SPF interval for the OSPF area.')
ospfCurCfgAreaAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("password", 2), ("md5", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgAreaAuthType.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgAreaAuthType.setDescription('Type of authentication being used. none(1) - no authentication password(2) - use password md5(3) - use MD5 authentication.')
ospfCurCfgAreaType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("transit", 0), ("stub", 1), ("nssa", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgAreaType.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgAreaType.setDescription('Type of Area. transit(0) stub(1) nssa(2)')
ospfCurCfgAreaMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgAreaMetric.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgAreaMetric.setDescription('Metric (1-65535)')
ospfCurCfgAreaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgAreaStatus.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgAreaStatus.setDescription('Status disabled(0) enabled(1)')
ospfNewCfgAreaTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 3), )
if mibBuilder.loadTexts: ospfNewCfgAreaTable.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgAreaTable.setDescription('The table of OSPF Area configuration in the new_config.')
ospfNewCfgAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 3, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ospfNewCfgAreaIndex"))
if mibBuilder.loadTexts: ospfNewCfgAreaEntry.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgAreaEntry.setDescription('Information about a OSPF area.')
ospfNewCfgAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgAreaIndex.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgAreaIndex.setDescription('The OSPF area number for which the OSPF area table is related.')
ospfNewCfgAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgAreaId.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgAreaId.setDescription('The IP Address of the OSPF area.')
ospfNewCfgAreaSpfInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgAreaSpfInterval.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgAreaSpfInterval.setDescription('The SPF interval for the OSPF area.')
ospfNewCfgAreaAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("password", 2), ("md5", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgAreaAuthType.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgAreaAuthType.setDescription('Type of authentication being used. none(1) - no authentication password(2) - use password. md5(3) - use MD5 authentication.')
ospfNewCfgAreaType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("transit", 0), ("stub", 1), ("nssa", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgAreaType.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgAreaType.setDescription('Type of Area. transit(0) stub(1) nssa(2)')
ospfNewCfgAreaMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgAreaMetric.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgAreaMetric.setDescription('Metric (1-65535)')
ospfNewCfgAreaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgAreaStatus.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgAreaStatus.setDescription('Status disabled(0) enabled(1)')
ospfNewCfgAreaDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgAreaDelete.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgAreaDelete.setDescription('Delete the area no(0), yes(1)')
ospfCurCfgHostTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 12), )
if mibBuilder.loadTexts: ospfCurCfgHostTable.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgHostTable.setDescription('The table of OSPF Host configuration.')
ospfCurCfgHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 12, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ospfCurCfgHostIndex"))
if mibBuilder.loadTexts: ospfCurCfgHostEntry.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgHostEntry.setDescription('Information about a OSPF host.')
ospfCurCfgHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgHostIndex.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgHostIndex.setDescription('The OSPF host number for which the OSPF host table is related.')
ospfCurCfgHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 12, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgHostIpAddr.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgHostIpAddr.setDescription('The IP Address of the OSPF host.')
ospfCurCfgHostAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgHostAreaIndex.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgHostAreaIndex.setDescription('The area index.')
ospfCurCfgHostCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgHostCost.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgHostCost.setDescription('The cost of the OSPF host.')
ospfCurCfgHostState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgHostState.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgHostState.setDescription('Enable or disable an OSPF Host')
ospfNewCfgHostTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 13), )
if mibBuilder.loadTexts: ospfNewCfgHostTable.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgHostTable.setDescription('The table of OSPF Host configuration.')
ospfNewCfgHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 13, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ospfNewCfgHostIndex"))
if mibBuilder.loadTexts: ospfNewCfgHostEntry.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgHostEntry.setDescription('Information about a OSPF host.')
ospfNewCfgHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgHostIndex.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgHostIndex.setDescription('The OSPF host number for which the OSPF host table is related.')
ospfNewCfgHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 13, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgHostIpAddr.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgHostIpAddr.setDescription('The IP Address of the OSPF host.')
ospfNewCfgHostAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 13, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgHostAreaIndex.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgHostAreaIndex.setDescription('The OSPF area index.')
ospfNewCfgHostCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 13, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgHostCost.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgHostCost.setDescription('The cost of the OSPF host.')
ospfNewCfgHostState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgHostState.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgHostState.setDescription('Enable or disable an OSPF Host')
ospfNewCfgHostDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgHostDelete.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgHostDelete.setDescription('Delete the OSPF host: no(0), yes(1)')
ospfMdkeyTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfMdkeyTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: ospfMdkeyTableMaxSize.setDescription('The maximum number of rows in the OSPF Mdkey table.')
ospfCurCfgMdkeyTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 5), )
if mibBuilder.loadTexts: ospfCurCfgMdkeyTable.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgMdkeyTable.setDescription('The table of OSPF MD5 keys in the current_config.')
ospfCurCfgMdkeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 5, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ospfCurCfgMdkeyIndex"))
if mibBuilder.loadTexts: ospfCurCfgMdkeyEntry.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgMdkeyEntry.setDescription('Information about an OSPF MD keys table.')
ospfCurCfgMdkeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgMdkeyIndex.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgMdkeyIndex.setDescription('The OSPF MD5 Key number for which the OSPF MdKey table is related.')
ospfCurCfgMdkeyKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgMdkeyKey.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgMdkeyKey.setDescription('The character string representing the MD5 Key.')
ospfNewCfgMdkeyTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 6), )
if mibBuilder.loadTexts: ospfNewCfgMdkeyTable.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgMdkeyTable.setDescription('The table of OSPF MD5 keys in the new_config.')
ospfNewCfgMdkeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 6, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ospfNewCfgMdkeyIndex"))
if mibBuilder.loadTexts: ospfNewCfgMdkeyEntry.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgMdkeyEntry.setDescription('Information about an OSPF MD keys table.')
ospfNewCfgMdkeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgMdkeyIndex.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgMdkeyIndex.setDescription('The OSPF MD5 Key number for which the OSPF MdKey table is related.')
ospfNewCfgMdkeyKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgMdkeyKey.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgMdkeyKey.setDescription('The character string representing the MD5 Key.')
ospfNewCfgMdkeyDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgMdkeyDelete.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgMdkeyDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
ospfCurCfgIntfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 7), )
if mibBuilder.loadTexts: ospfCurCfgIntfTable.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgIntfTable.setDescription('The table of OSPF Interface configuration in the current_config.')
ospfCurCfgIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 7, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ospfCurCfgIntfIndex"))
if mibBuilder.loadTexts: ospfCurCfgIntfEntry.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgIntfEntry.setDescription('Information about an OSPF Interface.')
ospfCurCfgIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIntfIndex.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgIntfIndex.setDescription('The OSPF Interface number for which the OSPF Interface table is related.')
ospfCurCfgIntfId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 7, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIntfId.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgIntfId.setDescription('The IP Address of the OSPF interface.')
ospfCurCfgIntfArea = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIntfArea.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgIntfArea.setDescription('The index of the area that the interface belongs')
ospfCurCfgIntfMdkey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIntfMdkey.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgIntfMdkey.setDescription('The MD5 key for the OSPF interface 0 (none) no MD5 authentication.')
ospfCurCfgIntfCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIntfCost.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgIntfCost.setDescription('Interface cost')
ospfCurCfgIntfPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIntfPrio.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgIntfPrio.setDescription('Interface router priority')
ospfCurCfgIntfHello = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIntfHello.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgIntfHello.setDescription('Hello interval')
ospfCurCfgIntfDead = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIntfDead.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgIntfDead.setDescription('Dead interval')
ospfCurCfgIntfTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 7, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIntfTrans.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgIntfTrans.setDescription('Transit delay')
ospfCurCfgIntfRetra = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 7, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIntfRetra.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgIntfRetra.setDescription('Retransmit interval')
ospfCurCfgIntfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 7, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIntfAuthKey.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgIntfAuthKey.setDescription('Authentication Key')
ospfCurCfgIntfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 7, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIntfStatus.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgIntfStatus.setDescription('Status of the interface disabled(0), enabled(1)')
ospfNewCfgIntfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 8), )
if mibBuilder.loadTexts: ospfNewCfgIntfTable.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgIntfTable.setDescription('The table of OSPF Interface configuration in the new_config.')
ospfNewCfgIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 8, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ospfNewCfgIntfIndex"))
if mibBuilder.loadTexts: ospfNewCfgIntfEntry.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgIntfEntry.setDescription('Information about an OSPF Interface.')
ospfNewCfgIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgIntfIndex.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgIntfIndex.setDescription('The OSPF Interface number for which the OSPF Interface table is related.')
ospfNewCfgIntfId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 8, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgIntfId.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgIntfId.setDescription('The IP Address of the OSPF interface.')
ospfNewCfgIntfArea = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgIntfArea.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgIntfArea.setDescription('The index of the area that the interface belongs (0..2)')
ospfNewCfgIntfMdkey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgIntfMdkey.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgIntfMdkey.setDescription('The MD5 key for the OSPF interface 0 (none) no MD5 authentication.')
ospfNewCfgIntfCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgIntfCost.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgIntfCost.setDescription('Interface cost(1..65535)')
ospfNewCfgIntfPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgIntfPrio.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgIntfPrio.setDescription('Interface router priority(0..255)')
ospfNewCfgIntfHello = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgIntfHello.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgIntfHello.setDescription('Hello interval(1..65535)')
ospfNewCfgIntfDead = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgIntfDead.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgIntfDead.setDescription('Dead interval(1..65535)')
ospfNewCfgIntfTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 8, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgIntfTrans.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgIntfTrans.setDescription('Transit delay(1..3600)')
ospfNewCfgIntfRetra = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 8, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgIntfRetra.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgIntfRetra.setDescription('Retransmit interval(1..3600)')
ospfNewCfgIntfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 8, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgIntfAuthKey.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgIntfAuthKey.setDescription('Authentication Key')
ospfNewCfgIntfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 8, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgIntfStatus.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgIntfStatus.setDescription('Status of the interface disabled(0), enabled(1)')
ospfNewCfgIntfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 8, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("delete", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgIntfDelete.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgIntfDelete.setDescription('Delete the interface other(0), delete(1)')
ospfCurCfgVirtIntfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 9), )
if mibBuilder.loadTexts: ospfCurCfgVirtIntfTable.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgVirtIntfTable.setDescription('The table of OSPF Virtual Interface configuration in the current_config.')
ospfCurCfgVirtIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 9, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ospfCurCfgVirtIntfIndex"))
if mibBuilder.loadTexts: ospfCurCfgVirtIntfEntry.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgVirtIntfEntry.setDescription('Information about an OSPF virtual Interface.')
ospfCurCfgVirtIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgVirtIntfIndex.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgVirtIntfIndex.setDescription('The OSPF Virtual Interface number for which the OSPF Virtual Interface table is related.')
ospfCurCfgVirtIntfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgVirtIntfAreaId.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgVirtIntfAreaId.setDescription('The index of the OSPF area to which this virtual interface belongs.')
ospfCurCfgVirtIntfNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 9, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgVirtIntfNbr.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgVirtIntfNbr.setDescription('The IP Address of the OSPF neighbor for this virtual interface.')
ospfCurCfgVirtIntfMdkey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgVirtIntfMdkey.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgVirtIntfMdkey.setDescription('The MD5 key for the OSPF virtual interface 0 (none) no MD5 authentication.')
ospfCurCfgVirtIntfHello = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgVirtIntfHello.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgVirtIntfHello.setDescription('Hello interval')
ospfCurCfgVirtIntfDead = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgVirtIntfDead.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgVirtIntfDead.setDescription('Dead interval')
ospfCurCfgVirtIntfTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgVirtIntfTrans.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgVirtIntfTrans.setDescription('Transit delay')
ospfCurCfgVirtIntfRetra = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 9, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgVirtIntfRetra.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgVirtIntfRetra.setDescription('Retransmit interval')
ospfCurCfgVirtIntfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 9, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgVirtIntfAuthKey.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgVirtIntfAuthKey.setDescription('Authentication Key')
ospfCurCfgVirtIntfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 9, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgVirtIntfStatus.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgVirtIntfStatus.setDescription('Status disabled(0), enabled(1)')
ospfNewCfgVirtIntfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 10), )
if mibBuilder.loadTexts: ospfNewCfgVirtIntfTable.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgVirtIntfTable.setDescription('The table of OSPF Virtual Interface configuration in the new_config.')
ospfNewCfgVirtIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 10, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ospfNewCfgVirtIntfIndex"))
if mibBuilder.loadTexts: ospfNewCfgVirtIntfEntry.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgVirtIntfEntry.setDescription('Information about an OSPF virtual Interface.')
ospfNewCfgVirtIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgVirtIntfIndex.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgVirtIntfIndex.setDescription('The OSPF Virtual Interface number for which the OSPF Virtual Interface table is related.')
ospfNewCfgVirtIntfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgVirtIntfAreaId.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgVirtIntfAreaId.setDescription('The index of the OSPF area to which this virtual interface belongs.')
ospfNewCfgVirtIntfNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 10, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgVirtIntfNbr.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgVirtIntfNbr.setDescription('The IP Address of the OSPF neighbor for this virtual interface.')
ospfNewCfgVirtIntfMdkey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgVirtIntfMdkey.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgVirtIntfMdkey.setDescription('The MD5 key for the OSPF virtual interface 0 (none) no MD5 authentication.')
ospfNewCfgVirtIntfHello = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgVirtIntfHello.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgVirtIntfHello.setDescription('Hello interval(1..65535)')
ospfNewCfgVirtIntfDead = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgVirtIntfDead.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgVirtIntfDead.setDescription('Dead interval(1..65535)')
ospfNewCfgVirtIntfTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgVirtIntfTrans.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgVirtIntfTrans.setDescription('Transit dela(1..3600)y')
ospfNewCfgVirtIntfRetra = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 10, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgVirtIntfRetra.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgVirtIntfRetra.setDescription('Retransmit interval(1..3600)')
ospfNewCfgVirtIntfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 10, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgVirtIntfAuthKey.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgVirtIntfAuthKey.setDescription('Authentication Key SIZE(0..8)')
ospfNewCfgVirtIntfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgVirtIntfStatus.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgVirtIntfStatus.setDescription('Status disabled(0), enabled(1) ')
ospfNewCfgVirtIntfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("delete", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgVirtIntfDelete.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgVirtIntfDelete.setDescription('Delete other(0), delete(1)')
ospfCurCfgRangeTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 14), )
if mibBuilder.loadTexts: ospfCurCfgRangeTable.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgRangeTable.setDescription('The table of OSPF summary range in the current configuration.')
ospfCurCfgRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 14, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ospfCurCfgRangeIndex"))
if mibBuilder.loadTexts: ospfCurCfgRangeEntry.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgRangeEntry.setDescription('Information about an OSPF summary range.')
ospfCurCfgRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgRangeIndex.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgRangeIndex.setDescription('The range number for which the OSPF summary range table is related.')
ospfCurCfgRangeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 14, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgRangeAddr.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgRangeAddr.setDescription('The IP Address of the range.')
ospfCurCfgRangeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 14, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgRangeMask.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgRangeMask.setDescription('The mask of the range.')
ospfCurCfgRangeAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 14, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgRangeAreaIndex.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgRangeAreaIndex.setDescription('The area index.')
ospfCurCfgRangeHideState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgRangeHideState.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgRangeHideState.setDescription('The state of the hide range.')
ospfCurCfgRangeState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgRangeState.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgRangeState.setDescription('The state of the range.')
ospfNewCfgRangeTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 15), )
if mibBuilder.loadTexts: ospfNewCfgRangeTable.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgRangeTable.setDescription('The table of OSPF summary range in the new configuration.')
ospfNewCfgRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 15, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ospfNewCfgRangeIndex"))
if mibBuilder.loadTexts: ospfNewCfgRangeEntry.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgRangeEntry.setDescription('Information about an OSPF summary range.')
ospfNewCfgRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgRangeIndex.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgRangeIndex.setDescription('The range number for which the OSPF summary range table is related.')
ospfNewCfgRangeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 15, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgRangeAddr.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgRangeAddr.setDescription('The IP Address of the range.')
ospfNewCfgRangeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 15, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgRangeMask.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgRangeMask.setDescription('The mask of the range.')
ospfNewCfgRangeAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 15, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgRangeAreaIndex.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgRangeAreaIndex.setDescription('The area index.')
ospfNewCfgRangeHideState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgRangeHideState.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgRangeHideState.setDescription('The state of the hide range.')
ospfNewCfgRangeState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgRangeState.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgRangeState.setDescription('The state of the range.')
ospfNewCfgRangeDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 15, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgRangeDelete.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgRangeDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
ospfRouteRedistribution = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 4))
ospfRedistributeStatic = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 4, 1))
ospfCurCfgStaticMetric = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777214))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgStaticMetric.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgStaticMetric.setDescription('The metric to be assigned to static routes. A value of 0 indicates none.')
ospfNewCfgStaticMetric = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777214))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgStaticMetric.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgStaticMetric.setDescription('The metric to be assigned to static routes. A value of 0 indicates none.')
ospfCurCfgStaticMetricType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgStaticMetricType.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgStaticMetricType.setDescription('The AS External metric type for static routes.')
ospfNewCfgStaticMetricType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgStaticMetricType.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgStaticMetricType.setDescription('The AS External metric type for static routes.')
ospfCurCfgStaticOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 4, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgStaticOutRmapList.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgStaticOutRmapList.setDescription('The route maps present in the out route map list. The route maps are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Rmap 9 || || || ||___ Rmap 8 || |____ Rmap 7 || . . . ||_________ Rmap 2 |__________ Rmap 1 where x : 1 - The represented route map is selected 0 - The represented route map is not selected')
ospfNewCfgStaticOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 4, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgStaticOutRmapList.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgStaticOutRmapList.setDescription('The route maps present in the out route map list. The route maps are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Rmap 9 || || || ||___ Rmap 8 || |____ Rmap 7 || . . . ||_________ Rmap 2 |__________ Rmap 1 where x : 1 - The represented route map is selected 0 - The represented route map is not selected')
ospfNewCfgStaticAddOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgStaticAddOutRmap.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgStaticAddOutRmap.setDescription('The route map to be add into out-rmap list. When read, 0 is returned.')
ospfNewCfgStaticRemoveOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgStaticRemoveOutRmap.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgStaticRemoveOutRmap.setDescription('The route map to be removed from out-rmap list. When read, 0 is returned.')
ospfRedistributeFixed = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 4, 4))
ospfCurCfgFixedMetric = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 4, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777214))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgFixedMetric.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgFixedMetric.setDescription('The export metric for fixed routes. A value of 0 indicates none')
ospfNewCfgFixedMetric = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 4, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777214))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgFixedMetric.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgFixedMetric.setDescription('The export metric for fixed routes. A value of 0 indicates none')
ospfCurCfgFixedMetricType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 4, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgFixedMetricType.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgFixedMetricType.setDescription('The AS External metric type for fixed routes.')
ospfNewCfgFixedMetricType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 4, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgFixedMetricType.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgFixedMetricType.setDescription('The AS External metric type for fixed routes.')
ospfCurCfgFixedOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 4, 4, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgFixedOutRmapList.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgFixedOutRmapList.setDescription('The route maps present in the out route map list. The route maps are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Rmap 9 || || || ||___ Rmap 8 || |____ Rmap 7 || . . . ||_________ Rmap 2 |__________ Rmap 1 where x : 1 - The represented route map is selected 0 - The represented route map is not selected')
ospfNewCfgFixedOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 4, 4, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgFixedOutRmapList.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgFixedOutRmapList.setDescription('The route maps present in the out route map list. The route maps are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Rmap 9 || || || ||___ Rmap 8 || |____ Rmap 7 || . . . ||_________ Rmap 2 |__________ Rmap 1 where x : 1 - The represented route map is selected 0 - The represented route map is not selected')
ospfNewCfgFixedAddOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 4, 4, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgFixedAddOutRmap.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgFixedAddOutRmap.setDescription('The route map to be add into out-rmap list. When read, 0 is returned.')
ospfNewCfgFixedRemoveOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 4, 4, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgFixedRemoveOutRmap.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgFixedRemoveOutRmap.setDescription('The route map to be removed from out-rmap list. When read, 0 is returned.')
ospfRedistributeRip = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 4, 5))
ospfCurCfgRipMetric = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 4, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777214))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgRipMetric.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgRipMetric.setDescription('The export metric for RIP routes. A value of 0 indicates none')
ospfNewCfgRipMetric = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 4, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777214))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgRipMetric.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgRipMetric.setDescription('The export metric for RIP routes. A value of 0 indicates none')
ospfCurCfgRipMetricType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 4, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgRipMetricType.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgRipMetricType.setDescription('The AS External metric type for RIP routes.')
ospfNewCfgRipMetricType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 4, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgRipMetricType.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgRipMetricType.setDescription('The AS External metric type for RIP routes.')
ospfCurCfgRipOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 4, 5, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgRipOutRmapList.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgRipOutRmapList.setDescription('The route maps present in the out route map list. The route maps are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Rmap 9 || || || ||___ Rmap 8 || |____ Rmap 7 || . . . ||_________ Rmap 2 |__________ Rmap 1 where x : 1 - The represented route map is selected 0 - The represented route map is not selected')
ospfNewCfgRipOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 4, 5, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgRipOutRmapList.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgRipOutRmapList.setDescription('The route maps present in the out route map list. The route maps are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Rmap 9 || || || ||___ Rmap 8 || |____ Rmap 7 || . . . ||_________ Rmap 2 |__________ Rmap 1 where x : 1 - The represented route map is selected 0 - The represented route map is not selected')
ospfNewCfgRipAddOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 4, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgRipAddOutRmap.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgRipAddOutRmap.setDescription('The route map to be add into out-rmap list. When read, 0 is returned.')
ospfNewCfgRipRemoveOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 13, 4, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgRipRemoveOutRmap.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgRipRemoveOutRmap.setDescription('The route map to be removed from out-rmap list. When read, 0 is returned.')
ipCurCfgRouterID = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 14, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgRouterID.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgRouterID.setDescription('The router ID of the switch.')
ipNewCfgRouterID = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 14, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgRouterID.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgRouterID.setDescription('The router ID of the switch.')
igmpCurCfgOnOff = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpCurCfgOnOff.setStatus('current')
if mibBuilder.loadTexts: igmpCurCfgOnOff.setDescription('Globally turn IGMP On/Off.')
igmpNewCfgOnOff = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpNewCfgOnOff.setStatus('current')
if mibBuilder.loadTexts: igmpNewCfgOnOff.setDescription('Globally turn IGMP On/Off.')
igmpSnoopCfgGen = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 3))
igmpStaticMrtrCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 4))
igmpFilterCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 5))
igmpSnoopCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 3, 1))
igmpSnoopCurCfgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopCurCfgTimeout.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopCurCfgTimeout.setDescription('Set IGMP Report timeout.')
igmpSnoopNewCfgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopNewCfgTimeout.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopNewCfgTimeout.setDescription('Set IGMP Report timeout.')
igmpSnoopCurCfgMrto = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopCurCfgMrto.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopCurCfgMrto.setDescription('The value of multicast router timeout in the current config.')
igmpSnoopNewCfgMrto = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopNewCfgMrto.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopNewCfgMrto.setDescription('The value of multicast router timeout in the new config.')
igmpSnoopNewCfgVlanFastlvAdd = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 3, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopNewCfgVlanFastlvAdd.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopNewCfgVlanFastlvAdd.setDescription('The VLAN to be added to fastleave vlan list. When read, 0 is returned.')
igmpSnoopNewCfgVlanFastlvRem = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 3, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopNewCfgVlanFastlvRem.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopNewCfgVlanFastlvRem.setDescription('The VLAN to be removed from fastleave vlan list. When read, 0 is returned.')
igmpSnoopCurCfgVlanFastlvBmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 3, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopCurCfgVlanFastlvBmap.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopCurCfgVlanFastlvBmap.setDescription('The fastlv enabled vlans present in the in vlan map list. The fastlv enabled vlans are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Vlan 9 || || || ||___ Vlan 8 || |____ Vlan 7 || . . . ||_________ Vlan 2 |__________ Vlan 1 where x : 1 - The represented vlan has fastlv enabled 0 - The represented vlan does not have fastlv enabled.')
igmpSnoopNewCfgVlanFastlvBmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 3, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopNewCfgVlanFastlvBmap.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopNewCfgVlanFastlvBmap.setDescription('The fastlv enabled vlans present in the in vlan map list. The fastlv enabled vlans are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Vlan 9 || || || ||___ Vlan 8 || |____ Vlan 7 || . . . ||_________ Vlan 2 |__________ Vlan 1 where x : 1 - The represented vlan has fastlv enabled 0 - The represented vlan does not have fastlv enabled.')
igmpSnoopCurCfgRobust = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopCurCfgRobust.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopCurCfgRobust.setDescription('The value of expected packet loss on subnet in the current config.')
igmpSnoopNewCfgRobust = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 3, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopNewCfgRobust.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopNewCfgRobust.setDescription('The value of expected packet loss on subnet in the new config.')
igmpSnoopNewCfgVlanAdd = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 3, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopNewCfgVlanAdd.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopNewCfgVlanAdd.setDescription('The VLAN to be added to snooping vlan list. When read, 0 is returned.')
igmpSnoopNewCfgVlanRem = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 3, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopNewCfgVlanRem.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopNewCfgVlanRem.setDescription('The VLAN to be removed from snooping vlan list. When read, 0 is returned.')
igmpSnoopNewCfgVlanClear = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("ok", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopNewCfgVlanClear.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopNewCfgVlanClear.setDescription('Removing ALL Snooping Vlans.')
igmpSnoopCurCfgVlanBmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 3, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopCurCfgVlanBmap.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopCurCfgVlanBmap.setDescription('The snooping vlans present in the in vlan map list. The snooping vlans are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Vlan 9 || || || ||___ Vlan 8 || |____ Vlan 7 || . . . ||_________ Vlan 2 |__________ Vlan 1 where x : 1 - The represented vlan has snoop enabled 0 - The represented vlan does not have snooping enabled.')
igmpSnoopNewCfgVlanBmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 3, 1, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopNewCfgVlanBmap.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopNewCfgVlanBmap.setDescription('The snooping vlans present in the in vlan map list. The snooping vlans are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Vlan 9 || || || ||___ Vlan 8 || |____ Vlan 7 || . . . ||_________ Vlan 2 |__________ Vlan 1 where x : 1 - The represented vlan has snoop enabled 0 - The represented vlan does not have snooping enabled.')
igmpSnoopCurCfgQInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopCurCfgQInterval.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopCurCfgQInterval.setDescription('IGMP Query Interval of current config.')
igmpSnoopNewCfgQInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 3, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopNewCfgQInterval.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopNewCfgQInterval.setDescription('IGMP Query Interval of new config.')
igmpSnoopCurCfgSrcIp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 3, 1, 25), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopCurCfgSrcIp.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopCurCfgSrcIp.setDescription('The source ip for GSQ proxy in current config.')
igmpSnoopNewCfgSrcIp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 3, 1, 26), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopNewCfgSrcIp.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopNewCfgSrcIp.setDescription('The source ip for GSQ proxy in new config.')
igmpSnoopCurCfgAggrEnaDis = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopCurCfgAggrEnaDis.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopCurCfgAggrEnaDis.setDescription('Enable/Disable of IGMP Report aggregation.')
igmpSnoopNewCfgAggrEnaDis = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopNewCfgAggrEnaDis.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopNewCfgAggrEnaDis.setDescription('Enable/Disable of IGMP Report aggregation.')
igmpSnoopCurCfgFlood = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 3, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopCurCfgFlood.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopCurCfgFlood.setDescription('Enable/Disable of flood unregistered IPMC')
igmpSnoopNewCfgFlood = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopNewCfgFlood.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopNewCfgFlood.setDescription('Enable/Disable of flood unregistered IPMC')
igmpSnoopCurCfgCpu = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopCurCfgCpu.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopCurCfgCpu.setDescription('Enable/Disable unregistered IPMC to CPU.')
igmpSnoopNewCfgCpu = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 3, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopNewCfgCpu.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopNewCfgCpu.setDescription('Enable/Disable unregistered IPMC to CPU.')
igmpStaticMrtrCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 4, 1), )
if mibBuilder.loadTexts: igmpStaticMrtrCurCfgTable.setStatus('current')
if mibBuilder.loadTexts: igmpStaticMrtrCurCfgTable.setDescription('The IGMP Static Multicast Router table in the current configuration block.')
igmpStaticMrtrCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 4, 1, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "igmpStaticMrtrCurCfgIndx"))
if mibBuilder.loadTexts: igmpStaticMrtrCurCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: igmpStaticMrtrCurCfgTableEntry.setDescription('A row in the Static Multicast Router table.')
igmpStaticMrtrCurCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpStaticMrtrCurCfgIndx.setStatus('current')
if mibBuilder.loadTexts: igmpStaticMrtrCurCfgIndx.setDescription('The IGMP Multicast Router table port index.')
igmpStaticMrtrCurCfgPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 4, 1, 1, 2), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpStaticMrtrCurCfgPortId.setStatus('current')
if mibBuilder.loadTexts: igmpStaticMrtrCurCfgPortId.setDescription('The IGMP Multicast Router port in the current configuration block.')
igmpStaticMrtrCurCfgVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpStaticMrtrCurCfgVlanId.setStatus('current')
if mibBuilder.loadTexts: igmpStaticMrtrCurCfgVlanId.setDescription('The IGMP Multicast Router port in the current configuration block.')
igmpStaticMrtrCurCfgVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("version1", 1), ("version2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpStaticMrtrCurCfgVersion.setStatus('current')
if mibBuilder.loadTexts: igmpStaticMrtrCurCfgVersion.setDescription('The IGMP version of the IGMP Static Multicast Router.')
igmpStaticMrtrNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 4, 2), )
if mibBuilder.loadTexts: igmpStaticMrtrNewCfgTable.setStatus('current')
if mibBuilder.loadTexts: igmpStaticMrtrNewCfgTable.setDescription('The IGMP Static Multicast Router table in the new configuration block.')
igmpStaticMrtrNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 4, 2, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "igmpStaticMrtrNewCfgIndx"))
if mibBuilder.loadTexts: igmpStaticMrtrNewCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: igmpStaticMrtrNewCfgTableEntry.setDescription('A row in the Static Multicast Router table.')
igmpStaticMrtrNewCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpStaticMrtrNewCfgIndx.setStatus('current')
if mibBuilder.loadTexts: igmpStaticMrtrNewCfgIndx.setDescription('The IGMP Multicast Router table port index.')
igmpStaticMrtrNewCfgPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 4, 2, 1, 2), PortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpStaticMrtrNewCfgPortId.setStatus('current')
if mibBuilder.loadTexts: igmpStaticMrtrNewCfgPortId.setDescription('The IGMP Multicast Router port in the new configuration block.')
igmpStaticMrtrNewCfgVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 4, 2, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpStaticMrtrNewCfgVlanId.setStatus('current')
if mibBuilder.loadTexts: igmpStaticMrtrNewCfgVlanId.setDescription('The IGMP Multicast Router port in the new configuration block.')
igmpStaticMrtrNewCfgVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("version1", 1), ("version2", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpStaticMrtrNewCfgVersion.setStatus('current')
if mibBuilder.loadTexts: igmpStaticMrtrNewCfgVersion.setDescription('The IGMP version of the IGMP Static Multicast Router.')
igmpStaticMrtrNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpStaticMrtrNewCfgDelete.setStatus('current')
if mibBuilder.loadTexts: igmpStaticMrtrNewCfgDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
igmpFltCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 5, 1), )
if mibBuilder.loadTexts: igmpFltCurCfgTable.setStatus('current')
if mibBuilder.loadTexts: igmpFltCurCfgTable.setDescription('The IGMP filtering table in the current configuration block.')
igmpFltCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 5, 1, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "igmpFltCurCfgIndx"))
if mibBuilder.loadTexts: igmpFltCurCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: igmpFltCurCfgTableEntry.setDescription('A row in the filtering table.')
igmpFltCurCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpFltCurCfgIndx.setStatus('current')
if mibBuilder.loadTexts: igmpFltCurCfgIndx.setDescription('The IGMP filter table index.')
igmpFltCurCfgMcastIp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 5, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpFltCurCfgMcastIp1.setStatus('current')
if mibBuilder.loadTexts: igmpFltCurCfgMcastIp1.setDescription('Range1 Multicast IP address to be filtered.')
igmpFltCurCfgMcastIp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 5, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpFltCurCfgMcastIp2.setStatus('current')
if mibBuilder.loadTexts: igmpFltCurCfgMcastIp2.setDescription('Range2 Multicast IP address to be filtered.')
igmpFltCurCfgAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpFltCurCfgAction.setStatus('current')
if mibBuilder.loadTexts: igmpFltCurCfgAction.setDescription('The action for the IGMP filtering rule.')
igmpFltCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpFltCurCfgState.setStatus('current')
if mibBuilder.loadTexts: igmpFltCurCfgState.setDescription('The state of this IGMP filtering rule.')
igmpFltNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 5, 2), )
if mibBuilder.loadTexts: igmpFltNewCfgTable.setStatus('current')
if mibBuilder.loadTexts: igmpFltNewCfgTable.setDescription('The IGMP filtering table in the current configuration block.')
igmpFltNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 5, 2, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "igmpFltNewCfgIndx"))
if mibBuilder.loadTexts: igmpFltNewCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: igmpFltNewCfgTableEntry.setDescription('A row in the filtering table.')
igmpFltNewCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpFltNewCfgIndx.setStatus('current')
if mibBuilder.loadTexts: igmpFltNewCfgIndx.setDescription('The IGMP filter table index.')
igmpFltNewCfgMcastIp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 5, 2, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpFltNewCfgMcastIp1.setStatus('current')
if mibBuilder.loadTexts: igmpFltNewCfgMcastIp1.setDescription('Range1 Multicast source IP address to be filtered.')
igmpFltNewCfgMcastIp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 5, 2, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpFltNewCfgMcastIp2.setStatus('current')
if mibBuilder.loadTexts: igmpFltNewCfgMcastIp2.setDescription('Range2 Multicast source IP address to be filtered.')
igmpFltNewCfgAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpFltNewCfgAction.setStatus('current')
if mibBuilder.loadTexts: igmpFltNewCfgAction.setDescription('The action for the IGMP filtering rule.')
igmpFltNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpFltNewCfgState.setStatus('current')
if mibBuilder.loadTexts: igmpFltNewCfgState.setDescription('The state of this IGMP filtering rule.')
igmpFltNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpFltNewCfgDelete.setStatus('current')
if mibBuilder.loadTexts: igmpFltNewCfgDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
igmpFltCurCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 5, 3), )
if mibBuilder.loadTexts: igmpFltCurCfgPortTable.setStatus('current')
if mibBuilder.loadTexts: igmpFltCurCfgPortTable.setDescription('The IGMP filtering port table in the current configuration block.')
igmpFltCurCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 5, 3, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "igmpFltCurCfgPortIndx"))
if mibBuilder.loadTexts: igmpFltCurCfgPortTableEntry.setStatus('current')
if mibBuilder.loadTexts: igmpFltCurCfgPortTableEntry.setDescription('A row in the IGMP filtering port table.')
igmpFltCurCfgPortIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 5, 3, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpFltCurCfgPortIndx.setStatus('current')
if mibBuilder.loadTexts: igmpFltCurCfgPortIndx.setDescription('The port index.')
igmpFltCurCfgPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpFltCurCfgPortState.setStatus('current')
if mibBuilder.loadTexts: igmpFltCurCfgPortState.setDescription('Enable or disable IGMP filtering.')
igmpFltCurCfgPortFiltBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 5, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpFltCurCfgPortFiltBmap.setStatus('current')
if mibBuilder.loadTexts: igmpFltCurCfgPortFiltBmap.setDescription('The IGMP filtering rules applied to the port. The filtering rules are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ filter 9 || || || ||___ filter 8 || |____ filter 7 || . . . ||_________ filter 2 |__________ filter 1 (as index to igmpFltCurCfgTable) where x : 1 - The represented IGMP filter rule applied to the port 0 - The represented IGMP filter rule not applied to the port ')
igmpFltNewCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 5, 4), )
if mibBuilder.loadTexts: igmpFltNewCfgPortTable.setStatus('current')
if mibBuilder.loadTexts: igmpFltNewCfgPortTable.setDescription('The IGMP filtering port table in the new configuration block.')
igmpFltNewCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 5, 4, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "igmpFltNewCfgPortIndx"))
if mibBuilder.loadTexts: igmpFltNewCfgPortTableEntry.setStatus('current')
if mibBuilder.loadTexts: igmpFltNewCfgPortTableEntry.setDescription('A row in the IGMP filtering port table.')
igmpFltNewCfgPortIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 5, 4, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpFltNewCfgPortIndx.setStatus('current')
if mibBuilder.loadTexts: igmpFltNewCfgPortIndx.setDescription('The port index.')
igmpFltNewCfgPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpFltNewCfgPortState.setStatus('current')
if mibBuilder.loadTexts: igmpFltNewCfgPortState.setDescription('Enable or disable IGMP filtering.')
igmpFltNewCfgPortFiltBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 5, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpFltNewCfgPortFiltBmap.setStatus('current')
if mibBuilder.loadTexts: igmpFltNewCfgPortFiltBmap.setDescription('The IGMP filtering rules applied to the port. The filtering rules are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ filter 9 || || || ||___ filter 8 || |____ filter 7 || . . . ||_________ filter 2 |__________ filter 1 (as index to fltNewCfgTable) where x : 1 - The represented filter rule applied to the port 0 - The represented filter rule not applied to the port ')
igmpFltNewCfgPortAddFiltRule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 5, 4, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpFltNewCfgPortAddFiltRule.setStatus('current')
if mibBuilder.loadTexts: igmpFltNewCfgPortAddFiltRule.setDescription("This is an action object to add filtering rule to a port. The value specified with this object is the index to the fltNewCfgTable for which filtering rule to be added to the port. The range of the valid index is between 1 and igmpFltCurCfgTableMaxSize. When read, the value '0' is returned always.")
igmpFltNewCfgPortRemFiltRule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 5, 4, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpFltNewCfgPortRemFiltRule.setStatus('current')
if mibBuilder.loadTexts: igmpFltNewCfgPortRemFiltRule.setDescription("This is an action object to remove filtering rule from a port. The value specified with this object is the index to the fltNewCfgTable for which filtering rule to be removed from the port. The range of the valid index is between 1 and igmpFltCurCfgTableMaxSize. When read, the value '0' is returned always.")
igmpFltCurCfgEnaDis = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpFltCurCfgEnaDis.setStatus('current')
if mibBuilder.loadTexts: igmpFltCurCfgEnaDis.setDescription('Enable/Disable of IGMP Filtering.')
igmpFltNewCfgEnaDis = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 15, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpFltNewCfgEnaDis.setStatus('current')
if mibBuilder.loadTexts: igmpFltNewCfgEnaDis.setDescription('Enable/Disable of IGMP Filtering.')
ripStatInPackets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 13, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInPackets.setStatus('current')
if mibBuilder.loadTexts: ripStatInPackets.setDescription('The total number of RIP packets recieved.')
ripStatOutPackets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 13, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatOutPackets.setStatus('current')
if mibBuilder.loadTexts: ripStatOutPackets.setDescription('The total number of RIP packets transmitted.')
ripStatInRequestPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 13, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInRequestPkts.setStatus('current')
if mibBuilder.loadTexts: ripStatInRequestPkts.setDescription('The total number of RIP requests recieved.')
ripStatInResponsePkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 13, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInResponsePkts.setStatus('current')
if mibBuilder.loadTexts: ripStatInResponsePkts.setDescription('The total number of RIP response recieved.')
ripStatOutRequestPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 13, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatOutRequestPkts.setStatus('current')
if mibBuilder.loadTexts: ripStatOutRequestPkts.setDescription('The total number of RIP requests transmitted.')
ripStatOutResponsePkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 13, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatOutResponsePkts.setStatus('current')
if mibBuilder.loadTexts: ripStatOutResponsePkts.setDescription('The total number of RIP responses transmitted.')
ripStatRouteTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 13, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatRouteTimeout.setStatus('current')
if mibBuilder.loadTexts: ripStatRouteTimeout.setDescription('The total number of RIP route timeouts.')
ripStatInBadSizePkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 13, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInBadSizePkts.setStatus('current')
if mibBuilder.loadTexts: ripStatInBadSizePkts.setDescription('The total number of bad size RIP packets recieved.')
ripStatInBadVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 13, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInBadVersion.setStatus('current')
if mibBuilder.loadTexts: ripStatInBadVersion.setDescription('The total number of RIP bad versions recieved.')
ripStatInBadZeros = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 13, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInBadZeros.setStatus('current')
if mibBuilder.loadTexts: ripStatInBadZeros.setDescription('The total number of RIP bad zeros recieved.')
ripStatInBadSourcePort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 13, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInBadSourcePort.setStatus('current')
if mibBuilder.loadTexts: ripStatInBadSourcePort.setDescription('The total number of RIP bad source port recieved.')
ripStatInBadSourceIP = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 13, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInBadSourceIP.setStatus('current')
if mibBuilder.loadTexts: ripStatInBadSourceIP.setDescription('The total number of RIP bad source IP recieved.')
ripStatInSelfRcvPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 13, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInSelfRcvPkts.setStatus('current')
if mibBuilder.loadTexts: ripStatInSelfRcvPkts.setDescription('The total number of RIP packets from self received.')
dnsStatInGoodDnsRequests = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 14, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsStatInGoodDnsRequests.setStatus('current')
if mibBuilder.loadTexts: dnsStatInGoodDnsRequests.setDescription('The total number of good DNS request packets received.')
dnsStatOutDnsRequests = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 14, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsStatOutDnsRequests.setStatus('current')
if mibBuilder.loadTexts: dnsStatOutDnsRequests.setDescription('The total number of DNS request packets')
dnsStatInBadDnsRequests = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 14, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsStatInBadDnsRequests.setStatus('current')
if mibBuilder.loadTexts: dnsStatInBadDnsRequests.setDescription('The total number of bad DNS request packets received')
maxL3TableSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxL3TableSize.setStatus('current')
if mibBuilder.loadTexts: maxL3TableSize.setDescription('Max L3 table size')
noL3EntriesUsed = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 15, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noL3EntriesUsed.setStatus('current')
if mibBuilder.loadTexts: noL3EntriesUsed.setDescription('Number of L3 entries used')
maxLpmTableSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 15, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxLpmTableSize.setStatus('current')
if mibBuilder.loadTexts: maxLpmTableSize.setDescription('Max LPM table size')
noLpmEntriesUsed = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 15, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noLpmEntriesUsed.setStatus('current')
if mibBuilder.loadTexts: noLpmEntriesUsed.setDescription('Number of LPM entries used')
maxBlockInLpmTable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 15, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxBlockInLpmTable.setStatus('current')
if mibBuilder.loadTexts: maxBlockInLpmTable.setDescription('Max number of blocks in LPM table')
noBlocksUsedInLpmTable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 15, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noBlocksUsedInLpmTable.setStatus('current')
if mibBuilder.loadTexts: noBlocksUsedInLpmTable.setDescription('Number of blocks used in LPM table')
arpStatEntries = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpStatEntries.setStatus('current')
if mibBuilder.loadTexts: arpStatEntries.setDescription('The current number of ARP entries.')
arpStatHighWater = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpStatHighWater.setStatus('current')
if mibBuilder.loadTexts: arpStatHighWater.setDescription('The highest number of ARP entries.')
arpStatMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpStatMaxEntries.setStatus('current')
if mibBuilder.loadTexts: arpStatMaxEntries.setDescription('The maximum number of ARP entries.')
routeStatEntries = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 3, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeStatEntries.setStatus('current')
if mibBuilder.loadTexts: routeStatEntries.setDescription('The current number of IP routes.')
routeStatHighWater = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 3, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeStatHighWater.setStatus('current')
if mibBuilder.loadTexts: routeStatHighWater.setDescription('The highest number of IP routes.')
routeStatMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 3, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeStatMaxEntries.setStatus('current')
if mibBuilder.loadTexts: routeStatMaxEntries.setDescription('The maximum number of IP routes.')
vrrpStatInAdvers = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatInAdvers.setStatus('current')
if mibBuilder.loadTexts: vrrpStatInAdvers.setDescription('The number of good VRRP advertisements which are received.')
vrrpStatOutAdvers = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatOutAdvers.setStatus('current')
if mibBuilder.loadTexts: vrrpStatOutAdvers.setDescription('The number of good VRRP advertisements which are transmitted.')
vrrpStatOutBadAdvers = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatOutBadAdvers.setStatus('current')
if mibBuilder.loadTexts: vrrpStatOutBadAdvers.setDescription('The number of bad VRRP advertisements which are received.')
vrrpStatBadVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatBadVersion.setStatus('current')
if mibBuilder.loadTexts: vrrpStatBadVersion.setDescription('The number of bad VRRP version adv which are received.')
vrrpStatBadAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatBadAddress.setStatus('current')
if mibBuilder.loadTexts: vrrpStatBadAddress.setDescription('The number of bad VRRP addres adv which are received.')
vrrpStatBadPassword = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatBadPassword.setStatus('current')
if mibBuilder.loadTexts: vrrpStatBadPassword.setDescription('The number of bad VRRP advertisements which are received.')
vrrpStatBadVrid = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatBadVrid.setStatus('current')
if mibBuilder.loadTexts: vrrpStatBadVrid.setDescription('The number of bad VRRP version ID adv which are received.')
vrrpStatBadData = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatBadData.setStatus('current')
if mibBuilder.loadTexts: vrrpStatBadData.setDescription('The number of bad VRRP advertisements which are received.')
vrrpStatBadInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatBadInterval.setStatus('current')
if mibBuilder.loadTexts: vrrpStatBadInterval.setDescription('The number of bad VRRP iutervals which are received.')
ipClearStats = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("ok", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipClearStats.setStatus('current')
if mibBuilder.loadTexts: ipClearStats.setDescription('Setting this to clear(1) results in clearing the IP statistics.')
vrrpClearStats = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpClearStats.setStatus('current')
if mibBuilder.loadTexts: vrrpClearStats.setDescription('Setting this to clear(2) results in clearing the VRRP statistics.')
ripClearStats = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("ok", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripClearStats.setStatus('current')
if mibBuilder.loadTexts: ripClearStats.setDescription('Setting this to clear(1) results in clearing the RIP statistics.')
ospfClearStats = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("ok", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfClearStats.setStatus('current')
if mibBuilder.loadTexts: ospfClearStats.setDescription('Setting this to clear(1) results in clearing the OSPF statistics.')
tcpClearStats = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("ok", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpClearStats.setStatus('current')
if mibBuilder.loadTexts: tcpClearStats.setDescription('Setting this to clear(1) results in clearing the TCP statistics.')
udpClearStats = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("ok", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: udpClearStats.setStatus('current')
if mibBuilder.loadTexts: udpClearStats.setDescription('Setting this to clear(1) results in clearing the UDP statistics.')
dnsClearStats = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("ok", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsClearStats.setStatus('current')
if mibBuilder.loadTexts: dnsClearStats.setDescription('Setting this to clear(1) results in clearing the DNS statistics.')
arpClearStats = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 6, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("ok", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpClearStats.setStatus('current')
if mibBuilder.loadTexts: arpClearStats.setDescription('Setting this to clear(1) results in clearing the ARP statistics.')
icmpClearStats = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 6, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("ok", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: icmpClearStats.setStatus('current')
if mibBuilder.loadTexts: icmpClearStats.setDescription('Setting this to clear(1) results in clearing the ICMP statistics.')
routeClearStats = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 6, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("ok", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeClearStats.setStatus('current')
if mibBuilder.loadTexts: routeClearStats.setDescription('Setting this to clear(1) results in clearing the Route statistics.')
igmpClearAllStats = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("ok", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpClearAllStats.setStatus('current')
if mibBuilder.loadTexts: igmpClearAllStats.setDescription('Setting this to clear(1) results in clearing the IGMP statistics.')
ospfGeneralStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 1))
ospfCumRxTxStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 1, 1))
ospfCumNbrChangeStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 1, 2))
ospfCumIntfChangeStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 1, 3))
ospfTimersKickOffStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 1, 4))
ospfArea = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2))
ospfAreaRxTxStats = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 1), )
if mibBuilder.loadTexts: ospfAreaRxTxStats.setStatus('current')
if mibBuilder.loadTexts: ospfAreaRxTxStats.setDescription('The table of OSPF Area Rx/Tx Statistics.')
ospfAreaRxTxStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 1, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ospfAreaRxTxIndex"))
if mibBuilder.loadTexts: ospfAreaRxTxStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ospfAreaRxTxStatsEntry.setDescription('Rx Tx packet Statistics about a OSPF area.')
ospfAreaRxTxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaRxTxIndex.setStatus('current')
if mibBuilder.loadTexts: ospfAreaRxTxIndex.setDescription('The index of the ospf Area for which these statistics apply.')
ospfAreaRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaRxPkts.setStatus('current')
if mibBuilder.loadTexts: ospfAreaRxPkts.setDescription('The total number of OSPF packets received in this OSPF area.')
ospfAreaTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaTxPkts.setStatus('current')
if mibBuilder.loadTexts: ospfAreaTxPkts.setDescription('The total number of OSPF packets transmitted in this OSPF area.')
ospfAreaRxHello = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaRxHello.setStatus('current')
if mibBuilder.loadTexts: ospfAreaRxHello.setDescription('The total number of Hello packets received in this OSPF area.')
ospfAreaTxHello = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaTxHello.setStatus('current')
if mibBuilder.loadTexts: ospfAreaTxHello.setDescription('The total number of Hello packets transmitted in this OSPF area.')
ospfAreaRxDatabase = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaRxDatabase.setStatus('current')
if mibBuilder.loadTexts: ospfAreaRxDatabase.setDescription('The total number of Database Description packets transmitted for this OSPF area.')
ospfAreaTxDatabase = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaTxDatabase.setStatus('current')
if mibBuilder.loadTexts: ospfAreaTxDatabase.setDescription('The total number of Database Description packets transmitted for this OSPF area.')
ospfAreaRxlsReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaRxlsReqs.setStatus('current')
if mibBuilder.loadTexts: ospfAreaRxlsReqs.setDescription('The total number of Link State Request packets received for this OSPF area.')
ospfAreaTxlsReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaTxlsReqs.setStatus('current')
if mibBuilder.loadTexts: ospfAreaTxlsReqs.setDescription('The total number of Link State Request packets transmitted for this OSPF area.')
ospfAreaRxlsAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaRxlsAcks.setStatus('current')
if mibBuilder.loadTexts: ospfAreaRxlsAcks.setDescription('The total number of Link State Acknowledgement packets received for this OSPF area.')
ospfAreaTxlsAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaTxlsAcks.setStatus('current')
if mibBuilder.loadTexts: ospfAreaTxlsAcks.setDescription('The total number of Link State Acknowledgement packets transmitted for this OSPF area.')
ospfAreaRxlsUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaRxlsUpdates.setStatus('current')
if mibBuilder.loadTexts: ospfAreaRxlsUpdates.setDescription('The total number of Link State Update packets received for this OSPF area.')
ospfAreaTxlsUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaTxlsUpdates.setStatus('current')
if mibBuilder.loadTexts: ospfAreaTxlsUpdates.setDescription('The total number of Link State Update packets transmitted for this OSPF area.')
ospfAreaNbrChangeStats = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 2), )
if mibBuilder.loadTexts: ospfAreaNbrChangeStats.setStatus('current')
if mibBuilder.loadTexts: ospfAreaNbrChangeStats.setDescription('The table of OSPF Area Neighbour Statistics.')
ospfAreaNbrChangeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 2, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ospfAreaNbrIndex"))
if mibBuilder.loadTexts: ospfAreaNbrChangeStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ospfAreaNbrChangeStatsEntry.setDescription('Area Neighbour Change Statistics about a OSPF area.')
ospfAreaNbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrIndex.setStatus('current')
if mibBuilder.loadTexts: ospfAreaNbrIndex.setDescription('The index of the ospf Area for which these statistics apply.')
ospfAreaNbrhello = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrhello.setStatus('current')
if mibBuilder.loadTexts: ospfAreaNbrhello.setDescription('The total number of Hello packets received from neighbours in this OSPF area.')
ospfAreaNbrStart = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrStart.setStatus('current')
if mibBuilder.loadTexts: ospfAreaNbrStart.setDescription('The total number of neighbours in this state (i.e. an indication that Hello packets should now be sent to the neighbour at intervals of HelloInterval seconds.) in this OSPF area.')
ospfAreaNbrAdjointOk = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrAdjointOk.setStatus('current')
if mibBuilder.loadTexts: ospfAreaNbrAdjointOk.setDescription('The total number of decisions to be made (again) as to whether an adjacency should be established/maintained with the neighbour. for this OSPF area.')
ospfAreaNbrNegotiationDone = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrNegotiationDone.setStatus('current')
if mibBuilder.loadTexts: ospfAreaNbrNegotiationDone.setDescription('The total number of neighbours in this state wherein the Master/slave relationship has been negotiated, and sequence numbers have been exchanged, for this OSPF area.')
ospfAreaNbrExchangeDone = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrExchangeDone.setStatus('current')
if mibBuilder.loadTexts: ospfAreaNbrExchangeDone.setDescription("The total number of neighbours in this state (i.e. in an adjacency's final state) having transimitted a full sequence of Database Description packets, for this OSPF area.")
ospfAreaNbrBadRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrBadRequests.setStatus('current')
if mibBuilder.loadTexts: ospfAreaNbrBadRequests.setDescription('The sum total number of Link State Requests which have been received for a link state advertisement not contained in the database across this OSPF area.')
ospfAreaNbrBadSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrBadSequence.setStatus('current')
if mibBuilder.loadTexts: ospfAreaNbrBadSequence.setDescription('The total number of Database Description packets which have been received that either a) has an unexpected DD sequence number b) Unexpectedly has the init bit set c) Has an options field differing from the last Options field received in a Database Description packet. Any of these conditions indicate that some error has occured during adjacency establishment for this OSPF area.')
ospfAreaNbrLoadingDone = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrLoadingDone.setStatus('current')
if mibBuilder.loadTexts: ospfAreaNbrLoadingDone.setDescription('The total number of link state updates received for all out-of-date portions of the database in this OSPF area.')
ospfAreaNbrN1way = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrN1way.setStatus('current')
if mibBuilder.loadTexts: ospfAreaNbrN1way.setDescription('The total number of Hello packets received from neighbours, in which this router is not mentioned in this OSPF area.')
ospfAreaNbrRstAd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrRstAd.setStatus('current')
if mibBuilder.loadTexts: ospfAreaNbrRstAd.setDescription('The total number of times the Neighbour adjacency has been reset across this OPSF area.')
ospfAreaNbrDown = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrDown.setStatus('current')
if mibBuilder.loadTexts: ospfAreaNbrDown.setDescription('The total number of Neighbouring routers down (i.e. in the initial state of a neighbour conversation.) in this OSPF area.')
ospfAreaNbrN2way = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrN2way.setStatus('current')
if mibBuilder.loadTexts: ospfAreaNbrN2way.setDescription('The total number of Hello packets received from neighbours, in which this router is mentioned in this OSPF area.')
ospfAreaChangeStats = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 3), )
if mibBuilder.loadTexts: ospfAreaChangeStats.setStatus('current')
if mibBuilder.loadTexts: ospfAreaChangeStats.setDescription('The table of OSPF Area Change Statistics.')
ospfAreaChangeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 3, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ospfAreaIntfIndex"))
if mibBuilder.loadTexts: ospfAreaChangeStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ospfAreaChangeStatsEntry.setDescription('Area Change Statistics about a OSPF area.')
ospfAreaIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfIndex.setStatus('current')
if mibBuilder.loadTexts: ospfAreaIntfIndex.setDescription('The index of the OSPF Area for which these statistics apply.')
ospfAreaIntfHello = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfHello.setStatus('current')
if mibBuilder.loadTexts: ospfAreaIntfHello.setDescription('The total number of Hello packets sent on this OSPF area.')
ospfAreaIntfDown = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfDown.setStatus('current')
if mibBuilder.loadTexts: ospfAreaIntfDown.setDescription('The total number of interfaces down in this OSPF area.')
ospfAreaIntfLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfLoop.setStatus('current')
if mibBuilder.loadTexts: ospfAreaIntfLoop.setDescription('The total number of interfaces no longer connected to the attatched network in this OSPF area.')
ospfAreaIntfUnloop = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfUnloop.setStatus('current')
if mibBuilder.loadTexts: ospfAreaIntfUnloop.setDescription('The total number of interfaces connected to the attatched network in this OSPF area..')
ospfAreaIntfWaitTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfWaitTimer.setStatus('current')
if mibBuilder.loadTexts: ospfAreaIntfWaitTimer.setDescription('The total number of times the Wait Timer has been fired, (indicating the end of the waiting period that is required before electing a (Backup) Designated Router) for this OSPF area.')
ospfAreaIntfBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfBackup.setStatus('current')
if mibBuilder.loadTexts: ospfAreaIntfBackup.setDescription('The total number of Backup Designated Routers on the attatched network for this OSPF area.')
ospfAreaIntfNbrChange = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfNbrChange.setStatus('current')
if mibBuilder.loadTexts: ospfAreaIntfNbrChange.setDescription('The total number of changes in the set of bidirectional neighbours associated with the interface in this OSPF area.')
ospfAreaErrorStats = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 4), )
if mibBuilder.loadTexts: ospfAreaErrorStats.setStatus('current')
if mibBuilder.loadTexts: ospfAreaErrorStats.setDescription('The table of OSPF Area Error Statistics.')
ospfAreaErrorStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 4, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ospfAreaErrIndex"))
if mibBuilder.loadTexts: ospfAreaErrorStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ospfAreaErrorStatsEntry.setDescription('Error Statistics for an OSPF area.')
ospfAreaErrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaErrIndex.setStatus('current')
if mibBuilder.loadTexts: ospfAreaErrIndex.setDescription('The index of the OSPF Area for which these statistics apply.')
ospfAreaErrAuthFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaErrAuthFailure.setStatus('current')
if mibBuilder.loadTexts: ospfAreaErrAuthFailure.setDescription('The total number of packets received with a wrong password in this area.')
ospfAreaErrNetmaskMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaErrNetmaskMismatch.setStatus('current')
if mibBuilder.loadTexts: ospfAreaErrNetmaskMismatch.setDescription('The total number of packets received with a wrong netmask in this area.')
ospfAreaErrHelloMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaErrHelloMismatch.setStatus('current')
if mibBuilder.loadTexts: ospfAreaErrHelloMismatch.setDescription('The total number of packets received with a different hello interval in this area.')
ospfAreaErrDeadMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaErrDeadMismatch.setStatus('current')
if mibBuilder.loadTexts: ospfAreaErrDeadMismatch.setDescription('The total number of packets received with a different dead interval in this area.')
ospfAreaErrOptionsMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaErrOptionsMismatch.setStatus('current')
if mibBuilder.loadTexts: ospfAreaErrOptionsMismatch.setDescription('The total number of packets received with a different options in this area.')
ospfAreaErrUnknownNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaErrUnknownNbr.setStatus('current')
if mibBuilder.loadTexts: ospfAreaErrUnknownNbr.setDescription('The total number of packets received from an unknown neighbor in this area.')
ospfAreaErrAreaMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaErrAreaMismatch.setStatus('current')
if mibBuilder.loadTexts: ospfAreaErrAreaMismatch.setDescription('The total number of packets received with a wrong area.')
ospfInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3))
ospfIntfRxTxStats = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 1), )
if mibBuilder.loadTexts: ospfIntfRxTxStats.setStatus('current')
if mibBuilder.loadTexts: ospfIntfRxTxStats.setDescription('The table of OSPF Interface Rx/Tx packet Statistics.')
ospfIntfRxTxStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 1, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ospfIntfRxTxIndex"))
if mibBuilder.loadTexts: ospfIntfRxTxStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ospfIntfRxTxStatsEntry.setDescription('OSPF interface Rx/Tx packet statistics.')
ospfIntfRxTxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfRxTxIndex.setStatus('current')
if mibBuilder.loadTexts: ospfIntfRxTxIndex.setDescription('The OSPF interface for which these statistics apply.')
ospfIntfRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfRxPkts.setStatus('current')
if mibBuilder.loadTexts: ospfIntfRxPkts.setDescription('The total number of OSPF packets received for this OSPF interface.')
ospfIntfTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfTxPkts.setStatus('current')
if mibBuilder.loadTexts: ospfIntfTxPkts.setDescription('The total number of OSPF packets transmitted for this OSPF interface.')
ospfIntfRxHello = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfRxHello.setStatus('current')
if mibBuilder.loadTexts: ospfIntfRxHello.setDescription('The total number of Hello packets received for this OSPF interface.')
ospfIntfTxHello = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfTxHello.setStatus('current')
if mibBuilder.loadTexts: ospfIntfTxHello.setDescription('The total number of Hello packets transmitted for this OSPF interface.')
ospfIntfRxDatabase = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfRxDatabase.setStatus('current')
if mibBuilder.loadTexts: ospfIntfRxDatabase.setDescription('The total number of Database Description packets received for this OSPF interface.')
ospfIntfTxDatabase = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfTxDatabase.setStatus('current')
if mibBuilder.loadTexts: ospfIntfTxDatabase.setDescription('The total number of Database Description packets transmitted for this OSPF interface.')
ospfIntfRxlsReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfRxlsReqs.setStatus('current')
if mibBuilder.loadTexts: ospfIntfRxlsReqs.setDescription('The total number of Link State Request packets received for this OSPF interface.')
ospfIntfTxlsReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfTxlsReqs.setStatus('current')
if mibBuilder.loadTexts: ospfIntfTxlsReqs.setDescription('The total number of Link State Request packets transmitted for this OSPF interface.')
ospfIntfRxlsAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfRxlsAcks.setStatus('current')
if mibBuilder.loadTexts: ospfIntfRxlsAcks.setDescription('The total number of Link State Acknowledgement packets received for this OSPF interface.')
ospfIntfTxlsAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfTxlsAcks.setStatus('current')
if mibBuilder.loadTexts: ospfIntfTxlsAcks.setDescription('The total number of Link State Acknowledgement packets transmitted for this OSPF interface.')
ospfIntfRxlsUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfRxlsUpdates.setStatus('current')
if mibBuilder.loadTexts: ospfIntfRxlsUpdates.setDescription('The total number of Link State Update packets received for this OSPF interface.')
ospfIntfTxlsUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfTxlsUpdates.setStatus('current')
if mibBuilder.loadTexts: ospfIntfTxlsUpdates.setDescription('The total number of Link State Update packets transmitted for this OSPF interface.')
ospfIntfNbrChangeStats = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 2), )
if mibBuilder.loadTexts: ospfIntfNbrChangeStats.setStatus('current')
if mibBuilder.loadTexts: ospfIntfNbrChangeStats.setDescription('The table of OSPF Interface Neighbour change Statistics.')
ospfIntfNbrChangeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 2, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ospfIntfNbrIndex"))
if mibBuilder.loadTexts: ospfIntfNbrChangeStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ospfIntfNbrChangeStatsEntry.setDescription('OSPF interface Neighbour Change statistics.')
ospfIntfNbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrIndex.setStatus('current')
if mibBuilder.loadTexts: ospfIntfNbrIndex.setDescription('The index of the OSPF Interface for which these statistics apply.')
ospfIntfNbrhello = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrhello.setStatus('current')
if mibBuilder.loadTexts: ospfIntfNbrhello.setDescription('The total number of Hello packets received from neighbours in this OSPF interface.')
ospfIntfNbrStart = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrStart.setStatus('current')
if mibBuilder.loadTexts: ospfIntfNbrStart.setDescription('The total number of neighbours in this state (i.e. an indication that Hello packets should now be sent to the neighbour at intervals of HelloInterval seconds.) in this OSPF interface.')
ospfIntfNbrAdjointOk = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrAdjointOk.setStatus('current')
if mibBuilder.loadTexts: ospfIntfNbrAdjointOk.setDescription('The total number of decisions to be made (again) as to whether an adjacency should be established/maintained with the neighbour. for this OSPF interface.')
ospfIntfNbrNegotiationDone = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrNegotiationDone.setStatus('current')
if mibBuilder.loadTexts: ospfIntfNbrNegotiationDone.setDescription('The total number of neighbours in this state wherein the Master/slave relationship has been negotiated, and sequence numbers have been exchanged, for this OSPF interface.')
ospfIntfNbrExchangeDone = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrExchangeDone.setStatus('current')
if mibBuilder.loadTexts: ospfIntfNbrExchangeDone.setDescription("The total number of neighbours in this state (i.e. in an adjacency's final state) having transimitted a full sequence of Database Description packets, for this OSPF interface.")
ospfIntfNbrBadRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrBadRequests.setStatus('current')
if mibBuilder.loadTexts: ospfIntfNbrBadRequests.setDescription('The total number of Link State Requests which have been received for a link state advertisement not contained in the database for this interface.')
ospfIntfNbrBadSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrBadSequence.setStatus('current')
if mibBuilder.loadTexts: ospfIntfNbrBadSequence.setDescription('The total number of Database Description packets which have been received that either a) has an unexpected DD sequence number b) Unexpectedly has the init bit set c) Has an options field differing from the last Options field received in a Database Description packet. Any of these conditions indicate that some error has occured during adjacency establishment for this interface.')
ospfIntfNbrLoadingDone = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrLoadingDone.setStatus('current')
if mibBuilder.loadTexts: ospfIntfNbrLoadingDone.setDescription('The total number of link state updates received for all out-of-date portions of the database for this OSPF interface.')
ospfIntfNbrN1way = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrN1way.setStatus('current')
if mibBuilder.loadTexts: ospfIntfNbrN1way.setDescription('The total number of Hello packets received from neighbours, in which this router is not mentioned for this OSPF interface.')
ospfIntfNbrRstAd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrRstAd.setStatus('current')
if mibBuilder.loadTexts: ospfIntfNbrRstAd.setDescription('The sum total number of times the Neighbour adjacency has been reset on this interface.')
ospfIntfNbrDown = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrDown.setStatus('current')
if mibBuilder.loadTexts: ospfIntfNbrDown.setDescription('The total number of Neighbouring routers down (i.e. in the initial state of a neighbour conversation.) for this interface.')
ospfIntfNbrN2way = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrN2way.setStatus('current')
if mibBuilder.loadTexts: ospfIntfNbrN2way.setDescription('The total number of Hello packets received from neighbours, in which this router is mentioned for this OSPF interface.')
ospfIntfChangeStats = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 3), )
if mibBuilder.loadTexts: ospfIntfChangeStats.setStatus('current')
if mibBuilder.loadTexts: ospfIntfChangeStats.setDescription('The table of OSPF Interface change Statistics.')
ospfIntfChangeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 3, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ospfIntfIndex"))
if mibBuilder.loadTexts: ospfIntfChangeStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ospfIntfChangeStatsEntry.setDescription('OSPF interface Change statistics.')
ospfIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfIndex.setStatus('current')
if mibBuilder.loadTexts: ospfIntfIndex.setDescription('The index of the OSPF Interface for which these statistics apply.')
ospfIntfHello = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfHello.setStatus('current')
if mibBuilder.loadTexts: ospfIntfHello.setDescription('The total number of Hello packets sent by this interface.')
ospfIntfDown = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfDown.setStatus('current')
if mibBuilder.loadTexts: ospfIntfDown.setDescription('The total number of times the interface was down.')
ospfIntfLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfLoop.setStatus('current')
if mibBuilder.loadTexts: ospfIntfLoop.setDescription('The total number of times the interface was no longer connected to the attatched network.')
ospfIntfUnloop = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfUnloop.setStatus('current')
if mibBuilder.loadTexts: ospfIntfUnloop.setDescription('The total number of times the interface, connected back to the attatched network.')
ospfIntfWaitTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfWaitTimer.setStatus('current')
if mibBuilder.loadTexts: ospfIntfWaitTimer.setDescription('The total number of times the Wait Timer has been fired, (indicating the end of the waiting period that is required before electing a (Backup) Designated Router) for this OSPF interface.')
ospfIntfBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfBackup.setStatus('current')
if mibBuilder.loadTexts: ospfIntfBackup.setDescription('The total number of Backup Designated Routers on the attatched network for this OSPF interface.')
ospfIntfNbrChange = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrChange.setStatus('current')
if mibBuilder.loadTexts: ospfIntfNbrChange.setDescription('The total number of changes in the set of bidirectional neighbours associated with the interface for this OSPF interface.')
ospfIntfErrorStats = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 4), )
if mibBuilder.loadTexts: ospfIntfErrorStats.setStatus('current')
if mibBuilder.loadTexts: ospfIntfErrorStats.setDescription('The table of OSPF Interface Error Statistics.')
ospfIntfErrorStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 4, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ospfIntfErrIndex"))
if mibBuilder.loadTexts: ospfIntfErrorStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ospfIntfErrorStatsEntry.setDescription('Error Statistics for an OSPF area.')
ospfIntfErrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfErrIndex.setStatus('current')
if mibBuilder.loadTexts: ospfIntfErrIndex.setDescription('The index of the OSPF Intf for which these statistics apply.')
ospfIntfErrAuthFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfErrAuthFailure.setStatus('current')
if mibBuilder.loadTexts: ospfIntfErrAuthFailure.setDescription('The total number of packets received with a wrong password in this area.')
ospfIntfErrNetmaskMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfErrNetmaskMismatch.setStatus('current')
if mibBuilder.loadTexts: ospfIntfErrNetmaskMismatch.setDescription('The total number of packets received with a wrong netmask in this area.')
ospfIntfErrHelloMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfErrHelloMismatch.setStatus('current')
if mibBuilder.loadTexts: ospfIntfErrHelloMismatch.setDescription('The total number of packets received with a different hello interval in this area.')
ospfIntfErrDeadMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfErrDeadMismatch.setStatus('current')
if mibBuilder.loadTexts: ospfIntfErrDeadMismatch.setDescription('The total number of packets received with a different dead interval in this area.')
ospfIntfErrOptionsMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfErrOptionsMismatch.setStatus('current')
if mibBuilder.loadTexts: ospfIntfErrOptionsMismatch.setDescription('The total number of packets received with a different options in this area.')
ospfIntfErrUnknownNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfErrUnknownNbr.setStatus('current')
if mibBuilder.loadTexts: ospfIntfErrUnknownNbr.setDescription('The total number of packets received from an unknown neighbor in this area.')
ospfIntfErrAreaMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 3, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfErrAreaMismatch.setStatus('current')
if mibBuilder.loadTexts: ospfIntfErrAreaMismatch.setDescription('The total number of packets received with a wrong area.')
ospfCumRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumRxPkts.setStatus('current')
if mibBuilder.loadTexts: ospfCumRxPkts.setDescription('The sum total of all OSPF packets received on all OSPF areas and interfaces.')
ospfCumTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumTxPkts.setStatus('current')
if mibBuilder.loadTexts: ospfCumTxPkts.setDescription('The sum total of all OSPF packets transmitted on all OSPF areas and interfaces.')
ospfCumRxHello = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumRxHello.setStatus('current')
if mibBuilder.loadTexts: ospfCumRxHello.setDescription('The sum total of all Hello packets received on all OSPF areas and interfaces.')
ospfCumTxHello = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumTxHello.setStatus('current')
if mibBuilder.loadTexts: ospfCumTxHello.setDescription('The sum total of all Hello packets transmitted on all OSPF areas and interfaces.')
ospfCumRxDatabase = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumRxDatabase.setStatus('current')
if mibBuilder.loadTexts: ospfCumRxDatabase.setDescription('The sum total of all Database Description packets received on all OSPF areas and interfaces.')
ospfCumTxDatabase = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumTxDatabase.setStatus('current')
if mibBuilder.loadTexts: ospfCumTxDatabase.setDescription('The sum total of all Database Description packets transmitted on all OSPF areas and interfaces.')
ospfCumRxlsReqs = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumRxlsReqs.setStatus('current')
if mibBuilder.loadTexts: ospfCumRxlsReqs.setDescription('The sum total of all Link State Request packets received on all OSPF areas and interfaces.')
ospfCumTxlsReqs = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumTxlsReqs.setStatus('current')
if mibBuilder.loadTexts: ospfCumTxlsReqs.setDescription('The sum total of all Link State Request packets transmitted on all OSPF areas and interfaces.')
ospfCumRxlsAcks = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumRxlsAcks.setStatus('current')
if mibBuilder.loadTexts: ospfCumRxlsAcks.setDescription('The sum total of all Link State Acknowledgement packets received on all OSPF areas and interfaces.')
ospfCumTxlsAcks = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumTxlsAcks.setStatus('current')
if mibBuilder.loadTexts: ospfCumTxlsAcks.setDescription('The sum total of all Link State Acknowledgement packets transmitted on all OSPF areas and interfaces.')
ospfCumRxlsUpdates = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumRxlsUpdates.setStatus('current')
if mibBuilder.loadTexts: ospfCumRxlsUpdates.setDescription('The sum total of all Link State Update packets received on all OSPF areas and interfaces.')
ospfCumTxlsUpdates = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumTxlsUpdates.setStatus('current')
if mibBuilder.loadTexts: ospfCumTxlsUpdates.setDescription('The sum total of all Link State Update packets transmitted on all OSPF areas and interfaces.')
ospfCumNbrhello = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 1, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrhello.setStatus('current')
if mibBuilder.loadTexts: ospfCumNbrhello.setDescription('The sum total of all Hello packets received from neighbours on all OSPF areas and interfaces.')
ospfCumNbrStart = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrStart.setStatus('current')
if mibBuilder.loadTexts: ospfCumNbrStart.setDescription('The sum total number of neighbours in this state (i.e. an indication that Hello packets should now be sent to the neighbour at intervals of HelloInterval seconds.) across all OSPF areas and interfaces.')
ospfCumNbrAdjointOk = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 1, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrAdjointOk.setStatus('current')
if mibBuilder.loadTexts: ospfCumNbrAdjointOk.setDescription('The sum total number of decisions to be made (again) as to whether an adjacency should be established/maintained with the neighbour across all OSPF areas and interfaces.')
ospfCumNbrNegotiationDone = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrNegotiationDone.setStatus('current')
if mibBuilder.loadTexts: ospfCumNbrNegotiationDone.setDescription('The sum total number of neighbours in this state wherein the Master/slave relationship has been negotiated, and sequence numbers have been exchanged, across all OSPF areas and interfaces.')
ospfCumNbrExchangeDone = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 1, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrExchangeDone.setStatus('current')
if mibBuilder.loadTexts: ospfCumNbrExchangeDone.setDescription("The sum total number of neighbours in this state (i.e. in an adjacency's final state) having transimitted a full sequence of Database Description packets, across all OSPF areas and interfaces.")
ospfCumNbrBadRequests = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 1, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrBadRequests.setStatus('current')
if mibBuilder.loadTexts: ospfCumNbrBadRequests.setDescription('The sum total number of Link State Requests which have been received for a link state advertisement not contained in the database across all interfaces and OSPF areas.')
ospfCumNbrBadSequence = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 1, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrBadSequence.setStatus('current')
if mibBuilder.loadTexts: ospfCumNbrBadSequence.setDescription('The sum total number of Database Description packets which have been received that either a) has an unexpected DD sequence number b) Unexpectedly has the init bit set c) Has an options field differing from the last Options field received in a Database Description packet. Any of these conditions indicate that some error has occured during adjacency establishment for all OSPF areas and interfaces.')
ospfCumNbrLoadingDone = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 1, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrLoadingDone.setStatus('current')
if mibBuilder.loadTexts: ospfCumNbrLoadingDone.setDescription('The sum total number of link state updates received for all out-of-date portions of the database across all OSPF areas and interfaces.')
ospfCumNbrN1way = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 1, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrN1way.setStatus('current')
if mibBuilder.loadTexts: ospfCumNbrN1way.setDescription('The sum total number of Hello packets received from neighbours, in which this router is not mentioned across all OSPF interfaces and areas.')
ospfCumNbrRstAd = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 1, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrRstAd.setStatus('current')
if mibBuilder.loadTexts: ospfCumNbrRstAd.setDescription('The sum total number of times the Neighbour adjacency has been reset across all OPSF areas and interfaces.')
ospfCumNbrDown = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 1, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrDown.setStatus('current')
if mibBuilder.loadTexts: ospfCumNbrDown.setDescription('The total number of Neighbouring routers down (i.e. in the initial state of a neighbour conversation.) across all OSPF areas and interfaces.')
ospfCumNbrN2way = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 1, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrN2way.setStatus('current')
if mibBuilder.loadTexts: ospfCumNbrN2way.setDescription('The sum total number of Hello packets received from neighbours, in which this router is mentioned across all OSPF interfaces and areas.')
ospfCumIntfHello = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 1, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumIntfHello.setStatus('current')
if mibBuilder.loadTexts: ospfCumIntfHello.setDescription('The sum total number of Hello packets sent on all interfaces and areas')
ospfCumIntfDown = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 1, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumIntfDown.setStatus('current')
if mibBuilder.loadTexts: ospfCumIntfDown.setDescription('The sum total number of interfaces down in all OSPF areas.')
ospfCumIntfLoop = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 1, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumIntfLoop.setStatus('current')
if mibBuilder.loadTexts: ospfCumIntfLoop.setDescription('The sum total of interfaces no longer connected to the attatched network across all OSPF areas and interfaces.')
ospfCumIntfUnloop = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 1, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumIntfUnloop.setStatus('current')
if mibBuilder.loadTexts: ospfCumIntfUnloop.setDescription('The sum total number of interfaces, connected to the attatched network in all OSPF areas.')
ospfCumIntfWaitTimer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 1, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumIntfWaitTimer.setStatus('current')
if mibBuilder.loadTexts: ospfCumIntfWaitTimer.setDescription('The sum total number of times the Wait Timer has been fired, (indicating the end of the waiting period that is required before electing a (Backup) Designated Router) across all OSPF areas and interfaces.')
ospfCumIntfBackup = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 1, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumIntfBackup.setStatus('current')
if mibBuilder.loadTexts: ospfCumIntfBackup.setDescription('The sum total number of Backup Designated Routers on the attatched network for all OSPF areas and interfaces.')
ospfCumIntfNbrChange = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 1, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumIntfNbrChange.setStatus('current')
if mibBuilder.loadTexts: ospfCumIntfNbrChange.setDescription('The sum total number of changes in the set of bidirectional neighbours associated with any interface across all OSPF areas.')
ospfTmrsKckOffHello = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 1, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTmrsKckOffHello.setStatus('current')
if mibBuilder.loadTexts: ospfTmrsKckOffHello.setDescription('The sum total number of times the Hello timer has been fired (which triggers the send of a Hello packet) across all OPSF areas and interfaces.')
ospfTmrsKckOffRetransmit = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 1, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTmrsKckOffRetransmit.setStatus('current')
if mibBuilder.loadTexts: ospfTmrsKckOffRetransmit.setDescription('The sum total number of times the Retransmit timer has been fired across all OPSF areas and interfaces.')
ospfTmrsKckOffLsaLock = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 1, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTmrsKckOffLsaLock.setStatus('current')
if mibBuilder.loadTexts: ospfTmrsKckOffLsaLock.setDescription('The sum total number of times the Lsa Lock timer has been fired across all OSPF areas and interfaces.')
ospfTmrsKckOffLsaAck = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 1, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTmrsKckOffLsaAck.setStatus('current')
if mibBuilder.loadTexts: ospfTmrsKckOffLsaAck.setDescription('The sum total number of times the Lsa Ack timer has been fired across all ospf areas and interfaces.')
ospfTmrsKckOffDbage = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 1, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTmrsKckOffDbage.setStatus('current')
if mibBuilder.loadTexts: ospfTmrsKckOffDbage.setDescription('The total number of times the Dbage has been fired.')
ospfTmrsKckOffSummary = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 1, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTmrsKckOffSummary.setStatus('current')
if mibBuilder.loadTexts: ospfTmrsKckOffSummary.setDescription('The total number of times the Summary timer has been fired.')
ospfTmrsKckOffAseExport = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 5, 1, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTmrsKckOffAseExport.setStatus('current')
if mibBuilder.loadTexts: ospfTmrsKckOffAseExport.setDescription('The total number of times the ASE Export timer has been fired.')
ipStatsInReceives = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 8, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStatsInReceives.setStatus('current')
if mibBuilder.loadTexts: ipStatsInReceives.setDescription('ip InReceive')
ipStatsInHdrErrors = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 8, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStatsInHdrErrors.setStatus('current')
if mibBuilder.loadTexts: ipStatsInHdrErrors.setDescription('ip InHdrError')
ipStatsInAddrErrors = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 8, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStatsInAddrErrors.setStatus('current')
if mibBuilder.loadTexts: ipStatsInAddrErrors.setDescription('ip InAddrErrors')
ipStatsInUnknownProtos = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 8, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStatsInUnknownProtos.setStatus('current')
if mibBuilder.loadTexts: ipStatsInUnknownProtos.setDescription('ip InUnknownProtos')
ipStatsInDiscards = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 8, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStatsInDiscards.setStatus('current')
if mibBuilder.loadTexts: ipStatsInDiscards.setDescription('ip InDiscards')
ipStatsInDelivers = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 8, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStatsInDelivers.setStatus('current')
if mibBuilder.loadTexts: ipStatsInDelivers.setDescription('ip InDelivers')
ipStatsOutRequests = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 8, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStatsOutRequests.setStatus('current')
if mibBuilder.loadTexts: ipStatsOutRequests.setDescription('ip OutRequests')
ipStatsOutDiscards = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 8, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStatsOutDiscards.setStatus('current')
if mibBuilder.loadTexts: ipStatsOutDiscards.setDescription('ip OutDiscards')
ipStatsDefaultTTL = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 8, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStatsDefaultTTL.setStatus('current')
if mibBuilder.loadTexts: ipStatsDefaultTTL.setDescription('ip DefaultTTL')
icmpStatsInMsgs = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 9, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsInMsgs.setStatus('current')
if mibBuilder.loadTexts: icmpStatsInMsgs.setDescription('icmp InMsgs')
icmpStatsInErrors = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 9, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsInErrors.setStatus('current')
if mibBuilder.loadTexts: icmpStatsInErrors.setDescription('icmp InErrors')
icmpStatsInDestUnreachs = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 9, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsInDestUnreachs.setStatus('current')
if mibBuilder.loadTexts: icmpStatsInDestUnreachs.setDescription('icmp InDestUnreachs')
icmpStatsInTimeExcds = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 9, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsInTimeExcds.setStatus('current')
if mibBuilder.loadTexts: icmpStatsInTimeExcds.setDescription('icmp InTimeExcds')
icmpStatsInParmProbs = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 9, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsInParmProbs.setStatus('current')
if mibBuilder.loadTexts: icmpStatsInParmProbs.setDescription('icmp InParmProbs')
icmpStatsInSrcQuenchs = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 9, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsInSrcQuenchs.setStatus('current')
if mibBuilder.loadTexts: icmpStatsInSrcQuenchs.setDescription('icmp InSrcQuenchs')
icmpStatsInRedirects = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 9, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsInRedirects.setStatus('current')
if mibBuilder.loadTexts: icmpStatsInRedirects.setDescription('icmp InRedirects')
icmpStatsInEchos = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 9, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsInEchos.setStatus('current')
if mibBuilder.loadTexts: icmpStatsInEchos.setDescription('icmp InEchos')
icmpStatsInEchoReps = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 9, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsInEchoReps.setStatus('current')
if mibBuilder.loadTexts: icmpStatsInEchoReps.setDescription('icmp InEchoReps')
icmpStatsInTimestamps = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 9, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsInTimestamps.setStatus('current')
if mibBuilder.loadTexts: icmpStatsInTimestamps.setDescription('icmp InTimestamps')
icmpStatsInTimestampReps = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 9, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsInTimestampReps.setStatus('current')
if mibBuilder.loadTexts: icmpStatsInTimestampReps.setDescription('icmp InTimestampReps')
icmpStatsInAddrMasks = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 9, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsInAddrMasks.setStatus('current')
if mibBuilder.loadTexts: icmpStatsInAddrMasks.setDescription('icmp InAddrMasks')
icmpStatsInAddrMaskReps = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 9, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsInAddrMaskReps.setStatus('current')
if mibBuilder.loadTexts: icmpStatsInAddrMaskReps.setDescription('icmp InAddrMaskReps')
icmpStatsOutMsgs = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 9, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsOutMsgs.setStatus('current')
if mibBuilder.loadTexts: icmpStatsOutMsgs.setDescription('icmp OutMsgs')
icmpStatsOutErrors = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 9, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsOutErrors.setStatus('current')
if mibBuilder.loadTexts: icmpStatsOutErrors.setDescription('icmp OutErrors')
icmpStatsOutDestUnreachs = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 9, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsOutDestUnreachs.setStatus('current')
if mibBuilder.loadTexts: icmpStatsOutDestUnreachs.setDescription('icmp OutDestUnreachs')
icmpStatsOutTimeExcds = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 9, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsOutTimeExcds.setStatus('current')
if mibBuilder.loadTexts: icmpStatsOutTimeExcds.setDescription('icmp OutTimeExcds')
icmpStatsOutParmProbs = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 9, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsOutParmProbs.setStatus('current')
if mibBuilder.loadTexts: icmpStatsOutParmProbs.setDescription('icmp OutParmProbs')
icmpStatsOutSrcQuenchs = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 9, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsOutSrcQuenchs.setStatus('current')
if mibBuilder.loadTexts: icmpStatsOutSrcQuenchs.setDescription('icmp OutSrcQuenchs')
icmpStatsOutRedirects = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 9, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsOutRedirects.setStatus('current')
if mibBuilder.loadTexts: icmpStatsOutRedirects.setDescription('icmp OutRedirects')
icmpStatsOutEchos = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 9, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsOutEchos.setStatus('current')
if mibBuilder.loadTexts: icmpStatsOutEchos.setDescription('icmp OutEchos')
icmpStatsOutEchoReps = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 9, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsOutEchoReps.setStatus('current')
if mibBuilder.loadTexts: icmpStatsOutEchoReps.setDescription('icmp OutEchoReps')
icmpStatsOutTimestamps = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 9, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsOutTimestamps.setStatus('current')
if mibBuilder.loadTexts: icmpStatsOutTimestamps.setDescription('icmp OutTimestamps')
icmpStatsOutTimestampReps = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 9, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsOutTimestampReps.setStatus('current')
if mibBuilder.loadTexts: icmpStatsOutTimestampReps.setDescription('icmp OutTimestampReps')
icmpStatsOutAddrMasks = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 9, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsOutAddrMasks.setStatus('current')
if mibBuilder.loadTexts: icmpStatsOutAddrMasks.setDescription('icmp OutAddrMasks')
icmpStatsOutAddrMaskReps = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 9, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpStatsOutAddrMaskReps.setStatus('current')
if mibBuilder.loadTexts: icmpStatsOutAddrMaskReps.setDescription('icmp OutAddrMaskReps')
tcpStatsRtoAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 10, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpStatsRtoAlgorithm.setStatus('current')
if mibBuilder.loadTexts: tcpStatsRtoAlgorithm.setDescription('tcp RtoAlgorithm')
tcpStatsRtoMin = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 10, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpStatsRtoMin.setStatus('current')
if mibBuilder.loadTexts: tcpStatsRtoMin.setDescription('tcp RtoMin')
tcpStatsRtoMax = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 10, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpStatsRtoMax.setStatus('current')
if mibBuilder.loadTexts: tcpStatsRtoMax.setDescription('tcp RtoMax')
tcpStatsMaxConn = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 10, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpStatsMaxConn.setStatus('current')
if mibBuilder.loadTexts: tcpStatsMaxConn.setDescription('tcp MaxConn')
tcpStatsActiveOpens = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 10, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpStatsActiveOpens.setStatus('current')
if mibBuilder.loadTexts: tcpStatsActiveOpens.setDescription('tcp ActiveOpens')
tcpStatsPassiveOpens = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 10, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpStatsPassiveOpens.setStatus('current')
if mibBuilder.loadTexts: tcpStatsPassiveOpens.setDescription('tcp PassiveOpens')
tcpStatsAttemptFails = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 10, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpStatsAttemptFails.setStatus('current')
if mibBuilder.loadTexts: tcpStatsAttemptFails.setDescription('tcp AttemptFails')
tcpStatsEstabResets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 10, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpStatsEstabResets.setStatus('current')
if mibBuilder.loadTexts: tcpStatsEstabResets.setDescription('tcp EstabResets')
tcpStatsInSegs = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 10, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpStatsInSegs.setStatus('current')
if mibBuilder.loadTexts: tcpStatsInSegs.setDescription('tcp InSegs')
tcpStatsOutSegs = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 10, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpStatsOutSegs.setStatus('current')
if mibBuilder.loadTexts: tcpStatsOutSegs.setDescription('tcp OutSegs')
tcpStatsRetransSegs = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 10, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpStatsRetransSegs.setStatus('current')
if mibBuilder.loadTexts: tcpStatsRetransSegs.setDescription('tcp RetransSegs')
tcpStatsInErrs = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 10, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpStatsInErrs.setStatus('current')
if mibBuilder.loadTexts: tcpStatsInErrs.setDescription('tcp InErrs')
tcpStatsCurrEstab = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 10, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpStatsCurrEstab.setStatus('current')
if mibBuilder.loadTexts: tcpStatsCurrEstab.setDescription('tcp CurrEstab')
tcpStatsCurrConn = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 10, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpStatsCurrConn.setStatus('current')
if mibBuilder.loadTexts: tcpStatsCurrConn.setDescription('tcp CurrConn')
tcpStatsOutRsts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 10, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpStatsOutRsts.setStatus('current')
if mibBuilder.loadTexts: tcpStatsOutRsts.setDescription('tcp OutRsts')
udpStatsInDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 11, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpStatsInDatagrams.setStatus('current')
if mibBuilder.loadTexts: udpStatsInDatagrams.setDescription('udp InDatagrams')
udpStatsOutDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 11, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpStatsOutDatagrams.setStatus('current')
if mibBuilder.loadTexts: udpStatsOutDatagrams.setDescription('udp OutDatagrams')
udpStatsInErrors = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 11, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpStatsInErrors.setStatus('current')
if mibBuilder.loadTexts: udpStatsInErrors.setDescription('udp InErrors')
udpStatsNoPorts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 11, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpStatsNoPorts.setStatus('current')
if mibBuilder.loadTexts: udpStatsNoPorts.setDescription('udp NoPorts')
igmpSnoopStats = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 7, 1), )
if mibBuilder.loadTexts: igmpSnoopStats.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopStats.setDescription('Statistics for IGMP Snooping.')
igmpSnoopStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 7, 1, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "igmpSnoopVlanIndex"))
if mibBuilder.loadTexts: igmpSnoopStatsEntry.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopStatsEntry.setDescription('Statistics for IGMP Snooping.')
igmpSnoopVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopVlanIndex.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopVlanIndex.setDescription('The index of the VLAN for which these statistics apply.')
rxIgmpValidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 7, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxIgmpValidPkts.setStatus('current')
if mibBuilder.loadTexts: rxIgmpValidPkts.setDescription('The total number of valid IGMP packets received on this VLAN.')
rxIgmpInvalidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 7, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxIgmpInvalidPkts.setStatus('current')
if mibBuilder.loadTexts: rxIgmpInvalidPkts.setDescription('The total number of invalid IGMP packets received on this VLAN.')
rxIgmpGenQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 7, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxIgmpGenQueries.setStatus('current')
if mibBuilder.loadTexts: rxIgmpGenQueries.setDescription('The total number of IGMP General Query packets received on this VLAN.')
rxIgmpGrpSpecificQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 7, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxIgmpGrpSpecificQueries.setStatus('current')
if mibBuilder.loadTexts: rxIgmpGrpSpecificQueries.setDescription('The total number of IGMP Group Specific Query packets received on this VLAN.')
rxIgmpLeaves = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 7, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxIgmpLeaves.setStatus('current')
if mibBuilder.loadTexts: rxIgmpLeaves.setDescription('The total number of IGMP Leave packets received on this VLAN.')
rxIgmpReports = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 7, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxIgmpReports.setStatus('current')
if mibBuilder.loadTexts: rxIgmpReports.setDescription('The total number of IGMP Report packets received on this VLAN.')
txIgmpGrpSpecificQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 7, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txIgmpGrpSpecificQueries.setStatus('current')
if mibBuilder.loadTexts: txIgmpGrpSpecificQueries.setDescription('The total number of IGMP Group Specific Query packets transmitted on this VLAN.')
txIgmpReports = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 7, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txIgmpReports.setStatus('current')
if mibBuilder.loadTexts: txIgmpReports.setDescription('The total number of IGMP Report packets transmitted on this VLAN.')
txIgmpLeaves = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 7, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txIgmpLeaves.setStatus('current')
if mibBuilder.loadTexts: txIgmpLeaves.setDescription('The total number of IGMP Leave packets transmitted on this VLAN.')
igmpClearVlanStats = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 2, 7, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("ok", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpClearVlanStats.setStatus('current')
if mibBuilder.loadTexts: igmpClearVlanStats.setDescription('Setting this to clear(1) results in clearing the statistics for this snooping VLAN.')
ipRouteInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 1, 1), )
if mibBuilder.loadTexts: ipRouteInfoTable.setStatus('current')
if mibBuilder.loadTexts: ipRouteInfoTable.setDescription('The table of run-time IP routes.')
ipRouteInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 1, 1, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ipRouteInfoIndx"))
if mibBuilder.loadTexts: ipRouteInfoEntry.setStatus('current')
if mibBuilder.loadTexts: ipRouteInfoEntry.setDescription('A row in the run-time IP route table')
ipRouteInfoIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoIndx.setStatus('current')
if mibBuilder.loadTexts: ipRouteInfoIndx.setDescription('The index of this route table.')
ipRouteInfoDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 1, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoDestIp.setStatus('current')
if mibBuilder.loadTexts: ipRouteInfoDestIp.setDescription('The destination IP address of this route.')
ipRouteInfoMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 1, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoMask.setStatus('current')
if mibBuilder.loadTexts: ipRouteInfoMask.setDescription('The destination IP mask of this route.')
ipRouteInfoGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 1, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoGateway.setStatus('current')
if mibBuilder.loadTexts: ipRouteInfoGateway.setDescription('The next-hop router address for this route.')
ipRouteInfoTag = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("fixed", 1), ("static", 2), ("addr", 3), ("rip", 4), ("broadcast", 5), ("martian", 6), ("multicast", 7), ("vip", 8), ("bgp", 9), ("ospf", 10), ("none", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoTag.setStatus('current')
if mibBuilder.loadTexts: ipRouteInfoTag.setDescription('The tag-type for this route.')
ipRouteInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("indirect", 1), ("direct", 2), ("local", 3), ("broadcast", 4), ("martian", 5), ("multicast", 6), ("other", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoType.setStatus('current')
if mibBuilder.loadTexts: ipRouteInfoType.setDescription('The type of the route.')
ipRouteInfoInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoInterface.setStatus('current')
if mibBuilder.loadTexts: ipRouteInfoInterface.setDescription('The interface number for which the destination address is applicable.')
ipRouteInfoMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoMetric.setStatus('current')
if mibBuilder.loadTexts: ipRouteInfoMetric.setDescription('The metric of this route.')
routeTableClear = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeTableClear.setStatus('current')
if mibBuilder.loadTexts: routeTableClear.setDescription('Setting this value to clear(2) clears the route table.')
arpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 2, 1), )
if mibBuilder.loadTexts: arpInfoTable.setStatus('current')
if mibBuilder.loadTexts: arpInfoTable.setDescription('The table of ARP entries.')
arpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 2, 1, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "arpInfoDestIp"))
if mibBuilder.loadTexts: arpInfoEntry.setStatus('current')
if mibBuilder.loadTexts: arpInfoEntry.setDescription('A row in the ARP table')
arpInfoDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 2, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoDestIp.setStatus('current')
if mibBuilder.loadTexts: arpInfoDestIp.setDescription('The destination IP address of the ARP entry.')
arpInfoMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 2, 1, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoMacAddr.setStatus('current')
if mibBuilder.loadTexts: arpInfoMacAddr.setDescription('The MAC address for the ARP entry.')
arpInfoVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoVLAN.setStatus('current')
if mibBuilder.loadTexts: arpInfoVLAN.setDescription('The VLAN identifier for the ARP entry.')
arpInfoSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 2, 1, 1, 4), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoSrcPort.setStatus('current')
if mibBuilder.loadTexts: arpInfoSrcPort.setDescription("The port number on which this entry's equivalence is effective.")
arpInfoFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("clear", 1), ("unresolved", 2), ("permanent", 3), ("indirect", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoFlag.setStatus('current')
if mibBuilder.loadTexts: arpInfoFlag.setDescription('The flag associated with this ARP entry.')
arpCacheClear = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpCacheClear.setStatus('current')
if mibBuilder.loadTexts: arpCacheClear.setDescription('Setting this value to clear(2) clears the ARP cache.')
igmpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 5, 1), )
if mibBuilder.loadTexts: igmpInfoTable.setStatus('current')
if mibBuilder.loadTexts: igmpInfoTable.setDescription('The table of IGMP group membership information.')
igmpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 5, 1, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "igmpInfoIndex"))
if mibBuilder.loadTexts: igmpInfoEntry.setStatus('current')
if mibBuilder.loadTexts: igmpInfoEntry.setDescription('Information about an IGMP group member .')
igmpInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpInfoIndex.setStatus('current')
if mibBuilder.loadTexts: igmpInfoIndex.setDescription('The igmp group number for which the IGMP info table is related.')
igmpInfoGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 5, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpInfoGroupId.setStatus('current')
if mibBuilder.loadTexts: igmpInfoGroupId.setDescription('The IP address of the IGMP group.')
igmpInfoVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpInfoVlanId.setStatus('current')
if mibBuilder.loadTexts: igmpInfoVlanId.setDescription('The VLAN ID for this IGMP group.')
igmpInfoVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v3", 1), ("v2", 2), ("v1", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpInfoVersion.setStatus('current')
if mibBuilder.loadTexts: igmpInfoVersion.setDescription('The Version of IGMP host.')
igmpInfoPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 5, 1, 1, 6), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpInfoPortNum.setStatus('current')
if mibBuilder.loadTexts: igmpInfoPortNum.setDescription('The Version of IGMP host.')
igmpInfoExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 5, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpInfoExpires.setStatus('current')
if mibBuilder.loadTexts: igmpInfoExpires.setDescription('The expiration time for this host.')
igmpMrtrInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 5, 2), )
if mibBuilder.loadTexts: igmpMrtrInfoTable.setStatus('current')
if mibBuilder.loadTexts: igmpMrtrInfoTable.setDescription('The table of IGMP mrouters.')
igmpMrtrInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 5, 2, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "igmpMrtrInfoIndex"))
if mibBuilder.loadTexts: igmpMrtrInfoEntry.setStatus('current')
if mibBuilder.loadTexts: igmpMrtrInfoEntry.setDescription('Information about an IGMP mrouter.')
igmpMrtrInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpMrtrInfoIndex.setStatus('current')
if mibBuilder.loadTexts: igmpMrtrInfoIndex.setDescription('The mrouter number for which the IGMP mrouter info table is related.')
igmpMrtrInfoVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpMrtrInfoVlanId.setStatus('current')
if mibBuilder.loadTexts: igmpMrtrInfoVlanId.setDescription('The VLAN ID on which this IGMP mrouter is attached.')
igmpMrtrInfoPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 5, 2, 1, 3), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpMrtrInfoPortId.setStatus('current')
if mibBuilder.loadTexts: igmpMrtrInfoPortId.setDescription('The port on which this IGMP mrouter is attached.')
igmpMrtrInfoVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpMrtrInfoVersion.setStatus('current')
if mibBuilder.loadTexts: igmpMrtrInfoVersion.setDescription('The version of this IGMP mrouter.')
igmpMrtrInfoExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 5, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpMrtrInfoExpires.setStatus('current')
if mibBuilder.loadTexts: igmpMrtrInfoExpires.setDescription('The expiration time for this mrouter.')
igmpMrtrInfoMrt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpMrtrInfoMrt.setStatus('current')
if mibBuilder.loadTexts: igmpMrtrInfoMrt.setDescription('The Maximum Query Response time of this IGMP mrouter.')
igmpClearTables = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ok", 0), ("clearGroups", 1), ("clearMrouters", 2), ("clearAll", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpClearTables.setStatus('current')
if mibBuilder.loadTexts: igmpClearTables.setDescription('Clear the IGMP tables. When setting clearGroups(1), the dynamic groups are removed, when setting clearMrouters(2), the mrouter tables are removed and when setting clearAll(3), both the dynamic groups and the mrouter tables are removed. When read, ok(0) is always returned.')
rip2GeneralInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 7, 1))
ripInfoState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoState.setStatus('current')
if mibBuilder.loadTexts: ripInfoState.setDescription('RIP global state.')
ripInfoUpdatePeriod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoUpdatePeriod.setStatus('current')
if mibBuilder.loadTexts: ripInfoUpdatePeriod.setDescription('Update Period in seconds.')
rip2InfoIntfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 7, 2), )
if mibBuilder.loadTexts: rip2InfoIntfTable.setStatus('current')
if mibBuilder.loadTexts: rip2InfoIntfTable.setDescription('The information table of RIP.')
ripInfoIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 7, 2, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ripInfoIntfIndex"))
if mibBuilder.loadTexts: ripInfoIntfEntry.setStatus('current')
if mibBuilder.loadTexts: ripInfoIntfEntry.setDescription('Information about RIP on IP interface.')
ripInfoIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfIndex.setStatus('current')
if mibBuilder.loadTexts: ripInfoIntfIndex.setDescription('The interface number for which the RIP information is related.')
ripInfoIntfVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ripVersion1", 1), ("ripVersion2", 2), ("ripVersionBoth", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfVersion.setStatus('current')
if mibBuilder.loadTexts: ripInfoIntfVersion.setDescription('RIP version.')
ripInfoIntfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 7, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfAddress.setStatus('current')
if mibBuilder.loadTexts: ripInfoIntfAddress.setDescription('The interface address.')
ripInfoIntfState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfState.setStatus('current')
if mibBuilder.loadTexts: ripInfoIntfState.setDescription('The status of RIP protocol.')
ripInfoIntfListen = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfListen.setStatus('current')
if mibBuilder.loadTexts: ripInfoIntfListen.setDescription('The status of listening to route updates.')
ripInfoIntfTrigUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfTrigUpdate.setStatus('current')
if mibBuilder.loadTexts: ripInfoIntfTrigUpdate.setDescription('The status of triggered updates.')
ripInfoIntfMcastUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfMcastUpdate.setStatus('current')
if mibBuilder.loadTexts: ripInfoIntfMcastUpdate.setDescription('The status of multicast updates.')
ripInfoIntfPoisonReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfPoisonReverse.setStatus('current')
if mibBuilder.loadTexts: ripInfoIntfPoisonReverse.setDescription('The status of RIP poison reverse.')
ripInfoIntfSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfSupply.setStatus('current')
if mibBuilder.loadTexts: ripInfoIntfSupply.setDescription('The status of supplying route updates.')
ripInfoIntfMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfMetric.setStatus('current')
if mibBuilder.loadTexts: ripInfoIntfMetric.setDescription('RIP route metric for this interface.')
ripInfoIntfAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 7, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("password", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfAuth.setStatus('current')
if mibBuilder.loadTexts: ripInfoIntfAuth.setDescription('The type of Authentication used on this interface.')
ripInfoIntfKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 7, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfKey.setStatus('current')
if mibBuilder.loadTexts: ripInfoIntfKey.setDescription('RIP update authentication password.')
ripInfoIntfDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 7, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("both", 1), ("listen", 2), ("supply", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfDefault.setStatus('current')
if mibBuilder.loadTexts: ripInfoIntfDefault.setDescription('Specifies what RIP does with default routes.')
ipInfoRouterID = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInfoRouterID.setStatus('current')
if mibBuilder.loadTexts: ipInfoRouterID.setDescription('Router ID information.')
ipIntfInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 2), )
if mibBuilder.loadTexts: ipIntfInfoTable.setStatus('current')
if mibBuilder.loadTexts: ipIntfInfoTable.setDescription('The table of IP interface information.')
intfInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 2, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "intfInfoIndex"))
if mibBuilder.loadTexts: intfInfoEntry.setStatus('current')
if mibBuilder.loadTexts: intfInfoEntry.setDescription('A row in IP interface information table.')
intfInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intfInfoIndex.setStatus('current')
if mibBuilder.loadTexts: intfInfoIndex.setDescription('The interface number for which the information is related.')
intfInfoAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intfInfoAddr.setStatus('current')
if mibBuilder.loadTexts: intfInfoAddr.setDescription('The IP address of the interface.')
intfInfoNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intfInfoNetMask.setStatus('current')
if mibBuilder.loadTexts: intfInfoNetMask.setDescription('The subnet mask of the interface.')
intfInfoBcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intfInfoBcastAddr.setStatus('current')
if mibBuilder.loadTexts: intfInfoBcastAddr.setDescription('The broadcast address of the interface.')
intfInfoVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intfInfoVlan.setStatus('current')
if mibBuilder.loadTexts: intfInfoVlan.setDescription('The VLAN number for this interface.')
intfInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: intfInfoStatus.setStatus('current')
if mibBuilder.loadTexts: intfInfoStatus.setDescription('The status of the interface.')
gatewayInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 3), )
if mibBuilder.loadTexts: gatewayInfoTable.setStatus('current')
if mibBuilder.loadTexts: gatewayInfoTable.setDescription('The table containing information for the default gateways.')
gatewayInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 3, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "gatewayInfoIndex"))
if mibBuilder.loadTexts: gatewayInfoEntry.setStatus('current')
if mibBuilder.loadTexts: gatewayInfoEntry.setDescription('A row in the gateway information table')
gatewayInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gatewayInfoIndex.setStatus('current')
if mibBuilder.loadTexts: gatewayInfoIndex.setDescription('The gateway number for which the information is related.')
gatewayInfoAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gatewayInfoAddr.setStatus('current')
if mibBuilder.loadTexts: gatewayInfoAddr.setDescription('The IP address of the default gateway.')
gatewayInfoVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4090))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gatewayInfoVlan.setStatus('current')
if mibBuilder.loadTexts: gatewayInfoVlan.setDescription('The VLAN number for this gateway (0 for any).')
gatewayInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gatewayInfoStatus.setStatus('current')
if mibBuilder.loadTexts: gatewayInfoStatus.setDescription('The status of the default gateway.')
ipInfoBootpRelayState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInfoBootpRelayState.setStatus('current')
if mibBuilder.loadTexts: ipInfoBootpRelayState.setDescription('The state of BOOTP relay.')
ipInfoBootpRelayAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInfoBootpRelayAddr.setStatus('current')
if mibBuilder.loadTexts: ipInfoBootpRelayAddr.setDescription('The IP address of BOOTP server.')
ipInfoBootpRelayAddr2 = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInfoBootpRelayAddr2.setStatus('current')
if mibBuilder.loadTexts: ipInfoBootpRelayAddr2.setDescription('The IP address of second BOOTP server.')
ipInfoFwdState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInfoFwdState.setStatus('current')
if mibBuilder.loadTexts: ipInfoFwdState.setDescription('IP forwarding global state.')
ipInfoFwdDirectedBcast = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInfoFwdDirectedBcast.setStatus('current')
if mibBuilder.loadTexts: ipInfoFwdDirectedBcast.setDescription('The state of forwarding directed broadcasts.')
ipInfoNwfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 9), )
if mibBuilder.loadTexts: ipInfoNwfTable.setStatus('current')
if mibBuilder.loadTexts: ipInfoNwfTable.setDescription('The table of IP network filter information.')
ipInfoNwfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 9, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ipInfoNwfIndex"))
if mibBuilder.loadTexts: ipInfoNwfEntry.setStatus('current')
if mibBuilder.loadTexts: ipInfoNwfEntry.setDescription('A row in the IP network filter information table.')
ipInfoNwfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInfoNwfIndex.setStatus('current')
if mibBuilder.loadTexts: ipInfoNwfIndex.setDescription('The netowrk filter number for which the NWF is related.')
ipInfoNwfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 9, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInfoNwfAddr.setStatus('current')
if mibBuilder.loadTexts: ipInfoNwfAddr.setDescription('The IP address of the network filter.')
ipInfoNwfMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 9, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInfoNwfMask.setStatus('current')
if mibBuilder.loadTexts: ipInfoNwfMask.setDescription('The IP network filter mask.')
ipInfoNwfState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInfoNwfState.setStatus('current')
if mibBuilder.loadTexts: ipInfoNwfState.setDescription('The state of the network filter.')
ipInfoRmapTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 10), )
if mibBuilder.loadTexts: ipInfoRmapTable.setStatus('current')
if mibBuilder.loadTexts: ipInfoRmapTable.setDescription('The table of IP route map information.')
ipInfoRmapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 10, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ipInfoRmapIndex"))
if mibBuilder.loadTexts: ipInfoRmapEntry.setStatus('current')
if mibBuilder.loadTexts: ipInfoRmapEntry.setDescription('Information about an IP route map.')
ipInfoRmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInfoRmapIndex.setStatus('current')
if mibBuilder.loadTexts: ipInfoRmapIndex.setDescription('The route map number for which the RMAP is related.')
ipInfoRmapLp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInfoRmapLp.setStatus('current')
if mibBuilder.loadTexts: ipInfoRmapLp.setDescription('The local-preference of the route map. 4294967295 means none')
ipInfoRmapMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInfoRmapMetric.setStatus('current')
if mibBuilder.loadTexts: ipInfoRmapMetric.setDescription('The metric of the route map. 4294967295 means none')
ipInfoRmapPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInfoRmapPrec.setStatus('current')
if mibBuilder.loadTexts: ipInfoRmapPrec.setDescription('The precedence of the route map.')
ipInfoRmapWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInfoRmapWeight.setStatus('current')
if mibBuilder.loadTexts: ipInfoRmapWeight.setDescription('The weight of the route map. 65535 means none')
ipInfoRmapState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInfoRmapState.setStatus('current')
if mibBuilder.loadTexts: ipInfoRmapState.setDescription('Enable or disable the route map.')
ipInfoRmapAp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 10, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInfoRmapAp.setStatus('current')
if mibBuilder.loadTexts: ipInfoRmapAp.setDescription('The as-path prepend of the matched route. Up to 3 AS number can be displayed for the string. The usuage is:<AS number> [<AS number>][ <AS number>]')
ipInfoRmapMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInfoRmapMetricType.setStatus('current')
if mibBuilder.loadTexts: ipInfoRmapMetricType.setDescription('The OSPF metric-type of the matched route.')
ipOspfInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11))
ipOspfInfoState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfInfoState.setStatus('current')
if mibBuilder.loadTexts: ipOspfInfoState.setDescription('OSPF global state.')
ipOspfInfoDefaultRouteMetric = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfInfoDefaultRouteMetric.setStatus('current')
if mibBuilder.loadTexts: ipOspfInfoDefaultRouteMetric.setDescription('The metric to be assigned.')
ipOspfInfoDefaultRouteMetricType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfInfoDefaultRouteMetricType.setStatus('current')
if mibBuilder.loadTexts: ipOspfInfoDefaultRouteMetricType.setDescription('The AS External metric type to be assigned.')
ipOspfInfoRouterID = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfInfoRouterID.setStatus('current')
if mibBuilder.loadTexts: ipOspfInfoRouterID.setDescription('The router ID of the switch.')
ipOspfInfoLsdbLimit = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfInfoLsdbLimit.setStatus('current')
if mibBuilder.loadTexts: ipOspfInfoLsdbLimit.setDescription('The LSDB limit for external LSA.')
ipOspfAreaInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 6), )
if mibBuilder.loadTexts: ipOspfAreaInfoTable.setStatus('current')
if mibBuilder.loadTexts: ipOspfAreaInfoTable.setDescription('The table of OSPF Area Information.')
ipOspfAreaInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 6, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ipOspfAreaInfoIndex"), (0, "BLADETYPE4-NETWORK-MIB", "ipOspfAreaInfoId"))
if mibBuilder.loadTexts: ipOspfAreaInfoEntry.setStatus('current')
if mibBuilder.loadTexts: ipOspfAreaInfoEntry.setDescription('Information about a OSPF area.')
ipOspfAreaInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfAreaInfoIndex.setStatus('current')
if mibBuilder.loadTexts: ipOspfAreaInfoIndex.setDescription('The OSPF area number for which the OSPF area table is related.')
ipOspfAreaInfoId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfAreaInfoId.setStatus('current')
if mibBuilder.loadTexts: ipOspfAreaInfoId.setDescription('The IP Address of the OSPF area.')
ipOspfAreaInfoSpfInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfAreaInfoSpfInterval.setStatus('current')
if mibBuilder.loadTexts: ipOspfAreaInfoSpfInterval.setDescription('The SPF interval for the OSPF area.')
ipOspfAreaInfoAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("password", 2), ("md5", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfAreaInfoAuthType.setStatus('current')
if mibBuilder.loadTexts: ipOspfAreaInfoAuthType.setDescription('Type of authentication being used. none(1) - no authentication password(2) - use password md5(3) - use MD5 authentication.')
ipOspfAreaInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("transit", 0), ("stub", 1), ("nssa", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfAreaInfoType.setStatus('current')
if mibBuilder.loadTexts: ipOspfAreaInfoType.setDescription('Type of Area. transit(0) stub(1) nssa(2)')
ipOspfAreaInfoMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfAreaInfoMetric.setStatus('current')
if mibBuilder.loadTexts: ipOspfAreaInfoMetric.setDescription('Metric (1-65535)')
ipOspfAreaInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfAreaInfoStatus.setStatus('current')
if mibBuilder.loadTexts: ipOspfAreaInfoStatus.setDescription('Status disabled(0) enabled(1)')
ipOspfRangeInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 7), )
if mibBuilder.loadTexts: ipOspfRangeInfoTable.setStatus('current')
if mibBuilder.loadTexts: ipOspfRangeInfoTable.setDescription('The table of OSPF summary range information.')
ipOspfRangeInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 7, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ipOspfRangeInfoIndex"))
if mibBuilder.loadTexts: ipOspfRangeInfoEntry.setStatus('current')
if mibBuilder.loadTexts: ipOspfRangeInfoEntry.setDescription('Information about an OSPF summary range.')
ipOspfRangeInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfRangeInfoIndex.setStatus('current')
if mibBuilder.loadTexts: ipOspfRangeInfoIndex.setDescription('The range number for which the OSPF summary range table is related.')
ipOspfRangeInfoAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 7, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfRangeInfoAddr.setStatus('current')
if mibBuilder.loadTexts: ipOspfRangeInfoAddr.setDescription('The IP Address of the range.')
ipOspfRangeInfoMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 7, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfRangeInfoMask.setStatus('current')
if mibBuilder.loadTexts: ipOspfRangeInfoMask.setDescription('The mask of the range.')
ipOspfRangeInfoAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfRangeInfoAreaIndex.setStatus('current')
if mibBuilder.loadTexts: ipOspfRangeInfoAreaIndex.setDescription('The area index.')
ipOspfRangeInfoHideState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfRangeInfoHideState.setStatus('current')
if mibBuilder.loadTexts: ipOspfRangeInfoHideState.setDescription('The state of the hide range.')
ipOspfRangeInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfRangeInfoState.setStatus('current')
if mibBuilder.loadTexts: ipOspfRangeInfoState.setDescription('The state of the range.')
ipOspfIntfInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 8), )
if mibBuilder.loadTexts: ipOspfIntfInfoTable.setStatus('current')
if mibBuilder.loadTexts: ipOspfIntfInfoTable.setDescription('The table of OSPF Interface Information.')
ipOspfIntfInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 8, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ipOspfIntfInfoIndex"))
if mibBuilder.loadTexts: ipOspfIntfInfoEntry.setStatus('current')
if mibBuilder.loadTexts: ipOspfIntfInfoEntry.setDescription('Information about an OSPF Interface.')
ipOspfIntfInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfIntfInfoIndex.setStatus('current')
if mibBuilder.loadTexts: ipOspfIntfInfoIndex.setDescription('The OSPF Interface number for which the OSPF Interface table is related.')
ipOspfIntfInfoId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 8, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfIntfInfoId.setStatus('current')
if mibBuilder.loadTexts: ipOspfIntfInfoId.setDescription('The IP Address of the OSPF interface.')
ipOspfIntfInfoArea = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfIntfInfoArea.setStatus('current')
if mibBuilder.loadTexts: ipOspfIntfInfoArea.setDescription('The index of the area that the interface belongs')
ipOspfIntfInfoMdkey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfIntfInfoMdkey.setStatus('current')
if mibBuilder.loadTexts: ipOspfIntfInfoMdkey.setDescription('The MD5 key for the OSPF interface 0 (none) no MD5 authentication.')
ipOspfIntfInfoCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfIntfInfoCost.setStatus('current')
if mibBuilder.loadTexts: ipOspfIntfInfoCost.setDescription('Interface cost')
ipOspfIntfInfoPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfIntfInfoPrio.setStatus('current')
if mibBuilder.loadTexts: ipOspfIntfInfoPrio.setDescription('Interface router priority')
ipOspfIntfInfoHello = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfIntfInfoHello.setStatus('current')
if mibBuilder.loadTexts: ipOspfIntfInfoHello.setDescription('Hello interval')
ipOspfIntfInfoDead = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfIntfInfoDead.setStatus('current')
if mibBuilder.loadTexts: ipOspfIntfInfoDead.setDescription('Dead interval')
ipOspfIntfInfoTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 8, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfIntfInfoTrans.setStatus('current')
if mibBuilder.loadTexts: ipOspfIntfInfoTrans.setDescription('Transit delay')
ipOspfIntfInfoRetra = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 8, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfIntfInfoRetra.setStatus('current')
if mibBuilder.loadTexts: ipOspfIntfInfoRetra.setDescription('Retransmit interval')
ipOspfIntfInfoAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 8, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfIntfInfoAuthKey.setStatus('current')
if mibBuilder.loadTexts: ipOspfIntfInfoAuthKey.setDescription('Authentication Key')
ipOspfIntfInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 8, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfIntfInfoStatus.setStatus('current')
if mibBuilder.loadTexts: ipOspfIntfInfoStatus.setDescription('Status of the interface disabled(0), enabled(1)')
ipOspfVirtIntfInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 9), )
if mibBuilder.loadTexts: ipOspfVirtIntfInfoTable.setStatus('current')
if mibBuilder.loadTexts: ipOspfVirtIntfInfoTable.setDescription('The table of OSPF Virtual Interface Information.')
ipOspfVirtIntfInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 9, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ipOspfVirtIntfInfoIndex"))
if mibBuilder.loadTexts: ipOspfVirtIntfInfoEntry.setStatus('current')
if mibBuilder.loadTexts: ipOspfVirtIntfInfoEntry.setDescription('Information about an OSPF virtual Interface.')
ipOspfVirtIntfInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfVirtIntfInfoIndex.setStatus('current')
if mibBuilder.loadTexts: ipOspfVirtIntfInfoIndex.setDescription('The OSPF Virtual Interface number for which the OSPF Virtual Interface table is related.')
ipOspfVirtIntfInfoAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfVirtIntfInfoAreaId.setStatus('current')
if mibBuilder.loadTexts: ipOspfVirtIntfInfoAreaId.setDescription('The index of the OSPF area to which this virtual interface belongs.')
ipOspfVirtIntfInfoNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 9, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfVirtIntfInfoNbr.setStatus('current')
if mibBuilder.loadTexts: ipOspfVirtIntfInfoNbr.setDescription('The IP Address of the OSPF neighbor for this virtual interface.')
ipOspfVirtIntfInfoMdkey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfVirtIntfInfoMdkey.setStatus('current')
if mibBuilder.loadTexts: ipOspfVirtIntfInfoMdkey.setDescription('The MD5 key for the OSPF virtual interface 0 (none) no MD5 authentication.')
ipOspfVirtIntfInfoHello = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfVirtIntfInfoHello.setStatus('current')
if mibBuilder.loadTexts: ipOspfVirtIntfInfoHello.setDescription('Hello interval')
ipOspfVirtIntfInfoDead = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfVirtIntfInfoDead.setStatus('current')
if mibBuilder.loadTexts: ipOspfVirtIntfInfoDead.setDescription('Dead interval')
ipOspfVirtIntfInfoTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfVirtIntfInfoTrans.setStatus('current')
if mibBuilder.loadTexts: ipOspfVirtIntfInfoTrans.setDescription('Transit delay')
ipOspfVirtIntfInfoRetra = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 9, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfVirtIntfInfoRetra.setStatus('current')
if mibBuilder.loadTexts: ipOspfVirtIntfInfoRetra.setDescription('Retransmit interval')
ipOspfVirtIntfInfoAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 9, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfVirtIntfInfoAuthKey.setStatus('current')
if mibBuilder.loadTexts: ipOspfVirtIntfInfoAuthKey.setDescription('Authentication Key')
ipOspfVirtIntfInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 9, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfVirtIntfInfoStatus.setStatus('current')
if mibBuilder.loadTexts: ipOspfVirtIntfInfoStatus.setDescription('Status disabled(0), enabled(1)')
ipOspfHostInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 10), )
if mibBuilder.loadTexts: ipOspfHostInfoTable.setStatus('current')
if mibBuilder.loadTexts: ipOspfHostInfoTable.setDescription('The table of OSPF Host Information.')
ipOspfHostInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 10, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ipOspfHostInfoIndex"), (0, "BLADETYPE4-NETWORK-MIB", "ipOspfHostInfoIpAddr"))
if mibBuilder.loadTexts: ipOspfHostInfoEntry.setStatus('current')
if mibBuilder.loadTexts: ipOspfHostInfoEntry.setDescription('Information about a OSPF host.')
ipOspfHostInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfHostInfoIndex.setStatus('current')
if mibBuilder.loadTexts: ipOspfHostInfoIndex.setDescription('The OSPF host number for which the OSPF host table is related.')
ipOspfHostInfoIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 10, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfHostInfoIpAddr.setStatus('current')
if mibBuilder.loadTexts: ipOspfHostInfoIpAddr.setDescription('The IP Address of the OSPF host.')
ipOspfHostInfoAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfHostInfoAreaIndex.setStatus('current')
if mibBuilder.loadTexts: ipOspfHostInfoAreaIndex.setDescription('The area index.')
ipOspfHostInfoCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfHostInfoCost.setStatus('current')
if mibBuilder.loadTexts: ipOspfHostInfoCost.setDescription('The cost of the corresponding host.')
ipOspfHostInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfHostInfoState.setStatus('current')
if mibBuilder.loadTexts: ipOspfHostInfoState.setDescription('Enable or disable an OSPF Host')
ipOspfRedistributeInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 11))
ipOspfRedistributeStaticInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 11, 1))
ipOspfRedistributeStaticInfoMetric = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777214))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfRedistributeStaticInfoMetric.setStatus('current')
if mibBuilder.loadTexts: ipOspfRedistributeStaticInfoMetric.setDescription('The metric to be assigned to static routes. A value of 0 indicates none.')
ipOspfRedistributeStaticInfoMetricType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfRedistributeStaticInfoMetricType.setStatus('current')
if mibBuilder.loadTexts: ipOspfRedistributeStaticInfoMetricType.setDescription('The AS External metric type for static routes.')
ipOspfRedistributeStaticInfoOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 11, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfRedistributeStaticInfoOutRmapList.setStatus('current')
if mibBuilder.loadTexts: ipOspfRedistributeStaticInfoOutRmapList.setDescription('The route maps present in the out route map list. The route maps are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Rmap 9 || || || ||___ Rmap 8 || |____ Rmap 7 || . . . ||_________ Rmap 2 |__________ Rmap 1 where x : 1 - The represented route map is selected 0 - The represented route map is not selected')
ipOspfRedistributeFixedInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 11, 2))
ipOspfRedistributeFixedInfoMetric = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 11, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777214))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfRedistributeFixedInfoMetric.setStatus('current')
if mibBuilder.loadTexts: ipOspfRedistributeFixedInfoMetric.setDescription('The export metric for fixed routes. A value of 0 indicates none')
ipOspfRedistributeFixedInfoMetricType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 11, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfRedistributeFixedInfoMetricType.setStatus('current')
if mibBuilder.loadTexts: ipOspfRedistributeFixedInfoMetricType.setDescription('The AS External metric type for fixed routes.')
ipOspfRedistributeFixedInfoOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 11, 2, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfRedistributeFixedInfoOutRmapList.setStatus('current')
if mibBuilder.loadTexts: ipOspfRedistributeFixedInfoOutRmapList.setDescription('The route maps present in the out route map list. The route maps are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Rmap 9 || || || ||___ Rmap 8 || |____ Rmap 7 || . . . ||_________ Rmap 2 |__________ Rmap 1 where x : 1 - The represented route map is selected 0 - The represented route map is not selected')
ipOspfRedistributeRipInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 11, 3))
ipOspfRedistributeRipInfoMetric = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 11, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777214))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfRedistributeRipInfoMetric.setStatus('current')
if mibBuilder.loadTexts: ipOspfRedistributeRipInfoMetric.setDescription('The export metric for RIP routes. A value of 0 indicates none')
ipOspfRedistributeRipInfoMetricType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 11, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfRedistributeRipInfoMetricType.setStatus('current')
if mibBuilder.loadTexts: ipOspfRedistributeRipInfoMetricType.setDescription('The AS External metric type for RIP routes.')
ipOspfRedistributeRipInfoOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 11, 3, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfRedistributeRipInfoOutRmapList.setStatus('current')
if mibBuilder.loadTexts: ipOspfRedistributeRipInfoOutRmapList.setDescription('The route maps present in the out route map list. The route maps are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Rmap 9 || || || ||___ Rmap 8 || |____ Rmap 7 || . . . ||_________ Rmap 2 |__________ Rmap 1 where x : 1 - The represented route map is selected 0 - The represented route map is not selected')
ipOspfMd5keyInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 12), )
if mibBuilder.loadTexts: ipOspfMd5keyInfoTable.setStatus('current')
if mibBuilder.loadTexts: ipOspfMd5keyInfoTable.setDescription('The table of OSPF MD5 keys Information.')
ipOspfMd5keyInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 12, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ipOspfMd5keyInfoIndex"))
if mibBuilder.loadTexts: ipOspfMd5keyInfoEntry.setStatus('current')
if mibBuilder.loadTexts: ipOspfMd5keyInfoEntry.setDescription('Information about an OSPF MD keys table.')
ipOspfMd5keyInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfMd5keyInfoIndex.setStatus('current')
if mibBuilder.loadTexts: ipOspfMd5keyInfoIndex.setDescription('The OSPF MD5 Key number for which the OSPF MdKey table is related.')
ipOspfMd5keyInfoKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 8, 11, 12, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfMd5keyInfoKey.setStatus('current')
if mibBuilder.loadTexts: ipOspfMd5keyInfoKey.setDescription('The character string representing the MD5 Key.')
vrrpInfoVirtRtrTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 3, 1), )
if mibBuilder.loadTexts: vrrpInfoVirtRtrTable.setStatus('current')
if mibBuilder.loadTexts: vrrpInfoVirtRtrTable.setDescription('The table of VRRP virtual router run-time information.')
vrrpInfoVirtRtrTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 3, 1, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "vrrpInfoVirtRtrIndex"))
if mibBuilder.loadTexts: vrrpInfoVirtRtrTableEntry.setStatus('current')
if mibBuilder.loadTexts: vrrpInfoVirtRtrTableEntry.setDescription('The run-time information about a VRRP virtual router.')
vrrpInfoVirtRtrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrIndex.setStatus('current')
if mibBuilder.loadTexts: vrrpInfoVirtRtrIndex.setDescription('The VRRP virtual router index.')
vrrpInfoVirtRtrConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrConfig.setStatus('current')
if mibBuilder.loadTexts: vrrpInfoVirtRtrConfig.setDescription('The status of the VRRP virtual router.')
vrrpInfoVirtRtrID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrID.setStatus('current')
if mibBuilder.loadTexts: vrrpInfoVirtRtrID.setDescription('The VRRP virtual router identifier.')
vrrpInfoVirtRtrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 3, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrAddr.setStatus('current')
if mibBuilder.loadTexts: vrrpInfoVirtRtrAddr.setDescription('The VRRP virtual router IP address.')
vrrpInfoVirtRtrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrIfIndex.setStatus('current')
if mibBuilder.loadTexts: vrrpInfoVirtRtrIfIndex.setDescription('The IfIndex that the VRRP virtual router is representing.')
vrrpInfoVirtRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrPriority.setStatus('current')
if mibBuilder.loadTexts: vrrpInfoVirtRtrPriority.setDescription('The priority value to be used by the specified VRRP virtual routers.')
vrrpInfoVirtRtrState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("init", 1), ("master", 2), ("backup", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrState.setStatus('current')
if mibBuilder.loadTexts: vrrpInfoVirtRtrState.setDescription('The VRRP virtual router state.')
vrrpInfoVirtRtrOwnership = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("owner", 1), ("renter", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrOwnership.setStatus('current')
if mibBuilder.loadTexts: vrrpInfoVirtRtrOwnership.setDescription('The VRRP virtual router ownership status.')
ospfGeneralInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 1))
ospfVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ospfVersion1", 1), ("ospfVersion2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVersion.setStatus('current')
if mibBuilder.loadTexts: ospfVersion.setDescription('OSPF version.')
ospfRouterID = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfRouterID.setStatus('current')
if mibBuilder.loadTexts: ospfRouterID.setDescription('The router ID of the switch.')
ospfStartTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfStartTime.setStatus('current')
if mibBuilder.loadTexts: ospfStartTime.setDescription('The time when ospf has been started.')
ospfProcessUptime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfProcessUptime.setStatus('current')
if mibBuilder.loadTexts: ospfProcessUptime.setDescription('The time since ospf has been started.')
ospfLsTypesSupported = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLsTypesSupported.setStatus('current')
if mibBuilder.loadTexts: ospfLsTypesSupported.setDescription('The Link State Types that are supported.')
ospfAreaBorderRouter = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaBorderRouter.setStatus('current')
if mibBuilder.loadTexts: ospfAreaBorderRouter.setDescription('Area Border Router Role.')
ospfAreaBoundaryRouter = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaBoundaryRouter.setStatus('current')
if mibBuilder.loadTexts: ospfAreaBoundaryRouter.setDescription('Area Boundary Router Role.')
ospfExternalLsa = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfExternalLsa.setStatus('current')
if mibBuilder.loadTexts: ospfExternalLsa.setDescription('The number of external LSAs.')
ospfIntfCountForRouter = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfCountForRouter.setStatus('current')
if mibBuilder.loadTexts: ospfIntfCountForRouter.setDescription('The number of interfaces for this router.')
ospfVlinkCountForRouter = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVlinkCountForRouter.setStatus('current')
if mibBuilder.loadTexts: ospfVlinkCountForRouter.setDescription('The number of virtual links for this router.')
ospfNewLsaReceived = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewLsaReceived.setStatus('current')
if mibBuilder.loadTexts: ospfNewLsaReceived.setDescription('The number of new LSAs reveived.')
ospfTotalLsaOriginated = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTotalLsaOriginated.setStatus('current')
if mibBuilder.loadTexts: ospfTotalLsaOriginated.setDescription('The number of LSAs originated.')
ospfTotalNumberOfLsdbEntries = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTotalNumberOfLsdbEntries.setStatus('current')
if mibBuilder.loadTexts: ospfTotalNumberOfLsdbEntries.setDescription('Total number of entries in the Link State Database.')
ospfTotalNeighbours = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTotalNeighbours.setStatus('current')
if mibBuilder.loadTexts: ospfTotalNeighbours.setDescription('The total number of OSPF neighbours.')
ospfNbrInInitState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNbrInInitState.setStatus('current')
if mibBuilder.loadTexts: ospfNbrInInitState.setDescription('The number of neighbours in the initial state of exchange.')
ospfNbrInExchState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNbrInExchState.setStatus('current')
if mibBuilder.loadTexts: ospfNbrInExchState.setDescription('The number of neighbours in the exchange state.')
ospfNbrInFullState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNbrInFullState.setStatus('current')
if mibBuilder.loadTexts: ospfNbrInFullState.setDescription('The number of neighbours in the Full state of exchange.')
ospfTotalAreas = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTotalAreas.setStatus('current')
if mibBuilder.loadTexts: ospfTotalAreas.setDescription('The Total number of areas.')
ospfTotalTransitAreas = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTotalTransitAreas.setStatus('current')
if mibBuilder.loadTexts: ospfTotalTransitAreas.setDescription('The Total number of Transit areas.')
ospfTotalNssaAreas = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTotalNssaAreas.setStatus('current')
if mibBuilder.loadTexts: ospfTotalNssaAreas.setDescription('The Total number of NSSA areas.')
ospfTotalStubAreas = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTotalStubAreas.setStatus('current')
if mibBuilder.loadTexts: ospfTotalStubAreas.setDescription('The Total number of STUB areas.')
ospfAreaInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 2), )
if mibBuilder.loadTexts: ospfAreaInfoTable.setStatus('current')
if mibBuilder.loadTexts: ospfAreaInfoTable.setDescription('The table of OSPF Area information.')
ospfAreaInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 2, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ospfAreaInfoIndex"))
if mibBuilder.loadTexts: ospfAreaInfoEntry.setStatus('current')
if mibBuilder.loadTexts: ospfAreaInfoEntry.setDescription('Information about a OSPF area.')
ospfAreaInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaInfoIndex.setStatus('current')
if mibBuilder.loadTexts: ospfAreaInfoIndex.setDescription('The OSPF area number for which the OSPF info table is related.')
ospfAreaInfoId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaInfoId.setStatus('current')
if mibBuilder.loadTexts: ospfAreaInfoId.setDescription('The IP address of the OSPF area.')
ospfAreaInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaInfoStatus.setStatus('current')
if mibBuilder.loadTexts: ospfAreaInfoStatus.setDescription('Area Status: disabled(0), enabled(1).')
ospfTotalNumberOfInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTotalNumberOfInterfaces.setStatus('current')
if mibBuilder.loadTexts: ospfTotalNumberOfInterfaces.setDescription('The total number of interfaces for this OSPF area.')
ospfNumberOfInterfacesUp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNumberOfInterfacesUp.setStatus('current')
if mibBuilder.loadTexts: ospfNumberOfInterfacesUp.setDescription('The number of interfaces UP in area.')
ospfAreaInfoAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("password", 2), ("md5", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaInfoAuthType.setStatus('current')
if mibBuilder.loadTexts: ospfAreaInfoAuthType.setDescription('Type of authentication being used: none(1) - no authentication password(2) - use password md5(3) - use MD5 authentication.')
ospfAreaInfoSPF = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaInfoSPF.setStatus('current')
if mibBuilder.loadTexts: ospfAreaInfoSPF.setDescription('The number of times SPF ran.')
ospfNumberOfLsdbEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNumberOfLsdbEntries.setStatus('current')
if mibBuilder.loadTexts: ospfNumberOfLsdbEntries.setDescription('The number of Link State Database entries for this OSPF area.')
ospfAreaInfoAreaBorderRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaInfoAreaBorderRouter.setStatus('current')
if mibBuilder.loadTexts: ospfAreaInfoAreaBorderRouter.setDescription('The Area Border Router count.')
ospfAreaInfoASBoundaryRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaInfoASBoundaryRouter.setStatus('current')
if mibBuilder.loadTexts: ospfAreaInfoASBoundaryRouter.setDescription('The AS Boundary Router count.')
ospfAreaInfoTotalNeighbours = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaInfoTotalNeighbours.setStatus('current')
if mibBuilder.loadTexts: ospfAreaInfoTotalNeighbours.setDescription('The total number of OSPF neighbors.')
ospfAreaInfoNeighborsINITstate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaInfoNeighborsINITstate.setStatus('current')
if mibBuilder.loadTexts: ospfAreaInfoNeighborsINITstate.setDescription('Total neighbors in INIT state.')
ospfAreaInfoNeighborsEXCHstate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaInfoNeighborsEXCHstate.setStatus('current')
if mibBuilder.loadTexts: ospfAreaInfoNeighborsEXCHstate.setDescription('Total neighbors in EXCH state.')
ospfAreaInfoNeighborsFULLstate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaInfoNeighborsFULLstate.setStatus('current')
if mibBuilder.loadTexts: ospfAreaInfoNeighborsFULLstate.setDescription('Total neighbors in FULL state.')
ospfAreaInfoLsTypesAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 2, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaInfoLsTypesAccepted.setStatus('current')
if mibBuilder.loadTexts: ospfAreaInfoLsTypesAccepted.setDescription('LS types accepted by this area.')
ospfIntfInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 3), )
if mibBuilder.loadTexts: ospfIntfInfoTable.setStatus('current')
if mibBuilder.loadTexts: ospfIntfInfoTable.setDescription('The table of OSPF Interface information.')
ospfIntfInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 3, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ospfIfInfoIndex"))
if mibBuilder.loadTexts: ospfIntfInfoEntry.setStatus('current')
if mibBuilder.loadTexts: ospfIntfInfoEntry.setDescription('Information about a OSPF interface.')
ospfIfInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoIndex.setStatus('current')
if mibBuilder.loadTexts: ospfIfInfoIndex.setDescription('The OSPF interface number for which the OSPF info table is related.')
ospfIfInfoIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoIpAddress.setStatus('current')
if mibBuilder.loadTexts: ospfIfInfoIpAddress.setDescription('The IP address of the OSPF interface.')
ospfIfInfoArea = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoArea.setStatus('current')
if mibBuilder.loadTexts: ospfIfInfoArea.setDescription('The index of the area that the interface belongs.')
ospfIfInfoAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoAdminStatus.setStatus('current')
if mibBuilder.loadTexts: ospfIfInfoAdminStatus.setDescription('Admin Status of the interface: down(0), up(1).')
ospfIfInfoRouterID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 3, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoRouterID.setStatus('current')
if mibBuilder.loadTexts: ospfIfInfoRouterID.setDescription('The router ID of the switch.')
ospfIfInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("down", 0), ("loopback", 1), ("waiting", 2), ("ptop", 3), ("dr", 4), ("backupdr", 5), ("drother", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoState.setStatus('current')
if mibBuilder.loadTexts: ospfIfInfoState.setDescription('The state of the interface: Down(0), Loopback(1), Waiting(2), P to P(3), DR(4), BackuDR(5), DR Other(6).')
ospfIfInfoPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoPriority.setStatus('current')
if mibBuilder.loadTexts: ospfIfInfoPriority.setDescription('Interface router priority')
ospfIfInfoDesignatedRouterID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 3, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoDesignatedRouterID.setStatus('current')
if mibBuilder.loadTexts: ospfIfInfoDesignatedRouterID.setDescription('The OSPF Designated Router ID for this OSPF interface.')
ospfIfInfoDesignatedRouterIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 3, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoDesignatedRouterIpAddress.setStatus('current')
if mibBuilder.loadTexts: ospfIfInfoDesignatedRouterIpAddress.setDescription('The OSPF Designated Router IP Address for this OSPF interface.')
ospfIfInfoBackupDesignatedRouterID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 3, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoBackupDesignatedRouterID.setStatus('current')
if mibBuilder.loadTexts: ospfIfInfoBackupDesignatedRouterID.setDescription('The OSPF Backup Designated Router ID for this OSPF interface.')
ospfIfInfoBackupDesignatedRouterIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 3, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoBackupDesignatedRouterIpAddress.setStatus('current')
if mibBuilder.loadTexts: ospfIfInfoBackupDesignatedRouterIpAddress.setDescription('The OSPF Backup Designated Router Ip Address for this OSPF interface.')
ospfIfInfoHello = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoHello.setStatus('current')
if mibBuilder.loadTexts: ospfIfInfoHello.setDescription('The hello timer for this OSPF interface.')
ospfIfInfoDead = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoDead.setStatus('current')
if mibBuilder.loadTexts: ospfIfInfoDead.setDescription('The dead timer for this OSPF interface.')
ospfIfInfoWait = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoWait.setStatus('current')
if mibBuilder.loadTexts: ospfIfInfoWait.setDescription('The OSPF Wait interval for this OSPF interface.')
ospfIfInfoRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoRetransmit.setStatus('current')
if mibBuilder.loadTexts: ospfIfInfoRetransmit.setDescription('The retransmit interval for this OSPF interface.')
ospfIfInfoTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoTransitDelay.setStatus('current')
if mibBuilder.loadTexts: ospfIfInfoTransitDelay.setDescription('The transit delay for this OSPF interface.')
ospfIfInfoTotalNeighbours = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoTotalNeighbours.setStatus('current')
if mibBuilder.loadTexts: ospfIfInfoTotalNeighbours.setDescription('The total number of neighbours for this OSPF interface.')
ospfIfInfoEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoEvents.setStatus('current')
if mibBuilder.loadTexts: ospfIfInfoEvents.setDescription('The total number of events for this OSPF interface.')
ospfIfInfoAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("password", 2), ("md5", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoAuthType.setStatus('current')
if mibBuilder.loadTexts: ospfIfInfoAuthType.setDescription('Type of authentication being used: none(1) - no authentication, password(2) - use password, md5(3) - use MD5 authentication.')
ospfVirtIntfInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 4), )
if mibBuilder.loadTexts: ospfVirtIntfInfoTable.setStatus('current')
if mibBuilder.loadTexts: ospfVirtIntfInfoTable.setDescription('The table of OSPF virtual interfaces information.')
ospfVirtIntfInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 4, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ospfVirtIntfInfoIndex"))
if mibBuilder.loadTexts: ospfVirtIntfInfoEntry.setStatus('current')
if mibBuilder.loadTexts: ospfVirtIntfInfoEntry.setDescription('Information about an OSPF virtual interface.')
ospfVirtIntfInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVirtIntfInfoIndex.setStatus('current')
if mibBuilder.loadTexts: ospfVirtIntfInfoIndex.setDescription('The OSPF Virtual Interface number for which this table is related.')
ospfVirtIntfInfoIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVirtIntfInfoIpAddr.setStatus('current')
if mibBuilder.loadTexts: ospfVirtIntfInfoIpAddr.setDescription('The IP Address of this virtual interface.')
ospfVirtIntfInfoArea = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVirtIntfInfoArea.setStatus('current')
if mibBuilder.loadTexts: ospfVirtIntfInfoArea.setDescription('The index of the OSPF area to which this virtual interface belongs.')
ospfVirtIntfInfoRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 4, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVirtIntfInfoRouterId.setStatus('current')
if mibBuilder.loadTexts: ospfVirtIntfInfoRouterId.setDescription('The Router ID.')
ospfVirtIntfInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVirtIntfInfoState.setStatus('current')
if mibBuilder.loadTexts: ospfVirtIntfInfoState.setDescription('State disabled(0), enabled(1)')
ospfVirtIntfInfoCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVirtIntfInfoCost.setStatus('current')
if mibBuilder.loadTexts: ospfVirtIntfInfoCost.setDescription('The cost of the virtual interface.')
ospfVirtIntfInfoTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVirtIntfInfoTrans.setStatus('current')
if mibBuilder.loadTexts: ospfVirtIntfInfoTrans.setDescription('The transit delay for the virtual interface.')
ospfVirtIntfInfoHello = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVirtIntfInfoHello.setStatus('current')
if mibBuilder.loadTexts: ospfVirtIntfInfoHello.setDescription('Hello interval.')
ospfVirtIntfInfoDead = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVirtIntfInfoDead.setStatus('current')
if mibBuilder.loadTexts: ospfVirtIntfInfoDead.setDescription('Dead interval.')
ospfVirtIntfInfoWait = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVirtIntfInfoWait.setStatus('current')
if mibBuilder.loadTexts: ospfVirtIntfInfoWait.setDescription('Wait interval.')
ospfVirtIntfInfoRetra = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVirtIntfInfoRetra.setStatus('current')
if mibBuilder.loadTexts: ospfVirtIntfInfoRetra.setDescription('Retransmit interval.')
ospfVirtIntfInfoAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 4, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVirtIntfInfoAuth.setStatus('current')
if mibBuilder.loadTexts: ospfVirtIntfInfoAuth.setDescription('Authentication.')
ospfVirtIntfInfoEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVirtIntfInfoEvents.setStatus('current')
if mibBuilder.loadTexts: ospfVirtIntfInfoEvents.setDescription('Events.')
ospfVirtIntfInfoNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 4, 1, 17), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVirtIntfInfoNbr.setStatus('current')
if mibBuilder.loadTexts: ospfVirtIntfInfoNbr.setDescription('The IP Address of the OSPF neighbor for this virtual interface.')
ospfVirtIntfInfoNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("down", 0), ("attempt", 1), ("init", 2), ("twoway", 3), ("exstart", 4), ("exchange", 5), ("loading", 6), ("full", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVirtIntfInfoNbrState.setStatus('current')
if mibBuilder.loadTexts: ospfVirtIntfInfoNbrState.setDescription('State down(0),attempt(1),init(2),2 way(3), exstart(4),exchange(5),loading(6),full(7)')
ospfVirtIntfInfoAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 4, 1, 19), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVirtIntfInfoAreaId.setStatus('current')
if mibBuilder.loadTexts: ospfVirtIntfInfoAreaId.setDescription('Thea AreaId of the virtual interface.')
ospfIfNbrTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 5), )
if mibBuilder.loadTexts: ospfIfNbrTable.setStatus('current')
if mibBuilder.loadTexts: ospfIfNbrTable.setDescription('The table of OSPF Interface Neighbor information.')
ospfIfNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 5, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ospfIfNbrIntfIndex"), (0, "BLADETYPE4-NETWORK-MIB", "ospfIfNbrIpAddr"))
if mibBuilder.loadTexts: ospfIfNbrEntry.setStatus('current')
if mibBuilder.loadTexts: ospfIfNbrEntry.setDescription('Information about a OSPF interface, neighbor pair.')
ospfIfNbrIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfNbrIntfIndex.setStatus('current')
if mibBuilder.loadTexts: ospfIfNbrIntfIndex.setDescription('The OSPF Interface number for which this Interface/Nbr table is related.')
ospfIfNbrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfNbrIpAddr.setStatus('current')
if mibBuilder.loadTexts: ospfIfNbrIpAddr.setDescription('The OSPF Neighbor ID .')
ospfIfNbrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfNbrPriority.setStatus('current')
if mibBuilder.loadTexts: ospfIfNbrPriority.setDescription('The priority of the OSPF neighbor.')
ospfIfNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("down", 1), ("attempt", 2), ("init", 3), ("twoway", 4), ("exStart", 5), ("exchange", 6), ("loading", 7), ("full", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfNbrState.setStatus('current')
if mibBuilder.loadTexts: ospfIfNbrState.setDescription('The state of the OSPF neighbor.')
ospfIfNbrDesignatedRtr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 5, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfNbrDesignatedRtr.setStatus('current')
if mibBuilder.loadTexts: ospfIfNbrDesignatedRtr.setDescription('The IP Address of the Designated Router for this OSPF Neighbor.')
ospfIfNbrBackupDesignatedRtr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 5, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfNbrBackupDesignatedRtr.setStatus('current')
if mibBuilder.loadTexts: ospfIfNbrBackupDesignatedRtr.setDescription('The IP Address of the backup designated Router for this OSPF Neighbor.')
ospfIfNbrIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 5, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfNbrIpAddress.setStatus('current')
if mibBuilder.loadTexts: ospfIfNbrIpAddress.setDescription('The IP Address of the OSPF Neighbor.')
ospfSumRangesInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 6), )
if mibBuilder.loadTexts: ospfSumRangesInfoTable.setStatus('current')
if mibBuilder.loadTexts: ospfSumRangesInfoTable.setDescription('The table of OSPF summary ranges information.')
ospfSumRangesInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 6, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ospfSumRangesInfoIndex"))
if mibBuilder.loadTexts: ospfSumRangesInfoEntry.setStatus('current')
if mibBuilder.loadTexts: ospfSumRangesInfoEntry.setDescription('Summary ranges information.')
ospfSumRangesInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfSumRangesInfoIndex.setStatus('current')
if mibBuilder.loadTexts: ospfSumRangesInfoIndex.setDescription('The OSPF range index for which this table is related.')
ospfSumRangesInfoArea = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfSumRangesInfoArea.setStatus('current')
if mibBuilder.loadTexts: ospfSumRangesInfoArea.setDescription('Area.')
ospfSumRangesInfoNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 6, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfSumRangesInfoNetwork.setStatus('current')
if mibBuilder.loadTexts: ospfSumRangesInfoNetwork.setDescription('Network.')
ospfSumRangesInfoMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 6, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfSumRangesInfoMask.setStatus('current')
if mibBuilder.loadTexts: ospfSumRangesInfoMask.setDescription('Mask.')
ospfSumRangesInfoAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("propagate", 0), ("hide", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfSumRangesInfoAction.setStatus('current')
if mibBuilder.loadTexts: ospfSumRangesInfoAction.setDescription('Action propagate(0), hide(1)')
ospfSumRangesInfoListType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("non-nssa", 0), ("nssa", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfSumRangesInfoListType.setStatus('current')
if mibBuilder.loadTexts: ospfSumRangesInfoListType.setDescription('Summary address list Non-NSSA(0), NSSA(1)')
ospfRoutesInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 7), )
if mibBuilder.loadTexts: ospfRoutesInfoTable.setStatus('current')
if mibBuilder.loadTexts: ospfRoutesInfoTable.setDescription('The table of OSPF routes information.')
ospfRoutesInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 7, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ospfRoutesInfoIndex"))
if mibBuilder.loadTexts: ospfRoutesInfoEntry.setStatus('current')
if mibBuilder.loadTexts: ospfRoutesInfoEntry.setDescription('OSPF routes information.')
ospfRoutesInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfRoutesInfoIndex.setStatus('current')
if mibBuilder.loadTexts: ospfRoutesInfoIndex.setDescription('The OSPF route table entry index for which this table is related.')
ospfRoutesInfoDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 7, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfRoutesInfoDestination.setStatus('current')
if mibBuilder.loadTexts: ospfRoutesInfoDestination.setDescription('Destination.')
ospfRoutesInfoMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 7, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfRoutesInfoMask.setStatus('current')
if mibBuilder.loadTexts: ospfRoutesInfoMask.setDescription('Mask.')
ospfRoutesInfoVia = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 7, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfRoutesInfoVia.setStatus('current')
if mibBuilder.loadTexts: ospfRoutesInfoVia.setDescription('Next hop.')
ospfRoutesInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 7, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfRoutesInfoType.setStatus('current')
if mibBuilder.loadTexts: ospfRoutesInfoType.setDescription('Route type. Codes: IA - OSPF inter area, N1 - OSPF NSSA external type 1, N2 - OSPF NSSA external type 2 E1 - OSPF external type 1, E2 - OSPF external type 2 * - best')
ospfLsdbInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 8), )
if mibBuilder.loadTexts: ospfLsdbInfoTable.setReference('OSPF Version 2, Section 12 Link State Adver- tisements')
if mibBuilder.loadTexts: ospfLsdbInfoTable.setStatus('current')
if mibBuilder.loadTexts: ospfLsdbInfoTable.setDescription("The OSPF Process's Link State Database.")
ospfLsdbInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 8, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ospfLsdbInfoIndex"))
if mibBuilder.loadTexts: ospfLsdbInfoEntry.setStatus('current')
if mibBuilder.loadTexts: ospfLsdbInfoEntry.setDescription('A single Link State Advertisement.')
ospfLsdbInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLsdbInfoIndex.setReference('Private MIBS')
if mibBuilder.loadTexts: ospfLsdbInfoIndex.setStatus('current')
if mibBuilder.loadTexts: ospfLsdbInfoIndex.setDescription('The 32 bit index in the table.')
ospfLsdbInfoAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 8, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLsdbInfoAreaId.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: ospfLsdbInfoAreaId.setStatus('current')
if mibBuilder.loadTexts: ospfLsdbInfoAreaId.setDescription('The 32 bit identifier of the Area from which the LSA was received.')
ospfLsdbInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("routerLink", 1), ("networkLink", 2), ("summaryLink", 3), ("asSummaryLink", 4), ("asExternalLink", 5), ("multicastLink", 6), ("nssaExternalLink", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLsdbInfoType.setReference('OSPF Version 2, Appendix A.4.1 The Link State Advertisement header')
if mibBuilder.loadTexts: ospfLsdbInfoType.setStatus('current')
if mibBuilder.loadTexts: ospfLsdbInfoType.setDescription('The type of the link state advertisement. Each link state type has a separate advertise- ment format.')
ospfLsdbInfoLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 8, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLsdbInfoLsid.setReference('OSPF Version 2, Section 12.1.4 Link State ID')
if mibBuilder.loadTexts: ospfLsdbInfoLsid.setStatus('current')
if mibBuilder.loadTexts: ospfLsdbInfoLsid.setDescription('The Link State ID is an LS Type Specific field containing either a Router ID or an IP Address; it identifies the piece of the routing domain that is being described by the advertisement.')
ospfLsdbInfoRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 8, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLsdbInfoRouterId.setReference('OSPF Version 2, Appendix C.1 Global parameters')
if mibBuilder.loadTexts: ospfLsdbInfoRouterId.setStatus('current')
if mibBuilder.loadTexts: ospfLsdbInfoRouterId.setDescription('The 32 bit number that uniquely identifies the originating router in the Autonomous System.')
ospfLsdbInfoSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 8, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLsdbInfoSequence.setReference('OSPF Version 2, Section 12.1.6 LS sequence number')
if mibBuilder.loadTexts: ospfLsdbInfoSequence.setStatus('current')
if mibBuilder.loadTexts: ospfLsdbInfoSequence.setDescription('The sequence number field is a signed 32-bit integer. It is used to detect old and dupli- cate link state advertisements. The space of sequence numbers is linearly ordered. The larger the sequence number the more recent the advertisement - displayed here in hexazecimal.')
ospfLsdbInfoAge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLsdbInfoAge.setReference('OSPF Version 2, Section 12.1.1 LS age')
if mibBuilder.loadTexts: ospfLsdbInfoAge.setStatus('current')
if mibBuilder.loadTexts: ospfLsdbInfoAge.setDescription('This field is the age of the link state adver- tisement in seconds.')
ospfLsdbInfoChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLsdbInfoChecksum.setReference('OSPF Version 2, Section 12.1.7 LS checksum')
if mibBuilder.loadTexts: ospfLsdbInfoChecksum.setStatus('current')
if mibBuilder.loadTexts: ospfLsdbInfoChecksum.setDescription("This field is the checksum of the complete contents of the advertisement, excepting the age field. The age field is excepted so that an advertisement's age can be incremented without updating the checksum. The checksum used is the same that is used for ISO connec- tionless datagrams; it is commonly referred to as the Fletcher checksum.")
ospfLsdbInfoAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 8, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(36, 36)).setFixedLength(36)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLsdbInfoAdvertisement.setReference('OSPF Version 2, Section 12 Link State Adver- tisements')
if mibBuilder.loadTexts: ospfLsdbInfoAdvertisement.setStatus('current')
if mibBuilder.loadTexts: ospfLsdbInfoAdvertisement.setDescription('The entire Link State Advertisement, including its header.')
ospfExtLsdbInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 9), )
if mibBuilder.loadTexts: ospfExtLsdbInfoTable.setReference('OSPF Version 2, Section 12 Link State Adver- tisements')
if mibBuilder.loadTexts: ospfExtLsdbInfoTable.setStatus('current')
if mibBuilder.loadTexts: ospfExtLsdbInfoTable.setDescription("The OSPF Process's Links State Database.")
ospfExtLsdbInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 9, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ospfExtLsdbInfoIndex"))
if mibBuilder.loadTexts: ospfExtLsdbInfoEntry.setStatus('current')
if mibBuilder.loadTexts: ospfExtLsdbInfoEntry.setDescription('A single Link State Advertisement.')
ospfExtLsdbInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfExtLsdbInfoIndex.setReference('Private MIBS')
if mibBuilder.loadTexts: ospfExtLsdbInfoIndex.setStatus('current')
if mibBuilder.loadTexts: ospfExtLsdbInfoIndex.setDescription('The 32 bit index in the table.')
ospfExtLsdbInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5))).clone(namedValues=NamedValues(("asExternalLink", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfExtLsdbInfoType.setReference('OSPF Version 2, Appendix A.4.1 The Link State Advertisement header')
if mibBuilder.loadTexts: ospfExtLsdbInfoType.setStatus('current')
if mibBuilder.loadTexts: ospfExtLsdbInfoType.setDescription('The type of the link state advertisement. Each link state type has a separate advertise- ment format.')
ospfExtLsdbInfoLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 9, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfExtLsdbInfoLsid.setReference('OSPF Version 2, Section 12.1.4 Link State ID')
if mibBuilder.loadTexts: ospfExtLsdbInfoLsid.setStatus('current')
if mibBuilder.loadTexts: ospfExtLsdbInfoLsid.setDescription('The Link State ID is an LS Type Specific field containing either a Router ID or an IP Address; it identifies the piece of the routing domain that is being described by the advertisement.')
ospfExtLsdbInfoRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 9, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfExtLsdbInfoRouterId.setReference('OSPF Version 2, Appendix C.1 Global parameters')
if mibBuilder.loadTexts: ospfExtLsdbInfoRouterId.setStatus('current')
if mibBuilder.loadTexts: ospfExtLsdbInfoRouterId.setDescription('The 32 bit number that uniquely identifies the originating router in the Autonomous System.')
ospfExtLsdbInfoSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 9, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfExtLsdbInfoSequence.setReference('OSPF Version 2, Section 12.1.6 LS sequence number')
if mibBuilder.loadTexts: ospfExtLsdbInfoSequence.setStatus('current')
if mibBuilder.loadTexts: ospfExtLsdbInfoSequence.setDescription('The sequence number field is a signed 32-bit integer. It is used to detect old and dupli- cate link state advertisements. The space of sequence numbers is linearly ordered. The larger the sequence number the more recent the advertisement - displayed here in hexazecimal.')
ospfExtLsdbInfoAge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfExtLsdbInfoAge.setReference('OSPF Version 2, Section 12.1.1 LS age')
if mibBuilder.loadTexts: ospfExtLsdbInfoAge.setStatus('current')
if mibBuilder.loadTexts: ospfExtLsdbInfoAge.setDescription('This field is the age of the link state adver- tisement in seconds.')
ospfExtLsdbInfoChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfExtLsdbInfoChecksum.setReference('OSPF Version 2, Section 12.1.7 LS checksum')
if mibBuilder.loadTexts: ospfExtLsdbInfoChecksum.setStatus('current')
if mibBuilder.loadTexts: ospfExtLsdbInfoChecksum.setDescription("This field is the checksum of the complete contents of the advertisement, excepting the age field. The age field is excepted so that an advertisement's age can be incremented without updating the checksum. The checksum used is the same that is used for ISO connec- tionless datagrams; it is commonly referred to as the Fletcher checksum.")
ospfExtLsdbInfoAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 3, 4, 9, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(36, 36)).setFixedLength(36)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfExtLsdbInfoAdvertisement.setReference('OSPF Version 2, Section 12 Link State Adver- tisements')
if mibBuilder.loadTexts: ospfExtLsdbInfoAdvertisement.setStatus('current')
if mibBuilder.loadTexts: ospfExtLsdbInfoAdvertisement.setDescription('The entire Link State Advertisement, including its header.')
vrrpOperVirtRtrTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 4, 1, 1), )
if mibBuilder.loadTexts: vrrpOperVirtRtrTable.setStatus('current')
if mibBuilder.loadTexts: vrrpOperVirtRtrTable.setDescription('An entry in the table of virtual routers.')
vrrpOperVirtRtrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 4, 1, 1, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "vrrpOperVirtRtrIndex"))
if mibBuilder.loadTexts: vrrpOperVirtRtrEntry.setStatus('current')
if mibBuilder.loadTexts: vrrpOperVirtRtrEntry.setDescription('A row in the vrrpOperVirtRtrTable ')
vrrpOperVirtRtrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 4, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpOperVirtRtrIndex.setStatus('current')
if mibBuilder.loadTexts: vrrpOperVirtRtrIndex.setDescription('The index for the VRRP virtual router.')
vrrpOperVirtRtrBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpOperVirtRtrBackup.setStatus('current')
if mibBuilder.loadTexts: vrrpOperVirtRtrBackup.setDescription("When set to a value of 'backup(2)' it forces the specified master virtual router into backup mode. 'ok(1)' is returned when the object os read.")
vrrpOperVirtRtrGroupBackup = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpOperVirtRtrGroupBackup.setStatus('current')
if mibBuilder.loadTexts: vrrpOperVirtRtrGroupBackup.setDescription("When set to a value of 'backup(2)' it forces the specified master virtual router group into backup mode. 'ok(1)' is returned when the object os read.")
ipCurCfgBootpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 8, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgBootpAddr.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgBootpAddr.setDescription('The IP address of BOOTP server.')
ipNewCfgBootpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 8, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgBootpAddr.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgBootpAddr.setDescription('The IP address of BOOTP server.')
ipCurCfgBootpAddr2 = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 8, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgBootpAddr2.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgBootpAddr2.setDescription('The IP address of second BOOTP server.')
ipNewCfgBootpAddr2 = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 8, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgBootpAddr2.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgBootpAddr2.setDescription('The IP address of second BOOTP server.')
ipCurCfgBootpState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgBootpState.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgBootpState.setDescription('The state of BOOTP relay.')
ipNewCfgBootpState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 3, 1, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgBootpState.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgBootpState.setDescription('The state of BOOTP relay.')
layer2 = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2))
layer2Configs = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1))
layer2Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 2))
layer2Info = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3))
layer2Oper = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 4))
vlan = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 1))
trunkgroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 2))
stgCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 3))
mirroring = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 4))
mstCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 5))
lacp = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 6))
thash = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 7))
l2GeneralCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 8))
ufd = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 9))
dot1x = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11))
fdb = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 12))
thashL2 = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 7, 1))
mirrPortMirr = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 4, 1))
mstGeneralCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 5, 1))
mstCistCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 5, 2))
ufdGeneralCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 9, 1))
fdbGeneralCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 12, 1))
dot1xCurCfgGlobalTable = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 5))
dot1xNewCfgGlobalTable = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 6))
fdbStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 2, 1))
stpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 2, 2))
lacpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 2, 3))
ufdStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 2, 4))
cistInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 1))
fdbInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 2))
stpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 3))
lacpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4))
dot1xInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 5))
dot1pInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 6))
genInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 7))
vlanInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 8))
trunkGroupInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 9))
dot1xSystemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 5, 2))
cistGeneralInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 1, 1))
vlanMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMaxEnt.setStatus('current')
if mibBuilder.loadTexts: vlanMaxEnt.setDescription('The maximum number of rows in the VLAN configuration table.')
vlanCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 1, 2), )
if mibBuilder.loadTexts: vlanCurCfgTable.setStatus('current')
if mibBuilder.loadTexts: vlanCurCfgTable.setDescription('The table of VLAN configuration.')
vlanCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 1, 2, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "vlanCurCfgVlanId"))
if mibBuilder.loadTexts: vlanCurCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: vlanCurCfgTableEntry.setDescription('A row in the VLAN configuration table.')
vlanCurCfgVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgVlanId.setStatus('current')
if mibBuilder.loadTexts: vlanCurCfgVlanId.setDescription('The VLAN identifier.')
vlanCurCfgVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgVlanName.setStatus('current')
if mibBuilder.loadTexts: vlanCurCfgVlanName.setDescription('The VLAN name.')
vlanCurCfgPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 1, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgPorts.setStatus('current')
if mibBuilder.loadTexts: vlanCurCfgPorts.setDescription('The port list in the VLAN. The ports are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ port 8 || || || ||___ port 7 || |____ port 6 || . . . ||_________ port 1 |__________ reserved where x : 1 - The represented port belongs to the VLAN 0 - The represented port does not belong to the VLAN')
vlanCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgState.setStatus('current')
if mibBuilder.loadTexts: vlanCurCfgState.setDescription('Enable or disable a VLAN')
vlanCurCfgStg = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanCurCfgStg.setStatus('current')
if mibBuilder.loadTexts: vlanCurCfgStg.setDescription('The Spanning Tree Group for the VLAN.')
vlanNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 1, 3), )
if mibBuilder.loadTexts: vlanNewCfgTable.setStatus('current')
if mibBuilder.loadTexts: vlanNewCfgTable.setDescription('The table of VLAN configuration.')
vlanNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 1, 3, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "vlanNewCfgVlanId"))
if mibBuilder.loadTexts: vlanNewCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: vlanNewCfgTableEntry.setDescription('A row in the VLAN configuration table.')
vlanNewCfgVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanNewCfgVlanId.setStatus('current')
if mibBuilder.loadTexts: vlanNewCfgVlanId.setDescription('The VLAN identifier.')
vlanNewCfgVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanNewCfgVlanName.setStatus('current')
if mibBuilder.loadTexts: vlanNewCfgVlanName.setDescription('The VLAN name.')
vlanNewCfgPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 1, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanNewCfgPorts.setStatus('current')
if mibBuilder.loadTexts: vlanNewCfgPorts.setDescription('The port list in the VLAN. The ports are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ port 8 || || || ||___ port 7 || |____ port 6 || . . . ||_________ port 1 |__________ reserved where x : 1 - The represented port belongs to the VLAN 0 - The represented port does not belong to the VLAN')
vlanNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanNewCfgState.setStatus('current')
if mibBuilder.loadTexts: vlanNewCfgState.setDescription('Enable or disable a VLAN')
vlanNewCfgAddPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 1, 3, 1, 5), PortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanNewCfgAddPort.setStatus('current')
if mibBuilder.loadTexts: vlanNewCfgAddPort.setDescription("The port to be added to the specified VLAN. A '0' value is returned when read.")
vlanNewCfgRemovePort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 1, 3, 1, 6), PortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanNewCfgRemovePort.setStatus('current')
if mibBuilder.loadTexts: vlanNewCfgRemovePort.setDescription("The port to be removed from the specified VLAN. A '0' value is returned when read.")
vlanNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanNewCfgDelete.setStatus('current')
if mibBuilder.loadTexts: vlanNewCfgDelete.setDescription('This is an action object to create or delete a VLAN. other(1) is returned always when read. The following values are writable: delete(2)...to delete a VLAN')
vlanNewCfgStg = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 1, 3, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanNewCfgStg.setStatus('current')
if mibBuilder.loadTexts: vlanNewCfgStg.setDescription('The Spanning Tree Group for the VLAN.')
trunkGroupTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: trunkGroupTableMaxSize.setDescription('The maximum number of entries in trunk group table.')
trunkGroupCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 2, 2), )
if mibBuilder.loadTexts: trunkGroupCurCfgTable.setStatus('current')
if mibBuilder.loadTexts: trunkGroupCurCfgTable.setDescription('The table of trunk group configuration.')
trunkGroupCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 2, 2, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "trunkGroupCurCfgIndex"))
if mibBuilder.loadTexts: trunkGroupCurCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: trunkGroupCurCfgTableEntry.setDescription('A row in the trunk group configuration table.')
trunkGroupCurCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupCurCfgIndex.setStatus('current')
if mibBuilder.loadTexts: trunkGroupCurCfgIndex.setDescription('The identifier of the trunk group.')
trunkGroupCurCfgPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 2, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupCurCfgPorts.setStatus('current')
if mibBuilder.loadTexts: trunkGroupCurCfgPorts.setDescription('The port list in the trunk group. The ports are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ port 8 || || || ||___ port 7 || |____ port 6 || . . . ||_________ port 1 |__________ reserved where x : 1 - The represented port belongs to the trunk group 0 - The represented port does not belong to the trunk group')
trunkGroupCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupCurCfgState.setStatus('current')
if mibBuilder.loadTexts: trunkGroupCurCfgState.setDescription('Enable or disable a trunk group.')
trunkGroupNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 2, 3), )
if mibBuilder.loadTexts: trunkGroupNewCfgTable.setStatus('current')
if mibBuilder.loadTexts: trunkGroupNewCfgTable.setDescription('The table of trunk group configuration.')
trunkGroupNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 2, 3, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "trunkGroupNewCfgIndex"))
if mibBuilder.loadTexts: trunkGroupNewCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: trunkGroupNewCfgTableEntry.setDescription('A row in the trunk group configuration table.')
trunkGroupNewCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupNewCfgIndex.setStatus('current')
if mibBuilder.loadTexts: trunkGroupNewCfgIndex.setDescription('The identifier of the trunk group.')
trunkGroupNewCfgPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 2, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupNewCfgPorts.setStatus('current')
if mibBuilder.loadTexts: trunkGroupNewCfgPorts.setDescription('The port list in the trunk group. The ports are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ port 8 || || || ||___ port 7 || |____ port 6 || . . . ||_________ port 1 |__________ reserved where x : 1 - The represented port belongs to the trunk group 0 - The represented port does not belong to the trunk group')
trunkGroupNewCfgAddPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 2, 3, 1, 3), PortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkGroupNewCfgAddPort.setStatus('current')
if mibBuilder.loadTexts: trunkGroupNewCfgAddPort.setDescription('The port to be added in the trunk group. When read, 0 is returned.')
trunkGroupNewCfgRemovePort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 2, 3, 1, 4), PortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkGroupNewCfgRemovePort.setStatus('current')
if mibBuilder.loadTexts: trunkGroupNewCfgRemovePort.setDescription('The port to be deleted from the trunk group. when read, 0 is returned.')
trunkGroupNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkGroupNewCfgState.setStatus('current')
if mibBuilder.loadTexts: trunkGroupNewCfgState.setDescription('Enable or disable a trunk group.')
trunkGroupNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkGroupNewCfgDelete.setStatus('current')
if mibBuilder.loadTexts: trunkGroupNewCfgDelete.setDescription('Setting the value to delete(2) will delete the entire row. When read, other(1) is returned.')
l2ThashCurCfgSmacState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2ThashCurCfgSmacState.setStatus('current')
if mibBuilder.loadTexts: l2ThashCurCfgSmacState.setDescription('Enable or disable smac hash.')
l2ThashNewCfgSmacState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2ThashNewCfgSmacState.setStatus('current')
if mibBuilder.loadTexts: l2ThashNewCfgSmacState.setDescription('Enable or disable smac hash.')
l2ThashCurCfgDmacState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2ThashCurCfgDmacState.setStatus('current')
if mibBuilder.loadTexts: l2ThashCurCfgDmacState.setDescription('Enable or disable dmac hash.')
l2ThashNewCfgDmacState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2ThashNewCfgDmacState.setStatus('current')
if mibBuilder.loadTexts: l2ThashNewCfgDmacState.setDescription('Enable or disable dmac hash.')
l2ThashCurCfgSipState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2ThashCurCfgSipState.setStatus('current')
if mibBuilder.loadTexts: l2ThashCurCfgSipState.setDescription('Enable or disable sip hash.')
l2ThashNewCfgSipState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2ThashNewCfgSipState.setStatus('current')
if mibBuilder.loadTexts: l2ThashNewCfgSipState.setDescription('Enable or disable sip hash.')
l2ThashCurCfgDipState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: l2ThashCurCfgDipState.setStatus('current')
if mibBuilder.loadTexts: l2ThashCurCfgDipState.setDescription('Enable or disable dip hash.')
l2ThashNewCfgDipState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2ThashNewCfgDipState.setStatus('current')
if mibBuilder.loadTexts: l2ThashNewCfgDipState.setDescription('Enable or disable dip hash.')
stgCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 3, 1), )
if mibBuilder.loadTexts: stgCurCfgTable.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgTable.setDescription('The table of Spanning Tree Group configuration.')
stgCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 3, 1, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "stgCurCfgIndex"))
if mibBuilder.loadTexts: stgCurCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgTableEntry.setDescription('Information about a particular Spanning Tree Group configuration.')
stgCurCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgIndex.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgIndex.setDescription('The identifier of a particular Spanning Tree Group. This is also index to the entLogicalTable of Entity MIB.')
stgCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgState.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgState.setDescription('Turn on of off Spanning Tree operation of a particular Spanning Tree Group.')
stgCurCfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPriority.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgPriority.setDescription('The value of the write-able portion of the Bridge ID, i.e., the first two octets of the (8 octet long) Bridge ID.')
stgCurCfgBrgHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgBrgHelloTime.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgBrgHelloTime.setDescription('The value in seconds that all bridges use for HelloTime when this bridge is acting as the root.')
stgCurCfgBrgForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgBrgForwardDelay.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgBrgForwardDelay.setDescription('The value in seconds that all bridges use for ForwardDelay when this bridge is acting as the root.')
stgCurCfgBrgMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgBrgMaxAge.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgBrgMaxAge.setDescription('The value in seconds that all bridges use for MaxAge when this bridge is acting as the root.')
stgCurCfgVlanBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 3, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgVlanBmap.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgVlanBmap.setDescription('The vlans applied to the spanning tree group. The vlans are presented in bitmap format. This string displays vlan number from 1 to 4095. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ vlan 9 || || || ||___ vlan 8 || |____ vlan 7 || . . . ||_________ vlan 2 |__________ vlan 1 (as index to stgCurCfgTable) where x : 1 - The represented vlan applied to the spanning tree. 0 - The represented vlan not applied to the spanning tree')
stgNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 3, 2), )
if mibBuilder.loadTexts: stgNewCfgTable.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgTable.setDescription('The table of Spanning Tree Groups configuration in the new_config.')
stgNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 3, 2, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "stgNewCfgIndex"))
if mibBuilder.loadTexts: stgNewCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgTableEntry.setDescription('Information about a particular Spanning Tree Group configuration.')
stgNewCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgNewCfgIndex.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgIndex.setDescription('The identifier of a particular Spanning Tree Group. This is also index to the entLogicalTable of Entity MIB.')
stgNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgState.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgState.setDescription('Turn on of off Spanning Tree operation of a particular Spanning Tree Group.')
stgNewCfgDefaultCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("default-config", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgDefaultCfg.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgDefaultCfg.setDescription('Setting the value to default-config(1) will set the default configuration as recommended by IEEE 802.1D for a particular Spanning Tree Group. default-config (1) is always returned When read, but it does not mean anything.')
stgNewCfgAddVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 3, 2, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgAddVlan.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgAddVlan.setDescription("The vlan to be added to the specified Spanning Tree Group. A '0' value is returned when read.")
stgNewCfgRemoveVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgRemoveVlan.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgRemoveVlan.setDescription("The vlan to be removed from the specified Spanning Tree Group. A '0' value is returned when read.")
stgNewCfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgPriority.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgPriority.setDescription('The value of the write-able portion of the Bridge ID, i.e., the first two octets of the (8 octet long) Bridge ID.')
stgNewCfgBrgHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgBrgHelloTime.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgBrgHelloTime.setDescription('The value in seconds that all bridges use for HelloTime when this bridge is acting as the root.')
stgNewCfgBrgForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgBrgForwardDelay.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgBrgForwardDelay.setDescription('The value in seconds that all bridges use for ForwardDelay when this bridge is acting as the root.')
stgNewCfgBrgMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgBrgMaxAge.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgBrgMaxAge.setDescription('The value in seconds that all bridges use for MaxAge when this bridge is acting as the root.')
stgNewCfgVlanBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 3, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgNewCfgVlanBmap.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgVlanBmap.setDescription('The vlans applied to the spanning tree group. The vlans are presented in bitmap format. This string displays vlan number from 1 to 4095. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ vlan 9 || || || ||___ vlan 8 || |____ vlan 7 || . . . ||_________ vlan 2 |__________ vlan 1 (as index to stgCurCfgTable) where x : 1 - The represented vlan applied to the spanning tree. 0 - The represented vlan not applied to the spanning tree')
stgCurCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 3, 3), )
if mibBuilder.loadTexts: stgCurCfgPortTable.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgPortTable.setDescription('The table of Spanning Tree Group port configuration in the current_config.')
stgCurCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 3, 3, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "stgCurCfgStgIndex"), (0, "BLADETYPE4-NETWORK-MIB", "stgCurCfgPortIndex"))
if mibBuilder.loadTexts: stgCurCfgPortTableEntry.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgPortTableEntry.setDescription('Information about port configuration of a particular Spanning Tree Group.')
stgCurCfgStgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgStgIndex.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgStgIndex.setDescription('The identifier of a particular Spanning Tree Group. This is also index to the entLogicalTable of Entity MIB.')
stgCurCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 3, 3, 1, 2), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPortIndex.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgPortIndex.setDescription('The port identifier of a particular Spanning Tree Group.')
stgCurCfgPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPortState.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgPortState.setDescription('Turn on of off Spanning Tree operation of a particular port of a Spanning Tree Group.')
stgCurCfgPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPortPriority.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgPortPriority.setDescription('The value of the priority field which is contained in the first (in network byte order) octet of the (2 octet long) Port ID.')
stgCurCfgPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPortPathCost.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgPortPathCost.setDescription('The contribution of this port to the path cost of paths towards the spanning tree root which include this port.')
stgCurCfgPortLink = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("p2p", 2), ("shared", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPortLink.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgPortLink.setDescription('The type of the port link. (for RSTP only)')
stgCurCfgPortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPortEdge.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgPortEdge.setDescription('The state of port edge. (for RSTP only)')
stgCurCfgPortFastFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgCurCfgPortFastFwd.setStatus('current')
if mibBuilder.loadTexts: stgCurCfgPortFastFwd.setDescription('The state of port fast forwarding.')
stgNewCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 3, 4), )
if mibBuilder.loadTexts: stgNewCfgPortTable.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgPortTable.setDescription('The table of Spanning Tree Group port configuration in the new_config.')
stgNewCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 3, 4, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "stgNewCfgStgIndex"), (0, "BLADETYPE4-NETWORK-MIB", "stgNewCfgPortIndex"))
if mibBuilder.loadTexts: stgNewCfgPortTableEntry.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgPortTableEntry.setDescription('Information about port configuration of a particular Spanning Tree Group.')
stgNewCfgStgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgNewCfgStgIndex.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgStgIndex.setDescription('The identifier of a particular Spanning Tree Group. This is also index to the entLogicalTable of Entity MIB.')
stgNewCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 3, 4, 1, 2), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgNewCfgPortIndex.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgPortIndex.setDescription('The port identifier of a particular Spanning Tree Group.')
stgNewCfgPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgPortState.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgPortState.setDescription('Turn on of off Spanning Tree operation of a particular port of a Spanning Tree Group.')
stgNewCfgPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgPortPriority.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgPortPriority.setDescription('The value of the priority field which is contained in the first (in network byte order) octet of the (2 octet long) Port ID.')
stgNewCfgPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgPortPathCost.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgPortPathCost.setDescription('The contribution of this port to the path cost of paths towards the spanning tree root which include this port.')
stgNewCfgPortLink = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("p2p", 2), ("shared", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgPortLink.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgPortLink.setDescription('The type of the port link. (for RSTP only)')
stgNewCfgPortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgPortEdge.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgPortEdge.setDescription('The state of port edge. (for RSTP only)')
stgNewCfgPortFastFwd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stgNewCfgPortFastFwd.setStatus('current')
if mibBuilder.loadTexts: stgNewCfgPortFastFwd.setDescription('The state of port fast forwarding.')
mstCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCurCfgState.setStatus('current')
if mibBuilder.loadTexts: mstCurCfgState.setDescription('Enable or disable MSTP/RSTP')
mstNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstNewCfgState.setStatus('current')
if mibBuilder.loadTexts: mstNewCfgState.setDescription('Enable or disable MSTP/RSTP')
mstCurCfgRegionName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCurCfgRegionName.setStatus('current')
if mibBuilder.loadTexts: mstCurCfgRegionName.setDescription("The Name for the Region's configuration.")
mstNewCfgRegionName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstNewCfgRegionName.setStatus('current')
if mibBuilder.loadTexts: mstNewCfgRegionName.setDescription("The Name for the Region's configuration.")
mstCurCfgRegionVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCurCfgRegionVersion.setStatus('current')
if mibBuilder.loadTexts: mstCurCfgRegionVersion.setDescription('Version of the MST Region.')
mstNewCfgRegionVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstNewCfgRegionVersion.setStatus('current')
if mibBuilder.loadTexts: mstNewCfgRegionVersion.setDescription('Version of the MST Region.')
mstCurCfgMaxHopCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCurCfgMaxHopCount.setStatus('current')
if mibBuilder.loadTexts: mstCurCfgMaxHopCount.setDescription('Indicates the maximum hop count value.')
mstNewCfgMaxHopCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstNewCfgMaxHopCount.setStatus('current')
if mibBuilder.loadTexts: mstNewCfgMaxHopCount.setDescription('Indicates the maximum hop count value.')
mstCurCfgStpMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mstp", 1), ("rstp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCurCfgStpMode.setStatus('current')
if mibBuilder.loadTexts: mstCurCfgStpMode.setDescription('The version of Spanning Tree Protocal the bridge is currently running.')
mstNewCfgStpMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mstp", 1), ("rstp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstNewCfgStpMode.setStatus('current')
if mibBuilder.loadTexts: mstNewCfgStpMode.setDescription('The version of Spanning Tree Protocal the bridge is currently running.')
mstCistDefaultCfg = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("default", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistDefaultCfg.setStatus('current')
if mibBuilder.loadTexts: mstCistDefaultCfg.setDescription('Setting the value to default(1) will set the Multiple Spanning Tree and member parameters to default. default(1) is always returned when read, but it does not mean anything.')
mstCistBridgeCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 5, 2, 2))
mstCistCurCfgBridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 5, 2, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgBridgePriority.setStatus('current')
if mibBuilder.loadTexts: mstCistCurCfgBridgePriority.setDescription('The value of the writable portion of the Brigde Identifier comprising of the first two octets.')
mstCistNewCfgBridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 5, 2, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistNewCfgBridgePriority.setStatus('current')
if mibBuilder.loadTexts: mstCistNewCfgBridgePriority.setDescription('The value of the writable portion of the Brigde Identifier comprising of the first two octets.')
mstCistCurCfgBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 5, 2, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgBridgeMaxAge.setStatus('current')
if mibBuilder.loadTexts: mstCistCurCfgBridgeMaxAge.setDescription('The value in seconds that all bridges use for MaxAge when this bridge is acting as the root.')
mstCistNewCfgBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 5, 2, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistNewCfgBridgeMaxAge.setStatus('current')
if mibBuilder.loadTexts: mstCistNewCfgBridgeMaxAge.setDescription('The value in seconds that all bridges use for MaxAge when this bridge is acting as the root.')
mstCistCurCfgBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 5, 2, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgBridgeForwardDelay.setStatus('current')
if mibBuilder.loadTexts: mstCistCurCfgBridgeForwardDelay.setDescription('The value in seconds that all bridges use for ForwardDelay when this bridge is acting as the root.')
mstCistNewCfgBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 5, 2, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstCistNewCfgBridgeForwardDelay.setStatus('current')
if mibBuilder.loadTexts: mstCistNewCfgBridgeForwardDelay.setDescription('The value in seconds that all bridges use for ForwardDelay when this bridge is acting as the root.')
mstCistCurCfgVlanBmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 5, 2, 2, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgVlanBmap.setStatus('current')
if mibBuilder.loadTexts: mstCistCurCfgVlanBmap.setDescription('The vlans applied to the CIST group. The vlans are presented in bitmap format. This string displays vlan number from 1 to 4094. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ vlan 9 || || || ||___ vlan 8 || |____ vlan 7 || . . . ||_________ vlan 2 |__________ vlan 1 where x : 1 - The represented vlan applied to the CIST group. 0 - The represented vlan not applied to the group')
mstCistNewCfgVlanBmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 5, 2, 2, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistNewCfgVlanBmap.setStatus('current')
if mibBuilder.loadTexts: mstCistNewCfgVlanBmap.setDescription('The vlans applied to the CIST group. The vlans are presented in bitmap format. This string displays vlan number from 1 to 4094. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ vlan 9 || || || ||___ vlan 8 || |____ vlan 7 || . . . ||_________ vlan 2 |__________ vlan 1 where x : 1 - The represented vlan applied to the CIST group. 0 - The represented vlan not applied to the group')
mstCistNewCfgAddVlan = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 5, 2, 2, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstCistNewCfgAddVlan.setStatus('current')
if mibBuilder.loadTexts: mstCistNewCfgAddVlan.setDescription("The vlan to be added to the CIST Group. A '0' value is returned when read.")
mstCistCurCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 5, 2, 3), )
if mibBuilder.loadTexts: mstCistCurCfgPortTable.setStatus('current')
if mibBuilder.loadTexts: mstCistCurCfgPortTable.setDescription('The table of CIST Port configuration.')
mstCistCurCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 5, 2, 3, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "mstCistCurCfgPortIndex"))
if mibBuilder.loadTexts: mstCistCurCfgPortTableEntry.setStatus('current')
if mibBuilder.loadTexts: mstCistCurCfgPortTableEntry.setDescription('Information about a particular CIST Port configuration.')
mstCistCurCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 5, 2, 3, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgPortIndex.setStatus('current')
if mibBuilder.loadTexts: mstCistCurCfgPortIndex.setDescription('The port number of the port for which this entry contains spanning tree configuration.')
mstCistCurCfgPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 5, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgPortPriority.setStatus('current')
if mibBuilder.loadTexts: mstCistCurCfgPortPriority.setDescription('The four most significant bits of the Port Identifier of the Spanning Tree instance can be modified by setting this value.')
mstCistCurCfgPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 5, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgPortPathCost.setStatus('current')
if mibBuilder.loadTexts: mstCistCurCfgPortPathCost.setDescription('The contribution of this port to the path cost of paths towards the CIST Root which include this port.')
mstCistCurCfgPortLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 5, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("p2p", 2), ("shared", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgPortLinkType.setStatus('current')
if mibBuilder.loadTexts: mstCistCurCfgPortLinkType.setDescription('The administrative point-to-point status of the LAN segment attached to this port. A value of p2p (2) indicates that this port should always be treated as if it is connected to a point-to-point link. A value of shared(3) indicates that this port should be treated as having a shared media connection. A value of auto(1) indicates that this port is considered to have a point-to-point link if it is an Aggregator and all of its members are aggregatable, or if the MAC entity is configured for full duplex operation, either through auto-negotiation or by management means. (for MSTP only)')
mstCistCurCfgPortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 5, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgPortEdge.setStatus('current')
if mibBuilder.loadTexts: mstCistCurCfgPortEdge.setDescription('The value of the Edge Port parameter. (for MSTP only)')
mstCistCurCfgPortStpState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 5, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgPortStpState.setStatus('current')
if mibBuilder.loadTexts: mstCistCurCfgPortStpState.setDescription("Turn port's Spanning Tree on/off.")
mstCistCurCfgPortHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 5, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistCurCfgPortHelloTime.setStatus('current')
if mibBuilder.loadTexts: mstCistCurCfgPortHelloTime.setDescription('The amount of time between the transmission of Configuration Port PDUs in seconds.')
mstCistNewCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 5, 2, 4), )
if mibBuilder.loadTexts: mstCistNewCfgPortTable.setStatus('current')
if mibBuilder.loadTexts: mstCistNewCfgPortTable.setDescription('The table of CIST Port configuration.')
mstCistNewCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 5, 2, 4, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "mstCistNewCfgPortIndex"))
if mibBuilder.loadTexts: mstCistNewCfgPortTableEntry.setStatus('current')
if mibBuilder.loadTexts: mstCistNewCfgPortTableEntry.setDescription('Information about a particular CIST Port configuration.')
mstCistNewCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 5, 2, 4, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstCistNewCfgPortIndex.setStatus('current')
if mibBuilder.loadTexts: mstCistNewCfgPortIndex.setDescription('The port number of the port for which this entry contains spanning tree configuration.')
mstCistNewCfgPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 5, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstCistNewCfgPortPriority.setStatus('current')
if mibBuilder.loadTexts: mstCistNewCfgPortPriority.setDescription('The four most significant bits of the Port Identifier of the Spanning Tree instance can be modified by setting this value.')
mstCistNewCfgPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 5, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstCistNewCfgPortPathCost.setStatus('current')
if mibBuilder.loadTexts: mstCistNewCfgPortPathCost.setDescription('The contribution of this port to the path cost of paths towards the CIST Root which include this port.')
mstCistNewCfgPortLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 5, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("p2p", 2), ("shared", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstCistNewCfgPortLinkType.setStatus('current')
if mibBuilder.loadTexts: mstCistNewCfgPortLinkType.setDescription('The administrative point-to-point status of the LAN segment attached to this port. A value of p2p (2) indicates that this port should always be treated as if it is connected to a point-to-point link. A value of shared(3) indicates that this port should be treated as having a shared media connection. A value of auto(1) indicates that this port is considered to have a point-to-point link if it is an Aggregator and all of its members are aggregatable, or if the MAC entity is configured for full duplex operation, either through auto-negotiation or by management means. (for MSTP only)')
mstCistNewCfgPortEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 5, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstCistNewCfgPortEdge.setStatus('current')
if mibBuilder.loadTexts: mstCistNewCfgPortEdge.setDescription('The value of the Edge Port parameter. (for MSTP only)')
mstCistNewCfgPortStpState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 5, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstCistNewCfgPortStpState.setStatus('current')
if mibBuilder.loadTexts: mstCistNewCfgPortStpState.setDescription("Turn port's Spanning Tree on/off.")
mstCistNewCfgPortHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 5, 2, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstCistNewCfgPortHelloTime.setStatus('current')
if mibBuilder.loadTexts: mstCistNewCfgPortHelloTime.setDescription('The amount of time between the transmission of Configuration Port PDUs in seconds.')
pmCurCfgPortMirrState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgPortMirrState.setStatus('current')
if mibBuilder.loadTexts: pmCurCfgPortMirrState.setDescription('The state of port-based port mirroring.')
pmNewCfgPortMirrState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pmNewCfgPortMirrState.setStatus('current')
if mibBuilder.loadTexts: pmNewCfgPortMirrState.setDescription('The state of port-based port mirroring.')
pmCurCfgPortMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 4, 1, 3), )
if mibBuilder.loadTexts: pmCurCfgPortMonitorTable.setStatus('current')
if mibBuilder.loadTexts: pmCurCfgPortMonitorTable.setDescription('The table of monitoring ports.')
pmCurCfgPortMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 4, 1, 3, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "pmCurCfgPmirrMoniPortIndex"), (0, "BLADETYPE4-NETWORK-MIB", "pmCurCfgPmirrMirrPortIndex"))
if mibBuilder.loadTexts: pmCurCfgPortMonitorEntry.setStatus('current')
if mibBuilder.loadTexts: pmCurCfgPortMonitorEntry.setDescription('A row in the monitoring port table.')
pmCurCfgPmirrMoniPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 4, 1, 3, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgPmirrMoniPortIndex.setStatus('current')
if mibBuilder.loadTexts: pmCurCfgPmirrMoniPortIndex.setDescription('The monitoring port number.')
pmCurCfgPmirrMirrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 4, 1, 3, 1, 2), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgPmirrMirrPortIndex.setStatus('current')
if mibBuilder.loadTexts: pmCurCfgPmirrMirrPortIndex.setDescription('The mirrored port number')
pmCurCfgPmirrDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 4, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("in", 1), ("out", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmCurCfgPmirrDirection.setStatus('current')
if mibBuilder.loadTexts: pmCurCfgPmirrDirection.setDescription('The type of traffic to be monitored with respect to the mirrored port.')
pmNewCfgPortMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 4, 1, 4), )
if mibBuilder.loadTexts: pmNewCfgPortMonitorTable.setStatus('current')
if mibBuilder.loadTexts: pmNewCfgPortMonitorTable.setDescription('The table of monitoring ports.')
pmNewCfgPortMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 4, 1, 4, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "pmNewCfgPmirrMoniPortIndex"), (0, "BLADETYPE4-NETWORK-MIB", "pmNewCfgPmirrMirrPortIndex"))
if mibBuilder.loadTexts: pmNewCfgPortMonitorEntry.setStatus('current')
if mibBuilder.loadTexts: pmNewCfgPortMonitorEntry.setDescription('A row in the monitoring port table.')
pmNewCfgPmirrMoniPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 4, 1, 4, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmNewCfgPmirrMoniPortIndex.setStatus('current')
if mibBuilder.loadTexts: pmNewCfgPmirrMoniPortIndex.setDescription('The monitoring port number.')
pmNewCfgPmirrMirrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 4, 1, 4, 1, 2), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pmNewCfgPmirrMirrPortIndex.setStatus('current')
if mibBuilder.loadTexts: pmNewCfgPmirrMirrPortIndex.setDescription('The mirrored port number')
pmNewCfgPmirrDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 4, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("in", 1), ("out", 2), ("both", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pmNewCfgPmirrDirection.setStatus('current')
if mibBuilder.loadTexts: pmNewCfgPmirrDirection.setDescription('The type of traffic to be monitored with respect to the mirrored port.')
pmNewCfgPmirrDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 4, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pmNewCfgPmirrDelete.setStatus('current')
if mibBuilder.loadTexts: pmNewCfgPmirrDelete.setDescription('Setting the value to delete(2) will delete the entire row. When read, other(1) is returned.')
pmNewCfgPmonDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 4, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pmNewCfgPmonDelete.setStatus('current')
if mibBuilder.loadTexts: pmNewCfgPmonDelete.setDescription('Setting the value to delete(2) will delete the monitor port. When read, other(1) is returned.')
lacpCurSystemPriority = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpCurSystemPriority.setStatus('current')
if mibBuilder.loadTexts: lacpCurSystemPriority.setDescription("A 2-octet read-write value indicating the priority value associated with the Actor's System ID.")
lacpNewSystemPriority = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpNewSystemPriority.setStatus('current')
if mibBuilder.loadTexts: lacpNewSystemPriority.setDescription("A 2-octet read-write value indicating the priority value associated with the Actor's System ID.")
lacpCurSystemTimeoutTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 90))).clone(namedValues=NamedValues(("short", 3), ("long", 90)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpCurSystemTimeoutTime.setStatus('current')
if mibBuilder.loadTexts: lacpCurSystemTimeoutTime.setDescription('If a port does not receive LACPDUs for Timeout time LACP information pertaining to the port is invalidated. Its every 3 sec (short) and every 90 sec (long 3).')
lacpNewSystemTimeoutTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 90))).clone(namedValues=NamedValues(("short", 3), ("long", 90)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpNewSystemTimeoutTime.setStatus('current')
if mibBuilder.loadTexts: lacpNewSystemTimeoutTime.setDescription('If a port does not receive LACPDUs for Timeout time LACP information pertaining to the port is invalidated. Its every 3 sec (short) and every 90 sec (long 3).')
lacpCurPortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 6, 7), )
if mibBuilder.loadTexts: lacpCurPortCfgTable.setStatus('current')
if mibBuilder.loadTexts: lacpCurPortCfgTable.setDescription('The table of LACP port configuration.')
lacpCurPortCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 6, 7, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "lacpCurPortCfgTableId"))
if mibBuilder.loadTexts: lacpCurPortCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: lacpCurPortCfgTableEntry.setDescription('A row in the LACP port configuration table.')
lacpCurPortCfgTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 6, 7, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpCurPortCfgTableId.setStatus('current')
if mibBuilder.loadTexts: lacpCurPortCfgTableId.setDescription(' LACP port number.')
lacpCurPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 6, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("active", 2), ("passive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpCurPortState.setStatus('current')
if mibBuilder.loadTexts: lacpCurPortState.setDescription('LACP port state can be one of three states off (Not participating in LACP) Active (Initiates LACPDU updates) Passive (Does not initiate LACPDU updates but responds to peer.')
lacpCurPortActorPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 6, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpCurPortActorPortPriority.setStatus('current')
if mibBuilder.loadTexts: lacpCurPortActorPortPriority.setDescription('The priority value assigned to this Aggregation Port. This 16-bit value is read-only.')
lacpCurPortActorAdminKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 6, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpCurPortActorAdminKey.setStatus('current')
if mibBuilder.loadTexts: lacpCurPortActorAdminKey.setDescription('The current administrative value of the Key for the Aggregation Port. This is a 16-bit read-only value. The meaning of particular Key values is of local significance.')
lacpNewPortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 6, 8), )
if mibBuilder.loadTexts: lacpNewPortCfgTable.setStatus('current')
if mibBuilder.loadTexts: lacpNewPortCfgTable.setDescription('The table of LACP port configuration.')
lacpNewPortCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 6, 8, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "lacpNewPortCfgTableId"))
if mibBuilder.loadTexts: lacpNewPortCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: lacpNewPortCfgTableEntry.setDescription('A row in the LACP port configuration table.')
lacpNewPortCfgTableId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 6, 8, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpNewPortCfgTableId.setStatus('current')
if mibBuilder.loadTexts: lacpNewPortCfgTableId.setDescription(' LACP port number.')
lacpNewPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 6, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("active", 2), ("passive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpNewPortState.setStatus('current')
if mibBuilder.loadTexts: lacpNewPortState.setDescription('LACP port state can be one of three states off (Not participating in LACP) Active (Initiates LACPDU updates) Passive (Does not initiate LACPDU updates but responds to peer.')
lacpNewPortActorPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 6, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpNewPortActorPortPriority.setStatus('current')
if mibBuilder.loadTexts: lacpNewPortActorPortPriority.setDescription('The priority value assigned to this Aggregation Port. This 16-bit value is read-write.')
lacpNewPortActorAdminKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 6, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpNewPortActorAdminKey.setStatus('current')
if mibBuilder.loadTexts: lacpNewPortActorAdminKey.setDescription('The current administrative value of the Key for the Aggregation Port. This is a 16-bit read-write value. The meaning of particular Key values is of local significance.')
lacpDeleteTrunk = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 6, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpDeleteTrunk.setStatus('current')
if mibBuilder.loadTexts: lacpDeleteTrunk.setDescription('Delete a trunk with specified admin key')
upfastCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: upfastCurCfgState.setStatus('current')
if mibBuilder.loadTexts: upfastCurCfgState.setDescription('Enable or disable uplink fast')
upfastNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: upfastNewCfgState.setStatus('current')
if mibBuilder.loadTexts: upfastNewCfgState.setDescription('Enable or disable uplink fast')
updateCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: updateCurCfgState.setStatus('current')
if mibBuilder.loadTexts: updateCurCfgState.setDescription('UplinkFast station update rate: packets per second')
updateNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: updateNewCfgState.setStatus('current')
if mibBuilder.loadTexts: updateNewCfgState.setDescription('UplinkFast station update rate: packets per second')
pvstCompatibilityCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 8, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pvstCompatibilityCurCfgState.setStatus('current')
if mibBuilder.loadTexts: pvstCompatibilityCurCfgState.setDescription('Enable or disable PVST+ compatibility')
pvstCompatibilityNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 8, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pvstCompatibilityNewCfgState.setStatus('current')
if mibBuilder.loadTexts: pvstCompatibilityNewCfgState.setDescription('Enable or disable PVST+ compatibility')
fdbStatsCurrent = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatsCurrent.setStatus('current')
if mibBuilder.loadTexts: fdbStatsCurrent.setDescription('Current number of entries in the Forwarding Database.')
fdbStatsHiwat = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatsHiwat.setStatus('current')
if mibBuilder.loadTexts: fdbStatsHiwat.setDescription('Highest number of entries recorded at any given time in the Forwarding Database.')
fdbStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fdbStatsClear.setStatus('current')
if mibBuilder.loadTexts: fdbStatsClear.setDescription('Clear FDB statistics')
stgStatsPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 2, 2, 1), )
if mibBuilder.loadTexts: stgStatsPortTable.setStatus('current')
if mibBuilder.loadTexts: stgStatsPortTable.setDescription('The table of Spanning Tree Group port statistics.')
stgStatsPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 2, 2, 1, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "stgStatsStpIndex"), (0, "BLADETYPE4-NETWORK-MIB", "stgStatsPortIndex"))
if mibBuilder.loadTexts: stgStatsPortTableEntry.setStatus('current')
if mibBuilder.loadTexts: stgStatsPortTableEntry.setDescription('Statistics about port of a particular Spanning Tree Group.')
stgStatsStpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgStatsStpIndex.setStatus('current')
if mibBuilder.loadTexts: stgStatsStpIndex.setDescription('The identifier of a particular Spanning Tree Group.')
stgStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 2, 2, 1, 1, 2), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgStatsPortIndex.setStatus('current')
if mibBuilder.loadTexts: stgStatsPortIndex.setDescription('The port identifier of a particular Spanning Tree Group.')
stgStatsPortRcvCfgBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 2, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgStatsPortRcvCfgBpdus.setStatus('current')
if mibBuilder.loadTexts: stgStatsPortRcvCfgBpdus.setDescription("Number of Configuration BPDU's received on this port.")
stgStatsPortRcvTcnBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 2, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgStatsPortRcvTcnBpdus.setStatus('current')
if mibBuilder.loadTexts: stgStatsPortRcvTcnBpdus.setDescription("Number of TCN BPDU's received on this port.")
stgStatsPortXmtCfgBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 2, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgStatsPortXmtCfgBpdus.setStatus('current')
if mibBuilder.loadTexts: stgStatsPortXmtCfgBpdus.setDescription("Number of Configuration BPDU's trasmitted from the port.")
stgStatsPortXmtTcnBpdus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgStatsPortXmtTcnBpdus.setStatus('current')
if mibBuilder.loadTexts: stgStatsPortXmtTcnBpdus.setDescription("Number of TCN BPDU's trasmitted from the port.")
lacpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 2, 3, 1), )
if mibBuilder.loadTexts: lacpStatsTable.setStatus('current')
if mibBuilder.loadTexts: lacpStatsTable.setDescription('The table of LACP Stats.')
lacpStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 2, 3, 1, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "lacpStatsIndex"))
if mibBuilder.loadTexts: lacpStatsTableEntry.setStatus('current')
if mibBuilder.loadTexts: lacpStatsTableEntry.setDescription('Lacp status info.')
lacpStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 2, 3, 1, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpStatsIndex.setStatus('current')
if mibBuilder.loadTexts: lacpStatsIndex.setDescription('Index')
lacpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 2, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpdusRx.setStatus('current')
if mibBuilder.loadTexts: lacpdusRx.setDescription('Valid LACPDUs received')
markerpdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 2, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: markerpdusRx.setStatus('current')
if mibBuilder.loadTexts: markerpdusRx.setDescription('Valid Marker PDUs received')
markerresponsepdusRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 2, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: markerresponsepdusRx.setStatus('current')
if mibBuilder.loadTexts: markerresponsepdusRx.setDescription('Valid Marker Rsp PDUs received')
unknownRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 2, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unknownRx.setStatus('current')
if mibBuilder.loadTexts: unknownRx.setDescription('Unknown version/TLV type')
illegalRx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 2, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: illegalRx.setStatus('current')
if mibBuilder.loadTexts: illegalRx.setDescription('Illegal subtype received')
lacpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 2, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpdusTx.setStatus('current')
if mibBuilder.loadTexts: lacpdusTx.setDescription('LACPDUs transmitted')
markerpdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 2, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: markerpdusTx.setStatus('current')
if mibBuilder.loadTexts: markerpdusTx.setDescription('Market PDUs transmitted')
markerresponsepdusTx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 2, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: markerresponsepdusTx.setStatus('current')
if mibBuilder.loadTexts: markerresponsepdusTx.setDescription('Marker Rsp PDUs transmitted ')
lacpClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 2, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpClearStats.setStatus('current')
if mibBuilder.loadTexts: lacpClearStats.setDescription('Setting this to clear(2) results in clearing the LACP statistics.')
ufdNoLtMLinkFailure = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdNoLtMLinkFailure.setStatus('current')
if mibBuilder.loadTexts: ufdNoLtMLinkFailure.setDescription(' ')
ufdNoLtMLinkBlockingState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 2, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdNoLtMLinkBlockingState.setStatus('current')
if mibBuilder.loadTexts: ufdNoLtMLinkBlockingState.setDescription(' ')
ufdNoLtDAutoDisabled = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 2, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdNoLtDAutoDisabled.setStatus('current')
if mibBuilder.loadTexts: ufdNoLtDAutoDisabled.setDescription(' ')
ufdClearStats = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 2, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdClearStats.setStatus('current')
if mibBuilder.loadTexts: ufdClearStats.setDescription(' Setting this value to clear(2) clears the UFD stats.')
fdbClear = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fdbClear.setStatus('current')
if mibBuilder.loadTexts: fdbClear.setDescription('Setting this value to clear(2) clears the entire master FDB.')
fdbTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 2, 2), )
if mibBuilder.loadTexts: fdbTable.setStatus('current')
if mibBuilder.loadTexts: fdbTable.setDescription('The table of FDB entries.')
fdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 2, 2, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "fdbMacAddr"))
if mibBuilder.loadTexts: fdbEntry.setStatus('current')
if mibBuilder.loadTexts: fdbEntry.setDescription('A row in the FDB table')
fdbMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 2, 2, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbMacAddr.setStatus('current')
if mibBuilder.loadTexts: fdbMacAddr.setDescription('The MAC address for the FDB entry.')
fdbVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbVlan.setStatus('current')
if mibBuilder.loadTexts: fdbVlan.setDescription('The VLAN ID for the FDB entry.')
fdbSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 2, 2, 1, 3), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbSrcPort.setStatus('current')
if mibBuilder.loadTexts: fdbSrcPort.setDescription("Either the value '0', or the port number of the port on which a frame having a source address equal to the value of the corresponding instance has been seen. A value of '0' indicates that the port number has not been learned but that the bridge does have some forwarding/filtering information about this address.")
fdbState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("forward", 2), ("trunk", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbState.setStatus('current')
if mibBuilder.loadTexts: fdbState.setDescription('The state of the FDB entry. The meanings of the values are : unknown(1) : the MAC address has not yet been learned by the switch but has only been seen as a destination address forward(2) : the MAC address has been learned by the switch trunk(3) : frames with this MAC address are forwarded to trunk group')
fdbSrcTrunk = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbSrcTrunk.setStatus('current')
if mibBuilder.loadTexts: fdbSrcTrunk.setDescription("Either the value '0', or the trunk number of the trunk on which a frame having a source address equal to the value of the corresponding instance has been seen. A value of '0' indicates that the source address is not associated with a trunk.")
fdbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbStatus.setStatus('current')
if mibBuilder.loadTexts: fdbStatus.setDescription("'1' if it is permanent '0' if it is not permanent")
stpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 3, 1), )
if mibBuilder.loadTexts: stpInfoTable.setStatus('current')
if mibBuilder.loadTexts: stpInfoTable.setDescription('The table of Spanning Tree Group information.')
stpInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 3, 1, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "stpInfoIndex"))
if mibBuilder.loadTexts: stpInfoTableEntry.setStatus('current')
if mibBuilder.loadTexts: stpInfoTableEntry.setDescription('Information about a particular Spanning Tree Group.')
stpInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoIndex.setStatus('current')
if mibBuilder.loadTexts: stpInfoIndex.setDescription('The identifier of a particular Spanning Tree Group. This is also index to the entLogicalTable of Entity MIB.')
stpInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoState.setStatus('current')
if mibBuilder.loadTexts: stpInfoState.setDescription('Turn on of off Spanning Tree operation of a particular Spanning Tree Group.')
stgInfoVlanBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stgInfoVlanBmap.setStatus('current')
if mibBuilder.loadTexts: stgInfoVlanBmap.setDescription('The vlans applied to the spanning tree group. The vlans are presented in bitmap format. This string displays vlan number from 1 to 4096. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ vlan 9 || || || ||___ vlan 8 || |____ vlan 7 || . . . ||_________ vlan 2 |__________ vlan 1 (as index to stgCurCfgTable) where x : 1 - The represented vlan applied to the spanning tree. 0 - The represented vlan not applied to the spanning tree')
stpInfoTimeSinceTopChange = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 3, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoTimeSinceTopChange.setStatus('current')
if mibBuilder.loadTexts: stpInfoTimeSinceTopChange.setDescription('The time (in hundredths of a second) since the last time a topology change was detected by the bridge entity.')
stpInfoTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoTopChanges.setStatus('current')
if mibBuilder.loadTexts: stpInfoTopChanges.setDescription('The total number of topology changes detected by this bridge since the management entity was last reset or initialized.')
stpInfoDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 3, 1, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: stpInfoDesignatedRoot.setDescription('The bridge identifier of the root of the spanning tree as determined by the Spanning Tree Protocol as executed by this node. This value is used as the Root Identifier parameter in all Configuration Bridge PDUs originated by this node.')
stpInfoRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoRootCost.setStatus('current')
if mibBuilder.loadTexts: stpInfoRootCost.setDescription('The cost of the path to the root as seen from this bridge.')
stpInfoRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 3, 1, 1, 8), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoRootPort.setStatus('current')
if mibBuilder.loadTexts: stpInfoRootPort.setDescription('The port number of the port which offers the lowest cost path from this bridge to the root bridge.')
stpInfoMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoMaxAge.setStatus('current')
if mibBuilder.loadTexts: stpInfoMaxAge.setDescription('The maximum age of Spanning Tree Protocol information learned from the network on any port before it is discarded, in units of hundredths of a second. This is the actual value that this bridge is currently using.')
stpInfoHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoHelloTime.setStatus('current')
if mibBuilder.loadTexts: stpInfoHelloTime.setDescription('The amount of time between the transmission of Configuration bridge PDUs by this node on any port when it is the root of the spanning tree or trying to become so, in units of hundredths of a second. This is the actual value that this bridge is currently using.')
stpInfoForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoForwardDelay.setStatus('current')
if mibBuilder.loadTexts: stpInfoForwardDelay.setDescription('This time value, measured in units of hundredths of a second, controls how fast a port changes its spanning state when moving towards the Forwarding state. The value determines how long the port stays in each of the Listening and Learning states, which precede the Forwarding state. This value is also used, when a topology change has been detected and is underway, to age all dynamic entries in the Forwarding Database.')
stpInfoHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoHoldTime.setStatus('current')
if mibBuilder.loadTexts: stpInfoHoldTime.setDescription('This time value determines the interval length during which no more than two Configuration bridge PDUs shall be transmitted by this node, in units of hundredths of a second.')
stpInfoBrgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoBrgPriority.setStatus('current')
if mibBuilder.loadTexts: stpInfoBrgPriority.setDescription('The value of the write-able portion of the Bridge ID, i.e., the first two octets of the (8 octet long) Bridge ID.')
stpInfoBrgHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoBrgHelloTime.setStatus('current')
if mibBuilder.loadTexts: stpInfoBrgHelloTime.setDescription('The value in seconds that all bridges use for HelloTime when this bridge is acting as the root.')
stpInfoBrgForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoBrgForwardDelay.setStatus('current')
if mibBuilder.loadTexts: stpInfoBrgForwardDelay.setDescription('The value in seconds that all bridges use for ForwardDelay when this bridge is acting as the root.')
stpInfoBrgMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoBrgMaxAge.setStatus('current')
if mibBuilder.loadTexts: stpInfoBrgMaxAge.setDescription('The value in seconds that all bridges use for MaxAge when this bridge is acting as the root.')
stpInfoAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoAgingTime.setStatus('current')
if mibBuilder.loadTexts: stpInfoAgingTime.setDescription('The timeout period in seconds for aging out dynamically learned forwarding information.')
stpInfoPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 3, 2), )
if mibBuilder.loadTexts: stpInfoPortTable.setStatus('current')
if mibBuilder.loadTexts: stpInfoPortTable.setDescription('The table of Spanning Tree Group port information.')
stpInfoPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 3, 2, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "stpInfoPortStpIndex"), (0, "BLADETYPE4-NETWORK-MIB", "stpInfoPortIndex"))
if mibBuilder.loadTexts: stpInfoPortTableEntry.setStatus('current')
if mibBuilder.loadTexts: stpInfoPortTableEntry.setDescription('Information about port configuration for a particular Spanning Tree Group.')
stpInfoPortStpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortStpIndex.setStatus('current')
if mibBuilder.loadTexts: stpInfoPortStpIndex.setDescription('The identifier of a particular Spanning Tree Group.')
stpInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 3, 2, 1, 2), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortIndex.setStatus('current')
if mibBuilder.loadTexts: stpInfoPortIndex.setDescription('The port identifier of a particular Spanning Tree Group.')
stpInfoPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortState.setStatus('current')
if mibBuilder.loadTexts: stpInfoPortState.setDescription("The port's current state as defined by application of the Spanning Tree Protocol. This state controls what action a port takes on reception of a frame. If the bridge has detected a port that is malfunctioning it will place that port into the broken(6) state. For ports which are disabled, this object will have a value of disabled(1).")
stpInfoPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 3, 2, 1, 4), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: stpInfoPortDesignatedRoot.setDescription('The unique Bridge Identifier of the Bridge recorded as the Root in the Configuration BPDUs transmitted by the Designated Bridge for the segment to which the port is attached.')
stpInfoPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortDesignatedCost.setStatus('current')
if mibBuilder.loadTexts: stpInfoPortDesignatedCost.setDescription('The path cost of the Designated Port of the segment connected to this port. This value is compared to the Root Path Cost field in received bridge PDUs.')
stpInfoPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 3, 2, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortDesignatedBridge.setStatus('current')
if mibBuilder.loadTexts: stpInfoPortDesignatedBridge.setDescription("The Bridge Identifier of the bridge which this port considers to be the Designated Bridge for this port's segment.")
stpInfoPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 3, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortDesignatedPort.setStatus('current')
if mibBuilder.loadTexts: stpInfoPortDesignatedPort.setDescription("The Port Identifier of the port on the Designated Bridge for this port's segment.")
stpInfoPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortForwardTransitions.setStatus('current')
if mibBuilder.loadTexts: stpInfoPortForwardTransitions.setDescription('The number of times this port has transitioned from the Learning state to the Forwarding state.')
stpInfoPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stpInfoPortPathCost.setStatus('current')
if mibBuilder.loadTexts: stpInfoPortPathCost.setDescription('The path cost of the port.')
cistRoot = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 1, 1, 1), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistRoot.setStatus('current')
if mibBuilder.loadTexts: cistRoot.setDescription('The bridge identifier of the Root of the common spanning tree as determined by the Spanning Tree Protocol as executed by this node. This value is used as the CIST Root Identifier parameter in all Configuration Bridge PDUs originated by this node.')
cistRootPathCost = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistRootPathCost.setStatus('current')
if mibBuilder.loadTexts: cistRootPathCost.setDescription('The cost of the path to the CIST Root as seen from this bridge.')
cistRootPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 1, 1, 3), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistRootPort.setStatus('current')
if mibBuilder.loadTexts: cistRootPort.setDescription('The Port Number of the Port which offers the lowest path cost from this bridge to the CIST Root Bridge.')
cistRootHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistRootHelloTime.setStatus('current')
if mibBuilder.loadTexts: cistRootHelloTime.setDescription('The amount of time between the transmission of Configuration bridge PDUs in seconds.')
cistRootMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistRootMaxAge.setStatus('current')
if mibBuilder.loadTexts: cistRootMaxAge.setDescription('The value in seconds that all bridges use for MaxAge when this bridge is acting as the root.')
cistRootForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistRootForwardDelay.setStatus('current')
if mibBuilder.loadTexts: cistRootForwardDelay.setDescription('The value in seconds that all bridges use for ForwardDelay when this bridge is acting as the root.')
cistRegionalRoot = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 1, 1, 7), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistRegionalRoot.setStatus('current')
if mibBuilder.loadTexts: cistRegionalRoot.setDescription('The bridge identifier of the Root of the Multiple spanning tree region as determined by the Spanning Tree Protocol as executed by this node. This value is used as the CIST Regional Root Identifier parameter in all Configuration Bridge PDUs originated by this node.')
cistRegionalPathCost = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistRegionalPathCost.setStatus('current')
if mibBuilder.loadTexts: cistRegionalPathCost.setDescription('The Cost of the path to the CIST Regional Root as seen from this bridge.')
cistBridgePriority = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistBridgePriority.setStatus('current')
if mibBuilder.loadTexts: cistBridgePriority.setDescription('The value of the writable portion of the Brigde Identifier comprising of the first two octets.')
cistBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistBridgeMaxAge.setStatus('current')
if mibBuilder.loadTexts: cistBridgeMaxAge.setDescription('The value in seconds that all bridges use for MaxAge when this bridge is acting as the root.')
cistBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistBridgeForwardDelay.setStatus('current')
if mibBuilder.loadTexts: cistBridgeForwardDelay.setDescription('The value in seconds that all bridges use for ForwardDelay when this bridge is acting as the root.')
cistMaxHopCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistMaxHopCount.setStatus('current')
if mibBuilder.loadTexts: cistMaxHopCount.setDescription('Indicates the maximum hop count value.')
mstpDigest = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstpDigest.setStatus('current')
if mibBuilder.loadTexts: mstpDigest.setDescription('The digest of the mstp.')
cistInfoPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 1, 2), )
if mibBuilder.loadTexts: cistInfoPortTable.setStatus('current')
if mibBuilder.loadTexts: cistInfoPortTable.setDescription('The table of CIST Port information.')
cistInfoPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 1, 2, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "cistInfoPortIndex"))
if mibBuilder.loadTexts: cistInfoPortTableEntry.setStatus('current')
if mibBuilder.loadTexts: cistInfoPortTableEntry.setDescription('Information about a particular CIST Port.')
cistInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 1, 2, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortIndex.setStatus('current')
if mibBuilder.loadTexts: cistInfoPortIndex.setDescription('The port number of the port for which this entry contains spanning tree configuration.')
cistInfoPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortPriority.setStatus('current')
if mibBuilder.loadTexts: cistInfoPortPriority.setDescription('The four most significant bits of the Port Identifier of the Spanning Tree instance can be modified by setting this value.')
cistInfoPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortPathCost.setStatus('current')
if mibBuilder.loadTexts: cistInfoPortPathCost.setDescription('The contribution of this port to the path cost of paths towards the CIST Root which include this port.')
cistInfoPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("discarding", 2), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortState.setStatus('current')
if mibBuilder.loadTexts: cistInfoPortState.setDescription('Current state of the Port as defined by the Common spanning tree protocol.')
cistInfoPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disabled", 1), ("alternate", 2), ("backup", 3), ("root", 4), ("designated", 5), ("master", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortRole.setStatus('current')
if mibBuilder.loadTexts: cistInfoPortRole.setDescription('Selected Port Role of the port for this spanning tree instance.')
cistInfoPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 1, 2, 1, 6), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortDesignatedBridge.setStatus('current')
if mibBuilder.loadTexts: cistInfoPortDesignatedBridge.setDescription("The unique Bridge Identifier of the bridge which this port considers to be the Designated Bridge for the port's segment.")
cistInfoPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 1, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortDesignatedPort.setStatus('current')
if mibBuilder.loadTexts: cistInfoPortDesignatedPort.setDescription("The Port identifier of the port on the Designated Bridge for this port's segment.")
cistInfoPortLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("p2p", 1), ("shared", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortLinkType.setStatus('current')
if mibBuilder.loadTexts: cistInfoPortLinkType.setDescription('The point-to-point status of the LAN segment attached to this port. A value of p2p (2) indicates that this port is being treated as if it is connected to a point-to-point link. A value of shared(3) indicates that this port is being treated as having a shared media connection.')
cistInfoPortHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cistInfoPortHelloTime.setStatus('current')
if mibBuilder.loadTexts: cistInfoPortHelloTime.setDescription('The amount of time between the transmission of Configuration Port PDUs in seconds.')
lacpInfoAggrTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 1), )
if mibBuilder.loadTexts: lacpInfoAggrTable.setStatus('current')
if mibBuilder.loadTexts: lacpInfoAggrTable.setDescription('The table of LACP aggregator information.')
lacpInfoAggrTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 1, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "lacpInfoAggrIndex"))
if mibBuilder.loadTexts: lacpInfoAggrTableEntry.setStatus('current')
if mibBuilder.loadTexts: lacpInfoAggrTableEntry.setDescription('Information about a LACP aggregator.')
lacpInfoAggrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 1, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoAggrIndex.setStatus('current')
if mibBuilder.loadTexts: lacpInfoAggrIndex.setDescription('The aggregator identifier.')
lacpInfoAggrId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoAggrId.setStatus('current')
if mibBuilder.loadTexts: lacpInfoAggrId.setDescription('')
lacpInfoAggrMac = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoAggrMac.setStatus('current')
if mibBuilder.loadTexts: lacpInfoAggrMac.setDescription('')
lacpInfoAggrActSysPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoAggrActSysPrio.setStatus('current')
if mibBuilder.loadTexts: lacpInfoAggrActSysPrio.setDescription('')
lacpInfoAggrActSysId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoAggrActSysId.setStatus('current')
if mibBuilder.loadTexts: lacpInfoAggrActSysId.setDescription('')
lacpInfoAggrIndivState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoAggrIndivState.setStatus('current')
if mibBuilder.loadTexts: lacpInfoAggrIndivState.setDescription('')
lacpInfoAggrActAdminKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoAggrActAdminKey.setStatus('current')
if mibBuilder.loadTexts: lacpInfoAggrActAdminKey.setDescription('')
lacpInfoAggrActOperKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoAggrActOperKey.setStatus('current')
if mibBuilder.loadTexts: lacpInfoAggrActOperKey.setDescription('')
lacpInfoAggrPartSysPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoAggrPartSysPrio.setStatus('current')
if mibBuilder.loadTexts: lacpInfoAggrPartSysPrio.setDescription('')
lacpInfoAggrPartSysId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoAggrPartSysId.setStatus('current')
if mibBuilder.loadTexts: lacpInfoAggrPartSysId.setDescription('')
lacpInfoAggrPartOperKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoAggrPartOperKey.setStatus('current')
if mibBuilder.loadTexts: lacpInfoAggrPartOperKey.setDescription('')
lacpInfoAggrReadyState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoAggrReadyState.setStatus('current')
if mibBuilder.loadTexts: lacpInfoAggrReadyState.setDescription('')
lacpInfoAggrNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoAggrNumPorts.setStatus('current')
if mibBuilder.loadTexts: lacpInfoAggrNumPorts.setDescription('')
lacpInfoAggrPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoAggrPorts.setStatus('current')
if mibBuilder.loadTexts: lacpInfoAggrPorts.setDescription('')
lacpInfoPort = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2))
lacpInfoPortGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 1), )
if mibBuilder.loadTexts: lacpInfoPortGeneralTable.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortGeneralTable.setDescription('The table of LACP port general information.')
lacpInfoPortGeneralTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 1, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "lacpInfoPortGeneralIndex"))
if mibBuilder.loadTexts: lacpInfoPortGeneralTableEntry.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortGeneralTableEntry.setDescription('General information about a LACP port.')
lacpInfoPortGeneralIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 1, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortGeneralIndex.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortGeneralIndex.setDescription('The port identifier.')
lacpInfoPortLacpEna = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortLacpEna.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortLacpEna.setDescription('')
lacpInfoPortAdminEna = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortAdminEna.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortAdminEna.setDescription('')
lacpInfoPortActSysId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActSysId.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortActSysId.setDescription('')
lacpInfoPortActSysPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActSysPrio.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortActSysPrio.setDescription('')
lacpInfoPortActAdminKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActAdminKey.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortActAdminKey.setDescription('')
lacpInfoPortActOperKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActOperKey.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortActOperKey.setDescription('')
lacpInfoPortActPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActPortNum.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortActPortNum.setDescription('')
lacpInfoPortActPortPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActPortPrio.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortActPortPrio.setDescription('')
lacpInfoPortIndivState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortIndivState.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortIndivState.setDescription('')
lacpInfoSelAggrId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoSelAggrId.setStatus('current')
if mibBuilder.loadTexts: lacpInfoSelAggrId.setDescription('')
lacpInfoAttAggrId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoAttAggrId.setStatus('current')
if mibBuilder.loadTexts: lacpInfoAttAggrId.setDescription('')
lacpInfoPortReadyN = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortReadyN.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortReadyN.setDescription('True value for Ready_N flag indicates that the wait while timer has expired and it is waiting to attach to an aggregator. There is one Ready_N value for each port.')
lacpInfoPortNtt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortNtt.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortNtt.setDescription('Need to transmit flag. True indicates that there is new protocol information that should be transmitted on the link.')
lacpInfoPortSelected = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("selected", 1), ("unselected", 2), ("standby", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortSelected.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortSelected.setDescription('Selected flag value indicates that the selection logic has selected an appropriate Aggregator. A value of unselected indicates that no aggregator is currently selected. A value of standby indicates that although the selection logic has selected an appropriate Aggregator, aggregation restrictions currently precent the port from being enabled as part of the aggregation, and so the port is being held in standby condition.')
lacpInfoPortMoved = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortMoved.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortMoved.setDescription('Port Moved flag is set to true if the receive machine for a port is in the port_disabled state, and the combination of partner oper system and partner oper port number in use by the port has been used by received in an incoming LACPDU on a different port.')
lacpInfoCollDetState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoCollDetState.setStatus('current')
if mibBuilder.loadTexts: lacpInfoCollDetState.setDescription('')
lacpInfoPortRxState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 1, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortRxState.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortRxState.setDescription('')
lacpInfoPortMuxState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 1, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortMuxState.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortMuxState.setDescription('')
lacpInfoPortPerState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 1, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortPerState.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortPerState.setDescription('')
lacpInfoPortPerTraTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortPerTraTimer.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortPerTraTimer.setDescription('Periodic Transmit Timer')
lacpInfoPortCurWhileTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortCurWhileTimer.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortCurWhileTimer.setDescription('Current While Timer')
lacpInfoPortOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortOperState.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortOperState.setDescription('The current operational state of LACP on the port.')
lacpInfoPortAdminTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 2), )
if mibBuilder.loadTexts: lacpInfoPortAdminTable.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortAdminTable.setDescription('The table of LACP port admin information.')
lacpInfoPortAdminTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 2, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "lacpInfoPortAdminIndex"))
if mibBuilder.loadTexts: lacpInfoPortAdminTableEntry.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortAdminTableEntry.setDescription('Admin information about a LACP port.')
lacpInfoPortAdminIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 2, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortAdminIndex.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortAdminIndex.setDescription('The port identifier.')
lacpInfoPortActAdPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActAdPortState.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortActAdPortState.setDescription('The state of Actor Administrator Port. This is a octet mask with the following bits: Activity, Synchronization, Defaulted, Timeout, Collecting, Expired, Aggregation and Distributing. If all of them are 0 then the state is showed as 0x0, else it is displayed a blank state which mean is not a NULL state')
lacpInfoPortActAdActiv = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActAdActiv.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortActAdActiv.setDescription('')
lacpInfoPortActAdSync = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActAdSync.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortActAdSync.setDescription('')
lacpInfoPortActAdDef = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActAdDef.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortActAdDef.setDescription('')
lacpInfoPortActAdTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActAdTimeout.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortActAdTimeout.setDescription('')
lacpInfoPortActAdColl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActAdColl.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortActAdColl.setDescription('')
lacpInfoPortActAdExp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActAdExp.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortActAdExp.setDescription('')
lacpInfoPortActAdAggr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActAdAggr.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortActAdAggr.setDescription('')
lacpInfoPortActAdDist = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActAdDist.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortActAdDist.setDescription('')
lacpInfoPortOperTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 3), )
if mibBuilder.loadTexts: lacpInfoPortOperTable.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortOperTable.setDescription('The table of LACP port oper information.')
lacpInfoPortOperTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 3, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "lacpInfoPortOperIndex"))
if mibBuilder.loadTexts: lacpInfoPortOperTableEntry.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortOperTableEntry.setDescription('Oper information about a LACP port.')
lacpInfoPortOperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 3, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortOperIndex.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortOperIndex.setDescription('The port identifier.')
lacpInfoPortPartOpSysPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortPartOpSysPrio.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortPartOpSysPrio.setDescription('')
lacpInfoPortPartOpSysId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortPartOpSysId.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortPartOpSysId.setDescription('')
lacpInfoPortPartOpKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortPartOpKey.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortPartOpKey.setDescription('')
lacpInfoPortPartOpPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortPartOpPortNum.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortPartOpPortNum.setDescription('')
lacpInfoPortPartOpPortPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortPartOpPortPrio.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortPartOpPortPrio.setDescription('')
lacpInfoPortActOpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActOpPortState.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortActOpPortState.setDescription('The state of Actor Operator Port. This is a octet mask with the following bits: Activity, Synchronization, Defaulted, Timeout, Collecting, Expired, Aggregation and Distributing. If all of them are 0 then the state is showed as 0x0, else it is displayed a blank state which mean is not a NULL state')
lacpInfoPortActOpActiv = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActOpActiv.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortActOpActiv.setDescription('')
lacpInfoPortActOpSync = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActOpSync.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortActOpSync.setDescription('')
lacpInfoPortActOpDef = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActOpDef.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortActOpDef.setDescription('')
lacpInfoPortActOpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActOpTimeout.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortActOpTimeout.setDescription('')
lacpInfoPortActOpColl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActOpColl.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortActOpColl.setDescription('')
lacpInfoPortActOpExp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActOpExp.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortActOpExp.setDescription('')
lacpInfoPortActOpAggr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActOpAggr.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortActOpAggr.setDescription('')
lacpInfoPortActOpDist = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortActOpDist.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortActOpDist.setDescription('')
lacpInfoPortPartOpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 3, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortPartOpPortState.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortPartOpPortState.setDescription('The state of Partner Operator Port. This is a octet mask with the following bits: Activity, Synchronization, Defaulted, Timeout, Collecting, Expired, Aggregation and Distributing. If all of them are 0 then the state is showed as 0x0, else it is displayed a blank state which mean is not a NULL state')
lacpInfoPortPartOpActiv = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortPartOpActiv.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortPartOpActiv.setDescription('')
lacpInfoPortPartOpSync = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortPartOpSync.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortPartOpSync.setDescription('')
lacpInfoPortPartOpDef = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortPartOpDef.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortPartOpDef.setDescription('')
lacpInfoPortPartOpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortPartOpTimeout.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortPartOpTimeout.setDescription('')
lacpInfoPortPartOpColl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortPartOpColl.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortPartOpColl.setDescription('')
lacpInfoPortPartOpExp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortPartOpExp.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortPartOpExp.setDescription('')
lacpInfoPortPartOpAggr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortPartOpAggr.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortPartOpAggr.setDescription('')
lacpInfoPortPartOpDist = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 4, 2, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lacpInfoPortPartOpDist.setStatus('current')
if mibBuilder.loadTexts: lacpInfoPortPartOpDist.setDescription('')
ufdCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdCurCfgState.setStatus('current')
if mibBuilder.loadTexts: ufdCurCfgState.setDescription('Enable or disable UFD state')
ufdNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdNewCfgState.setStatus('current')
if mibBuilder.loadTexts: ufdNewCfgState.setDescription('Enable or disable UFD state')
ufdCurCfgLtMPorts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 9, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdCurCfgLtMPorts.setStatus('current')
if mibBuilder.loadTexts: ufdCurCfgLtMPorts.setDescription('The LtM port list. The ports are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ port 8 || || || ||___ port 7 || |____ port 6 || . . . ||_________ port 1 |__________ reserved where x : 1 - The represented port belongs to LtM 0 - The represented port does not belong to LtM')
ufdNewCfgLtMPorts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 9, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdNewCfgLtMPorts.setStatus('current')
if mibBuilder.loadTexts: ufdNewCfgLtMPorts.setDescription('The LtM port list. The ports are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ port 8 || || || ||___ port 7 || |____ port 6 || . . . ||_________ port 1 |__________ reserved where x : 1 - The represented port belongs to LtM 0 - The represented port does not belong to LtM')
ufdCurCfgLtMTrunks = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 9, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdCurCfgLtMTrunks.setStatus('current')
if mibBuilder.loadTexts: ufdCurCfgLtMTrunks.setDescription('The LtM trunk list. The trunks are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ trunk 8 || || || ||___ trunk 7 || |____ trunk 6 || . . . ||_________ trunk 1 |__________ reserved where x : 1 - The represented trunk belongs to LtM 0 - The represented trunk does not belong to LtM')
ufdNewCfgLtMTrunks = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 9, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdNewCfgLtMTrunks.setStatus('current')
if mibBuilder.loadTexts: ufdNewCfgLtMTrunks.setDescription('The LtM trunk list. The trunks are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ trunk 8 || || || ||___ trunk 7 || |____ trunk 6 || . . . ||_________ trunk 1 |__________ reserved where x : 1 - The represented trunk belongs to LtM 0 - The represented trunk does not belong to LtM')
ufdCurCfgLtMAdminkey = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdCurCfgLtMAdminkey.setStatus('current')
if mibBuilder.loadTexts: ufdCurCfgLtMAdminkey.setDescription('The LtM admin key.')
ufdNewCfgLtMAdminkey = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdNewCfgLtMAdminkey.setStatus('current')
if mibBuilder.loadTexts: ufdNewCfgLtMAdminkey.setDescription('The LtM admin key.')
ufdCurCfgLtDPorts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 9, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdCurCfgLtDPorts.setStatus('current')
if mibBuilder.loadTexts: ufdCurCfgLtDPorts.setDescription('The LtD port list. The ports are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ port 8 || || || ||___ port 7 || |____ port 6 || . . . ||_________ port 1 |__________ reserved where x : 1 - The represented port belongs to LtD 0 - The represented port does not belong to LtD')
ufdNewCfgLtDPorts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 9, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdNewCfgLtDPorts.setStatus('current')
if mibBuilder.loadTexts: ufdNewCfgLtDPorts.setDescription('The LtD port list. The ports are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ port 8 || || || ||___ port 7 || |____ port 6 || . . . ||_________ port 1 |__________ reserved where x : 1 - The represented port belongs to LtD 0 - The represented port does not belong to LtD')
ufdCurCfgLtDTrunks = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 9, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdCurCfgLtDTrunks.setStatus('current')
if mibBuilder.loadTexts: ufdCurCfgLtDTrunks.setDescription('The LtD trunk list. The trunks are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ trunk 8 || || || ||___ trunk 7 || |____ trunk 6 || . . . ||_________ trunk 1 |__________ reserved where x : 1 - The represented trunk belongs to LtD 0 - The represented trunk does not belong to LtD')
ufdNewCfgLtDTrunks = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 9, 1, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdNewCfgLtDTrunks.setStatus('current')
if mibBuilder.loadTexts: ufdNewCfgLtDTrunks.setDescription('The LtD trunk list. The trunks are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ trunk 8 || || || ||___ trunk 7 || |____ trunk 6 || . . . ||_________ trunk 1 |__________ reserved where x : 1 - The represented trunk belongs to LtD 0 - The represented trunk does not belong to LtD')
ufdLtDAdminkeyMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 9, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdLtDAdminkeyMaxEnt.setStatus('current')
if mibBuilder.loadTexts: ufdLtDAdminkeyMaxEnt.setDescription('The maximum number of rows in the LtD admin key configuration table.')
ufdLtDAdminkeyCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 9, 1, 14), )
if mibBuilder.loadTexts: ufdLtDAdminkeyCurCfgTable.setStatus('current')
if mibBuilder.loadTexts: ufdLtDAdminkeyCurCfgTable.setDescription('The table of LtD admin key configuration.')
ufdLtDAdminkeyCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 9, 1, 14, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ufdLtDAdminkeyCurCfg"))
if mibBuilder.loadTexts: ufdLtDAdminkeyCurCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: ufdLtDAdminkeyCurCfgTableEntry.setDescription('A row in the LtD admin key table.')
ufdLtDAdminkeyCurCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 9, 1, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdLtDAdminkeyCurCfg.setStatus('current')
if mibBuilder.loadTexts: ufdLtDAdminkeyCurCfg.setDescription('The LtD admin key.')
ufdLtDAdminkeyNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 9, 1, 15), )
if mibBuilder.loadTexts: ufdLtDAdminkeyNewCfgTable.setStatus('current')
if mibBuilder.loadTexts: ufdLtDAdminkeyNewCfgTable.setDescription('The table of LtD admin key configuration.')
ufdLtDAdminkeyNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 9, 1, 15, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "ufdLtDAdminkeyNewCfg"))
if mibBuilder.loadTexts: ufdLtDAdminkeyNewCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: ufdLtDAdminkeyNewCfgTableEntry.setDescription('A row in the LtD admin key table.')
ufdLtDAdminkeyNewCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 9, 1, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdLtDAdminkeyNewCfg.setStatus('current')
if mibBuilder.loadTexts: ufdLtDAdminkeyNewCfg.setDescription('The LtD admin key.')
ufdNewCfgAddLtMPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 9, 1, 16), PortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdNewCfgAddLtMPort.setStatus('current')
if mibBuilder.loadTexts: ufdNewCfgAddLtMPort.setDescription("The port to be added to LtM. A '0' value is returned when read.")
ufdNewCfgRemoveLtMPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 9, 1, 17), PortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdNewCfgRemoveLtMPort.setStatus('current')
if mibBuilder.loadTexts: ufdNewCfgRemoveLtMPort.setDescription("The port to be removed from LtM. A '0' value is returned when read.")
ufdNewCfgAddLtMTrunk = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 9, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdNewCfgAddLtMTrunk.setStatus('current')
if mibBuilder.loadTexts: ufdNewCfgAddLtMTrunk.setDescription("The trunk to be added to LtM. A '0' value is returned when read.")
ufdNewCfgRemoveLtMTrunk = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 9, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdNewCfgRemoveLtMTrunk.setStatus('current')
if mibBuilder.loadTexts: ufdNewCfgRemoveLtMTrunk.setDescription("The trunk to be removed from LtM. A '0' value is returned when read.")
ufdNewCfgAddLtMAdminkey = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 9, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdNewCfgAddLtMAdminkey.setStatus('current')
if mibBuilder.loadTexts: ufdNewCfgAddLtMAdminkey.setDescription("The admin key to be added to LtM. A '0' value is returned when read.")
ufdNewCfgRemoveLtMAdminkey = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 9, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdNewCfgRemoveLtMAdminkey.setStatus('current')
if mibBuilder.loadTexts: ufdNewCfgRemoveLtMAdminkey.setDescription("The admin key to be removed from LtM. A '0' value is returned when read.")
ufdNewCfgAddLtDPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 9, 1, 22), PortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdNewCfgAddLtDPort.setStatus('current')
if mibBuilder.loadTexts: ufdNewCfgAddLtDPort.setDescription("The port to be added to LtD. A '0' value is returned when read.")
ufdNewCfgRemoveLtDPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 9, 1, 23), PortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdNewCfgRemoveLtDPort.setStatus('current')
if mibBuilder.loadTexts: ufdNewCfgRemoveLtDPort.setDescription("The port to be removed from LtM. A '0' value is returned when read.")
ufdNewCfgAddLtDTrunk = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 9, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdNewCfgAddLtDTrunk.setStatus('current')
if mibBuilder.loadTexts: ufdNewCfgAddLtDTrunk.setDescription("The trunk to be added to LtM. A '0' value is returned when read.")
ufdNewCfgRemoveLtDTrunk = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 9, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdNewCfgRemoveLtDTrunk.setStatus('current')
if mibBuilder.loadTexts: ufdNewCfgRemoveLtDTrunk.setDescription("The trunk to be removed from LtD. A '0' value is returned when read.")
ufdNewCfgAddLtDAdminkey = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 9, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdNewCfgAddLtDAdminkey.setStatus('current')
if mibBuilder.loadTexts: ufdNewCfgAddLtDAdminkey.setDescription("The admin key to be added to LtD. A '0' value is returned when read.")
ufdNewCfgRemoveLtDAdminkey = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 9, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdNewCfgRemoveLtDAdminkey.setStatus('current')
if mibBuilder.loadTexts: ufdNewCfgRemoveLtDAdminkey.setDescription("The admin key to be removed from LtD. A '0' value is returned when read.")
ufdCurCfgGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 9, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ufdCurCfgGlobalState.setStatus('current')
if mibBuilder.loadTexts: ufdCurCfgGlobalState.setDescription('Current global Failover settings.')
ufdNewCfgGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 9, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ufdNewCfgGlobalState.setStatus('current')
if mibBuilder.loadTexts: ufdNewCfgGlobalState.setDescription('New global Failover settings.')
dot1xCurStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurStatus.setStatus('current')
if mibBuilder.loadTexts: dot1xCurStatus.setDescription(' Dot1x status ')
dot1xNewStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xNewStatus.setStatus('current')
if mibBuilder.loadTexts: dot1xNewStatus.setDescription(' Dot1x status ')
dot1xCurCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 3), )
if mibBuilder.loadTexts: dot1xCurCfgPortTable.setStatus('current')
if mibBuilder.loadTexts: dot1xCurCfgPortTable.setDescription('The table of 8021x configuration in the Current_config.')
dot1xCurCfgPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 3, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "dot1xCurCfgPortIndex"))
if mibBuilder.loadTexts: dot1xCurCfgPortEntry.setStatus('current')
if mibBuilder.loadTexts: dot1xCurCfgPortEntry.setDescription('Information about 8021x Port Config')
dot1xCurCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 3, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgPortIndex.setStatus('current')
if mibBuilder.loadTexts: dot1xCurCfgPortIndex.setDescription('The 8021x Port number for which the table is related.')
dot1xCurCfgPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceUnauth", 0), ("auto", 1), ("forceAuth", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgPortMode.setStatus('current')
if mibBuilder.loadTexts: dot1xCurCfgPortMode.setDescription(' Port authenticaton mode forceUnauth(0), auto(1), forceAuth(2) ')
dot1xCurCfgPortQtPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgPortQtPeriod.setStatus('current')
if mibBuilder.loadTexts: dot1xCurCfgPortQtPeriod.setDescription('Quiet period (0-65535) ')
dot1xCurCfgPortTxPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgPortTxPeriod.setStatus('current')
if mibBuilder.loadTexts: dot1xCurCfgPortTxPeriod.setDescription(' Tx Period ')
dot1xCurCfgPortSupTmout = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgPortSupTmout.setStatus('current')
if mibBuilder.loadTexts: dot1xCurCfgPortSupTmout.setDescription(' Supplicant timeout (1..65535) ')
dot1xCurCfgPortSrvTmout = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgPortSrvTmout.setStatus('current')
if mibBuilder.loadTexts: dot1xCurCfgPortSrvTmout.setDescription(' Server timeout (1..65535) ')
dot1xCurCfgPortMaxRq = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgPortMaxRq.setStatus('current')
if mibBuilder.loadTexts: dot1xCurCfgPortMaxRq.setDescription(' Maximum numer of requests (1..10) ')
dot1xCurCfgPortRaPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 604800))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgPortRaPeriod.setStatus('current')
if mibBuilder.loadTexts: dot1xCurCfgPortRaPeriod.setDescription(' Reautentication period (0..604800) ')
dot1xCurCfgPortReAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgPortReAuth.setStatus('current')
if mibBuilder.loadTexts: dot1xCurCfgPortReAuth.setDescription(' ReAuthentication state off(0), on(1) ')
dot1xNewCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 4), )
if mibBuilder.loadTexts: dot1xNewCfgPortTable.setStatus('current')
if mibBuilder.loadTexts: dot1xNewCfgPortTable.setDescription('The table of 8021x configuration in the new_config.')
dot1xNewCfgPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 4, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "dot1xNewCfgPortIndex"))
if mibBuilder.loadTexts: dot1xNewCfgPortEntry.setStatus('current')
if mibBuilder.loadTexts: dot1xNewCfgPortEntry.setDescription('Information about 8021x Port Config')
dot1xNewCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 4, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xNewCfgPortIndex.setStatus('current')
if mibBuilder.loadTexts: dot1xNewCfgPortIndex.setDescription('The 8021x Port number for which the table is related.')
dot1xNewCfgPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceUnauth", 0), ("auto", 1), ("forceAuth", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgPortMode.setStatus('current')
if mibBuilder.loadTexts: dot1xNewCfgPortMode.setDescription(' Port authentication mode forceUnauth(0), auto(1), forceAuth(2) ')
dot1xNewCfgPortQtPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgPortQtPeriod.setStatus('current')
if mibBuilder.loadTexts: dot1xNewCfgPortQtPeriod.setDescription(' Quiet period (0..65535) ')
dot1xNewCfgPortTxPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgPortTxPeriod.setStatus('current')
if mibBuilder.loadTexts: dot1xNewCfgPortTxPeriod.setDescription(' Tx Period (1..65535) ')
dot1xNewCfgPortSupTmout = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgPortSupTmout.setStatus('current')
if mibBuilder.loadTexts: dot1xNewCfgPortSupTmout.setDescription(' Supplicant Timeout (1..65535) ')
dot1xNewCfgPortSrvTmout = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgPortSrvTmout.setStatus('current')
if mibBuilder.loadTexts: dot1xNewCfgPortSrvTmout.setDescription(' Server Timeout (1..65535) ')
dot1xNewCfgPortMaxRq = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgPortMaxRq.setStatus('current')
if mibBuilder.loadTexts: dot1xNewCfgPortMaxRq.setDescription(' Maximum number of requests (1..10) ')
dot1xNewCfgPortRaPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 604800))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgPortRaPeriod.setStatus('current')
if mibBuilder.loadTexts: dot1xNewCfgPortRaPeriod.setDescription(' Reauthentication period (1..604800) ')
dot1xNewCfgPortReAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgPortReAuth.setStatus('current')
if mibBuilder.loadTexts: dot1xNewCfgPortReAuth.setDescription(' Reauthentication state off(0), on(1) ')
dot1xNewCfgPortDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("apply", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgPortDefault.setStatus('current')
if mibBuilder.loadTexts: dot1xNewCfgPortDefault.setDescription(' Port default settings ')
dot1xNewCfgPortApplyGlobal = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("apply", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgPortApplyGlobal.setStatus('current')
if mibBuilder.loadTexts: dot1xNewCfgPortApplyGlobal.setDescription(' Apply Global config ')
dot1xCurCfgGlobalMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceUnauth", 0), ("auto", 1), ("forceAuth", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgGlobalMode.setStatus('current')
if mibBuilder.loadTexts: dot1xCurCfgGlobalMode.setDescription(' Autehtication Mode forceUnauth(0), auto(1), forceAuth(2) ')
dot1xCurCfgGlobalQtPeriod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgGlobalQtPeriod.setStatus('current')
if mibBuilder.loadTexts: dot1xCurCfgGlobalQtPeriod.setDescription(' Quiet period (0..65535) ')
dot1xCurCfgGlobalTxPeriod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgGlobalTxPeriod.setStatus('current')
if mibBuilder.loadTexts: dot1xCurCfgGlobalTxPeriod.setDescription(' Tx period (1..65535) ')
dot1xCurCfgGlobalSupTmout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgGlobalSupTmout.setStatus('current')
if mibBuilder.loadTexts: dot1xCurCfgGlobalSupTmout.setDescription(' Supplicant timeout (1..65535) ')
dot1xCurCfgGlobalSrvTmout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgGlobalSrvTmout.setStatus('current')
if mibBuilder.loadTexts: dot1xCurCfgGlobalSrvTmout.setDescription(' Server timeout (1..65535) ')
dot1xCurCfgGlobalMaxRq = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgGlobalMaxRq.setStatus('current')
if mibBuilder.loadTexts: dot1xCurCfgGlobalMaxRq.setDescription(' Maximum number of requests (1..10) ')
dot1xCurCfgGlobalRaPeriod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 604800))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgGlobalRaPeriod.setStatus('current')
if mibBuilder.loadTexts: dot1xCurCfgGlobalRaPeriod.setDescription(' Reauthentication period (0..604800) ')
dot1xCurCfgGlobalReAuth = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xCurCfgGlobalReAuth.setStatus('current')
if mibBuilder.loadTexts: dot1xCurCfgGlobalReAuth.setDescription(' ')
dot1xNewCfgGlobalMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceUnauth", 0), ("auto", 1), ("forceAuth", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgGlobalMode.setStatus('current')
if mibBuilder.loadTexts: dot1xNewCfgGlobalMode.setDescription(' Authentication Mode ')
dot1xNewCfgGlobalQtPeriod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgGlobalQtPeriod.setStatus('current')
if mibBuilder.loadTexts: dot1xNewCfgGlobalQtPeriod.setDescription(' Quiet Period (0..65535) ')
dot1xNewCfgGlobalTxPeriod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgGlobalTxPeriod.setStatus('current')
if mibBuilder.loadTexts: dot1xNewCfgGlobalTxPeriod.setDescription(' Tx Period (1..65535) ')
dot1xNewCfgGlobalSupTmout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgGlobalSupTmout.setStatus('current')
if mibBuilder.loadTexts: dot1xNewCfgGlobalSupTmout.setDescription(' Supplicand timeout (1..65535) ')
dot1xNewCfgGlobalSrvTmout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgGlobalSrvTmout.setStatus('current')
if mibBuilder.loadTexts: dot1xNewCfgGlobalSrvTmout.setDescription(' Server timeout (1..65535) ')
dot1xNewCfgGlobalMaxRq = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgGlobalMaxRq.setStatus('current')
if mibBuilder.loadTexts: dot1xNewCfgGlobalMaxRq.setDescription(' Maximum number of requests (1..10) ')
dot1xNewCfgGlobalRaPeriod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 604800))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgGlobalRaPeriod.setStatus('current')
if mibBuilder.loadTexts: dot1xNewCfgGlobalRaPeriod.setDescription(' Reauthentication period (1..604800) ')
dot1xNewCfgGlobalReAuth = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgGlobalReAuth.setStatus('current')
if mibBuilder.loadTexts: dot1xNewCfgGlobalReAuth.setDescription(' Reauthentication status ')
dot1xNewCfgGlobalDefault = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 11, 6, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("apply", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dot1xNewCfgGlobalDefault.setStatus('current')
if mibBuilder.loadTexts: dot1xNewCfgGlobalDefault.setDescription(' Restore default 802.1x configuration ')
dot1xInfoPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 5, 1), )
if mibBuilder.loadTexts: dot1xInfoPortTable.setStatus('current')
if mibBuilder.loadTexts: dot1xInfoPortTable.setDescription('The table of 8021x configuration in the Current_config.')
dot1xInfoPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 5, 1, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "dot1xInfoPortIndex"))
if mibBuilder.loadTexts: dot1xInfoPortEntry.setStatus('current')
if mibBuilder.loadTexts: dot1xInfoPortEntry.setDescription('Information about 8021x Port Config')
dot1xInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 5, 1, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xInfoPortIndex.setStatus('current')
if mibBuilder.loadTexts: dot1xInfoPortIndex.setDescription('The 8021x Port number for which the table is related.')
dot1xInfoPortAuthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceUnauth", 0), ("auto", 1), ("forceAuth", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xInfoPortAuthMode.setStatus('current')
if mibBuilder.loadTexts: dot1xInfoPortAuthMode.setDescription(' Authentication mode ')
dot1xInfoPortAuthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("authorized", 0), ("unauthorized", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xInfoPortAuthStatus.setStatus('current')
if mibBuilder.loadTexts: dot1xInfoPortAuthStatus.setDescription(' Authentication status ')
dot1xInfoPortCtrlDir = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("both", 0), ("in", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xInfoPortCtrlDir.setStatus('current')
if mibBuilder.loadTexts: dot1xInfoPortCtrlDir.setDescription(' Controlled Directions ')
dot1xInfoPortAuthPAEState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("initialize", 0), ("disconnected", 1), ("connecting", 2), ("authenticating", 3), ("authenticated", 4), ("aborting", 5), ("held", 6), ("forceauth", 7), ("forceunauth", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xInfoPortAuthPAEState.setStatus('current')
if mibBuilder.loadTexts: dot1xInfoPortAuthPAEState.setDescription(' Authenticator PAE State ')
dot1xInfoPortBackAuthState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("request", 0), ("response", 1), ("success", 2), ("fail", 3), ("timeout", 4), ("idle", 5), ("initialize", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xInfoPortBackAuthState.setStatus('current')
if mibBuilder.loadTexts: dot1xInfoPortBackAuthState.setDescription(' Backend authenticator PAE state ')
dot1xSystemCapability = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("authenticator", 0), ("supplicant", 1), ("authenticatorAndSupplicant", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xSystemCapability.setStatus('current')
if mibBuilder.loadTexts: dot1xSystemCapability.setDescription(' System capability ')
dot1xSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 5, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xSystemStatus.setStatus('current')
if mibBuilder.loadTexts: dot1xSystemStatus.setDescription(' System status ')
dot1xSystemProtoVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 5, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1xSystemProtoVersion.setStatus('current')
if mibBuilder.loadTexts: dot1xSystemProtoVersion.setDescription(' Protocol version ')
fdbCurCfgAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbCurCfgAgingTime.setStatus('current')
if mibBuilder.loadTexts: fdbCurCfgAgingTime.setDescription('Fdb current aging time')
fdbNewCfgAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 12, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fdbNewCfgAgingTime.setStatus('current')
if mibBuilder.loadTexts: fdbNewCfgAgingTime.setDescription('Fdb new aging time.')
fdbCurCfgStaticTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 12, 3), )
if mibBuilder.loadTexts: fdbCurCfgStaticTable.setStatus('current')
if mibBuilder.loadTexts: fdbCurCfgStaticTable.setDescription('The table of FDB static entries.')
fdbCurCfgStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 12, 3, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "fdbCurCfgEntryIndex"))
if mibBuilder.loadTexts: fdbCurCfgStaticEntry.setStatus('current')
if mibBuilder.loadTexts: fdbCurCfgStaticEntry.setDescription('A row in the fdb table.')
fdbCurCfgEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 12, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbCurCfgEntryIndex.setStatus('current')
if mibBuilder.loadTexts: fdbCurCfgEntryIndex.setDescription('The fdb entry index')
fdbCurCfgVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 12, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbCurCfgVlan.setStatus('current')
if mibBuilder.loadTexts: fdbCurCfgVlan.setDescription('Add vlan for fdb entry index')
fdbCurCfgPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 12, 3, 1, 3), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbCurCfgPort.setStatus('current')
if mibBuilder.loadTexts: fdbCurCfgPort.setDescription('The MAC address port number.')
fdbCurCfgMac = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 12, 3, 1, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbCurCfgMac.setStatus('current')
if mibBuilder.loadTexts: fdbCurCfgMac.setDescription('Add a fdb entry.')
fdbNewCfgStaticTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 12, 2), )
if mibBuilder.loadTexts: fdbNewCfgStaticTable.setStatus('current')
if mibBuilder.loadTexts: fdbNewCfgStaticTable.setDescription('The table of FDB static entries.')
fdbNewCfgStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 12, 2, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "fdbNewCfgEntryIndex"))
if mibBuilder.loadTexts: fdbNewCfgStaticEntry.setStatus('current')
if mibBuilder.loadTexts: fdbNewCfgStaticEntry.setDescription('A row in the fdb table.')
fdbNewCfgEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 12, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdbNewCfgEntryIndex.setStatus('current')
if mibBuilder.loadTexts: fdbNewCfgEntryIndex.setDescription('The fdb entry index')
fdbNewCfgAddVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 12, 2, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdbNewCfgAddVlan.setStatus('current')
if mibBuilder.loadTexts: fdbNewCfgAddVlan.setDescription('Add vlan for fdb entry index')
fdbNewCfgAddPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 12, 2, 1, 3), PortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdbNewCfgAddPort.setStatus('current')
if mibBuilder.loadTexts: fdbNewCfgAddPort.setDescription('The MAC address port number.')
fdbNewCfgAddMac = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 12, 2, 1, 4), PhysAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdbNewCfgAddMac.setStatus('current')
if mibBuilder.loadTexts: fdbNewCfgAddMac.setDescription('Add a fdb entry.')
fdbNewCfgDelStaticEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 1, 12, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdbNewCfgDelStaticEntry.setStatus('current')
if mibBuilder.loadTexts: fdbNewCfgDelStaticEntry.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
dot1pInfoPriorityCOSTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 6, 1), )
if mibBuilder.loadTexts: dot1pInfoPriorityCOSTable.setStatus('current')
if mibBuilder.loadTexts: dot1pInfoPriorityCOSTable.setDescription('The table of current priority to COS queue information.')
dot1pInfoPriorityCOSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 6, 1, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "dot1pInfoPriorityIndex"))
if mibBuilder.loadTexts: dot1pInfoPriorityCOSEntry.setStatus('current')
if mibBuilder.loadTexts: dot1pInfoPriorityCOSEntry.setDescription('Current information about 8021p priority to COS queue.')
dot1pInfoPriorityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1pInfoPriorityIndex.setStatus('current')
if mibBuilder.loadTexts: dot1pInfoPriorityIndex.setDescription('The 8021p priority for which the table is related.')
dot1pInfoPriorityCOSQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1pInfoPriorityCOSQueue.setStatus('current')
if mibBuilder.loadTexts: dot1pInfoPriorityCOSQueue.setDescription('The 8021p priority COSq.')
dot1pInfoPriorityCOSWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1pInfoPriorityCOSWeight.setStatus('current')
if mibBuilder.loadTexts: dot1pInfoPriorityCOSWeight.setDescription('The 8021p priority weight.')
dot1pInfoPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 6, 2), )
if mibBuilder.loadTexts: dot1pInfoPortTable.setStatus('current')
if mibBuilder.loadTexts: dot1pInfoPortTable.setDescription('The table of 8021p port priority configuration in the Current_config.')
dot1pInfoPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 6, 2, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "dot1pInfoPortIndex"))
if mibBuilder.loadTexts: dot1pInfoPortEntry.setStatus('current')
if mibBuilder.loadTexts: dot1pInfoPortEntry.setDescription('Information about 8021p Port Priority')
dot1pInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 6, 2, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1pInfoPortIndex.setStatus('current')
if mibBuilder.loadTexts: dot1pInfoPortIndex.setDescription('The 8021p Port number for which the table is related.')
dot1pInfoPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1pInfoPortPriority.setStatus('current')
if mibBuilder.loadTexts: dot1pInfoPortPriority.setDescription('The 8021p Port number for which the table is related.')
dot1pInfoPortCOSq = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1pInfoPortCOSq.setStatus('current')
if mibBuilder.loadTexts: dot1pInfoPortCOSq.setDescription('The 8021p port COSq.')
dot1pInfoPortWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 6, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1pInfoPortWeight.setStatus('current')
if mibBuilder.loadTexts: dot1pInfoPortWeight.setDescription('The 8021p port weight.')
generalInfoStpUplinkFast = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: generalInfoStpUplinkFast.setStatus('current')
if mibBuilder.loadTexts: generalInfoStpUplinkFast.setDescription('STP uplink fast mode')
generalInfoUplinkFastRate = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: generalInfoUplinkFastRate.setStatus('current')
if mibBuilder.loadTexts: generalInfoUplinkFastRate.setDescription('STP fast uplink rate.')
vlanInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 8, 1), )
if mibBuilder.loadTexts: vlanInfoTable.setStatus('current')
if mibBuilder.loadTexts: vlanInfoTable.setDescription('The table of VLAN information.')
vlanInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 8, 1, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "vlanInfoId"))
if mibBuilder.loadTexts: vlanInfoTableEntry.setStatus('current')
if mibBuilder.loadTexts: vlanInfoTableEntry.setDescription('Information about a particular VLAN.')
vlanInfoId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInfoId.setStatus('current')
if mibBuilder.loadTexts: vlanInfoId.setDescription('The VLAN identifier.')
vlanInfoName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 8, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInfoName.setStatus('current')
if mibBuilder.loadTexts: vlanInfoName.setDescription('The VLAN name.')
vlanInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInfoStatus.setStatus('current')
if mibBuilder.loadTexts: vlanInfoStatus.setDescription('Enable or disable, VLAN state information')
vlanInfoPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 8, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInfoPorts.setStatus('current')
if mibBuilder.loadTexts: vlanInfoPorts.setDescription('The port list information in the VLAN. The ports are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ port 8 || || || ||___ port 7 || |____ port 6 || . . . ||_________ port 1 |__________ reserved where x : 1 - The represented port belongs to the VLAN 0 - The represented port does not belong to the VLAN')
trunkGroupInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 9, 1), )
if mibBuilder.loadTexts: trunkGroupInfoTable.setStatus('current')
if mibBuilder.loadTexts: trunkGroupInfoTable.setDescription('The table of trunk group information.')
trunkGroupInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 9, 1, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "trunkGroupInfoIndex"))
if mibBuilder.loadTexts: trunkGroupInfoTableEntry.setStatus('current')
if mibBuilder.loadTexts: trunkGroupInfoTableEntry.setDescription('A row in trunk group information table.')
trunkGroupInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupInfoIndex.setStatus('current')
if mibBuilder.loadTexts: trunkGroupInfoIndex.setDescription('The identifier of the trunk group.')
trunkGroupInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupInfoState.setStatus('current')
if mibBuilder.loadTexts: trunkGroupInfoState.setDescription('Trunk group state.')
trunkGroupInfoPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 9, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupInfoPorts.setStatus('current')
if mibBuilder.loadTexts: trunkGroupInfoPorts.setDescription('The port list in the trunk group. The ports are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ port 8 || || || ||___ port 7 || |____ port 6 || . . . ||_________ port 1 |__________ reserved where x : 1 - The represented port belongs to the trunk group 0 - The represented port does not belong to the trunk group')
trunkGroupInfoProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("lacp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupInfoProtocol.setStatus('current')
if mibBuilder.loadTexts: trunkGroupInfoProtocol.setDescription('Trunk group protocol Static - static trunk group Lacp - dynamic trunk group')
trunkGroupInfoStgs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 9, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupInfoStgs.setStatus('current')
if mibBuilder.loadTexts: trunkGroupInfoStgs.setDescription('The stg list the trunk group is in. The stgs are presented in bitmap format.')
trunkGroupInfoPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 9, 2), )
if mibBuilder.loadTexts: trunkGroupInfoPortTable.setStatus('current')
if mibBuilder.loadTexts: trunkGroupInfoPortTable.setDescription('The table of Trunk Group Info.')
trunkGroupInfoPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 9, 2, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "trunkGroupInfoPortTrunkId"), (0, "BLADETYPE4-NETWORK-MIB", "trunkGroupInfoPortPortId"))
if mibBuilder.loadTexts: trunkGroupInfoPortTableEntry.setStatus('current')
if mibBuilder.loadTexts: trunkGroupInfoPortTableEntry.setDescription('A row in the Trunk Info table.')
trunkGroupInfoPortTrunkId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupInfoPortTrunkId.setStatus('current')
if mibBuilder.loadTexts: trunkGroupInfoPortTrunkId.setDescription('The Trunk identifier.')
trunkGroupInfoPortPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 9, 2, 1, 2), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupInfoPortPortId.setStatus('current')
if mibBuilder.loadTexts: trunkGroupInfoPortPortId.setDescription('The Port identifier.')
trunkGroupInfoPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 2, 3, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("down", 0), ("blocking", 1), ("forwarding", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkGroupInfoPortStatus.setStatus('current')
if mibBuilder.loadTexts: trunkGroupInfoPortStatus.setDescription('The Port Status.')
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 7))
swTrapDisplayString = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 7, 1000), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTrapDisplayString.setStatus('current')
if mibBuilder.loadTexts: swTrapDisplayString.setDescription('Temporary string object used to store information being sent in a Switch trap.')
swDefGwUp = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 7) + (0,2)).setObjects(("BLADETYPE4-NETWORK-MIB", "swTrapDisplayString"), ("BLADETYPE4-NETWORK-MIB", "ipCurCfgGwIndex"), ("BLADETYPE4-NETWORK-MIB", "ipCurCfgGwAddr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: swDefGwUp.setDescription('A swDefGwUp trap signifies that the default gateway is alive.')
swDefGwDown = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 7) + (0,3)).setObjects(("BLADETYPE4-NETWORK-MIB", "swTrapDisplayString"), ("BLADETYPE4-NETWORK-MIB", "ipCurCfgGwIndex"), ("BLADETYPE4-NETWORK-MIB", "ipCurCfgGwAddr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: swDefGwDown.setDescription('A swDefGwDown trap signifies that the default gateway is down.')
swDefGwInService = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 7) + (0,4)).setObjects(("BLADETYPE4-NETWORK-MIB", "swTrapDisplayString"), ("BLADETYPE4-NETWORK-MIB", "ipCurCfgGwIndex"), ("BLADETYPE4-NETWORK-MIB", "ipCurCfgGwAddr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: swDefGwInService.setDescription('A swDefGwEnabled trap signifies that the default gateway is up and in service.')
swDefGwNotInService = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 7) + (0,5)).setObjects(("BLADETYPE4-NETWORK-MIB", "swTrapDisplayString"), ("BLADETYPE4-NETWORK-MIB", "ipCurCfgGwIndex"), ("BLADETYPE4-NETWORK-MIB", "ipCurCfgGwAddr"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: swDefGwNotInService.setDescription('A swDefGwDisabled trap signifies that the default gateway is alive but not in service.')
swLoginFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 7) + (0,19)).setObjects(("BLADETYPE4-NETWORK-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: swLoginFailure.setDescription('A swLoginFailure trap signifies that someone failed to enter a valid username/password combination.')
swTempExceedThreshold = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 7) + (0,22)).setObjects(("BLADETYPE4-NETWORK-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: swTempExceedThreshold.setDescription('A swTempExceedThreshold trap signifies that the switch temperature has exceeded maximum safety limits.')
swValidLogin = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 7) + (0,25)).setObjects(("BLADETYPE4-NETWORK-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: swValidLogin.setDescription('A swValidLogin trap signifies that a user login has occured.')
swApplyComplete = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 7) + (0,27)).setObjects(("BLADETYPE4-NETWORK-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: swApplyComplete.setDescription('A swApplyComplete signifies that new configuration has been applied.')
swSaveComplete = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 7) + (0,28)).setObjects(("BLADETYPE4-NETWORK-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: swSaveComplete.setDescription('A swApplyComplete signifies that new configuration has been saved.')
swFwDownloadSucess = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 7) + (0,29)).setObjects(("BLADETYPE4-NETWORK-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: swFwDownloadSucess.setDescription('A swFwDownloadSuccess signifies that firmware has been downloaded to [image1|image2|boot image].')
swFwDownloadFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 7) + (0,30)).setObjects(("BLADETYPE4-NETWORK-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: swFwDownloadFailure.setDescription('A swFwDownloadFailure signifies that firmware downloaded failed to [image1|image2|boot image].')
swTempReturnThreshold = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 7) + (0,31)).setObjects(("BLADETYPE4-NETWORK-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: swTempReturnThreshold.setDescription('A swTempReturnThreshold trap signifies that the switch temperature has returned below maximum safety limits.')
swUfdfoLtMFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 7) + (0,34)).setObjects(("BLADETYPE4-NETWORK-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: swUfdfoLtMFailure.setDescription('A swUfdfoLtMFailure trap signifies that a LtM link is down.')
swUfdfoLtMUP = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 7) + (0,35)).setObjects(("BLADETYPE4-NETWORK-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: swUfdfoLtMUP.setDescription('A swUfdfoLtMUP trap signifies that a LtM link is up.')
swUfdfoGlobalEna = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 7) + (0,36)).setObjects(("BLADETYPE4-NETWORK-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: swUfdfoGlobalEna.setDescription('A swUfdfoGlobalEna trap signifies that Global UFD is enabled.')
swUfdfoGlobalDis = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 7) + (0,37)).setObjects(("BLADETYPE4-NETWORK-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: swUfdfoGlobalDis.setDescription('A swUfdfoGlobalDis trap signifies that Global UFD is disabled.')
swUfdfoLtDAutoEna = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 7) + (0,38)).setObjects(("BLADETYPE4-NETWORK-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: swUfdfoLtDAutoEna.setDescription('A swUfdfoLtDAutoEna trap signifies that a LtD link is Auto Enabled.')
swUfdfoLtDAutoDis = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 7) + (0,39)).setObjects(("BLADETYPE4-NETWORK-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: swUfdfoLtDAutoDis.setDescription('A swUfdfoLtDAutoDis trap signifies that a LtD link is Auto Disabled.')
swStgNewRoot = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 7) + (0,42)).setObjects(("BLADETYPE4-NETWORK-MIB", "swTrapDisplayString"), ("BLADETYPE4-NETWORK-MIB", "stgCurCfgIndex"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: swStgNewRoot.setDescription('A swStgNewRoot trap signifies that the bridge has become the new root of the STG.')
swCistNewRoot = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 7) + (0,43)).setObjects(("BLADETYPE4-NETWORK-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: swCistNewRoot.setDescription('A swCistNewRoot trap signifies that the bridge has become the new root of the CIST.')
swStgTopologyChanged = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 7) + (0,44)).setObjects(("BLADETYPE4-NETWORK-MIB", "swTrapDisplayString"), ("BLADETYPE4-NETWORK-MIB", "stgCurCfgIndex"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: swStgTopologyChanged.setDescription('A swStgTopologyChanged trap signifies that there was a STG topology change.')
swCistTopologyChanged = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 7) + (0,45)).setObjects(("BLADETYPE4-NETWORK-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: swCistTopologyChanged.setDescription('A swCistTopologyChanged trap signifies that there was a CIST topology change.')
sfpInserted = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 7) + (0,51)).setObjects(("BLADETYPE4-NETWORK-MIB", "swTrapDisplayString"), ("IF-MIB", "ifIndex"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: sfpInserted.setDescription('A sfpInserted trap signifies that a SFP is inserted.')
sfpRemoved = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 7) + (0,52)).setObjects(("BLADETYPE4-NETWORK-MIB", "swTrapDisplayString"), ("IF-MIB", "ifIndex"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: sfpRemoved.setDescription('A sfpRemoved trap signifies that a SFP is removed.')
swNtpNotServer = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 7) + (0,61)).setObjects(("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: swNtpNotServer.setDescription('A altSwNtpNotServer trap is sent when cannot contact primary or secondary Ntp server.')
swNtpUpdateClock = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 7) + (0,62)).setObjects(("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: swNtpUpdateClock.setDescription('A altSwNtpUpdateClock trap is sent when received Ntp update.')
swValidLogout = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 7) + (0,63)).setObjects(("BLADETYPE4-NETWORK-MIB", "swTrapDisplayString"), ("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("SNMPv2-MIB", "sysContact"))
if mibBuilder.loadTexts: swValidLogout.setDescription('A altSwValidLogout trap signifies that a user logout has occured.')
acl = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9))
acConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1))
acList = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1))
aclGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 3))
aclCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 4))
aclCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 1), )
if mibBuilder.loadTexts: aclCurCfgTable.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgTable.setDescription('The table of current ACL configuration.')
aclCurCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 1, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "aclCurCfgIndex"))
if mibBuilder.loadTexts: aclCurCfgEntry.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgEntry.setDescription('Current information about a particular ACL configuration entry.')
aclCurCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: aclCurCfgIndex.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgIndex.setDescription('The index associated with this ACL entry.')
aclCurCfgGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgGroup.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgGroup.setDescription('The index of the ACL group to which this ACL entry is a member of. A value of zero means the ACL is not a member of any group.')
aclCurCfgFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("permit", 1), ("deny", 2), ("setprio", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgFilterAction.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgFilterAction.setDescription('The action to be performed on a packet that matches the filter settings of this ACL entry.')
aclCurCfgFilterActionSetPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("prio0", 1), ("prio1", 2), ("prio2", 3), ("prio3", 4), ("prio4", 5), ("prio5", 6), ("prio6", 7), ("prio7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgFilterActionSetPrio.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgFilterActionSetPrio.setDescription('The value to be used when the action to be performed is setprio for this ACL entry.')
aclCurCfgEthFmt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("ethernet2", 1), ("snap", 2), ("llc", 3), ("ieee802dot3", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgEthFmt.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgEthFmt.setDescription('The packet ethernet format to be filtered.')
aclCurCfgTagFmt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("any", 2), ("untagged", 3), ("tagged", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgTagFmt.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgTagFmt.setDescription('The packet tag format to be filtered.')
aclCurCfgIPFmt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ipv4", 2), ("ipv6", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgIPFmt.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgIPFmt.setDescription('The packet IP format to be filtered.')
aclCurCfgSrcMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 1, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgSrcMACAddress.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgSrcMACAddress.setDescription('The source MAC address to be filtered.')
aclCurCfgSrcMACMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 1, 1, 10), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgSrcMACMask.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgSrcMACMask.setDescription('The address mask applied to aclCurCfgSrcMACAddress for filtering.')
aclCurCfgDstMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 1, 1, 11), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgDstMACAddress.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgDstMACAddress.setDescription('The destination MAC address to be filtered.')
aclCurCfgDstMACMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 1, 1, 12), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgDstMACMask.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgDstMACMask.setDescription('The address mask applied to aclCurCfgDstMACAddress for filtering.')
aclCurCfgEthernetTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("arp", 1), ("ipv4", 2), ("ipv6", 3), ("mpls", 4), ("rarp", 5), ("any", 6), ("other", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgEthernetTypeName.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgEthernetTypeName.setDescription('The Ethernet type to be filtered. If the value of this object is other(7), the value of aclNewCfgEthernetTypeValue indicates the ethernet type that will be filtered.')
aclCurCfgEthernetTypeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgEthernetTypeValue.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgEthernetTypeValue.setDescription('The Ethernet type value to be filtered. The value of this object is equivalent to the value of aclNewCfgEthernetTypeName except when the value of aclNewCfgEthernetTypeName is other(7), which can be any user-defined value for this object.')
aclCurCfgVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgVLanId.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgVLanId.setDescription('The virtual LAN identifier to be filtered.')
aclCurCfgVLanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgVLanMask.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgVLanMask.setDescription('The mask applied to aclCurCfgVLanId for filtering.')
aclCurCfg8021pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("priority0", 1), ("priority1", 2), ("priority2", 3), ("priority3", 4), ("priority4", 5), ("priority5", 6), ("priority6", 7), ("priority7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfg8021pPriority.setStatus('current')
if mibBuilder.loadTexts: aclCurCfg8021pPriority.setDescription('The 802.1p priority to be filtered.')
aclCurCfgTypeOfService = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 1, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgTypeOfService.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgTypeOfService.setDescription('The type of service to be filtered.')
aclCurCfgProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 1, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgProtocol.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgProtocol.setDescription('The protocol to be filtered.')
aclCurCfgSrcIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 1, 1, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgSrcIPAddress.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgSrcIPAddress.setDescription('The source IP address to be filtered.')
aclCurCfgSrcIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 1, 1, 21), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgSrcIPMask.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgSrcIPMask.setDescription('The address mask applied to aclCurCfgSrcIPAddress for filtering.')
aclCurCfgDstIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 1, 1, 22), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgDstIPAddress.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgDstIPAddress.setDescription('The destination IP address to be filtered.')
aclCurCfgDstIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 1, 1, 23), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgDstIPMask.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgDstIPMask.setDescription('The address mask applied to aclCurCfgDstIPAddress for filtering.')
aclCurCfgSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgSrcPort.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgSrcPort.setDescription('The source TCP/UDP port number to be filtered.')
aclCurCfgSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 1, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgSrcPortMask.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgSrcPortMask.setDescription('The mask applied to aclCurCfgSrcPort for filtering.')
aclCurCfgDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgDstPort.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgDstPort.setDescription('The destination TCP/UDP port number to be filtered.')
aclCurCfgDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 1, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgDstPortMask.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgDstPortMask.setDescription('The mask applied to aclCurCfgDstPort for filtering.')
aclCurCfgTCPFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 1, 1, 28), Bits().clone(namedValues=NamedValues(("reserved1", 0), ("reserved2", 1), ("tcpURG", 2), ("tcpACK", 3), ("tcpPSH", 4), ("tcpRST", 5), ("tcpSYN", 6), ("tcpFIN", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgTCPFlags.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgTCPFlags.setDescription('The TCP flags to be filtered. OCTET xxxxxxxx ||||..|| ||||..||_tcpFIN(7) ||||..|__tcpSYN(6) |||| ||||_____tcpACK(3) |||______tcpURG(2) ||_______reserved2(1) |________reserved1(0) where: - reserved1 - 0; - reserved2 - 0; - x - 0 or 1; ')
aclCurCfgTCPFlagsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 1, 1, 39), Bits().clone(namedValues=NamedValues(("reserved1", 0), ("reserved2", 1), ("tcpURG", 2), ("tcpACK", 3), ("tcpPSH", 4), ("tcpRST", 5), ("tcpSYN", 6), ("tcpFIN", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgTCPFlagsMask.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgTCPFlagsMask.setDescription('The TCP flags mask. OCTET xxxxxxxx ||||..|| ||||..||_tcpFIN(7) ||||..|__tcpSYN(6) |||| ||||_____tcpACK(3) |||______tcpURG(2) ||_______reserved2(1) |________reserved1(0) where: - reserved1 - 0; - reserved2 - 0; - x - 0 or 1; ')
aclCurCfgEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 1, 1, 29), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgEgressPorts.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgEgressPorts.setDescription('The port list in the ACL configured for egress filtering. The ports are presented in bitmap format, as follows: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || | || || |_ port 9 || || || ||___ port 8 || |____ port 7 || . . . ||_________ port 2 |__________ port 1 where x: 1 - the represented port is configured for filtering. 0 - the represented port is not configured for filtering.')
aclCurCfgStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgStatistics.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgStatistics.setDescription('Whether statistics collection for this ACL is enabled or not.')
aclCurCfgMeterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unconfigured", 0), ("outdrop", 1), ("outpass", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgMeterAction.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgMeterAction.setDescription('Meter Action for this ACL.')
aclCurCfgMeterEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgMeterEnable.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgMeterEnable.setDescription('Meter state for this ACL.')
aclCurCfgKbitsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 1, 1, 43), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(64, 10000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgKbitsSec.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgKbitsSec.setDescription('The commited rate of meter associated with this ACL entry.')
aclCurCfgKbitsBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(32, 64, 128, 256, 512, 1024, 2048, 4096))).clone(namedValues=NamedValues(("kbits32", 32), ("kbits64", 64), ("kbits128", 128), ("kbits256", 256), ("kbits512", 512), ("kbits1024", 1024), ("kbits2048", 2048), ("kbits4096", 4096)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgKbitsBurst.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgKbitsBurst.setDescription('The maxmium burst sizeof meter associated with this ACL entry.')
aclCurCfgUser = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 1, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgUser.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgUser.setDescription('Set user defined priority for this ACL.')
aclCurCfgInprofDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 1, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgInprofDscp.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgInprofDscp.setDescription('Set in profile pkts DSCP value.')
aclCurCfgTos = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 1, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgTos.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgTos.setDescription('To enable/disable setting pkts based on TOS bits.')
aclCurCfgOutprofDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 1, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgOutprofDscp.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgOutprofDscp.setDescription('Set out profile pkts DSCP value.')
aclCurCfgUserEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 1, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("userdefined", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgUserEnable.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgUserEnable.setDescription('Set update method for this ACL.')
aclCurCfgInprofDscpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgInprofDscpEnable.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgInprofDscpEnable.setDescription('Whether in profile update DSCP for this ACL is enabled or not.')
aclCurCfgOutprofDscpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgOutprofDscpEnable.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgOutprofDscpEnable.setDescription('Whether out profile update DSCP for this ACL is enabled or not.')
aclNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2), )
if mibBuilder.loadTexts: aclNewCfgTable.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgTable.setDescription('The table of new ACL configuration.')
aclNewCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "aclNewCfgIndex"))
if mibBuilder.loadTexts: aclNewCfgEntry.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgEntry.setDescription('New information about a particular ACL configuration.')
aclNewCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclNewCfgIndex.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgIndex.setDescription('The index associated with this ACL entry.')
aclNewCfgGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclNewCfgGroup.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgGroup.setDescription('The index of the ACL group to which this ACL entry is a member of. A value of zero means the ACL is not a member of any group.')
aclNewCfgFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("permit", 1), ("deny", 2), ("setprio", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgFilterAction.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgFilterAction.setDescription('The action to be performed on a packet that matches the filter settings of this ACL entry.')
aclNewCfgFilterActionSetPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("prio0", 1), ("prio1", 2), ("prio2", 3), ("prio3", 4), ("prio4", 5), ("prio5", 6), ("prio6", 7), ("prio7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgFilterActionSetPrio.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgFilterActionSetPrio.setDescription('The COS queue to be used when the action for this ACL entry is set to setprio.')
aclNewCfgEthFmt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("ethernet2", 1), ("snap", 2), ("llc", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgEthFmt.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgEthFmt.setDescription('The packet ethernet format to be filtered.')
aclNewCfgTagFmt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("any", 2), ("none", 3), ("tagged", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgTagFmt.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgTagFmt.setDescription('The packet tagging format to be filtered.')
aclNewCfgIPFmt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ipv4", 2), ("ipv6", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgIPFmt.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgIPFmt.setDescription('The packet IP format to be filtered.')
aclNewCfgSrcMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 9), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgSrcMACAddress.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgSrcMACAddress.setDescription('The source MAC address to be filtered. Whenever this object is set to a nonzero value, the aclNewCfgSrcMACMask object, if not yet set, will be automatically set to ff:ff:ff:ff:ff:ff.')
aclNewCfgSrcMACMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 10), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgSrcMACMask.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgSrcMACMask.setDescription('The address mask to be applied to aclNewCfgSrcMACAddress for filtering.')
aclNewCfgDstMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 11), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgDstMACAddress.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgDstMACAddress.setDescription('The destination MAC address to be filtered. Whenever this object is set to a nonzero value, the aclNewCfgDstMACMask object, if not yet set, will be automatically set to ff:ff:ff:ff:ff:ff.')
aclNewCfgDstMACMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 12), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgDstMACMask.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgDstMACMask.setDescription('The address mask to be applied to aclNewCfgDstMACAddress for filtering.')
aclNewCfgEthernetTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("arp", 1), ("ipv4", 2), ("ipv6", 3), ("mpls", 4), ("rarp", 5), ("any", 6), ("other", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgEthernetTypeName.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgEthernetTypeName.setDescription('The Ethernet type to be filtered. If the value of this object is other(7), the value of aclNewCfgEthernetTypeValue indicates the ethernet type that will be filtered. If this object is set to a value other than other(7), the value of the aclNewCfgEthernetTypeValue object is automatically set, as follows: aclNewCfgEthernetTypeName aclNewCfgEthernetTypeValue none(0) 0 arp(1) 2054 (0x0806) ipv4(2) 2048 (0x0800) ipv6(3) 34525 (0x86dd) mpls(4) 34887 (0x8847) rarp(5) 32821 (0x8035) any(6) 65535 (0xffff) ')
aclNewCfgEthernetTypeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgEthernetTypeValue.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgEthernetTypeValue.setDescription('The Ethernet type value to be filtered. The value of this object is equivalent to the value of aclNewCfgEthernetTypeName except when the value of aclNewCfgEthernetTypeName is other(7), which can be any user-defined value for this object.')
aclNewCfgVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgVLanId.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgVLanId.setDescription('The virtual LAN identifier to be filtered. Whenever this object is set to a nonzero value, the aclNewCfgVLanMask object, if not yet set, will be automatically set to 4095 (0xfff). When this object is set to 0, the Vlan ACL filter is disabled.')
aclNewCfgVLanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgVLanMask.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgVLanMask.setDescription('The mask to be applied to aclNewCfgVLanId for filtering.')
aclNewCfg8021pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("priority0", 1), ("priority1", 2), ("priority2", 3), ("priority3", 4), ("priority4", 5), ("priority5", 6), ("priority6", 7), ("priority7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfg8021pPriority.setStatus('current')
if mibBuilder.loadTexts: aclNewCfg8021pPriority.setDescription('The 802.1p priority to be filtered.')
aclNewCfgTypeOfService = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgTypeOfService.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgTypeOfService.setDescription('The type of service to be filtered.')
aclNewCfgProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgProtocol.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgProtocol.setDescription('The protocol to be filtered.')
aclNewCfgSrcIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgSrcIPAddress.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgSrcIPAddress.setDescription('The source IP address to be filtered. Whenever this object is set to a nonzero value, the aclNewCfgSrcIPMask object, if not yet set, will be automatically set to 255.255.255.255.')
aclNewCfgSrcIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 21), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgSrcIPMask.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgSrcIPMask.setDescription('The address mask to be applied to aclNewCfgSrcIPAddress for filtering.')
aclNewCfgDstIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 22), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgDstIPAddress.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgDstIPAddress.setDescription('The destination IP address to be filtered. Whenever this object is set to a nonzero value, the aclNewCfgDstIPMask object, if not yet set, will be automatically set to 255.255.255.255.')
aclNewCfgDstIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 23), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgDstIPMask.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgDstIPMask.setDescription('The address mask to be applied to aclNewCfgDstIPAddress for filtering.')
aclNewCfgSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgSrcPort.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgSrcPort.setDescription('The source TCP/UDP port number to be filtered. Whenever this object is set if the aclNewCfgSrcPortMask object is not set will be automatically set to 65535 (0xffff).')
aclNewCfgSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgSrcPortMask.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgSrcPortMask.setDescription('The mask to be applied to aclNewCfgSrcPort for filtering.')
aclNewCfgDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgDstPort.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgDstPort.setDescription('The destination TCP/UDP port number to be filtered. Whenever this object is set the aclNewCfgSrcPortMask object, if not yet set, will be automatically set to 65535 (0xffff).')
aclNewCfgDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgDstPortMask.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgDstPortMask.setDescription('The mask to be applied to aclNewCfgDstPort for filtering.')
aclNewCfgTCPFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 28), Bits().clone(namedValues=NamedValues(("reserved1", 0), ("reserved2", 1), ("tcpURG", 2), ("tcpACK", 3), ("tcpPSH", 4), ("tcpRST", 5), ("tcpSYN", 6), ("tcpFIN", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgTCPFlags.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgTCPFlags.setDescription('The TCP flags to be filtered. The TCP flags are presented in bitmap format, as follows: OCTET xxxxxxxx ||||..|| ||||..||_tcpFIN(7) ||||..|__tcpSYN(6) |||| ||||_____tcpACK(3) |||______tcpURG(2) ||_______reserved2(1) |________reserved1(0) where: - reserved1 - 0; - reserved2 - 0; - x - 0 or 1; ')
aclNewCfgTCPFlagsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 39), Bits().clone(namedValues=NamedValues(("reserved1", 0), ("reserved2", 1), ("tcpURG", 2), ("tcpACK", 3), ("tcpPSH", 4), ("tcpRST", 5), ("tcpSYN", 6), ("tcpFIN", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgTCPFlagsMask.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgTCPFlagsMask.setDescription('The TCP flags mask. The TCP flags are presented in bitmap format, as follows: OCTET xxxxxxxx ||||..|| ||||..||_tcpFIN(7) ||||..|__tcpSYN(6) |||| ||||_____tcpACK(3) |||______tcpURG(2) ||_______reserved2(1) |________reserved1(0) where: - reserved1 - 0; - reserved2 - 0; - x - 0 or 1; Default value is 0x3f.')
aclNewCfgEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 29), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclNewCfgEgressPorts.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgEgressPorts.setDescription('The port list in the ACL configured for egress filtering. The ports are presented in bitmap format, as follows: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || | || || |_ port 9 || || || ||___ port 8 || |____ port 7 || . . . ||_________ port 2 |__________ port 1 where x: 1 - the represented port is configured for filtering. 0 - the represented port is not configured for filtering.')
aclNewCfgStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgStatistics.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgStatistics.setDescription('Whether statistics collection for this ACL is enabled or not.')
aclNewCfgAddEgressPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 31), PortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgAddEgressPort.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgAddEgressPort.setDescription('The port to be added to the specified ACL for egress filtering. A value of zero is always returned when this object is read.')
aclNewCfgRemoveEgressPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 32), PortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgRemoveEgressPort.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgRemoveEgressPort.setDescription('The port to be removed from the specified ACL. A value of zero is always returned when this object is read.')
aclNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgDelete.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgDelete.setDescription('This is an action object to delete an ACL entry. A value of other(1) is always returned when this object is read.')
aclNewCfgMeterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unconfigured", 0), ("outdrop", 1), ("outpass", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgMeterAction.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgMeterAction.setDescription('Meter Action for this ACL.')
aclNewCfgMeterEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enabled", 0), ("disabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgMeterEnable.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgMeterEnable.setDescription('Meter state for this ACL.')
aclNewCfgKbitsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 43), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(64, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgKbitsSec.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgKbitsSec.setDescription('The commited rate of meter associated with this ACL entry.')
aclNewCfgKbitsBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(32, 64, 128, 256, 512, 1024, 2048, 4096))).clone(namedValues=NamedValues(("kbits32", 32), ("kbits64", 64), ("kbits128", 128), ("kbits256", 256), ("kbits512", 512), ("kbits1024", 1024), ("kbits2048", 2048), ("kbits4096", 4096)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgKbitsBurst.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgKbitsBurst.setDescription('The maximum burst size of the meter associated with this ACL entry.')
aclNewCfgUser = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgUser.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgUser.setDescription('Set user defined priority for this ACL.')
aclNewCfgInprofDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgInprofDscp.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgInprofDscp.setDescription('Set in profile pkts DSCP value.')
aclNewCfgTos = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgTos.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgTos.setDescription('To enable/disable setting pkts based on TOS bits.')
aclNewCfgOutprofDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgOutprofDscp.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgOutprofDscp.setDescription('Set out profile pkts DSCP value.')
aclNewCfgUserEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("userdefined", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgUserEnable.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgUserEnable.setDescription('Set update method for this ACL.')
aclNewCfgInprofDscpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgInprofDscpEnable.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgInprofDscpEnable.setDescription('Whether in profile update DSCP for this ACL is enabled or not. Only the value disable(0) can be set, causing the in profile update DSCP to be disabled for this ACL. The value enable(1) is automatically set when setting a value for aclNewCfgInprofDscp object.')
aclNewCfgOutprofDscpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgOutprofDscpEnable.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgOutprofDscpEnable.setDescription('Whether out profile update DSCP for this ACL is enabled or not. Only the value disable(0) can be set, causing the out profile update DSCP to be disabled for this ACL. The value enable(1) is automatically set when setting a value for aclNewCfgOutprofDscp object.')
aclNewCfgReset = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgReset.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgReset.setDescription('This is an action object to reset an ACL entry. A value of other(1) is always returned when this object is read.')
aclNewCfgEthernetReset = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgEthernetReset.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgEthernetReset.setDescription('This is an action object to reset an ACL Ethernet entry. A value of other(1) is always returned when this object is read.')
aclNewCfgIpv4Reset = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgIpv4Reset.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgIpv4Reset.setDescription('This is an action object to reset an ACL IPV4 entry. A value of other(1) is always returned when this object is read.')
aclNewCfgTcpudpReset = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgTcpudpReset.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgTcpudpReset.setDescription('This is an action object to reset an ACL Tcpudp entry. A value of other(1) is always returned when this object is read.')
aclNewCfgMeterReset = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgMeterReset.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgMeterReset.setDescription('This is an action object to reset an ACL Meter entry. A value of other(1) is always returned when this object is read.')
aclNewCfgRemarkReset = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgRemarkReset.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgRemarkReset.setDescription('This is an action object to reset an ACL Remark entry. A value of other(1) is always returned when this object is read.')
aclNewCfgRemarkInprofReset = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgRemarkInprofReset.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgRemarkInprofReset.setDescription('This is an action object to reset an ACL Remark Inprof entry. A value of other(1) is always returned when this object is read.')
aclNewCfgRemarkOutprofReset = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgRemarkOutprofReset.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgRemarkOutprofReset.setDescription('This is an action object to reset an ACL Remark Outprof entry. A value of other(1) is always returned when this object is read.')
aclNewCfgPktfmtReset = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 1, 2, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgPktfmtReset.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgPktfmtReset.setDescription('This is an action object to reset an ACL Pktfmt entry. A value of other(1) is always returned when this object is read.')
aclGroupCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 3, 1), )
if mibBuilder.loadTexts: aclGroupCurCfgTable.setStatus('current')
if mibBuilder.loadTexts: aclGroupCurCfgTable.setDescription('The table of current ACL Group configuration.')
aclGroupCurCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 3, 1, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "aclGroupCurCfgIndex"))
if mibBuilder.loadTexts: aclGroupCurCfgEntry.setStatus('current')
if mibBuilder.loadTexts: aclGroupCurCfgEntry.setDescription('Information about a particular ACL configuration.')
aclGroupCurCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 3, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclGroupCurCfgIndex.setStatus('current')
if mibBuilder.loadTexts: aclGroupCurCfgIndex.setDescription('The index associated with this ACL Group entry.')
aclGroupCurCfgMemberAcls = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 3, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclGroupCurCfgMemberAcls.setStatus('current')
if mibBuilder.loadTexts: aclGroupCurCfgMemberAcls.setDescription('The ACL members of this ACL group, presented in bitmap format, as follows: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || | || || |_ ACL 9 || || || ||___ ACL 8 || |____ ACL 7 || . . . ||_________ ACL 2 |__________ ACL 1 where x: 1 - the represented ACL is a member of the group. 0 - the represented ACL is not a member of the group.')
aclGroupNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 3, 2), )
if mibBuilder.loadTexts: aclGroupNewCfgTable.setStatus('current')
if mibBuilder.loadTexts: aclGroupNewCfgTable.setDescription('The table of new ACL Group configuration.')
aclGroupNewCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 3, 2, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "aclGroupNewCfgIndex"))
if mibBuilder.loadTexts: aclGroupNewCfgEntry.setStatus('current')
if mibBuilder.loadTexts: aclGroupNewCfgEntry.setDescription('New information about a particular ACL configuration.')
aclGroupNewCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 3, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclGroupNewCfgIndex.setStatus('current')
if mibBuilder.loadTexts: aclGroupNewCfgIndex.setDescription('The index associated with this ACL Group entry.')
aclGroupNewCfgMemberAcls = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 3, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclGroupNewCfgMemberAcls.setStatus('current')
if mibBuilder.loadTexts: aclGroupNewCfgMemberAcls.setDescription('The ACL members of this ACL group, presented in bitmap format, as follows: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || | || || |_ ACL 9 || || || ||___ ACL 8 || |____ ACL 7 || . . . ||_________ ACL 2 |__________ ACL 1 where x: 1 - the represented ACL is a member of the group. 0 - the represented ACL is not a member of the group.')
aclGroupNewCfgAddAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 3, 2, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclGroupNewCfgAddAcl.setStatus('current')
if mibBuilder.loadTexts: aclGroupNewCfgAddAcl.setDescription('The index of the ACL entry to be added into this ACL group. A successful set operation on this object will also set the bit corresponding to the ACL entry in the aclGroupNewCfgMemberAcls bitmap. A value of zero is always returned when this object is read.')
aclGroupNewCfgRemoveAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 3, 2, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclGroupNewCfgRemoveAcl.setStatus('current')
if mibBuilder.loadTexts: aclGroupNewCfgRemoveAcl.setDescription('The index of the ACL entry to be removed from this ACL group. A successful set operation on this object will unset the bit corresponding to the ACL entry in the aclGroupNewCfgMemberAcls bitmap. A value of zero is always returned when this object is read.')
aclGroupNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclGroupNewCfgDelete.setStatus('current')
if mibBuilder.loadTexts: aclGroupNewCfgDelete.setDescription('This is an action object to delete an ACL group. A value of other(1) is always returned when this object is read.')
aclCurCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 4, 1), )
if mibBuilder.loadTexts: aclCurCfgPortTable.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgPortTable.setDescription('The table of port acl groups configuration.')
aclCurCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 4, 1, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "aclCurCfgPortIndex"))
if mibBuilder.loadTexts: aclCurCfgPortTableEntry.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgPortTableEntry.setDescription('Information about a particular port acl configuration.')
aclCurCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 4, 1, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgPortIndex.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgPortIndex.setDescription('The identifier of a particular port. This is also index to the entLogicalTable of Entity MIB.')
aclCurCfgPortAclBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgPortAclBmap.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgPortAclBmap.setDescription('The acls applied to the port. The acls are presented in bitmap format. This string displays acl number from 1 to 896. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ acl 9 || || || ||___ acl 8 || |____ acl 7 || . . . ||_________ acl 2 |__________ acl 1 where x : 1 - The represented acl applied to the port. 0 - The represented acl not applied to the port.')
aclCurCfgPortAclGrpBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 4, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclCurCfgPortAclGrpBmap.setStatus('current')
if mibBuilder.loadTexts: aclCurCfgPortAclGrpBmap.setDescription('The acl groups applied to the port. The acls are presented in bitmap format. This string displays acl number from 1 to 896. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ aclgrp 9 || || || ||___ aclgrp 8 || |____ aclgrp 7 || . . . ||_________ aclgrp 2 |__________ aclgrp 1 where x : 1 - The represented acl applied to the port. 0 - The represented acl not applied to the port.')
aclNewCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 4, 2), )
if mibBuilder.loadTexts: aclNewCfgPortTable.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgPortTable.setDescription('The table of port acl configuration.')
aclNewCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 4, 2, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "aclNewCfgPortIndex"))
if mibBuilder.loadTexts: aclNewCfgPortTableEntry.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgPortTableEntry.setDescription('Information about a particular port acl groups configuration.')
aclNewCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 4, 2, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclNewCfgPortIndex.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgPortIndex.setDescription('The identifier of a particular port. This is also index to the entLogicalTable of Entity MIB.')
aclNewCfgPortAddAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 4, 2, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgPortAddAcl.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgPortAddAcl.setDescription("The acl to be added to the specified port. A '0' value is returned when read.")
aclNewCfgPortAddAclGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 4, 2, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgPortAddAclGrp.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgPortAddAclGrp.setDescription("The acl group to be added to the specified port. A '0' value is returned when read.")
aclNewCfgPortRemoveAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 4, 2, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgPortRemoveAcl.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgPortRemoveAcl.setDescription("The acl to be removed from the specified port. A '0' value is returned when read.")
aclNewCfgPortRemoveAclGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 4, 2, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclNewCfgPortRemoveAclGrp.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgPortRemoveAclGrp.setDescription("The acl group to be removed from the specified port. A '0' value is returned when read.")
aclNewCfgPortAclBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 4, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclNewCfgPortAclBmap.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgPortAclBmap.setDescription('The acls applied to the port. The acls are presented in bitmap format. This string displays acl number from 1 to 896. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ acl 9 || || || ||___ acl 8 || |____ acl 7 || . . . ||_________ acl 2 |__________ acl 1 where x : 1 - The represented acl applied to the port. 0 - The represented acl not applied to the port.')
aclNewCfgPortAclGrpBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 9, 1, 4, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclNewCfgPortAclGrpBmap.setStatus('current')
if mibBuilder.loadTexts: aclNewCfgPortAclGrpBmap.setDescription('The acl groups applied to the port. The acl groups are presented in bitmap format. This string displays group number from 1 to 4096. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ aclgrp 9 || || || ||___ aclgrp 8 || |____ aclgrp 7 || . . . ||_________ aclgrp 2 |__________ aclgrp 1 where x : 1 - The represented acl group applied to the port. 0 - The represented acl group not applied to the port.')
qos = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 8))
qosConfigs = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 8, 1))
qos8021p = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 8, 1, 1))
qosCurCfgPortPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 8, 1, 1, 1), )
if mibBuilder.loadTexts: qosCurCfgPortPriorityTable.setStatus('current')
if mibBuilder.loadTexts: qosCurCfgPortPriorityTable.setDescription('The table of QOS Port Priority configuration.')
qosCurCfgPortPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 8, 1, 1, 1, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "qosCurCfgPortIndex"))
if mibBuilder.loadTexts: qosCurCfgPortPriorityEntry.setStatus('current')
if mibBuilder.loadTexts: qosCurCfgPortPriorityEntry.setDescription('Information about a particular QOS Port Priority configuration.')
qosCurCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 8, 1, 1, 1, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCurCfgPortIndex.setStatus('current')
if mibBuilder.loadTexts: qosCurCfgPortIndex.setDescription('Switch Port Number')
qosCurCfgPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 8, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCurCfgPortPriority.setStatus('current')
if mibBuilder.loadTexts: qosCurCfgPortPriority.setDescription('Switch Port Priority Should be between 0 and 7')
qosNewCfgPortPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 8, 1, 1, 2), )
if mibBuilder.loadTexts: qosNewCfgPortPriorityTable.setStatus('current')
if mibBuilder.loadTexts: qosNewCfgPortPriorityTable.setDescription('The table of QOS Port Priority configuration.')
qosNewCfgPortPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 8, 1, 1, 2, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "qosNewCfgPortIndex"))
if mibBuilder.loadTexts: qosNewCfgPortPriorityEntry.setStatus('current')
if mibBuilder.loadTexts: qosNewCfgPortPriorityEntry.setDescription('Information about a particular QOS Port Priority configuration.')
qosNewCfgPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 8, 1, 1, 2, 1, 1), PortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosNewCfgPortIndex.setStatus('current')
if mibBuilder.loadTexts: qosNewCfgPortIndex.setDescription('Switch Port Number')
qosNewCfgPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 8, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosNewCfgPortPriority.setStatus('current')
if mibBuilder.loadTexts: qosNewCfgPortPriority.setDescription('Switch Port Priority Should be between 0 and 7')
qosCurCfgPriorityCoSTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 8, 1, 1, 3), )
if mibBuilder.loadTexts: qosCurCfgPriorityCoSTable.setStatus('current')
if mibBuilder.loadTexts: qosCurCfgPriorityCoSTable.setDescription('The table of Frame Priority and COSq configuration.')
qosCurCfgPriorityCoSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 8, 1, 1, 3, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "qosCurCfgPriorityIndex"))
if mibBuilder.loadTexts: qosCurCfgPriorityCoSEntry.setStatus('current')
if mibBuilder.loadTexts: qosCurCfgPriorityCoSEntry.setDescription('Information about a particular Frame Priority and COSq configuration.')
qosCurCfgPriorityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 8, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCurCfgPriorityIndex.setStatus('current')
if mibBuilder.loadTexts: qosCurCfgPriorityIndex.setDescription('Frame priority Number')
qosCurCfgPriorityCoSq = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 8, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCurCfgPriorityCoSq.setStatus('current')
if mibBuilder.loadTexts: qosCurCfgPriorityCoSq.setDescription('CoSq for a Frame Priority Should be between 0 and 7')
qosNewCfgPriorityCoSTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 8, 1, 1, 4), )
if mibBuilder.loadTexts: qosNewCfgPriorityCoSTable.setStatus('current')
if mibBuilder.loadTexts: qosNewCfgPriorityCoSTable.setDescription('The table of Frame Priority and COSq configuration.')
qosNewCfgPriorityCoSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 8, 1, 1, 4, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "qosNewCfgPriorityIndex"))
if mibBuilder.loadTexts: qosNewCfgPriorityCoSEntry.setStatus('current')
if mibBuilder.loadTexts: qosNewCfgPriorityCoSEntry.setDescription('Information about a particular Frame Priority and COSq configuration.')
qosNewCfgPriorityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 8, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosNewCfgPriorityIndex.setStatus('current')
if mibBuilder.loadTexts: qosNewCfgPriorityIndex.setDescription('Frame priority Number')
qosNewCfgPriorityCoSq = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 8, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosNewCfgPriorityCoSq.setStatus('current')
if mibBuilder.loadTexts: qosNewCfgPriorityCoSq.setDescription('CoSq for a Frame Priority Should be between 0 and 7')
qosCurCfgCosWeightTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 8, 1, 1, 5), )
if mibBuilder.loadTexts: qosCurCfgCosWeightTable.setStatus('current')
if mibBuilder.loadTexts: qosCurCfgCosWeightTable.setDescription('The table of CoSq and Weight configuration.')
qosCurCfgCosWeightEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 8, 1, 1, 5, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "qosCurCfgCosIndex"))
if mibBuilder.loadTexts: qosCurCfgCosWeightEntry.setStatus('current')
if mibBuilder.loadTexts: qosCurCfgCosWeightEntry.setDescription('Information about a particular CoSq and Weight configuration.')
qosCurCfgCosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 8, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCurCfgCosIndex.setStatus('current')
if mibBuilder.loadTexts: qosCurCfgCosIndex.setDescription('CoSq Number')
qosCurCfgCosWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 8, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosCurCfgCosWeight.setStatus('current')
if mibBuilder.loadTexts: qosCurCfgCosWeight.setDescription('Weight of CoSq')
qosNewCfgCosWeightTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 8, 1, 1, 6), )
if mibBuilder.loadTexts: qosNewCfgCosWeightTable.setStatus('current')
if mibBuilder.loadTexts: qosNewCfgCosWeightTable.setDescription('The table of CoSq and Weight configuration.')
qosNewCfgCosWeightEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 8, 1, 1, 6, 1), ).setIndexNames((0, "BLADETYPE4-NETWORK-MIB", "qosNewCfgCosIndex"))
if mibBuilder.loadTexts: qosNewCfgCosWeightEntry.setStatus('current')
if mibBuilder.loadTexts: qosNewCfgCosWeightEntry.setDescription('Information about a particular CoSq and Weight configuration.')
qosNewCfgCosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 8, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qosNewCfgCosIndex.setStatus('current')
if mibBuilder.loadTexts: qosNewCfgCosIndex.setDescription('CoSq Number')
qosNewCfgCosWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 8, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosNewCfgCosWeight.setStatus('current')
if mibBuilder.loadTexts: qosNewCfgCosWeight.setDescription('Weight of CoSq')
qosDefaultCfg = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 4, 2, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("defaultWeight", 2), ("defaultPriority", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosDefaultCfg.setStatus('current')
if mibBuilder.loadTexts: qosDefaultCfg.setDescription('Load default configuration.')
mibBuilder.exportSymbols("BLADETYPE4-NETWORK-MIB", gatewayInfoEntry=gatewayInfoEntry, ospfCurCfgAreaStatus=ospfCurCfgAreaStatus, mstCurCfgRegionVersion=mstCurCfgRegionVersion, ospfCurCfgAreaSpfInterval=ospfCurCfgAreaSpfInterval, backendAuthFails=backendAuthFails, ospfNewCfgVirtIntfIndex=ospfNewCfgVirtIntfIndex, cistInfoPortState=cistInfoPortState, ripStatInBadSourcePort=ripStatInBadSourcePort, ipNewCfgAlistMetric=ipNewCfgAlistMetric, igmpFltCurCfgPortTableEntry=igmpFltCurCfgPortTableEntry, stgCurCfgTable=stgCurCfgTable, ospfCurCfgIntfArea=ospfCurCfgIntfArea, agTransfer=agTransfer, stgCurCfgPriority=stgCurCfgPriority, aclCurCfgSrcIPMask=aclCurCfgSrcIPMask, vrrpCurCfgVirtRtrTckVlanPort=vrrpCurCfgVirtRtrTckVlanPort, swapTotalStats=swapTotalStats, mstCistCurCfgPortTableEntry=mstCistCurCfgPortTableEntry, ospfVirtIntfInfoDead=ospfVirtIntfInfoDead, igmpMrtrInfoEntry=igmpMrtrInfoEntry, ospfNewCfgVirtIntfTable=ospfNewCfgVirtIntfTable, vlanCurCfgVlanId=vlanCurCfgVlanId, stgNewCfgBrgForwardDelay=stgNewCfgBrgForwardDelay, tacNewCfgPrimaryServer=tacNewCfgPrimaryServer, ospfIntfTxlsAcks=ospfIntfTxlsAcks, ipNewCfgAlistRmapIndex=ipNewCfgAlistRmapIndex, agCurHttpAcces=agCurHttpAcces, ospfCurCfgVirtIntfAreaId=ospfCurCfgVirtIntfAreaId, vrrpInfoVirtRtrPriority=vrrpInfoVirtRtrPriority, ipInfoNwfMask=ipInfoNwfMask, vrrpOperVirtRtrGroupBackup=vrrpOperVirtRtrGroupBackup, agCurCfgSyslogTrapRmon=agCurCfgSyslogTrapRmon, aclCurCfgFilterActionSetPrio=aclCurCfgFilterActionSetPrio, aclNewCfgPortAclGrpBmap=aclNewCfgPortAclGrpBmap, vrrpNewCfgGenTckVirtRtrInc=vrrpNewCfgGenTckVirtRtrInc, ospfAreaRxTxStats=ospfAreaRxTxStats, lacpInfoAggrPartSysId=lacpInfoAggrPartSysId, vrrpNewCfgVirtRtrPriority=vrrpNewCfgVirtRtrPriority, tacCurCfgCmap=tacCurCfgCmap, ntpOperSendReq=ntpOperSendReq, stpInfoBrgHelloTime=stpInfoBrgHelloTime, ospfAreaNbrN2way=ospfAreaNbrN2way, ipStatsInUnknownProtos=ipStatsInUnknownProtos, pktStatsAllocs=pktStatsAllocs, ipNewCfgBootpState=ipNewCfgBootpState, lacpNewPortCfgTableId=lacpNewPortCfgTableId, gatewayInfoVlan=gatewayInfoVlan, icmpStatsInRedirects=icmpStatsInRedirects, igmpInfo=igmpInfo, agPortNewCfgBroadcastThresholdRate=agPortNewCfgBroadcastThresholdRate, tcpStatsRetransSegs=tcpStatsRetransSegs, lacpCurSystemTimeoutTime=lacpCurSystemTimeoutTime, ospfIfNbrIpAddr=ospfIfNbrIpAddr, ufdInfoLtMTrunks=ufdInfoLtMTrunks, ipOspfVirtIntfInfoMdkey=ipOspfVirtIntfInfoMdkey, icmpStatsOutErrors=icmpStatsOutErrors, vrrpCurCfgVirtRtrGrpTable=vrrpCurCfgVirtRtrGrpTable, dot1xSystemProtoVersion=dot1xSystemProtoVersion, ripCurCfgIntfSupply=ripCurCfgIntfSupply, agTacacsUserMapCurCfgUId=agTacacsUserMapCurCfgUId, agPortCurCfgPortMedia=agPortCurCfgPortMedia, aclGroup=aclGroup, tacCurCfgTimeout=tacCurCfgTimeout, stgCurCfgPortEdge=stgCurCfgPortEdge, dot1xNewCfgGlobalTxPeriod=dot1xNewCfgGlobalTxPeriod, igmpStaticMrtrNewCfgDelete=igmpStaticMrtrNewCfgDelete, layer2Info=layer2Info, ospfTotalAreas=ospfTotalAreas, lastEapolFrameSource=lastEapolFrameSource, mstCurCfgStpMode=mstCurCfgStpMode, aclCfg=aclCfg, dot1xCurCfgGlobalReAuth=dot1xCurCfgGlobalReAuth, allportsStatsLinkStateChange=allportsStatsLinkStateChange, igmpSnoopCurCfgQInterval=igmpSnoopCurCfgQInterval, agAccess=agAccess, ripCurCfgIntfKey=ripCurCfgIntfKey, ipNewCfgAlistAction=ipNewCfgAlistAction, ipNewCfgStaticArpIndx=ipNewCfgStaticArpIndx, lacpCurPortCfgTableEntry=lacpCurPortCfgTableEntry, routeClearStats=routeClearStats, trunkGroupNewCfgState=trunkGroupNewCfgState, radCurCfgRetries=radCurCfgRetries, ospfIntfDown=ospfIntfDown, ospfCurCfgVirtIntfRetra=ospfCurCfgVirtIntfRetra, ospfAreaErrOptionsMismatch=ospfAreaErrOptionsMismatch, dot1xInfoPortBackAuthState=dot1xInfoPortBackAuthState, dot1xInfoPortTable=dot1xInfoPortTable, stgNewCfgPortState=stgNewCfgPortState, ripCurCfgIntfVersion=ripCurCfgIntfVersion, allportsStatsOutErrors=allportsStatsOutErrors, ospfIntfTxPkts=ospfIntfTxPkts, ipOspfRangeInfoAddr=ipOspfRangeInfoAddr, ospfSumRangesInfoMask=ospfSumRangesInfoMask, ospfCumTxHello=ospfCumTxHello, dnsCurCfgPrimaryIpAddr=dnsCurCfgPrimaryIpAddr, portInfoPhyIfDescr=portInfoPhyIfDescr, agLog=agLog, stgStatsPortTableEntry=stgStatsPortTableEntry, ospfCumRxTxStats=ospfCumRxTxStats, ipOspfRangeInfoHideState=ipOspfRangeInfoHideState, portStatsPhyIfInNUcastPkts=portStatsPhyIfInNUcastPkts, ipNwfCfg=ipNwfCfg, agRevertApply=agRevertApply, mstCistCurCfgPortEdge=mstCistCurCfgPortEdge, ospfCurCfgVirtIntfDead=ospfCurCfgVirtIntfDead, ospfCurCfgAreaMetric=ospfCurCfgAreaMetric, swUfdfoGlobalEna=swUfdfoGlobalEna, agCurCfgTrapSrcIf=agCurCfgTrapSrcIf, lacpInfoPortPartOpSysId=lacpInfoPortPartOpSysId, lacpInfoPortAdminTableEntry=lacpInfoPortAdminTableEntry, generalInfoUplinkFastRate=generalInfoUplinkFastRate, dot1xNewCfgPortMaxRq=dot1xNewCfgPortMaxRq, portOperDot1xReset=portOperDot1xReset, pvstCompatibilityNewCfgState=pvstCompatibilityNewCfgState, dot1xCurCfgGlobalSupTmout=dot1xCurCfgGlobalSupTmout, portInfo=portInfo, portStatsTable=portStatsTable, portInfoMode=portInfoMode, mstCistNewCfgPortHelloTime=mstCistNewCfgPortHelloTime, ospfAreaNbrStart=ospfAreaNbrStart, lacpInfo=lacpInfo, vrrpInfoVirtRtrID=vrrpInfoVirtRtrID, rxIgmpInvalidPkts=rxIgmpInvalidPkts, agPortNewCfgIndx=agPortNewCfgIndx, ipOspfInfoDefaultRouteMetric=ipOspfInfoDefaultRouteMetric, ripNewCfgEospfOutRmapList=ripNewCfgEospfOutRmapList, dot1xNewCfgGlobalTable=dot1xNewCfgGlobalTable, agNewCfgSyslogTrapIp=agNewCfgSyslogTrapIp, sfpInfoRXSignal=sfpInfoRXSignal, ospfExtLsdbInfoAge=ospfExtLsdbInfoAge, ospfNewCfgState=ospfNewCfgState, ospfIntfNbrhello=ospfIntfNbrhello, aclCurCfgStatistics=aclCurCfgStatistics, fdb=fdb, stgCurCfgBrgForwardDelay=stgCurCfgBrgForwardDelay, tcpStatsRtoMax=tcpStatsRtoMax, ospfIfInfoWait=ospfIfInfoWait, lacpInfoPortActPortNum=lacpInfoPortActPortNum, ripCurCfgIntfState=ripCurCfgIntfState, igmpSnoopVlanIndex=igmpSnoopVlanIndex, ospfCumTxlsAcks=ospfCumTxlsAcks, vrrpNewCfgVirtRtrGrpState=vrrpNewCfgVirtRtrGrpState, swLoginFailure=swLoginFailure, authReauthsWhileAuthenticating=authReauthsWhileAuthenticating, rip2InfoIntfTable=rip2InfoIntfTable, agCurCfgSyslogTrapVlan=agCurCfgSyslogTrapVlan, ospfRoutesInfoIndex=ospfRoutesInfoIndex, agPortNewCfgRmon=agPortNewCfgRmon, icmpStatsOutTimestamps=icmpStatsOutTimestamps, aclStatsIndex=aclStatsIndex, ipNewCfgStaticRouteIndx=ipNewCfgStaticRouteIndx, igmpSnoopNewCfgMrto=igmpSnoopNewCfgMrto, dhcpInfoServer=dhcpInfoServer, clearStats=clearStats, agNewCfgSyslogTrapCli=agNewCfgSyslogTrapCli, ospfCurCfgRangeAddr=ospfCurCfgRangeAddr, ripNewCfgIntfKey=ripNewCfgIntfKey, ospfAreaErrAreaMismatch=ospfAreaErrAreaMismatch, igmpFltCurCfgMcastIp2=igmpFltCurCfgMcastIp2, ipNewCfgRouterID=ipNewCfgRouterID, ufdLtDAdminkeyCurCfg=ufdLtDAdminkeyCurCfg, trunkGroupNewCfgTableEntry=trunkGroupNewCfgTableEntry, stpInfoTopChanges=stpInfoTopChanges, ospfCurCfgMdkeyIndex=ospfCurCfgMdkeyIndex, ospfCumTxPkts=ospfCumTxPkts, tacNewCfgAuthenString=tacNewCfgAuthenString, ospfNewCfgVirtIntfEntry=ospfNewCfgVirtIntfEntry, igmpInfoVersion=igmpInfoVersion, agCurCfgSyslogTrapCfg=agCurCfgSyslogTrapCfg, dot1xCurCfgPortTable=dot1xCurCfgPortTable, agPortCurCfgBroadcastThreshold=agPortCurCfgBroadcastThreshold, ipOspfRedistributeStaticInfoOutRmapList=ipOspfRedistributeStaticInfoOutRmapList, ospfIntfNbrChangeStatsEntry=ospfIntfNbrChangeStatsEntry, ufdNewCfgRemoveLtMTrunk=ufdNewCfgRemoveLtMTrunk, PortNumber=PortNumber, ipNewCfgBootpAddr=ipNewCfgBootpAddr, ipNewCfgIntfMask=ipNewCfgIntfMask, dot1pInfoPriorityCOSTable=dot1pInfoPriorityCOSTable, aclNewCfgRemoveEgressPort=aclNewCfgRemoveEgressPort, stpInfoForwardDelay=stpInfoForwardDelay, ospfCurCfgVirtIntfNbr=ospfCurCfgVirtIntfNbr, routeStatEntries=routeStatEntries, aclNewCfgGroup=aclNewCfgGroup, stgCurCfgPortState=stgCurCfgPortState, agSyslogMsgTableMaxSize=agSyslogMsgTableMaxSize, ospfNewCfgFixedMetricType=ospfNewCfgFixedMetricType, ospfCurCfgMdkeyEntry=ospfCurCfgMdkeyEntry, ospfExtLsdbInfoIndex=ospfExtLsdbInfoIndex, lacpInfoPortRxState=lacpInfoPortRxState, agCurCfgSyslogHost=agCurCfgSyslogHost, cistRootMaxAge=cistRootMaxAge, dot1xCurCfgPortMaxRq=dot1xCurCfgPortMaxRq, agCurCfgSyslogTrap8021x=agCurCfgSyslogTrap8021x, sfpInfoVendor=sfpInfoVendor, aclCurCfgDstIPAddress=aclCurCfgDstIPAddress, agCurCfgOldDst=agCurCfgOldDst, agDiffTable=agDiffTable, ospfIntfNbrChangeStats=ospfIntfNbrChangeStats, ospfAreaIntfNbrChange=ospfAreaIntfNbrChange, vlanInfo=vlanInfo, ripCurCfgStaticOutRmapList=ripCurCfgStaticOutRmapList, vrrpInfoVirtRtrTable=vrrpInfoVirtRtrTable, stgCurCfgBrgHelloTime=stgCurCfgBrgHelloTime, icmpStatsInAddrMaskReps=icmpStatsInAddrMaskReps, stgCurCfgVlanBmap=stgCurCfgVlanBmap, mstCistCurCfgVlanBmap=mstCistCurCfgVlanBmap, ospfExtLsdbInfoType=ospfExtLsdbInfoType, ospfNewCfgFixedOutRmapList=ospfNewCfgFixedOutRmapList, aclNewCfgDstMACAddress=aclNewCfgDstMACAddress, fdbNewCfgStaticEntry=fdbNewCfgStaticEntry, dot1xNewCfgPortReAuth=dot1xNewCfgPortReAuth, allportsStatsOutQLen=allportsStatsOutQLen, agNewCfgLoginNotice=agNewCfgLoginNotice, ntpLastUpdateServer=ntpLastUpdateServer, aclNewCfgSrcPortMask=aclNewCfgSrcPortMask, stgStatsStpIndex=stgStatsStpIndex, fdbSrcTrunk=fdbSrcTrunk, mstCistCurCfgPortPathCost=mstCistCurCfgPortPathCost, vrrpInfoVirtRtrOwnership=vrrpInfoVirtRtrOwnership, vrrpCurCfgVirtRtrGrpTableEntry=vrrpCurCfgVirtRtrGrpTableEntry, ipNewCfgStaticArpEntry=ipNewCfgStaticArpEntry, ripNewCfgIntfSupply=ripNewCfgIntfSupply, agPortNewCfgDLFThresholdRate=agPortNewCfgDLFThresholdRate, mstCistNewCfgPortLinkType=mstCistNewCfgPortLinkType, icmpStatsOutRedirects=icmpStatsOutRedirects, backendOtherRequestsToSupplicant=backendOtherRequestsToSupplicant, authEntersAuthenticating=authEntersAuthenticating, ipNewCfgStaticArpIp=ipNewCfgStaticArpIp, agNewCfgSyslogFac=agNewCfgSyslogFac, igmpFltNewCfgIndx=igmpFltNewCfgIndx, cistInfoPortDesignatedPort=cistInfoPortDesignatedPort, ipCurCfgStaticArpPort=ipCurCfgStaticArpPort, stpInfoBrgForwardDelay=stpInfoBrgForwardDelay, portOperDot1xReauth=portOperDot1xReauth, ipCurCfgRmapMetric=ipCurCfgRmapMetric, ipInfoNwfState=ipInfoNwfState, agTransferLastConfigurationActionStatus=agTransferLastConfigurationActionStatus, vrrpInfoVirtRtrIndex=vrrpInfoVirtRtrIndex, agCurCfgLoginNotice=agCurCfgLoginNotice, allportsStatsInPkts=allportsStatsInPkts, lastEapolFrameVersion=lastEapolFrameVersion, agNewCfgHttpServerPort=agNewCfgHttpServerPort, mstCistCfg=mstCistCfg, ipOspfHostInfoTable=ipOspfHostInfoTable, ospfExtLsdbInfoSequence=ospfExtLsdbInfoSequence, ospfIntfRxTxStats=ospfIntfRxTxStats, dot1xNewCfgGlobalRaPeriod=dot1xNewCfgGlobalRaPeriod, ipInfoRmapLp=ipInfoRmapLp, ospfAreaTxlsReqs=ospfAreaTxlsReqs, lacpInfoPortActSysId=lacpInfoPortActSysId, vrrpNewCfgGenState=vrrpNewCfgGenState, agNewCfgNTPServer=agNewCfgNTPServer, ipOspfRangeInfoIndex=ipOspfRangeInfoIndex, rip2Stats=rip2Stats)
mibBuilder.exportSymbols("BLADETYPE4-NETWORK-MIB", ipStaticRouteCfg=ipStaticRouteCfg, agNewCfgSyslogTrapSystem=agNewCfgSyslogTrapSystem, ospfCurCfgAreaEntry=ospfCurCfgAreaEntry, icmpStatsInParmProbs=icmpStatsInParmProbs, dot1xNewCfgGlobalQtPeriod=dot1xNewCfgGlobalQtPeriod, ufdNewCfgLtMTrunks=ufdNewCfgLtMTrunks, dot1xPortStatsTableEntry=dot1xPortStatsTableEntry, mstNewCfgMaxHopCount=mstNewCfgMaxHopCount, vrrpNewCfgVirtRtrDelete=vrrpNewCfgVirtRtrDelete, stpInfoHelloTime=stpInfoHelloTime, ripCurCfgEospfMetric=ripCurCfgEospfMetric, arpInfoSrcPort=arpInfoSrcPort, agMgmtNetClear=agMgmtNetClear, ipOspfAreaInfoType=ipOspfAreaInfoType, ospfVersion=ospfVersion, ipCurCfgRmapIndex=ipCurCfgRmapIndex, icmpStatsOutTimestampReps=icmpStatsOutTimestampReps, lacpInfoPortAdminIndex=lacpInfoPortAdminIndex, ospfIntfNbrDown=ospfIntfNbrDown, portInfoVlanTag=portInfoVlanTag, ipCurCfgNwfAddr=ipCurCfgNwfAddr, igmpSnoopNewCfgVlanAdd=igmpSnoopNewCfgVlanAdd, mpCpuStatsUtil64Seconds=mpCpuStatsUtil64Seconds, sfpRemoved=sfpRemoved, lacpInfoPortPartOpTimeout=lacpInfoPortPartOpTimeout, igmpFltCurCfgTable=igmpFltCurCfgTable, cistInfoPortTableEntry=cistInfoPortTableEntry, dot1pInfoPortCOSq=dot1pInfoPortCOSq, fdbCurCfgMac=fdbCurCfgMac, sshNewCfgStatus=sshNewCfgStatus, ospfAreaErrorStatsEntry=ospfAreaErrorStatsEntry, radNewCfgPort=radNewCfgPort, ospfNewCfgDefaultRouteMetricType=ospfNewCfgDefaultRouteMetricType, ospfNewCfgAreaDelete=ospfNewCfgAreaDelete, ospfNewCfgStaticMetricType=ospfNewCfgStaticMetricType, agent=agent, pmNewCfgPmirrMirrPortIndex=pmNewCfgPmirrMirrPortIndex, dot1xCurCfgPortEntry=dot1xCurCfgPortEntry, ospfCurCfgHostCost=ospfCurCfgHostCost, dot1xNewCfgGlobalSupTmout=dot1xNewCfgGlobalSupTmout, tacCurCfgSecondaryServer=tacCurCfgSecondaryServer, cistInfoPortTable=cistInfoPortTable, ripStatInBadSizePkts=ripStatInBadSizePkts, ufdNewCfgAddLtMAdminkey=ufdNewCfgAddLtMAdminkey, dot1pInfoPriorityCOSEntry=dot1pInfoPriorityCOSEntry, agCurCfgSyslogTrapStg=agCurCfgSyslogTrapStg, ipNewCfgRmapIndex=ipNewCfgRmapIndex, ospfNewCfgHostIpAddr=ospfNewCfgHostIpAddr, agCurCfgSyslogTrapNtp=agCurCfgSyslogTrapNtp, ospfAreaNbrN1way=ospfAreaNbrN1way, ufdLtDAdminkeyCurCfgTableEntry=ufdLtDAdminkeyCurCfgTableEntry, agPortCurCfgGigEthAutoNeg=agPortCurCfgGigEthAutoNeg, ospfAreaRxlsAcks=ospfAreaRxlsAcks, ipNewCfgIntfAddr=ipNewCfgIntfAddr, agSyslogMsgIndex=agSyslogMsgIndex, ipCurCfgStaticRouteDestIp=ipCurCfgStaticRouteDestIp, ospfAreaNbrChangeStats=ospfAreaNbrChangeStats, vrrpCurCfgVirtRtrAddr=vrrpCurCfgVirtRtrAddr, agNewCfgSysDlight=agNewCfgSysDlight, ospfIntfNbrN2way=ospfIntfNbrN2way, lacpInfoAggrPartSysPrio=lacpInfoAggrPartSysPrio, hardware=hardware, aclNewCfgSrcIPAddress=aclNewCfgSrcIPAddress, trunkGroupInfoStgs=trunkGroupInfoStgs, icmpStatsOutMsgs=icmpStatsOutMsgs, trunkGroupCurCfgPorts=trunkGroupCurCfgPorts, agAccessUserCurCfgUId=agAccessUserCurCfgUId, agTacacsUserMapNewCfgUId=agTacacsUserMapNewCfgUId, trunkGroupInfoIndex=trunkGroupInfoIndex, agHavePanicDump=agHavePanicDump, lacpInfoPortActAdDef=lacpInfoPortActAdDef, ipCurCfgAlistState=ipCurCfgAlistState, radCurCfgAuthenSecondString=radCurCfgAuthenSecondString, agAccessUserNewCfgState=agAccessUserNewCfgState, igmpFltNewCfgEnaDis=igmpFltNewCfgEnaDis, dnsCurCfgDomainName=dnsCurCfgDomainName, swUfdfoGlobalDis=swUfdfoGlobalDis, ospfNewCfgRipRemoveOutRmap=ospfNewCfgRipRemoveOutRmap, ospfCumIntfWaitTimer=ospfCumIntfWaitTimer, mstCistNewCfgBridgeMaxAge=mstCistNewCfgBridgeMaxAge, ospfVirtIntfInfoTrans=ospfVirtIntfInfoTrans, stgCfg=stgCfg, ipCurCfgRmapEntry=ipCurCfgRmapEntry, ipStaticRouteClearAllByDestIp=ipStaticRouteClearAllByDestIp, portStatsPhyIfOutDiscards=portStatsPhyIfOutDiscards, aclCurCfgUserEnable=aclCurCfgUserEnable, igmpSnoopNewCfgVlanRem=igmpSnoopNewCfgVlanRem, ospfAreaBorderRouter=ospfAreaBorderRouter, ospfAreaInfoTotalNeighbours=ospfAreaInfoTotalNeighbours, ipStaticRouteClearAll=ipStaticRouteClearAll, vrrpCfg=vrrpCfg, lacpClearStats=lacpClearStats, ipCurCfgGwEntry=ipCurCfgGwEntry, ipNewCfgAlistState=ipNewCfgAlistState, agCurCfgHttpsServerAccess=agCurCfgHttpsServerAccess, ospfNewCfgRangeAreaIndex=ospfNewCfgRangeAreaIndex, aclNewCfgIpv4Reset=aclNewCfgIpv4Reset, dot1xCurCfgGlobalMaxRq=dot1xCurCfgGlobalMaxRq, agTacacsUserMapCurCfgTable=agTacacsUserMapCurCfgTable, arpInfoMacAddr=arpInfoMacAddr, ipOspfRangeInfoState=ipOspfRangeInfoState, tacNewCfgRetries=tacNewCfgRetries, radCurCfgAuthenString=radCurCfgAuthenString, arpClearStats=arpClearStats, pktStatsMediumsHiWatermark=pktStatsMediumsHiWatermark, igmpCfg=igmpCfg, stgStatsPortIndex=stgStatsPortIndex, tacCurCfgSecBd=tacCurCfgSecBd, stgNewCfgTableEntry=stgNewCfgTableEntry, agCurCfgHttpsServerPort=agCurCfgHttpsServerPort, aclCurCfgOutprofDscpEnable=aclCurCfgOutprofDscpEnable, ospfNewCfgHostAreaIndex=ospfNewCfgHostAreaIndex, ospfIntfCountForRouter=ospfIntfCountForRouter, lacpInfoAggrId=lacpInfoAggrId, agNewCfgOldDst=agNewCfgOldDst, lacpInfoPortActAdDist=lacpInfoPortActAdDist, ospfCurCfgIntfAuthKey=ospfCurCfgIntfAuthKey, trunkgroup=trunkgroup, allportsStatsTable=allportsStatsTable, ospfIntfErrNetmaskMismatch=ospfIntfErrNetmaskMismatch, ipNewCfgIntfEntry=ipNewCfgIntfEntry, trunkGroupNewCfgIndex=trunkGroupNewCfgIndex, ospfIntfTxHello=ospfIntfTxHello, pmCurCfgPmirrMoniPortIndex=pmCurCfgPmirrMoniPortIndex, pktStatsJumbosHiWatermark=pktStatsJumbosHiWatermark, ripNewCfgIntfEntry=ripNewCfgIntfEntry, ospfCurCfgHostState=ospfCurCfgHostState, agPortNewCfgPortName=agPortNewCfgPortName, vrrpCurCfgGenTckIpIntfInc=vrrpCurCfgGenTckIpIntfInc, ripInfoUpdatePeriod=ripInfoUpdatePeriod, ipInfoBootpRelayState=ipInfoBootpRelayState, tcpStatsActiveOpens=tcpStatsActiveOpens, qosDefaultCfg=qosDefaultCfg, portStatsPhyIfOutOctets=portStatsPhyIfOutOctets, pmCurCfgPmirrDirection=pmCurCfgPmirrDirection, ospfSumRangesInfoAction=ospfSumRangesInfoAction, icmpStatsInDestUnreachs=icmpStatsInDestUnreachs, ipNewCfgGwAddr=ipNewCfgGwAddr, eapolFramesTx=eapolFramesTx, ospfAreaErrNetmaskMismatch=ospfAreaErrNetmaskMismatch, aclNewCfgRemarkInprofReset=aclNewCfgRemarkInprofReset, cistInfoPortHelloTime=cistInfoPortHelloTime, igmpFltCurCfgState=igmpFltCurCfgState, ipInfoNwfIndex=ipInfoNwfIndex, geaportInfoUnit=geaportInfoUnit, agMgmtNetTableMaxSize=agMgmtNetTableMaxSize, icmpStatsOutParmProbs=icmpStatsOutParmProbs, ripInfoIntfAuth=ripInfoIntfAuth, vlanInfoStatus=vlanInfoStatus, ipStatsOutRequests=ipStatsOutRequests, allportsStatsOutOctets=allportsStatsOutOctets, ipInfoNwfEntry=ipInfoNwfEntry, ospfCumNbrStart=ospfCumNbrStart, acList=acList, l2ThashNewCfgSmacState=l2ThashNewCfgSmacState, portInfoFlowCtrl=portInfoFlowCtrl, agDiffTableSize=agDiffTableSize, ospfIfInfoArea=ospfIfInfoArea, vrrpNewCfgVirtRtrGrpTckIpIntf=vrrpNewCfgVirtRtrGrpTckIpIntf, vrrpNewCfgVirtRtrGrpDelete=vrrpNewCfgVirtRtrGrpDelete, swDefGwDown=swDefGwDown, ipInfoNwfTable=ipInfoNwfTable, vrrpNewCfgVirtRtrGrpIndx=vrrpNewCfgVirtRtrGrpIndx, ripInfoState=ripInfoState, aclCurCfgTypeOfService=aclCurCfgTypeOfService, ospfNewCfgAreaId=ospfNewCfgAreaId, ospfRoutesInfoMask=ospfRoutesInfoMask, intfInfoAddr=intfInfoAddr, ipNewCfgIntfBootpRelay=ipNewCfgIntfBootpRelay, ripCurCfgIntfSplitHorizon=ripCurCfgIntfSplitHorizon, lacpInfoPortPartOpExp=lacpInfoPortPartOpExp, ospfIntfTxlsReqs=ospfIntfTxlsReqs, agAccessUserNewCfgTableEntry=agAccessUserNewCfgTableEntry, radNewCfgBackdoor=radNewCfgBackdoor, lacpInfoPortCurWhileTimer=lacpInfoPortCurWhileTimer, agTransferImage=agTransferImage, ipCurCfgIntfTable=ipCurCfgIntfTable, ospfNewCfgIntfMdkey=ospfNewCfgIntfMdkey, igmpFltNewCfgPortFiltBmap=igmpFltNewCfgPortFiltBmap, aclCurCfgPortTableEntry=aclCurCfgPortTableEntry, igmpStaticMrtrCurCfgVlanId=igmpStaticMrtrCurCfgVlanId, lacpCurPortCfgTableId=lacpCurPortCfgTableId, aclNewCfgSrcPort=aclNewCfgSrcPort, aclCurCfgSrcMACMask=aclCurCfgSrcMACMask, authFailWhileAuthenticating=authFailWhileAuthenticating, agCurCfgSyslog2Host=agCurCfgSyslog2Host, igmpClearVlanStats=igmpClearVlanStats, aclCurCfgTCPFlagsMask=aclCurCfgTCPFlagsMask, ospfRoutesInfoTable=ospfRoutesInfoTable, tacNewCfgAuthenSecondString=tacNewCfgAuthenSecondString, ospfTmrsKckOffSummary=ospfTmrsKckOffSummary, igmpInfoIndex=igmpInfoIndex, agNewCfgSyslogTrap8021x=agNewCfgSyslogTrap8021x, ospfAreaNbrNegotiationDone=ospfAreaNbrNegotiationDone, agAccessUserCurCfgState=agAccessUserCurCfgState, ipCurCfgAlistEntry=ipCurCfgAlistEntry, aclCurCfgEthernetTypeValue=aclCurCfgEthernetTypeValue, ospfAreaInfoAreaBorderRouter=ospfAreaInfoAreaBorderRouter, ospfInterface=ospfInterface, agClearStats=agClearStats, vrrpNewCfgVirtRtrID=vrrpNewCfgVirtRtrID, ufdCurCfgLtDPorts=ufdCurCfgLtDPorts, mpCpuStats=mpCpuStats, ospfTimersKickOffStats=ospfTimersKickOffStats, sfpInfoApproved=sfpInfoApproved, memoryBufferStats=memoryBufferStats, agCurCfgSyslogTrapMgmt=agCurCfgSyslogTrapMgmt, stpInfo=stpInfo, agPortNewCfgBroadcastThreshold=agPortNewCfgBroadcastThreshold, ipCurCfgNwfState=ipCurCfgNwfState, igmpStaticMrtrCurCfgTableEntry=igmpStaticMrtrCurCfgTableEntry, aclGroupNewCfgEntry=aclGroupNewCfgEntry, ospfCurCfgVirtIntfHello=ospfCurCfgVirtIntfHello, ospfVirtIntfInfoHello=ospfVirtIntfInfoHello, ntpPrimaryServerRespRcvd=ntpPrimaryServerRespRcvd, ospfNewCfgIntfEntry=ospfNewCfgIntfEntry, stpInfoHoldTime=stpInfoHoldTime, ipRouteInfoType=ipRouteInfoType, agAccessUserNewCfgDelete=agAccessUserNewCfgDelete, ospfLsdbInfoAge=ospfLsdbInfoAge, ospfExtLsdbInfoAdvertisement=ospfExtLsdbInfoAdvertisement, ufdNewCfgAddLtDAdminkey=ufdNewCfgAddLtDAdminkey, igmpFltNewCfgPortTableEntry=igmpFltNewCfgPortTableEntry, fdbNewCfgStaticTable=fdbNewCfgStaticTable, ospfSumRangesInfoTable=ospfSumRangesInfoTable, aclNewCfgIPFmt=aclNewCfgIPFmt, stgNewCfgPortFastFwd=stgNewCfgPortFastFwd, agCurCfgTelnetAccess=agCurCfgTelnetAccess, lacpInfoPortGeneralTable=lacpInfoPortGeneralTable, agPortNewCfgDLFThreshold=agPortNewCfgDLFThreshold, igmpStaticMrtrNewCfgVersion=igmpStaticMrtrNewCfgVersion, stgNewCfgStgIndex=stgNewCfgStgIndex, ipCurCfgAlistIndex=ipCurCfgAlistIndex, ipRoutingInfo=ipRoutingInfo, sshNewCfgScpAdm=sshNewCfgScpAdm, aclNewCfgMeterEnable=aclNewCfgMeterEnable, ospfIntfInfoTable=ospfIntfInfoTable, ospfAreaIntfDown=ospfAreaIntfDown, eapolStartFramesRx=eapolStartFramesRx, agNewCfgSyslogTrapWeb=agNewCfgSyslogTrapWeb, ospfRoutesInfoEntry=ospfRoutesInfoEntry, lacpInfoPortSelected=lacpInfoPortSelected, ntpClearStats=ntpClearStats, geaportInfoTableEntry=geaportInfoTableEntry, aclStatsHits=aclStatsHits, aclCurCfgKbitsSec=aclCurCfgKbitsSec, icmpStatsInErrors=icmpStatsInErrors, portInfoIndx=portInfoIndx, ipNewCfgAlistTable=ipNewCfgAlistTable, portInfoPhyIfMtu=portInfoPhyIfMtu, fdbStats=fdbStats, mstNewCfgRegionName=mstNewCfgRegionName, eapLengthErrorFramesRx=eapLengthErrorFramesRx, ipInfoRmapMetric=ipInfoRmapMetric)
mibBuilder.exportSymbols("BLADETYPE4-NETWORK-MIB", portStatsPhyIfInOctets=portStatsPhyIfInOctets, dhcpInfoSubnetMask=dhcpInfoSubnetMask, ripInfoIntfIndex=ripInfoIntfIndex, sshCurCfgIntrval=sshCurCfgIntrval, ospfNewCfgAreaTable=ospfNewCfgAreaTable, ipNewCfgGwEntry=ipNewCfgGwEntry, ospfIfInfoHello=ospfIfInfoHello, mstCistNewCfgBridgeForwardDelay=mstCistNewCfgBridgeForwardDelay, vlanNewCfgDelete=vlanNewCfgDelete, dot1pInfoPriorityCOSWeight=dot1pInfoPriorityCOSWeight, qosConfigs=qosConfigs, agTacacsUserMapNewCfgTable=agTacacsUserMapNewCfgTable, stgCurCfgPortTableEntry=stgCurCfgPortTableEntry, vrrpStatBadPassword=vrrpStatBadPassword, lacpInfoPortActOpActiv=lacpInfoPortActOpActiv, vrrpCurCfgVirtRtrGrpID=vrrpCurCfgVirtRtrGrpID, ipNewCfgRmapDelete=ipNewCfgRmapDelete, ripCurCfgIntfPoisonReverse=ripCurCfgIntfPoisonReverse, ospfCurCfgStaticOutRmapList=ospfCurCfgStaticOutRmapList, ospfArea=ospfArea, lacpCurPortActorPortPriority=lacpCurPortActorPortPriority, igmpSnoopCurCfgRobust=igmpSnoopCurCfgRobust, ospfCumRxHello=ospfCumRxHello, ospfNewCfgIntfHello=ospfNewCfgIntfHello, ospfIfInfoTotalNeighbours=ospfIfInfoTotalNeighbours, agRtcTime=agRtcTime, aclNewCfgAddEgressPort=aclNewCfgAddEgressPort, ospfIfInfoTransitDelay=ospfIfInfoTransitDelay, portStatsPhyIfInBroadcastPkts=portStatsPhyIfInBroadcastPkts, agCurDaylightSavings=agCurDaylightSavings, agNewCfgMgmtNetMask=agNewCfgMgmtNetMask, ripStatInResponsePkts=ripStatInResponsePkts, txIgmpLeaves=txIgmpLeaves, vlanInfoId=vlanInfoId, lacpInfoPortPartOpDist=lacpInfoPortPartOpDist, ospfAreaRxlsUpdates=ospfAreaRxlsUpdates, agCfgDumpString=agCfgDumpString, cistRootPort=cistRootPort, ipInfoNwfAddr=ipInfoNwfAddr, agentInfo=agentInfo, ntpPrimaryServerReqSent=ntpPrimaryServerReqSent, vlanInfoTable=vlanInfoTable, mstNewCfgRegionVersion=mstNewCfgRegionVersion, tcpStatsPassiveOpens=tcpStatsPassiveOpens, qosCurCfgPriorityIndex=qosCurCfgPriorityIndex, ospfNewCfgRipMetric=ospfNewCfgRipMetric, dot1pInfoPriorityCOSQueue=dot1pInfoPriorityCOSQueue, ipNewCfgStaticRouteTable=ipNewCfgStaticRouteTable, ripInfoIntfMetric=ripInfoIntfMetric, ospfAreaIntfLoop=ospfAreaIntfLoop, ospfIntfIndex=ospfIntfIndex, ospfIfInfoPriority=ospfIfInfoPriority, ospfIntfNbrStart=ospfIntfNbrStart, ripNewCfgIntfMcastUpdate=ripNewCfgIntfMcastUpdate, ufdNewCfgLtDTrunks=ufdNewCfgLtDTrunks, agPortNewCfgMulticastThreshold=agPortNewCfgMulticastThreshold, lacpInfoPortActOperKey=lacpInfoPortActOperKey, aclNewCfgDstPortMask=aclNewCfgDstPortMask, stpInfoAgingTime=stpInfoAgingTime, igmpFltCurCfgPortState=igmpFltCurCfgPortState, tacNewCfgDirectedRequest=tacNewCfgDirectedRequest, vrrpVirtRtrTableMaxSize=vrrpVirtRtrTableMaxSize, vrrpStatBadVrid=vrrpStatBadVrid, agTacacsUserMapCurCfgTableEntry=agTacacsUserMapCurCfgTableEntry, ospfClearStats=ospfClearStats, agApplyTable=agApplyTable, ufdLtDAdminkeyMaxEnt=ufdLtDAdminkeyMaxEnt, stgStatsPortRcvCfgBpdus=stgStatsPortRcvCfgBpdus, arpCfg=arpCfg, aclStatsTable=aclStatsTable, ospfNewCfgMdkeyTable=ospfNewCfgMdkeyTable, ospfCurCfgIntfTable=ospfCurCfgIntfTable, qosNewCfgPortPriorityTable=qosNewCfgPortPriorityTable, vlanCurCfgTableEntry=vlanCurCfgTableEntry, agSavePending=agSavePending, ipInfoRmapState=ipInfoRmapState, igmpFltNewCfgTableEntry=igmpFltNewCfgTableEntry, dot1xCurCfgGlobalTxPeriod=dot1xCurCfgGlobalTxPeriod, ipOspfIntfInfoDead=ipOspfIntfInfoDead, ospfSumRangesInfoIndex=ospfSumRangesInfoIndex, layer2Oper=layer2Oper, ospfAreaIntfBackup=ospfAreaIntfBackup, ospfVirtIntfInfoTable=ospfVirtIntfInfoTable, ospfAreaTxHello=ospfAreaTxHello, gatewayInfoTable=gatewayInfoTable, ipInfoRmapPrec=ipInfoRmapPrec, ospfNewCfgStaticAddOutRmap=ospfNewCfgStaticAddOutRmap, stgInfoVlanBmap=stgInfoVlanBmap, ipFwdGeneralCfg=ipFwdGeneralCfg, memorySharedStats=memorySharedStats, portInfoPhyIfOperStatus=portInfoPhyIfOperStatus, stgNewCfgBrgMaxAge=stgNewCfgBrgMaxAge, agSyslogMsgTable=agSyslogMsgTable, stgCurCfgPortPathCost=stgCurCfgPortPathCost, stgStatsPortTable=stgStatsPortTable, mirrPortMirr=mirrPortMirr, ospfRedistributeFixed=ospfRedistributeFixed, ipBootpCfg=ipBootpCfg, ufdNewCfgGlobalState=ufdNewCfgGlobalState, ipCurCfgStaticArpIp=ipCurCfgStaticArpIp, sfpInfoIndx=sfpInfoIndx, dot1xNewCfgPortApplyGlobal=dot1xNewCfgPortApplyGlobal, ipNewCfgAlistEntry=ipNewCfgAlistEntry, mstCistNewCfgPortIndex=mstCistNewCfgPortIndex, fdbCurCfgAgingTime=fdbCurCfgAgingTime, dot1pInfoPortTable=dot1pInfoPortTable, dot1xCurCfgPortTxPeriod=dot1xCurCfgPortTxPeriod, ipCurCfgAlistNwf=ipCurCfgAlistNwf, pmCurCfgPortMonitorEntry=pmCurCfgPortMonitorEntry, ospfVirtIntfInfoRetra=ospfVirtIntfInfoRetra, lacpInfoPortPerTraTimer=lacpInfoPortPerTraTimer, l2ThashNewCfgSipState=l2ThashNewCfgSipState, ospfCurCfgMdkeyTable=ospfCurCfgMdkeyTable, ipOspfRedistributeFixedInfo=ipOspfRedistributeFixedInfo, ripCurCfgEospfOutRmapList=ripCurCfgEospfOutRmapList, agPortCurCfgGigEthFctl=agPortCurCfgGigEthFctl, l2ThashCurCfgDmacState=l2ThashCurCfgDmacState, lacpInfoPortPartOpPortPrio=lacpInfoPortPartOpPortPrio, ospfCumIntfChangeStats=ospfCumIntfChangeStats, vrrpOper=vrrpOper, stgCurCfgPortPriority=stgCurCfgPortPriority, ipFwdNewCfgDirectedBcast=ipFwdNewCfgDirectedBcast, lacpInfoPortActAdActiv=lacpInfoPortActAdActiv, ufdCurCfgLtDTrunks=ufdCurCfgLtDTrunks, cistGeneralInfo=cistGeneralInfo, rxIgmpLeaves=rxIgmpLeaves, ospfNumberOfInterfacesUp=ospfNumberOfInterfacesUp, igmpSnoopNewCfgVlanFastlvBmap=igmpSnoopNewCfgVlanFastlvBmap, ipCurCfgStaticArpEntry=ipCurCfgStaticArpEntry, agCurCfgMgmtNetSubnet=agCurCfgMgmtNetSubnet, vrrpNewCfgVirtRtrGrpTable=vrrpNewCfgVirtRtrGrpTable, intfInfoBcastAddr=intfInfoBcastAddr, qosNewCfgPriorityIndex=qosNewCfgPriorityIndex, vrrpOperVirtRtrBackup=vrrpOperVirtRtrBackup, aclCurCfgEgressPorts=aclCurCfgEgressPorts, icmpStats=icmpStats, cistInfoPortIndex=cistInfoPortIndex, dot1xNewCfgGlobalMode=dot1xNewCfgGlobalMode, agApplyIndex=agApplyIndex, ospfCurCfgAreaTable=ospfCurCfgAreaTable, ipCurCfgAlistRmapIndex=ipCurCfgAlistRmapIndex, vlanMaxEnt=vlanMaxEnt, agPortNewCfgPortMedia=agPortNewCfgPortMedia, ipCurCfgStaticRouteEntry=ipCurCfgStaticRouteEntry, portStatsPhyIfInFctlPkts=portStatsPhyIfInFctlPkts, agCurCfgHttpServerPort=agCurCfgHttpServerPort, ospfAreaErrorStats=ospfAreaErrorStats, vlan=vlan, qosCurCfgPortPriorityTable=qosCurCfgPortPriorityTable, mstCistBridgeCfg=mstCistBridgeCfg, dot1pInfoPortWeight=dot1pInfoPortWeight, aclNewCfg8021pPriority=aclNewCfg8021pPriority, ntpLastUpdateTime=ntpLastUpdateTime, ipNewCfgStaticRouteInterface=ipNewCfgStaticRouteInterface, vrrpNewCfgVirtRtrTableEntry=vrrpNewCfgVirtRtrTableEntry, stgNewCfgPortPathCost=stgNewCfgPortPathCost, lacpInfoPortAdminEna=lacpInfoPortAdminEna, dot1xCurCfgPortIndex=dot1xCurCfgPortIndex, radCurCfgBackdoor=radCurCfgBackdoor, ospfNewCfgVirtIntfAuthKey=ospfNewCfgVirtIntfAuthKey, icmpStatsInTimeExcds=icmpStatsInTimeExcds, vlanInfoPorts=vlanInfoPorts, aclNewCfgPortAclBmap=aclNewCfgPortAclBmap, l2GeneralCfg=l2GeneralCfg, lacpInfoAttAggrId=lacpInfoAttAggrId, ospfCurCfgStaticMetric=ospfCurCfgStaticMetric, vrrpNewCfgVirtRtrGrpTckVlanPort=vrrpNewCfgVirtRtrGrpTckVlanPort, dot1xNewCfgPortQtPeriod=dot1xNewCfgPortQtPeriod, ospfCurCfgVirtIntfMdkey=ospfCurCfgVirtIntfMdkey, allportsStatsSpeed=allportsStatsSpeed, cistMaxHopCount=cistMaxHopCount, agNewCfgSyslogTrapSsh=agNewCfgSyslogTrapSsh, trunkGroupCurCfgIndex=trunkGroupCurCfgIndex, ospfIfInfoBackupDesignatedRouterID=ospfIfInfoBackupDesignatedRouterID, agCurCfgMgmtNetIndex=agCurCfgMgmtNetIndex, allportsStatsipInDiscards=allportsStatsipInDiscards, agNTP=agNTP, ospfCumNbrExchangeDone=ospfCumNbrExchangeDone, cistRoot=cistRoot, aclNewCfgDstIPMask=aclNewCfgDstIPMask, ipInfoRmapWeight=ipInfoRmapWeight, aclNewCfgTos=aclNewCfgTos, pktStatsSmallsHiWatermark=pktStatsSmallsHiWatermark, ipNewCfgGwRetry=ipNewCfgGwRetry, aclCurCfgTagFmt=aclCurCfgTagFmt, ospfCurCfgIntfRetra=ospfCurCfgIntfRetra, l2ThashCurCfgSmacState=l2ThashCurCfgSmacState, udpClearStats=udpClearStats, maxL3TableSize=maxL3TableSize, qosCurCfgPortIndex=qosCurCfgPortIndex, pmNewCfgPmirrDirection=pmNewCfgPmirrDirection, igmpFltCurCfgAction=igmpFltCurCfgAction, swCistNewRoot=swCistNewRoot, agApplyTableEntry=agApplyTableEntry, ospfTmrsKckOffHello=ospfTmrsKckOffHello, ripRedistributeOspf=ripRedistributeOspf, aclNewCfgTable=aclNewCfgTable, ospfIfNbrPriority=ospfIfNbrPriority, ufdInfoLtDAdminkeyTable=ufdInfoLtDAdminkeyTable, ospfIntfNbrN1way=ospfIntfNbrN1way, lacpInfoPortPartOpSync=lacpInfoPortPartOpSync, aclNewCfgSrcMACMask=aclNewCfgSrcMACMask, aclCurCfgPortAclBmap=aclCurCfgPortAclBmap, vrrpNewCfgVirtRtrIfIndex=vrrpNewCfgVirtRtrIfIndex, ospfIntfChangeStatsEntry=ospfIntfChangeStatsEntry, ripInfoIntfAddress=ripInfoIntfAddress, aclGroupNewCfgTable=aclGroupNewCfgTable, vlanNewCfgRemovePort=vlanNewCfgRemovePort, dot1xCurCfgPortSupTmout=dot1xCurCfgPortSupTmout, lacpInfoPortActAdTimeout=lacpInfoPortActAdTimeout, eapolReqFramesTx=eapolReqFramesTx, agAccessUserNewCfgUId=agAccessUserNewCfgUId, ipCurCfgAlistAction=ipCurCfgAlistAction, ufdNewCfgRemoveLtMAdminkey=ufdNewCfgRemoveLtMAdminkey, trunkGroupInfoTable=trunkGroupInfoTable, ipCurCfgGwArp=ipCurCfgGwArp, ospfNewCfgIntfTrans=ospfNewCfgIntfTrans, ipInterfaceCfg=ipInterfaceCfg, ipOspfAreaInfoMetric=ipOspfAreaInfoMetric, aclNewCfgFilterActionSetPrio=aclNewCfgFilterActionSetPrio, agCurCfgBootp=agCurCfgBootp, ripNewCfgIntfVersion=ripNewCfgIntfVersion, agAccessUserCurCfgTable=agAccessUserCurCfgTable, dot1xInfoPortEntry=dot1xInfoPortEntry, ripCurCfgStaticMetric=ripCurCfgStaticMetric, allportsStatsipInReceives=allportsStatsipInReceives, ospfIntfRxTxIndex=ospfIntfRxTxIndex, agNewHttpAcces=agNewHttpAcces, ripCurCfgIntfListen=ripCurCfgIntfListen, stpInfoDesignatedRoot=stpInfoDesignatedRoot, ospfLsdbInfoIndex=ospfLsdbInfoIndex, ospfVirtIntfInfoNbrState=ospfVirtIntfInfoNbrState, ipInfoFwdDirectedBcast=ipInfoFwdDirectedBcast, swStgNewRoot=swStgNewRoot, lacpInfoPortLacpEna=lacpInfoPortLacpEna, aclNewCfgMeterReset=aclNewCfgMeterReset, ospfHostTableMaxSize=ospfHostTableMaxSize, agApplyTableSize=agApplyTableSize, ipOspfRedistributeInfo=ipOspfRedistributeInfo, dnsNewCfgDomainName=dnsNewCfgDomainName, ipNewCfgNwfMask=ipNewCfgNwfMask, ipOspfVirtIntfInfoTable=ipOspfVirtIntfInfoTable, agentStats=agentStats, allportsStatsInOctets=allportsStatsInOctets, ospfNewCfgRangeState=ospfNewCfgRangeState, agNewCfgTelnetServerPort=agNewCfgTelnetServerPort, ospfRedistributeStatic=ospfRedistributeStatic, ipOspfRedistributeStaticInfoMetric=ipOspfRedistributeStaticInfoMetric, ipStatsDefaultTTL=ipStatsDefaultTTL, ripNewCfgFixedRemoveOutRmap=ripNewCfgFixedRemoveOutRmap, backendNonNakResponsesFromSupplicant=backendNonNakResponsesFromSupplicant, gatewayInfoStatus=gatewayInfoStatus, ufdNewCfgAddLtMTrunk=ufdNewCfgAddLtMTrunk, aclNewCfgIndex=aclNewCfgIndex)
mibBuilder.exportSymbols("BLADETYPE4-NETWORK-MIB", ipInfoRouterID=ipInfoRouterID, layer2Configs=layer2Configs, vlanCurCfgState=vlanCurCfgState, ospfIfInfoAdminStatus=ospfIfInfoAdminStatus, radCurCfgPort=radCurCfgPort, ospfAreaIntfUnloop=ospfAreaIntfUnloop, radNewCfgSecondaryServer=radNewCfgSecondaryServer, pvstCompatibilityCurCfgState=pvstCompatibilityCurCfgState, dot1xSystemCapability=dot1xSystemCapability, ospfCurCfgIntfStatus=ospfCurCfgIntfStatus, ipRouteInfoTable=ipRouteInfoTable, ospfAreaNbrhello=ospfAreaNbrhello, intfInfoEntry=intfInfoEntry, pmNewCfgPmirrDelete=pmNewCfgPmirrDelete, ipCurCfgRmapPrec=ipCurCfgRmapPrec, ipCurCfgRmapMetricType=ipCurCfgRmapMetricType, ipOspfVirtIntfInfoStatus=ipOspfVirtIntfInfoStatus, ospfNewCfgIntfDead=ospfNewCfgIntfDead, ipFwdNewCfgState=ipFwdNewCfgState, ipOspfVirtIntfInfoNbr=ipOspfVirtIntfInfoNbr, vlanCurCfgVlanName=vlanCurCfgVlanName, ospfVirtIntfInfoState=ospfVirtIntfInfoState, agDiff=agDiff, ipOspfRedistributeRipInfoMetricType=ipOspfRedistributeRipInfoMetricType, ospfGeneralStats=ospfGeneralStats, ipOspfIntfInfoPrio=ipOspfIntfInfoPrio, ospfNewCfgIntfDelete=ospfNewCfgIntfDelete, agCfgDumpTableEntry=agCfgDumpTableEntry, aclCurCfgIndex=aclCurCfgIndex, portStatsPhyIfOutFctlPkts=portStatsPhyIfOutFctlPkts, lacpInfoPortActOpSync=lacpInfoPortActOpSync, aclNewCfgPortAddAcl=aclNewCfgPortAddAcl, ripCurCfgIntfIndex=ripCurCfgIntfIndex, radNewCfgAuthenSecondString=radNewCfgAuthenSecondString, stpInfoPortIndex=stpInfoPortIndex, ufdInfoLtDAdminkeyMaxEnt=ufdInfoLtDAdminkeyMaxEnt, agImage2Ver=agImage2Ver, ufdNoLtMLinkFailure=ufdNoLtMLinkFailure, lacpInfoPortActPortPrio=lacpInfoPortActPortPrio, agNewCfgSyslog2Host=agNewCfgSyslog2Host, pmNewCfgPmonDelete=pmNewCfgPmonDelete, agNewCfgTftpServerPort=agNewCfgTftpServerPort, vrrpCurCfgVirtRtrPreempt=vrrpCurCfgVirtRtrPreempt, ipRmapTableMax=ipRmapTableMax, ipOspfHostInfoAreaIndex=ipOspfHostInfoAreaIndex, agCurCfgReminders=agCurCfgReminders, agCurCfgNTPServer=agCurCfgNTPServer, agCurCfgDhcp=agCurCfgDhcp, ospfCurCfgDefaultRouteMetricType=ospfCurCfgDefaultRouteMetricType, ospfCurCfgFixedMetricType=ospfCurCfgFixedMetricType, portStatsPhyIfOutBroadcastPkts=portStatsPhyIfOutBroadcastPkts, ospfIntfErrIndex=ospfIntfErrIndex, agCurCfgHprompt=agCurCfgHprompt, layer3Stats=layer3Stats, vlanNewCfgTableEntry=vlanNewCfgTableEntry, ospfLsdbInfoLsid=ospfLsdbInfoLsid, aclNewCfgPortTable=aclNewCfgPortTable, agNewCfgTelnetAccess=agNewCfgTelnetAccess, ripNewCfgOspfAddOutRmap=ripNewCfgOspfAddOutRmap, ospfCumRxlsReqs=ospfCumRxlsReqs, ripNewCfgFixedAddOutRmap=ripNewCfgFixedAddOutRmap, ospfNewCfgStaticMetric=ospfNewCfgStaticMetric, swFwDownloadSucess=swFwDownloadSucess, agCurCfgMgmtNetMask=agCurCfgMgmtNetMask, ospfCurCfgRangeTable=ospfCurCfgRangeTable, igmpFltCurCfgEnaDis=igmpFltCurCfgEnaDis, agNewCfgMgmtNetIndex=agNewCfgMgmtNetIndex, stpInfoPortDesignatedPort=stpInfoPortDesignatedPort, pmNewCfgPmirrMoniPortIndex=pmNewCfgPmirrMoniPortIndex, ospfIntfHello=ospfIntfHello, agNewCfgReminders=agNewCfgReminders, igmpFltNewCfgDelete=igmpFltNewCfgDelete, ufdInfo=ufdInfo, dot1xCurCfgGlobalMode=dot1xCurCfgGlobalMode, backendResponses=backendResponses, arpStats=arpStats, ufdNewCfgRemoveLtMPort=ufdNewCfgRemoveLtMPort, dot1xNewStatus=dot1xNewStatus, ospfCurCfgIntfMdkey=ospfCurCfgIntfMdkey, ipRouteInfoIndx=ipRouteInfoIndx, aclNewCfgPortTableEntry=aclNewCfgPortTableEntry, ospfNewCfgMdkeyIndex=ospfNewCfgMdkeyIndex, igmpStaticMrtrCfg=igmpStaticMrtrCfg, pmCurCfgPortMirrState=pmCurCfgPortMirrState, ospfCurCfgRangeEntry=ospfCurCfgRangeEntry, fdbCurCfgStaticTable=fdbCurCfgStaticTable, memoryStats=memoryStats, mstNewCfgStpMode=mstNewCfgStpMode, sfpInserted=sfpInserted, ipCurCfgGwAddr=ipCurCfgGwAddr, agNewCfgSyslogTrapOspf=agNewCfgSyslogTrapOspf, agPortOperTable=agPortOperTable, pktStatsMediums=pktStatsMediums, tacNewCfgState=tacNewCfgState, arpStatHighWater=arpStatHighWater, dot1xInfoPortAuthStatus=dot1xInfoPortAuthStatus, ospfCurCfgVirtIntfEntry=ospfCurCfgVirtIntfEntry, agNewCfgSyslogHost=agNewCfgSyslogHost, igmpSnoopCfgGen=igmpSnoopCfgGen, mstCistCurCfgPortTable=mstCistCurCfgPortTable, trunkGroupInfo=trunkGroupInfo, agTransferPassword=agTransferPassword, agNewCfgSyslogTrapVrrp=agNewCfgSyslogTrapVrrp, vrrpVirtRtrGrpTableMaxSize=vrrpVirtRtrGrpTableMaxSize, agNewCfgSyslogTrapMgmt=agNewCfgSyslogTrapMgmt, vrrpInfoVirtRtrAddr=vrrpInfoVirtRtrAddr, agPortCurCfgMulticastThresholdRate=agPortCurCfgMulticastThresholdRate, agTacacsUserMapCurCfgMapping=agTacacsUserMapCurCfgMapping, ripRedistributeStatic=ripRedistributeStatic, lacpInfoPortActOpExp=lacpInfoPortActOpExp, swNtpUpdateClock=swNtpUpdateClock, ipCurCfgGwInterval=ipCurCfgGwInterval, ospfCumTxDatabase=ospfCumTxDatabase, igmpFltNewCfgPortAddFiltRule=igmpFltNewCfgPortAddFiltRule, ospfNewCfgVirtIntfRetra=ospfNewCfgVirtIntfRetra, ipInfoRmapTable=ipInfoRmapTable, ospfCumNbrN1way=ospfCumNbrN1way, tcpStatsInErrs=tcpStatsInErrs, ripInfoIntfPoisonReverse=ripInfoIntfPoisonReverse, ufdLtDAdminkeyNewCfgTableEntry=ufdLtDAdminkeyNewCfgTableEntry, dot1xCurStatus=dot1xCurStatus, ospfVirtIntfInfoAreaId=ospfVirtIntfInfoAreaId, agNewCfgSyslogTrapNtp=agNewCfgSyslogTrapNtp, icmpClearStats=icmpClearStats, stpInfoPortPathCost=stpInfoPortPathCost, ripStatOutResponsePkts=ripStatOutResponsePkts, tcpStatsOutRsts=tcpStatsOutRsts, ufdGeneralCfg=ufdGeneralCfg, ipOspfAreaInfoId=ipOspfAreaInfoId, igmpMrtrInfoVersion=igmpMrtrInfoVersion, ufdInfoLtDPorts=ufdInfoLtDPorts, portInfoPhyIfPhysAddress=portInfoPhyIfPhysAddress, agDiffState=agDiffState, layer3=layer3, ospfLsdbInfoChecksum=ospfLsdbInfoChecksum, cistRootForwardDelay=cistRootForwardDelay, ripInfoIntfEntry=ripInfoIntfEntry, vlanCurCfgStg=vlanCurCfgStg, ufdNewCfgLtMPorts=ufdNewCfgLtMPorts, ospfRangeTableMaxSize=ospfRangeTableMaxSize, qosNewCfgPriorityCoSEntry=qosNewCfgPriorityCoSEntry, ospfAreaIntfWaitTimer=ospfAreaIntfWaitTimer, udpStatsNoPorts=udpStatsNoPorts, portInfoPvid=portInfoPvid, cistBridgePriority=cistBridgePriority, agCurCfgResetControl=agCurCfgResetControl, lacpNewPortCfgTableEntry=lacpNewPortCfgTableEntry, radCurCfgState=radCurCfgState, agAccessUserCurCfgName=agAccessUserCurCfgName, dot1xNewCfgPortTable=dot1xNewCfgPortTable, lacpInfoPortPartOpAggr=lacpInfoPortPartOpAggr, ipOspfIntfInfoHello=ipOspfIntfInfoHello, udpStatsInErrors=udpStatsInErrors, ipCurCfgAlistMetric=ipCurCfgAlistMetric, agCurCfgSyslog2Sev=agCurCfgSyslog2Sev, vrrpStatOutAdvers=vrrpStatOutAdvers, agPortCurCfgGigEthSpeed=agPortCurCfgGigEthSpeed, ripNewCfgOspfOutRmapList=ripNewCfgOspfOutRmapList, qosNewCfgPriorityCoSTable=qosNewCfgPriorityCoSTable, ipOspfRedistributeFixedInfoOutRmapList=ipOspfRedistributeFixedInfoOutRmapList, highTotalStats=highTotalStats, ospfIntfErrorStats=ospfIntfErrorStats, agPortNewCfgTable=agPortNewCfgTable, ipOspfRedistributeRipInfoMetric=ipOspfRedistributeRipInfoMetric, ospfCurCfgIntfIndex=ospfCurCfgIntfIndex, vrrpNewCfgIfIndx=vrrpNewCfgIfIndx, ipCurCfgGwTable=ipCurCfgGwTable, ipOspfIntfInfoIndex=ipOspfIntfInfoIndex, igmpStaticMrtrNewCfgTable=igmpStaticMrtrNewCfgTable, generalInfoStpUplinkFast=generalInfoStpUplinkFast, ospfCurCfgRangeAreaIndex=ospfCurCfgRangeAreaIndex, upfastNewCfgState=upfastNewCfgState, tacNewCfgCmdAuthor=tacNewCfgCmdAuthor, agNewCfgHttpsServerAccess=agNewCfgHttpsServerAccess, allportsStatsOperStatus=allportsStatsOperStatus, stgNewCfgPortLink=stgNewCfgPortLink, agRtcDate=agRtcDate, txIgmpReports=txIgmpReports, ipOspfRedistributeStaticInfoMetricType=ipOspfRedistributeStaticInfoMetricType, tacCurCfgDirectedRequest=tacCurCfgDirectedRequest, stgStatsPortXmtCfgBpdus=stgStatsPortXmtCfgBpdus, aclCurCfgInprofDscpEnable=aclCurCfgInprofDscpEnable, l2ThashCurCfgDipState=l2ThashCurCfgDipState, agRackId=agRackId, aclNewCfgFilterAction=aclNewCfgFilterAction, aclGroupCurCfgIndex=aclGroupCurCfgIndex, lacpInfoAggrPartOperKey=lacpInfoAggrPartOperKey, aclCurCfgSrcIPAddress=aclCurCfgSrcIPAddress, ospfExtLsdbInfoRouterId=ospfExtLsdbInfoRouterId, radNewCfgPrimaryServer=radNewCfgPrimaryServer, ipCurCfgIntfBootpRelay=ipCurCfgIntfBootpRelay, agRevert=agRevert, lacpInfoPortOperIndex=lacpInfoPortOperIndex, maxLpmTableSize=maxLpmTableSize, ipIntfInfoTable=ipIntfInfoTable, aclCurCfgDstMACAddress=aclCurCfgDstMACAddress, noLpmEntriesUsed=noLpmEntriesUsed, ospfIntfRxDatabase=ospfIntfRxDatabase, mstCistCurCfgPortIndex=mstCistCurCfgPortIndex, vlanInfoName=vlanInfoName, agNewDaylightSavings=agNewDaylightSavings, stgNewCfgState=stgNewCfgState, aclGroupNewCfgMemberAcls=aclGroupNewCfgMemberAcls, vlanNewCfgState=vlanNewCfgState, ripNewCfgEospfAddOutRmap=ripNewCfgEospfAddOutRmap, ripStatOutRequestPkts=ripStatOutRequestPkts, agCurCfgNTPSecServer=agCurCfgNTPSecServer, aclStatsTableEntry=aclStatsTableEntry, fdbNewCfgEntryIndex=fdbNewCfgEntryIndex, ipCurCfgNwfIndex=ipCurCfgNwfIndex, ipCurCfgNwfMask=ipCurCfgNwfMask, agNewCfgSnmpTimeout=agNewCfgSnmpTimeout, stpInfoPortTableEntry=stpInfoPortTableEntry, ipGatewayCfg=ipGatewayCfg, ospfNewCfgRipAddOutRmap=ospfNewCfgRipAddOutRmap, ospfIntfErrDeadMismatch=ospfIntfErrDeadMismatch, eapolLogoffFramesRx=eapolLogoffFramesRx, igmpStaticMrtrNewCfgTableEntry=igmpStaticMrtrNewCfgTableEntry, qosCurCfgPriorityCoSTable=qosCurCfgPriorityCoSTable, agPortCurCfgState=agPortCurCfgState, igmpMrtrInfoMrt=igmpMrtrInfoMrt, ospfLsdbInfoAdvertisement=ospfLsdbInfoAdvertisement, ipOspfRedistributeFixedInfoMetricType=ipOspfRedistributeFixedInfoMetricType, ripNewCfgStaticOutRmapList=ripNewCfgStaticOutRmapList, agCurCfgSyslogTrapWeb=agCurCfgSyslogTrapWeb, ospfCurCfgHostTable=ospfCurCfgHostTable, portStatsLinkStateChange=portStatsLinkStateChange, vrrpStatBadVersion=vrrpStatBadVersion, lacpInfoAggrIndivState=lacpInfoAggrIndivState, stpInfoPortStpIndex=stpInfoPortStpIndex, ospfIfNbrIntfIndex=ospfIfNbrIntfIndex, ospfNewCfgVirtIntfAreaId=ospfNewCfgVirtIntfAreaId, igmpSnoopNewCfgTimeout=igmpSnoopNewCfgTimeout, agCurCfgMgmtNetTable=agCurCfgMgmtNetTable, ospfIntfRxPkts=ospfIntfRxPkts, mstCistNewCfgVlanBmap=mstCistNewCfgVlanBmap, ufdInfoLtDAdminkeyTableEntry=ufdInfoLtDAdminkeyTableEntry, icmpStatsOutAddrMasks=icmpStatsOutAddrMasks, ufdClearStats=ufdClearStats, aclGroupCurCfgEntry=aclGroupCurCfgEntry, geal3Stats=geal3Stats, portOperIdx=portOperIdx, ipCurCfgIntfState=ipCurCfgIntfState, ospfAreaRxDatabase=ospfAreaRxDatabase, lacpInfoPortPartOpPortNum=lacpInfoPortPartOpPortNum, gatewayInfoIndex=gatewayInfoIndex, stgCurCfgTableEntry=stgCurCfgTableEntry, geaportInfoTable=geaportInfoTable, arpStatMaxEntries=arpStatMaxEntries, ospfCurCfgRangeState=ospfCurCfgRangeState, ospfCumNbrAdjointOk=ospfCumNbrAdjointOk, ipNewCfgGwState=ipNewCfgGwState, ripNewCfgIntfPoisonReverse=ripNewCfgIntfPoisonReverse, stpInfoRootPort=stpInfoRootPort)
mibBuilder.exportSymbols("BLADETYPE4-NETWORK-MIB", vrrpCurCfgIfIndx=vrrpCurCfgIfIndx, ospfIntfTxlsUpdates=ospfIntfTxlsUpdates, ripCurCfgIntfAuth=ripCurCfgIntfAuth, ospfCumNbrNegotiationDone=ospfCumNbrNegotiationDone, acl=acl, ospfNewCfgVirtIntfTrans=ospfNewCfgVirtIntfTrans, qosNewCfgCosWeight=qosNewCfgCosWeight, ospfNewCfgHostIndex=ospfNewCfgHostIndex, ospfNewCfgIntfArea=ospfNewCfgIntfArea, ipNewCfgIntfDelete=ipNewCfgIntfDelete, agNewCfgSyslogTrapUfd=agNewCfgSyslogTrapUfd, pmNewCfgPortMonitorEntry=pmNewCfgPortMonitorEntry, agClrSyslogMsgs=agClrSyslogMsgs, ospfProcessUptime=ospfProcessUptime, ufdInfoLtMStatus=ufdInfoLtMStatus, backendAccessChallenges=backendAccessChallenges, agCfgDumpState=agCfgDumpState, vrrpNewCfgIfAuthType=vrrpNewCfgIfAuthType, igmpFltNewCfgPortTable=igmpFltNewCfgPortTable, ipOspfIntfInfoAuthKey=ipOspfIntfInfoAuthKey, ospfRoutesInfoDestination=ospfRoutesInfoDestination, sshNewCfgSSHPort=sshNewCfgSSHPort, ipOspfHostInfoState=ipOspfHostInfoState, ospfCurCfgStaticMetricType=ospfCurCfgStaticMetricType, ospfCurCfgFixedMetric=ospfCurCfgFixedMetric, agAccessUserNewCos=agAccessUserNewCos, stpInfoBrgMaxAge=stpInfoBrgMaxAge, ospfCumNbrChangeStats=ospfCumNbrChangeStats, rip2NewCfgState=rip2NewCfgState, ipStatsInDiscards=ipStatsInDiscards, ospfIntfNbrChange=ospfIntfNbrChange, igmpMrtrInfoExpires=igmpMrtrInfoExpires, dnsNewCfgSecondaryIpAddr=dnsNewCfgSecondaryIpAddr, mstCistNewCfgBridgePriority=mstCistNewCfgBridgePriority, ipOspfMd5keyInfoIndex=ipOspfMd5keyInfoIndex, ufdCurCfgGlobalState=ufdCurCfgGlobalState, intfInfoVlan=intfInfoVlan, aclNewCfgOutprofDscp=aclNewCfgOutprofDscp, dot1xNewCfgGlobalSrvTmout=dot1xNewCfgGlobalSrvTmout, trunkGroupInfoPortTrunkId=trunkGroupInfoPortTrunkId, ospfIntfNbrExchangeDone=ospfIntfNbrExchangeDone, agSystem=agSystem, aclCurCfgPortAclGrpBmap=aclCurCfgPortAclGrpBmap, ipInfoRmapMetricType=ipInfoRmapMetricType, ospfNewCfgVirtIntfStatus=ospfNewCfgVirtIntfStatus, ospfAreaInfoAuthType=ospfAreaInfoAuthType, pmCurCfgPortMonitorTable=pmCurCfgPortMonitorTable, tcpStatsAttemptFails=tcpStatsAttemptFails, ospfSumRangesInfoNetwork=ospfSumRangesInfoNetwork, ipCurCfgGwIndex=ipCurCfgGwIndex, aclCurCfgDstMACMask=aclCurCfgDstMACMask, dot1xInfoPortIndex=dot1xInfoPortIndex, agCurCfgConsole=agCurCfgConsole, dnsStatInGoodDnsRequests=dnsStatInGoodDnsRequests, ospfExtLsdbInfoChecksum=ospfExtLsdbInfoChecksum, ospfCurCfgState=ospfCurCfgState, ripCurCfgOspfMetric=ripCurCfgOspfMetric, ospfMdkeyTableMaxSize=ospfMdkeyTableMaxSize, igmpSnoopNewCfgVlanFastlvRem=igmpSnoopNewCfgVlanFastlvRem, agPortCurCfgRmon=agPortCurCfgRmon, mstCistNewCfgPortEdge=mstCistNewCfgPortEdge, vrrpOperVirtRtrTable=vrrpOperVirtRtrTable, aclCurCfgSrcMACAddress=aclCurCfgSrcMACAddress, hwPartNumber=hwPartNumber, ospfNewLsaReceived=ospfNewLsaReceived, stpInfoPortTable=stpInfoPortTable, sshCurCfgStatus=sshCurCfgStatus, pktStats=pktStats, authTimeoutsWhileAuthenticating=authTimeoutsWhileAuthenticating, icmpStatsInEchoReps=icmpStatsInEchoReps, layer2Stats=layer2Stats, igmpSnoopStats=igmpSnoopStats, aclNewCfgDstPort=aclNewCfgDstPort, trunkGroupNewCfgPorts=trunkGroupNewCfgPorts, lacpInfoPort=lacpInfoPort, ospfVirtIntfInfoArea=ospfVirtIntfInfoArea, agNTPOper=agNTPOper, ipOspfIntfInfoRetra=ipOspfIntfInfoRetra, ospfNewCfgIntfId=ospfNewCfgIntfId, ospfCurCfgAreaId=ospfCurCfgAreaId, ospfNumberOfLsdbEntries=ospfNumberOfLsdbEntries, geaportInfo=geaportInfo, aclCurCfgIPFmt=aclCurCfgIPFmt, aclStats=aclStats, ipCurCfgIntfVlan=ipCurCfgIntfVlan, agChassis=agChassis, agImage1Ver=agImage1Ver, agTransferCfgFileName=agTransferCfgFileName, allportsStatsOutPkts=allportsStatsOutPkts, ipStaticRouteTableMaxSize=ipStaticRouteTableMaxSize, ipOspfIntfInfoArea=ipOspfIntfInfoArea, ripCurCfgIntfDefault=ripCurCfgIntfDefault, igmpCurCfgOnOff=igmpCurCfgOnOff, trunkGroupCurCfgTable=trunkGroupCurCfgTable, lacpInfoPortNtt=lacpInfoPortNtt, vlanNewCfgVlanId=vlanNewCfgVlanId, dot1xSystemStatus=dot1xSystemStatus, swapFreeStats=swapFreeStats, icmpStatsOutEchos=icmpStatsOutEchos, sfpInfoTableEntry=sfpInfoTableEntry, trunkGroupInfoPortTableEntry=trunkGroupInfoPortTableEntry, ospfVirtIntfInfoAuth=ospfVirtIntfInfoAuth, ipOspfIntfInfoId=ipOspfIntfInfoId, ripStatInSelfRcvPkts=ripStatInSelfRcvPkts, mstCistNewCfgPortPriority=mstCistNewCfgPortPriority, igmpSnoopCurCfgVlanBmap=igmpSnoopCurCfgVlanBmap, aclNewCfgKbitsBurst=aclNewCfgKbitsBurst, vrrpNewCfgVirtRtrTckIpIntf=vrrpNewCfgVirtRtrTckIpIntf, igmpStaticMrtrNewCfgPortId=igmpStaticMrtrNewCfgPortId, ipNewCfgIntfTable=ipNewCfgIntfTable, igmpFltCurCfgPortIndx=igmpFltCurCfgPortIndx, ospfAreaInfoId=ospfAreaInfoId, ntpSystemCurrentTime=ntpSystemCurrentTime, ripCurCfgIntfEntry=ripCurCfgIntfEntry, ospfNewCfgRangeAddr=ospfNewCfgRangeAddr, ospfNewCfgHostState=ospfNewCfgHostState, lacpInfoPortActAdminKey=lacpInfoPortActAdminKey, allportsStatsDescr=allportsStatsDescr, ipOspfInfo=ipOspfInfo, agCurCfgLoginBanner=agCurCfgLoginBanner, igmpSnoopNewCfgSrcIp=igmpSnoopNewCfgSrcIp, ospfNewCfgRangeHideState=ospfNewCfgRangeHideState, ospfTotalNumberOfLsdbEntries=ospfTotalNumberOfLsdbEntries, portStatsPhyIfOutErrors=portStatsPhyIfOutErrors, swFwDownloadFailure=swFwDownloadFailure, sshCurCfgScpAdm=sshCurCfgScpAdm, qosNewCfgCosWeightTable=qosNewCfgCosWeightTable, dnsStatOutDnsRequests=dnsStatOutDnsRequests, fdbNewCfgAgingTime=fdbNewCfgAgingTime, agPortCurCfgTableEntry=agPortCurCfgTableEntry, allportsStatsInBcast=allportsStatsInBcast, ripNewCfgIntfDefault=ripNewCfgIntfDefault, dot1xNewCfgPortMode=dot1xNewCfgPortMode, ripCurCfgIntfTable=ripCurCfgIntfTable, dot1pInfo=dot1pInfo, vlanNewCfgVlanName=vlanNewCfgVlanName, mstCurCfgRegionName=mstCurCfgRegionName, allportsStatsInErrors=allportsStatsInErrors, igmpSnoopNewCfgVlanBmap=igmpSnoopNewCfgVlanBmap, dhcpInfoLeaseObtained=dhcpInfoLeaseObtained, dhcpInfoLeaseExpires=dhcpInfoLeaseExpires, vrrpCurCfgVirtRtrID=vrrpCurCfgVirtRtrID, ipStatsInReceives=ipStatsInReceives, ospfIntfTableMaxSize=ospfIntfTableMaxSize, mstCistNewCfgPortStpState=mstCistNewCfgPortStpState, ipOspfHostInfoEntry=ipOspfHostInfoEntry, vrrpIfTableMaxSize=vrrpIfTableMaxSize, lacpInfoPortActOpTimeout=lacpInfoPortActOpTimeout, ospfAreaNbrAdjointOk=ospfAreaNbrAdjointOk, ufdNewCfgAddLtMPort=ufdNewCfgAddLtMPort, swCistTopologyChanged=swCistTopologyChanged, ipNewCfgStaticRouteEntry=ipNewCfgStaticRouteEntry, tacNewCfgCmdLogging=tacNewCfgCmdLogging, lacpNewPortState=lacpNewPortState, igmpFltCurCfgTableEntry=igmpFltCurCfgTableEntry, ripInfoIntfState=ripInfoIntfState, ipRmapCfg=ipRmapCfg, ripInfoIntfSupply=ripInfoIntfSupply, ospfNewCfgAreaIndex=ospfNewCfgAreaIndex, ripNewCfgIntfListen=ripNewCfgIntfListen, ospfTotalNssaAreas=ospfTotalNssaAreas, qosNewCfgPortPriorityEntry=qosNewCfgPortPriorityEntry, dhcpInfoDefaultGateway=dhcpInfoDefaultGateway, agPortCurCfgIndx=agPortCurCfgIndx, ospfExtLsdbInfoTable=ospfExtLsdbInfoTable, cistInfoPortDesignatedBridge=cistInfoPortDesignatedBridge, radNewCfgAuthenString=radNewCfgAuthenString, ipCurCfgBootpState=ipCurCfgBootpState, stgNewCfgPortIndex=stgNewCfgPortIndex, swSaveComplete=swSaveComplete, agSyslogMsgTableEntry=agSyslogMsgTableEntry, fdbCurCfgPort=fdbCurCfgPort, ipNewCfgStaticRouteDestIp=ipNewCfgStaticRouteDestIp, routeStatMaxEntries=routeStatMaxEntries, ospfRouterID=ospfRouterID, agCurCfgSysDlight=agCurCfgSysDlight, agNewCfgSyslog2Sev=agNewCfgSyslog2Sev, ospfIntfRxlsAcks=ospfIntfRxlsAcks, stgNewCfgBrgHelloTime=stgNewCfgBrgHelloTime, dot1xInfo=dot1xInfo, igmpSnoopCurCfgVlanFastlvBmap=igmpSnoopCurCfgVlanFastlvBmap, agNewBootNxtCliModePrompt=agNewBootNxtCliModePrompt, agNewCfgSyslogTrapVlan=agNewCfgSyslogTrapVlan, vrrpOperVirtRtrEntry=vrrpOperVirtRtrEntry, trunkGroupNewCfgTable=trunkGroupNewCfgTable, vrrpNewCfgVirtRtrTckVirtRtr=vrrpNewCfgVirtRtrTckVirtRtr, fdbCurCfgVlan=fdbCurCfgVlan, ospfAreaTxlsUpdates=ospfAreaTxlsUpdates, lacpInfoAggrTable=lacpInfoAggrTable, ipNewCfgBootpAddr2=ipNewCfgBootpAddr2, ospfSumRangesInfoListType=ospfSumRangesInfoListType, igmpInfoGroupId=igmpInfoGroupId, ospfVirtIntfInfoCost=ospfVirtIntfInfoCost, dot1xCurCfgPortSrvTmout=dot1xCurCfgPortSrvTmout, ospfNewCfgIntfRetra=ospfNewCfgIntfRetra, aclNewCfgMeterAction=aclNewCfgMeterAction, ospfGeneralInfo=ospfGeneralInfo, ospfTotalTransitAreas=ospfTotalTransitAreas, ufdInfoState=ufdInfoState, lacpInfoAggrIndex=lacpInfoAggrIndex, aclClearStats=aclClearStats, stgCurCfgIndex=stgCurCfgIndex, dot1xNewCfgPortSrvTmout=dot1xNewCfgPortSrvTmout, layer3Oper=layer3Oper, lacpInfoPortMuxState=lacpInfoPortMuxState, lacpInfoPortPartOpDef=lacpInfoPortPartOpDef, ospfCurCfgHostIpAddr=ospfCurCfgHostIpAddr, aclNewCfgPortIndex=aclNewCfgPortIndex, ipStaticRouteClearAllByGatewayIp=ipStaticRouteClearAllByGatewayIp, agTacacsUserMapNewCfgMapping=agTacacsUserMapNewCfgMapping, tcpStatsInSegs=tcpStatsInSegs, lacpInfoPortReadyN=lacpInfoPortReadyN, vrrpClearStats=vrrpClearStats, noBlocksUsedInLpmTable=noBlocksUsedInLpmTable, ospfNewCfgLSDB=ospfNewCfgLSDB, ospfAreaTxlsAcks=ospfAreaTxlsAcks, ipCurCfgBootpAddr=ipCurCfgBootpAddr, ipCurCfgIntfMask=ipCurCfgIntfMask, stpInfoTimeSinceTopChange=stpInfoTimeSinceTopChange, ipNewCfgStaticArpAction=ipNewCfgStaticArpAction, vlanCurCfgTable=vlanCurCfgTable, ospfIntfRxTxStatsEntry=ospfIntfRxTxStatsEntry, fdbCurCfgStaticEntry=fdbCurCfgStaticEntry, ipInfoRmapEntry=ipInfoRmapEntry, igmpInfoTable=igmpInfoTable, fdbCurCfgEntryIndex=fdbCurCfgEntryIndex, icmpStatsOutSrcQuenchs=icmpStatsOutSrcQuenchs, ospfIfNbrBackupDesignatedRtr=ospfIfNbrBackupDesignatedRtr, agPortNewCfgTableEntry=agPortNewCfgTableEntry, ripNewCfgOspfMetric=ripNewCfgOspfMetric, ospfIfInfoIndex=ospfIfInfoIndex, ipAlistTableMax=ipAlistTableMax, ospfRedistributeRip=ospfRedistributeRip, routeStatHighWater=routeStatHighWater, aclNewCfgVLanId=aclNewCfgVLanId, markerresponsepdusRx=markerresponsepdusRx, ospfVirtIntfInfoIndex=ospfVirtIntfInfoIndex, ospfCumTxlsReqs=ospfCumTxlsReqs, icmpStatsOutAddrMaskReps=icmpStatsOutAddrMaskReps, aclCurCfgProtocol=aclCurCfgProtocol, portOperRmon=portOperRmon, ospfTotalStubAreas=ospfTotalStubAreas, vrrpCurCfgVirtRtrGrpPriority=vrrpCurCfgVirtRtrGrpPriority, igmpFltNewCfgPortIndx=igmpFltNewCfgPortIndx, ospfAreaErrUnknownNbr=ospfAreaErrUnknownNbr, ospfAreaInfoIndex=ospfAreaInfoIndex, ripNewCfgFixedOutRmapList=ripNewCfgFixedOutRmapList, tcpStatsMaxConn=tcpStatsMaxConn, lacpCurPortActorAdminKey=lacpCurPortActorAdminKey, ipCurCfgIntfEntry=ipCurCfgIntfEntry, igmpStaticMrtrCurCfgTable=igmpStaticMrtrCurCfgTable, vrrpCurCfgGenState=vrrpCurCfgGenState, stpInfoIndex=stpInfoIndex, intfInfoNetMask=intfInfoNetMask)
mibBuilder.exportSymbols("BLADETYPE4-NETWORK-MIB", ospfExtLsdbInfoEntry=ospfExtLsdbInfoEntry, igmpClearTables=igmpClearTables, aclGroupCurCfgMemberAcls=aclGroupCurCfgMemberAcls, ospfIntfNbrIndex=ospfIntfNbrIndex, ipNewCfgAlistDelete=ipNewCfgAlistDelete, dot1xNewCfgPortDefault=dot1xNewCfgPortDefault, agPortNewCfgGigEthAutoNeg=agPortNewCfgGigEthAutoNeg, authEapLogoffWhileAuthenticating=authEapLogoffWhileAuthenticating, ospfCurCfgAreaIndex=ospfCurCfgAreaIndex, ipOspfRangeInfoMask=ipOspfRangeInfoMask, aclCurCfgVLanMask=aclCurCfgVLanMask, totalMemoryStats=totalMemoryStats, sshNewCfgHKeyGen=sshNewCfgHKeyGen, ripGeneral=ripGeneral, lacpdusRx=lacpdusRx, mstCistNewCfgAddVlan=mstCistNewCfgAddVlan, vrrpStatInAdvers=vrrpStatInAdvers, ipNewCfgRmapTable=ipNewCfgRmapTable, cistInfoPortRole=cistInfoPortRole, ipNwfTableMax=ipNwfTableMax, ufdNewCfgRemoveLtDTrunk=ufdNewCfgRemoveLtDTrunk, icmpStatsInSrcQuenchs=icmpStatsInSrcQuenchs, vrrpCurCfgVirtRtrInterval=vrrpCurCfgVirtRtrInterval, vrrpCurCfgVirtRtrGrpIfIndex=vrrpCurCfgVirtRtrGrpIfIndex, sfpInfoSerial=sfpInfoSerial, aclCurCfgSrcPortMask=aclCurCfgSrcPortMask, highFreeStats=highFreeStats, ipInfoRmapIndex=ipInfoRmapIndex, ipNewCfgGwIndex=ipNewCfgGwIndex, dot1pInfoPortPriority=dot1pInfoPortPriority, aclCurCfgMeterEnable=aclCurCfgMeterEnable, vrrpGeneral=vrrpGeneral, ipNewCfgStaticArpPort=ipNewCfgStaticArpPort, ospfNewCfgIntfTable=ospfNewCfgIntfTable, swTempReturnThreshold=swTempReturnThreshold, ospfCumIntfUnloop=ospfCumIntfUnloop, aclCurCfgKbitsBurst=aclCurCfgKbitsBurst, igmpFltCurCfgIndx=igmpFltCurCfgIndx, ripStatRouteTimeout=ripStatRouteTimeout, igmpInfoEntry=igmpInfoEntry, aclCurCfgPortIndex=aclCurCfgPortIndex, ospfCumNbrDown=ospfCumNbrDown, radNewCfgState=radNewCfgState, cistBridgeForwardDelay=cistBridgeForwardDelay, sfpInfoTable=sfpInfoTable, agCurCfgSyslogTrapAll=agCurCfgSyslogTrapAll, ipNewCfgIntfVlan=ipNewCfgIntfVlan, ospfNewCfgVirtIntfDelete=ospfNewCfgVirtIntfDelete, agNewCfgMgmtNetSubnet=agNewCfgMgmtNetSubnet, pmCurCfgPmirrMirrPortIndex=pmCurCfgPmirrMirrPortIndex, allportsStatsOutBcast=allportsStatsOutBcast, ipOspfRangeInfoTable=ipOspfRangeInfoTable, ospfCurCfgIntfPrio=ospfCurCfgIntfPrio, rxIgmpReports=rxIgmpReports, mstGeneralCfg=mstGeneralCfg, dot1xNewCfgPortRaPeriod=dot1xNewCfgPortRaPeriod, ipOspfIntfInfoStatus=ipOspfIntfInfoStatus, lacpInfoAggrActAdminKey=lacpInfoAggrActAdminKey, agCurBootNxtCliMode=agCurBootNxtCliMode, ospfNewCfgAreaAuthType=ospfNewCfgAreaAuthType, ipOspfAreaInfoSpfInterval=ipOspfAreaInfoSpfInterval, allportsStatsAdminStatus=allportsStatsAdminStatus, portOperDot1xTable=portOperDot1xTable, aclNewCfgPortAddAclGrp=aclNewCfgPortAddAclGrp, agPortTableMaxEnt=agPortTableMaxEnt, aclGroupNewCfgRemoveAcl=aclGroupNewCfgRemoveAcl, dot1xCurCfgPortRaPeriod=dot1xCurCfgPortRaPeriod, ufdStats=ufdStats, ipStaticArpClearAll=ipStaticArpClearAll, ospfLsdbInfoEntry=ospfLsdbInfoEntry, ospfNewCfgIntfAuthKey=ospfNewCfgIntfAuthKey, arpInfo=arpInfo, ospfIntfInfoEntry=ospfIntfInfoEntry, agNewCfgDhcp=agNewCfgDhcp, ospfRoutesInfoType=ospfRoutesInfoType, aclNewCfgReset=aclNewCfgReset, ospfIntfBackup=ospfIntfBackup, aclNewCfgInprofDscp=aclNewCfgInprofDscp, sshCurCfgSSHPort=sshCurCfgSSHPort, agNewCfgMgmtNetTable=agNewCfgMgmtNetTable, dnsCfg=dnsCfg, ospfLsTypesSupported=ospfLsTypesSupported, ospfNewCfgVirtIntfMdkey=ospfNewCfgVirtIntfMdkey, allportsStatsPhysAddress=allportsStatsPhysAddress, ipCurCfgStaticRouteGateway=ipCurCfgStaticRouteGateway, ospfCurCfgIntfTrans=ospfCurCfgIntfTrans, ipOspfRangeInfoEntry=ipOspfRangeInfoEntry, sfpInfo=sfpInfo, swStgTopologyChanged=swStgTopologyChanged, vrrpNewCfgVirtRtrIndx=vrrpNewCfgVirtRtrIndx, lacpInfoCollDetState=lacpInfoCollDetState, ospfAreaNbrLoadingDone=ospfAreaNbrLoadingDone, ospfTotalNeighbours=ospfTotalNeighbours, ipRouteInfoMask=ipRouteInfoMask, qosNewCfgCosWeightEntry=qosNewCfgCosWeightEntry, qos8021p=qos8021p, ripInfoIntfListen=ripInfoIntfListen, lacpInfoPortAdminTable=lacpInfoPortAdminTable, ospfCurCfgVirtIntfAuthKey=ospfCurCfgVirtIntfAuthKey, fdbVlan=fdbVlan, rip2CurCfgUpdatePeriod=rip2CurCfgUpdatePeriod, ripCurCfgIntfMetric=ripCurCfgIntfMetric, aclNewCfgEthernetTypeValue=aclNewCfgEthernetTypeValue, aclNewCfgSrcIPMask=aclNewCfgSrcIPMask, trunkGroupInfoPorts=trunkGroupInfoPorts, trunkGroupInfoProtocol=trunkGroupInfoProtocol, vrrpCurCfgGenTckVlanPortInc=vrrpCurCfgGenTckVlanPortInc, l2ThashNewCfgDmacState=l2ThashNewCfgDmacState, dot1xCurCfgGlobalSrvTmout=dot1xCurCfgGlobalSrvTmout, ipCurCfgStaticRouteIndx=ipCurCfgStaticRouteIndx, ospfVirtIntfInfoRouterId=ospfVirtIntfInfoRouterId, agPortNewCfgPVID=agPortNewCfgPVID, ospfLsdbInfoTable=ospfLsdbInfoTable, ospfAreaInfoNeighborsINITstate=ospfAreaInfoNeighborsINITstate, ospfNewCfgMdkeyEntry=ospfNewCfgMdkeyEntry, igmpMrtrInfoTable=igmpMrtrInfoTable, ospfAreaErrHelloMismatch=ospfAreaErrHelloMismatch, ospfNbrInFullState=ospfNbrInFullState, ospfAreaTxDatabase=ospfAreaTxDatabase, tcpStatsCurrConn=tcpStatsCurrConn, ipOspfMd5keyInfoKey=ipOspfMd5keyInfoKey, dot1xInfoPortCtrlDir=dot1xInfoPortCtrlDir, dot1xInfoPortAuthPAEState=dot1xInfoPortAuthPAEState, agCurCfgSyslogTrapSystem=agCurCfgSyslogTrapSystem, agConfigForNxtReset=agConfigForNxtReset, vrrpCurCfgVirtRtrGrpPreempt=vrrpCurCfgVirtRtrGrpPreempt, aclCurCfgSrcPort=aclCurCfgSrcPort, ospfIntfRxHello=ospfIntfRxHello, agAccessUserCurCos=agAccessUserCurCos, rxIgmpGenQueries=rxIgmpGenQueries, agNewCfgLoginBanner=agNewCfgLoginBanner, ripNewCfgEospfRemoveOutRmap=ripNewCfgEospfRemoveOutRmap, ipNewCfgStaticRouteMask=ipNewCfgStaticRouteMask, fdbNewCfgAddPort=fdbNewCfgAddPort, agApplyConfig=agApplyConfig, ospfNewCfgHostCost=ospfNewCfgHostCost, agPortCurCfgTable=agPortCurCfgTable, ospfIntfErrUnknownNbr=ospfIntfErrUnknownNbr, portStatsPhyIfInDiscards=portStatsPhyIfInDiscards, ospfNewCfgStaticRemoveOutRmap=ospfNewCfgStaticRemoveOutRmap, ospfLsdbInfoRouterId=ospfLsdbInfoRouterId, agDiffTableEntry=agDiffTableEntry, vrrpCurCfgVirtRtrGrpTckIpIntf=vrrpCurCfgVirtRtrGrpTckIpIntf, authReauthsWhileAuthenticated=authReauthsWhileAuthenticated, ospfCumIntfHello=ospfCumIntfHello, ospfRouteRedistribution=ospfRouteRedistribution, aclNewCfgEntry=aclNewCfgEntry, stgCurCfgPortLink=stgCurCfgPortLink, ipOspfInfoState=ipOspfInfoState, aclNewCfgTCPFlags=aclNewCfgTCPFlags, agCfgDumpTableSize=agCfgDumpTableSize, mstCistCurCfgBridgeForwardDelay=mstCistCurCfgBridgeForwardDelay, stpInfoPortDesignatedRoot=stpInfoPortDesignatedRoot, stpInfoTable=stpInfoTable, ospfNewCfgVirtIntfNbr=ospfNewCfgVirtIntfNbr, ipNewCfgRmapPrec=ipNewCfgRmapPrec, dot1xCurCfgGlobalTable=dot1xCurCfgGlobalTable, agAccessUserNewCfgPswd=agAccessUserNewCfgPswd, agBootVer=agBootVer, lacpDeleteTrunk=lacpDeleteTrunk, ospfIfNbrState=ospfIfNbrState, vrrpCurCfgVirtRtrPriority=vrrpCurCfgVirtRtrPriority, aclNewCfgEthernetTypeName=aclNewCfgEthernetTypeName, noL3EntriesUsed=noL3EntriesUsed, ripNewCfgStaticAddOutRmap=ripNewCfgStaticAddOutRmap, ospfIntfErrHelloMismatch=ospfIntfErrHelloMismatch, ospfNewCfgIntfPrio=ospfNewCfgIntfPrio, ipOspfVirtIntfInfoHello=ipOspfVirtIntfInfoHello, ripInfoIntfTrigUpdate=ripInfoIntfTrigUpdate, agCurCfgMgmtNetEntry=agCurCfgMgmtNetEntry, ufd=ufd, mstCfg=mstCfg, tacNewCfgSecondaryServer=tacNewCfgSecondaryServer, eapolRespFramesRx=eapolRespFramesRx, stgStatsPortRcvTcnBpdus=stgStatsPortRcvTcnBpdus, allportsStatsInDiscards=allportsStatsInDiscards, intfInfoStatus=intfInfoStatus, aclCurCfg8021pPriority=aclCurCfg8021pPriority, ntpSecondaryServerReqSent=ntpSecondaryServerReqSent, trunkGroupNewCfgDelete=trunkGroupNewCfgDelete, ospfAreaRxTxIndex=ospfAreaRxTxIndex, ipFwdCurCfgDirectedBcast=ipFwdCurCfgDirectedBcast, lacpInfoPortActOpPortState=lacpInfoPortActOpPortState, vrrpNewCfgGenTckIpIntfInc=vrrpNewCfgGenTckIpIntfInc, tcpStatsOutSegs=tcpStatsOutSegs, agCurCfgSyslog2Fac=agCurCfgSyslog2Fac, aclGroupNewCfgDelete=aclGroupNewCfgDelete, l2ThashCurCfgSipState=l2ThashCurCfgSipState, agCurCfgUfdTrap=agCurCfgUfdTrap, lacpStatsTableEntry=lacpStatsTableEntry, agNewCfgHprompt=agNewCfgHprompt, mstCurCfgMaxHopCount=mstCurCfgMaxHopCount, lacpInfoPortIndivState=lacpInfoPortIndivState, ipOspfRedistributeStaticInfo=ipOspfRedistributeStaticInfo, ipOspfAreaInfoEntry=ipOspfAreaInfoEntry, agCurCfgSyslogTrapSsh=agCurCfgSyslogTrapSsh, swTempExceedThreshold=swTempExceedThreshold, igmpStaticMrtrCurCfgIndx=igmpStaticMrtrCurCfgIndx, lacp=lacp, agApplyPending=agApplyPending, vrrpNewCfgVirtRtrGrpPriority=vrrpNewCfgVirtRtrGrpPriority, updateNewCfgState=updateNewCfgState, aclCurCfgDstPort=aclCurCfgDstPort, ipNewCfgRmapMetricType=ipNewCfgRmapMetricType, lacpInfoPortPerState=lacpInfoPortPerState, ospfTmrsKckOffAseExport=ospfTmrsKckOffAseExport, ospfNewCfgRangeMask=ospfNewCfgRangeMask, ipNewCfgAlistNwf=ipNewCfgAlistNwf, ufdLtDAdminkeyNewCfgTable=ufdLtDAdminkeyNewCfgTable, ripNewCfgIntfSplitHorizon=ripNewCfgIntfSplitHorizon, ipCurCfgRmapTable=ipCurCfgRmapTable, aclNewCfgDstMACMask=aclNewCfgDstMACMask, intfInfoIndex=intfInfoIndex, igmpFltCurCfgMcastIp1=igmpFltCurCfgMcastIp1, ipStatsInHdrErrors=ipStatsInHdrErrors, stgStatsPortXmtTcnBpdus=stgStatsPortXmtTcnBpdus, lacpInfoPortMoved=lacpInfoPortMoved, tcpStatsEstabResets=tcpStatsEstabResets, mstCistNewCfgPortTableEntry=mstCistNewCfgPortTableEntry, agentOper=agentOper, vrrpNewCfgIfTableEntry=vrrpNewCfgIfTableEntry, tacNewCfgPort=tacNewCfgPort, ufdNoLtDAutoDisabled=ufdNoLtDAutoDisabled, arpNewCfgReARPPeriod=arpNewCfgReARPPeriod, ospfIntfUnloop=ospfIntfUnloop, arpInfoFlag=arpInfoFlag, agReset=agReset, aclNewCfgEthFmt=aclNewCfgEthFmt, igmpSnoopCurCfgTimeout=igmpSnoopCurCfgTimeout, ospfIfInfoRetransmit=ospfIfInfoRetransmit, routeStats=routeStats, ospfNewCfgFixedMetric=ospfNewCfgFixedMetric, ipRouteInfoInterface=ipRouteInfoInterface, ospfTmrsKckOffDbage=ospfTmrsKckOffDbage, aclNewCfgEthernetReset=aclNewCfgEthernetReset, tcpStatsCurrEstab=tcpStatsCurrEstab, agCurCfgTelnetServerPort=agCurCfgTelnetServerPort, ipNewCfgGwTable=ipNewCfgGwTable, vrrpCurCfgIfTableEntry=vrrpCurCfgIfTableEntry, ospfCurCfgFixedOutRmapList=ospfCurCfgFixedOutRmapList, igmpSnoopCurCfgFlood=igmpSnoopCurCfgFlood, igmpStaticMrtrNewCfgIndx=igmpStaticMrtrNewCfgIndx, stgNewCfgPortPriority=stgNewCfgPortPriority, ipNewCfgNwfIndex=ipNewCfgNwfIndex, ripNewCfgFixedMetric=ripNewCfgFixedMetric, layer3Info=layer3Info, ospfNewCfgRangeIndex=ospfNewCfgRangeIndex, ospfIfInfoRouterID=ospfIfInfoRouterID, aclCurCfgTCPFlags=aclCurCfgTCPFlags, ospfAreaNbrRstAd=ospfAreaNbrRstAd, markerpdusRx=markerpdusRx, ipOspfMd5keyInfoTable=ipOspfMd5keyInfoTable, mstCistNewCfgPortPathCost=mstCistNewCfgPortPathCost, allportsStatsInUnknownProtos=allportsStatsInUnknownProtos)
mibBuilder.exportSymbols("BLADETYPE4-NETWORK-MIB", agNewCfgHttpsServerPort=agNewCfgHttpsServerPort, mstCistCurCfgPortPriority=mstCistCurCfgPortPriority, radNewCfgSecBd=radNewCfgSecBd, igmpMrtrInfoPortId=igmpMrtrInfoPortId, qosNewCfgCosIndex=qosNewCfgCosIndex, lacpNewPortCfgTable=lacpNewPortCfgTable, trunkGroupNewCfgRemovePort=trunkGroupNewCfgRemovePort, ospfCumRxDatabase=ospfCumRxDatabase, dhcpInfoMacAddr=dhcpInfoMacAddr, lacpCurSystemPriority=lacpCurSystemPriority, ufdNewCfgLtDPorts=ufdNewCfgLtDPorts, ospfCurCfgVirtIntfIndex=ospfCurCfgVirtIntfIndex, authEapLogoffWhileAuthenticated=authEapLogoffWhileAuthenticated, vrrpInfoVirtRtrTableEntry=vrrpInfoVirtRtrTableEntry, fdbEntry=fdbEntry, fdbState=fdbState, tacCurCfgCmdAuthor=tacCurCfgCmdAuthor, ospfAreaInfoEntry=ospfAreaInfoEntry, unknownRx=unknownRx, stgNewCfgTable=stgNewCfgTable, stgNewCfgAddVlan=stgNewCfgAddVlan, swDefGwUp=swDefGwUp, radNewCfgRetries=radNewCfgRetries, lacpInfoAggrActSysPrio=lacpInfoAggrActSysPrio, dnsStats=dnsStats, ipOspfRedistributeRipInfo=ipOspfRedistributeRipInfo, portInfoLink=portInfoLink, stpInfoPortDesignatedCost=stpInfoPortDesignatedCost, ospfCumRxlsUpdates=ospfCumRxlsUpdates, agMgmtNetConfig=agMgmtNetConfig, igmpSnoopCurCfgMrto=igmpSnoopCurCfgMrto, ufdCurCfgState=ufdCurCfgState, vrrpNewCfgVirtRtrGrpIfIndex=vrrpNewCfgVirtRtrGrpIfIndex, ipGeneralCfg=ipGeneralCfg, vrrpCurCfgGenTckVirtRtrInc=vrrpCurCfgGenTckVirtRtrInc, ipNewCfgStaticArpTable=ipNewCfgStaticArpTable, tacCurCfgPort=tacCurCfgPort, aclNewCfgUser=aclNewCfgUser, igmpFltNewCfgAction=igmpFltNewCfgAction, agTransferTSDumpFileName=agTransferTSDumpFileName, ipInfo=ipInfo, ospfCumIntfBackup=ospfCumIntfBackup, dnsNewCfgPrimaryIpAddr=dnsNewCfgPrimaryIpAddr, mstCistCurCfgPortHelloTime=mstCistCurCfgPortHelloTime, agApplyConfiguration=agApplyConfiguration, mstCistCurCfgPortLinkType=mstCistCurCfgPortLinkType, portInfoTable=portInfoTable, stgCurCfgStgIndex=stgCurCfgStgIndex, fdbTable=fdbTable, sfpInfoPort=sfpInfoPort, arpStatEntries=arpStatEntries, fdbNewCfgAddVlan=fdbNewCfgAddVlan, ospfVirtIntfInfoIpAddr=ospfVirtIntfInfoIpAddr, agCurCfgSyslogTrapOspf=agCurCfgSyslogTrapOspf, ospfIntfTxDatabase=ospfIntfTxDatabase, agPortConfig=agPortConfig, ospfIfNbrEntry=ospfIfNbrEntry, ospfIntfNbrBadSequence=ospfIntfNbrBadSequence, aclCurCfgMeterAction=aclCurCfgMeterAction, lacpCurPortState=lacpCurPortState, ipStats=ipStats, mstCistNewCfgPortTable=mstCistNewCfgPortTable, ipStaticArpTableMaxSize=ipStaticArpTableMaxSize, swTrapDisplayString=swTrapDisplayString, ospfNewCfgAreaSpfInterval=ospfNewCfgAreaSpfInterval, aclCurCfgOutprofDscp=aclCurCfgOutprofDscp, dot1pInfoPriorityIndex=dot1pInfoPriorityIndex, aclNewCfgDelete=aclNewCfgDelete, ipOspfAreaInfoTable=ipOspfAreaInfoTable, vrrpOperVirtRtrIndex=vrrpOperVirtRtrIndex, aclCurCfgDstPortMask=aclCurCfgDstPortMask, ospfCurCfgRipMetric=ospfCurCfgRipMetric, stgCurCfgPortIndex=stgCurCfgPortIndex, agNewCfgTrapSrcIf=agNewCfgTrapSrcIf, lacpInfoPortOperTable=lacpInfoPortOperTable, ufdCurCfgLtMTrunks=ufdCurCfgLtMTrunks, vrrpStats=vrrpStats, ipCurCfgNwfEntry=ipCurCfgNwfEntry, ipCurCfgAlistTable=ipCurCfgAlistTable, ospfAreaNbrBadRequests=ospfAreaNbrBadRequests, ipOspfVirtIntfInfoRetra=ipOspfVirtIntfInfoRetra, agPortOperTableEntry=agPortOperTableEntry, cistInfoPortPriority=cistInfoPortPriority, ipCurCfgStaticArpMAC=ipCurCfgStaticArpMAC, ipOspfHostInfoIndex=ipOspfHostInfoIndex, portStatsTableEntry=portStatsTableEntry, vlanNewCfgStg=vlanNewCfgStg, vrrpCurCfgVirtRtrIndx=vrrpCurCfgVirtRtrIndx, tcpClearStats=tcpClearStats, ufdLtDAdminkeyNewCfg=ufdLtDAdminkeyNewCfg, tacCurCfgState=tacCurCfgState, ospfIntfRxlsUpdates=ospfIntfRxlsUpdates, dhcpInfo=dhcpInfo, agSyslogMessage=agSyslogMessage, ipGatewayTableMax=ipGatewayTableMax, agCurCfgSyslogTrapConsole=agCurCfgSyslogTrapConsole, ospfAreaNbrBadSequence=ospfAreaNbrBadSequence, qos=qos, agNewCfgSyslogTrapStg=agNewCfgSyslogTrapStg, ospfNewCfgFixedAddOutRmap=ospfNewCfgFixedAddOutRmap, portStatsPhyIfOutUcastPkts=portStatsPhyIfOutUcastPkts, tacCurCfgBackdoor=tacCurCfgBackdoor, ospfAreaNbrChangeStatsEntry=ospfAreaNbrChangeStatsEntry, arpInfoEntry=arpInfoEntry, udpStats=udpStats, lacpInfoPortActAdColl=lacpInfoPortActAdColl, ospfNewCfgIntfStatus=ospfNewCfgIntfStatus, ufdLtDAdminkeyCurCfgTable=ufdLtDAdminkeyCurCfgTable, clearPortsStats=clearPortsStats, ripCurCfgIntfMcastUpdate=ripCurCfgIntfMcastUpdate, agPortNewCfgGigEthFctl=agPortNewCfgGigEthFctl, ospfCurCfgLSDB=ospfCurCfgLSDB, lacpStatsTable=lacpStatsTable, ufdNewCfgState=ufdNewCfgState, aclNewCfgProtocol=aclNewCfgProtocol, portStatsPhyIfInMulticastPkts=portStatsPhyIfInMulticastPkts, dot1xCurCfgGlobalRaPeriod=dot1xCurCfgGlobalRaPeriod, aclCurCfgTos=aclCurCfgTos, ripStatInBadSourceIP=ripStatInBadSourceIP, ufdInfoLtDStatus=ufdInfoLtDStatus, lacpNewPortActorPortPriority=lacpNewPortActorPortPriority, rip2NewCfgUpdatePeriod=rip2NewCfgUpdatePeriod, portStatsPhyIfInUcastPkts=portStatsPhyIfInUcastPkts, ipCurCfgGwRetry=ipCurCfgGwRetry, agImageForNxtReset=agImageForNxtReset, agPortCurCfgDLFThresholdRate=agPortCurCfgDLFThresholdRate, ipNewCfgStaticRouteGateway=ipNewCfgStaticRouteGateway, igmpSnoopCurCfgAggrEnaDis=igmpSnoopCurCfgAggrEnaDis, stgCurCfgState=stgCurCfgState, ospfIntfNbrBadRequests=ospfIntfNbrBadRequests, agDiffString=agDiffString, authEntersConnecting=authEntersConnecting, agApply=agApply, ipCurCfgIntfIndex=ipCurCfgIntfIndex, ntpSecondaryServerRespRcvd=ntpSecondaryServerRespRcvd, ospfNewCfgVirtIntfHello=ospfNewCfgVirtIntfHello, ospfAreaRxlsReqs=ospfAreaRxlsReqs, allportsStatsOutMcast=allportsStatsOutMcast, agAccessUserCurCfgTableEntry=agAccessUserCurCfgTableEntry, ripNewCfgStaticMetric=ripNewCfgStaticMetric, updateCurCfgState=updateCurCfgState, vrrpCurCfgIfPasswd=vrrpCurCfgIfPasswd, igmpStaticMrtrCurCfgPortId=igmpStaticMrtrCurCfgPortId, agTacacsUserMapNewCfgTableEntry=agTacacsUserMapNewCfgTableEntry, lacpCurPortCfgTable=lacpCurPortCfgTable, ntpPrimaryServerUpdates=ntpPrimaryServerUpdates, vrrpInfo=vrrpInfo, pmNewCfgPortMonitorTable=pmNewCfgPortMonitorTable, ipNewCfgGwArp=ipNewCfgGwArp, trunkGroupInfoPortTable=trunkGroupInfoPortTable, agAccessUserMaxUserID=agAccessUserMaxUserID, ospfVirtIntfInfoEntry=ospfVirtIntfInfoEntry, fdbStatus=fdbStatus, lacpInfoAggrPorts=lacpInfoAggrPorts, agNewCfgSyslogTrapAll=agNewCfgSyslogTrapAll, vrrpCurCfgVirtRtrState=vrrpCurCfgVirtRtrState, ospfAreaRxHello=ospfAreaRxHello, allportsStatsipInHeaderErrors=allportsStatsipInHeaderErrors, mpCpuStatsUtil4Seconds=mpCpuStatsUtil4Seconds, fdbInfo=fdbInfo, ipStatsInDelivers=ipStatsInDelivers, ospfCurCfgRangeMask=ospfCurCfgRangeMask, aclNewCfgPortRemoveAcl=aclNewCfgPortRemoveAcl, agSaveConfiguration=agSaveConfiguration, agPortNewCfgGigEthMode=agPortNewCfgGigEthMode, ospfCumRxlsAcks=ospfCumRxlsAcks, radCurCfgSecBd=radCurCfgSecBd, agPortCurCfgPVID=agPortCurCfgPVID, ospfNewCfgHostTable=ospfNewCfgHostTable, mstNewCfgState=mstNewCfgState, ospfLsdbInfoAreaId=ospfLsdbInfoAreaId, dot1xNewCfgPortTxPeriod=dot1xNewCfgPortTxPeriod, swValidLogin=swValidLogin, thashL2=thashL2, qosNewCfgPortIndex=qosNewCfgPortIndex, dot1x=dot1x, agPortNewCfgPortMediat=agPortNewCfgPortMediat, tacCurCfgRetries=tacCurCfgRetries, agPortCurCfgPortMediat=agPortCurCfgPortMediat, agTransferLastActionStatus=agTransferLastActionStatus, qosCurCfgPriorityCoSq=qosCurCfgPriorityCoSq, ospfCurCfgRangeIndex=ospfCurCfgRangeIndex, cistRegionalRoot=cistRegionalRoot, icmpStatsOutEchoReps=icmpStatsOutEchoReps, ospfCumNbrBadSequence=ospfCumNbrBadSequence, agPortCurCfgLinkTrap=agPortCurCfgLinkTrap, aclNewCfgStatistics=aclNewCfgStatistics, trunkGroupInfoTableEntry=trunkGroupInfoTableEntry, stpInfoBrgPriority=stpInfoBrgPriority, agPortCurCfgDLFThreshold=agPortCurCfgDLFThreshold, vrrpCurCfgVirtRtrTckVirtRtr=vrrpCurCfgVirtRtrTckVirtRtr, ospfIntfNbrNegotiationDone=ospfIntfNbrNegotiationDone, ipRouteInfoMetric=ipRouteInfoMetric, udpStatsInDatagrams=udpStatsInDatagrams, lacpInfoPortPartOpSysPrio=lacpInfoPortPartOpSysPrio, aclNewCfgTypeOfService=aclNewCfgTypeOfService, igmpSnoopCurCfgCpu=igmpSnoopCurCfgCpu, rip2Cfg=rip2Cfg, vrrpCurCfgVirtRtrTckIpIntf=vrrpCurCfgVirtRtrTckIpIntf, trunkGroupCurCfgTableEntry=trunkGroupCurCfgTableEntry, traps=traps, ospfSumRangesInfoEntry=ospfSumRangesInfoEntry, ntpSecondaryServerUpdates=ntpSecondaryServerUpdates, qosCurCfgPriorityCoSEntry=qosCurCfgPriorityCoSEntry, ipOspfAreaInfoStatus=ipOspfAreaInfoStatus, cistInfoPortLinkType=cistInfoPortLinkType, ospfIntfErrAreaMismatch=ospfIntfErrAreaMismatch, ospfCurCfgHostIndex=ospfCurCfgHostIndex, sshNewCfgIntrval=sshNewCfgIntrval, igmpMrtrInfoIndex=igmpMrtrInfoIndex, ospfAreaErrDeadMismatch=ospfAreaErrDeadMismatch, ospfExternalLsa=ospfExternalLsa, vrrpNewCfgVirtRtrTable=vrrpNewCfgVirtRtrTable, arpInfoVLAN=arpInfoVLAN, ipCurCfgRmapState=ipCurCfgRmapState, lacpInfoPortActAdSync=lacpInfoPortActAdSync, ospfIfInfoDesignatedRouterID=ospfIfInfoDesignatedRouterID, aclNewCfgTCPFlagsMask=aclNewCfgTCPFlagsMask, ospfVirtIntfInfoEvents=ospfVirtIntfInfoEvents, igmpSnoopNewCfgAggrEnaDis=igmpSnoopNewCfgAggrEnaDis, lacpInfoPortOperTableEntry=lacpInfoPortOperTableEntry, swNtpNotServer=swNtpNotServer, aclNewCfgPortRemoveAclGrp=aclNewCfgPortRemoveAclGrp, ripClearStats=ripClearStats, portInfoPhyIfLastChange=portInfoPhyIfLastChange, ospfTmrsKckOffRetransmit=ospfTmrsKckOffRetransmit, agSlotNumber=agSlotNumber, vrrpCurCfgVirtRtrGrpState=vrrpCurCfgVirtRtrGrpState, ospfNewCfgDefaultRouteMetric=ospfNewCfgDefaultRouteMetric, ospfNewCfgAreaStatus=ospfNewCfgAreaStatus, ospfIfNbrIpAddress=ospfIfNbrIpAddress, ospfIntfNbrRstAd=ospfIntfNbrRstAd, igmpSnoopStatsEntry=igmpSnoopStatsEntry, geaportInfoPort=geaportInfoPort, dot1xCurCfgPortMode=dot1xCurCfgPortMode, ospfCumNbrhello=ospfCumNbrhello, ospfCurCfgVirtIntfTable=ospfCurCfgVirtIntfTable, igmpSnoopCurCfgSrcIp=igmpSnoopCurCfgSrcIp, lacpInfoAggrActOperKey=lacpInfoAggrActOperKey, ipNewCfgRmapEntry=ipNewCfgRmapEntry, aclNewCfgUserEnable=aclNewCfgUserEnable, vlanNewCfgAddPort=vlanNewCfgAddPort, fdbStatsCurrent=fdbStatsCurrent, ospfCurCfgIntfEntry=ospfCurCfgIntfEntry, agNewCfgResetControl=agNewCfgResetControl, lacpInfoPortActAdPortState=lacpInfoPortActAdPortState, ospfIntfNbrLoadingDone=ospfIntfNbrLoadingDone, ospfCumRxPkts=ospfCumRxPkts, arpInfoTable=arpInfoTable, vrrpNewCfgVirtRtrGrpID=vrrpNewCfgVirtRtrGrpID, agTacacsConfig=agTacacsConfig, pktStatsAllocFails=pktStatsAllocFails, igmpStaticMrtrNewCfgVlanId=igmpStaticMrtrNewCfgVlanId, agCurCfgSyslogTrapVrrp=agCurCfgSyslogTrapVrrp)
mibBuilder.exportSymbols("BLADETYPE4-NETWORK-MIB", ipCurCfgRouterID=ipCurCfgRouterID, stpInfoPortState=stpInfoPortState, lacpInfoAggrTableEntry=lacpInfoAggrTableEntry, stpInfoState=stpInfoState, dot1xSystemInfo=dot1xSystemInfo, ipNewCfgNwfTable=ipNewCfgNwfTable, vrrpNewCfgVirtRtrPreempt=vrrpNewCfgVirtRtrPreempt, ipInterfaceTableMax=ipInterfaceTableMax, agCurCfgIdleCLITimeout=agCurCfgIdleCLITimeout, ospfCurCfgRangeHideState=ospfCurCfgRangeHideState, ripInfoIntfDefault=ripInfoIntfDefault, ospfIfInfoState=ospfIfInfoState, ospfCurCfgIntfDead=ospfCurCfgIntfDead, ospfVirtIntfInfoNbr=ospfVirtIntfInfoNbr, aclCurCfgEthFmt=aclCurCfgEthFmt, ripStatInBadZeros=ripStatInBadZeros, ospfAreaNbrExchangeDone=ospfAreaNbrExchangeDone, cistInfoPortPathCost=cistInfoPortPathCost, vrrpNewCfgVirtRtrAddr=vrrpNewCfgVirtRtrAddr, trunkGroupTableMaxSize=trunkGroupTableMaxSize, illegalRx=illegalRx, ospfCumIntfLoop=ospfCumIntfLoop, agSSHConfig=agSSHConfig, aclNewCfgPktfmtReset=aclNewCfgPktfmtReset, agNewCfgNTPService=agNewCfgNTPService, stgNewCfgDefaultCfg=stgNewCfgDefaultCfg, ospfAreaInfoASBoundaryRouter=ospfAreaInfoASBoundaryRouter, ospfIfInfoAuthType=ospfIfInfoAuthType, rip2CurCfgState=rip2CurCfgState, vrrpStatBadAddress=vrrpStatBadAddress, ospfCurCfgAreaAuthType=ospfCurCfgAreaAuthType, ospfSumRangesInfoArea=ospfSumRangesInfoArea, agAccessUserNewCfgTable=agAccessUserNewCfgTable, ospfAreaBoundaryRouter=ospfAreaBoundaryRouter, trunkGroupInfoPortStatus=trunkGroupInfoPortStatus, ospfAreaInfoSPF=ospfAreaInfoSPF, ipNewCfgNwfState=ipNewCfgNwfState, ipOspfIntfInfoMdkey=ipOspfIntfInfoMdkey, ospfAreaNbrDown=ospfAreaNbrDown, agCfgDumpIndex=agCfgDumpIndex, ospfCurCfgIntfId=ospfCurCfgIntfId, ospfVirtIntfTableMaxSize=ospfVirtIntfTableMaxSize, agNewCfgSyslogTrapCfg=agNewCfgSyslogTrapCfg, agSoftwareVersion=agSoftwareVersion, ripNewCfgOspfRemoveOutRmap=ripNewCfgOspfRemoveOutRmap, agPortNewCfgType=agPortNewCfgType, mstCistCurCfgPortStpState=mstCistCurCfgPortStpState, ospfIntfLoop=ospfIntfLoop, igmpClearAllStats=igmpClearAllStats, portStatsPhyIfOutMulticastPkts=portStatsPhyIfOutMulticastPkts, agNewCfgSyslogTrapConsole=agNewCfgSyslogTrapConsole, aclGroupNewCfgAddAcl=aclGroupNewCfgAddAcl, allportsStatsInMcast=allportsStatsInMcast, agTransferImageFileName=agTransferImageFileName, ospfCurCfgDefaultRouteMetric=ospfCurCfgDefaultRouteMetric, ospfVirtIntfInfoWait=ospfVirtIntfInfoWait, portStatsPhyIfOutNUcastPkts=portStatsPhyIfOutNUcastPkts, ipNewCfgGwDelete=ipNewCfgGwDelete, agPortCurCfgType=agPortCurCfgType, ipRouteInfoDestIp=ipRouteInfoDestIp, portStatsPhyIfInUnknownProtos=portStatsPhyIfInUnknownProtos, aclCurCfgUser=aclCurCfgUser, stpInfoPortDesignatedBridge=stpInfoPortDesignatedBridge, igmpSnoopNewCfgVlanFastlvAdd=igmpSnoopNewCfgVlanFastlvAdd, sshNewCfgSKeyGen=sshNewCfgSKeyGen, vrrpNewCfgVirtRtrInterval=vrrpNewCfgVirtRtrInterval, pktStatsSmalls=pktStatsSmalls, ospfAreaErrIndex=ospfAreaErrIndex, swUfdfoLtDAutoEna=swUfdfoLtDAutoEna, ospfLsdbInfoSequence=ospfLsdbInfoSequence, ospfInfo=ospfInfo, agTransferAction=agTransferAction, aclCurCfgDstIPMask=aclCurCfgDstIPMask, igmpInfoVlanId=igmpInfoVlanId, aclNewCfgTagFmt=aclNewCfgTagFmt, ospfCurCfgHostEntry=ospfCurCfgHostEntry, radCurCfgSecondaryServer=radCurCfgSecondaryServer, lacpStatsIndex=lacpStatsIndex, swDefGwInService=swDefGwInService, aclNewCfgKbitsSec=aclNewCfgKbitsSec, igmpFltNewCfgPortRemFiltRule=igmpFltNewCfgPortRemFiltRule, sshNewCfgScpApplySave=sshNewCfgScpApplySave, ospfNewCfgRangeTable=ospfNewCfgRangeTable, ospfAreaNbrIndex=ospfAreaNbrIndex, ospfIfNbrDesignatedRtr=ospfIfNbrDesignatedRtr, agPortNewCfgGigEthSpeed=agPortNewCfgGigEthSpeed, ipOspfVirtIntfInfoEntry=ipOspfVirtIntfInfoEntry, vrrpStatBadData=vrrpStatBadData, ospfAreaTableMaxSize=ospfAreaTableMaxSize, lacpInfoAggrReadyState=lacpInfoAggrReadyState, ipOspfIntfInfoCost=ipOspfIntfInfoCost, ipNewCfgStaticArpMAC=ipNewCfgStaticArpMAC, ospfAreaInfoLsTypesAccepted=ospfAreaInfoLsTypesAccepted, authEapLogoffsWhileConnecting=authEapLogoffsWhileConnecting, portOperState=portOperState, allportsStatsTableEntry=allportsStatsTableEntry, ipCurCfgBootpAddr2=ipCurCfgBootpAddr2, ipNewCfgStaticArpVlan=ipNewCfgStaticArpVlan, agPortNewCfgMulticastThresholdRate=agPortNewCfgMulticastThresholdRate, vrrpCurCfgVirtRtrGrpTckVlanPort=vrrpCurCfgVirtRtrGrpTckVlanPort, ospfGeneral=ospfGeneral, vrrpInfoVirtRtrIfIndex=vrrpInfoVirtRtrIfIndex, vrrpCurCfgVirtRtrGrpInterval=vrrpCurCfgVirtRtrGrpInterval, vrrpStatBadInterval=vrrpStatBadInterval, ospfNewCfgFixedRemoveOutRmap=ospfNewCfgFixedRemoveOutRmap, igmpSnoopNewCfgQInterval=igmpSnoopNewCfgQInterval, fdbNewCfgDelStaticEntry=fdbNewCfgDelStaticEntry, mirroring=mirroring, ipOspfVirtIntfInfoIndex=ipOspfVirtIntfInfoIndex, ospfAreaIntfHello=ospfAreaIntfHello, agTransferDumpFileName=agTransferDumpFileName, rxIgmpValidPkts=rxIgmpValidPkts, ospfCurCfgIntfHello=ospfCurCfgIntfHello, ripStatInRequestPkts=ripStatInRequestPkts, ufdNewCfgAddLtDPort=ufdNewCfgAddLtDPort, aclCurCfgTable=aclCurCfgTable, fdbGeneralCfg=fdbGeneralCfg, igmpStats=igmpStats, aclCurCfgGroup=aclCurCfgGroup, ospfNewCfgRangeEntry=ospfNewCfgRangeEntry, ufdInfoLtDTrunks=ufdInfoLtDTrunks, igmpInfoPortNum=igmpInfoPortNum, ospfIfInfoDead=ospfIfInfoDead, igmpSnoopNewCfgRobust=igmpSnoopNewCfgRobust, agLastSetErrorReason=agLastSetErrorReason, ospfIntfErrorStatsEntry=ospfIntfErrorStatsEntry, lacpInfoAggrNumPorts=lacpInfoAggrNumPorts, agNewCfgSyslogTrapRmon=agNewCfgSyslogTrapRmon, lacpInfoPortPartOpPortState=lacpInfoPortPartOpPortState, vrrpNewCfgIfDelete=vrrpNewCfgIfDelete, aclNewCfgOutprofDscpEnable=aclNewCfgOutprofDscpEnable, radNewCfgTimeout=radNewCfgTimeout, igmpInfoExpires=igmpInfoExpires, arpCacheClear=arpCacheClear, ipCurCfgStaticRouteInterface=ipCurCfgStaticRouteInterface, ipOspfVirtIntfInfoAreaId=ipOspfVirtIntfInfoAreaId, eapolRespIdFramesRx=eapolRespIdFramesRx, ospfNewCfgMdkeyDelete=ospfNewCfgMdkeyDelete, tcpStatsRtoMin=tcpStatsRtoMin, ospfAreaTxPkts=ospfAreaTxPkts, agPortNewCfgLinkTrap=agPortNewCfgLinkTrap, igmpStaticMrtrCurCfgVersion=igmpStaticMrtrCurCfgVersion, agAccessUserNewCfgName=agAccessUserNewCfgName, cistRootHelloTime=cistRootHelloTime, ipCurCfgGwState=ipCurCfgGwState, stgNewCfgRemoveVlan=stgNewCfgRemoveVlan, fdbMacAddr=fdbMacAddr, agCurCfgSyslogSev=agCurCfgSyslogSev, aclCurCfgInprofDscp=aclCurCfgInprofDscp, aclNewCfgTcpudpReset=aclNewCfgTcpudpReset, agNewCfgSyslogSev=agNewCfgSyslogSev, rxIgmpGrpSpecificQueries=rxIgmpGrpSpecificQueries, ipCurCfgStaticArpVlan=ipCurCfgStaticArpVlan, agPortCurCfgMulticastThreshold=agPortCurCfgMulticastThreshold, qosCurCfgCosWeight=qosCurCfgCosWeight, ipOspfInfoLsdbLimit=ipOspfInfoLsdbLimit, agNewCfgIdleCLITimeout=agNewCfgIdleCLITimeout, agPortNewCfgVlanTag=agPortNewCfgVlanTag, portInfoMedia=portInfoMedia, ipOspfHostInfoCost=ipOspfHostInfoCost, ipOspfVirtIntfInfoAuthKey=ipOspfVirtIntfInfoAuthKey, tacCurCfgAuthenString=tacCurCfgAuthenString, dnsStatInBadDnsRequests=dnsStatInBadDnsRequests, ipCurCfgStaticRouteMask=ipCurCfgStaticRouteMask, ipRouteInfoTag=ipRouteInfoTag, ripCurCfgFixedMetric=ripCurCfgFixedMetric, portStatsIndx=portStatsIndx, agCurCfgNTPResyncInterval=agCurCfgNTPResyncInterval, agApplyString=agApplyString, ipStatsInAddrErrors=ipStatsInAddrErrors, ospfIfInfoIpAddress=ospfIfInfoIpAddress, igmpSnoopNewCfgCpu=igmpSnoopNewCfgCpu, igmpFltNewCfgState=igmpFltNewCfgState, agNewCfgNTPSecServer=agNewCfgNTPSecServer, ospfIntfErrAuthFailure=ospfIntfErrAuthFailure, ipFwdCurCfgState=ipFwdCurCfgState, qosNewCfgPortPriority=qosNewCfgPortPriority, aclGroupNewCfgIndex=aclGroupNewCfgIndex, ospfRoutesInfoVia=ospfRoutesInfoVia, radCurCfgPrimaryServer=radCurCfgPrimaryServer, arpInfoDestIp=arpInfoDestIp, portInfoSpeed=portInfoSpeed, agCurCfgSyslogTrapCli=agCurCfgSyslogTrapCli, ospfIfInfoEvents=ospfIfInfoEvents, ospfIfInfoDesignatedRouterIpAddress=ospfIfInfoDesignatedRouterIpAddress, icmpStatsOutTimeExcds=icmpStatsOutTimeExcds, ipNewCfgStaticRouteAction=ipNewCfgStaticRouteAction, ospfCumNbrN2way=ospfCumNbrN2way, lacpInfoPortPartOpColl=lacpInfoPortPartOpColl, ripNewCfgIntfTable=ripNewCfgIntfTable, qosCurCfgCosIndex=qosCurCfgCosIndex, sshCurCfgScpApplySave=sshCurCfgScpApplySave, ospfNbrInExchState=ospfNbrInExchState, ripNewCfgIntfTrigUpdate=ripNewCfgIntfTrigUpdate, lacpInfoPortOperState=lacpInfoPortOperState, rip2GeneralInfo=rip2GeneralInfo, ripInfoIntfMcastUpdate=ripInfoIntfMcastUpdate, ripStatInPackets=ripStatInPackets, sshNewVersion1Support=sshNewVersion1Support, layer2=layer2, lacpInfoPortActAdAggr=lacpInfoPortActAdAggr, swDefGwNotInService=swDefGwNotInService, ospfCurCfgVirtIntfTrans=ospfCurCfgVirtIntfTrans, maxBlockInLpmTable=maxBlockInLpmTable, ospfNewCfgHostEntry=ospfNewCfgHostEntry, ipNewCfgRmapState=ipNewCfgRmapState, allportsStatsInUcast=allportsStatsInUcast, igmpFltNewCfgMcastIp1=igmpFltNewCfgMcastIp1, ospfAreaInfoNeighborsFULLstate=ospfAreaInfoNeighborsFULLstate, ufdNewCfgAddLtDTrunk=ufdNewCfgAddLtDTrunk, qosCurCfgPortPriority=qosCurCfgPortPriority, ipCurCfgStaticRouteTable=ipCurCfgStaticRouteTable, agAccessUserCurCfgPswd=agAccessUserCurCfgPswd, cistInfo=cistInfo, agTransferUserName=agTransferUserName, ospfCurCfgRipOutRmapList=ospfCurCfgRipOutRmapList, ipNewCfgNwfEntry=ipNewCfgNwfEntry, ripStatOutPackets=ripStatOutPackets, ospfCumNbrBadRequests=ospfCumNbrBadRequests, stgCurCfgPortTable=stgCurCfgPortTable, tacCurCfgCmdLogging=tacCurCfgCmdLogging, stgNewCfgPortTableEntry=stgNewCfgPortTableEntry, ospfAreaInfoTable=ospfAreaInfoTable, agTransferServer=agTransferServer, authEapStartsWhileAuthenticated=authEapStartsWhileAuthenticated, trunkGroupCurCfgState=trunkGroupCurCfgState, markerpdusTx=markerpdusTx, sfpInfoDevice=sfpInfoDevice, agSyslog=agSyslog, aclCurCfgFilterAction=aclCurCfgFilterAction, ripCurCfgFixedOutRmapList=ripCurCfgFixedOutRmapList, ripCurCfgOspfOutRmapList=ripCurCfgOspfOutRmapList, vrrpNewCfgVirtRtrGrpTableEntry=vrrpNewCfgVirtRtrGrpTableEntry, ipOspfRedistributeRipInfoOutRmapList=ipOspfRedistributeRipInfoOutRmapList, eapolFramesRx=eapolFramesRx, swUfdfoLtDAutoDis=swUfdfoLtDAutoDis, dot1xCurCfgPortQtPeriod=dot1xCurCfgPortQtPeriod, hwRevision=hwRevision, aclNewCfgSrcMACAddress=aclNewCfgSrcMACAddress, vrrpCurCfgVirtRtrGrpIndx=vrrpCurCfgVirtRtrGrpIndx, igmpMrtrInfoVlanId=igmpMrtrInfoVlanId, vrrpCurCfgIfAuthType=vrrpCurCfgIfAuthType, igmpSnoopCfg=igmpSnoopCfg, ntpStats=ntpStats, dhcpInfoAddr=dhcpInfoAddr, lacpdusTx=lacpdusTx, qosCurCfgPortPriorityEntry=qosCurCfgPortPriorityEntry, dot1xCurCfgPortReAuth=dot1xCurCfgPortReAuth, vrrpNewCfgGenTckVlanPortInc=vrrpNewCfgGenTckVlanPortInc, vrrpStatOutBadAdvers=vrrpStatOutBadAdvers, ipOspfHostInfoIpAddr=ipOspfHostInfoIpAddr, ipOspfMd5keyInfoEntry=ipOspfMd5keyInfoEntry, dot1xInfoPortAuthMode=dot1xInfoPortAuthMode, agNewCfgNTPResyncInterval=agNewCfgNTPResyncInterval)
mibBuilder.exportSymbols("BLADETYPE4-NETWORK-MIB", pktStatsJumbos=pktStatsJumbos, vrrpNewCfgVirtRtrGrpPreempt=vrrpNewCfgVirtRtrGrpPreempt, dot1xNewCfgGlobalMaxRq=dot1xNewCfgGlobalMaxRq, rip2Info=rip2Info, stgNewCfgPortTable=stgNewCfgPortTable, ospfCurCfgIntfCost=ospfCurCfgIntfCost, ripStatInBadVersion=ripStatInBadVersion, agCfgDumpTable=agCfgDumpTable, stpStats=stpStats, agRadiusConfig=agRadiusConfig, ospfAreaInfoStatus=ospfAreaInfoStatus, aclCurCfgEthernetTypeName=aclCurCfgEthernetTypeName, icmpStatsInAddrMasks=icmpStatsInAddrMasks, qosNewCfgPriorityCoSq=qosNewCfgPriorityCoSq, ufdInfoLtDAdminkey=ufdInfoLtDAdminkey, agPortNewCfgTagPVID=agPortNewCfgTagPVID, agCfgDump=agCfgDump, aclNewCfgVLanMask=aclNewCfgVLanMask, vrrpInfoVirtRtrState=vrrpInfoVirtRtrState, tacCurCfgPrimaryServer=tacCurCfgPrimaryServer, agNewCfgMgmtNetDelete=agNewCfgMgmtNetDelete, ospfCurCfgMdkeyKey=ospfCurCfgMdkeyKey, agCurCfgSyslogTrapUfd=agCurCfgSyslogTrapUfd, sfpInfoTXFault=sfpInfoTXFault, agNewCfgBootp=agNewCfgBootp, ipOspfInfoRouterID=ipOspfInfoRouterID, ospfCurCfgRipMetricType=ospfCurCfgRipMetricType, ipOspfVirtIntfInfoDead=ipOspfVirtIntfInfoDead, ospfTotalNumberOfInterfaces=ospfTotalNumberOfInterfaces, ufdNoLtMLinkBlockingState=ufdNoLtMLinkBlockingState, ospfCumIntfDown=ospfCumIntfDown, agNewBootNxtCliMode=agNewBootNxtCliMode, portStatsPhyIfInErrors=portStatsPhyIfInErrors, ipOspfIntfInfoTrans=ipOspfIntfInfoTrans, lacpNewPortActorAdminKey=lacpNewPortActorAdminKey, ospfCurCfgVirtIntfStatus=ospfCurCfgVirtIntfStatus, tcpStats=tcpStats, ipInfoFwdState=ipInfoFwdState, ospfCurCfgAreaType=ospfCurCfgAreaType, ipOspfIntfInfoTable=ipOspfIntfInfoTable, ripInfoIntfKey=ripInfoIntfKey, agNewCfgMgmtNetEntry=agNewCfgMgmtNetEntry, agCurCfgTftpServerPort=agCurCfgTftpServerPort, ipNewCfgGwInterval=ipNewCfgGwInterval, aclCurCfgEntry=aclCurCfgEntry, vrrpCurCfgVirtRtrIfIndex=vrrpCurCfgVirtRtrIfIndex, ripInfoIntfVersion=ripInfoIntfVersion, dnsCurCfgSecondaryIpAddr=dnsCurCfgSecondaryIpAddr, mstCistCurCfgBridgeMaxAge=mstCistCurCfgBridgeMaxAge, gatewayInfoAddr=gatewayInfoAddr, ospfNewCfgStaticOutRmapList=ospfNewCfgStaticOutRmapList, ipNewCfgIntfIndex=ipNewCfgIntfIndex, agPortCurCfgBroadcastThresholdRate=agPortCurCfgBroadcastThresholdRate, routeTableClear=routeTableClear, stgNewCfgIndex=stgNewCfgIndex, tacNewCfgBackdoor=tacNewCfgBackdoor, dot1xCurCfgGlobalQtPeriod=dot1xCurCfgGlobalQtPeriod, hpProLiant_GbE2c_InterconnectSwitch=hpProLiant_GbE2c_InterconnectSwitch, sfpInfoTXEnable=sfpInfoTXEnable, memoryFreeStats=memoryFreeStats, ospfCumTxlsUpdates=ospfCumTxlsUpdates, lacpInfoPortActAdExp=lacpInfoPortActAdExp, dot1pInfoPortIndex=dot1pInfoPortIndex, ipNewCfgNwfDelete=ipNewCfgNwfDelete, tacNewCfgSecBd=tacNewCfgSecBd, cistBridgeMaxAge=cistBridgeMaxAge, aclNewCfgDstIPAddress=aclNewCfgDstIPAddress, igmpSnoopNewCfgFlood=igmpSnoopNewCfgFlood, mstpDigest=mstpDigest, portOperDot1xIndx=portOperDot1xIndx, tcpStatsRtoAlgorithm=tcpStatsRtoAlgorithm, ospfNewCfgRangeDelete=ospfNewCfgRangeDelete, portOperDot1xTableEntry=portOperDot1xTableEntry, ipCurCfgStaticArpTable=ipCurCfgStaticArpTable, ripRedistributeFixed=ripRedistributeFixed, pktStatsFrees=pktStatsFrees, ipOspfIntfInfoEntry=ipOspfIntfInfoEntry, lacpInfoPortActOpColl=lacpInfoPortActOpColl, tacNewCfgTimeout=tacNewCfgTimeout, stgNewCfgVlanBmap=stgNewCfgVlanBmap, ripRedistributeEospf=ripRedistributeEospf, ripRouteRedistribution=ripRouteRedistribution, ripNewCfgIntfAuth=ripNewCfgIntfAuth, vrrpCurCfgVirtRtrTable=vrrpCurCfgVirtRtrTable, ipRouteInfoGateway=ipRouteInfoGateway, ufdCurCfgLtMPorts=ufdCurCfgLtMPorts, swApplyComplete=swApplyComplete, agPortCurCfgGigEthMode=agPortCurCfgGigEthMode, qosCurCfgCosWeightTable=qosCurCfgCosWeightTable, ospfStartTime=ospfStartTime, allportsStatsIndx=allportsStatsIndx, vrrpNewCfgVirtRtrTckVlanPort=vrrpNewCfgVirtRtrTckVlanPort, ipOspfRedistributeFixedInfoMetric=ipOspfRedistributeFixedInfoMetric, agCurCfgSyslogTrapIp=agCurCfgSyslogTrapIp, ospfIntfWaitTimer=ospfIntfWaitTimer, lacpNewSystemTimeoutTime=lacpNewSystemTimeoutTime, ipRouteInfoEntry=ipRouteInfoEntry, vlanNewCfgTable=vlanNewCfgTable, tacCurCfgAuthenSecondString=tacCurCfgAuthenSecondString, arpCurCfgReARPPeriod=arpCurCfgReARPPeriod, stpInfoRootCost=stpInfoRootCost, agCurCfgSyslogFac=agCurCfgSyslogFac, agNewCfgSyslog2Fac=agNewCfgSyslog2Fac, ospfStats=ospfStats, lacpInfoPortActOpAggr=lacpInfoPortActOpAggr, igmpFilterCfg=igmpFilterCfg, ipStatsOutDiscards=ipStatsOutDiscards, lacpInfoAggrActSysId=lacpInfoAggrActSysId, aclNewCfgEgressPorts=aclNewCfgEgressPorts, aclGroupCurCfgTable=aclGroupCurCfgTable, ospfAreaChangeStats=ospfAreaChangeStats, ripNewCfgIntfState=ripNewCfgIntfState, fdbStatsHiwat=fdbStatsHiwat, ospfNewCfgMdkeyKey=ospfNewCfgMdkeyKey, lacpInfoPortActOpDist=lacpInfoPortActOpDist, portInfoPhyIfType=portInfoPhyIfType, agCurBootNxtCliModePrompt=agCurBootNxtCliModePrompt, ospfAreaErrAuthFailure=ospfAreaErrAuthFailure, ipClearStats=ipClearStats, markerresponsepdusTx=markerresponsepdusTx, ipInfoRmapAp=ipInfoRmapAp, agNewCfgConsole=agNewCfgConsole, ripNewCfgIntfIndex=ripNewCfgIntfIndex, agPortNewCfgState=agPortNewCfgState, genInfo=genInfo, dot1xPortStatsTable=dot1xPortStatsTable, dot1xNewCfgGlobalDefault=dot1xNewCfgGlobalDefault, aclNewCfgRemarkReset=aclNewCfgRemarkReset, igmpFltNewCfgMcastIp2=igmpFltNewCfgMcastIp2, invalidEapolFramesRx=invalidEapolFramesRx, ospfNewCfgAreaEntry=ospfNewCfgAreaEntry, vrrpNewCfgVirtRtrGrpInterval=vrrpNewCfgVirtRtrGrpInterval, mpCpuStatsUtil1Second=mpCpuStatsUtil1Second, trunkGroupInfoState=trunkGroupInfoState, dnsClearStats=dnsClearStats, igmpSnoopNewCfgVlanClear=igmpSnoopNewCfgVlanClear, ipOspfAreaInfoIndex=ipOspfAreaInfoIndex, igmpFltNewCfgPortState=igmpFltNewCfgPortState, portStatsPhyIfOutQLen=portStatsPhyIfOutQLen, agPortCurCfgPortName=agPortCurCfgPortName, ospfNewCfgIntfCost=ospfNewCfgIntfCost, authSuccessesWhileAuthenticating=authSuccessesWhileAuthenticating, ipNewCfgAlistIndex=ipNewCfgAlistIndex, snmpClearStats=snmpClearStats, vrrpInfoVirtRtrConfig=vrrpInfoVirtRtrConfig, ipInfoBootpRelayAddr2=ipInfoBootpRelayAddr2, igmpFltCurCfgPortTable=igmpFltCurCfgPortTable, qosCurCfgCosWeightEntry=qosCurCfgCosWeightEntry, ospfAreaChangeStatsEntry=ospfAreaChangeStatsEntry, lacpInfoPortActSysPrio=lacpInfoPortActSysPrio, agentConfig=agentConfig, ospfAreaIntfIndex=ospfAreaIntfIndex, ospfAreaRxPkts=ospfAreaRxPkts, mstCistCurCfgBridgePriority=mstCistCurCfgBridgePriority, lacpInfoPortGeneralIndex=lacpInfoPortGeneralIndex, ipCurCfgNwfTable=ipCurCfgNwfTable, lacpInfoAggrMac=lacpInfoAggrMac, vrrpNewCfgVirtRtrState=vrrpNewCfgVirtRtrState, ospfCurCfgHostAreaIndex=ospfCurCfgHostAreaIndex, ufdNewCfgLtMAdminkey=ufdNewCfgLtMAdminkey, acConfig=acConfig, portStatsClear=portStatsClear, ospfNewCfgVirtIntfDead=ospfNewCfgVirtIntfDead, fdbNewCfgAddMac=fdbNewCfgAddMac, swUfdfoLtMFailure=swUfdfoLtMFailure, stpInfoPortForwardTransitions=stpInfoPortForwardTransitions, tacNewCfgCmap=tacNewCfgCmap, ospfIfInfoBackupDesignatedRouterIpAddress=ospfIfInfoBackupDesignatedRouterIpAddress, ipNewCfgNwfAddr=ipNewCfgNwfAddr, lacpInfoPortActOpDef=lacpInfoPortActOpDef, ospfNewCfgRipOutRmapList=ospfNewCfgRipOutRmapList, ipCurCfgStaticArpIndx=ipCurCfgStaticArpIndx, dot1xNewCfgPortIndex=dot1xNewCfgPortIndex, ospfNewCfgRipMetricType=ospfNewCfgRipMetricType, vrrpCurCfgVirtRtrTableEntry=vrrpCurCfgVirtRtrTableEntry, dot1pInfoPortEntry=dot1pInfoPortEntry, icmpStatsInMsgs=icmpStatsInMsgs, aclCurCfgPortTable=aclCurCfgPortTable, ospfTmrsKckOffLsaLock=ospfTmrsKckOffLsaLock, l2ThashNewCfgDipState=l2ThashNewCfgDipState, ospfIfNbrTable=ospfIfNbrTable, ripNewCfgEospfMetric=ripNewCfgEospfMetric, igmpFltNewCfgTable=igmpFltNewCfgTable, ufdInfoLtMAdminkey=ufdInfoLtMAdminkey, icmpStatsOutDestUnreachs=icmpStatsOutDestUnreachs, stpInfoTableEntry=stpInfoTableEntry, dot1xNewCfgPortEntry=dot1xNewCfgPortEntry, ripCurCfgIntfTrigUpdate=ripCurCfgIntfTrigUpdate, ufdNewCfgRemoveLtDPort=ufdNewCfgRemoveLtDPort, icmpStatsInTimestamps=icmpStatsInTimestamps, icmpStatsInEchos=icmpStatsInEchos, agPortCurCfgVlanTag=agPortCurCfgVlanTag, ospfExtLsdbInfoLsid=ospfExtLsdbInfoLsid, igmpNewCfgOnOff=igmpNewCfgOnOff, vlanCurCfgPorts=vlanCurCfgPorts, ospfTmrsKckOffLsaAck=ospfTmrsKckOffLsaAck, cistRegionalPathCost=cistRegionalPathCost, cistRootPathCost=cistRootPathCost, vrrpCurCfgIfTable=vrrpCurCfgIfTable, aclNewCfgInprofDscpEnable=aclNewCfgInprofDscpEnable, vrrpNewCfgIfPasswd=vrrpNewCfgIfPasswd, ufdCurCfgLtMAdminkey=ufdCurCfgLtMAdminkey, pmNewCfgPortMirrState=pmNewCfgPortMirrState, vrrpNewCfgIfTable=vrrpNewCfgIfTable, allportsStatsOutDiscards=allportsStatsOutDiscards, igmpFltCurCfgPortFiltBmap=igmpFltCurCfgPortFiltBmap, ipOspfAreaInfoAuthType=ipOspfAreaInfoAuthType, ospfIntfRxlsReqs=ospfIntfRxlsReqs, lacpInfoPortGeneralTableEntry=lacpInfoPortGeneralTableEntry, lacpInfoSelAggrId=lacpInfoSelAggrId, lacpStats=lacpStats, ospfNewCfgIntfIndex=ospfNewCfgIntfIndex, agDiffIndex=agDiffIndex, radCurCfgTimeout=radCurCfgTimeout, ospfCumIntfNbrChange=ospfCumIntfNbrChange, agCfgL3Status=agCfgL3Status, ufdNewCfgRemoveLtDAdminkey=ufdNewCfgRemoveLtDAdminkey, ipCurCfgIntfAddr=ipCurCfgIntfAddr, agCurCfgSnmpTimeout=agCurCfgSnmpTimeout, ospfIntfErrOptionsMismatch=ospfIntfErrOptionsMismatch, trunkGroupNewCfgAddPort=trunkGroupNewCfgAddPort, stpInfoMaxAge=stpInfoMaxAge, ospfIntfChangeStats=ospfIntfChangeStats, icmpStatsInTimestampReps=icmpStatsInTimestampReps, aclCurCfgVLanId=aclCurCfgVLanId, ospfNewCfgHostDelete=ospfNewCfgHostDelete, lacpInfoPortPartOpKey=lacpInfoPortPartOpKey, fdbStatsClear=fdbStatsClear, stgNewCfgPriority=stgNewCfgPriority, eapolReqIdFramesTx=eapolReqIdFramesTx, dot1xPortStatsIndx=dot1xPortStatsIndx, agCurCfgNTPService=agCurCfgNTPService, txIgmpGrpSpecificQueries=txIgmpGrpSpecificQueries, ipOspfVirtIntfInfoTrans=ipOspfVirtIntfInfoTrans, ufdInfoLtMPorts=ufdInfoLtMPorts, ipCurCfgIntfBroadcast=ipCurCfgIntfBroadcast, ipInfoBootpRelayAddr=ipInfoBootpRelayAddr, vlanInfoTableEntry=vlanInfoTableEntry, portStats=portStats, ripNewCfgStaticRemoveOutRmap=ripNewCfgStaticRemoveOutRmap, udpStatsOutDatagrams=udpStatsOutDatagrams, thash=thash, allportsStatsOutUcast=allportsStatsOutUcast, vlanNewCfgPorts=vlanNewCfgPorts, ipOspfRangeInfoAreaIndex=ipOspfRangeInfoAreaIndex, sshCurVersion1Support=sshCurVersion1Support, fdbClear=fdbClear, agNewCfgUfdTrap=agNewCfgUfdTrap, ospfTotalLsaOriginated=ospfTotalLsaOriginated, swUfdfoLtMUP=swUfdfoLtMUP, ospfNewCfgAreaType=ospfNewCfgAreaType, agPortCurCfgTagPVID=agPortCurCfgTagPVID, stgNewCfgPortEdge=stgNewCfgPortEdge, ospfNewCfgAreaMetric=ospfNewCfgAreaMetric)
mibBuilder.exportSymbols("BLADETYPE4-NETWORK-MIB", lacpInfoPortPartOpActiv=lacpInfoPortPartOpActiv, dot1xNewCfgPortSupTmout=dot1xNewCfgPortSupTmout, ipOspfInfoDefaultRouteMetricType=ipOspfInfoDefaultRouteMetricType, geaportInfoLogicalIndex=geaportInfoLogicalIndex, ipForwardCfg=ipForwardCfg, ripNewCfgIntfMetric=ripNewCfgIntfMetric, aclNewCfgRemarkOutprofReset=aclNewCfgRemarkOutprofReset, ospfCumNbrRstAd=ospfCumNbrRstAd, ospfIntfNbrAdjointOk=ospfIntfNbrAdjointOk, lacpNewSystemPriority=lacpNewSystemPriority, ospfAreaInfoNeighborsEXCHstate=ospfAreaInfoNeighborsEXCHstate, authEapStartsWhileAuthenticating=authEapStartsWhileAuthenticating, fdbSrcPort=fdbSrcPort, ospfCfg=ospfCfg, ospfVlinkCountForRouter=ospfVlinkCountForRouter, ospfNbrInInitState=ospfNbrInInitState, mstCistDefaultCfg=mstCistDefaultCfg, ospfCumNbrLoadingDone=ospfCumNbrLoadingDone, ospfAreaRxTxStatsEntry=ospfAreaRxTxStatsEntry, ipNewCfgRmapMetric=ipNewCfgRmapMetric, ospfLsdbInfoType=ospfLsdbInfoType, trunkGroupInfoPortPortId=trunkGroupInfoPortPortId, ipNewCfgIntfState=ipNewCfgIntfState, agClearFlashDump=agClearFlashDump, backendAuthSuccesses=backendAuthSuccesses, layer3Configs=layer3Configs, stgCurCfgPortFastFwd=stgCurCfgPortFastFwd, portInfoTableEntry=portInfoTableEntry, upfastCurCfgState=upfastCurCfgState, hwSerialNumber=hwSerialNumber, ipStaticRouteClearAllByInterface=ipStaticRouteClearAllByInterface, dot1xNewCfgGlobalReAuth=dot1xNewCfgGlobalReAuth, stgCurCfgBrgMaxAge=stgCurCfgBrgMaxAge, mstCurCfgState=mstCurCfgState, swValidLogout=swValidLogout)
