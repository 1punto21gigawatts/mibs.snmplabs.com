#
# PySNMP MIB module ES1200-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ES1200-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:06:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
MacAddress, dot1dBasePort = mibBuilder.importSymbols("BRIDGE-MIB", "MacAddress", "dot1dBasePort")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Bits, NotificationType, Integer32, ObjectIdentity, Counter32, Gauge32, enterprises, ModuleIdentity, MibIdentifier, IpAddress, NotificationType, Counter64, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Bits", "NotificationType", "Integer32", "ObjectIdentity", "Counter32", "Gauge32", "enterprises", "ModuleIdentity", "MibIdentifier", "IpAddress", "NotificationType", "Counter64", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class PortList(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(12, 12)
    fixedLength = 12

class VlanIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4094)

fore = MibIdentifier((1, 3, 6, 1, 4, 1, 326))
systems = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2))
ethernet = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20))
edge = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1))
edgecommon = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 1))
golf = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2))
golfproducts = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 1))
es1200 = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 1, 2))
golfcommon = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2))
fore_products = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1)).setLabel("fore-products")
fore_es1200Prod = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25)).setLabel("fore-es1200Prod")
swProperty = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 1))
swModule = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 1, 1))
es1200DevRegistration = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 2))
es1200Device = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 2, 1))
es1200UnitRegistration = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 3))
es1200Master = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 3, 1))
es1210Slave1 = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 3, 2))
es1210Slave2 = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 3, 3))
es1210Slave3 = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 3, 4))
es1200ModuleRegistration = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 4))
es1200ModuleMainboardTx = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 4, 1))
es1200ModuleTxTwoPort = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 4, 2))
es1200ModuleFxSC = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 4, 3))
es1200ModuleFxMTRJ = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 4, 4))
es1200ModuleSIO = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 4, 5))
es1200ModuleSXGIGAOnePort = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 4, 6))
es1200ModuleSXGIGATwoPort = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 4, 7))
es1200ModuleLXGIGAOnePort = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 4, 8))
es1200ModuleLXGIGATwoPort = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 4, 9))
es1200ModuleTXGIGAOnePort = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 4, 10))
es1200ModuleTXGIGATwoPort = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 4, 11))
es1200ModuleNone = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 4, 12))
es1210ModuleRegistration = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 5))
es1210ModuleMainboardTx = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 5, 1))
es1210ModuleTxTwoPort = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 5, 2))
es1210ModuleFxSC = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 5, 3))
es1210ModuleFxMTRJ = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 5, 4))
es1210ModuleSIO = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 5, 5))
es1210ModuleNone = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 5, 6))
es1200PortRegistration = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 6))
es1200Port_10_100TX = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 6, 1)).setLabel("es1200Port-10-100TX")
es1200Port_100_SC = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 6, 2)).setLabel("es1200Port-100-SC")
es1200Port_100_MTRJ = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 6, 3)).setLabel("es1200Port-100-MTRJ")
es1200Port_1000_SX = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 6, 4)).setLabel("es1200Port-1000-SX")
es1200Port_1000_LX = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 6, 5)).setLabel("es1200Port-1000-LX")
es1200Port_1000_TX = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 6, 6)).setLabel("es1200Port-1000-TX")
es1210PortRegistration = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 7))
es1210Port_10_100TX = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 7, 1)).setLabel("es1210Port-10-100TX")
es1210Port_100_SC = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 7, 2)).setLabel("es1210Port-100-SC")
es1210Port_100_MTRJ = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 7, 3)).setLabel("es1210Port-100-MTRJ")
es1200PowerSupplyRegistration = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 8))
es1200PowerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 8, 1))
es1210PowerSupplyRegistration = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 9))
es1210PowerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 9, 1))
es1200FanRegistration = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 10))
es1200Fan = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 10, 1))
es1210FanRegistration = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 11))
es1210Fan = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 11, 1))
es1200SlotRegistration = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 12))
es1200Slot1 = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 12, 1))
es1200Slot2 = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 12, 2))
es1200Slot3 = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 12, 3))
es1210SlotRegistration = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 13))
es1210Slot1 = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 13, 1))
es1210Slot2 = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 13, 2))
es1200SensorRegistration = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 14))
es1200BackplaneRegistration = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 1, 25, 15))
fore_mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2)).setLabel("fore-mgmt")
es1200Mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25))
swL2Mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2))
swStructure = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1))
swStructInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 1))
swStructDevType = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 1, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructDevType.setStatus('mandatory')
if mibBuilder.loadTexts: swStructDevType.setDescription('Specifies the device type')
swStructDevDescr = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructDevDescr.setStatus('mandatory')
if mibBuilder.loadTexts: swStructDevDescr.setDescription('Describes the type of the device')
swStructPortEncodingFactor = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructPortEncodingFactor.setStatus('mandatory')
if mibBuilder.loadTexts: swStructPortEncodingFactor.setDescription('The factor to encode the global port ID from unit ID and the local port ID. This global port ID is required to access the bridge MIB and spanning tree MIB defined by the standard body. This global port ID will provide a unigue port ID for each port across the entire device. Example: supoposed that the encoding factor is 24, then port 2 located on unit 2 will be encoded as port 26')
swStructUnitTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 2), )
if mibBuilder.loadTexts: swStructUnitTable.setStatus('mandatory')
if mibBuilder.loadTexts: swStructUnitTable.setDescription('A table that contains information about a unit in the device.')
swStructUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 2, 1), ).setIndexNames((0, "ES1200-MIB", "swStructUnitIndex"))
if mibBuilder.loadTexts: swStructUnitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: swStructUnitEntry.setDescription('A list of information for each unit in the device.')
swStructUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swStructUnitIndex.setDescription('ID of the unit in the device')
swStructUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructUnitType.setStatus('mandatory')
if mibBuilder.loadTexts: swStructUnitType.setDescription('Type of the unit')
swStructUnitDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructUnitDescr.setStatus('mandatory')
if mibBuilder.loadTexts: swStructUnitDescr.setDescription('Type of the unit in displayed string format')
swStructUnitLedInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructUnitLedInfo.setStatus('mandatory')
if mibBuilder.loadTexts: swStructUnitLedInfo.setDescription('Provides the LED information for the unit. Master: byte 0: bit 0:Condole in Use (0:not used,1:used) bit 1:Giga module status (0:not exist,1:exist) bit 2:Giga module port1 status (0:link fail,1:link pass) bit 3:Giga module port2 status (0:link fail,1:link pass) bit 4:Slot2 module status (0:not exist,1:exist) bit 5:Unit slave1 status (0:not exist,1:exist) bit 6:Unit slave2 status (0:not exist,1:exist) bit 7:Unit slave3 status (0:not exist,1:exist) byte 1: bit 0:Slot1 module port1 nway status (0:10M,1:100M) bit 1:Slot1 module port1 link status (0:link fail,1:link pass) bit 2:Slot1 module port2 nway status (0:10M,1:100M) bit 3:Slot1 module port2 link status (0:link fail,1:link pass) bit 4:Base module port1 nway status (0:10M,1:100M) bit 5:Base module port1 link status (0:link fail,1:link pass) bit 6:Base module port2 nway status (0:10M,1:100M) bit 7:Base module port2 link status (0:link fail,1:link pass) byte 2: bit 0:Base module port3 nway status (0:10M,1:100M) bit 1:Base module port3 link status (0:link fail,1:link pass) bit 2:Base module port4 nway status (0:10M,1:100M) bit 3:Base module port4 link status (0:link fail,1:link pass) bit 4:Base module port5 nway status (0:10M,1:100M) bit 5:Base module port5 link status (0:link fail,1:link pass) bit 6:Base module port6 nway status (0:10M,1:100M) bit 7:Base module port6 link status (0:link fail,1:link pass) byte 3: ... . . byte 7: ... Slave: byte 0: bit 0:Not used bit 1:Not used bit 2:Not used bit 3:Not used bit 4:Slot2 module status (0:not exist,1:exist) bit 5:Unit slave1 status (0:not exist,1:exist) bit 6:Unit slave2 status (0:not exist,1:exist) bit 7:Unit slave3 status (0:not exist,1:exist) byte 1: bit 0:Slot1 module port1 nway status (0:10M,1:100M) bit 1:Slot1 module port1 link status (0:link fail,1:link pass) bit 2:Slot1 module port2 nway status (0:10M,1:100M) bit 3:Slot1 module port2 link status (0:link fail,1:link pass) bit 4:Base module port1 nway status (0:10M,1:100M) bit 5:Base module port1 link status (0:link fail,1:link pass) bit 6:Base module port2 nway status (0:10M,1:100M) bit 7:Base module port2 link status (0:link fail,1:link pass) byte 2: ... . . byte 7: ... ')
swStructUnitMaxModuleNum = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructUnitMaxModuleNum.setStatus('mandatory')
if mibBuilder.loadTexts: swStructUnitMaxModuleNum.setDescription('Maximum number of modules allowed on the unit')
swStructUnitMaxPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructUnitMaxPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: swStructUnitMaxPortNum.setDescription('Maximum number of ports allowed on the unit')
swStructUnitNumOfPortInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructUnitNumOfPortInUse.setStatus('mandatory')
if mibBuilder.loadTexts: swStructUnitNumOfPortInUse.setDescription('Number of ports which has link being connected to the port')
swStructUnitOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("notAvail", 2), ("removed", 3), ("disabled", 4), ("normal", 5), ("nonFatalErr", 9), ("fatalErr", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructUnitOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: swStructUnitOperStatus.setDescription('Describes the operation status for the unit')
swStructUnitLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructUnitLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: swStructUnitLastChange.setDescription('Provides the time that the unit is up last time')
swStructModuleTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 3), )
if mibBuilder.loadTexts: swStructModuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: swStructModuleTable.setDescription('A table that contains information about a module.')
swStructModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 3, 1), ).setIndexNames((0, "ES1200-MIB", "swStructModuleUnitIndex"), (0, "ES1200-MIB", "swStructModuleIndex"), (0, "ES1200-MIB", "swStructModuleSubMduIndex"))
if mibBuilder.loadTexts: swStructModuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: swStructModuleEntry.setDescription('A list of information for a module.')
swStructModuleUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructModuleUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swStructModuleUnitIndex.setDescription('ID of the unit in the device')
swStructModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swStructModuleIndex.setDescription('ID of the Module in the device')
swStructModuleSubMduIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructModuleSubMduIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swStructModuleSubMduIndex.setDescription('If the module doesnot contain sub module, sub module ID is 0. Otherwise, it indicates the ID of the sub module relative to the module')
swStructModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 3, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructModuleType.setStatus('mandatory')
if mibBuilder.loadTexts: swStructModuleType.setDescription('Type of the module')
swStructModuleDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructModuleDescr.setStatus('mandatory')
if mibBuilder.loadTexts: swStructModuleDescr.setDescription('Type of the module in displayed string format')
swStructModuleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructModuleVersion.setStatus('mandatory')
if mibBuilder.loadTexts: swStructModuleVersion.setDescription('Provides PCB version of the module')
swStructModuleMaxPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructModuleMaxPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: swStructModuleMaxPortNum.setDescription('Maximum number of ports allowed on the module')
swStructModuleEncodingOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructModuleEncodingOffset.setStatus('mandatory')
if mibBuilder.loadTexts: swStructModuleEncodingOffset.setDescription('Each module has a offset for encoding the port ID relative to a unit. This encoding will provide a unigue port ID for ports located on the device. Example: supoposed that the offset for module 2 is 21, then port 2 located on module 2 will be encoded as port 22')
swStructModuleOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("notAvail", 2), ("removed", 3), ("disabled", 4), ("normal", 5), ("nonFatalErr", 9), ("fatalErr", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructModuleOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: swStructModuleOperStatus.setDescription('Provides operation status of the module')
swStructModuleLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructModuleLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: swStructModuleLastChange.setDescription('Provides the time that the module is up last time')
swStructPowerTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 4), )
if mibBuilder.loadTexts: swStructPowerTable.setStatus('mandatory')
if mibBuilder.loadTexts: swStructPowerTable.setDescription('A table that contains information about every board.')
swStructPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 4, 1), ).setIndexNames((0, "ES1200-MIB", "swStructPowerUnitIndex"), (0, "ES1200-MIB", "swStructPowerIndex"))
if mibBuilder.loadTexts: swStructPowerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: swStructPowerEntry.setDescription('A list of information for each board of the chassis.')
swStructPowerUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructPowerUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swStructPowerUnitIndex.setDescription('ID of the unit in the device')
swStructPowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructPowerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swStructPowerIndex.setDescription('ID of the power supply in the unit')
swStructPowerOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("notAvail", 2), ("removed", 3), ("disabled", 4), ("normal", 5), ("nonFatalErr", 9), ("fatalErr", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructPowerOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: swStructPowerOperStatus.setDescription('Describes the operation status of the power supply')
swStructFanTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 5), )
if mibBuilder.loadTexts: swStructFanTable.setStatus('mandatory')
if mibBuilder.loadTexts: swStructFanTable.setDescription('A table that contains information about every board.')
swStructFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 5, 1), ).setIndexNames((0, "ES1200-MIB", "swStructFanUnitIndex"), (0, "ES1200-MIB", "swStructFanIndex"))
if mibBuilder.loadTexts: swStructFanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: swStructFanEntry.setDescription('A list of information for each board of the chassis.')
swStructFanUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructFanUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swStructFanUnitIndex.setDescription('ID of the unit in the device')
swStructFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructFanIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swStructFanIndex.setDescription('ID of the fan in the device')
swStructFanOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("notAvail", 2), ("removed", 3), ("disabled", 4), ("normal", 5), ("nonFatalErr", 9), ("fatalErr", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swStructFanOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: swStructFanOperStatus.setDescription('Describes the operation status of the fan')
swFDB = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 9))
endOfMIB = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 9999), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfMIB.setStatus('optional')
swFdbStaticTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 9, 1), )
if mibBuilder.loadTexts: swFdbStaticTable.setStatus('mandatory')
if mibBuilder.loadTexts: swFdbStaticTable.setDescription('This table defines for frames with specific destincation MAC address, the set of ports that the frame will be forwarded to. Note that if a MAC address appears in this table also appears in the filter table, the filter table has higher priority over than this table. See swFdbFilterTable description.')
swFdbStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 9, 1, 1), ).setIndexNames((0, "ES1200-MIB", "swFdbStaticVid"), (0, "ES1200-MIB", "swFdbStaticAddress"))
if mibBuilder.loadTexts: swFdbStaticEntry.setStatus('mandatory')
if mibBuilder.loadTexts: swFdbStaticEntry.setDescription('A list of information specifies which ports the frames with specific destination MAC address to go.')
swFdbStaticVid = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFdbStaticVid.setStatus('mandatory')
if mibBuilder.loadTexts: swFdbStaticVid.setDescription('This object indicates the VLAN-ID. If the swVlanInfoStatus is port-base mode , the object ranges from 1 to 12. If VLAN is in mac-based mode or disabled, the object indicates the default VLAN-ID(0).')
swFdbStaticAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 9, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFdbStaticAddress.setStatus('mandatory')
if mibBuilder.loadTexts: swFdbStaticAddress.setDescription('The MAC address which this forwarding entry applied. It can be an unicast address or a multicast address.')
swFdbStaticPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 9, 1, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFdbStaticPortMap.setStatus('mandatory')
if mibBuilder.loadTexts: swFdbStaticPortMap.setDescription("The set of ports to which frames received containing the value of swFdbStaticAddress as the DA, are allowed to be forwarded. Each octet within the value of this object specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the bridge is represented by a single bit within the value of this object. If that bit has a value of '1' then that port is included in the set of ports; the port is not included if its bit has a value of '0'.(Note that the setting of the bit corresponding to the port from which a frame is received is irrelevant.)")
swFdbStaticJoinIGMPSnooping = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 9, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFdbStaticJoinIGMPSnooping.setStatus('mandatory')
if mibBuilder.loadTexts: swFdbStaticJoinIGMPSnooping.setDescription("This object indicates whether to allow ports to join/leave IGMP group via IGMP Snooping. For a multicast address entry, port group could be classified into two catelogies : one is static and another is dynamic. In static port group, port members is defined statically by user, and dynamic port group allows a port member to join/leave the membership dynamically, according to IGMP report/leave messages. When this object is set to 'enabled', it allows dynamic port group updated for the multicast address entry as well as static port group. When it is set to 'disabled' , dynamic port member join/leave is disabled, but static port group is not affected. This object is only vaild for multicast address indicated by swFdbStaticAddressIndex. It always is 'disabled' for unicast addresses. other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. disabled(2) - this entry doesn't allow dynamic updates via IGMP Snooping.This is a default setting. enabled(3) - this entry allow dynamic updates via IGMP Snooping.")
swFdbStaticState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("valid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFdbStaticState.setStatus('mandatory')
if mibBuilder.loadTexts: swFdbStaticState.setDescription('This object indicates the status of this entry. other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. invalid(2) - writing this value to the object, and then the corresponding entry will be removed from the table. valid(3) - this entry is reside in the table.')
swFdbStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("apply", 2), ("not-apply", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFdbStaticStatus.setStatus('mandatory')
if mibBuilder.loadTexts: swFdbStaticStatus.setDescription('This object indicates the status of this entry. other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. apply(2) - this entry is currently in use and reside in the table. not-apply(3) - this entry is reside in the table but currently not in use due to conflict with filter table.')
swFdbStaticMemberTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 9, 2), )
if mibBuilder.loadTexts: swFdbStaticMemberTable.setStatus('mandatory')
if mibBuilder.loadTexts: swFdbStaticMemberTable.setDescription('A list of information provide a different view for those ports where packets from the given Vlan need to be forwarded to.')
swFdbStaticMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 9, 2, 1), ).setIndexNames((0, "ES1200-MIB", "swFdbStaticMemberVid"), (0, "ES1200-MIB", "swFdbStaticMemberAddress"), (0, "ES1200-MIB", "swFdbStaticMemberUnitIndex"), (0, "ES1200-MIB", "swFdbStaticMemberModuleIndex"), (0, "ES1200-MIB", "swFdbStaticMemberPortIndex"))
if mibBuilder.loadTexts: swFdbStaticMemberEntry.setStatus('mandatory')
if mibBuilder.loadTexts: swFdbStaticMemberEntry.setDescription('A list of MIB capability entries supported by this forwarding static table.')
swFdbStaticMemberVid = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFdbStaticMemberVid.setStatus('mandatory')
if mibBuilder.loadTexts: swFdbStaticMemberVid.setDescription('This object indicates the VLAN-ID. If the swVlanInfoStatus is port-base mode , the object ranges from 1 to 12. If VLAN is in mac-based mode or disabled, the object indicates the default VLAN-ID(0).')
swFdbStaticMemberAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 9, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFdbStaticMemberAddress.setStatus('mandatory')
if mibBuilder.loadTexts: swFdbStaticMemberAddress.setDescription('The MAC address which this forwarding entry applied. It can be an unicast address or a multicast address.')
swFdbStaticMemberUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 9, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFdbStaticMemberUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swFdbStaticMemberUnitIndex.setDescription('Specifies the unit ID where the port is located')
swFdbStaticMemberModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 9, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFdbStaticMemberModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swFdbStaticMemberModuleIndex.setDescription('Specifies the module ID where the port is located')
swFdbStaticMemberPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 9, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFdbStaticMemberPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swFdbStaticMemberPortIndex.setDescription('Specifies the port index relative to the module')
swFdbFilterTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 9, 3), )
if mibBuilder.loadTexts: swFdbFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: swFdbFilterTable.setDescription('This table defines information for the device to filter packets with specific MAC address (either as the DA or as the SA). The MAC address can be a unicast address or a multicast address.This table has higher priority than both static FDB table and IGMP table. It means that if a MAC address appears on this table also appears on the static FDB table, the device will use the information provide by this table to process the packet.')
swFdbFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 9, 3, 1), ).setIndexNames((0, "ES1200-MIB", "swFdbFilterVid"), (0, "ES1200-MIB", "swFdbFilterAddress"))
if mibBuilder.loadTexts: swFdbFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: swFdbFilterEntry.setDescription('A list of information about a specific unicast/multicast MAC address for which the switch has filtering information.')
swFdbFilterVid = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFdbFilterVid.setStatus('mandatory')
if mibBuilder.loadTexts: swFdbFilterVid.setDescription('This object indicates the VLAN-ID. If the swVlanInfoStatus is port-base mode , the object ranges from 1 to 12. If VLAN is in mac-based mode or disabled, the object indicates the default VLAN-ID(0).')
swFdbFilterAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 9, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFdbFilterAddress.setStatus('mandatory')
if mibBuilder.loadTexts: swFdbFilterAddress.setDescription('This object indicates a unicast/multicast MAC address for which the bridge has filtering information.')
swFdbFilterState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("valid", 3), ("dst-src-addr", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swFdbFilterState.setStatus('mandatory')
if mibBuilder.loadTexts: swFdbFilterState.setDescription("This object indicates the status of this entry. other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. invalid(2) - writing this value to the object, and then the corresponding entry will be removed from the table. valid(3) - writing this value to the object, and then the corresponding entry will be added into the table. dst-src-addr(4) - recieved frames's destination address or source address are currently used to be filtered as it meets with the MAC address entry of the table.")
swL2PortMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4))
swL2PortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 1), )
if mibBuilder.loadTexts: swL2PortInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortInfoTable.setDescription('A table that contains information about every port.')
swL2PortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 1, 1), ).setIndexNames((0, "ES1200-MIB", "swL2PortInfoUnitIndex"), (0, "ES1200-MIB", "swL2PortInfoModuleIndex"), (0, "ES1200-MIB", "swL2PortInfoIndex"))
if mibBuilder.loadTexts: swL2PortInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortInfoEntry.setDescription('A list of information for each port of the device.')
swL2PortInfoUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortInfoUnitIndex.setDescription('Indicates ID of the unit in the device')
swL2PortInfoModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortInfoModuleIndex.setDescription('Indicates ID of the module on the unit')
swL2PortInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortInfoIndex.setDescription('Indicates ID of the port on the module')
swL2PortInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("portType-100TX", 1), ("portType-100FXSC", 2), ("portType-100FXMTRJ", 3), ("portType-GIGASX", 4), ("portType-GIGALX", 5), ("portType-GIGATX", 6), ("other", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoType.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortInfoType.setDescription('Indicates the connector type of this port.')
swL2PortInfoDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoDescr.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortInfoDescr.setDescription('Provides port type information in displayed string format')
swL2PortInfoLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("link-pass", 2), ("link-fail", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoLinkStatus.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortInfoLinkStatus.setDescription('Indicates port link status ')
swL2PortInfoNwayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("half-10Mbps", 2), ("full-10Mbps", 3), ("half-100Mbps", 4), ("full-100Mbps", 5), ("half-1Gigabps", 6), ("full-1Gigabps", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortInfoNwayStatus.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortInfoNwayStatus.setDescription('This object indicates the port speed and duplex mode.')
swL2PortCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 2), )
if mibBuilder.loadTexts: swL2PortCtrlTable.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortCtrlTable.setDescription('A table that contains control information about every port.')
swL2PortCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 2, 1), ).setIndexNames((0, "ES1200-MIB", "swL2PortCtrlUnitIndex"), (0, "ES1200-MIB", "swL2PortCtrlModuleIndex"), (0, "ES1200-MIB", "swL2PortCtrlIndex"))
if mibBuilder.loadTexts: swL2PortCtrlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortCtrlEntry.setDescription('A list of control information for each port of the device.')
swL2PortCtrlUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortCtrlUnitIndex.setDescription('Indicates ID of the unit in the device')
swL2PortCtrlModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortCtrlModuleIndex.setDescription('Indicates ID of the module on the unit')
swL2PortCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortCtrlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortCtrlIndex.setDescription('This object indicates the device port number.(1..Max port number)')
swL2PortCtrlAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("notAvailable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortCtrlAdminState.setDescription('This object decides the port to be enabled or disabled.')
swL2PortCtrlLinkStatusAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("notAvailable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlLinkStatusAlarmState.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortCtrlLinkStatusAlarmState.setDescription('Depends on this object to determine to send a trap or not when link status changes .')
swL2PortCtrlNwayState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 10))).clone(namedValues=NamedValues(("other", 1), ("nway-enabled", 2), ("nway-disabled-10Mbps-Half", 3), ("nway-disabled-10Mbps-Full", 4), ("nway-disabled-100Mbps-Half", 5), ("nway-disabled-100Mbps-Full", 6), ("nway-disabled-1Gigabps-Half", 7), ("nway-disabled-1Gigabps-Full", 8), ("notAvailable", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlNwayState.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortCtrlNwayState.setDescription('Chooses the port speed, duplex mode, and N-Way function mode.')
swL2PortCtrlFlowCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlFlowCtrlState.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortCtrlFlowCtrlState.setDescription('Sets IEEE 802.3x compliant flow control function as enabled or disabled. And IEEE 802.3x compliant flow control function work only when the port is in full duplex mode.The setting is effective the next time you reset or power on the hub.')
swL2PortCtrlBackPressState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlBackPressState.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortCtrlBackPressState.setDescription('Depends on this object to determine to enable or disable the backpressure function when the port is working in half duplex mode.')
swL2PortCtrlLockState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3), ("notAvailable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlLockState.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortCtrlLockState.setDescription('The state of this entry. The meanings of the values are: other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. disable(2) - Port lock funtion disable. enable(3) - Locking a port provides the CPU with the ability to decide which address are permitted to reside on such port, who knows about these address, and unknown packet forwarding to/from such ports. This is a way to prevent undesired traffic from being received or transmmited on the port.')
swL2PortCtrlPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("default", 2), ("force-low-priority", 3), ("force-high-priority", 4), ("notAvailable", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlPriority.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortCtrlPriority.setDescription('The priority queueing for packets received on this port, except for BPDU/IGMP packets and packets with unknown unicast destination address. IGMP and BPDU packets are always routed with high priority; packets with unknown unicast destination addresses are always routed with low priority. Other packets follow the rules below: other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. default(2) - A packet is normally classified as low priority ,unless at least one of the following is true: (a)The packet contained a TAG (per 802.1Q definition) with the priority greater or equal to 4. (b)The address-table entry for the destination address had Pd=HIGH. force-low_priority(3) - A packet is normally classified as low priority. force-high_priority(4) - A packet is normally classified as high priority.')
swL2PortCtrlStpState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("notAvailable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlStpState.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortCtrlStpState.setDescription("The state of STP(spanning tree algorithm) operation on this port. That's meaning the port whether add in the STP. The value enabled(3) indicates that STP is enabled on this port, as long as swDevCtrlStpState is also enabled for this device. When disabled(2) but swDevCtrlStpState is still enabled for the device, STP is disabled on this port : any BPDU packets received will be discarded and no BPDU packets will be propagated from the port.")
swL2PortCtrlHOLState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("notAvailable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlHOLState.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortCtrlHOLState.setDescription("The object provides a way to prevent HOL (Head Of Line) blocking between ports. HOL protection may prevent forwarding a packet to a blocking port.The idea relies on the assumption that it is better to discard packets destined to blocking ports, then to let them consume more and more buffers in the input-port's Rx-counters because eventually these input ports may become totally blocked. The meanings of the values are: other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. disabled(2) - HOL function disable. enabled(3) - HOL function enable.")
swL2PortCtrlBcastRisingAct = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("do-nothing", 2), ("blocking", 3), ("blocking-trap", 4), ("notAvailable", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlBcastRisingAct.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortCtrlBcastRisingAct.setDescription('This object indicates the system action when broadcast storm rising threshold is met. other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. do-nothing(2) - no action. blocking(3) - the port can discard any coming broadcast frame. blocking-trap(4) - the port can discard any coming broadcast frame. And the device can send a broadcast rising trap.')
swL2PortCtrlBcastFallingAct = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("do-nothing", 2), ("forwarding", 3), ("forwarding-trap", 4), ("notAvailable", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2PortCtrlBcastFallingAct.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortCtrlBcastFallingAct.setDescription('This object indicates the device action when broadcast storm falling threshold is met. other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. do-nothing(2) - no action. forwarding(3) - the port has returned to normal operation mode. forwarding-trap(4) - the port has returned to normal operation mode. And the device can send a broadcast falling trap.')
swL2PortStTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3), )
if mibBuilder.loadTexts: swL2PortStTable.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortStTable.setDescription('A list of port statistic Counter entries.')
swL2PortStEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1), ).setIndexNames((0, "ES1200-MIB", "swL2PortStUnitIndex"), (0, "ES1200-MIB", "swL2PortStModuleIndex"), (0, "ES1200-MIB", "swL2PortStIndex"))
if mibBuilder.loadTexts: swL2PortStEntry.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortStEntry.setDescription('This entry include all the port statistic Counter which support by the device, like Bytes received, Bytes Sent ...')
swL2PortStUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortStUnitIndex.setDescription('indicates ID of the unit in the device')
swL2PortStModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortStModuleIndex.setDescription('indicates ID of the module on the unit')
swL2PortStIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortStIndex.setDescription('This object indicates the device port number.(1..Max port number)')
swL2PortStByteRx = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStByteRx.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortStByteRx.setDescription('swDevCtrlCounterMode = 2(switched-frames):This counter is incre- mented once for every data octet of good packets(unicast + multi- cast + broadcast) received. swDevCtrlCounterMode = 3(all-frames):This counter is incremented once for every data octet of good packets(unicast + multicast + broadcast packets) and for local and dropped packets.')
swL2PortStByteTx = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStByteTx.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortStByteTx.setDescription('This counter is incremented once for every data octet of a trans- mitted good packet.')
swL2PortStFrameRx = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStFrameRx.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortStFrameRx.setDescription('swDevCtrlCounterMode = 2(switched-frames):This counter is incre- mented once for every good packet(unicast + multicast + broadcast ) received. swDevCtrlCounterMode = 3(all-frames):This counter is incremented once for every good packet(unicast + multicast + broadcast packets) and for local and dropped packets received.')
swL2PortStFrameTx = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStFrameTx.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortStFrameTx.setDescription('This counter is incremented once for every transmitted good packet.')
swL2PortStTotalBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStTotalBytesRx.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortStTotalBytesRx.setDescription('This counter is incremented once for every data octet of all received packets. This include data octets of rejected and local packets which are not forwarded to the switching core for trans- mission. This counter should reflect all the data octets received on the line. Note: A nibble is not counted as a whole byte.')
swL2PortStTotalFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStTotalFramesRx.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortStTotalFramesRx.setDescription('This counter is incremented once for every received packets. This include rejected and local packets which are not forwarded to the switching core for transmission. This counter should reflect all packets received on the line.')
swL2PortStBroadcastFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStBroadcastFramesRx.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortStBroadcastFramesRx.setDescription('swDevCtrlCounterMode = 2(switched-frames):This counter is incre- mented once for every good broadcast packet received. swDevCtrlCounterMode = 3(all-frames):This counter is incremented once for every good broadcast packet received and for local and dropped broadcast packets.')
swL2PortStMulticastFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStMulticastFramesRx.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortStMulticastFramesRx.setDescription('swDevCtrlCounterMode = 2(switched-frames):This counter is incre- mented once for every good multicast packet received. swDevCtrlCounterMode = 3(all-frames):This counter is incremented once for every good multicast packet received and for local and dropped multicast packets. This counter does not include broad- cast packets.')
swL2PortStCRCError = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStCRCError.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortStCRCError.setDescription('This counter is incremented once for every received packet which meets all the following conditions: 1.Packet data length is between 64 and 1518 bytes inclusive. 2.Packet has invalid CRC. 3.Collision event , late collision event and receive error event have not been detected.')
swL2PortStOversizeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStOversizeFrames.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortStOversizeFrames.setDescription('The number of good frames with length more than 1518 bytes.')
swL2PortStFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStFragments.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortStFragments.setDescription('This counter is incremented once for every received packet which meets all the following conditions: 1.Packet data length is less than 64 bytes or packet withourt SFD and is less than 64 bytes in length. 2.Packet has invalid CRC. 3.Collision event , late collision event and receive error event have not been detected.')
swL2PortStJabber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStJabber.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortStJabber.setDescription('The number of frames with length more than 1518 bytes and with CRC error or misaligned.')
swL2PortStCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStCollision.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortStCollision.setDescription('The number of Collisions')
swL2PortStLateCollision = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStLateCollision.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortStLateCollision.setDescription('The number of Late Collision(collision occurring later than 576th transmitted bit).')
swL2PortStFrames_64_bytes = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 18), Counter32()).setLabel("swL2PortStFrames-64-bytes").setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStFrames_64_bytes.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortStFrames_64_bytes.setDescription('This counter is incremented once for every received and trans- mitted packet with size of 64 bytes. This counter includes reject- ed received and transmitted packets.')
swL2PortStFrames_65_127_bytes = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 19), Counter32()).setLabel("swL2PortStFrames-65-127-bytes").setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStFrames_65_127_bytes.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortStFrames_65_127_bytes.setDescription('This counter is incremented once for every received and trans- mitted packet with size of 65 to 127 bytes. This counter includes rejected received and transmitted packets.')
swL2PortStFrames_128_255_bytes = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 20), Counter32()).setLabel("swL2PortStFrames-128-255-bytes").setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStFrames_128_255_bytes.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortStFrames_128_255_bytes.setDescription('This counter is incremented once for every received and trans- mitted packet with size of 128 to 255 bytes. This counter includes rejected received and transmitted packets.')
swL2PortStFrames_256_511_bytes = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 21), Counter32()).setLabel("swL2PortStFrames-256-511-bytes").setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStFrames_256_511_bytes.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortStFrames_256_511_bytes.setDescription('This counter is incremented once for every received and trans- mitted packet with size of 256 to 511 bytes. This counter includes rejected received and transmitted packets.')
swL2PortStFrames_512_1023_bytes = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 22), Counter32()).setLabel("swL2PortStFrames-512-1023-bytes").setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStFrames_512_1023_bytes.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortStFrames_512_1023_bytes.setDescription('This counter is incremented once for every received and trans- mitted packet with size of 512 to 1023 bytes. This counter includ- es rejected received and transmitted packets.')
swL2PortStFrames_1024_1536_bytes = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 23), Counter32()).setLabel("swL2PortStFrames-1024-1536-bytes").setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStFrames_1024_1536_bytes.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortStFrames_1024_1536_bytes.setDescription('This counter is incremented once for every received and trans- mitted packet with size of 1024 to 1536 bytes. This counter includ- es rejected received and transmitted packets.')
swL2PortStFramesDroppedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStFramesDroppedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortStFramesDroppedFrames.setDescription('This counter is incremented once for every received dropped pack- et.')
swL2PortStMulticastFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStMulticastFramesTx.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortStMulticastFramesTx.setDescription('The number of multicast frames sent. This counter does not include broadcast packets.')
swL2PortStBroadcastFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStBroadcastFramesTx.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortStBroadcastFramesTx.setDescription('The number of broadcast frames sent.')
swL2PortStUndersizeFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 4, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swL2PortStUndersizeFrames.setStatus('mandatory')
if mibBuilder.loadTexts: swL2PortStUndersizeFrames.setDescription('This counter is incremented once for every received packet which meets all the following conditions: 1.Packet data length is less than 64 bytes. 2.Packet has valid CRC. 3.Collision event , late collision event and receive error event have not been detected.')
swEventPortPartition = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 1, 2) + (0,1)).setObjects(("ES1200-MIB", "swL2PortInfoUnitIndex"), ("ES1200-MIB", "swL2PortInfoModuleIndex"), ("ES1200-MIB", "swL2PortInfoIndex"))
if mibBuilder.loadTexts: swEventPortPartition.setDescription('The trap is sent whenever the port state enter the Partion mode when more than 61 collisions occur while trasmitting.')
swEventlinkChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 1, 2) + (0,2)).setObjects(("ES1200-MIB", "swL2PortInfoUnitIndex"), ("ES1200-MIB", "swL2PortInfoModuleIndex"), ("ES1200-MIB", "swL2PortInfoIndex"))
if mibBuilder.loadTexts: swEventlinkChangeEvent.setDescription('The trap is sent whenever the link state of a port changes from link up to link down or from link down to link up')
swEventBcastRisingStorm = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 1, 2) + (0,3)).setObjects(("ES1200-MIB", "swL2PortInfoUnitIndex"), ("ES1200-MIB", "swL2PortInfoModuleIndex"), ("ES1200-MIB", "swL2PortInfoIndex"))
if mibBuilder.loadTexts: swEventBcastRisingStorm.setDescription('The trap indicates that broadcast higher rising threshold . This trap including the port ID')
swEventBcastFallingStorm = NotificationType((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 1, 2) + (0,4)).setObjects(("ES1200-MIB", "swL2PortInfoUnitIndex"), ("ES1200-MIB", "swL2PortInfoModuleIndex"), ("ES1200-MIB", "swL2PortInfoIndex"))
if mibBuilder.loadTexts: swEventBcastFallingStorm.setDescription('The trap indicates that broadcast higher falling threshold . This trap including the port ID')
swIGMP = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7))
swIGMPCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7, 1))
swIGMPAdminState = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIGMPAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: swIGMPAdminState.setDescription('This object allows the user to enable/disable the IGMP snooping function. The IGMP function provided by the device includes both v1 and v2.')
swIGMPTimeout = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7, 1, 2), Integer32().clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIGMPTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: swIGMPTimeout.setDescription('The timeout value for sending IGMP query packet when no one was sent by the multicast router in the lan. The device will actively send the query message. ')
swIGMPInfoTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7, 2), )
if mibBuilder.loadTexts: swIGMPInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: swIGMPInfoTable.setDescription('The table contains the number current IGMP query packets which is captured by this device, as well as the IGMP query packets sent by the device.')
swIGMPInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7, 2, 1), ).setIndexNames((0, "ES1200-MIB", "swIGMPInfoIndex"))
if mibBuilder.loadTexts: swIGMPInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: swIGMPInfoEntry.setDescription('Information about current IGMP query information, provided that swDevIGMPCaptureState and swIGMPCtrlState of associated VLAN entry are all enabled.')
swIGMPInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swIGMPInfoIndex.setDescription('This object indicates the IGMP query information entry number. It could be up to 12 entries, depending on current number of VLAN entries.')
swIGMPInfoVid = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPInfoVid.setStatus('mandatory')
if mibBuilder.loadTexts: swIGMPInfoVid.setDescription('This object indicates the Vid of associated IGMP info table entry. It follows swIGMPCtrlVid in the associated entry of IGMP control table (swIGMPCtrlTable).')
swIGMPInfoQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPInfoQueryCount.setStatus('mandatory')
if mibBuilder.loadTexts: swIGMPInfoQueryCount.setDescription('This object indicates the number of query packets received since the IGMP function enabled, in per-VLAN basis.')
swIGMPInfoTxQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPInfoTxQueryCount.setStatus('mandatory')
if mibBuilder.loadTexts: swIGMPInfoTxQueryCount.setDescription('This object indicates the send count of IGMP query messages, in per-VLAN basis. In case of IGMP timer expiration, the switch sends IGMP query packets to related VLAN member ports and increment this object by 1.')
swIGMPTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7, 3), )
if mibBuilder.loadTexts: swIGMPTable.setStatus('mandatory')
if mibBuilder.loadTexts: swIGMPTable.setDescription('This table contains information regarding to the IGMP group membership report received by each port. The system will use the information recorded in this table to forward the multicast packet to those ports which have group membership. Since packets will not be forwarded to necessary ports, the network bandwith can thus be saved.')
swIGMPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7, 3, 1), ).setIndexNames((0, "ES1200-MIB", "swIGMPVid"), (0, "ES1200-MIB", "swIGMPGroupIpAddr"))
if mibBuilder.loadTexts: swIGMPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: swIGMPEntry.setDescription('Each entry describes the ports which are member of a specific group address. Note that when a specific multicast address existing in the table also exist in the filter table, the filter table has higher priority over this table.')
swIGMPVid = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPVid.setStatus('mandatory')
if mibBuilder.loadTexts: swIGMPVid.setDescription('This object indicates the Vid of individual IGMP table entry. It shows the Vid of IGMP report information captured on network.')
swIGMPGroupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPGroupIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: swIGMPGroupIpAddr.setDescription('A IP multicast group address which has port membership in the underlying network.')
swIGMPGroupMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7, 3, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPGroupMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: swIGMPGroupMacAddr.setDescription('The multicast MAC address corresponds to swIGMPGroupIpAddr.')
swIGMPPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7, 3, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPPortMap.setStatus('mandatory')
if mibBuilder.loadTexts: swIGMPPortMap.setDescription('Indicates the set of ports which are members of this multicast group. These ports are represented by a octet string.The most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port.')
swIGMPIpGroupReportCount = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPIpGroupReportCount.setStatus('mandatory')
if mibBuilder.loadTexts: swIGMPIpGroupReportCount.setDescription('Indicates the number of group membership report packets received by the device corresponding to this multicast group.')
swIGMPCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7, 4), )
if mibBuilder.loadTexts: swIGMPCtrlTable.setStatus('mandatory')
if mibBuilder.loadTexts: swIGMPCtrlTable.setDescription("The table controls the Vlan's IGMP function. Its scale depends on current VLAN state (swVlanInfoStatus). If VLAN is disabled or in Mac-Base mode, there is only one entry in the table, with index 1. If VLAN is in Port-Base or 802.1q mode, the number of entries can be up to 12, with index range from 1 to 12.")
swIGMPCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7, 4, 1), ).setIndexNames((0, "ES1200-MIB", "swIGMPCtrlIndex"))
if mibBuilder.loadTexts: swIGMPCtrlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: swIGMPCtrlEntry.setDescription('The entry in IGMP control table (swIGMPCtrlTable). The entry is effective only when IGMP capture switch is enabled.')
swIGMPCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPCtrlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swIGMPCtrlIndex.setDescription('This object indicates the IGMP control entry number.Its scale depends on current VLAN state (es400VlanInfoStatus). If VLAN is disabled or in Mac-Base mode, there is only one entry in the table, with index 1. If VLAN is in Port-Base or 802.1q mode, the number of entries is 12, with index range from 1 to 12.')
swIGMPCtrlVid = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIGMPCtrlVid.setStatus('mandatory')
if mibBuilder.loadTexts: swIGMPCtrlVid.setDescription("This object indicates the IGMP control entry's VLAN id. If VLAN is disabled or in Mac-Base mode, the Vid is always 0 and cannot be changed by management users. If VLAN is in Port-Base mode, the Vid is arranged from 1 to 12 , fixed form. If VLAN is in 802.1q mode, the Vid setting can vary from 1 to 4094 by management user, and the Vid in each entry must be unique in the IGMP Control Table.")
swIGMPCtrlTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 9999)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIGMPCtrlTimer.setStatus('mandatory')
if mibBuilder.loadTexts: swIGMPCtrlTimer.setDescription('The timer value for sending IGMP query packet when none was sent by the multicast router in the LAN. The timer works in per-VLAN basis. Our device will be activated to send the query message if the timer is expired. Please reference RFC2236-1997. And it recommends a default of 125 seconds. The timeout value must be at least 30 seconds.')
swIGMPCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 7, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("deleted", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIGMPCtrlState.setStatus('mandatory')
if mibBuilder.loadTexts: swIGMPCtrlState.setDescription('This object indicates the status of this entry. other(1) - This entry is currently in use but the conditions under which it will remain so are different from each of the following values. disable(2) - IGMP funtion is disabled for this entry. enable(3) - IGMP funtion is enabled for this entry. deleted(4) - IGMP entry is deleted.')
swL2DevMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 1))
swL2DevCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 1, 1))
swL2DevCtrlStpState = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("notAvailable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlStpState.setStatus('mandatory')
if mibBuilder.loadTexts: swL2DevCtrlStpState.setDescription('This object can be enabled or disabled spanning tree algorithm during runtime of the system.')
swL2DevCtrlPartitionModeState = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("notAvailable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlPartitionModeState.setStatus('mandatory')
if mibBuilder.loadTexts: swL2DevCtrlPartitionModeState.setDescription('This object used to enable or disable port auto partition. When the object apply for all ports of the device')
swL2DevCtrlTableLockState = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("notAvailable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlTableLockState.setStatus('mandatory')
if mibBuilder.loadTexts: swL2DevCtrlTableLockState.setDescription("This object indicates whether the address table is locked. In other words, the address table doesn't learn any more new address. The aging timer is suspended when the address table is locked. As long as the table is locked, all of the frames are dropped if the destination can not be found in the address.")
swL2DevCtrlHOLState = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("notAvailable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlHOLState.setStatus('mandatory')
if mibBuilder.loadTexts: swL2DevCtrlHOLState.setDescription("The object provides a way to prevent HOL (Head Of Line) blocking between ports. HOL protection may prevent forwarding a packet to a blocking port.The idea relies on the assumption that it is better to discard packets destined to blocking ports, then to let them consume more and more buffers in the input-port's Rx-counters because eventually these input ports may become totally blocked. The meanings of the values are: other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. disabled(2) - HOL function disable for device. enabled(3) - HOL function enable for device.")
swL2DevCtrlAddrLookupModesAndHitRate = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("level0", 1), ("level1", 2), ("level2", 3), ("level3", 4), ("level4", 5), ("level5", 6), ("level6", 7), ("level7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlAddrLookupModesAndHitRate.setStatus('mandatory')
if mibBuilder.loadTexts: swL2DevCtrlAddrLookupModesAndHitRate.setDescription('According to the differnet address looke mode setting, to enlarge the address table size is possible in device. But there is side effect as the higher level you have, the lower thorughput device has. That means Level 0 get the smallest table size, but get better performace. We recommand the user use the Level 1 as defualt setting.')
swL2DevCtrlUploadImageFileName = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlUploadImageFileName.setStatus('mandatory')
if mibBuilder.loadTexts: swL2DevCtrlUploadImageFileName.setDescription('The name of the image file to be uploaded from the device to TFTP server when enabling image upload function (by writing swDevCtrlUploadImage).')
swL2DevCtrlUploadImage = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 1, 1, 7), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: swL2DevCtrlUploadImage.setStatus('mandatory')
if mibBuilder.loadTexts: swL2DevCtrlUploadImage.setDescription('Image file upload control. Writing it by any value will immediately invoke image upload function.')
swL2DevCtrlClearAddressTable = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevCtrlClearAddressTable.setStatus('mandatory')
if mibBuilder.loadTexts: swL2DevCtrlClearAddressTable.setDescription('This object indicates the agent clear address table. Setting this object to clear(2) will clear address table. The agent alwats return other(1) when this object is read.')
swL2DevAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 1, 2))
swL2DevAlarmPartition = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("notAvailable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmPartition.setStatus('mandatory')
if mibBuilder.loadTexts: swL2DevAlarmPartition.setDescription("Depending on this object, the device send a trap or not when any one of the device's ports was partitioned.")
swL2DevAlarmNewRoot = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("notAvailable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmNewRoot.setStatus('mandatory')
if mibBuilder.loadTexts: swL2DevAlarmNewRoot.setDescription('When the device has become the new root of the Spanning Tree, this object decide whether to send a new root trap.')
swL2DevAlarmTopChange = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("notAvailable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmTopChange.setStatus('mandatory')
if mibBuilder.loadTexts: swL2DevAlarmTopChange.setDescription("This object determines to send a trap or not when the switch topology was changed. If the object is enabled(3), the topologyChange trap is sent by the device when any of its configured ports transitions from the Learning state to the Forwarding state, or from the Forwarding state to the Blocking state. For the same port tranition, the device doesn't send the trap if this object value is disabled or other.")
swL2DevAlarmLinkChange = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("notAvailable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swL2DevAlarmLinkChange.setStatus('mandatory')
if mibBuilder.loadTexts: swL2DevAlarmLinkChange.setDescription("This object determines to send a trap or not when the link was changed. If the object is enabled(3), the Link Change trap is sent by the device when any of its ports link change. The device doesn't send the trap if this object value is disabled or other.")
swVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8))
pBridgeMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4))
class EnabledStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class TruthValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("true", 1), ("false", 2))

class TimeInterval(Integer32):
    pass

dot1dExtBase = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 1))
dot1dPriority = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 2))
dot1dGarp = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 3))
dot1dGmrp = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 4))
dot1dDeviceCapabilities = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dDeviceCapabilities.setReference('ISO/IEC 15802-3 Section 5.2, IEEE 802.1Q/D11 Section 5.2, 12.10.1.1.3/b/2')
if mibBuilder.loadTexts: dot1dDeviceCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dDeviceCapabilities.setDescription('Indicates the optional parts of IEEE 802.1D and 802.1Q that are implemented by this device and are managable through this MIB. Capabilities that are allowed on a per-port basis are indicated in dot1dPortCapabilities.')
dot1dTrafficClassesEnabled = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 1, 2), TruthValue().clone('true')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dTrafficClassesEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dTrafficClassesEnabled.setDescription('The value true(1) indicates that Traffic Classes are enabled on this bridge. When false(2), the bridge operates with a single priority level for all traffic.')
dot1dGmrpStatus = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 1, 3), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dGmrpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dGmrpStatus.setDescription('The administrative status requested by management for GMRP. The value enabled(1) indicates that GMRP should be enabled on this device, in all VLANs, on all ports for which it has not been specifically disabled. When disabled(2), GMRP is disabled, in all VLANs, on all ports and all GMRP packets will be forwarded transparently. This object affects both Applicant and Registrar state machines. A transition from disabled(2) to enabled(1) will cause a reset of all GMRP state machines on all ports.')
dot1dPortCapabilitiesTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 1, 4), )
if mibBuilder.loadTexts: dot1dPortCapabilitiesTable.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dPortCapabilitiesTable.setDescription('A table that contains capabilities information about every port that is associated with this bridge.')
dot1dPortCapabilitiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 1, 4, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: dot1dPortCapabilitiesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dPortCapabilitiesEntry.setDescription('A set of capabilities information about this port indexed by dot1dBasePort.')
dot1dPortCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dPortCapabilities.setReference('ISO/IEC 15802-3 Section 5.2, IEEE 802.1Q/D11 Section 5.2')
if mibBuilder.loadTexts: dot1dPortCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dPortCapabilities.setDescription('Indicates the parts of IEEE 802.1D and 802.1Q that are optional on a per-port basis that are implemented by this device and are managable through this MIB.')
dot1dPortPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 2, 1), )
if mibBuilder.loadTexts: dot1dPortPriorityTable.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dPortPriorityTable.setDescription('A table that contains information about every port that is associated with this transparent bridge.')
dot1dPortPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 2, 1, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: dot1dPortPriorityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dPortPriorityEntry.setDescription('A list of the number of egress traffic classes supported for each port in a transparent bridge. This is indexed by dot1dBasePort.')
dot1dPortNumTrafficClasses = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dPortNumTrafficClasses.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dPortNumTrafficClasses.setDescription('The number of egress traffic classes supported on this port. This object may optionally be read-only.')
dot1dPortGarpTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 3, 1), )
if mibBuilder.loadTexts: dot1dPortGarpTable.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dPortGarpTable.setDescription('A table of GARP control information about every bridge port. This is indexed by dot1dBasePort.')
dot1dPortGarpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 3, 1, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: dot1dPortGarpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dPortGarpEntry.setDescription('GARP control information for a bridge port.')
dot1dPortGarpJoinTime = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 3, 1, 1, 1), TimeInterval().subtype(subtypeSpec=ValueRangeConstraint(20, 65535)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dPortGarpJoinTime.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dPortGarpJoinTime.setDescription('The GARP Join time, in centiseconds.')
dot1dPortGarpLeaveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 3, 1, 1, 2), TimeInterval().subtype(subtypeSpec=ValueRangeConstraint(20, 65535)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dPortGarpLeaveTime.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dPortGarpLeaveTime.setDescription('The GARP Leave time, in centiseconds.')
dot1dPortGarpLeaveAllTime = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 3, 1, 1, 3), TimeInterval().subtype(subtypeSpec=ValueRangeConstraint(20, 65535)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dPortGarpLeaveAllTime.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dPortGarpLeaveAllTime.setDescription('The GARP LeaveAll time, in centiseconds.')
dot1dPortGmrpTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 4, 1), )
if mibBuilder.loadTexts: dot1dPortGmrpTable.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dPortGmrpTable.setDescription('A table of GMRP control and status information about every bridge port. Augments the dot1dBasePortTable.')
dot1dPortGmrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 4, 1, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: dot1dPortGmrpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dPortGmrpEntry.setDescription('GMRP control and status information for a bridge port.')
dot1dPortGmrpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 4, 1, 1, 1), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1dPortGmrpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dPortGmrpStatus.setDescription('The state of GMRP operation on this port. The value enabled(1) indicates that GMRP is enabled on this port, in all VLANs, as long as dot1dGmrpStatus is also enabled for this device. When disabled(2) but dot1dGmrpStatus is still enabled for the device, GMRP is disabled on this port in all VLANs: any GMRP packets received will be silently discarded and no GMRP registrations will be propagated from other ports. This object affects all GMRP Applicant and Registrar state machines on this port. A transition from disabled(2) to enabled(1) will cause a reset of all GMRP state machines on this port.')
dot1dPortGmrpFailedRegistrations = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 4, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dPortGmrpFailedRegistrations.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dPortGmrpFailedRegistrations.setDescription('The total number of failed GMRP registrations, for any reason, in all VLANs, on this port.')
dot1dPortGmrpLastPduOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 4, 4, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1dPortGmrpLastPduOrigin.setStatus('mandatory')
if mibBuilder.loadTexts: dot1dPortGmrpLastPduOrigin.setDescription('The Source MAC Address of the last GMRP message received on this port.')
qBridgeMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5))
class Unsigned32(Integer32):
    pass

class VlanId(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4094)

class TimeFilter(Integer32):
    pass

dot1qBase = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 1))
dot1qTp = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 2))
dot1qStatic = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 3))
dot1qVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4))
dot1qVlanVersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("version1", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qVlanVersionNumber.setReference('IEEE 802.1Q/D11 Section 12.10.1.1')
if mibBuilder.loadTexts: dot1qVlanVersionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qVlanVersionNumber.setDescription('The version number of IEEE 802.1Q that this device supports.')
dot1qMaxVlanId = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 1, 2), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qMaxVlanId.setReference('IEEE 802.1Q/D11 Section 9.3.2.3')
if mibBuilder.loadTexts: dot1qMaxVlanId.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qMaxVlanId.setDescription('The maximum IEEE 802.1Q VLAN ID that this device supports.')
dot1qMaxSupportedVlans = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qMaxSupportedVlans.setReference('IEEE 802.1Q/D11 Section 12.10.1.1')
if mibBuilder.loadTexts: dot1qMaxSupportedVlans.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qMaxSupportedVlans.setDescription('The maximum number of IEEE 802.1Q VLANs that this device supports.')
dot1qNumVlans = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qNumVlans.setReference('IEEE 802.1Q/D11 Section 12.7.1.1')
if mibBuilder.loadTexts: dot1qNumVlans.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qNumVlans.setDescription('The current number of IEEE 802.1Q VLANs that are configured in this device.')
dot1qGvrpStatus = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 1, 5), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qGvrpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qGvrpStatus.setDescription('The administrative status requested by management for GVRP. The value enabled(1) indicates that GVRP should be enabled on this device, on all ports for which it has not been specifically disabled. When disabled(2), GVRP is disabled on all ports and all GVRP packets will be forwarded transparently. This object affects all GVRP Applicant and Registrar state machines. A transition from disabled(2) to enabled(1) will cause a reset of all GVRP state machines on all ports.')
dot1qFdbTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 2, 1), )
if mibBuilder.loadTexts: dot1qFdbTable.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qFdbTable.setDescription('A table that contains configuration and control information for each Filtering Database currently operating on this device. Entries in this table appear automatically when VLANs are assigned FDB IDs in the dot1qVlanCurrentTable.')
dot1qFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 2, 1, 1), ).setIndexNames((0, "ES1200-MIB", "dot1qFdbId"))
if mibBuilder.loadTexts: dot1qFdbEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qFdbEntry.setDescription('Information about a specific Filtering Database.')
dot1qFdbId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: dot1qFdbId.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qFdbId.setDescription('The identity of this Filtering Database.')
dot1qFdbDynamicCount = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qFdbDynamicCount.setReference('IEEE 802.1Q/D11 Section 12.7.1.1.3')
if mibBuilder.loadTexts: dot1qFdbDynamicCount.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qFdbDynamicCount.setDescription('The current number of dynamic entries in this Filtering Database.')
dot1qTpFdbTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 2, 2), )
if mibBuilder.loadTexts: dot1qTpFdbTable.setReference('IEEE 802.1Q/D11 Section 12.7.7')
if mibBuilder.loadTexts: dot1qTpFdbTable.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qTpFdbTable.setDescription('A table that contains information about unicast entries for which the device has forwarding and/or filtering information. This information is used by the transparent bridging function in determining how to propagate a received frame.')
dot1qTpFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 2, 2, 1), ).setIndexNames((0, "ES1200-MIB", "dot1qFdbId"), (0, "ES1200-MIB", "dot1qTpFdbAddress"))
if mibBuilder.loadTexts: dot1qTpFdbEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qTpFdbEntry.setDescription('Information about a specific unicast MAC address for which the device has some forwarding and/or filtering information.')
dot1qTpFdbAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 2, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: dot1qTpFdbAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qTpFdbAddress.setDescription('A unicast MAC address for which the device has forwarding and/or filtering information.')
dot1qTpFdbPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qTpFdbPort.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qTpFdbPort.setDescription("Either the value '0', or the port number of the port on which a frame having a source address equal to the value of the corresponding instance of dot1qTpFdbAddress has been seen. A value of '0' indicates that the port number has not been learned but that the device does have some forwarding/filtering information about this address (e.g. in the dot1qStaticUnicastTable). Implementers are encouraged to assign the port value to this object whenever it is learned even for addresses for which the corresponding value of dot1qTpFdbStatus is not learned(3).")
dot1qTpFdbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("learned", 3), ("self", 4), ("mgmt", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qTpFdbStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qTpFdbStatus.setDescription("The status of this entry. The meanings of the values are: other(1) - none of the following. This may include the case where some other MIB object (not the corresponding instance of dot1qTpFdbPort, nor an entry in the dot1qStaticUnicastTable) is being used to determine if and how frames addressed to the value of the corresponding instance of dot1qTpFdbAddress are being forwarded. invalid(2) - this entry is no longer valid (e.g., it was learned but has since aged out), but has not yet been flushed from the table. learned(3) - the value of the corresponding instance of dot1qTpFdbPort was learned and is being used. self(4) - the value of the corresponding instance of dot1qTpFdbAddress represents one of the device's addresses. The corresponding instance of dot1qTpFdbPort indicates which of the device's ports has this address. mgmt(5) - the value of the corresponding instance of dot1qTpFdbAddress is also the value of an existing instance of dot1qStaticAddress.")
dot1qTpGroupTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 2, 3), )
if mibBuilder.loadTexts: dot1qTpGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qTpGroupTable.setDescription('A table containing filtering information for VLANs configured into the bridge by (local or network) management, or learnt dynamically, specifying the set of ports to which frames received on a VLAN for this FDB and containing a specific Group destination address are allowed to be forwarded.')
dot1qTpGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 2, 3, 1), ).setIndexNames((0, "ES1200-MIB", "dot1qVlanIndex"), (0, "ES1200-MIB", "dot1qTpGroupAddress"))
if mibBuilder.loadTexts: dot1qTpGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qTpGroupEntry.setDescription('Filtering information configured into the bridge by management, or learnt dynamically, specifying the set of ports to which frames received on a VLAN and containing a specific Group destination address, are allowed to be forwarded. The subset of these ports learnt dynamically is also provided.')
dot1qTpGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 2, 3, 1, 1), MacAddress())
if mibBuilder.loadTexts: dot1qTpGroupAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qTpGroupAddress.setDescription("The destination Group MAC address in a frame to which this entry's filtering information applies.")
dot1qTpGroupEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 2, 3, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qTpGroupEgressPorts.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qTpGroupEgressPorts.setDescription('The complete set of ports, in this Filtering Database, to which frames destined for this Group MAC address are currently being explicitly forwarded. This does not include ports for which this address is only implicitly forwarded, in the dot1qForwardAllPorts list.')
dot1qTpGroupLearnt = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 2, 3, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qTpGroupLearnt.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qTpGroupLearnt.setDescription('The subset of ports in dot1qTpGroupEgressPorts which were learnt by GMRP or some other dynamic mechanism, in this Filtering database.')
dot1qStaticMulticastTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 3, 2), )
if mibBuilder.loadTexts: dot1qStaticMulticastTable.setReference('IEEE 802.1Q/D11 Section 12.7.7, ISO/IEC 15802-3 Section 7.9.1')
if mibBuilder.loadTexts: dot1qStaticMulticastTable.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qStaticMulticastTable.setDescription('A table containing filtering information for Multicast and Broadcast MAC addresses for each VLAN, configured into the device by (local or network) management specifying the set of ports to which frames received from specific ports and containing specific Multicast and Broadcast destination addresses are allowed to be forwarded. A value of zero in this table as the port number from which frames with a specific destination address are received, is used to specify all ports for which there is no specific entry in this table for that particular destination address. Entries are valid for Multicast and Broadcast addresses only.')
dot1qStaticMulticastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 3, 2, 1), ).setIndexNames((0, "ES1200-MIB", "dot1qVlanIndex"), (0, "ES1200-MIB", "dot1qStaticMulticastAddress"), (0, "ES1200-MIB", "dot1qStaticMulticastReceivePort"))
if mibBuilder.loadTexts: dot1qStaticMulticastEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qStaticMulticastEntry.setDescription('Filtering information configured into the device by (local or network) management specifying the set of ports to which frames received from this specific port for this VLAN and containing this Multicast or Broadcast destination address are allowed to be forwarded.')
dot1qStaticMulticastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 3, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: dot1qStaticMulticastAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qStaticMulticastAddress.setDescription("The destination MAC address in a frame to which this entry's filtering information applies. This object must take the value of a Multicast or Broadcast address.")
dot1qStaticMulticastReceivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: dot1qStaticMulticastReceivePort.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qStaticMulticastReceivePort.setDescription("Either the value '0', or the port number of the port from which a frame must be received in order for this entry's filtering information to apply. A value of zero indicates that this entry applies on all ports of the device for which there is no other applicable entry.")
dot1qStaticMulticastStaticEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 3, 2, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qStaticMulticastStaticEgressPorts.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qStaticMulticastStaticEgressPorts.setDescription('The set of ports to which frames received from a specific port and destined for a specific Multicast or Broadcast MAC address must be forwarded, regardless of any dynamic information e.g. from GMRP. A port may not be added in this set if it is already a member of the set of ports in dot1qStaticMulticastForbiddenEgressPorts. The default value of this object is a string of ones of appropriate length.')
dot1qStaticMulticastForbiddenEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 3, 2, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qStaticMulticastForbiddenEgressPorts.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qStaticMulticastForbiddenEgressPorts.setDescription('The set of ports to which frames received from a specific port and destined for a specific Multicast or Broadcast MAC address must not be forwarded, regardless of any dynamic information e.g. from GMRP. A port may not be added in this set if it is already a member of the set of ports in dot1qStaticMulticastStaticEgressPorts. The default value of this object is a string of zeros of appropriate length.')
dot1qStaticMulticastStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("permanent", 3), ("deleteOnReset", 4), ("deleteOnTimeout", 5))).clone('permanent')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qStaticMulticastStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qStaticMulticastStatus.setDescription('This object indicates the status of this entry. other(1) - this entry is currently in use but the conditions under which it will remain so differ from the following values. invalid(2) - writing this value to the object removes the corresponding entry. permanent(3) - this entry is currently in use and will remain so after the next reset of the bridge. deleteOnReset(4) - this entry is currently in use and will remain so until the next reset of the bridge. deleteOnTimeout(5) - this entry is currently in use and will remain so until it is aged out.')
dot1qVlanNumDeletes = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qVlanNumDeletes.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qVlanNumDeletes.setDescription('The number of times a VLAN entry has been deleted from the dot1qVlanCurrentTable (for any reason). If an entry is deleted, then inserted, and then deleted, this counter will be incremented by 2.')
dot1qVlanCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 2), )
if mibBuilder.loadTexts: dot1qVlanCurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qVlanCurrentTable.setDescription('A table containing current configuration information for each VLAN currently configured into the device by (local or network) management, or dynamically created as a result of GVRP requests received.')
dot1qVlanCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 2, 1), ).setIndexNames((0, "ES1200-MIB", "dot1qVlanTimeMark"), (0, "ES1200-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: dot1qVlanCurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qVlanCurrentEntry.setDescription('Information for a VLAN configured into the device by (local or network) management, or dynamically created as a result of GVRP requests received.')
dot1qVlanTimeMark = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 2, 1, 1), TimeFilter())
if mibBuilder.loadTexts: dot1qVlanTimeMark.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qVlanTimeMark.setDescription('A TimeFilter for this entry. See the TimeFilter textual convention to see how this works.')
dot1qVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 2, 1, 2), VlanIndex())
if mibBuilder.loadTexts: dot1qVlanIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qVlanIndex.setDescription('The VLAN-ID or other identifier refering to this VLAN.')
dot1qVlanFdbId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qVlanFdbId.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qVlanFdbId.setDescription('The Filtering Database used by this VLAN. This is one of the dot1qFdbId values in the dot1qFdbTable. This value is allocated automatically by the device whenever the VLAN is created: either dynamically by GVRP, or by management, in dot1qVlanStaticTable. Allocation of this value follows the learning constraints defined for this VLAN in dot1qLearningConstraintsTable.')
dot1qVlanCurrentEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 2, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qVlanCurrentEgressPorts.setReference('IEEE 802.1Q/D11 Section 12.10.2.1')
if mibBuilder.loadTexts: dot1qVlanCurrentEgressPorts.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qVlanCurrentEgressPorts.setDescription('The set of ports which are transmitting traffic for this VLAN as either tagged or untagged frames.')
dot1qVlanCurrentUntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 2, 1, 5), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qVlanCurrentUntaggedPorts.setReference('IEEE 802.1Q/D11 Section 12.10.2.1')
if mibBuilder.loadTexts: dot1qVlanCurrentUntaggedPorts.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qVlanCurrentUntaggedPorts.setDescription('The set of ports which are transmitting traffic for this VLAN as untagged frames.')
dot1qVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("permanent", 2), ("dynamicGvrp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qVlanStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qVlanStatus.setDescription('This object indicates the status of this entry. other(1) - this entry is currently in use but the conditions under which it will remain so differ from the following values. permanent(2) - this entry, corresponding to an entry in dot1qVlanStaticTable, is currently in use and will remain so after the next reset of the device. The port lists for this entry include ports from the equivalent dot1qVlanStaticTable entry and ports learnt dynamically. dynamicGvrp(3) - this entry is currently in use and will remain so until removed by GVRP. There is no static entry for this VLAN and it will be removed when the last port leaves the VLAN.')
dot1qVlanCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 2, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qVlanCreationTime.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qVlanCreationTime.setDescription('The value of sysUpTime when this VLAN was created.')
dot1qVlanStaticTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 3), )
if mibBuilder.loadTexts: dot1qVlanStaticTable.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qVlanStaticTable.setDescription('A table containing static configuration information for each VLAN configured into the device by (local or network) management. All entries are permanent and will be restored after the device is reset.')
dot1qVlanStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 3, 1), ).setIndexNames((0, "ES1200-MIB", "dot1qVlanIndex"))
if mibBuilder.loadTexts: dot1qVlanStaticEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qVlanStaticEntry.setDescription('Static information for a VLAN configured into the device by (local or network) management.')
dot1qVlanStaticName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanStaticName.setReference('IEEE 802.1Q/D11 Section 12.10.2.1')
if mibBuilder.loadTexts: dot1qVlanStaticName.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qVlanStaticName.setDescription('An administratively assigned string, which may be used to identify the VLAN.')
dot1qVlanStaticEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 3, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanStaticEgressPorts.setReference('IEEE 802.1Q/D11 Section 12.7.7.3, 11.2.3.2.3')
if mibBuilder.loadTexts: dot1qVlanStaticEgressPorts.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qVlanStaticEgressPorts.setDescription('The set of ports which are permanently assigned to the egress list for this VLAN by management. Changes to a bit in this object affect the per-port per-VLAN Registrar control for Registration Fixed for the relevant GVRP state machine on each port. A port may not be added in this set if it is already a member of the set of ports in dot1qVlanForbiddenEgressPorts. The default value of this object is a string of zeros of appropriate length, indicating not fixed.')
dot1qVlanForbiddenEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 3, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanForbiddenEgressPorts.setReference('IEEE 802.1Q/D11 Section 12.7.7.3, 11.2.3.2.3')
if mibBuilder.loadTexts: dot1qVlanForbiddenEgressPorts.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qVlanForbiddenEgressPorts.setDescription('The set of ports which are prohibited by management from being included in the egress list for this VLAN. Changes to this object that cause a port to be included or excluded affect the per-port per-VLAN Registrar control for Registration Forbidden for the relevant GVRP state machine on each port. A port may not be added in this set if it is already a member of the set of ports in dot1qVlanStaticEgressPorts. The default value of this object is a string of zeros of appropriate length, excluding all ports from the forbidden set.')
dot1qVlanStaticUntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 3, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanStaticUntaggedPorts.setReference('IEEE 802.1Q/D11 Section 12.10.2.1')
if mibBuilder.loadTexts: dot1qVlanStaticUntaggedPorts.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qVlanStaticUntaggedPorts.setDescription('The set of ports which should transmit egress packets for this VLAN as untagged. The default value of this object for the default VLAN (VlanId 001) is a string of appropriate length including all ports. There is no specified default for other VLANs. If a device cannot support a value being set then its agent will reject the set operation. Attempts to set more than one VLAN to be untagged on egress may be rejected by devices which do not support this option.')
dot1qVlanStaticRowState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("valid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qVlanStaticRowState.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qVlanStaticRowState.setDescription('This object indicates the status of this entry. other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. invalid(2) - writing this value to the object, and then the corresponding entry will be removed from the table. valid(3) - this entry is reside in the table.')
dot1qPortVlanTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 4), )
if mibBuilder.loadTexts: dot1qPortVlanTable.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qPortVlanTable.setDescription('A table containing per port control and status information for VLAN configuration in the device.')
dot1qPortVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 4, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: dot1qPortVlanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qPortVlanEntry.setDescription('Information controlling VLAN configuration for a port on the device. This is indexed by dot1dBasePort.')
dot1qPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 4, 1, 1), VlanIndex().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qPvid.setReference('IEEE 802.1Q/D11 Section 12.10.1.1')
if mibBuilder.loadTexts: dot1qPvid.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qPvid.setDescription('The PVID, the VLAN ID assigned to untagged frames or Prority-Tagged frames received on this port.')
dot1qPortIngressFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 4, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qPortIngressFiltering.setReference('IEEE 802.1Q/D11 Section 12.10.1.4')
if mibBuilder.loadTexts: dot1qPortIngressFiltering.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qPortIngressFiltering.setDescription('When this is true(1) the device will discard incoming frames for VLANs which do not include this Port in its Member set. When false(2), the port will accept all incoming frames. This control does not affect VLAN independent BPDU frames, such as GVRP and STP. It does affect VLAN dependent BPDU frames, such as GMRP.')
dot1qPortGvrpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 4, 1, 3), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1qPortGvrpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qPortGvrpStatus.setDescription('The state of GVRP operation on this port. The value enabled(1) indicates that GVRP is enabled on this port, as long as dot1qGvrpStatus is also enabled for this device. When disabled(2) but dot1qGvrpStatus is still enabled for the device, GVRP is disabled on this port: any GVRP packets received will be silently discarded and no GVRP registrations will be propagated from other ports. This object affects all GVRP Applicant and Registrar state machines on this port. A transition from disabled(2) to enabled(1) will cause a reset of all GVRP state machines on this port.')
dot1qPortGvrpFailedRegistrations = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qPortGvrpFailedRegistrations.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qPortGvrpFailedRegistrations.setDescription('The total number of failed GVRP registrations, for any reason, on this port.')
dot1qPortGvrpLastPduOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 5, 4, 4, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dot1qPortGvrpLastPduOrigin.setStatus('mandatory')
if mibBuilder.loadTexts: dot1qPortGvrpLastPduOrigin.setDescription('The Source MAC Address of the last GVRP message received on this port.')
swPortSniff = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 5))
swSniffCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 5, 1), )
if mibBuilder.loadTexts: swSniffCtrlTable.setStatus('mandatory')
if mibBuilder.loadTexts: swSniffCtrlTable.setDescription('A list of port sniffing entries.Port Sniffing function provides an easy way to monitor traffic on any port. In this way any good packets appears on the source mirror port also shows up on the target mirror port without need to reconstruct the LAN.')
swSniffCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 5, 1, 1), ).setIndexNames((0, "ES1200-MIB", "swSniffIndex"))
if mibBuilder.loadTexts: swSniffCtrlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: swSniffCtrlEntry.setDescription('Each entry contains a pair of sniff source port and target port.')
swSniffIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSniffIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swSniffIndex.setDescription('A unique number to identify the sniff entry.')
swSniffSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSniffSourcePort.setStatus('mandatory')
if mibBuilder.loadTexts: swSniffSourcePort.setDescription('Indicates the source port whose traffic will be sniffed.')
swSniffTargetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSniffTargetPort.setStatus('mandatory')
if mibBuilder.loadTexts: swSniffTargetPort.setDescription('Indicates the target port which the traffic appears on the source sniffed port will be copied to. A trunk port member cannot be configured as a target Sniffing port')
swSniffState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSniffState.setStatus('mandatory')
if mibBuilder.loadTexts: swSniffState.setDescription('This object indicates the status of this entry. other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. disable(2) - Sniff funtion disable. enable(3) - Sniff funtion enable and Sniff received or transmit packet by Sniff source port.')
swPortTrunk = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 6))
swPortTrunkCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 6, 1), )
if mibBuilder.loadTexts: swPortTrunkCtrlTable.setStatus('mandatory')
if mibBuilder.loadTexts: swPortTrunkCtrlTable.setDescription('This table specifies which port trunking configuration. Trunking ID is as following : trunk 1 - unit1, base, port5~12; trunk 2 - unit1, base, port13~20; trunk 3 - unit1, slot1, port21,22; trunk 4 - reserved; trunk 5, 9, 13 - unit2(3, 4), base, port7~14; trunk 6, 10, 14 - unit2(3, 4), base, port15~22; trunk 7, 11, 15 - unit2(3, 4), slot1, port23,24; trunk 8, 12, 16 - reserved')
swPortTrunkCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 6, 1, 1), ).setIndexNames((0, "ES1200-MIB", "swPortTrunkCtrlIndex"))
if mibBuilder.loadTexts: swPortTrunkCtrlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: swPortTrunkCtrlEntry.setDescription('Each entry specifies which ports are grouped as a single logical link.')
swPortTrunkCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTrunkCtrlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swPortTrunkCtrlIndex.setDescription('The index of logical trunk of ports.')
swPortTrunkCtrlAnchorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 6, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortTrunkCtrlAnchorPort.setStatus('mandatory')
if mibBuilder.loadTexts: swPortTrunkCtrlAnchorPort.setDescription('get anchor port number between trunk ports')
swPortTrunkCtrlMasterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTrunkCtrlMasterPort.setStatus('mandatory')
if mibBuilder.loadTexts: swPortTrunkCtrlMasterPort.setDescription('get master port number between trunk ports')
swPortTrunkCtrlName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 6, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortTrunkCtrlName.setStatus('mandatory')
if mibBuilder.loadTexts: swPortTrunkCtrlName.setDescription('The name of logical trunk of ports.')
swPortTrunkCtrlMember = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 6, 1, 1, 5), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortTrunkCtrlMember.setStatus('mandatory')
if mibBuilder.loadTexts: swPortTrunkCtrlMember.setDescription('specifies the member ports which are grouped as a trunk.')
swPortTrunkCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortTrunkCtrlState.setStatus('mandatory')
if mibBuilder.loadTexts: swPortTrunkCtrlState.setDescription('This object determines whether the trunk setting is in enable/disable state.')
swPortTrunkMemberTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 6, 2), )
if mibBuilder.loadTexts: swPortTrunkMemberTable.setStatus('mandatory')
if mibBuilder.loadTexts: swPortTrunkMemberTable.setDescription('A list of information provide a different view for member ports grouped as a trunk')
swPortTrunkMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 6, 2, 1), ).setIndexNames((0, "ES1200-MIB", "swPortTrunkMemberIndex"), (0, "ES1200-MIB", "swPortTrunkMemberUnitIndex"), (0, "ES1200-MIB", "swPortTrunkMemberModuleIndex"), (0, "ES1200-MIB", "swPortTrunkMemberPortIndex"))
if mibBuilder.loadTexts: swPortTrunkMemberEntry.setStatus('mandatory')
if mibBuilder.loadTexts: swPortTrunkMemberEntry.setDescription('Each entry corresponds to a member port.')
swPortTrunkMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTrunkMemberIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swPortTrunkMemberIndex.setDescription('Indicates the trunk ID where the port is located.')
swPortTrunkMemberUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTrunkMemberUnitIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swPortTrunkMemberUnitIndex.setDescription('Indicates the unit ID where the port is located.')
swPortTrunkMemberModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTrunkMemberModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swPortTrunkMemberModuleIndex.setDescription('Indicates the module ID where the port is located.')
swPortTrunkMemberPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 6, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortTrunkMemberPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swPortTrunkMemberPortIndex.setDescription('Indicates the port index relative to the module.')
swVlanCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 1))
swMacBaseVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 2))
swPortBaseVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 3))
swVlanCtrlMode = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("mac-base", 3), ("ieee8021q", 4), ("port-base", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swVlanCtrlMode.setStatus('mandatory')
if mibBuilder.loadTexts: swVlanCtrlMode.setDescription('This object controls which Vlan function will be enable (or disable) when the switch hub restart at the startup (power on) or warm start.')
swVlanInfoStatus = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("mac-base", 3), ("ieee8021q", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swVlanInfoStatus.setStatus('mandatory')
if mibBuilder.loadTexts: swVlanInfoStatus.setDescription('This object indicates which Vlan function be enable (or disable) in mandatoryly stage. There are no effect when change swVlanCtrlMode vlaue in the system running.')
swVlanSnmpPortVlan = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 1, 3), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swVlanSnmpPortVlan.setStatus('mandatory')
if mibBuilder.loadTexts: swVlanSnmpPortVlan.setDescription('Indicates the Vlan which the SNMP port belongs to. The value range is 1 to 4094.')
swMacBaseVlanInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 2, 1))
swMacBaseVlanMaxNum = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMacBaseVlanMaxNum.setStatus('mandatory')
if mibBuilder.loadTexts: swMacBaseVlanMaxNum.setDescription('The maximum number of Mac base Vlan allowed by the system.')
swMacBaseVlanAddrMaxNum = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMacBaseVlanAddrMaxNum.setStatus('mandatory')
if mibBuilder.loadTexts: swMacBaseVlanAddrMaxNum.setDescription('The maximum number of entries in Mac-based Vlan address table.')
swMacBaseVlanCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 2, 2), )
if mibBuilder.loadTexts: swMacBaseVlanCtrlTable.setStatus('mandatory')
if mibBuilder.loadTexts: swMacBaseVlanCtrlTable.setDescription('A table that contains information about MAC base Vlan entries for which the switch has forwarding and/or filtering information. This information is used by the transparent switching function in determining how to propagate a received frame.')
swMacBaseVlanCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 2, 2, 1), ).setIndexNames((0, "ES1200-MIB", "swMacBaseVlanDesc"))
if mibBuilder.loadTexts: swMacBaseVlanCtrlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: swMacBaseVlanCtrlEntry.setDescription('A list of information about a specific MAC base Vlan configuration portlist for which the switch has some forwarding and/or filtering information.')
swMacBaseVlanDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 2, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMacBaseVlanDesc.setStatus('mandatory')
if mibBuilder.loadTexts: swMacBaseVlanDesc.setDescription('A textual description of the Mac Base Vlan for memorization. The string cannot set to empty string. There is a default value for this string')
swMacBaseVlanMacMember = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMacBaseVlanMacMember.setStatus('mandatory')
if mibBuilder.loadTexts: swMacBaseVlanMacMember.setDescription('This object indicates the total number of MAC addresses contained in the VLAN entry.')
swMacBaseVlanCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMacBaseVlanCtrlState.setStatus('mandatory')
if mibBuilder.loadTexts: swMacBaseVlanCtrlState.setDescription('This object indicates the MacBase Vlan state.')
swMacBaseVlanAddrTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 2, 3), )
if mibBuilder.loadTexts: swMacBaseVlanAddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: swMacBaseVlanAddrTable.setDescription('A table that contains information about unicast or multicast entries for which the switch has forwarding and/or filtering information. This information is used by the transparent switching function in determining how to propagate a received frame. Note that the priority of MacBaseVlanAddr table entries is lowest than Filtering Table and FDB Table, i.e. if there is a table hash collision between the entries of MacBaseVlanAddr Table and Filtering Table inside the switch H/W address table, then Filtering Table entry overwrite the colliding entry of MacBaseVlanAddr Table. This state is same of FDB table. See swFdbFilterTable and swFdbStaticTable description also.')
swMacBaseVlanAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 2, 3, 1), ).setIndexNames((0, "ES1200-MIB", "swMacBaseVlanAddr"))
if mibBuilder.loadTexts: swMacBaseVlanAddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: swMacBaseVlanAddrEntry.setDescription('A list of information about a specific unicast or multicast MAC address for which the switch has some forwarding and/or filtering information.')
swMacBaseVlanAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 2, 3, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMacBaseVlanAddr.setStatus('mandatory')
if mibBuilder.loadTexts: swMacBaseVlanAddr.setDescription('This object indictaes a unicast or multicast MAC address for which the bridge has forwarding and/or filtering information.')
swMacBaseVlanAddrVlanDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMacBaseVlanAddrVlanDesc.setStatus('mandatory')
if mibBuilder.loadTexts: swMacBaseVlanAddrVlanDesc.setDescription('A textual description of the Mac Base Vlan for memorization .')
swMacBaseVlanAddrState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("valid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMacBaseVlanAddrState.setStatus('mandatory')
if mibBuilder.loadTexts: swMacBaseVlanAddrState.setDescription('This object indicates the MacBase Vlan Address entry state. other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. invalid(2) - writing this value to the object, and then the corresponding entry will be removed from the table. valid(3) - this entry is reside in the table.')
swMacBaseVlanAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("apply", 2), ("not-apply", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMacBaseVlanAddrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: swMacBaseVlanAddrStatus.setDescription('This object indicates the MacBase Vlan Address entry state. other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. apply(2) - this entry is currently in use and reside in the table. not-apply(3) - this entry is reside in the table but currently not in use due to conflict with filter table.')
swPortBaseVlanTotalNum = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortBaseVlanTotalNum.setStatus('mandatory')
if mibBuilder.loadTexts: swPortBaseVlanTotalNum.setDescription('The total number of Port-Base Vlan which is in enabled state within this switch hub.')
swPortBaseVlanDefaultVlanTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 3, 2), )
if mibBuilder.loadTexts: swPortBaseVlanDefaultVlanTable.setStatus('mandatory')
if mibBuilder.loadTexts: swPortBaseVlanDefaultVlanTable.setDescription('A table that contains default Port-Based VLAN list entries for the switch. The entry (Vid = 1,i.e. swPortBaseVlanDefaultPvid = 1) is defalut Port-Based VLAN , maintained by system.')
swPortBaseVlanDefaultVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 3, 2, 1), ).setIndexNames((0, "ES1200-MIB", "swPortBaseVlanDefaultPvid"))
if mibBuilder.loadTexts: swPortBaseVlanDefaultVlanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: swPortBaseVlanDefaultVlanEntry.setDescription('A list of default Port-Based VLAN information in swPortBaseVlanDefaultVlanTable.')
swPortBaseVlanDefaultPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortBaseVlanDefaultPvid.setStatus('mandatory')
if mibBuilder.loadTexts: swPortBaseVlanDefaultPvid.setDescription('This object indicates the default Port-Base Vlan ID. It occupies only 1 entry in VLAN table, with VID=1.')
swPortBaseVlanDefaultDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortBaseVlanDefaultDesc.setStatus('mandatory')
if mibBuilder.loadTexts: swPortBaseVlanDefaultDesc.setDescription('A textual description of the Port-Base Vlan.')
swPortBaseVlanDefaultPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 3, 2, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortBaseVlanDefaultPortList.setStatus('mandatory')
if mibBuilder.loadTexts: swPortBaseVlanDefaultPortList.setDescription('This object indicates the port member set of the specified Vlan. Each Vlan has a octect string to indicate the port map. The most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port.')
swPortBaseVlanDefaultPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortBaseVlanDefaultPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: swPortBaseVlanDefaultPortNumber.setDescription('This object indicates the number of ports of the entry.')
swPortBaseVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 3, 3), )
if mibBuilder.loadTexts: swPortBaseVlanConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: swPortBaseVlanConfigTable.setDescription("A table that contains Port-Based VLAN list entries for the switch. The device can't support port overlapping in Port-Based VLAN.")
swPortBaseVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 3, 3, 1), ).setIndexNames((0, "ES1200-MIB", "swPortBaseVlanConfigPvid"))
if mibBuilder.loadTexts: swPortBaseVlanConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: swPortBaseVlanConfigEntry.setDescription('A list of information about a specific Port-Based VLAN configuration in swPortBaseVlanConfigTable.')
swPortBaseVlanConfigPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortBaseVlanConfigPvid.setStatus('mandatory')
if mibBuilder.loadTexts: swPortBaseVlanConfigPvid.setDescription('This object indicates the Port-Base Vlan ID. There are up to 11 entries for current product now. The object range varies from 2 to 12.')
swPortBaseVlanConfigDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 3, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortBaseVlanConfigDesc.setStatus('mandatory')
if mibBuilder.loadTexts: swPortBaseVlanConfigDesc.setDescription('A textual description of the Port-Base Vlan. It cannot be a null string. And each description must be unique in the table.')
swPortBaseVlanConfigPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 3, 3, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortBaseVlanConfigPortList.setStatus('mandatory')
if mibBuilder.loadTexts: swPortBaseVlanConfigPortList.setDescription('This object indicates which ports are belong to the Vlan. Each Vlan has a octect string to indicate with port map. The most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port.')
swPortBaseVlanConfigPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 25, 2, 8, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortBaseVlanConfigPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: swPortBaseVlanConfigPortNumber.setDescription('This object indicates the number of ports of the entry.')
mibBuilder.exportSymbols("ES1200-MIB", swIGMPIpGroupReportCount=swIGMPIpGroupReportCount, swL2DevCtrlAddrLookupModesAndHitRate=swL2DevCtrlAddrLookupModesAndHitRate, swFdbStaticPortMap=swFdbStaticPortMap, es1210Slot2=es1210Slot2, dot1qStaticMulticastReceivePort=dot1qStaticMulticastReceivePort, swVlanCtrl=swVlanCtrl, dot1qTpFdbAddress=dot1qTpFdbAddress, dot1dPortGarpTable=dot1dPortGarpTable, swL2PortCtrlTable=swL2PortCtrlTable, es1200Slot3=es1200Slot3, es1210ModuleRegistration=es1210ModuleRegistration, VlanIndex=VlanIndex, swStructUnitMaxPortNum=swStructUnitMaxPortNum, swL2PortCtrlBackPressState=swL2PortCtrlBackPressState, swPortBaseVlanConfigEntry=swPortBaseVlanConfigEntry, swFdbStaticMemberPortIndex=swFdbStaticMemberPortIndex, swProperty=swProperty, swL2PortCtrlStpState=swL2PortCtrlStpState, swIGMPTimeout=swIGMPTimeout, dot1qVlanCreationTime=dot1qVlanCreationTime, swStructModuleEncodingOffset=swStructModuleEncodingOffset, swL2DevCtrlHOLState=swL2DevCtrlHOLState, swStructUnitMaxModuleNum=swStructUnitMaxModuleNum, es1210Slave2=es1210Slave2, swIGMPAdminState=swIGMPAdminState, swPortBaseVlan=swPortBaseVlan, swStructDevDescr=swStructDevDescr, dot1qStaticMulticastStatus=dot1qStaticMulticastStatus, swPortTrunkMemberPortIndex=swPortTrunkMemberPortIndex, es1200ModuleTXGIGAOnePort=es1200ModuleTXGIGAOnePort, swStructUnitOperStatus=swStructUnitOperStatus, dot1qPortIngressFiltering=dot1qPortIngressFiltering, es1210Port_10_100TX=es1210Port_10_100TX, dot1qStaticMulticastForbiddenEgressPorts=dot1qStaticMulticastForbiddenEgressPorts, es1200PowerSupplyRegistration=es1200PowerSupplyRegistration, swL2PortCtrlAdminState=swL2PortCtrlAdminState, dot1qFdbDynamicCount=dot1qFdbDynamicCount, swIGMPCtrlTimer=swIGMPCtrlTimer, dot1dPriority=dot1dPriority, swPortTrunkMemberIndex=swPortTrunkMemberIndex, swFdbFilterVid=swFdbFilterVid, swFdbStaticVid=swFdbStaticVid, swFdbFilterTable=swFdbFilterTable, es1200BackplaneRegistration=es1200BackplaneRegistration, swStructUnitTable=swStructUnitTable, swMacBaseVlan=swMacBaseVlan, es1210ModuleNone=es1210ModuleNone, swL2PortInfoType=swL2PortInfoType, dot1qVlanIndex=dot1qVlanIndex, swPortBaseVlanConfigPvid=swPortBaseVlanConfigPvid, es1210ModuleTxTwoPort=es1210ModuleTxTwoPort, swIGMPCtrlTable=swIGMPCtrlTable, swFdbFilterAddress=swFdbFilterAddress, swStructPowerTable=swStructPowerTable, swMacBaseVlanCtrlEntry=swMacBaseVlanCtrlEntry, swL2PortStCollision=swL2PortStCollision, swL2PortStIndex=swL2PortStIndex, swL2PortInfoEntry=swL2PortInfoEntry, fore_es1200Prod=fore_es1200Prod, dot1dPortGarpLeaveAllTime=dot1dPortGarpLeaveAllTime, swPortTrunkMemberModuleIndex=swPortTrunkMemberModuleIndex, swIGMPCtrl=swIGMPCtrl, swIGMPInfoVid=swIGMPInfoVid, edge=edge, dot1qStatic=dot1qStatic, swStructUnitLedInfo=swStructUnitLedInfo, es1200Device=es1200Device, swL2DevCtrl=swL2DevCtrl, swFdbFilterState=swFdbFilterState, swStructPowerOperStatus=swStructPowerOperStatus, swL2DevAlarmLinkChange=swL2DevAlarmLinkChange, swStructUnitLastChange=swStructUnitLastChange, dot1dPortCapabilitiesTable=dot1dPortCapabilitiesTable, dot1dExtBase=dot1dExtBase, es1200Slot2=es1200Slot2, swPortBaseVlanConfigTable=swPortBaseVlanConfigTable, swStructModuleUnitIndex=swStructModuleUnitIndex, swL2PortInfoLinkStatus=swL2PortInfoLinkStatus, dot1qPortVlanEntry=dot1qPortVlanEntry, swL2DevCtrlStpState=swL2DevCtrlStpState, dot1qPortGvrpStatus=dot1qPortGvrpStatus, ethernet=ethernet, swMacBaseVlanCtrlState=swMacBaseVlanCtrlState, swIGMPCtrlIndex=swIGMPCtrlIndex, swStructModuleOperStatus=swStructModuleOperStatus, dot1dPortPriorityTable=dot1dPortPriorityTable, swStructModuleMaxPortNum=swStructModuleMaxPortNum, swVlanSnmpPortVlan=swVlanSnmpPortVlan, swPortBaseVlanConfigPortList=swPortBaseVlanConfigPortList, swFDB=swFDB, dot1qVlanCurrentTable=dot1qVlanCurrentTable, es1210PowerSupply=es1210PowerSupply, swPortTrunkCtrlMasterPort=swPortTrunkCtrlMasterPort, swEventPortPartition=swEventPortPartition, swSniffState=swSniffState, swL2PortStMulticastFramesRx=swL2PortStMulticastFramesRx, swPortTrunkCtrlState=swPortTrunkCtrlState, swIGMPInfoEntry=swIGMPInfoEntry, swSniffTargetPort=swSniffTargetPort, swL2PortStTotalFramesRx=swL2PortStTotalFramesRx, es1210ModuleFxSC=es1210ModuleFxSC, es1200ModuleLXGIGATwoPort=es1200ModuleLXGIGATwoPort, swPortBaseVlanDefaultPvid=swPortBaseVlanDefaultPvid, es1210Port_100_SC=es1210Port_100_SC, swStructModuleDescr=swStructModuleDescr, swL2PortStEntry=swL2PortStEntry, swPortSniff=swPortSniff, swL2PortStFrames_128_255_bytes=swL2PortStFrames_128_255_bytes, swSniffSourcePort=swSniffSourcePort, swStructUnitDescr=swStructUnitDescr, swPortBaseVlanDefaultVlanTable=swPortBaseVlanDefaultVlanTable, swL2PortInfoIndex=swL2PortInfoIndex, swL2PortStOversizeFrames=swL2PortStOversizeFrames, swL2PortInfoTable=swL2PortInfoTable, TimeInterval=TimeInterval, es1200DevRegistration=es1200DevRegistration, swL2PortStByteRx=swL2PortStByteRx, es1200ModuleFxSC=es1200ModuleFxSC, swPortBaseVlanDefaultPortNumber=swPortBaseVlanDefaultPortNumber, swStructFanEntry=swStructFanEntry, es1210PowerSupplyRegistration=es1210PowerSupplyRegistration, swIGMPInfoTable=swIGMPInfoTable, swEventBcastFallingStorm=swEventBcastFallingStorm, dot1qStaticMulticastEntry=dot1qStaticMulticastEntry, swL2DevCtrlClearAddressTable=swL2DevCtrlClearAddressTable, dot1qVlanCurrentEntry=dot1qVlanCurrentEntry, dot1dPortGarpJoinTime=dot1dPortGarpJoinTime, swIGMPPortMap=swIGMPPortMap, swStructUnitEntry=swStructUnitEntry, fore_products=fore_products, es1200Master=es1200Master, es1210SlotRegistration=es1210SlotRegistration, swL2PortStMulticastFramesTx=swL2PortStMulticastFramesTx, swStructModuleLastChange=swStructModuleLastChange, swFdbStaticMemberModuleIndex=swFdbStaticMemberModuleIndex, swL2PortCtrlBcastRisingAct=swL2PortCtrlBcastRisingAct, swL2PortCtrlIndex=swL2PortCtrlIndex, dot1qVlanStaticTable=dot1qVlanStaticTable, swPortTrunkMemberUnitIndex=swPortTrunkMemberUnitIndex, swL2PortCtrlPriority=swL2PortCtrlPriority, swL2PortStTable=swL2PortStTable, dot1qPvid=dot1qPvid, swL2PortStFrames_256_511_bytes=swL2PortStFrames_256_511_bytes, systems=systems, golf=golf, swIGMPTable=swIGMPTable, swIGMPGroupMacAddr=swIGMPGroupMacAddr, swL2PortStLateCollision=swL2PortStLateCollision, dot1qPortGvrpFailedRegistrations=dot1qPortGvrpFailedRegistrations, swStructModuleEntry=swStructModuleEntry, swL2PortStFragments=swL2PortStFragments, swL2PortStJabber=swL2PortStJabber, dot1qVlanStaticUntaggedPorts=dot1qVlanStaticUntaggedPorts, swL2PortStFrameRx=swL2PortStFrameRx, dot1qVlanStatus=dot1qVlanStatus, swL2PortInfoModuleIndex=swL2PortInfoModuleIndex, swPortBaseVlanDefaultPortList=swPortBaseVlanDefaultPortList, TruthValue=TruthValue, dot1qFdbEntry=dot1qFdbEntry, dot1qVlanStaticEgressPorts=dot1qVlanStaticEgressPorts, swFdbStaticMemberEntry=swFdbStaticMemberEntry, dot1dDeviceCapabilities=dot1dDeviceCapabilities, swMacBaseVlanAddrVlanDesc=swMacBaseVlanAddrVlanDesc, swPortTrunkCtrlEntry=swPortTrunkCtrlEntry, dot1dPortCapabilities=dot1dPortCapabilities, dot1dPortGmrpTable=dot1dPortGmrpTable, dot1qVlan=dot1qVlan, swPortTrunkMemberEntry=swPortTrunkMemberEntry, swVlanInfoStatus=swVlanInfoStatus, dot1qMaxSupportedVlans=dot1qMaxSupportedVlans, swStructDevType=swStructDevType, es1200ModuleFxMTRJ=es1200ModuleFxMTRJ, dot1dPortGmrpEntry=dot1dPortGmrpEntry, swL2PortCtrlBcastFallingAct=swL2PortCtrlBcastFallingAct, swFdbStaticMemberUnitIndex=swFdbStaticMemberUnitIndex, es1210ModuleMainboardTx=es1210ModuleMainboardTx, es1200ModuleMainboardTx=es1200ModuleMainboardTx, swL2DevAlarm=swL2DevAlarm, swL2PortInfoNwayStatus=swL2PortInfoNwayStatus, dot1qPortGvrpLastPduOrigin=dot1qPortGvrpLastPduOrigin, swL2PortCtrlLockState=swL2PortCtrlLockState, es1200Port_1000_SX=es1200Port_1000_SX, dot1qTpGroupEntry=dot1qTpGroupEntry, dot1qMaxVlanId=dot1qMaxVlanId, es1210Slave1=es1210Slave1, swIGMPCtrlEntry=swIGMPCtrlEntry, es1200Mgmt=es1200Mgmt, es1200Port_10_100TX=es1200Port_10_100TX, swL2PortStTotalBytesRx=swL2PortStTotalBytesRx, swL2PortCtrlNwayState=swL2PortCtrlNwayState, es1200Fan=es1200Fan, dot1qPortVlanTable=dot1qPortVlanTable, es1200PowerSupply=es1200PowerSupply, swFdbFilterEntry=swFdbFilterEntry, es1210Slot1=es1210Slot1, dot1dGmrpStatus=dot1dGmrpStatus, swVlanCtrlMode=swVlanCtrlMode, es1200ModuleRegistration=es1200ModuleRegistration, swFdbStaticAddress=swFdbStaticAddress, es1200ModuleNone=es1200ModuleNone, dot1dPortGmrpStatus=dot1dPortGmrpStatus, dot1qFdbId=dot1qFdbId, swStructUnitNumOfPortInUse=swStructUnitNumOfPortInUse, swPortBaseVlanDefaultDesc=swPortBaseVlanDefaultDesc, dot1qTpGroupTable=dot1qTpGroupTable, es1210PortRegistration=es1210PortRegistration, dot1qBase=dot1qBase, swL2PortStFrames_65_127_bytes=swL2PortStFrames_65_127_bytes, dot1qVlanTimeMark=dot1qVlanTimeMark, pBridgeMIBObjects=pBridgeMIBObjects, dot1qVlanCurrentEgressPorts=dot1qVlanCurrentEgressPorts, swL2DevCtrlPartitionModeState=swL2DevCtrlPartitionModeState, swMacBaseVlanAddrState=swMacBaseVlanAddrState, dot1dPortPriorityEntry=dot1dPortPriorityEntry, dot1qTpFdbTable=dot1qTpFdbTable, swL2PortStFrames_64_bytes=swL2PortStFrames_64_bytes, fore=fore, swL2PortStByteTx=swL2PortStByteTx, dot1dPortGarpEntry=dot1dPortGarpEntry, swMacBaseVlanMaxNum=swMacBaseVlanMaxNum, swPortTrunkCtrlTable=swPortTrunkCtrlTable, swMacBaseVlanAddrMaxNum=swMacBaseVlanAddrMaxNum, es1200Port_100_MTRJ=es1200Port_100_MTRJ, swFdbStaticState=swFdbStaticState, swL2PortInfoUnitIndex=swL2PortInfoUnitIndex, swL2DevCtrlUploadImageFileName=swL2DevCtrlUploadImageFileName, swEventlinkChangeEvent=swEventlinkChangeEvent, swSniffIndex=swSniffIndex, golfcommon=golfcommon, swL2PortStBroadcastFramesTx=swL2PortStBroadcastFramesTx, swL2PortCtrlFlowCtrlState=swL2PortCtrlFlowCtrlState, swL2PortStFrames_1024_1536_bytes=swL2PortStFrames_1024_1536_bytes, dot1qVlanStaticEntry=dot1qVlanStaticEntry, swStructFanOperStatus=swStructFanOperStatus, golfproducts=golfproducts, swStructFanIndex=swStructFanIndex, swStructModuleSubMduIndex=swStructModuleSubMduIndex, dot1qNumVlans=dot1qNumVlans, swIGMPInfoTxQueryCount=swIGMPInfoTxQueryCount, swPortTrunkMemberTable=swPortTrunkMemberTable, dot1qFdbTable=dot1qFdbTable, es1200=es1200, es1200Port_100_SC=es1200Port_100_SC, es1200Port_1000_TX=es1200Port_1000_TX, swPortTrunkCtrlIndex=swPortTrunkCtrlIndex, es1210Port_100_MTRJ=es1210Port_100_MTRJ, swModule=swModule, dot1qTpGroupAddress=dot1qTpGroupAddress, dot1qVlanStaticName=dot1qVlanStaticName, swIGMPInfoQueryCount=swIGMPInfoQueryCount, EnabledStatus=EnabledStatus, dot1dGmrp=dot1dGmrp, swFdbStaticMemberTable=swFdbStaticMemberTable, swSniffCtrlTable=swSniffCtrlTable)
mibBuilder.exportSymbols("ES1200-MIB", dot1qVlanForbiddenEgressPorts=dot1qVlanForbiddenEgressPorts, Unsigned32=Unsigned32, es1200SensorRegistration=es1200SensorRegistration, dot1qTpFdbEntry=dot1qTpFdbEntry, swStructure=swStructure, swL2DevAlarmTopChange=swL2DevAlarmTopChange, swFdbStaticTable=swFdbStaticTable, swEventBcastRisingStorm=swEventBcastRisingStorm, qBridgeMIBObjects=qBridgeMIBObjects, es1210Slave3=es1210Slave3, swL2PortStBroadcastFramesRx=swL2PortStBroadcastFramesRx, swIGMPVid=swIGMPVid, swFdbStaticJoinIGMPSnooping=swFdbStaticJoinIGMPSnooping, dot1qVlanStaticRowState=dot1qVlanStaticRowState, es1210Fan=es1210Fan, dot1qStaticMulticastAddress=dot1qStaticMulticastAddress, es1200FanRegistration=es1200FanRegistration, dot1qVlanNumDeletes=dot1qVlanNumDeletes, dot1qTpFdbPort=dot1qTpFdbPort, swIGMPGroupIpAddr=swIGMPGroupIpAddr, swStructFanTable=swStructFanTable, swL2PortMgmt=swL2PortMgmt, swMacBaseVlanAddrEntry=swMacBaseVlanAddrEntry, es1210FanRegistration=es1210FanRegistration, swL2DevAlarmNewRoot=swL2DevAlarmNewRoot, swPortBaseVlanDefaultVlanEntry=swPortBaseVlanDefaultVlanEntry, swPortBaseVlanConfigPortNumber=swPortBaseVlanConfigPortNumber, swStructModuleIndex=swStructModuleIndex, swStructUnitType=swStructUnitType, es1200ModuleTXGIGATwoPort=es1200ModuleTXGIGATwoPort, swStructPowerEntry=swStructPowerEntry, swIGMPInfoIndex=swIGMPInfoIndex, dot1qVlanCurrentUntaggedPorts=dot1qVlanCurrentUntaggedPorts, swStructPortEncodingFactor=swStructPortEncodingFactor, swFdbStaticMemberVid=swFdbStaticMemberVid, swL2PortStFramesDroppedFrames=swL2PortStFramesDroppedFrames, es1200SlotRegistration=es1200SlotRegistration, swL2DevCtrlUploadImage=swL2DevCtrlUploadImage, dot1qTpGroupLearnt=dot1qTpGroupLearnt, swL2PortStCRCError=swL2PortStCRCError, swL2PortCtrlEntry=swL2PortCtrlEntry, es1200ModuleSXGIGAOnePort=es1200ModuleSXGIGAOnePort, swL2PortCtrlUnitIndex=swL2PortCtrlUnitIndex, swStructPowerIndex=swStructPowerIndex, swL2DevAlarmPartition=swL2DevAlarmPartition, swMacBaseVlanAddrTable=swMacBaseVlanAddrTable, swStructUnitIndex=swStructUnitIndex, es1200Slot1=es1200Slot1, swStructPowerUnitIndex=swStructPowerUnitIndex, es1200Port_1000_LX=es1200Port_1000_LX, swFdbStaticEntry=swFdbStaticEntry, dot1dGarp=dot1dGarp, endOfMIB=endOfMIB, swL2PortStUndersizeFrames=swL2PortStUndersizeFrames, es1210ModuleFxMTRJ=es1210ModuleFxMTRJ, swPortBaseVlanConfigDesc=swPortBaseVlanConfigDesc, es1200ModuleLXGIGAOnePort=es1200ModuleLXGIGAOnePort, swSniffCtrlEntry=swSniffCtrlEntry, swMacBaseVlanAddrStatus=swMacBaseVlanAddrStatus, swL2Mgmt=swL2Mgmt, PortList=PortList, TimeFilter=TimeFilter, swL2PortCtrlHOLState=swL2PortCtrlHOLState, dot1dPortGarpLeaveTime=dot1dPortGarpLeaveTime, dot1qGvrpStatus=dot1qGvrpStatus, swFdbStaticMemberAddress=swFdbStaticMemberAddress, VlanId=VlanId, swVlan=swVlan, dot1dPortCapabilitiesEntry=dot1dPortCapabilitiesEntry, swL2PortCtrlModuleIndex=swL2PortCtrlModuleIndex, swIGMPCtrlVid=swIGMPCtrlVid, es1210ModuleSIO=es1210ModuleSIO, swStructModuleTable=swStructModuleTable, swStructModuleType=swStructModuleType, swPortTrunk=swPortTrunk, dot1qTp=dot1qTp, swIGMPCtrlState=swIGMPCtrlState, es1200ModuleTxTwoPort=es1200ModuleTxTwoPort, dot1qVlanVersionNumber=dot1qVlanVersionNumber, edgecommon=edgecommon, swL2DevCtrlTableLockState=swL2DevCtrlTableLockState, dot1dTrafficClassesEnabled=dot1dTrafficClassesEnabled, swPortTrunkCtrlName=swPortTrunkCtrlName, dot1qTpGroupEgressPorts=dot1qTpGroupEgressPorts, swMacBaseVlanInfo=swMacBaseVlanInfo, dot1dPortGmrpFailedRegistrations=dot1dPortGmrpFailedRegistrations, es1200ModuleSIO=es1200ModuleSIO, fore_mgmt=fore_mgmt, swMacBaseVlanCtrlTable=swMacBaseVlanCtrlTable, dot1qVlanFdbId=dot1qVlanFdbId, swFdbStaticStatus=swFdbStaticStatus, dot1dPortNumTrafficClasses=dot1dPortNumTrafficClasses, swStructModuleVersion=swStructModuleVersion, swMacBaseVlanAddr=swMacBaseVlanAddr, dot1qStaticMulticastTable=dot1qStaticMulticastTable, swMacBaseVlanMacMember=swMacBaseVlanMacMember, swIGMP=swIGMP, swStructInfo=swStructInfo, dot1qStaticMulticastStaticEgressPorts=dot1qStaticMulticastStaticEgressPorts, swL2PortInfoDescr=swL2PortInfoDescr, swL2PortStUnitIndex=swL2PortStUnitIndex, swPortTrunkCtrlMember=swPortTrunkCtrlMember, swL2PortStModuleIndex=swL2PortStModuleIndex, es1200UnitRegistration=es1200UnitRegistration, es1200ModuleSXGIGATwoPort=es1200ModuleSXGIGATwoPort, swPortBaseVlanTotalNum=swPortBaseVlanTotalNum, swL2PortStFrames_512_1023_bytes=swL2PortStFrames_512_1023_bytes, dot1dPortGmrpLastPduOrigin=dot1dPortGmrpLastPduOrigin, swMacBaseVlanDesc=swMacBaseVlanDesc, dot1qTpFdbStatus=dot1qTpFdbStatus, swIGMPEntry=swIGMPEntry, swL2DevMgmt=swL2DevMgmt, swL2PortStFrameTx=swL2PortStFrameTx, swPortTrunkCtrlAnchorPort=swPortTrunkCtrlAnchorPort, es1200PortRegistration=es1200PortRegistration, swL2PortCtrlLinkStatusAlarmState=swL2PortCtrlLinkStatusAlarmState, swStructFanUnitIndex=swStructFanUnitIndex)
