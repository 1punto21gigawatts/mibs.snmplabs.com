#
# PySNMP MIB module JUNIPER-DCU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-DCU-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:59:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
jnxMibs, = mibBuilder.importSymbols("JUNIPER-SMI", "jnxMibs")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Counter32, MibIdentifier, iso, Gauge32, NotificationType, IpAddress, ModuleIdentity, Integer32, Unsigned32, ObjectIdentity, TimeTicks, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Counter32", "MibIdentifier", "iso", "Gauge32", "NotificationType", "IpAddress", "ModuleIdentity", "Integer32", "Unsigned32", "ObjectIdentity", "TimeTicks", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
jnxDCUs = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 6))
jnxDCUs.setRevisions(('2002-12-17 00:00', '2002-02-28 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxDCUs.setRevisionsDescriptions(('Deprecated jnxDCUsTable. Use jnxDcuStatsTable instead.', 'Added jnxDcuStatsTable to expose per-address family stats. The current jnxDCUsTable will only apply to ipv4 stats.',))
if mibBuilder.loadTexts: jnxDCUs.setLastUpdated('200307182153Z')
if mibBuilder.loadTexts: jnxDCUs.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxDCUs.setContactInfo(' Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net')
if mibBuilder.loadTexts: jnxDCUs.setDescription("This is Juniper Networks' implementation of enterprise specific MIB for Destination Class Usage (DCU)")
jnxDCUsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 6, 1), )
if mibBuilder.loadTexts: jnxDCUsTable.setStatus('deprecated')
if mibBuilder.loadTexts: jnxDCUsTable.setDescription('A list of DCUs entries.')
jnxDCUsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 6, 1, 1), ).setIndexNames((0, "JUNIPER-DCU-MIB", "jnxDCUSrcIfIndex"), (0, "JUNIPER-DCU-MIB", "jnxDCUDstClassName"))
if mibBuilder.loadTexts: jnxDCUsEntry.setStatus('deprecated')
if mibBuilder.loadTexts: jnxDCUsEntry.setDescription('An entry of DCUs table.')
jnxDCUSrcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 6, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDCUSrcIfIndex.setStatus('deprecated')
if mibBuilder.loadTexts: jnxDCUSrcIfIndex.setDescription('The source interface index. This is the ifIndex that the traffic is coming from and the statistics is counted for the specified DCU entry.')
jnxDCUDstClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDCUDstClassName.setStatus('deprecated')
if mibBuilder.loadTexts: jnxDCUDstClassName.setDescription('The name of the destination class. This is the name of a valid configuration group defining a set of IP addresses and/or prefixes.')
jnxDCUPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 6, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDCUPackets.setStatus('deprecated')
if mibBuilder.loadTexts: jnxDCUPackets.setDescription('The number of packets being counted pertaining to the specified DCU entry.')
jnxDCUBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 6, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDCUBytes.setStatus('deprecated')
if mibBuilder.loadTexts: jnxDCUBytes.setDescription('The number of bytes being counted pertaining to the specified DCU entry.')
jnxDcuStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 6, 2), )
if mibBuilder.loadTexts: jnxDcuStatsTable.setStatus('current')
if mibBuilder.loadTexts: jnxDcuStatsTable.setDescription('This table contains statistics for traffic that satisfies the rules in each configured Destination Class. A separate set of statistics are kept for each Destination Class on each interface and address family on which this feature is enabled.')
jnxDcuStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 6, 2, 1), ).setIndexNames((0, "JUNIPER-DCU-MIB", "jnxDcuStatsSrcIfIndex"), (0, "JUNIPER-DCU-MIB", "jnxDcuStatsAddrFamily"), (0, "JUNIPER-DCU-MIB", "jnxDcuStatsClassName"))
if mibBuilder.loadTexts: jnxDcuStatsEntry.setStatus('current')
if mibBuilder.loadTexts: jnxDcuStatsEntry.setDescription('Each entry in this table contains a set of statistics for all traffic received on a specific interface and belonging to a specific address family that matches a specific Destination Class.')
jnxDcuStatsSrcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 6, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: jnxDcuStatsSrcIfIndex.setStatus('current')
if mibBuilder.loadTexts: jnxDcuStatsSrcIfIndex.setDescription('The ifIndex of the ingress interface for traffic counted in this entry.')
jnxDcuStatsAddrFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4", 1), ("ipv6", 2))))
if mibBuilder.loadTexts: jnxDcuStatsAddrFamily.setStatus('current')
if mibBuilder.loadTexts: jnxDcuStatsAddrFamily.setDescription("The address family of this entry's traffic.")
jnxDcuStatsClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 6, 2, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 112)))
if mibBuilder.loadTexts: jnxDcuStatsClassName.setStatus('current')
if mibBuilder.loadTexts: jnxDcuStatsClassName.setDescription('The name of the destination class.')
jnxDcuStatsPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 6, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDcuStatsPackets.setStatus('current')
if mibBuilder.loadTexts: jnxDcuStatsPackets.setDescription('The number of packets received on this interface, belonging to this address family that match this Destination Class.')
jnxDcuStatsBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 6, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDcuStatsBytes.setStatus('current')
if mibBuilder.loadTexts: jnxDcuStatsBytes.setDescription('The number of bytes received on this interface, belonging to this address family that match this Destination Class.')
jnxDcuStatsClName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 6, 2, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 112))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxDcuStatsClName.setStatus('current')
if mibBuilder.loadTexts: jnxDcuStatsClName.setDescription("The name of the destination class. This object is a duplicate of jnxDcuStatsClassName and is included to satisfy those NM applications that can't extract the name from the instance portion of the OID.")
mibBuilder.exportSymbols("JUNIPER-DCU-MIB", jnxDcuStatsPackets=jnxDcuStatsPackets, jnxDcuStatsTable=jnxDcuStatsTable, jnxDcuStatsBytes=jnxDcuStatsBytes, jnxDcuStatsSrcIfIndex=jnxDcuStatsSrcIfIndex, PYSNMP_MODULE_ID=jnxDCUs, jnxDCUDstClassName=jnxDCUDstClassName, jnxDCUSrcIfIndex=jnxDCUSrcIfIndex, jnxDCUsEntry=jnxDCUsEntry, jnxDCUs=jnxDCUs, jnxDCUPackets=jnxDCUPackets, jnxDCUBytes=jnxDCUBytes, jnxDcuStatsAddrFamily=jnxDcuStatsAddrFamily, jnxDCUsTable=jnxDCUsTable, jnxDcuStatsClName=jnxDcuStatsClName, jnxDcuStatsEntry=jnxDcuStatsEntry, jnxDcuStatsClassName=jnxDcuStatsClassName)
