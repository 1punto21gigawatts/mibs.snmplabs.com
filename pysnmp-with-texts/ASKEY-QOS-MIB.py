#
# PySNMP MIB module ASKEY-QOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASKEY-QOS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:29:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ipDslam, = mibBuilder.importSymbols("ASKEY-DSLAM-MIB", "ipDslam")
askeyCosQueueMapping8021p, = mibBuilder.importSymbols("ASKEY-SYSTEM-MIB", "askeyCosQueueMapping8021p")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Bits, Integer32, ObjectIdentity, TimeTicks, Unsigned32, NotificationType, Counter32, Gauge32, Counter64, ModuleIdentity, MibIdentifier, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Bits", "Integer32", "ObjectIdentity", "TimeTicks", "Unsigned32", "NotificationType", "Counter32", "Gauge32", "Counter64", "ModuleIdentity", "MibIdentifier", "IpAddress")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
askeyQoSMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 16))
if mibBuilder.loadTexts: askeyQoSMIB.setLastUpdated('200605300000Z')
if mibBuilder.loadTexts: askeyQoSMIB.setOrganization('ASKEY Inc.')
if mibBuilder.loadTexts: askeyQoSMIB.setContactInfo('ASKEY Inc. E-mail: zarsus.kuo@askey.com.tw')
if mibBuilder.loadTexts: askeyQoSMIB.setDescription('ASKEY QoS MIB OID defines and documentation.')
askeyQoSLineMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 16, 1))
askeyQoSLineTable = MibTable((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 16, 1, 1), )
if mibBuilder.loadTexts: askeyQoSLineTable.setStatus('current')
if mibBuilder.loadTexts: askeyQoSLineTable.setDescription('A list of line port QoS entries.')
askeyQoSLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 16, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: askeyQoSLineEntry.setStatus('current')
if mibBuilder.loadTexts: askeyQoSLineEntry.setDescription('A QoS information entry containing objects for each line port.')
askeyQoSLineTrafficPolicing = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 16, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: askeyQoSLineTrafficPolicing.setStatus('current')
if mibBuilder.loadTexts: askeyQoSLineTrafficPolicing.setDescription('The value of this object identifies the row in the Askey QoS Traffic Policing Table, (trafficPolicingTable), which applies for this line, and channels if applicable.')
askeyQoSDiffServMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 16, 2))
diffServAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 16, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServAdminStatus.setStatus('current')
if mibBuilder.loadTexts: diffServAdminStatus.setDescription('Enable or disable DiffServ function.')
diffServMappingTable = MibTable((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 16, 2, 2), )
if mibBuilder.loadTexts: diffServMappingTable.setStatus('current')
if mibBuilder.loadTexts: diffServMappingTable.setDescription('A table indicates mapping between 802.1p CoS and DSCP.')
diffServMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 16, 2, 2, 1), ).setIndexNames((0, "ASKEY-SYSTEM-MIB", "askeyCosQueueMapping8021p"))
if mibBuilder.loadTexts: diffServMappingEntry.setStatus('current')
if mibBuilder.loadTexts: diffServMappingEntry.setDescription('Mapping between 802.1p CoS and DSCP.')
diffServDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 16, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("be", 0), ("af11", 1), ("af12", 2), ("af13", 3), ("af21", 4), ("af22", 5), ("af23", 6), ("af31", 7), ("af32", 8), ("af33", 9), ("af41", 10), ("af42", 11), ("af43", 12), ("ef", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServDSCP.setStatus('current')
if mibBuilder.loadTexts: diffServDSCP.setDescription('DSCP value.')
askeyQoSTrafficPolicingMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 16, 3))
trafficPolicingTable = MibTable((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 16, 3, 1), )
if mibBuilder.loadTexts: trafficPolicingTable.setStatus('current')
if mibBuilder.loadTexts: trafficPolicingTable.setDescription('This table contains information on the line configuration. One entry in this table reflects a QoS profile defined by a manager which can be used to configure the line port QoS.')
trafficPolicingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 16, 3, 1, 1), ).setIndexNames((1, "ASKEY-QOS-MIB", "trafficPolicingName"))
if mibBuilder.loadTexts: trafficPolicingEntry.setStatus('current')
if mibBuilder.loadTexts: trafficPolicingEntry.setDescription('Each entry consists of a list of parameters that represents the QoS configuration of a line.')
trafficPolicingName = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 16, 3, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: trafficPolicingName.setStatus('current')
if mibBuilder.loadTexts: trafficPolicingName.setDescription('This object is used by the traffic policing table in order to identify a row of this table.')
trafficPolicingCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 16, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trafficPolicingCIR.setStatus('current')
if mibBuilder.loadTexts: trafficPolicingCIR.setDescription('This value is CIR (Committed Information Rate) on this profile. Its unit is mbps (MBit per second)')
trafficPolicingAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 16, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("noAction", 0), ("drop", 1), ("be", 2), ("af11", 3), ("af12", 4), ("af13", 5), ("af21", 6), ("af22", 7), ("af23", 8), ("af31", 9), ("af32", 10), ("af33", 11), ("af41", 12), ("af42", 13), ("af43", 14), ("ef", 15)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trafficPolicingAction.setStatus('current')
if mibBuilder.loadTexts: trafficPolicingAction.setDescription('The action when traffic is over CIR. The actions include drop(0) the packets or do nothing to pass(1). Other actions will sign DSCP value into packets for QoS futher uses.')
trafficPolicingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3646, 1300, 2, 16, 3, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trafficPolicingRowStatus.setStatus('current')
if mibBuilder.loadTexts: trafficPolicingRowStatus.setDescription("This object is used to create a new row or modify or delete an existing row in this table. A profile activated by setting this object to 'active'. When 'active' is set, the system will validate the profile. Before a profile can be deleted or taken out of service, (by setting this object to 'destroy' or 'outOfService') it must be first unreferenced from all associated lines.")
mibBuilder.exportSymbols("ASKEY-QOS-MIB", trafficPolicingAction=trafficPolicingAction, askeyQoSTrafficPolicingMIBObjects=askeyQoSTrafficPolicingMIBObjects, trafficPolicingCIR=trafficPolicingCIR, trafficPolicingRowStatus=trafficPolicingRowStatus, askeyQoSLineTable=askeyQoSLineTable, askeyQoSLineMIBObjects=askeyQoSLineMIBObjects, diffServAdminStatus=diffServAdminStatus, askeyQoSDiffServMIBObjects=askeyQoSDiffServMIBObjects, diffServMappingTable=diffServMappingTable, diffServMappingEntry=diffServMappingEntry, askeyQoSLineEntry=askeyQoSLineEntry, diffServDSCP=diffServDSCP, trafficPolicingEntry=trafficPolicingEntry, askeyQoSMIB=askeyQoSMIB, trafficPolicingTable=trafficPolicingTable, trafficPolicingName=trafficPolicingName, askeyQoSLineTrafficPolicing=askeyQoSLineTrafficPolicing, PYSNMP_MODULE_ID=askeyQoSMIB)
