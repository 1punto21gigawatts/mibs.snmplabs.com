#
# PySNMP MIB module SONUS-ISUP-SERVICE-GROUP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SONUS-ISUP-SERVICE-GROUP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:09:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Bits, ModuleIdentity, iso, Integer32, Gauge32, IpAddress, TimeTicks, Counter32, MibIdentifier, NotificationType, Counter64, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Bits", "ModuleIdentity", "iso", "Integer32", "Gauge32", "IpAddress", "TimeTicks", "Counter32", "MibIdentifier", "NotificationType", "Counter64", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DateAndTime, RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "RowStatus", "TextualConvention", "DisplayString")
sonusEventClass, sonusEventLevel, sonusEventDescription = mibBuilder.importSymbols("SONUS-COMMON-MIB", "sonusEventClass", "sonusEventLevel", "sonusEventDescription")
sonusSignallingMIBs, = mibBuilder.importSymbols("SONUS-SMI", "sonusSignallingMIBs")
SonusPointCode, SonusSupportFlag, SonusAdminState, SonusName, PointCode, SonusNameReference = mibBuilder.importSymbols("SONUS-TC", "SonusPointCode", "SonusSupportFlag", "SonusAdminState", "SonusName", "PointCode", "SonusNameReference")
sonusIsupServiceGroupMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1))
if mibBuilder.loadTexts: sonusIsupServiceGroupMIB.setLastUpdated('200107310000Z')
if mibBuilder.loadTexts: sonusIsupServiceGroupMIB.setOrganization('Sonus Networks, Inc.')
if mibBuilder.loadTexts: sonusIsupServiceGroupMIB.setContactInfo(' Customer Support Sonus Networks, Inc, 5 Carlisle Road Westford, MA 01886 USA Tel: 978-692-8999 Fax: 978-392-9118 E-mail: cs.snmp@sonusnet.com')
if mibBuilder.loadTexts: sonusIsupServiceGroupMIB.setDescription('The MIB Module for ISUP Service Group Management.')
sonusIsupServiceGroupMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1))
sonusIsupsgServiceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 1))
sonusIsupsgServiceGroupNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsupsgServiceGroupNextIndex.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupNextIndex.setDescription('The next valid index to use when creating a new sonusIsupsgServiceGroupEntry')
sonusIsupsgServiceGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 1, 2), )
if mibBuilder.loadTexts: sonusIsupsgServiceGroupTable.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupTable.setDescription('This table contains information about each ISUP Service Group configured to be a member of the node. A management entity may create rows for Service Group that are anticipated to be supported in the future.')
sonusIsupsgServiceGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 1, 2, 1), ).setIndexNames((0, "SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupsgServiceGroupListIndex"))
if mibBuilder.loadTexts: sonusIsupsgServiceGroupEntry.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupEntry.setDescription('This table describes the ISUP Service Groups that are configured as members of the GSX9000 ISUP Service Group.')
sonusIsupsgServiceGroupListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsupsgServiceGroupListIndex.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupListIndex.setDescription('The index of the ISUP Service Group entry.')
sonusIsupsgServiceGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 1, 2, 1, 2), SonusName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgServiceGroupName.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupName.setDescription('The name of the ISUP Service Group.')
sonusIsupsgServiceGroupRemotePointCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 1, 2, 1, 3), PointCode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgServiceGroupRemotePointCode.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupRemotePointCode.setDescription('Identifies the SS7 Point Code of the ISUP Service Group in decimal format, the least significant three bytes representing Network-Cluster-Member values.')
sonusIsupsgServiceGroupTG = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 1, 2, 1, 4), SonusNameReference()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgServiceGroupTG.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupTG.setDescription('The Trunk Group, which the ISUP Service Group belongs to.')
sonusIsupsgServiceGroupSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("dms500", 1), ("dms250", 2), ("dms200", 3), ("dms100", 4), ("lucent5ESS", 5), ("lucent4ESS", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgServiceGroupSwitchType.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupSwitchType.setDescription('The network switch type where the ISUP Service Group resides.')
sonusIsupsgServiceGroupRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ansi1992", 1), ("ansi1995", 2), ("itu1993", 3), ("etsi2", 4), ("nttfcc", 5), ("itu1997", 6), ("itu1988", 7), ("ituq767", 8), ("belgacom", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgServiceGroupRevision.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupRevision.setDescription('The revision of the ISUP protocol supported on this Service Group.')
sonusIsupsgServiceGroupHuntAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("bottom2top", 1), ("top2bottom", 2), ("circuithi2lo", 3), ("circuitlo2hi", 4), ("mostnleastidle", 5), ("circularbottom2top", 6), ("circulartop2bottom", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgServiceGroupHuntAlgorithm.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupHuntAlgorithm.setDescription('The hunting method used to select circuits for calls destined to the Service Group destination.')
sonusIsupsgServiceGroupCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgServiceGroupCost.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupCost.setDescription('The routing cost to the ISUP Service Group.')
sonusIsupsgServiceGroupCicControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noCics", 1), ("oddCics", 2), ("evenCics", 3), ("allCics", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgServiceGroupCicControl.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupCicControl.setDescription('The CICs being controlled to resolve dual seizure.')
sonusIsupsgServiceGroupContTestFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgServiceGroupContTestFreq.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupContTestFreq.setDescription('Identifies the frequency of continuity test to be performed on each circuit.')
sonusIsupsgServiceGroupOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("block", 1), ("unblock", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgServiceGroupOperation.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupOperation.setDescription('The operation to be applied to the circuits in the ISUP Service Group.')
sonusIsupsgServiceGroupMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgServiceGroupMode.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupMode.setDescription('The mode of operation of circuits in the ISUP Service Group.')
sonusIsupsgServiceGroupAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dryUp", 1), ("force", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgServiceGroupAction.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupAction.setDescription('The action taken on the circuits in the ISUP Service Group.')
sonusIsupsgServiceGroupTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgServiceGroupTimeout.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupTimeout.setDescription('The timeout value in minutes for dryup action on the ISUP Service Group.')
sonusIsupsgServiceGroupAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 1, 2, 1, 15), SonusAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgServiceGroupAdminState.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupAdminState.setDescription('The admin state of the ISUP Service Group.')
sonusIsupsgServiceGroupProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 1, 2, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgServiceGroupProfileName.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupProfileName.setDescription('The ISUP Service Group profile name.')
sonusIsupsgServiceGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 1, 2, 1, 17), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgServiceGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupRowStatus.setDescription('')
sonusIsupsgServiceGroupHopCounterState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 1, 2, 1, 18), SonusAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgServiceGroupHopCounterState.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupHopCounterState.setDescription('The Hop Counter state for the ISUP Service Group.')
sonusIsupsgServiceGroupHopCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgServiceGroupHopCounterValue.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupHopCounterValue.setDescription('Specifies the value of the Hop Counter if initiated by the switch.')
sonusIsupsgServiceGroupDiscTreatmentProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 1, 2, 1, 20), SonusNameReference()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgServiceGroupDiscTreatmentProfileName.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupDiscTreatmentProfileName.setDescription('The disconnect treatment profile to be used for this service.')
sonusIsupsgServiceGroupTonePackageName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 1, 2, 1, 21), SonusNameReference()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgServiceGroupTonePackageName.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupTonePackageName.setDescription('The tone package to be used for this service.')
sonusIsupsgServiceGroupGrsStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgServiceGroupGrsStartup.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupGrsStartup.setDescription('Specifies whether support is enabled or disabled for GRS/GRA at Startup for the ISUP Service Group.')
sonusIsupsgServiceGroupOlipCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgServiceGroupOlipCheck.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupOlipCheck.setDescription('Specifies whether or not to check for the presence of an OLIP when determing that a call is invalid.')
sonusIsupsgServiceGroupRemPc = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 1, 2, 1, 24), SonusPointCode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgServiceGroupRemPc.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupRemPc.setDescription('The Remote point code is not maintained as an OCTET STRING')
sonusIsupsgServiceGroupExchangeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("typeA", 2), ("typeB", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgServiceGroupExchangeType.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupExchangeType.setDescription('The exchange type for the ISUP Service Group.')
sonusIsupsgServiceGroupInspectionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 1, 2, 1, 26), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgServiceGroupInspectionTime.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupInspectionTime.setDescription("Octet string that identifies the GMT time and date to start Periodic Circuit Inspection. field octects contents range ----- ------- -------- ----- 1 1-2 year 0..65536 2 3 month 1..12 3 4 day 1..31 4 5 hour 0..23 5 6 minutes 0..59 6 7 seconds 0..60 (use 60 for leap-second) 7 8 deci-seconds 0..9 8 9 direction from UTC '+' / '-' 9 10 hours from UTC 0..11 10 11 minutes from UTC 0..59 For example, Tuesday May 26, 1992 at 1:30:15 PM EDT would be displayed as: 1992-5-26,13:30:15.0,-4:0 * Notes: - the value of year is in network-byte order")
sonusIsupsgServiceGroupInspectionFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 1, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("onehour", 1), ("threehours", 2), ("sixhours", 3), ("twelvehours", 4), ("oneday", 5), ("twodays", 6))).clone('oneday')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgServiceGroupInspectionFreq.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupInspectionFreq.setDescription('')
sonusIsupsgServiceGroupInspectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 1, 2, 1, 28), SonusAdminState().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgServiceGroupInspectionState.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupInspectionState.setDescription('')
sonusIsupsgServiceGroupSignalingProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 1, 2, 1, 29), SonusNameReference()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgServiceGroupSignalingProfileName.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupSignalingProfileName.setDescription('The ISUP Signaling Profile to be used for this service.')
sonusIsupsgServiceGroupAccRespProcess = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgServiceGroupAccRespProcess.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupAccRespProcess.setDescription('The ACC Processing state for the ISUP Service Group.')
sonusIsupsgServiceGroupAccL1ARCancelpercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 1, 2, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgServiceGroupAccL1ARCancelpercentage.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupAccL1ARCancelpercentage.setDescription('Specifies the percentage of Alternate Routed call to be cancel at Congestion Level 1.')
sonusIsupsgServiceGroupAccL1DRCancelpercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 1, 2, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgServiceGroupAccL1DRCancelpercentage.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupAccL1DRCancelpercentage.setDescription('Specifies the percentage of Direct Routed call to be cancel at Congestion Level 1.')
sonusIsupsgServiceGroupAccL2ARCancelpercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 1, 2, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgServiceGroupAccL2ARCancelpercentage.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupAccL2ARCancelpercentage.setDescription('Specifies the percentage of Alternate Routed call to be cancel at Congestion Level 2.')
sonusIsupsgServiceGroupAccL2DRCancelpercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 1, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgServiceGroupAccL2DRCancelpercentage.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupAccL2DRCancelpercentage.setDescription('Specifies the percentage of Direct Routed call to be cancel at Congestion Level 2.')
sonusIsupsgServiceGroupAccL3ARCancelpercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 1, 2, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgServiceGroupAccL3ARCancelpercentage.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupAccL3ARCancelpercentage.setDescription('Specifies the percentage of Alternate Routed call to be cancel at Congestion Level 3.')
sonusIsupsgServiceGroupAccL3DRCancelpercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 1, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgServiceGroupAccL3DRCancelpercentage.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupAccL3DRCancelpercentage.setDescription('Specifies the percentage of Direct Routed call to be cancel at Congestion Level 3.')
sonusIsupsgServiceGroupAccSendACL = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 1, 2, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgServiceGroupAccSendACL.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupAccSendACL.setDescription('specifies the Max ACL value send to remote node for the ISUP Service Group. 0 means disabled')
sonusIsupsgServiceGroupGatewayOutage = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 1, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("keepCalls", 1), ("removeCalls", 2))).clone('keepCalls')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgServiceGroupGatewayOutage.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupGatewayOutage.setDescription('specifies if the service group should try to keep active calls when the ss7 gateway disconnects.')
sonusIsupsgServiceGroupStatTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 2), )
if mibBuilder.loadTexts: sonusIsupsgServiceGroupStatTable.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupStatTable.setDescription('This table contains status information about each ISUP access point in the GSX9000 Switch node. ISUP Service Groups within the node can can be configured before SS7 connections is physically attached to the node. The remote ISUP user part may be unavailable or the SS7 links to the destination may not be connected or correctly configured. Therefore, it is possible that an access point can be unavailable, and is absent.')
sonusIsupsgServiceGroupStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 2, 1), ).setIndexNames((0, "SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupsgServiceGroupStatListIndex"))
if mibBuilder.loadTexts: sonusIsupsgServiceGroupStatEntry.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupStatEntry.setDescription('This table describes the status of the Service Groups that are configured as destinations ISUP nodes for the GSX9000 Switch node.')
sonusIsupsgServiceGroupStatListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsupsgServiceGroupStatListIndex.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupStatListIndex.setDescription('The index of the ISUP Service Group.')
sonusIsupsgServiceGroupStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 2, 1, 2), SonusNameReference()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsupsgServiceGroupStatName.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupStatName.setDescription('The name of the ISUP Service Group.')
sonusIsupsgServiceGroupStatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("available", 1), ("unavailable", 2), ("congested", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsupsgServiceGroupStatStatus.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupStatStatus.setDescription('The state of the ISUP Service Group.')
sonusIsupsgServiceGroupStatLastInspectionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 2, 1, 4), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgServiceGroupStatLastInspectionTime.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupStatLastInspectionTime.setDescription("Octet string that identifies the GMT time and date of the last Periodic Circuit Inspection. field octects contents range ----- ------- -------- ----- 1 1-2 year 0..65536 2 3 month 1..12 3 4 day 1..31 4 5 hour 0..23 5 6 minutes 0..59 6 7 seconds 0..60 (use 60 for leap-second) 7 8 deci-seconds 0..9 8 9 direction from UTC '+' / '-' 9 10 hours from UTC 0..11 10 11 minutes from UTC 0..59 For example, Tuesday May 26, 1992 at 1:30:15 PM EDT would be displayed as: 1992-5-26,13:30:15.0,-4:0 * Notes: - the value of year is in network-byte order")
sonusIsupsgServiceGroupStatNextInspectionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 2, 1, 5), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgServiceGroupStatNextInspectionTime.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgServiceGroupStatNextInspectionTime.setDescription("Octet string that identifies the GMT time and date of the next Periodic Circuit Inspection. field octects contents range ----- ------- -------- ----- 1 1-2 year 0..65536 2 3 month 1..12 3 4 day 1..31 4 5 hour 0..23 5 6 minutes 0..59 6 7 seconds 0..60 (use 60 for leap-second) 7 8 deci-seconds 0..9 8 9 direction from UTC '+' / '-' 9 10 hours from UTC 0..11 10 11 minutes from UTC 0..59 For example, Tuesday May 26, 1992 at 1:30:15 PM EDT would be displayed as: 1992-5-26,13:30:15.0,-4:0 * Notes: - the value of year is in network-byte order")
sonusIsupsgSvcGrpProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 3))
sonusIsupsgSvcGrpProfileNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileNextIndex.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileNextIndex.setDescription('The next valid index to use when creating a new sonusIsupsgSvcGrpProfileEntry')
sonusIsupsgSvcGrpProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 3, 2), )
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileTable.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileTable.setDescription('This table contains ISUP Service Group profiles.')
sonusIsupsgSvcGrpProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 3, 2, 1), ).setIndexNames((0, "SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupsgSvcGrpProfileListIndex"))
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileEntry.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileEntry.setDescription('This table describes the Service Group profile.')
sonusIsupsgSvcGrpProfileListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileListIndex.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileListIndex.setDescription('The index of the ISUP Service Group Profile.')
sonusIsupsgSvcGrpProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 3, 2, 1, 2), SonusName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileName.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileName.setDescription('The name of the ISUP Service Group Profile.')
sonusIsupsgSvcGrpProfileTG = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 3, 2, 1, 3), SonusNameReference()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileTG.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileTG.setDescription('The Trunk Group, which the ISUP Service Group belongs to.')
sonusIsupsgSvcGrpProfileSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("dms500", 1), ("dms250", 2), ("dms200", 3), ("dms100", 4), ("lucent5ESS", 5), ("lucent4ESS", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileSwitchType.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileSwitchType.setDescription('The network switch type where the ISUP Service Group resides.')
sonusIsupsgSvcGrpProfileRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ansi1992", 1), ("ansi1995", 2), ("itu1993", 3), ("etsi2", 4), ("nttfcc", 5), ("itu1997", 6), ("itu1988", 7), ("ituq767", 8), ("belgacom", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileRevision.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileRevision.setDescription('The revision of the ISUP protocol supported on this Service Group.')
sonusIsupsgSvcGrpProfileHuntAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("bottom2top", 1), ("top2bottom", 2), ("circuithi2lo", 3), ("circuitlo2hi", 4), ("mostnleastidle", 5), ("circularbottom2top", 6), ("circulartop2bottom", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileHuntAlgorithm.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileHuntAlgorithm.setDescription('The hunting method used to select circuits for calls destined to the Service Group destination.')
sonusIsupsgSvcGrpProfileCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileCost.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileCost.setDescription('The routing cost to the ISUP Service Group.')
sonusIsupsgSvcGrpProfileCicControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noCics", 1), ("oddCics", 2), ("evenCics", 3), ("allCics", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileCicControl.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileCicControl.setDescription('The CICs being controlled to resolve dual seizure.')
sonusIsupsgSvcGrpProfileContTestFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileContTestFreq.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileContTestFreq.setDescription('Identifies the frequency of continuity test to be performed on each circuit.')
sonusIsupsgSvcGrpProfileAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 3, 2, 1, 10), SonusAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileAdminState.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileAdminState.setDescription('The admin state of the ISUP Service Group Profile.')
sonusIsupsgSvcGrpProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 3, 2, 1, 11), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileRowStatus.setDescription('')
sonusIsupsgSvcGrpProfileHopCounterState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 3, 2, 1, 12), SonusAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileHopCounterState.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileHopCounterState.setDescription('The Hop Counter state of the ISUP Service Group Profile.')
sonusIsupsgSvcGrpProfileHopCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileHopCounterValue.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileHopCounterValue.setDescription('Specifies the value of the Hop Counter if initiated by the switch.')
sonusIsupsgSvcGrpProfileDiscTreatmentProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 3, 2, 1, 14), SonusNameReference()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileDiscTreatmentProfileName.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileDiscTreatmentProfileName.setDescription('The disconnect treatment profile to be used for this service.')
sonusIsupsgSvcGrpProfileTonePackageName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 3, 2, 1, 15), SonusNameReference()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileTonePackageName.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileTonePackageName.setDescription('The tone package to be used for this service.')
sonusIsupsgSvcGrpProfileGrsStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileGrsStartup.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileGrsStartup.setDescription('Specifies whether support is enabled or disabled for GRS/GRA at Startup for the ISUP Service Group.')
sonusIsupsgSvcGrpProfileOlipCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("on", 1), ("off", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileOlipCheck.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileOlipCheck.setDescription('Specifies the value of the Hop Counter if initiated by the switch.')
sonusIsupsgSvcGrpProfileExchangeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("typeA", 2), ("typeB", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileExchangeType.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileExchangeType.setDescription('The exchange type for the ISUP Service Group.')
sonusIsupsgSvcGrpProfileInspectionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 3, 2, 1, 19), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileInspectionTime.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileInspectionTime.setDescription("Octet string that identifies the GMT time and date to start Periodic Circuit Inspection. field octects contents range ----- ------- -------- ----- 1 1-2 year 0..65536 2 3 month 1..12 3 4 day 1..31 4 5 hour 0..23 5 6 minutes 0..59 6 7 seconds 0..60 (use 60 for leap-second) 7 8 deci-seconds 0..9 8 9 direction from UTC '+' / '-' 9 10 hours from UTC 0..11 10 11 minutes from UTC 0..59 For example, Tuesday May 26, 1992 at 1:30:15 PM EDT would be displayed as: 1992-5-26,13:30:15.0,-4:0 * Notes: - the value of year is in network-byte order")
sonusIsupsgSvcGrpProfileInspectionFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 3, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("onehour", 1), ("threehours", 2), ("sixhours", 3), ("twelvehours", 4), ("oneday", 5), ("twodays", 6))).clone('oneday')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileInspectionFreq.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileInspectionFreq.setDescription('')
sonusIsupsgSvcGrpProfileInspectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 3, 2, 1, 21), SonusAdminState().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileInspectionState.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileInspectionState.setDescription('')
sonusIsupsgSvcGrpProfileSignalingProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 3, 2, 1, 22), SonusNameReference()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileSignalingProfileName.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileSignalingProfileName.setDescription('The ISUP Signaling Profile to be used for this service.')
sonusIsupsgSvcGrpProfileAccRespProcess = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 3, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileAccRespProcess.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileAccRespProcess.setDescription('The ACC Processing state for the ISUP Service Group Profile.')
sonusIsupsgSvcGrpProfileAccL1ARCancelpercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 3, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileAccL1ARCancelpercentage.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileAccL1ARCancelpercentage.setDescription('Specifies the percentage of Alternate Routed call to be cancel at Congestion Level 1.')
sonusIsupsgSvcGrpProfileAccL1DRCancelpercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 3, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileAccL1DRCancelpercentage.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileAccL1DRCancelpercentage.setDescription('Specifies the percentage of Direct Routed call to be cancel at Congestion Level 1.')
sonusIsupsgSvcGrpProfileAccL2ARCancelpercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 3, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileAccL2ARCancelpercentage.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileAccL2ARCancelpercentage.setDescription('Specifies the percentage of Alternate Routed call to be cancel at Congestion Level 2.')
sonusIsupsgSvcGrpProfileAccL2DRCancelpercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 3, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileAccL2DRCancelpercentage.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileAccL2DRCancelpercentage.setDescription('Specifies the percentage of Direct Routed call to be cancel at Congestion Level 2.')
sonusIsupsgSvcGrpProfileAccL3ARCancelpercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 3, 2, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileAccL3ARCancelpercentage.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileAccL3ARCancelpercentage.setDescription('Specifies the percentage of Alternate Routed call to be cancel at Congestion Level 3.')
sonusIsupsgSvcGrpProfileAccL3DRCancelpercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 3, 2, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileAccL3DRCancelpercentage.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileAccL3DRCancelpercentage.setDescription('Specifies the percentage of Direct Routed call to be cancel at Congestion Level 3.')
sonusIsupsgSvcGrpProfileAccSendACL = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 3, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileAccSendACL.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSvcGrpProfileAccSendACL.setDescription('specifies the Max ACL value send to remote node for the ISUP Service Group. 0 means disabled')
sonusIsupsgCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 4), )
if mibBuilder.loadTexts: sonusIsupsgCircuitTable.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgCircuitTable.setDescription("The Isupsg Circuit table describes the circuits in the indexed Access Point. This table is unavailable if the sonusisupsgServiceGroupStatStatus object indicates that this access point is unavailable. If the sonusNodeServerType object returns either 'absent' or 'unknown' the value of all other objects within this table are indeterministic.")
sonusIsupsgCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 4, 1), ).setIndexNames((0, "SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupsgCircuitServiceListIndex"), (0, "SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupsgCircuitIdentityCode"))
if mibBuilder.loadTexts: sonusIsupsgCircuitEntry.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgCircuitEntry.setDescription('')
sonusIsupsgCircuitServiceListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsupsgCircuitServiceListIndex.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgCircuitServiceListIndex.setDescription('The index of the ISUP Service Group circuit is defined for..')
sonusIsupsgCircuitIdentityCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsupsgCircuitIdentityCode.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgCircuitIdentityCode.setDescription('Identifies the circuit identity code (CIC) for the circuit.')
sonusIsupsgCircuitServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 4, 1, 3), SonusNameReference()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgCircuitServiceName.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgCircuitServiceName.setDescription('The name of the ISUP Service Group circuit is under.')
sonusIsupsgCircuitPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 4, 1, 4), SonusNameReference()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgCircuitPortName.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgCircuitPortName.setDescription('The name of the port circuit is on.')
sonusIsupsgCircuitChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgCircuitChannel.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgCircuitChannel.setDescription('Identifies the channel the circuit represents.')
sonusIsupsgCircuitDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("twoWay", 1), ("oneWayIn", 2), ("oneWayOut", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgCircuitDirection.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgCircuitDirection.setDescription('Identifies the direction of traffic to be allowed on the circuit.')
sonusIsupsgCircuitMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("block", 1), ("unblock", 2), ("reset", 3), ("cot", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgCircuitMode.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgCircuitMode.setDescription('The mode of operation of the ISUP Circuit.')
sonusIsupsgCircuitAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dryUp", 1), ("force", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgCircuitAction.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgCircuitAction.setDescription('The action taken on the ISUP Circuit.')
sonusIsupsgCircuitTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgCircuitTimeout.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgCircuitTimeout.setDescription('The timeout value in minutes for dryup action on the ISUP Circuit.')
sonusIsupsgCircuitAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 4, 1, 10), SonusAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgCircuitAdminState.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgCircuitAdminState.setDescription('The admin state of the ISUP Circuit.')
sonusIsupsgCircuitProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 4, 1, 11), SonusNameReference()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgCircuitProfileName.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgCircuitProfileName.setDescription('The circuit profile name assigned to the ISUP circuit.')
sonusIsupsgCircuitRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 4, 1, 12), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgCircuitRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgCircuitRowStatus.setDescription('')
sonusIsupsgCircuitStatTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 5), )
if mibBuilder.loadTexts: sonusIsupsgCircuitStatTable.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgCircuitStatTable.setDescription('This table contains status information about each ISUP circuit in the GSX9000 Switch node. ISUP circuits within the node can can be configured before SS7 connections is physically attached to the node. The remote ISUP circuit may not be equipped or configured. Therefore, it is possible that an ISUP circuit can be unavailable, and is absent.')
sonusIsupsgCircuitStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 5, 1), ).setIndexNames((0, "SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupsgCircuitStatServiceListIndex"), (0, "SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupsgCircuitStatIdentityCode"))
if mibBuilder.loadTexts: sonusIsupsgCircuitStatEntry.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgCircuitStatEntry.setDescription('This table describes the status of the configured ISUP circuits.')
sonusIsupsgCircuitStatServiceListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsupsgCircuitStatServiceListIndex.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgCircuitStatServiceListIndex.setDescription('The index of the ISUP Service Group circuit is defined for..')
sonusIsupsgCircuitStatIdentityCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsupsgCircuitStatIdentityCode.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgCircuitStatIdentityCode.setDescription('Identifies the circuit identity code (CIC) for the circuit.')
sonusIsupsgCircuitStatUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unequipped", 1), ("idle", 2), ("inBusy", 3), ("outBusy", 4), ("transientSetup", 5), ("transientRelease", 6), ("inContinuity", 7), ("outContinuity", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsupsgCircuitStatUsage.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgCircuitStatUsage.setDescription('The usage state of the ISUP circuit.')
sonusIsupsgCircuitStatLocalMaint = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unblocked", 1), ("blocked", 2), ("transientUnblock", 3), ("transientBlock", 4), ("notAvailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsupsgCircuitStatLocalMaint.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgCircuitStatLocalMaint.setDescription('The local maintenance state of the ISUP circuit.')
sonusIsupsgCircuitStatLocalHw = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unblocked", 1), ("blocked", 2), ("transientUnblock", 3), ("transientBlock", 4), ("notAvailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsupsgCircuitStatLocalHw.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgCircuitStatLocalHw.setDescription('The local hardware state of the ISUP circuit.')
sonusIsupsgCircuitStatRemoteMaint = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unblocked", 1), ("blocked", 2), ("transientUnblock", 3), ("transientBlock", 4), ("notAvailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsupsgCircuitStatRemoteMaint.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgCircuitStatRemoteMaint.setDescription('The remote maintenance state of the ISUP circuit.')
sonusIsupsgCircuitStatRemoteHw = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unblocked", 1), ("blocked", 2), ("transientUnblock", 3), ("transientBlock", 4), ("notAvailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsupsgCircuitStatRemoteHw.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgCircuitStatRemoteHw.setDescription('The remote hardware state of the ISUP circuit.')
sonusIsupsgCircuitStatManualCot = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notAvailable", 1), ("pending", 2), ("inProgress", 3), ("pass", 4), ("fail", 5), ("abort", 6), ("lpaFail", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsupsgCircuitStatManualCot.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgCircuitStatManualCot.setDescription('The manual continuity test state of the ISUP circuit.')
sonusIsupsgFarEndCircuitAdminTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 6), )
if mibBuilder.loadTexts: sonusIsupsgFarEndCircuitAdminTable.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgFarEndCircuitAdminTable.setDescription('This table contains administrative information of ISUP circuits on the far end switch GSX is connected to. ISUP circuits should be configured on the GSX node to get the corresponding far end circuit admin info. The far end ISUP circuit may be not equipped or not configured. Therefore, it is possible that the far end info of an ISUP circuit would be unavailable.')
sonusIsupsgFarEndCircuitAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 6, 1), ).setIndexNames((0, "SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupsgFarEndCircuitServiceListIndex"), (0, "SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupsgFarEndCircuitIdentityCode"))
if mibBuilder.loadTexts: sonusIsupsgFarEndCircuitAdminEntry.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgFarEndCircuitAdminEntry.setDescription('This table describes the far end status of the ISUP circuits.')
sonusIsupsgFarEndCircuitServiceListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsupsgFarEndCircuitServiceListIndex.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgFarEndCircuitServiceListIndex.setDescription('The index of the ISUP Service Group far end circuit is defined for.')
sonusIsupsgFarEndCircuitIdentityCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsupsgFarEndCircuitIdentityCode.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgFarEndCircuitIdentityCode.setDescription('Identifies the circuit identity code (CIC) for the circuit.')
sonusIsupsgFarEndCircuitValidationTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noResponse", 0), ("successful", 1), ("failure", 2), ("notAvailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsupsgFarEndCircuitValidationTestResult.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgFarEndCircuitValidationTestResult.setDescription('Result of the far end validation test on the circuit.')
sonusIsupsgFarEndCircuitGroupCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("noResponse", 0), ("unknown", 1), ("analog", 2), ("digital", 3), ("digitalAndAnalog", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsupsgFarEndCircuitGroupCarrier.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgFarEndCircuitGroupCarrier.setDescription('Circuit group carrier indicator of the far end circuit.')
sonusIsupsgFarEndCircuitCicControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("noResponse", 0), ("noCics", 1), ("oddCics", 2), ("evenCics", 3), ("allCics", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsupsgFarEndCircuitCicControl.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgFarEndCircuitCicControl.setDescription('Double seizing control indicator of the far end circuit group.')
sonusIsupsgFarEndCircuitAlarmCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noResponse", 0), ("unknown", 1), ("softwareCarrier", 2), ("hardwareCarrier", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsupsgFarEndCircuitAlarmCarrier.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgFarEndCircuitAlarmCarrier.setDescription('Alarm carrier indicator of the far end circuit group.')
sonusIsupsgFarEndCircuitContinuityRequirement = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("noResponse", 0), ("unknown", 1), ("none", 2), ("statistical", 3), ("perCall", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsupsgFarEndCircuitContinuityRequirement.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgFarEndCircuitContinuityRequirement.setDescription('Continuity check requirements of the far end circuit group.')
sonusIsupsgFarEndCircuitIdentificationTrunkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 6, 1, 8), SonusNameReference()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsupsgFarEndCircuitIdentificationTrunkNumber.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgFarEndCircuitIdentificationTrunkNumber.setDescription('Trunk number of the far end circuit identification.')
sonusIsupsgFarEndCircuitIdentificationOfficeA = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 6, 1, 9), SonusNameReference()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsupsgFarEndCircuitIdentificationOfficeA.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgFarEndCircuitIdentificationOfficeA.setDescription('Office identification for the far end circuit. [ Ref: ANSI T1.113/3.11A ] With respect to offices A and Z the following conventions are used: (a) For one-way trunk groups, the originating switch that offers traffic to the trunk group is office A. (b) For two-way trunk groups, the switch with the lower alphanumeric CLLI code is designated office A. (c) For one-way subgroups of a divided trunk group, the originating switch is designated office A. (d) For two-way subgroups of a divided trunk group, the switch with the lower alphanumeric CLLI code is designated office A.')
sonusIsupsgFarEndCircuitIdentificationOfficeZ = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 6, 1, 10), SonusNameReference()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsupsgFarEndCircuitIdentificationOfficeZ.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgFarEndCircuitIdentificationOfficeZ.setDescription('Office identification for the far end circuit. [ Ref: ANSI T1.113/3.11A ] With respect to offices A and Z the following conventions are used: (a) For one-way trunk groups, the originating switch that offers traffic to the trunk group is office A. (b) For two-way trunk groups, the switch with the lower alphanumeric CLLI code is designated office A. (c) For one-way subgroups of a divided trunk group, the originating switch is designated office A. (d) For two-way subgroups of a divided trunk group, the switch with the lower alphanumeric CLLI code is designated office A.')
sonusIsupsgFarEndCircuitLocationIdentification = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 6, 1, 11), SonusNameReference()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsupsgFarEndCircuitLocationIdentification.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgFarEndCircuitLocationIdentification.setDescription('Location identification of the far end circuit in CLLI( town/state/building/subdivision ) format.')
sonusIsupsgFarEndCircuitCicControlConflict = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noResponse", 0), ("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsupsgFarEndCircuitCicControlConflict.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgFarEndCircuitCicControlConflict.setDescription('Double seizing control for farend and nearend conflict indicator of the circuit group.')
sonusIsupsgFarEndCircuitStatTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 7), )
if mibBuilder.loadTexts: sonusIsupsgFarEndCircuitStatTable.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgFarEndCircuitStatTable.setDescription('This table contains status information of ISUP circuits on the far end switch GSX is connected to. ISUP circuits should be configured on the GSX node to get the corresponding far end circuit status. The far end ISUP circuit may be not equipped or not configured. Therefore, it is possible that the far end status of an ISUP circuit would be unavailable.')
sonusIsupsgFarEndCircuitStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 7, 1), ).setIndexNames((0, "SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupsgFarEndCircuitStatServiceListIndex"), (0, "SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupsgFarEndCircuitStatIdentityCode"))
if mibBuilder.loadTexts: sonusIsupsgFarEndCircuitStatEntry.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgFarEndCircuitStatEntry.setDescription('This table describes the far end status of the ISUP circuits.')
sonusIsupsgFarEndCircuitStatServiceListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsupsgFarEndCircuitStatServiceListIndex.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgFarEndCircuitStatServiceListIndex.setDescription('The index of the ISUP Service Group far end circuit is defined for.')
sonusIsupsgFarEndCircuitStatIdentityCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsupsgFarEndCircuitStatIdentityCode.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgFarEndCircuitStatIdentityCode.setDescription('Identifies the circuit identity code (CIC) for the circuit.')
sonusIsupsgFarEndCircuitStatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("noResponse", 0), ("transient", 1), ("unequipped", 2), ("inbusyActive", 3), ("inbusyLocalBlocked", 4), ("inbusyRemoteBlocked", 5), ("inbusyLocalRemoteBlocked", 6), ("outbusyActive", 7), ("outbusyLocalBlocked", 8), ("outbusyRemoteBlocked", 9), ("outbusyLocalRemoteBlocked", 10), ("idle", 11), ("idleLocalBlocked", 12), ("idleRemoteBlocked", 13), ("idleLocalRemoteBlocked", 14), ("notAvailable", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsupsgFarEndCircuitStatStatus.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgFarEndCircuitStatStatus.setDescription('The far end status of the ISUP circuit.')
sonusIsupsgFarEndCircuitStatLocalMaint = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unblocked", 1), ("blocked", 2), ("transientUnblock", 3), ("transientBlock", 4), ("notAvailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsupsgFarEndCircuitStatLocalMaint.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgFarEndCircuitStatLocalMaint.setDescription('The local maintenance state of the ISUP circuit.')
sonusIsupsgSignalingProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8))
sonusIsupsgSignalingProfileNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileNextIndex.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileNextIndex.setDescription('The next valid index to use when creating a new sonusIsupsgSignalingProfileEntry')
sonusIsupsgSignalingProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2), )
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileTable.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileTable.setDescription('This table contains information about each ISUP Signaling Profile configured to be a member of the node. A management entity may create rows for Signaling Profile that are anticipated to be supported in the future.')
sonusIsupsgSignalingProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1), ).setIndexNames((0, "SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupsgSignalingProfileListIndex"))
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileEntry.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileEntry.setDescription('This table describes the ISUP Signaling Profile that are configured.')
sonusIsupsgSignalingProfileListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileListIndex.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileListIndex.setDescription('The index of the ISUP Signaling Profile entry.')
sonusIsupsgSignalingProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 2), SonusName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileName.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileName.setDescription('The name of the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileCompat = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 3), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCompat.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCompat.setDescription('Is compatibility supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileAccessDel = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 4), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileAccessDel.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileAccessDel.setDescription('Is Access Delivery Information supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileGenNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 5), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileGenNum.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileGenNum.setDescription('Is the generic number parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileGenNotif = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 6), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileGenNotif.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileGenNotif.setDescription('Is the generic notification parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileGenDigs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 7), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileGenDigs.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileGenDigs.setDescription('Is the generic digits parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileLocNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 8), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileLocNum.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileLocNum.setDescription('Is the location number parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileOrigIscPC = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 9), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileOrigIscPC.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileOrigIscPC.setDescription('Is the originating ISC point code parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileUserTeleService = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 10), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileUserTeleService.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileUserTeleService.setDescription('Is the user teleservice parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileSegmentation = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 11), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileSegmentation.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileSegmentation.setDescription('Is segmentation supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileFallback = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 12), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileFallback.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileFallback.setDescription('Is fallback supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfilePropDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 13), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfilePropDelay.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfilePropDelay.setDescription('Is propagation delay supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileEMcid = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 14), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileEMcid.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileEMcid.setDescription('Is MCID supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileHopCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 15), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileHopCounter.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileHopCounter.setDescription('Is the hop counter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileSubPriorityCls = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 16), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileSubPriorityCls.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileSubPriorityCls.setDescription('Is the subscriber priority class parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileAPM = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 17), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileAPM.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileAPM.setDescription('Is APM supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileConNumInAcm = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 18), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileConNumInAcm.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileConNumInAcm.setDescription('Is the connected number parameter supported in the ACM for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileCauseInCpg = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 19), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCauseInCpg.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCauseInCpg.setDescription('Is the cause parameter supported in the CPG for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileMultiCarrierEnv = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 20), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileMultiCarrierEnv.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileMultiCarrierEnv.setDescription('Is the multi carrier environment parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileCarrierSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 21), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCarrierSelection.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCarrierSelection.setDescription('Is carrier selection supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileInrInf = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 22), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileInrInf.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileInrInf.setDescription('Is INR/INF supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileCqmCqr = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 23), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCqmCqr.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCqmCqr.setDescription('Is CQM/CQR supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileCallRef = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 24), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCallRef.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCallRef.setDescription('Is the call reference parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileCfn = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 25), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCfn.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCfn.setDescription('Is CFN supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 26), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileFacility.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileFacility.setDescription('Are FAA, FAR and FRJ supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfilePam = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 27), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfilePam.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfilePam.setDescription('Is PAM supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileObciAnm = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 28), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileObciAnm.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileObciAnm.setDescription('Is the OBCI parameter supported in the ANM for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileDrs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 29), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileDrs.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileDrs.setDescription('Is DRS supported the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileRedNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 30), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileRedNum.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileRedNum.setDescription('Is the redirection number parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileLpa = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 31), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileLpa.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileLpa.setDescription('Is LPA supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileUcic = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 32), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileUcic.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileUcic.setDescription('Is UCIC supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileOlm = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 33), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileOlm.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileOlm.setDescription('Is OLM supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileBBRel = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 34), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileBBRel.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileBBRel.setDescription('Are Blue Book parameters supported in REL for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileUsr = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 35), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileUsr.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileUsr.setDescription('Is USR supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileBBIam = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 36), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileBBIam.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileBBIam.setDescription('Are the Blue Book parameters supported in IAM for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileCallModMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 37), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCallModMsgs.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCallModMsgs.setDescription('Are CMR, CMA and CMRJ supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileCallDiv = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 38), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCallDiv.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCallDiv.setDescription('Is call diversion supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileCallHist = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 39), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCallHist.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCallHist.setDescription('Is the call history parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileGenRef = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 40), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileGenRef.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileGenRef.setDescription('Is the generic reference parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileMLPP = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 41), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileMLPP.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileMLPP.setDescription('Is the MLPP parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileNSF = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 42), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileNSF.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileNSF.setDescription('Is the NSF parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileRedNumRist = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 43), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileRedNumRist.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileRedNumRist.setDescription('Is the redirection number restriction parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileRemoteOp = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 44), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileRemoteOp.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileRemoteOp.setDescription('Is the remote operations parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileServActv = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 45), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileServActv.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileServActv.setDescription('Is the service activation parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileSigPointCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 46), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileSigPointCode.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileSigPointCode.setDescription('Is the signaling point code parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileTmrPrime = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 47), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileTmrPrime.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileTmrPrime.setDescription('Is the TMR prime parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileTransMedUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 48), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileTransMedUsed.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileTransMedUsed.setDescription('Is the transimission medium used parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileUsiPrime = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 49), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileUsiPrime.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileUsiPrime.setDescription('Is the USI prime parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileRedNumInAcm = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 50), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileRedNumInAcm.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileRedNumInAcm.setDescription('Is the rediction number supported in the ACM for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileRedNumInAnm = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 51), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileRedNumInAnm.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileRedNumInAnm.setDescription('Is the rediretion number supported in the ANM for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileUuiInRel = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 52), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileUuiInRel.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileUuiInRel.setDescription('Is the UUI parameter supported in the REL for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileConReqInFaa = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 53), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileConReqInFaa.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileConReqInFaa.setDescription('Is the connection request parameter supported in the FAA for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileConReqInFar = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 54), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileConReqInFar.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileConReqInFar.setDescription('Is the connection request parameter supported in the FAR for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileFac = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 55), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileFac.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileFac.setDescription('Is the FAC supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileEchoControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 56), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileEchoControl.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileEchoControl.setDescription('Is the echo control parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileBackwardGVNS = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 57), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileBackwardGVNS.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileBackwardGVNS.setDescription('Is the backward GVNS parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileCircAssMap = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 58), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCircAssMap.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCircAssMap.setDescription('Is the circuit assignment map parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileCCSS = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 59), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCCSS.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCCSS.setDescription('Is the CCSS parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileCallDivTreat = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 60), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCallDivTreat.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCallDivTreat.setDescription('Is the call diversion treatment parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileCalledInNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 61), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCalledInNum.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCalledInNum.setDescription('Is the called IN number parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileCollectCallReq = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 62), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCollectCallReq.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCollectCallReq.setDescription('Is the collect call request parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileConfTreat = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 63), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileConfTreat.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileConfTreat.setDescription('Is the conference treatment parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileCorrelationId = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 64), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCorrelationId.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCorrelationId.setDescription('Is the correlation ID parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileCallOfrTreat = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 65), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCallOfrTreat.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCallOfrTreat.setDescription('Is the call offering treatment parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileCallTransNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 66), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCallTransNum.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCallTransNum.setDescription('Is the call transfer number paramaeter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileCallTransRef = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 67), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCallTransRef.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCallTransRef.setDescription('Is the call transfer reference parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileDispInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 68), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileDispInfo.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileDispInfo.setDescription('Is the display information parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileForwardGVNS = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 69), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileForwardGVNS.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileForwardGVNS.setDescription('Is the forward GVNS parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileLoopPrevention = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 70), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileLoopPrevention.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileLoopPrevention.setDescription('Is the loop prevention indicators parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileNetworkMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 71), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileNetworkMgmt.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileNetworkMgmt.setDescription('Is network management controls parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileSCFId = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 72), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileSCFId.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileSCFId.setDescription('Is the SCF ID parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileUIDActionInd = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 73), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileUIDActionInd.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileUIDActionInd.setDescription('Is the UID action indicators parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileUIDCapInd = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 74), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileUIDCapInd.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileUIDCapInd.setDescription('Is the UID capabilities parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileConNumInCpg = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 75), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileConNumInCpg.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileConNumInCpg.setDescription('Is the connected number parameter supported in the CPG for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileGenNumInCpg = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 76), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileGenNumInCpg.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileGenNumInCpg.setDescription('Is the generic number parameter supported in the CPG for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileEchoCntrlInIam = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 77), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileEchoCntrlInIam.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileEchoCntrlInIam.setDescription('Is the echo control parameter supported in the IAM for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileRemoteOpInRel = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 78), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileRemoteOpInRel.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileRemoteOpInRel.setDescription('Is the remote operations parameter supported in the REL for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileAccessTransInFac = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 79), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileAccessTransInFac.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileAccessTransInFac.setDescription('Is the access transport parameter supported in the FAC for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileGenNotifInFac = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 80), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileGenNotifInFac.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileGenNotifInFac.setDescription('Is the generic notification parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileUuindAnm = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 81), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileUuindAnm.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileUuindAnm.setDescription('Is the UUI parameter supported in the ANM for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileUuindCpg = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 82), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileUuindCpg.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileUuindCpg.setDescription('Is the UUI parameter supported in the CPG for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileNrmSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 83), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileNrmSupport.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileNrmSupport.setDescription('Is the NRM supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileCseInRlc = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 84), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCseInRlc.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCseInRlc.setDescription('Is the cause parameter supported in the RLC for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileUpaUpt = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 85), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileUpaUpt.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileUpaUpt.setDescription('Are UPA/UPT supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileRecInCai = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 86), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileRecInCai.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileRecInCai.setDescription('Is the recommnedation field supported in the cause parameter for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileTransitUnrec = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 87), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileTransitUnrec.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileTransitUnrec.setDescription('Is the transiting of unrecognised parameters supported for the ISUP service Group.')
sonusIsupsgSignalingProfileCcRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 88), SonusSupportFlag()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCcRaw.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCcRaw.setDescription('Should raw ISUP messages be sent to CC for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileCctGrpBlockFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 89), SonusSupportFlag().clone('supported')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCctGrpBlockFlag.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCctGrpBlockFlag.setDescription('The flag to be set to allow CGB and CGU messages in the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileCctGrpResetFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 90), SonusSupportFlag().clone('supported')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCctGrpResetFlag.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCctGrpResetFlag.setDescription('The flag to be set to allow GRS messages in the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileBaseProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 91), SonusNameReference()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileBaseProfileName.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileBaseProfileName.setDescription('The ISUP Signaling Profile used as a base for the settings of this Signaling Profile.')
sonusIsupsgSignalingProfileAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 92), SonusAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileAdminState.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileAdminState.setDescription('The admin state of the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 93), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileRowStatus.setDescription('')
sonusIsupsgSignalingProfilePropDelayValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 94), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfilePropDelayValue.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfilePropDelayValue.setDescription('The propagation delay value in milliseconds for this ISUP signaling profile.')
sonusIsupsgSignalingProfileU2USrvcLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 95), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("level1", 1), ("level2", 2), ("level3", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileU2USrvcLevel.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileU2USrvcLevel.setDescription('The level of user to user services supported in the the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileSAM = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 96), SonusSupportFlag().clone('unsupported')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileSAM.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileSAM.setDescription('Is the Subsequent Address Message supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileFOT = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 97), SonusSupportFlag().clone('unsupported')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileFOT.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileFOT.setDescription('Is the Forward Transfer Message supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileSpecialDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 98), Bits().clone(namedValues=NamedValues(("digitA", 0), ("digitB", 1), ("digitC", 2), ("digitD", 3), ("digitE", 4), ("digitF", 5), ("none", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileSpecialDigits.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileSpecialDigits.setDescription('Indicates the special digits which can appear in dialed digit strings BIT 0 - Is digit A allowed in the digit string BIT 1 - Is digit B allowed in the digit string BIT 2 - Is digit C allowed in the digit string BIT 3 - Is digit D allowed in the digit string BIT 4 - Is digit E allowed in the digit string BIT 5 - Is digit F allowed in the digit string BIT 6 - No special digits in the digit string')
sonusIsupsgSignalingProfileTNS = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 99), SonusSupportFlag().clone('unsupported')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileTNS.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileTNS.setDescription('Is the Transit Network Selection Parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileAwaitDigits = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 100), SonusSupportFlag().clone('unsupported')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileAwaitDigits.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileAwaitDigits.setDescription('Is Await Digits supported for this ISUP Signaling Profile.')
sonusIsupsgSignalingProfileAccessTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 101), SonusSupportFlag().clone('supported')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileAccessTrans.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileAccessTrans.setDescription('Is the Access Transport parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileJurisdiction = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 102), SonusSupportFlag().clone('supported')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileJurisdiction.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileJurisdiction.setDescription('Is the Jurisdiction parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileOCN = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 103), SonusSupportFlag().clone('supported')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileOCN.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileOCN.setDescription('Is the Original Called Number parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileBusinessGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 104), SonusSupportFlag().clone('supported')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileBusinessGrp.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileBusinessGrp.setDescription('Is the Business Group parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileConReq = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 105), SonusSupportFlag().clone('supported')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileConReq.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileConReq.setDescription('Is the Conection Request parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileInfoInd = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 106), SonusSupportFlag().clone('supported')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileInfoInd.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileInfoInd.setDescription('Is the Information Indicator parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileNtp = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 107), SonusSupportFlag().clone('supported')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileNtp.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileNtp.setDescription('Is the Network Transport supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileNotifInd = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 108), SonusSupportFlag().clone('supported')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileNotifInd.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileNotifInd.setDescription('Is the Notification Indicator parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileRedInfoAcm = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 109), SonusSupportFlag().clone('supported')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileRedInfoAcm.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileRedInfoAcm.setDescription('Is the Redirection Information parameter supported in the ACM message for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileEgressService = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 110), SonusSupportFlag().clone('supported')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileEgressService.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileEgressService.setDescription('Is the Egress Service parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileServCodeInd = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 111), SonusSupportFlag().clone('supported')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileServCodeInd.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileServCodeInd.setDescription('Is the Service Code Indicator parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileSpecProcReq = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 112), SonusSupportFlag().clone('supported')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileSpecProcReq.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileSpecProcReq.setDescription('Is the Special Processing Request parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileTransReq = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 113), SonusSupportFlag().clone('supported')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileTransReq.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileTransReq.setDescription('Is the Transaction Request parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileChgNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 114), SonusSupportFlag().clone('supported')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileChgNum.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileChgNum.setDescription('Is the Charge Number parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileGenAddressREL = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 115), SonusSupportFlag().clone('supported')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileGenAddressREL.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileGenAddressREL.setDescription('Is the Generic Address parameter supported in the REL message for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileUUIndAcm = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 116), SonusSupportFlag().clone('supported')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileUUIndAcm.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileUUIndAcm.setDescription('Is the User to User Indicators parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileUUInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 117), SonusSupportFlag().clone('supported')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileUUInfo.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileUUInfo.setDescription('Is the User to User Information parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileOperatorServInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 118), SonusSupportFlag().clone('supported')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileOperatorServInfo.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileOperatorServInfo.setDescription('Is the Operator Service Information parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileCvtCvr = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 119), SonusSupportFlag().clone('supported')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCvtCvr.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCvtCvr.setDescription('Are the Circuit Validation Test/Response procedures supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileGenName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 120), SonusSupportFlag().clone('supported')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileGenName.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileGenName.setDescription('Is the Generic Name parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileRedCap = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 121), SonusSupportFlag().clone('supported')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileRedCap.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileRedCap.setDescription('Is the Redirection Capability parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileRedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 122), SonusSupportFlag().clone('supported')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileRedCount.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileRedCount.setDescription('Is the Group Redirection Count parameter supported for the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileSendTwoGrpMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 123), SonusSupportFlag().clone('supported')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileSendTwoGrpMsgs.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileSendTwoGrpMsgs.setDescription('Set the Flag to Send Two Group Messages in the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileAwaitTwoGrpMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 124), SonusSupportFlag().clone('supported')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileAwaitTwoGrpMsgs.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileAwaitTwoGrpMsgs.setDescription('Set the Flag to Await Two Group Messages in the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileCqmOnCardSwap = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 125), SonusSupportFlag().clone('supported')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCqmOnCardSwap.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCqmOnCardSwap.setDescription('Set the Flag to perform CQM on Card Swap in the ISUP Signaling Profile.')
sonusIsupsgSignalingProfileAnsi95Grs = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 126), SonusSupportFlag().clone('supported')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileAnsi95Grs.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileAnsi95Grs.setDescription('Should the ANSI-95 format for Group Reset Circuit (GRS), which includes optional parameters, be used.')
sonusIsupsgSignalingProfileCpgBeforeAcm = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 1, 8, 2, 1, 127), SonusSupportFlag().clone('supported')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCpgBeforeAcm.setStatus('current')
if mibBuilder.loadTexts: sonusIsupsgSignalingProfileCpgBeforeAcm.setDescription('Should a CPG arriving before an ACM be transited.')
sonusIsupServiceGroupMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 2))
sonusIsupServiceGroupMIBNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 2, 0))
sonusIsupServiceGroupMIBNotificationsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 2, 1))
sonusIsupSvcGrpName = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsupSvcGrpName.setStatus('current')
if mibBuilder.loadTexts: sonusIsupSvcGrpName.setDescription('Name of the ISUP service group.')
sonusIsupMaintReason = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ss7GwRegistration", 1), ("remoteSs7PointCodeAccess", 2), ("trunkGroupMode", 3), ("serviceGroupMode", 4), ("circuitMode", 5), ("ds1Mode", 6), ("serverMode", 7), ("localHardware", 8), ("remoteMaintenance", 9), ("remoteHardware", 10), ("remoteUnequipped", 11), ("ss7GwResynchronization", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsupMaintReason.setStatus('current')
if mibBuilder.loadTexts: sonusIsupMaintReason.setDescription('Maintenance reason for blocking/unblocking of the circuit.')
sonusIsupTrunkGrpName = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsupTrunkGrpName.setStatus('current')
if mibBuilder.loadTexts: sonusIsupTrunkGrpName.setDescription('Name of the trunk group.')
sonusIsupCircuit = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsupCircuit.setStatus('current')
if mibBuilder.loadTexts: sonusIsupCircuit.setDescription('Base circuit identity code (CIC) for the circuit.')
sonusIsupCircuitOffsets = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 2, 1, 5), Bits().clone(namedValues=NamedValues(("cicOffset0", 0), ("cicOffset1", 1), ("cicOffset2", 2), ("cicOffset3", 3), ("cicOffset4", 4), ("cicOffset5", 5), ("cicOffset6", 6), ("cicOffset7", 7), ("cicOffset8", 8), ("cicOffset9", 9), ("cicOffset10", 10), ("cicOffset11", 11), ("cicOffset12", 12), ("cicOffset13", 13), ("cicOffset14", 14), ("cicOffset15", 15), ("cicOffset16", 16), ("cicOffset17", 17), ("cicOffset18", 18), ("cicOffset19", 19), ("cicOffset20", 20), ("cicOffset21", 21), ("cicOffset22", 22), ("cicOffset23", 23)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsupCircuitOffsets.setStatus('current')
if mibBuilder.loadTexts: sonusIsupCircuitOffsets.setDescription('Circuit maintenance status bitmap for CIC range starting with base CIC.')
sonusIsupCalledPartyNumber = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsupCalledPartyNumber.setStatus('current')
if mibBuilder.loadTexts: sonusIsupCalledPartyNumber.setDescription('Called Party Number.')
sonusIsupCallingPartyNumber = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsupCallingPartyNumber.setStatus('current')
if mibBuilder.loadTexts: sonusIsupCallingPartyNumber.setDescription('Calling Party Number.')
sonusIsupMaintCode = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsupMaintCode.setStatus('current')
if mibBuilder.loadTexts: sonusIsupMaintCode.setDescription('Maintainence code.')
sonusIsupSvcGrpInServiceNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 2, 0, 1)).setObjects(("SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupSvcGrpName"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusIsupSvcGrpInServiceNotification.setStatus('current')
if mibBuilder.loadTexts: sonusIsupSvcGrpInServiceNotification.setDescription('This trap indicates that the ISUP Service Group was put in service by maintenance staff.')
sonusIsupSvcGrpOutOfServiceNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 2, 0, 2)).setObjects(("SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupSvcGrpName"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusIsupSvcGrpOutOfServiceNotification.setStatus('current')
if mibBuilder.loadTexts: sonusIsupSvcGrpOutOfServiceNotification.setDescription('This trap indicates that the ISUP Service Group was taken out of service by maintenance staff.')
sonusIsupCircuitBlockedNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 2, 0, 3)).setObjects(("SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupSvcGrpName"), ("SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupMaintReason"), ("SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupTrunkGrpName"), ("SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupCircuit"), ("SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupCircuitOffsets"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusIsupCircuitBlockedNotification.setStatus('current')
if mibBuilder.loadTexts: sonusIsupCircuitBlockedNotification.setDescription('This trap indicates that the ISUP Circuit(s) were blocked.')
sonusIsupCircuitUnblockedNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 2, 0, 4)).setObjects(("SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupSvcGrpName"), ("SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupMaintReason"), ("SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupTrunkGrpName"), ("SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupCircuit"), ("SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupCircuitOffsets"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusIsupCircuitUnblockedNotification.setStatus('current')
if mibBuilder.loadTexts: sonusIsupCircuitUnblockedNotification.setDescription('This trap indicates that the ISUP Circuit(s) were unblocked.')
sonusIsupCircuitResetNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 2, 0, 5)).setObjects(("SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupSvcGrpName"), ("SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupTrunkGrpName"), ("SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupCircuit"), ("SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupCircuitOffsets"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusIsupCircuitResetNotification.setStatus('current')
if mibBuilder.loadTexts: sonusIsupCircuitResetNotification.setDescription('This trap indicates that the ISUP Circuit(s) were reset.')
sonusIsupContinuityRecheckFailureNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 2, 0, 6)).setObjects(("SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupSvcGrpName"), ("SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupCircuit"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusIsupContinuityRecheckFailureNotification.setStatus('current')
if mibBuilder.loadTexts: sonusIsupContinuityRecheckFailureNotification.setDescription('This trap indicates that the Continuity Recheck on the ISUP circuit failed.')
sonusIsupCicRegistrationFailedNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 2, 0, 7)).setObjects(("SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupCircuit"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusIsupCicRegistrationFailedNotification.setStatus('current')
if mibBuilder.loadTexts: sonusIsupCicRegistrationFailedNotification.setDescription('This trap indicates that the CIC Registration failed after multiple retries.')
sonusIsupHopCounterExhaustedNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 2, 0, 8)).setObjects(("SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupSvcGrpName"), ("SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupCircuit"), ("SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupCalledPartyNumber"), ("SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupCallingPartyNumber"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusIsupHopCounterExhaustedNotification.setStatus('current')
if mibBuilder.loadTexts: sonusIsupHopCounterExhaustedNotification.setDescription('This trap indicates that the Hop Counter value received in IAM is zero.')
sonusIsupRelWithExchangeRoutingErrorNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 2, 0, 9)).setObjects(("SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupSvcGrpName"), ("SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupCircuit"), ("SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupCalledPartyNumber"), ("SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupCallingPartyNumber"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusIsupRelWithExchangeRoutingErrorNotification.setStatus('current')
if mibBuilder.loadTexts: sonusIsupRelWithExchangeRoutingErrorNotification.setDescription('This trap indicates that a REL message is received with Exchange Routing Error cause value.')
sonusIsupCqmTimeoutNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 2, 0, 10)).setObjects(("SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupCircuit"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusIsupCqmTimeoutNotification.setStatus('current')
if mibBuilder.loadTexts: sonusIsupCqmTimeoutNotification.setDescription('This trap indicates that the timed out has occured waiting for CQM response')
sonusIsupCvtTimeoutNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 2, 0, 11)).setObjects(("SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupCircuit"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusIsupCvtTimeoutNotification.setStatus('current')
if mibBuilder.loadTexts: sonusIsupCvtTimeoutNotification.setDescription('This trap indicates that the timed out has occured waiting for CVT response')
sonusIsupFarendCircuitStateMismatchedNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 2, 0, 12)).setObjects(("SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupCircuit"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusIsupFarendCircuitStateMismatchedNotification.setStatus('current')
if mibBuilder.loadTexts: sonusIsupFarendCircuitStateMismatchedNotification.setDescription('This trap indicates that the circuit/block state is mismatched as report by CQR')
sonusIsupCircuitTimerExpired = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 6, 1, 2, 0, 13)).setObjects(("SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupTrunkGrpName"), ("SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupSvcGrpName"), ("SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupCircuit"), ("SONUS-ISUP-SERVICE-GROUP-MIB", "sonusIsupMaintCode"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusIsupCircuitTimerExpired.setStatus('current')
if mibBuilder.loadTexts: sonusIsupCircuitTimerExpired.setDescription('This trap indicates that the ISUP Circuit had a timer expire.')
mibBuilder.exportSymbols("SONUS-ISUP-SERVICE-GROUP-MIB", sonusIsupsgCircuitStatEntry=sonusIsupsgCircuitStatEntry, sonusIsupsgServiceGroupOlipCheck=sonusIsupsgServiceGroupOlipCheck, sonusIsupsgServiceGroupContTestFreq=sonusIsupsgServiceGroupContTestFreq, sonusIsupsgSvcGrpProfileDiscTreatmentProfileName=sonusIsupsgSvcGrpProfileDiscTreatmentProfileName, sonusIsupsgFarEndCircuitStatServiceListIndex=sonusIsupsgFarEndCircuitStatServiceListIndex, sonusIsupsgSignalingProfileGenNotifInFac=sonusIsupsgSignalingProfileGenNotifInFac, sonusIsupSvcGrpName=sonusIsupSvcGrpName, sonusIsupsgServiceGroupRemotePointCode=sonusIsupsgServiceGroupRemotePointCode, sonusIsupsgFarEndCircuitValidationTestResult=sonusIsupsgFarEndCircuitValidationTestResult, sonusIsupsgCircuitPortName=sonusIsupsgCircuitPortName, sonusIsupsgSignalingProfileRedCap=sonusIsupsgSignalingProfileRedCap, sonusIsupsgSignalingProfileConNumInCpg=sonusIsupsgSignalingProfileConNumInCpg, sonusIsupsgServiceGroupCost=sonusIsupsgServiceGroupCost, sonusIsupsgServiceGroupStatEntry=sonusIsupsgServiceGroupStatEntry, sonusIsupsgSignalingProfileGenRef=sonusIsupsgSignalingProfileGenRef, sonusIsupsgSignalingProfileAccessTransInFac=sonusIsupsgSignalingProfileAccessTransInFac, sonusIsupsgFarEndCircuitStatTable=sonusIsupsgFarEndCircuitStatTable, sonusIsupsgServiceGroupName=sonusIsupsgServiceGroupName, sonusIsupsgServiceGroupListIndex=sonusIsupsgServiceGroupListIndex, sonusIsupsgServiceGroupAccL2DRCancelpercentage=sonusIsupsgServiceGroupAccL2DRCancelpercentage, sonusIsupsgSignalingProfileGenNotif=sonusIsupsgSignalingProfileGenNotif, sonusIsupRelWithExchangeRoutingErrorNotification=sonusIsupRelWithExchangeRoutingErrorNotification, sonusIsupCircuitOffsets=sonusIsupCircuitOffsets, sonusIsupsgSignalingProfileUsr=sonusIsupsgSignalingProfileUsr, sonusIsupsgSignalingProfileName=sonusIsupsgSignalingProfileName, sonusIsupsgSvcGrpProfileInspectionState=sonusIsupsgSvcGrpProfileInspectionState, sonusIsupsgSignalingProfileAwaitDigits=sonusIsupsgSignalingProfileAwaitDigits, sonusIsupsgSignalingProfileCallRef=sonusIsupsgSignalingProfileCallRef, sonusIsupsgSignalingProfileLpa=sonusIsupsgSignalingProfileLpa, sonusIsupsgSignalingProfileCcRaw=sonusIsupsgSignalingProfileCcRaw, sonusIsupsgSignalingProfileJurisdiction=sonusIsupsgSignalingProfileJurisdiction, sonusIsupsgServiceGroupHopCounterState=sonusIsupsgServiceGroupHopCounterState, sonusIsupsgServiceGroupStatLastInspectionTime=sonusIsupsgServiceGroupStatLastInspectionTime, sonusIsupsgServiceGroupStatStatus=sonusIsupsgServiceGroupStatStatus, sonusIsupsgSignalingProfileUuiInRel=sonusIsupsgSignalingProfileUuiInRel, sonusIsupsgSvcGrpProfileRevision=sonusIsupsgSvcGrpProfileRevision, sonusIsupsgSignalingProfileCctGrpResetFlag=sonusIsupsgSignalingProfileCctGrpResetFlag, sonusIsupsgServiceGroupOperation=sonusIsupsgServiceGroupOperation, sonusIsupsgFarEndCircuitIdentificationOfficeZ=sonusIsupsgFarEndCircuitIdentificationOfficeZ, sonusIsupsgSignalingProfileSpecProcReq=sonusIsupsgSignalingProfileSpecProcReq, sonusIsupsgSignalingProfileCfn=sonusIsupsgSignalingProfileCfn, sonusIsupsgServiceGroupAccL1ARCancelpercentage=sonusIsupsgServiceGroupAccL1ARCancelpercentage, sonusIsupsgCircuitStatUsage=sonusIsupsgCircuitStatUsage, sonusIsupCqmTimeoutNotification=sonusIsupCqmTimeoutNotification, sonusIsupsgSignalingProfileRemoteOpInRel=sonusIsupsgSignalingProfileRemoteOpInRel, sonusIsupsgServiceGroupHuntAlgorithm=sonusIsupsgServiceGroupHuntAlgorithm, sonusIsupsgSignalingProfileListIndex=sonusIsupsgSignalingProfileListIndex, sonusIsupsgServiceGroupSwitchType=sonusIsupsgServiceGroupSwitchType, sonusIsupsgCircuitEntry=sonusIsupsgCircuitEntry, sonusIsupsgSignalingProfileEntry=sonusIsupsgSignalingProfileEntry, sonusIsupsgSvcGrpProfileAccL1DRCancelpercentage=sonusIsupsgSvcGrpProfileAccL1DRCancelpercentage, sonusIsupsgSignalingProfileMultiCarrierEnv=sonusIsupsgSignalingProfileMultiCarrierEnv, sonusIsupsgSignalingProfileUcic=sonusIsupsgSignalingProfileUcic, sonusIsupsgServiceGroupCicControl=sonusIsupsgServiceGroupCicControl, sonusIsupsgServiceGroupAccL2ARCancelpercentage=sonusIsupsgServiceGroupAccL2ARCancelpercentage, sonusIsupsgServiceGroupAccSendACL=sonusIsupsgServiceGroupAccSendACL, sonusIsupsgSignalingProfileSegmentation=sonusIsupsgSignalingProfileSegmentation, sonusIsupsgSignalingProfileCallOfrTreat=sonusIsupsgSignalingProfileCallOfrTreat, sonusIsupsgSignalingProfileRedInfoAcm=sonusIsupsgSignalingProfileRedInfoAcm, sonusIsupsgCircuitStatIdentityCode=sonusIsupsgCircuitStatIdentityCode, sonusIsupsgServiceGroupAdminState=sonusIsupsgServiceGroupAdminState, sonusIsupsgSvcGrpProfileAccL2ARCancelpercentage=sonusIsupsgSvcGrpProfileAccL2ARCancelpercentage, sonusIsupsgCircuitStatTable=sonusIsupsgCircuitStatTable, sonusIsupServiceGroupMIBNotifications=sonusIsupServiceGroupMIBNotifications, sonusIsupsgCircuitDirection=sonusIsupsgCircuitDirection, sonusIsupsgSignalingProfileFac=sonusIsupsgSignalingProfileFac, sonusIsupServiceGroupMIBNotificationsObjects=sonusIsupServiceGroupMIBNotificationsObjects, sonusIsupsgSignalingProfileUUIndAcm=sonusIsupsgSignalingProfileUUIndAcm, sonusIsupsgSignalingProfileCallTransNum=sonusIsupsgSignalingProfileCallTransNum, sonusIsupsgFarEndCircuitStatLocalMaint=sonusIsupsgFarEndCircuitStatLocalMaint, sonusIsupsgSignalingProfileOCN=sonusIsupsgSignalingProfileOCN, sonusIsupsgSignalingProfileNotifInd=sonusIsupsgSignalingProfileNotifInd, sonusIsupsgSignalingProfileRedNumInAnm=sonusIsupsgSignalingProfileRedNumInAnm, sonusIsupsgSignalingProfileUuindCpg=sonusIsupsgSignalingProfileUuindCpg, sonusIsupsgCircuitStatRemoteMaint=sonusIsupsgCircuitStatRemoteMaint, sonusIsupsgSignalingProfileCCSS=sonusIsupsgSignalingProfileCCSS, sonusIsupsgSignalingProfileGenNumInCpg=sonusIsupsgSignalingProfileGenNumInCpg, sonusIsupMaintCode=sonusIsupMaintCode, sonusIsupsgCircuitStatServiceListIndex=sonusIsupsgCircuitStatServiceListIndex, sonusIsupsgSvcGrpProfileAccL2DRCancelpercentage=sonusIsupsgSvcGrpProfileAccL2DRCancelpercentage, sonusIsupsgCircuitTable=sonusIsupsgCircuitTable, sonusIsupsgCircuitStatLocalMaint=sonusIsupsgCircuitStatLocalMaint, sonusIsupsgFarEndCircuitStatIdentityCode=sonusIsupsgFarEndCircuitStatIdentityCode, sonusIsupsgSignalingProfilePam=sonusIsupsgSignalingProfilePam, sonusIsupsgSignalingProfileDrs=sonusIsupsgSignalingProfileDrs, sonusIsupsgSignalingProfileUsiPrime=sonusIsupsgSignalingProfileUsiPrime, sonusIsupsgSignalingProfileUpaUpt=sonusIsupsgSignalingProfileUpaUpt, sonusIsupsgServiceGroupGatewayOutage=sonusIsupsgServiceGroupGatewayOutage, sonusIsupsgSignalingProfileRecInCai=sonusIsupsgSignalingProfileRecInCai, sonusIsupsgFarEndCircuitCicControl=sonusIsupsgFarEndCircuitCicControl, sonusIsupsgServiceGroupGrsStartup=sonusIsupsgServiceGroupGrsStartup, sonusIsupsgSignalingProfileConReqInFar=sonusIsupsgSignalingProfileConReqInFar, sonusIsupsgSignalingProfileAwaitTwoGrpMsgs=sonusIsupsgSignalingProfileAwaitTwoGrpMsgs, sonusIsupsgSvcGrpProfile=sonusIsupsgSvcGrpProfile, sonusIsupsgSignalingProfileInfoInd=sonusIsupsgSignalingProfileInfoInd, sonusIsupsgSignalingProfileCompat=sonusIsupsgSignalingProfileCompat, sonusIsupsgSignalingProfileNSF=sonusIsupsgSignalingProfileNSF, sonusIsupsgServiceGroupDiscTreatmentProfileName=sonusIsupsgServiceGroupDiscTreatmentProfileName, sonusIsupsgSignalingProfileCvtCvr=sonusIsupsgSignalingProfileCvtCvr, sonusIsupsgSignalingProfileCqmOnCardSwap=sonusIsupsgSignalingProfileCqmOnCardSwap, sonusIsupsgSvcGrpProfileAccL1ARCancelpercentage=sonusIsupsgSvcGrpProfileAccL1ARCancelpercentage, sonusIsupsgSignalingProfileEgressService=sonusIsupsgSignalingProfileEgressService, sonusIsupsgSignalingProfileTransReq=sonusIsupsgSignalingProfileTransReq, sonusIsupsgSignalingProfileAPM=sonusIsupsgSignalingProfileAPM, sonusIsupsgSignalingProfileCalledInNum=sonusIsupsgSignalingProfileCalledInNum, sonusIsupCircuitBlockedNotification=sonusIsupCircuitBlockedNotification, sonusIsupsgCircuitStatRemoteHw=sonusIsupsgCircuitStatRemoteHw, sonusIsupsgFarEndCircuitGroupCarrier=sonusIsupsgFarEndCircuitGroupCarrier, sonusIsupsgSignalingProfileLoopPrevention=sonusIsupsgSignalingProfileLoopPrevention, sonusIsupsgSignalingProfileBBIam=sonusIsupsgSignalingProfileBBIam, sonusIsupFarendCircuitStateMismatchedNotification=sonusIsupFarendCircuitStateMismatchedNotification, sonusIsupsgSvcGrpProfileHopCounterState=sonusIsupsgSvcGrpProfileHopCounterState, sonusIsupsgSignalingProfileBusinessGrp=sonusIsupsgSignalingProfileBusinessGrp, sonusIsupsgSvcGrpProfileGrsStartup=sonusIsupsgSvcGrpProfileGrsStartup, sonusIsupsgSignalingProfileAccessDel=sonusIsupsgSignalingProfileAccessDel, sonusIsupsgSignalingProfilePropDelayValue=sonusIsupsgSignalingProfilePropDelayValue, sonusIsupsgServiceGroupAccL1DRCancelpercentage=sonusIsupsgServiceGroupAccL1DRCancelpercentage, sonusIsupsgSignalingProfileGenDigs=sonusIsupsgSignalingProfileGenDigs, sonusIsupsgFarEndCircuitAlarmCarrier=sonusIsupsgFarEndCircuitAlarmCarrier, sonusIsupsgSignalingProfileCircAssMap=sonusIsupsgSignalingProfileCircAssMap, sonusIsupsgSignalingProfileGenAddressREL=sonusIsupsgSignalingProfileGenAddressREL, sonusIsupsgSvcGrpProfileCicControl=sonusIsupsgSvcGrpProfileCicControl, sonusIsupsgServiceGroupHopCounterValue=sonusIsupsgServiceGroupHopCounterValue, sonusIsupsgSignalingProfileLocNum=sonusIsupsgSignalingProfileLocNum, sonusIsupsgSvcGrpProfileListIndex=sonusIsupsgSvcGrpProfileListIndex, sonusIsupsgSvcGrpProfileOlipCheck=sonusIsupsgSvcGrpProfileOlipCheck, sonusIsupsgSignalingProfileSigPointCode=sonusIsupsgSignalingProfileSigPointCode, sonusIsupsgSignalingProfileOperatorServInfo=sonusIsupsgSignalingProfileOperatorServInfo, sonusIsupsgSignalingProfileCallHist=sonusIsupsgSignalingProfileCallHist, sonusIsupsgSignalingProfileSCFId=sonusIsupsgSignalingProfileSCFId, sonusIsupsgSignalingProfileEchoControl=sonusIsupsgSignalingProfileEchoControl, sonusIsupsgSignalingProfileAccessTrans=sonusIsupsgSignalingProfileAccessTrans, sonusIsupsgSignalingProfileUIDCapInd=sonusIsupsgSignalingProfileUIDCapInd, sonusIsupsgSignalingProfileCctGrpBlockFlag=sonusIsupsgSignalingProfileCctGrpBlockFlag, sonusIsupsgFarEndCircuitIdentificationOfficeA=sonusIsupsgFarEndCircuitIdentificationOfficeA, sonusIsupsgSignalingProfileNextIndex=sonusIsupsgSignalingProfileNextIndex, sonusIsupsgSignalingProfileGenNum=sonusIsupsgSignalingProfileGenNum, sonusIsupsgCircuitTimeout=sonusIsupsgCircuitTimeout, sonusIsupsgSvcGrpProfileSignalingProfileName=sonusIsupsgSvcGrpProfileSignalingProfileName, sonusIsupsgSvcGrpProfileRowStatus=sonusIsupsgSvcGrpProfileRowStatus, sonusIsupsgSignalingProfileForwardGVNS=sonusIsupsgSignalingProfileForwardGVNS, sonusIsupsgCircuitIdentityCode=sonusIsupsgCircuitIdentityCode, sonusIsupsgSignalingProfileBaseProfileName=sonusIsupsgSignalingProfileBaseProfileName, sonusIsupsgSignalingProfileCarrierSelection=sonusIsupsgSignalingProfileCarrierSelection, sonusIsupsgSignalingProfileUIDActionInd=sonusIsupsgSignalingProfileUIDActionInd, sonusIsupsgSignalingProfileChgNum=sonusIsupsgSignalingProfileChgNum, sonusIsupCicRegistrationFailedNotification=sonusIsupCicRegistrationFailedNotification, sonusIsupsgFarEndCircuitAdminTable=sonusIsupsgFarEndCircuitAdminTable, sonusIsupsgSvcGrpProfileCost=sonusIsupsgSvcGrpProfileCost, sonusIsupCalledPartyNumber=sonusIsupCalledPartyNumber, sonusIsupsgServiceGroupExchangeType=sonusIsupsgServiceGroupExchangeType, sonusIsupsgServiceGroupTG=sonusIsupsgServiceGroupTG, sonusIsupsgServiceGroupStatNextInspectionTime=sonusIsupsgServiceGroupStatNextInspectionTime, sonusIsupsgServiceGroupStatName=sonusIsupsgServiceGroupStatName, sonusIsupsgSvcGrpProfileAccL3ARCancelpercentage=sonusIsupsgSvcGrpProfileAccL3ARCancelpercentage, sonusIsupsgSignalingProfileRedNumInAcm=sonusIsupsgSignalingProfileRedNumInAcm, sonusIsupsgSignalingProfilePropDelay=sonusIsupsgSignalingProfilePropDelay, sonusIsupsgCircuitServiceName=sonusIsupsgCircuitServiceName, sonusIsupsgSignalingProfileEchoCntrlInIam=sonusIsupsgSignalingProfileEchoCntrlInIam, sonusIsupCircuitTimerExpired=sonusIsupCircuitTimerExpired, sonusIsupsgSvcGrpProfileEntry=sonusIsupsgSvcGrpProfileEntry, sonusIsupsgSignalingProfileRedNum=sonusIsupsgSignalingProfileRedNum, sonusIsupsgCircuitAdminState=sonusIsupsgCircuitAdminState, sonusIsupsgServiceGroupEntry=sonusIsupsgServiceGroupEntry, sonusIsupsgSignalingProfileOlm=sonusIsupsgSignalingProfileOlm, sonusIsupsgSignalingProfileTmrPrime=sonusIsupsgSignalingProfileTmrPrime, sonusIsupMaintReason=sonusIsupMaintReason, sonusIsupsgServiceGroup=sonusIsupsgServiceGroup, sonusIsupsgSignalingProfileConNumInAcm=sonusIsupsgSignalingProfileConNumInAcm, sonusIsupsgSignalingProfileNetworkMgmt=sonusIsupsgSignalingProfileNetworkMgmt, sonusIsupsgServiceGroupAccL3DRCancelpercentage=sonusIsupsgServiceGroupAccL3DRCancelpercentage, sonusIsupsgFarEndCircuitLocationIdentification=sonusIsupsgFarEndCircuitLocationIdentification, sonusIsupsgSvcGrpProfileHuntAlgorithm=sonusIsupsgSvcGrpProfileHuntAlgorithm, sonusIsupsgSvcGrpProfileInspectionTime=sonusIsupsgSvcGrpProfileInspectionTime, sonusIsupsgSignalingProfileCorrelationId=sonusIsupsgSignalingProfileCorrelationId, sonusIsupsgSignalingProfileTable=sonusIsupsgSignalingProfileTable, sonusIsupsgSignalingProfileRemoteOp=sonusIsupsgSignalingProfileRemoteOp, sonusIsupsgSignalingProfileCollectCallReq=sonusIsupsgSignalingProfileCollectCallReq, sonusIsupsgSignalingProfileCallTransRef=sonusIsupsgSignalingProfileCallTransRef, sonusIsupsgCircuitStatManualCot=sonusIsupsgCircuitStatManualCot, sonusIsupsgServiceGroupInspectionState=sonusIsupsgServiceGroupInspectionState, sonusIsupsgSvcGrpProfileAccSendACL=sonusIsupsgSvcGrpProfileAccSendACL, sonusIsupsgSignalingProfileCallDivTreat=sonusIsupsgSignalingProfileCallDivTreat, sonusIsupsgSignalingProfileSendTwoGrpMsgs=sonusIsupsgSignalingProfileSendTwoGrpMsgs, sonusIsupsgServiceGroupRemPc=sonusIsupsgServiceGroupRemPc, sonusIsupsgSignalingProfileNrmSupport=sonusIsupsgSignalingProfileNrmSupport, sonusIsupsgSignalingProfileBackwardGVNS=sonusIsupsgSignalingProfileBackwardGVNS, sonusIsupsgSignalingProfileDispInfo=sonusIsupsgSignalingProfileDispInfo, sonusIsupCircuitResetNotification=sonusIsupCircuitResetNotification, sonusIsupServiceGroupMIBObjects=sonusIsupServiceGroupMIBObjects, sonusIsupsgSignalingProfileCqmCqr=sonusIsupsgSignalingProfileCqmCqr, sonusIsupsgSvcGrpProfileAdminState=sonusIsupsgSvcGrpProfileAdminState, sonusIsupsgSvcGrpProfileAccRespProcess=sonusIsupsgSvcGrpProfileAccRespProcess, sonusIsupsgSignalingProfileTransitUnrec=sonusIsupsgSignalingProfileTransitUnrec, sonusIsupCircuitUnblockedNotification=sonusIsupCircuitUnblockedNotification, sonusIsupsgSvcGrpProfileAccL3DRCancelpercentage=sonusIsupsgSvcGrpProfileAccL3DRCancelpercentage, sonusIsupsgCircuitAction=sonusIsupsgCircuitAction, sonusIsupsgSignalingProfileBBRel=sonusIsupsgSignalingProfileBBRel, sonusIsupsgSvcGrpProfileTable=sonusIsupsgSvcGrpProfileTable, sonusIsupsgServiceGroupMode=sonusIsupsgServiceGroupMode, sonusIsupsgSvcGrpProfileTonePackageName=sonusIsupsgSvcGrpProfileTonePackageName, sonusIsupsgFarEndCircuitIdentityCode=sonusIsupsgFarEndCircuitIdentityCode, sonusIsupsgSvcGrpProfileContTestFreq=sonusIsupsgSvcGrpProfileContTestFreq, sonusIsupsgSignalingProfileTransMedUsed=sonusIsupsgSignalingProfileTransMedUsed, sonusIsupsgSignalingProfileConReqInFaa=sonusIsupsgSignalingProfileConReqInFaa, sonusIsupsgSignalingProfileTNS=sonusIsupsgSignalingProfileTNS, sonusIsupsgServiceGroupSignalingProfileName=sonusIsupsgServiceGroupSignalingProfileName, sonusIsupsgServiceGroupTable=sonusIsupsgServiceGroupTable, sonusIsupHopCounterExhaustedNotification=sonusIsupHopCounterExhaustedNotification, sonusIsupsgServiceGroupAccRespProcess=sonusIsupsgServiceGroupAccRespProcess, sonusIsupsgFarEndCircuitIdentificationTrunkNumber=sonusIsupsgFarEndCircuitIdentificationTrunkNumber, sonusIsupsgSignalingProfileUserTeleService=sonusIsupsgSignalingProfileUserTeleService, sonusIsupsgCircuitRowStatus=sonusIsupsgCircuitRowStatus, sonusIsupsgSvcGrpProfileTG=sonusIsupsgSvcGrpProfileTG, sonusIsupsgFarEndCircuitStatEntry=sonusIsupsgFarEndCircuitStatEntry, sonusIsupsgFarEndCircuitStatStatus=sonusIsupsgFarEndCircuitStatStatus, sonusIsupsgSignalingProfileHopCounter=sonusIsupsgSignalingProfileHopCounter, sonusIsupsgSignalingProfileCauseInCpg=sonusIsupsgSignalingProfileCauseInCpg, sonusIsupsgCircuitServiceListIndex=sonusIsupsgCircuitServiceListIndex, sonusIsupsgSignalingProfileGenName=sonusIsupsgSignalingProfileGenName, sonusIsupsgSignalingProfileSAM=sonusIsupsgSignalingProfileSAM, sonusIsupsgSignalingProfileOrigIscPC=sonusIsupsgSignalingProfileOrigIscPC, sonusIsupsgFarEndCircuitAdminEntry=sonusIsupsgFarEndCircuitAdminEntry, sonusIsupsgSignalingProfileConReq=sonusIsupsgSignalingProfileConReq, sonusIsupCircuit=sonusIsupCircuit, sonusIsupsgServiceGroupTimeout=sonusIsupsgServiceGroupTimeout, sonusIsupsgSignalingProfileServCodeInd=sonusIsupsgSignalingProfileServCodeInd, sonusIsupsgSignalingProfileCallDiv=sonusIsupsgSignalingProfileCallDiv, sonusIsupsgServiceGroupInspectionFreq=sonusIsupsgServiceGroupInspectionFreq, sonusIsupSvcGrpInServiceNotification=sonusIsupSvcGrpInServiceNotification, sonusIsupCvtTimeoutNotification=sonusIsupCvtTimeoutNotification, sonusIsupsgSignalingProfileEMcid=sonusIsupsgSignalingProfileEMcid, sonusIsupSvcGrpOutOfServiceNotification=sonusIsupSvcGrpOutOfServiceNotification, sonusIsupsgCircuitMode=sonusIsupsgCircuitMode, sonusIsupsgSignalingProfileCallModMsgs=sonusIsupsgSignalingProfileCallModMsgs, sonusIsupsgSignalingProfileRowStatus=sonusIsupsgSignalingProfileRowStatus, sonusIsupsgSignalingProfileConfTreat=sonusIsupsgSignalingProfileConfTreat, sonusIsupsgSignalingProfileU2USrvcLevel=sonusIsupsgSignalingProfileU2USrvcLevel, sonusIsupsgServiceGroupRowStatus=sonusIsupsgServiceGroupRowStatus, sonusIsupsgSvcGrpProfileExchangeType=sonusIsupsgSvcGrpProfileExchangeType, sonusIsupsgServiceGroupInspectionTime=sonusIsupsgServiceGroupInspectionTime, sonusIsupsgCircuitStatLocalHw=sonusIsupsgCircuitStatLocalHw, sonusIsupsgSignalingProfile=sonusIsupsgSignalingProfile, sonusIsupsgFarEndCircuitServiceListIndex=sonusIsupsgFarEndCircuitServiceListIndex, sonusIsupsgSignalingProfileMLPP=sonusIsupsgSignalingProfileMLPP, sonusIsupsgSignalingProfileFacility=sonusIsupsgSignalingProfileFacility, sonusIsupsgSignalingProfileFOT=sonusIsupsgSignalingProfileFOT, sonusIsupsgSignalingProfileRedCount=sonusIsupsgSignalingProfileRedCount, sonusIsupsgCircuitChannel=sonusIsupsgCircuitChannel, sonusIsupServiceGroupMIBNotificationsPrefix=sonusIsupServiceGroupMIBNotificationsPrefix, sonusIsupsgSignalingProfileServActv=sonusIsupsgSignalingProfileServActv, sonusIsupContinuityRecheckFailureNotification=sonusIsupContinuityRecheckFailureNotification, sonusIsupsgSignalingProfileCseInRlc=sonusIsupsgSignalingProfileCseInRlc, sonusIsupsgSignalingProfileInrInf=sonusIsupsgSignalingProfileInrInf)
mibBuilder.exportSymbols("SONUS-ISUP-SERVICE-GROUP-MIB", sonusIsupsgFarEndCircuitContinuityRequirement=sonusIsupsgFarEndCircuitContinuityRequirement, sonusIsupsgSignalingProfileAdminState=sonusIsupsgSignalingProfileAdminState, sonusIsupsgSvcGrpProfileNextIndex=sonusIsupsgSvcGrpProfileNextIndex, PYSNMP_MODULE_ID=sonusIsupServiceGroupMIB, sonusIsupsgSignalingProfileAnsi95Grs=sonusIsupsgSignalingProfileAnsi95Grs, sonusIsupsgServiceGroupRevision=sonusIsupsgServiceGroupRevision, sonusIsupsgSignalingProfileSubPriorityCls=sonusIsupsgSignalingProfileSubPriorityCls, sonusIsupsgServiceGroupProfileName=sonusIsupsgServiceGroupProfileName, sonusIsupsgServiceGroupAccL3ARCancelpercentage=sonusIsupsgServiceGroupAccL3ARCancelpercentage, sonusIsupsgSvcGrpProfileHopCounterValue=sonusIsupsgSvcGrpProfileHopCounterValue, sonusIsupsgSignalingProfileRedNumRist=sonusIsupsgSignalingProfileRedNumRist, sonusIsupTrunkGrpName=sonusIsupTrunkGrpName, sonusIsupCallingPartyNumber=sonusIsupCallingPartyNumber, sonusIsupsgFarEndCircuitCicControlConflict=sonusIsupsgFarEndCircuitCicControlConflict, sonusIsupsgSvcGrpProfileSwitchType=sonusIsupsgSvcGrpProfileSwitchType, sonusIsupsgSignalingProfileUuindAnm=sonusIsupsgSignalingProfileUuindAnm, sonusIsupsgSignalingProfileUUInfo=sonusIsupsgSignalingProfileUUInfo, sonusIsupsgSignalingProfileObciAnm=sonusIsupsgSignalingProfileObciAnm, sonusIsupsgServiceGroupStatListIndex=sonusIsupsgServiceGroupStatListIndex, sonusIsupsgServiceGroupNextIndex=sonusIsupsgServiceGroupNextIndex, sonusIsupsgServiceGroupStatTable=sonusIsupsgServiceGroupStatTable, sonusIsupsgCircuitProfileName=sonusIsupsgCircuitProfileName, sonusIsupsgServiceGroupTonePackageName=sonusIsupsgServiceGroupTonePackageName, sonusIsupsgSignalingProfileFallback=sonusIsupsgSignalingProfileFallback, sonusIsupsgSignalingProfileSpecialDigits=sonusIsupsgSignalingProfileSpecialDigits, sonusIsupsgSignalingProfileCpgBeforeAcm=sonusIsupsgSignalingProfileCpgBeforeAcm, sonusIsupsgSvcGrpProfileName=sonusIsupsgSvcGrpProfileName, sonusIsupsgSvcGrpProfileInspectionFreq=sonusIsupsgSvcGrpProfileInspectionFreq, sonusIsupServiceGroupMIB=sonusIsupServiceGroupMIB, sonusIsupsgServiceGroupAction=sonusIsupsgServiceGroupAction, sonusIsupsgSignalingProfileNtp=sonusIsupsgSignalingProfileNtp)
