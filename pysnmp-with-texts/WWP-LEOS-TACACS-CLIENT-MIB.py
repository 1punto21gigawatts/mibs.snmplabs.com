#
# PySNMP MIB module WWP-LEOS-TACACS-CLIENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-LEOS-TACACS-CLIENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:38:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Unsigned32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, iso, MibIdentifier, Gauge32, IpAddress, Counter32, Counter64, Integer32, ObjectIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Unsigned32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "iso", "MibIdentifier", "Gauge32", "IpAddress", "Counter32", "Counter64", "Integer32", "ObjectIdentity", "Bits")
TextualConvention, DisplayString, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue", "RowStatus")
wwpModulesLeos, = mibBuilder.importSymbols("WWP-SMI", "wwpModulesLeos")
wwpLeosTacacsClientMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402))
wwpLeosTacacsClientMIB.setRevisions(('2012-04-05 00:00', '2011-08-04 00:00', '2001-04-03 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wwpLeosTacacsClientMIB.setRevisionsDescriptions(('Added wwpLeosTacacsClientServerResolvedInetAddrType, wwpLeosTacacsClientServerResolvedInetAddr, wwpLeosTacacsClientAuthenticationServerResolvedInetAddrType, wwpLeosTacacsClientAuthenticationServerResolvedInetAddr, wwpLeosTacacsClientAuthorizationServerResolvedInetAddrType, wwpLeosTacacsClientAuthorizationServerResolvedInetAddr, wwpLeosTacacsClientAccountingServerResolvedInetAddrType and wwpLeosTacacsClientAccountingServerResolvedInetAddr for inet addressing.', 'Deprecated wwpLeosTacacsClientGlobalServers.', 'Initial creation.',))
if mibBuilder.loadTexts: wwpLeosTacacsClientMIB.setLastUpdated('201204050000Z')
if mibBuilder.loadTexts: wwpLeosTacacsClientMIB.setOrganization('Ciena, Inc')
if mibBuilder.loadTexts: wwpLeosTacacsClientMIB.setContactInfo(' Mib Meister 115 North Sullivan Road Spokane Valley, WA 99037 USA Phone: +1 509 242 9000 Email: support@ciena.com')
if mibBuilder.loadTexts: wwpLeosTacacsClientMIB.setDescription('The MIB module for the WWP Tacacs Server specific configuration and monitoring information.')
class TacacsString(TextualConvention, OctetString):
    description = 'Uset to repesent the tacacs authentication string'
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 127)

wwpLeosTacacsClientMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1))
wwpLeosTacacsClient = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1))
wwpLeosTacacsClientMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 2))
wwpLeosTacacsClientMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 2, 0))
wwpLeosTacacsClientMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 3))
wwpLeosTacacsClientMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 3, 1))
wwpLeosTacacsClientMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 3, 2))
wwpLeosTacacsAdminState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTacacsAdminState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsAdminState.setDescription('Setting this object will administratively enable/disable tacacs client on the device.')
wwpLeosTacacsOperState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsOperState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsOperState.setDescription('This object returns the operational state of tacacs client.')
wwpLeosTacacsClientTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTacacsClientTimeout.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientTimeout.setDescription('This is the time in seconds between retransmissions to the TACACS server.')
wwpLeosTacacsClientRetries = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTacacsClientRetries.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosTacacsClientRetries.setDescription('Indicates the number of times the TACACS server should be tried before giving up on the server.')
wwpLeosTacacsClientPrivilegeLevelRW = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 14)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTacacsClientPrivilegeLevelRW.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientPrivilegeLevelRW.setDescription('Indicates the privilege level used for mapping a range of TACACS privilege levels to LE-OS R-W user privilege level. A privilege level returned by a server will be compared to wwpLeosTacacsClientPrivilegeLevelDiag. If the server privilege level is less than wwpLeosTacacsClientPrivilegeLevelDiag and greater than or equal to the wwpLeosTacacsClientPrivilegeLevelRW, the LE-OS privilege level is super-user.')
wwpLeosTacacsClientPrivilegeLevelAdmin = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 13)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTacacsClientPrivilegeLevelAdmin.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientPrivilegeLevelAdmin.setDescription('Indicates the privilege level used for mapping a range of TACACS privilege levels to LE-OS TCE Admin user privilege level. A privilege level returned by a server will be compared to wwpLeosTacacsClientPrivilegeLevelRW. If the server privilege level is less than wwpLeosTacacsClientPrivilegeLevelRW and greater than or equal to the wwpLeosTacacsClientPrivilegeLevelAdmin, the LE-OS privilege level is Admin. Not supported on all platforms')
wwpLeosTacacsClientPrivilegeLevelDiag = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 15)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTacacsClientPrivilegeLevelDiag.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientPrivilegeLevelDiag.setDescription('Indicates the privilege level used for mapping a range of TACACS privilege levels to LE-OS Diagnostic user privilege level. A privilege level returned by a server will be compared to this value. If server privilege level is greater than or equal to the wwpLeosTacacsClientPrivilegeLevelDiag, the LE-OS privilege level is diag.')
wwpLeosTacacsClientAuthKey = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 8), TacacsString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthKey.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthKey.setDescription('The Auth Key to be used for Tacacs Servers. Retrieving the value of this object via SNMP will return an empty string for security reasons.')
wwpLeosTacacsAuthenticationAdminState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTacacsAuthenticationAdminState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsAuthenticationAdminState.setDescription('Setting this object will administratively enable/disable tacacs authentication on the device.')
wwpLeosTacacsAuthorizationAdminState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTacacsAuthorizationAdminState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsAuthorizationAdminState.setDescription('Setting this object will administratively enable/disable tacacs authorization on the device.')
wwpLeosTacacsAccountingAdminState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTacacsAccountingAdminState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsAccountingAdminState.setDescription('Setting this object will administratively enable/disable tacacs accounting on the device.')
wwpLeosTacacsSyslogAdminState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTacacsSyslogAdminState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsSyslogAdminState.setDescription('Setting this object will administratively enable/disable tacacs syslog messages on the device.')
wwpLeosTacacsClientServerTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 13), )
if mibBuilder.loadTexts: wwpLeosTacacsClientServerTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientServerTable.setDescription('Lists the possible TACACS servers. While creating entry following mib objects must be specified wwpLeosTacacsClientServerStatus, wwpLeosTacacsClientServerAddr. SNMP multiple set operation must be used to create entry.')
wwpLeosTacacsClientServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 13, 1), ).setIndexNames((0, "WWP-LEOS-TACACS-CLIENT-MIB", "wwpLeosTacacsClientServerIndex"))
if mibBuilder.loadTexts: wwpLeosTacacsClientServerEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientServerEntry.setDescription('Tacacs server entry.')
wwpLeosTacacsClientServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: wwpLeosTacacsClientServerIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientServerIndex.setDescription('Specifies the index of this table.')
wwpLeosTacacsClientServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 13, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTacacsClientServerAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientServerAddr.setDescription('Host name or ip address of the TACACS server.')
wwpLeosTacacsClientServerResolvedAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 13, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientServerResolvedAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientServerResolvedAddr.setDescription('When wwpLeosTacacsClientServerAddr represents: Host name : The resolved address will either be Ipv4 address or Ipv6 address. Ipv4 address : The resolved address will be the same Ipv4 address. Ipv6 address : The resolved address will be the same Ipv6 address. When the resolved address represents: Ipv4 address : wwpLeosTacacsClientServerResolvedAddr will represent the resolved Ipv4 address. wwpLeosTacacsClientServerResolvedInetAddr used in conjunction with wwpLeosTacacsClientServerResolvedInetAddrType will represent the same Ipv4 address. Ipv6 address : wwpLeosTacacsClientServerResolvedAddr will represent 0.0.0.0. wwpLeosTacacsClientServerResolvedInetAddr used in conjunction with wwpLeosTacacsClientServerResolvedInetAddrType will represent the Ipv6 address.')
wwpLeosTacacsClientServerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 13, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTacacsClientServerPriority.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientServerPriority.setDescription('Specifies the priority of tacacs servers configured on the device. This is the order in which the servers will accessed')
wwpLeosTacacsClientServerAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 13, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(49)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTacacsClientServerAuthPort.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientServerAuthPort.setDescription('The destination TCP port number to which TACACS messages should be sent. The TACACS server will not be used for authentication if this port number is 0.')
wwpLeosTacacsClientServerAccessRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientServerAccessRequests.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientServerAccessRequests.setDescription('The number of TACACS Access-Request packets sent to this server from the global TACACS client. This does not include retransmissions.')
wwpLeosTacacsClientServerAccessRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientServerAccessRetransmissions.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientServerAccessRetransmissions.setDescription('The number of TACACS Access-Retransmission packets retransmitted to this TACACS authentication server from the global TACACS client.')
wwpLeosTacacsClientServerAccessAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 13, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientServerAccessAccepts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientServerAccessAccepts.setDescription('The number of TACACS Access-Accept packets (valid or invalid) received from this server by the global TACACS client.')
wwpLeosTacacsClientServerAccessRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 13, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientServerAccessRejects.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientServerAccessRejects.setDescription('The number of TACACS Access-Reject packets (valid or invalid) received from this server by the global TACACS client.')
wwpLeosTacacsClientServerMalformedAccessResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 13, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientServerMalformedAccessResponses.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientServerMalformedAccessResponses.setDescription('The number of malformed TACACS Access-Response packets received from this server by the global TACACS client. Malformed packets include packets with an invalid length. Bad authenticators or Signature attributes or unknown types are not included as malformed access responses.')
wwpLeosTacacsClientServerBadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 13, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientServerBadAuthenticators.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientServerBadAuthenticators.setDescription('The number of TACACS Access-BadAuthenticator packets containing invalid authenticators or Signature attributes received from this server by the global TACACS client.')
wwpLeosTacacsClientServerPendingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 13, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientServerPendingRequests.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosTacacsClientServerPendingRequests.setDescription('The number of TACACS Access-PendingRequest packets destined for this server from the global TACACS client that have not yet timed out or received a response. This variable is incremented when an Access-Request is sent and decremented due to receipt of an Access-Accept, Access-Reject or Access-Challenge, a timeout or retransmission.')
wwpLeosTacacsClientServerTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 13, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientServerTimeouts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientServerTimeouts.setDescription('The number of authentication timeouts to this server on behalf of the global TACACS client. After a timeout the client may retry to the same server, send to a different server, or give up. A retry to the same server is counted as a retransmit as well as a timeout. A send to a different server is counted as a Request as well as a timeout.')
wwpLeosTacacsClientServerUnknownTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 13, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientServerUnknownTypes.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientServerUnknownTypes.setDescription('The number of TACACS packets of unknown type which were received from this server on the authentication port by the global TACACS client.')
wwpLeosTacacsClientServerBadHeaderSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 13, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientServerBadHeaderSequence.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientServerBadHeaderSequence.setDescription('The number of TACACS packets of which were received from this server on the authentication port by the global TACACS client and dropped for some other reason by the client.')
wwpLeosTacacsClientServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 13, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTacacsClientServerStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientServerStatus.setDescription("To create a row in this table, a manager must set this object to either createAndGo(4). While creating entry following mib objects must be specified wwpLeosTacacsClientServerStatus, wwpLeosTacacsClientServerAddr. SNMP multiple set operation must be used to create entry. To disable a tacacs server, the operator can set wwpLeosTacacsClientServerStatus object to 'notInService' state.")
wwpLeosTacacsClientServerApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 13, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("userLogin", 1), ("dot1x", 2), ("all", 3))).clone('userLogin')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTacacsClientServerApplication.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientServerApplication.setDescription('This object specifies how the tacacs server should be used for authentication. Whether this tacacs server should be used for userLogin authentication or dot1x authentication or both is decided by the value of this mib object. Dot1x not supported on all platforms')
wwpLeosTacacsClientServerClearStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 13, 1, 18), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTacacsClientServerClearStatistics.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientServerClearStatistics.setDescription('This object clears the statistics for a server')
wwpLeosTacacsClientGlobalAuthorizationAccessRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 13, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientGlobalAuthorizationAccessRequests.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientGlobalAuthorizationAccessRequests.setDescription('The number of TACACS Access-Request packets sent to this server. This does not include retransmissions.')
wwpLeosTacacsClientGlobalAuthorizationAccessRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 13, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientGlobalAuthorizationAccessRetransmissions.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientGlobalAuthorizationAccessRetransmissions.setDescription('The number of TACACS Access-Request packets retransmitted to this TACACS authentication server.')
wwpLeosTacacsClientGlobalAuthorizationAccessAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 13, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientGlobalAuthorizationAccessAccepts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientGlobalAuthorizationAccessAccepts.setDescription('The number of TACACS Access-Accept packets (valid or invalid) received from this server.')
wwpLeosTacacsClientGlobalAuthorizationAccessRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 13, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientGlobalAuthorizationAccessRejects.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientGlobalAuthorizationAccessRejects.setDescription('The number of TACACS Access-Reject packets (valid or invalid) received from this server.')
wwpLeosTacacsClientGlobalAuthorizationMalformedAccessResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 13, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientGlobalAuthorizationMalformedAccessResponses.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientGlobalAuthorizationMalformedAccessResponses.setDescription('The number of malformed TACACS Access-Response packets received from this server. Malformed packets include packets with an invalid length. Bad authenticators or signature attributes or unknown types are not included as malformed access responses.')
wwpLeosTacacsClientGlobalAuthorizationBadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 13, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientGlobalAuthorizationBadAuthenticators.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientGlobalAuthorizationBadAuthenticators.setDescription('The number of TACACS Access-Response packets containing invalid authenticators or signature attributes received from this server.')
wwpLeosTacacsClientGlobalAuthorizationTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 13, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientGlobalAuthorizationTimeouts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientGlobalAuthorizationTimeouts.setDescription('The number of authentication timeouts to this server. After a timeout the client may retry sending to the same server, send to a different server, or give up. A retry to the same server is counted as a retransmit as well as a timeout. A send to a different server is counted as a request as well as a timeout.')
wwpLeosTacacsClientGlobalAuthorizationUnknownTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 13, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientGlobalAuthorizationUnknownTypes.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientGlobalAuthorizationUnknownTypes.setDescription('The number of TACACS packets of unknown type which were received from this server on the authentication port.')
wwpLeosTacacsClientGlobalAuthorizationBadHeaderSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 13, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientGlobalAuthorizationBadHeaderSequence.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientGlobalAuthorizationBadHeaderSequence.setDescription('The number of TACACS packets which were received from this server on the authentication port and dropped for some other reason.')
wwpLeosTacacsClientGlobalAccountingAccessRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 13, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientGlobalAccountingAccessRequests.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientGlobalAccountingAccessRequests.setDescription('The number of TACACS Access-Request packets sent to this server. This does not include retransmissions.')
wwpLeosTacacsClientGlobalAccountingAccessRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 13, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientGlobalAccountingAccessRetransmissions.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientGlobalAccountingAccessRetransmissions.setDescription('The number of TACACS Access-Request packets retransmitted to this TACACS authentication server.')
wwpLeosTacacsClientGlobalAccountingAccessAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 13, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientGlobalAccountingAccessAccepts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientGlobalAccountingAccessAccepts.setDescription('The number of TACACS Access-Accept packets (valid or invalid) received from this server.')
wwpLeosTacacsClientGlobalAccountingAccessRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 13, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientGlobalAccountingAccessRejects.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientGlobalAccountingAccessRejects.setDescription('The number of TACACS Access-Reject packets (valid or invalid) received from this server.')
wwpLeosTacacsClientGlobalAccountingMalformedAccessResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 13, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientGlobalAccountingMalformedAccessResponses.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientGlobalAccountingMalformedAccessResponses.setDescription('The number of malformed TACACS Access-Response packets received from this server. Malformed packets include packets with an invalid length. Bad authenticators or signature attributes or unknown types are not included as malformed access responses.')
wwpLeosTacacsClientGlobalAccountingBadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 13, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientGlobalAccountingBadAuthenticators.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientGlobalAccountingBadAuthenticators.setDescription('The number of TACACS Access-Response packets containing invalid authenticators or signature attributes received from this server.')
wwpLeosTacacsClientGlobalAccountingTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 13, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientGlobalAccountingTimeouts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientGlobalAccountingTimeouts.setDescription('The number of authentication timeouts to this server. After a timeout the client may retry sending to the same server, send to a different server, or give up. A retry to the same server is counted as a retransmit as well as a timeout. A send to a different server is counted as a request as well as a timeout.')
wwpLeosTacacsClientGlobalAccountingUnknownTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 13, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientGlobalAccountingUnknownTypes.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientGlobalAccountingUnknownTypes.setDescription('The number of TACACS packets of unknown type which were received from this server on the authentication port.')
wwpLeosTacacsClientGlobalAccountingBadHeaderSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 13, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientGlobalAccountingBadHeaderSequence.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientGlobalAccountingBadHeaderSequence.setDescription('The number of TACACS packets which were received from this server on the authentication port and dropped for some other reason.')
wwpLeosTacacsClientServerResolvedInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 13, 1, 37), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientServerResolvedInetAddrType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientServerResolvedInetAddrType.setDescription('Specifies the resolved IP address type . Used in conjunction with wwpLeosTacacsClientServerResolvedInetAddr. When set to : ipv4 : wwpLeosTacacsClientServerResolvedInetAddr should be compliant with InetAddressIPv4 ipv6 : wwpLeosTacacsClientServerResolvedInetAddr should be compliant with InetAddressIPv6 ')
wwpLeosTacacsClientServerResolvedInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 13, 1, 38), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientServerResolvedInetAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientServerResolvedInetAddr.setDescription('Specifies the resolved IP address if wwpLeosTacacsClientServerAddr is set to host name. If wwpLeosTacacsClientServerAddr is set to ip address then wwpLeosTacacsClientServerResolvedInetAddress will contain same information as wwpLeosTacacsClientServerAddr. This OID should be used in conjuction with wwpLeosTacacsClientServerResolvedInetAddrType.')
wwpLeosTacacsClientAuthenticationServerTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 14), )
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthenticationServerTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthenticationServerTable.setDescription('Lists the possible TACACS servers. While creating entry following mib objects must be specified wwpLeosTacacsClientAuthenticationServerStatus, wwpLeosTacacsClientAuthenticationServerAddr. SNMP multiple set operation must be used to create entry.')
wwpLeosTacacsClientAuthenticationServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 14, 1), ).setIndexNames((0, "WWP-LEOS-TACACS-CLIENT-MIB", "wwpLeosTacacsClientAuthenticationServerIndex"))
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthenticationServerEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthenticationServerEntry.setDescription('Tacacs server entry.')
wwpLeosTacacsClientAuthenticationServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthenticationServerIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthenticationServerIndex.setDescription('Specifies the index of this table.')
wwpLeosTacacsClientAuthenticationServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 14, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthenticationServerAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthenticationServerAddr.setDescription('Host name or ip address of the TACACS server.')
wwpLeosTacacsClientAuthenticationServerResolvedAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 14, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthenticationServerResolvedAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthenticationServerResolvedAddr.setDescription('When wwpLeosTacacsClientAuthenticationServerAddr represents: Host name : The resolved address will either be Ipv4 address or Ipv6 address. Ipv4 address : The resolved address will be the same Ipv4 address. Ipv6 address : The resolved address will be the same Ipv6 address. When the resolved address represents: Ipv4 address : wwpLeosTacacsClientAuthenticationServerResolvedAddr will represent the resolved Ipv4 address. wwpLeosTacacsClientAuthenticationServerResolvedInetAddr used in conjunction with wwpLeosTacacsClientAuthenticationServerResolvedInetAddrType will represent the same Ipv4 address. Ipv6 address : wwpLeosTacacsClientAuthenticationServerResolvedAddr will represent 0.0.0.0. wwpLeosTacacsClientAuthenticationServerResolvedInetAddr used in conjunction with wwpLeosTacacsClientAuthenticationServerResolvedInetAddrType will represent the Ipv6 address.')
wwpLeosTacacsClientAuthenticationServerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 14, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthenticationServerPriority.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthenticationServerPriority.setDescription('Specifies the priority of tacacs servers configured on the device. This is the order in which the servers will accessed')
wwpLeosTacacsClientAuthenticationServerAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 14, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(49)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthenticationServerAuthPort.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthenticationServerAuthPort.setDescription('The destination TCP port number to which TACACS messages should be sent. The TACACS server will not be used for authentication if this port number is 0.')
wwpLeosTacacsClientAuthenticationServerAccessRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 14, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthenticationServerAccessRequests.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthenticationServerAccessRequests.setDescription('The number of TACACS Access-Request packets sent to this server. This does not include retransmissions.')
wwpLeosTacacsClientAuthenticationServerAccessRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 14, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthenticationServerAccessRetransmissions.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthenticationServerAccessRetransmissions.setDescription('The number of TACACS Access-Request packets retransmitted to this TACACS authentication server.')
wwpLeosTacacsClientAuthenticationServerAccessAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 14, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthenticationServerAccessAccepts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthenticationServerAccessAccepts.setDescription('The number of TACACS Access-Accept packets (valid or invalid) received from this server.')
wwpLeosTacacsClientAuthenticationServerAccessRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 14, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthenticationServerAccessRejects.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthenticationServerAccessRejects.setDescription('The number of TACACS Access-Reject packets (valid or invalid) received from this server.')
wwpLeosTacacsClientAuthenticationServerMalformedAccessResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 14, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthenticationServerMalformedAccessResponses.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthenticationServerMalformedAccessResponses.setDescription('The number of malformed TACACS Access-Response packets received from this server. Malformed packets include packets with an invalid length. Bad authenticators or Signature attributes or unknown types are not included as malformed access responses.')
wwpLeosTacacsClientAuthenticationServerBadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 14, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthenticationServerBadAuthenticators.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthenticationServerBadAuthenticators.setDescription('The number of TACACS Access-Response packets containing invalid authenticators or Signature attributes received from this server.')
wwpLeosTacacsClientAuthenticationServerPendingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 14, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthenticationServerPendingRequests.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthenticationServerPendingRequests.setDescription('The number of TACACS Access-Request packets destined for this server that have not yet timed out or received a response. This variable is incremented when an Access-Request is sent and decremented due to receipt of an Access-Accept, Access-Reject or Access-Challenge, a timeout or retransmission.')
wwpLeosTacacsClientAuthenticationServerTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 14, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthenticationServerTimeouts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthenticationServerTimeouts.setDescription('The number of authentication timeouts to this server. After a timeout the client may retry to the same server, send to a different server, or give up. A retry to the same server is counted as a retransmit as well as a timeout. A send to a different server is counted as a Request as well as a timeout.')
wwpLeosTacacsClientAuthenticationServerUnknownTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 14, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthenticationServerUnknownTypes.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthenticationServerUnknownTypes.setDescription('The number of TACACS packets of unknown type which were received from this server on the authentication port.')
wwpLeosTacacsClientAuthenticationServerBadHeaderSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 14, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthenticationServerBadHeaderSequence.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthenticationServerBadHeaderSequence.setDescription('The number of TACACS packets of which were received from this server on the authentication port and dropped for some other reason.')
wwpLeosTacacsClientAuthenticationServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 14, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthenticationServerStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthenticationServerStatus.setDescription("To create a row in this table, a manager must set this object to either createAndGo(4). While creating entry following mib objects must be specified wwpLeosTacacsClientAuthenticationServerStatus, wwpLeosTacacsClientAuthenticationServerAddr. SNMP multiple set operation must be used to create entry. To disable a tacacs server, the operator can set wwpLeosTacacsClientAuthenticationServerStatus object to 'notInService' state.")
wwpLeosTacacsClientAuthenticationServerApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 14, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("userLogin", 1), ("dot1x", 2), ("all", 3))).clone('userLogin')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthenticationServerApplication.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthenticationServerApplication.setDescription('This object specifies how the tacacs server should be used for authentication. Whether this tacacs server should be used for userLogin authentication or dot1x authentication or both is decided by the value of this mib object. Dot1x not supported on all platforms')
wwpLeosTacacsClientAuthenticationServerClearStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 14, 1, 18), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthenticationServerClearStatistics.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthenticationServerClearStatistics.setDescription('This object clears the statistics for a server')
wwpLeosTacacsClientAuthenticationServerResolvedInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 14, 1, 19), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthenticationServerResolvedInetAddrType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthenticationServerResolvedInetAddrType.setDescription('Specifies the resolved IP address type. Used in conjunction with wwpLeosTacacsClientAuthenticationServerResolvedInetAddr. When set to : ipv4 : wwpLeosTacacsClientAuthenticationServerResolvedInetAddr should be compliant with InetAddressIPv4 ipv6 : wwpLeosTacacsClientAuthenticationServerResolvedInetAddr should be compliant with InetAddressIPv6 ')
wwpLeosTacacsClientAuthenticationServerResolvedInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 14, 1, 20), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthenticationServerResolvedInetAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthenticationServerResolvedInetAddr.setDescription('Specifies the resolved IP address if wwpLeosTacacsClientAuthenticationServerAddr is set to host name. If wwpLeosTacacsClientAuthenticationServerAddr is set to ip address then wwpLeosTacacsClientAuthenticationServerResolvedInetAddr will contain the same information as wwpLeosTacacsClientAuthenticationServerAddr. This OID should be used in conjuction with wwpLeosTacacsClientAuthenticationServerResolvedInetAddrType.')
wwpLeosTacacsClientAuthorizationServerTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 15), )
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthorizationServerTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthorizationServerTable.setDescription('Lists the possible TACACS servers. While creating entry following mib objects must be specified wwpLeosTacacsClientAuthorizationServerStatus, wwpLeosTacacsClientAuthorizationServerAddr. SNMP multiple set operation must be used to create entry.')
wwpLeosTacacsClientAuthorizationServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 15, 1), ).setIndexNames((0, "WWP-LEOS-TACACS-CLIENT-MIB", "wwpLeosTacacsClientAuthorizationServerIndex"))
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthorizationServerEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthorizationServerEntry.setDescription('Tacacs server entry.')
wwpLeosTacacsClientAuthorizationServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthorizationServerIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthorizationServerIndex.setDescription('Specifies the index of this table.')
wwpLeosTacacsClientAuthorizationServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 15, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthorizationServerAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthorizationServerAddr.setDescription('Host name or ip address of the TACACS server.')
wwpLeosTacacsClientAuthorizationServerResolvedAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 15, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthorizationServerResolvedAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthorizationServerResolvedAddr.setDescription('When wwpLeosTacacsClientAuthorizationServerAddr represents: Host name : The resolved address will either be Ipv4 address or Ipv6 address. Ipv4 address : The resolved address will be the same Ipv4 address. Ipv6 address : The resolved address will be the same Ipv6 address. When the resolved address represents: Ipv4 address : wwpLeosTacacsClientAuthorizationServerResolvedAddr will represent the resolved Ipv4 address. wwpLeosTacacsClientAuthorizationServerResolvedInetAddr used in conjunction with wwpLeosTacacsClientAuthorizationServerResolvedInetAddrType will represent the same Ipv4 address. Ipv6 address : wwpLeosTacacsClientAuthorizationServerResolvedAddr will represent 0.0.0.0. wwpLeosTacacsClientAuthorizationServerResolvedInetAddr used in conjunction with wwpLeosTacacsClientAuthorizationServerResolvedInetAddrType will represent the Ipv6 address.')
wwpLeosTacacsClientAuthorizationServerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 15, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthorizationServerPriority.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthorizationServerPriority.setDescription('Specifies the priority of tacacs servers configured on the device. This is the order in which the servers will accessed')
wwpLeosTacacsClientAuthorizationServerAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 15, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(49)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthorizationServerAuthPort.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthorizationServerAuthPort.setDescription('The destination TCP port number to which TACACS messages should be sent. The TACACS server will not be used for authentication if this port number is 0.')
wwpLeosTacacsClientAuthorizationServerAccessRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 15, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthorizationServerAccessRequests.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthorizationServerAccessRequests.setDescription('The number of TACACS Access-Request packets sent to this server. This does not include retransmissions.')
wwpLeosTacacsClientAuthorizationServerAccessRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 15, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthorizationServerAccessRetransmissions.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthorizationServerAccessRetransmissions.setDescription('The number of TACACS Access-Request packets retransmitted to this TACACS authentication server.')
wwpLeosTacacsClientAuthorizationServerAccessAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 15, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthorizationServerAccessAccepts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthorizationServerAccessAccepts.setDescription('The number of TACACS Access-Accept packets (valid or invalid) received from this server.')
wwpLeosTacacsClientAuthorizationServerAccessRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 15, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthorizationServerAccessRejects.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthorizationServerAccessRejects.setDescription('The number of TACACS Access-Reject packets (valid or invalid) received from this server.')
wwpLeosTacacsClientAuthorizationServerMalformedAccessResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 15, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthorizationServerMalformedAccessResponses.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthorizationServerMalformedAccessResponses.setDescription('The number of malformed TACACS Access-Response packets received from this server. Malformed packets include packets with an invalid length. Bad authenticators or Signature attributes or unknown types are not included as malformed access responses.')
wwpLeosTacacsClientAuthorizationServerBadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 15, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthorizationServerBadAuthenticators.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthorizationServerBadAuthenticators.setDescription('The number of TACACS Access-Response packets containing invalid authenticators or Signature attributes received from this server.')
wwpLeosTacacsClientAuthorizationServerPendingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 15, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthorizationServerPendingRequests.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthorizationServerPendingRequests.setDescription('The number of TACACS Access-Request packets destined for this server that have not yet timed out or received a response. This variable is incremented when an Access-Request is sent and decremented due to receipt of an Access-Accept, Access-Reject or Access-Challenge, a timeout or retransmission.')
wwpLeosTacacsClientAuthorizationServerTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 15, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthorizationServerTimeouts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthorizationServerTimeouts.setDescription('The number of authentication timeouts to this server. After a timeout the client may retry to the same server, send to a different server, or give up. A retry to the same server is counted as a retransmit as well as a timeout. A send to a different server is counted as a Request as well as a timeout.')
wwpLeosTacacsClientAuthorizationServerUnknownTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 15, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthorizationServerUnknownTypes.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthorizationServerUnknownTypes.setDescription('The number of TACACS packets of unknown type which were received from this server on the authentication port.')
wwpLeosTacacsClientAuthorizationServerBadHeaderSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 15, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthorizationServerBadHeaderSequence.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthorizationServerBadHeaderSequence.setDescription('The number of TACACS packets of which were received from this server on the authentication port and dropped for some other reason.')
wwpLeosTacacsClientAuthorizationServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 15, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthorizationServerStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthorizationServerStatus.setDescription("To create a row in this table, a manager must set this object to either createAndGo(4). While creating entry following mib objects must be specified wwpLeosTacacsClientAuthorizationServerStatus, wwpLeosTacacsClientAuthorizationServerAddr. SNMP multiple set operation must be used to create entry. To disable a tacacs server, the operator can set wwpLeosTacacsClientAuthorizationServerStatus object to 'notInService' state.")
wwpLeosTacacsClientAuthorizationServerApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 15, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("userLogin", 1), ("dot1x", 2), ("all", 3))).clone('userLogin')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthorizationServerApplication.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthorizationServerApplication.setDescription('This object specifies how the tacacs server should be used for authentication. Whether this tacacs server should be used for userLogin authentication or dot1x authentication or both is decided by the value of this mib object. Dot1x not supported on all platforms')
wwpLeosTacacsClientAuthorizationServerClearStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 15, 1, 18), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthorizationServerClearStatistics.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthorizationServerClearStatistics.setDescription('This object clears the statistics for a server')
wwpLeosTacacsClientAuthorizationServerResolvedInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 15, 1, 19), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthorizationServerResolvedInetAddrType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthorizationServerResolvedInetAddrType.setDescription('Specifies the resolved IP address type. Used in conjunction with wwpLeosTacacsClientAuthorizationServerResolvedInetAddr. When set to : ipv4 : wwpLeosTacacsClientAuthorizationServerResolvedInetAddr should be compliant with InetAddressIPv4 ipv6 : wwpLeosTacacsClientAuthorizationServerResolvedInetAddr should be compliant with InetAddressIPv6.')
wwpLeosTacacsClientAuthorizationServerResolvedInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 15, 1, 20), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthorizationServerResolvedInetAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAuthorizationServerResolvedInetAddr.setDescription('Specifies the resolved IP address if wwpLeosTacacsClientAuthorizationServerAddr is set to host name. If wwpLeosTacacsClientAuthorizationServerAddr is set to ip address then wwpLeosTacacsClientAuthorizationServerResolvedInetAddr will contain same information as wwpLeosTacacsClientAuthorizationServerAddr. This OID is used in conjunction with wwpLeosTacacsClientAuthorizationServerResolvedInetAddr.')
wwpLeosTacacsClientAccountingServerTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 16), )
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingServerTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingServerTable.setDescription('Lists the possible TACACS servers. While creating entry following mib objects must be specified wwpLeosTacacsClientAccountingServerStatus, wwpLeosTacacsClientAccountingServerAddr. SNMP multiple set operation must be used to create entry.')
wwpLeosTacacsClientAccountingServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 16, 1), ).setIndexNames((0, "WWP-LEOS-TACACS-CLIENT-MIB", "wwpLeosTacacsClientAccountingServerIndex"))
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingServerEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingServerEntry.setDescription('Tacacs server entry.')
wwpLeosTacacsClientAccountingServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingServerIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingServerIndex.setDescription('Specifies the index of this table.')
wwpLeosTacacsClientAccountingServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 16, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingServerAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingServerAddr.setDescription('Host name or ip address of the TACACS server.')
wwpLeosTacacsClientAccountingServerResolvedAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 16, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingServerResolvedAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingServerResolvedAddr.setDescription('When wwpLeosTacacsClientAccountingServerAddr represents: Host name : The resolved address will either be Ipv4 address or Ipv6 address. Ipv4 address : The resolved address will be the same Ipv4 address. Ipv6 address : The resolved address will be the same Ipv6 address. When the resolved address represents: Ipv4 address : wwpLeosTacacsClientAccountingServerResolvedAddr will represent the resolved Ipv4 address. wwpLeosTacacsClientAccountingServerResolvedInetAddr used in conjunction with wwpLeosTacacsClientAccountingServerResolvedInetAddrType will represent the same Ipv4 address. Ipv6 address : wwpLeosTacacsClientAccountingServerResolvedAddr will represent 0.0.0.0. wwpLeosTacacsClientAccountingServerResolvedInetAddr used in conjunction with wwpLeosTacacsClientAccountingServerResolvedInetAddrType will represent the Ipv6 address.')
wwpLeosTacacsClientAccountingServerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 16, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingServerPriority.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingServerPriority.setDescription('Specifies the priority of tacacs servers configured on the device. This is the order in which the servers will accessed')
wwpLeosTacacsClientAccountingServerAuthPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 16, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(49)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingServerAuthPort.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingServerAuthPort.setDescription('The destination TCP port number to which TACACS messages should be sent. The TACACS server will not be used for authentication if this port number is 0.')
wwpLeosTacacsClientAccountingServerAccessRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 16, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingServerAccessRequests.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingServerAccessRequests.setDescription('The number of TACACS Access-Request packets sent to this server. This does not include retransmissions.')
wwpLeosTacacsClientAccountingServerAccessRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 16, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingServerAccessRetransmissions.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingServerAccessRetransmissions.setDescription('The number of TACACS Access-Request packets retransmitted to this TACACS authentication server.')
wwpLeosTacacsClientAccountingServerAccessAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 16, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingServerAccessAccepts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingServerAccessAccepts.setDescription('The number of TACACS Access-Accept packets (valid or invalid) received from this server.')
wwpLeosTacacsClientAccountingServerAccessRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 16, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingServerAccessRejects.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingServerAccessRejects.setDescription('The number of TACACS Access-Reject packets (valid or invalid) received from this server.')
wwpLeosTacacsClientAccountingServerMalformedAccessResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 16, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingServerMalformedAccessResponses.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingServerMalformedAccessResponses.setDescription('The number of malformed TACACS Access-Response packets received from this server. Malformed packets include packets with an invalid length. Bad authenticators or Signature attributes or unknown types are not included as malformed access responses.')
wwpLeosTacacsClientAccountingServerBadAuthenticators = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 16, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingServerBadAuthenticators.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingServerBadAuthenticators.setDescription('The number of TACACS Access-Response packets containing invalid authenticators or Signature attributes received from this server.')
wwpLeosTacacsClientAccountingServerPendingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 16, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingServerPendingRequests.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingServerPendingRequests.setDescription('The number of TACACS Access-Request packets destined for this server that have not yet timed out or received a response. This variable is incremented when an Access-Request is sent and decremented due to receipt of an Access-Accept, Access-Reject or Access-Challenge, a timeout or retransmission.')
wwpLeosTacacsClientAccountingServerTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 16, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingServerTimeouts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingServerTimeouts.setDescription('The number of authentication timeouts to this server. After a timeout the client may retry to the same server, send to a different server, or give up. A retry to the same server is counted as a retransmit as well as a timeout. A send to a different server is counted as a Request as well as a timeout.')
wwpLeosTacacsClientAccountingServerUnknownTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 16, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingServerUnknownTypes.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingServerUnknownTypes.setDescription('The number of TACACS packets of unknown type which were received from this server on the authentication port.')
wwpLeosTacacsClientAccountingServerBadHeaderSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 16, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingServerBadHeaderSequence.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingServerBadHeaderSequence.setDescription('The number of TACACS packets of which were received from this server on the authentication port and dropped for some other reason.')
wwpLeosTacacsClientAccountingServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 16, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingServerStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingServerStatus.setDescription("To create a row in this table, a manager must set this object to either createAndGo(4). While creating entry following mib objects must be specified wwpLeosTacacsClientAccountingServerStatus, wwpLeosTacacsClientAccountingServerAddr. SNMP multiple set operation must be used to create entry. To disable a tacacs server, the operator can set wwpLeosTacacsClientAccountingServerStatus object to 'notInService' state.")
wwpLeosTacacsClientAccountingServerApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 16, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("userLogin", 1), ("dot1x", 2), ("all", 3))).clone('userLogin')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingServerApplication.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingServerApplication.setDescription('This object specifies how the tacacs server should be used for authentication. Whether this tacacs server should be used for userLogin authentication or dot1x authentication or both is decided by the value of this mib object. Dot1x not supported on all platforms')
wwpLeosTacacsClientAccountingServerClearStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 16, 1, 18), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingServerClearStatistics.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingServerClearStatistics.setDescription('This object clears the statistics for a server')
wwpLeosTacacsClientAccountingServerResolvedInetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 16, 1, 19), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingServerResolvedInetAddrType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingServerResolvedInetAddrType.setDescription('Specifies the resolved IP address type. Used in conjunction with wwpLeosTacacsClientAccountingServerResolvedInetAddr. When set to : ipv4 : wwpLeosTacacsClientAccountingServerResolvedInetAddr should be compliant with InetAddressIPv4 ipv6 : wwpLeosTacacsClientAccountingServerResolvedInetAddr should be compliant with InetAddressIPv6.')
wwpLeosTacacsClientAccountingServerResolvedInetAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 16, 1, 20), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingServerResolvedInetAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingServerResolvedInetAddr.setDescription('Specifies the resolved IP address if wwpLeosTacacsClientAccountingServerAddr is set to host name. If wwpLeosTacacsClientAccountingServerAddr is set to ip address then wwpLeosTacacsClientAccountingServerResolvedInetAddr will contain the same information as wwpLeosTacacsClientAccountingServerAddr. This OID is used in conjunction with wwpLeosTacacsClientAccountingServerResolvedInetAddrType.')
wwpLeosTacacsClientAccountingSession = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingSession.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingSession.setDescription('Setting this object will turn on session logon/logoff logging with tacacs.')
wwpLeosTacacsClientAccountingCommand = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingCommand.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientAccountingCommand.setDescription('Setting this object will turn on command start/stop logging.')
wwpLeosTacacsClientGlobalServers = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTacacsClientGlobalServers.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosTacacsClientGlobalServers.setDescription('Setting this object will turn off global servers.')
wwpLeosTacacsClientSearchMethod = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("priority", 1), ("cached", 2))).clone('priority')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTacacsClientSearchMethod.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientSearchMethod.setDescription('Setting this object will set the search method.')
wwpLeosTacacsClientKeyMinLen = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 402, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 64)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTacacsClientKeyMinLen.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTacacsClientKeyMinLen.setDescription('Setting this object will set the minimum length for TACACS secret key')
mibBuilder.exportSymbols("WWP-LEOS-TACACS-CLIENT-MIB", wwpLeosTacacsClientServerEntry=wwpLeosTacacsClientServerEntry, wwpLeosTacacsClientAuthorizationServerTable=wwpLeosTacacsClientAuthorizationServerTable, wwpLeosTacacsAuthorizationAdminState=wwpLeosTacacsAuthorizationAdminState, wwpLeosTacacsClientAuthorizationServerAddr=wwpLeosTacacsClientAuthorizationServerAddr, wwpLeosTacacsClientMIB=wwpLeosTacacsClientMIB, wwpLeosTacacsClientAccountingServerMalformedAccessResponses=wwpLeosTacacsClientAccountingServerMalformedAccessResponses, wwpLeosTacacsClientAuthorizationServerPendingRequests=wwpLeosTacacsClientAuthorizationServerPendingRequests, wwpLeosTacacsClientGlobalAuthorizationAccessRetransmissions=wwpLeosTacacsClientGlobalAuthorizationAccessRetransmissions, wwpLeosTacacsClientAccountingServerBadHeaderSequence=wwpLeosTacacsClientAccountingServerBadHeaderSequence, wwpLeosTacacsClientAccountingServerTable=wwpLeosTacacsClientAccountingServerTable, wwpLeosTacacsClientServerUnknownTypes=wwpLeosTacacsClientServerUnknownTypes, wwpLeosTacacsClientAuthenticationServerAccessRejects=wwpLeosTacacsClientAuthenticationServerAccessRejects, wwpLeosTacacsClientGlobalAuthorizationAccessRequests=wwpLeosTacacsClientGlobalAuthorizationAccessRequests, wwpLeosTacacsClientAuthenticationServerStatus=wwpLeosTacacsClientAuthenticationServerStatus, wwpLeosTacacsClientGlobalAccountingBadHeaderSequence=wwpLeosTacacsClientGlobalAccountingBadHeaderSequence, wwpLeosTacacsClientAccountingServerPriority=wwpLeosTacacsClientAccountingServerPriority, wwpLeosTacacsClientServerApplication=wwpLeosTacacsClientServerApplication, wwpLeosTacacsClientRetries=wwpLeosTacacsClientRetries, wwpLeosTacacsClientGlobalAccountingMalformedAccessResponses=wwpLeosTacacsClientGlobalAccountingMalformedAccessResponses, wwpLeosTacacsClientMIBCompliances=wwpLeosTacacsClientMIBCompliances, wwpLeosTacacsClientAccountingServerResolvedAddr=wwpLeosTacacsClientAccountingServerResolvedAddr, wwpLeosTacacsClientServerIndex=wwpLeosTacacsClientServerIndex, wwpLeosTacacsClientGlobalAuthorizationMalformedAccessResponses=wwpLeosTacacsClientGlobalAuthorizationMalformedAccessResponses, wwpLeosTacacsOperState=wwpLeosTacacsOperState, wwpLeosTacacsClientAccountingServerAccessRejects=wwpLeosTacacsClientAccountingServerAccessRejects, wwpLeosTacacsClientAuthenticationServerAddr=wwpLeosTacacsClientAuthenticationServerAddr, wwpLeosTacacsClientMIBNotifications=wwpLeosTacacsClientMIBNotifications, wwpLeosTacacsClientKeyMinLen=wwpLeosTacacsClientKeyMinLen, wwpLeosTacacsClientGlobalAccountingBadAuthenticators=wwpLeosTacacsClientGlobalAccountingBadAuthenticators, wwpLeosTacacsClientAccountingCommand=wwpLeosTacacsClientAccountingCommand, wwpLeosTacacsClientAuthenticationServerPriority=wwpLeosTacacsClientAuthenticationServerPriority, wwpLeosTacacsClientAuthorizationServerAccessRequests=wwpLeosTacacsClientAuthorizationServerAccessRequests, wwpLeosTacacsClientAuthenticationServerUnknownTypes=wwpLeosTacacsClientAuthenticationServerUnknownTypes, wwpLeosTacacsClientAuthorizationServerUnknownTypes=wwpLeosTacacsClientAuthorizationServerUnknownTypes, wwpLeosTacacsClientAuthenticationServerBadAuthenticators=wwpLeosTacacsClientAuthenticationServerBadAuthenticators, wwpLeosTacacsClientAuthorizationServerAccessRejects=wwpLeosTacacsClientAuthorizationServerAccessRejects, wwpLeosTacacsClientAccountingServerApplication=wwpLeosTacacsClientAccountingServerApplication, wwpLeosTacacsSyslogAdminState=wwpLeosTacacsSyslogAdminState, wwpLeosTacacsClientGlobalServers=wwpLeosTacacsClientGlobalServers, wwpLeosTacacsClientServerAuthPort=wwpLeosTacacsClientServerAuthPort, wwpLeosTacacsClientAuthenticationServerTimeouts=wwpLeosTacacsClientAuthenticationServerTimeouts, wwpLeosTacacsClientPrivilegeLevelRW=wwpLeosTacacsClientPrivilegeLevelRW, wwpLeosTacacsClientServerResolvedInetAddrType=wwpLeosTacacsClientServerResolvedInetAddrType, wwpLeosTacacsClientGlobalAccountingTimeouts=wwpLeosTacacsClientGlobalAccountingTimeouts, wwpLeosTacacsClientAuthenticationServerPendingRequests=wwpLeosTacacsClientAuthenticationServerPendingRequests, wwpLeosTacacsClientGlobalAuthorizationAccessAccepts=wwpLeosTacacsClientGlobalAuthorizationAccessAccepts, wwpLeosTacacsClientAuthenticationServerAccessAccepts=wwpLeosTacacsClientAuthenticationServerAccessAccepts, wwpLeosTacacsClientAccountingServerBadAuthenticators=wwpLeosTacacsClientAccountingServerBadAuthenticators, wwpLeosTacacsClientAccountingServerStatus=wwpLeosTacacsClientAccountingServerStatus, wwpLeosTacacsClientAuthorizationServerClearStatistics=wwpLeosTacacsClientAuthorizationServerClearStatistics, wwpLeosTacacsClientAccountingServerResolvedInetAddr=wwpLeosTacacsClientAccountingServerResolvedInetAddr, wwpLeosTacacsClientServerResolvedAddr=wwpLeosTacacsClientServerResolvedAddr, wwpLeosTacacsClientAccountingServerClearStatistics=wwpLeosTacacsClientAccountingServerClearStatistics, wwpLeosTacacsClientPrivilegeLevelAdmin=wwpLeosTacacsClientPrivilegeLevelAdmin, wwpLeosTacacsClientMIBConformance=wwpLeosTacacsClientMIBConformance, wwpLeosTacacsClientServerAccessRejects=wwpLeosTacacsClientServerAccessRejects, wwpLeosTacacsClientAccountingServerAccessAccepts=wwpLeosTacacsClientAccountingServerAccessAccepts, wwpLeosTacacsClientServerPriority=wwpLeosTacacsClientServerPriority, wwpLeosTacacsClientAuthKey=wwpLeosTacacsClientAuthKey, wwpLeosTacacsClientGlobalAuthorizationTimeouts=wwpLeosTacacsClientGlobalAuthorizationTimeouts, wwpLeosTacacsClientAuthenticationServerResolvedAddr=wwpLeosTacacsClientAuthenticationServerResolvedAddr, wwpLeosTacacsClientAuthenticationServerAccessRetransmissions=wwpLeosTacacsClientAuthenticationServerAccessRetransmissions, wwpLeosTacacsClientAccountingServerAccessRetransmissions=wwpLeosTacacsClientAccountingServerAccessRetransmissions, wwpLeosTacacsClientAuthorizationServerApplication=wwpLeosTacacsClientAuthorizationServerApplication, wwpLeosTacacsClientAuthorizationServerIndex=wwpLeosTacacsClientAuthorizationServerIndex, wwpLeosTacacsClientAuthenticationServerApplication=wwpLeosTacacsClientAuthenticationServerApplication, wwpLeosTacacsClientServerStatus=wwpLeosTacacsClientServerStatus, wwpLeosTacacsClientPrivilegeLevelDiag=wwpLeosTacacsClientPrivilegeLevelDiag, wwpLeosTacacsClientServerAccessAccepts=wwpLeosTacacsClientServerAccessAccepts, wwpLeosTacacsClientAccountingServerAddr=wwpLeosTacacsClientAccountingServerAddr, wwpLeosTacacsClientSearchMethod=wwpLeosTacacsClientSearchMethod, wwpLeosTacacsClientAuthorizationServerAccessAccepts=wwpLeosTacacsClientAuthorizationServerAccessAccepts, wwpLeosTacacsClientAuthenticationServerAccessRequests=wwpLeosTacacsClientAuthenticationServerAccessRequests, TacacsString=TacacsString, wwpLeosTacacsClientServerAccessRequests=wwpLeosTacacsClientServerAccessRequests, wwpLeosTacacsClient=wwpLeosTacacsClient, wwpLeosTacacsClientGlobalAuthorizationBadAuthenticators=wwpLeosTacacsClientGlobalAuthorizationBadAuthenticators, wwpLeosTacacsClientAuthorizationServerMalformedAccessResponses=wwpLeosTacacsClientAuthorizationServerMalformedAccessResponses, wwpLeosTacacsClientAuthorizationServerResolvedAddr=wwpLeosTacacsClientAuthorizationServerResolvedAddr, PYSNMP_MODULE_ID=wwpLeosTacacsClientMIB, wwpLeosTacacsClientServerClearStatistics=wwpLeosTacacsClientServerClearStatistics, wwpLeosTacacsClientAuthorizationServerEntry=wwpLeosTacacsClientAuthorizationServerEntry, wwpLeosTacacsClientMIBNotificationPrefix=wwpLeosTacacsClientMIBNotificationPrefix, wwpLeosTacacsClientGlobalAccountingAccessRetransmissions=wwpLeosTacacsClientGlobalAccountingAccessRetransmissions, wwpLeosTacacsClientAuthenticationServerResolvedInetAddr=wwpLeosTacacsClientAuthenticationServerResolvedInetAddr, wwpLeosTacacsClientGlobalAuthorizationAccessRejects=wwpLeosTacacsClientGlobalAuthorizationAccessRejects, wwpLeosTacacsClientGlobalAccountingUnknownTypes=wwpLeosTacacsClientGlobalAccountingUnknownTypes, wwpLeosTacacsClientMIBObjects=wwpLeosTacacsClientMIBObjects, wwpLeosTacacsClientServerMalformedAccessResponses=wwpLeosTacacsClientServerMalformedAccessResponses, wwpLeosTacacsClientTimeout=wwpLeosTacacsClientTimeout, wwpLeosTacacsClientAuthenticationServerTable=wwpLeosTacacsClientAuthenticationServerTable, wwpLeosTacacsClientAuthorizationServerTimeouts=wwpLeosTacacsClientAuthorizationServerTimeouts, wwpLeosTacacsAccountingAdminState=wwpLeosTacacsAccountingAdminState, wwpLeosTacacsClientAuthenticationServerBadHeaderSequence=wwpLeosTacacsClientAuthenticationServerBadHeaderSequence, wwpLeosTacacsAuthenticationAdminState=wwpLeosTacacsAuthenticationAdminState, wwpLeosTacacsClientAuthorizationServerBadAuthenticators=wwpLeosTacacsClientAuthorizationServerBadAuthenticators, wwpLeosTacacsClientAuthorizationServerAccessRetransmissions=wwpLeosTacacsClientAuthorizationServerAccessRetransmissions, wwpLeosTacacsClientMIBGroups=wwpLeosTacacsClientMIBGroups, wwpLeosTacacsClientServerTable=wwpLeosTacacsClientServerTable, wwpLeosTacacsClientServerAccessRetransmissions=wwpLeosTacacsClientServerAccessRetransmissions, wwpLeosTacacsClientAccountingServerTimeouts=wwpLeosTacacsClientAccountingServerTimeouts, wwpLeosTacacsClientAuthorizationServerStatus=wwpLeosTacacsClientAuthorizationServerStatus, wwpLeosTacacsClientAccountingServerAccessRequests=wwpLeosTacacsClientAccountingServerAccessRequests, wwpLeosTacacsClientServerAddr=wwpLeosTacacsClientServerAddr, wwpLeosTacacsClientAuthenticationServerAuthPort=wwpLeosTacacsClientAuthenticationServerAuthPort, wwpLeosTacacsClientAuthorizationServerResolvedInetAddrType=wwpLeosTacacsClientAuthorizationServerResolvedInetAddrType, wwpLeosTacacsClientAccountingServerIndex=wwpLeosTacacsClientAccountingServerIndex, wwpLeosTacacsClientGlobalAccountingAccessRequests=wwpLeosTacacsClientGlobalAccountingAccessRequests, wwpLeosTacacsClientAccountingServerResolvedInetAddrType=wwpLeosTacacsClientAccountingServerResolvedInetAddrType, wwpLeosTacacsClientGlobalAccountingAccessAccepts=wwpLeosTacacsClientGlobalAccountingAccessAccepts, wwpLeosTacacsClientServerBadHeaderSequence=wwpLeosTacacsClientServerBadHeaderSequence, wwpLeosTacacsClientAccountingServerUnknownTypes=wwpLeosTacacsClientAccountingServerUnknownTypes, wwpLeosTacacsClientServerResolvedInetAddr=wwpLeosTacacsClientServerResolvedInetAddr, wwpLeosTacacsClientAuthorizationServerPriority=wwpLeosTacacsClientAuthorizationServerPriority, wwpLeosTacacsClientAuthorizationServerResolvedInetAddr=wwpLeosTacacsClientAuthorizationServerResolvedInetAddr, wwpLeosTacacsClientGlobalAccountingAccessRejects=wwpLeosTacacsClientGlobalAccountingAccessRejects, wwpLeosTacacsClientAuthorizationServerBadHeaderSequence=wwpLeosTacacsClientAuthorizationServerBadHeaderSequence, wwpLeosTacacsClientAccountingServerAuthPort=wwpLeosTacacsClientAccountingServerAuthPort, wwpLeosTacacsClientAccountingServerPendingRequests=wwpLeosTacacsClientAccountingServerPendingRequests, wwpLeosTacacsClientAccountingServerEntry=wwpLeosTacacsClientAccountingServerEntry, wwpLeosTacacsClientAuthenticationServerMalformedAccessResponses=wwpLeosTacacsClientAuthenticationServerMalformedAccessResponses, wwpLeosTacacsClientGlobalAuthorizationBadHeaderSequence=wwpLeosTacacsClientGlobalAuthorizationBadHeaderSequence, wwpLeosTacacsClientAuthenticationServerIndex=wwpLeosTacacsClientAuthenticationServerIndex, wwpLeosTacacsClientServerPendingRequests=wwpLeosTacacsClientServerPendingRequests, wwpLeosTacacsAdminState=wwpLeosTacacsAdminState, wwpLeosTacacsClientGlobalAuthorizationUnknownTypes=wwpLeosTacacsClientGlobalAuthorizationUnknownTypes, wwpLeosTacacsClientAuthenticationServerClearStatistics=wwpLeosTacacsClientAuthenticationServerClearStatistics, wwpLeosTacacsClientServerBadAuthenticators=wwpLeosTacacsClientServerBadAuthenticators, wwpLeosTacacsClientServerTimeouts=wwpLeosTacacsClientServerTimeouts, wwpLeosTacacsClientAuthenticationServerResolvedInetAddrType=wwpLeosTacacsClientAuthenticationServerResolvedInetAddrType, wwpLeosTacacsClientAccountingSession=wwpLeosTacacsClientAccountingSession, wwpLeosTacacsClientAuthorizationServerAuthPort=wwpLeosTacacsClientAuthorizationServerAuthPort, wwpLeosTacacsClientAuthenticationServerEntry=wwpLeosTacacsClientAuthenticationServerEntry)
