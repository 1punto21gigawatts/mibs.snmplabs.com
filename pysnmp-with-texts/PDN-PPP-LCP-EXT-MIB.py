#
# PySNMP MIB module PDN-PPP-LCP-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PDN-PPP-LCP-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:39:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
pdn_interfaces, = mibBuilder.importSymbols("PDN-HEADER-MIB", "pdn-interfaces")
SwitchState, PdnPPPState = mibBuilder.importSymbols("PDN-TC", "SwitchState", "PdnPPPState")
pppLinkConfigEntry, pppLinkStatusEntry = mibBuilder.importSymbols("PPP-LCP-MIB", "pppLinkConfigEntry", "pppLinkStatusEntry")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Gauge32, Bits, Integer32, IpAddress, Unsigned32, Counter32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, NotificationType, MibIdentifier, TimeTicks, iso, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Bits", "Integer32", "IpAddress", "Unsigned32", "Counter32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "NotificationType", "MibIdentifier", "TimeTicks", "iso", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
pdnPppLcpExtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28))
pdnPppLcpExtMIB.setRevisions(('2004-09-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: pdnPppLcpExtMIB.setRevisionsDescriptions(('Initial release.',))
if mibBuilder.loadTexts: pdnPppLcpExtMIB.setLastUpdated('200409100000Z')
if mibBuilder.loadTexts: pdnPppLcpExtMIB.setOrganization('Paradyne Networks MIB Working Group Other information about group editing the MIB')
if mibBuilder.loadTexts: pdnPppLcpExtMIB.setContactInfo('Paradyne Networks, Inc. 8545 126th Avenue North Largo, FL 33733 www.paradyne.com General Comments to: mibwg_team@paradyne.com Editor Clay Sikes')
if mibBuilder.loadTexts: pdnPppLcpExtMIB.setDescription("The MIB module provides enterprise-specific extensions to the PPP-LCP-MIB for managing the Link Control Protocol (LCP) and Line Quality Monitoring on subnetwork interfaces that use the family of Point-to-Point protocols. The following documents should be referenced with respect to this MIB module: [RFC 1471] Kastenholz, F., `The Definitions of Managed Objects for the Link Control Protocol of the Point-to-Point Protocol, PPP-LCP-MIB', June 1993. [RFC 1661] Simpson, W., `The Point-to-Point Protocol', July 1994.")
pdnPppLcpExtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 0))
pdnPppLcpExtObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1))
pdnPppLcpExtAFNs = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 2))
pdnPppLcpExtConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 3))
pdnPppLinkStatusExtTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 1), )
if mibBuilder.loadTexts: pdnPppLinkStatusExtTable.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkStatusExtTable.setDescription("Extensions to the PPP LCP Link Status Table, pppLinkStatusTable. Counters in this group contain `total' counts which are marked from the time the system was last re-initialized.")
pdnPppLinkStatusExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 1, 1), )
pppLinkStatusEntry.registerAugmentions(("PDN-PPP-LCP-EXT-MIB", "pdnPppLinkStatusExtEntry"))
pdnPppLinkStatusExtEntry.setIndexNames(*pppLinkStatusEntry.getIndexNames())
if mibBuilder.loadTexts: pdnPppLinkStatusExtEntry.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkStatusExtEntry.setDescription('An entry in the PPP LCP Link Status Table.')
pdnPppLinkStatusCurrState = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 1, 1, 1), PdnPPPState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPppLinkStatusCurrState.setReference("RFC 1661, Section 4.2, `State Transition Table'.")
if mibBuilder.loadTexts: pdnPppLinkStatusCurrState.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkStatusCurrState.setDescription('The current state of the LCP State Machine.')
pdnPppLinkStatusEstablishFailedReason = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPppLinkStatusEstablishFailedReason.setReference("RFC 1661, Section 4.2, `State Transition Table'.")
if mibBuilder.loadTexts: pdnPppLinkStatusEstablishFailedReason.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkStatusEstablishFailedReason.setDescription('Indicates why the PPP link failed to establish a connection to the Network-Layer Protocol phase. If the link was successfully established, a zero-length string will be returned. Otherwise, a string will be returned indicating why the LCP could not establish the phase.')
pdnPppLinkStatusLocalToRemoteMagicNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPppLinkStatusLocalToRemoteMagicNumber.setReference("RFC 1661, Section 6.4, `Magic-Number'.")
if mibBuilder.loadTexts: pdnPppLinkStatusLocalToRemoteMagicNumber.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkStatusLocalToRemoteMagicNumber.setDescription('The Magic-Number negotiated for packets in the local to remote direction.')
pdnPppLinkStatusRemoteToLocalMagicNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPppLinkStatusRemoteToLocalMagicNumber.setReference("RFC 1661, Section 6.4, `Magic-Number'.")
if mibBuilder.loadTexts: pdnPppLinkStatusRemoteToLocalMagicNumber.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkStatusRemoteToLocalMagicNumber.setDescription('The Magic-Number negotiated for packets in the remote to local direction.')
pdnPppLinkStatusTotalSentConfigRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalSentConfigRequests.setReference("RFC 1661, Section 5.1, `Configure-Request'.")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalSentConfigRequests.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkStatusTotalSentConfigRequests.setDescription('The number of Configure-Requests packets sent on this link.')
pdnPppLinkStatusTotalReceivedConfigRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalReceivedConfigRequests.setReference("RFC 1661, Section 5.1, `Configure-Request'.")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalReceivedConfigRequests.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkStatusTotalReceivedConfigRequests.setDescription('The number of Configure-Requests packets received on this link.')
pdnPppLinkStatusTotalSentConfigAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalSentConfigAcks.setReference("RFC 1661, Section 5.2, `Configure-Ack'.")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalSentConfigAcks.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkStatusTotalSentConfigAcks.setDescription('The number of Configure-Ack packets sent on this link.')
pdnPppLinkStatusTotalReceivedConfigAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalReceivedConfigAcks.setReference("RFC 1661, Section 5.2, `Configure-Ack'.")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalReceivedConfigAcks.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkStatusTotalReceivedConfigAcks.setDescription('The number of Configure-Ack packets received on this link.')
pdnPppLinkStatusTotalSentConfigNaks = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalSentConfigNaks.setReference("RFC 1661, Section 5.3, `Configure-Nak'.")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalSentConfigNaks.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkStatusTotalSentConfigNaks.setDescription('The number of Configure-Nak packets sent on this link.')
pdnPppLinkStatusTotalReceivedConfigNaks = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalReceivedConfigNaks.setReference("RFC 1661, Section 5.3, `Configure-Nak'.")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalReceivedConfigNaks.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkStatusTotalReceivedConfigNaks.setDescription('The number of Configure-Nak packets received on this link.')
pdnPppLinkStatusTotalSentConfigRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalSentConfigRejects.setReference("RFC 1661, Section 5.4, `Configure-Reject'.")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalSentConfigRejects.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkStatusTotalSentConfigRejects.setDescription('The number of Configure-Reject packets sent on this link.')
pdnPppLinkStatusTotalReceivedConfigRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalReceivedConfigRejects.setReference("RFC 1661, Section 5.4, `Configure-Reject'.")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalReceivedConfigRejects.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkStatusTotalReceivedConfigRejects.setDescription('The number of Configure-Reject packets received on this link.')
pdnPppLinkStatusTotalSentTerminateRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalSentTerminateRequests.setReference("RFC 1661, Section 5.5, `Terminate-Request and Terminate-Ack'.")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalSentTerminateRequests.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkStatusTotalSentTerminateRequests.setDescription('The number of Terminate-Request packets sent on this link.')
pdnPppLinkStatusTotalReceivedTerminateRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalReceivedTerminateRequests.setReference("RFC 1661, Section 5.5, `Terminate-Request and Terminate-Ack'.")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalReceivedTerminateRequests.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkStatusTotalReceivedTerminateRequests.setDescription('The number of Terminate-Request packets received on this link.')
pdnPppLinkStatusTotalSentTerminateAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalSentTerminateAcks.setReference("RFC 1661, Section 5.5, `Terminate-Request and Terminate-Ack'.")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalSentTerminateAcks.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkStatusTotalSentTerminateAcks.setDescription('The number of Terminate-Ack packets sent on this link.')
pdnPppLinkStatusTotalReceivedTerminateAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalReceivedTerminateAcks.setReference("RFC 1661, Section 5.5, `Terminate-Request and Terminate-Ack'.")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalReceivedTerminateAcks.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkStatusTotalReceivedTerminateAcks.setDescription('The number of Terminate-Ack packets received on this link.')
pdnPppLinkStatusTotalSentCodeRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalSentCodeRejects.setReference("RFC 1661, Section 5.6, `Code-Reject'.")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalSentCodeRejects.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkStatusTotalSentCodeRejects.setDescription('The number of Code-Reject packets sent on this link.')
pdnPppLinkStatusTotalReceivedCodeRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalReceivedCodeRejects.setReference("RFC 1661, Section 5.6, `Code-Reject'.")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalReceivedCodeRejects.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkStatusTotalReceivedCodeRejects.setDescription('The number of Code-Reject packets received on this link.')
pdnPppLinkStatusTotalSentProtocolRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalSentProtocolRejects.setReference("RFC 1661, Section 5.7, `Protocol-Reject'.")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalSentProtocolRejects.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkStatusTotalSentProtocolRejects.setDescription('The number of Protocol-Reject packets sent on this link.')
pdnPppLinkStatusTotalReceivedProtocolRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalReceivedProtocolRejects.setReference("RFC 1661, Section 5.7, `Protocol-Reject'.")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalReceivedProtocolRejects.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkStatusTotalReceivedProtocolRejects.setDescription('The number of Protocol-Reject packets received on this link.')
pdnPppLinkStatusTotalSentEchoRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalSentEchoRequests.setReference("RFC 1661, Section 5.8, `Echo-Request and Echo-Reply'.")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalSentEchoRequests.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkStatusTotalSentEchoRequests.setDescription('The number of Echo-Request packets sent on this link.')
pdnPppLinkStatusTotalReceivedEchoRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalReceivedEchoRequests.setReference("RFC 1661, Section 5.8, `Echo-Request and Echo-Reply'.")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalReceivedEchoRequests.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkStatusTotalReceivedEchoRequests.setDescription('The number of Echo-Request packets received on this link.')
pdnPppLinkStatusTotalSentEchoReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalSentEchoReplies.setReference("RFC 1661, Section 5.8, `Echo-Request and Echo-Reply'.")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalSentEchoReplies.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkStatusTotalSentEchoReplies.setDescription('The number of Echo-Reply packets sent on this link.')
pdnPppLinkStatusTotalReceivedEchoReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalReceivedEchoReplies.setReference("RFC 1661, Section 5.8, `Echo-Request and Echo-Reply'.")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalReceivedEchoReplies.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkStatusTotalReceivedEchoReplies.setDescription('The number of Echo-Reply packets received on this link.')
pdnPppLinkStatusTotalSentDiscardRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalSentDiscardRequests.setReference("RFC 1661, Section 5.8, `Discard-Request'.")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalSentDiscardRequests.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkStatusTotalSentDiscardRequests.setDescription('The number of Discard-Request packets sent on this link.')
pdnPppLinkStatusTotalReceivedDiscardRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalReceivedDiscardRequests.setReference("RFC 1661, Section 5.8, `Discard-Request'.")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalReceivedDiscardRequests.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkStatusTotalReceivedDiscardRequests.setDescription('The number of Discard-Request packets received on this link.')
pdnPppLinkStatusTotalSentKeepAlives = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalSentKeepAlives.setReference("RFC 1661, Section 5.8, `Echo-Request and Echo-Reply'.")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalSentKeepAlives.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkStatusTotalSentKeepAlives.setDescription("The number of automatically generated Echo-Request packets sent on this link as a `Keep Alive' mechanism.")
pdnPppLinkStatusTotalReceivedKeepAlives = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalReceivedKeepAlives.setReference("RFC 1661, Section 5.8, `Echo-Request and Echo-Reply'.")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalReceivedKeepAlives.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkStatusTotalReceivedKeepAlives.setDescription("The number of Echo-Request packets received on this link as a `Keep Alive' mechanism.")
pdnPppLinkStatusTotalEchoRequestsTimeOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalEchoRequestsTimeOuts.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkStatusTotalEchoRequestsTimeOuts.setDescription('The number of Echo-Request packets that have been sent, but no Echo-Reply packet was received.')
pdnPppLinkStatusTotalEchoRequestsBadData = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalEchoRequestsBadData.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkStatusTotalEchoRequestsBadData.setDescription('The number of Echo-Request packets that have been received, but the data field in the packet received did not match the data in the packet sent.')
pdnPppLinkStatusTotalEchoRequestsPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalEchoRequestsPassed.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkStatusTotalEchoRequestsPassed.setDescription('The number of Echo-Request packets that have been received and the data field in the packet received matched the data in the packet sent.')
pdnPppLinkStatusTotalKeepAlivesLost = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalKeepAlivesLost.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkStatusTotalKeepAlivesLost.setDescription("The number of Echo-Request packets that have been sent as a `Keep Alive' mechanism which have not been replied and are considered 'lost'.")
pdnPppLinkStatusTotalTerminates = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPppLinkStatusTotalTerminates.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkStatusTotalTerminates.setDescription('The number of times the link was terminated where user traffic could not be sent.')
pdnPppLinkConfigExtTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 2), )
if mibBuilder.loadTexts: pdnPppLinkConfigExtTable.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkConfigExtTable.setDescription('Extensions to the PPP LCP Link Configuration Table, pppLinkconfigTable.')
pdnPppLinkConfigExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 2, 1), )
pppLinkConfigEntry.registerAugmentions(("PDN-PPP-LCP-EXT-MIB", "pdnPppLinkConfigExtEntry"))
pdnPppLinkConfigExtEntry.setIndexNames(*pppLinkConfigEntry.getIndexNames())
if mibBuilder.loadTexts: pdnPppLinkConfigExtEntry.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkConfigExtEntry.setDescription('An entry in the PPP LCP Link Configuration Table.')
pdnPppLinkConfigPFC = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 2, 1, 1), SwitchState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnPppLinkConfigPFC.setReference("RFC 1661, Section 6.5, `Protocol-Field-Compression'.")
if mibBuilder.loadTexts: pdnPppLinkConfigPFC.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkConfigPFC.setDescription('Configures whether or not Protocol-Field-Compression is desired. When set to enabled(1), the local entity will attempt to negotiate the compression of the Protocol Field. When set to disabled(2), the local entity will not negotiate compression of the Protocol Field. The result of the negotiation is indicated in the pppLinkStatusLocalToRemoteProtocolCompression and the pppLinkStatusRemoteToLocalProtocolCompression objects.')
pdnPppLinkConfigACFC = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 2, 1, 2), SwitchState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnPppLinkConfigACFC.setReference("RFC 1661, Section 6.6, `Address-and-Control-Field-Compression'.")
if mibBuilder.loadTexts: pdnPppLinkConfigACFC.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkConfigACFC.setDescription('Configures whether or not Data Link Layer Address and Control fields compression is desired. When set to enabled(1), the local entity will attempt to negotiate the compression of the fields. When set to disabled(2), the local entity will not negotiate compression of the fields. The result of the negotiation is indicated in the pppLinkStatusLocalToRemoteACCompression and the pppLinkStatusRemoteToLocalACCompression objects.')
pdnPppLinkConfigKeepAliveQuietTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnPppLinkConfigKeepAliveQuietTime.setReference("RFC 1661, Section 5.8, `Echo-Request and Echo-Reply'.")
if mibBuilder.loadTexts: pdnPppLinkConfigKeepAliveQuietTime.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkConfigKeepAliveQuietTime.setDescription("If no PPP packets are received for this amount of time, the local PPP entity will send an Echo-Request as a `Keep Alive' mechanism to make sure the link is still active. A value of 0 indicates that the `Keep Alive' mechanism is disabled. The largest `quit time` as supported by the syntax is an hour.")
pdnPppLinkConfigKeepAliveTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnPppLinkConfigKeepAliveTimeout.setReference("RFC 1661, Section 5.8, `Echo-Request and Echo-Reply'.")
if mibBuilder.loadTexts: pdnPppLinkConfigKeepAliveTimeout.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkConfigKeepAliveTimeout.setDescription("The maximum amount of time to wait for an Echo-Reply in response to an Echo-Request sent as a `Keep Alive' mechanism. When this time has exceeded, the link will be terminated and will attempt to reestablish a connection with its remote peer. The maximum amount of time to wait as supported by the syntax is 5 minutes.")
pdnPppLinkTestTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 3), )
if mibBuilder.loadTexts: pdnPppLinkTestTable.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkTestTable.setDescription('A table to support the testing of a PPP link.')
pdnPppLinkTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pdnPppLinkTestEntry.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkTestEntry.setDescription('An entry in the PPP LCP Link Test Table.')
pdnPppLinkTestSendEchoTest = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOp", 1), ("runTest", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnPppLinkTestSendEchoTest.setReference("RFC 1661, Section 5.8, `Echo-Request and Echo-Reply'.")
if mibBuilder.loadTexts: pdnPppLinkTestSendEchoTest.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkTestSendEchoTest.setDescription('Controls the initiation of a PPP Echo-Request to the remote PPP entity. The agent fills in the data to be echoed. The value read from this object is noOp(1). If an Echo Test is in progress and this object is set to noOp(1),the test will be aborted and the result object below will be set to none(1).')
pdnPppLinkTestEchoTestTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnPppLinkTestEchoTestTimeout.setReference("RFC 1661, Section 5.8, `Echo-Request and Echo-Reply'.")
if mibBuilder.loadTexts: pdnPppLinkTestEchoTestTimeout.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkTestEchoTestTimeout.setDescription("The maximum amount of time to wait for an Echo-Reply in response to an Echo-Request. If an Echo-Reply is not seen in the amount of time specified, the test will be considered `timed-out'. The maximum amount of time to wait as supported by the syntax is 5 minutes.")
pdnPppLinkTestSendDiscardTest = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOp", 1), ("sendDiscard", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnPppLinkTestSendDiscardTest.setReference("RFC 1661, Section 5.9, `Discard-Request'.")
if mibBuilder.loadTexts: pdnPppLinkTestSendDiscardTest.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkTestSendDiscardTest.setDescription('Controls the initiation of a PPP Discard-Request to the remote PPP entity. The value read from this object is noOp(1).')
pdnPppLinkTestLastEchoTestResults = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("success", 3), ("timedOut", 4), ("compareFailed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnPppLinkTestLastEchoTestResults.setReference("RFC 1661, Section 5.8, `Echo-Request and Echo-Reply'.")
if mibBuilder.loadTexts: pdnPppLinkTestLastEchoTestResults.setStatus('current')
if mibBuilder.loadTexts: pdnPppLinkTestLastEchoTestResults.setDescription('Displays the results of the last Echo Test. A value of none(1) will be returned if no Echo Tests have been performed. If an Echo Test is currently being performed and neither a Echo Reply was received nor the Echo Timeout Period has been satisfied, inProgress(2) will be read. If the last Echo Test received a Echo Reply and the echo data received matched that which was sent, a success(3) will be returned. If an Echo Test was initiated and no Echo Reply was received within the Echo Timeout Period, a timedOut(4) will be read. If the Echo Reply was returned, but the data received did not match the data that was sent, a compareFailed(5) will be read.')
pdnPppLcpExtCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 3, 1))
pdnPppLcpExtGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 3, 2))
pdnPppLcpExtCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 3, 1, 1)).setObjects(("PDN-PPP-LCP-EXT-MIB", "pdnPppLcpExtStateMachineGroup"), ("PDN-PPP-LCP-EXT-MIB", "pdnPppLcpExtEstablishFailedGroup"), ("PDN-PPP-LCP-EXT-MIB", "pdnPppLcpExtMagicNumberGroup"), ("PDN-PPP-LCP-EXT-MIB", "pdnPppLcpExtPacketCountersGroup"), ("PDN-PPP-LCP-EXT-MIB", "pdnPppLcpExtKeepAliveCountersGroup"), ("PDN-PPP-LCP-EXT-MIB", "pdnPppLcpExtPFCGroup"), ("PDN-PPP-LCP-EXT-MIB", "pdnPppLcpExtACFCGroup"), ("PDN-PPP-LCP-EXT-MIB", "pdnPppLcpExtKeepAliveConfGroup"), ("PDN-PPP-LCP-EXT-MIB", "pdnPppLcpExtEchoTestGroup"), ("PDN-PPP-LCP-EXT-MIB", "pdnPpppLcpExtDiscardTestGroup"), ("PDN-PPP-LCP-EXT-MIB", "pdnPpppLcpExtLinkStateCounterGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnPppLcpExtCompliance = pdnPppLcpExtCompliance.setStatus('current')
if mibBuilder.loadTexts: pdnPppLcpExtCompliance.setDescription('The compliance statement for network elements implementing PPP Link Control Protocol.')
pdnPppLcpExtObjGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 3, 2, 1))
pdnPppLcpExtAfnGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 3, 2, 2))
pdnPppLcpExtNtfyGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 3, 2, 3))
pdnPppLcpExtStateMachineGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 3, 2, 1, 1)).setObjects(("PDN-PPP-LCP-EXT-MIB", "pdnPppLinkStatusCurrState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnPppLcpExtStateMachineGroup = pdnPppLcpExtStateMachineGroup.setStatus('current')
if mibBuilder.loadTexts: pdnPppLcpExtStateMachineGroup.setDescription("Displays LCP State Machine's state.")
pdnPppLcpExtEstablishFailedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 3, 2, 1, 2)).setObjects(("PDN-PPP-LCP-EXT-MIB", "pdnPppLinkStatusEstablishFailedReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnPppLcpExtEstablishFailedGroup = pdnPppLcpExtEstablishFailedGroup.setStatus('current')
if mibBuilder.loadTexts: pdnPppLcpExtEstablishFailedGroup.setDescription('Displays the reason the last link establishment failed.')
pdnPppLcpExtMagicNumberGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 3, 2, 1, 3)).setObjects(("PDN-PPP-LCP-EXT-MIB", "pdnPppLinkStatusLocalToRemoteMagicNumber"), ("PDN-PPP-LCP-EXT-MIB", "pdnPppLinkStatusRemoteToLocalMagicNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnPppLcpExtMagicNumberGroup = pdnPppLcpExtMagicNumberGroup.setStatus('current')
if mibBuilder.loadTexts: pdnPppLcpExtMagicNumberGroup.setDescription('Displays the Magic Number negotiated.')
pdnPppLcpExtPacketCountersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 3, 2, 1, 4)).setObjects(("PDN-PPP-LCP-EXT-MIB", "pdnPppLinkStatusTotalSentConfigRequests"), ("PDN-PPP-LCP-EXT-MIB", "pdnPppLinkStatusTotalReceivedConfigRequests"), ("PDN-PPP-LCP-EXT-MIB", "pdnPppLinkStatusTotalSentConfigAcks"), ("PDN-PPP-LCP-EXT-MIB", "pdnPppLinkStatusTotalReceivedConfigAcks"), ("PDN-PPP-LCP-EXT-MIB", "pdnPppLinkStatusTotalSentConfigNaks"), ("PDN-PPP-LCP-EXT-MIB", "pdnPppLinkStatusTotalReceivedConfigNaks"), ("PDN-PPP-LCP-EXT-MIB", "pdnPppLinkStatusTotalSentConfigRejects"), ("PDN-PPP-LCP-EXT-MIB", "pdnPppLinkStatusTotalReceivedConfigRejects"), ("PDN-PPP-LCP-EXT-MIB", "pdnPppLinkStatusTotalSentTerminateRequests"), ("PDN-PPP-LCP-EXT-MIB", "pdnPppLinkStatusTotalReceivedTerminateRequests"), ("PDN-PPP-LCP-EXT-MIB", "pdnPppLinkStatusTotalSentTerminateAcks"), ("PDN-PPP-LCP-EXT-MIB", "pdnPppLinkStatusTotalReceivedTerminateAcks"), ("PDN-PPP-LCP-EXT-MIB", "pdnPppLinkStatusTotalSentCodeRejects"), ("PDN-PPP-LCP-EXT-MIB", "pdnPppLinkStatusTotalReceivedCodeRejects"), ("PDN-PPP-LCP-EXT-MIB", "pdnPppLinkStatusTotalSentProtocolRejects"), ("PDN-PPP-LCP-EXT-MIB", "pdnPppLinkStatusTotalReceivedProtocolRejects"), ("PDN-PPP-LCP-EXT-MIB", "pdnPppLinkStatusTotalSentEchoRequests"), ("PDN-PPP-LCP-EXT-MIB", "pdnPppLinkStatusTotalReceivedEchoRequests"), ("PDN-PPP-LCP-EXT-MIB", "pdnPppLinkStatusTotalSentEchoReplies"), ("PDN-PPP-LCP-EXT-MIB", "pdnPppLinkStatusTotalReceivedEchoReplies"), ("PDN-PPP-LCP-EXT-MIB", "pdnPppLinkStatusTotalSentDiscardRequests"), ("PDN-PPP-LCP-EXT-MIB", "pdnPppLinkStatusTotalReceivedDiscardRequests"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnPppLcpExtPacketCountersGroup = pdnPppLcpExtPacketCountersGroup.setStatus('current')
if mibBuilder.loadTexts: pdnPppLcpExtPacketCountersGroup.setDescription('Counters for various PPP LCP packets.')
pdnPppLcpExtKeepAliveCountersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 3, 2, 1, 5)).setObjects(("PDN-PPP-LCP-EXT-MIB", "pdnPppLinkStatusTotalSentKeepAlives"), ("PDN-PPP-LCP-EXT-MIB", "pdnPppLinkStatusTotalReceivedKeepAlives"), ("PDN-PPP-LCP-EXT-MIB", "pdnPppLinkStatusTotalKeepAlivesLost"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnPppLcpExtKeepAliveCountersGroup = pdnPppLcpExtKeepAliveCountersGroup.setStatus('current')
if mibBuilder.loadTexts: pdnPppLcpExtKeepAliveCountersGroup.setDescription("Counters relative to `Keep Alive'.")
pdnPppLcpExtPFCGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 3, 2, 1, 6)).setObjects(("PDN-PPP-LCP-EXT-MIB", "pdnPppLinkConfigPFC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnPppLcpExtPFCGroup = pdnPppLcpExtPFCGroup.setStatus('current')
if mibBuilder.loadTexts: pdnPppLcpExtPFCGroup.setDescription('Configuration for Protocol-Field Compression.')
pdnPppLcpExtACFCGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 3, 2, 1, 7)).setObjects(("PDN-PPP-LCP-EXT-MIB", "pdnPppLinkConfigACFC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnPppLcpExtACFCGroup = pdnPppLcpExtACFCGroup.setStatus('current')
if mibBuilder.loadTexts: pdnPppLcpExtACFCGroup.setDescription('Configuration for Data Link Layer Address and Control field compression.')
pdnPppLcpExtKeepAliveConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 3, 2, 1, 8)).setObjects(("PDN-PPP-LCP-EXT-MIB", "pdnPppLinkConfigKeepAliveQuietTime"), ("PDN-PPP-LCP-EXT-MIB", "pdnPppLinkConfigKeepAliveTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnPppLcpExtKeepAliveConfGroup = pdnPppLcpExtKeepAliveConfGroup.setStatus('current')
if mibBuilder.loadTexts: pdnPppLcpExtKeepAliveConfGroup.setDescription("Configuration of parameters relative to `Keep Alive'.")
pdnPppLcpExtEchoTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 3, 2, 1, 9)).setObjects(("PDN-PPP-LCP-EXT-MIB", "pdnPppLinkTestSendEchoTest"), ("PDN-PPP-LCP-EXT-MIB", "pdnPppLinkTestEchoTestTimeout"), ("PDN-PPP-LCP-EXT-MIB", "pdnPppLinkTestLastEchoTestResults"), ("PDN-PPP-LCP-EXT-MIB", "pdnPppLinkStatusTotalEchoRequestsTimeOuts"), ("PDN-PPP-LCP-EXT-MIB", "pdnPppLinkStatusTotalEchoRequestsBadData"), ("PDN-PPP-LCP-EXT-MIB", "pdnPppLinkStatusTotalEchoRequestsPassed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnPppLcpExtEchoTestGroup = pdnPppLcpExtEchoTestGroup.setStatus('current')
if mibBuilder.loadTexts: pdnPppLcpExtEchoTestGroup.setDescription('Support configuration, initiation, and results of an Echo Test.')
pdnPpppLcpExtDiscardTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 3, 2, 1, 10)).setObjects(("PDN-PPP-LCP-EXT-MIB", "pdnPppLinkTestSendDiscardTest"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnPpppLcpExtDiscardTestGroup = pdnPpppLcpExtDiscardTestGroup.setStatus('current')
if mibBuilder.loadTexts: pdnPpppLcpExtDiscardTestGroup.setDescription('Supports the initiation of a Discard Test.')
pdnPpppLcpExtLinkStateCounterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 6, 28, 3, 2, 1, 11)).setObjects(("PDN-PPP-LCP-EXT-MIB", "pdnPppLinkStatusTotalTerminates"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnPpppLcpExtLinkStateCounterGroup = pdnPpppLcpExtLinkStateCounterGroup.setStatus('current')
if mibBuilder.loadTexts: pdnPpppLcpExtLinkStateCounterGroup.setDescription('Counters relative to the link state.')
mibBuilder.exportSymbols("PDN-PPP-LCP-EXT-MIB", pdnPppLcpExtConformance=pdnPppLcpExtConformance, pdnPppLcpExtObjects=pdnPppLcpExtObjects, pdnPppLcpExtAfnGroups=pdnPppLcpExtAfnGroups, pdnPppLcpExtNotifications=pdnPppLcpExtNotifications, pdnPppLinkStatusTotalSentTerminateAcks=pdnPppLinkStatusTotalSentTerminateAcks, pdnPppLinkStatusExtEntry=pdnPppLinkStatusExtEntry, pdnPppLcpExtCompliance=pdnPppLcpExtCompliance, pdnPppLcpExtMagicNumberGroup=pdnPppLcpExtMagicNumberGroup, PYSNMP_MODULE_ID=pdnPppLcpExtMIB, pdnPppLcpExtCompliances=pdnPppLcpExtCompliances, pdnPppLinkStatusTotalReceivedConfigAcks=pdnPppLinkStatusTotalReceivedConfigAcks, pdnPppLinkStatusTotalSentEchoReplies=pdnPppLinkStatusTotalSentEchoReplies, pdnPppLinkConfigKeepAliveQuietTime=pdnPppLinkConfigKeepAliveQuietTime, pdnPppLinkStatusTotalReceivedKeepAlives=pdnPppLinkStatusTotalReceivedKeepAlives, pdnPppLinkStatusTotalSentCodeRejects=pdnPppLinkStatusTotalSentCodeRejects, pdnPppLcpExtObjGroups=pdnPppLcpExtObjGroups, pdnPppLcpExtKeepAliveCountersGroup=pdnPppLcpExtKeepAliveCountersGroup, pdnPppLcpExtStateMachineGroup=pdnPppLcpExtStateMachineGroup, pdnPppLinkStatusCurrState=pdnPppLinkStatusCurrState, pdnPppLinkStatusTotalReceivedConfigRejects=pdnPppLinkStatusTotalReceivedConfigRejects, pdnPppLinkStatusTotalSentProtocolRejects=pdnPppLinkStatusTotalSentProtocolRejects, pdnPppLinkStatusLocalToRemoteMagicNumber=pdnPppLinkStatusLocalToRemoteMagicNumber, pdnPppLinkStatusTotalSentConfigRejects=pdnPppLinkStatusTotalSentConfigRejects, pdnPppLinkTestEchoTestTimeout=pdnPppLinkTestEchoTestTimeout, pdnPppLinkTestSendDiscardTest=pdnPppLinkTestSendDiscardTest, pdnPppLinkStatusTotalReceivedDiscardRequests=pdnPppLinkStatusTotalReceivedDiscardRequests, pdnPppLinkTestLastEchoTestResults=pdnPppLinkTestLastEchoTestResults, pdnPppLcpExtAFNs=pdnPppLcpExtAFNs, pdnPppLinkStatusTotalEchoRequestsTimeOuts=pdnPppLinkStatusTotalEchoRequestsTimeOuts, pdnPppLcpExtEstablishFailedGroup=pdnPppLcpExtEstablishFailedGroup, pdnPppLinkStatusTotalEchoRequestsPassed=pdnPppLinkStatusTotalEchoRequestsPassed, pdnPppLinkConfigPFC=pdnPppLinkConfigPFC, pdnPppLcpExtEchoTestGroup=pdnPppLcpExtEchoTestGroup, pdnPppLcpExtPFCGroup=pdnPppLcpExtPFCGroup, pdnPppLinkTestTable=pdnPppLinkTestTable, pdnPppLinkTestEntry=pdnPppLinkTestEntry, pdnPppLinkStatusTotalReceivedConfigRequests=pdnPppLinkStatusTotalReceivedConfigRequests, pdnPppLcpExtPacketCountersGroup=pdnPppLcpExtPacketCountersGroup, pdnPppLinkStatusExtTable=pdnPppLinkStatusExtTable, pdnPppLinkStatusTotalSentConfigRequests=pdnPppLinkStatusTotalSentConfigRequests, pdnPppLinkStatusTotalReceivedTerminateAcks=pdnPppLinkStatusTotalReceivedTerminateAcks, pdnPppLinkStatusTotalReceivedEchoRequests=pdnPppLinkStatusTotalReceivedEchoRequests, pdnPppLcpExtMIB=pdnPppLcpExtMIB, pdnPppLinkStatusTotalEchoRequestsBadData=pdnPppLinkStatusTotalEchoRequestsBadData, pdnPppLinkTestSendEchoTest=pdnPppLinkTestSendEchoTest, pdnPppLinkStatusRemoteToLocalMagicNumber=pdnPppLinkStatusRemoteToLocalMagicNumber, pdnPppLcpExtKeepAliveConfGroup=pdnPppLcpExtKeepAliveConfGroup, pdnPppLcpExtACFCGroup=pdnPppLcpExtACFCGroup, pdnPppLinkStatusTotalSentConfigNaks=pdnPppLinkStatusTotalSentConfigNaks, pdnPppLinkStatusTotalReceivedProtocolRejects=pdnPppLinkStatusTotalReceivedProtocolRejects, pdnPpppLcpExtDiscardTestGroup=pdnPpppLcpExtDiscardTestGroup, pdnPppLinkStatusTotalSentConfigAcks=pdnPppLinkStatusTotalSentConfigAcks, pdnPppLinkStatusTotalSentDiscardRequests=pdnPppLinkStatusTotalSentDiscardRequests, pdnPppLinkStatusEstablishFailedReason=pdnPppLinkStatusEstablishFailedReason, pdnPppLinkStatusTotalSentEchoRequests=pdnPppLinkStatusTotalSentEchoRequests, pdnPppLinkStatusTotalReceivedEchoReplies=pdnPppLinkStatusTotalReceivedEchoReplies, pdnPppLinkStatusTotalSentKeepAlives=pdnPppLinkStatusTotalSentKeepAlives, pdnPppLinkStatusTotalKeepAlivesLost=pdnPppLinkStatusTotalKeepAlivesLost, pdnPppLinkConfigKeepAliveTimeout=pdnPppLinkConfigKeepAliveTimeout, pdnPppLcpExtNtfyGroups=pdnPppLcpExtNtfyGroups, pdnPppLinkStatusTotalReceivedConfigNaks=pdnPppLinkStatusTotalReceivedConfigNaks, pdnPppLinkStatusTotalTerminates=pdnPppLinkStatusTotalTerminates, pdnPppLinkConfigExtTable=pdnPppLinkConfigExtTable, pdnPppLinkStatusTotalReceivedTerminateRequests=pdnPppLinkStatusTotalReceivedTerminateRequests, pdnPppLinkConfigExtEntry=pdnPppLinkConfigExtEntry, pdnPppLinkStatusTotalSentTerminateRequests=pdnPppLinkStatusTotalSentTerminateRequests, pdnPppLinkConfigACFC=pdnPppLinkConfigACFC, pdnPpppLcpExtLinkStateCounterGroup=pdnPpppLcpExtLinkStateCounterGroup, pdnPppLcpExtGroups=pdnPppLcpExtGroups, pdnPppLinkStatusTotalReceivedCodeRejects=pdnPppLinkStatusTotalReceivedCodeRejects)
