#
# PySNMP MIB module F10-OPENFLOW-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/F10-OPENFLOW-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:11:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
f10Mgmt, = mibBuilder.importSymbols("FORCE10-SMI", "f10Mgmt")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetPortNumber, InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddressType", "InetAddress")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Integer32, Counter64, Bits, Gauge32, ObjectIdentity, ModuleIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, NotificationType, TimeTicks, Unsigned32, IpAddress, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter64", "Bits", "Gauge32", "ObjectIdentity", "ModuleIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "NotificationType", "TimeTicks", "Unsigned32", "IpAddress", "Counter32")
TextualConvention, MacAddress, TruthValue, TimeStamp, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "TruthValue", "TimeStamp", "DisplayString")
f10OpenFlow = ModuleIdentity((1, 3, 6, 1, 4, 1, 6027, 3, 20))
if mibBuilder.loadTexts: f10OpenFlow.setLastUpdated('201203271200Z')
if mibBuilder.loadTexts: f10OpenFlow.setOrganization('Dell Inc')
if mibBuilder.loadTexts: f10OpenFlow.setContactInfo('http://www.force10networks.com/support')
if mibBuilder.loadTexts: f10OpenFlow.setDescription('Dell Networking OS OpenFlow MIB provides information base of OpenFlow enabled Dell Networking OS Switch. This MIB exposes information about the Switch in OpenFlow perspective. Information of : 1) OpenFlow Instances configured, 2) Controller that configured it, 3) Ports that are configured under these instances, 4) VLANs that are part of these instances and 5) Flows & Flowactions configured are shared via this MIB.')
ofSwitchObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1))
ofSwitchNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 20, 2))
class DataPathIdentifier(TextualConvention, OctetString):
    description = 'The representation of an Open Flow Instance DataPath Identifier.'
    status = 'current'
    displayHint = '1x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

ofSwitchId = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofSwitchId.setStatus('current')
if mibBuilder.loadTexts: ofSwitchId.setDescription('Open Flow Switch Id: Identifier of this Switch')
ofManufacturerDesc = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofManufacturerDesc.setStatus('current')
if mibBuilder.loadTexts: ofManufacturerDesc.setDescription('Open Flow Manufacturer Description: Provides info about the OF Switch manufacturer')
ofHardwareDesc = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofHardwareDesc.setStatus('current')
if mibBuilder.loadTexts: ofHardwareDesc.setDescription('Open Flow Switch HardwareDescription')
ofSoftwareDesc = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofSoftwareDesc.setStatus('current')
if mibBuilder.loadTexts: ofSoftwareDesc.setDescription('Open Flow Switch SoftwareDescription')
ofSwitchSerialNo = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofSwitchSerialNo.setStatus('current')
if mibBuilder.loadTexts: ofSwitchSerialNo.setDescription('Open Flow Switch Serial No: Provides the serial number of the switch')
ofSwitchVersion = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofSwitchVersion.setStatus('current')
if mibBuilder.loadTexts: ofSwitchVersion.setDescription('Open Flow Switch Version')
ofInstTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 7), )
if mibBuilder.loadTexts: ofInstTable.setStatus('current')
if mibBuilder.loadTexts: ofInstTable.setDescription('Open Flow Instance Table')
ofInstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 7, 1), ).setIndexNames((0, "F10-OPENFLOW-MIB", "ofInstId"))
if mibBuilder.loadTexts: ofInstEntry.setStatus('current')
if mibBuilder.loadTexts: ofInstEntry.setDescription('Open Flow Instance Entry: This provides the sequence of objects that describes the properties of the Instance. ofInstId uniquely identifies the instance and hence it becomes an index')
ofInstId = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: ofInstId.setStatus('current')
if mibBuilder.loadTexts: ofInstId.setDescription('Open Flow Instance Identifier')
ofInstAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofInstAdminState.setStatus('current')
if mibBuilder.loadTexts: ofInstAdminState.setDescription('Open Flow Instance Admin State: tells whether this instance is enabled or not.')
ofInstIntfType = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("port", 1), ("vlan", 2), ("any", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofInstIntfType.setStatus('current')
if mibBuilder.loadTexts: ofInstIntfType.setDescription('Open Flow Instance Interface Type: tells whether this instance is a Port or VLAN or ANY')
ofInstDataPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 7, 1, 4), DataPathIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofInstDataPathId.setStatus('current')
if mibBuilder.loadTexts: ofInstDataPathId.setDescription('Open Flow Instance DataPath Identifier')
ofInstConnectTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 7, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ofInstConnectTimeout.setStatus('current')
if mibBuilder.loadTexts: ofInstConnectTimeout.setDescription('Open Flow Instance Connection Timeout: Tells the time after which the connection would be dropped')
ofInstEchoReplyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 7, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ofInstEchoReplyTimeout.setStatus('current')
if mibBuilder.loadTexts: ofInstEchoReplyTimeout.setDescription('Open Flow Instance Echo Reply Timeout: Tells the max time for which the Echo message would wait for reply')
ofInstEchoReqInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 7, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofInstEchoReqInterval.setStatus('current')
if mibBuilder.loadTexts: ofInstEchoReqInterval.setDescription('Open Flow Instance Echo Request Interval: Tells how often the Echo message would be sent')
ofInstNumFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 7, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofInstNumFlows.setStatus('current')
if mibBuilder.loadTexts: ofInstNumFlows.setDescription('The current number of flows in this Instance')
ofInstSuppCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 7, 1, 9), Bits().clone(namedValues=NamedValues(("port", 0), ("table", 1), ("flow", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofInstSuppCapabilities.setStatus('current')
if mibBuilder.loadTexts: ofInstSuppCapabilities.setDescription('Open Flow Instance Supported Capabilities: Gives the supported capabilities information by setting the appropriate BITS')
ofInstSuppActions = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 7, 1, 10), Bits().clone(namedValues=NamedValues(("output", 0), ("set-vlan", 1), ("set-pcp", 2), ("set-smac", 3), ("set-dmac", 4), ("set-tos", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofInstSuppActions.setStatus('current')
if mibBuilder.loadTexts: ofInstSuppActions.setDescription('Open Flow Instance Supported Actions: Gives the supported Action information by setting the appropriate BITS')
ofCntlrTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 8), )
if mibBuilder.loadTexts: ofCntlrTable.setStatus('current')
if mibBuilder.loadTexts: ofCntlrTable.setDescription('Open Flow Controller Table: This table provides information about the Controller')
ofCntlrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 8, 1), ).setIndexNames((0, "F10-OPENFLOW-MIB", "ofInstId"), (0, "F10-OPENFLOW-MIB", "ofCntlrId"))
if mibBuilder.loadTexts: ofCntlrEntry.setStatus('current')
if mibBuilder.loadTexts: ofCntlrEntry.setDescription('Open Flow Controller Entry')
ofCntlrId = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: ofCntlrId.setStatus('current')
if mibBuilder.loadTexts: ofCntlrId.setDescription('Open Flow Controller Id: This provides Id of this controller')
ofCntlrAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 8, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofCntlrAddrType.setStatus('current')
if mibBuilder.loadTexts: ofCntlrAddrType.setDescription("Open Flow Controller IP Address Type : The address type of the controller's IP address. If no controller is configured yet then this is set to unknown(0).")
ofCntlrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 8, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofCntlrAddr.setStatus('current')
if mibBuilder.loadTexts: ofCntlrAddr.setDescription('Open Flow Controller IP Address: This gives the IP Address of the controller. The InetAddressType of this is given by the ofCntlrAddrType object.')
ofCntlrPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 8, 1, 4), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofCntlrPortNumber.setStatus('current')
if mibBuilder.loadTexts: ofCntlrPortNumber.setDescription('Open Flow Controller Port: This provides the port number to be used to communicate with the controller')
ofCntlrProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tls", 1), ("tcp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofCntlrProtocol.setStatus('current')
if mibBuilder.loadTexts: ofCntlrProtocol.setDescription('Open Flow Controller Protocol: Tells which protocol is being used by this Controller for communication, either TLS or TCP')
ofCntlrConState = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofCntlrConState.setStatus('current')
if mibBuilder.loadTexts: ofCntlrConState.setDescription('Open Flow Controller Connection State')
ofPortTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 9), )
if mibBuilder.loadTexts: ofPortTable.setStatus('current')
if mibBuilder.loadTexts: ofPortTable.setDescription('Open Flow Port Table')
ofPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 9, 1), ).setIndexNames((0, "F10-OPENFLOW-MIB", "ofInstId"), (0, "F10-OPENFLOW-MIB", "ofPortIfIndex"))
if mibBuilder.loadTexts: ofPortEntry.setStatus('current')
if mibBuilder.loadTexts: ofPortEntry.setDescription('Open Flow Port Entry has ports assigned to the instance')
ofPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 9, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ofPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: ofPortIfIndex.setDescription('The ifIndex value corresponding to this port')
ofPortAssociationType = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("instancePort", 1), ("instVlanPort", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofPortAssociationType.setStatus('current')
if mibBuilder.loadTexts: ofPortAssociationType.setDescription('Open Flow Port Association Type: Tells whether this port is directly assigned to the instance or via VLAN.')
ofVlanTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 10), )
if mibBuilder.loadTexts: ofVlanTable.setStatus('current')
if mibBuilder.loadTexts: ofVlanTable.setDescription('Open Flow VLAN Table containing port list information for each VLAN configured into the instance.')
ofVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 10, 1), ).setIndexNames((0, "F10-OPENFLOW-MIB", "ofInstId"), (0, "F10-OPENFLOW-MIB", "ofVlanIfIndex"))
if mibBuilder.loadTexts: ofVlanEntry.setStatus('current')
if mibBuilder.loadTexts: ofVlanEntry.setDescription('Open Flow VLAN Entry. Restricted to max 8 VLANs per instance.')
ofVlanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 10, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ofVlanIfIndex.setStatus('current')
if mibBuilder.loadTexts: ofVlanIfIndex.setDescription('The ifIndex value corresponding to this VLAN.')
ofVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 10, 1, 2), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofVlanId.setStatus('current')
if mibBuilder.loadTexts: ofVlanId.setDescription('Open Flow Vlan Id: VALN-ID referring to this VLAN.')
ofFlowTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 11), )
if mibBuilder.loadTexts: ofFlowTable.setStatus('current')
if mibBuilder.loadTexts: ofFlowTable.setDescription('Open Flow FlowTable')
ofFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 11, 1), ).setIndexNames((0, "F10-OPENFLOW-MIB", "ofInstId"), (0, "F10-OPENFLOW-MIB", "ofFlowId"), (0, "F10-OPENFLOW-MIB", "ofFlowTblId"))
if mibBuilder.loadTexts: ofFlowEntry.setStatus('current')
if mibBuilder.loadTexts: ofFlowEntry.setDescription('Open Flow Instance Flow Entry')
ofFlowId = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 11, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ofFlowId.setStatus('current')
if mibBuilder.loadTexts: ofFlowId.setDescription('OpenFlow Flow Id')
ofFlowTblId = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 11, 1, 2), Unsigned32())
if mibBuilder.loadTexts: ofFlowTblId.setStatus('current')
if mibBuilder.loadTexts: ofFlowTblId.setDescription('OpenFlow Flow Table Id')
ofFlowPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofFlowPriority.setStatus('current')
if mibBuilder.loadTexts: ofFlowPriority.setDescription('OpenFlow Flow priority ')
ofFlowIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ofFlowIdleTime.setStatus('current')
if mibBuilder.loadTexts: ofFlowIdleTime.setDescription('OpenFlow Flow Idle Time')
ofFlowHardTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 11, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ofFlowHardTime.setStatus('current')
if mibBuilder.loadTexts: ofFlowHardTime.setDescription('OpenFlow Flow Hard Timeout')
ofFlowUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 11, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofFlowUpTime.setStatus('current')
if mibBuilder.loadTexts: ofFlowUpTime.setDescription('The time since the OpenFlow flow was configured to be up.')
ofFlowCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 11, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofFlowCookie.setStatus('current')
if mibBuilder.loadTexts: ofFlowCookie.setDescription('OpenFlow Flow Cookie String')
ofFlowPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 11, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofFlowPacketCount.setStatus('current')
if mibBuilder.loadTexts: ofFlowPacketCount.setDescription('OpenFlow Flow Packet Count')
ofFlowByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 11, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofFlowByteCount.setStatus('current')
if mibBuilder.loadTexts: ofFlowByteCount.setDescription('OpenFlow Flow Byte Count')
ofFlowMatchParamsTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 12), )
if mibBuilder.loadTexts: ofFlowMatchParamsTable.setStatus('current')
if mibBuilder.loadTexts: ofFlowMatchParamsTable.setDescription('Open Flow Match Parameter Table')
ofFlowMatchParamsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 12, 1), )
ofFlowEntry.registerAugmentions(("F10-OPENFLOW-MIB", "ofFlowMatchParamsEntry"))
ofFlowMatchParamsEntry.setIndexNames(*ofFlowEntry.getIndexNames())
if mibBuilder.loadTexts: ofFlowMatchParamsEntry.setStatus('current')
if mibBuilder.loadTexts: ofFlowMatchParamsEntry.setDescription('A set of parameters to be mactheded on a particular openFlow Table.')
ofFlowMatchInPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 12, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofFlowMatchInPort.setStatus('current')
if mibBuilder.loadTexts: ofFlowMatchInPort.setDescription("OpenFlow Flow Match Ingress Ports; Note that when the value of this object is the zero-length string, it indicates 'wild card'.")
ofFlowMatchEtherSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 12, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofFlowMatchEtherSrcAddr.setStatus('current')
if mibBuilder.loadTexts: ofFlowMatchEtherSrcAddr.setDescription("OpenFlow Flow Match Ethernet Source Address. Note that when the value of this object is the zero-length string, it indicates 'wild card'.")
ofFlowMatchEtherDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 12, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofFlowMatchEtherDstAddr.setStatus('current')
if mibBuilder.loadTexts: ofFlowMatchEtherDstAddr.setDescription("OpenFlow Flow Match Ethernet Destination Address. Note that when the value of this object is the zero-length string, it indicates 'wild card'.")
ofFlowMatchVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 12, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofFlowMatchVlanId.setStatus('current')
if mibBuilder.loadTexts: ofFlowMatchVlanId.setDescription("OpenFlow Flow Match Vlan Id. Note that when the value of this object is the zero-length string, it indicates 'wild card'.")
ofFlowMatchEthType = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 12, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofFlowMatchEthType.setStatus('current')
if mibBuilder.loadTexts: ofFlowMatchEthType.setDescription("OpenFlow Flow Match Ethernet Type. Note that when the value of this object is the zero-length string, it indicates 'wild card'.")
ofFlowMatchVlanPri = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 12, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofFlowMatchVlanPri.setStatus('current')
if mibBuilder.loadTexts: ofFlowMatchVlanPri.setDescription("OpenFlow Flow Match VLAN Priority. Note that when the value of this object is the zero-length string, it indicates 'wild card'.")
ofFlowMatchIpTos = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 12, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofFlowMatchIpTos.setStatus('current')
if mibBuilder.loadTexts: ofFlowMatchIpTos.setDescription('OpenFlow Flow Match IP TOS')
ofFlowMatchIpProto = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 12, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofFlowMatchIpProto.setStatus('current')
if mibBuilder.loadTexts: ofFlowMatchIpProto.setDescription('OpenFlow Flow match IP Protocol')
ofFlowMatchIpSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 12, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofFlowMatchIpSrcAddr.setStatus('current')
if mibBuilder.loadTexts: ofFlowMatchIpSrcAddr.setDescription("OpenFlow Flow Match IP Source Address. Note that when the value of this object is the zero-length string, it indicates 'wild card'.")
ofFlowMatchIpDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 12, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofFlowMatchIpDestAddr.setStatus('current')
if mibBuilder.loadTexts: ofFlowMatchIpDestAddr.setDescription("OpenFlow Flow Match IP Destination Adress. Note that when the value of this object is the zero-length string, it indicates 'wild card'.")
ofFlowMatchTpSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 12, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofFlowMatchTpSrcPort.setStatus('current')
if mibBuilder.loadTexts: ofFlowMatchTpSrcPort.setDescription("OpenFlow Flow Match Transport Source Port. Note that when the value of this object is the zero-length string, it indicates 'wild card'.")
ofFlowMatchTpDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 12, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofFlowMatchTpDstPort.setStatus('current')
if mibBuilder.loadTexts: ofFlowMatchTpDstPort.setDescription("OpenFlow Flow Match Transport Destination Port. Note that when the value of this object is the zero-length string, it indicates 'wild card'.")
ofFlowActionTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 13), )
if mibBuilder.loadTexts: ofFlowActionTable.setStatus('current')
if mibBuilder.loadTexts: ofFlowActionTable.setDescription('OpenFlow Flow Action Table')
ofFlowActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 13, 1), ).setIndexNames((0, "F10-OPENFLOW-MIB", "ofInstId"), (0, "F10-OPENFLOW-MIB", "ofFlowId"), (0, "F10-OPENFLOW-MIB", "ofFlowTblId"), (0, "F10-OPENFLOW-MIB", "ofFlowActionId"))
if mibBuilder.loadTexts: ofFlowActionEntry.setStatus('current')
if mibBuilder.loadTexts: ofFlowActionEntry.setDescription('OpenFlow Flow Action Entry')
ofFlowActionId = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 13, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ofFlowActionId.setStatus('current')
if mibBuilder.loadTexts: ofFlowActionId.setDescription('Open Flow Action Id')
ofFlowActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 65535))).clone(namedValues=NamedValues(("outToSwitchPort", 1), ("setVlanVid", 2), ("setVlanPcp", 3), ("stripVlan", 4), ("setDlSrc", 5), ("setDlDst", 6), ("setNetworkSrc", 7), ("setNetworkDst", 8), ("setNetworkTos", 9), ("setTpSrc", 10), ("setTpDest", 11), ("outToQueue", 12), ("vendor", 65535)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofFlowActionType.setStatus('current')
if mibBuilder.loadTexts: ofFlowActionType.setDescription('OpenFlow Flow Action Type - Following are the supported Actions outToSwitchPort -> Output to switch port. setVlanVid -> Set the 802.1q VLAN id. setVlanPcp -> Set the 802.1q priority. stripVlan -> Strip the 802.1q header. setDlSrc -> Ethernet source address. setDlDst -> Ethernet destination address. setNetworkSrc -> IP source address. setNetworkDst -> IP destination address. setNetworkTos -> IP ToS (DSCP field, 6 bits). setTpSrc -> TCP/UDP source port. setTpDest -> TCP/UDP destination port. outToQueue -> Output to queue. vendor -> Vendor specific action ')
ofFlowActionSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 13, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofFlowActionSrcMac.setStatus('current')
if mibBuilder.loadTexts: ofFlowActionSrcMac.setDescription('OpenFlow Flow Action Source Mac address')
ofFlowActionDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 13, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofFlowActionDstMac.setStatus('current')
if mibBuilder.loadTexts: ofFlowActionDstMac.setDescription('OpenFlow Flow Action Destination Mac')
ofFlowActionPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 13, 1, 5), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofFlowActionPortIndex.setStatus('current')
if mibBuilder.loadTexts: ofFlowActionPortIndex.setDescription('Ifindex value of OpenFlow Flow Action Port')
ofFlowActionVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 13, 1, 6), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofFlowActionVlanId.setStatus('current')
if mibBuilder.loadTexts: ofFlowActionVlanId.setDescription('OpenFlow Flow Action VLAN ID')
ofFlowActionMaxLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 13, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofFlowActionMaxLen.setStatus('current')
if mibBuilder.loadTexts: ofFlowActionMaxLen.setDescription('OpenFlow Flow Action Max Length')
ofFlowActionVlanPcp = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 13, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofFlowActionVlanPcp.setStatus('current')
if mibBuilder.loadTexts: ofFlowActionVlanPcp.setDescription('OpenFlow Flow Action VLAN PCP')
ofFlowActionNWTos = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 13, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ofFlowActionNWTos.setStatus('current')
if mibBuilder.loadTexts: ofFlowActionNWTos.setDescription('OpenFlow Flow Action Network TOS')
ofSwitchNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 20, 2, 0))
ofSwitchNotifyVariable = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 20, 2, 1))
ofSwitchFlowTableSrc = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 20, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ifp", 1), ("vlan", 2), ("dmac", 3), ("route", 4), ("lb", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ofSwitchFlowTableSrc.setStatus('current')
if mibBuilder.loadTexts: ofSwitchFlowTableSrc.setDescription(' The unique ID of an OpenFlow Table. Used by ofSwitchFlowTableFull trap.')
ofSwitchCntlrSessionStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 20, 2, 0, 1)).setObjects(("F10-OPENFLOW-MIB", "ofCntlrConState"))
if mibBuilder.loadTexts: ofSwitchCntlrSessionStatusChanged.setStatus('current')
if mibBuilder.loadTexts: ofSwitchCntlrSessionStatusChanged.setDescription("This notification is sent when ever Controller's Session Status has changed.")
ofSwitchFlowTableFull = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 20, 2, 0, 2)).setObjects(("F10-OPENFLOW-MIB", "ofSwitchFlowTableSrc"))
if mibBuilder.loadTexts: ofSwitchFlowTableFull.setStatus('current')
if mibBuilder.loadTexts: ofSwitchFlowTableFull.setDescription('This notification is sent when ever Flow Table reached its maximum capacity. ofSwitchFlowTableSrc gives the id of the Flow Table that reached max flows')
ofSwitchMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 14))
ofSwitchMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 14, 1))
ofSwitchMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 14, 2))
ofSwitchMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 14, 1, 1)).setObjects(("F10-OPENFLOW-MIB", "ofSwitchScalarGroup"), ("F10-OPENFLOW-MIB", "ofInstanceGroup"), ("F10-OPENFLOW-MIB", "ofControllerGroup"), ("F10-OPENFLOW-MIB", "ofPortGroup"), ("F10-OPENFLOW-MIB", "ofVlanGroup"), ("F10-OPENFLOW-MIB", "ofFlowGroup"), ("F10-OPENFLOW-MIB", "ofFlowMatchParamsGroup"), ("F10-OPENFLOW-MIB", "ofFlowActionGroup"), ("F10-OPENFLOW-MIB", "ofSwitchMibNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ofSwitchMibCompliance = ofSwitchMibCompliance.setStatus('current')
if mibBuilder.loadTexts: ofSwitchMibCompliance.setDescription('The compliance statement for the Dell Networking OS OpenFlow MIB.')
ofSwitchScalarGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 14, 2, 1)).setObjects(("F10-OPENFLOW-MIB", "ofSwitchId"), ("F10-OPENFLOW-MIB", "ofManufacturerDesc"), ("F10-OPENFLOW-MIB", "ofHardwareDesc"), ("F10-OPENFLOW-MIB", "ofSoftwareDesc"), ("F10-OPENFLOW-MIB", "ofSwitchSerialNo"), ("F10-OPENFLOW-MIB", "ofSwitchVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ofSwitchScalarGroup = ofSwitchScalarGroup.setStatus('current')
if mibBuilder.loadTexts: ofSwitchScalarGroup.setDescription('This represents group of objects that provides OF Switch information.')
ofInstanceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 14, 2, 2)).setObjects(("F10-OPENFLOW-MIB", "ofInstAdminState"), ("F10-OPENFLOW-MIB", "ofInstIntfType"), ("F10-OPENFLOW-MIB", "ofInstDataPathId"), ("F10-OPENFLOW-MIB", "ofInstConnectTimeout"), ("F10-OPENFLOW-MIB", "ofInstEchoReplyTimeout"), ("F10-OPENFLOW-MIB", "ofInstEchoReqInterval"), ("F10-OPENFLOW-MIB", "ofInstNumFlows"), ("F10-OPENFLOW-MIB", "ofInstSuppCapabilities"), ("F10-OPENFLOW-MIB", "ofInstSuppActions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ofInstanceGroup = ofInstanceGroup.setStatus('current')
if mibBuilder.loadTexts: ofInstanceGroup.setDescription('This represents group of objects that provides OF Instance information.')
ofControllerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 14, 2, 3)).setObjects(("F10-OPENFLOW-MIB", "ofCntlrAddrType"), ("F10-OPENFLOW-MIB", "ofCntlrAddr"), ("F10-OPENFLOW-MIB", "ofCntlrPortNumber"), ("F10-OPENFLOW-MIB", "ofCntlrProtocol"), ("F10-OPENFLOW-MIB", "ofCntlrConState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ofControllerGroup = ofControllerGroup.setStatus('current')
if mibBuilder.loadTexts: ofControllerGroup.setDescription('This represents group of objects that provides OF Controller information.')
ofPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 14, 2, 4)).setObjects(("F10-OPENFLOW-MIB", "ofPortAssociationType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ofPortGroup = ofPortGroup.setStatus('current')
if mibBuilder.loadTexts: ofPortGroup.setDescription('This represents group of objects that provides information about OF Port that corresponds to OF Instance.')
ofVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 14, 2, 5)).setObjects(("F10-OPENFLOW-MIB", "ofVlanId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ofVlanGroup = ofVlanGroup.setStatus('current')
if mibBuilder.loadTexts: ofVlanGroup.setDescription('This represents group of objects that provides information about OF VLAN that corresponds to OF Instance.')
ofFlowGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 14, 2, 6)).setObjects(("F10-OPENFLOW-MIB", "ofFlowPriority"), ("F10-OPENFLOW-MIB", "ofFlowIdleTime"), ("F10-OPENFLOW-MIB", "ofFlowHardTime"), ("F10-OPENFLOW-MIB", "ofFlowUpTime"), ("F10-OPENFLOW-MIB", "ofFlowCookie"), ("F10-OPENFLOW-MIB", "ofFlowPacketCount"), ("F10-OPENFLOW-MIB", "ofFlowByteCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ofFlowGroup = ofFlowGroup.setStatus('current')
if mibBuilder.loadTexts: ofFlowGroup.setDescription('This represents group of objects that provides OF Flow information.')
ofFlowMatchParamsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 14, 2, 7)).setObjects(("F10-OPENFLOW-MIB", "ofFlowMatchInPort"), ("F10-OPENFLOW-MIB", "ofFlowMatchEtherSrcAddr"), ("F10-OPENFLOW-MIB", "ofFlowMatchEtherDstAddr"), ("F10-OPENFLOW-MIB", "ofFlowMatchVlanId"), ("F10-OPENFLOW-MIB", "ofFlowMatchEthType"), ("F10-OPENFLOW-MIB", "ofFlowMatchVlanPri"), ("F10-OPENFLOW-MIB", "ofFlowMatchIpTos"), ("F10-OPENFLOW-MIB", "ofFlowMatchIpProto"), ("F10-OPENFLOW-MIB", "ofFlowMatchIpSrcAddr"), ("F10-OPENFLOW-MIB", "ofFlowMatchIpDestAddr"), ("F10-OPENFLOW-MIB", "ofFlowMatchTpSrcPort"), ("F10-OPENFLOW-MIB", "ofFlowMatchTpDstPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ofFlowMatchParamsGroup = ofFlowMatchParamsGroup.setStatus('current')
if mibBuilder.loadTexts: ofFlowMatchParamsGroup.setDescription('This represents group of objects that provides OF Flow match information.')
ofFlowActionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 14, 2, 8)).setObjects(("F10-OPENFLOW-MIB", "ofFlowActionType"), ("F10-OPENFLOW-MIB", "ofFlowActionSrcMac"), ("F10-OPENFLOW-MIB", "ofFlowActionDstMac"), ("F10-OPENFLOW-MIB", "ofFlowActionPortIndex"), ("F10-OPENFLOW-MIB", "ofFlowActionVlanId"), ("F10-OPENFLOW-MIB", "ofFlowActionMaxLen"), ("F10-OPENFLOW-MIB", "ofFlowActionVlanPcp"), ("F10-OPENFLOW-MIB", "ofFlowActionNWTos"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ofFlowActionGroup = ofFlowActionGroup.setStatus('current')
if mibBuilder.loadTexts: ofFlowActionGroup.setDescription('This represents group of objects that provides information about OF Flow Actions.')
ofSwitchMibNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6027, 3, 20, 1, 14, 2, 9)).setObjects(("F10-OPENFLOW-MIB", "ofSwitchCntlrSessionStatusChanged"), ("F10-OPENFLOW-MIB", "ofSwitchFlowTableFull"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ofSwitchMibNotificationsGroup = ofSwitchMibNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: ofSwitchMibNotificationsGroup.setDescription('This represents Notification object of OF Switch.')
mibBuilder.exportSymbols("F10-OPENFLOW-MIB", ofVlanGroup=ofVlanGroup, ofFlowEntry=ofFlowEntry, ofInstanceGroup=ofInstanceGroup, ofInstEntry=ofInstEntry, ofSwitchFlowTableSrc=ofSwitchFlowTableSrc, ofFlowByteCount=ofFlowByteCount, PYSNMP_MODULE_ID=f10OpenFlow, ofPortTable=ofPortTable, ofSwitchMibConformance=ofSwitchMibConformance, ofInstDataPathId=ofInstDataPathId, ofFlowActionGroup=ofFlowActionGroup, ofFlowMatchParamsEntry=ofFlowMatchParamsEntry, ofFlowCookie=ofFlowCookie, ofSwitchMibNotificationsGroup=ofSwitchMibNotificationsGroup, ofVlanTable=ofVlanTable, ofPortEntry=ofPortEntry, ofInstAdminState=ofInstAdminState, ofFlowActionVlanId=ofFlowActionVlanId, ofControllerGroup=ofControllerGroup, ofHardwareDesc=ofHardwareDesc, ofManufacturerDesc=ofManufacturerDesc, ofSwitchMibCompliances=ofSwitchMibCompliances, ofInstTable=ofInstTable, ofFlowActionMaxLen=ofFlowActionMaxLen, ofFlowId=ofFlowId, ofSwitchVersion=ofSwitchVersion, ofSoftwareDesc=ofSoftwareDesc, ofFlowActionEntry=ofFlowActionEntry, ofInstSuppCapabilities=ofInstSuppCapabilities, ofFlowIdleTime=ofFlowIdleTime, ofFlowHardTime=ofFlowHardTime, ofSwitchNotifications=ofSwitchNotifications, ofInstIntfType=ofInstIntfType, ofCntlrConState=ofCntlrConState, ofFlowUpTime=ofFlowUpTime, ofCntlrAddrType=ofCntlrAddrType, ofFlowMatchEthType=ofFlowMatchEthType, ofSwitchMibGroups=ofSwitchMibGroups, ofInstNumFlows=ofInstNumFlows, ofFlowMatchIpTos=ofFlowMatchIpTos, ofFlowActionDstMac=ofFlowActionDstMac, ofSwitchId=ofSwitchId, DataPathIdentifier=DataPathIdentifier, ofFlowMatchParamsGroup=ofFlowMatchParamsGroup, ofFlowMatchParamsTable=ofFlowMatchParamsTable, ofSwitchCntlrSessionStatusChanged=ofSwitchCntlrSessionStatusChanged, ofCntlrAddr=ofCntlrAddr, ofInstSuppActions=ofInstSuppActions, ofFlowMatchVlanId=ofFlowMatchVlanId, ofSwitchObjects=ofSwitchObjects, ofSwitchFlowTableFull=ofSwitchFlowTableFull, ofFlowPriority=ofFlowPriority, ofCntlrProtocol=ofCntlrProtocol, ofFlowMatchTpSrcPort=ofFlowMatchTpSrcPort, ofFlowGroup=ofFlowGroup, ofVlanEntry=ofVlanEntry, ofInstEchoReqInterval=ofInstEchoReqInterval, ofCntlrId=ofCntlrId, ofSwitchMibCompliance=ofSwitchMibCompliance, ofFlowActionNWTos=ofFlowActionNWTos, ofVlanId=ofVlanId, ofFlowMatchTpDstPort=ofFlowMatchTpDstPort, f10OpenFlow=f10OpenFlow, ofSwitchScalarGroup=ofSwitchScalarGroup, ofPortAssociationType=ofPortAssociationType, ofFlowMatchInPort=ofFlowMatchInPort, ofPortGroup=ofPortGroup, ofFlowTable=ofFlowTable, ofFlowActionVlanPcp=ofFlowActionVlanPcp, ofSwitchNotifyVariable=ofSwitchNotifyVariable, ofFlowMatchIpProto=ofFlowMatchIpProto, ofSwitchNotification=ofSwitchNotification, ofCntlrEntry=ofCntlrEntry, ofFlowTblId=ofFlowTblId, ofFlowMatchIpSrcAddr=ofFlowMatchIpSrcAddr, ofFlowActionId=ofFlowActionId, ofFlowMatchEtherSrcAddr=ofFlowMatchEtherSrcAddr, ofFlowMatchEtherDstAddr=ofFlowMatchEtherDstAddr, ofFlowMatchIpDestAddr=ofFlowMatchIpDestAddr, ofPortIfIndex=ofPortIfIndex, ofInstConnectTimeout=ofInstConnectTimeout, ofFlowActionSrcMac=ofFlowActionSrcMac, ofCntlrPortNumber=ofCntlrPortNumber, ofInstEchoReplyTimeout=ofInstEchoReplyTimeout, ofInstId=ofInstId, ofFlowPacketCount=ofFlowPacketCount, ofFlowActionType=ofFlowActionType, ofVlanIfIndex=ofVlanIfIndex, ofSwitchSerialNo=ofSwitchSerialNo, ofFlowMatchVlanPri=ofFlowMatchVlanPri, ofCntlrTable=ofCntlrTable, ofFlowActionPortIndex=ofFlowActionPortIndex, ofFlowActionTable=ofFlowActionTable)
