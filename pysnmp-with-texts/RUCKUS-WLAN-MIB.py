#
# PySNMP MIB module RUCKUS-WLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RUCKUS-WLAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:59:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
IpAddress, ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "IpAddress", "ifIndex", "InterfaceIndex")
ruckusCommonWLANModule, = mibBuilder.importSymbols("RUCKUS-ROOT-MIB", "ruckusCommonWLANModule")
RuckusAdminStatus, RuckusWEPKey, RuckusRadioMode, RuckusdB, RuckusSSID, RuckusWPAPassPhrase = mibBuilder.importSymbols("RUCKUS-TC-MIB", "RuckusAdminStatus", "RuckusWEPKey", "RuckusRadioMode", "RuckusdB", "RuckusSSID", "RuckusWPAPassPhrase")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ModuleIdentity, MibIdentifier, TimeTicks, Unsigned32, Counter64, Counter32, Bits, Gauge32, Integer32, IpAddress, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibIdentifier", "TimeTicks", "Unsigned32", "Counter64", "Counter32", "Bits", "Gauge32", "Integer32", "IpAddress", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "NotificationType")
TruthValue, RowStatus, TextualConvention, DisplayString, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "TextualConvention", "DisplayString", "MacAddress")
ruckusWLANMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1))
if mibBuilder.loadTexts: ruckusWLANMIB.setLastUpdated('201010150800Z')
if mibBuilder.loadTexts: ruckusWLANMIB.setOrganization('Ruckus Wireless, Inc.')
if mibBuilder.loadTexts: ruckusWLANMIB.setContactInfo('Ruckus Wireless, Inc. Postal: 880 W Maude Ave Sunnyvale, CA 94085 USA EMail: support@ruckuswireless.com Phone: +1-650-265-4200')
if mibBuilder.loadTexts: ruckusWLANMIB.setDescription('Ruckus WLAN mib')
ruckusWLANObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1))
ruckusWLANInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1))
ruckusWLANStaInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2))
ruckusWLANSecurityInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 3))
ruckusWLANEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 2))
ruckusWLANTable = MibTable((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 1), )
if mibBuilder.loadTexts: ruckusWLANTable.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANTable.setDescription('WLAN table.')
ruckusWLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ruckusWLANEntry.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANEntry.setDescription('Specifies each WLAN entry.')
ruckusWLANSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 1, 1, 1), RuckusSSID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusWLANSSID.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANSSID.setDescription('Specifies the name of the SSID.')
ruckusWLANBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANBSSID.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANBSSID.setDescription('This attribute is the unique identifier in this BSS. It is the 48-bit MAC address of the wireless interface.')
ruckusWLANBSSType = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("station", 1), ("master", 2), ("independent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANBSSType.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANBSSType.setDescription('Specifies the bss type.')
ruckusWLANOperationalRateSet = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANOperationalRateSet.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANOperationalRateSet.setDescription('This attribute shall specify the set of data rates at which the station may transmit data. Each octet contains a value representing a rate. Each rate shall be within the range from 2 to 127, corresponding to data rates in increments of 500 kb/s from 1 Mb/s to 63.5 Mb/s, and shall be supported (as indicated in the supported rates table) for receiving data. This value is reported in transmitted Beacon, Probe Request, Probe Response, Association Request, Association Response, Reassociation Request, and Reassociation Response frames, and is used to determine whether a BSS with which the station desires to synchronize is suitable. It is also used when starting a BSS, as specified in 10.3.')
ruckusWLANBeaconPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setUnits('milli seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANBeaconPeriod.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANBeaconPeriod.setDescription('This attribute shall specify the number of milli seconds that a station shall use for scheduling Beacon transmissions. This value is transmitted in Beacon and Probe Response frames.')
ruckusWLANDTIMPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANDTIMPeriod.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANDTIMPeriod.setDescription('This attribute shall specify the number of TU that a station shall use for scheduling Beacon transmissions. This value is transmitted in Beacon and Probe Response frames.')
ruckusWLANRTSThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 2346))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusWLANRTSThreshold.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANRTSThreshold.setDescription('This attribute shall indicate the number of octets in an MPDU, below which an RTS/CTS handshake shall not be performed, except as RTS/CTS is used as a cross modulation protection mechanism as defined in 9.10. An RTS/CTS handshake shall be performed at the beginning of any frame exchange sequence where the MPDU is of type Data or Management, the MPDU has an individual address in the Address1 field, and the length of the MPDU is greater than this threshold. (For additional details, refer to Table 21 in 9.7.) Setting this attribute to be larger than the maximum MSDU size shall have the effect of turning off the RTS/CTS handshake for frames of Data or Management type transmitted by this STA. Setting this attribute to zero shall have the effect of turning on the RTS/CTS handshake for all frames of Data or Management type transmitted by this STA. The default value of this attribute shall be 2347.')
ruckusWLANFragmentationThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 2346))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusWLANFragmentationThreshold.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANFragmentationThreshold.setDescription('This attribute shall specify the current maximum size, in octets, of the MPDU that may be delivered to the PHY. An MSDU shall be broken into fragments if its size exceeds the value of this attribute after adding MAC headers and trailers. An MSDU or MMPDU shall be fragmented when the resulting frame has an individual address in the Address1 field, and the length of the frame is larger than this threshold. The default value for this attribute shall be the lesser of 2346 or the aMPDUMaxLength of the attached PHY and shall never exceed the lesser of 2346 or the aMPDUMaxLength of the attached PHY. The value of this attribute shall never be less than 256.')
ruckusWLANRadioMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 1, 1, 9), RuckusRadioMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANRadioMode.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANRadioMode.setDescription('Specifies the radio mode. ')
ruckusWLANChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANChannel.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANChannel.setDescription('Specifies the current operating channel.')
ruckusWLANWDSEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusWLANWDSEnable.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANWDSEnable.setDescription('Specifies if the WDS is enabled or disabled on this interface. Allow 4 address mode of operation for an given WLAN interface.')
ruckusWLANAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusWLANAdminStatus.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANAdminStatus.setDescription('Administrative status of the WLAN interface.')
ruckusWLANProtectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ctsOnly", 2), ("ctsRts", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANProtectionMode.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANProtectionMode.setDescription('Enabled when 11g and 11b clients exist on the same network. none: Do not use any protection ctsOnly: AP will send a CTS frame prior to sending 11g frames. The CTS frame will silence 11b clients rtsCts: Require RTS to be sent by sender of 11g frame and responder to send CTS prior to any 11g frames being sent.')
ruckusWLANName = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusWLANName.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANName.setDescription('Specifies the name of the wlan.')
ruckusWLANSSIDBcastDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 1, 1, 15), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusWLANSSIDBcastDisable.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANSSIDBcastDisable.setDescription('Setting to 1, cause the ssid will not be broadcast in the beacons.')
ruckusWLANVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANVlanID.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANVlanID.setDescription('Specifies the VLAN ID of the WLAN. If VLAN ID is 1, packets from this WLAN will be untagged.')
ruckusWLANIGMPSnooping = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusWLANIGMPSnooping.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANIGMPSnooping.setDescription('Configure the IGMPSnooping for this WLAN. ')
ruckusWLANSuppDataRatesTxTable = MibTable((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 2), )
if mibBuilder.loadTexts: ruckusWLANSuppDataRatesTxTable.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANSuppDataRatesTxTable.setDescription("The Transmit bit rates supported by the PLCP and PMD, represented by a count from X'02-X'7f, corresponding to data rates in increments of 500Kb/s from 1 Mb/s to 63.5 Mb/s subject to limitations of each individual PHY.")
ruckusWLANSuppDataRatesTxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "RUCKUS-WLAN-MIB", "ruckusWLANSuppDataRatesTxIndex"))
if mibBuilder.loadTexts: ruckusWLANSuppDataRatesTxEntry.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANSuppDataRatesTxEntry.setDescription('An Entry (conceptual row) in the dot11SupportedDataRatesTx Table.')
ruckusWLANSuppDataRatesTxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: ruckusWLANSuppDataRatesTxIndex.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANSuppDataRatesTxIndex.setDescription('Index object that identifies which data rate to access.')
ruckusWLANSuppDataRatesTxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANSuppDataRatesTxValue.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANSuppDataRatesTxValue.setDescription("The Transmit bit rates supported by the PLCP and PMD, represented by a count from X'02-X'7f, corresponding to data rates in increments of 500Kb/s from 1 Mb/s to 63.5 Mb/s subject to limitations of each individual PHY")
ruckusWLANSuppDataRatesRxTable = MibTable((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 3), )
if mibBuilder.loadTexts: ruckusWLANSuppDataRatesRxTable.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANSuppDataRatesRxTable.setDescription("The receive bit rates supported by the PLCP and PMD, represented by a count from X'02-X'7f, corresponding to data rates in increments of 500Kb/s from 1 Mb/s to 63.5 Mb/s.'")
ruckusWLANSuppDataRatesRxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "RUCKUS-WLAN-MIB", "ruckusWLANSuppDataRatesRxIndex"))
if mibBuilder.loadTexts: ruckusWLANSuppDataRatesRxEntry.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANSuppDataRatesRxEntry.setDescription('An Entry (conceptual row) in the dot11SupportedDataRatesRx Table.')
ruckusWLANSuppDataRatesRxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: ruckusWLANSuppDataRatesRxIndex.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANSuppDataRatesRxIndex.setDescription('Index object which identifies which data rate to access.')
ruckusWLANSuppDataRatesRxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANSuppDataRatesRxValue.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANSuppDataRatesRxValue.setDescription("The receive bit rates supported by the PLCP and PMD, represented by a count from X'02-X'7f, corresponding to data rates in increments of 500Kb/s from 1 Mb/s to 63.5 Mb/s.")
ruckusWLANStaStatsTable = MibTable((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 1), )
if mibBuilder.loadTexts: ruckusWLANStaStatsTable.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaStatsTable.setDescription('WLAN counter table.')
ruckusWLANStaStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "RUCKUS-WLAN-MIB", "ruckusWLANStaStatsMacAddr"))
if mibBuilder.loadTexts: ruckusWLANStaStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaStatsEntry.setDescription('Specifies each wlan counter entry.')
ruckusWLANStaStatsMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: ruckusWLANStaStatsMacAddr.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaStatsMacAddr.setDescription('Specifies the station mac address.')
ruckusWLANStaStatsSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 1, 1, 2), RuckusSSID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaStatsSSID.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaStatsSSID.setDescription('station SSID.')
ruckusWLANStaStatsRxDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaStatsRxDataFrames.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaStatsRxDataFrames.setDescription('Rx data frames.')
ruckusWLANStaStatsRxMgmtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaStatsRxMgmtFrames.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaStatsRxMgmtFrames.setDescription('Rx management frames.')
ruckusWLANStaStatsRxCtrlFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaStatsRxCtrlFrames.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaStatsRxCtrlFrames.setDescription('Rx control frames.')
ruckusWLANStaStatsRxUnicastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaStatsRxUnicastFrames.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaStatsRxUnicastFrames.setDescription('Rx unicast frames.')
ruckusWLANStaStatsRxMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaStatsRxMulticastFrames.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaStatsRxMulticastFrames.setDescription('Rx multicast frames.')
ruckusWLANStaStatsRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaStatsRxBytes.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaStatsRxBytes.setDescription('Rx data count (bytes).')
ruckusWLANStaStatsRxDup = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaStatsRxDup.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaStatsRxDup.setDescription('Rx discarded because of duplicate.')
ruckusWLANStaStatsRxNoPrivacy = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaStatsRxNoPrivacy.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaStatsRxNoPrivacy.setDescription('Rx with WEP but privacy off.')
ruckusWLANStaStatsRxWEPFail = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaStatsRxWEPFail.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaStatsRxWEPFail.setDescription('Rx WEP processing failed.')
ruckusWLANStaStatsRxDemicFail = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaStatsRxDemicFail.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaStatsRxDemicFail.setDescription('Rx demic failed.')
ruckusWLANStaStatsTxDecap = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaStatsTxDecap.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaStatsTxDecap.setDescription('Rx decapsulation failed.')
ruckusWLANStaStatsRxDefrag = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaStatsRxDefrag.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaStatsRxDefrag.setDescription('Rx defragmentation failed.')
ruckusWLANStaStatsTxDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaStatsTxDataFrames.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaStatsTxDataFrames.setDescription('Tx data frames.')
ruckusWLANStaStatsTxMgmtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaStatsTxMgmtFrames.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaStatsTxMgmtFrames.setDescription('Tx management frames.')
ruckusWLANStaStatsTxUnicastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaStatsTxUnicastFrames.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaStatsTxUnicastFrames.setDescription('Tx unicast frames.')
ruckusWLANStaStatsTxMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaStatsTxMulticastFrames.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaStatsTxMulticastFrames.setDescription('Tx multicast frames.')
ruckusWLANStaStatsTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaStatsTxBytes.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaStatsTxBytes.setDescription('Tx data count (bytes).')
ruckusWLANStaStatsTxAssoc = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaStatsTxAssoc.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaStatsTxAssoc.setDescription('Tx (re)associations.')
ruckusWLANStaStatsTxAssocFail = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaStatsTxAssocFail.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaStatsTxAssocFail.setDescription('Tx (re)association failures')
ruckusWLANStaStatsTxAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaStatsTxAuth.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaStatsTxAuth.setDescription('Tx (re)authentications.')
ruckusWLANStaStatsTxAuthFail = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaStatsTxAuthFail.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaStatsTxAuthFail.setDescription('Tx (re)authentication failures.')
ruckusWLANStaStatsRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaStatsRSSI.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaStatsRSSI.setDescription('Station RSSI.')
ruckusWLANStaStatsTxRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaStatsTxRxBytes.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaStatsTxRxBytes.setDescription('Total Tx and Rx data bytes of last 5 min period.')
ruckusWLANStaStatsTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 1, 1, 26), Unsigned32()).setUnits('Bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaStatsTxRate.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaStatsTxRate.setDescription('Tx data rate of last 5 min period.')
ruckusWLANStaStatsRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 1, 1, 27), Unsigned32()).setUnits('Bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaStatsRxRate.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaStatsRxRate.setDescription('Rx data rate of last 5 min period.')
ruckusWLANStaStatsTxDropRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 1, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaStatsTxDropRate.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaStatsTxDropRate.setDescription('Tx Packet drop rate.')
ruckusWLANStaTable = MibTable((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 2), )
if mibBuilder.loadTexts: ruckusWLANStaTable.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaTable.setDescription('WLAN station table.')
ruckusWLANStaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "RUCKUS-WLAN-MIB", "ruckusWLANStaAddr"))
if mibBuilder.loadTexts: ruckusWLANStaEntry.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaEntry.setDescription('Specifies each station entry.')
ruckusWLANStaAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 2, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaAddr.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaAddr.setDescription('An index into the table. Specifies each station address.')
ruckusWLANStaRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaRssi.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaRssi.setDescription('Station RSSI.')
ruckusWLANStaErp = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaErp.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaErp.setDescription('Station ERP.')
ruckusWLANState = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANState.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANState.setDescription('Specifies station state.')
ruckusWLANStaCapInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaCapInfo.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaCapInfo.setDescription('Specifies station capability information.')
ruckusWLANStaAssocid = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaAssocid.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaAssocid.setDescription('Specifies the station association id.')
ruckusWLANStaOpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaOpMode.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaOpMode.setDescription('Specifies station operational mode.')
ruckusWLANStaIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaIdle.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaIdle.setDescription('Specifies station idle time.')
ruckusWLANStaRates = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaRates.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaRates.setDescription('Specifies station rates.')
ruckusWLANStaIpaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 2, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaIpaddr.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaIpaddr.setDescription('Specifies Station IPv4 or IPv6 address.')
ruckusWLANStaAuthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 2, 1, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaAuthMode.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaAuthMode.setDescription('Station Authentication Mode.')
ruckusWLANStaMQTable = MibTable((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 3), )
if mibBuilder.loadTexts: ruckusWLANStaMQTable.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaMQTable.setDescription('Specifes ruckusWLANMQStatTable.')
ruckusWLANStaMQEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "RUCKUS-WLAN-MIB", "ruckusWLANStaMQAddr"), (0, "RUCKUS-WLAN-MIB", "ruckusWLANStaMQQIndex"))
if mibBuilder.loadTexts: ruckusWLANStaMQEntry.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaMQEntry.setDescription('Specifies each ruckusWLANMQStatEntry.')
ruckusWLANStaMQAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 3, 1, 1), MacAddress())
if mibBuilder.loadTexts: ruckusWLANStaMQAddr.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaMQAddr.setDescription('Station address.')
ruckusWLANStaMQQIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: ruckusWLANStaMQQIndex.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaMQQIndex.setDescription('Media queue index.')
ruckusWLANStaMQPktsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaMQPktsQueued.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaMQPktsQueued.setDescription('Frames currently queued.')
ruckusWLANStaMQNumEnqueued = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaMQNumEnqueued.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaMQNumEnqueued.setDescription('Total number of frames queued.')
ruckusWLANStaMQNumDequeued = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaMQNumDequeued.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaMQNumDequeued.setDescription('Total number of dequeued frames.')
ruckusWLANStaMQNumRequeued = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaMQNumRequeued.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaMQNumRequeued.setDescription('Total number of requeued frames.')
ruckusWLANStaMQNumDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaMQNumDropped.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaMQNumDropped.setDescription('Drops due to queue overflow.')
ruckusWLANStaMQNumDeactivateQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaMQNumDeactivateQueue.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaMQNumDeactivateQueue.setDescription('Total number of times queue deactivated.')
ruckusWLANStaMQAveIpg = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaMQAveIpg.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaMQAveIpg.setDescription('Average inter packet arrival time.')
ruckusWLANStaMQMinIpg = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaMQMinIpg.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaMQMinIpg.setDescription('Current max. inter packet arrival.')
ruckusWLANStaMQMaxIpg = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaMQMaxIpg.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaMQMaxIpg.setDescription('Current min. inter packet arrival.')
ruckusWLANStaMQAveTxLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 3, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaMQAveTxLatency.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaMQAveTxLatency.setDescription('Average time to transmit frames from queue.')
ruckusWLANStaMQMinTxLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 3, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaMQMinTxLatency.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaMQMinTxLatency.setDescription('Minimum time to transmit frames from queue.')
ruckusWLANStaMQMaxTxLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 3, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaMQMaxTxLatency.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaMQMaxTxLatency.setDescription('Maximum time to transmit frames from queue.')
ruckusWLANStaRksTable = MibTable((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 4), )
if mibBuilder.loadTexts: ruckusWLANStaRksTable.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaRksTable.setDescription('Specifies ruckusWLANStaRksTable.')
ruckusWLANStaRksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "RUCKUS-WLAN-MIB", "ruckusWLANStaRksAddr"))
if mibBuilder.loadTexts: ruckusWLANStaRksEntry.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaRksEntry.setDescription('Specifies each ruckusWLANStaRksEntry.')
ruckusWLANStaRksAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 4, 1, 1), MacAddress())
if mibBuilder.loadTexts: ruckusWLANStaRksAddr.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaRksAddr.setDescription('')
ruckusWLANStaRksRxGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaRksRxGoodFrames.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaRksRxGoodFrames.setDescription('number of rx frames without errors.')
ruckusWLANStaRksRxCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaRksRxCrcErrors.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaRksRxCrcErrors.setDescription('Number of rx frames with CRks errors.')
ruckusWLANStaRksTxGoodFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaRksTxGoodFrames.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaRksTxGoodFrames.setDescription('Number of good tx frames acked.')
ruckusWLANStaRksTxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaRksTxRetries.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaRksTxRetries.setDescription('Number of retried frames.')
ruckusWLANStaRksTxDiscardExRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaRksTxDiscardExRetries.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaRksTxDiscardExRetries.setDescription('Number of discarded frames due to excessive retries.')
ruckusWLANStaRksTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 4, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaRksTxRate.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaRksTxRate.setDescription('Current Phy Rate.')
ruckusWLANStaRksTxKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 4, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaRksTxKbps.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaRksTxKbps.setDescription('Current transmit throughput.')
ruckusWLANStaRksTxPer = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaRksTxPer.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaRksTxPer.setDescription('Current Packet error rate.')
ruckusWLANStaRksTxRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 2, 4, 1, 10), RuckusdB()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStaRksTxRssi.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStaRksTxRssi.setDescription("Rssi for ack'ed packets.")
ruckusWLANSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 3, 1), )
if mibBuilder.loadTexts: ruckusWLANSecurityTable.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANSecurityTable.setDescription('Specifies WLAN security settings.')
ruckusWLANSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ruckusWLANSecurityEntry.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANSecurityEntry.setDescription('Specifies each WLAN security entry.')
ruckusWLANSecurityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("wep", 2), ("wpa", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusWLANSecurityMode.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANSecurityMode.setDescription("Specifies the security mode. if wep, table ruckusWLANWEPTable should be configured firstly; if wpa + 'psk' auth,table ruckusWLANWPATable should be configured firstly; if wpa + 'eap-802-1x' or 'auto' auth,firstly configure ruckusWLANAAAServerTable,then configure ruckusWLANWPATable.")
ruckusWLANSecurityAuthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("open", 1), ("wep-shared", 2), ("auto", 3), ("wpa-eap-802-1x", 4))).clone('open')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusWLANSecurityAuthMode.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANSecurityAuthMode.setDescription('Specifies the security mode. if wep, only open; if wpa, open,wpa-eap-802-1x,auto ; for auto,is open,wpa-eap-802-1x')
ruckusWLANSecurityEncryMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("tkip", 2), ("aes", 3), ("auto", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusWLANSecurityEncryMode.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANSecurityEncryMode.setDescription('Specifies the security mode. if none, for wep/none; if tkip, for wpa ver1; if aes, for wpa ver2; if auto, for wpa(ver2);')
ruckusWLANWEPTable = MibTable((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 3, 2), )
if mibBuilder.loadTexts: ruckusWLANWEPTable.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANWEPTable.setDescription('Specifies WLAN WEP settings.')
ruckusWLANWEPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ruckusWLANWEPEntry.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANWEPEntry.setDescription('Specifies each WLAN WEP entry.')
ruckusWLANWEPEncryLenType = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bit-64", 1), ("bit-128", 2))).clone('bit-128')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusWLANWEPEncryLenType.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANWEPEncryLenType.setDescription('Specifies the WEP encryption len type.')
ruckusWLANWEPKeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusWLANWEPKeyIndex.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANWEPKeyIndex.setDescription("Specifies the WEP key index. For WEP,if one wlan has already used '1', so other wlans cannot use '1' again.")
ruckusWLANWEPKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 3, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusWLANWEPKey.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANWEPKey.setDescription('Specifies the WEP key. if ascII text,the length is 5 or 13, if Hexadecimal,the length is 10 or 26')
ruckusWLANWPATable = MibTable((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 3, 3), )
if mibBuilder.loadTexts: ruckusWLANWPATable.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANWPATable.setDescription('Specifies WLAN WPA settings.')
ruckusWLANWPAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ruckusWLANWPAEntry.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANWPAEntry.setDescription('Specifies each WLAN WPA entry.')
ruckusWLANWPAVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("wpa", 1), ("wpa2", 2), ("auto", 3))).clone('wpa')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusWLANWPAVersion.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANWPAVersion.setDescription('Specifies the WPA version.')
ruckusWLANWPAKey = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 3, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusWLANWPAKey.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANWPAKey.setDescription('Specifies the WPA key.')
ruckusWLANWPARadiusNasId = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 3, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusWLANWPARadiusNasId.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANWPARadiusNasId.setDescription('Specifies the WPA radius nas id(only for auth type is EAP_802.1x).')
ruckusWLANWPAReAuthenticationPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 3, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 3600)).clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusWLANWPAReAuthenticationPeriod.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANWPAReAuthenticationPeriod.setDescription('Specifies the WPA radius reauthenticate period ,unit: second (only for auth type is EAP_802.1x).')
ruckusWLANAAAServerTable = MibTable((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 3, 4), )
if mibBuilder.loadTexts: ruckusWLANAAAServerTable.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANAAAServerTable.setDescription('Specifies WLAN AAA server settings.')
ruckusWLANAAAServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 3, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "RUCKUS-WLAN-MIB", "ruckusWLANSeverMode"))
if mibBuilder.loadTexts: ruckusWLANAAAServerEntry.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANAAAServerEntry.setDescription('Specifies each WLAN AAA server entry.')
ruckusWLANSeverMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auth", 1), ("account", 2))))
if mibBuilder.loadTexts: ruckusWLANSeverMode.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANSeverMode.setDescription('Specifies the AAA server mode:1,authenticate server;2,account server.')
ruckusWLANServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 3, 4, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusWLANServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANServerIpAddress.setDescription('Specifies the AAA server ip(v4 and v6) address.')
ruckusWLANServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 3, 4, 1, 12), Integer32().clone(1812)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusWLANServerPort.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANServerPort.setDescription('Specifies the AAA server port.')
ruckusWLANServerSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 3, 4, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ruckusWLANServerSecret.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANServerSecret.setDescription('Specifies the AAA server access secret.')
ruckusWLANStatsTable = MibTable((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4), )
if mibBuilder.loadTexts: ruckusWLANStatsTable.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsTable.setDescription('WLAN statistics table')
ruckusWLANStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ruckusWLANStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsEntry.setDescription('Specifies each WLAN statictics entry.')
ruckusWLANStatsSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 1), RuckusSSID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsSSID.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsSSID.setDescription('station SSID.')
ruckusWLANStatsBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsBSSID.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsBSSID.setDescription('Wlan BSSID.')
ruckusWLANStatsNumSta = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsNumSta.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsNumSta.setDescription('Number of associated stations.')
ruckusWLANStatsNumAuthSta = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsNumAuthSta.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsNumAuthSta.setDescription('Number of authenticated stations.')
ruckusWLANStatsNumAuthReq = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsNumAuthReq.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsNumAuthReq.setDescription('Number of authentication requests.')
ruckusWLANStatsNumAuthResp = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsNumAuthResp.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsNumAuthResp.setDescription('Number of authentication responses.')
ruckusWLANStatsNumAuthSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsNumAuthSuccess.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsNumAuthSuccess.setDescription('Number of successful authentications.')
ruckusWLANStatsNumAuthFail = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsNumAuthFail.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsNumAuthFail.setDescription('Number of authentication failures.')
ruckusWLANStatsNumAssocReq = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsNumAssocReq.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsNumAssocReq.setDescription('Number of association requests.')
ruckusWLANStatsNumAssocResp = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsNumAssocResp.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsNumAssocResp.setDescription('Number of association responses.')
ruckusWLANStatsNumReAssocReq = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsNumReAssocReq.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsNumReAssocReq.setDescription('Number of reassociation requests.')
ruckusWLANStatsNumReAssocResp = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsNumReAssocResp.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsNumReAssocResp.setDescription('Number of reassociation responses.')
ruckusWLANStatsNumAssocSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsNumAssocSuccess.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsNumAssocSuccess.setDescription('Number of successful associations.')
ruckusWLANStatsNumAssocFail = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsNumAssocFail.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsNumAssocFail.setDescription('Number of association failures.')
ruckusWLANStatsAssocFailRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 15), Unsigned32()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsAssocFailRate.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsAssocFailRate.setDescription('Station association fail rate. ruckusWLANStatsNumAssocFail/ruckusWLANStatsNumAssocReq')
ruckusWLANStatsAuthFailRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 16), Unsigned32()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsAuthFailRate.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsAuthFailRate.setDescription('Station authentication fail rate. ruckusWLANStatsNumAuthFail/ruckusWLANStatsNumAuthReq')
ruckusWLANStatsAssocSuccessRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 17), Unsigned32()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsAssocSuccessRate.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsAssocSuccessRate.setDescription('Station association success rate. ruckusWLANStatsNumAssocSuccess/ruckusWLANStatsNumAssocReq')
ruckusWLANStatsRxDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsRxDataFrames.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsRxDataFrames.setDescription('Count of received data frames.')
ruckusWLANStatsRxMgmtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsRxMgmtFrames.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsRxMgmtFrames.setDescription('Count of received management frames.')
ruckusWLANStatsRxCtrlFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsRxCtrlFrames.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsRxCtrlFrames.setDescription('Count of received contrl frames.')
ruckusWLANStatsRxUnicastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsRxUnicastFrames.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsRxUnicastFrames.setDescription('Count of received unicast frames.')
ruckusWLANStatsRxMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsRxMulticastFrames.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsRxMulticastFrames.setDescription('Count of received multicast frames.')
ruckusWLANStatsRxBroadcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsRxBroadcastFrames.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsRxBroadcastFrames.setDescription('Count of received broadcast frames.')
ruckusWLANStatsRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsRxBytes.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsRxBytes.setDescription('Count of received bytes.')
ruckusWLANStatsRxDup = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsRxDup.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsRxDup.setDescription('Count of received duplicated frames.')
ruckusWLANStatsRxNoPrivacy = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsRxNoPrivacy.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsRxNoPrivacy.setDescription('Count of received frames without privacy bit enabled.')
ruckusWLANStatsRxWEPFail = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsRxWEPFail.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsRxWEPFail.setDescription('Count of received failured WEP frames.')
ruckusWLANStatsRxDecryptCRCError = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsRxDecryptCRCError.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsRxDecryptCRCError.setDescription('Count of received frames with decrypted CRC error.')
ruckusWLANStatsRxMICError = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsRxMICError.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsRxMICError.setDescription('Count of received frames with MIC error.')
ruckusWLANStatsRxDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsRxDrops.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsRxDrops.setDescription('Count of received frame drops.')
ruckusWLANStatsRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsRxErrors.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsRxErrors.setDescription('Count of received error frames.')
ruckusWLANStatsRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsRxFrames.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsRxFrames.setDescription('Count of received frames.')
ruckusWLANStatsRxDropRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 33), Unsigned32()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsRxDropRate.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsRxDropRate.setDescription('Received frame drop rate. ruckusWLANStatsRxDrops/ruckusWLANStatsRxFrames')
ruckusWLANStatsTxDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsTxDataFrames.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsTxDataFrames.setDescription('Count of transmitted data frames.')
ruckusWLANStatsTxMgmtFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsTxMgmtFrames.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsTxMgmtFrames.setDescription('Count of transmitted management frames.')
ruckusWLANStatsTxUnicastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsTxUnicastFrames.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsTxUnicastFrames.setDescription('Count of transmitted unicast frames.')
ruckusWLANStatsTxMulticastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsTxMulticastFrames.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsTxMulticastFrames.setDescription('Count of transmitted multicast frames.')
ruckusWLANStatsTxBroadcastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsTxBroadcastFrames.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsTxBroadcastFrames.setDescription('Count of transmitted broadcast frames.')
ruckusWLANStatsTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsTxBytes.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsTxBytes.setDescription('Count of transmitted bytes.')
ruckusWLANStatsTxDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsTxDrops.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsTxDrops.setDescription('Count of transmitted frame drops.')
ruckusWLANStatsTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsTxErrors.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsTxErrors.setDescription('Count of transmitted error frames.')
ruckusWLANStatsTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsTxFrames.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsTxFrames.setDescription('Count of total transmitted frames.')
ruckusWLANStatsPeriodRxErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 43), Unsigned32()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsPeriodRxErrorRate.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsPeriodRxErrorRate.setDescription('RX packet error rate. ruckusWLANStatsRxErrors/ruckusWLANStatsRxFrames of last 5 min period ')
ruckusWLANStatsPeriodTxErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 44), Unsigned32()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsPeriodTxErrorRate.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsPeriodTxErrorRate.setDescription('TX packet error rate. ruckusWLANStatsTxErrors/ruckusWLANStatsTxFrames of last 5 min period')
ruckusWLANStatsPeriodAssocReq = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsPeriodAssocReq.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsPeriodAssocReq.setDescription('Number of association requests of last 5 min period.')
ruckusWLANStatsPeriodAssocResp = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsPeriodAssocResp.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsPeriodAssocResp.setDescription('Number of association responses of last 5 min period.')
ruckusWLANStatsPeriodAssocSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 25053, 1, 1, 6, 1, 1, 1, 4, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruckusWLANStatsPeriodAssocSuccess.setStatus('current')
if mibBuilder.loadTexts: ruckusWLANStatsPeriodAssocSuccess.setDescription('Number of successful associations of last 5 min period.')
mibBuilder.exportSymbols("RUCKUS-WLAN-MIB", ruckusWLANStatsRxCtrlFrames=ruckusWLANStatsRxCtrlFrames, ruckusWLANStaStatsTxDecap=ruckusWLANStaStatsTxDecap, ruckusWLANAAAServerTable=ruckusWLANAAAServerTable, ruckusWLANStaCapInfo=ruckusWLANStaCapInfo, ruckusWLANRTSThreshold=ruckusWLANRTSThreshold, ruckusWLANStatsNumAssocFail=ruckusWLANStatsNumAssocFail, ruckusWLANStatsRxMgmtFrames=ruckusWLANStatsRxMgmtFrames, ruckusWLANWPAKey=ruckusWLANWPAKey, ruckusWLANStaMQAveTxLatency=ruckusWLANStaMQAveTxLatency, ruckusWLANSeverMode=ruckusWLANSeverMode, ruckusWLANStaRksTxKbps=ruckusWLANStaRksTxKbps, ruckusWLANStatsRxDropRate=ruckusWLANStatsRxDropRate, ruckusWLANStaMQMinTxLatency=ruckusWLANStaMQMinTxLatency, ruckusWLANStatsEntry=ruckusWLANStatsEntry, ruckusWLANStaStatsRxRate=ruckusWLANStaStatsRxRate, ruckusWLANStatsRxFrames=ruckusWLANStatsRxFrames, ruckusWLANStaRksRxGoodFrames=ruckusWLANStaRksRxGoodFrames, ruckusWLANStaStatsRxWEPFail=ruckusWLANStaStatsRxWEPFail, PYSNMP_MODULE_ID=ruckusWLANMIB, ruckusWLANSecurityEncryMode=ruckusWLANSecurityEncryMode, ruckusWLANBSSID=ruckusWLANBSSID, ruckusWLANServerSecret=ruckusWLANServerSecret, ruckusWLANWDSEnable=ruckusWLANWDSEnable, ruckusWLANStatsAssocSuccessRate=ruckusWLANStatsAssocSuccessRate, ruckusWLANStaStatsEntry=ruckusWLANStaStatsEntry, ruckusWLANStaOpMode=ruckusWLANStaOpMode, ruckusWLANEntry=ruckusWLANEntry, ruckusWLANStaStatsMacAddr=ruckusWLANStaStatsMacAddr, ruckusWLANStatsPeriodTxErrorRate=ruckusWLANStatsPeriodTxErrorRate, ruckusWLANStaRksTxGoodFrames=ruckusWLANStaRksTxGoodFrames, ruckusWLANAdminStatus=ruckusWLANAdminStatus, ruckusWLANSecurityInfo=ruckusWLANSecurityInfo, ruckusWLANSecurityTable=ruckusWLANSecurityTable, ruckusWLANStaMQTable=ruckusWLANStaMQTable, ruckusWLANStaStatsTxUnicastFrames=ruckusWLANStaStatsTxUnicastFrames, ruckusWLANStatsNumAuthResp=ruckusWLANStatsNumAuthResp, ruckusWLANWPAReAuthenticationPeriod=ruckusWLANWPAReAuthenticationPeriod, ruckusWLANWEPKey=ruckusWLANWEPKey, ruckusWLANStatsRxDecryptCRCError=ruckusWLANStatsRxDecryptCRCError, ruckusWLANSSID=ruckusWLANSSID, ruckusWLANStaTable=ruckusWLANStaTable, ruckusWLANStaMQAveIpg=ruckusWLANStaMQAveIpg, ruckusWLANStaStatsTxDataFrames=ruckusWLANStaStatsTxDataFrames, ruckusWLANStaRates=ruckusWLANStaRates, ruckusWLANBSSType=ruckusWLANBSSType, ruckusWLANVlanID=ruckusWLANVlanID, ruckusWLANStaRksTxDiscardExRetries=ruckusWLANStaRksTxDiscardExRetries, ruckusWLANStaMQPktsQueued=ruckusWLANStaMQPktsQueued, ruckusWLANSecurityMode=ruckusWLANSecurityMode, ruckusWLANStaIpaddr=ruckusWLANStaIpaddr, ruckusWLANStaStatsSSID=ruckusWLANStaStatsSSID, ruckusWLANStaStatsTxAuthFail=ruckusWLANStaStatsTxAuthFail, ruckusWLANWPAVersion=ruckusWLANWPAVersion, ruckusWLANSSIDBcastDisable=ruckusWLANSSIDBcastDisable, ruckusWLANStaMQNumEnqueued=ruckusWLANStaMQNumEnqueued, ruckusWLANStaStatsTxMulticastFrames=ruckusWLANStaStatsTxMulticastFrames, ruckusWLANSuppDataRatesTxEntry=ruckusWLANSuppDataRatesTxEntry, ruckusWLANStaMQNumRequeued=ruckusWLANStaMQNumRequeued, ruckusWLANStatsNumReAssocResp=ruckusWLANStatsNumReAssocResp, ruckusWLANStatsNumAuthSta=ruckusWLANStatsNumAuthSta, ruckusWLANStatsPeriodAssocResp=ruckusWLANStatsPeriodAssocResp, ruckusWLANStaStatsRxBytes=ruckusWLANStaStatsRxBytes, ruckusWLANStaStatsTable=ruckusWLANStaStatsTable, ruckusWLANStatsRxUnicastFrames=ruckusWLANStatsRxUnicastFrames, ruckusWLANIGMPSnooping=ruckusWLANIGMPSnooping, ruckusWLANDTIMPeriod=ruckusWLANDTIMPeriod, ruckusWLANProtectionMode=ruckusWLANProtectionMode, ruckusWLANStaStatsTxDropRate=ruckusWLANStaStatsTxDropRate, ruckusWLANStaMQMaxTxLatency=ruckusWLANStaMQMaxTxLatency, ruckusWLANStatsTable=ruckusWLANStatsTable, ruckusWLANSecurityAuthMode=ruckusWLANSecurityAuthMode, ruckusWLANStatsTxFrames=ruckusWLANStatsTxFrames, ruckusWLANStaMQMinIpg=ruckusWLANStaMQMinIpg, ruckusWLANChannel=ruckusWLANChannel, ruckusWLANStaStatsTxBytes=ruckusWLANStaStatsTxBytes, ruckusWLANStatsRxMulticastFrames=ruckusWLANStatsRxMulticastFrames, ruckusWLANStatsNumAuthFail=ruckusWLANStatsNumAuthFail, ruckusWLANWEPTable=ruckusWLANWEPTable, ruckusWLANStatsPeriodAssocReq=ruckusWLANStatsPeriodAssocReq, ruckusWLANStaStatsRxDefrag=ruckusWLANStaStatsRxDefrag, ruckusWLANWPATable=ruckusWLANWPATable, ruckusWLANWPARadiusNasId=ruckusWLANWPARadiusNasId, ruckusWLANStatsRxNoPrivacy=ruckusWLANStatsRxNoPrivacy, ruckusWLANStatsPeriodAssocSuccess=ruckusWLANStatsPeriodAssocSuccess, ruckusWLANStatsSSID=ruckusWLANStatsSSID, ruckusWLANStaRksTxRssi=ruckusWLANStaRksTxRssi, ruckusWLANStaRksTxRetries=ruckusWLANStaRksTxRetries, ruckusWLANStaStatsRxDup=ruckusWLANStaStatsRxDup, ruckusWLANObjects=ruckusWLANObjects, ruckusWLANStatsNumAuthSuccess=ruckusWLANStatsNumAuthSuccess, ruckusWLANStaMQAddr=ruckusWLANStaMQAddr, ruckusWLANStaRksTable=ruckusWLANStaRksTable, ruckusWLANStatsTxDataFrames=ruckusWLANStatsTxDataFrames, ruckusWLANStaStatsRxCtrlFrames=ruckusWLANStaStatsRxCtrlFrames, ruckusWLANStatsAssocFailRate=ruckusWLANStatsAssocFailRate, ruckusWLANStatsTxMulticastFrames=ruckusWLANStatsTxMulticastFrames, ruckusWLANStaMQQIndex=ruckusWLANStaMQQIndex, ruckusWLANStaStatsRxNoPrivacy=ruckusWLANStaStatsRxNoPrivacy, ruckusWLANInfo=ruckusWLANInfo, ruckusWLANStaRksTxRate=ruckusWLANStaRksTxRate, ruckusWLANStatsPeriodRxErrorRate=ruckusWLANStatsPeriodRxErrorRate, ruckusWLANEvents=ruckusWLANEvents, ruckusWLANStaMQNumDropped=ruckusWLANStaMQNumDropped, ruckusWLANRadioMode=ruckusWLANRadioMode, ruckusWLANSuppDataRatesTxIndex=ruckusWLANSuppDataRatesTxIndex, ruckusWLANWEPEntry=ruckusWLANWEPEntry, ruckusWLANStatsRxWEPFail=ruckusWLANStatsRxWEPFail, ruckusWLANStaAddr=ruckusWLANStaAddr, ruckusWLANName=ruckusWLANName, ruckusWLANStatsNumAssocResp=ruckusWLANStatsNumAssocResp, ruckusWLANStaErp=ruckusWLANStaErp, ruckusWLANAAAServerEntry=ruckusWLANAAAServerEntry, ruckusWLANStaMQEntry=ruckusWLANStaMQEntry, ruckusWLANMIB=ruckusWLANMIB, ruckusWLANStatsRxDataFrames=ruckusWLANStatsRxDataFrames, ruckusWLANStaStatsRxMulticastFrames=ruckusWLANStaStatsRxMulticastFrames, ruckusWLANStatsTxBroadcastFrames=ruckusWLANStatsTxBroadcastFrames, ruckusWLANStatsTxErrors=ruckusWLANStatsTxErrors, ruckusWLANStaAssocid=ruckusWLANStaAssocid, ruckusWLANFragmentationThreshold=ruckusWLANFragmentationThreshold, ruckusWLANStatsRxDrops=ruckusWLANStatsRxDrops, ruckusWLANStatsNumSta=ruckusWLANStatsNumSta, ruckusWLANStaRksTxPer=ruckusWLANStaRksTxPer, ruckusWLANWEPKeyIndex=ruckusWLANWEPKeyIndex, ruckusWLANStatsTxUnicastFrames=ruckusWLANStatsTxUnicastFrames, ruckusWLANStaStatsTxAssoc=ruckusWLANStaStatsTxAssoc, ruckusWLANStatsNumAssocSuccess=ruckusWLANStatsNumAssocSuccess, ruckusWLANStatsTxDrops=ruckusWLANStatsTxDrops, ruckusWLANStaMQNumDequeued=ruckusWLANStaMQNumDequeued, ruckusWLANStatsTxMgmtFrames=ruckusWLANStatsTxMgmtFrames, ruckusWLANStatsNumReAssocReq=ruckusWLANStatsNumReAssocReq, ruckusWLANServerIpAddress=ruckusWLANServerIpAddress, ruckusWLANStaStatsTxAuth=ruckusWLANStaStatsTxAuth, ruckusWLANStaMQMaxIpg=ruckusWLANStaMQMaxIpg, ruckusWLANStaRksRxCrcErrors=ruckusWLANStaRksRxCrcErrors, ruckusWLANSuppDataRatesTxTable=ruckusWLANSuppDataRatesTxTable, ruckusWLANStaIdle=ruckusWLANStaIdle, ruckusWLANSecurityEntry=ruckusWLANSecurityEntry, ruckusWLANStatsRxBytes=ruckusWLANStatsRxBytes, ruckusWLANOperationalRateSet=ruckusWLANOperationalRateSet, ruckusWLANStatsRxDup=ruckusWLANStatsRxDup, ruckusWLANStaStatsRxMgmtFrames=ruckusWLANStaStatsRxMgmtFrames, ruckusWLANStaInfo=ruckusWLANStaInfo, ruckusWLANStatsRxMICError=ruckusWLANStatsRxMICError, ruckusWLANStatsNumAuthReq=ruckusWLANStatsNumAuthReq, ruckusWLANStatsTxBytes=ruckusWLANStatsTxBytes, ruckusWLANSuppDataRatesRxTable=ruckusWLANSuppDataRatesRxTable, ruckusWLANStaStatsRxDemicFail=ruckusWLANStaStatsRxDemicFail, ruckusWLANStaEntry=ruckusWLANStaEntry, ruckusWLANStaStatsTxRate=ruckusWLANStaStatsTxRate, ruckusWLANStatsRxBroadcastFrames=ruckusWLANStatsRxBroadcastFrames, ruckusWLANStatsBSSID=ruckusWLANStatsBSSID, ruckusWLANStaStatsTxAssocFail=ruckusWLANStaStatsTxAssocFail, ruckusWLANStaMQNumDeactivateQueue=ruckusWLANStaMQNumDeactivateQueue, ruckusWLANStaStatsTxMgmtFrames=ruckusWLANStaStatsTxMgmtFrames, ruckusWLANSuppDataRatesRxValue=ruckusWLANSuppDataRatesRxValue, ruckusWLANStatsRxErrors=ruckusWLANStatsRxErrors, ruckusWLANStatsAuthFailRate=ruckusWLANStatsAuthFailRate, ruckusWLANStaStatsRSSI=ruckusWLANStaStatsRSSI, ruckusWLANSuppDataRatesTxValue=ruckusWLANSuppDataRatesTxValue, ruckusWLANSuppDataRatesRxEntry=ruckusWLANSuppDataRatesRxEntry, ruckusWLANBeaconPeriod=ruckusWLANBeaconPeriod, ruckusWLANStaRssi=ruckusWLANStaRssi, ruckusWLANStatsNumAssocReq=ruckusWLANStatsNumAssocReq, ruckusWLANStaRksEntry=ruckusWLANStaRksEntry, ruckusWLANWPAEntry=ruckusWLANWPAEntry, ruckusWLANWEPEncryLenType=ruckusWLANWEPEncryLenType, ruckusWLANState=ruckusWLANState, ruckusWLANStaStatsRxUnicastFrames=ruckusWLANStaStatsRxUnicastFrames, ruckusWLANTable=ruckusWLANTable, ruckusWLANStaStatsRxDataFrames=ruckusWLANStaStatsRxDataFrames, ruckusWLANServerPort=ruckusWLANServerPort, ruckusWLANStaRksAddr=ruckusWLANStaRksAddr, ruckusWLANStaAuthMode=ruckusWLANStaAuthMode, ruckusWLANStaStatsTxRxBytes=ruckusWLANStaStatsTxRxBytes, ruckusWLANSuppDataRatesRxIndex=ruckusWLANSuppDataRatesRxIndex)
