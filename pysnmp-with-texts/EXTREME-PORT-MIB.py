#
# PySNMP MIB module EXTREME-PORT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EXTREME-BASE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:07:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
extremeAgent, ClientAuthType = mibBuilder.importSymbols("EXTREME-BASE-MIB", "extremeAgent", "ClientAuthType")
extremeVlanIfIndex, = mibBuilder.importSymbols("EXTREME-VLAN-MIB", "extremeVlanIfIndex")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, IpAddress, Integer32, Gauge32, Counter32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, NotificationType, ModuleIdentity, ObjectIdentity, TimeTicks, Bits, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "IpAddress", "Integer32", "Gauge32", "Counter32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "NotificationType", "ModuleIdentity", "ObjectIdentity", "TimeTicks", "Bits", "Unsigned32")
MacAddress, DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "TextualConvention", "RowStatus")
extremePort = ModuleIdentity((1, 3, 6, 1, 4, 1, 1916, 1, 4))
if mibBuilder.loadTexts: extremePort.setLastUpdated('0007240000Z')
if mibBuilder.loadTexts: extremePort.setOrganization('Extreme Networks, Inc.')
if mibBuilder.loadTexts: extremePort.setContactInfo('www.extremenetworks.com')
if mibBuilder.loadTexts: extremePort.setDescription('Extreme network port objects')
extremePortLoadshareTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 4, 1), )
if mibBuilder.loadTexts: extremePortLoadshareTable.setStatus('deprecated')
if mibBuilder.loadTexts: extremePortLoadshareTable.setDescription('A table of bindings between a master port and its load-sharing slaves: create/delete entries here to add/delete a port to/from a load-sharing group. Default is empty table. There are restrictions on what row creates will be accepted by each device - see Summit release notes for details.')
extremePortLoadshareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 4, 1, 1), ).setIndexNames((0, "EXTREME-PORT-MIB", "extremePortLoadshareMasterIfIndex"), (0, "EXTREME-PORT-MIB", "extremePortLoadshareSlaveIfIndex"))
if mibBuilder.loadTexts: extremePortLoadshareEntry.setStatus('deprecated')
if mibBuilder.loadTexts: extremePortLoadshareEntry.setDescription('A binding between a master port and one of its load-sharing slave ports.')
extremePortLoadshareMasterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremePortLoadshareMasterIfIndex.setStatus('deprecated')
if mibBuilder.loadTexts: extremePortLoadshareMasterIfIndex.setDescription('The ifIndex value which identifies the port controlling a loadsharing group of ports which includes extremePortLoadshareSlaveIfIndex.')
extremePortLoadshareSlaveIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 4, 1, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremePortLoadshareSlaveIfIndex.setStatus('deprecated')
if mibBuilder.loadTexts: extremePortLoadshareSlaveIfIndex.setDescription('The ifIndex value which identifies the port which is a member of a loadsharing group controlled by extremePortLoadshareMasterIfIndex.')
extremePortLoadshareGrouping = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("other", 1), ("pair", 2), ("quad", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremePortLoadshareGrouping.setStatus('deprecated')
if mibBuilder.loadTexts: extremePortLoadshareGrouping.setDescription('The Grouping value which identifies if load sharing is in pair or quad.')
extremePortLoadshareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 4, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremePortLoadshareStatus.setStatus('deprecated')
if mibBuilder.loadTexts: extremePortLoadshareStatus.setDescription('The row status variable, used according to row installation and removal conventions.')
extremePortSummitlinkTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 4, 2), )
if mibBuilder.loadTexts: extremePortSummitlinkTable.setStatus('deprecated')
if mibBuilder.loadTexts: extremePortSummitlinkTable.setDescription('A table of Extreme link configuration and status information. Contains a row for only those ports that are capable of operating in Summitlink-mode.')
extremePortSummitlinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: extremePortSummitlinkEntry.setStatus('deprecated')
if mibBuilder.loadTexts: extremePortSummitlinkEntry.setDescription('Link configuration and status information for a Summitlink Port.')
extremePortSummitlinkAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethernetOnly", 1), ("summitlinkOnly", 2))).clone('ethernetOnly')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremePortSummitlinkAdminMode.setStatus('deprecated')
if mibBuilder.loadTexts: extremePortSummitlinkAdminMode.setDescription('Configurable operating mode for this Summitlink port. Configure to summitlinkOnly(1) before connecting this port to a SummitVC device.')
extremePortSummitlinkOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethernetOnly", 1), ("summitlinkOnly", 2))).clone('ethernetOnly')).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremePortSummitlinkOperMode.setStatus('deprecated')
if mibBuilder.loadTexts: extremePortSummitlinkOperMode.setDescription('Actual Operating mode.')
extremePortSummitlinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremePortSummitlinkState.setStatus('deprecated')
if mibBuilder.loadTexts: extremePortSummitlinkState.setDescription('Current status of a Summitlink link. Where a port has redundant PMD capability, this indicates up if either of the PMDs has an active link.')
extremePortSummitlinkRejectReason = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("other", 2), ("stackMisconnected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremePortSummitlinkRejectReason.setStatus('deprecated')
if mibBuilder.loadTexts: extremePortSummitlinkRejectReason.setDescription('If a Summitlink connection has been attempted and failed to reach the up(1) state, this indicates the potential source of the failure.')
extremePortLoadshare2Table = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 4, 3), )
if mibBuilder.loadTexts: extremePortLoadshare2Table.setStatus('current')
if mibBuilder.loadTexts: extremePortLoadshare2Table.setDescription('A table of bindings between a master port and its load-sharing slaves: create/delete entries here to add/delete a port to/from a load-sharing group. Default is empty table. There are restrictions on what row creates will be accepted by each device - see Summit release notes for details.')
extremePortLoadshare2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 4, 3, 1), ).setIndexNames((0, "EXTREME-PORT-MIB", "extremePortLoadshare2MasterIfIndex"), (0, "EXTREME-PORT-MIB", "extremePortLoadshare2SlaveIfIndex"))
if mibBuilder.loadTexts: extremePortLoadshare2Entry.setStatus('current')
if mibBuilder.loadTexts: extremePortLoadshare2Entry.setDescription('A binding between a master port and one of its load-sharing slave ports.')
extremePortLoadshare2MasterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 4, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: extremePortLoadshare2MasterIfIndex.setStatus('current')
if mibBuilder.loadTexts: extremePortLoadshare2MasterIfIndex.setDescription('The ifIndex value which identifies the port controlling a loadsharing group of ports which includes extremePortLoadshareSlaveIfIndex.')
extremePortLoadshare2SlaveIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 4, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: extremePortLoadshare2SlaveIfIndex.setStatus('current')
if mibBuilder.loadTexts: extremePortLoadshare2SlaveIfIndex.setDescription('The ifIndex value which identifies the port which is a member of a loadsharing group controlled by extremePortLoadshare2MasterIfIndex.')
extremePortLoadshare2Algorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ingressPortOffset", 1), ("hash", 2), ("roundRobin", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremePortLoadshare2Algorithm.setStatus('current')
if mibBuilder.loadTexts: extremePortLoadshare2Algorithm.setDescription('This value identifies the load sharing algorithm to be used for this group of load shared ports.')
extremePortLoadshare2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 4, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremePortLoadshare2Status.setStatus('current')
if mibBuilder.loadTexts: extremePortLoadshare2Status.setDescription('The row status variable, used according to row installation and removal conventions.')
extremePortRateShapeTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 4, 4), )
if mibBuilder.loadTexts: extremePortRateShapeTable.setStatus('current')
if mibBuilder.loadTexts: extremePortRateShapeTable.setDescription('A list of ports that have ingress rate limiting enforced.')
extremePortRateShapeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 4, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "EXTREME-VLAN-MIB", "extremeVlanIfIndex"))
if mibBuilder.loadTexts: extremePortRateShapeEntry.setStatus('current')
if mibBuilder.loadTexts: extremePortRateShapeEntry.setDescription('An entry that is either a rate limited or a loopback port. Any vlan that has rate limited ports should have one loopback port defined. The traffic parameters for the rate limited ports correspond to those that are defined for the loopback port in the extremePerPortQosTable.')
extremePortRateShapePortType = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rateLimited", 1), ("loopBack", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremePortRateShapePortType.setStatus('current')
if mibBuilder.loadTexts: extremePortRateShapePortType.setDescription('Whether a loopback or rate limited port.')
extremePortRateShapeLoopbackTag = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremePortRateShapeLoopbackTag.setStatus('current')
if mibBuilder.loadTexts: extremePortRateShapeLoopbackTag.setDescription('An unique internal tag that will needs to be set up for the vlan corresponding to this entry for adding ingress rate limited ports to the corresponding vlan.')
extremePortRateShapeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 4, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremePortRateShapeStatus.setStatus('current')
if mibBuilder.loadTexts: extremePortRateShapeStatus.setDescription('The row status variable, used according to row installation and removal conventions.')
extremePortUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 4, 5), )
if mibBuilder.loadTexts: extremePortUtilizationTable.setStatus('current')
if mibBuilder.loadTexts: extremePortUtilizationTable.setDescription('Global Qos Profiles are defined in the extremeQosProfileTable. This table contains a list of ports for which certain QoS parms are reported.')
extremePortUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 4, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: extremePortUtilizationEntry.setStatus('current')
if mibBuilder.loadTexts: extremePortUtilizationEntry.setDescription('An individual QoSReport Entry.')
extremePortUtilizationAvgTxBw = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 4, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremePortUtilizationAvgTxBw.setStatus('current')
if mibBuilder.loadTexts: extremePortUtilizationAvgTxBw.setDescription('The reported average bandwidth in the txmit direction. When displayed it shows as an Integer value i.e 99.99% is displayed as 9999.')
extremePortUtilizationAvgRxBw = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 4, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremePortUtilizationAvgRxBw.setStatus('current')
if mibBuilder.loadTexts: extremePortUtilizationAvgRxBw.setDescription('The reported average bandwidth in the receive direction. When displayed it shows as an Integer value i.e 99.99% is displayed as 9999.')
extremePortUtilizationPeakTxBw = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 4, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremePortUtilizationPeakTxBw.setStatus('current')
if mibBuilder.loadTexts: extremePortUtilizationPeakTxBw.setDescription('The reported peak bandwidth in the txmit direction. When displayed it shows as an Integer value i.e 99.99% is displayed as 9999.')
extremePortUtilizationPeakRxBw = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 4, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremePortUtilizationPeakRxBw.setStatus('current')
if mibBuilder.loadTexts: extremePortUtilizationPeakRxBw.setDescription('The reported peak bandwidth in the receive direction. When displayed it shows as an Integer value i.e 99.99% is displayed as 9999.')
extremePortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 4, 6), )
if mibBuilder.loadTexts: extremePortInfoTable.setStatus('current')
if mibBuilder.loadTexts: extremePortInfoTable.setDescription('This table contains a list of port information.')
extremePortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 4, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: extremePortInfoEntry.setStatus('current')
if mibBuilder.loadTexts: extremePortInfoEntry.setDescription('An individual Port Information Entry.')
extremePortInfoFilterUpCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 4, 6, 1, 1), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremePortInfoFilterUpCounter.setStatus('current')
if mibBuilder.loadTexts: extremePortInfoFilterUpCounter.setDescription("The reported Port Filter up counter value. This counter indicates the number of times a port's link state has transitioned from DOWN to UP state. ")
extremePortInfoFilterDownCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 4, 6, 1, 2), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremePortInfoFilterDownCounter.setStatus('current')
if mibBuilder.loadTexts: extremePortInfoFilterDownCounter.setDescription("The reported Port Filter down counter value. This counter indicates the number of times a port's link state has transitioned from UP to DOWN state. ")
extremePortXenpakVendorTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 4, 7), )
if mibBuilder.loadTexts: extremePortXenpakVendorTable.setStatus('current')
if mibBuilder.loadTexts: extremePortXenpakVendorTable.setDescription('A table of Extreme Xenpak Module Vendor Name and type information. Contains a row for only those ports that are part of Xenpak module .')
extremePortXenpakVendorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 4, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: extremePortXenpakVendorEntry.setStatus('current')
if mibBuilder.loadTexts: extremePortXenpakVendorEntry.setDescription('Vendor name and type for Xenpak module.')
extremePortXenpakVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 4, 7, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 22))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremePortXenpakVendorName.setStatus('current')
if mibBuilder.loadTexts: extremePortXenpakVendorName.setDescription('A human-readable string representing Vendor name of this module. This string should be the same for all entries having the same Xenpak module: this entry may not be modified.')
extremePortIngressStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1916, 1, 4, 8))
extremePortIngressStatsPortTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 4, 8, 1), )
if mibBuilder.loadTexts: extremePortIngressStatsPortTable.setStatus('current')
if mibBuilder.loadTexts: extremePortIngressStatsPortTable.setDescription('Port ingress statistics are returned for ports which support ingress queuing. This table contains a list of counters for each port.')
extremePortIngressPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 4, 8, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: extremePortIngressPortStatsEntry.setStatus('current')
if mibBuilder.loadTexts: extremePortIngressPortStatsEntry.setDescription('An individual IngressStats Entry.')
extremePortIngressStatsLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 4, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ready", 1), ("active", 2), ("disabled", 3), ("notPresent", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremePortIngressStatsLinkStatus.setStatus('current')
if mibBuilder.loadTexts: extremePortIngressStatsLinkStatus.setDescription('The current status of the link. Ready indicates the port is ready to accept a link; Active indicates the link is present at this port; Disabled shows that the link is disabled at this port; Not Present means the link is not present at this port.')
extremePortIngressStatsPortHighPriBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 4, 8, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremePortIngressStatsPortHighPriBytes.setStatus('current')
if mibBuilder.loadTexts: extremePortIngressStatsPortHighPriBytes.setDescription('The sum of all per queue CIR counts for this port, which indicates the bytes forwarded for high-priority packets.')
extremePortIngressStatsPortLowPriBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 4, 8, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremePortIngressStatsPortLowPriBytes.setStatus('current')
if mibBuilder.loadTexts: extremePortIngressStatsPortLowPriBytes.setDescription('The sum of all per queue PR counts for this port, which indicates the bytes forwarded for low-priority packets.')
extremePortIngressStatsPortDroppedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 4, 8, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremePortIngressStatsPortDroppedBytes.setStatus('current')
if mibBuilder.loadTexts: extremePortIngressStatsPortDroppedBytes.setDescription('The total number of bytes dropped for this port.')
extremePortIngressStatsTxXoff = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 4, 8, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremePortIngressStatsTxXoff.setStatus('current')
if mibBuilder.loadTexts: extremePortIngressStatsTxXoff.setDescription('The number of XOFF Flow Control packets sent from this port due to receive traffic congestion.')
extremePortIngressStatsQueueTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 4, 8, 2), )
if mibBuilder.loadTexts: extremePortIngressStatsQueueTable.setStatus('current')
if mibBuilder.loadTexts: extremePortIngressStatsQueueTable.setDescription('Port ingress statistics are returned for ingress queues. This table contains a list of counters for each ingress queue.')
extremePortIngressQueueStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 4, 8, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "EXTREME-PORT-MIB", "extremePortIngressStatsQueueIndex"))
if mibBuilder.loadTexts: extremePortIngressQueueStatsEntry.setStatus('current')
if mibBuilder.loadTexts: extremePortIngressQueueStatsEntry.setDescription('An individual IngressStatsQueue Entry.')
extremePortIngressStatsQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 4, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremePortIngressStatsQueueIndex.setStatus('current')
if mibBuilder.loadTexts: extremePortIngressStatsQueueIndex.setDescription('The ingress queue being queried.')
extremePortIngressStatsQueueHighPriBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 4, 8, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremePortIngressStatsQueueHighPriBytes.setStatus('current')
if mibBuilder.loadTexts: extremePortIngressStatsQueueHighPriBytes.setDescription('The sum of all per queue CIR counts for this queue, which indicates the bytes forwarded for high-priority packets.')
extremePortIngressStatsQueueLowPriBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 4, 8, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremePortIngressStatsQueueLowPriBytes.setStatus('current')
if mibBuilder.loadTexts: extremePortIngressStatsQueueLowPriBytes.setDescription('The sum of all per queue PR counts for this queue, which indicates the bytes forwarded for low-priority packets.')
extremePortIngressStatsQueuePercentDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 4, 8, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremePortIngressStatsQueuePercentDropped.setStatus('current')
if mibBuilder.loadTexts: extremePortIngressStatsQueuePercentDropped.setDescription('The percentage of receive bytes dropped by this queue relative to the total number of bytes input to this queue.')
extremePortEgressRateLimitTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 4, 9), )
if mibBuilder.loadTexts: extremePortEgressRateLimitTable.setStatus('current')
if mibBuilder.loadTexts: extremePortEgressRateLimitTable.setDescription('Port egress rate limit statistics for a port.')
extremePortEgressRateLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 4, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: extremePortEgressRateLimitEntry.setStatus('current')
if mibBuilder.loadTexts: extremePortEgressRateLimitEntry.setDescription('An individual EgressRateLimit Entry.')
extremePortEgressRateLimitType = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 4, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("percentage", 1), ("kbps", 2), ("mbps", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremePortEgressRateLimitType.setStatus('current')
if mibBuilder.loadTexts: extremePortEgressRateLimitType.setDescription('The type of the current egress rate setting. A value of 1 signifies that the egress rate limit value is represented by a percentage of the maximum configurable port bandwidth. A value of 2 or 3 signifies the rate is configured in Kbps or Mbps respectively.')
extremePortEgressRateLimitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 4, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremePortEgressRateLimitValue.setStatus('current')
if mibBuilder.loadTexts: extremePortEgressRateLimitValue.setDescription('The configured egress rate value.')
extremeWiredClientTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 4, 10), )
if mibBuilder.loadTexts: extremeWiredClientTable.setStatus('current')
if mibBuilder.loadTexts: extremeWiredClientTable.setDescription('This table contains the entries for authenticated Clinets.')
extremeWiredClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 4, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "EXTREME-PORT-MIB", "extremeWiredClientID"))
if mibBuilder.loadTexts: extremeWiredClientEntry.setStatus('current')
if mibBuilder.loadTexts: extremeWiredClientEntry.setDescription('An entry in the extremeWiredClientTable.')
extremeWiredClientID = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 4, 10, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeWiredClientID.setStatus('current')
if mibBuilder.loadTexts: extremeWiredClientID.setDescription('The Unique MAC Address of the station for which this address table entry pertains.')
extremeWiredClientState = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 4, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("authenticated", 1), ("unauthenticated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeWiredClientState.setStatus('current')
if mibBuilder.loadTexts: extremeWiredClientState.setDescription('This attribute shall indicate the current state of the client. The attribute is enumerated as follows: 1 - Authenticated - client is authenticated. 2 - Unauthenticated - the client is connect but unauthenticated. ')
extremeWiredClientVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 4, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeWiredClientVLAN.setStatus('current')
if mibBuilder.loadTexts: extremeWiredClientVLAN.setDescription('This is the per-client VLAN which was pushed over by a RADIUS server or other mechanism.')
extremeWiredClientPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 4, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeWiredClientPriority.setStatus('current')
if mibBuilder.loadTexts: extremeWiredClientPriority.setDescription('This is a per-client 802.1p value which was either configured by the RADIUS server or statically through the port configuration table.')
extremeWiredClientAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 4, 10, 1, 5), ClientAuthType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeWiredClientAuthType.setStatus('current')
if mibBuilder.loadTexts: extremeWiredClientAuthType.setDescription('This is an indication of what access method was used to authenticated the client.')
extremeWiredClientLastStateChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 4, 10, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeWiredClientLastStateChangeTime.setStatus('current')
if mibBuilder.loadTexts: extremeWiredClientLastStateChangeTime.setDescription('This is the sysUpTime of the switch when the clients state changed last')
extremeWiredClientIP = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 4, 10, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeWiredClientIP.setStatus('current')
if mibBuilder.loadTexts: extremeWiredClientIP.setDescription('IP Address of the wired client.')
mibBuilder.exportSymbols("EXTREME-PORT-MIB", extremePortSummitlinkState=extremePortSummitlinkState, extremePortIngressStatsPortTable=extremePortIngressStatsPortTable, extremePortIngressStatsPortHighPriBytes=extremePortIngressStatsPortHighPriBytes, extremePortSummitlinkRejectReason=extremePortSummitlinkRejectReason, extremePortIngressStatsQueueHighPriBytes=extremePortIngressStatsQueueHighPriBytes, extremePortIngressPortStatsEntry=extremePortIngressPortStatsEntry, extremePortLoadshareEntry=extremePortLoadshareEntry, extremePortIngressStatsPortDroppedBytes=extremePortIngressStatsPortDroppedBytes, extremePortIngressStatsTxXoff=extremePortIngressStatsTxXoff, extremePortEgressRateLimitEntry=extremePortEgressRateLimitEntry, extremePortIngressStats=extremePortIngressStats, extremeWiredClientEntry=extremeWiredClientEntry, extremeWiredClientVLAN=extremeWiredClientVLAN, extremePortLoadshare2Entry=extremePortLoadshare2Entry, extremePortLoadshareGrouping=extremePortLoadshareGrouping, extremePortIngressStatsPortLowPriBytes=extremePortIngressStatsPortLowPriBytes, extremePortXenpakVendorEntry=extremePortXenpakVendorEntry, extremePortSummitlinkEntry=extremePortSummitlinkEntry, extremeWiredClientState=extremeWiredClientState, extremePortEgressRateLimitType=extremePortEgressRateLimitType, extremePortIngressStatsQueueIndex=extremePortIngressStatsQueueIndex, extremeWiredClientTable=extremeWiredClientTable, extremePortSummitlinkAdminMode=extremePortSummitlinkAdminMode, extremeWiredClientAuthType=extremeWiredClientAuthType, extremePortLoadshareTable=extremePortLoadshareTable, extremePortXenpakVendorName=extremePortXenpakVendorName, extremePortEgressRateLimitValue=extremePortEgressRateLimitValue, extremePortIngressStatsLinkStatus=extremePortIngressStatsLinkStatus, extremePortRateShapePortType=extremePortRateShapePortType, extremePortUtilizationEntry=extremePortUtilizationEntry, extremePortIngressStatsQueueTable=extremePortIngressStatsQueueTable, extremePortXenpakVendorTable=extremePortXenpakVendorTable, extremeWiredClientID=extremeWiredClientID, extremePortLoadshare2Table=extremePortLoadshare2Table, extremePortUtilizationTable=extremePortUtilizationTable, extremePortIngressStatsQueuePercentDropped=extremePortIngressStatsQueuePercentDropped, extremePortLoadshare2MasterIfIndex=extremePortLoadshare2MasterIfIndex, extremePortIngressQueueStatsEntry=extremePortIngressQueueStatsEntry, extremePortIngressStatsQueueLowPriBytes=extremePortIngressStatsQueueLowPriBytes, extremePortRateShapeLoopbackTag=extremePortRateShapeLoopbackTag, extremePortLoadshare2Status=extremePortLoadshare2Status, extremePort=extremePort, extremePortUtilizationAvgTxBw=extremePortUtilizationAvgTxBw, extremePortRateShapeEntry=extremePortRateShapeEntry, extremeWiredClientIP=extremeWiredClientIP, extremePortRateShapeTable=extremePortRateShapeTable, extremePortInfoTable=extremePortInfoTable, extremePortSummitlinkOperMode=extremePortSummitlinkOperMode, extremePortLoadshare2SlaveIfIndex=extremePortLoadshare2SlaveIfIndex, extremeWiredClientLastStateChangeTime=extremeWiredClientLastStateChangeTime, extremePortSummitlinkTable=extremePortSummitlinkTable, extremePortLoadshareSlaveIfIndex=extremePortLoadshareSlaveIfIndex, extremePortLoadshareStatus=extremePortLoadshareStatus, extremePortInfoFilterDownCounter=extremePortInfoFilterDownCounter, extremePortEgressRateLimitTable=extremePortEgressRateLimitTable, extremeWiredClientPriority=extremeWiredClientPriority, extremePortInfoEntry=extremePortInfoEntry, extremePortLoadshare2Algorithm=extremePortLoadshare2Algorithm, extremePortUtilizationAvgRxBw=extremePortUtilizationAvgRxBw, extremePortInfoFilterUpCounter=extremePortInfoFilterUpCounter, PYSNMP_MODULE_ID=extremePort, extremePortRateShapeStatus=extremePortRateShapeStatus, extremePortUtilizationPeakRxBw=extremePortUtilizationPeakRxBw, extremePortLoadshareMasterIfIndex=extremePortLoadshareMasterIfIndex, extremePortUtilizationPeakTxBw=extremePortUtilizationPeakTxBw)
