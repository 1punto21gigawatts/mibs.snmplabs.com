#
# PySNMP MIB module JUNIPER-CHASSIS-CLUSTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-CHASSIS-CLUSTER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:58:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
jnxJsChassisCluster, = mibBuilder.importSymbols("JUNIPER-JS-SMI", "jnxJsChassisCluster")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ObjectIdentity, IpAddress, iso, Gauge32, ModuleIdentity, Counter32, Bits, TimeTicks, Integer32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ObjectIdentity", "IpAddress", "iso", "Gauge32", "ModuleIdentity", "Counter32", "Bits", "TimeTicks", "Integer32", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
jnxJsChassisClusterMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 14, 1))
jnxJsChassisClusterMIB.setRevisions(('2013-09-20 00:00', '2012-07-20 00:00', '2011-06-28 00:00', '2009-05-27 00:00', '2009-02-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxJsChassisClusterMIB.setRevisionsDescriptions(('Added trap jnxJsChClusterWeightTrap', 'Added trap jnxJsChClusterSpuMismatchTrap', 'Added trap jnxJsChClusterIntfTrap', 'Added trap class for jnxJsChassisClusterSwitchover', 'Creation Date',))
if mibBuilder.loadTexts: jnxJsChassisClusterMIB.setLastUpdated('201309200000Z')
if mibBuilder.loadTexts: jnxJsChassisClusterMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxJsChassisClusterMIB.setContactInfo('Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net HTTP://www.juniper.net')
if mibBuilder.loadTexts: jnxJsChassisClusterMIB.setDescription('Chassis Clustering is concerned with ensuring minimal disruption to data and control planes in case of a failover. If one of the chassis in a cluster fails, the other chassis in the cluster takes over the function of the failed chassis with minimal service interruption. This module defines the objects pertaining to Chassis Cluster.')
jnxJsChassisClusterNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 14, 1, 0))
jnxJsChassisClusterTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 14, 1, 1))
jnxJsChassisClusterSwitchover = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 14, 1, 0, 1)).setObjects(("JUNIPER-CHASSIS-CLUSTER-MIB", "jnxJsChClusterSwitchoverInfoRedundancyGroup"), ("JUNIPER-CHASSIS-CLUSTER-MIB", "jnxJsChClusterSwitchoverInfoClusterId"), ("JUNIPER-CHASSIS-CLUSTER-MIB", "jnxJsChClusterSwitchoverInfoNodeId"), ("JUNIPER-CHASSIS-CLUSTER-MIB", "jnxJsChClusterSwitchoverInfoPreviousState"), ("JUNIPER-CHASSIS-CLUSTER-MIB", "jnxJsChClusterSwitchoverInfoCurrentState"), ("JUNIPER-CHASSIS-CLUSTER-MIB", "jnxJsChClusterSwitchoverInfoReason"))
if mibBuilder.loadTexts: jnxJsChassisClusterSwitchover.setStatus('current')
if mibBuilder.loadTexts: jnxJsChassisClusterSwitchover.setDescription('Notification to signal switchover/failover.')
jnxJsChClusterIntfTrap = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 14, 1, 0, 2)).setObjects(("JUNIPER-CHASSIS-CLUSTER-MIB", "jnxJsChClusterSwitchoverInfoClusterId"), ("JUNIPER-CHASSIS-CLUSTER-MIB", "jnxJsChClusterIntfName"), ("JUNIPER-CHASSIS-CLUSTER-MIB", "jnxJsChClusterIntfState"), ("JUNIPER-CHASSIS-CLUSTER-MIB", "jnxJsChClusterIntfSeverity"), ("JUNIPER-CHASSIS-CLUSTER-MIB", "jnxJsChClusterIntfStateReason"))
if mibBuilder.loadTexts: jnxJsChClusterIntfTrap.setStatus('current')
if mibBuilder.loadTexts: jnxJsChClusterIntfTrap.setDescription('Notification to signal node health status change (healthy/unhealthy).')
jnxJsChClusterSpuMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 14, 1, 0, 3)).setObjects(("JUNIPER-CHASSIS-CLUSTER-MIB", "jnxJsChClusterNodeZeroId"), ("JUNIPER-CHASSIS-CLUSTER-MIB", "jnxJsChClusterNodeZeroSpuCount"), ("JUNIPER-CHASSIS-CLUSTER-MIB", "jnxJsChClusterNodeOneId"), ("JUNIPER-CHASSIS-CLUSTER-MIB", "jnxJsChClusterNodeOneSpuCount"))
if mibBuilder.loadTexts: jnxJsChClusterSpuMismatchTrap.setStatus('current')
if mibBuilder.loadTexts: jnxJsChClusterSpuMismatchTrap.setDescription('Notification to signal cluster having different SPU number.')
jnxJsChClusterWeightTrap = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 14, 1, 0, 4)).setObjects(("JUNIPER-CHASSIS-CLUSTER-MIB", "jnxJsChClusterClusterID"), ("JUNIPER-CHASSIS-CLUSTER-MIB", "jnxJsChClusterRedundancyGroupID"), ("JUNIPER-CHASSIS-CLUSTER-MIB", "jnxJsChClusterNodeID"), ("JUNIPER-CHASSIS-CLUSTER-MIB", "jnxJsChClusterWeightHealthStatus"), ("JUNIPER-CHASSIS-CLUSTER-MIB", "jnxJsChClusterWeightValue"))
if mibBuilder.loadTexts: jnxJsChClusterWeightTrap.setStatus('current')
if mibBuilder.loadTexts: jnxJsChClusterWeightTrap.setDescription('Notification to signal node health status change (healthy/unhealthy).')
jnxJsChClusterSwitchoverInfoRedundancyGroup = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 14, 1, 1, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJsChClusterSwitchoverInfoRedundancyGroup.setStatus('current')
if mibBuilder.loadTexts: jnxJsChClusterSwitchoverInfoRedundancyGroup.setDescription('This object contains identification of redundancy group that switched over.')
jnxJsChClusterSwitchoverInfoClusterId = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 14, 1, 1, 2), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJsChClusterSwitchoverInfoClusterId.setStatus('current')
if mibBuilder.loadTexts: jnxJsChClusterSwitchoverInfoClusterId.setDescription('This object contains cluster identification information where the switchover occured.')
jnxJsChClusterSwitchoverInfoNodeId = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 14, 1, 1, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJsChClusterSwitchoverInfoNodeId.setStatus('current')
if mibBuilder.loadTexts: jnxJsChClusterSwitchoverInfoNodeId.setDescription('This object contains node identification information where the switchover occured.')
jnxJsChClusterSwitchoverInfoPreviousState = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 14, 1, 1, 4), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJsChClusterSwitchoverInfoPreviousState.setStatus('current')
if mibBuilder.loadTexts: jnxJsChClusterSwitchoverInfoPreviousState.setDescription('This object contains the redundancy state of the cluster before the occurance of switchover.')
jnxJsChClusterSwitchoverInfoCurrentState = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 14, 1, 1, 5), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJsChClusterSwitchoverInfoCurrentState.setStatus('current')
if mibBuilder.loadTexts: jnxJsChClusterSwitchoverInfoCurrentState.setDescription('This object contains the redundancy state of the cluster after the occurance of switchover.')
jnxJsChClusterSwitchoverInfoReason = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 14, 1, 1, 6), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJsChClusterSwitchoverInfoReason.setStatus('current')
if mibBuilder.loadTexts: jnxJsChClusterSwitchoverInfoReason.setDescription('This object contains the cause for switchover.')
jnxJsChClusterIntfName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 14, 1, 1, 7), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJsChClusterIntfName.setStatus('current')
if mibBuilder.loadTexts: jnxJsChClusterIntfName.setDescription('This object contains the name of the link that changed its state.')
jnxJsChClusterIntfState = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 14, 1, 1, 8), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJsChClusterIntfState.setStatus('current')
if mibBuilder.loadTexts: jnxJsChClusterIntfState.setDescription('This object contains the state of the link; whether it is UP or DOWN.')
jnxJsChClusterIntfSeverity = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 14, 1, 1, 9), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJsChClusterIntfSeverity.setStatus('current')
if mibBuilder.loadTexts: jnxJsChClusterIntfSeverity.setDescription('This object reflects the severity; whether it is minor or major.')
jnxJsChClusterIntfStateReason = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 14, 1, 1, 10), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJsChClusterIntfStateReason.setStatus('current')
if mibBuilder.loadTexts: jnxJsChClusterIntfStateReason.setDescription('This object contains the reason why the link state changed.')
jnxJsChClusterNodeZeroId = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 14, 1, 1, 11), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJsChClusterNodeZeroId.setStatus('current')
if mibBuilder.loadTexts: jnxJsChClusterNodeZeroId.setDescription('This object contains remote node identification information where the event occured.')
jnxJsChClusterNodeOneId = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 14, 1, 1, 12), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJsChClusterNodeOneId.setStatus('current')
if mibBuilder.loadTexts: jnxJsChClusterNodeOneId.setDescription('This object contains remote node identification information where the event occured.')
jnxJsChClusterNodeZeroSpuCount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 14, 1, 1, 13), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJsChClusterNodeZeroSpuCount.setStatus('current')
if mibBuilder.loadTexts: jnxJsChClusterNodeZeroSpuCount.setDescription('This object contains local node total SPU number.')
jnxJsChClusterNodeOneSpuCount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 14, 1, 1, 14), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJsChClusterNodeOneSpuCount.setStatus('current')
if mibBuilder.loadTexts: jnxJsChClusterNodeOneSpuCount.setDescription('This object contains remote node total SPU number.')
jnxJsChClusterClusterID = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 14, 1, 1, 15), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJsChClusterClusterID.setStatus('current')
if mibBuilder.loadTexts: jnxJsChClusterClusterID.setDescription('This object contains identification of cluster, in which the event occured.')
jnxJsChClusterRedundancyGroupID = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 14, 1, 1, 16), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJsChClusterRedundancyGroupID.setStatus('current')
if mibBuilder.loadTexts: jnxJsChClusterRedundancyGroupID.setDescription('This object contains identification of RedundancyGroup, in which the event occured.')
jnxJsChClusterNodeID = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 14, 1, 1, 17), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJsChClusterNodeID.setStatus('current')
if mibBuilder.loadTexts: jnxJsChClusterNodeID.setDescription('This object contains identification of node, in which the event occured.')
jnxJsChClusterWeightHealthStatus = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 14, 1, 1, 18), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJsChClusterWeightHealthStatus.setStatus('current')
if mibBuilder.loadTexts: jnxJsChClusterWeightHealthStatus.setDescription('This object contains health status, whether is healthy or unhealthy.')
jnxJsChClusterWeightValue = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 14, 1, 1, 19), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJsChClusterWeightValue.setStatus('current')
if mibBuilder.loadTexts: jnxJsChClusterWeightValue.setDescription('This object contains weight value.')
mibBuilder.exportSymbols("JUNIPER-CHASSIS-CLUSTER-MIB", PYSNMP_MODULE_ID=jnxJsChassisClusterMIB, jnxJsChClusterNodeOneSpuCount=jnxJsChClusterNodeOneSpuCount, jnxJsChClusterNodeID=jnxJsChClusterNodeID, jnxJsChClusterSwitchoverInfoClusterId=jnxJsChClusterSwitchoverInfoClusterId, jnxJsChClusterSwitchoverInfoRedundancyGroup=jnxJsChClusterSwitchoverInfoRedundancyGroup, jnxJsChClusterSwitchoverInfoCurrentState=jnxJsChClusterSwitchoverInfoCurrentState, jnxJsChClusterNodeZeroSpuCount=jnxJsChClusterNodeZeroSpuCount, jnxJsChassisClusterSwitchover=jnxJsChassisClusterSwitchover, jnxJsChClusterClusterID=jnxJsChClusterClusterID, jnxJsChassisClusterNotifications=jnxJsChassisClusterNotifications, jnxJsChClusterIntfName=jnxJsChClusterIntfName, jnxJsChClusterWeightTrap=jnxJsChClusterWeightTrap, jnxJsChClusterIntfSeverity=jnxJsChClusterIntfSeverity, jnxJsChClusterSwitchoverInfoNodeId=jnxJsChClusterSwitchoverInfoNodeId, jnxJsChClusterIntfStateReason=jnxJsChClusterIntfStateReason, jnxJsChClusterWeightValue=jnxJsChClusterWeightValue, jnxJsChClusterRedundancyGroupID=jnxJsChClusterRedundancyGroupID, jnxJsChassisClusterMIB=jnxJsChassisClusterMIB, jnxJsChClusterSwitchoverInfoPreviousState=jnxJsChClusterSwitchoverInfoPreviousState, jnxJsChClusterIntfTrap=jnxJsChClusterIntfTrap, jnxJsChClusterSpuMismatchTrap=jnxJsChClusterSpuMismatchTrap, jnxJsChClusterNodeOneId=jnxJsChClusterNodeOneId, jnxJsChClusterNodeZeroId=jnxJsChClusterNodeZeroId, jnxJsChClusterSwitchoverInfoReason=jnxJsChClusterSwitchoverInfoReason, jnxJsChassisClusterTrapObjects=jnxJsChassisClusterTrapObjects, jnxJsChClusterWeightHealthStatus=jnxJsChClusterWeightHealthStatus, jnxJsChClusterIntfState=jnxJsChClusterIntfState)
