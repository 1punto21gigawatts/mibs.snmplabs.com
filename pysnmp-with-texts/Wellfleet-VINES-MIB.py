#
# PySNMP MIB module Wellfleet-VINES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-VINES-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:42:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, NotificationType, iso, TimeTicks, ModuleIdentity, MibIdentifier, Integer32, ObjectIdentity, Bits, Counter32, Counter64, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "NotificationType", "iso", "TimeTicks", "ModuleIdentity", "MibIdentifier", "Integer32", "ObjectIdentity", "Bits", "Counter32", "Counter64", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfVinesGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfVinesGroup")
wfVinesBase = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 1))
wfVinesBaseDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesBaseDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesBaseDelete.setDescription('Create/Delete parameter. This value determines whether or not VINES is configured on this slot.')
wfVinesBaseDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesBaseDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesBaseDisable.setDescription('This parameter determines whether or not VINES is to startup.')
wfVinesBaseState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesBaseState.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesBaseState.setDescription('This parameter reflects the current state of VINES.')
wfVinesBaseUserNetid = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2097151))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesBaseUserNetid.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesBaseUserNetid.setDescription('The network ID as defined by the user. A null value indicates that the user is not configuring a Network ID and that the the router should assign it.')
wfVinesBaseRouterNetid = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesBaseRouterNetid.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesBaseRouterNetid.setDescription('The network ID as defined by the router. If the user configures a Network ID in the above attribute, we will take that value and add in the Wellfleet code for VINES and save it here.')
wfVinesBaseBcastClass = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("bcast", 1), ("chrg", 2), ("cost", 3), ("lans", 4), ("srvr", 5), ("nochrg", 6), ("locost", 7), ("alllans", 8))).clone('bcast')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesBaseBcastClass.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesBaseBcastClass.setDescription('The broadcast modifier. This value defines the class of broadcast packets that are originated by this node.')
wfVinesBaseNetworkSize = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesBaseNetworkSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesBaseNetworkSize.setDescription('Allows the network administrator to pre-configure the size of the network. The default is 0.')
wfVinesBaseHostSize = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesBaseHostSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesBaseHostSize.setDescription('Allows the network administrator to pre-configure the expected number of neighbor. The dafault is 0.')
wfVinesBaseRtpMode = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("automode", 1), ("seq", 2), ("sequenced", 3))).clone('automode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesBaseRtpMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesBaseRtpMode.setDescription('This parameter will determine whether sequenced RTP or Non Sequenced RTP will be supported or both modes will be available.')
wfVinesBaseLogFilter = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2147483647, 1, 2, 16, 3, 17, 18, 19))).clone(namedValues=NamedValues(("nothing", 2147483647), ("debug", 1), ("info", 2), ("trace", 16), ("debuginfo", 3), ("debugtrace", 17), ("infotrace", 18), ("debuginfotrace", 19))).clone('nothing')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesBaseLogFilter.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesBaseLogFilter.setDescription('Filter out some log messages, Default filters out trace messages. ??? Change this later to FILTER_TRACE ??? ')
wfVinesBaseRouterSeqNumber = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesBaseRouterSeqNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesBaseRouterSeqNumber.setDescription('This parameter keeps track of the of current router sequence number')
wfVinesBaseSoloSlotMask = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 1, 12), Gauge32().clone(4294705152)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesBaseSoloSlotMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesBaseSoloSlotMask.setDescription('Slot mask for which slots VINES soloist is eligible to run on. The MSBit represents slot 1, the next most significant bit represents slot 2, and so on... Slots can be 1-14. Default is all slots on a BCN.')
wfVinesBaseSoloistSlot = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesBaseSoloistSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesBaseSoloistSlot.setDescription('Tells which slot the VINES soloist is running on')
wfVinesIp = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 2))
wfVinesIpTotIn = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIpTotIn.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIpTotIn.setDescription('The total number of VINES IP packets received.')
wfVinesIpTotOut = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIpTotOut.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIpTotOut.setDescription('The total number of VINES IP packets sent.')
wfVinesIpBad = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIpBad.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIpBad.setDescription('The total number of badly formed packets that were received. This field is incremented when a packet is received with an improper checksum. ')
wfVinesIpRouted = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIpRouted.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIpRouted.setDescription('The total number of packets received that were routed to another node. This statistic includes the number of IP packets encapsulated within routed VINES IP headers. Each routed packet counts as both an incoming and outgoing packet.')
wfVinesIpRoutedHWM = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIpRoutedHWM.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIpRoutedHWM.setDescription('The largest number of packets routed in one second since the server was last booted.')
wfVinesIpBcast = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIpBcast.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIpBcast.setDescription('The number of VINES IP broadcast packets sent, both locally generated and routed from other nodes. ')
wfVinesIpBcastHWM = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIpBcastHWM.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIpBcastHWM.setDescription('The largest number of packets broadcast in one second since the server was last booted.')
wfVinesIpReass = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIpReass.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIpReass.setDescription('The number of times that packets were reassembled. Reassemblies result from the transmission of packets that must be broken into smaller pieces, then reassembled due to differences in transmission media.')
wfVinesIpFrags = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIpFrags.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIpFrags.setDescription('The number of packet fragmentations performed.')
wfVinesIpToDodIP = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIpToDodIP.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIpToDodIP.setDescription('The number of packets that VINES IP passed to IP for encapsulation in IP headers. These packets were initially handled by VINES IP, but were passed to IP for routing. If the TCP/IP Server-to-Server option is not installed, this value will be zero.')
wfVinesIpFromDodIP = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIpFromDodIP.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIpFromDodIP.setDescription('The number of packets that VINES IP received from IP to be decapsulated into VINES packets. IP initially handled these packets, but had to pass them on to VINES IP for routing. If the server is not running a TCP/IP option, this value will be zero.')
wfVinesRtpNbr = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 3))
wfVinesRtpNbrNumber = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpNbrNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesRtpNbrNumber.setDescription('Number of entries in the Table of Neighbors.')
wfVinesRtpNbrTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 4), )
if mibBuilder.loadTexts: wfVinesRtpNbrTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesRtpNbrTable.setDescription('This is the Table of Neighbors.')
wfVinesRtpNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 4, 1), ).setIndexNames((0, "Wellfleet-VINES-MIB", "wfVinesRtpNbrNetId"), (0, "Wellfleet-VINES-MIB", "wfVinesRtpNbrSubNetId"))
if mibBuilder.loadTexts: wfVinesRtpNbrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesRtpNbrEntry.setDescription('An entry in the Table of Neighbors.')
wfVinesRtpNbrNetId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpNbrNetId.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesRtpNbrNetId.setDescription('The network ID of this neighbor.')
wfVinesRtpNbrSubNetId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpNbrSubNetId.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesRtpNbrSubNetId.setDescription('The subnetwork ID of this neighbor.')
wfVinesRtpNbrType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("workst", 1), ("server", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpNbrType.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesRtpNbrType.setDescription('The type of node: client or server.')
wfVinesRtpNbrIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("enet", 1), ("tr4k", 2), ("tr16k", 3), ("hdlc1200", 4), ("hdlc4800", 5), ("hdlc9600", 6), ("hdlc56000", 7), ("async1200", 8), ("async4800", 9), ("async9600", 10), ("async56000", 11), ("x251200", 12), ("x254800", 13), ("x259600", 14), ("x2556000", 15), ("t145k", 16), ("t1128k", 17), ("t1192k", 18), ("t1256k", 19), ("t1320k", 20), ("t1384k", 21), ("t1448k", 22), ("t1512k", 23), ("t1576k", 24), ("t1640k", 25), ("t1704k", 26), ("t1896k", 27), ("t11088k", 28), ("t11344k", 29), ("tunnel", 30), ("fddi", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpNbrIfType.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesRtpNbrIfType.setDescription('This describes the type of interface.')
wfVinesRtpNbrRemAdr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 4, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpNbrRemAdr.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesRtpNbrRemAdr.setDescription('Remote MAC address.')
wfVinesRtpNbrLocAdr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 4, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpNbrLocAdr.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesRtpNbrLocAdr.setDescription('Local MAC address.')
wfVinesRtpNbrLocSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpNbrLocSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesRtpNbrLocSlot.setDescription('Slot connected to this neighbor.')
wfVinesRtpNbrLocLine = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpNbrLocLine.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesRtpNbrLocLine.setDescription('Line connected to this neighbor.')
wfVinesRtpNbrSvrName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 4, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpNbrSvrName.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesRtpNbrSvrName.setDescription('Name of the server (N/A).')
wfVinesRtpNbrCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpNbrCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesRtpNbrCost.setDescription('Cost for this neighbor.')
wfVinesSeqRtpNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("init", 1), ("fullrqst", 2), ("chgrqst", 3), ("up", 4))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesSeqRtpNbrState.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesSeqRtpNbrState.setDescription('Current state of the Nbr')
wfVinesSeqRtpNbrSeqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesSeqRtpNbrSeqNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesSeqRtpNbrSeqNumber.setDescription("The Nbr's own sequence number")
wfVinesRtpNbrRtType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("seq", 1), ("sequenced", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpNbrRtType.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesRtpNbrRtType.setDescription('The route type of this nbr')
wfVinesRtpNbrNumPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpNbrNumPaths.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesRtpNbrNumPaths.setDescription('The number of paths to the Nbr')
wfVinesRtpRt = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 5))
wfVinesRtpRtNumber = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpRtNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesRtpRtNumber.setDescription('Number of entries in the Table of Networks.')
wfVinesRtpRtTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 6), )
if mibBuilder.loadTexts: wfVinesRtpRtTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesRtpRtTable.setDescription('This is the Table of Networks.')
wfVinesRtpRtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 6, 1), ).setIndexNames((0, "Wellfleet-VINES-MIB", "wfVinesRtpRtNetid"))
if mibBuilder.loadTexts: wfVinesRtpRtEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesRtpRtEntry.setDescription('An entry in the Table of Networks.')
wfVinesRtpRtNetid = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpRtNetid.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesRtpRtNetid.setDescription('The network ID number.')
wfVinesRtpRtMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpRtMetric.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesRtpRtMetric.setDescription('The routing metric to get to this network.')
wfVinesRtpRtIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpRtIdle.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesRtpRtIdle.setDescription('The idle time for this network.')
wfVinesRtpRtGateNetid = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpRtGateNetid.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesRtpRtGateNetid.setDescription('The network ID of the gateway to this network.')
wfVinesRtpRtSvrName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 6, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpRtSvrName.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesRtpRtSvrName.setDescription('The servers name (N/A).')
wfVinesRtpRtGateSvrName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 6, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpRtGateSvrName.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesRtpRtGateSvrName.setDescription('The name of the gateway server.')
wfVinesRtpRtLocSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpRtLocSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesRtpRtLocSlot.setDescription('Slot connected to this Network.')
wfVinesRtpRtLocLine = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpRtLocLine.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesRtpRtLocLine.setDescription('Line connected to this Network.')
wfVinesRtpRtIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("enet", 1), ("tr4k", 2), ("tr16k", 3), ("hdlc1200", 4), ("hdlc4800", 5), ("hdlc9600", 6), ("hdlc56000", 7), ("async1200", 8), ("async4800", 9), ("async9600", 10), ("async56000", 11), ("x251200", 12), ("x254800", 13), ("x259600", 14), ("x2556000", 15), ("t145k", 16), ("t1128k", 17), ("t1192k", 18), ("t1256k", 19), ("t1320k", 20), ("t1384k", 21), ("t1448k", 22), ("t1512k", 23), ("t1576k", 24), ("t1640k", 25), ("t1704k", 26), ("t1896k", 27), ("t11088k", 28), ("t11344k", 29), ("tunnel", 30), ("fddi", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpRtIfType.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesRtpRtIfType.setDescription('This describes the type of interface.')
wfVinesRtpRtGateHwAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 6, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpRtGateHwAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesRtpRtGateHwAddr.setDescription('Remote MAC address.')
wfVinesRtpRtType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("seq", 1), ("sequenced", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpRtType.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesRtpRtType.setDescription("This indicates the whether this is a VINES 5.50 router or a VINES 4.11 Router/Server. If learnt as part of a 4.11 RTP or thro' a sequenced RTP or by looking at the network flag in the tuple of a sequenced update")
wfVinesRtpRtSeqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpRtSeqNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesRtpRtSeqNumber.setDescription('This attribute will always have a value of 0x0')
wfVinesRtpRtTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpRtTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesRtpRtTimeStamp.setDescription('This attribute will always have a value of 0x0')
wfVinesRtpRtNumPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesRtpRtNumPaths.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesRtpRtNumPaths.setDescription('The number of paths to the Network')
wfVinesIf = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 7))
wfVinesIfNumber = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfNumber.setDescription('This is the number of entries in the Interfaces Table.')
wfVinesIfTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8), )
if mibBuilder.loadTexts: wfVinesIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfTable.setDescription('This is the Table of Interfaces.')
wfVinesIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1), ).setIndexNames((0, "Wellfleet-VINES-MIB", "wfVinesIfCct"))
if mibBuilder.loadTexts: wfVinesIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfEntry.setDescription('An entry to the Interface Table.')
wfVinesIfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesIfDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfDelete.setDescription('Create/Delete parameter. Users perform an SNMP set command to create/delete a VINES interface. ')
wfVinesIfDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesIfDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfDisable.setDescription('Enable/Disable parameter. Users perform an SNMP set command to enable/disable a VINES interface. ')
wfVinesIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfState.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfState.setDescription('This parameter reflects the current state of the VINES interface.')
wfVinesIfSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfSlot.setDescription('The slot on which this interface is configured.')
wfVinesIfLine = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfLine.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfLine.setDescription('The line on which this interface is configured.')
wfVinesIfCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfCct.setDescription('The circuit number for this interface.')
wfVinesIfSession = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfSession.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfSession.setDescription('The session number for this interface.')
wfVinesIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("enet", 1), ("tr4k", 2), ("tr16k", 3), ("hdlc1200", 4), ("hdlc4800", 5), ("hdlc9600", 6), ("hdlc56000", 7), ("async1200", 8), ("async4800", 9), ("async9600", 10), ("async56000", 11), ("x251200", 12), ("x254800", 13), ("x259600", 14), ("x2556000", 15), ("t145k", 16), ("t1128k", 17), ("t1192k", 18), ("t1256k", 19), ("t1320k", 20), ("t1384k", 21), ("t1448k", 22), ("t1512k", 23), ("t1576k", 24), ("t1640k", 25), ("t1704k", 26), ("t1896k", 27), ("t11088k", 28), ("t11344k", 29), ("tunnel", 30), ("fddi", 31))).clone('enet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesIfType.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfType.setDescription('The type of interface this is.')
wfVinesIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfDescr.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfDescr.setDescription('Description of this interface.')
wfVinesIfAdr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfAdr.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfAdr.setDescription('The MAC address of this interface.')
wfVinesIfDodIpDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesIfDodIpDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfDodIpDisable.setDescription('This parameter indicates if this interface is enabled to encapsulate VINES packets over DoD IP.')
wfVinesIfArpDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesIfArpDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfArpDisable.setDescription('This parameter indicates if this interface is enabled to support VINES ARP. ')
wfVinesIfTrEndStation = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesIfTrEndStation.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfTrEndStation.setDescription('This parameter indicates if this interface is enabled for source routing end station support. ')
wfVinesIfInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfInPkts.setDescription('The number of packets received on this interface.')
wfVinesIfInErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfInErrs.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfInErrs.setDescription('The number of packets received with errors.')
wfVinesIfOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfOutPkts.setDescription('The number of packets transmitted on this interface.')
wfVinesIfOutErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfOutErrs.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfOutErrs.setDescription('The number of errors on packets transmitted.')
wfVinesIfInMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfInMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfInMsgs.setDescription('The number of messages received on this interface.')
wfVinesIfMux = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enet", 1), ("snap", 2))).clone('enet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesIfMux.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfMux.setDescription('Muxing scheme for this interface. VINES currently only supports Ethernet encapsulation, but they plan to switch to SNAP.')
wfVinesIfFwdDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfFwdDrops.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfFwdDrops.setDescription('The number of pakets that were dropped because of no forwarding information for the destination.')
wfVinesIfZeroHopDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfZeroHopDrops.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfZeroHopDrops.setDescription('The number of pakets that were dropped because of a zero hop count.')
wfVinesIfIcpInErrorNotifs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfIcpInErrorNotifs.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfIcpInErrorNotifs.setDescription('The number of ICP error notification packets received.')
wfVinesIfIcpInMetricNotifs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfIcpInMetricNotifs.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfIcpInMetricNotifs.setDescription('The number of ICP metric notification packets received.')
wfVinesIfIcpInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfIcpInErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfIcpInErrors.setDescription('The number of ICP packets received with errors.')
wfVinesIfIcpOutErrorNotifs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfIcpOutErrorNotifs.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfIcpOutErrorNotifs.setDescription('The number of ICP error notification packets transmitted.')
wfVinesIfIcpOutMetricNotifs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfIcpOutMetricNotifs.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfIcpOutMetricNotifs.setDescription('The number of ICP metric notification packets transmitted.')
wfVinesIfArpInQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfArpInQueries.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfArpInQueries.setDescription('The number of ARP queries received.')
wfVinesIfArpInAssgReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfArpInAssgReqs.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfArpInAssgReqs.setDescription('The number of ARP assignment requests received.')
wfVinesIfArpInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfArpInErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfArpInErrors.setDescription('The number of ARP packets received with errors.')
wfVinesIfArpOutServRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfArpOutServRsps.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfArpOutServRsps.setDescription('The number of ARP service responses sent.')
wfVinesIfArpOutAssgRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfArpOutAssgRsps.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfArpOutAssgRsps.setDescription('The number of ARP assignment responses sent.')
wfVinesIfInRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfInRedirects.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfInRedirects.setDescription('The number of Redirect packets received.')
wfVinesIfOutRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfOutRedirects.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfOutRedirects.setDescription('The number of Redirect packets sent.')
wfVinesIfEchoInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfEchoInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfEchoInPkts.setDescription('The number of Echo packets received.')
wfVinesIfEchoOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfEchoOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfEchoOutPkts.setDescription('The number of Echo packets sent.')
wfVinesIfReassFails = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfReassFails.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfReassFails.setDescription('The number of packet reassemblies that failed.')
wfVinesIfRemClientPrivDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesIfRemClientPrivDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfRemClientPrivDisable.setDescription('This parameter indicates that this interface will allow remote clients privileges on this segment. This means that a client is not restricted to being within one hop of a VINES server. ')
wfVinesIfSplitHorizonDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesIfSplitHorizonDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfSplitHorizonDisable.setDescription('Split Horizon')
wfVinesIfCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesIfCost.setStatus('obsolete')
if mibBuilder.loadTexts: wfVinesIfCost.setDescription('The Interface Cost The default is null - meaning use the Banyan specified cost. Otherwise, the configured value wfVinesIfCfgCost will be used.')
wfVinesIfSyncPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesIfSyncPortNumber.setStatus('obsolete')
if mibBuilder.loadTexts: wfVinesIfSyncPortNumber.setDescription('The Sync port number required to determine number of RTP packets sent for each network. It can only take a value between 1 - 4. It correspond to the Sync port number on this slot only. If it is 4.2 for example, then the port number should be 2.')
wfVinesIfInLackRescError = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfInLackRescError.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfInLackRescError.setDescription('Failed to duplicate packet due to lack of resource.')
wfVinesIfOutLackRescError = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfOutLackRescError.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfOutLackRescError.setDescription('Failed to duplicate packet due to lack of resource.')
wfVinesIfRtpRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfRtpRecv.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfRtpRecv.setDescription('The number of RTP packets received.')
wfVinesIfRtpSent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfRtpSent.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfRtpSent.setDescription('The number of RTP packets sent.')
wfVinesIfSMDSGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 45), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesIfSMDSGroupAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfSMDSGroupAddress.setDescription('Configurable SMDS broadcast address')
wfVinesIfFRBcastDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 46), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesIfFRBcastDlci.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfFRBcastDlci.setDescription('Configurable FRAME RELAY broadcast address')
wfVinesIfCfgAdr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 47), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesIfCfgAdr.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfCfgAdr.setDescription('The configured MAC address of this interface.')
wfVinesIfNumRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfNumRoutes.setStatus('obsolete')
if mibBuilder.loadTexts: wfVinesIfNumRoutes.setDescription('Number of routes cached in the forwarding table')
wfVinesIfCfgCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 49), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesIfCfgCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfCfgCost.setDescription('The configured interface cost')
wfVinesIfCostUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfCostUsed.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfCostUsed.setDescription('The Interface Cost used by the router')
wfVinesIfFrpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesIfFrpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfFrpEnable.setDescription('Parameter to indicate whether this interface is to support the use of FRP header ')
wfVinesIfSeqArpInQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfSeqArpInQueries.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfSeqArpInQueries.setDescription('The number of Sequenced ARP queries received.')
wfVinesIfSeqArpInAssgReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfSeqArpInAssgReqs.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfSeqArpInAssgReqs.setDescription('The number of Sequenced ARP assignment requests received.')
wfVinesIfSeqArpInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfSeqArpInErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfSeqArpInErrors.setDescription('The number of Sequenced ARP packets received with errors.')
wfVinesIfSeqArpOutServRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfSeqArpOutServRsps.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfSeqArpOutServRsps.setDescription('The number of Sequenced ARP service responses sent.')
wfVinesIfSeqArpOutAssgRsps = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfSeqArpOutAssgRsps.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfSeqArpOutAssgRsps.setDescription('The number of Sequenced ARP assignment responses sent.')
wfVinesIfInSeqRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfInSeqRedirects.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfInSeqRedirects.setDescription('The number of Sequenced Redirect packets received.')
wfVinesIfOutSeqRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfOutSeqRedirects.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfOutSeqRedirects.setDescription('The number of Sequenced Redirect packets sent.')
wfVinesIfSeqRtpRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfSeqRtpRecv.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfSeqRtpRecv.setDescription('The number of RTP packets received.')
wfVinesIfSeqRtpSent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfSeqRtpSent.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfSeqRtpSent.setDescription('The number of RTP packets sent.')
wfVinesIfRtpGenerationDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesIfRtpGenerationDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfRtpGenerationDisable.setDescription('This parameter will be used to disable the RTP generation on an interface, where static routes may be configured')
wfVinesIfInverseArpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesIfInverseArpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfInverseArpEnable.setDescription('This is to enable the use of Inverse ARP protocol to learn nbrs in a Frame Relay/ATM network when a new dlci comes up')
wfVinesIfSTalkSplitHorizon = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesIfSTalkSplitHorizon.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfSTalkSplitHorizon.setDescription('This is to disable the use of split horizon for STALK packets so as to support a partially meshed Frame Relay Network for VINES')
wfVinesIfPermWanNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesIfPermWanNbr.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfPermWanNbr.setDescription('This is to enable the use of Permanent Non sequenced Nbrs for Non sequenced neighbors over a WAN link, so that these are not aged every 1 hour, when using Automode/Sequenced Mode.')
wfVinesIfNumFwdEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfNumFwdEntries.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfNumFwdEntries.setDescription('This counts the number of forwarding entries on this interface')
wfVinesIfNumNonSeqNbrs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfNumNonSeqNbrs.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfNumNonSeqNbrs.setDescription('This counts the number of Non sequenced Nbrs')
wfVinesIfNumSeqNbrs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfNumSeqNbrs.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfNumSeqNbrs.setDescription('This counts the number of sequenced Nbrs')
wfVinesIfRedirectEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 8, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesIfRedirectEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfRedirectEnable.setDescription('Parameter to indicate whether this interface is to generate RTP redirect packets ')
wfVinesIfX25VC = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 9))
wfVinesIfX25VCNumber = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfX25VCNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfX25VCNumber.setDescription('This is the number of entries in the X.25 Virtual Circuit Table.')
wfVinesIfX25VCTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 10), )
if mibBuilder.loadTexts: wfVinesIfX25VCTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfX25VCTable.setDescription('This is the Table of X.25 Virtual Circuits.')
wfVinesIfX25VCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 10, 1), ).setIndexNames((0, "Wellfleet-VINES-MIB", "wfVinesIfX25VCCct"))
if mibBuilder.loadTexts: wfVinesIfX25VCEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfX25VCEntry.setDescription('An entry in the Table of X.25 Virtual Circuits.')
wfVinesIfX25VCSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfX25VCSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfX25VCSlot.setDescription('The number of the slot in which the card is installed.')
wfVinesIfX25VCLine = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfX25VCLine.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfX25VCLine.setDescription('For a serial line, this is the number of the line on the card.')
wfVinesIfX25VCCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfX25VCCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfX25VCCct.setDescription('Local circuit number for this Virtual Circuit.')
wfVinesIfX25VCSession = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfX25VCSession.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfX25VCSession.setDescription('Local session number for this Virtual Circuit.')
wfVinesIfX25VCTotIn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfX25VCTotIn.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfX25VCTotIn.setDescription('The total number of VINES IP packets received on this VC. Depending on the size of the X.25 packets received, more than one X.25 packet can make up a VINES IP packet.')
wfVinesIfX25VCTotOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfX25VCTotOut.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfX25VCTotOut.setDescription('The total number of VINES IP packets sent on this VC. Depending on the size of the X.25 packets sent, more than one X.25 packet can make up a VINES IP packet.')
wfVinesIfX25VCInErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfX25VCInErrs.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfX25VCInErrs.setDescription('The total number of input errors.')
wfVinesIfX25VCOutErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfX25VCOutErrs.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfX25VCOutErrs.setDescription('The total number of output errors.')
wfVinesIfX25VCPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 10, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfX25VCPktsOut.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfX25VCPktsOut.setDescription('The total number of X.25 packets transmitted on this VC.')
wfVinesIfX25VCPktsAwaitAck = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 10, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfX25VCPktsAwaitAck.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfX25VCPktsAwaitAck.setDescription('Total number of X.25 packets transmitted on this VC waiting for ACK.')
wfVinesIfX25VCBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 10, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfX25VCBytesOut.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfX25VCBytesOut.setDescription('Total Bytes transmitted on this VC.')
wfVinesIfX25VCBytesAwaitAck = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 10, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfX25VCBytesAwaitAck.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfX25VCBytesAwaitAck.setDescription('Total bytes transmitted on this VC that are waiting for ACK.')
wfVinesIfX25VCPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 10, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfX25VCPktsIn.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfX25VCPktsIn.setDescription('Total X.25 packets received on this VC.')
wfVinesIfX25VCBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 10, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfX25VCBytesIn.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfX25VCBytesIn.setDescription('Total Bytes received on this VC.')
wfVinesIfX25VCResetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 10, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfX25VCResetsIn.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfX25VCResetsIn.setDescription('Number of X.25 reset packets received on this VC.')
wfVinesIfX25VCResetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 10, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesIfX25VCResetsOut.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesIfX25VCResetsOut.setDescription('Number of X.25 reset packets transmitted on this VC.')
wfVinesTrafficFilterTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 11), )
if mibBuilder.loadTexts: wfVinesTrafficFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesTrafficFilterTable.setDescription('VINES Traffic Filters')
wfVinesTrafficFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 11, 1), ).setIndexNames((0, "Wellfleet-VINES-MIB", "wfVinesTrafficFilterCircuit"), (0, "Wellfleet-VINES-MIB", "wfVinesTrafficFilterRuleNumber"), (0, "Wellfleet-VINES-MIB", "wfVinesTrafficFilterFragment"))
if mibBuilder.loadTexts: wfVinesTrafficFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesTrafficFilterEntry.setDescription('An entry in WfVinesTrafficFilterTable.')
wfVinesTrafficFilterCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesTrafficFilterCreate.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesTrafficFilterCreate.setDescription('Defines the existence of the traffic filter rule: created - traffic filter exists delete - traffic filter does not exist and can be deleted.')
wfVinesTrafficFilterEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesTrafficFilterEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesTrafficFilterEnable.setDescription('Defines whether or not the traffic filter rule should be used: enabled - activate the rule. disabled - inactivate the rule.')
wfVinesTrafficFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("error", 2), ("inactive", 3))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesTrafficFilterStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesTrafficFilterStatus.setDescription('Defines the current status of the traffic filter: inactive - the rule is not in use. active - the rule is being used. error - the application detected an error in the rule.')
wfVinesTrafficFilterCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesTrafficFilterCounter.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesTrafficFilterCounter.setDescription('The number of received packets that have matched this rule.')
wfVinesTrafficFilterDefinition = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 11, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesTrafficFilterDefinition.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesTrafficFilterDefinition.setDescription('The filter rule definition.')
wfVinesTrafficFilterReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesTrafficFilterReserved.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesTrafficFilterReserved.setDescription('Reserved field.')
wfVinesTrafficFilterCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesTrafficFilterCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesTrafficFilterCircuit.setDescription('The ID of the Circuit to which the filter is applied.')
wfVinesTrafficFilterRuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 11, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesTrafficFilterRuleNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesTrafficFilterRuleNumber.setDescription('ID for the rule.')
wfVinesTrafficFilterFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 11, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesTrafficFilterFragment.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesTrafficFilterFragment.setDescription('Fragment number - for large rules.')
wfVinesTrafficFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 11, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesTrafficFilterName.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesTrafficFilterName.setDescription('Name of the rule number.')
wfVinesNameTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 12), )
if mibBuilder.loadTexts: wfVinesNameTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesNameTable.setDescription('This is the Name-to-Address Binding Table.')
wfVinesNameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 12, 1), ).setIndexNames((0, "Wellfleet-VINES-MIB", "wfVinesNameNetid"))
if mibBuilder.loadTexts: wfVinesNameEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesNameEntry.setDescription('An entry in the Table of Names.')
wfVinesNameDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesNameDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesNameDelete.setDescription('Create/Delete parameter. Users perform an SNMP set command to create/delete this name. ')
wfVinesNameDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesNameDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesNameDisable.setDescription('Enable/Disable parameter. Users perform an SNMP set command to enable/disable a name. ')
wfVinesNameNetid = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesNameNetid.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesNameNetid.setDescription('This is the network number for the host.')
wfVinesNameHost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 12, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesNameHost.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesNameHost.setDescription('This is the name of the host.')
wfVinesNameSubNetid = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 12, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesNameSubNetid.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesNameSubNetid.setDescription('This is the subnetwork number for the host.')
wfVinesArp = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 13))
wfVinesArpDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesArpDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesArpDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete ARP.')
wfVinesArpDisable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 13, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesArpDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesArpDisable.setDescription('Enable/Disable Parameter indicates whether this ARP record is enabled or disabled.')
wfVinesArpState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 13, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesArpState.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesArpState.setDescription('State of ARP.')
wfVinesArpSubnetid = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 13, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesArpSubnetid.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesArpSubnetid.setDescription('The next subnetwork ID to be assigned. ')
wfVinesArpSubnetBlock = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 13, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfVinesArpSubnetBlock.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesArpSubnetBlock.setDescription('The size of the block of subnet ids a slot can grab. ')
wfVinesArpAssignDeniedPkts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 13, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesArpAssignDeniedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesArpAssignDeniedPkts.setDescription("Number of ARP Assignment packets received for which we didn't have a free subnet number.")
wfVinesSeqRtpNbr = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 14))
wfVinesSeqRtpNbrNumber = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesSeqRtpNbrNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesSeqRtpNbrNumber.setDescription('Number of entries in the Table of 5.5 Neighbors.')
wfVinesAggrStats = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 15))
wfVinesAggrInPkts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 15, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesAggrInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesAggrInPkts.setDescription('The total number of packets received')
wfVinesAggrOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 15, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesAggrOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesAggrOutPkts.setDescription('The total number of datagrams sent (includes datagrams forwarded)')
wfVinesAggrFwdPkts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 15, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesAggrFwdPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesAggrFwdPkts.setDescription('The total number of datagrams forwarded')
wfVinesAggrInXsumErrs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 15, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesAggrInXsumErrs.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesAggrInXsumErrs.setDescription('The total number of datagrams destined for a local entity that were dropped because of a checksum error.')
wfVinesAggrBcastPkts = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 15, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesAggrBcastPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesAggrBcastPkts.setDescription('The total number of broadcast packets sent (includes locally generated broadcasts).')
wfVinesAggrOutNoRoutes = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 15, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesAggrOutNoRoutes.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesAggrOutNoRoutes.setDescription('The total number of packets queued for transmission thet were discarded because the destination was unreachable.')
wfVinesAggrInHopCountErrs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 15, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesAggrInHopCountErrs.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesAggrInHopCountErrs.setDescription('The total number of pakets that were dropped because of a zero hop count.')
wfVinesAggrInIcpErrs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 15, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesAggrInIcpErrs.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesAggrInIcpErrs.setDescription('The total number of ICP error notification packets received.')
wfVinesAggrInIcpMetrics = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 15, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesAggrInIcpMetrics.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesAggrInIcpMetrics.setDescription('The total number of ICP metric notification packets received.')
wfVinesAggrOutIcpErrs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 15, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesAggrOutIcpErrs.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesAggrOutIcpErrs.setDescription('The total number of ICP error notification packets transmitted.')
wfVinesAggrOutIcpMetrics = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 15, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesAggrOutIcpMetrics.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesAggrOutIcpMetrics.setDescription('The total number of ICP metric notification packets transmitted.')
wfVinesAggrInArpQueries = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 15, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesAggrInArpQueries.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesAggrInArpQueries.setDescription('The total number of ARP queries received.')
wfVinesAggrInArpAssigns = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 15, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesAggrInArpAssigns.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesAggrInArpAssigns.setDescription('The total number of ARP assignment requests received.')
wfVinesAggrInArpErrs = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 15, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesAggrInArpErrs.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesAggrInArpErrs.setDescription('The total number of ARP packets received with errors.')
wfVinesAggrOutArpServResps = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 15, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesAggrOutArpServResps.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesAggrOutArpServResps.setDescription('The total number of ARP service responses sent.')
wfVinesAggrOutArpAssigns = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 15, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesAggrOutArpAssigns.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesAggrOutArpAssigns.setDescription('The total number of ARP assignment responses sent.')
wfVinesAggrInRedirects = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 15, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesAggrInRedirects.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesAggrInRedirects.setDescription('The total number of Redirect packets received.')
wfVinesAggrOutRedirects = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 15, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesAggrOutRedirects.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesAggrOutRedirects.setDescription('The total number of Redirect packets sent.')
wfVinesAggrInEchos = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 15, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesAggrInEchos.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesAggrInEchos.setDescription('The total number of Echo packets received.')
wfVinesAggrOutEchos = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 8, 15, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfVinesAggrOutEchos.setStatus('mandatory')
if mibBuilder.loadTexts: wfVinesAggrOutEchos.setDescription('The total number of Echo packets sent.')
mibBuilder.exportSymbols("Wellfleet-VINES-MIB", wfVinesIfX25VCTable=wfVinesIfX25VCTable, wfVinesRtpNbrRtType=wfVinesRtpNbrRtType, wfVinesRtpRtTable=wfVinesRtpRtTable, wfVinesRtpNbrSvrName=wfVinesRtpNbrSvrName, wfVinesTrafficFilterFragment=wfVinesTrafficFilterFragment, wfVinesAggrOutIcpErrs=wfVinesAggrOutIcpErrs, wfVinesAggrInArpQueries=wfVinesAggrInArpQueries, wfVinesIfX25VCSession=wfVinesIfX25VCSession, wfVinesIfFwdDrops=wfVinesIfFwdDrops, wfVinesNameHost=wfVinesNameHost, wfVinesAggrInPkts=wfVinesAggrInPkts, wfVinesAggrInHopCountErrs=wfVinesAggrInHopCountErrs, wfVinesRtpRtTimeStamp=wfVinesRtpRtTimeStamp, wfVinesAggrOutNoRoutes=wfVinesAggrOutNoRoutes, wfVinesRtpRtGateNetid=wfVinesRtpRtGateNetid, wfVinesRtpRtNumPaths=wfVinesRtpRtNumPaths, wfVinesIfSlot=wfVinesIfSlot, wfVinesIfX25VCSlot=wfVinesIfX25VCSlot, wfVinesIfSyncPortNumber=wfVinesIfSyncPortNumber, wfVinesTrafficFilterEntry=wfVinesTrafficFilterEntry, wfVinesAggrOutPkts=wfVinesAggrOutPkts, wfVinesRtpRtNetid=wfVinesRtpRtNetid, wfVinesIfX25VCBytesAwaitAck=wfVinesIfX25VCBytesAwaitAck, wfVinesIfX25VC=wfVinesIfX25VC, wfVinesIfNumRoutes=wfVinesIfNumRoutes, wfVinesIfCost=wfVinesIfCost, wfVinesIfInErrs=wfVinesIfInErrs, wfVinesBaseDelete=wfVinesBaseDelete, wfVinesIfMux=wfVinesIfMux, wfVinesRtpRtEntry=wfVinesRtpRtEntry, wfVinesAggrFwdPkts=wfVinesAggrFwdPkts, wfVinesTrafficFilterCounter=wfVinesTrafficFilterCounter, wfVinesIfSession=wfVinesIfSession, wfVinesIfX25VCPktsIn=wfVinesIfX25VCPktsIn, wfVinesIfNumSeqNbrs=wfVinesIfNumSeqNbrs, wfVinesAggrOutArpServResps=wfVinesAggrOutArpServResps, wfVinesRtpRtGateSvrName=wfVinesRtpRtGateSvrName, wfVinesIf=wfVinesIf, wfVinesIfNumFwdEntries=wfVinesIfNumFwdEntries, wfVinesIfOutSeqRedirects=wfVinesIfOutSeqRedirects, wfVinesIfSplitHorizonDisable=wfVinesIfSplitHorizonDisable, wfVinesRtpRtIfType=wfVinesRtpRtIfType, wfVinesRtpNbrIfType=wfVinesRtpNbrIfType, wfVinesIfFRBcastDlci=wfVinesIfFRBcastDlci, wfVinesBaseRouterSeqNumber=wfVinesBaseRouterSeqNumber, wfVinesBaseHostSize=wfVinesBaseHostSize, wfVinesIfTrEndStation=wfVinesIfTrEndStation, wfVinesIfLine=wfVinesIfLine, wfVinesIfX25VCResetsOut=wfVinesIfX25VCResetsOut, wfVinesIfFrpEnable=wfVinesIfFrpEnable, wfVinesArpDelete=wfVinesArpDelete, wfVinesTrafficFilterStatus=wfVinesTrafficFilterStatus, wfVinesArpSubnetid=wfVinesArpSubnetid, wfVinesTrafficFilterDefinition=wfVinesTrafficFilterDefinition, wfVinesIpBad=wfVinesIpBad, wfVinesIfRtpRecv=wfVinesIfRtpRecv, wfVinesSeqRtpNbrNumber=wfVinesSeqRtpNbrNumber, wfVinesIfInverseArpEnable=wfVinesIfInverseArpEnable, wfVinesRtpNbrNumber=wfVinesRtpNbrNumber, wfVinesBaseDisable=wfVinesBaseDisable, wfVinesIfSeqRtpSent=wfVinesIfSeqRtpSent, wfVinesIfX25VCInErrs=wfVinesIfX25VCInErrs, wfVinesNameSubNetid=wfVinesNameSubNetid, wfVinesIfSeqArpOutServRsps=wfVinesIfSeqArpOutServRsps, wfVinesIpTotOut=wfVinesIpTotOut, wfVinesRtpNbrNetId=wfVinesRtpNbrNetId, wfVinesIfX25VCPktsAwaitAck=wfVinesIfX25VCPktsAwaitAck, wfVinesBaseRtpMode=wfVinesBaseRtpMode, wfVinesArpState=wfVinesArpState, wfVinesIp=wfVinesIp, wfVinesAggrInArpAssigns=wfVinesAggrInArpAssigns, wfVinesIpFrags=wfVinesIpFrags, wfVinesIfIcpOutErrorNotifs=wfVinesIfIcpOutErrorNotifs, wfVinesNameDelete=wfVinesNameDelete, wfVinesIfCfgAdr=wfVinesIfCfgAdr, wfVinesRtpNbrLocSlot=wfVinesRtpNbrLocSlot, wfVinesIpBcast=wfVinesIpBcast, wfVinesIpBcastHWM=wfVinesIpBcastHWM, wfVinesRtpNbrLocAdr=wfVinesRtpNbrLocAdr, wfVinesRtpRtLocLine=wfVinesRtpRtLocLine, wfVinesIfX25VCCct=wfVinesIfX25VCCct, wfVinesIpReass=wfVinesIpReass, wfVinesIfX25VCNumber=wfVinesIfX25VCNumber, wfVinesRtpRtType=wfVinesRtpRtType, wfVinesIfRtpSent=wfVinesIfRtpSent, wfVinesIfPermWanNbr=wfVinesIfPermWanNbr, wfVinesIfInSeqRedirects=wfVinesIfInSeqRedirects, wfVinesIfX25VCBytesIn=wfVinesIfX25VCBytesIn, wfVinesBaseRouterNetid=wfVinesBaseRouterNetid, wfVinesTrafficFilterRuleNumber=wfVinesTrafficFilterRuleNumber, wfVinesRtpRtSeqNumber=wfVinesRtpRtSeqNumber, wfVinesIpFromDodIP=wfVinesIpFromDodIP, wfVinesIfDelete=wfVinesIfDelete, wfVinesAggrOutIcpMetrics=wfVinesAggrOutIcpMetrics, wfVinesRtpRtGateHwAddr=wfVinesRtpRtGateHwAddr, wfVinesIfInLackRescError=wfVinesIfInLackRescError, wfVinesIfRtpGenerationDisable=wfVinesIfRtpGenerationDisable, wfVinesIfInPkts=wfVinesIfInPkts, wfVinesIfSeqRtpRecv=wfVinesIfSeqRtpRecv, wfVinesIfCostUsed=wfVinesIfCostUsed, wfVinesIfInMsgs=wfVinesIfInMsgs, wfVinesIfCfgCost=wfVinesIfCfgCost, wfVinesIfX25VCPktsOut=wfVinesIfX25VCPktsOut, wfVinesRtpNbrLocLine=wfVinesRtpNbrLocLine, wfVinesSeqRtpNbrSeqNumber=wfVinesSeqRtpNbrSeqNumber, wfVinesTrafficFilterEnable=wfVinesTrafficFilterEnable, wfVinesIfX25VCBytesOut=wfVinesIfX25VCBytesOut, wfVinesAggrInArpErrs=wfVinesAggrInArpErrs, wfVinesAggrInRedirects=wfVinesAggrInRedirects, wfVinesArpDisable=wfVinesArpDisable, wfVinesIfEchoInPkts=wfVinesIfEchoInPkts, wfVinesBaseBcastClass=wfVinesBaseBcastClass, wfVinesIfIcpOutMetricNotifs=wfVinesIfIcpOutMetricNotifs, wfVinesIfSeqArpInAssgReqs=wfVinesIfSeqArpInAssgReqs, wfVinesSeqRtpNbrState=wfVinesSeqRtpNbrState, wfVinesNameDisable=wfVinesNameDisable, wfVinesIfEntry=wfVinesIfEntry, wfVinesRtpRtMetric=wfVinesRtpRtMetric, wfVinesBaseState=wfVinesBaseState, wfVinesBase=wfVinesBase, wfVinesRtpNbr=wfVinesRtpNbr, wfVinesIfX25VCResetsIn=wfVinesIfX25VCResetsIn, wfVinesIfArpOutServRsps=wfVinesIfArpOutServRsps, wfVinesTrafficFilterCreate=wfVinesTrafficFilterCreate, wfVinesIfNumNonSeqNbrs=wfVinesIfNumNonSeqNbrs, wfVinesArp=wfVinesArp, wfVinesIpRouted=wfVinesIpRouted, wfVinesSeqRtpNbr=wfVinesSeqRtpNbr, wfVinesAggrOutRedirects=wfVinesAggrOutRedirects, wfVinesIfSeqArpOutAssgRsps=wfVinesIfSeqArpOutAssgRsps, wfVinesIfRedirectEnable=wfVinesIfRedirectEnable, wfVinesIfArpDisable=wfVinesIfArpDisable, wfVinesBaseNetworkSize=wfVinesBaseNetworkSize, wfVinesNameNetid=wfVinesNameNetid, wfVinesRtpRtSvrName=wfVinesRtpRtSvrName, wfVinesRtpRt=wfVinesRtpRt, wfVinesIfZeroHopDrops=wfVinesIfZeroHopDrops, wfVinesIfRemClientPrivDisable=wfVinesIfRemClientPrivDisable, wfVinesIfEchoOutPkts=wfVinesIfEchoOutPkts, wfVinesIfX25VCEntry=wfVinesIfX25VCEntry, wfVinesRtpNbrTable=wfVinesRtpNbrTable, wfVinesIfIcpInErrors=wfVinesIfIcpInErrors, wfVinesBaseLogFilter=wfVinesBaseLogFilter, wfVinesIfOutRedirects=wfVinesIfOutRedirects, wfVinesIfArpOutAssgRsps=wfVinesIfArpOutAssgRsps, wfVinesIfIcpInMetricNotifs=wfVinesIfIcpInMetricNotifs, wfVinesAggrOutEchos=wfVinesAggrOutEchos, wfVinesAggrInIcpMetrics=wfVinesAggrInIcpMetrics, wfVinesRtpRtLocSlot=wfVinesRtpRtLocSlot, wfVinesIfIcpInErrorNotifs=wfVinesIfIcpInErrorNotifs, wfVinesRtpNbrCost=wfVinesRtpNbrCost, wfVinesIfDescr=wfVinesIfDescr, wfVinesRtpNbrType=wfVinesRtpNbrType, wfVinesBaseSoloSlotMask=wfVinesBaseSoloSlotMask, wfVinesRtpNbrSubNetId=wfVinesRtpNbrSubNetId, wfVinesIfNumber=wfVinesIfNumber, wfVinesIfSMDSGroupAddress=wfVinesIfSMDSGroupAddress, wfVinesIfAdr=wfVinesIfAdr, wfVinesNameEntry=wfVinesNameEntry, wfVinesTrafficFilterCircuit=wfVinesTrafficFilterCircuit, wfVinesRtpNbrEntry=wfVinesRtpNbrEntry, wfVinesArpAssignDeniedPkts=wfVinesArpAssignDeniedPkts, wfVinesRtpRtIdle=wfVinesRtpRtIdle, wfVinesIfArpInErrors=wfVinesIfArpInErrors, wfVinesAggrInIcpErrs=wfVinesAggrInIcpErrs, wfVinesBaseSoloistSlot=wfVinesBaseSoloistSlot, wfVinesIfState=wfVinesIfState, wfVinesIfCct=wfVinesIfCct, wfVinesTrafficFilterTable=wfVinesTrafficFilterTable, wfVinesRtpRtNumber=wfVinesRtpRtNumber, wfVinesBaseUserNetid=wfVinesBaseUserNetid, wfVinesIfX25VCOutErrs=wfVinesIfX25VCOutErrs, wfVinesIfOutPkts=wfVinesIfOutPkts, wfVinesNameTable=wfVinesNameTable, wfVinesTrafficFilterReserved=wfVinesTrafficFilterReserved, wfVinesIpToDodIP=wfVinesIpToDodIP, wfVinesRtpNbrRemAdr=wfVinesRtpNbrRemAdr, wfVinesIpTotIn=wfVinesIpTotIn, wfVinesIpRoutedHWM=wfVinesIpRoutedHWM, wfVinesRtpNbrNumPaths=wfVinesRtpNbrNumPaths, wfVinesIfSeqArpInQueries=wfVinesIfSeqArpInQueries, wfVinesAggrStats=wfVinesAggrStats, wfVinesIfDisable=wfVinesIfDisable, wfVinesTrafficFilterName=wfVinesTrafficFilterName, wfVinesAggrInXsumErrs=wfVinesAggrInXsumErrs, wfVinesIfOutErrs=wfVinesIfOutErrs, wfVinesIfOutLackRescError=wfVinesIfOutLackRescError, wfVinesAggrInEchos=wfVinesAggrInEchos, wfVinesIfDodIpDisable=wfVinesIfDodIpDisable, wfVinesIfInRedirects=wfVinesIfInRedirects, wfVinesIfArpInAssgReqs=wfVinesIfArpInAssgReqs, wfVinesAggrBcastPkts=wfVinesAggrBcastPkts, wfVinesIfTable=wfVinesIfTable, wfVinesIfSeqArpInErrors=wfVinesIfSeqArpInErrors, wfVinesIfSTalkSplitHorizon=wfVinesIfSTalkSplitHorizon, wfVinesIfX25VCLine=wfVinesIfX25VCLine, wfVinesIfReassFails=wfVinesIfReassFails, wfVinesAggrOutArpAssigns=wfVinesAggrOutArpAssigns, wfVinesIfX25VCTotIn=wfVinesIfX25VCTotIn, wfVinesArpSubnetBlock=wfVinesArpSubnetBlock, wfVinesIfX25VCTotOut=wfVinesIfX25VCTotOut, wfVinesIfArpInQueries=wfVinesIfArpInQueries, wfVinesIfType=wfVinesIfType)
