#
# PySNMP MIB module CISCO-VMPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-VMPS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:19:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibIdentifier, ObjectIdentity, Counter32, Integer32, Unsigned32, TimeTicks, ModuleIdentity, Bits, Counter64, IpAddress, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "ObjectIdentity", "Counter32", "Integer32", "Unsigned32", "TimeTicks", "ModuleIdentity", "Bits", "Counter64", "IpAddress", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "iso")
TimeStamp, MacAddress, RowStatus, TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "MacAddress", "RowStatus", "TruthValue", "DisplayString", "TextualConvention")
ciscoVmpsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 53))
ciscoVmpsMIB.setRevisions(('2004-01-20 00:00', '2003-10-16 10:00', '2002-06-19 10:00', '2002-04-04 10:00', '2001-01-30 13:04',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoVmpsMIB.setRevisionsDescriptions(('Added new object vmpsRcpRemoteUserName2 and deprecated the object vmpsRcpRemoteUserName.', 'Added following objects: vmpsAutoBackupEnable and vmpsAutoBackupFileName.', 'Corrected description of vmpsLastFailClient.', 'Added new object vmpsRcpRemoteUserName to support RCP download of VMPS database.', 'Corrected description of vmpsTriggerDownload',))
if mibBuilder.loadTexts: ciscoVmpsMIB.setLastUpdated('200401200000Z')
if mibBuilder.loadTexts: ciscoVmpsMIB.setOrganization('Cisco System Inc. ')
if mibBuilder.loadTexts: ciscoVmpsMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-vlans@cisco.com, cs-lan-switch-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoVmpsMIB.setDescription('The MIB module for the management of the VLAN Membership Policy Server.')
ciscoVlanMemberPolicyServerMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 53, 1))
vmpsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 53, 1, 1))
vmpsDatabase = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 53, 1, 2))
vmpsGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 53, 1, 3))
class VlanName(TextualConvention, OctetString):
    description = 'The user friendly ASCII string associated with a VLAN.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

vmpsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 53, 1, 1, 1), )
if mibBuilder.loadTexts: vmpsConfigTable.setStatus('current')
if mibBuilder.loadTexts: vmpsConfigTable.setDescription('A table for creating and controling an instance of the VMPS.')
vmpsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 53, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-VMPS-MIB", "vmpsIndex"))
if mibBuilder.loadTexts: vmpsConfigEntry.setStatus('current')
if mibBuilder.loadTexts: vmpsConfigEntry.setDescription('An entry (conceptual row) in the vmpsConfigTable.')
vmpsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 53, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: vmpsIndex.setStatus('current')
if mibBuilder.loadTexts: vmpsIndex.setDescription('An arbitrary index identifying this particular instance of the VMPS. This index need not be consistent across reboots. For devices only supporting one instance of the VMPS this object need only accept the value of 1. Different instances of the VMPS of one device will presumable be for different management domains.')
vmpsAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 53, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2))).clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vmpsAdminStatus.setStatus('current')
if mibBuilder.loadTexts: vmpsAdminStatus.setDescription('The desired state of the VMPS as prescribed by the operator. The actions of the agent will, if at all possible, eventually result in the desired state being reflected in the lecsOperStatus.')
vmpsDownloadServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 53, 1, 1, 1, 1, 3), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vmpsDownloadServerAddress.setStatus('current')
if mibBuilder.loadTexts: vmpsDownloadServerAddress.setDescription('The IP address of the host supplying the TFTP configuration data for the VMPS. If this value of this object is 0.0.0.0 then the VMPS will not attempt to download configuration information.')
vmpsConfigFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 53, 1, 1, 1, 1, 4), DisplayString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vmpsConfigFileName.setStatus('current')
if mibBuilder.loadTexts: vmpsConfigFileName.setDescription('The filename of the configuration file the VMPS will attempt to download.')
vmpsTriggerDownload = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 53, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperation", 1), ("loadDatabase", 2), ("loadRcpDataBase", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vmpsTriggerDownload.setStatus('current')
if mibBuilder.loadTexts: vmpsTriggerDownload.setDescription("When set to `loadDatabase' this object will cause the VMPS to initiate a TFTP download of the configuration tables stored at the host identified by the vmpsDownloadServerAddress. Setting to 'loadRcpDataBase' will cause the VMPs to initiate RCP download. A download cannot be preformed unless the host address is properly set. This object will always return noOperation(1) when read. Setting this object to loadDatabase(2) while the vmpsOperStatus is loading(3) is effectively a no-op.")
vmpsFallbackVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 53, 1, 1, 1, 1, 6), VlanName().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vmpsFallbackVlan.setStatus('current')
if mibBuilder.loadTexts: vmpsFallbackVlan.setDescription('This is the VLAN returned in the configuration response when a given configuration request contains data that matches nothing in the VMPS database (given the specified classifiers). A value of the empty string signifies that there is no fall-back VLAN.')
vmpsSecureMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 53, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("secure", 1), ("open", 2))).clone('open')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vmpsSecureMode.setStatus('current')
if mibBuilder.loadTexts: vmpsSecureMode.setDescription('If in secure mode the VMPS will instruct the requesting device to shutdown a port as a result of a match failure.')
vmpsManagementDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 53, 1, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vmpsManagementDomain.setStatus('current')
if mibBuilder.loadTexts: vmpsManagementDomain.setDescription('The management domain this VMPS is servicing.')
vmpsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 53, 1, 1, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vmpsRowStatus.setStatus('current')
if mibBuilder.loadTexts: vmpsRowStatus.setDescription('The status of the conceptual row. A valid value of vmpsManagementDomain must be set before the row can become active. Devices that only support one instance of the VMPS may opt to always have a row in this table instantiated and not allow row manipulations.')
vmpsRcpRemoteUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 53, 1, 1, 1, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vmpsRcpRemoteUserName.setStatus('deprecated')
if mibBuilder.loadTexts: vmpsRcpRemoteUserName.setDescription('Remote username for download of the VMPS database file via RCP protocol. This object must be set when vmpsTriggerDownload is set to loadRcpDataBase(3). This object will be have no effect for protocols other than RCP.')
vmpsRcpRemoteUserName2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 53, 1, 1, 1, 1, 11), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vmpsRcpRemoteUserName2.setStatus('current')
if mibBuilder.loadTexts: vmpsRcpRemoteUserName2.setDescription('This object deprecates the object vmpsRcpRemoteUserName to support full range, i.e. SIZE(0..255), of TEXTUAL-CONVENTION SnmpAdminString. The object indicates remote username for download of the VMPS database file via RCP protocol. This object must be set when vmpsTriggerDownload is to loadRcpDataBase(3). This object will be have no effect for protocols other than RCP.')
vmpsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 53, 1, 1, 2), )
if mibBuilder.loadTexts: vmpsStatsTable.setStatus('current')
if mibBuilder.loadTexts: vmpsStatsTable.setDescription('Statistics relating to this instance of the VMPS.')
vmpsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 53, 1, 1, 2, 1), )
vmpsConfigEntry.registerAugmentions(("CISCO-VMPS-MIB", "vmpsStatsEntry"))
vmpsStatsEntry.setIndexNames(*vmpsConfigEntry.getIndexNames())
if mibBuilder.loadTexts: vmpsStatsEntry.setStatus('current')
if mibBuilder.loadTexts: vmpsStatsEntry.setDescription('An entry (conceptual row) in the vmpsStatsTable.')
vmpsLastRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 53, 1, 1, 2, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmpsLastRestart.setStatus('current')
if mibBuilder.loadTexts: vmpsLastRestart.setDescription('The value of sysUpTime when the VMPS was last restarted.')
vmpsInConfigReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 53, 1, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmpsInConfigReqs.setStatus('current')
if mibBuilder.loadTexts: vmpsInConfigReqs.setDescription('The total number of configure requests, including vmpsInConfigErrors, that have been received by the VMPS.')
vmpsInConfigErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 53, 1, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmpsInConfigErrors.setStatus('current')
if mibBuilder.loadTexts: vmpsInConfigErrors.setDescription('Then number of packets received by the VMPS but which were not correctly formatted configure requests.')
vmpsOutConfigFails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 53, 1, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmpsOutConfigFails.setStatus('current')
if mibBuilder.loadTexts: vmpsOutConfigFails.setDescription('The number of configure responses sent by this particular VMPS whose status was other than success.')
vmpsLastFailClient = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 53, 1, 1, 2, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmpsLastFailClient.setStatus('current')
if mibBuilder.loadTexts: vmpsLastFailClient.setDescription('The MAC address of the VLAN client whose last configuration request was rejected. This MAC address will be for the VLAN client who was delivered the last configure response that caused the vmpsOutConfigFails object to increment. This value is taken directly from the configure request and is not guaranteed to be correctly identify a client.')
vmpsOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 53, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("loading", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmpsOperStatus.setStatus('current')
if mibBuilder.loadTexts: vmpsOperStatus.setDescription("This object reflects the actual state of the VMPS which may differ from that of the vmpsAdminStatus object. This can occur when the configuration database fails to load but the corresponding vmpsAdminStatus is `active'. The state loading(3) indicates that the VMPS is currently loading the configuration database from the TFTP server.")
vmpsAutoBackupEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 53, 1, 3, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmpsAutoBackupEnable.setStatus('current')
if mibBuilder.loadTexts: vmpsAutoBackupEnable.setDescription("This object enables or disables the auto-save of the downloaded VMPS configuration on to a local storage of the device. If the value is set to 'true', the VMPS configuration will be backed up into the location specified by vmpsAutoBackupFileName everytime the configuration file is downloaded.")
vmpsAutoBackupFileName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 53, 1, 3, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vmpsAutoBackupFileName.setStatus('current')
if mibBuilder.loadTexts: vmpsAutoBackupFileName.setDescription('This object specifies the VMPS back-up configuration location, in the format of <devices>:[<filename>]. <device> can be (but not limited to): flash, bootflash, slot0, slot1, disk0.')
vmpsMacConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 53, 1, 2, 1), )
if mibBuilder.loadTexts: vmpsMacConfigTable.setStatus('current')
if mibBuilder.loadTexts: vmpsMacConfigTable.setDescription('A (conceptual) table utilized by a VMPS to map a MAC address of a end station to a VLAN.')
vmpsMacConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 53, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-VMPS-MIB", "vmpsIndex"), (0, "CISCO-VMPS-MIB", "vmpsMacConfigAddress"))
if mibBuilder.loadTexts: vmpsMacConfigEntry.setStatus('current')
if mibBuilder.loadTexts: vmpsMacConfigEntry.setDescription('An entry (conceptual row) of a mapping between a MAC address in utilization by an end station and a VLAN.')
vmpsMacConfigAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 53, 1, 2, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: vmpsMacConfigAddress.setStatus('current')
if mibBuilder.loadTexts: vmpsMacConfigAddress.setDescription('The MAC address of an end station to be associated with an VLAN.')
vmpsMacConfigVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 53, 1, 2, 1, 1, 2), VlanName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vmpsMacConfigVlan.setStatus('current')
if mibBuilder.loadTexts: vmpsMacConfigVlan.setDescription('A VLAN that will be returned to an end station that provides the corresponding MAC address in a configuration request. A zero length string indicates that the corresponding MAC address is not permitted on any VLANs, including the fall-back.')
vmpsMacConfigLastAccessed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 53, 1, 2, 1, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmpsMacConfigLastAccessed.setStatus('current')
if mibBuilder.loadTexts: vmpsMacConfigLastAccessed.setDescription('The value of sysUpTime when this entry was last used to map a MAC address to a VLAN name. Managers may opt to use this object to garbage collect entries that have not been used for a prolonged period of time.')
vmpsMacConfigLastRequestor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 53, 1, 2, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmpsMacConfigLastRequestor.setStatus('current')
if mibBuilder.loadTexts: vmpsMacConfigLastRequestor.setDescription('The IP address of the device that requested the VLAN associated with the MAC of this row. The manager may use this object in an attempt to locate where a dynamic host currently resides.')
vmpsMacConfigLastRequestPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 53, 1, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmpsMacConfigLastRequestPortId.setStatus('current')
if mibBuilder.loadTexts: vmpsMacConfigLastRequestPortId.setDescription('The ID of the port included in the configuration request that corresponded to the designated entry in this table.')
vmpsMacConfigLastResponseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 53, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("success", 1), ("versionNotSupported", 2), ("insufficientResources", 3), ("accessDenied", 4), ("portShutdown", 5), ("unknownManagementDomain", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vmpsMacConfigLastResponseStatus.setStatus('current')
if mibBuilder.loadTexts: vmpsMacConfigLastResponseStatus.setDescription('The value of the status field in the response for the last configure request for this MAC-address.')
vmpsMacConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 53, 1, 2, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vmpsMacConfigStatus.setStatus('current')
if mibBuilder.loadTexts: vmpsMacConfigStatus.setDescription("The row cannot be set to `active' until an appropriate value exists for vmpsMacConfigVlan.")
vmpsVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 53, 1, 2, 2), )
if mibBuilder.loadTexts: vmpsVlanConfigTable.setStatus('current')
if mibBuilder.loadTexts: vmpsVlanConfigTable.setDescription('A list of VLANs with restricted access from dynamic ports. This list takes the form of a group of VLANs and a group of ports permitted for those VLANs. If no entry exists for a particular VLAN then there are no restrictions as to what ports are allowed to access that VLAN. If entries exist for a VLAN, then all ports not explicitly permitted for that VLAN are denied access (in the form of a failed configuration response).')
vmpsVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 53, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-VMPS-MIB", "vmpsIndex"), (0, "CISCO-VMPS-MIB", "vmpsVlanName"), (0, "CISCO-VMPS-MIB", "vmpsDeviceId"), (0, "CISCO-VMPS-MIB", "vmpsPortName"))
if mibBuilder.loadTexts: vmpsVlanConfigEntry.setStatus('current')
if mibBuilder.loadTexts: vmpsVlanConfigEntry.setDescription('An entry (conceptual row) in the vmpsVlanConfigTable.')
vmpsVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 53, 1, 2, 2, 1, 1), VlanName())
if mibBuilder.loadTexts: vmpsVlanName.setStatus('current')
if mibBuilder.loadTexts: vmpsVlanName.setDescription('The VLAN name associated with a group of ports which are allowed access to that VLAN dynamically.')
vmpsDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 53, 1, 2, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: vmpsDeviceId.setStatus('current')
if mibBuilder.loadTexts: vmpsDeviceId.setDescription('The IP address of the device containing the permitted ports.')
vmpsPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 53, 1, 2, 2, 1, 3), DisplayString())
if mibBuilder.loadTexts: vmpsPortName.setStatus('current')
if mibBuilder.loadTexts: vmpsPortName.setDescription('The ifName of the port on which dynamic access to the specified VLAN is allowed.')
vmpsVlanConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 53, 1, 2, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vmpsVlanConfigStatus.setStatus('current')
if mibBuilder.loadTexts: vmpsVlanConfigStatus.setDescription('The status object associated with the conceptual row.')
ciscoVlanMemberPolicyServerMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 53, 2))
ciscoVlanMemberPolicyServerMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 53, 3))
ciscoVlanMemberPolicyServerMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 53, 3, 1))
ciscoVlanMemberPolicyServerMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 53, 3, 2))
ciscoVlanMemberPolicyServerMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 53, 3, 1, 1)).setObjects(("CISCO-VMPS-MIB", "ciscoVlanMemberPolicyServerGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVlanMemberPolicyServerMIBCompliance = ciscoVlanMemberPolicyServerMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoVlanMemberPolicyServerMIBCompliance.setDescription('The compliance statement for entities which implement the VMPS MIB. This statement is replaced by ciscoVmpsMIBCompliance2.')
ciscoVmpsMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 53, 3, 1, 2)).setObjects(("CISCO-VMPS-MIB", "ciscoVlanMemberPolicyServerGroup"), ("CISCO-VMPS-MIB", "ciscoVlanMemberPolicyServerRcpGroup"), ("CISCO-VMPS-MIB", "ciscoVmpsAutoBackupGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVmpsMIBCompliance2 = ciscoVmpsMIBCompliance2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoVmpsMIBCompliance2.setDescription('The compliance statement for entities which implement the VMPS MIB. This statement is replaced by ciscoVmpsMIBCompliance3.')
ciscoVmpsMIBCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 53, 3, 1, 3)).setObjects(("CISCO-VMPS-MIB", "ciscoVlanMemberPolicyServerGroup"), ("CISCO-VMPS-MIB", "ciscoVmpsAutoBackupGroup"), ("CISCO-VMPS-MIB", "ciscoVlanMemberPolicyServerRcpGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVmpsMIBCompliance3 = ciscoVmpsMIBCompliance3.setStatus('current')
if mibBuilder.loadTexts: ciscoVmpsMIBCompliance3.setDescription('The compliance statement for entities which implement the VMPS MIB.')
ciscoVlanMemberPolicyServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 53, 3, 2, 1)).setObjects(("CISCO-VMPS-MIB", "vmpsLastRestart"), ("CISCO-VMPS-MIB", "vmpsInConfigReqs"), ("CISCO-VMPS-MIB", "vmpsInConfigErrors"), ("CISCO-VMPS-MIB", "vmpsOutConfigFails"), ("CISCO-VMPS-MIB", "vmpsLastFailClient"), ("CISCO-VMPS-MIB", "vmpsOperStatus"), ("CISCO-VMPS-MIB", "vmpsAdminStatus"), ("CISCO-VMPS-MIB", "vmpsDownloadServerAddress"), ("CISCO-VMPS-MIB", "vmpsConfigFileName"), ("CISCO-VMPS-MIB", "vmpsTriggerDownload"), ("CISCO-VMPS-MIB", "vmpsFallbackVlan"), ("CISCO-VMPS-MIB", "vmpsSecureMode"), ("CISCO-VMPS-MIB", "vmpsManagementDomain"), ("CISCO-VMPS-MIB", "vmpsRowStatus"), ("CISCO-VMPS-MIB", "vmpsMacConfigVlan"), ("CISCO-VMPS-MIB", "vmpsMacConfigLastAccessed"), ("CISCO-VMPS-MIB", "vmpsMacConfigLastRequestor"), ("CISCO-VMPS-MIB", "vmpsMacConfigLastRequestPortId"), ("CISCO-VMPS-MIB", "vmpsMacConfigLastResponseStatus"), ("CISCO-VMPS-MIB", "vmpsMacConfigStatus"), ("CISCO-VMPS-MIB", "vmpsVlanConfigStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVlanMemberPolicyServerGroup = ciscoVlanMemberPolicyServerGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoVlanMemberPolicyServerGroup.setDescription('A collection of objects for the managing of VMPS operation.')
ciscoVlanMemberPolicyServerRcpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 53, 3, 2, 2)).setObjects(("CISCO-VMPS-MIB", "vmpsRcpRemoteUserName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVlanMemberPolicyServerRcpGroup = ciscoVlanMemberPolicyServerRcpGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoVlanMemberPolicyServerRcpGroup.setDescription('Group to support RCP downnload of VMPS database.')
ciscoVmpsAutoBackupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 53, 3, 2, 3)).setObjects(("CISCO-VMPS-MIB", "vmpsAutoBackupEnable"), ("CISCO-VMPS-MIB", "vmpsAutoBackupFileName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVmpsAutoBackupGroup = ciscoVmpsAutoBackupGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoVmpsAutoBackupGroup.setDescription('Group to support auto backup of downloaded VMPS configuration.')
ciscoVlanMemberPolicyServerRcpGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 53, 3, 2, 4)).setObjects(("CISCO-VMPS-MIB", "vmpsRcpRemoteUserName2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVlanMemberPolicyServerRcpGroup2 = ciscoVlanMemberPolicyServerRcpGroup2.setStatus('current')
if mibBuilder.loadTexts: ciscoVlanMemberPolicyServerRcpGroup2.setDescription('Group to support RCP downnload of VMPS database.')
mibBuilder.exportSymbols("CISCO-VMPS-MIB", vmpsConfigEntry=vmpsConfigEntry, ciscoVlanMemberPolicyServerGroup=ciscoVlanMemberPolicyServerGroup, vmpsStatsTable=vmpsStatsTable, vmpsGlobalConfig=vmpsGlobalConfig, vmpsDatabase=vmpsDatabase, vmpsConfigTable=vmpsConfigTable, vmpsDeviceId=vmpsDeviceId, vmpsLastRestart=vmpsLastRestart, ciscoVlanMemberPolicyServerMIBObjects=ciscoVlanMemberPolicyServerMIBObjects, vmpsAutoBackupEnable=vmpsAutoBackupEnable, vmpsFallbackVlan=vmpsFallbackVlan, vmpsRowStatus=vmpsRowStatus, vmpsMacConfigStatus=vmpsMacConfigStatus, vmpsOperStatus=vmpsOperStatus, vmpsTriggerDownload=vmpsTriggerDownload, vmpsSecureMode=vmpsSecureMode, ciscoVlanMemberPolicyServerMIBNotifications=ciscoVlanMemberPolicyServerMIBNotifications, vmpsVlanName=vmpsVlanName, vmpsMacConfigLastRequestPortId=vmpsMacConfigLastRequestPortId, vmpsAdminStatus=vmpsAdminStatus, vmpsRcpRemoteUserName2=vmpsRcpRemoteUserName2, vmpsMacConfigAddress=vmpsMacConfigAddress, vmpsLastFailClient=vmpsLastFailClient, vmpsRcpRemoteUserName=vmpsRcpRemoteUserName, vmpsVlanConfigTable=vmpsVlanConfigTable, ciscoVmpsAutoBackupGroup=ciscoVmpsAutoBackupGroup, vmpsOutConfigFails=vmpsOutConfigFails, ciscoVlanMemberPolicyServerMIBCompliance=ciscoVlanMemberPolicyServerMIBCompliance, VlanName=VlanName, vmpsAutoBackupFileName=vmpsAutoBackupFileName, vmpsMacConfigLastAccessed=vmpsMacConfigLastAccessed, vmpsIndex=vmpsIndex, vmpsVlanConfigStatus=vmpsVlanConfigStatus, ciscoVlanMemberPolicyServerMIBConformance=ciscoVlanMemberPolicyServerMIBConformance, vmpsMacConfigEntry=vmpsMacConfigEntry, vmpsManagementDomain=vmpsManagementDomain, vmpsInfo=vmpsInfo, vmpsMacConfigTable=vmpsMacConfigTable, vmpsPortName=vmpsPortName, vmpsInConfigReqs=vmpsInConfigReqs, vmpsMacConfigLastRequestor=vmpsMacConfigLastRequestor, vmpsConfigFileName=vmpsConfigFileName, vmpsDownloadServerAddress=vmpsDownloadServerAddress, vmpsMacConfigVlan=vmpsMacConfigVlan, vmpsMacConfigLastResponseStatus=vmpsMacConfigLastResponseStatus, ciscoVlanMemberPolicyServerMIBCompliances=ciscoVlanMemberPolicyServerMIBCompliances, ciscoVlanMemberPolicyServerRcpGroup2=ciscoVlanMemberPolicyServerRcpGroup2, ciscoVmpsMIBCompliance3=ciscoVmpsMIBCompliance3, ciscoVlanMemberPolicyServerMIBGroups=ciscoVlanMemberPolicyServerMIBGroups, vmpsInConfigErrors=vmpsInConfigErrors, vmpsVlanConfigEntry=vmpsVlanConfigEntry, ciscoVmpsMIBCompliance2=ciscoVmpsMIBCompliance2, PYSNMP_MODULE_ID=ciscoVmpsMIB, ciscoVmpsMIB=ciscoVmpsMIB, ciscoVlanMemberPolicyServerRcpGroup=ciscoVlanMemberPolicyServerRcpGroup, vmpsStatsEntry=vmpsStatsEntry)
