#
# PySNMP MIB module CTRON-ROUTERS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CTRON-ROUTERS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:30:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
nwRouter, nwRtrProtoSuites, nwRtrHighLevelView, nwRtrMibs = mibBuilder.importSymbols("ROUTER-OIDS", "nwRouter", "nwRtrProtoSuites", "nwRtrHighLevelView", "nwRtrMibs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, Counter64, NotificationType, Gauge32, iso, MibIdentifier, TimeTicks, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, IpAddress, ObjectIdentity, Unsigned32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Counter64", "NotificationType", "Gauge32", "iso", "MibIdentifier", "TimeTicks", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "IpAddress", "ObjectIdentity", "Unsigned32", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
nwRtrMibRevision = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 1, 1))
nwRtrStandardMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 1, 2))
nwRtrApplicationView = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 1))
nwRtrRoutingView = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 2))
nwRtrComponentView = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 3))
nwRtrCountersView = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 4))
nwRtrApplicationSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 1, 1))
nwRtrApplicationInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 1, 2))
nwRtrRoutingSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 2, 1))
nwRtrRoutingInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 2, 2))
nwRtrComponentSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 3, 1))
nwRtrComponentInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 3, 2))
nwRtrCountersControl = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 4, 1))
nwRtrInterfaceCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 4, 2))
nwRtrMibRevText = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRtrMibRevText.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtrMibRevText.setDescription('Indicates the current revision level of the Cabletron Routing services High Level MIB in textual format. Read the value of this object to determine the revision of the CTRouter MIB operating on the routing services enabled device.')
nwRtrStdMibTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 1, 2, 1), )
if mibBuilder.loadTexts: nwRtrStdMibTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtrStdMibTable.setDescription('This table includes entries for all of the Standard MIBs present within the routing services enabled device. Read the entries in this table to determine which standard MIBs are present. An entry exists for each standard MIB that is present. The index into this table is an arbitrary ordinal value.')
nwRtrStdMibEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 1, 2, 1, 1), ).setIndexNames((0, "CTRON-ROUTERS-MIB", "nwRtrStdMibIndex"))
if mibBuilder.loadTexts: nwRtrStdMibEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtrStdMibEntry.setDescription('Each entry identifies the starting OID for the standard MIB for which the entry exists.')
nwRtrStdMibIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRtrStdMibIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtrStdMibIndex.setDescription('This is the index into the Standard MIB index within the Standard MIB Table.')
nwRtrStdMibIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 1, 2, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRtrStdMibIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtrStdMibIdentifier.setDescription('The OID that identifies the starting point of the standard MIB for which the entry exists.')
nwRtrAdminChanges = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRtrAdminChanges.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtrAdminChanges.setDescription('Indicates the number of times, configuration changes have been made to the routing services recorded by this MIB. Each time a change is made this counter is increments by 1. Read the value of this entry to determine if any values in this MIB have changed.')
nwRouterSystemTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 1, 1, 2), )
if mibBuilder.loadTexts: nwRouterSystemTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwRouterSystemTable.setDescription('This table contains an entry for each routing service present within the routing services enabled device.')
nwRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 1, 1, 2, 1), ).setIndexNames((0, "CTRON-ROUTERS-MIB", "nwRouterInstance"))
if mibBuilder.loadTexts: nwRouterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwRouterEntry.setDescription('Each entry describes the routing service for which the entry exists.')
nwRouterInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRouterInstance.setStatus('mandatory')
if mibBuilder.loadTexts: nwRouterInstance.setDescription('An ordinal value assigned to the routing service for which the entry exists.')
nwRouterAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRouterAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwRouterAdminStatus.setDescription('Indicates the current administrative state of the routing service for which the entry exists.')
nwRouterOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("pending-disable", 4), ("pending-enable", 5), ("invalid-config", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRouterOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwRouterOperStatus.setDescription('Indicates the current operating condition of the routing services for which the entry exists.')
nwRouterOperationalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 1, 1, 2, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRouterOperationalTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwRouterOperationalTime.setDescription('Indicates how long this Routing Service has been in its current administrative state for which the entry exists.')
nwRouterEntMibGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 1, 1, 2, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRouterEntMibGroup.setStatus('mandatory')
if mibBuilder.loadTexts: nwRouterEntMibGroup.setDescription('Identifies the starting OID for the Cabletron Enterprise MIB that implements the managed objects for the routing service for which the entry exists.')
nwRouterName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 1, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRouterName.setStatus('mandatory')
if mibBuilder.loadTexts: nwRouterName.setDescription('Indicates the name of the routing service in textual format for which the entry exists.')
nwRouterVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 1, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRouterVersion.setStatus('mandatory')
if mibBuilder.loadTexts: nwRouterVersion.setDescription('Indicates the current revision level of the routing service, in textual format for which the entry exists.')
nwRouterIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 1, 1, 2, 1, 8), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRouterIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: nwRouterIdentifier.setDescription('Identifies the OID in the Cabletron ctNetwork naming tree MIB used to uniquely identify the routing service for which the entry exists. Read the value indicated to obtain the name of the routing service for which this entry exists.')
nwRtrVersion = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRtrVersion.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtrVersion.setDescription('Indicates the current revision level of Cabletron routing services in textual format.')
nwRouterIfTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 1, 2, 1), )
if mibBuilder.loadTexts: nwRouterIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwRouterIfTable.setDescription('This table contains an entry for each routing service running on each router port. Essentially, this table gives a high-level view of the configuration and administrative state of each of the routing service running on each router port.')
nwRouterIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 1, 2, 1, 1), ).setIndexNames((0, "CTRON-ROUTERS-MIB", "nwRouterIfIndex"), (0, "CTRON-ROUTERS-MIB", "nwRouterIfInstance"))
if mibBuilder.loadTexts: nwRouterIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwRouterIfEntry.setDescription('Each entry describes the routing service operating on the router port for which the entry exists.')
nwRouterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRouterIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nwRouterIfIndex.setDescription('Indicates the value in MIB 2 ifIndex, which identifies the router port for which the entry exists.')
nwRouterIfInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 1, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRouterIfInstance.setStatus('mandatory')
if mibBuilder.loadTexts: nwRouterIfInstance.setDescription('Indicates the value of nwRouterInstance as established in nwRouterSystemTable. Essentially, indicating which routing service is running on the router port for which the entry exists. All router ports running the same routing service will have the same value for nwRouterIfInstance.')
nwRouterIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRouterIfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwRouterIfAdminStatus.setDescription('Indicates the current administrative state of the routing service on the router port for which the entry exists.')
nwRouterIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("pending-disable", 4), ("pending-enable", 5), ("invalid-config", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRouterIfOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwRouterIfOperStatus.setDescription('Indicates the current operating condition of the routing service on the router port for which the entry exists.')
nwRouterIfOperationalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 1, 2, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRouterIfOperationalTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwRouterIfOperationalTime.setDescription('Indicates how long the routing service has been in its current administrative state on the router port for which the entry exists.')
nwRouterIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 1, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRouterIfName.setStatus('mandatory')
if mibBuilder.loadTexts: nwRouterIfName.setDescription('Indicates the name of the routing service that is operating on the router port for which the entry exists.')
nwRtgProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 2, 1, 1), )
if mibBuilder.loadTexts: nwRtgProtocolTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtgProtocolTable.setDescription('This table contains an entry for each routing protocol supported by the routing service running on the enabled device. Each entry is indexed by the parent routing service, nwRtgProtocolRtrInstance. All routing protocols that are supported by the same routing service will have the same value for nwRtgProtocolRtrInstance. The table is also indexed by an ordinal value, nwRtgProtocolInstance, which is assigned to each routing protocol as it is instantiated. Together, these two instances show the hierarchical relationship between each routing service and its supported routing protocols.')
nwRtgProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 2, 1, 1, 1), ).setIndexNames((0, "CTRON-ROUTERS-MIB", "nwRtgProtocolRtrInstance"), (0, "CTRON-ROUTERS-MIB", "nwRtgProtocolInstance"))
if mibBuilder.loadTexts: nwRtgProtocolEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtgProtocolEntry.setDescription('Each entry identifies a routing protocol and the routing service that it is a part of.')
nwRtgProtocolRtrInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRtgProtocolRtrInstance.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtgProtocolRtrInstance.setDescription('This ordinal value indicates the value of nwRouterInstance as established in the nwRouterSystemTable. This essentially is the key that maps all routing protocols supported by the same routing service to the same value for nwRtgProtocolRtrInstance.')
nwRtgProtocolInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 2, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRtgProtocolInstance.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtgProtocolInstance.setDescription('An ordinal value assigned to the routing protocol for which the entry exists, which is used to uniquely identify each routing protocol.')
nwRtgProtocolAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRtgProtocolAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtgProtocolAdminStatus.setDescription('Indicates the current administrative state of the routing protocol for which the entry exists.')
nwRtgProtocolOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("pending-disable", 4), ("pending-enable", 5), ("invalid-config", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRtgProtocolOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtgProtocolOperStatus.setDescription('Indicates the current operating condition of the routing protocol for which the entry exists.')
nwRtgProtocolOperationalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 2, 1, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRtgProtocolOperationalTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtgProtocolOperationalTime.setDescription('Indicates how long this Routing protocol has been in its current state for which the entry exists.')
nwRtgProtocolEntMibGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 2, 1, 1, 1, 6), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRtgProtocolEntMibGroup.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtgProtocolEntMibGroup.setDescription('Identifies the starting OID of the subtree or branch of the Cabletron Enterprise MIB that implements the managed objects for the routing service for which the entry exists.')
nwRtgProtocolName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 2, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRtgProtocolName.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtgProtocolName.setDescription('Names the routing protocol in textual format for which the entry exists.')
nwRtgProtocolVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 2, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRtgProtocolVersion.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtgProtocolVersion.setDescription('Indicates the current revision level of the routing protocol, in textual format, for which the entry exists.')
nwRtgProtocolIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 2, 1, 1, 1, 9), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRtgProtocolIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtgProtocolIdentifier.setDescription('Specifies the OID from the Cabletron ctNetwork naming tree used to uniquely identify the routing protocol for which the entry exists.')
nwRtgProtocolIfTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 2, 2, 1), )
if mibBuilder.loadTexts: nwRtgProtocolIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtgProtocolIfTable.setDescription('This table contains an entry for each routing protocol running on each router port of the routing services enabled device.')
nwRtgProtocolIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 2, 2, 1, 1), ).setIndexNames((0, "CTRON-ROUTERS-MIB", "nwRtgProtocolIfIndex"), (0, "CTRON-ROUTERS-MIB", "nwRtgProtocolIfRtrInstance"), (0, "CTRON-ROUTERS-MIB", "nwRtgProtocolIfInstance"))
if mibBuilder.loadTexts: nwRtgProtocolIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtgProtocolIfEntry.setDescription('Each entry describes a routing protocols that is running on the router port for which the entry exists.')
nwRtgProtocolIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 2, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRtgProtocolIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtgProtocolIfIndex.setDescription('This ordinal value identifies the MIB2 ifIndex which identifies the router port for which the entry exists. All entries for the same router port will have the same value in nwRtgProtocolIfIndex.')
nwRtgProtocolIfRtrInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRtgProtocolIfRtrInstance.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtgProtocolIfRtrInstance.setDescription('This ordinal value indicates the value of nwRouterInstance as established in nwRouterSystemTable, running on the router port for which the entry exists. All router ports running the same routing services will have the same value for nwRtgProtocolIfRtrInstance.')
nwRtgProtocolIfInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRtgProtocolIfInstance.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtgProtocolIfInstance.setDescription('This ordinal value indicates the value of nwRtgProtocolInstance as established in nwRtgProtocolTable, supported by the routing service, running on the router port for which the entry exists. All router ports running the same routing protocol will have the same value for nwRtgProtocolIfInstance.')
nwRtgProtocolIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRtgProtocolIfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtgProtocolIfAdminStatus.setDescription('Indicates the current administrative state of the routing protocol on the router port for which the entry exists.')
nwRtgProtocolIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("pending-disable", 4), ("pending-enable", 5), ("invalid-config", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRtgProtocolIfOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtgProtocolIfOperStatus.setDescription('Indicates the current operating condition of the routing protocol on this router port for which the entry exists.')
nwRtgProtocolIfOperationalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 2, 2, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRtgProtocolIfOperationalTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtgProtocolIfOperationalTime.setDescription('This shows how long this Router protocol has been in its current state on this router port for which the entry exists.')
nwRtgProtocolIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 2, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRtgProtocolIfName.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtgProtocolIfName.setDescription('The name of the routing protocol, in textual format, running on the router port for which the entry exists.')
nwComponentTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 3, 1, 1), )
if mibBuilder.loadTexts: nwComponentTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwComponentTable.setDescription('This table contains an entry for each of the component protocols that make-up a particular routing service. Essentially, this table gives a high-level view of the configuration and state of each of the component protocol running within each routing service.')
nwComponentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 3, 1, 1, 1), ).setIndexNames((0, "CTRON-ROUTERS-MIB", "nwComponentRtrInstance"), (0, "CTRON-ROUTERS-MIB", "nwComponentInstance"))
if mibBuilder.loadTexts: nwComponentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwComponentEntry.setDescription('Each entry describes a component protocol.')
nwComponentRtrInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwComponentRtrInstance.setStatus('mandatory')
if mibBuilder.loadTexts: nwComponentRtrInstance.setDescription('This ordinal value indicates the value of nwRouterInstance as established in nwRouterSystemTable for which the entry exists. This essentially is the key that maps all components of the same routing service to the same value for nwComponentRtrInstance.')
nwComponentInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 3, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwComponentInstance.setStatus('mandatory')
if mibBuilder.loadTexts: nwComponentInstance.setDescription('An ordinal value assigned to each component for which the entry exists..')
nwComponentAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwComponentAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwComponentAdminStatus.setDescription('Indicates the current administrative state of the component for which the entry exists.')
nwComponentOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("pending-disable", 4), ("pending-enable", 5), ("invalid-config", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwComponentOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwComponentOperStatus.setDescription('Indicates the current operating condition of the routing component for which the entry exists.')
nwComponentOperationalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 3, 1, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwComponentOperationalTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwComponentOperationalTime.setDescription('Indicates how long this Router Component, for which the entry exists, has been in its current administrative state.')
nwComponentEntMibGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 3, 1, 1, 1, 6), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwComponentEntMibGroup.setStatus('mandatory')
if mibBuilder.loadTexts: nwComponentEntMibGroup.setDescription("Identifies the Cabletron Enterprise MIB that implements the managed objects for the routing service for which the entry exists. Essentially, this is a pointer to the OID of the routing service's enterprise MIB. For example, IPX is a routing service that has its own enterprise MIB, which is identified by the value of nwComponentEntMibGroup.")
nwComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 3, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: nwComponentName.setDescription('Names the component in textual format for which the entry exists.')
nwComponentVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 3, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwComponentVersion.setStatus('mandatory')
if mibBuilder.loadTexts: nwComponentVersion.setDescription('Indicates the current revision level of the component in textual format for which the entry exists.')
nwComponentIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 3, 1, 1, 1, 9), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwComponentIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: nwComponentIdentifier.setDescription('The OID from the Cabletron ctNetwork naming tree MIB used to uniquely identify the component for which the entry exists.')
nwComponentIfTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 3, 2, 1), )
if mibBuilder.loadTexts: nwComponentIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwComponentIfTable.setDescription('This table contains an entry for each component that is part of each routing service in each router port on the routing services enabled device.')
nwComponentIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 3, 2, 1, 1), ).setIndexNames((0, "CTRON-ROUTERS-MIB", "nwComponentIfIndex"), (0, "CTRON-ROUTERS-MIB", "nwComponentIfRtrInstance"), (0, "CTRON-ROUTERS-MIB", "nwComponentIfInstance"))
if mibBuilder.loadTexts: nwComponentIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwComponentIfEntry.setDescription('Each entry describes a component that is running on the router port for which the entry exists.')
nwComponentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwComponentIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nwComponentIfIndex.setDescription('The value of this index identifies the MIB-2 ifIndex which identifies the router port for which the entry exists.')
nwComponentIfRtrInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 3, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwComponentIfRtrInstance.setStatus('mandatory')
if mibBuilder.loadTexts: nwComponentIfRtrInstance.setDescription('This ordinal value indicates the value of nwRouterInstance as established in the nwRouterSystemTable. This essentially is the key that maps all components of the same routing service to the same value for nwComponentIfRtrInstance.')
nwComponentIfInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 3, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwComponentIfInstance.setStatus('mandatory')
if mibBuilder.loadTexts: nwComponentIfInstance.setDescription('Indicates the value of nwComponentInstance as established in nwComponentTable. It is used to uniquely order each component within each routing service, on each router port for which the entry exists.')
nwComponentIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwComponentIfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwComponentIfAdminStatus.setDescription('Indicates the current administrative status of the component on the router port for which the entry exists.')
nwComponentIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("pending-disable", 4), ("pending-enable", 5), ("invalid-config", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwComponentIfOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwComponentIfOperStatus.setDescription('Indicates the current operating condition of the components on the router port for which the entry exists.')
nwComponentIfOperationalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 3, 2, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwComponentIfOperationalTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwComponentIfOperationalTime.setDescription('Indicates how long the Router Component has been in its administrative state for which the entry exists.')
nwComponentIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 3, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwComponentIfName.setStatus('mandatory')
if mibBuilder.loadTexts: nwComponentIfName.setDescription('The name of the component in textual format for which the entry exists.')
nwRtrIfFwdCtrTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 4, 2, 1), )
if mibBuilder.loadTexts: nwRtrIfFwdCtrTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtrIfFwdCtrTable.setDescription('This table contains the packet and byte counters for each router port configured on this device.')
nwRtrIfFwdCtrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 4, 2, 1, 1), ).setIndexNames((0, "CTRON-ROUTERS-MIB", "nwRtrIfFwdCtrIfIndex"))
if mibBuilder.loadTexts: nwRtrIfFwdCtrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtrIfFwdCtrEntry.setDescription('Specifies the aggregate packet and byte counters for the router port for which this entry exists.')
nwRtrIfFwdCtrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 4, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRtrIfFwdCtrIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtrIfFwdCtrIfIndex.setDescription('Indicates the value of MIB 2 ifindex, which identifies the router port. When multiple routing services are running on the same router port multiple entries exist for the same nwRouterIfIndex.')
nwRtrIfFwdCtrOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRtrIfFwdCtrOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtrIfFwdCtrOperStatus.setDescription('Indicates the current operating condition of the routing services on the router port. The value of nwRtrIfFwdCtrOperStatus indicates whether counting is active for the routing services on the routing port.')
nwRtrIfFwdCtrInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 4, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRtrIfFwdCtrInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtrIfFwdCtrInPkts.setDescription('Indicates the total number of Routed Protocol packets that have been received, during System Operational Time, on the router port for which this entry exists.')
nwRtrIfFwdCtrOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 4, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRtrIfFwdCtrOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtrIfFwdCtrOutPkts.setDescription('Indicates the total number of Routed Protocol packets that have been transmitted, during System Operational Time, on the router port for which this entry exists')
nwRtrIfFwdCtrFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 4, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRtrIfFwdCtrFwdPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtrIfFwdCtrFwdPkts.setDescription('Indicates the total number of Routed Protocol packets that have been forwarded, during System Operational Time, on the router port for which this entry exists')
nwRtrIfFwdCtrFilteredPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 4, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRtrIfFwdCtrFilteredPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtrIfFwdCtrFilteredPkts.setDescription('Indicates the total number of Routed Protocol packets that have been administratively filtered, during System Operational Time, on the router port for which this entry exists.')
nwRtrIfFwdCtrDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 4, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRtrIfFwdCtrDiscardPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtrIfFwdCtrDiscardPkts.setDescription('Indicates the total number of Routed Protocol packets that have been discarded (dropped), during System Operational Time, on the router port for which the entry exists.')
nwRtrIfFwdCtrAddrErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 4, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRtrIfFwdCtrAddrErrPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtrIfFwdCtrAddrErrPkts.setDescription('Indicates the total number of Routed Protocol packets that have been discarded, because of Routed Protocol addressing errors in the Routed Protocol header, during System Operational Time, on the router port for which the entry exists.')
nwRtrIfFwdCtrLenErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 4, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRtrIfFwdCtrLenErrPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtrIfFwdCtrLenErrPkts.setDescription('Indicates the total number of Routed Protocol packets that have been discarded, because an invalid packet length was contained in the Routed Protocol header, during System Operational Time, on the router port for which the entry exists.')
nwRtrIfFwdCtrHdrErrPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 4, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRtrIfFwdCtrHdrErrPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtrIfFwdCtrHdrErrPkts.setDescription('Indicates the total number of Routed Protocol packets that have been discarded, because of an invalid Routed Protocol header, during System Operational Time, on the router port for which the entry exists.')
nwRtrIfFwdCtrInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 4, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRtrIfFwdCtrInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtrIfFwdCtrInBytes.setDescription('Indicates the total number of bytes in the Routed Protocol packets that have been received, during System Operational Time, on the router port for which the entry exists.')
nwRtrIfFwdCtrOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 4, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRtrIfFwdCtrOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtrIfFwdCtrOutBytes.setDescription('Indicates the total number of bytes in the Routed Protocol packets that have been transmitted, during System Operational Time, on the router port for which the entry exists.')
nwRtrIfFwdCtrFwdBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 4, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRtrIfFwdCtrFwdBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtrIfFwdCtrFwdBytes.setDescription('Indicates the total number of bytes in the Routed Protocol packets that have been forwarded, during System Operational Time, on the router port for which the entry exists.')
nwRtrIfFwdCtrFilteredBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 4, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRtrIfFwdCtrFilteredBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtrIfFwdCtrFilteredBytes.setDescription('Indicates the total number of bytes in the Routed Protocol packets that have been administratively filtered, during System Operational Time, on the router port for which the entry exists.')
nwRtrIfFwdCtrDiscardBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 4, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRtrIfFwdCtrDiscardBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtrIfFwdCtrDiscardBytes.setDescription('Indicates the total number of bytes in the Routed Protocol packets that have been discarded, during System Operational Time, on the router port for which the entry exists.')
nwRtrIfFwdCtrHostInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 4, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRtrIfFwdCtrHostInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtrIfFwdCtrHostInPkts.setDescription('Indicates the total number of Routed Protocol packets that have been delivered to the local host, during System Operational Time, that were received on the router port for which the entry exists.')
nwRtrIfFwdCtrHostOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 4, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRtrIfFwdCtrHostOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtrIfFwdCtrHostOutPkts.setDescription('Indicates the total number of Routed Protocol packets that have been forwarded by the local host, during System Operational Time, on the router port for which the entry exists.')
nwRtrIfFwdCtrHostDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 4, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRtrIfFwdCtrHostDiscardPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtrIfFwdCtrHostDiscardPkts.setDescription('Indicates the total number of Routed Protocol packets that have been discarded by the local host, during System Operational Time, that were received on the router port for which the entry exists.')
nwRtrIfFwdCtrHostInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 4, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRtrIfFwdCtrHostInBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtrIfFwdCtrHostInBytes.setDescription('Indicates the total number of bytes in the Routed Protocol packets that have been received by the local host, during System Operational Time, on the router port for which the entry exists.')
nwRtrIfFwdCtrHostOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 4, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRtrIfFwdCtrHostOutBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtrIfFwdCtrHostOutBytes.setDescription('Indicates the total number of bytes in the Routed Protocol packets that have been forwarded by the local host, during System Operational Time, on the router port for which the entry exists.')
nwRtrIfFwdCtrHostDiscardBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 2, 2, 2, 4, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwRtrIfFwdCtrHostDiscardBytes.setStatus('mandatory')
if mibBuilder.loadTexts: nwRtrIfFwdCtrHostDiscardBytes.setDescription('Indicates the total number of bytes in the Routed Protocol packets that have been discarded by the local host, that were received, during System Operational Time, on the router port for which the entry exists.')
mibBuilder.exportSymbols("CTRON-ROUTERS-MIB", nwRtrIfFwdCtrFilteredPkts=nwRtrIfFwdCtrFilteredPkts, nwComponentVersion=nwComponentVersion, nwComponentTable=nwComponentTable, nwRouterIfOperationalTime=nwRouterIfOperationalTime, nwComponentIfIndex=nwComponentIfIndex, nwRtrMibRevision=nwRtrMibRevision, nwRtgProtocolAdminStatus=nwRtgProtocolAdminStatus, nwRouterName=nwRouterName, nwRtrComponentInterfaces=nwRtrComponentInterfaces, nwRtgProtocolIdentifier=nwRtgProtocolIdentifier, nwRtrIfFwdCtrHostDiscardPkts=nwRtrIfFwdCtrHostDiscardPkts, nwRtrComponentSystem=nwRtrComponentSystem, nwRtgProtocolEntry=nwRtgProtocolEntry, nwRtgProtocolName=nwRtgProtocolName, nwRtrStdMibEntry=nwRtrStdMibEntry, nwRouterIfName=nwRouterIfName, nwRtrIfFwdCtrFwdPkts=nwRtrIfFwdCtrFwdPkts, nwRtgProtocolEntMibGroup=nwRtgProtocolEntMibGroup, nwRouterVersion=nwRouterVersion, nwRtgProtocolIfOperStatus=nwRtgProtocolIfOperStatus, nwRtrRoutingInterfaces=nwRtrRoutingInterfaces, nwRtrMibRevText=nwRtrMibRevText, nwRtrIfFwdCtrInBytes=nwRtrIfFwdCtrInBytes, nwRtrStdMibIdentifier=nwRtrStdMibIdentifier, nwRouterEntry=nwRouterEntry, nwRtrIfFwdCtrHostOutPkts=nwRtrIfFwdCtrHostOutPkts, nwRtgProtocolVersion=nwRtgProtocolVersion, nwComponentRtrInstance=nwComponentRtrInstance, nwRtrIfFwdCtrDiscardBytes=nwRtrIfFwdCtrDiscardBytes, nwRtrIfFwdCtrFwdBytes=nwRtrIfFwdCtrFwdBytes, nwComponentIfRtrInstance=nwComponentIfRtrInstance, nwRouterIdentifier=nwRouterIdentifier, nwRtrStdMibIndex=nwRtrStdMibIndex, nwRtgProtocolInstance=nwRtgProtocolInstance, nwRtrStandardMibs=nwRtrStandardMibs, nwRtgProtocolIfAdminStatus=nwRtgProtocolIfAdminStatus, nwRtrIfFwdCtrInPkts=nwRtrIfFwdCtrInPkts, nwRouterIfInstance=nwRouterIfInstance, nwComponentOperStatus=nwComponentOperStatus, nwRtrApplicationSystem=nwRtrApplicationSystem, nwRtrIfFwdCtrOutPkts=nwRtrIfFwdCtrOutPkts, nwComponentOperationalTime=nwComponentOperationalTime, nwRtgProtocolIfRtrInstance=nwRtgProtocolIfRtrInstance, nwRouterIfEntry=nwRouterIfEntry, nwRtrAdminChanges=nwRtrAdminChanges, nwRtgProtocolIfOperationalTime=nwRtgProtocolIfOperationalTime, nwRtrCountersControl=nwRtrCountersControl, nwRtgProtocolIfEntry=nwRtgProtocolIfEntry, nwRtrRoutingSystem=nwRtrRoutingSystem, nwRtgProtocolIfTable=nwRtgProtocolIfTable, nwRtgProtocolTable=nwRtgProtocolTable, nwRtrApplicationView=nwRtrApplicationView, nwRtrStdMibTable=nwRtrStdMibTable, nwComponentIfAdminStatus=nwComponentIfAdminStatus, nwComponentIfOperationalTime=nwComponentIfOperationalTime, nwComponentIfEntry=nwComponentIfEntry, nwRtgProtocolOperationalTime=nwRtgProtocolOperationalTime, nwRtrIfFwdCtrLenErrPkts=nwRtrIfFwdCtrLenErrPkts, nwRtrIfFwdCtrIfIndex=nwRtrIfFwdCtrIfIndex, nwRtgProtocolRtrInstance=nwRtgProtocolRtrInstance, nwRtrInterfaceCounters=nwRtrInterfaceCounters, nwRtrCountersView=nwRtrCountersView, nwRtrIfFwdCtrDiscardPkts=nwRtrIfFwdCtrDiscardPkts, nwComponentEntMibGroup=nwComponentEntMibGroup, nwRtgProtocolOperStatus=nwRtgProtocolOperStatus, nwRtrIfFwdCtrFilteredBytes=nwRtrIfFwdCtrFilteredBytes, nwRouterIfAdminStatus=nwRouterIfAdminStatus, nwComponentEntry=nwComponentEntry, nwRtrApplicationInterfaces=nwRtrApplicationInterfaces, nwRouterIfOperStatus=nwRouterIfOperStatus, nwRtgProtocolIfIndex=nwRtgProtocolIfIndex, nwRtrRoutingView=nwRtrRoutingView, nwRtrIfFwdCtrAddrErrPkts=nwRtrIfFwdCtrAddrErrPkts, nwComponentName=nwComponentName, nwRouterIfTable=nwRouterIfTable, nwRtrIfFwdCtrTable=nwRtrIfFwdCtrTable, nwRouterIfIndex=nwRouterIfIndex, nwRtrIfFwdCtrHdrErrPkts=nwRtrIfFwdCtrHdrErrPkts, nwRouterOperStatus=nwRouterOperStatus, nwRtrComponentView=nwRtrComponentView, nwRtrIfFwdCtrHostInBytes=nwRtrIfFwdCtrHostInBytes, nwComponentIfName=nwComponentIfName, nwRtgProtocolIfName=nwRtgProtocolIfName, nwRtgProtocolIfInstance=nwRtgProtocolIfInstance, nwComponentIfInstance=nwComponentIfInstance, nwRtrIfFwdCtrHostDiscardBytes=nwRtrIfFwdCtrHostDiscardBytes, nwComponentIfTable=nwComponentIfTable, nwComponentInstance=nwComponentInstance, nwRouterSystemTable=nwRouterSystemTable, nwComponentAdminStatus=nwComponentAdminStatus, nwRouterOperationalTime=nwRouterOperationalTime, nwRtrIfFwdCtrEntry=nwRtrIfFwdCtrEntry, nwRtrIfFwdCtrHostOutBytes=nwRtrIfFwdCtrHostOutBytes, nwRouterEntMibGroup=nwRouterEntMibGroup, nwComponentIfOperStatus=nwComponentIfOperStatus, nwRtrIfFwdCtrOperStatus=nwRtrIfFwdCtrOperStatus, nwComponentIdentifier=nwComponentIdentifier, nwRtrVersion=nwRtrVersion, nwRtrIfFwdCtrOutBytes=nwRtrIfFwdCtrOutBytes, nwRouterInstance=nwRouterInstance, nwRouterAdminStatus=nwRouterAdminStatus, nwRtrIfFwdCtrHostInPkts=nwRtrIfFwdCtrHostInPkts)
