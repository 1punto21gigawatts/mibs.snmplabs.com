#
# PySNMP MIB module HUAWEI-SECSTAT-EUDM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-SECSTAT-EUDM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:48:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
mplsVpnVrfName, = mibBuilder.importSymbols("MPLS-VPN-MIB", "mplsVpnVrfName")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Counter32, Bits, ObjectIdentity, Counter64, TimeTicks, Unsigned32, NotificationType, IpAddress, MibIdentifier, Integer32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Bits", "ObjectIdentity", "Counter64", "TimeTicks", "Unsigned32", "NotificationType", "IpAddress", "MibIdentifier", "Integer32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Gauge32")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
hwSECSTATEudm = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2))
if mibBuilder.loadTexts: hwSECSTATEudm.setLastUpdated('200304101100Z')
if mibBuilder.loadTexts: hwSECSTATEudm.setOrganization('Huawei Technologies co.,Ltd.')
if mibBuilder.loadTexts: hwSECSTATEudm.setContactInfo(' ADDR: HUAWEI TECHNOLOGY CO.,LTD,SHEZHEN CHINA Tel: 86-755-26540808 ')
if mibBuilder.loadTexts: hwSECSTATEudm.setDescription(' V1.00 The HUAWEI-STCSTAT-EUDM-MIB contains objects to manage the security statistics information for firewall product. ')
hwSECSTAT = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11))
hwSecStatEudmCfgObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1))
hwSecStatEudmSessCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1, 1), )
if mibBuilder.loadTexts: hwSecStatEudmSessCfgTable.setStatus('current')
if mibBuilder.loadTexts: hwSecStatEudmSessCfgTable.setDescription('The configuration informations for security zone.')
hwSecStatEudmSessCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1, 1, 1), ).setIndexNames((0, "MPLS-VPN-MIB", "mplsVpnVrfName"), (0, "HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatEudmSessCfgZoneID"))
if mibBuilder.loadTexts: hwSecStatEudmSessCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hwSecStatEudmSessCfgEntry.setDescription('The configuration informations for security zone.')
hwSecStatEudmSessCfgZoneID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: hwSecStatEudmSessCfgZoneID.setStatus('current')
if mibBuilder.loadTexts: hwSecStatEudmSessCfgZoneID.setDescription('The ID of security zone.')
hwSecStatEudmSessTcpInZoneNumMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500000)).clone(500000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwSecStatEudmSessTcpInZoneNumMax.setStatus('current')
if mibBuilder.loadTexts: hwSecStatEudmSessTcpInZoneNumMax.setDescription('The upper limit of inbound TCP session for a zone.')
hwSecStatEudmSessTcpInZoneNumMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500000)).clone(500000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatEudmSessTcpInZoneNumMin.setStatus('current')
if mibBuilder.loadTexts: hwSecStatEudmSessTcpInZoneNumMin.setDescription('The lower limit of inbound TCP session for a zone.')
hwSecStatEudmSessTcpInIPNumMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatEudmSessTcpInIPNumMax.setStatus('current')
if mibBuilder.loadTexts: hwSecStatEudmSessTcpInIPNumMax.setDescription('The upper limit of inbound TCP session for one host.')
hwSecStatEudmSessTcpInIPNumMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatEudmSessTcpInIPNumMin.setStatus('current')
if mibBuilder.loadTexts: hwSecStatEudmSessTcpInIPNumMin.setDescription('The lower limit of inbound TCP session for one host.')
hwSecStatEudmSessTcpOutZoneNumMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500000)).clone(500000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatEudmSessTcpOutZoneNumMax.setStatus('current')
if mibBuilder.loadTexts: hwSecStatEudmSessTcpOutZoneNumMax.setDescription('The upper limit of outbound TCP session for a zone.')
hwSecStatEudmSessTcpOutZoneNumMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500000)).clone(500000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatEudmSessTcpOutZoneNumMin.setStatus('current')
if mibBuilder.loadTexts: hwSecStatEudmSessTcpOutZoneNumMin.setDescription('The lower limit of outbound TCP session for a zone.')
hwSecStatEudmSessTcpOutIPNumMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatEudmSessTcpOutIPNumMax.setStatus('current')
if mibBuilder.loadTexts: hwSecStatEudmSessTcpOutIPNumMax.setDescription('The upper limit of outbound TCP session for one host.')
hwSecStatEudmSessTcpOutIPNumMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatEudmSessTcpOutIPNumMin.setStatus('current')
if mibBuilder.loadTexts: hwSecStatEudmSessTcpOutIPNumMin.setDescription('The lower limit of outbound TCP session for one host.')
hwSecStatEudmSessUdpInZoneNumMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500000)).clone(500000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatEudmSessUdpInZoneNumMax.setStatus('current')
if mibBuilder.loadTexts: hwSecStatEudmSessUdpInZoneNumMax.setDescription('The upper limit of inbound UDP session for a zone.')
hwSecStatEudmSessUdpInZoneNumMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500000)).clone(500000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatEudmSessUdpInZoneNumMin.setStatus('current')
if mibBuilder.loadTexts: hwSecStatEudmSessUdpInZoneNumMin.setDescription('The lower limit of inbound UDP session for a zone.')
hwSecStatEudmSessUdpInIPNumMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatEudmSessUdpInIPNumMax.setStatus('current')
if mibBuilder.loadTexts: hwSecStatEudmSessUdpInIPNumMax.setDescription('The upper limit of inbound UDP session for one host.')
hwSecStatEudmSessUdpInIPNumMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatEudmSessUdpInIPNumMin.setStatus('current')
if mibBuilder.loadTexts: hwSecStatEudmSessUdpInIPNumMin.setDescription('The lower limit of inbound UDP session for one host.')
hwSecStatEudmSessUdpOutZoneNumMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500000)).clone(500000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatEudmSessUdpOutZoneNumMax.setStatus('current')
if mibBuilder.loadTexts: hwSecStatEudmSessUdpOutZoneNumMax.setDescription('The upper limit of outbound UDP session for one zone.')
hwSecStatEudmSessUdpOutZoneNumMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500000)).clone(500000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatEudmSessUdpOutZoneNumMin.setStatus('current')
if mibBuilder.loadTexts: hwSecStatEudmSessUdpOutZoneNumMin.setDescription('The lower limit of outbound UDP session for one zone.')
hwSecStatEudmSessUdpOutIPNumMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatEudmSessUdpOutIPNumMax.setStatus('current')
if mibBuilder.loadTexts: hwSecStatEudmSessUdpOutIPNumMax.setDescription('The upper limit of outbound UDP session for one host.')
hwSecStatEudmSessUdpOutIPNumMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatEudmSessUdpOutIPNumMin.setStatus('current')
if mibBuilder.loadTexts: hwSecStatEudmSessUdpOutIPNumMin.setDescription('The lower limit of outbound UDP session for one host.')
hwSecStatEudmSessTcpInZoneSpeedMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatEudmSessTcpInZoneSpeedMax.setStatus('current')
if mibBuilder.loadTexts: hwSecStatEudmSessTcpInZoneSpeedMax.setDescription('The upper limit of establishing speed of inbound TCP session for one zone.')
hwSecStatEudmSessTcpInZoneSpeedMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatEudmSessTcpInZoneSpeedMin.setStatus('current')
if mibBuilder.loadTexts: hwSecStatEudmSessTcpInZoneSpeedMin.setDescription('The lower limit of establishing speed of inbound TCP session for one zone.')
hwSecStatEudmSessTcpInIPSpeedMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatEudmSessTcpInIPSpeedMax.setStatus('current')
if mibBuilder.loadTexts: hwSecStatEudmSessTcpInIPSpeedMax.setDescription('The upper limit of establishing speed of inbound TCP session for one host.')
hwSecStatEudmSessTcpInIPSpeedMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatEudmSessTcpInIPSpeedMin.setStatus('current')
if mibBuilder.loadTexts: hwSecStatEudmSessTcpInIPSpeedMin.setDescription('The lower limit of establishing speed of inbound TCP session for one host.')
hwSecStatEudmSessTcpOutZoneSpeedMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatEudmSessTcpOutZoneSpeedMax.setStatus('current')
if mibBuilder.loadTexts: hwSecStatEudmSessTcpOutZoneSpeedMax.setDescription('The upper limit of establishing speed of outbound TCP session for one zone.')
hwSecStatEudmSessTcpOutZoneSpeedMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1, 1, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatEudmSessTcpOutZoneSpeedMin.setStatus('current')
if mibBuilder.loadTexts: hwSecStatEudmSessTcpOutZoneSpeedMin.setDescription('The lower limit of establishing speed of outbound TCP session for one zone.')
hwSecStatEudmSessTcpOutIPSpeedMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1, 1, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatEudmSessTcpOutIPSpeedMax.setStatus('current')
if mibBuilder.loadTexts: hwSecStatEudmSessTcpOutIPSpeedMax.setDescription('The upper limit of establishing speed of outbound TCP session for one host.')
hwSecStatEudmSessTcpOutIPSpeedMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1, 1, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatEudmSessTcpOutIPSpeedMin.setStatus('current')
if mibBuilder.loadTexts: hwSecStatEudmSessTcpOutIPSpeedMin.setDescription('The lower limit of establishing speed of outbound TCP session for one host.')
hwSecStatEudmSessUdpInZoneSpeedMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1, 1, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatEudmSessUdpInZoneSpeedMax.setStatus('current')
if mibBuilder.loadTexts: hwSecStatEudmSessUdpInZoneSpeedMax.setDescription('The upper limit of establishing speed of inbound UDP session for one zone.')
hwSecStatEudmSessUdpInZoneSpeedMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1, 1, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatEudmSessUdpInZoneSpeedMin.setStatus('current')
if mibBuilder.loadTexts: hwSecStatEudmSessUdpInZoneSpeedMin.setDescription('The lower limit of establishing speed of inbound UDP session for one zone.')
hwSecStatEudmSessUdpInIPSpeedMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1, 1, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatEudmSessUdpInIPSpeedMax.setStatus('current')
if mibBuilder.loadTexts: hwSecStatEudmSessUdpInIPSpeedMax.setDescription('The upper limit of establishing speed of inbound UDP session for one host.')
hwSecStatEudmSessUdpInIPSpeedMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1, 1, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatEudmSessUdpInIPSpeedMin.setStatus('current')
if mibBuilder.loadTexts: hwSecStatEudmSessUdpInIPSpeedMin.setDescription('The lower limit of establishing speed of inbound UDP session for one host.')
hwSecStatEudmSessUdpOutZoneSpeedMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1, 1, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatEudmSessUdpOutZoneSpeedMax.setStatus('current')
if mibBuilder.loadTexts: hwSecStatEudmSessUdpOutZoneSpeedMax.setDescription('The upper limit of establishing speed of outbound UDP session for one zone.')
hwSecStatEudmSessUdpOutZoneSpeedMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1, 1, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatEudmSessUdpOutZoneSpeedMin.setStatus('current')
if mibBuilder.loadTexts: hwSecStatEudmSessUdpOutZoneSpeedMin.setDescription('The lower limit of establishing speed of outbound UDP session for one zone.')
hwSecStatEudmSessUdpOutIPSpeedMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1, 1, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatEudmSessUdpOutIPSpeedMax.setStatus('current')
if mibBuilder.loadTexts: hwSecStatEudmSessUdpOutIPSpeedMax.setDescription('The upper limit of establishing speed of outbound UDP session for one host.')
hwSecStatEudmSessUdpOutIPSpeedMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1, 1, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatEudmSessUdpOutIPSpeedMin.setStatus('current')
if mibBuilder.loadTexts: hwSecStatEudmSessUdpOutIPSpeedMin.setDescription('The lower limit of establishing speed of outbound UDP session for one host.')
hwSecStatEudmSessCfgSetDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatEudmSessCfgSetDefault.setStatus('current')
if mibBuilder.loadTexts: hwSecStatEudmSessCfgSetDefault.setDescription(' This OID is used for setting the session configuration of the zone to default. When you want to set the calue to default, set this OID to 1. ')
hwSecStatEudmCfgEnableTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1, 2), )
if mibBuilder.loadTexts: hwSecStatEudmCfgEnableTable.setStatus('current')
if mibBuilder.loadTexts: hwSecStatEudmCfgEnableTable.setDescription('The table for status to indicate whether the statistics is enabled in the zone.')
hwSecStatEudmCfgEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1, 2, 1), ).setIndexNames((0, "MPLS-VPN-MIB", "mplsVpnVrfName"), (0, "HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatEudmCfgEnableZoneID"))
if mibBuilder.loadTexts: hwSecStatEudmCfgEnableEntry.setStatus('current')
if mibBuilder.loadTexts: hwSecStatEudmCfgEnableEntry.setDescription('The entry to indicate whether the statistics is enabled in this zone.')
hwSecStatEudmCfgEnableZoneID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: hwSecStatEudmCfgEnableZoneID.setStatus('current')
if mibBuilder.loadTexts: hwSecStatEudmCfgEnableZoneID.setDescription('The ID of security zone.')
hwSecStatEudmCfgEnbaleZoneIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1, 2, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatEudmCfgEnbaleZoneIn.setStatus('current')
if mibBuilder.loadTexts: hwSecStatEudmCfgEnbaleZoneIn.setDescription('The status to indicate whether the inbound statistics is enabled for the zone.')
hwSecStatEudmCfgEnbaleZoneOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1, 2, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatEudmCfgEnbaleZoneOut.setStatus('current')
if mibBuilder.loadTexts: hwSecStatEudmCfgEnbaleZoneOut.setDescription('The status to indicate whether the outbound statistics is enabled for the zone.')
hwSecStatEudmCfgEnbaleIpIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1, 2, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatEudmCfgEnbaleIpIn.setStatus('current')
if mibBuilder.loadTexts: hwSecStatEudmCfgEnbaleIpIn.setDescription('The status to indicate whether the inbound statistics is enabled for the hosts in the zone.')
hwSecStatEudmCfgEnbaleIPOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1, 2, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatEudmCfgEnbaleIPOut.setStatus('current')
if mibBuilder.loadTexts: hwSecStatEudmCfgEnbaleIPOut.setDescription('The status to indicate whether the outbound statistics is enabled for the hosts in the zone.')
hwSecStatEudmCfgEnableSetDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatEudmCfgEnableSetDefault.setStatus('current')
if mibBuilder.loadTexts: hwSecStatEudmCfgEnableSetDefault.setDescription(' This OID is used for setting the statistics enabling configuration of the zone to default. When you want to set the calue to default, set this OID to 1. ')
hwSecStatEudmMonitorObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2))
hwSecStatZoneInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1), )
if mibBuilder.loadTexts: hwSecStatZoneInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneInfoTable.setDescription('The statistics data table for zone.')
hwSecStatZoneInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1), ).setIndexNames((0, "MPLS-VPN-MIB", "mplsVpnVrfName"), (0, "HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneInfoZoneID"))
if mibBuilder.loadTexts: hwSecStatZoneInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneInfoEntry.setDescription('The statistics data for a zone.')
hwSecStatZoneInfoZoneID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: hwSecStatZoneInfoZoneID.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneInfoZoneID.setDescription('The ID of security zone.')
hwSecStatZoneInTcpSess = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneInTcpSess.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneInTcpSess.setDescription('The total number of TCP session to the hosts in this zone.')
hwSecStatZoneInUdpSess = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneInUdpSess.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneInUdpSess.setDescription('The total number of UDP session to the hosts in this zone.')
hwSecStatZoneInIcmpSess = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneInIcmpSess.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneInIcmpSess.setDescription('The total number of ICMP session to the hosts in this zone.')
hwSecStatZoneInConn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneInConn.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneInConn.setDescription('The total number of session to the hosts in this zone.')
hwSecStatZoneInHalfConn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneInHalfConn.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneInHalfConn.setDescription('The total number of incomplete session to the hosts in this zone.')
hwSecStatZoneInTcpSessSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneInTcpSessSpeed.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneInTcpSessSpeed.setDescription('The current establishing speed of TCP session to the hosts in this zone.')
hwSecStatZoneInUdpSessSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneInUdpSessSpeed.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneInUdpSessSpeed.setDescription('The current establishing speed of UDP session to the hosts in this zone.')
hwSecStatZoneInIcmpSessSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneInIcmpSessSpeed.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneInIcmpSessSpeed.setDescription('The current establishing speed of ICMP session to the hosts in this zone.')
hwSecStatZoneInConnSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneInConnSpeed.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneInConnSpeed.setDescription('The current establishing speed of session to the hosts in this zone.')
hwSecStatZoneInHalfConnSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneInHalfConnSpeed.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneInHalfConnSpeed.setDescription('The current establishing speed of incomplete session to the hosts in this zone.')
hwSecStatZoneInAclDenyIcmpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneInAclDenyIcmpPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneInAclDenyIcmpPkts.setDescription('The total number of droped icmp packets by acl to the hosts in this zone.')
hwSecStatZoneInAclDenyIcmpOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneInAclDenyIcmpOcts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneInAclDenyIcmpOcts.setDescription('The total bytes of droped icmp packets by acl to the hosts in this zone.')
hwSecStatZoneInAclDenyNonIcmpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneInAclDenyNonIcmpPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneInAclDenyNonIcmpPkts.setDescription('The total number of droped non icmp packets by acl to the hosts in this zone.')
hwSecStatZoneInAclDenyNonIcmpOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneInAclDenyNonIcmpOcts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneInAclDenyNonIcmpOcts.setDescription('The total bytes of droped non icmp packets by acl to the hosts in this zone.')
hwSecStatZoneInBlsDenyPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneInBlsDenyPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneInBlsDenyPkts.setDescription('The total number of droped packets by blacklist to the hosts in this zone.')
hwSecStatZoneInDftAclDenyPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneInDftAclDenyPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneInDftAclDenyPkts.setDescription('The total number of droped packets by default acl to the hosts in this zone.')
hwSecStatZoneInDftAclDenyIcmpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneInDftAclDenyIcmpPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneInDftAclDenyIcmpPkts.setDescription('The total number of droped ICMP packets by default acl to the hosts in this zone.')
hwSecStatZoneInIcmpFloodDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneInIcmpFloodDropPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneInIcmpFloodDropPkts.setDescription('The total number of droped packets to the hosts in this zone for ICMP flood attack.')
hwSecStatZoneInUdpFloodDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneInUdpFloodDropPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneInUdpFloodDropPkts.setDescription('The total number of droped UDP packets to the hosts in this zone for UDP flood attack.')
hwSecStatZoneInFtpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneInFtpPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneInFtpPkts.setDescription('The total number of FTP packets to the hosts in this zone.')
hwSecStatZoneInSmtpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneInSmtpPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneInSmtpPkts.setDescription('The total number of SMTP packets to the hosts in this zone.')
hwSecStatZoneInHttpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneInHttpPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneInHttpPkts.setDescription('The total number of HTTP packets to the hosts in this zone.')
hwSecStatZoneInH323Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneInH323Pkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneInH323Pkts.setDescription('The total number of H323 packets to the hosts in this zone.')
hwSecStatZoneInRtspPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneInRtspPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneInRtspPkts.setDescription('The total number of RTSP packets to the hosts in this zone.')
hwSecStatZoneOutTcpSess = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneOutTcpSess.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneOutTcpSess.setDescription('The total number of TCP session from the hosts in this zone.')
hwSecStatZoneOutUdpSess = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneOutUdpSess.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneOutUdpSess.setDescription('The total number of UDP session from the hosts in this zone.')
hwSecStatZoneOutIcmpSess = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneOutIcmpSess.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneOutIcmpSess.setDescription('The total number of ICMP session from the hosts in this zone.')
hwSecStatZoneOutConn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneOutConn.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneOutConn.setDescription('The total number of session from the hosts in this zone.')
hwSecStatZoneOutHalfConn = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneOutHalfConn.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneOutHalfConn.setDescription('The total number of incomplete session from the hosts in this zone.')
hwSecStatZoneOutTcpSessSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneOutTcpSessSpeed.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneOutTcpSessSpeed.setDescription('The current establishing speed of TCP session from the hosts in this zone.')
hwSecStatZoneOutUdpSessSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneOutUdpSessSpeed.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneOutUdpSessSpeed.setDescription('The current establishing speed of UDP session from the hosts in this zone.')
hwSecStatZoneOutIcmpSessSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneOutIcmpSessSpeed.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneOutIcmpSessSpeed.setDescription('The current establishing speed of ICMP session from the hosts in this zone.')
hwSecStatZoneOutConnSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneOutConnSpeed.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneOutConnSpeed.setDescription('The current establishing speed of session from the hosts in this zone.')
hwSecStatZoneOutHalfConnSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneOutHalfConnSpeed.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneOutHalfConnSpeed.setDescription('The current establishing speed of incomplete session from the hosts in this zone.')
hwSecStatZoneOutAclDenyIcmpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneOutAclDenyIcmpPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneOutAclDenyIcmpPkts.setDescription('The total number of droped icmp packets by acl from the hosts in this zone.')
hwSecStatZoneOutAclDenyIcmpOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneOutAclDenyIcmpOcts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneOutAclDenyIcmpOcts.setDescription('The total bytes of droped icmp packets by acl from the hosts in this zone.')
hwSecStatZoneOutAclDenyNonIcmpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneOutAclDenyNonIcmpPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneOutAclDenyNonIcmpPkts.setDescription('The total number of droped non icmp packets by acl from the hosts in this zone.')
hwSecStatZoneOutAclDenyNonIcmpOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneOutAclDenyNonIcmpOcts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneOutAclDenyNonIcmpOcts.setDescription('The total bytes of droped non icmp packets by acl from the hosts in this zone.')
hwSecStatZoneOutBlsDenyPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneOutBlsDenyPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneOutBlsDenyPkts.setDescription('The total number of droped packets by blacklist from the hosts in this zone.')
hwSecStatZoneOutDftAclDenyPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneOutDftAclDenyPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneOutDftAclDenyPkts.setDescription('The total number of droped packets by default acl from the hosts in this zone.')
hwSecStatZoneOutDftAclDenyIcmpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneOutDftAclDenyIcmpPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneOutDftAclDenyIcmpPkts.setDescription('The total number of droped icmp packets by default acl from the hosts in this zone.')
hwSecStatZoneOutFtpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneOutFtpPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneOutFtpPkts.setDescription('The total number of FTP packets from the hosts in this zone.')
hwSecStatZoneOutSmtpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneOutSmtpPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneOutSmtpPkts.setDescription('The total number of SMTP packets from the hosts in this zone.')
hwSecStatZoneOutHttpPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneOutHttpPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneOutHttpPkts.setDescription('The total number of HTTP packets from the hosts in this zone.')
hwSecStatZoneOutH323Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneOutH323Pkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneOutH323Pkts.setDescription('The total number of H323 packets from the hosts in this zone.')
hwSecStatZoneOutRtspPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwSecStatZoneOutRtspPkts.setStatus('current')
if mibBuilder.loadTexts: hwSecStatZoneOutRtspPkts.setDescription('The total number of RTSP packets from the hosts in this zone.')
hwSecStatClearZoneInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 2, 1, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwSecStatClearZoneInfo.setStatus('current')
if mibBuilder.loadTexts: hwSecStatClearZoneInfo.setDescription(' This OID is used for clearing the statistics information of the zone. When you want to clear the information, set this OID to 1. ')
hwSECSTATEudmConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 3))
hwSECSTATEudmCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 3, 1))
hwSECSTATEudmMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 3, 2))
hwSECSTATEudmZoneCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 3, 2, 2)).setObjects(("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatEudmSessTcpInZoneNumMax"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatEudmSessTcpInZoneNumMin"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatEudmSessTcpInIPNumMax"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatEudmSessTcpInIPNumMin"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatEudmSessTcpOutZoneNumMax"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatEudmSessTcpOutZoneNumMin"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatEudmSessTcpOutIPNumMax"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatEudmSessTcpOutIPNumMin"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatEudmSessUdpInZoneNumMax"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatEudmSessUdpInZoneNumMin"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatEudmSessUdpInIPNumMax"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatEudmSessUdpInIPNumMin"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatEudmSessUdpOutZoneNumMax"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatEudmSessUdpOutZoneNumMin"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatEudmSessUdpOutIPNumMax"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatEudmSessUdpOutIPNumMin"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatEudmSessTcpInZoneSpeedMax"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatEudmSessTcpInZoneSpeedMin"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatEudmSessTcpInIPSpeedMax"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatEudmSessTcpInIPSpeedMin"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatEudmSessTcpOutZoneSpeedMax"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatEudmSessTcpOutZoneSpeedMin"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatEudmSessTcpOutIPSpeedMax"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatEudmSessTcpOutIPSpeedMin"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatEudmSessUdpInZoneSpeedMax"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatEudmSessUdpInZoneSpeedMin"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatEudmSessUdpInIPSpeedMax"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatEudmSessUdpInIPSpeedMin"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatEudmSessUdpOutZoneSpeedMax"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatEudmSessUdpOutZoneSpeedMin"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatEudmSessUdpOutIPSpeedMax"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatEudmSessUdpOutIPSpeedMin"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatEudmCfgEnbaleZoneIn"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatEudmCfgEnbaleZoneOut"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatEudmCfgEnbaleIpIn"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatEudmCfgEnbaleIPOut"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatEudmSessCfgSetDefault"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatEudmCfgEnableSetDefault"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSECSTATEudmZoneCfgGroup = hwSECSTATEudmZoneCfgGroup.setStatus('current')
if mibBuilder.loadTexts: hwSECSTATEudmZoneCfgGroup.setDescription('Description.')
hwSECSTATEudmZoneMonitorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 11, 2, 3, 2, 4)).setObjects(("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneInTcpSess"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneInUdpSess"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneInIcmpSess"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneInConn"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneInHalfConn"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneInTcpSessSpeed"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneInUdpSessSpeed"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneInIcmpSessSpeed"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneInConnSpeed"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneInHalfConnSpeed"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneInAclDenyIcmpPkts"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneInAclDenyIcmpOcts"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneInAclDenyNonIcmpPkts"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneInAclDenyNonIcmpOcts"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneInIcmpFloodDropPkts"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneInUdpFloodDropPkts"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneInFtpPkts"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneInSmtpPkts"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneInHttpPkts"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneInH323Pkts"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneInRtspPkts"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneOutTcpSess"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneOutUdpSess"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneOutIcmpSess"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneOutConn"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneOutHalfConn"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneOutTcpSessSpeed"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneOutUdpSessSpeed"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneOutIcmpSessSpeed"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneOutConnSpeed"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneOutHalfConnSpeed"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneOutAclDenyIcmpPkts"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneOutAclDenyIcmpOcts"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneOutAclDenyNonIcmpPkts"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneOutAclDenyNonIcmpOcts"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneOutDftAclDenyIcmpPkts"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneOutFtpPkts"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneOutSmtpPkts"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneOutHttpPkts"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneOutH323Pkts"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneOutRtspPkts"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneInDftAclDenyIcmpPkts"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneInBlsDenyPkts"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneInDftAclDenyPkts"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatClearZoneInfo"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneOutDftAclDenyPkts"), ("HUAWEI-SECSTAT-EUDM-MIB", "hwSecStatZoneOutBlsDenyPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSECSTATEudmZoneMonitorGroup = hwSECSTATEudmZoneMonitorGroup.setStatus('current')
if mibBuilder.loadTexts: hwSECSTATEudmZoneMonitorGroup.setDescription('Description.')
mibBuilder.exportSymbols("HUAWEI-SECSTAT-EUDM-MIB", hwSecStatZoneInAclDenyIcmpOcts=hwSecStatZoneInAclDenyIcmpOcts, hwSecStatEudmSessTcpInIPNumMax=hwSecStatEudmSessTcpInIPNumMax, hwSecStatEudmSessTcpOutIPSpeedMax=hwSecStatEudmSessTcpOutIPSpeedMax, hwSecStatEudmCfgEnableEntry=hwSecStatEudmCfgEnableEntry, hwSecStatEudmSessTcpInZoneSpeedMax=hwSecStatEudmSessTcpInZoneSpeedMax, hwSecStatZoneOutRtspPkts=hwSecStatZoneOutRtspPkts, hwSecStatZoneInH323Pkts=hwSecStatZoneInH323Pkts, hwSecStatZoneInSmtpPkts=hwSecStatZoneInSmtpPkts, hwSecStatZoneOutAclDenyNonIcmpPkts=hwSecStatZoneOutAclDenyNonIcmpPkts, hwSecStatZoneInUdpFloodDropPkts=hwSecStatZoneInUdpFloodDropPkts, hwSECSTATEudmMibGroups=hwSECSTATEudmMibGroups, hwSecStatZoneOutH323Pkts=hwSecStatZoneOutH323Pkts, hwSecStatEudmSessUdpInZoneNumMax=hwSecStatEudmSessUdpInZoneNumMax, hwSecStatZoneOutConnSpeed=hwSecStatZoneOutConnSpeed, hwSecStatZoneOutHalfConnSpeed=hwSecStatZoneOutHalfConnSpeed, hwSecStatZoneOutDftAclDenyPkts=hwSecStatZoneOutDftAclDenyPkts, hwSECSTATEudm=hwSECSTATEudm, hwSecStatEudmSessUdpInIPSpeedMin=hwSecStatEudmSessUdpInIPSpeedMin, hwSecStatEudmCfgEnbaleIpIn=hwSecStatEudmCfgEnbaleIpIn, hwSecStatEudmSessTcpOutZoneSpeedMax=hwSecStatEudmSessTcpOutZoneSpeedMax, hwSecStatZoneOutBlsDenyPkts=hwSecStatZoneOutBlsDenyPkts, hwSecStatEudmSessCfgEntry=hwSecStatEudmSessCfgEntry, hwSecStatEudmSessUdpInIPSpeedMax=hwSecStatEudmSessUdpInIPSpeedMax, hwSecStatZoneOutHttpPkts=hwSecStatZoneOutHttpPkts, hwSecStatEudmSessTcpOutZoneNumMax=hwSecStatEudmSessTcpOutZoneNumMax, hwSecStatEudmSessUdpOutIPSpeedMin=hwSecStatEudmSessUdpOutIPSpeedMin, hwSecStatZoneOutConn=hwSecStatZoneOutConn, hwSecStatZoneOutFtpPkts=hwSecStatZoneOutFtpPkts, hwSecStatZoneOutUdpSess=hwSecStatZoneOutUdpSess, hwSecStatZoneInIcmpSess=hwSecStatZoneInIcmpSess, hwSecStatZoneOutHalfConn=hwSecStatZoneOutHalfConn, hwSecStatZoneInfoEntry=hwSecStatZoneInfoEntry, hwSecStatZoneInBlsDenyPkts=hwSecStatZoneInBlsDenyPkts, hwSecStatZoneInFtpPkts=hwSecStatZoneInFtpPkts, hwSecStatZoneInAclDenyIcmpPkts=hwSecStatZoneInAclDenyIcmpPkts, hwSecStatZoneInHalfConn=hwSecStatZoneInHalfConn, hwSecStatEudmSessTcpOutIPSpeedMin=hwSecStatEudmSessTcpOutIPSpeedMin, hwSecStatEudmSessUdpOutZoneNumMax=hwSecStatEudmSessUdpOutZoneNumMax, hwSecStatEudmSessCfgZoneID=hwSecStatEudmSessCfgZoneID, hwSecStatEudmSessTcpInIPNumMin=hwSecStatEudmSessTcpInIPNumMin, hwSecStatEudmSessUdpInZoneSpeedMax=hwSecStatEudmSessUdpInZoneSpeedMax, hwSecStatZoneOutAclDenyIcmpOcts=hwSecStatZoneOutAclDenyIcmpOcts, hwSECSTATEudmConformance=hwSECSTATEudmConformance, hwSecStatEudmSessCfgTable=hwSecStatEudmSessCfgTable, hwSecStatEudmSessUdpOutZoneNumMin=hwSecStatEudmSessUdpOutZoneNumMin, hwSecStatEudmSessTcpOutZoneSpeedMin=hwSecStatEudmSessTcpOutZoneSpeedMin, hwSecStatEudmSessCfgSetDefault=hwSecStatEudmSessCfgSetDefault, hwSecStatEudmSessUdpOutZoneSpeedMin=hwSecStatEudmSessUdpOutZoneSpeedMin, hwSecStatEudmSessUdpOutIPNumMax=hwSecStatEudmSessUdpOutIPNumMax, hwSecStatZoneOutUdpSessSpeed=hwSecStatZoneOutUdpSessSpeed, hwSecStatZoneOutDftAclDenyIcmpPkts=hwSecStatZoneOutDftAclDenyIcmpPkts, hwSecStatZoneInTcpSessSpeed=hwSecStatZoneInTcpSessSpeed, hwSecStatZoneInHalfConnSpeed=hwSecStatZoneInHalfConnSpeed, hwSecStatZoneInfoTable=hwSecStatZoneInfoTable, hwSecStatClearZoneInfo=hwSecStatClearZoneInfo, hwSecStatEudmCfgEnbaleZoneOut=hwSecStatEudmCfgEnbaleZoneOut, hwSecStatEudmSessTcpInIPSpeedMax=hwSecStatEudmSessTcpInIPSpeedMax, hwSecStatZoneInDftAclDenyPkts=hwSecStatZoneInDftAclDenyPkts, hwSecStatZoneInUdpSess=hwSecStatZoneInUdpSess, hwSecStatEudmSessTcpInZoneNumMax=hwSecStatEudmSessTcpInZoneNumMax, hwSecStatEudmSessUdpInZoneSpeedMin=hwSecStatEudmSessUdpInZoneSpeedMin, hwSecStatZoneInDftAclDenyIcmpPkts=hwSecStatZoneInDftAclDenyIcmpPkts, hwSecStatZoneInIcmpFloodDropPkts=hwSecStatZoneInIcmpFloodDropPkts, hwSECSTATEudmZoneMonitorGroup=hwSECSTATEudmZoneMonitorGroup, hwSecStatEudmSessUdpInIPNumMax=hwSecStatEudmSessUdpInIPNumMax, hwSecStatEudmSessUdpOutIPNumMin=hwSecStatEudmSessUdpOutIPNumMin, hwSecStatZoneOutTcpSessSpeed=hwSecStatZoneOutTcpSessSpeed, hwSecStatZoneInConn=hwSecStatZoneInConn, hwSecStatEudmSessUdpOutIPSpeedMax=hwSecStatEudmSessUdpOutIPSpeedMax, hwSECSTATEudmCompliance=hwSECSTATEudmCompliance, hwSecStatZoneInHttpPkts=hwSecStatZoneInHttpPkts, hwSecStatEudmCfgEnbaleIPOut=hwSecStatEudmCfgEnbaleIPOut, hwSecStatZoneInConnSpeed=hwSecStatZoneInConnSpeed, hwSecStatEudmCfgEnableZoneID=hwSecStatEudmCfgEnableZoneID, hwSecStatEudmMonitorObjects=hwSecStatEudmMonitorObjects, hwSecStatZoneOutIcmpSess=hwSecStatZoneOutIcmpSess, hwSecStatZoneOutAclDenyNonIcmpOcts=hwSecStatZoneOutAclDenyNonIcmpOcts, hwSECSTAT=hwSECSTAT, hwSECSTATEudmZoneCfgGroup=hwSECSTATEudmZoneCfgGroup, hwSecStatZoneOutTcpSess=hwSecStatZoneOutTcpSess, hwSecStatZoneOutAclDenyIcmpPkts=hwSecStatZoneOutAclDenyIcmpPkts, hwSecStatEudmSessTcpOutZoneNumMin=hwSecStatEudmSessTcpOutZoneNumMin, hwSecStatEudmCfgEnableTable=hwSecStatEudmCfgEnableTable, hwSecStatEudmSessUdpInZoneNumMin=hwSecStatEudmSessUdpInZoneNumMin, hwSecStatEudmSessUdpOutZoneSpeedMax=hwSecStatEudmSessUdpOutZoneSpeedMax, hwSecStatZoneInfoZoneID=hwSecStatZoneInfoZoneID, hwSecStatZoneInUdpSessSpeed=hwSecStatZoneInUdpSessSpeed, hwSecStatEudmSessTcpInZoneSpeedMin=hwSecStatEudmSessTcpInZoneSpeedMin, hwSecStatEudmSessTcpOutIPNumMax=hwSecStatEudmSessTcpOutIPNumMax, hwSecStatEudmCfgEnableSetDefault=hwSecStatEudmCfgEnableSetDefault, hwSecStatZoneOutIcmpSessSpeed=hwSecStatZoneOutIcmpSessSpeed, hwSecStatZoneInAclDenyNonIcmpOcts=hwSecStatZoneInAclDenyNonIcmpOcts, hwSecStatEudmSessTcpOutIPNumMin=hwSecStatEudmSessTcpOutIPNumMin, PYSNMP_MODULE_ID=hwSECSTATEudm, hwSecStatZoneOutSmtpPkts=hwSecStatZoneOutSmtpPkts, hwSecStatEudmSessTcpInIPSpeedMin=hwSecStatEudmSessTcpInIPSpeedMin, hwSecStatEudmSessTcpInZoneNumMin=hwSecStatEudmSessTcpInZoneNumMin, hwSecStatEudmCfgEnbaleZoneIn=hwSecStatEudmCfgEnbaleZoneIn, hwSecStatZoneInIcmpSessSpeed=hwSecStatZoneInIcmpSessSpeed, hwSecStatEudmCfgObjects=hwSecStatEudmCfgObjects, hwSecStatZoneInTcpSess=hwSecStatZoneInTcpSess, hwSecStatEudmSessUdpInIPNumMin=hwSecStatEudmSessUdpInIPNumMin, hwSecStatZoneInRtspPkts=hwSecStatZoneInRtspPkts, hwSecStatZoneInAclDenyNonIcmpPkts=hwSecStatZoneInAclDenyNonIcmpPkts)
