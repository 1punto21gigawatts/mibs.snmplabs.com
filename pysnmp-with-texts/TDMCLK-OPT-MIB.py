#
# PySNMP MIB module TDMCLK-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TDMCLK-OPT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:15:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, IpAddress, Integer32, Gauge32, enterprises, Counter32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Bits, Counter64, NotificationType, MibIdentifier, Unsigned32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "IpAddress", "Integer32", "Gauge32", "enterprises", "Counter32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Bits", "Counter64", "NotificationType", "MibIdentifier", "Unsigned32", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatOtherStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2))
cdx6500STTdmClkGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 13))
class DisplayString(OctetString):
    pass

cdx6500TdmClkTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 24), )
if mibBuilder.loadTexts: cdx6500TdmClkTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TdmClkTable.setDescription('A list of Configuration parameters that makeup the TDM Clock Table.')
cdx6500TdmClkCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 24, 1), ).setIndexNames((0, "TDMCLK-OPT-MIB", "cdx6500TdmClkEntryNumber"))
if mibBuilder.loadTexts: cdx6500TdmClkCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TdmClkCfgEntry.setDescription('Each entry contains the Configuration parameters for each Tdm clock table.')
cdx6500TdmClkEntryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 24, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TdmClkEntryNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TdmClkEntryNumber.setDescription('This identifies the particular TDM Network Clock Table entry being configured. The number of instances defined by this entry depends on the configured value of the Maximum TDM Network Clock Entry parameter in the Node record (upto a maximum of 1024 entries). ')
cdx6500TdmClkPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 2, 24, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500TdmClkPriority.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500TdmClkPriority.setDescription('The Network Clock Priority determines the order in which the network clock will be chosen 0 : Interface will not supply the network clock. 1 - 3: Interface priority for supplying the network clock.')
tdmClkStatus = MibScalar((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 13, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmClkStatus.setStatus('optional')
if mibBuilder.loadTexts: tdmClkStatus.setDescription('The Status of Current Network Clock.')
tdmClkRegisteredTDMTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 13, 2), )
if mibBuilder.loadTexts: tdmClkRegisteredTDMTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdmClkRegisteredTDMTable.setDescription('The Table of registered TDM Number.')
tdmClkRegisteredTDMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 13, 2, 1), ).setIndexNames((0, "TDMCLK-OPT-MIB", "cdx6500TdmClkEntryNumber"))
if mibBuilder.loadTexts: tdmClkRegisteredTDMEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdmClkRegisteredTDMEntry.setDescription('Each entry contains the Registered TDM Number.')
tdmClkRegisteredTDMEntryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 13, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmClkRegisteredTDMEntryNumber.setStatus('mandatory')
if mibBuilder.loadTexts: tdmClkRegisteredTDMEntryNumber.setDescription('This identifies the particular tdmClkRegisteredTDMNumTable.')
tdmClkRegisteredTDM = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 2, 13, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmClkRegisteredTDM.setStatus('optional')
if mibBuilder.loadTexts: tdmClkRegisteredTDM.setDescription('Current Registered TDM Number.')
mibBuilder.exportSymbols("TDMCLK-OPT-MIB", cdx6500TdmClkTable=cdx6500TdmClkTable, cdx6500TdmClkCfgEntry=cdx6500TdmClkCfgEntry, cdx6500CfgGeneralGroup=cdx6500CfgGeneralGroup, cdxProductSpecific=cdxProductSpecific, cdx6500TdmClkPriority=cdx6500TdmClkPriority, tdmClkRegisteredTDMEntry=tdmClkRegisteredTDMEntry, cdx6500Configuration=cdx6500Configuration, tdmClkRegisteredTDMEntryNumber=tdmClkRegisteredTDMEntryNumber, DisplayString=DisplayString, cdx6500StatOtherStatsGroup=cdx6500StatOtherStatsGroup, tdmClkStatus=tdmClkStatus, cdx6500TdmClkEntryNumber=cdx6500TdmClkEntryNumber, cdx6500Statistics=cdx6500Statistics, cdx6500STTdmClkGroup=cdx6500STTdmClkGroup, cdx6500=cdx6500, tdmClkRegisteredTDMTable=tdmClkRegisteredTDMTable, tdmClkRegisteredTDM=tdmClkRegisteredTDM, codex=codex)
