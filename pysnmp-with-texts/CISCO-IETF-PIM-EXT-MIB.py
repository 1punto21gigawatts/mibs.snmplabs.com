#
# PySNMP MIB module CISCO-IETF-PIM-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-IETF-PIM-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:00:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
cPimNbrIfIndex, cPimNbrAddressType, cPimCRPEntry, cPimInetMRouteEntry, cPimInetMRouteNextHopEntry, cPimIfEntry, cPimNbrEntry, cPimNbrAddress, cPimIfStatus = mibBuilder.importSymbols("CISCO-IETF-PIM-MIB", "cPimNbrIfIndex", "cPimNbrAddressType", "cPimCRPEntry", "cPimInetMRouteEntry", "cPimInetMRouteNextHopEntry", "cPimIfEntry", "cPimNbrEntry", "cPimNbrAddress", "cPimIfStatus")
cpimRPMappingChangeType, = mibBuilder.importSymbols("CISCO-PIM-MIB", "cpimRPMappingChangeType")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
IANAipMRouteProtocol, = mibBuilder.importSymbols("IANA-RTPROTO-MIB", "IANAipMRouteProtocol")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddress, InetAddressType, InetAddressPrefixLength = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType", "InetAddressPrefixLength")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, MibIdentifier, Unsigned32, Bits, iso, Counter64, ObjectIdentity, TimeTicks, Counter32, IpAddress, ModuleIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "MibIdentifier", "Unsigned32", "Bits", "iso", "Counter64", "ObjectIdentity", "TimeTicks", "Counter32", "IpAddress", "ModuleIdentity", "NotificationType")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
ciscoIetfPimExtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 120))
ciscoIetfPimExtMIB.setRevisions(('2014-06-12 00:00', '2006-08-25 00:00', '2005-02-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoIetfPimExtMIB.setRevisionsDescriptions(('Remove the range for cpimExtNbrGenId.', 'Added ciscoIetfPimExtNotifs, cpimExtInterfaceStateChangeNotifEnabled, cpimExtRPMappingChangeNotifEnabled, ciscoIetfPimExtInterfaceUp, ciscoIetfPimExtInterfaceDown, ciscoIetfPimExtRPMappingChange, ciscoIetfPimExtMIBComplianceRev1, ciscoIetfPimExtNotifEnabledGroup, ciscoIetfPimExtNotificationGroup', 'Initial version of this MIB module',))
if mibBuilder.loadTexts: ciscoIetfPimExtMIB.setLastUpdated('201406120000Z')
if mibBuilder.loadTexts: ciscoIetfPimExtMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoIetfPimExtMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 Tel: +1 800 553-NETS E-mail: cs-ipmulticast@cisco.com')
if mibBuilder.loadTexts: ciscoIetfPimExtMIB.setDescription('The MIB module which extends PIM management capabilities defined in CISCO-IETF-PIM-MIB.')
ciscoIetfPimExtNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 120, 0))
ciscoIetfPimExtMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 120, 1))
ciscoPimExt = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1))
cpimExtIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 1), )
if mibBuilder.loadTexts: cpimExtIfTable.setStatus('current')
if mibBuilder.loadTexts: cpimExtIfTable.setDescription("The (conceptual) table listing the router's PIM interfaces. IGMP and PIM are enabled on all interfaces listed in this table. This table is augmented to cPimIfTable")
cpimExtIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 1, 1), )
cPimIfEntry.registerAugmentions(("CISCO-IETF-PIM-EXT-MIB", "cpimExtIfEntry"))
cpimExtIfEntry.setIndexNames(*cPimIfEntry.getIndexNames())
if mibBuilder.loadTexts: cpimExtIfEntry.setStatus('current')
if mibBuilder.loadTexts: cpimExtIfEntry.setDescription('An entry (conceptual row) in the cpimExtIfTable. Each entry represents multicast related interface configuration and operational states. An interface can have more than one type of Inet address family enabled and there will be one entry per interface and address family version')
cpimExtIfTrigHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpimExtIfTrigHelloInterval.setStatus('current')
if mibBuilder.loadTexts: cpimExtIfTrigHelloInterval.setDescription('The maximum time before a triggered PIM Hello message is transmitted on this interface.')
cpimExtIfHelloHoldtime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(105)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpimExtIfHelloHoldtime.setStatus('current')
if mibBuilder.loadTexts: cpimExtIfHelloHoldtime.setDescription('The value set in the Holdtime field of Hello messages transmitted on this interface. This should be 3.5 times the value of cPimInterfaceHelloInterval.')
cpimExtIfLanPruneDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 1, 1, 3), Bits().clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone(namedValues=NamedValues(("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpimExtIfLanPruneDelay.setStatus('current')
if mibBuilder.loadTexts: cpimExtIfLanPruneDelay.setDescription('Turns the LAN Prune Delay Option off and on on this interface.')
cpimExtIfPropagationDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767)).clone(500)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpimExtIfPropagationDelay.setStatus('current')
if mibBuilder.loadTexts: cpimExtIfPropagationDelay.setDescription('The value inserted into the LAN Prune Delay field of a LAN Prune Delay option on this interface.')
cpimExtIfOverrideInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(2500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpimExtIfOverrideInterval.setStatus('current')
if mibBuilder.loadTexts: cpimExtIfOverrideInterval.setDescription('The value inserted into the Override Interval field of a LAN Prune Delay option on this interface.')
cpimExtIfGenerationID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 1, 1, 6), Bits().clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone(namedValues=NamedValues(("off", 0)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpimExtIfGenerationID.setReference('RFC3973 Section 4.7.5.3')
if mibBuilder.loadTexts: cpimExtIfGenerationID.setStatus('current')
if mibBuilder.loadTexts: cpimExtIfGenerationID.setDescription('Turns the Generation ID Option off and on on this interface. Generation ID is a random value for the interface and is used to determine neighbor restart')
cpimExtIfJoinPruneHoldtime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(210)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpimExtIfJoinPruneHoldtime.setStatus('current')
if mibBuilder.loadTexts: cpimExtIfJoinPruneHoldtime.setDescription('The value inserted into the Holdtime field of a Join/ Prune message sent on this interface. The value should be 3.5 times cPimInterfaceJoinPruneInterval.')
cpimExtIfGraftRetryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(3)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpimExtIfGraftRetryInterval.setStatus('current')
if mibBuilder.loadTexts: cpimExtIfGraftRetryInterval.setDescription('The interval a PIM router waits for a Graft Ack before resending a Graft on this interface.')
cpimExtIfMaxGraftRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpimExtIfMaxGraftRetries.setStatus('current')
if mibBuilder.loadTexts: cpimExtIfMaxGraftRetries.setDescription('The maximum number of times this router will resend a Graft on this interface.')
cpimExtIfSRTTLThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpimExtIfSRTTLThreshold.setStatus('current')
if mibBuilder.loadTexts: cpimExtIfSRTTLThreshold.setDescription('The Time To Live in a PIM-DM State Refresh message at which it is not forwarded on this interface.')
cpimExtIfLanDelayEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 1, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpimExtIfLanDelayEnabled.setStatus('current')
if mibBuilder.loadTexts: cpimExtIfLanDelayEnabled.setDescription("Evaluates to 'true' if all routers on this interface are using the LAN Prune Delay Option.")
cpimExtIfSRCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpimExtIfSRCapable.setStatus('current')
if mibBuilder.loadTexts: cpimExtIfSRCapable.setDescription("Evaluates to 'true' if all routers on this interface are using the State Refresh Capable Option.")
cpimExtIfDRPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpimExtIfDRPriority.setStatus('current')
if mibBuilder.loadTexts: cpimExtIfDRPriority.setDescription('The Designater Router Priority inserted into the DR priority option on this interface.')
cpimExtIfBidirCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpimExtIfBidirCapable.setStatus('current')
if mibBuilder.loadTexts: cpimExtIfBidirCapable.setDescription("Evaluates to 'true' if all routers on this interface are using the Bidirectional-PIM Capable Option.")
cpimExtIfBSRBorder = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 1, 1, 15), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpimExtIfBSRBorder.setStatus('current')
if mibBuilder.loadTexts: cpimExtIfBSRBorder.setDescription('This object denotes whether this interface acts as the border for all BSR messages for all groups with any scope.')
cpimExtNbrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 2), )
if mibBuilder.loadTexts: cpimExtNbrTable.setStatus('current')
if mibBuilder.loadTexts: cpimExtNbrTable.setDescription("The (conceptual) table listing the router's PIM neighbors. This table is augmented to cPimNbrTable")
cpimExtNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 2, 1), )
cPimNbrEntry.registerAugmentions(("CISCO-IETF-PIM-EXT-MIB", "cpimExtNbrEntry"))
cpimExtNbrEntry.setIndexNames(*cPimNbrEntry.getIndexNames())
if mibBuilder.loadTexts: cpimExtNbrEntry.setStatus('current')
if mibBuilder.loadTexts: cpimExtNbrEntry.setDescription('An entry (conceptual row) in the cpimExtNbrTable. Each entry is indexed using interface ifIndex though which neighbor is reachable and InetAddress that is used for communicating with this neighbor')
cpimExtNbrLANPruneDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpimExtNbrLANPruneDelay.setStatus('current')
if mibBuilder.loadTexts: cpimExtNbrLANPruneDelay.setDescription('The value of LAN Prune Delay field of the LAN Prune Delay Option received from this neighbor. A value of 0 indicates that no LAN Prune Delay Option was received from this neigbor.')
cpimExtNbrOverrideInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpimExtNbrOverrideInterval.setStatus('current')
if mibBuilder.loadTexts: cpimExtNbrOverrideInterval.setDescription('The value of Override Interval field of the LAN Prune Delay Option received from this neighbor. A value of 0 indicates that no LAN Prune Delay Option was received from this neighbor.')
cpimExtNbrTBit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 2, 1, 3), Bits().clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpimExtNbrTBit.setStatus('current')
if mibBuilder.loadTexts: cpimExtNbrTBit.setDescription('The value of the T bit field of the LAN Prune Delay Option received from this neighbor. The T bit specifies the ability of the neighbor to disable join suppression.')
cpimExtNbrSRCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpimExtNbrSRCapable.setStatus('current')
if mibBuilder.loadTexts: cpimExtNbrSRCapable.setDescription("Evaluates to 'true' if this neighbor is using the State Refresh Capable Option.")
cpimExtNbrGenId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpimExtNbrGenId.setStatus('current')
if mibBuilder.loadTexts: cpimExtNbrGenId.setDescription('The value of the GenerationID received in the Hello from the neighbor.')
cpimExtNbrBidirCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpimExtNbrBidirCapable.setStatus('current')
if mibBuilder.loadTexts: cpimExtNbrBidirCapable.setDescription("Evaluates to 'true' if this neighbor is using the Bidirectional-PIM Capable Option.")
cpimExtNbrDRPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpimExtNbrDRPresent.setStatus('current')
if mibBuilder.loadTexts: cpimExtNbrDRPresent.setDescription("Evaluates to 'true' if this neighbor is using the Designated Router Option.")
cpimExtNbrDRPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpimExtNbrDRPriority.setStatus('current')
if mibBuilder.loadTexts: cpimExtNbrDRPriority.setDescription("The value of the Designated Router Priority received in the Hello from the neighbor, if the cpimExtNbrDRPresent is 'true'.")
cpimExtNbrSecAddressTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 3), )
if mibBuilder.loadTexts: cpimExtNbrSecAddressTable.setStatus('current')
if mibBuilder.loadTexts: cpimExtNbrSecAddressTable.setDescription('The (conceptual) table listing the Secondary InetAddresses advertised by each PIM neighbor (on a subset of the rows of the cPimNbrTable defined in CISCO-IETF-PIM-MIB).')
cpimExtNbrSecAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-IETF-PIM-MIB", "cPimNbrIfIndex"), (0, "CISCO-IETF-PIM-MIB", "cPimNbrAddressType"), (0, "CISCO-IETF-PIM-MIB", "cPimNbrAddress"), (0, "CISCO-IETF-PIM-EXT-MIB", "cpimExtNbrSecAddress"))
if mibBuilder.loadTexts: cpimExtNbrSecAddressEntry.setStatus('current')
if mibBuilder.loadTexts: cpimExtNbrSecAddressEntry.setDescription('An entry (conceptual row) in the cPimNbrSecAddressTable. Each entry represents secondary InetAddresses that can be used to reach the corresponding neighbor.')
cpimExtNbrSecAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 3, 1, 1), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpimExtNbrSecAddress.setStatus('current')
if mibBuilder.loadTexts: cpimExtNbrSecAddress.setDescription('The Secondary Inetddress of the PIM Neighbor. Type of InetAddress presented in this object is same as that of cPimNbrAddressType in INDEX clause')
cpimExtNbrSecMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 3, 1, 2), InetAddressPrefixLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpimExtNbrSecMask.setStatus('current')
if mibBuilder.loadTexts: cpimExtNbrSecMask.setDescription('The network mask for the Inet address presented in cpimExtNbrSecAddress')
cpimExtMRouteTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 4), )
if mibBuilder.loadTexts: cpimExtMRouteTable.setStatus('current')
if mibBuilder.loadTexts: cpimExtMRouteTable.setDescription('The (conceptual) table listing PIM-specific information on a subset of the rows of the cIpMRouteTable defined in the IP Multicast MIB. This table is augmented to cPimInetMRouteTable')
cpimExtMRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 4, 1), )
cPimInetMRouteEntry.registerAugmentions(("CISCO-IETF-PIM-EXT-MIB", "cpimExtMRouteEntry"))
cpimExtMRouteEntry.setIndexNames(*cPimInetMRouteEntry.getIndexNames())
if mibBuilder.loadTexts: cpimExtMRouteEntry.setStatus('current')
if mibBuilder.loadTexts: cpimExtMRouteEntry.setDescription('An entry (conceptual row) in the cpimExtIPMRouteTable. There is one entry per entry in the cIpMRouteTable whose incoming interface is running PIM.')
cpimExtMRouteRPFNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 4, 1, 1), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpimExtMRouteRPFNeighbor.setStatus('current')
if mibBuilder.loadTexts: cpimExtMRouteRPFNeighbor.setDescription('The Inetaddress of the current RPF neighbor. If there is an upstream Assert Winner, it will be the RPF neighbor. Otherwise, the RPF neighbor will be the next hop indicated by unicast routing. Type of InetAddress presented in this object is same as that of cIpMRouteAddrType in INDEX')
cpimExtMRouteSourceTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 4, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpimExtMRouteSourceTimer.setStatus('current')
if mibBuilder.loadTexts: cpimExtMRouteSourceTimer.setDescription('The time before this router ceases originating State Refresh messages for this route.')
cpimExtMRouteOriginatorSRTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpimExtMRouteOriginatorSRTTL.setStatus('current')
if mibBuilder.loadTexts: cpimExtMRouteOriginatorSRTTL.setDescription('The TTL used in State Refresh messages originated by this router for this route.')
cpimExtMRouteBidirGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 4, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpimExtMRouteBidirGroup.setStatus('current')
if mibBuilder.loadTexts: cpimExtMRouteBidirGroup.setDescription("Evaluates to 'true' if this entry represents a Bidir-PIM route.")
cpimExtMRouteNextHopTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 5), )
if mibBuilder.loadTexts: cpimExtMRouteNextHopTable.setStatus('current')
if mibBuilder.loadTexts: cpimExtMRouteNextHopTable.setDescription('The (conceptual) table listing PIM-specific information on a subset of the rows of the cIpMRouteNextHopTable defined in the IP Multicast Routing Table MIB - IPMROUTE-MIB. This table is augmented to cPimInetMRouteNextHopTable')
cpimExtMRouteNextHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 5, 1), )
cPimInetMRouteNextHopEntry.registerAugmentions(("CISCO-IETF-PIM-EXT-MIB", "cpimExtMRouteNextHopEntry"))
cpimExtMRouteNextHopEntry.setIndexNames(*cPimInetMRouteNextHopEntry.getIndexNames())
if mibBuilder.loadTexts: cpimExtMRouteNextHopEntry.setStatus('current')
if mibBuilder.loadTexts: cpimExtMRouteNextHopEntry.setDescription('An entry (conceptual row) in the cpimExtMRouteNextHopTable. There is one entry per entry in the cPimInetMRouteNextHopTable whose interface is running PIM and whose cIpMRouteNextHopState is pruned(1).')
cpimExtMRouteNextHopAssertWinner = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 5, 1, 1), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpimExtMRouteNextHopAssertWinner.setStatus('current')
if mibBuilder.loadTexts: cpimExtMRouteNextHopAssertWinner.setDescription('The Inetaddress of the Assert Winner. Type of InetAddress presented in this object is same as that of cIpMRouteNextHopAddrType in INDEX')
cpimExtMRouteNextHopAssertTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 5, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpimExtMRouteNextHopAssertTimer.setStatus('current')
if mibBuilder.loadTexts: cpimExtMRouteNextHopAssertTimer.setDescription('The time remaining before the PIM router leaves the current Assert state. A value of 0 indicates that the router is in the No Info state.')
cpimExtMRouteNextHopAssertMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 5, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpimExtMRouteNextHopAssertMetric.setStatus('current')
if mibBuilder.loadTexts: cpimExtMRouteNextHopAssertMetric.setDescription('The metric advertised by the Assert Winner.')
cpimExtMRouteNextHopAsrtMtrcPref = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 5, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpimExtMRouteNextHopAsrtMtrcPref.setStatus('current')
if mibBuilder.loadTexts: cpimExtMRouteNextHopAsrtMtrcPref.setDescription('The metric preference advertised by the Assert Winner.')
cpimExtMRouteNextHopJoinPruneTmr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 5, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpimExtMRouteNextHopJoinPruneTmr.setStatus('current')
if mibBuilder.loadTexts: cpimExtMRouteNextHopJoinPruneTmr.setDescription('The time remaining before the PIM router reverts to default operation on this interface. PIM-SM will cease forwarding, PIM-DM will resume forwarding.')
cpimExtBidirDFTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 6), )
if mibBuilder.loadTexts: cpimExtBidirDFTable.setStatus('current')
if mibBuilder.loadTexts: cpimExtBidirDFTable.setDescription('The (conceptual) table listing the Per-RP DF (Designated Forwarder) Election state for each interface for all the RPs in Bidir mode.')
cpimExtBidirDFEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 6, 1), ).setIndexNames((0, "CISCO-IETF-PIM-EXT-MIB", "cpimExtBidirDFRPAddressType"), (0, "CISCO-IETF-PIM-EXT-MIB", "cpimExtBidirDFRPAddress"), (0, "CISCO-IETF-PIM-EXT-MIB", "cpimExtBidirDFIfIndex"))
if mibBuilder.loadTexts: cpimExtBidirDFEntry.setStatus('current')
if mibBuilder.loadTexts: cpimExtBidirDFEntry.setDescription('An entry (conceptual row) in the cpimExtBidirDFTable. Each entry represents details about DF winner for each RP per interface.')
cpimExtBidirDFIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 6, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cpimExtBidirDFIfIndex.setStatus('current')
if mibBuilder.loadTexts: cpimExtBidirDFIfIndex.setDescription('The value of ifIndex for the interface for which the DF state is being maintained.')
cpimExtBidirDFRPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 6, 1, 2), InetAddressType())
if mibBuilder.loadTexts: cpimExtBidirDFRPAddressType.setStatus('current')
if mibBuilder.loadTexts: cpimExtBidirDFRPAddressType.setDescription('The type of Inetaddress of the RP for which the DF state is being maintained.')
cpimExtBidirDFRPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 6, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: cpimExtBidirDFRPAddress.setStatus('current')
if mibBuilder.loadTexts: cpimExtBidirDFRPAddress.setDescription('The Inetaddress of the RP for which the DF state is being maintained. Type of InetAddress presented in this object is same as that of cpimExtBidirDFRPAddressType in INDEX clause')
cpimExtBidirDFWinnerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 6, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpimExtBidirDFWinnerAddress.setStatus('current')
if mibBuilder.loadTexts: cpimExtBidirDFWinnerAddress.setDescription('The Inetaddress of the winner of the DF Election process. Type of InetAddress presented in this object is same as that of cpimExtBidirDFRPAddressType in INDEX clause')
cpimExtBidirDFWinnerUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 6, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpimExtBidirDFWinnerUptime.setStatus('current')
if mibBuilder.loadTexts: cpimExtBidirDFWinnerUptime.setDescription('The time interval for which this DF is being used.')
cpimExtBidirDFWnrMtrcPref = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 6, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpimExtBidirDFWnrMtrcPref.setStatus('current')
if mibBuilder.loadTexts: cpimExtBidirDFWnrMtrcPref.setDescription('The metric preference advertised by the DF Winner.')
cpimExtBidirDFWinnerMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 6, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpimExtBidirDFWinnerMetric.setStatus('current')
if mibBuilder.loadTexts: cpimExtBidirDFWinnerMetric.setDescription('The metric advertised by the DF Winner.')
cpimExtBidirDFState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("dfOffer", 1), ("dfLose", 2), ("dfWinner", 3), ("dfBackoff", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpimExtBidirDFState.setStatus('current')
if mibBuilder.loadTexts: cpimExtBidirDFState.setDescription('The state of this interface wrt DF-Election wrt this RP. unknown (0) indicates that there is no election state on the interface. dfOffer (1) indicates the initial election state in which the winner offers its metrics thinking it might eventually become winner. dfLose (2) indicates the state in which the router knows that there either is a different election winner or that no router on the link has a path to the RP. dfWinner (3) indicates the router is the acting DF without any contest. dfBackoff (4) indicates the router is the acting DF but another router has made a bid to take over.')
cpimExtBidirDFStateTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 6, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpimExtBidirDFStateTimer.setStatus('current')
if mibBuilder.loadTexts: cpimExtBidirDFStateTimer.setDescription('The time remaining before for which the router expires the current DF state represented by cpimExtBidirDFState.')
cpimExtRPSetTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 7), )
if mibBuilder.loadTexts: cpimExtRPSetTable.setStatus('current')
if mibBuilder.loadTexts: cpimExtRPSetTable.setDescription('The (conceptual) table listing PIM information for available Rendezvous Points (RPs) for IP multicast groups. An entry is learnt from one of {static, bsr, embedded} methods, as defined by the cpimExtRPSetType object. When the cpimExtRPSetType object has a value {static}, the entry is a mapping provided by user-configuration. A value of {embedded} indicates that the RP-address is embedded in the Group-address. When the value is {bsr}, this entry is obtained from received Candidate-RP-Advertisements when the local router is the BSR, and is obtained from received RP-Set messages when the local router is not the BSR.')
cpimExtRPSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 7, 1), ).setIndexNames((0, "CISCO-IETF-PIM-EXT-MIB", "cpimExtRPSetComponent"), (0, "CISCO-IETF-PIM-EXT-MIB", "cpimExtRPSetAddrType"), (0, "CISCO-IETF-PIM-EXT-MIB", "cpimExtRPSetGroupAddress"), (0, "CISCO-IETF-PIM-EXT-MIB", "cpimExtRPSetGroupMask"), (0, "CISCO-IETF-PIM-EXT-MIB", "cpimExtRPSetType"), (0, "CISCO-IETF-PIM-EXT-MIB", "cpimExtRPSetProtocol"), (0, "CISCO-IETF-PIM-EXT-MIB", "cpimExtRPSetAddress"))
if mibBuilder.loadTexts: cpimExtRPSetEntry.setStatus('current')
if mibBuilder.loadTexts: cpimExtRPSetEntry.setDescription('An entry (conceptual row) in the cpimExtRPSetTable. Each entry represents details about RP per multicast group and how it is learned')
cpimExtRPSetComponent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: cpimExtRPSetComponent.setStatus('current')
if mibBuilder.loadTexts: cpimExtRPSetComponent.setDescription('A number uniquely identifying the component. Each protocol instance connected to a separate domain should have a different index value.')
cpimExtRPSetAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 7, 1, 2), InetAddressType())
if mibBuilder.loadTexts: cpimExtRPSetAddrType.setStatus('current')
if mibBuilder.loadTexts: cpimExtRPSetAddrType.setDescription('The type of Inetaddress of the IP multicast group.')
cpimExtRPSetGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 7, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: cpimExtRPSetGroupAddress.setStatus('current')
if mibBuilder.loadTexts: cpimExtRPSetGroupAddress.setDescription('The IP multicast group address which, when combined with cpimExtRPSetGroupMask, gives the group prefix for which this entry contains information about the RP. Type of InetAddress presented in this object is same as that of cpimExtRPSetAddrType in INDEX clause')
cpimExtRPSetGroupMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 7, 1, 4), InetAddressPrefixLength())
if mibBuilder.loadTexts: cpimExtRPSetGroupMask.setStatus('current')
if mibBuilder.loadTexts: cpimExtRPSetGroupMask.setDescription('The multicast group address mask which, when combined with cpimExtRPSetGroupAddress, gives the group prefix for which this entry contains information about the RP.')
cpimExtRPSetType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("static", 2), ("bsr", 3), ("embedded", 4), ("autorp", 5))))
if mibBuilder.loadTexts: cpimExtRPSetType.setStatus('current')
if mibBuilder.loadTexts: cpimExtRPSetType.setDescription("This object indicates how the RP was learnt, 'static' means static (2) indicates entry was learnt from local configuration. bsr (3) indicates entry was learnt from BSR RP discovery protocol. embedded (4) indicates entry was learnt from Embedded-RP mechanism where the RP-Address is embedded in the Multicast Group address. autorp (5) indicates entry was learnt from Auto-Rendezvous-Point protocol, a Cisco proprietary protocol to dynamically distribute Group to RP mappings within an autonomous system.")
cpimExtRPSetProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 7, 1, 6), IANAipMRouteProtocol())
if mibBuilder.loadTexts: cpimExtRPSetProtocol.setStatus('current')
if mibBuilder.loadTexts: cpimExtRPSetProtocol.setDescription('The multicast routing protocol')
cpimExtRPSetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 7, 1, 7), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), )))
if mibBuilder.loadTexts: cpimExtRPSetAddress.setStatus('current')
if mibBuilder.loadTexts: cpimExtRPSetAddress.setDescription('The Inet Address of the RP. Type of InetAddress presented in this object is same as that of cpimExtRPSetAddrType in INDEX clause')
cpimExtRPSetHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 7, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpimExtRPSetHoldTime.setStatus('current')
if mibBuilder.loadTexts: cpimExtRPSetHoldTime.setDescription("The holdtime of the RP entry. In case of 'bsr' cpimExtRPSetType, if the local router is not the BSR, this value is 0.")
cpimExtRPSetExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 7, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpimExtRPSetExpiryTime.setStatus('current')
if mibBuilder.loadTexts: cpimExtRPSetExpiryTime.setDescription("The minimum time remaining before the RP denoted by this entry will be declared down. In case of 'bsr' cpimExtRPSetType, if the local router is not the BSR, this value is 0.")
cpimExtRPSetPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpimExtRPSetPriority.setStatus('current')
if mibBuilder.loadTexts: cpimExtRPSetPriority.setDescription("The RP-priority in the C-RP Advertisements or the RP-Set messages from the BSR (with value 0 denoting the highest priority, default 192). Note that this field is valid only when cPimRPSetType is 'bsr', and for other types, this value will be -1.")
cpimExtRPSetRPActive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 7, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpimExtRPSetRPActive.setStatus('current')
if mibBuilder.loadTexts: cpimExtRPSetRPActive.setDescription("Evaluates to 'true' if the RP in this entry is the currently active RP for the group-range.")
cpimExtCRPTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 8), )
if mibBuilder.loadTexts: cpimExtCRPTable.setStatus('current')
if mibBuilder.loadTexts: cpimExtCRPTable.setDescription('The (conceptual) table listing the IP multicast groups for which the local router is to advertise itself as a Candidate-RP when the value of cPimComponentCRPHoldTime is non-zero. If this table is empty, then the local router will advertise itself as a Candidate-RP for all groups (providing the value of cPimComponentCRPHoldTime is non- zero).')
cpimExtCRPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 8, 1), )
cPimCRPEntry.registerAugmentions(("CISCO-IETF-PIM-EXT-MIB", "cpimExtCRPEntry"))
cpimExtCRPEntry.setIndexNames(*cPimCRPEntry.getIndexNames())
if mibBuilder.loadTexts: cpimExtCRPEntry.setStatus('current')
if mibBuilder.loadTexts: cpimExtCRPEntry.setDescription('An entry (conceptual row) in the cpimExtCandidateRPTable. Each entry represents Bidir state of Candidate-RP')
cpimExtCRPBidir = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 8, 1, 1), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpimExtCRPBidir.setStatus('current')
if mibBuilder.loadTexts: cpimExtCRPBidir.setDescription('The Group for which this RP is advertised is a PIM-Bidir group or not.')
cpimExtSourceLifetime = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(210)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpimExtSourceLifetime.setStatus('current')
if mibBuilder.loadTexts: cpimExtSourceLifetime.setDescription('The maximum time this router will continue to originate State Refresh messages in the absence of traffic from the source itself.')
cpimExtStateRefreshInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpimExtStateRefreshInterval.setStatus('current')
if mibBuilder.loadTexts: cpimExtStateRefreshInterval.setDescription('The interval between successive State Refresh messages originated by this router.')
cpimExtStateRefreshLimitInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 11), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpimExtStateRefreshLimitInterval.setStatus('current')
if mibBuilder.loadTexts: cpimExtStateRefreshLimitInterval.setDescription('This router will not forward successive State Refresh messages received at less than this interval.')
cpimExtStateRefreshTimeToLive = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpimExtStateRefreshTimeToLive.setStatus('current')
if mibBuilder.loadTexts: cpimExtStateRefreshTimeToLive.setDescription("The TTL to be used by this router's originated State Refresh messages if the data packet's TTL is not recorded.")
cpimExtInterfaceStateChangeNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 13), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpimExtInterfaceStateChangeNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: cpimExtInterfaceStateChangeNotifEnabled.setDescription('An indication of whether ciscoIetfPimExtInterfaceUp and ciscoIetfPimExtInterfaceDown notifications are enabled.')
cpimExtRPMappingChangeNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 120, 1, 1, 14), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpimExtRPMappingChangeNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: cpimExtRPMappingChangeNotifEnabled.setDescription('An indication of whether the ciscoIetfPimExtRPMappingChange notification is enabled.')
ciscoIetfPimExtInterfaceUp = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 120, 0, 1)).setObjects(("CISCO-IETF-PIM-MIB", "cPimIfStatus"))
if mibBuilder.loadTexts: ciscoIetfPimExtInterfaceUp.setStatus('current')
if mibBuilder.loadTexts: ciscoIetfPimExtInterfaceUp.setDescription("A ciscoIetfPimExtInterfaceUp notification signifies the restoration of a PIM interface. This notification should be generated whenever cPimIfStatus transitions into the 'active' state. cPimIfStatus identifies the interface which was involved in the generation of this notification.")
ciscoIetfPimExtInterfaceDown = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 120, 0, 2)).setObjects(("CISCO-IETF-PIM-MIB", "cPimIfStatus"))
if mibBuilder.loadTexts: ciscoIetfPimExtInterfaceDown.setStatus('current')
if mibBuilder.loadTexts: ciscoIetfPimExtInterfaceDown.setDescription('A ciscoIetfPimExtInterfaceDown notification signifies the loss of a PIM interface. This notification should be generated whenever an entry is about to be deleted from the cPimIfTable. cPimIfStatus identifies the interface which was involved in the generation of this notification.')
ciscoIetfPimExtRPMappingChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 120, 0, 3)).setObjects(("CISCO-IETF-PIM-EXT-MIB", "cpimExtRPSetHoldTime"), ("CISCO-PIM-MIB", "cpimRPMappingChangeType"))
if mibBuilder.loadTexts: ciscoIetfPimExtRPMappingChange.setStatus('current')
if mibBuilder.loadTexts: ciscoIetfPimExtRPMappingChange.setDescription("A ciscoIetfPimExtRPMappingChange notification signifies a change in the RP Mapping on the device in question. A change in RP Mapping could be because of addition of new entries to the RP Mapping cache, deletion of existing entries, or a modification to an existing mapping. The type of change is indicated by cpimRPMappingChangeType. cpimExtRPSetHoldTime is used to identify the row in the cpimExtRPSetTable that is responsible for the generation of this notification. In case of modification to existing entries, a notification should be generated once before the modification (with cpimRPMappingChangeType set to 'modifiedOldMapping') and once after modification (with cpimRPMappingChangeType set to 'modifiedNewMapping'). NOTE: A high frequency of RP Mapping change could result in a large number of ciscoIetfPimExtRPMappingChange notifications being generated. Hence, in environments where the possibility of a high frequency of RP Mapping change exists, enable this notification with utmost care.")
ciscoIetfPimExtMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 120, 2))
ciscoIetfPimExtMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 120, 2, 1))
ciscoIetfPimExtMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 120, 2, 2))
ciscoIetfPimExtMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 120, 2, 1, 1)).setObjects(("CISCO-IETF-PIM-EXT-MIB", "ciscoIetfPimExtGeneralGroup"), ("CISCO-IETF-PIM-EXT-MIB", "ciscoIetfPimExtNbrGroup"), ("CISCO-IETF-PIM-EXT-MIB", "ciscoIetfPimExtNextHopGroup"), ("CISCO-IETF-PIM-EXT-MIB", "ciscoIetfPimExtBidirGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIetfPimExtMIBCompliance = ciscoIetfPimExtMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoIetfPimExtMIBCompliance.setDescription('The compliance statement for routers running PIM and implementing the PIM MIB.')
ciscoIetfPimExtMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 120, 2, 1, 2)).setObjects(("CISCO-IETF-PIM-EXT-MIB", "ciscoIetfPimExtGeneralGroup"), ("CISCO-IETF-PIM-EXT-MIB", "ciscoIetfPimExtNbrGroup"), ("CISCO-IETF-PIM-EXT-MIB", "ciscoIetfPimExtNextHopGroup"), ("CISCO-IETF-PIM-EXT-MIB", "ciscoIetfPimExtBidirGroup"), ("CISCO-IETF-PIM-EXT-MIB", "ciscoIetfPimExtNotificationGroup"), ("CISCO-IETF-PIM-EXT-MIB", "ciscoIetfPimExtNotifEnabledGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIetfPimExtMIBComplianceRev1 = ciscoIetfPimExtMIBComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoIetfPimExtMIBComplianceRev1.setDescription('The compliance statement for routers running PIM and implementing the PIM MIB.')
ciscoIetfPimExtGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 120, 2, 2, 1)).setObjects(("CISCO-IETF-PIM-EXT-MIB", "cpimExtIfTrigHelloInterval"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtIfHelloHoldtime"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtIfLanPruneDelay"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtIfPropagationDelay"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtIfOverrideInterval"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtIfGenerationID"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtIfJoinPruneHoldtime"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtIfGraftRetryInterval"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtIfMaxGraftRetries"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtIfSRTTLThreshold"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtIfLanDelayEnabled"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtIfSRCapable"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtIfDRPriority"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtIfBSRBorder"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtMRouteRPFNeighbor"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtMRouteSourceTimer"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtMRouteOriginatorSRTTL"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtRPSetHoldTime"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtRPSetExpiryTime"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtRPSetPriority"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtRPSetRPActive"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtSourceLifetime"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtStateRefreshInterval"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtStateRefreshLimitInterval"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtStateRefreshTimeToLive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIetfPimExtGeneralGroup = ciscoIetfPimExtGeneralGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIetfPimExtGeneralGroup.setDescription('A collection of objects to support management of PIM routers')
ciscoIetfPimExtNbrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 120, 2, 2, 2)).setObjects(("CISCO-IETF-PIM-EXT-MIB", "cpimExtNbrLANPruneDelay"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtNbrOverrideInterval"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtNbrTBit"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtNbrSRCapable"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtNbrGenId"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtNbrDRPresent"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtNbrDRPriority"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtNbrSecAddress"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtNbrSecMask"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIetfPimExtNbrGroup = ciscoIetfPimExtNbrGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIetfPimExtNbrGroup.setDescription('A collection of objects to support management of PIM neighbors')
ciscoIetfPimExtNextHopGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 120, 2, 2, 3)).setObjects(("CISCO-IETF-PIM-EXT-MIB", "cpimExtMRouteNextHopAssertWinner"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtMRouteNextHopAssertTimer"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtMRouteNextHopAssertMetric"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtMRouteNextHopAsrtMtrcPref"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtMRouteNextHopJoinPruneTmr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIetfPimExtNextHopGroup = ciscoIetfPimExtNextHopGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIetfPimExtNextHopGroup.setDescription('A collection of optional objects to provide per-next hop information for diagnostic purposes.')
ciscoIetfPimExtBidirGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 120, 2, 2, 4)).setObjects(("CISCO-IETF-PIM-EXT-MIB", "cpimExtBidirDFWinnerAddress"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtBidirDFWinnerUptime"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtBidirDFWnrMtrcPref"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtBidirDFWinnerMetric"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtBidirDFState"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtBidirDFStateTimer"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtIfBidirCapable"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtNbrBidirCapable"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtMRouteBidirGroup"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtCRPBidir"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIetfPimExtBidirGroup = ciscoIetfPimExtBidirGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIetfPimExtBidirGroup.setDescription('A collection of objects to support management of RPs in Bidir mode')
ciscoIetfPimExtNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 10, 120, 2, 2, 5)).setObjects(("CISCO-IETF-PIM-EXT-MIB", "ciscoIetfPimExtInterfaceUp"), ("CISCO-IETF-PIM-EXT-MIB", "ciscoIetfPimExtInterfaceDown"), ("CISCO-IETF-PIM-EXT-MIB", "ciscoIetfPimExtRPMappingChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIetfPimExtNotificationGroup = ciscoIetfPimExtNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIetfPimExtNotificationGroup.setDescription('A collection of notification objects to support PIM interface up, PIM interface down, PIM RP mapping change events.')
ciscoIetfPimExtNotifEnabledGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 120, 2, 2, 6)).setObjects(("CISCO-IETF-PIM-EXT-MIB", "cpimExtInterfaceStateChangeNotifEnabled"), ("CISCO-IETF-PIM-EXT-MIB", "cpimExtRPMappingChangeNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIetfPimExtNotifEnabledGroup = ciscoIetfPimExtNotifEnabledGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIetfPimExtNotifEnabledGroup.setDescription('A collection of objects to indicate whether PIM interface up, PIM interface down, PIM RP mapping change notifications are enabled.')
mibBuilder.exportSymbols("CISCO-IETF-PIM-EXT-MIB", cpimExtInterfaceStateChangeNotifEnabled=cpimExtInterfaceStateChangeNotifEnabled, cpimExtNbrTBit=cpimExtNbrTBit, ciscoIetfPimExtNotifEnabledGroup=ciscoIetfPimExtNotifEnabledGroup, cpimExtNbrEntry=cpimExtNbrEntry, ciscoIetfPimExtMIBCompliance=ciscoIetfPimExtMIBCompliance, cpimExtIfLanPruneDelay=cpimExtIfLanPruneDelay, cpimExtStateRefreshInterval=cpimExtStateRefreshInterval, cpimExtMRouteNextHopAsrtMtrcPref=cpimExtMRouteNextHopAsrtMtrcPref, cpimExtNbrDRPriority=cpimExtNbrDRPriority, cpimExtMRouteNextHopTable=cpimExtMRouteNextHopTable, cpimExtRPSetHoldTime=cpimExtRPSetHoldTime, cpimExtNbrLANPruneDelay=cpimExtNbrLANPruneDelay, cpimExtBidirDFRPAddress=cpimExtBidirDFRPAddress, cpimExtNbrSRCapable=cpimExtNbrSRCapable, ciscoIetfPimExtMIBObjects=ciscoIetfPimExtMIBObjects, cpimExtMRouteNextHopEntry=cpimExtMRouteNextHopEntry, cpimExtMRouteNextHopAssertMetric=cpimExtMRouteNextHopAssertMetric, cpimExtRPSetExpiryTime=cpimExtRPSetExpiryTime, ciscoIetfPimExtNotifs=ciscoIetfPimExtNotifs, cpimExtIfBidirCapable=cpimExtIfBidirCapable, cpimExtRPSetRPActive=cpimExtRPSetRPActive, ciscoIetfPimExtBidirGroup=ciscoIetfPimExtBidirGroup, cpimExtRPSetGroupAddress=cpimExtRPSetGroupAddress, cpimExtRPSetPriority=cpimExtRPSetPriority, ciscoIetfPimExtGeneralGroup=ciscoIetfPimExtGeneralGroup, ciscoPimExt=ciscoPimExt, cpimExtMRouteOriginatorSRTTL=cpimExtMRouteOriginatorSRTTL, cpimExtSourceLifetime=cpimExtSourceLifetime, cpimExtIfSRTTLThreshold=cpimExtIfSRTTLThreshold, cpimExtBidirDFEntry=cpimExtBidirDFEntry, cpimExtMRouteRPFNeighbor=cpimExtMRouteRPFNeighbor, ciscoIetfPimExtNextHopGroup=ciscoIetfPimExtNextHopGroup, cpimExtRPSetAddrType=cpimExtRPSetAddrType, cpimExtMRouteBidirGroup=cpimExtMRouteBidirGroup, cpimExtRPSetEntry=cpimExtRPSetEntry, cpimExtBidirDFWinnerAddress=cpimExtBidirDFWinnerAddress, cpimExtIfPropagationDelay=cpimExtIfPropagationDelay, ciscoIetfPimExtMIB=ciscoIetfPimExtMIB, ciscoIetfPimExtNotificationGroup=ciscoIetfPimExtNotificationGroup, cpimExtNbrOverrideInterval=cpimExtNbrOverrideInterval, cpimExtIfTable=cpimExtIfTable, ciscoIetfPimExtMIBGroups=ciscoIetfPimExtMIBGroups, cpimExtIfHelloHoldtime=cpimExtIfHelloHoldtime, cpimExtRPSetType=cpimExtRPSetType, cpimExtMRouteNextHopAssertWinner=cpimExtMRouteNextHopAssertWinner, ciscoIetfPimExtInterfaceDown=ciscoIetfPimExtInterfaceDown, cpimExtBidirDFRPAddressType=cpimExtBidirDFRPAddressType, cpimExtCRPEntry=cpimExtCRPEntry, cpimExtIfGraftRetryInterval=cpimExtIfGraftRetryInterval, cpimExtRPSetGroupMask=cpimExtRPSetGroupMask, PYSNMP_MODULE_ID=ciscoIetfPimExtMIB, cpimExtBidirDFTable=cpimExtBidirDFTable, cpimExtMRouteNextHopAssertTimer=cpimExtMRouteNextHopAssertTimer, ciscoIetfPimExtRPMappingChange=ciscoIetfPimExtRPMappingChange, cpimExtMRouteNextHopJoinPruneTmr=cpimExtMRouteNextHopJoinPruneTmr, cpimExtNbrSecAddressEntry=cpimExtNbrSecAddressEntry, cpimExtMRouteSourceTimer=cpimExtMRouteSourceTimer, cpimExtCRPTable=cpimExtCRPTable, cpimExtIfEntry=cpimExtIfEntry, cpimExtRPMappingChangeNotifEnabled=cpimExtRPMappingChangeNotifEnabled, cpimExtStateRefreshLimitInterval=cpimExtStateRefreshLimitInterval, cpimExtIfLanDelayEnabled=cpimExtIfLanDelayEnabled, cpimExtIfTrigHelloInterval=cpimExtIfTrigHelloInterval, cpimExtIfMaxGraftRetries=cpimExtIfMaxGraftRetries, ciscoIetfPimExtMIBConformance=ciscoIetfPimExtMIBConformance, cpimExtRPSetTable=cpimExtRPSetTable, cpimExtStateRefreshTimeToLive=cpimExtStateRefreshTimeToLive, ciscoIetfPimExtNbrGroup=ciscoIetfPimExtNbrGroup, cpimExtBidirDFIfIndex=cpimExtBidirDFIfIndex, cpimExtBidirDFWnrMtrcPref=cpimExtBidirDFWnrMtrcPref, cpimExtNbrDRPresent=cpimExtNbrDRPresent, cpimExtNbrSecAddress=cpimExtNbrSecAddress, cpimExtCRPBidir=cpimExtCRPBidir, ciscoIetfPimExtMIBCompliances=ciscoIetfPimExtMIBCompliances, cpimExtMRouteEntry=cpimExtMRouteEntry, ciscoIetfPimExtMIBComplianceRev1=ciscoIetfPimExtMIBComplianceRev1, ciscoIetfPimExtInterfaceUp=ciscoIetfPimExtInterfaceUp, cpimExtIfGenerationID=cpimExtIfGenerationID, cpimExtNbrGenId=cpimExtNbrGenId, cpimExtRPSetComponent=cpimExtRPSetComponent, cpimExtBidirDFWinnerUptime=cpimExtBidirDFWinnerUptime, cpimExtNbrTable=cpimExtNbrTable, cpimExtBidirDFState=cpimExtBidirDFState, cpimExtNbrSecMask=cpimExtNbrSecMask, cpimExtIfOverrideInterval=cpimExtIfOverrideInterval, cpimExtIfBSRBorder=cpimExtIfBSRBorder, cpimExtBidirDFStateTimer=cpimExtBidirDFStateTimer, cpimExtRPSetAddress=cpimExtRPSetAddress, cpimExtMRouteTable=cpimExtMRouteTable, cpimExtIfJoinPruneHoldtime=cpimExtIfJoinPruneHoldtime, cpimExtIfSRCapable=cpimExtIfSRCapable, cpimExtNbrBidirCapable=cpimExtNbrBidirCapable, cpimExtNbrSecAddressTable=cpimExtNbrSecAddressTable, cpimExtRPSetProtocol=cpimExtRPSetProtocol, cpimExtBidirDFWinnerMetric=cpimExtBidirDFWinnerMetric, cpimExtIfDRPriority=cpimExtIfDRPriority)
