#
# PySNMP MIB module HP-SYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-SYSTEM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:36:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
hpProcurveCommon, = mibBuilder.importSymbols("HP-BASE-MIB", "hpProcurveCommon")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Integer32, ModuleIdentity, Counter32, iso, IpAddress, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Unsigned32, Bits, TimeTicks, ObjectIdentity, Gauge32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ModuleIdentity", "Counter32", "iso", "IpAddress", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Unsigned32", "Bits", "TimeTicks", "ObjectIdentity", "Gauge32", "NotificationType")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
hpProcurveSystem = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1))
hpProcurveSystem.setRevisions(('2005-02-01 14:55',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpProcurveSystem.setRevisionsDescriptions(('Modified to reflect new OID hierarchy for HP J8162A XL Access Controller Module.',))
if mibBuilder.loadTexts: hpProcurveSystem.setLastUpdated('200502011455Z')
if mibBuilder.loadTexts: hpProcurveSystem.setOrganization('Hewlett Packard Company, ProCurve Networking Business')
if mibBuilder.loadTexts: hpProcurveSystem.setContactInfo('Hewlett Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpProcurveSystem.setDescription('This MIB module describes objects for basic management of devices in the HP Procurve product line.')
hpProcurveSysMib = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 1))
hpSystemMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 2))
hpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 2, 1))
hpStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 2, 2))
hpNotificationsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 2, 3))
hpProductDescription = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpProductDescription.setStatus('current')
if mibBuilder.loadTexts: hpProductDescription.setDescription('Textual Description of the HW product')
hpProductHWVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpProductHWVersion.setStatus('current')
if mibBuilder.loadTexts: hpProductHWVersion.setDescription('HW version of the product')
hpProductSWVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpProductSWVersion.setStatus('current')
if mibBuilder.loadTexts: hpProductSWVersion.setDescription('SW version of the product')
hpProductSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpProductSerialNumber.setStatus('current')
if mibBuilder.loadTexts: hpProductSerialNumber.setDescription('Serial Number of the product')
hpProductLastChange = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpProductLastChange.setStatus('current')
if mibBuilder.loadTexts: hpProductLastChange.setDescription('Date and time of last configuration change')
hpCpuTemperature = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpCpuTemperature.setStatus('current')
if mibBuilder.loadTexts: hpCpuTemperature.setDescription('Current temperature in degrees centigrade of the CPU.')
hpPowerSupplyTemperature = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpPowerSupplyTemperature.setStatus('deprecated')
if mibBuilder.loadTexts: hpPowerSupplyTemperature.setDescription('Current temperature in degrees centigrade of the power supply.')
hpChassisTemperature = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpChassisTemperature.setStatus('current')
if mibBuilder.loadTexts: hpChassisTemperature.setDescription('Current temperature in degrees centigrade of the mother board. Note: this is not the ambient temperature of the box.')
hpFanStatusTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 1, 9), )
if mibBuilder.loadTexts: hpFanStatusTable.setStatus('current')
if mibBuilder.loadTexts: hpFanStatusTable.setDescription('Table of operational status of all internal cooling fans.')
hpFanStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 1, 9, 1), ).setIndexNames((0, "HP-SYSTEM-MIB", "hpFanNumber"))
if mibBuilder.loadTexts: hpFanStatusEntry.setStatus('current')
if mibBuilder.loadTexts: hpFanStatusEntry.setDescription('Entry in table of all internal cooling fans.')
hpFanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cpu", 1), ("power", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFanNumber.setStatus('current')
if mibBuilder.loadTexts: hpFanNumber.setDescription('Identifier of cooling fan, numbered to represent what hardware the fan is supposed to be cooling.')
hpFanOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFanOperational.setStatus('current')
if mibBuilder.loadTexts: hpFanOperational.setDescription('Operational status of a cooling fan.')
hpFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 1, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFanSpeed.setStatus('current')
if mibBuilder.loadTexts: hpFanSpeed.setDescription('Speed of the fan in RPM.')
hpName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpName.setStatus('current')
if mibBuilder.loadTexts: hpName.setDescription('A textual string containing information about the device. For instance, this string reflects the setting of the HP J8162A XL Access Controller Module Name available on the Administrative Web based User Interface. If no HP J8162A XL Access Controller Module name is entered, this object contains a zero-length string.')
hpSystemID = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSystemID.setStatus('current')
if mibBuilder.loadTexts: hpSystemID.setDescription('The unique identifier for this device, as used by this system, or a master controlling system. For instance, an HP J8162A XL Access Controller Module would report the systemID used by the Access Control Server 740wl to uniquely identify this device.')
hpState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3), ("primary", 4), ("secondary", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpState.setStatus('current')
if mibBuilder.loadTexts: hpState.setDescription('The current state of the device. A HP ProCurve Networking Business device can be configured for standalone operation, Failover (ie with a redundant peer), or for Distribution of configuration from a controlling central system to remote entities. unknown(1) - system Configuration status unknown up(2) - a standalone system is operational. down(3) - a system is not operational. primary(4) - system is running as the primary in a Failover peer configuration. secondary(5) - system is running as the backup in a Failover peer configuration.')
hpDistributionType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unknown", 1), ("rightsPush", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDistributionType.setStatus('current')
if mibBuilder.loadTexts: hpDistributionType.setDescription('The most recent distribution event type on a device. This object will change dynamically based on the most recently triggered distribution event. unknown(1) - the distribution event type none(2) - no distribution event has occurred rightsPush(3) - the central Access Control Server 740wl has triggered a rights push event to remote Access Control Server 740wls.')
hpDistributionStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("succeeded", 2), ("failed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpDistributionStatus.setStatus('current')
if mibBuilder.loadTexts: hpDistributionStatus.setDescription('The most recent distribution event on a device. This object will change dynamically based on the most recently triggered distribution event. unknown(1) - the distribution event status unknown succeeded(2) - no distribution event has succeeded failed(3) - the distribution event failed for some reason.')
hpIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 2, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpIpAddress.setStatus('current')
if mibBuilder.loadTexts: hpIpAddress.setDescription('The administratively assigned IP address associated with the device. This can be assigned statically on the device Console port, or configured via DHCP.')
hpPeerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 2, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpPeerIpAddress.setStatus('current')
if mibBuilder.loadTexts: hpPeerIpAddress.setDescription('The administratively assigned IP address associated with a redundant peer device, configured to work with this device for failover purposes. This can be assigned statically on the device Console port, or configured via DHCP. If the device does not support Failover configuration, or none has been configured, this object will report 0.0.0.0')
hpTechSupportEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 2, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpTechSupportEnabled.setStatus('current')
if mibBuilder.loadTexts: hpTechSupportEnabled.setDescription('This object contains the current setting for the technical support access to the device. A value of true(1) indicates the Technical Support Access has been enabled. A value of false(2) indicates this access has been disabled. Note this object should only report true(2) if HP ProCurve Networking Business Technical Support staff have requested this access to the HP J8162A XL Access Controller Module for troubleshooting purposes.')
hpFailedAdminIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 2, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpFailedAdminIpAddress.setStatus('current')
if mibBuilder.loadTexts: hpFailedAdminIpAddress.setDescription('The IP address associated with the last failed authentication to the Administrative UI. If no Administrator had failed authentication, this object will report 0.0.0.0')
hpNumAccessControllers = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 2, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpNumAccessControllers.setStatus('current')
if mibBuilder.loadTexts: hpNumAccessControllers.setDescription("The number of HP J8162A XL Access Controller Modules known to this system. If this system is an HP J8162A XL Access Controller Module, this value will be 1. Otherwise, this value will be the number of HP J8162A XL Access Controller Modules this system is connected to (i.e. An Access Control Server 740wl connects to multiple HP J8162A XL Access Controller Module's).")
hpNumClients = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 2, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpNumClients.setStatus('current')
if mibBuilder.loadTexts: hpNumClients.setDescription('The total number of active authenticated or unauthenticated clients known to this system. If this device is an HP J8162A XL Access Controller Module, then this object reports the aggregated number of clients across all ports. If this device is a Access Control Server 740wl, it reports all Clients aggregated across all HP J8162A XL Access Controller Modules known to this system.')
hpFailoverNotificationEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 2, 3, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpFailoverNotificationEnabled.setStatus('current')
if mibBuilder.loadTexts: hpFailoverNotificationEnabled.setDescription('This object controls whether a hpFailover notification will be sent in the event of a failover occurrence between a primary and standby system. By default this object is set to false(2) for all systems.')
hpDistributionNotificationEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 2, 3, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpDistributionNotificationEnabled.setStatus('current')
if mibBuilder.loadTexts: hpDistributionNotificationEnabled.setDescription('This object controls whether a hpDistribution notification will be sent in the event of a distribution event between a central and remote systems. By default this object is set to false(2) for all systems.')
hpAdminAuthFailureNotificationEnabled = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 2, 3, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpAdminAuthFailureNotificationEnabled.setStatus('current')
if mibBuilder.loadTexts: hpAdminAuthFailureNotificationEnabled.setDescription('This object controls whether a hpAdminAuthFailure notification will be sent in the event of a failed authentication attempt at the administrator login.')
hpSystemTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 0))
fanDown = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 0, 1)).setObjects(("HP-SYSTEM-MIB", "hpFanNumber"))
if mibBuilder.loadTexts: fanDown.setStatus('current')
if mibBuilder.loadTexts: fanDown.setDescription('A fanDown trap signifies that hpFanOperational has detected an event where the fan is not operating.')
fanUp = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 0, 2)).setObjects(("HP-SYSTEM-MIB", "hpFanNumber"))
if mibBuilder.loadTexts: fanUp.setStatus('current')
if mibBuilder.loadTexts: fanUp.setDescription('A fanUp trap signifies that hpFanOperational has detected an event where the fan is now operating.')
temperatureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 0, 3)).setObjects(("HP-SYSTEM-MIB", "hpCpuTemperature"))
if mibBuilder.loadTexts: temperatureAlarm.setStatus('current')
if mibBuilder.loadTexts: temperatureAlarm.setDescription('A temperatureAlarm signifies that the SNMP entity, acting in an agent role, has detected that the hpCpuTemperature has a value that exceeds acceptable tolerances (i.e. it is too hot or too cold).')
hpFailover = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 0, 4)).setObjects(("HP-SYSTEM-MIB", "hpIpAddress"))
if mibBuilder.loadTexts: hpFailover.setStatus('current')
if mibBuilder.loadTexts: hpFailover.setDescription('A hpFailover signifies that the SNMP entity, acting in an agent role, has detected that the standby system in a primary, redundant operation has become the primary system. This notification will only be sent by what was formerly the standby system.')
hpDistributionEvent = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 0, 5)).setObjects(("HP-SYSTEM-MIB", "hpDistributionType"), ("HP-SYSTEM-MIB", "hpDistributionStatus"))
if mibBuilder.loadTexts: hpDistributionEvent.setStatus('current')
if mibBuilder.loadTexts: hpDistributionEvent.setDescription('A hpDistributionEvent signifies that the SNMP entity, acting in an agent role, has detected that the central entity in a distributed system has triggered a distribution event of hpDistributionType.')
hpAdminAuthFailure = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 0, 6)).setObjects(("HP-SYSTEM-MIB", "hpFailedAdminIpAddress"))
if mibBuilder.loadTexts: hpAdminAuthFailure.setStatus('current')
if mibBuilder.loadTexts: hpAdminAuthFailure.setDescription('A hpAdminAuthFailure signifies that the SNMP entity, acting in an agent role, has detected that someone at the address reported by hpAdminIpAddress has failed to authenticate to the device via the administrative interface.')
hpSystemMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 3))
hpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 3, 1))
hpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 3, 2))
hpSystemMIBCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 3, 1, 1)).setObjects(("HP-SYSTEM-MIB", "hpSystemGroup"), ("HP-SYSTEM-MIB", "hpConfigGroup"), ("HP-SYSTEM-MIB", "hpEnvGroup"), ("HP-SYSTEM-MIB", "hpStatusGroup"), ("HP-SYSTEM-MIB", "hpNotificationsConfigGroup"), ("HP-SYSTEM-MIB", "hpNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSystemMIBCompliance1 = hpSystemMIBCompliance1.setStatus('current')
if mibBuilder.loadTexts: hpSystemMIBCompliance1.setDescription('The compliance statement for entities which implement the HP-SYSTEM-MIB.')
hpSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 3, 2, 1)).setObjects(("HP-SYSTEM-MIB", "hpProductDescription"), ("HP-SYSTEM-MIB", "hpProductHWVersion"), ("HP-SYSTEM-MIB", "hpProductSWVersion"), ("HP-SYSTEM-MIB", "hpProductSerialNumber"), ("HP-SYSTEM-MIB", "hpProductLastChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSystemGroup = hpSystemGroup.setStatus('current')
if mibBuilder.loadTexts: hpSystemGroup.setDescription('A collection of objects providing system information applicable to all devices.')
hpEnvGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 3, 2, 2)).setObjects(("HP-SYSTEM-MIB", "hpCpuTemperature"), ("HP-SYSTEM-MIB", "hpPowerSupplyTemperature"), ("HP-SYSTEM-MIB", "hpChassisTemperature"), ("HP-SYSTEM-MIB", "hpFanNumber"), ("HP-SYSTEM-MIB", "hpFanOperational"), ("HP-SYSTEM-MIB", "hpFanSpeed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpEnvGroup = hpEnvGroup.setStatus('current')
if mibBuilder.loadTexts: hpEnvGroup.setDescription('A collection of objects providing environmental information applicable to all devices.')
hpConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 3, 2, 3)).setObjects(("HP-SYSTEM-MIB", "hpName"), ("HP-SYSTEM-MIB", "hpSystemID"), ("HP-SYSTEM-MIB", "hpState"), ("HP-SYSTEM-MIB", "hpIpAddress"), ("HP-SYSTEM-MIB", "hpPeerIpAddress"), ("HP-SYSTEM-MIB", "hpTechSupportEnabled"), ("HP-SYSTEM-MIB", "hpDistributionType"), ("HP-SYSTEM-MIB", "hpDistributionStatus"), ("HP-SYSTEM-MIB", "hpFailedAdminIpAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpConfigGroup = hpConfigGroup.setStatus('current')
if mibBuilder.loadTexts: hpConfigGroup.setDescription('A collection of objects providing configuration information applicable to all devices.')
hpStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 3, 2, 4)).setObjects(("HP-SYSTEM-MIB", "hpNumAccessControllers"), ("HP-SYSTEM-MIB", "hpNumClients"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpStatusGroup = hpStatusGroup.setStatus('current')
if mibBuilder.loadTexts: hpStatusGroup.setDescription('A collection of objects providing statistics applicable to all HP J8162A XL Access Controller Module like devices.')
hpNotificationsConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 3, 2, 5)).setObjects(("HP-SYSTEM-MIB", "hpFailoverNotificationEnabled"), ("HP-SYSTEM-MIB", "hpDistributionNotificationEnabled"), ("HP-SYSTEM-MIB", "hpAdminAuthFailureNotificationEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpNotificationsConfigGroup = hpNotificationsConfigGroup.setStatus('current')
if mibBuilder.loadTexts: hpNotificationsConfigGroup.setDescription('A collection of objects providing notification configuration information applicable to all devices.')
hpNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 17, 7, 1, 1, 3, 2, 6)).setObjects(("HP-SYSTEM-MIB", "fanDown"), ("HP-SYSTEM-MIB", "fanUp"), ("HP-SYSTEM-MIB", "temperatureAlarm"), ("HP-SYSTEM-MIB", "hpFailover"), ("HP-SYSTEM-MIB", "hpDistributionEvent"), ("HP-SYSTEM-MIB", "hpAdminAuthFailure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpNotificationsGroup = hpNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: hpNotificationsGroup.setDescription('notifications for primary failover, and authorization failures, applicable to all devices.')
mibBuilder.exportSymbols("HP-SYSTEM-MIB", hpState=hpState, hpGroups=hpGroups, hpStatus=hpStatus, PYSNMP_MODULE_ID=hpProcurveSystem, hpName=hpName, hpDistributionType=hpDistributionType, hpDistributionNotificationEnabled=hpDistributionNotificationEnabled, hpIpAddress=hpIpAddress, hpNumAccessControllers=hpNumAccessControllers, hpEnvGroup=hpEnvGroup, hpSystemID=hpSystemID, hpConfigGroup=hpConfigGroup, temperatureAlarm=temperatureAlarm, hpStatusGroup=hpStatusGroup, hpProductHWVersion=hpProductHWVersion, hpConfig=hpConfig, hpProductLastChange=hpProductLastChange, hpPowerSupplyTemperature=hpPowerSupplyTemperature, hpFanStatusEntry=hpFanStatusEntry, hpFanSpeed=hpFanSpeed, hpNotificationsConfigGroup=hpNotificationsConfigGroup, hpProcurveSystem=hpProcurveSystem, hpNotificationsConfig=hpNotificationsConfig, hpFailedAdminIpAddress=hpFailedAdminIpAddress, hpNotificationsGroup=hpNotificationsGroup, hpCompliances=hpCompliances, hpChassisTemperature=hpChassisTemperature, hpAdminAuthFailureNotificationEnabled=hpAdminAuthFailureNotificationEnabled, fanUp=fanUp, hpFanStatusTable=hpFanStatusTable, hpProductDescription=hpProductDescription, hpFailover=hpFailover, hpTechSupportEnabled=hpTechSupportEnabled, hpDistributionStatus=hpDistributionStatus, hpProductSerialNumber=hpProductSerialNumber, hpFanNumber=hpFanNumber, hpDistributionEvent=hpDistributionEvent, hpSystemMIBCompliance1=hpSystemMIBCompliance1, hpSystemMIBConformance=hpSystemMIBConformance, hpProcurveSysMib=hpProcurveSysMib, hpSystemGroup=hpSystemGroup, hpPeerIpAddress=hpPeerIpAddress, hpSystemTraps=hpSystemTraps, hpCpuTemperature=hpCpuTemperature, hpAdminAuthFailure=hpAdminAuthFailure, hpFailoverNotificationEnabled=hpFailoverNotificationEnabled, hpNumClients=hpNumClients, fanDown=fanDown, hpProductSWVersion=hpProductSWVersion, hpFanOperational=hpFanOperational, hpSystemMIBObjects=hpSystemMIBObjects)
