#
# PySNMP MIB module WYSE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WYSE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:38:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, NotificationType, IpAddress, Counter64, ModuleIdentity, enterprises, ObjectIdentity, iso, Unsigned32, MibIdentifier, NotificationType, Integer32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "NotificationType", "IpAddress", "Counter64", "ModuleIdentity", "enterprises", "ObjectIdentity", "iso", "Unsigned32", "MibIdentifier", "NotificationType", "Integer32", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wyse = MibIdentifier((1, 3, 6, 1, 4, 1, 714))
product = MibIdentifier((1, 3, 6, 1, 4, 1, 714, 1))
old = MibIdentifier((1, 3, 6, 1, 4, 1, 714, 1, 1))
thinClient = MibIdentifier((1, 3, 6, 1, 4, 1, 714, 1, 2))
wysenet = MibIdentifier((1, 3, 6, 1, 4, 1, 714, 1, 1, 1))
wbt3 = MibIdentifier((1, 3, 6, 1, 4, 1, 714, 1, 2, 3))
wbt3Memory = MibIdentifier((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 1))
wbt3PCCard = MibIdentifier((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 2))
wbt3IODevice = MibIdentifier((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 3))
wbt3Display = MibIdentifier((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 4))
wbt3DhcpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 5))
wbt3BuildInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 6))
wbt3CustomFields = MibIdentifier((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 7))
wbt3Administration = MibIdentifier((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 8))
wbt3TrapsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 9))
wbt3MibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 10))
wbt3Network = MibIdentifier((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 11))
wbt3Apps = MibIdentifier((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 12))
wbt3Connections = MibIdentifier((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13))
wbt3Users = MibIdentifier((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 14))
wbt3Ram = MibIdentifier((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 1, 1))
wbt3Rom = MibIdentifier((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 1, 2))
wbt3RamNum = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3RamNum.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3RamNum.setDescription('The number of Ram presents in this system')
wbt3RamTable = MibTable((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 1, 1, 2), )
if mibBuilder.loadTexts: wbt3RamTable.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3RamTable.setDescription('A list of Ram entries, number of entries is given by the value of wbt3RamNum')
wbt3RamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 1, 1, 2, 1), ).setIndexNames((0, "WYSE-MIB", "wbt3RamIndex"))
if mibBuilder.loadTexts: wbt3RamEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3RamEntry.setDescription('A Ram entity present in this system')
wbt3RamIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3RamIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3RamIndex.setDescription('A unique value for each Ram entity present in this system. Its value ranges between 1 and the value of wbt3RamNum')
wbt3RamType = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("base", 1), ("video", 2), ("extend", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3RamType.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3RamType.setDescription('The type of Ram Currently defined numbers are: base(1) video(2) extend(3)')
wbt3RamSize = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 1, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3RamSize.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3RamSize.setDescription('Total size of this ram entity in bytes')
wbt3RomNum = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3RomNum.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3RomNum.setDescription('The number of Rom entity presents in this system')
wbt3RomTable = MibTable((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 1, 2, 2), )
if mibBuilder.loadTexts: wbt3RomTable.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3RomTable.setDescription('A list of Rom entries, number of entries is given by the value of wbt3RomNum')
wbt3RomEntry = MibTableRow((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 1, 2, 2, 1), ).setIndexNames((0, "WYSE-MIB", "wbt3RomIndex"))
if mibBuilder.loadTexts: wbt3RomEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3RomEntry.setDescription('A Rom entity present in this system')
wbt3RomIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3RomIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3RomIndex.setDescription('A unique value for each Rom entity present in this system. Its value ranges between 1 and the value of wbt3RomNum')
wbt3RomType = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("boot", 1), ("os", 2), ("option", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3RomType.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3RomType.setDescription('The type of Rom Currently defined numbers are: boot(1) os(2) option(3)')
wbt3RomSize = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 1, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3RomSize.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3RomSize.setDescription('Total size of this Rom entity in bytes')
wbt3PCCardNum = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3PCCardNum.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3PCCardNum.setDescription('The number of PCCard slots presents in this system')
wbt3PCCardTable = MibTable((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 2, 2), )
if mibBuilder.loadTexts: wbt3PCCardTable.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3PCCardTable.setDescription('A list of PCCard entries, number of entries is given by the value of wbt3PCCardNum')
wbt3PCCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 2, 2, 1), ).setIndexNames((0, "WYSE-MIB", "wbt3PCCardIndex"))
if mibBuilder.loadTexts: wbt3PCCardEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3PCCardEntry.setDescription('A PCCard slot present in this system')
wbt3PCCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3PCCardIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3PCCardIndex.setDescription('A unique value for each PCCard slot present in this system. Its value ranges between 1 and the value of wbt3PCCardNum')
wbt3PCCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(256, 0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("empty", 256), ("multifunction", 0), ("memory", 1), ("serial-port-modem", 2), ("parallel-port", 3), ("fixed-disk", 4), ("video-adaptor", 5), ("lan-adapter", 6), ("aims", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3PCCardType.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3PCCardType.setDescription('The type of PCCard card currently plugged in this PCCard slot. Currently defined numbers are: empty(65535), -- the PCCard slot is empty multifunction(0), -- a multi function PCCard card is currently in the PCCard slot memory(1), modem(2), parallel-port(3), fixed-disk(4), video-adaptor(5), lan-adapter(6), AIMS(7)')
wbt3PCCardVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3PCCardVendor.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3PCCardVendor.setDescription("A textual description of the vendor of the PCCard card currently plugged in this slot. e.g. 'Eicon DIVA PC Card'")
wbt3IODevAttached = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3IODevAttached.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3IODevAttached.setDescription('A 32bit value which indicates the input devices currently attached to the unit. bit 0 - set if keyboard attached bit 1 - set if mouse driver loaded bit 2 - set if micro touch screen attached bit 3 - set if elo touch screen attached bit 4 - set if lightpen attached bit 5 - set if floppy drive attached')
wbt3kbLanguage = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("english-us", 0), ("english-uk", 1), ("french", 2), ("german", 3), ("spanish", 4), ("italian", 5), ("swedish", 6), ("danish", 7), ("norwegian", 8), ("dutch", 9), ("belgian-french", 10), ("finnish", 11), ("swiss-french", 12), ("swiss-german", 13), ("japanese", 14), ("canadian-french", 15), ("belgian-dutch", 16), ("portuguese", 17), ("brazilian-abnt", 18), ("italian-142", 19), ("latin-american", 20), ("us-international", 21), ("canadian-fr-multi", 22), ("canadian-eng-multi", 23), ("spanish-variation", 24)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3kbLanguage.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3kbLanguage.setDescription('The language setting for the keyboard attached to this terminal')
wbt3CharacterRepeatDelay = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(250, 500, 750, 1000))).clone(namedValues=NamedValues(("delay-250", 250), ("delay-500", 500), ("delay-750", 750), ("delay-1000", 1000)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3CharacterRepeatDelay.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3CharacterRepeatDelay.setDescription('Indicates the delay time between each character.')
wbt3CharacterRepeatRate = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3CharacterRepeatRate.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3CharacterRepeatRate.setDescription('Indicates repeat rate between each character in the range of 0 to 31 at 1 interval.')
wbt3DispCharacteristic = MibIdentifier((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 4, 1))
wbt3DispCapability = MibIdentifier((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 4, 2))
wbt3EnergySaver = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("screensaver", 1), ("monitoroff", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3EnergySaver.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3EnergySaver.setDescription('Indicates which energy saver is in use.')
wbt3ScreenTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3ScreenTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3ScreenTimeOut.setDescription('Indicates the time (in minutes) of non-activity to trigger the screen saver.')
wbt3TouchScreen = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("com1", 1), ("com2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3TouchScreen.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3TouchScreen.setDescription('If the terminal has a touch screen, indicates to which port it is attached')
wbt3DispFreq = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3DispFreq.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3DispFreq.setDescription('A 8bit value which indicates the current display frequency in Hz. Available display frequency values for Leo: 60/75/85 Hz, for Mars: 60/75 Hz. wbt3DispFreq can not be set if use DDC is on.')
wbt3DispHorizPix = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3DispHorizPix.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3DispHorizPix.setDescription('A 16bit value which indicates the current number of horizontal pixels. Available display horizontal pixel values for Leo: 640/800/1024/1280 (1280 only with 60 Hz) pixels, for Mars: 640/800/1024. wbt3DispHorizPix can not be set if use DDC is on.')
wbt3DispVertPix = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3DispVertPix.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3DispVertPix.setDescription('A 16bit value which indicates the current number of vertical pixels. Available display vertical pixel values for Leo: 480/600/768/1024 (1024 only with 60 Hz) pixels, for Mars: 480/600/768. wbt3DispVertPix can not be set if use DDC is on.')
wbt3DispColor = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3DispColor.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3DispColor.setDescription('Current display color depth')
wbt3DispUseDDC = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3DispUseDDC.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3DispUseDDC.setDescription('Automatic select the best available resolution and refresh rate. If selected Yes, the wbt3DispHorizPix, wbt3VertPix and wbt3DispFreq options can not be set. Use DDC is not available for Mars platform.')
wbt3DispFreqMax = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 4, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3DispFreqMax.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3DispFreqMax.setDescription('A 8bit value which indicates the display frequency in Hz for maximum resolution')
wbt3DispHorizPixMax = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 4, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3DispHorizPixMax.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3DispHorizPixMax.setDescription('A 16bit value which indicates the maximum number of horizontal pixels')
wbt3DispVertPixMax = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 4, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3DispVertPixMax.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3DispVertPixMax.setDescription('A 16bit value which indicates the maximum number of vertical pixels')
wbt3DispColorMax = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 4, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3DispColorMax.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3DispColorMax.setDescription('Maximum display color depth')
wbt3DhcpInfoNum = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3DhcpInfoNum.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3DhcpInfoNum.setDescription('The number of entries in DHCP information table, this number equals to the number of currently initialized network interfaces (exclude loopback) in the terminal')
wbt3DhcpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 5, 2), )
if mibBuilder.loadTexts: wbt3DhcpInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3DhcpInfoTable.setDescription('A list of DHCP information table entry, Each entry lists the information obtained from DHCP server through a specific network interface in the terminal. The number of entries is given by the value of wbt3DhcpInfoNum')
wbt3DHCPoptionIDs = MibIdentifier((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 5, 3))
wbt3DhcpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 5, 2, 1), ).setIndexNames((0, "WYSE-MIB", "wbt3DhcpInfoIndex"))
if mibBuilder.loadTexts: wbt3DhcpInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3DhcpInfoEntry.setDescription('An interface with a DHCP information table entry on this system')
wbt3DhcpInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3DhcpInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3DhcpInfoIndex.setDescription('A unique value for this DHCP information table, Its value ranges between 1 and the value of wbt3DhcpInfoNum.')
wbt3InterfaceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3InterfaceNum.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3InterfaceNum.setDescription('The interface number through which the dhcp info is obtained')
wbt3ServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 5, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3ServerIP.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3ServerIP.setDescription('WinFrame/WTS Server IP address, (Option 155)')
wbt3Username = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 5, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3Username.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3Username.setDescription('Account to logon to WinFrame/WTS Server, (Option 156)')
wbt3Domain = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 5, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3Domain.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3Domain.setDescription('Domain to authenticate account defined by wbt3Username, (Option 157)')
wbt3Password = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nopassword", 0), ("password", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3Password.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3Password.setDescription('0=No Password;1=Has Password, (Option 158)')
wbt3CommandLine = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 5, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3CommandLine.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3CommandLine.setDescription('Application to use when connecting to a WinFrame/WTS Server, (Option 159)')
wbt3WorkingDir = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 5, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3WorkingDir.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3WorkingDir.setDescription('Working Directory for application defined by wbt3CommandLine, (Option 160)')
wbt3FileServer = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 5, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3FileServer.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3FileServer.setDescription('File server where ROM images are located, (Option 161)')
wbt3FileRootPath = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 5, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3FileRootPath.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3FileRootPath.setDescription('Absolute path name for ROM image parent directory, (Option 162)')
wbt3TrapServerList = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 5, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3TrapServerList.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3TrapServerList.setDescription('A list of host IPs which should receive SNMP trap from the terminal (Option 163)')
wbt3SetCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 5, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ignored", 0), ("provided", 1), ("notprovided", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3SetCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3SetCommunity.setDescription('SNMP Set Community (Option 164): 0 - dhcp supplied set community is ignored, local configuration takes precedence; 1 - provided by DHCP server and being used; 2 - not provided by DHCP server, default set community is used')
wbt3RDPstartApp = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 5, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3RDPstartApp.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3RDPstartApp.setDescription('RDP option: Startup Application (Default Option 165)')
wbt3EmulationMode = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 5, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3EmulationMode.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3EmulationMode.setDescription('Terminal Emulation option: Emulation Mode (Default Option 166)')
wbt3TerminalID = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 5, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3TerminalID.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3TerminalID.setDescription('Terminal Emulation option: Terminal ID (Default Option 167)')
wbt3VirtualPortServer = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 5, 2, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3VirtualPortServer.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3VirtualPortServer.setDescription('Virtual Port option: Virtual Port Server (Default Option 168)')
remoteServer = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 5, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteServer.setStatus('mandatory')
if mibBuilder.loadTexts: remoteServer.setDescription('Common option: Remote Server (Default Option 155)')
logonUserName = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 5, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: logonUserName.setStatus('mandatory')
if mibBuilder.loadTexts: logonUserName.setDescription('Common option: Logon User Name (Default Option 156)')
domain = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 5, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: domain.setStatus('mandatory')
if mibBuilder.loadTexts: domain.setDescription('Common option: Domain (Default Option 157)')
password = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 5, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: password.setStatus('mandatory')
if mibBuilder.loadTexts: password.setDescription('Common option: Login Password (Default Option 158)')
commandLine = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 5, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commandLine.setStatus('mandatory')
if mibBuilder.loadTexts: commandLine.setDescription('Common option: Command Line (Default Option 159)')
workingDirectory = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 5, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: workingDirectory.setStatus('mandatory')
if mibBuilder.loadTexts: workingDirectory.setDescription('Common option: Working Directory (Default Option 160)')
fTPFileServer = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 5, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fTPFileServer.setStatus('mandatory')
if mibBuilder.loadTexts: fTPFileServer.setDescription('FTP option: File Server (Default Option 161)')
fTPRootPath = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 5, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fTPRootPath.setStatus('mandatory')
if mibBuilder.loadTexts: fTPRootPath.setDescription('FTP option: File Root Path (Default Option 162)')
trapServerList = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 5, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapServerList.setStatus('mandatory')
if mibBuilder.loadTexts: trapServerList.setDescription('SNMP option: Trap Server IP List (Default Option 163)')
setCommunity = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 5, 3, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: setCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: setCommunity.setDescription('SNMP option: Set Community (Default Option 164)')
rDPStartupApp = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 5, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rDPStartupApp.setStatus('mandatory')
if mibBuilder.loadTexts: rDPStartupApp.setDescription('RDP option: Startup Application (Default Option 165)')
emulationMode = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 5, 3, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emulationMode.setStatus('mandatory')
if mibBuilder.loadTexts: emulationMode.setDescription('Terminal Emulation option: Emulation Mode (Default Option 166)')
terminalID = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 5, 3, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: terminalID.setStatus('mandatory')
if mibBuilder.loadTexts: terminalID.setDescription('Terminal Emulation option: Terminal ID (Default Option 167)')
virtualPortServer = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 5, 3, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualPortServer.setStatus('mandatory')
if mibBuilder.loadTexts: virtualPortServer.setDescription('Virtual Port option: Virtual Port Server (Default Option 168)')
wbt3CurrentInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 6, 1))
wbt3DhcpUpdateInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 6, 2))
wbt3CurInfoNum = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3CurInfoNum.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3CurInfoNum.setDescription('Number of rom images reside in the terminal currently, include main & application')
wbt3CurInfoTable = MibTable((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 6, 1, 2), )
if mibBuilder.loadTexts: wbt3CurInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3CurInfoTable.setDescription('A table of build info for each rom image, number of entries is given by the value of wbt3CurInfoNum')
wbt3CurInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 6, 1, 2, 1), ).setIndexNames((0, "WYSE-MIB", "wbt3DhcpInfoIndex"))
if mibBuilder.loadTexts: wbt3CurInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3CurInfoEntry.setDescription('A rom image present in this terminal')
wbt3CurInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 6, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3CurInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3CurInfoIndex.setDescription('A unique value for this rom image. Its value ranges between 1 and the value of wbt3CurInfoNum..')
wbt3CurBuildNum = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 6, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3CurBuildNum.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3CurBuildNum.setDescription('Build number of a rom image currently on the terminal')
wbt3CurOEMBuildNum = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 6, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3CurOEMBuildNum.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3CurOEMBuildNum.setDescription('Build number of flash ROM image currently on the terminal for OEM')
wbt3CurModBuildDate = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 6, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3CurModBuildDate.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3CurModBuildDate.setDescription('Date that ROM image currently on the terminal was created')
wbt3CurOEM = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 6, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3CurOEM.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3CurOEM.setDescription("Name of OEM who's ROM image is defined by wbt3OEMBuildNum")
wbt3CurHWPlatform = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 6, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3CurHWPlatform.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3CurHWPlatform.setDescription('OS installed on the terminal')
wbt3CurOS = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 6, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3CurOS.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3CurOS.setDescription('OS installed on the terminal')
wbt3DUpInfoNum = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 6, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3DUpInfoNum.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3DUpInfoNum.setDescription('Number of rom images reside in the terminal currently, include main & application')
wbt3DUpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 6, 2, 2), )
if mibBuilder.loadTexts: wbt3DUpInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3DUpInfoTable.setDescription('A table of build info for each rom image, number of entries is given by the value of wbt3DUpInfoNum')
wbt3DUpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 6, 2, 2, 1), ).setIndexNames((0, "WYSE-MIB", "wbt3DUpInfoIndex"))
if mibBuilder.loadTexts: wbt3DUpInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3DUpInfoEntry.setDescription('A rom image present in this terminal')
wbt3DUpInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 6, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3DUpInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3DUpInfoIndex.setDescription('A unique value for this rom image. Its value ranges between 1 and the value of wbt3DUpInfoNum..')
wbt3DUpBuildNum = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 6, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3DUpBuildNum.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3DUpBuildNum.setDescription('Build number of the updated ROM image')
wbt3DUpOEMBuildNum = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 6, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3DUpOEMBuildNum.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3DUpOEMBuildNum.setDescription('Build number of the updated ROM image for OEM')
wbt3DUpModBuildDate = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 6, 2, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3DUpModBuildDate.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3DUpModBuildDate.setDescription('Date that update image was last modified')
wbt3DUpOEMBuildDate = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 6, 2, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3DUpOEMBuildDate.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3DUpOEMBuildDate.setDescription('Date that update image was last modified for OEM')
wbt3CustomField1 = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 7, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3CustomField1.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3CustomField1.setDescription('First custom field')
wbt3CustomField2 = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 7, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3CustomField2.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3CustomField2.setDescription('Second custom field')
wbt3CustomField3 = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 7, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3CustomField3.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3CustomField3.setDescription('Third custom field')
wbt3UpDnLoad = MibIdentifier((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 8, 1))
wbt3Action = MibIdentifier((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 8, 2))
wbt3FTPsetting = MibIdentifier((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 8, 3))
wbt3SNMPupdate = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3SNMPupdate.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3SNMPupdate.setDescription('Terminal firmware upgrade using SNMP. Yes = SNMP update enable, No = SNMP update disable.')
wbt3DHCPupdate = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3DHCPupdate.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3DHCPupdate.setDescription('Terminal firmware upgrade using DHCP. Yes = DHCP automatic update enable, No = DHCP automatic update disable.')
wbt3UpDnLoadNum = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3UpDnLoadNum.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3UpDnLoadNum.setDescription('The number of entries in the Up/Download table, Maximum value is 5')
wbt3UpDnLoadTable = MibTable((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 8, 1, 2), )
if mibBuilder.loadTexts: wbt3UpDnLoadTable.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3UpDnLoadTable.setDescription('A list of files to be upload or download')
wbt3AcceptReq = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3AcceptReq.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3AcceptReq.setDescription('Indicate whether thinClient is ready to accept SNMP up/down load request')
wbt3SubmitLoadJob = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notready", 0), ("ready", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3SubmitLoadJob.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3SubmitLoadJob.setDescription('Setting this object to Ready(1) will kick off the up/download process specified in wbt3UpDnLoadTable')
wbt3UpDnLoadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 8, 1, 2, 1), ).setIndexNames((0, "WYSE-MIB", "wbt3UpDnLoadIndex"))
if mibBuilder.loadTexts: wbt3UpDnLoadEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3UpDnLoadEntry.setDescription('An upload or download request entry from server')
wbt3UpDnLoadIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 8, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3UpDnLoadIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3UpDnLoadIndex.setDescription('A unique value for the request entry. Its value ranges between 1 and the value of wbt3UpDnLoadNum.')
wbt3UpDnLoadId = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 8, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3UpDnLoadId.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3UpDnLoadId.setDescription('An id number for this up/download request. This number is used to match with WBT private trap which will be sent to the server upon done with this up/download request.')
wbt3UpDnLoadOp = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 8, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("upload", 0), ("download", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3UpDnLoadOp.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3UpDnLoadOp.setDescription('0=an upload request;1=a download request')
wbt3UpDnLoadSrcFile = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 8, 1, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3UpDnLoadSrcFile.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3UpDnLoadSrcFile.setDescription('The path and file name for source file to be up/downloaded.')
wbt3UpDnLoadDstFile = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 8, 1, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3UpDnLoadDstFile.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3UpDnLoadDstFile.setDescription('The path and file name where the up/downloaded file will be stored.')
wbt3UpDnLoadFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 8, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("binary", 0), ("ascii", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3UpDnLoadFileType.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3UpDnLoadFileType.setDescription('0=binary;1=ascii')
wbt3UpDnLoadProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 8, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ftp", 0), ("tftp", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3UpDnLoadProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3UpDnLoadProtocol.setDescription('0=ftp, 1=tftp')
wbt3UpDnLoadFServer = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 8, 1, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3UpDnLoadFServer.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3UpDnLoadFServer.setDescription('The file server IP address (or name) to/from which the file is up/downloaded.')
wbt3UpDnLoadTimeFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 8, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("immediate", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3UpDnLoadTimeFlag.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3UpDnLoadTimeFlag.setDescription('0=execute request immediately')
wbt3RebootRequest = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 8, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noreboot", 0), ("rebootnow", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3RebootRequest.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3RebootRequest.setDescription('Set this object to RebootNow to kick off a reboot on the thinclient')
wbt3ResetToFactoryDefault = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 8, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noreset", 0), ("resetnow", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3ResetToFactoryDefault.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3ResetToFactoryDefault.setDescription('Reset the terminal to factory-default settings. The terminal will be reboot after ResetNow is set.')
wbt3ServerName = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 8, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3ServerName.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3ServerName.setDescription('File server name or IP address where the ROM images are located.')
wbt3Directory = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 8, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3Directory.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3Directory.setDescription('Directory where the ROM images are located.')
wbt3UserID = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 8, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3UserID.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3UserID.setDescription('User identification to login to the file server.')
wbt3Password2 = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 8, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3Password2.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3Password2.setDescription('User password to login to the file server.')
wbt3SavePassword = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 8, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3SavePassword.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3SavePassword.setDescription('Yes = to save the password permanently, No = do not save the password.')
wbt3InfoLocation = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 8, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("uselocalinfo", 0), ("usedhcpinfo", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3InfoLocation.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3InfoLocation.setDescription('UseDHCPinfo = ServerName and Directory will be provided by DHCP server, UseLocalinfo = ServerName and Directory will be provided using local settings.')
wbt3Security = MibIdentifier((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 8, 7))
wbt3SecurityEnable = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 8, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3SecurityEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3SecurityEnable.setDescription('This group box is used to enable terminal security and connection configuration access. selecting enable terminal security, and deactivate the Hide Configure Tab function. By default this function is disabled')
wbt3HideConfigTab = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 8, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3HideConfigTab.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3HideConfigTab.setDescription('This function hides the Configure tab in the Winterm Connections Manager. By default this function is not activated.')
wbt3FailOverEnable = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 8, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3FailOverEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3FailOverEnable.setDescription('Failover is a connection feature that is enabled using the Security properties sheet. Disabling this function activates the PingBeforeConnect function. By default this function is enabled.')
wbt3MultipleConnect = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 8, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3MultipleConnect.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3MultipleConnect.setDescription('Allow multiple connections. Select Yes to enable. By default this function is disabled.')
wbt3PingBeforeConnect = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 8, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3PingBeforeConnect.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3PingBeforeConnect.setDescription('Select Yes to enable. By default this function is deactivated. When FailOver is checked, PingBeforeConnect is grayed out, since it is implied that Ping is always performed before a connection is made.')
wbt3Verbose = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 8, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3Verbose.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3Verbose.setDescription('Select Yes to enable the Verbose connection function. By default the box is disabled. During the FailOver operation, user can see the status via a log window by checking the Verbose checkbox. The log window will show everything from first connection onward.')
wbt3AutoLoginEnable = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 8, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3AutoLoginEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3AutoLoginEnable.setDescription('The AutoLogin function is an automatic login function that does not use a dialog box as a prompt to log you back into your terminal. Whether you restart or log off, the AutoLogin dialog box displays, counts five seconds, then returns you to the Winterm Connections Manager. ')
wbt3AutoLoginUserName = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 8, 7, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3AutoLoginUserName.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3AutoLoginUserName.setDescription('This field is activated by enabling AutoLogin Enable. By default the field is blank.')
wbt3SingleButtonConnect = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 8, 7, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3SingleButtonConnect.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3SingleButtonConnect.setDescription('Select Yes to enable the function. By default the function is not activated.')
wbt3AutoFailRecovery = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 8, 7, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3AutoFailRecovery.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3AutoFailRecovery.setDescription('Select Yes to enable the function. By default the function is activated.')
wbt3TrapStatus = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))).clone(namedValues=NamedValues(("ls-done", 0), ("ls-done-sameversion", 1), ("ls-notready", 2), ("ls-fail-shutdown", 3), ("ls-fail-noupd", 4), ("ls-fail-dnld-blocked", 5), ("ls-fail-filenotfound", 6), ("ls-fail-dir", 7), ("ls-fail-upld-blocked", 8), ("ls-fail-noserv", 9), ("ls-fail-prot", 10), ("ls-fail-nomem", 11), ("ls-fail-noresource", 12), ("ls-fail-resolvename", 13), ("ls-fail-notbundle", 14), ("ls-fail-checksum", 15), ("ls-fail-flasherror", 16), ("ls-fail-dnld-flash", 17), ("ls-fail-usercancel", 18), ("ls-fail-norflash", 19), ("ls-fail-protnsupport", 20), ("ls-fail-parsereg", 21), ("ls-fail-parsereg-verincomp", 22), ("ls-fail-parsereg-platfincomp", 23), ("ls-fail-parsereg-osincomp", 24), ("ls-fail-reset-defaultfactory", 25), ("ls-fail-paraminifilenotfound", 26), ("ls-invalid-bootstrap", 27), ("ls-fail-badkey", 28)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3TrapStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3TrapStatus.setDescription('Current trap status information.')
wbt3TrapReqId = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 9, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3TrapReqId.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3TrapReqId.setDescription('The SNMP up/down load request Id associated with current trap')
wbt3TrapServers = MibIdentifier((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 9, 3))
wbt3TrapServer1 = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 9, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3TrapServer1.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3TrapServer1.setDescription('Server name or IP address where the trap messages will be sent.')
wbt3TrapServer2 = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 9, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3TrapServer2.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3TrapServer2.setDescription('Server name or IP address where the trap messages will be sent.')
wbt3TrapServer3 = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 9, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3TrapServer3.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3TrapServer3.setDescription('Server name or IP address where the trap messages will be sent.')
wbt3TrapServer4 = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 9, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3TrapServer4.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3TrapServer4.setDescription('Server name or IP address where the trap messages will be sent.')
wbt3MibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3MibRevMajor.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3MibRevMajor.setDescription('The major revision level of the MIB The number for current version.')
wbt3MibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 10, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3MibRevMinor.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3MibRevMinor.setDescription('The minor revision level of the MIB The number for current version is 8.')
wbt3NetworkNum = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 11, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3NetworkNum.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3NetworkNum.setDescription('The number of entries in the Network table.')
wbt3NetworkTable = MibTable((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 11, 2), )
if mibBuilder.loadTexts: wbt3NetworkTable.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3NetworkTable.setDescription('A table of network configuration, number of entries is given by the value of wbt3NetworkNum.')
wbt3NetworkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 11, 2, 1), ).setIndexNames((0, "WYSE-MIB", "wbt3NetworkIndex"))
if mibBuilder.loadTexts: wbt3NetworkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3NetworkEntry.setDescription('A Network configuration presents in this terminal.')
wbt3NetworkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3NetworkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3NetworkIndex.setDescription('A unique value for the request entry. Its value ranges between 1 and the value of wbt3NetworkIndex.')
wbt3dhcpEnable = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3dhcpEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3dhcpEnable.setDescription('Indicates whether the terminal acquires its network parameters through DHCP or uses the static parameters provided.')
wbt3NetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 11, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3NetworkAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3NetworkAddress.setDescription('IP address persents in this terminal.')
wbt3SubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 11, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3SubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3SubnetMask.setDescription('Subnet Mask presents in this terminal.')
wbt3Gateway = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 11, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3Gateway.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3Gateway.setDescription('Default gateway IP address.')
wbt3dnsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 11, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3dnsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3dnsEnable.setDescription('Indicates whether the terminal uses DNS to translate names to IP addresses.')
wbt3defaultDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 11, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3defaultDomain.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3defaultDomain.setDescription('Indicates the domain in which the terminal belongs.')
wbt3primaryDNSserverIPaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 11, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3primaryDNSserverIPaddress.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3primaryDNSserverIPaddress.setDescription('The IP address of the primary name server.')
wbt3secondaryDNSserverIPaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 11, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3secondaryDNSserverIPaddress.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3secondaryDNSserverIPaddress.setDescription('The IP address of the secondary name server.')
wbt3winsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 11, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3winsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3winsEnable.setDescription('Indicates whether the terminal uses WINS to resolve to IP addresses.')
wbt3primaryWINSserverIPaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 11, 2, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3primaryWINSserverIPaddress.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3primaryWINSserverIPaddress.setDescription('The IP address of the primary name server.')
wbt3secondaryWINSserverIPaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 11, 2, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3secondaryWINSserverIPaddress.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3secondaryWINSserverIPaddress.setDescription('The IP address of the secondary name server.')
wbt3NetworkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 11, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 9, 8, 7, 6))).clone(namedValues=NamedValues(("auto-detect", 0), ("mbs-10halfduplex", 9), ("mbs-10fullduplex", 8), ("mbs-100halfduplex", 7), ("mbs-100fullduplex", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3NetworkSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3NetworkSpeed.setDescription('Indicates the Network speed connection.(Not available for Mars)')
wbt3NetworkProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 11, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 256))).clone(namedValues=NamedValues(("tcp-ip", 0), ("unknown", 256)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3NetworkProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3NetworkProtocol.setDescription('Indicates network protocol used.')
wbt3RDPencryption = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("enable", 0), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3RDPencryption.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3RDPencryption.setDescription('To enable/disable the RPD encryption.')
wbt3VirtualPortServerIPaddress = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 12, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3VirtualPortServerIPaddress.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3VirtualPortServerIPaddress.setDescription('Specify the virtual port server address.')
wbt3com1Share = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 12, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("yes", 0), ("no", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3com1Share.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3com1Share.setDescription('To enable/disable COM1 share.')
wbt3com2Share = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 12, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("yes", 0), ("no", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3com2Share.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3com2Share.setDescription('To enable/disable COM2 share.')
wbt3parallelShare = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 12, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("yes", 0), ("no", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3parallelShare.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3parallelShare.setDescription('To enable/disable parallel share port.')
iCADefaultHotkeys = MibTable((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 12, 6), )
if mibBuilder.loadTexts: iCADefaultHotkeys.setStatus('mandatory')
if mibBuilder.loadTexts: iCADefaultHotkeys.setDescription('ICA Client Default HotKeys settings.')
defaultHotkeysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 12, 6, 1), )
if mibBuilder.loadTexts: defaultHotkeysEntry.setStatus('mandatory')
if mibBuilder.loadTexts: defaultHotkeysEntry.setDescription('Default HotKeys entry.')
iCAStatusDialog = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 12, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ctrl", 0), ("shift", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iCAStatusDialog.setStatus('mandatory')
if mibBuilder.loadTexts: iCAStatusDialog.setDescription('ICAStatusDialog')
iCAStatusDialog2 = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 12, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("nb-0", 0), ("nb-1", 1), ("nb-2", 2), ("nb-3", 3), ("nb-4", 4), ("nb-5", 5), ("nb-6", 6), ("nb-7", 7), ("nb-8", 8), ("nb-9", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iCAStatusDialog2.setStatus('mandatory')
if mibBuilder.loadTexts: iCAStatusDialog2.setDescription('ICAStatusDialog')
iCACloseRemoteApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 12, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ctrl", 0), ("shift", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iCACloseRemoteApplication.setStatus('mandatory')
if mibBuilder.loadTexts: iCACloseRemoteApplication.setDescription('ICAStatusDialog')
iCACloseRemoteApplication2 = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 12, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("nb-0", 0), ("nb-1", 1), ("nb-2", 2), ("nb-3", 3), ("nb-4", 4), ("nb-5", 5), ("nb-6", 6), ("nb-7", 7), ("nb-8", 8), ("nb-9", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iCACloseRemoteApplication2.setStatus('mandatory')
if mibBuilder.loadTexts: iCACloseRemoteApplication2.setDescription('ICAStatusDialog')
iCAtoggleTitleBar = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 12, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ctrl", 0), ("shift", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iCAtoggleTitleBar.setStatus('mandatory')
if mibBuilder.loadTexts: iCAtoggleTitleBar.setDescription('ICAStatusDialog')
iCAtoggleTitleBar2 = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 12, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("nb-0", 0), ("nb-1", 1), ("nb-2", 2), ("nb-3", 3), ("nb-4", 4), ("nb-5", 5), ("nb-6", 6), ("nb-7", 7), ("nb-8", 8), ("nb-9", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iCAtoggleTitleBar2.setStatus('mandatory')
if mibBuilder.loadTexts: iCAtoggleTitleBar2.setDescription('ICAStatusDialog')
iCActrlAltDel = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 12, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("ctrl", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iCActrlAltDel.setStatus('mandatory')
if mibBuilder.loadTexts: iCActrlAltDel.setDescription('ICAStatusDialog')
iCActrlAltDel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 12, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("nb-0", 0), ("nb-1", 1), ("nb-2", 2), ("nb-3", 3), ("nb-4", 4), ("nb-5", 5), ("nb-6", 6), ("nb-7", 7), ("nb-8", 8), ("nb-9", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iCActrlAltDel2.setStatus('mandatory')
if mibBuilder.loadTexts: iCActrlAltDel2.setDescription('ICAStatusDialog')
iCActrlEsc = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 12, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("ctrl", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iCActrlEsc.setStatus('mandatory')
if mibBuilder.loadTexts: iCActrlEsc.setDescription('ICAStatusDialog')
iCActrlEsc2 = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 12, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("nb-0", 0), ("nb-1", 1), ("nb-2", 2), ("nb-3", 3), ("nb-4", 4), ("nb-5", 5), ("nb-6", 6), ("nb-7", 7), ("nb-8", 8), ("nb-9", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iCActrlEsc2.setStatus('mandatory')
if mibBuilder.loadTexts: iCActrlEsc2.setDescription('ICAStatusDialog')
iCAaltEsc = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 12, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ctrl", 0), ("shift", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iCAaltEsc.setStatus('mandatory')
if mibBuilder.loadTexts: iCAaltEsc.setDescription('ICAStatusDialog')
iCAaltEsc2 = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 12, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("nb-0", 0), ("nb-1", 1), ("nb-2", 2), ("nb-3", 3), ("nb-4", 4), ("nb-5", 5), ("nb-6", 6), ("nb-7", 7), ("nb-8", 8), ("nb-9", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iCAaltEsc2.setStatus('mandatory')
if mibBuilder.loadTexts: iCAaltEsc2.setDescription('ICAStatusDialog')
iCAaltTab = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 12, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ctrl", 0), ("shift", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iCAaltTab.setStatus('mandatory')
if mibBuilder.loadTexts: iCAaltTab.setDescription('ICAStatusDialog')
iCAaltTab2 = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 12, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("nb-0", 0), ("nb-1", 1), ("nb-2", 2), ("nb-3", 3), ("nb-4", 4), ("nb-5", 5), ("nb-6", 6), ("nb-7", 7), ("nb-8", 8), ("nb-9", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iCAaltTab2.setStatus('mandatory')
if mibBuilder.loadTexts: iCAaltTab2.setDescription('ICAStatusDialog')
iCAaltBackTab = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 12, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ctrl", 0), ("shift", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iCAaltBackTab.setStatus('mandatory')
if mibBuilder.loadTexts: iCAaltBackTab.setDescription('ICAStatusDialog')
iCAaltBackTab2 = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 12, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("nb-0", 0), ("nb-1", 1), ("nb-2", 2), ("nb-3", 3), ("nb-4", 4), ("nb-5", 5), ("nb-6", 6), ("nb-7", 7), ("nb-8", 8), ("nb-9", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iCAaltBackTab2.setStatus('mandatory')
if mibBuilder.loadTexts: iCAaltBackTab2.setDescription('ICAStatusDialog')
wbt3ConnectionsTable = MibTable((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 2), )
if mibBuilder.loadTexts: wbt3ConnectionsTable.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3ConnectionsTable.setDescription("A list of connection entries. The number of entries is the number of existing connections plus one. The last entry is a dummy entry reserved for new connection creation. wbt3ConnectionName for this dummy entry is 'Not Defined'.")
wbt3ConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 2, 1), ).setIndexNames((0, "WYSE-MIB", "wbt3ConnectionName"))
if mibBuilder.loadTexts: wbt3ConnectionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3ConnectionEntry.setDescription('A connection entry containing objects describing this connection. wbt3ConnectionName is the instance identifier for wbt3ConnectionEntry')
wbt3ConnectionName = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3ConnectionName.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3ConnectionName.setDescription('Name of the connection. This object is served as instance identifier for the connection entry. Therefore value for this object must be unique among all entries. Maximum length depends on wbt3ConnectionType. (37 for RDP wbt3ConnectionType; 32 for ICA wbt3ConnectionType; 42 for TEC wbt3ConnectionType; 20 for DialUp wbt3ConnectionType)')
wbt3ConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("rdp", 0), ("ica", 1), ("tec", 2), ("dialup", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3ConnectionType.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3ConnectionType.setDescription('Type of the connection. This object can be modified when the associated wbt3ConnectionEntryStatus is notInService. ')
wbt3ConnectionEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3ConnectionEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3ConnectionEntryStatus.setDescription("Status of this connection entry. This object is used to manage the creation and deletion of the wbt3ConnectionEntry. State machine for this object is compliant to RFC1903, definition of textual conventions for RowStatus. This object may not be set to 'active' unless the wbt3ConnectionName is set. active - this is an existing connection saved in permanent storage. Values of fields within this table entry are not allowed to modified while it is active. To modify fields within this table entry, take the entry to 'notInService' state first. notInService - this is a connection entry exists in the thinclient's temporary memory, but is unavailable for use by the thinclient device. Entry must be put in this state before modification to other fields (except wbt3ConnectionName) can be made. Changes to wbt3ConnectionName is NOT allowed. To modify the name of an existing connection, delete the connection by setting wbt3ConnectionEntryStatus to 'destroy', then create a new connection with the new name by following the description for status 'notReady', 'createAndGo' or 'createAndWait' as specified below. A management device has to set the wbt3ConnectionEntryStatus to 'active' to activate the connection entry. Entries remaining in notInService state for an excessive period of time will be removed to free up resource in the thinclient device. Entries in this state will not be retained after reboot. notReady - this is a dummy connection defined to facilitate creation of new entry. An administrator can create a new connection by modifying wbt3ConnectionName of this entry to a name which does not currently exist in wbt3ConnectionsTable. This will put the entry in notInService state. An administrator can then put the connection in permanent storage by changing wbt3ConnectionEntryStatus to 'active'. Note that the assigned connection name CANNOT be an empty or 'Not Defined' string. createAndGo - This status is supplied by a management station wishing to create a new instance of a connection entry and to have its status automatically set to active, making it available for use by the thinclient device. wbt3ConnectionName MUST be supplied in the same PDU which set wbt3connectionEntryStatus to 'createAndGo'. createAndWait - This status is supplied by a management station wishing to create a new instance of a connection entry (but not make it immediately available for use by the thinclient device). destroy - an administrator can delete an existing connection by setting this object of target entry to 'destroy'.")
wbt3RDPConnections = MibIdentifier((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 3))
wbt3RDPConnTable = MibTable((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 3, 1), )
if mibBuilder.loadTexts: wbt3RDPConnTable.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3RDPConnTable.setDescription('A table of connections, number of entries is the number of entries in wbt3ConnectionTable which has wbt3ConnectionEntryStatus=active or notInService, and wbt3ConnectionType=RDP.')
wbt3RDPConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 3, 1, 1), )
if mibBuilder.loadTexts: wbt3RDPConnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3RDPConnEntry.setDescription('A RDP connection entry containing objects describing this connection. wbt3RDPConnName is the instance identifier for wbt3RDPConnEntry')
wbt3RDPConnName = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 3, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3RDPConnName.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3RDPConnName.setDescription('Name of the RDP connection. This object is served as instance identifier for the RDPConnEntry. Value for this object is unique among all entries.')
wbt3RDPConnServer = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 3, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3RDPConnServer.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3RDPConnServer.setDescription("Host server name or IP address the RDP Client connects to. Maximum length is 32. This object is modifiable only when wbt3RDPConnModifiable is 'Yes'.")
wbt3RDPConnLowSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3RDPConnLowSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3RDPConnLowSpeed.setDescription("Using low speed connection. This object is modifiable only when wbt3RDPConnModifiable is 'Yes'.")
wbt3RDPConnAutoLogon = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3RDPConnAutoLogon.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3RDPConnAutoLogon.setDescription("Enable RDP automatic logon. This object is modifiable only when wbt3RDPConnModifiable is 'Yes'.")
wbt3RDPConnUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 3, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3RDPConnUsername.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3RDPConnUsername.setDescription("Specify the user name to atomatically logon to host. Maximum length is 32. This object is modifiable only when wbt3RDPConnModifiable is 'Yes'.")
wbt3RDPConnDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 3, 1, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3RDPConnDomain.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3RDPConnDomain.setDescription("Domain name of host server. Maximum length is 80. This object is modifiable only when wbt3RDPConnModifiable is 'Yes'.")
wbt3RDPConnStartApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("desktop", 0), ("filename", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3RDPConnStartApplication.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3RDPConnStartApplication.setDescription("Select application starts up at connection. 0 = Desktop, 2 = select File name radio button. This object is modifiable only when wbt3RDPConnModifiable is 'Yes'.")
wbt3RDPConnFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 3, 1, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3RDPConnFilename.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3RDPConnFilename.setDescription("Name of the application to start. Maximum length is 80. This object is modifiable only when wbt3RDPConnModifiable is 'Yes'.")
wbt3RDPConnWorkingDir = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 3, 1, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3RDPConnWorkingDir.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3RDPConnWorkingDir.setDescription("Application working directory. Maximum length is 80. This object is modifiable only when wbt3RDPConnModifiable is 'Yes'.")
wbt3RDPConnModifiable = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 3, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3RDPConnModifiable.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3RDPConnModifiable.setDescription("Indicate whether objects within this entry is modifiable currently. Objects are modifiable if wbt3ConnectionEntryStatus of associated connection entry in wbt3ConnectionsTable is in 'notInService'.")
wbt3ICAConnections = MibIdentifier((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 4))
wbt3ICAConnTable = MibTable((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 4, 1), )
if mibBuilder.loadTexts: wbt3ICAConnTable.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3ICAConnTable.setDescription('A table of ICA connections, number of entries is the number of entries in wbt3ConnectionTable which has wbt3ConnectionEntryStatus=active or notInService, and wbt3ConnectionType=ICA.')
wbt3ICAConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 4, 1, 1), )
if mibBuilder.loadTexts: wbt3ICAConnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3ICAConnEntry.setDescription('A ICA connection entry containing objects describing this connection. wbt3ICAConnName is the instance identifier for wbt3ICAConnEntry')
wbt3ICAConnName = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 4, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3ICAConnName.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3ICAConnName.setDescription('Name of the ICA connection. This object is served as instance identifier for the ICAConnEntry. Value for this object is unique among all entries.')
wbt3ICAConnCommType = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("network", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3ICAConnCommType.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3ICAConnCommType.setDescription('Communication media this connection uses.')
wbt3ICAConnServer = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 4, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3ICAConnServer.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3ICAConnServer.setDescription("IP address or name of ICA server connect to. Maximum length is 63. This object is modifiable only when wbt3RDPConnModifiable is 'Yes'.")
wbt3ICAConnCommandLine = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 4, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3ICAConnCommandLine.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3ICAConnCommandLine.setDescription("Command line to be launched once this ICA connection is brought up. Maximum length is 80. This object is modifiable only when wbt3RDPConnModifiable is 'Yes'.")
wbt3ICAConnWorkingDir = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 4, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3ICAConnWorkingDir.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3ICAConnWorkingDir.setDescription("Working Directory to be used for this ICA. Maximum length is 80. This object is modifiable only when wbt3RDPConnModifiable is 'Yes'.")
wbt3ICAConnUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 4, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3ICAConnUsername.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3ICAConnUsername.setDescription("User name to be used to log on to ICA server. Maximum length is 19. This object is modifiable only when wbt3RDPConnModifiable is 'Yes'.")
wbt3ICAConnDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 4, 1, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3ICAConnDomain.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3ICAConnDomain.setDescription("Domain name to be used to log on to ICA server. Maximum length is 16. This object is modifiable only when wbt3RDPConnModifiable is 'Yes'.")
wbt3ICAConnColors = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nb-16", 0), ("nb-256", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3ICAConnColors.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3ICAConnColors.setDescription("Specify 16/256 window colors. This object is modifiable only when wbt3RDPConnModifiable is 'Yes'.")
wbt3ICAConnDataCompress = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3ICAConnDataCompress.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3ICAConnDataCompress.setDescription("Enable/Disable Data compression for this ICA session. This object is modifiable only when wbt3RDPConnModifiable is 'Yes'.")
wbt3ICAConnSoundQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("low", 1), ("medium", 2), ("high", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3ICAConnSoundQuality.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3ICAConnSoundQuality.setDescription("Set sound quality for this ICA session, None to disable sound. This object is modifiable only when wbt3RDPConnModifiable is 'Yes'.")
wbt3ICAConnModifiable = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 4, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3ICAConnModifiable.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3ICAConnModifiable.setDescription("Indicate whether objects within this entry is modifiable currently. Objects are modifiable if wbt3ConnectionEntryStatus of associated connection entry in wbt3ConnectionsTable is in 'notInService'.")
wbt3TermConnections = MibIdentifier((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 5))
wbt3TermConnTable = MibTable((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 5, 1), )
if mibBuilder.loadTexts: wbt3TermConnTable.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3TermConnTable.setDescription('A table of Terminal Emulation connections, number of entries is the number of entries in wbt3ConnectionTable which has wbt3ConnectionEntryStatus=active or notInService, and wbt3ConnectionType=TEC.')
wbt3TermConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 5, 1, 1), )
if mibBuilder.loadTexts: wbt3TermConnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3TermConnEntry.setDescription('A terminal emulation connection entry containing objects describing this connection. wbt3TermConnName is the instance identifier for wbt3TermConnEntry')
wbt3TermConnName = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 5, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3TermConnName.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3TermConnName.setDescription('A unique name for the Terminal Emulation configuration entry. Maximum length is 42')
wbt3TermConnCommType = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("network", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3TermConnCommType.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3TermConnCommType.setDescription('Communication media this connection uses.')
wbt3TermConnServer = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 5, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3TermConnServer.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3TermConnServer.setDescription("IP address or host name of terminal server connect to. Maximum length is 60. This object is modifiable only when wbt3TermConnModifiable is 'Yes'.")
wbt3TermConnEmuType = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("vt52", 0), ("vt100", 1), ("vt400-7-bit", 3), ("vt400-8-bit", 4), ("ansi-bbs", 5), ("sco-console", 6), ("ibm3270", 7), ("ibm3151", 8), ("ibm5250", 9), ("wy50", 10), ("wy50-plus", 11), ("tvi910", 12), ("tvi920", 13), ("tvi925", 14), ("adds-a2", 15), ("hz1500", 16), ("wy60", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3TermConnEmuType.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3TermConnEmuType.setDescription("Emulation mode for this connection. This object is modifiable only when wbt3TermConnModifiable is 'Yes'.")
wbt3TermConnVTEmuModel = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 256))).clone(namedValues=NamedValues(("vt100", 0), ("vt101", 1), ("vt102", 2), ("vt125", 3), ("vt220", 4), ("vt240", 5), ("vt320", 6), ("vt340", 7), ("vt420", 8), ("vt131", 9), ("vt132", 10), ("not-applicable", 256)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3TermConnVTEmuModel.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3TermConnVTEmuModel.setDescription("Terminal model uses for this connection. This field represents the VT Terminal ID. This object is modifiable only when wbt3TermConnModifiable is 'Yes'.")
wbt3TermConnIBM3270EmuModel = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 256))).clone(namedValues=NamedValues(("ibm3278-2", 0), ("ibm3278-3", 1), ("ibm3278-4", 2), ("ibm3278-5", 3), ("ibm3278-2-e", 4), ("ibm3278-3-e", 5), ("ibm3278-4-e", 6), ("ibm3278-5-e", 7), ("ibm3279-2", 8), ("ibm3279-3", 9), ("ibm3279-4", 10), ("ibm3279-5", 11), ("ibm3287-1", 12), ("not-applicable", 256)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3TermConnIBM3270EmuModel.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3TermConnIBM3270EmuModel.setDescription("IBM 3270 terminal emulation models. This object is valid only when wbt3TermConnEmuType = IBM3270. This object is modifiable only when wbt3TermConnModifiable is 'Yes'.")
wbt3TermConnIBM5250EmuModel = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 256))).clone(namedValues=NamedValues(("ibm5291-1", 0), ("ibm5292-2", 1), ("ibm5251-11", 2), ("ibm3179-2", 3), ("ibm3196-a1", 4), ("ibm3180-2", 5), ("ibm3477-fc", 6), ("ibm3477-fg", 7), ("ibm3486-ba", 8), ("ibm3487-ha", 9), ("ibm3487-hc", 10), ("not-applicable", 256)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3TermConnIBM5250EmuModel.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3TermConnIBM5250EmuModel.setDescription("IBM 5250 terminal emulation models. This object is valid only when wbt3TermConnEmuType = IBM5250. This object is modifiable only when wbt3TermConnModifiable is 'Yes'.")
wbt3TermConnPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3TermConnPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3TermConnPortNumber.setDescription("Telnet port number used for this connection. This object is modifiable only when wbt3TermConnModifiable is 'Yes'.")
wbt3TermConnTelnetName = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 5, 1, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3TermConnTelnetName.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3TermConnTelnetName.setDescription("Name of this telnet session. Maximum length is 39. This object is modifiable only when wbt3TermConnModifiable is 'Yes'.")
wbt3TermConnPrinterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("lpt1", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3TermConnPrinterPort.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3TermConnPrinterPort.setDescription("Printer port assigned to this connection. This object is modifiable only when wbt3TermConnModifiable is 'Yes'.")
wbt3TermConnFormFeed = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3TermConnFormFeed.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3TermConnFormFeed.setDescription("Use Form Feed terminator for printing. This object is modifiable only when wbt3TermConnModifiable is 'Yes'.")
wbt3TermConnAutoLineFeed = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3TermConnAutoLineFeed.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3TermConnAutoLineFeed.setDescription("Use Auto line Feed for printing. This object is modifiable only when wbt3TermConnModifiable is 'Yes'.")
wbt3TermConnScript = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 5, 1, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3TermConnScript.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3TermConnScript.setDescription("Script for this terminal emulation. Script syntax: Use back slash (\\) to separate between 2 script commands, each script command has 2 entries (Act on and Send), Use semi column (;) to separate 2 entries. Samples: Login;<CR> or Login;<CR><D>\\Username,<U> Send entry syntax: C.return = <CR> Delay (2s) = <D> Line Feed = <LF> Password = <PW> Pause (0.255) = <P> UserName = <UN>. Maximum length is 256. This object is modifiable only when wbt3TermConnModifiable is 'Yes'.")
wbt3TermConnModifiable = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 13, 5, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wbt3TermConnModifiable.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3TermConnModifiable.setDescription("Indicate whether objects within this entry is modifiable currently. Objects are modifiable if wbt3ConnectionEntryStatus of associated connection entry in wbt3ConnectionsTable is in 'notInService'.")
wbt3UsersTable = MibTable((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 14, 2), )
if mibBuilder.loadTexts: wbt3UsersTable.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3UsersTable.setDescription("A list of user accounts. The number of entries is the number of existing user accounts plus one. The last entry is a dummy entry reserved for new user account creation. wbt3userName for this dummy entry is 'Not Defined'.")
wbt3UsersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 14, 2, 1), ).setIndexNames((0, "WYSE-MIB", "wbt3userName"))
if mibBuilder.loadTexts: wbt3UsersEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3UsersEntry.setDescription('A user account entry containing objects describing this user. wbt3userName is the instance identifier for wbt3UsersEntry')
wbt3UsersStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 14, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3UsersStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3UsersStatus.setDescription("Status of this user account entry. This object is used to manage the creation and deletion of the wbt3UsersEntry. State machine for this object is compliant to RFC1903, definition of textual conventions for RowStatus. This object may not be set to 'active' unless the wbt3UserName is set. active - this is an existing user account saved in permanent storage. Values of fields within this table entry are not allowed to modified while it is active. To modify fields within this table entry, take the entry to 'notInService' state first. notInService - this is a user account entry exists in the thinclient's temporary memory, but is unavailable for use by the thinclient device. Entry must be put in this state before modification to other fields (except wbt3UserName) can be made. Changes to wbt3UserName is NOT allowed. To modify the name of an existing user account, delete the user account by setting wbt3UsersStatus to 'destroy', then create a new user account with the new name by following the description for status 'notReady', 'createAndGo' or 'createAndWait' as specified below. A management device has to set the wbt3UsersStatus to 'active' to activate the user account. Entries remaining in notInService state for an excessive period of time will be removed to free up resource in the thinclient device. Entries in this state will not be retained after reboot. notReady - this is a dummy user account defined to facilitate creation of new entry. An administrator can create a new user account by modifying wbt3UserName of this entry to a name which does not currently exist in wbt3UsersTable. This will put the entry in notInService state. An administrator can then put the user account in permanent storage by changing wbt3UsersStatus to 'active'. Note that the assigned user account name CANNOT be an empty or 'Not Defined' string. createAndGo - This status is supplied by a management station wishing to create a new instance of a user account and to have its status automatically set to active, making it available for use by the thinclient device. wbt3UserName MUST be supplied in the same PDU which set wbt3UsersStatus to 'createAndGo'. createAndWait - This status is supplied by a management station wishing to create a new instance of a user account. (but not make it immediately available for use by the thinclient device). destroy - an administrator can delete an existing user account by setting this object of target entry to 'destroy'. Note that the default administrator account with name 'Administrator' that is built in to the terminal cannot be deleted.")
wbt3userName = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 14, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3userName.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3userName.setDescription('Name of this user. This object is served as instance identifier for the user account entry. Therefore value for this object must be unique among all entries. Maximum length is 20.')
wbt3password = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 14, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3password.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3password.setDescription("The password for this user account. Maximum length is 20. This object can be modified only when the associated wbt3UsersStatus is 'notInService'. ")
wbt3privilege = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 14, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("admin", 0), ("user", 1), ("guest", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3privilege.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3privilege.setDescription("Indicates whether the user has extended, normal, or restricted rights on this terminal. Note that the privilege of the default administrator account (with name 'Administrator') cannot be modifed. For all other accounts, this object can be modified only when the associated wbt3UsersStatus is 'notInService'. ")
wbt3Connection1 = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 14, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3Connection1.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3Connection1.setDescription("Name of a connection associated with this user. The connection name has to match the value in wbt3ConnectionName of one of the entries in wbt3ConnectionsTable that is in an 'active' state. That is, the connection specified has to exist and be currently activated. Set this object to an empty string to dis-associate a connection from the user. For a user account that has Administrator privilege, all existing connections are associated with the user automatically. Therefore this object is not modifiable if wbt3privilege is 'Admin'. For accounts with User or Guest privilege, this object can be modified only when the associated wbt3UsersStatus is 'notInService'. ")
wbt3Connection2 = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 14, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3Connection2.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3Connection2.setDescription("Name of a connection associated with this user. The connection name has to match the value in wbt3ConnectionName of one of the entries in wbt3ConnectionsTable that is in an 'active' state. That is, the connection specified has to exist and be currently activated. Set this object to an empty string to dis-associate a connection from the user. For a user account that has Administrator privilege, all existing connections are associated with the user automatically. Therefore this object is not modifiable if wbt3privilege is 'Admin'. For accounts with User or Guest privilege, this object can be modified only when the associated wbt3UsersStatus is 'notInService'. ")
wbt3Connection3 = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 14, 2, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3Connection3.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3Connection3.setDescription("Name of a connection associated with this user. The connection name has to match the value in wbt3ConnectionName of one of the entries in wbt3ConnectionsTable that is in an 'active' state. That is, the connection specified has to exist and be currently activated. Set this object to an empty string to dis-associate a connection from the user. For a user account that has Administrator privilege, all existing connections are associated with the user automatically. Therefore this object is not modifiable if wbt3privilege is 'Admin'. For accounts with User or Guest privilege, this object can be modified only when the associated wbt3UsersStatus is 'notInService'. ")
wbt3Connection4 = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 14, 2, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3Connection4.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3Connection4.setDescription("Name of a connection associated with this user. The connection name has to match the value in wbt3ConnectionName of one of the entries in wbt3ConnectionsTable that is in an 'active' state. That is, the connection specified has to exist and be currently activated. Set this object to an empty string to dis-associate a connection from the user. For a user account that has Administrator privilege, all existing connections are associated with the user automatically. Therefore this object is not modifiable if wbt3privilege is 'Admin'. For accounts with User or Guest privilege, this object can be modified only when the associated wbt3UsersStatus is 'notInService'. ")
wbt3Connection5 = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 14, 2, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3Connection5.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3Connection5.setDescription("Name of a connection associated with this user. The connection name has to match the value in wbt3ConnectionName of one of the entries in wbt3ConnectionsTable that is in an 'active' state. That is, the connection specified has to exist and be currently activated. Set this object to an empty string to dis-associate a connection from the user. For a user account that has Administrator privilege, all existing connections are associated with the user automatically. Therefore this object is not modifiable if wbt3privilege is 'Admin'. For accounts with User or Guest privilege, this object can be modified only when the associated wbt3UsersStatus is 'notInService'. ")
wbt3Connection6 = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 14, 2, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3Connection6.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3Connection6.setDescription("Name of a connection associated with this user. The connection name has to match the value in wbt3ConnectionName of one of the entries in wbt3ConnectionsTable that is in an 'active' state. That is, the connection specified has to exist and be currently activated. Set this object to an empty string to dis-associate a connection from the user. For a user account that has Administrator privilege, all existing connections are associated with the user automatically. Therefore this object is not modifiable if wbt3privilege is 'Admin'. For accounts with User or Guest privilege, this object can be modified only when the associated wbt3UsersStatus is 'notInService'. ")
wbt3Connection7 = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 14, 2, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3Connection7.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3Connection7.setDescription("Name of a connection associated with this user. The connection name has to match the value in wbt3ConnectionName of one of the entries in wbt3ConnectionsTable that is in an 'active' state. That is, the connection specified has to exist and be currently activated. Set this object to an empty string to dis-associate a connection from the user. For a user account that has Administrator privilege, all existing connections are associated with the user automatically. Therefore this object is not modifiable if wbt3privilege is 'Admin'. For accounts with User or Guest privilege, this object can be modified only when the associated wbt3UsersStatus is 'notInService'. ")
wbt3Connection8 = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 14, 2, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3Connection8.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3Connection8.setDescription("Name of a connection associated with this user. The connection name has to match the value in wbt3ConnectionName of one of the entries in wbt3ConnectionsTable that is in an 'active' state. That is, the connection specified has to exist and be currently activated. Set this object to an empty string to dis-associate a connection from the user. For a user account that has Administrator privilege, all existing connections are associated with the user automatically. Therefore this object is not modifiable if wbt3privilege is 'Admin'. For accounts with User or Guest privilege, this object can be modified only when the associated wbt3UsersStatus is 'notInService'. ")
wbt3AutoStart1 = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 14, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3AutoStart1.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3AutoStart1.setDescription("Setting this object to 'Yes' enable automatic launch of connection specified in wbt3Connection1 object when the user logs on. This object cannot be modified if wbt3Connection1 is empty string. Also, this object can be modified only when the associated wbt3UsersStatus is 'notInService'. ")
wbt3AutoStart2 = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 14, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3AutoStart2.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3AutoStart2.setDescription("Setting this object to 'Yes' enable automatic launch of connection specified in wbt3Connection2 object when the user logs on. This object cannot be modified if wbt3Connection2 is empty string. Also, this object can be modified only when the associated wbt3UsersStatus is 'notInService'. ")
wbt3AutoStart3 = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 14, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3AutoStart3.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3AutoStart3.setDescription("Setting this object to 'Yes' enable automatic launch of connection specified in wbt3Connection3 object when the user logs on. This object cannot be modified if wbt3Connection3 is empty string. Also, this object can be modified only when the associated wbt3UsersStatus is 'notInService'. ")
wbt3AutoStart4 = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 14, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3AutoStart4.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3AutoStart4.setDescription("Setting this object to 'Yes' enable automatic launch of connection specified in wbt3Connection4 object when the user logs on. This object cannot be modified if wbt3Connection4 is empty string. Also, this object can be modified only when the associated wbt3UsersStatus is 'notInService'. ")
wbt3AutoStart5 = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 14, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3AutoStart5.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3AutoStart5.setDescription("Setting this object to 'Yes' enable automatic launch of connection specified in wbt3Connection5 object when the user logs on. This object cannot be modified if wbt3Connection5 is empty string. Also, this object can be modified only when the associated wbt3UsersStatus is 'notInService'. ")
wbt3AutoStart6 = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 14, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3AutoStart6.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3AutoStart6.setDescription("Setting this object to 'Yes' enable automatic launch of connection specified in wbt3Connection6 object when the user logs on. This object cannot be modified if wbt3Connection6 is empty string. Also, this object can be modified only when the associated wbt3UsersStatus is 'notInService'. ")
wbt3AutoStart7 = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 14, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3AutoStart7.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3AutoStart7.setDescription("Setting this object to 'Yes' enable automatic launch of connection specified in wbt3Connection7 object when the user logs on. This object cannot be modified if wbt3Connection7 is empty string. Also, this object can be modified only when the associated wbt3UsersStatus is 'notInService'. ")
wbt3AutoStart8 = MibScalar((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 14, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3AutoStart8.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3AutoStart8.setDescription("Setting this object to 'Yes' enable automatic launch of connection specified in wbt3Connection8 object when the user logs on. This object cannot be modified if wbt3Connection8 is empty string. Also, this object can be modified only when the associated wbt3UsersStatus is 'notInService'. ")
wbt3UserPasswordChange = MibTableColumn((1, 3, 6, 1, 4, 1, 714, 1, 2, 3, 14, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wbt3UserPasswordChange.setStatus('mandatory')
if mibBuilder.loadTexts: wbt3UserPasswordChange.setDescription("Indicates this user has privilege to change the password. For administrator, the password change is always on and cannot be set. For guest account, the password change is always off and cannot be set. For user account, the password change can be set on/off. Also, this object can be modified only when the associated wbt3UsersStatus is 'notInService'. ")
wbt3TrapDHCPBuildMismatch = NotificationType((1, 3, 6, 1, 4, 1, 714, 1, 2, 3) + (0,1)).setObjects(("WYSE-MIB", "wbt3CurBuildNum"), ("WYSE-MIB", "wbt3CurOEMBuildNum"), ("WYSE-MIB", "wbt3CurModBuildDate"), ("WYSE-MIB", "wbt3DUpBuildNum"), ("WYSE-MIB", "wbt3DUpOEMBuildNum"), ("WYSE-MIB", "wbt3DUpOEMBuildDate"))
if mibBuilder.loadTexts: wbt3TrapDHCPBuildMismatch.setDescription('Firmware build number mismatch according to information supplied by DHCP server.')
wbt3TrapDHCPUpdDone = NotificationType((1, 3, 6, 1, 4, 1, 714, 1, 2, 3) + (0,2)).setObjects(("WYSE-MIB", "wbt3CurBuildNum"), ("WYSE-MIB", "wbt3CurOEMBuildNum"), ("WYSE-MIB", "wbt3CurModBuildDate"), ("WYSE-MIB", "wbt3DUpBuildNum"), ("WYSE-MIB", "wbt3DUpOEMBuildNum"), ("WYSE-MIB", "wbt3DUpOEMBuildDate"))
if mibBuilder.loadTexts: wbt3TrapDHCPUpdDone.setDescription('Firmware upgrade initiated due to build number mismatch according to DHCP information is done.')
wbt3TrapDHCPUpdNotComplete = NotificationType((1, 3, 6, 1, 4, 1, 714, 1, 2, 3) + (0,3)).setObjects(("WYSE-MIB", "wbt3CurBuildNum"), ("WYSE-MIB", "wbt3CurOEMBuildNum"), ("WYSE-MIB", "wbt3CurModBuildDate"), ("WYSE-MIB", "wbt3DUpBuildNum"), ("WYSE-MIB", "wbt3DUpOEMBuildNum"), ("WYSE-MIB", "wbt3DUpOEMBuildDate"), ("WYSE-MIB", "wbt3TrapStatus"))
if mibBuilder.loadTexts: wbt3TrapDHCPUpdNotComplete.setDescription('Firmware upgrade initiated due to build number mismatch according to DHCP information is not completed for some reason.')
wbt3TrapSNMPAccptLd = NotificationType((1, 3, 6, 1, 4, 1, 714, 1, 2, 3) + (0,4)).setObjects(("WYSE-MIB", "wbt3SubmitLoadJob"))
if mibBuilder.loadTexts: wbt3TrapSNMPAccptLd.setDescription('Ready to accept up/download request initiated by SNMP manager.')
wbt3TrapSNMPLdDone = NotificationType((1, 3, 6, 1, 4, 1, 714, 1, 2, 3) + (0,5)).setObjects(("WYSE-MIB", "wbt3TrapReqId"))
if mibBuilder.loadTexts: wbt3TrapSNMPLdDone.setDescription('SNMP initiated up/download request is done.')
wbt3TrapSNMPLdNotComplete = NotificationType((1, 3, 6, 1, 4, 1, 714, 1, 2, 3) + (0,6)).setObjects(("WYSE-MIB", "wbt3TrapReqId"), ("WYSE-MIB", "wbt3TrapStatus"))
if mibBuilder.loadTexts: wbt3TrapSNMPLdNotComplete.setDescription('SNMP initiated up/download request is not completed for some reason.')
wbt3TrapRebootNotComplete = NotificationType((1, 3, 6, 1, 4, 1, 714, 1, 2, 3) + (0,7)).setObjects(("WYSE-MIB", "wbt3TrapStatus"))
if mibBuilder.loadTexts: wbt3TrapRebootNotComplete.setDescription('SNMP initiated reboot request is not completed for some reason.')
mibBuilder.exportSymbols("WYSE-MIB", wbt3FailOverEnable=wbt3FailOverEnable, wbt3ResetToFactoryDefault=wbt3ResetToFactoryDefault, wbt3TrapServer3=wbt3TrapServer3, iCAaltEsc=iCAaltEsc, wbt3CustomField1=wbt3CustomField1, wbt3TermConnEntry=wbt3TermConnEntry, wbt3TermConnPortNumber=wbt3TermConnPortNumber, wbt3ConnectionType=wbt3ConnectionType, wbt3TrapDHCPUpdNotComplete=wbt3TrapDHCPUpdNotComplete, workingDirectory=workingDirectory, iCAaltEsc2=iCAaltEsc2, wbt3UpDnLoadTimeFlag=wbt3UpDnLoadTimeFlag, wbt3AutoFailRecovery=wbt3AutoFailRecovery, wbt3UserPasswordChange=wbt3UserPasswordChange, wbt3AutoStart7=wbt3AutoStart7, wbt3defaultDomain=wbt3defaultDomain, wbt3RomTable=wbt3RomTable, wbt3RomEntry=wbt3RomEntry, wbt3TrapDHCPBuildMismatch=wbt3TrapDHCPBuildMismatch, wbt3DispHorizPixMax=wbt3DispHorizPixMax, rDPStartupApp=rDPStartupApp, wbt3Users=wbt3Users, wbt3RomType=wbt3RomType, wbt3CurOEMBuildNum=wbt3CurOEMBuildNum, wbt3FTPsetting=wbt3FTPsetting, commandLine=commandLine, wbt3DispVertPix=wbt3DispVertPix, wbt3UpDnLoadDstFile=wbt3UpDnLoadDstFile, wbt3NetworkNum=wbt3NetworkNum, wbt3RDPConnections=wbt3RDPConnections, wbt3ICAConnDomain=wbt3ICAConnDomain, wbt3Verbose=wbt3Verbose, wbt3TermConnVTEmuModel=wbt3TermConnVTEmuModel, wbt3SetCommunity=wbt3SetCommunity, wbt3RDPConnFilename=wbt3RDPConnFilename, wbt3DUpOEMBuildDate=wbt3DUpOEMBuildDate, iCActrlEsc2=iCActrlEsc2, wbt3DhcpInfoTable=wbt3DhcpInfoTable, wbt3TrapServer1=wbt3TrapServer1, wbt3VirtualPortServer=wbt3VirtualPortServer, wbt3ServerName=wbt3ServerName, wbt3InterfaceNum=wbt3InterfaceNum, wbt3AutoStart3=wbt3AutoStart3, iCAtoggleTitleBar=iCAtoggleTitleBar, wbt3TrapDHCPUpdDone=wbt3TrapDHCPUpdDone, iCAStatusDialog=iCAStatusDialog, wbt3PCCardVendor=wbt3PCCardVendor, wbt3DhcpInfoEntry=wbt3DhcpInfoEntry, wysenet=wysenet, wbt3ICAConnTable=wbt3ICAConnTable, wbt3dhcpEnable=wbt3dhcpEnable, logonUserName=logonUserName, wbt3RamNum=wbt3RamNum, wbt3UsersEntry=wbt3UsersEntry, wbt3=wbt3, wbt3RamSize=wbt3RamSize, wbt3TrapSNMPLdNotComplete=wbt3TrapSNMPLdNotComplete, wbt3Action=wbt3Action, wbt3TermConnPrinterPort=wbt3TermConnPrinterPort, wyse=wyse, wbt3CurInfoIndex=wbt3CurInfoIndex, wbt3AutoLoginEnable=wbt3AutoLoginEnable, wbt3InfoLocation=wbt3InfoLocation, wbt3NetworkEntry=wbt3NetworkEntry, iCACloseRemoteApplication2=iCACloseRemoteApplication2, wbt3TermConnIBM3270EmuModel=wbt3TermConnIBM3270EmuModel, wbt3DispUseDDC=wbt3DispUseDDC, wbt3primaryWINSserverIPaddress=wbt3primaryWINSserverIPaddress, wbt3PCCardType=wbt3PCCardType, iCACloseRemoteApplication=iCACloseRemoteApplication, wbt3DispCharacteristic=wbt3DispCharacteristic, wbt3DUpBuildNum=wbt3DUpBuildNum, iCAaltBackTab=iCAaltBackTab, wbt3TermConnEmuType=wbt3TermConnEmuType, wbt3CharacterRepeatRate=wbt3CharacterRepeatRate, wbt3winsEnable=wbt3winsEnable, wbt3privilege=wbt3privilege, wbt3Connection7=wbt3Connection7, wbt3Domain=wbt3Domain, wbt3TermConnModifiable=wbt3TermConnModifiable, product=product, wbt3CustomField2=wbt3CustomField2, wbt3Connection6=wbt3Connection6, wbt3CharacterRepeatDelay=wbt3CharacterRepeatDelay, wbt3DhcpInfoIndex=wbt3DhcpInfoIndex, wbt3NetworkIndex=wbt3NetworkIndex, wbt3com1Share=wbt3com1Share, wbt3ICAConnCommType=wbt3ICAConnCommType, wbt3HideConfigTab=wbt3HideConfigTab, wbt3DUpInfoIndex=wbt3DUpInfoIndex, wbt3NetworkTable=wbt3NetworkTable, emulationMode=emulationMode, wbt3UpDnLoadSrcFile=wbt3UpDnLoadSrcFile, wbt3AutoStart2=wbt3AutoStart2, wbt3Password=wbt3Password, wbt3DhcpUpdateInfo=wbt3DhcpUpdateInfo, wbt3ConnectionEntryStatus=wbt3ConnectionEntryStatus, wbt3Gateway=wbt3Gateway, wbt3CurOEM=wbt3CurOEM, wbt3UpDnLoad=wbt3UpDnLoad, wbt3TermConnFormFeed=wbt3TermConnFormFeed, wbt3MibRevMinor=wbt3MibRevMinor, wbt3NetworkAddress=wbt3NetworkAddress, remoteServer=remoteServer, wbt3ICAConnDataCompress=wbt3ICAConnDataCompress, wbt3ICAConnUsername=wbt3ICAConnUsername, wbt3UpDnLoadFileType=wbt3UpDnLoadFileType, defaultHotkeysEntry=defaultHotkeysEntry, wbt3ScreenTimeOut=wbt3ScreenTimeOut, wbt3TermConnServer=wbt3TermConnServer, wbt3CustomFields=wbt3CustomFields, wbt3FileServer=wbt3FileServer, wbt3SavePassword=wbt3SavePassword, wbt3AutoStart5=wbt3AutoStart5, wbt3CurrentInfo=wbt3CurrentInfo, wbt3secondaryWINSserverIPaddress=wbt3secondaryWINSserverIPaddress, wbt3VirtualPortServerIPaddress=wbt3VirtualPortServerIPaddress, wbt3CurOS=wbt3CurOS, wbt3DispCapability=wbt3DispCapability, wbt3Username=wbt3Username, wbt3SecurityEnable=wbt3SecurityEnable, old=old, wbt3kbLanguage=wbt3kbLanguage, wbt3Connections=wbt3Connections, wbt3CurBuildNum=wbt3CurBuildNum, iCAtoggleTitleBar2=iCAtoggleTitleBar2, wbt3ICAConnColors=wbt3ICAConnColors, wbt3MibRev=wbt3MibRev, wbt3ICAConnServer=wbt3ICAConnServer, setCommunity=setCommunity, wbt3Security=wbt3Security, wbt3primaryDNSserverIPaddress=wbt3primaryDNSserverIPaddress, wbt3UpDnLoadFServer=wbt3UpDnLoadFServer, wbt3Password2=wbt3Password2, virtualPortServer=virtualPortServer, wbt3CommandLine=wbt3CommandLine, wbt3RDPencryption=wbt3RDPencryption, wbt3RamTable=wbt3RamTable, wbt3RomIndex=wbt3RomIndex, wbt3Connection2=wbt3Connection2, wbt3Connection8=wbt3Connection8, wbt3TrapServer4=wbt3TrapServer4, wbt3AutoLoginUserName=wbt3AutoLoginUserName, wbt3CustomField3=wbt3CustomField3, wbt3DhcpInfoNum=wbt3DhcpInfoNum, wbt3RDPConnDomain=wbt3RDPConnDomain, wbt3Apps=wbt3Apps, wbt3ICAConnModifiable=wbt3ICAConnModifiable, wbt3TermConnAutoLineFeed=wbt3TermConnAutoLineFeed, wbt3UpDnLoadNum=wbt3UpDnLoadNum, wbt3TrapServer2=wbt3TrapServer2, wbt3ICAConnCommandLine=wbt3ICAConnCommandLine, wbt3Rom=wbt3Rom, wbt3MultipleConnect=wbt3MultipleConnect, wbt3Connection4=wbt3Connection4, wbt3CurInfoEntry=wbt3CurInfoEntry, wbt3RDPConnName=wbt3RDPConnName, wbt3DispFreqMax=wbt3DispFreqMax, wbt3TouchScreen=wbt3TouchScreen, wbt3DUpModBuildDate=wbt3DUpModBuildDate, wbt3ConnectionName=wbt3ConnectionName, iCAaltTab2=iCAaltTab2, wbt3RDPConnServer=wbt3RDPConnServer, thinClient=thinClient, wbt3IODevice=wbt3IODevice, wbt3ICAConnWorkingDir=wbt3ICAConnWorkingDir, wbt3PingBeforeConnect=wbt3PingBeforeConnect, wbt3RDPConnTable=wbt3RDPConnTable, wbt3CurInfoNum=wbt3CurInfoNum, wbt3TermConnIBM5250EmuModel=wbt3TermConnIBM5250EmuModel, wbt3RomNum=wbt3RomNum, wbt3CurInfoTable=wbt3CurInfoTable, wbt3DUpInfoTable=wbt3DUpInfoTable, wbt3UserID=wbt3UserID, wbt3ConnectionsTable=wbt3ConnectionsTable, wbt3RDPConnEntry=wbt3RDPConnEntry, wbt3CurHWPlatform=wbt3CurHWPlatform, wbt3FileRootPath=wbt3FileRootPath, wbt3DUpInfoNum=wbt3DUpInfoNum, wbt3RamType=wbt3RamType, wbt3DUpInfoEntry=wbt3DUpInfoEntry, wbt3Connection3=wbt3Connection3, wbt3DhcpInfo=wbt3DhcpInfo, wbt3TrapSNMPLdDone=wbt3TrapSNMPLdDone, wbt3RDPstartApp=wbt3RDPstartApp, iCActrlAltDel=iCActrlAltDel, wbt3TermConnCommType=wbt3TermConnCommType, wbt3UpDnLoadEntry=wbt3UpDnLoadEntry, wbt3userName=wbt3userName, wbt3RDPConnAutoLogon=wbt3RDPConnAutoLogon, wbt3DispHorizPix=wbt3DispHorizPix, wbt3DHCPoptionIDs=wbt3DHCPoptionIDs, wbt3AutoStart4=wbt3AutoStart4, wbt3TermConnTelnetName=wbt3TermConnTelnetName, wbt3DHCPupdate=wbt3DHCPupdate, wbt3UpDnLoadIndex=wbt3UpDnLoadIndex, wbt3PCCard=wbt3PCCard, wbt3SNMPupdate=wbt3SNMPupdate, iCAStatusDialog2=iCAStatusDialog2, wbt3ICAConnName=wbt3ICAConnName, wbt3DispColor=wbt3DispColor, wbt3TerminalID=wbt3TerminalID, wbt3ICAConnSoundQuality=wbt3ICAConnSoundQuality, wbt3AutoStart1=wbt3AutoStart1, wbt3BuildInfo=wbt3BuildInfo, wbt3SubnetMask=wbt3SubnetMask, wbt3NetworkProtocol=wbt3NetworkProtocol, wbt3DispColorMax=wbt3DispColorMax, wbt3EnergySaver=wbt3EnergySaver, wbt3PCCardEntry=wbt3PCCardEntry, wbt3Administration=wbt3Administration, wbt3Connection5=wbt3Connection5, wbt3TrapServerList=wbt3TrapServerList, terminalID=terminalID, wbt3DUpOEMBuildNum=wbt3DUpOEMBuildNum, wbt3CurModBuildDate=wbt3CurModBuildDate, wbt3password=wbt3password, wbt3NetworkSpeed=wbt3NetworkSpeed, wbt3Network=wbt3Network, wbt3PCCardTable=wbt3PCCardTable, wbt3TermConnName=wbt3TermConnName, wbt3ICAConnEntry=wbt3ICAConnEntry, wbt3WorkingDir=wbt3WorkingDir, wbt3TermConnScript=wbt3TermConnScript, wbt3RamIndex=wbt3RamIndex, wbt3Memory=wbt3Memory, wbt3IODevAttached=wbt3IODevAttached, wbt3EmulationMode=wbt3EmulationMode, wbt3RDPConnWorkingDir=wbt3RDPConnWorkingDir, wbt3RDPConnUsername=wbt3RDPConnUsername, iCActrlEsc=iCActrlEsc, wbt3ConnectionEntry=wbt3ConnectionEntry, wbt3UpDnLoadTable=wbt3UpDnLoadTable, iCAaltTab=iCAaltTab, wbt3AcceptReq=wbt3AcceptReq, wbt3RDPConnModifiable=wbt3RDPConnModifiable, wbt3TrapSNMPAccptLd=wbt3TrapSNMPAccptLd, wbt3ServerIP=wbt3ServerIP, wbt3secondaryDNSserverIPaddress=wbt3secondaryDNSserverIPaddress, wbt3UpDnLoadId=wbt3UpDnLoadId, wbt3TrapStatus=wbt3TrapStatus, wbt3UpDnLoadOp=wbt3UpDnLoadOp, wbt3parallelShare=wbt3parallelShare, fTPFileServer=fTPFileServer, wbt3SingleButtonConnect=wbt3SingleButtonConnect, wbt3DispFreq=wbt3DispFreq, wbt3SubmitLoadJob=wbt3SubmitLoadJob, wbt3RebootRequest=wbt3RebootRequest, wbt3TrapsInfo=wbt3TrapsInfo, trapServerList=trapServerList, wbt3RamEntry=wbt3RamEntry, wbt3TrapReqId=wbt3TrapReqId, fTPRootPath=fTPRootPath, wbt3dnsEnable=wbt3dnsEnable)
mibBuilder.exportSymbols("WYSE-MIB", wbt3TrapServers=wbt3TrapServers, wbt3PCCardIndex=wbt3PCCardIndex, wbt3UsersStatus=wbt3UsersStatus, iCActrlAltDel2=iCActrlAltDel2, wbt3TermConnections=wbt3TermConnections, wbt3ICAConnections=wbt3ICAConnections, wbt3Display=wbt3Display, wbt3RDPConnLowSpeed=wbt3RDPConnLowSpeed, wbt3TermConnTable=wbt3TermConnTable, wbt3Connection1=wbt3Connection1, wbt3com2Share=wbt3com2Share, iCADefaultHotkeys=iCADefaultHotkeys, wbt3UsersTable=wbt3UsersTable, wbt3AutoStart8=wbt3AutoStart8, wbt3Directory=wbt3Directory, wbt3AutoStart6=wbt3AutoStart6, domain=domain, wbt3TrapRebootNotComplete=wbt3TrapRebootNotComplete, wbt3RDPConnStartApplication=wbt3RDPConnStartApplication, wbt3DispVertPixMax=wbt3DispVertPixMax, wbt3PCCardNum=wbt3PCCardNum, wbt3MibRevMajor=wbt3MibRevMajor, password=password, iCAaltBackTab2=iCAaltBackTab2, wbt3RomSize=wbt3RomSize, wbt3UpDnLoadProtocol=wbt3UpDnLoadProtocol, wbt3Ram=wbt3Ram)
