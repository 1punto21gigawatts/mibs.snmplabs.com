#
# PySNMP MIB module AI193TX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AI193TX-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:15:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Gauge32, TimeTicks, IpAddress, ModuleIdentity, enterprises, iso, Integer32, NotificationType, Counter64, Counter32, Unsigned32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "TimeTicks", "IpAddress", "ModuleIdentity", "enterprises", "iso", "Integer32", "NotificationType", "Counter64", "Counter32", "Unsigned32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
aii = MibIdentifier((1, 3, 6, 1, 4, 1, 539))
aiSystemOID = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2))
aiTX1 = ModuleIdentity((1, 3, 6, 1, 4, 1, 539, 14))
if mibBuilder.loadTexts: aiTX1.setLastUpdated('9505081700Z')
if mibBuilder.loadTexts: aiTX1.setOrganization('Applied Innovation Incorporated')
if mibBuilder.loadTexts: aiTX1.setContactInfo(' Engineering MIB Administrator Postal: Applied Innovation Inc. 5800 Innovation Drive Dublin, OH 43016-3271 Tel: 614/798-2000 Fax: 614/798-1770 E-mail: snmp@aiinet.com')
if mibBuilder.loadTexts: aiTX1.setDescription('The MIB Module for Series One TCP/IP Smart Line Cards (SLC)')
aiTX1System = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 14, 1))
aiTX1Calls = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 14, 2))
ai193 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 193))
ai193Ver7 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 193, 7))
ai193Ver71 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 193, 7, 1))
ai193Ver72 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 193, 7, 2))
ai193Ver73 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 193, 7, 3))
ai193Ver74 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 193, 7, 4))
ai193Ver75 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 193, 7, 5))
ai193Ver76 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 193, 7, 6))
ai193Ver77 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 193, 7, 7))
ai193Ver78 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 193, 7, 8))
ai193Ver79 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 193, 7, 9))
ai193Ver710 = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 2, 193, 7, 10))
aiTX1Interface = MibScalar((1, 3, 6, 1, 4, 1, 539, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("irb", 1), ("frontpanel", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiTX1Interface.setStatus('mandatory')
if mibBuilder.loadTexts: aiTX1Interface.setDescription('The hardware interface currently in use.')
aiTX1NumCalls = MibScalar((1, 3, 6, 1, 4, 1, 539, 14, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiTX1NumCalls.setStatus('mandatory')
if mibBuilder.loadTexts: aiTX1NumCalls.setDescription('The number of calls in the TCP call table.')
aiTX1CallTable = MibTable((1, 3, 6, 1, 4, 1, 539, 14, 2, 2), ).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiTX1CallTable.setStatus('mandatory')
if mibBuilder.loadTexts: aiTX1CallTable.setDescription('This table is used to maintain information on TCP connections.')
aiTX1CallTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 14, 2, 2, 1), ).setMaxAccess("readonly").setIndexNames((0, "AI193TX-MIB", "aiTX1CallIndex"))
if mibBuilder.loadTexts: aiTX1CallTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: aiTX1CallTableEntry.setDescription('This table is used to maintain information on TCP connections.')
aiTX1CallIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 14, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiTX1CallIndex.setStatus('mandatory')
if mibBuilder.loadTexts: aiTX1CallIndex.setDescription('The index number of this call in the call table.')
aiTX1CallStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 14, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 9))).clone(namedValues=NamedValues(("active", 1), ("inactive", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiTX1CallStatus.setStatus('mandatory')
if mibBuilder.loadTexts: aiTX1CallStatus.setDescription('The status of the call.')
aiTX1CallSource = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 14, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiTX1CallSource.setStatus('mandatory')
if mibBuilder.loadTexts: aiTX1CallSource.setDescription('The source of the call.')
aiTX1CallSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 14, 2, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiTX1CallSrcAddress.setStatus('mandatory')
if mibBuilder.loadTexts: aiTX1CallSrcAddress.setDescription('The IP address of the calling entity.')
aiTX1CallDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 14, 2, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiTX1CallDestAddress.setStatus('mandatory')
if mibBuilder.loadTexts: aiTX1CallDestAddress.setDescription('The network address of the destination entity.')
aiTX1CallPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 14, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiTX1CallPacketsSent.setStatus('mandatory')
if mibBuilder.loadTexts: aiTX1CallPacketsSent.setDescription('The number of packets sent over this connection.')
aiTX1CallPktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 14, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiTX1CallPktsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: aiTX1CallPktsRcvd.setDescription('The number of packets received over this connection.')
aiTX1CalledPort = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 14, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiTX1CalledPort.setStatus('mandatory')
if mibBuilder.loadTexts: aiTX1CalledPort.setDescription('The port that is being called.')
aiTX1CallingPort = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 14, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiTX1CallingPort.setStatus('mandatory')
if mibBuilder.loadTexts: aiTX1CallingPort.setDescription('The port that is being called.')
aiTX1CallUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 14, 2, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiTX1CallUserData.setStatus('mandatory')
if mibBuilder.loadTexts: aiTX1CallUserData.setDescription('The Value of the User Data field for the call.')
mibBuilder.exportSymbols("AI193TX-MIB", aiTX1CalledPort=aiTX1CalledPort, aiTX1CallTable=aiTX1CallTable, ai193Ver78=ai193Ver78, ai193Ver72=ai193Ver72, ai193Ver79=ai193Ver79, aiTX1CallPacketsSent=aiTX1CallPacketsSent, aiTX1=aiTX1, aiTX1CallIndex=aiTX1CallIndex, ai193=ai193, ai193Ver710=ai193Ver710, ai193Ver77=ai193Ver77, aiTX1CallSource=aiTX1CallSource, ai193Ver71=ai193Ver71, aiTX1Calls=aiTX1Calls, ai193Ver7=ai193Ver7, aiTX1System=aiTX1System, PYSNMP_MODULE_ID=aiTX1, ai193Ver74=ai193Ver74, aiTX1CallSrcAddress=aiTX1CallSrcAddress, aiTX1CallStatus=aiTX1CallStatus, aiSystemOID=aiSystemOID, aiTX1CallDestAddress=aiTX1CallDestAddress, aiTX1CallUserData=aiTX1CallUserData, aii=aii, aiTX1NumCalls=aiTX1NumCalls, aiTX1CallingPort=aiTX1CallingPort, aiTX1Interface=aiTX1Interface, ai193Ver75=ai193Ver75, ai193Ver73=ai193Ver73, aiTX1CallPktsRcvd=aiTX1CallPktsRcvd, aiTX1CallTableEntry=aiTX1CallTableEntry, ai193Ver76=ai193Ver76)
