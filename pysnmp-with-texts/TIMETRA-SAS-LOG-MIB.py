#
# PySNMP MIB module TIMETRA-SAS-LOG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TIMETRA-SAS-LOG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:21:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpMessageProcessingModel, SnmpSecurityLevel, SnmpAdminString = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpMessageProcessingModel", "SnmpSecurityLevel", "SnmpAdminString")
snmpNotifyEntry, = mibBuilder.importSymbols("SNMP-NOTIFICATION-MIB", "snmpNotifyEntry")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
sysDescr, sysObjectID = mibBuilder.importSymbols("SNMPv2-MIB", "sysDescr", "sysObjectID")
Counter32, NotificationType, Gauge32, ObjectIdentity, MibIdentifier, IpAddress, Bits, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, ModuleIdentity, Integer32, TimeTicks, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "NotificationType", "Gauge32", "ObjectIdentity", "MibIdentifier", "IpAddress", "Bits", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "ModuleIdentity", "Integer32", "TimeTicks", "Counter64")
StorageType, RowStatus, DateAndTime, DisplayString, TimeStamp, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "StorageType", "RowStatus", "DateAndTime", "DisplayString", "TimeStamp", "TextualConvention", "TruthValue")
TFilterAction, TFilterActionOrDefault = mibBuilder.importSymbols("TIMETRA-FILTER-MIB", "TFilterAction", "TFilterActionOrDefault")
tmnxSRConfs, tmnxSRObjs, tmnxSRNotifyPrefix, timetraSRMIBModules = mibBuilder.importSymbols("TIMETRA-GLOBAL-MIB", "tmnxSRConfs", "tmnxSRObjs", "tmnxSRNotifyPrefix", "timetraSRMIBModules")
tmnxSnmpTrapDestEntry, TmnxLogIdIndex, tmnxLogApEntry = mibBuilder.importSymbols("TIMETRA-LOG-MIB", "tmnxSnmpTrapDestEntry", "TmnxLogIdIndex", "tmnxLogApEntry")
timetraSASModules, timetraSASConfs, timetraSASNotifyPrefix, timetraSASObjs = mibBuilder.importSymbols("TIMETRA-SAS-GLOBAL-MIB", "timetraSASModules", "timetraSASConfs", "timetraSASNotifyPrefix", "timetraSASObjs")
TNamedItem, TmnxAdminState, TmnxAccPlcyQECounters, TItemDescription, TmnxAccPlcyOICounters, THsmdaCounterIdOrZeroOrAll, TQueueIdOrAll, TmnxAccPlcyOECounters, TNamedItemOrEmpty, TQueueId, TmnxActionType, THsmdaCounterIdOrZero, TmnxAccPlcyQICounters, TmnxOperState, TmnxAccPlcyAACounters = mibBuilder.importSymbols("TIMETRA-TC-MIB", "TNamedItem", "TmnxAdminState", "TmnxAccPlcyQECounters", "TItemDescription", "TmnxAccPlcyOICounters", "THsmdaCounterIdOrZeroOrAll", "TQueueIdOrAll", "TmnxAccPlcyOECounters", "TNamedItemOrEmpty", "TQueueId", "TmnxActionType", "THsmdaCounterIdOrZero", "TmnxAccPlcyQICounters", "TmnxOperState", "TmnxAccPlcyAACounters")
timetraSASLogMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 6, 2, 1, 1, 14))
timetraSASLogMIBModule.setRevisions(('1911-08-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: timetraSASLogMIBModule.setRevisionsDescriptions(('Rev 1.0 01 Aug 2011 00:00 1.0 release of the TIMETRA-SAS-LOG-MIB.',))
if mibBuilder.loadTexts: timetraSASLogMIBModule.setLastUpdated('1108010000Z')
if mibBuilder.loadTexts: timetraSASLogMIBModule.setOrganization('Alcatel')
if mibBuilder.loadTexts: timetraSASLogMIBModule.setContactInfo('Alcatel 7210 Support Web: http://www.alcatel.com/comps/pages/carrier_support.jhtml')
if mibBuilder.loadTexts: timetraSASLogMIBModule.setDescription("This document is the SNMP MIB module to manage and provision the Alcatel 7210 Logging utility. Copyright 2003-2012 Alcatel-Lucent. All rights reserved. Reproduction of this document is authorized on the condition that the foregoing copyright notice is included. This SNMP MIB module (Specification) embodies Alcatel's proprietary intellectual property. Alcatel retains all title and ownership in the Specification, including any revisions. Alcatel grants all interested parties a non-exclusive license to use and distribute an unmodified copy of this Specification in connection with management of Alcatel products, and without fee, provided this copyright notice and license appear on all copies. This Specification is supplied 'as is', and Alcatel makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
tmnxSASLogObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 14))
tmnxSASLogGlobObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 14, 1))
tmnxSASLogConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 1, 9))
tmnxSASLogGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 1, 9, 1))
class TLogMemSize(TextualConvention, Integer32):
    description = 'The amount of buffer space (in kbytes) indicating the size of the log memory'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 128)

tmnxDygGaspPriLogId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxDygGaspPriLogId.setStatus('current')
if mibBuilder.loadTexts: tmnxDygGaspPriLogId.setDescription('Primary SNMP trap group number to which dying gasp trap needs to be sent. An entry with this id and tmnxDygGaspPriTgtName has to exist in tmnxSnmpTrapDestEntry before tmnxDygGaspPriLogId can be set')
tmnxDygGaspPriTgtName = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 14, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 28))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxDygGaspPriTgtName.setStatus('current')
if mibBuilder.loadTexts: tmnxDygGaspPriTgtName.setDescription('Primary SNMP trap target to which dying gasp trap needs to be sent. An entry with this name and tmnxDygGaspPriLogId has to exist in tmnxSnmpTrapDestEntry before tmnxDygGaspPriTgtName can be set')
tmnxDygGaspSecLogId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 14, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxDygGaspSecLogId.setStatus('current')
if mibBuilder.loadTexts: tmnxDygGaspSecLogId.setDescription('Secondary SNMP trap group number to which dying gasp trap needs to be sent. An entry with this id and tmnxDygGaspSecTgtName has to exist in tmnxSnmpTrapDestEntry before tmnxDygGaspSecLogId can be set')
tmnxDygGaspSecTgtName = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 14, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 28))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxDygGaspSecTgtName.setStatus('current')
if mibBuilder.loadTexts: tmnxDygGaspSecTgtName.setDescription('Secondary SNMP trap target to which dying gasp trap needs to be sent. An entry with this name and tmnxDygGaspSecLogId has to exist in tmnxSnmpTrapDestEntry before tmnxDygGaspSecTgtName can be set')
tmnxDygGaspTerLogId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 14, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxDygGaspTerLogId.setStatus('current')
if mibBuilder.loadTexts: tmnxDygGaspTerLogId.setDescription('Tertiary SNMP trap group number to which dying gasp trap needs to be sent. An entry with this id and tmnxDygGaspSecTgtName has to exist in tmnxSnmpTrapDestEntry before tmnxDygGaspTerLogId can be set')
tmnxDygGaspTerTgtName = MibScalar((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 14, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 28))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tmnxDygGaspTerTgtName.setStatus('current')
if mibBuilder.loadTexts: tmnxDygGaspTerTgtName.setDescription('Tertiary SNMP trap target to which dying gasp trap needs to be sent. An entry with this name and tmnxDygGaspTerLogId has to exist in tmnxSnmpTrapDestEntry before tmnxDygGaspTerTgtName can be set')
tmnxLogApExtnTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 14, 1, 7), )
if mibBuilder.loadTexts: tmnxLogApExtnTable.setStatus('current')
if mibBuilder.loadTexts: tmnxLogApExtnTable.setDescription('')
tmnxLogApExtnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 14, 1, 7, 1), )
tmnxLogApEntry.registerAugmentions(("TIMETRA-SAS-LOG-MIB", "tmnxLogApExtnEntry"))
tmnxLogApExtnEntry.setIndexNames(*tmnxLogApEntry.getIndexNames())
if mibBuilder.loadTexts: tmnxLogApExtnEntry.setStatus('current')
if mibBuilder.loadTexts: tmnxLogApExtnEntry.setDescription('')
tmnxLogApLogMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 14, 1, 7, 1, 1), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tmnxLogApLogMemory.setStatus('current')
if mibBuilder.loadTexts: tmnxLogApLogMemory.setDescription('This parameter specifies if Accounting record policy records are cached in order to reduce frequent flash write operations ')
tmnxLogApLogMemSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 6, 2, 2, 2, 14, 1, 7, 1, 2), TLogMemSize()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tmnxLogApLogMemSize.setStatus('current')
if mibBuilder.loadTexts: tmnxLogApLogMemSize.setDescription('This parameter is a read only object specifying the log memory size that is currently in use')
mibBuilder.exportSymbols("TIMETRA-SAS-LOG-MIB", tmnxDygGaspTerTgtName=tmnxDygGaspTerTgtName, tmnxDygGaspPriTgtName=tmnxDygGaspPriTgtName, tmnxSASLogConformance=tmnxSASLogConformance, tmnxSASLogGroups=tmnxSASLogGroups, tmnxDygGaspSecTgtName=tmnxDygGaspSecTgtName, tmnxSASLogObjs=tmnxSASLogObjs, tmnxSASLogGlobObjs=tmnxSASLogGlobObjs, tmnxDygGaspSecLogId=tmnxDygGaspSecLogId, tmnxDygGaspTerLogId=tmnxDygGaspTerLogId, tmnxDygGaspPriLogId=tmnxDygGaspPriLogId, TLogMemSize=TLogMemSize, tmnxLogApExtnEntry=tmnxLogApExtnEntry, PYSNMP_MODULE_ID=timetraSASLogMIBModule, tmnxLogApLogMemory=tmnxLogApLogMemory, tmnxLogApLogMemSize=tmnxLogApLogMemSize, tmnxLogApExtnTable=tmnxLogApExtnTable, timetraSASLogMIBModule=timetraSASLogMIBModule)
