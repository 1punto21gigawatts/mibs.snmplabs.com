#
# PySNMP MIB module H3C-DLDP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/H3C-DLDP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:21:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
h3cCommon, = mibBuilder.importSymbols("HUAWEI-3COM-OID-MIB", "h3cCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Integer32, iso, NotificationType, Bits, MibIdentifier, IpAddress, ModuleIdentity, TimeTicks, Unsigned32, Gauge32, ObjectIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Integer32", "iso", "NotificationType", "Bits", "MibIdentifier", "IpAddress", "ModuleIdentity", "TimeTicks", "Unsigned32", "Gauge32", "ObjectIdentity", "Counter32")
MacAddress, TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "DisplayString", "TruthValue")
h3cDldp = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43))
h3cDldp.setRevisions(('2004-12-13 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: h3cDldp.setRevisionsDescriptions(('The initial version of this MIB module.',))
if mibBuilder.loadTexts: h3cDldp.setLastUpdated('200412130000Z')
if mibBuilder.loadTexts: h3cDldp.setOrganization('Huawei 3Com Technologies Co., Ltd.')
if mibBuilder.loadTexts: h3cDldp.setContactInfo('Platform Team Huawei 3Com Technologies Co., Ltd. Hai-Dian District Beijing P.R. China Http://www.huawei-3com.com Zip:100085')
if mibBuilder.loadTexts: h3cDldp.setDescription('HUAWEI-3COM DLDP (Device Link Detection Protocol) MIB')
class EnabledStatus(TextualConvention, Integer32):
    description = "The current state of the Ethernet port. This object has two defined values: - 'enabled', which indicates that the Ethernet port enables DLDP. - 'disabled', which indicates that the Ethernet port does not enable DLDP. "
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class DLDPStatus(TextualConvention, Integer32):
    description = "Operating state of DLDP on the port. This object has six defined values: - 'initial', which indicates that the Ethernet port does not enable DLDP. This status does not appear in the 'h3cDLDPPortDLDPState' object (below) because the port which is not enabled DLDP does not appear in 'h3cDLDPPortDLDPTable', it appears in 'h3cDLDPPortStateTable'. - 'inactive', which indicates that the Ethernet port enables DLDP and the link status of the port is down. - 'active', which indicates that the Ethernet port enables DLDP and the link status of the port is up. - 'advertisement', which indicates that all neighbors of the port are bidirectional communication. - 'probe', which indicates that the port sends PDU to detect the communication mode between it and it's neighbors. - 'disable', which indicates that an unidirectional communication between the port and it's neighbor. When the user get or walk the 'h3cDLDPPortDLDPState' objects (below) these status will output."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("initial", 1), ("inactive", 2), ("active", 3), ("advertisement", 4), ("probe", 5), ("disable", 6))

class DLDPNeighborStatus(TextualConvention, Integer32):
    description = "The current state of the neighbor of a port. This object has three defined values: - 'unidirection', which indicates an unidirectional communication between the port and it's neighbor. - 'bidirection', which indicates a bidirectional communication between the port and it's neighbor. - 'unknown', which indicates that the port does not know the communication mode between it and it's neighbor. When the user get or walk the 'h3cDLDPNeighborState' objects (below) these status will output. "
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("unidirection", 1), ("bidirection", 2), ("unknown", 3))

h3cDLDPMibObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1))
h3cDLDPConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1, 1))
h3cDLDPWorkMode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("enhance", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDLDPWorkMode.setStatus('current')
if mibBuilder.loadTexts: h3cDLDPWorkMode.setDescription('The work mode of DLDP. Normal mode means DLDP does not detect neighbor on its own initiative when all neighbors aged. Enhance mode means DLDP detects neighbor on its own initiative when all neighbors aged. ')
h3cDLDPSystemEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDLDPSystemEnable.setStatus('current')
if mibBuilder.loadTexts: h3cDLDPSystemEnable.setDescription('DLDP enable or disable systematically. This node only supports set operation. If setting it to true, all the fiber ports will enable DLDP and the agent automatically creates new rows for each port in h3cDLDPPortDLDPTable. If setting it to false, all the fiber ports will disable DLDP and the agent automatically destroy the corresponding rows in h3cDLDPPortDLDPTable')
h3cDLDPSystemReset = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDLDPSystemReset.setStatus('current')
if mibBuilder.loadTexts: h3cDLDPSystemReset.setDescription('DLDP reset systematically. This node only supports set operation. If the value of h3cDLDPSystemReset is true, and the current state is disable, it will change to inactive while the port is down or active while the port is up. If h3cDLDPPortDLDPState is not disable, it does not change. ')
h3cDLDPInterval = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDLDPInterval.setStatus('current')
if mibBuilder.loadTexts: h3cDLDPInterval.setDescription('The interval of sending an advertisement PDU. unit : second ')
h3cDLDPAuthenticationMode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("simple", 2), ("md5", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDLDPAuthenticationMode.setStatus('current')
if mibBuilder.loadTexts: h3cDLDPAuthenticationMode.setDescription('Type of authentication mode.')
h3cDLDPAuthenticationPassword = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDLDPAuthenticationPassword.setStatus('current')
if mibBuilder.loadTexts: h3cDLDPAuthenticationPassword.setDescription('This is the password for authentication. If the value of h3cDLDPAuthenticationMode is none, the user can not set this node. If the value of h3cDLDPAuthenticationMode is simple or MD5, the user must set this node with a string. When the user get or walk this node, it displays cipher password if h3cDLDPAuthenticationMode is MD5 or clear password if h3cDLDPAuthenticationMode is simple or zero length string if h3cDLDPAuthenticationMode is none. ')
h3cDLDPUnidirectionalShutdown = MibScalar((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDLDPUnidirectionalShutdown.setStatus('current')
if mibBuilder.loadTexts: h3cDLDPUnidirectionalShutdown.setDescription('The mode of unidirectional shutdown. It indicates the shutdown mode when a unidirectional link happened. Auto mode means the port will be shut down automatically when DLDP detects unidirectional link. Manual mode means the port needs to be shut down by the administrator manually when DLDP detects unidirectional link. ')
h3cDLDPPortStateTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1, 2), )
if mibBuilder.loadTexts: h3cDLDPPortStateTable.setStatus('current')
if mibBuilder.loadTexts: h3cDLDPPortStateTable.setDescription('The table of the Ethernet ports of a LAN switch.')
h3cDLDPPortStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cDLDPPortStateEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDLDPPortStateEntry.setDescription('Information about a h3cDLDPPortDLDPTable entity.')
h3cDLDPPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1, 2, 1, 1), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDLDPPortState.setStatus('current')
if mibBuilder.loadTexts: h3cDLDPPortState.setDescription('State of a port. If setting it to enabled, the port will enable DLDP and a new row will be added in h3cDLDPPortDLDPTable for this port. If setting it to disabled, the port will disable DLDP and the corresponding row will be destroyed in h3cDLDPPortDLDPTable.')
h3cDLDPPortDLDPTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1, 3), )
if mibBuilder.loadTexts: h3cDLDPPortDLDPTable.setStatus('current')
if mibBuilder.loadTexts: h3cDLDPPortDLDPTable.setDescription("Table of a LAN switch's ports, which enable DLDP.")
h3cDLDPPortDLDPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cDLDPPortDLDPEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDLDPPortDLDPEntry.setDescription('The information of a port, which enable DLDP.')
h3cDLDPPortDLDPState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1, 3, 1, 1), DLDPStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDLDPPortDLDPState.setStatus('current')
if mibBuilder.loadTexts: h3cDLDPPortDLDPState.setDescription('Operating state of DLDP on the port. It is relational with h3cDLDPPortState and h3cDLDPLinkState.')
h3cDLDPLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("up", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDLDPLinkState.setStatus('current')
if mibBuilder.loadTexts: h3cDLDPLinkState.setDescription('The link state of the port.')
h3cDLDPPortDLDPReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1, 3, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDLDPPortDLDPReset.setStatus('current')
if mibBuilder.loadTexts: h3cDLDPPortDLDPReset.setDescription('DLDP reset systematically. This node only supports set operation. If the value of h3cDLDPPortDLDPReset is true, and the current state is disable, it will change to inactive while the port is down or active while the port is up. ')
h3cDLDPNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1, 4), )
if mibBuilder.loadTexts: h3cDLDPNeighborTable.setStatus('current')
if mibBuilder.loadTexts: h3cDLDPNeighborTable.setDescription("Table of a port's neighbors.")
h3cDLDPNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H3C-DLDP-MIB", "h3cDLDPNeighborBridgeMac"), (0, "H3C-DLDP-MIB", "h3cDLDPNeighborPortIndex"))
if mibBuilder.loadTexts: h3cDLDPNeighborEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDLDPNeighborEntry.setDescription('The information of a neighbor.')
h3cDLDPNeighborBridgeMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1, 4, 1, 1), MacAddress())
if mibBuilder.loadTexts: h3cDLDPNeighborBridgeMac.setStatus('current')
if mibBuilder.loadTexts: h3cDLDPNeighborBridgeMac.setDescription('The bridge MAC address of a neighbor.')
h3cDLDPNeighborPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1, 4, 1, 2), Integer32())
if mibBuilder.loadTexts: h3cDLDPNeighborPortIndex.setStatus('current')
if mibBuilder.loadTexts: h3cDLDPNeighborPortIndex.setDescription('The port index of a neighbor.')
h3cDLDPNeighborState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1, 4, 1, 3), DLDPNeighborStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDLDPNeighborState.setStatus('current')
if mibBuilder.loadTexts: h3cDLDPNeighborState.setDescription('The state of a neighbor.')
h3cDLDPNeighborAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDLDPNeighborAgingTime.setStatus('current')
if mibBuilder.loadTexts: h3cDLDPNeighborAgingTime.setDescription('The aging time of a neighbor. unit: second')
h3cDLDPTrapObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 2))
h3cDLDPNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 2, 1))
h3cDLDPUnidirectionalPort = NotificationType((1, 3, 6, 1, 4, 1, 2011, 10, 2, 43, 2, 1, 1)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cDLDPUnidirectionalPort.setStatus('current')
if mibBuilder.loadTexts: h3cDLDPUnidirectionalPort.setDescription('It will send a SNMP trap when the state of a port has changed to unidirectional-link .')
mibBuilder.exportSymbols("H3C-DLDP-MIB", h3cDLDPNeighborTable=h3cDLDPNeighborTable, h3cDLDPNeighborAgingTime=h3cDLDPNeighborAgingTime, h3cDldp=h3cDldp, h3cDLDPAuthenticationPassword=h3cDLDPAuthenticationPassword, h3cDLDPConfigGroup=h3cDLDPConfigGroup, h3cDLDPPortStateEntry=h3cDLDPPortStateEntry, h3cDLDPLinkState=h3cDLDPLinkState, h3cDLDPPortDLDPEntry=h3cDLDPPortDLDPEntry, PYSNMP_MODULE_ID=h3cDldp, h3cDLDPPortState=h3cDLDPPortState, h3cDLDPNeighborBridgeMac=h3cDLDPNeighborBridgeMac, h3cDLDPInterval=h3cDLDPInterval, h3cDLDPNeighborEntry=h3cDLDPNeighborEntry, h3cDLDPPortDLDPTable=h3cDLDPPortDLDPTable, EnabledStatus=EnabledStatus, DLDPStatus=DLDPStatus, h3cDLDPUnidirectionalShutdown=h3cDLDPUnidirectionalShutdown, h3cDLDPSystemEnable=h3cDLDPSystemEnable, h3cDLDPAuthenticationMode=h3cDLDPAuthenticationMode, h3cDLDPMibObject=h3cDLDPMibObject, h3cDLDPPortDLDPReset=h3cDLDPPortDLDPReset, h3cDLDPNeighborPortIndex=h3cDLDPNeighborPortIndex, h3cDLDPSystemReset=h3cDLDPSystemReset, h3cDLDPTrapObject=h3cDLDPTrapObject, h3cDLDPNeighborState=h3cDLDPNeighborState, DLDPNeighborStatus=DLDPNeighborStatus, h3cDLDPPortDLDPState=h3cDLDPPortDLDPState, h3cDLDPUnidirectionalPort=h3cDLDPUnidirectionalPort, h3cDLDPWorkMode=h3cDLDPWorkMode, h3cDLDPPortStateTable=h3cDLDPPortStateTable, h3cDLDPNotification=h3cDLDPNotification)
