#
# PySNMP MIB module Dell-LAN-SYSMNG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Dell-LAN-SYSMNG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:56:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
dellLanCommon, = mibBuilder.importSymbols("Dell-Vendor-MIB", "dellLanCommon")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, IpAddress, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Unsigned32, Bits, NotificationType, Counter32, Gauge32, ObjectIdentity, MibIdentifier, NotificationType, TimeTicks, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "IpAddress", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Unsigned32", "Bits", "NotificationType", "Counter32", "Gauge32", "ObjectIdentity", "MibIdentifier", "NotificationType", "TimeTicks", "Counter64")
DisplayString, DateAndTime, TextualConvention, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "DateAndTime", "TextualConvention", "TruthValue", "RowStatus")
dellLanSystemMng = ModuleIdentity((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 2))
if mibBuilder.loadTexts: dellLanSystemMng.setLastUpdated('201304120000Z')
if mibBuilder.loadTexts: dellLanSystemMng.setOrganization('Dell Inc.')
if mibBuilder.loadTexts: dellLanSystemMng.setContactInfo('support.dell.com')
if mibBuilder.loadTexts: dellLanSystemMng.setDescription('This MIB define the common system management functions applicable to all Dell Networking managed switches which support SNMP management protocol. This MIB includes: - Management interface access control. - Local user configuration and user access control. - File system management including file copy, backup, restore, rename, list, etc. This MIB should not be confused with the Dell Vendor MIB required for ITA integration.')
dellLanMngIfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 2, 1))
dellLanFileSysGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 2, 2))
dellLanSysMngGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 2, 3))
class DellLanMngInfServiceType(TextualConvention, Integer32):
    description = 'Management ACL Service type to be configured.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("allType", 0), ("telnet", 1), ("snmp", 2), ("http", 3), ("https", 4), ("ssh", 5), ("sntp", 6))

class DellLanMngInfActionType(TextualConvention, Integer32):
    description = 'Management ACL Action definition.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("permit", 0), ("deny", 1))

dellLanMngInfEnable = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 2, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dellLanMngInfEnable.setStatus('current')
if mibBuilder.loadTexts: dellLanMngInfEnable.setDescription('The variable specifies if Management ACL functionality is enabled. By default this parameter value is TRUE, which means that management interface ACL is checked when granting access to the system. This object should not be set to FALSE.')
dellLanMngInfActiveListName = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dellLanMngInfActiveListName.setStatus('current')
if mibBuilder.loadTexts: dellLanMngInfActiveListName.setDescription('This parameter may be used to activate a particular management ACL rule-set. If no management ACL rule-set is specified (by setting this parameter to a NULL string) then the system assumes that management ACL is disabled. If the user attempts to set this parameter to the name of an invalid or non-existence ACL rule-set, the configuration will fail. If the user deletes a management ACL rule-set to which this parameter references, the parameter will be set to a NULL string and the system will assume that management ACL checking has been disabled.')
dellLanMngInfListTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 2, 1, 3), )
if mibBuilder.loadTexts: dellLanMngInfListTable.setStatus('current')
if mibBuilder.loadTexts: dellLanMngInfListTable.setDescription("This table defines all management ACL rule-set as well as the rules within the rule-set. To activate a specific ACL rule-set, please refer to the 'dellLanMngInfActiveListName' parameter above.")
dellLanMngInfListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 2, 1, 3, 1), ).setIndexNames((0, "Dell-LAN-SYSMNG-MIB", "dellLanMngInfListName"), (0, "Dell-LAN-SYSMNG-MIB", "dellLanMngInfListPriority"))
if mibBuilder.loadTexts: dellLanMngInfListEntry.setStatus('current')
if mibBuilder.loadTexts: dellLanMngInfListEntry.setDescription("Each entry in the table is a single rule within a given rule-set. The rules within a rule-set are grouped together via a common name 'dellLanMngInfListName'. Each rule has a specific priority within the rule-set given by 'dellLanMngInfListPriority', where priority 1 is the highest priority of the given set. Each rule may be applied to a specific interface within the switch or to all interfaces (specified by setting the ifIndex to 0).")
dellLanMngInfListName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 2, 1, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dellLanMngInfListName.setStatus('current')
if mibBuilder.loadTexts: dellLanMngInfListName.setDescription('The name of a given rule-set.')
dellLanMngInfListPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 2, 1, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dellLanMngInfListPriority.setStatus('current')
if mibBuilder.loadTexts: dellLanMngInfListPriority.setDescription('The priority value of a given rule within the rule-set.')
dellLanMngInfListIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 2, 1, 3, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dellLanMngInfListIfIndex.setStatus('current')
if mibBuilder.loadTexts: dellLanMngInfListIfIndex.setDescription('The IfIndex to which this rule applies. By setting this to a specific ifIndex, the rule will only applies if the management access is coming over the given interface. If the ifIndex is set to 0, then this rule applies to all interfaces.')
dellLanMngInfListIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 2, 1, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dellLanMngInfListIpAddr.setStatus('current')
if mibBuilder.loadTexts: dellLanMngInfListIpAddr.setDescription('The IP address to which this rule applies. The IP address may be set to be 0, which means that the rule applies to all IP addresses. Otherwise, the rule applies to all management request which comes from a given IP address.')
dellLanMngInfListIpNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 2, 1, 3, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dellLanMngInfListIpNetMask.setStatus('current')
if mibBuilder.loadTexts: dellLanMngInfListIpNetMask.setDescription('The subnet mask associated with the IP address of this entry. The value of the mask is an IP address with all the network bits set to 1 and all the hosts bits set to 0. Using this in conjunction with the ipAddress given above, it is possible to make the rule applies to a subnet instead of a specific address (to force the rule to apply to a single address, use a netmask with all bits set to 1 (i.e. 255.255.255.255 netmask).')
dellLanMngInfListService = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 2, 1, 3, 1, 6), DellLanMngInfServiceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dellLanMngInfListService.setStatus('current')
if mibBuilder.loadTexts: dellLanMngInfListService.setDescription('The type of services that this rule applies to. By setting this to a specific service type, the rule will only apply if the request is coming to the switch using the particular protocol type specified. The Service type address can be configured to be 0, which means any of the supported protocols or service such as Telnet, SNMP, HTTP, HTTPS, SSH are applicable.')
dellLanMngInfListAction = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 2, 1, 3, 1, 7), DellLanMngInfActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dellLanMngInfListAction.setStatus('current')
if mibBuilder.loadTexts: dellLanMngInfListAction.setDescription('The action to apply to the given traffic matching the rule. The action may be to permit or deny the requested management access.')
dellLanMngInfListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 2, 1, 3, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dellLanMngInfListRowStatus.setStatus('current')
if mibBuilder.loadTexts: dellLanMngInfListRowStatus.setDescription('The row status variable, used according to row creation and deletion conventions.')
dellLanMngInfListVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 2, 1, 3, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dellLanMngInfListVlanId.setStatus('current')
if mibBuilder.loadTexts: dellLanMngInfListVlanId.setDescription('The IfIndex to which this rule applies. By setting this to a specific ifIndex, the rule will only applies if the management access is coming over the given interface. If the ifIndex is set to 0, then this rule applies to all interfaces.')
dellLanFSMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dellLanFSMaxSize.setStatus('current')
if mibBuilder.loadTexts: dellLanFSMaxSize.setDescription('The parameter returns the maximum number of bytes in the file system.')
dellLanFSAvailableSize = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dellLanFSAvailableSize.setStatus('current')
if mibBuilder.loadTexts: dellLanFSAvailableSize.setDescription('The parameter returns the number of bytes available or free in the file system.')
dellLanFileTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 2, 2, 3), )
if mibBuilder.loadTexts: dellLanFileTable.setStatus('current')
if mibBuilder.loadTexts: dellLanFileTable.setDescription("This table 'lists' the files that are present in the flash file system of the switch.")
dellLanFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 2, 2, 3, 1), ).setIndexNames((0, "Dell-LAN-SYSMNG-MIB", "dellLanFileName"))
if mibBuilder.loadTexts: dellLanFileEntry.setStatus('current')
if mibBuilder.loadTexts: dellLanFileEntry.setDescription("Each entry is a single file in the file system. Each file has particular access permission. This table provides the mean to view a files in the file system. A file cannot be created or deleted using this table. To create or remove a file please see the dellLanFileActionTable. Note that a file can only be created by coping an existing file on the file system such as the 'startup-config' file or by copying a file from a remote tftp server to the flash file system. The file permission are defined as follows: - no-access = these files are internal system files and are not accessible. The files cannot be deleted, copied, nor overwritten. - read-only = these files may be copied (read) but not overwritten nor deleted (e.g. system logs or alarm logs). - read-write = these files may be copied (read), overwritten and deleted (write) (e.g. startup-config, backup config or images). - write-only = these files may be overwritten and deleted (write), but not copied (read). The file permission are automatically set by the system based on the following rules and are not modifiable by the users: - internal system files are protected with 'no-access' permission. - configuration files (including startup-config) are 'read-write' permission. - running-config is a special memory only configuration file and is not shown in the flash file system. - software images are 'read-write' permission. - there are currently no defined 'write-only' file type. A user description or note may also be attached to each file to provide additional information.")
dellLanFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 2, 2, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dellLanFileName.setStatus('current')
if mibBuilder.loadTexts: dellLanFileName.setDescription('The name of the file.')
dellLanFilePermission = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 2, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("readonly", 1), ("writeonly", 2), ("readWrite", 3), ("noReadNoWrite", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dellLanFilePermission.setStatus('current')
if mibBuilder.loadTexts: dellLanFilePermission.setDescription('Specifies the permission level in which this file can be accessed.')
dellLanFilePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 2, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dellLanFilePriority.setStatus('current')
if mibBuilder.loadTexts: dellLanFilePriority.setDescription('This special priority level is applicable only when the file is an image. Setting this priority level on the image file identifies the order in which the system will choose a new image to load when it finds the active image to be corrupted. For example, if the system is loading and find that the designated active image is corrupted, the system will first look for the next image with the smallest priority number (priority number 1 is highest priority and priority 255 is the lowest priority) to try to attempt to load next. It will continue in this way until it finds a valid image to load. Note that you can even set the priority level of an image that is currently marked as the active image. This is because if later you change the active image to another image file, then this file configured priority will applies. If there is no priority set on any image file, then the system will boot from a randomly selected file if it finds that the current active image is corrupted.')
dellLanFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 2, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dellLanFileSize.setStatus('current')
if mibBuilder.loadTexts: dellLanFileSize.setDescription('The size of the file in bytes.')
dellLanFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 2, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("image", 1), ("config", 2), ("log", 3), ("sys", 4), ("activeImg", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dellLanFileType.setStatus('current')
if mibBuilder.loadTexts: dellLanFileType.setDescription('The type of file.')
dellLanFileModificationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 2, 2, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dellLanFileModificationDate.setStatus('current')
if mibBuilder.loadTexts: dellLanFileModificationDate.setDescription('The time-stamp indicating the date of creation or last modification of this file. The format of the time-stamp is dd-mmm-yyyy')
dellLanFileModificationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 2, 2, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dellLanFileModificationTime.setStatus('current')
if mibBuilder.loadTexts: dellLanFileModificationTime.setDescription('The time-stamp indicating the time of creation or last modification of this file. The format of the time-stamp is hh:mm:ss')
dellLanFileDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 2, 2, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dellLanFileDescription.setStatus('current')
if mibBuilder.loadTexts: dellLanFileDescription.setDescription('A user defined description associated with this file. By default there is no description.')
dellLanFileActionTable = MibTable((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 2, 2, 4), )
if mibBuilder.loadTexts: dellLanFileActionTable.setStatus('current')
if mibBuilder.loadTexts: dellLanFileActionTable.setDescription("This is a conceptual table which contain only one row. The row is used to setup the parameters required to execute a particular action on the file system. Depending on the action, certain number of parameters will apply and will be required to be configured when the action is executed. Once the action executes, the parameters set for the action will be cleared and the status of the action (error code or success code) will be available for query in the dellLanFileActionResultCode field. NOTE that since the action is immediately executed, all parameters required for the action must be given in the same SNMP set request in a single varbind. The action type dellLanFileActionCommand must be included in each SNMP set request otherwise an error will be returned. Some of the actions may take a long time to complete, for these actions, the user should poll the dellLanFileActionResultCode until a valid result is returned. When the system is working on an action this parameter will return 'statusPending'. While the status is 'statusPending' the system will not honor any new file system request. If the user tries to send a file system action request during this time, the SNMP SET to execute the action will return with an SNMP error and the status will remain 'statusPending' until the last operation has completed. The correct usage for this table should be: - first query the 'dellLanFileActionResultCode' to see if the system is free to execute a file action request. If the query returns 'statusPending' then don't try the action yet. Keep polling until the result of this parameter is something other then 'statusPending'. - once the system is ready, compose a single SNMP request with all parameters required for a given action (see the description below in the Entry definition). - send an SNMP SET for this request, if the SET failed with an SNMP error then something is wrong with the way the request is composed. - if the SNMP SET response is success, then start polling the dellLanFileActionResultCode to determine the status of the action.")
dellLanFileActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 2, 2, 4, 1), ).setIndexNames((0, "Dell-LAN-SYSMNG-MIB", "dellLanFileActionIndex"))
if mibBuilder.loadTexts: dellLanFileActionEntry.setStatus('current')
if mibBuilder.loadTexts: dellLanFileActionEntry.setDescription("There is only exactly one row in this table and the row index is always set to 1 (dellLanFileActionIndex = 1). When an action is required to manipulate the file system, the entire action must be sent in the same SNMP SET request where the varbind includes all parameters required for the action operation and must include the action to be performed (dellLanFileActionCommand). If there is a missing parameter or if the action command is not given, then an error is returned immediately and all parameters are cleared and the dellLanFileActionResultCode will reflect the error. If the action is well formed and is properly executed, the result of the set will be successful and the dellLanFileActionResultCode will indicate a successful action. The following actions may be executed using this table. Included with the action description is a list of all required parameters (which must be included in the same SNMP SET as the action itself): - rename = rename the file. - dellLanFileActionSourceFile - dellLanFileActionDestFile - copy = copy a file. A copy operation requires that the source and destination files are of the same type of file. For example, if the source is a configuration file, then the destination must also be a configuration file. If the source is an image file, then the destination must also be an image file. Note that you cannot copy on to the active image file. The 'dellLanFileActionForceAction' may be set to true to indicate that the copy function should try to overwrite the destination file if it exists. The overwrite may still fail if permission is denied or the destination file is protected. - dellLanFileActionSourceFile - dellLanFileActionDestFile - dellLanFileActionForceAction - delete = delete a file. - dellLanFileActionSourceFile The following are possible error codes relating to each type of actions: - rename: fileNotFound; invalidCmd; unknownError. - copy: fileNotFound; tftpServerConnectFailed; fileSystemFull; overwriteNotRequested; overwriteFailed; permissionDenied; invalidCmd; incompatFileType; invalidDest; unknownError. - delete: fileNotFound; permissionDenied; invalidCmd; unknownError.")
dellLanFileActionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 2, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dellLanFileActionIndex.setStatus('current')
if mibBuilder.loadTexts: dellLanFileActionIndex.setDescription('This parameter is always 1 since this table consists of always just one row.')
dellLanFileActionSourceFile = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 2, 2, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dellLanFileActionSourceFile.setStatus('current')
if mibBuilder.loadTexts: dellLanFileActionSourceFile.setDescription("The source file may be specified using a URL addressing scheme. The format of this address are as follows: - flash://filename => indicate a file on the flash file system. - filename => indicates a file on the flash file system. - tftp://IPaddr/filename => indicates a file on a remote tftp server at the host given by 'IPaddr'. The filename in this case may be specified with a full path. - startup-config => a special file name indicating the startup configuration. NOTE that this file CANNOT be renamed. - running-config => a special file name indicating the running configuration. NOTE that this file CANNOT be renamed or deleted. - image => a special file name indicating the current active image. This allows you to copy the current active image without having to know the actual file name of the active image.")
dellLanFileActionDestFile = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 2, 2, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dellLanFileActionDestFile.setStatus('current')
if mibBuilder.loadTexts: dellLanFileActionDestFile.setDescription("The destination file may be specified using a URL addressing scheme. The format of this address are as follows: - flash://filename => indicate a file on the flash file system. - filename => indicates a file on the flash file system. - tftp://IPaddr/filename => indicates a file on a remote tftp server at the host given by 'IPaddr'. The filename in this case may be specified with a full path. - startup-config => a special file name indicating the startup configuration. NOTE that this file CANNOT be renamed. - running-config => a special file name indicating the running configuration. NOTE that this file CANNOT be renamed or deleted. Note that 'image' (which is the active software image is not valid as a destination.")
dellLanFileActionForceAction = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 2, 2, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dellLanFileActionForceAction.setStatus('current')
if mibBuilder.loadTexts: dellLanFileActionForceAction.setDescription('This option indicate that the system should force the operation if possible. For example, if this is used with the copy command, then the system will try to overwrite the destination file if it already exists. The overwrite may still fail if the file is protected. Setting this to false will mean that the command will not try to force the copy if the destination file exists.')
dellLanFileActionCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 2, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("copy", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dellLanFileActionCommand.setStatus('current')
if mibBuilder.loadTexts: dellLanFileActionCommand.setDescription('Perform the specific action on the file. When the action is performed the set of required parameters (see description in the table & entry definition above) must be included in the same varbind as the action. If the action fails to execute an SNMP error will be returned. If the action is executed then an SNMP success will be returned. The operation may still fail after that, so the user should retrieve the dellLanFileActionResultCode each time to confirm that the operation truly succeed or if it has failed.')
dellLanFileActionResultCode = MibTableColumn((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 2, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("success", 0), ("statusPending", 1), ("fileNotFound", 2), ("invalidCmd", 3), ("unknownError", 4), ("tftpServerConnectFailed", 5), ("fileSystemFull", 6), ("overwriteNotRequested", 7), ("overwriteFailed", 8), ("permissionDenied", 9), ("incompatFileType", 10), ("invalidDest", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dellLanFileActionResultCode.setStatus('current')
if mibBuilder.loadTexts: dellLanFileActionResultCode.setDescription("Each time the action is attempted, the result of the action will be provided here. The user should always read this result code immediately after executing the action to check the status of the action. If the action takes a long time to complete, the result code will indicate 'statuspending' until the action is completed and the result is given. The user should continue to poll this parameter until a result is given.")
dellLanSysActionReload = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 2, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dellLanSysActionReload.setStatus('current')
if mibBuilder.loadTexts: dellLanSysActionReload.setDescription('This action can be used to cause the system to reload/reboot. To specifically reload only a single unit in a stack, set this parameter to the unitID to reload the single unit. To reload the entire stack, set this parameter to 0.')
dellLanSysActionSetActiveImage = MibScalar((1, 3, 6, 1, 4, 1, 674, 10895, 5000, 1, 2, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dellLanSysActionSetActiveImage.setStatus('current')
if mibBuilder.loadTexts: dellLanSysActionSetActiveImage.setDescription('This action can be used to set the active image to be loaded on the next reboot. To change the active image, set this parameter to the name of the image to be made active. Reading this parameter will return the name of the current active image (note that you can also determine this by using the file system table above).')
mibBuilder.exportSymbols("Dell-LAN-SYSMNG-MIB", DellLanMngInfServiceType=DellLanMngInfServiceType, dellLanFileActionCommand=dellLanFileActionCommand, dellLanMngInfListIpNetMask=dellLanMngInfListIpNetMask, dellLanFileDescription=dellLanFileDescription, dellLanFileActionDestFile=dellLanFileActionDestFile, dellLanMngInfListAction=dellLanMngInfListAction, dellLanFSMaxSize=dellLanFSMaxSize, dellLanFileActionForceAction=dellLanFileActionForceAction, dellLanFileSysGroup=dellLanFileSysGroup, dellLanMngInfListIpAddr=dellLanMngInfListIpAddr, dellLanMngIfGroup=dellLanMngIfGroup, dellLanSysActionSetActiveImage=dellLanSysActionSetActiveImage, dellLanMngInfListService=dellLanMngInfListService, DellLanMngInfActionType=DellLanMngInfActionType, dellLanFileActionIndex=dellLanFileActionIndex, dellLanMngInfListTable=dellLanMngInfListTable, dellLanSystemMng=dellLanSystemMng, dellLanMngInfListName=dellLanMngInfListName, dellLanSysMngGroup=dellLanSysMngGroup, dellLanFileActionSourceFile=dellLanFileActionSourceFile, dellLanMngInfListEntry=dellLanMngInfListEntry, dellLanFilePriority=dellLanFilePriority, dellLanFileActionTable=dellLanFileActionTable, dellLanFilePermission=dellLanFilePermission, dellLanSysActionReload=dellLanSysActionReload, dellLanMngInfListVlanId=dellLanMngInfListVlanId, dellLanMngInfListIfIndex=dellLanMngInfListIfIndex, dellLanFSAvailableSize=dellLanFSAvailableSize, dellLanFileType=dellLanFileType, dellLanFileActionResultCode=dellLanFileActionResultCode, PYSNMP_MODULE_ID=dellLanSystemMng, dellLanFileActionEntry=dellLanFileActionEntry, dellLanFileName=dellLanFileName, dellLanMngInfListPriority=dellLanMngInfListPriority, dellLanFileModificationTime=dellLanFileModificationTime, dellLanFileSize=dellLanFileSize, dellLanFileTable=dellLanFileTable, dellLanFileEntry=dellLanFileEntry, dellLanMngInfListRowStatus=dellLanMngInfListRowStatus, dellLanFileModificationDate=dellLanFileModificationDate, dellLanMngInfActiveListName=dellLanMngInfActiveListName, dellLanMngInfEnable=dellLanMngInfEnable)
