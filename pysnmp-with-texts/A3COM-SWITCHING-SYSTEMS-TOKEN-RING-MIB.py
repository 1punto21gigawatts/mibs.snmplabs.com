#
# PySNMP MIB module A3COM-SWITCHING-SYSTEMS-TOKEN-RING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-SWITCHING-SYSTEMS-TOKEN-RING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:08:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Bits, Integer32, MibIdentifier, Counter64, ObjectIdentity, Unsigned32, iso, IpAddress, NotificationType, enterprises, Gauge32, NotificationType, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Bits", "Integer32", "MibIdentifier", "Counter64", "ObjectIdentity", "Unsigned32", "iso", "IpAddress", "NotificationType", "enterprises", "Gauge32", "NotificationType", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
a3Com = MibIdentifier((1, 3, 6, 1, 4, 1, 43))
switchingSystemsMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29))
a3ComSwitchingSystemsMib = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4))
a3ComSysTokenRingPort = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 29, 4, 13))
a3ComSysTokenRingPortCount = MibScalar((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortCount.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortCount.setDescription('The count of token ring ports managed by this agent.')
a3ComSysTokenRingPortTable = MibTable((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2), )
if mibBuilder.loadTexts: a3ComSysTokenRingPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortTable.setDescription('A list of token ring port entries. A single entry exists in this list for each token ring port managed by this agent.')
a3ComSysTokenRingPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1), ).setIndexNames((0, "A3COM-SWITCHING-SYSTEMS-TOKEN-RING-MIB", "a3ComSysTokenRingPortIndex"))
if mibBuilder.loadTexts: a3ComSysTokenRingPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortEntry.setDescription('A token ring port entry contains information about a particular token ring port managed by this agent.')
a3ComSysTokenRingPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortIndex.setDescription('The index of the token ring port identified by this entry, relative to this agent.')
a3ComSysTokenRingPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortIfIndex.setDescription('The value of the MIB-II ifIndex corresponding to the token ring port identified by this entry.')
a3ComSysTokenRingPortLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysTokenRingPortLabel.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortLabel.setDescription('An ASCII text string describing the token ring port identified by this entry.')
a3ComSysTokenRingPortInsertStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inserted", 1), ("deinserted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortInsertStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortInsertStatus.setDescription('The current value of the link status for the token ring port identified by this entry.')
a3ComSysTokenRingPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rj45", 1), ("other", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortType.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortType.setDescription('Specific port type description for the token ring port identified by this entry.')
a3ComSysTokenRingPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("station", 1), ("lobe", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysTokenRingPortMode.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortMode.setDescription('The current mode of the port. The default mode (station) is used to connect a hub to the port. Lobe mode is used to direct connect a Token Ring station into the port. This selection can only be made on ports 1 and 2 of the module.')
a3ComSysTokenRingPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fourMegabit", 1), ("sixteenMegabit", 2), ("sixteenMegabitETR", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSysTokenRingPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortSpeed.setDescription('The current speed of the port. The default speed is sixteenMegabit.')
a3ComSysTokenRingPortLineErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortLineErrors.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortLineErrors.setDescription('This counter is incremented when a frame or token is copied or repeated by a station, the E bit is zero in the frame or token and one of the following conditions exists: 1) there is a non-data bit (J or K bit) between the SD and the ED of the frame or token, or 2) there is an FCS error in the frame.')
a3ComSysTokenRingPortBurstErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortBurstErrors.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortBurstErrors.setDescription('This counter is incremented when a station detects the absence of transitions for five half-bit timers (burst-five error).')
a3ComSysTokenRingPortACErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortACErrors.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortACErrors.setDescription('This counter is incremented when a station receives an AMP or SMP frame in which A is equal to C is equal to 0, and then receives another SMP frame with A is equal to C is equal to 0 without first receiving an AMP frame. It denotes a station that cannot set the AC bits properly.')
a3ComSysTokenRingPortAbortTransErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortAbortTransErrors.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortAbortTransErrors.setDescription('This counter is incremented when a station transmits an abort delimiter while transmitting.')
a3ComSysTokenRingPortInternalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortInternalErrors.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortInternalErrors.setDescription('This counter is incremented when a station recognizes an internal error.')
a3ComSysTokenRingPortLostFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortLostFrameErrors.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortLostFrameErrors.setDescription('This counter is incremented when a station is transmitting and its TRR timer expires. This condition denotes a condition where a transmitting station in strip mode does not receive the trailer of the frame before the TRR timer goes off.')
a3ComSysTokenRingPortReceiveCongestionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortReceiveCongestionErrors.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortReceiveCongestionErrors.setDescription('This counter is incremented when a station recognizes a frame addressed to its specific address, but has no available buffer space indicating that the station is congested.')
a3ComSysTokenRingPortFrameCopiedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortFrameCopiedErrors.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortFrameCopiedErrors.setDescription('This counter is incremented when a station recognizes a frame addressed to its specific address and detects that the FS field A bits are set to 1 indicating a possible line hit or duplicate address.')
a3ComSysTokenRingPortTokenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortTokenErrors.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortTokenErrors.setDescription('This counter is incremented when a station acting as the active monitor recognizes an error condition that needs a token transmitted.')
a3ComSysTokenRingPortSoftErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortSoftErrors.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortSoftErrors.setDescription('The number of Soft Errors the interface has detected. It directly corresponds to the number of Report Error MAC frames that this interface has transmitted. Soft Errors are those which are recoverable by the MAC layer protocols.')
a3ComSysTokenRingPortHardErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortHardErrors.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortHardErrors.setDescription('The number of times this interface has detected an immediately recoverable fatal error. It denotes the number of times this interface is either transmitting or receiving beacon MAC frames.')
a3ComSysTokenRingPortTransmitBeacons = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortTransmitBeacons.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortTransmitBeacons.setDescription('The number of times this interface has transmitted a beacon frame.')
a3ComSysTokenRingPortLobeWires = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortLobeWires.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortLobeWires.setDescription('The number of times the interface has detected an open or short circuit in the lobe data path. The adapter will be closed when this condition occurs.')
a3ComSysTokenRingPortRemoves = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortRemoves.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortRemoves.setDescription('The number of times the interface has received a Remove Ring Station MAC frame request. When this frame is received the interface will enter the close state.')
a3ComSysTokenRingPortSingles = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortSingles.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortSingles.setDescription('The number of times the interface has sensed that it is the only station on the ring. This will happen if the interface is the first one up on a ring, or if there is a hardware problem.')
a3ComSysTokenRingPortFreqErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortFreqErrors.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortFreqErrors.setDescription('The number of times the interface has detected that the frequency of the incoming signal differs from the expected frequency.')
a3ComSysTokenRingPortRingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 29, 4, 13, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComSysTokenRingPortRingStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSysTokenRingPortRingStatus.setDescription("The current interface status which can be used to diagnose fluctuating problems that can occur on token rings, after a station has successfully been added to the ring. Before an open is completed, this object has the value for the 'no status' condition. This object is useful for debugging problems when the station can not even enter the ring. The object's value is a sum of values, one for each currently applicable condition. The following values are defined for various conditions: 0 = No Problems detected 32 = Ring Recovery 64 = Single Station 256 = Remove Received 512 = reserved 1024 = Auto-Removal Error 2048 = Lobe Wire Fault 4096 = Transmit Beacon 8192 = Soft Error 16384 = Hard Error 32768 = Signal Loss 131072 = no status, open not completed.")
mibBuilder.exportSymbols("A3COM-SWITCHING-SYSTEMS-TOKEN-RING-MIB", a3ComSysTokenRingPortRingStatus=a3ComSysTokenRingPortRingStatus, a3ComSysTokenRingPortHardErrors=a3ComSysTokenRingPortHardErrors, a3ComSysTokenRingPortSoftErrors=a3ComSysTokenRingPortSoftErrors, a3ComSysTokenRingPortLabel=a3ComSysTokenRingPortLabel, a3ComSysTokenRingPortRemoves=a3ComSysTokenRingPortRemoves, a3ComSysTokenRingPortTransmitBeacons=a3ComSysTokenRingPortTransmitBeacons, a3ComSysTokenRingPortReceiveCongestionErrors=a3ComSysTokenRingPortReceiveCongestionErrors, a3ComSysTokenRingPort=a3ComSysTokenRingPort, a3ComSysTokenRingPortSingles=a3ComSysTokenRingPortSingles, a3ComSysTokenRingPortFreqErrors=a3ComSysTokenRingPortFreqErrors, a3ComSysTokenRingPortSpeed=a3ComSysTokenRingPortSpeed, a3ComSysTokenRingPortInsertStatus=a3ComSysTokenRingPortInsertStatus, a3ComSysTokenRingPortAbortTransErrors=a3ComSysTokenRingPortAbortTransErrors, a3ComSysTokenRingPortLostFrameErrors=a3ComSysTokenRingPortLostFrameErrors, a3ComSysTokenRingPortIndex=a3ComSysTokenRingPortIndex, switchingSystemsMibs=switchingSystemsMibs, a3ComSysTokenRingPortEntry=a3ComSysTokenRingPortEntry, a3ComSwitchingSystemsMib=a3ComSwitchingSystemsMib, a3ComSysTokenRingPortFrameCopiedErrors=a3ComSysTokenRingPortFrameCopiedErrors, a3Com=a3Com, a3ComSysTokenRingPortIfIndex=a3ComSysTokenRingPortIfIndex, a3ComSysTokenRingPortACErrors=a3ComSysTokenRingPortACErrors, a3ComSysTokenRingPortTokenErrors=a3ComSysTokenRingPortTokenErrors, a3ComSysTokenRingPortMode=a3ComSysTokenRingPortMode, a3ComSysTokenRingPortLineErrors=a3ComSysTokenRingPortLineErrors, a3ComSysTokenRingPortType=a3ComSysTokenRingPortType, a3ComSysTokenRingPortCount=a3ComSysTokenRingPortCount, a3ComSysTokenRingPortInternalErrors=a3ComSysTokenRingPortInternalErrors, a3ComSysTokenRingPortTable=a3ComSysTokenRingPortTable, a3ComSysTokenRingPortLobeWires=a3ComSysTokenRingPortLobeWires, a3ComSysTokenRingPortBurstErrors=a3ComSysTokenRingPortBurstErrors)
