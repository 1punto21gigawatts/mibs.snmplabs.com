#
# PySNMP MIB module OMNI-gx2oa100bd-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OMNI-gx2oa100bd-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:34:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
gx2OA100BD, = mibBuilder.importSymbols("GX2HFC-MIB", "gx2OA100BD")
motproxies, gi = mibBuilder.importSymbols("NLS-BBNIDENT-MIB", "motproxies", "gi")
trapNetworkElemAdminState, trapChangedObjectId, trapChangedValueDisplayString, trapNetworkElemAvailStatus, trapText, trapIdentifier, trapNetworkElemOperState, trapNetworkElemSerialNum, trapNETrapLastTrapTimeStamp, trapNetworkElemModelNumber, trapChangedValueInteger, trapNetworkElemAlarmStatus, trapPerceivedSeverity = mibBuilder.importSymbols("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState", "trapChangedObjectId", "trapChangedValueDisplayString", "trapNetworkElemAvailStatus", "trapText", "trapIdentifier", "trapNetworkElemOperState", "trapNetworkElemSerialNum", "trapNETrapLastTrapTimeStamp", "trapNetworkElemModelNumber", "trapChangedValueInteger", "trapNetworkElemAlarmStatus", "trapPerceivedSeverity")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysUpTime, = mibBuilder.importSymbols("SNMPv2-MIB", "sysUpTime")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, IpAddress, TimeTicks, Bits, NotificationType, NotificationType, iso, ModuleIdentity, Counter64, MibIdentifier, ObjectIdentity, Gauge32, Unsigned32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "IpAddress", "TimeTicks", "Bits", "NotificationType", "NotificationType", "iso", "ModuleIdentity", "Counter64", "MibIdentifier", "ObjectIdentity", "Gauge32", "Unsigned32", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class Float(Counter32):
    pass

gx2OA100BDDescriptor = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 1))
gx2OA100BDAnalogTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2), )
if mibBuilder.loadTexts: gx2OA100BDAnalogTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2OA100BDAnalogTable.setDescription('This table contains gx2OA100B specific parameters with nominal and current values.')
gx2OA100BDAnalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1), ).setIndexNames((0, "OMNI-gx2oa100bd-MIB", "gx2OA100BDAnalogTableIndex"))
if mibBuilder.loadTexts: gx2OA100BDAnalogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2OA100BDAnalogEntry.setDescription('This list contains digital product class and the associated RF channel parameters and descriptions.')
gx2OA100BDDigitalTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 3), )
if mibBuilder.loadTexts: gx2OA100BDDigitalTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2OA100BDDigitalTable.setDescription('This table contains gx2OA100B specific parameters with nominal and current values.')
gx2OA100BDDigitalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 3, 2), ).setIndexNames((0, "OMNI-gx2oa100bd-MIB", "gx2OA100BDDigitalTableIndex"))
if mibBuilder.loadTexts: gx2OA100BDDigitalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2OA100BDDigitalEntry.setDescription('This list contains digital product class and the associated RF channel parameters and descriptions.')
gx2OA100BDStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4), )
if mibBuilder.loadTexts: gx2OA100BDStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2OA100BDStatusTable.setDescription('This table contains gx2OA100B specific parameters with nominal and current values.')
gx2OA100BDStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3), ).setIndexNames((0, "OMNI-gx2oa100bd-MIB", "gx2OA100BDStatusTableIndex"))
if mibBuilder.loadTexts: gx2OA100BDStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2OA100BDStatusEntry.setDescription('This list contains digital product class and the associated RF channel parameters and descriptions.')
gx2OA100BDFactoryTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 5), )
if mibBuilder.loadTexts: gx2OA100BDFactoryTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2OA100BDFactoryTable.setDescription('This table contains gx2OA100B specific parameters with nominal and current values.')
gx2OA100BDFactoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 5, 4), ).setIndexNames((0, "OMNI-gx2oa100bd-MIB", "gx2OA100BDFactoryTableIndex"))
if mibBuilder.loadTexts: gx2OA100BDFactoryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2OA100BDFactoryEntry.setDescription('This list contains digital product class and the associated RF channel parameters and descriptions.')
gx2OA100BDHoldTimeTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 6), )
if mibBuilder.loadTexts: gx2OA100BDHoldTimeTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2OA100BDHoldTimeTable.setDescription('This table contains gx2OA100BD specific parameters with nominal and current values.')
gx2OA100BDHoldTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 6, 5), ).setIndexNames((0, "OMNI-gx2oa100bd-MIB", "gx2OA100BDHoldTimeTableIndex"), (0, "OMNI-gx2oa100bd-MIB", "gx2OA100BDHoldTimeSpecIndex"))
if mibBuilder.loadTexts: gx2OA100BDHoldTimeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2OA100BDHoldTimeEntry.setDescription('This list contains digital product class and the associated RF channel parameters and descriptions.')
gx2OA100BDAnalogTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2OA100BDAnalogTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2OA100BDAnalogTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
oa100bdlabelModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelModTemp.setStatus('optional')
if mibBuilder.loadTexts: oa100bdlabelModTemp.setDescription('The value of this object provides the label of the Module Temperature Analog parameter.')
oa100bduomModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bduomModTemp.setStatus('optional')
if mibBuilder.loadTexts: oa100bduomModTemp.setDescription('The value of this object provides the Unit of Measure of the Module Temperature Analog parameter.')
oa100bdmajorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 4), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorHighModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdmajorHighModTemp.setDescription('The value of this object provides the Major High alarm value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdmajorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 5), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorLowModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdmajorLowModTemp.setDescription('The value of this object provides the Major Low alarm value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdminorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 6), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorHighModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdminorHighModTemp.setDescription('The value of this object provides the Minor High alarm value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdminorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 7), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorLowModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdminorLowModTemp.setDescription('The value of this object provides the Minor Low alarm value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdcurrentValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 8), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdcurrentValueModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdcurrentValueModTemp.setDescription('The value of this object provides the Current value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdstateFlagModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateFlagModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdstateFlagModTemp.setDescription('The value of this object provides the state of the Module Temperature Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
oa100bdminValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 10), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminValueModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdminValueModTemp.setDescription('The value of this object provides the minimum value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdmaxValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 11), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmaxValueModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdmaxValueModTemp.setDescription('The value of this object provides the maximum value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdalarmStateModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdalarmStateModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdalarmStateModTemp.setDescription('The value of this object provides the curent alarm state of the Module Temperature Analog parameter.')
oa100bdlabelOptInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelOptInPower.setStatus('optional')
if mibBuilder.loadTexts: oa100bdlabelOptInPower.setDescription('The value of this object provides the label of the Optical Input Power Analog parameter.')
oa100bduomOptInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bduomOptInPower.setStatus('optional')
if mibBuilder.loadTexts: oa100bduomOptInPower.setDescription('The value of this object provides the Unit of Measure of the Optical Input Power Analog parameter.')
oa100bdmajorHighOptInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 15), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorHighOptInPower.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdmajorHighOptInPower.setDescription('The value of this object provides the Major High alarm value of the Optical Input Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdmajorLowOptInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 16), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorLowOptInPower.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdmajorLowOptInPower.setDescription('The value of this object provides the Major Low alarm value of the Optical Input Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdminorHighOptInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 17), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorHighOptInPower.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdminorHighOptInPower.setDescription('The value of this object provides the Minor High alarm value of the Optical Input Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdminorLowOptInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 18), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorLowOptInPower.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdminorLowOptInPower.setDescription('The value of this object provides the Minor Low alarm value of the Optical Input Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdcurrentValueOptInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 19), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdcurrentValueOptInPower.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdcurrentValueOptInPower.setDescription('The value of this object provides the Current value of the Optical Input Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdstateFlagOptInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateFlagOptInPower.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdstateFlagOptInPower.setDescription('The value of this object provides the state of the Optical Input Power Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
oa100bdminValueOptInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 21), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminValueOptInPower.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdminValueOptInPower.setDescription('The value of this object provides the minimum value of the Optical Input Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdmaxValueOptInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 22), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmaxValueOptInPower.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdmaxValueOptInPower.setDescription('The value of this object provides the maximum value of the Optical Input Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdalarmStateOptInPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdalarmStateOptInPower.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdalarmStateOptInPower.setDescription('The value of this object provides the curent alarm state of the Optical Input Power Analog parameter.')
oa100bdlabelOptOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelOptOutPower.setStatus('optional')
if mibBuilder.loadTexts: oa100bdlabelOptOutPower.setDescription('The value of this object provides the label of the Optical Output Power Analog parameter.')
oa100bduomOptOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bduomOptOutPower.setStatus('optional')
if mibBuilder.loadTexts: oa100bduomOptOutPower.setDescription('The value of this object provides the Unit of Measure of the Optical Output Power Analog parameter.')
oa100bdmajorHighOptOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 26), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorHighOptOutPower.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdmajorHighOptOutPower.setDescription('The value of this object provides the Major High alarm value of the Optical Output Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdmajorLowOptOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 27), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorLowOptOutPower.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdmajorLowOptOutPower.setDescription('The value of this object provides the Major Low alarm value of the Optical Output Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdminorHighOptOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 28), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorHighOptOutPower.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdminorHighOptOutPower.setDescription('The value of this object provides the Minor High alarm value of the Optical Output Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdminorLowOptOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 29), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorLowOptOutPower.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdminorLowOptOutPower.setDescription('The value of this object provides the Minor Low alarm value of the Optical Output Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdcurrentValueOptOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 30), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdcurrentValueOptOutPower.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdcurrentValueOptOutPower.setDescription('The value of this object provides the Current value of the Optical Output Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdstateFlagOptOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateFlagOptOutPower.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdstateFlagOptOutPower.setDescription('The value of this object provides the state of the Optical Output Power Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
oa100bdminValueOptOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 32), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminValueOptOutPower.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdminValueOptOutPower.setDescription('The value of this object provides the minimum value of the Optical Output Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdmaxValueOptOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 33), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmaxValueOptOutPower.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdmaxValueOptOutPower.setDescription('The value of this object provides the maximum value of the Optical Output Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdalarmStateOptOutPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdalarmStateOptOutPower.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdalarmStateOptOutPower.setDescription('The value of this object provides the curent alarm state of the Optical Output Power Analog parameter.')
oa100bdlabelMainTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelMainTECTemp.setStatus('optional')
if mibBuilder.loadTexts: oa100bdlabelMainTECTemp.setDescription('The value of this object provides the label of the TEC Temperature Analog parameter.')
oa100bduomMainTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bduomMainTECTemp.setStatus('optional')
if mibBuilder.loadTexts: oa100bduomMainTECTemp.setDescription('The value of this object provides the Unit of Measure of the TEC Temperature Analog parameter.')
oa100bdmajorHighMainTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 37), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorHighMainTECTemp.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdmajorHighMainTECTemp.setDescription('The value of this object provides the Major High alarm value of the TEC Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdmajorLowMainTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 38), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorLowMainTECTemp.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdmajorLowMainTECTemp.setDescription('The value of this object provides the Major Low alarm value of the TEC Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdminorHighMainTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 39), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorHighMainTECTemp.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdminorHighMainTECTemp.setDescription('The value of this object provides the Minor High alarm value of the TEC Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdminorLowMainTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 40), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorLowMainTECTemp.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdminorLowMainTECTemp.setDescription('The value of this object provides the Minor Low alarm value of the TEC Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdcurrentValueMainTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 41), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdcurrentValueMainTECTemp.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdcurrentValueMainTECTemp.setDescription('The value of this object provides the Current value of the TEC Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdstateFlagMainTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateFlagMainTECTemp.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdstateFlagMainTECTemp.setDescription('The value of this object provides the state of the TEC Temperature Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
oa100bdminValueMainTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 43), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminValueMainTECTemp.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdminValueMainTECTemp.setDescription('The value of this object provides the minimum value of the TEC Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdmaxValueMainTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 44), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmaxValueMainTECTemp.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdmaxValueMainTECTemp.setDescription('The value of this object provides the maximum value of the TEC Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdalarmStateMainTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdalarmStateMainTECTemp.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdalarmStateMainTECTemp.setDescription('The value of this object provides the curent alarm state of the TEC Temperature Analog parameter.')
oa100bdlabelMainLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelMainLaserPower.setStatus('optional')
if mibBuilder.loadTexts: oa100bdlabelMainLaserPower.setDescription('The value of this object provides the label of the Main Laser Power Analog parameter.')
oa100bduomMainLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bduomMainLaserPower.setStatus('optional')
if mibBuilder.loadTexts: oa100bduomMainLaserPower.setDescription('The value of this object provides the Unit of Measure of the Main Laser Power Analog parameter.')
oa100bdmajorHighMainLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 48), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorHighMainLaserPower.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdmajorHighMainLaserPower.setDescription('The value of this object provides the Major High alarm value of the Main Laser Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdmajorLowMainLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 49), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorLowMainLaserPower.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdmajorLowMainLaserPower.setDescription('The value of this object provides the Major Low alarm value of the Main Laser Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdminorHighMainLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 50), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorHighMainLaserPower.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdminorHighMainLaserPower.setDescription('The value of this object provides the Minor High alarm value of the Main Laser Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdminorLowMainLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 51), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorLowMainLaserPower.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdminorLowMainLaserPower.setDescription('The value of this object provides the Minor Low alarm value of the Main Laser Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdcurrentValueMainLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 52), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdcurrentValueMainLaserPower.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdcurrentValueMainLaserPower.setDescription('The value of this object provides the Current value of the Main Laser Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdstateFlagMainLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateFlagMainLaserPower.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdstateFlagMainLaserPower.setDescription('The value of this object provides the state of the Main Laser Power Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
oa100bdminValueMainLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 54), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminValueMainLaserPower.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdminValueMainLaserPower.setDescription('The value of this object provides the minimum value of the Main Laser Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdmaxValueMainLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 55), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmaxValueMainLaserPower.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdmaxValueMainLaserPower.setDescription('The value of this object provides the maximum value of the Main Laser Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdalarmStateMainLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdalarmStateMainLaserPower.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdalarmStateMainLaserPower.setDescription('The value of this object provides the curent alarm state of the Main Laser Power Analog parameter.')
oa100bdlabelAuxTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelAuxTECTemp.setStatus('optional')
if mibBuilder.loadTexts: oa100bdlabelAuxTECTemp.setDescription('The value of this object provides the label of the TEC Temperature Analog parameter.')
oa100bduomAuxTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bduomAuxTECTemp.setStatus('optional')
if mibBuilder.loadTexts: oa100bduomAuxTECTemp.setDescription('The value of this object provides the Unit of Measure of the TEC Temperature Analog parameter.')
oa100bdmajorHighAuxTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 59), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorHighAuxTECTemp.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdmajorHighAuxTECTemp.setDescription('The value of this object provides the Major High alarm value of the TEC Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdmajorLowAuxTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 60), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorLowAuxTECTemp.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdmajorLowAuxTECTemp.setDescription('The value of this object provides the Major Low alarm value of the TEC Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdminorHighAuxTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 61), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorHighAuxTECTemp.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdminorHighAuxTECTemp.setDescription('The value of this object provides the Minor High alarm value of the TEC Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdminorLowAuxTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 62), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorLowAuxTECTemp.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdminorLowAuxTECTemp.setDescription('The value of this object provides the Minor Low alarm value of the TEC Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdcurrentValueAuxTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 63), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdcurrentValueAuxTECTemp.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdcurrentValueAuxTECTemp.setDescription('The value of this object provides the Current value of the TEC Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdstateFlagAuxTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateFlagAuxTECTemp.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdstateFlagAuxTECTemp.setDescription('The value of this object provides the state of the TEC Temperature Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
oa100bdminValueAuxTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 65), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminValueAuxTECTemp.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdminValueAuxTECTemp.setDescription('The value of this object provides the minimum value of the TEC Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdmaxValueAuxTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 66), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmaxValueAuxTECTemp.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdmaxValueAuxTECTemp.setDescription('The value of this object provides the maximum value of the TEC Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdalarmStateAuxTECTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdalarmStateAuxTECTemp.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdalarmStateAuxTECTemp.setDescription('The value of this object provides the curent alarm state of the TEC Temperature Analog parameter.')
oa100bdlabelAuxLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 68), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelAuxLaserPower.setStatus('optional')
if mibBuilder.loadTexts: oa100bdlabelAuxLaserPower.setDescription('The value of this object provides the label of the Aux Laser Power Analog parameter.')
oa100bduomAuxLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 69), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bduomAuxLaserPower.setStatus('optional')
if mibBuilder.loadTexts: oa100bduomAuxLaserPower.setDescription('The value of this object provides the Unit of Measure of the Aux Laser Power Analog parameter.')
oa100bdmajorHighAuxLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 70), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorHighAuxLaserPower.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdmajorHighAuxLaserPower.setDescription('The value of this object provides the Major High alarm value of the Aux Laser Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdmajorLowAuxLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 71), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorLowAuxLaserPower.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdmajorLowAuxLaserPower.setDescription('The value of this object provides the Major Low alarm value of the Aux Laser Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdminorHighAuxLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 72), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorHighAuxLaserPower.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdminorHighAuxLaserPower.setDescription('The value of this object provides the Minor High alarm value of the Aux Laser Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdminorLowAuxLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 73), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorLowAuxLaserPower.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdminorLowAuxLaserPower.setDescription('The value of this object provides the Minor Low alarm value of the Aux Laser Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdcurrentValueAuxLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 74), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdcurrentValueAuxLaserPower.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdcurrentValueAuxLaserPower.setDescription('The value of this object provides the Current value of the Aux Laser Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdstateFlagAuxLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateFlagAuxLaserPower.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdstateFlagAuxLaserPower.setDescription('The value of this object provides the state of the Aux Laser Power Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
oa100bdminValueAuxLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 76), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminValueAuxLaserPower.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdminValueAuxLaserPower.setDescription('The value of this object provides the minimum value of the Aux Laser Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdmaxValueAuxLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 77), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmaxValueAuxLaserPower.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdmaxValueAuxLaserPower.setDescription('The value of this object provides the maximum value of the Aux Laser Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdalarmStateAuxLaserPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdalarmStateAuxLaserPower.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdalarmStateAuxLaserPower.setDescription('The value of this object provides the curent alarm state of the Aux Laser Power Analog parameter.')
oa100bdlabelFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 79), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelFanCurrent.setStatus('optional')
if mibBuilder.loadTexts: oa100bdlabelFanCurrent.setDescription('The value of this object provides the label of the Fan Current Analog parameter.')
oa100bduomFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 80), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bduomFanCurrent.setStatus('optional')
if mibBuilder.loadTexts: oa100bduomFanCurrent.setDescription('The value of this object provides the Unit of Measure of the Fan Current Analog parameter.')
oa100bdmajorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 81), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorHighFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdmajorHighFanCurrent.setDescription('The value of this object provides the Major High alarm value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdmajorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 82), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorLowFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdmajorLowFanCurrent.setDescription('The value of this object provides the Major Low alarm value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdminorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 83), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorHighFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdminorHighFanCurrent.setDescription('The value of this object provides the Minor High alarm value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdminorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 84), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorLowFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdminorLowFanCurrent.setDescription('The value of this object provides the Minor Low alarm value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdcurrentValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 85), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdcurrentValueFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdcurrentValueFanCurrent.setDescription('The value of this object provides the Current value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdstateFlagFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateFlagFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdstateFlagFanCurrent.setDescription('The value of this object provides the state of the Fan Current Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
oa100bdminValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 87), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminValueFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdminValueFanCurrent.setDescription('The value of this object provides the minimum value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdmaxValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 88), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmaxValueFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdmaxValueFanCurrent.setDescription('The value of this object provides the maximum value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdalarmStateFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdalarmStateFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdalarmStateFanCurrent.setDescription('The value of this object provides the curent alarm state of the Fan Current Analog parameter.')
oa100bdlabelOPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 90), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelOPSetting.setStatus('optional')
if mibBuilder.loadTexts: oa100bdlabelOPSetting.setDescription('The value of this object provides the label of the Output Power Setting Analog parameter.')
oa100bduomOPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 91), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bduomOPSetting.setStatus('optional')
if mibBuilder.loadTexts: oa100bduomOPSetting.setDescription('The value of this object provides the Unit of Measure of the 12v Current Analog parameter.')
oa100bdmajorHighOPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 92), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorHighOPSetting.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdmajorHighOPSetting.setDescription('The value of this object provides the Major High alarm value of the Output Power Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdmajorLowOPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 93), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorLowOPSetting.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdmajorLowOPSetting.setDescription('The value of this object provides the Major Low alarm value of the Output Power Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdminorHighOPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 94), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorHighOPSetting.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdminorHighOPSetting.setDescription('The value of this object provides the Minor High alarm value of the Output Power Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdminorLowOPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 95), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorLowOPSetting.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdminorLowOPSetting.setDescription('The value of this object provides the Minor Low alarm value of the Output Power Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdcurrentValueOPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 96), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oa100bdcurrentValueOPSetting.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdcurrentValueOPSetting.setDescription('The value of this object provides the Current value of the Output Power Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdstateFlagOPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 97), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateFlagOPSetting.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdstateFlagOPSetting.setDescription('The value of this object provides the state of the Output Power Setting Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
oa100bdminValueOPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 98), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminValueOPSetting.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdminValueOPSetting.setDescription('The value of this object provides the minimum value of the Output Power Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdmaxValueOPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 99), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmaxValueOPSetting.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdmaxValueOPSetting.setDescription('The value of this object provides the maximum value of the Output Power Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdalarmStateOPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdalarmStateOPSetting.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdalarmStateOPSetting.setDescription('The value of this object provides the curent alarm state of the Output Power Setting Analog parameter.')
oa100bdlabelLPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 101), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelLPSetting.setStatus('optional')
if mibBuilder.loadTexts: oa100bdlabelLPSetting.setDescription('The value of this object provides the label of the Laser Power Setting Analog parameter.')
oa100bduomLPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 102), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bduomLPSetting.setStatus('optional')
if mibBuilder.loadTexts: oa100bduomLPSetting.setDescription('The value of this object provides the Unit of Measure of the Laser Power Setting Analog parameter.')
oa100bdmajorHighLPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 103), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorHighLPSetting.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdmajorHighLPSetting.setDescription('The value of this object provides the Major High alarm value of the Laser Power Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdmajorLowLPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 104), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorLowLPSetting.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdmajorLowLPSetting.setDescription('The value of this object provides the Major Low alarm value of the Laser Power Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdminorHighLPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 105), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorHighLPSetting.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdminorHighLPSetting.setDescription('The value of this object provides the Minor High alarm value of the Laser Power Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdminorLowLPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 106), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorLowLPSetting.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdminorLowLPSetting.setDescription('The value of this object provides the Minor Low alarm value of the Laser Power Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdcurrentValueLPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 107), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oa100bdcurrentValueLPSetting.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdcurrentValueLPSetting.setDescription('The value of this object provides the Current value of the Laser Power Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdstateFlagLPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 108), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateFlagLPSetting.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdstateFlagLPSetting.setDescription('The value of this object provides the state of the Laser Power Setting Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
oa100bdminValueLPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 109), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminValueLPSetting.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdminValueLPSetting.setDescription('The value of this object provides the minimum value of the Laser Power Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdmaxValueLPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 110), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmaxValueLPSetting.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdmaxValueLPSetting.setDescription('The value of this object provides the maximum value of the Laser Power Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdalarmStateLPSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 111), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdalarmStateLPSetting.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdalarmStateLPSetting.setDescription('The value of this object provides the curent alarm state of the Laser Power Setting Analog parameter.')
oa100bdlabelCGSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 112), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelCGSetting.setStatus('optional')
if mibBuilder.loadTexts: oa100bdlabelCGSetting.setDescription('The value of this object provides the label of the Constant Gain Setting Analog parameter.')
oa100bduomCGSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 113), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bduomCGSetting.setStatus('optional')
if mibBuilder.loadTexts: oa100bduomCGSetting.setDescription('The value of this object provides the Unit of Measure of the Constant Gain Setting Analog parameter.')
oa100bdmajorHighCGSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 114), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorHighCGSetting.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdmajorHighCGSetting.setDescription('The value of this object provides the Major High alarm value of the Constant Gain Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdmajorLowCGSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 115), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorLowCGSetting.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdmajorLowCGSetting.setDescription('The value of this object provides the Major Low alarm value of the Constant Gain Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdminorHighCGSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 116), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorHighCGSetting.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdminorHighCGSetting.setDescription('The value of this object provides the Minor High alarm value of the Constant Gain Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdminorLowCGSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 117), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorLowCGSetting.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdminorLowCGSetting.setDescription('The value of this object provides the Minor Low alarm value of the Constant Gain Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdcurrentValueCGSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 118), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oa100bdcurrentValueCGSetting.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdcurrentValueCGSetting.setDescription('The value of this object provides the Current value of the Constant Gain Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdstateFlagCGSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 119), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateFlagCGSetting.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdstateFlagCGSetting.setDescription('The value of this object provides the state of the Constant Gain Setting Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
oa100bdminValueCGSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 120), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminValueCGSetting.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdminValueCGSetting.setDescription('The value of this object provides the minimum value of the Constant Gain Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdmaxValueCGSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 121), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmaxValueCGSetting.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdmaxValueCGSetting.setDescription('The value of this object provides the maximum value of the Constant Gain Setting Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdalarmStateCGSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 122), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdalarmStateCGSetting.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdalarmStateCGSetting.setDescription('The value of this object provides the curent alarm state of the Constant Gain Setting Analog parameter.')
oa100bdlabelOptThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 123), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelOptThreshold.setStatus('optional')
if mibBuilder.loadTexts: oa100bdlabelOptThreshold.setDescription('The value of this object provides the label of the Optical Input Threshold Analog parameter.')
oa100bduomOptThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 124), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bduomOptThreshold.setStatus('optional')
if mibBuilder.loadTexts: oa100bduomOptThreshold.setDescription('The value of this object provides the Unit of Measure of the Optical Input Threshold Analog parameter.')
oa100bdmajorHighOptThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 125), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorHighOptThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdmajorHighOptThreshold.setDescription('The value of this object provides the Major High alarm value of the Optical Input Threshold Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdmajorLowOptThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 126), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmajorLowOptThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdmajorLowOptThreshold.setDescription('The value of this object provides the Major Low alarm value of the Optical Input Threshold Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdminorHighOptThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 127), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorHighOptThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdminorHighOptThreshold.setDescription('The value of this object provides the Minor High alarm value of the Optical Input Threshold Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdminorLowOptThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 128), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminorLowOptThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdminorLowOptThreshold.setDescription('The value of this object provides the Minor Low alarm value of the Optical Input Threshold Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdcurrentValueOptThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 129), Float()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oa100bdcurrentValueOptThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdcurrentValueOptThreshold.setDescription('The value of this object provides the Current value of the Optical Input Threshold Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdstateFlagOptThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 130), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateFlagOptThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdstateFlagOptThreshold.setDescription('The value of this object provides the state of the Optical Input Threshold Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
oa100bdminValueOptThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 131), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdminValueOptThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdminValueOptThreshold.setDescription('The value of this object provides the minimum value of the Optical Input Threshold Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdmaxValueOptThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 132), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdmaxValueOptThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdmaxValueOptThreshold.setDescription('The value of this object provides the maximum value of the Optical Input Threshold Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
oa100bdalarmStateOptThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 2, 1, 133), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdalarmStateOptThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdalarmStateOptThreshold.setDescription('The value of this object provides the curent alarm state of the Optical Input Threshold Analog parameter.')
gx2OA100BDDigitalTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2OA100BDDigitalTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2OA100BDDigitalTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
oa100bdlabelModeSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 3, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelModeSetting.setStatus('optional')
if mibBuilder.loadTexts: oa100bdlabelModeSetting.setDescription("The value of this object provides the label of the OA100BD's Mode Digital parameter.")
oa100bdenumModeSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 3, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdenumModeSetting.setStatus('optional')
if mibBuilder.loadTexts: oa100bdenumModeSetting.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 0.')
oa100bdvalueModeSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("power-out-preset", 1), ("power-out-set", 2), ("laser-power-preset", 3), ("laser-power-set", 4), ("constant-gain-preset", 5), ("constant-gain-set", 6), ("invalid-mode", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oa100bdvalueModeSetting.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdvalueModeSetting.setDescription('The value of this object is the current value of the parameter. It is an integer value from 0 to 5 representing the operation mode of the module.')
oa100bdstateFlagModeSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateFlagModeSetting.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdstateFlagModeSetting.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
oa100bdlabelModuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 3, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelModuleState.setStatus('optional')
if mibBuilder.loadTexts: oa100bdlabelModuleState.setDescription('The value of this object provides the label of the Module State Digital parameter.')
oa100bdenumModuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 3, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdenumModuleState.setStatus('optional')
if mibBuilder.loadTexts: oa100bdenumModuleState.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
oa100bdvalueModuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 3, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oa100bdvalueModuleState.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdvalueModuleState.setDescription('The value of this object is the current value of the parameter.')
oa100bdstateFlagModuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 3, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateFlagModuleState.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdstateFlagModuleState.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
oa100bdlabelFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 3, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelFactoryDefault.setStatus('optional')
if mibBuilder.loadTexts: oa100bdlabelFactoryDefault.setDescription('The value of this object provides the label of the Factory Default Reset Digital parameter.')
oa100bdenumFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 3, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdenumFactoryDefault.setStatus('optional')
if mibBuilder.loadTexts: oa100bdenumFactoryDefault.setDescription('The value of this object represents the Enumeration values possible for the Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
oa100bdvalueFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 3, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oa100bdvalueFactoryDefault.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdvalueFactoryDefault.setDescription('The value of this object is the current value of the parameter.')
oa100bdstateFlagFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 3, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateFlagFactoryDefault.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdstateFlagFactoryDefault.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
gx2OA100BDStatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2OA100BDStatusTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2OA100BDStatusTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
oa100bdlabelBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelBoot.setStatus('optional')
if mibBuilder.loadTexts: oa100bdlabelBoot.setDescription('The value of this object provides the label of the Boot Status Status parameter.')
oa100bdvalueBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdvalueBoot.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdvalueBoot.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
oa100bdstateflagBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateflagBoot.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdstateflagBoot.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
oa100bdlabelFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelFlash.setStatus('optional')
if mibBuilder.loadTexts: oa100bdlabelFlash.setDescription('The value of this object provides the label of the Flash Status Status parameter.')
oa100bdvalueFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdvalueFlash.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdvalueFlash.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
oa100bdstateflagFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateflagFlash.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdstateflagFlash.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
oa100bdlabelFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelFactoryDataCRC.setStatus('optional')
if mibBuilder.loadTexts: oa100bdlabelFactoryDataCRC.setDescription('The value of this object provides the label of the Factory Data CRC Status parameter.')
oa100bdvalueFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdvalueFactoryDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdvalueFactoryDataCRC.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
oa100bdstateflagFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateflagFactoryDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdstateflagFactoryDataCRC.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
oa100bdlabelAlarmDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelAlarmDataCRC.setStatus('optional')
if mibBuilder.loadTexts: oa100bdlabelAlarmDataCRC.setDescription('The value of this object provides the label of the Alarm Data CRC Status parameter.')
oa100bdvalueAlarmDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdvalueAlarmDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdvalueAlarmDataCRC.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
oa100bdstateflagAlarmDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateflagAlarmDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdstateflagAlarmDataCRC.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
oa100bdlabelCalibrationDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelCalibrationDataCRC.setStatus('optional')
if mibBuilder.loadTexts: oa100bdlabelCalibrationDataCRC.setDescription('The value of this object provides the label of the Calibration Data CRC Status parameter.')
oa100bdvalueCalibrationDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdvalueCalibrationDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdvalueCalibrationDataCRC.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
oa100bdstateflagCalibrationDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateflagCalibrationDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdstateflagCalibrationDataCRC.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
oa100bdlabelOptInShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelOptInShutdown.setStatus('optional')
if mibBuilder.loadTexts: oa100bdlabelOptInShutdown.setDescription('The value of this object provides the label of the Optical Input Power Shutdown Status parameter.')
oa100bdvalueOptInShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdvalueOptInShutdown.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdvalueOptInShutdown.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
oa100bdstateflagOptInShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateflagOptInShutdown.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdstateflagOptInShutdown.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
oa100bdlabelMainTECTempShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelMainTECTempShutdown.setStatus('optional')
if mibBuilder.loadTexts: oa100bdlabelMainTECTempShutdown.setDescription('The value of this object provides the label of the Main TEC Temperature Shutdown Status parameter.')
oa100bdvalueMainTECTempShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdvalueMainTECTempShutdown.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdvalueMainTECTempShutdown.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
oa100bdstateflagMainTECTempShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateflagMainTECTempShutdown.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdstateflagMainTECTempShutdown.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
oa100bdlabelAuxTECTempShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelAuxTECTempShutdown.setStatus('optional')
if mibBuilder.loadTexts: oa100bdlabelAuxTECTempShutdown.setDescription('The value of this object provides the label of the Aux TEC Temperature Shutdown Status parameter.')
oa100bdvalueAuxTECTempShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdvalueAuxTECTempShutdown.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdvalueAuxTECTempShutdown.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
oa100bdstateflagAuxTECTempShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateflagAuxTECTempShutdown.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdstateflagAuxTECTempShutdown.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
oa100bdlabelPowerFail = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelPowerFail.setStatus('optional')
if mibBuilder.loadTexts: oa100bdlabelPowerFail.setDescription('The value of this object provides the label of the Power Supply Fail Status parameter.')
oa100bdvaluePowerFail = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdvaluePowerFail.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdvaluePowerFail.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
oa100bdstateflagPowerFail = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateflagPowerFail.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdstateflagPowerFail.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
oa100bdlabelKeySwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelKeySwitch.setStatus('optional')
if mibBuilder.loadTexts: oa100bdlabelKeySwitch.setDescription('The value of this object provides the label of the Key Switch Setting Status parameter.')
oa100bdvalueKeySwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdvalueKeySwitch.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdvalueKeySwitch.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
oa100bdstateflagKeySwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateflagKeySwitch.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdstateflagKeySwitch.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
oa100bdlabelMainLaserCurrShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelMainLaserCurrShutdown.setStatus('optional')
if mibBuilder.loadTexts: oa100bdlabelMainLaserCurrShutdown.setDescription('The value of this object provides the label of the Main Laser Current Shutdown Status parameter.')
oa100bdvalueMainLaserCurrShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdvalueMainLaserCurrShutdown.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdvalueMainLaserCurrShutdown.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
oa100bdstateflagMainLaserCurrShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateflagMainLaserCurrShutdown.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdstateflagMainLaserCurrShutdown.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
oa100bdlabelAuxLaserCurrShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelAuxLaserCurrShutdown.setStatus('optional')
if mibBuilder.loadTexts: oa100bdlabelAuxLaserCurrShutdown.setDescription('The value of this object provides the label of the AuxLaser Current Shutdown Status parameter.')
oa100bdvalueAuxLaserCurrShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdvalueAuxLaserCurrShutdown.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdvalueAuxLaserCurrShutdown.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
oa100bdstateflagAuxLaserCurrShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateflagAuxLaserCurrShutdown.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdstateflagAuxLaserCurrShutdown.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
oa100bdlabelMainLaserPowShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelMainLaserPowShutdown.setStatus('optional')
if mibBuilder.loadTexts: oa100bdlabelMainLaserPowShutdown.setDescription('The value of this object provides the label of the Main Laser Power Shutdown Status parameter.')
oa100bdvalueMainLaserPowShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdvalueMainLaserPowShutdown.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdvalueMainLaserPowShutdown.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
oa100bdstateflagMainLaserPowShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateflagMainLaserPowShutdown.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdstateflagMainLaserPowShutdown.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
oa100bdlabelAuxLaserPowShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelAuxLaserPowShutdown.setStatus('optional')
if mibBuilder.loadTexts: oa100bdlabelAuxLaserPowShutdown.setDescription('The value of this object provides the label of the Aux Laser Power Shutdown Status parameter.')
oa100bdvalueAuxLaserPowShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdvalueAuxLaserPowShutdown.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdvalueAuxLaserPowShutdown.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
oa100bdstateflagAuxLaserPowShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateflagAuxLaserPowShutdown.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdstateflagAuxLaserPowShutdown.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
oa100bdlabelADCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelADCStatus.setStatus('optional')
if mibBuilder.loadTexts: oa100bdlabelADCStatus.setDescription('The value of this object provides the label of the ADC Operation Status parameter.')
oa100bdvalueADCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdvalueADCStatus.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdvalueADCStatus.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
oa100bdstateflagADCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateflagADCStatus.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdstateflagADCStatus.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
oa100bdlabelConstGainStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelConstGainStatus.setStatus('optional')
if mibBuilder.loadTexts: oa100bdlabelConstGainStatus.setDescription('The value of this object provides the label of the Constant Gain Status parameter.')
oa100bdvalueConstGainStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdvalueConstGainStatus.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdvalueConstGainStatus.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
oa100bdstateflagConstGainStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateflagConstGainStatus.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdstateflagConstGainStatus.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
oa100bdlabelHardwareErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelHardwareErrorStatus.setStatus('optional')
if mibBuilder.loadTexts: oa100bdlabelHardwareErrorStatus.setDescription('The value of this object provides the label of the Hardware Error Status parameter.')
oa100bdvalueHardwareErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdvalueHardwareErrorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdvalueHardwareErrorStatus.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
oa100bdstateflagHardwareErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateflagHardwareErrorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdstateflagHardwareErrorStatus.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
oa100bdlabelStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 53), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdlabelStandbyStatus.setStatus('optional')
if mibBuilder.loadTexts: oa100bdlabelStandbyStatus.setDescription('The value of this object provides the label of the Standby Status parameter.')
oa100bdvalueStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdvalueStandbyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdvalueStandbyStatus.setDescription('The value of this object provides the current state of the parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
oa100bdstateflagStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 4, 3, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdstateflagStandbyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdstateflagStandbyStatus.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
gx2OA100BDFactoryTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 5, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2OA100BDFactoryTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2OA100BDFactoryTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
oa100bdbootControlByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 5, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdbootControlByte.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdbootControlByte.setDescription('The value of this object indicates which bank the firmware is currently being boot from. Boot Control Byte bit definition as follows : bit 0 : boot bit (0=boot from bank 0, 1=boot from bank 1) bit 1 : bank 0 status (0=bank is blank/bad, 1=bank is OK) bit 2 : bank 1 status (0=bank is blank/bad, 1=bank is OK) bits 3-7 : not used')
oa100bdbootStatusByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 5, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdbootStatusByte.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdbootStatusByte.setDescription('This object indicates the status of the last boot Boot Status Byte bit definitions as follows: bit 0 : bank 0 status (0=bank is OK or not used, 1=bank failed boot) bit 1 : bank 1 status (0=bank is OK or not used, 1=bank failed boot) bit 2 : active bank (0=bank 0 active, 1=bank 1 active) bits 3-7: not used')
oa100bdbank0CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 5, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdbank0CRC.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdbank0CRC.setDescription('This object provides the CRC code of bank 0. The value is best displayed in Hex format')
oa100bdbank1CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 5, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdbank1CRC.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdbank1CRC.setDescription('This object provides the CRC code of bank 1. The value is best displayed in Hex format')
oa100bdprgEEPROMByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 5, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdprgEEPROMByte.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdprgEEPROMByte.setDescription('This object indicates if the EEPROM has been programmed programmed EEPROM byte definitions as follows: 0xBB = EEPROM is programmed 0xDB = EEPROM is being restored to factory defaults 0xFF = EEPROM is blank any other values are assumed to be blank EEPROM')
oa100bdfactoryCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 5, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdfactoryCRC.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdfactoryCRC.setDescription('This object provides the CRC code for the Factory data. The value is best displayed in Hex format')
oa100bdcalculateCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 5, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("factory", 1), ("calibration", 2), ("alarmdata", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdcalculateCRC.setStatus('obsolete')
if mibBuilder.loadTexts: oa100bdcalculateCRC.setDescription('This object indicates which of the Emnums will have the CRC calculated. Calculate CRC command defintions as follows : 0x00 : recalculate factory data CRC 0x01 : recalcualte calibration table CRC 0x02 : recalculate alarm data CRC other values not defined')
oa100bdhourMeter = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 5, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdhourMeter.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdhourMeter.setDescription('This object provides the hour meter reading of the module.')
oa100bdflashPrgCntA = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 5, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdflashPrgCntA.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdflashPrgCntA.setDescription('This object provides the number of times the flash has been programmed on side A.')
oa100bdflashPrgCntB = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 5, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdflashPrgCntB.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdflashPrgCntB.setDescription('This object provides the number of times the flash has been programmed on side B.')
oa100bdfwRev0 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 5, 4, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdfwRev0.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdfwRev0.setDescription('This object provides the Revision of the firmware stores in bank 0. This value should be displayed as two ascii characters.')
oa100bdfwRev1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 5, 4, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oa100bdfwRev1.setStatus('mandatory')
if mibBuilder.loadTexts: oa100bdfwRev1.setDescription('This object provides the Revision of the firmware stores in bank 1. This value should be displayed as two ascii characters.')
gx2OA100BDHoldTimeTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 6, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2OA100BDHoldTimeTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2OA100BDHoldTimeTableIndex.setDescription('The value of this object is the index of the data object.')
gx2OA100BDHoldTimeSpecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 6, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2OA100BDHoldTimeSpecIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2OA100BDHoldTimeSpecIndex.setDescription('The value of this object identifies the index of the alarm object to be modified.')
gx2OA100BDHoldTimeData = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17, 6, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gx2OA100BDHoldTimeData.setStatus('mandatory')
if mibBuilder.loadTexts: gx2OA100BDHoldTimeData.setDescription('The value of this object provides access to the hold timers used to suppress nose on analog objects. This object is a 32 bit object. Validation data is entered into bytes zero and one of the object. Bytes three and four are used to entering the hold time for the specified alarm object. The Hold timer data ranges from 0 to 1300 seconds. The index of this object corresponds to the alarm object to be modified. Alarm Hold timers correspond to the index of this object as follows: Index 1 = xxx, index 2 = xxxx, Index 3 = xxxx, The hold time is represented in seconds.')
trapOA100BDConfigChangeInteger = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,1)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapOA100BDConfigChangeInteger.setDescription("This trap is issued if configuration of a single variable with integer type was changed (via ANY interface). TrapChangedValueInteger variable may contain current reading of that variable. trapPerceivedSeverity - 'indeterminate'")
trapOA100BDConfigChangeDisplayString = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,2)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueDisplayString"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapOA100BDConfigChangeDisplayString.setDescription("This trap is issued if configuration of a single variable with DispalayString type was changed (via ANY interface). TrapChangedValueDisplayString variable may contain current reading of that variable. trapPerceivedSeverity - 'indeterminate'")
trapOA100BDModuleTemperatureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,3)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapOA100BDModuleTemperatureAlarm.setDescription("This trap is issued when the OA100B Module's Temperature goes out of range.")
trapOA100BDOpticalInPowerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,4)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapOA100BDOpticalInPowerAlarm.setDescription('This trap is issued when the input Optical Input Power parameter goes out of range.')
trapOA100BDOpticalOutPowerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,5)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapOA100BDOpticalOutPowerAlarm.setDescription('This trap is issued when the input Optical Output Power parameter goes out of range.')
trapOA100BDMainTECTemperatureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,6)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapOA100BDMainTECTemperatureAlarm.setDescription('This trap is issued when the OA100B Main TEC Temperature goes out of range.')
trapOA100BDMainLaserPowerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,7)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapOA100BDMainLaserPowerAlarm.setDescription('This trap is issued when the OA100B Main Laser Power goes out of range.')
trapOA100BDAuxTECTemperatureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,8)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapOA100BDAuxTECTemperatureAlarm.setDescription('This trap is issued when the OA100B Aux TEC Temperature goes out of range.')
trapOA100BDAuxLaserPowerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,9)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapOA100BDAuxLaserPowerAlarm.setDescription('This trap is issued when the OA100B Aux Laser Power goes out of range.')
trapOA100BDFanCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,10)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapOA100BDFanCurrentAlarm.setDescription("This trap is issued when the OA100B Module's Fan Currrent parameter goes out of range.")
trapOA100BDResetFacDefault = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,11)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapOA100BDResetFacDefault.setDescription('This trap is issued when the OA100B resets to factory defaults')
trapOA100BDStandbyMode = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,12)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapOA100BDStandbyMode.setDescription('This trap is issued when the OA100B is in Standby Mode.')
trapOA100BDOptInShutdown = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,13)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapOA100BDOptInShutdown.setDescription('This trap is issued when the OA100B is in Optical Input Shutdown.')
trapOA100BDMainTECTempShutdown = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,14)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapOA100BDMainTECTempShutdown.setDescription('This trap is issued when the OA100B is in Main TEC Temperature Shutdown.')
trapOA100BDAuxTECTempShutdown = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,15)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapOA100BDAuxTECTempShutdown.setDescription('This trap is issued when the OA100B is in Aux TEC Temperature Shutdown.')
trapOA100BDKeySwitch = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,16)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapOA100BDKeySwitch.setDescription('This trap is issued when the Key Switch disables the OA100B.')
trapOA100BDPowerFail = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,17)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapOA100BDPowerFail.setDescription('This trap is issued when there is an OA100B Power Supply Failure.')
trapOA100BDMainLasCurrShutdown = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,18)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapOA100BDMainLasCurrShutdown.setDescription('This trap is issued when the OA100B is in Main Laser Current Shutdown.')
trapOA100BDAuxLasCurrShutdown = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,19)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapOA100BDAuxLasCurrShutdown.setDescription('This trap is issued when the OA100B is in Aux Laser Current Shutdown.')
trapOA100BDMainLasPowerShutdown = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,20)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapOA100BDMainLasPowerShutdown.setDescription('This trap is issued when the OA100B is in Main Laser Power Shutdown.')
trapOA100BDAuxLasPowerShutdown = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,21)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapOA100BDAuxLasPowerShutdown.setDescription('This trap is issued when the OA100B is in Aux Laser Power Shutdown.')
trapOA100BDInvalidMode = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,22)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapOA100BDInvalidMode.setDescription('This trap is issued when the OA100B is in an invalid mode.')
trapOA100BDFlashAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,23)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapOA100BDFlashAlarm.setDescription("This trap is issued when the OA100B Module's boot or flash programming sequence has detected a Flash error.")
trapOA100BDBoot0Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,24)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapOA100BDBoot0Alarm.setDescription("This trap is issued when the OA100B Module's Bank 0 Boot sequence has detected an error.")
trapOA100BDBoot1Alarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,25)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapOA100BDBoot1Alarm.setDescription("This trap is issued when the OA100B Module's Bank 1 Boot sequence has detected an error.")
trapOA100BDAlarmDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,26)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapOA100BDAlarmDataCRCAlarm.setDescription('This trap is issued when the OA100B Module detects an error calculating the alarm limit CRC.')
trapOA100BDFactoryDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,27)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapOA100BDFactoryDataCRCAlarm.setDescription('This trap is issued when the OA100B Module detects an error calculating the Factory data CRC.')
trapOA100BDCalDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,28)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapOA100BDCalDataCRCAlarm.setDescription('This trap is issued when the OA100B Module detects an error calculating the Calibration data CRC.')
trapOA100BDFacCalFloatAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,29)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapOA100BDFacCalFloatAlarm.setDescription('This trap is issued when the OA100B Module detects factory calibration float data alarm.')
trapOA100BDOptInThreshAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,30)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapOA100BDOptInThreshAlarm.setDescription('This trap is issued when the OA100B Module Optical Input drops below the user set threshold.')
trapOA100BDGainErrorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,31)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapOA100BDGainErrorAlarm.setDescription('This trap is issued when the OA100B Module can not produce the desired user set gain in Constant Gain Set Mode.')
trapOA100BDHardwareErrorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 17) + (0,32)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapOA100BDHardwareErrorAlarm.setDescription("This trap is issued when any of the OA100BD Module's TEC,Laser, +12V, or +3.7V current parameters go out of range.")
mibBuilder.exportSymbols("OMNI-gx2oa100bd-MIB", oa100bdalarmStateMainTECTemp=oa100bdalarmStateMainTECTemp, gx2OA100BDAnalogTable=gx2OA100BDAnalogTable, oa100bdmajorLowFanCurrent=oa100bdmajorLowFanCurrent, oa100bdvalueADCStatus=oa100bdvalueADCStatus, oa100bdmajorLowAuxTECTemp=oa100bdmajorLowAuxTECTemp, oa100bdlabelMainTECTemp=oa100bdlabelMainTECTemp, oa100bdenumModuleState=oa100bdenumModuleState, oa100bdlabelHardwareErrorStatus=oa100bdlabelHardwareErrorStatus, oa100bduomOPSetting=oa100bduomOPSetting, oa100bdmaxValueOptInPower=oa100bdmaxValueOptInPower, oa100bdmaxValueOptOutPower=oa100bdmaxValueOptOutPower, oa100bdmaxValueAuxTECTemp=oa100bdmaxValueAuxTECTemp, trapOA100BDConfigChangeInteger=trapOA100BDConfigChangeInteger, trapOA100BDMainTECTempShutdown=trapOA100BDMainTECTempShutdown, oa100bdminorLowAuxTECTemp=oa100bdminorLowAuxTECTemp, oa100bdlabelFanCurrent=oa100bdlabelFanCurrent, oa100bdlabelMainLaserPower=oa100bdlabelMainLaserPower, oa100bdstateflagFactoryDataCRC=oa100bdstateflagFactoryDataCRC, oa100bdbank0CRC=oa100bdbank0CRC, oa100bdlabelFlash=oa100bdlabelFlash, oa100bdstateflagMainTECTempShutdown=oa100bdstateflagMainTECTempShutdown, trapOA100BDKeySwitch=trapOA100BDKeySwitch, trapOA100BDAuxLasPowerShutdown=trapOA100BDAuxLasPowerShutdown, oa100bduomModTemp=oa100bduomModTemp, oa100bdminorLowMainLaserPower=oa100bdminorLowMainLaserPower, oa100bdmaxValueCGSetting=oa100bdmaxValueCGSetting, oa100bdcurrentValueModTemp=oa100bdcurrentValueModTemp, oa100bdstateFlagFanCurrent=oa100bdstateFlagFanCurrent, oa100bdlabelAuxLaserPowShutdown=oa100bdlabelAuxLaserPowShutdown, oa100bdcalculateCRC=oa100bdcalculateCRC, oa100bdcurrentValueMainTECTemp=oa100bdcurrentValueMainTECTemp, trapOA100BDOptInThreshAlarm=trapOA100BDOptInThreshAlarm, oa100bdmajorHighOptOutPower=oa100bdmajorHighOptOutPower, gx2OA100BDHoldTimeTableIndex=gx2OA100BDHoldTimeTableIndex, oa100bdalarmStateOptThreshold=oa100bdalarmStateOptThreshold, oa100bduomMainTECTemp=oa100bduomMainTECTemp, oa100bdmaxValueAuxLaserPower=oa100bdmaxValueAuxLaserPower, oa100bdminValueOPSetting=oa100bdminValueOPSetting, oa100bdlabelAuxLaserPower=oa100bdlabelAuxLaserPower, gx2OA100BDStatusTable=gx2OA100BDStatusTable, oa100bdvalueAuxTECTempShutdown=oa100bdvalueAuxTECTempShutdown, oa100bduomMainLaserPower=oa100bduomMainLaserPower, oa100bdmajorLowOptInPower=oa100bdmajorLowOptInPower, oa100bdlabelLPSetting=oa100bdlabelLPSetting, oa100bdlabelModTemp=oa100bdlabelModTemp, oa100bdstateFlagMainLaserPower=oa100bdstateFlagMainLaserPower, oa100bdlabelAuxLaserCurrShutdown=oa100bdlabelAuxLaserCurrShutdown, oa100bduomAuxLaserPower=oa100bduomAuxLaserPower, trapOA100BDFactoryDataCRCAlarm=trapOA100BDFactoryDataCRCAlarm, oa100bdstateflagHardwareErrorStatus=oa100bdstateflagHardwareErrorStatus, oa100bdmajorHighAuxLaserPower=oa100bdmajorHighAuxLaserPower, gx2OA100BDFactoryEntry=gx2OA100BDFactoryEntry, oa100bdminValueAuxTECTemp=oa100bdminValueAuxTECTemp, oa100bdmajorLowMainTECTemp=oa100bdmajorLowMainTECTemp, oa100bdmajorHighCGSetting=oa100bdmajorHighCGSetting, oa100bdvalueConstGainStatus=oa100bdvalueConstGainStatus, gx2OA100BDDigitalTable=gx2OA100BDDigitalTable, oa100bdminValueMainTECTemp=oa100bdminValueMainTECTemp, oa100bdmajorHighMainLaserPower=oa100bdmajorHighMainLaserPower, oa100bdvalueFactoryDataCRC=oa100bdvalueFactoryDataCRC, trapOA100BDFanCurrentAlarm=trapOA100BDFanCurrentAlarm, oa100bdvalueMainTECTempShutdown=oa100bdvalueMainTECTempShutdown, oa100bdlabelModuleState=oa100bdlabelModuleState, oa100bdminValueLPSetting=oa100bdminValueLPSetting, trapOA100BDMainTECTemperatureAlarm=trapOA100BDMainTECTemperatureAlarm, oa100bdminorLowOptThreshold=oa100bdminorLowOptThreshold, trapOA100BDFacCalFloatAlarm=trapOA100BDFacCalFloatAlarm, oa100bdminValueOptOutPower=oa100bdminValueOptOutPower, oa100bduomAuxTECTemp=oa100bduomAuxTECTemp, oa100bdmajorHighMainTECTemp=oa100bdmajorHighMainTECTemp, oa100bdcurrentValueOptInPower=oa100bdcurrentValueOptInPower, gx2OA100BDDescriptor=gx2OA100BDDescriptor, oa100bdenumFactoryDefault=oa100bdenumFactoryDefault, oa100bdstateflagAuxLaserCurrShutdown=oa100bdstateflagAuxLaserCurrShutdown, gx2OA100BDHoldTimeSpecIndex=gx2OA100BDHoldTimeSpecIndex, oa100bdlabelMainTECTempShutdown=oa100bdlabelMainTECTempShutdown, oa100bdmajorLowCGSetting=oa100bdmajorLowCGSetting, oa100bdminValueCGSetting=oa100bdminValueCGSetting, oa100bdstateFlagAuxLaserPower=oa100bdstateFlagAuxLaserPower, oa100bdstateFlagModTemp=oa100bdstateFlagModTemp, oa100bdminorHighFanCurrent=oa100bdminorHighFanCurrent, oa100bdstateflagAlarmDataCRC=oa100bdstateflagAlarmDataCRC, oa100bdminorHighLPSetting=oa100bdminorHighLPSetting, oa100bdmajorLowModTemp=oa100bdmajorLowModTemp, oa100bdlabelMainLaserPowShutdown=oa100bdlabelMainLaserPowShutdown, oa100bdstateFlagOptThreshold=oa100bdstateFlagOptThreshold, gx2OA100BDAnalogEntry=gx2OA100BDAnalogEntry, oa100bdlabelADCStatus=oa100bdlabelADCStatus, oa100bdbootStatusByte=oa100bdbootStatusByte, oa100bdstateFlagLPSetting=oa100bdstateFlagLPSetting, oa100bdminValueFanCurrent=oa100bdminValueFanCurrent, trapOA100BDOptInShutdown=trapOA100BDOptInShutdown, oa100bdminValueOptThreshold=oa100bdminValueOptThreshold, oa100bdminorHighAuxLaserPower=oa100bdminorHighAuxLaserPower, oa100bdstateflagCalibrationDataCRC=oa100bdstateflagCalibrationDataCRC, oa100bdflashPrgCntA=oa100bdflashPrgCntA, oa100bdmajorHighOptInPower=oa100bdmajorHighOptInPower, gx2OA100BDHoldTimeTable=gx2OA100BDHoldTimeTable, trapOA100BDHardwareErrorAlarm=trapOA100BDHardwareErrorAlarm, gx2OA100BDStatusEntry=gx2OA100BDStatusEntry, oa100bdmajorLowOptThreshold=oa100bdmajorLowOptThreshold, oa100bdminValueModTemp=oa100bdminValueModTemp, oa100bdminorHighCGSetting=oa100bdminorHighCGSetting, oa100bdmajorHighOptThreshold=oa100bdmajorHighOptThreshold, oa100bdstateflagMainLaserPowShutdown=oa100bdstateflagMainLaserPowShutdown, oa100bdstateflagFlash=oa100bdstateflagFlash, oa100bdvalueAlarmDataCRC=oa100bdvalueAlarmDataCRC, oa100bduomOptThreshold=oa100bduomOptThreshold, oa100bdalarmStateModTemp=oa100bdalarmStateModTemp, oa100bdmajorHighModTemp=oa100bdmajorHighModTemp, oa100bdvalueStandbyStatus=oa100bdvalueStandbyStatus, trapOA100BDAuxTECTempShutdown=trapOA100BDAuxTECTempShutdown, oa100bdminorLowOptInPower=oa100bdminorLowOptInPower, oa100bdalarmStateFanCurrent=oa100bdalarmStateFanCurrent, oa100bdvalueCalibrationDataCRC=oa100bdvalueCalibrationDataCRC, oa100bdstateFlagOPSetting=oa100bdstateFlagOPSetting, oa100bdvalueMainLaserPowShutdown=oa100bdvalueMainLaserPowShutdown, gx2OA100BDHoldTimeData=gx2OA100BDHoldTimeData, trapOA100BDAlarmDataCRCAlarm=trapOA100BDAlarmDataCRCAlarm, oa100bdbank1CRC=oa100bdbank1CRC, oa100bdminorHighModTemp=oa100bdminorHighModTemp, oa100bdminorHighOptOutPower=oa100bdminorHighOptOutPower, oa100bdmajorLowLPSetting=oa100bdmajorLowLPSetting, oa100bdalarmStateCGSetting=oa100bdalarmStateCGSetting, trapOA100BDAuxLasCurrShutdown=trapOA100BDAuxLasCurrShutdown, oa100bdfactoryCRC=oa100bdfactoryCRC, oa100bdminorLowModTemp=oa100bdminorLowModTemp, oa100bdvalueModuleState=oa100bdvalueModuleState, oa100bdstateFlagMainTECTemp=oa100bdstateFlagMainTECTemp, oa100bdenumModeSetting=oa100bdenumModeSetting, oa100bdalarmStateAuxLaserPower=oa100bdalarmStateAuxLaserPower, oa100bdmaxValueModTemp=oa100bdmaxValueModTemp, oa100bdminorHighOptThreshold=oa100bdminorHighOptThreshold, oa100bdalarmStateOptOutPower=oa100bdalarmStateOptOutPower, trapOA100BDMainLaserPowerAlarm=trapOA100BDMainLaserPowerAlarm, oa100bdalarmStateLPSetting=oa100bdalarmStateLPSetting, oa100bdlabelOPSetting=oa100bdlabelOPSetting, trapOA100BDCalDataCRCAlarm=trapOA100BDCalDataCRCAlarm, oa100bdminorHighOptInPower=oa100bdminorHighOptInPower, oa100bdcurrentValueAuxTECTemp=oa100bdcurrentValueAuxTECTemp, oa100bdmaxValueOptThreshold=oa100bdmaxValueOptThreshold, oa100bdvalueKeySwitch=oa100bdvalueKeySwitch, oa100bdfwRev0=oa100bdfwRev0, gx2OA100BDStatusTableIndex=gx2OA100BDStatusTableIndex, trapOA100BDOpticalInPowerAlarm=trapOA100BDOpticalInPowerAlarm, oa100bdmajorLowAuxLaserPower=oa100bdmajorLowAuxLaserPower, oa100bduomFanCurrent=oa100bduomFanCurrent, oa100bdcurrentValueOptOutPower=oa100bdcurrentValueOptOutPower, gx2OA100BDDigitalTableIndex=gx2OA100BDDigitalTableIndex, oa100bdmajorHighLPSetting=oa100bdmajorHighLPSetting, trapOA100BDAuxTECTemperatureAlarm=trapOA100BDAuxTECTemperatureAlarm, oa100bdlabelFactoryDataCRC=oa100bdlabelFactoryDataCRC, oa100bduomOptInPower=oa100bduomOptInPower, oa100bdcurrentValueFanCurrent=oa100bdcurrentValueFanCurrent, trapOA100BDFlashAlarm=trapOA100BDFlashAlarm, oa100bdminorHighMainTECTemp=oa100bdminorHighMainTECTemp, oa100bdminValueOptInPower=oa100bdminValueOptInPower, oa100bdlabelFactoryDefault=oa100bdlabelFactoryDefault, oa100bdcurrentValueLPSetting=oa100bdcurrentValueLPSetting, oa100bdminorLowCGSetting=oa100bdminorLowCGSetting, oa100bdstateflagKeySwitch=oa100bdstateflagKeySwitch, oa100bdmajorLowOPSetting=oa100bdmajorLowOPSetting, oa100bdstateflagConstGainStatus=oa100bdstateflagConstGainStatus, trapOA100BDBoot1Alarm=trapOA100BDBoot1Alarm, oa100bdmajorHighFanCurrent=oa100bdmajorHighFanCurrent, oa100bdvalueAuxLaserCurrShutdown=oa100bdvalueAuxLaserCurrShutdown, oa100bdbootControlByte=oa100bdbootControlByte, gx2OA100BDFactoryTableIndex=gx2OA100BDFactoryTableIndex, oa100bdvalueMainLaserCurrShutdown=oa100bdvalueMainLaserCurrShutdown, oa100bdvalueOptInShutdown=oa100bdvalueOptInShutdown, oa100bdlabelCGSetting=oa100bdlabelCGSetting, oa100bdstateflagMainLaserCurrShutdown=oa100bdstateflagMainLaserCurrShutdown, oa100bdstateflagBoot=oa100bdstateflagBoot, trapOA100BDBoot0Alarm=trapOA100BDBoot0Alarm, oa100bdminorLowLPSetting=oa100bdminorLowLPSetting, gx2OA100BDDigitalEntry=gx2OA100BDDigitalEntry, oa100bdstateFlagFactoryDefault=oa100bdstateFlagFactoryDefault, oa100bdmaxValueMainTECTemp=oa100bdmaxValueMainTECTemp, oa100bdstateFlagOptInPower=oa100bdstateFlagOptInPower, oa100bduomLPSetting=oa100bduomLPSetting, gx2OA100BDHoldTimeEntry=gx2OA100BDHoldTimeEntry, oa100bdstateflagOptInShutdown=oa100bdstateflagOptInShutdown, oa100bdmaxValueOPSetting=oa100bdmaxValueOPSetting, oa100bdlabelOptOutPower=oa100bdlabelOptOutPower, oa100bdlabelKeySwitch=oa100bdlabelKeySwitch, trapOA100BDGainErrorAlarm=trapOA100BDGainErrorAlarm, oa100bdstateflagADCStatus=oa100bdstateflagADCStatus, oa100bdlabelModeSetting=oa100bdlabelModeSetting, trapOA100BDOpticalOutPowerAlarm=trapOA100BDOpticalOutPowerAlarm, oa100bdcurrentValueCGSetting=oa100bdcurrentValueCGSetting, trapOA100BDMainLasCurrShutdown=trapOA100BDMainLasCurrShutdown, oa100bdalarmStateOptInPower=oa100bdalarmStateOptInPower, oa100bdstateFlagOptOutPower=oa100bdstateFlagOptOutPower, oa100bduomCGSetting=oa100bduomCGSetting, oa100bduomOptOutPower=oa100bduomOptOutPower, oa100bdlabelAlarmDataCRC=oa100bdlabelAlarmDataCRC, oa100bdstateFlagAuxTECTemp=oa100bdstateFlagAuxTECTemp, oa100bdlabelMainLaserCurrShutdown=oa100bdlabelMainLaserCurrShutdown, oa100bdlabelConstGainStatus=oa100bdlabelConstGainStatus, oa100bdcurrentValueAuxLaserPower=oa100bdcurrentValueAuxLaserPower, oa100bdvalueAuxLaserPowShutdown=oa100bdvalueAuxLaserPowShutdown, oa100bdvalueHardwareErrorStatus=oa100bdvalueHardwareErrorStatus, trapOA100BDAuxLaserPowerAlarm=trapOA100BDAuxLaserPowerAlarm, oa100bdvalueModeSetting=oa100bdvalueModeSetting, trapOA100BDResetFacDefault=trapOA100BDResetFacDefault, oa100bdlabelStandbyStatus=oa100bdlabelStandbyStatus, oa100bdminValueAuxLaserPower=oa100bdminValueAuxLaserPower, oa100bdvalueFlash=oa100bdvalueFlash, oa100bdlabelCalibrationDataCRC=oa100bdlabelCalibrationDataCRC, trapOA100BDModuleTemperatureAlarm=trapOA100BDModuleTemperatureAlarm, trapOA100BDMainLasPowerShutdown=trapOA100BDMainLasPowerShutdown, trapOA100BDStandbyMode=trapOA100BDStandbyMode, oa100bdminorHighAuxTECTemp=oa100bdminorHighAuxTECTemp, oa100bdstateflagPowerFail=oa100bdstateflagPowerFail, oa100bdhourMeter=oa100bdhourMeter, oa100bdlabelOptInPower=oa100bdlabelOptInPower, oa100bdminorLowMainTECTemp=oa100bdminorLowMainTECTemp, oa100bdstateflagAuxTECTempShutdown=oa100bdstateflagAuxTECTempShutdown, oa100bdstateflagAuxLaserPowShutdown=oa100bdstateflagAuxLaserPowShutdown, oa100bdprgEEPROMByte=oa100bdprgEEPROMByte, oa100bdcurrentValueOptThreshold=oa100bdcurrentValueOptThreshold, oa100bdmaxValueFanCurrent=oa100bdmaxValueFanCurrent, oa100bdvalueFactoryDefault=oa100bdvalueFactoryDefault, oa100bdalarmStateMainLaserPower=oa100bdalarmStateMainLaserPower, oa100bdfwRev1=oa100bdfwRev1, oa100bdstateflagStandbyStatus=oa100bdstateflagStandbyStatus, trapOA100BDConfigChangeDisplayString=trapOA100BDConfigChangeDisplayString, oa100bdstateFlagModeSetting=oa100bdstateFlagModeSetting, oa100bdmaxValueMainLaserPower=oa100bdmaxValueMainLaserPower, gx2OA100BDFactoryTable=gx2OA100BDFactoryTable, oa100bdvalueBoot=oa100bdvalueBoot, oa100bdminorHighOPSetting=oa100bdminorHighOPSetting, oa100bdlabelPowerFail=oa100bdlabelPowerFail, oa100bdminorHighMainLaserPower=oa100bdminorHighMainLaserPower, oa100bdminorLowOPSetting=oa100bdminorLowOPSetting, oa100bdlabelBoot=oa100bdlabelBoot, Float=Float, oa100bdminorLowFanCurrent=oa100bdminorLowFanCurrent, oa100bdmaxValueLPSetting=oa100bdmaxValueLPSetting, oa100bdstateFlagCGSetting=oa100bdstateFlagCGSetting, gx2OA100BDAnalogTableIndex=gx2OA100BDAnalogTableIndex, oa100bdmajorLowOptOutPower=oa100bdmajorLowOptOutPower, oa100bdminorLowAuxLaserPower=oa100bdminorLowAuxLaserPower, oa100bdflashPrgCntB=oa100bdflashPrgCntB, trapOA100BDInvalidMode=trapOA100BDInvalidMode, oa100bdstateFlagModuleState=oa100bdstateFlagModuleState, oa100bdmajorLowMainLaserPower=oa100bdmajorLowMainLaserPower, oa100bdalarmStateAuxTECTemp=oa100bdalarmStateAuxTECTemp, oa100bdmajorHighOPSetting=oa100bdmajorHighOPSetting, oa100bdlabelOptInShutdown=oa100bdlabelOptInShutdown, oa100bdlabelAuxTECTempShutdown=oa100bdlabelAuxTECTempShutdown, oa100bdalarmStateOPSetting=oa100bdalarmStateOPSetting, oa100bdmajorHighAuxTECTemp=oa100bdmajorHighAuxTECTemp, oa100bdcurrentValueOPSetting=oa100bdcurrentValueOPSetting)
mibBuilder.exportSymbols("OMNI-gx2oa100bd-MIB", oa100bdvaluePowerFail=oa100bdvaluePowerFail, oa100bdlabelAuxTECTemp=oa100bdlabelAuxTECTemp, trapOA100BDPowerFail=trapOA100BDPowerFail, oa100bdminValueMainLaserPower=oa100bdminValueMainLaserPower, oa100bdminorLowOptOutPower=oa100bdminorLowOptOutPower, oa100bdcurrentValueMainLaserPower=oa100bdcurrentValueMainLaserPower, oa100bdlabelOptThreshold=oa100bdlabelOptThreshold)
