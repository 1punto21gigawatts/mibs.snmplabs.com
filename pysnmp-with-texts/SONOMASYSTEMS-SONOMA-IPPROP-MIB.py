#
# PySNMP MIB module SONOMASYSTEMS-SONOMA-IPPROP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SONOMASYSTEMS-SONOMA-IPPROP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:09:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, NotificationType, Gauge32, Counter32, Unsigned32, Bits, TimeTicks, Integer32, ObjectIdentity, iso, Counter64, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "NotificationType", "Gauge32", "Counter32", "Unsigned32", "Bits", "TimeTicks", "Integer32", "ObjectIdentity", "iso", "Counter64", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
sonomaRouting, = mibBuilder.importSymbols("SONOMASYSTEMS-SONOMA-MIB", "sonomaRouting")
ipRouting = MibIdentifier((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1))
ipRIPState = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRIPState.setStatus('mandatory')
if mibBuilder.loadTexts: ipRIPState.setDescription('This parameter determines if the RIP routing protocol is enabled globally. This parameter is set to DISABLED if IP routing is disabled globally.')
ipSecurity = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSecurity.setStatus('mandatory')
if mibBuilder.loadTexts: ipSecurity.setDescription('This parameter enables or disables the security mechanism.')
ipPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 3), )
if mibBuilder.loadTexts: ipPortConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipPortConfigTable.setDescription('This is a table of configurable IP parameters.')
ipPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 3, 1), ).setIndexNames((0, "SONOMASYSTEMS-SONOMA-IPPROP-MIB", "ipPortConfigIndex"))
if mibBuilder.loadTexts: ipPortConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipPortConfigEntry.setDescription('This is an entry of the ipPortConfigTable.')
ipPortConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipPortConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipPortConfigIndex.setDescription('This is the Logical Port No. to which this Table entry pertains.')
ipPortForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortForwarding.setStatus('mandatory')
if mibBuilder.loadTexts: ipPortForwarding.setDescription('The indication of whether this entity is acting as a gateway in respect to the forwarding of datagrams received by, but not addressed to, this entity. IP gateways forward datagrams. IP hosts do not ( except those source-routed via the host.) Even if enabled, this port will not forward unless the global ipForwarding flag is enabled and at least one IP Address has been configured on the unit.')
ipPortMACEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noencap", 1), ("ethernet", 2), ("ieee8023", 3), ("tokenRing", 4), ("tokenRingSnap", 5), ("fddiSnap", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortMACEncapsulation.setStatus('mandatory')
if mibBuilder.loadTexts: ipPortMACEncapsulation.setDescription('This parameter determines the LAN encapsulation used when transmitting a datagram on this logical port. This parameter is only applicable for logical ports which are attached to LAN physical ports. Slip ports have noencap')
ipPortDisposition = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bridge", 1), ("discard", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortDisposition.setStatus('mandatory')
if mibBuilder.loadTexts: ipPortDisposition.setDescription(' This parameter determines the action taken on a received IP datagram if routing is disabled for this port, and the global routing flag is set to enabled (2). If routing is disabled for this port and this object has a value of discard (2), than all IP datagrams received on this port which are not addressed to the unit, will be discarded.')
ipPortMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortMTU.setStatus('mandatory')
if mibBuilder.loadTexts: ipPortMTU.setDescription(' Maximum size of an IP packet that can be transferred through this interface. It is the ifMtu for the port minus the mac header. The minimum value is 64 bytes')
ipPortDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 3, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortDefaultGateway.setStatus('mandatory')
if mibBuilder.loadTexts: ipPortDefaultGateway.setDescription(' This parameter determines the default gateway for this specific IP port. If the destination for packets received on this port is not in the forwarding table, they will be routed to this address ')
ipPortDefaultGatewayLP = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortDefaultGatewayLP.setStatus('mandatory')
if mibBuilder.loadTexts: ipPortDefaultGatewayLP.setDescription(' This parameter determines the logical port that the default gateway could be reached.')
ipPortAddrTable = MibTable((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 4), )
if mibBuilder.loadTexts: ipPortAddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipPortAddrTable.setDescription('This table is a table of IP addresses and masks associated with each logical port.')
ipPortAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 4, 1), ).setIndexNames((0, "SONOMASYSTEMS-SONOMA-IPPROP-MIB", "ipPortAddrIndex"), (0, "SONOMASYSTEMS-SONOMA-IPPROP-MIB", "ipPortIpAddress"))
if mibBuilder.loadTexts: ipPortAddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipPortAddrEntry.setDescription('An entry of the IP port address table. All the objects in an entry must be supplied in a single SET PDU.')
ipPortAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortAddrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipPortAddrIndex.setDescription('An index into the ipPortAddr Table which identifies the Logical Port No, for which the address is valid.')
ipPortIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 4, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ipPortIpAddress.setDescription('The IP Address of the logical port.This object combined with the ipPortAddrIndex object constitutes the instance value used to uniquely identify and entry in this table.')
ipPortIpAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 4, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortIpAddressMask.setStatus('mandatory')
if mibBuilder.loadTexts: ipPortIpAddressMask.setDescription('The IP address mask associated with the IP address. ')
ipPortAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPortAddrType.setStatus('mandatory')
if mibBuilder.loadTexts: ipPortAddrType.setDescription('If the value of this object is valid(1) and we are performing a SetRequest then this is a request to add an entry to the table. If a value of invalid(2) is passed in the SetRequest, along with the other objects in an entry then this is a request to delete the entry from the table.')
ipAccessViolations = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAccessViolations.setStatus('mandatory')
if mibBuilder.loadTexts: ipAccessViolations.setDescription(' This is a count of the number of access violations which have occurred for the entire unit.')
ipOtherDiscards = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOtherDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: ipOtherDiscards.setDescription('This is the total number of IP datagrams discarded for the entire unit, for other reasons, eg the incorrect configuration of a WAN port, etc')
ipOutTransmits = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOutTransmits.setStatus('mandatory')
if mibBuilder.loadTexts: ipOutTransmits.setDescription('This is the total number of IP datagrams which have been transmitted by this unit.')
ipRelay = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRelay.setStatus('mandatory')
if mibBuilder.loadTexts: ipRelay.setDescription('This parameter enables or disables the BOOTP/DHCP Relay Agent mechanism.')
ipRelayServerTable = MibTable((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 9), )
if mibBuilder.loadTexts: ipRelayServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipRelayServerTable.setDescription('Table of servers to whom BOOTP/DHCP broadcast messages will be forwarded.')
ipRelayServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 9, 1), ).setIndexNames((0, "SONOMASYSTEMS-SONOMA-IPPROP-MIB", "ipRelayServerAddress"))
if mibBuilder.loadTexts: ipRelayServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipRelayServerEntry.setDescription('A particular entry.')
ipRelayServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 9, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRelayServerAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ipRelayServerAddress.setDescription('The IP Address of the BOOTP/DHCP destination server.')
ipRelayServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRelayServerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ipRelayServerStatus.setDescription('If the value of this object is valid(1) and we are performing a SetRequest then this is a request to add an entry to the table. If a value of invalid(2) is passed in the SetRequest, along with the other objects in an entry then this is a request to delete the entry from the table.')
ipDhcpClient = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDhcpClient.setStatus('mandatory')
if mibBuilder.loadTexts: ipDhcpClient.setDescription('This parameter enables or disables the DHCP Client capabilities for this entity.')
ipCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11))
ipInternalReceived = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInternalReceived.setStatus('mandatory')
if mibBuilder.loadTexts: ipInternalReceived.setDescription("The number of datagrams received that were addressed to the router's IP address.")
ipLoopback = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: ipLoopback.setDescription('The number of datagrams looped back to ourselves.')
ipNonFastPath = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNonFastPath.setStatus('mandatory')
if mibBuilder.loadTexts: ipNonFastPath.setDescription('The number of datagrams forwarded by software outside the fastpath.')
ipBackgroundPath = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipBackgroundPath.setStatus('mandatory')
if mibBuilder.loadTexts: ipBackgroundPath.setDescription('The number of datagrams forwarded or received through the background software path.')
ipNotForwarding = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNotForwarding.setStatus('mandatory')
if mibBuilder.loadTexts: ipNotForwarding.setDescription('The number of datagrams received that would have been forwarded except that forwarding was disabled on the inbound port.')
ipVlanMismatch = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipVlanMismatch.setStatus('mandatory')
if mibBuilder.loadTexts: ipVlanMismatch.setDescription('The number of datagrams not forwarded because the source VLAN id did not match the destination VLAN id.')
ipShortHeader = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipShortHeader.setStatus('mandatory')
if mibBuilder.loadTexts: ipShortHeader.setDescription('The number of datagrams received with a header shorter than is allowed.')
ipHeaderLengthError = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipHeaderLengthError.setStatus('mandatory')
if mibBuilder.loadTexts: ipHeaderLengthError.setDescription('The number of datagrams received with a header specifying a length longer than the enclosing frame.')
ipVersionError = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipVersionError.setStatus('mandatory')
if mibBuilder.loadTexts: ipVersionError.setDescription('The number of datagrams received with an incorrect header version number.')
ipCsumError = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCsumError.setStatus('mandatory')
if mibBuilder.loadTexts: ipCsumError.setDescription('The number of datagrams received with an incorrect header checksum.')
ipFwdFormatError = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdFormatError.setStatus('mandatory')
if mibBuilder.loadTexts: ipFwdFormatError.setDescription('The number of datagrams not forwarded because an error was encountered formating the datagram for its next hop. This is an internal software error.')
ipConvFailedInbound = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipConvFailedInbound.setStatus('mandatory')
if mibBuilder.loadTexts: ipConvFailedInbound.setDescription('The number of datagrams not forwarded because an internal buffer translation failed (inbound). This is an internal software error.')
ipConvFailedOutbound = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipConvFailedOutbound.setStatus('mandatory')
if mibBuilder.loadTexts: ipConvFailedOutbound.setDescription('The number of datagrams not forwarded because an internal buffer translation failed (outbound). This is an internal software error.')
ipArpRequestsSent = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipArpRequestsSent.setStatus('mandatory')
if mibBuilder.loadTexts: ipArpRequestsSent.setDescription('The number of ARP requests sent.')
ipArpRepliesSent = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipArpRepliesSent.setStatus('mandatory')
if mibBuilder.loadTexts: ipArpRepliesSent.setDescription('The number of ARP Replies sent.')
ipArpRequestsRecv = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipArpRequestsRecv.setStatus('mandatory')
if mibBuilder.loadTexts: ipArpRequestsRecv.setDescription('The number of ARP requests received.')
ipArpRepliesRecv = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipArpRepliesRecv.setStatus('mandatory')
if mibBuilder.loadTexts: ipArpRepliesRecv.setDescription('The number of ARP replies received.')
ipArpQueueSatisfied = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipArpQueueSatisfied.setStatus('mandatory')
if mibBuilder.loadTexts: ipArpQueueSatisfied.setDescription('The number of datagrams queued to an ARP queue that we later transmitted.')
ipArpQueueDropped = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipArpQueueDropped.setStatus('mandatory')
if mibBuilder.loadTexts: ipArpQueueDropped.setDescription('The number of datagrams queued to an ARP queue that we later dropped.')
ipArpNotQueuedLimit = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipArpNotQueuedLimit.setStatus('mandatory')
if mibBuilder.loadTexts: ipArpNotQueuedLimit.setDescription('The number of datagrams not queued to an ARP queue because the limit was reached.')
ipRequestsThrottled = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRequestsThrottled.setStatus('mandatory')
if mibBuilder.loadTexts: ipRequestsThrottled.setDescription('The number of requests dropped because they exceeded the IP request throttle.')
ipRequestsThrottledLastSecond = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 11, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRequestsThrottledLastSecond.setStatus('mandatory')
if mibBuilder.loadTexts: ipRequestsThrottledLastSecond.setDescription('The number of requests dropped in the last second because they exceeded the IP request throttle.')
ipParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 12))
ipparamBackwardingThrottle = MibScalar((1, 3, 6, 1, 4, 1, 2926, 25, 4, 1, 12, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 64000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipparamBackwardingThrottle.setStatus('mandatory')
if mibBuilder.loadTexts: ipparamBackwardingThrottle.setDescription('In order to avoid denial-of-service attacks, the IP forwarder throttles the number of requests directed to this system which are processed.')
mibBuilder.exportSymbols("SONOMASYSTEMS-SONOMA-IPPROP-MIB", ipPortDisposition=ipPortDisposition, ipArpRepliesRecv=ipArpRepliesRecv, ipRequestsThrottledLastSecond=ipRequestsThrottledLastSecond, ipRelay=ipRelay, ipAccessViolations=ipAccessViolations, ipOutTransmits=ipOutTransmits, ipPortIpAddress=ipPortIpAddress, ipPortConfigEntry=ipPortConfigEntry, ipArpRequestsRecv=ipArpRequestsRecv, ipVersionError=ipVersionError, ipSecurity=ipSecurity, ipPortAddrTable=ipPortAddrTable, ipCounters=ipCounters, ipArpNotQueuedLimit=ipArpNotQueuedLimit, ipRouting=ipRouting, ipLoopback=ipLoopback, ipRelayServerEntry=ipRelayServerEntry, ipArpQueueDropped=ipArpQueueDropped, ipFwdFormatError=ipFwdFormatError, ipConvFailedInbound=ipConvFailedInbound, ipRelayServerStatus=ipRelayServerStatus, ipVlanMismatch=ipVlanMismatch, ipArpQueueSatisfied=ipArpQueueSatisfied, ipRelayServerTable=ipRelayServerTable, ipNotForwarding=ipNotForwarding, ipRequestsThrottled=ipRequestsThrottled, ipInternalReceived=ipInternalReceived, ipConvFailedOutbound=ipConvFailedOutbound, ipRIPState=ipRIPState, ipPortAddrType=ipPortAddrType, ipPortDefaultGateway=ipPortDefaultGateway, ipShortHeader=ipShortHeader, ipHeaderLengthError=ipHeaderLengthError, ipCsumError=ipCsumError, ipPortAddrEntry=ipPortAddrEntry, ipArpRepliesSent=ipArpRepliesSent, ipDhcpClient=ipDhcpClient, ipPortForwarding=ipPortForwarding, ipPortDefaultGatewayLP=ipPortDefaultGatewayLP, ipParameters=ipParameters, ipPortConfigTable=ipPortConfigTable, ipRelayServerAddress=ipRelayServerAddress, ipPortConfigIndex=ipPortConfigIndex, ipArpRequestsSent=ipArpRequestsSent, ipPortMACEncapsulation=ipPortMACEncapsulation, ipPortAddrIndex=ipPortAddrIndex, ipNonFastPath=ipNonFastPath, ipBackgroundPath=ipBackgroundPath, ipparamBackwardingThrottle=ipparamBackwardingThrottle, ipPortIpAddressMask=ipPortIpAddressMask, ipPortMTU=ipPortMTU, ipOtherDiscards=ipOtherDiscards)
