#
# PySNMP MIB module WLSX-MESH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WLSX-MESH-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:36:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
wlsxEnterpriseMibModules, = mibBuilder.importSymbols("ARUBA-MIB", "wlsxEnterpriseMibModules")
ArubaMeshRole, ArubaEncryptionMethods, ArubaPhyType = mibBuilder.importSymbols("ARUBA-TC", "ArubaMeshRole", "ArubaEncryptionMethods", "ArubaPhyType")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter64, IpAddress, TimeTicks, ObjectIdentity, snmpModules, iso, NotificationType, MibIdentifier, Gauge32, Counter32, Unsigned32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter64", "IpAddress", "TimeTicks", "ObjectIdentity", "snmpModules", "iso", "NotificationType", "MibIdentifier", "Gauge32", "Counter32", "Unsigned32", "Integer32")
TextualConvention, RowStatus, TimeInterval, TruthValue, DateAndTime, PhysAddress, TAddress, TDomain, DisplayString, TestAndIncr, MacAddress, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "TimeInterval", "TruthValue", "DateAndTime", "PhysAddress", "TAddress", "TDomain", "DisplayString", "TestAndIncr", "MacAddress", "StorageType")
wlanAPMacAddress, = mibBuilder.importSymbols("WLSX-WLAN-MIB", "wlanAPMacAddress")
wlsxMeshMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 13))
wlsxMeshMIB.setRevisions(('1907-08-06 05:18',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wlsxMeshMIB.setRevisionsDescriptions(('The initial revision.',))
if mibBuilder.loadTexts: wlsxMeshMIB.setLastUpdated('0708060518Z')
if mibBuilder.loadTexts: wlsxMeshMIB.setOrganization('Aruba Wireless Networks')
if mibBuilder.loadTexts: wlsxMeshMIB.setContactInfo('Postal: 1322 Crossman Avenue Sunnyvale, CA 94089 E-mail: dl-support@arubanetworks.com Phone: +1 408 227 4500')
if mibBuilder.loadTexts: wlsxMeshMIB.setDescription('This MIB module defines MIB objects which provides information about Mesh portal and topology in the Aruba controller.')
wlsxMeshInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 13, 1))
wlsxMeshNodeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 13, 1, 1))
wlsxMeshNodeTotal = MibScalar((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 13, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxMeshNodeTotal.setStatus('current')
if mibBuilder.loadTexts: wlsxMeshNodeTotal.setDescription(' Total Number of mesh nodes in the controller. ')
wlsxMeshNodeTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 13, 1, 1, 2), )
if mibBuilder.loadTexts: wlsxMeshNodeTable.setStatus('current')
if mibBuilder.loadTexts: wlsxMeshNodeTable.setDescription(' This table lists Mesh Node Info. ')
wlsxMeshNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 13, 1, 1, 2, 1), ).setIndexNames((0, "WLSX-WLAN-MIB", "wlanAPMacAddress"))
if mibBuilder.loadTexts: wlsxMeshNodeEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxMeshNodeEntry.setDescription('')
wlsxMeshRole = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 13, 1, 1, 2, 1, 1), ArubaMeshRole()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wlsxMeshRole.setStatus('current')
if mibBuilder.loadTexts: wlsxMeshRole.setDescription(' Mesh role ')
wlsxMeshNodeParent = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 13, 1, 1, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxMeshNodeParent.setStatus('current')
if mibBuilder.loadTexts: wlsxMeshNodeParent.setDescription(" Wired MAC address of mesh node's parent ")
wlsxMeshNodeChildrenCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 13, 1, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxMeshNodeChildrenCount.setStatus('current')
if mibBuilder.loadTexts: wlsxMeshNodeChildrenCount.setDescription(' Mesh node children count ')
wlsxMeshNodeCluster = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 13, 1, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxMeshNodeCluster.setStatus('current')
if mibBuilder.loadTexts: wlsxMeshNodeCluster.setDescription(' Mesh cluster name. ')
wlsxMeshNodeRfBand = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 13, 1, 1, 2, 1, 5), ArubaPhyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxMeshNodeRfBand.setStatus('current')
if mibBuilder.loadTexts: wlsxMeshNodeRfBand.setDescription(' Mesh node rf band ')
wlsxMeshNodePathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 13, 1, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxMeshNodePathCost.setStatus('current')
if mibBuilder.loadTexts: wlsxMeshNodePathCost.setDescription(' Mesh topology path cost ')
wlsxMeshNodeNodeCost = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 13, 1, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxMeshNodeNodeCost.setStatus('current')
if mibBuilder.loadTexts: wlsxMeshNodeNodeCost.setDescription(' Mesh topology node cost ')
wlsxMeshNodeLinkCost = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 13, 1, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxMeshNodeLinkCost.setStatus('current')
if mibBuilder.loadTexts: wlsxMeshNodeLinkCost.setDescription(' Mesh topology link cost ')
wlsxMeshNodeHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 13, 1, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxMeshNodeHopCount.setStatus('current')
if mibBuilder.loadTexts: wlsxMeshNodeHopCount.setDescription(' Mesh topology hop count. ')
wlsxMeshSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 13, 1, 1, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxMeshSNR.setStatus('current')
if mibBuilder.loadTexts: wlsxMeshSNR.setDescription(' Signal-to-noise ratio mesh point sees its parent at. ')
wlsxMeshTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 13, 1, 1, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxMeshTxRate.setStatus('current')
if mibBuilder.loadTexts: wlsxMeshTxRate.setDescription(' Transmit rate for mesh-uplink [mbps]. ')
wlsxMeshRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 13, 1, 1, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxMeshRxRate.setStatus('current')
if mibBuilder.loadTexts: wlsxMeshRxRate.setDescription(' Receive rate for mesh-uplink [mbps]. ')
wlsxMeshUplinkAge = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 13, 1, 1, 2, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxMeshUplinkAge.setStatus('current')
if mibBuilder.loadTexts: wlsxMeshUplinkAge.setDescription(' Time elapsed since the mesh-uplink was formed. ')
wlsxMeshNumRecoveryChildren = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 13, 1, 1, 2, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxMeshNumRecoveryChildren.setStatus('current')
if mibBuilder.loadTexts: wlsxMeshNumRecoveryChildren.setDescription(' The number of children in recovery this mesh node has. ')
wlsxMeshTopologyUpdateAge = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 13, 1, 1, 2, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxMeshTopologyUpdateAge.setStatus('current')
if mibBuilder.loadTexts: wlsxMeshTopologyUpdateAge.setDescription(' Time elapsed since the last mesh topology update was received from this node. ')
wlsxMeshIsRecovery = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 13, 1, 1, 2, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxMeshIsRecovery.setStatus('current')
if mibBuilder.loadTexts: wlsxMeshIsRecovery.setDescription(' True if this mesh point is in recovery. ')
wlsxMeshIs11n = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 13, 1, 1, 2, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wlsxMeshIs11n.setStatus('current')
if mibBuilder.loadTexts: wlsxMeshIs11n.setDescription(' True if this mesh node is 11n-enabled. ')
mibBuilder.exportSymbols("WLSX-MESH-MIB", wlsxMeshUplinkAge=wlsxMeshUplinkAge, wlsxMeshNodeHopCount=wlsxMeshNodeHopCount, wlsxMeshIsRecovery=wlsxMeshIsRecovery, wlsxMeshNodeParent=wlsxMeshNodeParent, wlsxMeshRole=wlsxMeshRole, wlsxMeshNodePathCost=wlsxMeshNodePathCost, wlsxMeshNodeGroup=wlsxMeshNodeGroup, wlsxMeshMIB=wlsxMeshMIB, wlsxMeshNodeNodeCost=wlsxMeshNodeNodeCost, wlsxMeshNodeTotal=wlsxMeshNodeTotal, wlsxMeshNodeLinkCost=wlsxMeshNodeLinkCost, wlsxMeshNumRecoveryChildren=wlsxMeshNumRecoveryChildren, PYSNMP_MODULE_ID=wlsxMeshMIB, wlsxMeshInfoGroup=wlsxMeshInfoGroup, wlsxMeshNodeTable=wlsxMeshNodeTable, wlsxMeshTxRate=wlsxMeshTxRate, wlsxMeshRxRate=wlsxMeshRxRate, wlsxMeshIs11n=wlsxMeshIs11n, wlsxMeshNodeCluster=wlsxMeshNodeCluster, wlsxMeshNodeRfBand=wlsxMeshNodeRfBand, wlsxMeshSNR=wlsxMeshSNR, wlsxMeshTopologyUpdateAge=wlsxMeshTopologyUpdateAge, wlsxMeshNodeEntry=wlsxMeshNodeEntry, wlsxMeshNodeChildrenCount=wlsxMeshNodeChildrenCount)
