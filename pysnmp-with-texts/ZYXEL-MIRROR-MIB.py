#
# PySNMP MIB module ZYXEL-MIRROR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZYXEL-MIRROR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:50:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
dot1dBasePort, = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBasePort")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, Bits, Integer32, Unsigned32, iso, TimeTicks, IpAddress, MibIdentifier, Counter64, Gauge32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Bits", "Integer32", "Unsigned32", "iso", "TimeTicks", "IpAddress", "MibIdentifier", "Counter64", "Gauge32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
esMgmt, = mibBuilder.importSymbols("ZYXEL-ES-SMI", "esMgmt")
zyxelMirror = ModuleIdentity((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 65))
if mibBuilder.loadTexts: zyxelMirror.setLastUpdated('201207010000Z')
if mibBuilder.loadTexts: zyxelMirror.setOrganization('Enterprise Solution ZyXEL')
if mibBuilder.loadTexts: zyxelMirror.setContactInfo('')
if mibBuilder.loadTexts: zyxelMirror.setDescription('The subtree for mirror')
zyxelMirrorSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 65, 1))
zyMirrorState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 65, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyMirrorState.setStatus('current')
if mibBuilder.loadTexts: zyMirrorState.setDescription('Enable/Disable mirror for the switch.')
zyMirrorMonitorPort = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 65, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyMirrorMonitorPort.setStatus('current')
if mibBuilder.loadTexts: zyMirrorMonitorPort.setDescription('The monitor port is the port you copy the traffic to in order to examine it in more detail without interfering with the traffic flow on the original port(s). Type the port number of the monitor port. ')
zyxelMirrorTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 65, 1, 3), )
if mibBuilder.loadTexts: zyxelMirrorTable.setStatus('current')
if mibBuilder.loadTexts: zyxelMirrorTable.setDescription('The table contains mirror port configuration.')
zyxelMirrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 65, 1, 3, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: zyxelMirrorEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelMirrorEntry.setDescription('An entry contains mirror port configuration.')
zyMirrorMirroredState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 65, 1, 3, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyMirrorMirroredState.setStatus('current')
if mibBuilder.loadTexts: zyMirrorMirroredState.setDescription('Enable/Disable mirror on the specified port.')
zyMirrorDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 65, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ingress", 0), ("egress", 1), ("both", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyMirrorDirection.setStatus('current')
if mibBuilder.loadTexts: zyMirrorDirection.setDescription('Specify the direction of the traffic to mirror. Choices are Egress (outgoing), Ingress (incoming) and Both. ')
mibBuilder.exportSymbols("ZYXEL-MIRROR-MIB", zyxelMirrorTable=zyxelMirrorTable, zyxelMirror=zyxelMirror, zyMirrorState=zyMirrorState, zyMirrorMonitorPort=zyMirrorMonitorPort, zyMirrorMirroredState=zyMirrorMirroredState, zyxelMirrorEntry=zyxelMirrorEntry, PYSNMP_MODULE_ID=zyxelMirror, zyMirrorDirection=zyMirrorDirection, zyxelMirrorSetup=zyxelMirrorSetup)
