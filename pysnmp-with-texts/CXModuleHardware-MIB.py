#
# PySNMP MIB module CXModuleHardware-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXModuleHardware-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:32:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
Alias, cxModuleHardware = mibBuilder.importSymbols("CXProduct-SMI", "Alias", "cxModuleHardware")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Unsigned32, Bits, TimeTicks, Counter32, ObjectIdentity, Counter64, Gauge32, NotificationType, IpAddress, ModuleIdentity, iso, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Unsigned32", "Bits", "TimeTicks", "Counter32", "ObjectIdentity", "Counter64", "Gauge32", "NotificationType", "IpAddress", "ModuleIdentity", "iso", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cxModuleHwAlias = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 1, 1), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxModuleHwAlias.setStatus('mandatory')
if mibBuilder.loadTexts: cxModuleHwAlias.setDescription('Determines the name the network administrator assigns to the CPU card. When you configure via the local console, this name is the command prompt. The setting of this object is dynamic. The system immediately implements the name you choose. Range of Values: From 1 to 32 alphanumeric characters. You can use any combination of lettersor numbers; however, you cannot use blank spaces. Use a dash or underscore as a delimiter. Default value: - CX900 architecture: CX900 - CX1000 architecture: CX1000 Configuration Changed: Operative')
cxModuleHwRevAssemblyAndEco = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxModuleHwRevAssemblyAndEco.setStatus('mandatory')
if mibBuilder.loadTexts: cxModuleHwRevAssemblyAndEco.setDescription('Displays the hardware revision of the device. You cannot modify this object. It is a display that the software provides. Range of Values: 7 numeric bits Default Value: None ')
cxModuleHwPhysSlot = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxModuleHwPhysSlot.setStatus('mandatory')
if mibBuilder.loadTexts: cxModuleHwPhysSlot.setDescription('Displays the number of the physical slot where the CPU card resides. You cannot modify this object. It is a display that the software provides. Note: THE CX 900 DOES NOT SUPPORT THIS OBJECT. Range of values: - CX900 architechture: Not supported - CX1000 architechture: From 1 to 16 Default value: None ')
cxModuleHwCpuClockSpeed = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxModuleHwCpuClockSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: cxModuleHwCpuClockSpeed.setDescription('Displays the CPU clock rate in Khz. You cannot modify this object. It is a display that the software provides. Range of Values: None. The value is hardcoded on the CPU. Default Value: 25000')
cxModuleHwLedsDisplay = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxModuleHwLedsDisplay.setStatus('mandatory')
if mibBuilder.loadTexts: cxModuleHwLedsDisplay.setDescription('Displays the status of the error LED. You cannot modify this object. It is a display that the software provides. Options: on: Error LED is on. off: Error LED is off. Default Value: None')
cxModuleHwFlashEpromSize = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxModuleHwFlashEpromSize.setStatus('mandatory')
if mibBuilder.loadTexts: cxModuleHwFlashEpromSize.setDescription('Dispays the size, in Kbytes, of the Flash EPROM. You cannot modify this object. It is a display that the software provides. Range of Values: A maximum of 4 digits from 1024 to 6144 Default Value: None ')
cxModuleHwPrivateDramSize = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxModuleHwPrivateDramSize.setStatus('mandatory')
if mibBuilder.loadTexts: cxModuleHwPrivateDramSize.setDescription('Displays the size, in Kbytes, of the System DRAM. You cannot modify this object. It is a display that the software provides. Range of Values: A maximum of 5 digits from 512 to 33792 Default Value: None')
cxModuleHwSharedDramSize = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxModuleHwSharedDramSize.setStatus('mandatory')
if mibBuilder.loadTexts: cxModuleHwSharedDramSize.setDescription('Displays the size, in Kbytes, of the Data Buffer DRAM. You cannot modify this object. It is a display that the software provides. Range of Values: -A maximum of 5 digits from 512 to 33792 Default Value: None')
cxModuleHwUpTimeTicks = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxModuleHwUpTimeTicks.setStatus('mandatory')
if mibBuilder.loadTexts: cxModuleHwUpTimeTicks.setDescription('Displays the number of time ticks,in 10msec increments, since power up. You cannot modify this object. It is a display that the software provides. Range of Values: 0 to 4,294,967,295 Default Value: 0 ')
cxModuleHwResetTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxModuleHwResetTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: cxModuleHwResetTimeOut.setDescription('Determines the length of delay, in seconds before next scheduled card reset. This type of reset saves the configuration before resetting. The setting of this object is dynamic. The system immediately begins reducing the value you enter. Range of Values: A maximum of 10 digits from 0 to 4,294,967,295 Default Value: 0 Configuration Changed: Operative ')
cxModuleHwSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxModuleHwSwVersion.setStatus('mandatory')
if mibBuilder.loadTexts: cxModuleHwSwVersion.setDescription('Displays the textual string which identifies the software currently running on the device. You cannot modify this object. It is a display that the software provides.')
cxModuleHwNodeId = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxModuleHwNodeId.setStatus('mandatory')
if mibBuilder.loadTexts: cxModuleHwNodeId.setDescription("Identifies this system with an ID number. This parameter is used only for SKYDATA's connection management. Range of Values: 0 to 65,535 Default Value: None ")
mibBuilder.exportSymbols("CXModuleHardware-MIB", cxModuleHwUpTimeTicks=cxModuleHwUpTimeTicks, cxModuleHwNodeId=cxModuleHwNodeId, cxModuleHwAlias=cxModuleHwAlias, cxModuleHwSwVersion=cxModuleHwSwVersion, cxModuleHwResetTimeOut=cxModuleHwResetTimeOut, cxModuleHwRevAssemblyAndEco=cxModuleHwRevAssemblyAndEco, cxModuleHwCpuClockSpeed=cxModuleHwCpuClockSpeed, cxModuleHwSharedDramSize=cxModuleHwSharedDramSize, cxModuleHwPhysSlot=cxModuleHwPhysSlot, cxModuleHwFlashEpromSize=cxModuleHwFlashEpromSize, cxModuleHwLedsDisplay=cxModuleHwLedsDisplay, cxModuleHwPrivateDramSize=cxModuleHwPrivateDramSize)
