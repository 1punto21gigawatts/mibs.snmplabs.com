#
# PySNMP MIB module WWP-LEOS-PORT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-LEOS-PORT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:38:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
dot3adAggPortListPorts, dot3adAggPortActorAdminKey = mibBuilder.importSymbols("IEEE8023-LAG-MIB", "dot3adAggPortListPorts", "dot3adAggPortActorAdminKey")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysName, sysLocation = mibBuilder.importSymbols("SNMPv2-MIB", "sysName", "sysLocation")
ObjectIdentity, IpAddress, Unsigned32, MibIdentifier, Bits, ModuleIdentity, Counter64, TimeTicks, Counter32, iso, Gauge32, Integer32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "IpAddress", "Unsigned32", "MibIdentifier", "Bits", "ModuleIdentity", "Counter64", "TimeTicks", "Counter32", "iso", "Gauge32", "Integer32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
RowStatus, TruthValue, MacAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "MacAddress", "DisplayString", "TextualConvention")
wwpModulesLeos, wwpModules = mibBuilder.importSymbols("WWP-SMI", "wwpModulesLeos", "wwpModules")
wwpLeosPortMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2))
wwpLeosPortMIB.setRevisions(('2012-05-25 00:00', '2011-02-02 00:00', '2010-11-01 00:00', '2010-07-28 00:00', '2010-05-05 17:00', '2008-11-14 00:00', '2008-07-21 00:00', '2007-08-11 00:00', '2007-06-20 00:00', '2006-05-26 00:00', '2006-05-18 00:00', '2006-03-15 00:00', '2005-07-28 00:00', '2004-04-18 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wwpLeosPortMIB.setRevisionsDescriptions(('Added wwpLeosEtherPortAdvertSpeed and wwpLeosEtherPortAdvertDuplex to WwpLeosEtherPortEntry MIB object', 'Added admitOnlyUntagged to wwpLeosEtherPortAcceptableFrameTypes MIB object', 'Added wwpLeosEtherPortEgressCosPolicy', 'Added wwpLeosEtherFixedRColor and wwpLeosEtherPortFrameCosMapId mib objects', 'Added changed length of wwpLeosPortDescr from 32 to 128.', 'Added wwpLeosEtherPortEgressPortQueueMapId to wwpLeosEtherPortEntryTable. Added 10 gig option to wwpLeosEtherInterfaceType, wwpLeosEtherAdminSpeed and wwpLeosEtherOperSpeed', 'Added wwpLeosEtherPortResolvedCosPolicy,wwpLeosEtherPortMode and wwpLeosEtherFixedRcos mib objects', 'Added new mib object wwpLeosEtherPortStateMirrorGroupType.', 'Added new mib object wwpLeosEtherPortUntagDataVid.', 'Added new mib object wwpLeosEtherPortOperAutoNeg.', 'Added new mib object wwpLeosEtherPortStateMirrorGroupOperStatus. Added new mib object wwpLeosEtherPortStateMirrorGroupNumSrcPorts. Added new mib object wwpLeosEtherPortStateMirrorGroupNumDstPorts. Added new mib object wwpLeosEtherPortStateMirrorGroupMemOperState.', 'This MIB module is for the Extension of the dot1dBasePortTable for WWP Products', 'Added eumeration to wwpLeosEtherPortAdminSpeed.', 'Added new tables to support port state mirroring feature.',))
if mibBuilder.loadTexts: wwpLeosPortMIB.setLastUpdated('201205250000Z')
if mibBuilder.loadTexts: wwpLeosPortMIB.setOrganization('Ciena, Inc')
if mibBuilder.loadTexts: wwpLeosPortMIB.setContactInfo('Mib Meister 115 North Sullivan Road Spokane Valley, WA 99037 USA Phone: +1 509 242 9000 Email: support@ciena.com')
if mibBuilder.loadTexts: wwpLeosPortMIB.setDescription('This MIB defines the managed objects for Ethernet ports.')
class PortList(TextualConvention, OctetString):
    description = "Each octet within this value specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the bridge is represented by a single bit within the value of this object. If that bit has a value of '1' then that port is included in the set of ports; the port is not included if its bit has a value of '0'."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class PortEgressFrameCosPolicy(TextualConvention, Integer32):
    description = 'Egress cos policy to use on this port ignore means leave egress map disabled'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ingore", 1), ("rcosToL2OuterPcpMap", 2))

class PortIngressFixedColor(TextualConvention, Integer32):
    description = 'Egress cos policy to use on this port ignore means leave egress map disabled'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("green", 1), ("yellow", 2))

wwpLeosPortMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1))
wwpLeosEtherPort = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1))
wwpLeosEtherPortNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 2))
wwpLeosPortMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 2))
wwpLeosPortMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 2, 0))
wwpLeosPortMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 3))
wwpLeosPortMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 3, 1))
wwpLeosPortMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 3, 2))
wwpLeosEtherPortTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1), )
if mibBuilder.loadTexts: wwpLeosEtherPortTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortTable.setDescription('Table of Ethernet Ports.')
wwpLeosEtherPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1), ).setIndexNames((0, "WWP-LEOS-PORT-MIB", "wwpLeosEtherPortId"))
if mibBuilder.loadTexts: wwpLeosEtherPortEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortEntry.setDescription('Port Entry in the Ethernet Port Table.')
wwpLeosEtherPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosEtherPortId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortId.setDescription("Port ID for the instance. Port ID's start at 1, and may not be consecutive for each additional port. This port Id should refer to the dot1dBasePort in the Dot1dBasePortEntry.")
wwpLeosEtherPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosEtherPortName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortName.setDescription('A textual string containing information about the port. This string should indicate about the physical location of the port as well.')
wwpLeosEtherPortDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortDesc.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortDesc.setDescription('A textual string containing port description.')
wwpLeosEtherPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("ethernet", 1), ("fastEthernet", 2), ("hundredFx", 3), ("gigEthernet", 4), ("lagPort", 5), ("unknown", 6), ("gigHundredFx", 7), ("tripleSpeed", 8), ("tenGigEthernet", 9), ("gigTenGigEthernet", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosEtherPortType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortType.setDescription('The port type for the port.')
wwpLeosEtherPortPhysAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosEtherPortPhysAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortPhysAddr.setDescription('The ethernet MAC address for the port. This information can also be achieved via dot1dTpFdbTable')
wwpLeosEtherPortAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortAutoNeg.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortAutoNeg.setDescription('The object sets the port to AUTO NEG MOde and vice versa. Specific platforms may have requirements of configuring speed before moving the port to out of AUTO-NEG mode.')
wwpLeosEtherPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortAdminStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortAdminStatus.setDescription('The desired state of the port.')
wwpLeosEtherPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("notauth", 3), ("lbtx", 4), ("lbrx", 5), ("linkflap", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosEtherPortOperStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortOperStatus.setDescription('The current operational state of Port.')
wwpLeosEtherPortAdminSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("tenMb", 1), ("hundredMb", 2), ("gig", 3), ("auto", 4), ("tenGig", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortAdminSpeed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortAdminSpeed.setDescription('Desired speed of the port. Set the port speed to be either 10MB, 100MB, or gig. Set the port speed to auto to enable automatic port speed detection. The default value for this object depends upon the platform.')
wwpLeosEtherPortOperSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("tenMb", 1), ("hundredMb", 2), ("gig", 3), ("tenGig", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosEtherPortOperSpeed.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosEtherPortOperSpeed.setDescription('The current operational speed of the port.')
wwpLeosEtherPortAdminDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("half", 1), ("full", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortAdminDuplex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortAdminDuplex.setDescription('The desired mode for the port. It can be set to either half or full duplex operation. The default value for this object depends upon the platform.')
wwpLeosEtherPortOperDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("half", 1), ("full", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosEtherPortOperDuplex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortOperDuplex.setDescription('The current duplex mode of the port.')
wwpLeosEtherPortAdminFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("off", 2), ("asymTx", 3), ("asymRx", 4), ("sym", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortAdminFlowCtrl.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortAdminFlowCtrl.setDescription('Configures the ports flow control operation.')
wwpLeosEtherPortOperFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("off", 2), ("asymTx", 3), ("asymRx", 4), ("sym", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosEtherPortOperFlowCtrl.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortOperFlowCtrl.setDescription('Shows ports flow control configuration.')
wwpLeosEtherIngressPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24576)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherIngressPvid.setReference('IEEE 802.1Q/D11 Section 12.10.1.1')
if mibBuilder.loadTexts: wwpLeosEtherIngressPvid.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherIngressPvid.setDescription('The Ingress PVID, the VLAN ID associated with untagged frames ingressing the port or if tunnel is enabled on this port. The max value for this object is platform dependent. Refer to architecture document for details of platform dependency.')
wwpLeosEtherUntagEgressVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24576))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherUntagEgressVlanId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherUntagEgressVlanId.setDescription('All the egress frames whose VLAN id matches the wwpLeosEtherUntagEgressVlanId, will egress the port as untagged. To egress the frames tagged set wwpLeosEtherUntagEgressVlanId to 0. The max value for this object is platform dependent. Refer to architecture document for details of platform dependency.')
wwpLeosEtherPortAcceptableFrameTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("admitAll", 1), ("admitOnlyVlanTagged", 2), ("admitOnlyUntagged", 3))).clone('admitAll')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortAcceptableFrameTypes.setReference('IEEE 802.1Q/D11 Section 12.10.1.3')
if mibBuilder.loadTexts: wwpLeosEtherPortAcceptableFrameTypes.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortAcceptableFrameTypes.setDescription('When this is admitOnlyVlanTagged(2) the device will discard untagged frames or Priority-Tagged frames received on this port. When admitOnlyUntagged(3) is set, the device will discard VLAN tagged frames received on this port. With admitOnlyUntagged(3) and admitAll(1), untagged frames or Priority-Tagged frames received on this port will be accepted and assigned to the PVID for this port. This control does not affect VLAN independent BPDU frames, such as GVRP and STP. It does affect VLAN dependent BPDU frames, such as GMRP.')
wwpLeosEtherPortUntaggedPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("p0", 0), ("p1", 1), ("p2", 2), ("p3", 3), ("p4", 4), ("p5", 5), ("p6", 6), ("p7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortUntaggedPriority.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosEtherPortUntaggedPriority.setDescription('The 802.1p packet priority to be assigned to packets ingressing this port that do not have an 802.1Q VLAN header. This priority is also assigned to ingress frame if tunnel is enabled on this port.')
wwpLeosEtherPortMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1522, 9216))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortMaxFrameSize.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortMaxFrameSize.setDescription('Setting this object will set the max frame size allowed on a port. The max frame size can vary from 1522 bytes to 9216 bytes. Default value is 1526 bytes.')
wwpLeosEtherPortVlanIngressFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 20), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortVlanIngressFiltering.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortVlanIngressFiltering.setDescription('When this is true(1) the device will discard incoming frames for VLANs which do not include this Port in its Member set. When false(2), the port will accept all incoming frames.')
wwpLeosEtherPortAdminAdvertisedFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("off", 2), ("asymTx", 3), ("sym", 4), ("symAsymRx", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortAdminAdvertisedFlowCtrl.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortAdminAdvertisedFlowCtrl.setDescription('This object specifies the advertised flow control for given port.')
wwpLeosEtherPortVplsPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notDefined", 1), ("subscriber", 2), ("networkFacing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosEtherPortVplsPortType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortVplsPortType.setDescription('This object specifies whether port is in subscriber type, network facing side or both. ')
wwpLeosEtherPortIngressCosPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("leave", 1), ("fixed", 2), ("ippInherit", 3), ("phbgInherit", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortIngressCosPolicy.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortIngressCosPolicy.setDescription('This object specifies the ingress cos policy to be applied to all frames coming in on the given port.')
wwpLeosEtherPortIngressFixedDot1dPri = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortIngressFixedDot1dPri.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortIngressFixedDot1dPri.setDescription("The 802.1p packet priority to be assigned to packets ingressing this port that do not have an 802.1Q VLAN header. This priority is also assigned to ingress untagged frame if the virtual switch cos policy is set to 'fix' for a given port.")
wwpLeosEtherPortUntagDataVsi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortUntagDataVsi.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortUntagDataVsi.setDescription('This object specifies the virtual switch to be used for this port if data frame is untagged. If this object is set to 0 then device will unset this object. When setting this object to Mpls Vsi Index then wwpLeosEtherPortUntagDataVsiType must also be set to mpls (Use multiple set operation)')
wwpLeosEtherPortOperationalSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 26), Gauge32()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosEtherPortOperationalSpeed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortOperationalSpeed.setDescription("An estimate of the port's current bandwidth in k-bits per second for given port.")
wwpLeosEtherPortUntagCtrlVsi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortUntagCtrlVsi.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortUntagCtrlVsi.setDescription('This object specifies the virtual switch to be used for this port if control frame is untagged. If this object is set to 0 then device will unset this object. When setting this object to Mpls Vsi Index then wwpLeosEtherPortUntagCtrlVsiType must also be set to mpls (Use multiple set operation)')
wwpLeosEtherPortMirrorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 28), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortMirrorPort.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortMirrorPort.setDescription('This object defines whether the port will allow traffic from other ports to be mirrored to this port. To allow traffic from other ports to be sent to this port, set this object to True(1). This port is known as a mirror port. If set to true, then other ports may set the values of their wwpLeosEtherPortMirrorIngress or wwpLeosEtherPortMirrorEgress objects to the port index of this port. Setting this object to false(2) disables this port as a mirror port.')
wwpLeosEtherPortMirrorIngress = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortMirrorIngress.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortMirrorIngress.setDescription("The value of this object is the port index of a mirror port. The ingress traffic of this port can be mirrored by setting the destination port's wwpLeosEtherPortMirrorPort object to true. If the value of this object is set to zero this port's ingress traffic will not be mirrored.")
wwpLeosEtherPortMirrorEgress = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortMirrorEgress.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortMirrorEgress.setDescription("The value of this object is the port index of a mirror port. The egress traffic of this port can be mirrored by setting the destination port's wwpLeosEtherPortMirrorPort object to true. If the value of this object is set to zero this port's egress traffic will not be mirrored.")
wwpLeosEtherPortUntagDataVsiType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethernet", 1), ("mpls", 2))).clone('ethernet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortUntagDataVsiType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortUntagDataVsiType.setDescription('This object specifies the virtual switch instance type associated with this port. This object defaults to ethernet and specifies if wwpLeosEtherPortUntagDataVsi belongs to ethernet virtual switch table (wwpLeosVplsVirtualSwitchEthTable in WWP-LEOS-VPLS-MIB) or mpls virtual switch table (wwpLeosVplsVirtualSwitchMplsTable in WWP-LEOS-VPLS-MIB). When setting wwpLeosEtherPortUntagDataVsi to MPLS Vsi Index then this object must also be set to mpls (Use mutliple set operation).')
wwpLeosEtherPortUntagCtrlVsiType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethernet", 1), ("mpls", 2))).clone('ethernet')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortUntagCtrlVsiType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortUntagCtrlVsiType.setDescription('This object specifies the virtual switch instance type associated with this port. This object defaults to ethernet and specifies if wwpLeosEtherPortUntagCtrlVsi belongs to ethernet virtual switch table (wwpLeosVplsVirtualSwitchEthTable) or mpls virtual switch table (wwpLeosVplsVirtualSwitchMplsTable). When setting wwpLeosEtherPortUntagCtrlVsi to MPLS Vsi Index then this object must also be set to mpls (Use mutliple set operation)')
wwpLeosEtherPortVsIngressFiltering = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 33), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortVsIngressFiltering.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortVsIngressFiltering.setDescription('This item is applicable to this port when the port is added as a per-port member to a virtual switch. If true(1) the device will discard incoming tagged frames. If false(2) the device will forwared incoming tagged frames so long as those customer tagged frames do not match another virtual switch with this port included as a per-port-per-vlan member.')
wwpLeosEtherPortOperAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 34), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosEtherPortOperAutoNeg.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortOperAutoNeg.setDescription('The object specifies the operational auto neg state.')
wwpLeosEtherPortUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 35), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosEtherPortUpTime.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortUpTime.setDescription('The object specifies the port up time in hundredths of a second.')
wwpLeosEtherPortUntagDataVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24576)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortUntagDataVid.setReference('IEEE 802.1Q/D11 Section 12.10.1.1')
if mibBuilder.loadTexts: wwpLeosEtherPortUntagDataVid.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortUntagDataVid.setDescription('The Ingress Untagged Data Vid, the VLAN ID stamped on untagged frames ingressing the port or if tunnel is enabled on this port. To disable tagging of untagged data on ingress write a value of 0. The max value for this object is platform dependent. Refer to architecture document for details of platform dependency.')
wwpLeosEtherPortPhyLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 37), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortPhyLoopback.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortPhyLoopback.setDescription('This object defines whether the phy has been placed in loopback mode, which causes frames egressing the port to be looped back to the port.')
wwpLeosEtherPortVlanIngressFilterStrict = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 38), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortVlanIngressFilterStrict.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortVlanIngressFilterStrict.setDescription('This item is applicable to this port when the port is added as a to a virtual switch. If true(1) the legacy ingress filter behavior will be enforced at member addition (drop bit will be set to drop untagged traffic). If false, the splat bit will not be changed. Note that external VLAN associations are also maintained when strict is false.')
wwpLeosEtherPortMacSaDaSwap = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 39), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortMacSaDaSwap.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortMacSaDaSwap.setDescription('This object defines whether the MAC SA and DA will be swapped on frames egressing the port. This only works on a 311V.')
wwpLeosEtherPortMacSaDaSwapVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24576))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortMacSaDaSwapVlan.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortMacSaDaSwapVlan.setDescription('This object defines whether the MAC SA and DA will be swapped on specific VLAN frames egressing the port. This only works on a 311V.')
wwpLeosEtherPortResolvedCosPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 99))).clone(namedValues=NamedValues(("dot1d", 1), ("l3DscpCos", 2), ("fixedCos", 3), ("unknown", 99)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortResolvedCosPolicy.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortResolvedCosPolicy.setDescription(' The Resolved Cost Policy. Setting this attribute is not supported in leos version 4')
wwpLeosEtherPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 99))).clone(namedValues=NamedValues(("rj45", 1), ("sfp", 2), ("default", 3), ("unknown", 99)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortMode.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortMode.setDescription('The mode of the port Setting this attribute is not supported in leos version 4')
wwpLeosEtherFixedRcos = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherFixedRcos.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherFixedRcos.setDescription('The fixed Resolve Cost value. Setting this attribute is not supported in leos version 4')
wwpLeosEtherPortEgressPortQueueMapId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortEgressPortQueueMapId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortEgressPortQueueMapId.setDescription('The Egress-port-Queue associated with this port. Setting this attribute is not supported in leos version 4')
wwpLeosEtherPortResolvedCosMapId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortResolvedCosMapId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortResolvedCosMapId.setDescription('RCOS map id for the port. Setting this attribute is not supported in leos version 4')
wwpLeosEtherPortResolvedCosRemarkL2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 46), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortResolvedCosRemarkL2.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortResolvedCosRemarkL2.setDescription('The object specifies whether to remark L2 based on L3. This applies when the resolved cos policy is either l3-dscp-cos or dot1d-tag1-cos but not when it is fixed-cos policy. Setting this attribute is not supported in leos version 4')
wwpLeosEtherPortL2TransformMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("iPush-e-Pop", 1), ("iStamp-Push-e-QualifiedPopStamp", 2), ("iPush-e-PopStamp", 3))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortL2TransformMode.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortL2TransformMode.setDescription('L2 transform action for port. Setting this attribute is not supported in leos version 4')
wwpLeosEtherPortLinkFlapDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 48), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortLinkFlapDetection.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortLinkFlapDetection.setDescription('This object defines whether link flap detection will be enabled on the port.')
wwpLeosEtherPortLinkFlapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortLinkFlapCount.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortLinkFlapCount.setDescription('This object defines how many link down events are required to trigger a link flap event.')
wwpLeosEtherPortLinkFlapDetectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortLinkFlapDetectTime.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortLinkFlapDetectTime.setDescription('This object defines the time in seconds during which link down events are accumlated to trigger a link flap event.')
wwpLeosEtherPortLinkFlapHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortLinkFlapHoldTime.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortLinkFlapHoldTime.setDescription('This object defines the time in seconds that a port will be operationally disabled after a link flap event, before it is re-enabled. A value of zero causes the port to remain disabled until manually enabled.')
wwpLeosEtherFixedRColor = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 52), PortIngressFixedColor().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherFixedRColor.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherFixedRColor.setDescription('This sets the fixed color to green (default) or yellow. Setting this attribute is not supported in saos version 4')
wwpLeosEtherPortFrameCosMapId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortFrameCosMapId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortFrameCosMapId.setDescription('Frame COS map id for the port. Setting this attribute is not supported in leos version 4')
wwpLeosEtherPortEgressCosPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 54), PortEgressFrameCosPolicy().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortEgressCosPolicy.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortEgressCosPolicy.setDescription('Sets the egress frame cos policy Setting this attribute is not supported in leos version 4')
wwpLeosEtherPortEgressSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 55), Gauge32()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosEtherPortEgressSpeed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortEgressSpeed.setDescription("An estimate of the port's current egress bandwidth restriction in k-bits per second for given port. A value of 0 means there is no active restriction. This attribute not supported in leos version 6")
wwpLeosEtherPortAdaptiveRateSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 56), Gauge32()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosEtherPortAdaptiveRateSpeed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortAdaptiveRateSpeed.setDescription("An estimate of the port's current adaptive-rate bandwidth restriction in k-bits per second for given port. A value of 0 means there is no active restriction. This attribute not supported in leos version 6")
wwpLeosEtherPortMirrorEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("vlanTag", 1))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortMirrorEncap.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortMirrorEncap.setDescription('This object defines whether the port will encapsulate mirrored frames by adding a vlan-tag. (Or, in the case where a mirrored frame is already tagged, by adding a further vlan-tag to the frame) To allow mirrored traffic to be encapsulated, set this object to vlan-tag(1). If set to vlan-tag, then the values of wwpLeosEtherPortMirrorEncapVid and wwpLeosEtherPortMirrorEncapTpid will be used to populate tag added to each mirrored frame. Setting this object to none(0) indicates no tag is to be added to the mirrored frames.')
wwpLeosEtherPortMirrorEncapVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24576)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortMirrorEncapVid.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortMirrorEncapVid.setDescription('This object defines the VID that will be added to mirrored frames when the mirroring encapsulation mode is vlan-tag')
wwpLeosEtherPortMirrorEncapTpid = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tpid8100", 1), ("tpid9100", 2), ("tpid88A8", 3))).clone('tpid8100')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortMirrorEncapTpid.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortMirrorEncapTpid.setDescription('This object defines the tpid used in the tag that is added to mirrored frames, when the mirroring encapsulation mode is vlan-tag')
wwpLeosEtherPortIfgDecrease = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortIfgDecrease.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortIfgDecrease.setDescription('This object defines the number of bytes that will be subtracted from the minimum standard IFG of 12 bytes as defined in IEEE 802.3. SAOS 6.x only supports a value of 0 or 4.')
wwpLeosEtherPortAdvertSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("not-applicable", 1), ("ten", 2), ("hundred", 3), ("gigabit", 4), ("ten-hundred-gigabit", 5))).clone('ten-hundred-gigabit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortAdvertSpeed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortAdvertSpeed.setDescription('This object defines the speed capabilities that will be advertised during the auto-negotiation process.')
wwpLeosEtherPortAdvertDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 1, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("not-applicable", 1), ("half", 2), ("full", 3), ("half-full", 4))).clone('half-full')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortAdvertDuplex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortAdvertDuplex.setDescription('This object defines the duplex capabilities that will be advertised during the auto-negotiation process.')
wwpLeosEtherPortFlushTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 2), )
if mibBuilder.loadTexts: wwpLeosEtherPortFlushTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortFlushTable.setDescription('Table of port flush entries.')
wwpLeosEtherPortFlushEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 2, 1), ).setIndexNames((0, "WWP-LEOS-PORT-MIB", "wwpLeosEtherPortId"))
if mibBuilder.loadTexts: wwpLeosEtherPortFlushEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortFlushEntry.setDescription('Broadcast containment port entry in the Ethernet Port Table.')
wwpLeosEtherPortFlushActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 2, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortFlushActivate.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortFlushActivate.setDescription("Setting this object to 'true' will cause the Macs to be flushed for the port specified by wwpLeosEtherPortId.")
wwpLeosEtherPortTrapsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 3), )
if mibBuilder.loadTexts: wwpLeosEtherPortTrapsTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortTrapsTable.setDescription('Table of Ethernet Ports Traps.')
wwpLeosEtherPortTrapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 3, 1), ).setIndexNames((0, "WWP-LEOS-PORT-MIB", "wwpLeosEtherPortId"))
if mibBuilder.loadTexts: wwpLeosEtherPortTrapsEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortTrapsEntry.setDescription('Port Traps Entry in the Ethernet Port Trap Table.')
wwpLeosEtherPortTrapsState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortTrapsState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortTrapsState.setDescription('Setting this object will enable or disable all traps on given port.')
wwpLeosEtherPortStateMirrorGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 4), )
if mibBuilder.loadTexts: wwpLeosEtherPortStateMirrorGroupTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortStateMirrorGroupTable.setDescription('This table can be used to keep track of all the port state mirror groups. To create entry in this table along with indexes following mib objects must be set using multiple set operation wwpLeosEtherPortStateMirrorGroupName must be valid string. wwpLeosEtherPortStateMirrorGroupStatus must be set.')
wwpLeosEtherPortStateMirrorGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 4, 1), ).setIndexNames((0, "WWP-LEOS-PORT-MIB", "wwpLeosEtherPortStateMirrorGroupId"))
if mibBuilder.loadTexts: wwpLeosEtherPortStateMirrorGroupEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortStateMirrorGroupEntry.setDescription('Each entry in this table will define the port state mirror group.')
wwpLeosEtherPortStateMirrorGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosEtherPortStateMirrorGroupId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortStateMirrorGroupId.setDescription('This mib object is used as index in the table and is used to identify the unique group id.')
wwpLeosEtherPortStateMirrorGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosEtherPortStateMirrorGroupName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortStateMirrorGroupName.setDescription('This mib object is used to specify the name of the group.')
wwpLeosEtherPortStateMirrorGroupOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosEtherPortStateMirrorGroupOperStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortStateMirrorGroupOperStatus.setDescription('This mib object is used to specify the operational status of the group.')
wwpLeosEtherPortStateMirrorGroupNumSrcPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosEtherPortStateMirrorGroupNumSrcPorts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortStateMirrorGroupNumSrcPorts.setDescription('This mib object is used to specify the total number of source ports that exists in the group.')
wwpLeosEtherPortStateMirrorGroupNumDstPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosEtherPortStateMirrorGroupNumDstPorts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortStateMirrorGroupNumDstPorts.setDescription('This mib object is used to specify the total number of destination ports that exists in the group.')
wwpLeosEtherPortStateMirrorGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 4, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosEtherPortStateMirrorGroupStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortStateMirrorGroupStatus.setDescription('Used to manage the creation and deletion of the conceptual rows in this table.')
wwpLeosEtherPortStateMirrorGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unidirectional", 1), ("bidirectional", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortStateMirrorGroupType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortStateMirrorGroupType.setDescription("This mib object is used to specify the directional mode type for the port state mirror group. A uni-directional(1) mirror group type will only mirror the port state of the source port(s) to the destination port(s). The bi-directional(2) mirror group type will mirror state of either the source port(s) to the destination port(s) or the state of the destination port(s) will be mirrored to the source port(s). Where there are more than one source or destination ports the combined state of the source or destination group will be the combined 'OR'ed status of all the ports in either the source or destination groups. In other words, if one or more source ports is 'UP' then the source group is 'UP' and the mirrored destination state may be 'UP'. The default for this object type is uni-directional.")
wwpLeosEtherPortStateMirrorGroupMemTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 5), )
if mibBuilder.loadTexts: wwpLeosEtherPortStateMirrorGroupMemTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortStateMirrorGroupMemTable.setDescription('This table is used to keep track of port group membership.')
wwpLeosEtherPortStateMirrorGroupMemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 5, 1), ).setIndexNames((0, "WWP-LEOS-PORT-MIB", "wwpLeosEtherPortStateMirrorGroupId"), (0, "WWP-LEOS-PORT-MIB", "wwpLeosEtherPortId"))
if mibBuilder.loadTexts: wwpLeosEtherPortStateMirrorGroupMemEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortStateMirrorGroupMemEntry.setDescription('Each entry in this table is used to represent the membership of port to a given group and group type.')
wwpLeosEtherPortStateMirrorGroupMemType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("srcPort", 1), ("dstPort", 2))).clone('srcPort')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosEtherPortStateMirrorGroupMemType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortStateMirrorGroupMemType.setDescription('Setting this object will specify the type of group this port is member of for a given port state mirror group. This object can only be set while creating the entry. This object cannot be modified once entry is created.')
wwpLeosEtherPortStateMirrorGroupMemOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosEtherPortStateMirrorGroupMemOperState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortStateMirrorGroupMemOperState.setDescription('This mib object is used to specify the operational status of the port.')
wwpLeosEtherPortStateMirrorGroupMemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 1, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosEtherPortStateMirrorGroupMemStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortStateMirrorGroupMemStatus.setDescription('Used to manage the creation and deletion of the conceptual rows in this table.')
wwpLeosEtherStndLinkUpDownTrapsEnable = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 2, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherStndLinkUpDownTrapsEnable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherStndLinkUpDownTrapsEnable.setDescription("Setting this object to 'false(2)' will cause standard Link Up Down Traps to be suppressed.")
wwpLeosEtherPortLinkUpDownTrapsEnable = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 2, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherPortLinkUpDownTrapsEnable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherPortLinkUpDownTrapsEnable.setDescription("Setting this object to 'true(1)' will cause wwp specific port up down trap to be generated.")
wwpLeosEtherAggPortLinkUpDownTrapsEnable = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 1, 2, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosEtherAggPortLinkUpDownTrapsEnable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEtherAggPortLinkUpDownTrapsEnable.setDescription("Setting this object to 'true(1)' will cause wwp specific agg port up down trap to be generated for a link state change on a physical port that is a member of a agg.")
wwpLeosEthLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 2, 0, 3)).setObjects(("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortId"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortName"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortType"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortAdminStatus"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortOperStatus"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortDesc"))
if mibBuilder.loadTexts: wwpLeosEthLinkUp.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEthLinkUp.setDescription('A wwpLeosEthLinkUp trap signifies that the SNMP entity, acting in an agent role, has detected that the ifOperStatus object for one of its communication links has entered the up state.')
wwpLeosEthLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 2, 0, 4)).setObjects(("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortId"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortType"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortName"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortAdminStatus"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortOperStatus"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortDesc"))
if mibBuilder.loadTexts: wwpLeosEthLinkDown.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEthLinkDown.setDescription('A wwpLeosEthLinkDown trap signifies that the SNMP entity, acting in an agent role, has detected that the ifOperStatus object for one of its communication links has entered the down state.')
wwpLeosEthAdminSpeedIncompatible = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 2, 0, 5)).setObjects(("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortId"))
if mibBuilder.loadTexts: wwpLeosEthAdminSpeedIncompatible.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEthAdminSpeedIncompatible.setDescription("A wwpLeosEthAdminSpeedIncompatible trap is generated when the port administrative speed doesn't match the speed of the SFP transceiver installed.")
wwpLeosEthLinkFlap = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 2, 0, 6)).setObjects(("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortId"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortType"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortName"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortOperStatus"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortDesc"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortLinkFlapHoldTime"))
if mibBuilder.loadTexts: wwpLeosEthLinkFlap.setStatus('current')
if mibBuilder.loadTexts: wwpLeosEthLinkFlap.setDescription('A wwpLeosEthLinkFlap trap signifies that the SNMP entity, acting in an agent role, has detected that the ifOperStatus object for one of its communication links has been changed due to link flap detection.')
wwpLeosAggLinkUpDown = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 2, 2, 0, 7)).setObjects(("SNMPv2-MIB", "sysName"), ("SNMPv2-MIB", "sysLocation"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortId"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortName"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortDesc"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortType"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortAdminStatus"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortOperStatus"), ("IEEE8023-LAG-MIB", "dot3adAggPortActorAdminKey"), ("IEEE8023-LAG-MIB", "dot3adAggPortListPorts"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortName"), ("WWP-LEOS-PORT-MIB", "wwpLeosEtherPortDesc"))
if mibBuilder.loadTexts: wwpLeosAggLinkUpDown.setStatus('current')
if mibBuilder.loadTexts: wwpLeosAggLinkUpDown.setDescription('A wwpLeosAggLinkUpDown trap signifies that the SNMP entity, acting in an agent role, has detected that the ifOperStatus object for one of its communication links has changed state.')
mibBuilder.exportSymbols("WWP-LEOS-PORT-MIB", wwpLeosEthLinkDown=wwpLeosEthLinkDown, wwpLeosEtherPortUntagCtrlVsi=wwpLeosEtherPortUntagCtrlVsi, wwpLeosEtherPortOperFlowCtrl=wwpLeosEtherPortOperFlowCtrl, wwpLeosEtherPortUntagDataVid=wwpLeosEtherPortUntagDataVid, wwpLeosEtherPortStateMirrorGroupMemStatus=wwpLeosEtherPortStateMirrorGroupMemStatus, wwpLeosEtherPortUntaggedPriority=wwpLeosEtherPortUntaggedPriority, wwpLeosEtherPortEntry=wwpLeosEtherPortEntry, wwpLeosEtherFixedRcos=wwpLeosEtherFixedRcos, wwpLeosEtherPortAdvertSpeed=wwpLeosEtherPortAdvertSpeed, wwpLeosEtherUntagEgressVlanId=wwpLeosEtherUntagEgressVlanId, wwpLeosEtherPortStateMirrorGroupType=wwpLeosEtherPortStateMirrorGroupType, wwpLeosEtherPortLinkFlapDetection=wwpLeosEtherPortLinkFlapDetection, wwpLeosEtherPortAdminStatus=wwpLeosEtherPortAdminStatus, PortEgressFrameCosPolicy=PortEgressFrameCosPolicy, wwpLeosEtherPortAcceptableFrameTypes=wwpLeosEtherPortAcceptableFrameTypes, wwpLeosPortMIBGroups=wwpLeosPortMIBGroups, wwpLeosEtherPortType=wwpLeosEtherPortType, wwpLeosEthLinkUp=wwpLeosEthLinkUp, wwpLeosEtherPortMirrorEgress=wwpLeosEtherPortMirrorEgress, wwpLeosEtherPortVsIngressFiltering=wwpLeosEtherPortVsIngressFiltering, wwpLeosEtherPortAdminAdvertisedFlowCtrl=wwpLeosEtherPortAdminAdvertisedFlowCtrl, wwpLeosEtherPortDesc=wwpLeosEtherPortDesc, wwpLeosEtherPortResolvedCosMapId=wwpLeosEtherPortResolvedCosMapId, wwpLeosEtherPortEgressPortQueueMapId=wwpLeosEtherPortEgressPortQueueMapId, wwpLeosEtherPortStateMirrorGroupMemOperState=wwpLeosEtherPortStateMirrorGroupMemOperState, wwpLeosEtherPortResolvedCosPolicy=wwpLeosEtherPortResolvedCosPolicy, wwpLeosPortMIBCompliances=wwpLeosPortMIBCompliances, wwpLeosEtherPortL2TransformMode=wwpLeosEtherPortL2TransformMode, wwpLeosEtherPortVlanIngressFiltering=wwpLeosEtherPortVlanIngressFiltering, wwpLeosPortMIBNotificationPrefix=wwpLeosPortMIBNotificationPrefix, wwpLeosEtherPortPhysAddr=wwpLeosEtherPortPhysAddr, wwpLeosEtherPortAutoNeg=wwpLeosEtherPortAutoNeg, wwpLeosEtherPortStateMirrorGroupMemTable=wwpLeosEtherPortStateMirrorGroupMemTable, wwpLeosEtherPortFlushActivate=wwpLeosEtherPortFlushActivate, wwpLeosEtherPortOperDuplex=wwpLeosEtherPortOperDuplex, wwpLeosEtherPort=wwpLeosEtherPort, wwpLeosEtherPortStateMirrorGroupNumSrcPorts=wwpLeosEtherPortStateMirrorGroupNumSrcPorts, wwpLeosEtherPortFlushTable=wwpLeosEtherPortFlushTable, wwpLeosEtherPortStateMirrorGroupStatus=wwpLeosEtherPortStateMirrorGroupStatus, wwpLeosEthAdminSpeedIncompatible=wwpLeosEthAdminSpeedIncompatible, wwpLeosEtherPortNotif=wwpLeosEtherPortNotif, wwpLeosEtherPortStateMirrorGroupMemEntry=wwpLeosEtherPortStateMirrorGroupMemEntry, wwpLeosEtherPortAdminFlowCtrl=wwpLeosEtherPortAdminFlowCtrl, wwpLeosEtherPortUntagCtrlVsiType=wwpLeosEtherPortUntagCtrlVsiType, wwpLeosEtherPortStateMirrorGroupMemType=wwpLeosEtherPortStateMirrorGroupMemType, wwpLeosEtherPortResolvedCosRemarkL2=wwpLeosEtherPortResolvedCosRemarkL2, wwpLeosEtherPortStateMirrorGroupName=wwpLeosEtherPortStateMirrorGroupName, wwpLeosPortMIB=wwpLeosPortMIB, wwpLeosEtherPortLinkUpDownTrapsEnable=wwpLeosEtherPortLinkUpDownTrapsEnable, wwpLeosEtherIngressPvid=wwpLeosEtherIngressPvid, wwpLeosPortMIBConformance=wwpLeosPortMIBConformance, wwpLeosEtherPortMirrorEncapTpid=wwpLeosEtherPortMirrorEncapTpid, wwpLeosEtherPortMirrorIngress=wwpLeosEtherPortMirrorIngress, wwpLeosEtherPortAdaptiveRateSpeed=wwpLeosEtherPortAdaptiveRateSpeed, wwpLeosEtherPortLinkFlapDetectTime=wwpLeosEtherPortLinkFlapDetectTime, wwpLeosEtherPortTrapsTable=wwpLeosEtherPortTrapsTable, wwpLeosEtherPortMirrorEncap=wwpLeosEtherPortMirrorEncap, wwpLeosEtherPortMacSaDaSwapVlan=wwpLeosEtherPortMacSaDaSwapVlan, wwpLeosEtherPortTrapsEntry=wwpLeosEtherPortTrapsEntry, wwpLeosEtherPortIngressFixedDot1dPri=wwpLeosEtherPortIngressFixedDot1dPri, wwpLeosEtherPortMirrorPort=wwpLeosEtherPortMirrorPort, wwpLeosPortMIBNotifications=wwpLeosPortMIBNotifications, wwpLeosEtherFixedRColor=wwpLeosEtherFixedRColor, wwpLeosEtherPortVplsPortType=wwpLeosEtherPortVplsPortType, wwpLeosEtherPortIngressCosPolicy=wwpLeosEtherPortIngressCosPolicy, wwpLeosEtherPortStateMirrorGroupTable=wwpLeosEtherPortStateMirrorGroupTable, wwpLeosEtherPortMode=wwpLeosEtherPortMode, wwpLeosEtherPortOperationalSpeed=wwpLeosEtherPortOperationalSpeed, wwpLeosEtherPortName=wwpLeosEtherPortName, wwpLeosEtherPortOperSpeed=wwpLeosEtherPortOperSpeed, wwpLeosEtherPortStateMirrorGroupOperStatus=wwpLeosEtherPortStateMirrorGroupOperStatus, wwpLeosEtherPortOperAutoNeg=wwpLeosEtherPortOperAutoNeg, wwpLeosAggLinkUpDown=wwpLeosAggLinkUpDown, wwpLeosPortMIBObjects=wwpLeosPortMIBObjects, wwpLeosEtherPortStateMirrorGroupEntry=wwpLeosEtherPortStateMirrorGroupEntry, PortIngressFixedColor=PortIngressFixedColor, wwpLeosEtherPortId=wwpLeosEtherPortId, wwpLeosEtherPortVlanIngressFilterStrict=wwpLeosEtherPortVlanIngressFilterStrict, wwpLeosEtherPortStateMirrorGroupId=wwpLeosEtherPortStateMirrorGroupId, wwpLeosEtherPortIfgDecrease=wwpLeosEtherPortIfgDecrease, wwpLeosEtherPortUpTime=wwpLeosEtherPortUpTime, wwpLeosEtherPortMirrorEncapVid=wwpLeosEtherPortMirrorEncapVid, wwpLeosEtherPortUntagDataVsi=wwpLeosEtherPortUntagDataVsi, wwpLeosEtherPortFrameCosMapId=wwpLeosEtherPortFrameCosMapId, wwpLeosEtherPortLinkFlapCount=wwpLeosEtherPortLinkFlapCount, wwpLeosEtherStndLinkUpDownTrapsEnable=wwpLeosEtherStndLinkUpDownTrapsEnable, wwpLeosEtherPortOperStatus=wwpLeosEtherPortOperStatus, wwpLeosEtherPortAdvertDuplex=wwpLeosEtherPortAdvertDuplex, wwpLeosEtherPortStateMirrorGroupNumDstPorts=wwpLeosEtherPortStateMirrorGroupNumDstPorts, PortList=PortList, wwpLeosEtherPortTrapsState=wwpLeosEtherPortTrapsState, wwpLeosEtherPortMaxFrameSize=wwpLeosEtherPortMaxFrameSize, wwpLeosEtherPortPhyLoopback=wwpLeosEtherPortPhyLoopback, wwpLeosEtherPortUntagDataVsiType=wwpLeosEtherPortUntagDataVsiType, wwpLeosEtherPortFlushEntry=wwpLeosEtherPortFlushEntry, wwpLeosEtherPortLinkFlapHoldTime=wwpLeosEtherPortLinkFlapHoldTime, PYSNMP_MODULE_ID=wwpLeosPortMIB, wwpLeosEtherPortEgressSpeed=wwpLeosEtherPortEgressSpeed, wwpLeosEthLinkFlap=wwpLeosEthLinkFlap, wwpLeosEtherPortTable=wwpLeosEtherPortTable, wwpLeosEtherAggPortLinkUpDownTrapsEnable=wwpLeosEtherAggPortLinkUpDownTrapsEnable, wwpLeosEtherPortMacSaDaSwap=wwpLeosEtherPortMacSaDaSwap, wwpLeosEtherPortEgressCosPolicy=wwpLeosEtherPortEgressCosPolicy, wwpLeosEtherPortAdminSpeed=wwpLeosEtherPortAdminSpeed, wwpLeosEtherPortAdminDuplex=wwpLeosEtherPortAdminDuplex)
