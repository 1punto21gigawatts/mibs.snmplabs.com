#
# PySNMP MIB module TPLINK-IPMROUTE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TPLINK-IPMROUTE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:24:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, MibIdentifier, Integer32, Counter32, IpAddress, Counter64, TimeTicks, iso, ModuleIdentity, ObjectIdentity, Unsigned32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "MibIdentifier", "Integer32", "Counter32", "IpAddress", "Counter64", "TimeTicks", "iso", "ModuleIdentity", "ObjectIdentity", "Unsigned32", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
tplinkMgmt, = mibBuilder.importSymbols("TPLINK-MIB", "tplinkMgmt")
tplinkIpMrouteMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11863, 6, 78))
tplinkIpMrouteMIB.setRevisions(('2012-12-13 09:30',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: tplinkIpMrouteMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: tplinkIpMrouteMIB.setLastUpdated('201212130930Z')
if mibBuilder.loadTexts: tplinkIpMrouteMIB.setOrganization('TPLINK')
if mibBuilder.loadTexts: tplinkIpMrouteMIB.setContactInfo('www.tplink.com.cn')
if mibBuilder.loadTexts: tplinkIpMrouteMIB.setDescription('Private MIB for PIM configuration.')
tplinkIpMrouteMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 78, 1))
tplinkIpMrouteNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 78, 2))
tpIpMRoute = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 78, 1, 1))
tpIpMRouteEnable = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 78, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpIpMRouteEnable.setStatus('current')
if mibBuilder.loadTexts: tpIpMRouteEnable.setDescription('Select enable or disable to set the status of Multicast Forwarding in the router. The default is disable.')
tpIpMRouteSGTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 78, 1, 1, 2), )
if mibBuilder.loadTexts: tpIpMRouteSGTable.setStatus('current')
if mibBuilder.loadTexts: tpIpMRouteSGTable.setDescription('The (conceptual) table containing multicast routing information for IP datagrams sent by particular sources to the IP multicast groups known to this router.')
tpIpMRouteSGEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 78, 1, 1, 2, 1), ).setIndexNames((0, "TPLINK-IPMROUTE-MIB", "tpIpMRouteSGGroup"), (0, "TPLINK-IPMROUTE-MIB", "tpIpMRouteSGSource"))
if mibBuilder.loadTexts: tpIpMRouteSGEntry.setStatus('current')
if mibBuilder.loadTexts: tpIpMRouteSGEntry.setDescription('An entry (conceptual row) containing the multicast routing information for IP datagrams from a particular source and addressed to a particular IP multicast group address.')
tpIpMRouteSGGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 78, 1, 1, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpIpMRouteSGGroup.setStatus('current')
if mibBuilder.loadTexts: tpIpMRouteSGGroup.setDescription('The destination group IP address.')
tpIpMRouteSGSource = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 78, 1, 1, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpIpMRouteSGSource.setStatus('current')
if mibBuilder.loadTexts: tpIpMRouteSGSource.setDescription('The IP address of the multicast packet source to be combined with the Group IP to fully identify a single route whose Mroute table entry.')
tpIpMRouteSGIncomingInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 78, 1, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpIpMRouteSGIncomingInterface.setStatus('current')
if mibBuilder.loadTexts: tpIpMRouteSGIncomingInterface.setDescription('The incoming interface on which multicast packets for this source /group arrive.')
tpIpMRouteSGOutgoingInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 78, 1, 1, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpIpMRouteSGOutgoingInterface.setStatus('current')
if mibBuilder.loadTexts: tpIpMRouteSGOutgoingInterface.setDescription('The list of outgoing interfaces on which multicast packets for this source/group are forwarded.')
tpIpMRouteSGRpfNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 78, 1, 1, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpIpMRouteSGRpfNeighbor.setStatus('current')
if mibBuilder.loadTexts: tpIpMRouteSGRpfNeighbor.setDescription('The address of the upstream neighbor (e.g., RPF neighbor) from which IP datagrams from these sources to this multicast address are received, or 0.0.0.0 if the upstream neighbor is unknown (e.g., in CBT).')
tpIpMRouteSGUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 78, 1, 1, 2, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpIpMRouteSGUpTime.setStatus('current')
if mibBuilder.loadTexts: tpIpMRouteSGUpTime.setDescription('The time in seconds since the entry was created.')
tpIpMRouteSGExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 78, 1, 1, 2, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpIpMRouteSGExpiryTime.setStatus('current')
if mibBuilder.loadTexts: tpIpMRouteSGExpiryTime.setDescription('The time in seconds before this entry will age out and be removed from the table.')
tpIpMRouteSGProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 78, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pimDenseMode", 1), ("pimSparseMode", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpIpMRouteSGProtocol.setStatus('current')
if mibBuilder.loadTexts: tpIpMRouteSGProtocol.setDescription('The multicast routing protocol which created this entry. The possibilities are: PIM-DM,PIM-SM.')
tpIpMRouteSGFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 78, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("spt", 1), ("rpt", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpIpMRouteSGFlags.setStatus('current')
if mibBuilder.loadTexts: tpIpMRouteSGFlags.setDescription('The value displayed in this field is valid if the multicast routing protocol running is PIMSM. The possible values are RPT or SPT. For other protocols an ')
tpIpMRouteStarGTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 78, 1, 1, 3), )
if mibBuilder.loadTexts: tpIpMRouteStarGTable.setStatus('current')
if mibBuilder.loadTexts: tpIpMRouteStarGTable.setDescription('The (conceptual) table containing multicast routing information for IP datagrams sent by particular sources to the IP multicast groups known to this router.')
tpIpMRouteStarGEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 78, 1, 1, 3, 1), ).setIndexNames((0, "TPLINK-IPMROUTE-MIB", "tpIpMRouteStarGGroup"))
if mibBuilder.loadTexts: tpIpMRouteStarGEntry.setStatus('current')
if mibBuilder.loadTexts: tpIpMRouteStarGEntry.setDescription('An entry (conceptual row) containing the multicast routing information for IP datagrams from a particular source and addressed to a particular IP multicast group address.')
tpIpMRouteStarGGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 78, 1, 1, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpIpMRouteStarGGroup.setStatus('current')
if mibBuilder.loadTexts: tpIpMRouteStarGGroup.setDescription('The destination group IP address.')
tpIpMRouteStarGSource = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 78, 1, 1, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpIpMRouteStarGSource.setStatus('current')
if mibBuilder.loadTexts: tpIpMRouteStarGSource.setDescription('The IP address of the multicast packet source to be combined with the Group IP to fully identify a single route whose Mroute table entry.')
tpIpMRouteStarGIncomingInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 78, 1, 1, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpIpMRouteStarGIncomingInterface.setStatus('current')
if mibBuilder.loadTexts: tpIpMRouteStarGIncomingInterface.setDescription('The incoming interface on which multicast packets for this source /group arrive.')
tpIpMRouteStarGOutgoingInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 78, 1, 1, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpIpMRouteStarGOutgoingInterface.setStatus('current')
if mibBuilder.loadTexts: tpIpMRouteStarGOutgoingInterface.setDescription('The list of outgoing interfaces on which multicast packets for this source/group are forwarded.')
tpIpMRouteStarGRpfNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 78, 1, 1, 3, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpIpMRouteStarGRpfNeighbor.setStatus('current')
if mibBuilder.loadTexts: tpIpMRouteStarGRpfNeighbor.setDescription('The address of the upstream neighbor (e.g., RPF neighbor) from which IP datagrams from these sources to this multicast address are received, or 0.0.0.0 if the upstream neighbor is unknown (e.g., in CBT).')
tpIpMRouteStarGUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 78, 1, 1, 3, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpIpMRouteStarGUpTime.setStatus('current')
if mibBuilder.loadTexts: tpIpMRouteStarGUpTime.setDescription('The time in seconds since the entry was created.')
tpIpMRouteStarGExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 78, 1, 1, 3, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpIpMRouteStarGExpiryTime.setStatus('current')
if mibBuilder.loadTexts: tpIpMRouteStarGExpiryTime.setDescription('The time in seconds before this entry will age out and be removed from the table.')
tpIpMRouteStarGProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 78, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pimDenseMode", 1), ("pimSparseMode", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpIpMRouteStarGProtocol.setStatus('current')
if mibBuilder.loadTexts: tpIpMRouteStarGProtocol.setDescription('The multicast routing protocol which created this entry. The possibilities are: PIM-DM,PIM-SM.')
tpIpMRouteStarGFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 78, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("spt", 1), ("rpt", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpIpMRouteStarGFlags.setStatus('current')
if mibBuilder.loadTexts: tpIpMRouteStarGFlags.setDescription('The value displayed in this field is valid if the multicast routing protocol running is PIMSM. The possible values are RPT or SPT. For other protocols an ')
mibBuilder.exportSymbols("TPLINK-IPMROUTE-MIB", tplinkIpMrouteMIB=tplinkIpMrouteMIB, tpIpMRouteSGTable=tpIpMRouteSGTable, tpIpMRouteSGGroup=tpIpMRouteSGGroup, PYSNMP_MODULE_ID=tplinkIpMrouteMIB, tpIpMRouteSGProtocol=tpIpMRouteSGProtocol, tpIpMRouteSGExpiryTime=tpIpMRouteSGExpiryTime, tpIpMRouteStarGSource=tpIpMRouteStarGSource, tpIpMRouteStarGExpiryTime=tpIpMRouteStarGExpiryTime, tpIpMRouteStarGRpfNeighbor=tpIpMRouteStarGRpfNeighbor, tpIpMRouteStarGTable=tpIpMRouteStarGTable, tpIpMRouteStarGGroup=tpIpMRouteStarGGroup, tpIpMRouteStarGEntry=tpIpMRouteStarGEntry, tpIpMRouteSGIncomingInterface=tpIpMRouteSGIncomingInterface, tpIpMRouteSGRpfNeighbor=tpIpMRouteSGRpfNeighbor, tplinkIpMrouteNotifications=tplinkIpMrouteNotifications, tpIpMRouteStarGOutgoingInterface=tpIpMRouteStarGOutgoingInterface, tpIpMRouteEnable=tpIpMRouteEnable, tpIpMRouteStarGIncomingInterface=tpIpMRouteStarGIncomingInterface, tpIpMRouteSGOutgoingInterface=tpIpMRouteSGOutgoingInterface, tpIpMRoute=tpIpMRoute, tplinkIpMrouteMIBObjects=tplinkIpMrouteMIBObjects, tpIpMRouteSGUpTime=tpIpMRouteSGUpTime, tpIpMRouteSGEntry=tpIpMRouteSGEntry, tpIpMRouteStarGFlags=tpIpMRouteStarGFlags, tpIpMRouteSGSource=tpIpMRouteSGSource, tpIpMRouteStarGProtocol=tpIpMRouteStarGProtocol, tpIpMRouteSGFlags=tpIpMRouteSGFlags, tpIpMRouteStarGUpTime=tpIpMRouteStarGUpTime)
