#
# PySNMP MIB module CISCO-BSTUN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-BSTUN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:51:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibIdentifier, iso, Counter32, Integer32, TimeTicks, Gauge32, Counter64, ObjectIdentity, NotificationType, Bits, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "iso", "Counter32", "Integer32", "TimeTicks", "Gauge32", "Counter64", "ObjectIdentity", "NotificationType", "Bits", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "ModuleIdentity")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
ciscoBstunMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 35))
ciscoBstunMIB.setRevisions(('2003-02-10 00:00', '2001-06-19 00:00', '1997-01-22 00:00', '1995-08-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoBstunMIB.setRevisionsDescriptions(('Added Asynchronous POS to IP conversion support', 'Added Bisync to IP conversion peer support', 'Added frame-relay and other support', 'Minor cleanups to pacify mib compiler.',))
if mibBuilder.loadTexts: ciscoBstunMIB.setLastUpdated('200302100000Z')
if mibBuilder.loadTexts: ciscoBstunMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoBstunMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-bisync@cisco.com')
if mibBuilder.loadTexts: ciscoBstunMIB.setDescription("The MIB module for Block Serial Tunneling. Overview of BSTUN MIB MIB description The BSTUN MIB provides the configuration and operational information on Cisco's blocked serial tunnelling implementation. The following entities are managed: 1) Global BSTUN information 2) BSTUN groups 3) BSTUN ports 4) BSTUN routes The following example configuration shows how the BSTUN MIB returns BSTUN information, from either CISCO A or CISCO B. HOST == BSC == Cisco A == IP Network == Cisco B == BSC == BSC line line device 1) The BSTUN global entry identifies the IP address by which the router is known to other BSTUN peers, a configurable SAP value on which to listen to LLC2 peers, and keepalive values to maintain a session between TCP/IP peers. 2) The BSTUN group table identifies the BSTUN group number and protocol type that Cisco A and Cisco B use to route BSC traffic over the IP network. The table contains an entry for each BSTUN group defined on the router. (The group number must be the same in Cisco A and Cisco B, for traffic to flow from one router to the other.) 3) The BSTUN port table identifies the serial interface to the BSC line for which the router is doing serial tunnelling. The MIB also identifies the BSTUN group this interface is defined for, and identifies the default routing for unrecognized BSC addresses. There is a port entry for each BSTUN-enabled interface on the router. 4) The BSTUN route table has an entry for each address defined for routing within the BSTUN group, and an entry for the default routing if the 'bstun route all' command is configured. The route entry includes identification of the BSTUN peer, priority, state, and packet and byte counters. ")
bstunObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 35, 1))
bstunGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 1))
bstunGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 2))
bstunPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 3))
bstunRoutes = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 4))
bstunIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bstunIPAddr.setStatus('current')
if mibBuilder.loadTexts: bstunIPAddr.setDescription('The configured IP address used by the BSTUN component in this router.')
bstunLisnSap = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bstunLisnSap.setStatus('current')
if mibBuilder.loadTexts: bstunLisnSap.setDescription('The configured Listening SAP address used by the BSTUN component when routed via frame-relay local-ack in this router.')
bstunPeerKeepaliveInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setUnits('deciseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: bstunPeerKeepaliveInterval.setStatus('current')
if mibBuilder.loadTexts: bstunPeerKeepaliveInterval.setDescription('The time interval between keepalives in this router.')
bstunPeerKeepaliveLimit = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bstunPeerKeepaliveLimit.setStatus('current')
if mibBuilder.loadTexts: bstunPeerKeepaliveLimit.setDescription('The number of keepalives which can be missed in a continuous interval before session declared down in this router.')
bstunGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 2, 1), )
if mibBuilder.loadTexts: bstunGroupTable.setStatus('current')
if mibBuilder.loadTexts: bstunGroupTable.setDescription('A table of entries representing BSTUN groups configured on the router. Each BSTUN-enabled interface is assigned to a BSTUN group, and packets can only travel between BSTUN-enabled interfaces in the same group.')
bstunGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-BSTUN-MIB", "bstunGroupIndex"))
if mibBuilder.loadTexts: bstunGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bstunGroupEntry.setDescription('Status and parameter values for a group.')
bstunGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: bstunGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bstunGroupIndex.setDescription('The configured BSTUN group number. The significance of this number is that it must match the BSTUN group number configured in the router at the other end of the BSTUN tunnel.')
bstunProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("bsc", 1), ("adtVariPoll", 2), ("adtPollSelect", 3), ("adplex", 4), ("diebold", 5), ("asyncGeneric", 6), ("mdi", 7), ("mosec", 8), ("gddb", 9), ("apos", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bstunProtocolType.setStatus('current')
if mibBuilder.loadTexts: bstunProtocolType.setDescription('The protocol type for this BSTUN group.')
bstunLocalAck = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 2, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bstunLocalAck.setStatus('current')
if mibBuilder.loadTexts: bstunLocalAck.setDescription('Indicates if the BSTUN connection is locally acknowledged. TRUE-> BSTUN connection is locally acknowledged FALSE-> BSTUN connection is not locally acknowledged ')
bstunGroupUnroutableTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bstunGroupUnroutableTransmit.setStatus('current')
if mibBuilder.loadTexts: bstunGroupUnroutableTransmit.setDescription('The number of unroutable frames received by this group from the remote partner. They were unroutable because the address was not recognized; that is there is no bstun route command configured for this address. This indicates that the configuration in this router is incompatible with the peer router.')
bstunGroupUnroutableReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bstunGroupUnroutableReceive.setStatus('current')
if mibBuilder.loadTexts: bstunGroupUnroutableReceive.setDescription('Count of frames received from a serial interface with an unsupported poll address. Note that there may be several ports configured within this bstun group; a non-zero value in this field indicates that a least one of these ports is receiving frames for which there are no bstun route commands configured. This indicates that the configuration in this router is incompatible with the configuration in at least one of the attached devices.')
bstunPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 3, 1), )
if mibBuilder.loadTexts: bstunPortTable.setStatus('current')
if mibBuilder.loadTexts: bstunPortTable.setDescription('A list of BSTUN-enabled interfaces (ports).')
bstunPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bstunPortEntry.setStatus('current')
if mibBuilder.loadTexts: bstunPortEntry.setDescription('Status and parameter values for a BSTUN port.')
bstunPortGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bstunPortGroupNumber.setStatus('current')
if mibBuilder.loadTexts: bstunPortGroupNumber.setDescription('The group number to which the bstun port belongs. Frames will only be routed to other ports (on this or another router) in the same bstun group. This group should match a bstunGroupIndex in the bstunGroupTable.')
bstunPortDefaultPeerType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("ip", 2), ("serial", 3), ("serialDirect", 4), ("serialFrameRelay", 5), ("serialLLC2", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bstunPortDefaultPeerType.setStatus('current')
if mibBuilder.loadTexts: bstunPortDefaultPeerType.setDescription("The type of identification of the remote default partner. (This is as configured with the 'route all' command.) If ip then the value is in bstunPortDefaultPeerIP; if serial or serialDirect then the value is in bstunPortDefaultPeerSerial.")
bstunPortDefaultPeerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 3, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bstunPortDefaultPeerIP.setStatus('current')
if mibBuilder.loadTexts: bstunPortDefaultPeerIP.setDescription('The ip address of the remote default BSTUN partner, for unrecognized addresses. 0.0.0.0 if partner address type is not ip.')
bstunPortDefaultPeerSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 3, 1, 1, 4), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bstunPortDefaultPeerSerial.setStatus('current')
if mibBuilder.loadTexts: bstunPortDefaultPeerSerial.setDescription('If bstunRouteType is serial then this is the serial interface index of the point-to-point link to the remote partner; if bstunRouteType is serialDirect then the partner is in the local BSTUN. if bstunRouteType is ip then this field is 0.')
bstunRouteTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 4, 1), )
if mibBuilder.loadTexts: bstunRouteTable.setStatus('current')
if mibBuilder.loadTexts: bstunRouteTable.setDescription('A table containing information about specific poll addresses. There is one table entry for each address configured by the BSTUN ROUTE command.')
bstunRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-BSTUN-MIB", "bstunRouteGroupIndex"), (0, "CISCO-BSTUN-MIB", "bstunRouteStationAddress"))
if mibBuilder.loadTexts: bstunRouteEntry.setStatus('current')
if mibBuilder.loadTexts: bstunRouteEntry.setDescription('The information regarding a single poll address.')
bstunRouteGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: bstunRouteGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bstunRouteGroupIndex.setDescription('The index of the BSTUN Group owning this station.')
bstunRouteStationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: bstunRouteStationAddress.setStatus('current')
if mibBuilder.loadTexts: bstunRouteStationAddress.setDescription('The poll address of the station. 256 indicates the ALL parameter on the STUN ROUTE command, which is the route for all unrecognized addresses.')
bstunRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("ip", 2), ("serial", 3), ("serialDirect", 4), ("serialFrameRelay", 5), ("serialLLC2", 6), ("bip", 7), ("apip", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bstunRouteType.setStatus('current')
if mibBuilder.loadTexts: bstunRouteType.setDescription('The type of identification of the remote partner. If ip then the value is in bstunRouteIP; if serial or serialDirect then the value is in bstunRouteSerial; if bip or apip then the value is in bstunRouteIP, bstunRouteBIPLocalPort and bstunRouteBIPForeignPort.')
bstunRouteIP = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 4, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bstunRouteIP.setStatus('current')
if mibBuilder.loadTexts: bstunRouteIP.setDescription('The ip address of the remote BSTUN partner. 0.0.0.0 if partner address type is not ip.')
bstunRouteSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 4, 1, 1, 5), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bstunRouteSerial.setStatus('current')
if mibBuilder.loadTexts: bstunRouteSerial.setDescription('If bstunRouteType is serial then this is the serial interface index of the point-to-point link to the remote partner; if bstunRouteType is serialDirect then the partner is in the local BSTUN. if bstunRouteType is ip then this field is 0.')
bstunRoutePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("low", 1), ("normal", 2), ("medium", 3), ("high", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bstunRoutePriority.setStatus('current')
if mibBuilder.loadTexts: bstunRoutePriority.setDescription("The priority with which this station's traffic will be routed across the network.")
bstunRoutePeerState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("dead", 1), ("closed", 2), ("opening", 3), ("openWait", 4), ("connected", 5), ("direct", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bstunRoutePeerState.setStatus('current')
if mibBuilder.loadTexts: bstunRoutePeerState.setDescription('The state of the peer connection through the BSTUN tunnel.')
bstunRouteRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bstunRouteRxPackets.setStatus('current')
if mibBuilder.loadTexts: bstunRouteRxPackets.setDescription("Count of frames received from the serial interface with this station's address.")
bstunRouteTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 4, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bstunRouteTxPackets.setStatus('current')
if mibBuilder.loadTexts: bstunRouteTxPackets.setDescription("Count of frames transmitted at the serial interface with this station's address.")
bstunRouteRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 4, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bstunRouteRxBytes.setStatus('current')
if mibBuilder.loadTexts: bstunRouteRxBytes.setDescription("Count of bytes received from the serial interface with this station's address.")
bstunRouteTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 4, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bstunRouteTxBytes.setStatus('current')
if mibBuilder.loadTexts: bstunRouteTxBytes.setDescription("Count of bytes transmitted at the serial interface with this station's address.")
bstunRouteDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1007))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bstunRouteDLCI.setStatus('current')
if mibBuilder.loadTexts: bstunRouteDLCI.setDescription('If bstunRouteType is serialFrameRelay or serialLLC2 then this is the frame relay dlci circuit used for the point-to-point link to the remote partner; if bstunRouteType is ip or serial then this field is 0.')
bstunRouteRSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bstunRouteRSAP.setStatus('current')
if mibBuilder.loadTexts: bstunRouteRSAP.setDescription('If bstunRouteType is serialLLC2 then this is the llc2 sap value used for the point-to-point link to the remote partner; if bstunRouteType is ip or serial or serialFrameRelay then this field is 0.')
bstunLLC2Priority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bstunLLC2Priority.setStatus('current')
if mibBuilder.loadTexts: bstunLLC2Priority.setDescription('If bstunRouteType is serialLLC2 then this is the llc2 priority used for the point-to-point link to the remote partner; if bstunRouteType is ip or serial or serialFrameRelay then this field is 0.')
bstunRouteBIPPassive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 4, 1, 1, 15), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: bstunRouteBIPPassive.setStatus('current')
if mibBuilder.loadTexts: bstunRouteBIPPassive.setDescription('Specifies whether the bip peer will wait for an inbound connection or actively connect to the remote peer.')
bstunRouteBIPLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1025, 32000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bstunRouteBIPLocalPort.setStatus('current')
if mibBuilder.loadTexts: bstunRouteBIPLocalPort.setDescription('If bstunRouteType is bip then this is the local port used when connecting to the remote peer.')
bstunRouteBIPForeignPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1025, 32000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bstunRouteBIPForeignPort.setStatus('current')
if mibBuilder.loadTexts: bstunRouteBIPForeignPort.setDescription('If bstunRouteType is bip then this is the for port used to connect to the remote peer.')
bstunRouteBIPDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 4, 1, 1, 18), Bits().clone(namedValues=NamedValues(("operationcheck", 0), ("reservedBit1", 1), ("datacheck", 2), ("equipmentcheck", 3), ("interventionrequired", 4), ("commandreject", 5), ("deviceinactive", 6), ("deviceactive", 7), ("reservedBit8", 8), ("deviceend", 9), ("unitspecify", 10), ("devicebusy", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bstunRouteBIPDeviceStatus.setStatus('current')
if mibBuilder.loadTexts: bstunRouteBIPDeviceStatus.setDescription('If bstunRouteType is bip then this indicates the OR bit mask status of the mapped bisync device: if no bits are set, indicates that the bisync device is up and operational. Bit 0, if set, indicates that the bisync device is reporting an operation check error. Bit 2, if set, indicates that the bisync device is reporting a data check error. Bit 3, if set, indicates that the bisync device is reporting an equipment check error. Bit 4, if set, indicates that the bisync device is reporting that intervention is required. Bit 5, if set, indicates that the bisync device is reporting that a command has been rejected. Bit 6, if set, indicates that the bisync device is not responding to polls. Bit 7, if set, indicates that the bisync device is now responding to polls and is operational. Bit 9, if set, indicates that the bisync device is reporting that is no longer busy. Bit 10, if set, indicates that the bisync device is reporting a device unit specify. Bit 11, if set, indicates that the bisync device is reporting a busy condition.')
bstunRouteAPIPHeaderVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 35, 1, 4, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v0", 1), ("v1", 2), ("v2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bstunRouteAPIPHeaderVersion.setStatus('current')
if mibBuilder.loadTexts: bstunRouteAPIPHeaderVersion.setDescription('Specifies the tunneling header format to use for APIP: v0, if set, indicates a 2 byte encapsulation header. The length of the header is included in the size of the sent packet. v1, if set, indicates a 2 byte encapsulation header. The length of the header is excluded from the size of the sent packet. v2, if set, indicates a 4 byte encapsulation header. The length of the header is excluded from the size of the sent packet.')
bstunNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 35, 2))
bstunNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 35, 2, 0))
bstunPeerStateChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 35, 2, 0, 1)).setObjects(("CISCO-BSTUN-MIB", "bstunRoutePeerState"))
if mibBuilder.loadTexts: bstunPeerStateChangeNotification.setStatus('deprecated')
if mibBuilder.loadTexts: bstunPeerStateChangeNotification.setDescription('This notification indicates that the state of a BSTUN route has transitioned to active (connected) or inactive (dead or closed).')
bstunPeerStateChangeNotification2 = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 35, 2, 0, 2)).setObjects(("CISCO-BSTUN-MIB", "bstunRoutePeerState"), ("CISCO-BSTUN-MIB", "bstunRouteType"), ("CISCO-BSTUN-MIB", "bstunRouteRxPackets"), ("CISCO-BSTUN-MIB", "bstunRouteTxPackets"))
if mibBuilder.loadTexts: bstunPeerStateChangeNotification2.setStatus('current')
if mibBuilder.loadTexts: bstunPeerStateChangeNotification2.setDescription('This notification indicates that the state of a BSTUN route has transitioned to active (connected) or inactive (dead or closed).')
bstunCUStatusChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 35, 2, 0, 3)).setObjects(("CISCO-BSTUN-MIB", "bstunRouteIP"), ("CISCO-BSTUN-MIB", "bstunRouteBIPForeignPort"), ("CISCO-BSTUN-MIB", "bstunRouteBIPLocalPort"), ("CISCO-BSTUN-MIB", "bstunRouteBIPDeviceStatus"))
if mibBuilder.loadTexts: bstunCUStatusChangeNotification.setStatus('current')
if mibBuilder.loadTexts: bstunCUStatusChangeNotification.setDescription('This notification is generated when a mapped BIP bisync device state has changed.')
bstunMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 35, 3))
bstunMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 35, 3, 1))
bstunMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 35, 3, 2))
bstunMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 35, 3, 1, 1)).setObjects(("CISCO-BSTUN-MIB", "bstunGlobalGroup"), ("CISCO-BSTUN-MIB", "bstunGroupGroup"), ("CISCO-BSTUN-MIB", "bstunPortGroup"), ("CISCO-BSTUN-MIB", "bstunRouteGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bstunMibCompliance = bstunMibCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: bstunMibCompliance.setDescription('The compliance statement for BSTUN.')
bstunMibComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 35, 3, 1, 2)).setObjects(("CISCO-BSTUN-MIB", "bstunGlobalGroupRev1"), ("CISCO-BSTUN-MIB", "bstunGroupGroup"), ("CISCO-BSTUN-MIB", "bstunPortGroup"), ("CISCO-BSTUN-MIB", "bstunRouteGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bstunMibComplianceRev1 = bstunMibComplianceRev1.setStatus('obsolete')
if mibBuilder.loadTexts: bstunMibComplianceRev1.setDescription('The compliance statement for all Cisco systems that implement BSTUN functions.')
bstunMibComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 35, 3, 1, 3)).setObjects(("CISCO-BSTUN-MIB", "bstunGlobalGroupRev1"), ("CISCO-BSTUN-MIB", "bstunGroupGroup"), ("CISCO-BSTUN-MIB", "bstunPortGroup"), ("CISCO-BSTUN-MIB", "bstunRouteGroupRev2"), ("CISCO-BSTUN-MIB", "bstunNotificationGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bstunMibComplianceRev2 = bstunMibComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: bstunMibComplianceRev2.setDescription('The compliance statement for all Cisco systems that implement BSTUN functions.')
bstunMibComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 35, 3, 1, 4)).setObjects(("CISCO-BSTUN-MIB", "bstunGlobalGroupRev1"), ("CISCO-BSTUN-MIB", "bstunGroupGroup"), ("CISCO-BSTUN-MIB", "bstunPortGroup"), ("CISCO-BSTUN-MIB", "bstunRouteGroupRev1"), ("CISCO-BSTUN-MIB", "bstunNotificationGroupRev1"), ("CISCO-BSTUN-MIB", "bstunRouteBipGroup"), ("CISCO-BSTUN-MIB", "bstunRoutePortsGroup"), ("CISCO-BSTUN-MIB", "bstunRouteApipGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bstunMibComplianceRev3 = bstunMibComplianceRev3.setStatus('current')
if mibBuilder.loadTexts: bstunMibComplianceRev3.setDescription('The compliance statement for all Cisco systems that implement BSTUN functions.')
bstunGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 35, 3, 2, 1)).setObjects(("CISCO-BSTUN-MIB", "bstunIPAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bstunGlobalGroup = bstunGlobalGroup.setStatus('obsolete')
if mibBuilder.loadTexts: bstunGlobalGroup.setDescription('A collection of objects providing global BSTUN information.')
bstunGroupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 35, 3, 2, 2)).setObjects(("CISCO-BSTUN-MIB", "bstunProtocolType"), ("CISCO-BSTUN-MIB", "bstunLocalAck"), ("CISCO-BSTUN-MIB", "bstunGroupUnroutableTransmit"), ("CISCO-BSTUN-MIB", "bstunGroupUnroutableReceive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bstunGroupGroup = bstunGroupGroup.setStatus('current')
if mibBuilder.loadTexts: bstunGroupGroup.setDescription('A collection of objects providing information about BSTUN groups .')
bstunPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 35, 3, 2, 3)).setObjects(("CISCO-BSTUN-MIB", "bstunPortGroupNumber"), ("CISCO-BSTUN-MIB", "bstunPortDefaultPeerType"), ("CISCO-BSTUN-MIB", "bstunPortDefaultPeerIP"), ("CISCO-BSTUN-MIB", "bstunPortDefaultPeerSerial"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bstunPortGroup = bstunPortGroup.setStatus('current')
if mibBuilder.loadTexts: bstunPortGroup.setDescription('A collection of objects providing information about BSTUN enabled interfaces.')
bstunRouteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 35, 3, 2, 4)).setObjects(("CISCO-BSTUN-MIB", "bstunRouteType"), ("CISCO-BSTUN-MIB", "bstunRouteIP"), ("CISCO-BSTUN-MIB", "bstunRouteSerial"), ("CISCO-BSTUN-MIB", "bstunRoutePriority"), ("CISCO-BSTUN-MIB", "bstunRoutePeerState"), ("CISCO-BSTUN-MIB", "bstunRouteRxPackets"), ("CISCO-BSTUN-MIB", "bstunRouteTxPackets"), ("CISCO-BSTUN-MIB", "bstunRouteRxBytes"), ("CISCO-BSTUN-MIB", "bstunRouteTxBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bstunRouteGroup = bstunRouteGroup.setStatus('obsolete')
if mibBuilder.loadTexts: bstunRouteGroup.setDescription('A collection of objects providing information about BSTUN defined routes.')
bstunGlobalGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 35, 3, 2, 5)).setObjects(("CISCO-BSTUN-MIB", "bstunIPAddr"), ("CISCO-BSTUN-MIB", "bstunLisnSap"), ("CISCO-BSTUN-MIB", "bstunPeerKeepaliveInterval"), ("CISCO-BSTUN-MIB", "bstunPeerKeepaliveLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bstunGlobalGroupRev1 = bstunGlobalGroupRev1.setStatus('current')
if mibBuilder.loadTexts: bstunGlobalGroupRev1.setDescription('A collection of objects providing global BSTUN information.')
bstunRouteGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 35, 3, 2, 6)).setObjects(("CISCO-BSTUN-MIB", "bstunRouteType"), ("CISCO-BSTUN-MIB", "bstunRouteIP"), ("CISCO-BSTUN-MIB", "bstunRouteSerial"), ("CISCO-BSTUN-MIB", "bstunRoutePriority"), ("CISCO-BSTUN-MIB", "bstunRoutePeerState"), ("CISCO-BSTUN-MIB", "bstunRouteRxPackets"), ("CISCO-BSTUN-MIB", "bstunRouteTxPackets"), ("CISCO-BSTUN-MIB", "bstunRouteRxBytes"), ("CISCO-BSTUN-MIB", "bstunRouteTxBytes"), ("CISCO-BSTUN-MIB", "bstunRouteDLCI"), ("CISCO-BSTUN-MIB", "bstunRouteRSAP"), ("CISCO-BSTUN-MIB", "bstunLLC2Priority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bstunRouteGroupRev1 = bstunRouteGroupRev1.setStatus('current')
if mibBuilder.loadTexts: bstunRouteGroupRev1.setDescription('A collection of objects providing information about BSTUN defined routes.')
bstunRouteGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 35, 3, 2, 7)).setObjects(("CISCO-BSTUN-MIB", "bstunRouteType"), ("CISCO-BSTUN-MIB", "bstunRouteIP"), ("CISCO-BSTUN-MIB", "bstunRouteSerial"), ("CISCO-BSTUN-MIB", "bstunRoutePriority"), ("CISCO-BSTUN-MIB", "bstunRoutePeerState"), ("CISCO-BSTUN-MIB", "bstunRouteRxPackets"), ("CISCO-BSTUN-MIB", "bstunRouteTxPackets"), ("CISCO-BSTUN-MIB", "bstunRouteRxBytes"), ("CISCO-BSTUN-MIB", "bstunRouteTxBytes"), ("CISCO-BSTUN-MIB", "bstunRouteDLCI"), ("CISCO-BSTUN-MIB", "bstunRouteRSAP"), ("CISCO-BSTUN-MIB", "bstunLLC2Priority"), ("CISCO-BSTUN-MIB", "bstunRouteBIPPassive"), ("CISCO-BSTUN-MIB", "bstunRouteBIPLocalPort"), ("CISCO-BSTUN-MIB", "bstunRouteBIPForeignPort"), ("CISCO-BSTUN-MIB", "bstunRouteBIPDeviceStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bstunRouteGroupRev2 = bstunRouteGroupRev2.setStatus('deprecated')
if mibBuilder.loadTexts: bstunRouteGroupRev2.setDescription('A collection of objects providing information about BSTUN defined routes.')
bstunNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 35, 3, 2, 8)).setObjects(("CISCO-BSTUN-MIB", "bstunPeerStateChangeNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bstunNotificationGroup = bstunNotificationGroup.setStatus('deprecated')
if mibBuilder.loadTexts: bstunNotificationGroup.setDescription('A collection of notifications. ')
bstunNotificationGroupRev1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 35, 3, 2, 9)).setObjects(("CISCO-BSTUN-MIB", "bstunPeerStateChangeNotification2"), ("CISCO-BSTUN-MIB", "bstunCUStatusChangeNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bstunNotificationGroupRev1 = bstunNotificationGroupRev1.setStatus('current')
if mibBuilder.loadTexts: bstunNotificationGroupRev1.setDescription('A collection of notifications. ')
bstunRouteBipGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 35, 3, 2, 10)).setObjects(("CISCO-BSTUN-MIB", "bstunRouteBIPPassive"), ("CISCO-BSTUN-MIB", "bstunRouteBIPDeviceStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bstunRouteBipGroup = bstunRouteBipGroup.setStatus('current')
if mibBuilder.loadTexts: bstunRouteBipGroup.setDescription('A objects providing information about BSTUN defined routes for BIP protocol.')
bstunRoutePortsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 35, 3, 2, 11)).setObjects(("CISCO-BSTUN-MIB", "bstunRouteBIPLocalPort"), ("CISCO-BSTUN-MIB", "bstunRouteBIPForeignPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bstunRoutePortsGroup = bstunRoutePortsGroup.setStatus('current')
if mibBuilder.loadTexts: bstunRoutePortsGroup.setDescription('A objects providing port number informaton information about BSTUN defined routes for BIP and APIP protocols.')
bstunRouteApipGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 35, 3, 2, 12)).setObjects(("CISCO-BSTUN-MIB", "bstunRouteAPIPHeaderVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bstunRouteApipGroup = bstunRouteApipGroup.setStatus('current')
if mibBuilder.loadTexts: bstunRouteApipGroup.setDescription('A objects providing information about BSTUN defined routes for APIP protocol.')
mibBuilder.exportSymbols("CISCO-BSTUN-MIB", bstunNotifications=bstunNotifications, bstunRoutePeerState=bstunRoutePeerState, bstunMibCompliance=bstunMibCompliance, bstunRouteTxPackets=bstunRouteTxPackets, bstunGlobal=bstunGlobal, bstunNotificationPrefix=bstunNotificationPrefix, bstunRouteIP=bstunRouteIP, bstunPeerKeepaliveInterval=bstunPeerKeepaliveInterval, bstunGroupUnroutableTransmit=bstunGroupUnroutableTransmit, bstunRouteSerial=bstunRouteSerial, bstunLisnSap=bstunLisnSap, bstunRouteBipGroup=bstunRouteBipGroup, bstunPeerKeepaliveLimit=bstunPeerKeepaliveLimit, bstunRouteStationAddress=bstunRouteStationAddress, bstunPortEntry=bstunPortEntry, bstunPeerStateChangeNotification=bstunPeerStateChangeNotification, bstunLLC2Priority=bstunLLC2Priority, bstunPortTable=bstunPortTable, bstunObjects=bstunObjects, bstunIPAddr=bstunIPAddr, bstunGroupEntry=bstunGroupEntry, bstunLocalAck=bstunLocalAck, bstunPortDefaultPeerIP=bstunPortDefaultPeerIP, bstunRouteTxBytes=bstunRouteTxBytes, bstunPeerStateChangeNotification2=bstunPeerStateChangeNotification2, bstunNotificationGroupRev1=bstunNotificationGroupRev1, bstunPortDefaultPeerType=bstunPortDefaultPeerType, bstunRouteBIPForeignPort=bstunRouteBIPForeignPort, bstunPortGroupNumber=bstunPortGroupNumber, PYSNMP_MODULE_ID=ciscoBstunMIB, bstunRouteBIPPassive=bstunRouteBIPPassive, bstunRouteBIPDeviceStatus=bstunRouteBIPDeviceStatus, bstunGroupTable=bstunGroupTable, bstunRoutePriority=bstunRoutePriority, bstunGlobalGroup=bstunGlobalGroup, bstunGlobalGroupRev1=bstunGlobalGroupRev1, bstunPortDefaultPeerSerial=bstunPortDefaultPeerSerial, bstunRouteRSAP=bstunRouteRSAP, bstunCUStatusChangeNotification=bstunCUStatusChangeNotification, bstunMibConformance=bstunMibConformance, bstunMibComplianceRev1=bstunMibComplianceRev1, bstunRouteDLCI=bstunRouteDLCI, bstunRouteGroupIndex=bstunRouteGroupIndex, bstunRouteEntry=bstunRouteEntry, bstunRouteRxPackets=bstunRouteRxPackets, bstunProtocolType=bstunProtocolType, bstunRoutePortsGroup=bstunRoutePortsGroup, ciscoBstunMIB=ciscoBstunMIB, bstunMibComplianceRev3=bstunMibComplianceRev3, bstunNotificationGroup=bstunNotificationGroup, bstunRouteType=bstunRouteType, bstunRouteAPIPHeaderVersion=bstunRouteAPIPHeaderVersion, bstunGroupGroup=bstunGroupGroup, bstunRouteRxBytes=bstunRouteRxBytes, bstunPorts=bstunPorts, bstunRoutes=bstunRoutes, bstunGroupIndex=bstunGroupIndex, bstunMibCompliances=bstunMibCompliances, bstunMibGroups=bstunMibGroups, bstunPortGroup=bstunPortGroup, bstunRouteGroupRev1=bstunRouteGroupRev1, bstunGroupUnroutableReceive=bstunGroupUnroutableReceive, bstunRouteBIPLocalPort=bstunRouteBIPLocalPort, bstunRouteApipGroup=bstunRouteApipGroup, bstunGroups=bstunGroups, bstunRouteTable=bstunRouteTable, bstunRouteGroupRev2=bstunRouteGroupRev2, bstunMibComplianceRev2=bstunMibComplianceRev2, bstunRouteGroup=bstunRouteGroup)
