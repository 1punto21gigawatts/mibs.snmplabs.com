#
# PySNMP MIB module CISCO-CHANNEL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CHANNEL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:53:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
TimeTicks, Counter64, Unsigned32, MibIdentifier, Integer32, Gauge32, Counter32, iso, Bits, ObjectIdentity, IpAddress, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter64", "Unsigned32", "MibIdentifier", "Integer32", "Gauge32", "Counter32", "iso", "Bits", "ObjectIdentity", "IpAddress", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity")
TimeStamp, TextualConvention, TruthValue, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TextualConvention", "TruthValue", "DisplayString", "RowStatus")
channel = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 20))
channel.setRevisions(('1998-01-06 00:00', '1998-08-14 00:00', '1997-03-26 00:00', '1996-06-13 00:00', '1995-09-25 00:00', '1994-11-17 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: channel.setRevisionsDescriptions(("With the addition of Cisco's new Channel Port Adapter cards, all the references to CIP in the MIB description and object descriptions are changed to CMCC (Cisco Mainframe Channel Connection). The object names in the form of cip... or cipCard... will remain the same, but will be valid objects for the Channel Port Adapter cards.", 'Added cipCardSubChannelResetEvent to cipCardSubChannelTable Added cipCardSubChannelShortBusy to cipCardSubChannelTable Added cipCardSubChannelCMDRetry to cipCardSubChannelTable Added cipCardSubChannelBufferWait to cipCardSubChannelTable Added cipCardSubChannelStatPending to cipCardSubChannelTable Added cipCardSubChannelSuspend to cipCardSubChannelTable Added cipCardSubChannelFBLWait to cipCardSubChannelTable', 'Added cipCardEntryCpuLoad1m to cipCardTable Added cipCardEntryCpuLoad5m to cipCardTable Added cipCardEntryCpuLoad60m to cipCardTable Added cipCardEntryDmaLoad1m to cipCardTable Added cipCardEntryDmaLoad5m to cipCardTable Added cipCardEntryDmaLoad60m to cipCardTable Added cipCardDtrBrdChannelLoad1m to cipCardDaughterBoardTable Added cipCardDtrBrdChannelLoad5m to cipCardDaughterBoardTable Added cipCardDtrBrdChannelLoad60m to cipCardDaughterBoardTable Added cipCardClawConfigBroadcastEnable to cipCardClawConfigTable Added cipCardClawConfigRowStatus to cipCardClawConfigTable Enhanced the description for cipCardEntryCpuUtilization', 'Add cipCardSubChannelCmdRetries to cipCardSubChannelTable Add cipCardDtrBrdLastStat and cipCardDtrBrdNextStat to cipCardDaughterBoardTable.', 'Added cipCardApplicationTable. Added conformance section. Added cipCardEntryMajorSwRevisionNr, cipCardEntryMinorSwRevisionNr, cipCardEntryMajorHwRevisionNr and cipCardEntryMinorHwRevisionNr to cipCardTable. Enhanced the description for cipCardSubChannelIndex, cipCardClawConfigPath, cipCardClawConfigDevice, cipCardClawConfigIpAddr', 'Changed from CHANNEL-MIB to CISCO-CHANNEL-MIB.',))
if mibBuilder.loadTexts: channel.setLastUpdated('9703260000Z')
if mibBuilder.loadTexts: channel.setOrganization('cisco IBM engineering Working Group')
if mibBuilder.loadTexts: channel.setContactInfo(' Cisco Systems Customer Service Postal: 170 West Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: tac@cisco.com')
if mibBuilder.loadTexts: channel.setDescription('This is the MIB module for objects used to manage the Cisco Mainframe Channel Connection (CMCC) cards.')
cipCard = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 20, 1))
cipCardTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 1), )
if mibBuilder.loadTexts: cipCardTable.setStatus('current')
if mibBuilder.loadTexts: cipCardTable.setDescription('This table contains a list of values for the CMCC card which can be accessed to determine the general state of the CMCC. This table extends CardTable in the cisco.mib')
cipCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 1, 1), ).setIndexNames((0, "CISCO-CHANNEL-MIB", "cipCardEntryIndex"))
if mibBuilder.loadTexts: cipCardEntry.setStatus('current')
if mibBuilder.loadTexts: cipCardEntry.setDescription('A list of values for a CMCC Card. This extends cardTableEntry in the cisco.mib')
cipCardEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cipCardEntryIndex.setStatus('current')
if mibBuilder.loadTexts: cipCardEntryIndex.setDescription('Index into cardTable (not physical chassis slot number, matches cisco chassis MIB cardindex).')
cipCardEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cipCardEntryName.setStatus('current')
if mibBuilder.loadTexts: cipCardEntryName.setDescription('The configured name for the CMCC.')
cipCardEntryTotalMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 1, 1, 3), Integer32()).setUnits('kilo bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardEntryTotalMemory.setStatus('current')
if mibBuilder.loadTexts: cipCardEntryTotalMemory.setDescription('Total memory on the card.')
cipCardEntryFreeMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 1, 1, 4), Integer32()).setUnits('kilo bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardEntryFreeMemory.setStatus('current')
if mibBuilder.loadTexts: cipCardEntryFreeMemory.setDescription('Total free memory on the card, that is the amount of memory not in use.')
cipCardEntryCpuUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardEntryCpuUtilization.setStatus('current')
if mibBuilder.loadTexts: cipCardEntryCpuUtilization.setDescription("The average, over the last minute, of the percentage of time that this processor was running. This includes time spent on non-productive polling and time used by routine maintenance tasks. This value is not a measure of the processor's ability to handle more work, which is represented by the cipCardEntryCpuLoad information. The ability to handle more work could also be affected by DMA and channel load, represented by the cipCardEntryDmaLoad and cipCardDtrBrd- ChannelAdapterLoad statistics.")
cipCardEntryTimeSinceLastReset = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 1, 1, 6), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardEntryTimeSinceLastReset.setStatus('current')
if mibBuilder.loadTexts: cipCardEntryTimeSinceLastReset.setDescription('The amount of time the CMCC card has been running.')
cipCardEntryMajorSwRevisionNr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardEntryMajorSwRevisionNr.setStatus('current')
if mibBuilder.loadTexts: cipCardEntryMajorSwRevisionNr.setDescription('The major software revision number for the software loaded on the CMCC card.')
cipCardEntryMinorSwRevisionNr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardEntryMinorSwRevisionNr.setStatus('current')
if mibBuilder.loadTexts: cipCardEntryMinorSwRevisionNr.setDescription('The minor software revision number for the software loaded on the CMCC card.')
cipCardEntryMajorHwRevisionNr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardEntryMajorHwRevisionNr.setStatus('current')
if mibBuilder.loadTexts: cipCardEntryMajorHwRevisionNr.setDescription('The major hardware revision number for the software loaded on the CMCC card.')
cipCardEntryMinorHwRevisionNr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardEntryMinorHwRevisionNr.setStatus('current')
if mibBuilder.loadTexts: cipCardEntryMinorHwRevisionNr.setDescription('The minor hardware revision number for the software loaded on the CMCC card.')
cipCardEntryCpuLoad1m = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardEntryCpuLoad1m.setStatus('current')
if mibBuilder.loadTexts: cipCardEntryCpuLoad1m.setDescription('The average, over the last minute, of the percentage of time that this processor was utilized to transfer data. It does not include idle time or time used by routine maintenance tasks.')
cipCardEntryCpuLoad5m = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardEntryCpuLoad5m.setStatus('current')
if mibBuilder.loadTexts: cipCardEntryCpuLoad5m.setDescription('The average, over the last 5 minutes, of the percentage of time that this processor was utilized to transfer data. It does not include idle time or time used by routine maintenance tasks.')
cipCardEntryCpuLoad60m = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardEntryCpuLoad60m.setStatus('current')
if mibBuilder.loadTexts: cipCardEntryCpuLoad60m.setDescription('The average, over the last 60 minutes, of the percentage of time that this processor was utilized to transfer data. It does not include idle time or time used by routine maintenance tasks.')
cipCardEntryDmaLoad1m = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardEntryDmaLoad1m.setStatus('current')
if mibBuilder.loadTexts: cipCardEntryDmaLoad1m.setDescription('The average, over the last minute, of the percentage of time the DMA controller was being used to transfer data between the CMCC card and the route processor.')
cipCardEntryDmaLoad5m = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardEntryDmaLoad5m.setStatus('current')
if mibBuilder.loadTexts: cipCardEntryDmaLoad5m.setDescription('The average, over the last 5 minutes, of the percentage of time the DMA controller was being used to transfer data between the CMCC card and the route processor.')
cipCardEntryDmaLoad60m = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardEntryDmaLoad60m.setStatus('current')
if mibBuilder.loadTexts: cipCardEntryDmaLoad60m.setDescription('The average, over the last 60 minutes, of the percentage of time the DMA controller was being used to transfer data between the CMCC card and the route processor.')
cipCardApplicationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 6), )
if mibBuilder.loadTexts: cipCardApplicationTable.setStatus('current')
if mibBuilder.loadTexts: cipCardApplicationTable.setDescription('This table contains information on the applications loaded on the CMCC card.')
cipCardApplicationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 6, 1), ).setIndexNames((0, "CISCO-CHANNEL-MIB", "cipCardEntryIndex"), (0, "CISCO-CHANNEL-MIB", "cipCardApplicationNameIndex"))
if mibBuilder.loadTexts: cipCardApplicationEntry.setStatus('current')
if mibBuilder.loadTexts: cipCardApplicationEntry.setDescription('A list of application information.')
cipCardApplicationNameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32))
if mibBuilder.loadTexts: cipCardApplicationNameIndex.setStatus('current')
if mibBuilder.loadTexts: cipCardApplicationNameIndex.setDescription('The application name.')
cipCardApplicationRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardApplicationRevision.setStatus('current')
if mibBuilder.loadTexts: cipCardApplicationRevision.setDescription("The application's software revision number.")
cipCardApplicationCompileInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardApplicationCompileInfo.setStatus('current')
if mibBuilder.loadTexts: cipCardApplicationCompileInfo.setDescription("The application's compilation information (date and user-id)")
cipCardDaughterBoardTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 2), )
if mibBuilder.loadTexts: cipCardDaughterBoardTable.setStatus('current')
if mibBuilder.loadTexts: cipCardDaughterBoardTable.setDescription('This table contains a list of objects pertaining to the daughter board on the CMCC card.')
cipCardDaughterBoardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 2, 1), ).setIndexNames((0, "CISCO-CHANNEL-MIB", "cipCardEntryIndex"), (0, "CISCO-CHANNEL-MIB", "cipCardDtrBrdIndex"))
if mibBuilder.loadTexts: cipCardDaughterBoardEntry.setStatus('current')
if mibBuilder.loadTexts: cipCardDaughterBoardEntry.setDescription('A list of daughter board values.')
cipCardDtrBrdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cipCardDtrBrdIndex.setStatus('current')
if mibBuilder.loadTexts: cipCardDtrBrdIndex.setDescription('This indicates which daughter board is is being referenced for a particular CMCC card.')
cipCardDtrBrdType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("escon", 1), ("busAndTag", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardDtrBrdType.setStatus('current')
if mibBuilder.loadTexts: cipCardDtrBrdType.setDescription('This indicates the channel path interface type.')
cipCardDtrBrdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardDtrBrdStatus.setStatus('current')
if mibBuilder.loadTexts: cipCardDtrBrdStatus.setDescription('cipCardDtrBrdStatus is true when the microcode for the daughter board has been successfully loaded and is executing, false otherwise.')
cipCardDtrBrdSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardDtrBrdSignal.setStatus('current')
if mibBuilder.loadTexts: cipCardDtrBrdSignal.setDescription('For ESCON, cipCardDtrBrdSignal is true when light has been seen on the fiber and synchronization has been established, false otherwise. For the Parallel Channel Adapter (PCA) which provides the Bus and Tag connection, cipCardDtrBrdSignal is true when Operational out has been sensed, false otherwise.')
cipCardDtrBrdOnline = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardDtrBrdOnline.setStatus('current')
if mibBuilder.loadTexts: cipCardDtrBrdOnline.setDescription('For ESCON, cipCardDtrBrdOnline is true when a path has been established with at least one channel, false otherwise. For PCA, cipCardDtrBrdOnline is true when the PCA is online to the channel. It will respond to at least one device address')
implicitIncidents = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: implicitIncidents.setStatus('current')
if mibBuilder.loadTexts: implicitIncidents.setDescription('This counts the number of times the ESCON Processor recovers from an internal error.')
codeViolationErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: codeViolationErrors.setStatus('current')
if mibBuilder.loadTexts: codeViolationErrors.setDescription('The number of recognized code-violation errors. A trap is issued when this number exceeds the bit error rate threshold for ESCON. The bit error rate threshold is set at 15 error burst within a 5 minute period. An error burst is the time period of 1.5 seconds plus or minus 0.05 seconds during which one or more code violations errors occur.')
linkFailureSignalOrSyncLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkFailureSignalOrSyncLoss.setStatus('current')
if mibBuilder.loadTexts: linkFailureSignalOrSyncLoss.setDescription('The number of link failures recognized as a result of a loss of signal or loss of synchronization that persisted longer than the link interval duration, the link interval duration is one second with a tolerance of +1.5 seconds and -0 seconds.')
linkFailureNOSs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkFailureNOSs.setStatus('current')
if mibBuilder.loadTexts: linkFailureNOSs.setDescription('The number of link failures recognized as a result of the not-operational sequence (NOS).')
linkFailureSequenceTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkFailureSequenceTimeouts.setStatus('current')
if mibBuilder.loadTexts: linkFailureSequenceTimeouts.setDescription('The number of link failures recognized as a result of a connection recovery timeout or response timeout occurring while in transmit OLS state.')
linkFailureInvalidSequences = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkFailureInvalidSequences.setStatus('current')
if mibBuilder.loadTexts: linkFailureInvalidSequences.setDescription('The number of link failures recognized as a result of an invalid sequence for Link-Level-Facility State. Either a UD or UDR sequence was recognized while in wait-for-offline-sequence state.')
linkIncidentTrapCause = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("liOther", 1), ("liStatus", 2), ("liImplicitIncidents", 3), ("liBERthreshold", 4), ("liSignalOrSyncLoss", 5), ("liNotOperationalSequence", 6), ("liSequenceTimeouts", 7), ("liInvalidSequences", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkIncidentTrapCause.setStatus('current')
if mibBuilder.loadTexts: linkIncidentTrapCause.setDescription('This indicates the reason for the last link failure. liStatus indicates that the daughter board status has changed. liImplicitIncident indicates that a condition which may cause the recognition of a link incident in the attached node has been recognized. liBERthreshold indicates that the code violation error rate exceeded the threshold. liSignalOrSyncLoss indicates a loss of signal or loss of synchronization that persisted longer than the link interval duration. liNotOperationalSequence indicates the recognition of not-operational sequence, usually due to the operator taking the channel offline. liSequenceTimeout indicates a connection recovery timeout or response timeout occurring while in transmit OLS state. linvalidSequence indicates a UD or UDR sequence was recognized while in wait-for-offline-sequence state. ')
cipCardDtrBrdLastStat = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 2, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardDtrBrdLastStat.setStatus('current')
if mibBuilder.loadTexts: cipCardDtrBrdLastStat.setDescription('This object indicates how old the statistics are.')
cipCardDtrBrdNextStat = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 2, 1, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardDtrBrdNextStat.setStatus('current')
if mibBuilder.loadTexts: cipCardDtrBrdNextStat.setDescription('This object indicates when statistics will next be read.')
cipCardDtrBrdChannelLoad1m = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardDtrBrdChannelLoad1m.setStatus('current')
if mibBuilder.loadTexts: cipCardDtrBrdChannelLoad1m.setDescription('The average, over the last minute, of the percentage of time the channel adapter was busy communicating to a host.')
cipCardDtrBrdChannelLoad5m = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardDtrBrdChannelLoad5m.setStatus('current')
if mibBuilder.loadTexts: cipCardDtrBrdChannelLoad5m.setDescription('The average, over the last 5 minutes, of the percentage of time the channel adapter was busy communicating to a host.')
cipCardDtrBrdChannelLoad60m = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardDtrBrdChannelLoad60m.setStatus('current')
if mibBuilder.loadTexts: cipCardDtrBrdChannelLoad60m.setDescription('The average, over the last 60 minutes, of the percentage of time the channel adapter was busy communicating to a host.')
cipCardSubChannelTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 3), )
if mibBuilder.loadTexts: cipCardSubChannelTable.setStatus('current')
if mibBuilder.loadTexts: cipCardSubChannelTable.setDescription('This table contains a list of objects pertaining to each host connection.')
cipCardSubChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 3, 1), ).setIndexNames((0, "CISCO-CHANNEL-MIB", "cipCardEntryIndex"), (0, "CISCO-CHANNEL-MIB", "cipCardDtrBrdIndex"), (0, "CISCO-CHANNEL-MIB", "cipCardSubChannelIndex"))
if mibBuilder.loadTexts: cipCardSubChannelEntry.setStatus('current')
if mibBuilder.loadTexts: cipCardSubChannelEntry.setDescription('A list of host connection statistics.')
cipCardSubChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardSubChannelIndex.setStatus('current')
if mibBuilder.loadTexts: cipCardSubChannelIndex.setDescription('This indicates which subchannel is being referenced for a particular daughter board on a CMCC card. This value is constructed as follows: path * 256 + device Path and device are the values in CipCardClawConfigTable.')
cipCardSubChannelConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardSubChannelConnections.setStatus('current')
if mibBuilder.loadTexts: cipCardSubChannelConnections.setDescription('Number of times a device was connected to the subchannel. For some devices, this correlates with the number of start subchannels.')
cipCardSubChannelCancels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardSubChannelCancels.setStatus('current')
if mibBuilder.loadTexts: cipCardSubChannelCancels.setDescription('Number of halt subchannels.')
cipCardSubChannelSelectiveResets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardSubChannelSelectiveResets.setStatus('current')
if mibBuilder.loadTexts: cipCardSubChannelSelectiveResets.setDescription('Number of selective resets.')
cipCardSubChannelSystemResets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardSubChannelSystemResets.setStatus('current')
if mibBuilder.loadTexts: cipCardSubChannelSystemResets.setDescription('Number of system resets.')
cipCardSubChannelDeviceErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardSubChannelDeviceErrors.setStatus('current')
if mibBuilder.loadTexts: cipCardSubChannelDeviceErrors.setDescription('Number of device level errors.')
cipCardSubChannelWriteBlocksDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardSubChannelWriteBlocksDropped.setStatus('current')
if mibBuilder.loadTexts: cipCardSubChannelWriteBlocksDropped.setDescription('Number of times a block was received by the channel and a router buffer was not available so the block was discarded.')
cipCardSubChannelLastSenseData = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 3, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardSubChannelLastSenseData.setStatus('current')
if mibBuilder.loadTexts: cipCardSubChannelLastSenseData.setDescription('This is the last sense data sent to the channel by this device.')
cipCardSubChannelLastSenseDataTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 3, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardSubChannelLastSenseDataTime.setStatus('current')
if mibBuilder.loadTexts: cipCardSubChannelLastSenseDataTime.setDescription('This indicates the time when the last sense data was sent to the channel by this device.')
cipCardSubChannelCuBusies = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardSubChannelCuBusies.setStatus('current')
if mibBuilder.loadTexts: cipCardSubChannelCuBusies.setDescription('This is the number of control unit busies sent to the channel when this device was requested.')
cipCardSubChannelCmdRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardSubChannelCmdRetries.setStatus('current')
if mibBuilder.loadTexts: cipCardSubChannelCmdRetries.setDescription('Number of times the subchannel went into command retry state. The sum of this value and cipCardSubChannelConnections gives the number of start subchannels.')
cipCardSubChannelResetEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 3, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardSubChannelResetEvent.setStatus('current')
if mibBuilder.loadTexts: cipCardSubChannelResetEvent.setDescription('A state that a device gets into after a system reset and is cleared by a resetting event unit check.')
cipCardSubChannelShortBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 3, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardSubChannelShortBusy.setStatus('current')
if mibBuilder.loadTexts: cipCardSubChannelShortBusy.setDescription('A transient state that a device can get into during processing of various resets.')
cipCardSubChannelCMDRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 3, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardSubChannelCMDRetry.setStatus('current')
if mibBuilder.loadTexts: cipCardSubChannelCMDRetry.setDescription("A state that a device can get into if the mainframe tries to write data to the CMCC when the CMCC has no buffers for it or if the mainframe performs a read operation and the CMCC doesn't have any data to send.")
cipCardSubChannelBufferWait = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 3, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardSubChannelBufferWait.setStatus('current')
if mibBuilder.loadTexts: cipCardSubChannelBufferWait.setDescription('A state that a device can get into when the mainframe tries to write data to the CMCC and the CMCC has no buffers for all of the write operation.')
cipCardSubChannelStatPending = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 3, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardSubChannelStatPending.setStatus('current')
if mibBuilder.loadTexts: cipCardSubChannelStatPending.setDescription('Indicates that the CMCC has status to present for a particular device. The indication is cleared when the mainframe excepts the status.')
cipCardSubChannelSuspend = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 3, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardSubChannelSuspend.setStatus('current')
if mibBuilder.loadTexts: cipCardSubChannelSuspend.setDescription('Indicates that the device task has decided to suspend data transfer for a particular device.')
cipCardSubChannelFBLWait = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 3, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardSubChannelFBLWait.setStatus('current')
if mibBuilder.loadTexts: cipCardSubChannelFBLWait.setDescription('A state that a device can get into when the mainframe tries to write data to the CMCC and the CMCC has no buffers for all of the write operation.')
cipCardClaw = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 4))
cipCardClawTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 4, 1), )
if mibBuilder.loadTexts: cipCardClawTable.setStatus('current')
if mibBuilder.loadTexts: cipCardClawTable.setDescription('This table contains status and other information not covered in the following tables for the Common Link Access to Workstation (CLAW) protocol.')
cipCardClawEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-CHANNEL-MIB", "cipCardEntryIndex"), (0, "CISCO-CHANNEL-MIB", "cipCardDtrBrdIndex"), (0, "CISCO-CHANNEL-MIB", "cipCardSubChannelIndex"), (0, "CISCO-CHANNEL-MIB", "cipCardClawIndex"))
if mibBuilder.loadTexts: cipCardClawEntry.setStatus('current')
if mibBuilder.loadTexts: cipCardClawEntry.setDescription('A list of CLAW values.')
cipCardClawIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardClawIndex.setStatus('current')
if mibBuilder.loadTexts: cipCardClawIndex.setDescription('This indicates which CLAW link is being referenced for a particular subchannel on a daughter board on a CMCC card.')
cipCardClawConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 4, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardClawConnected.setStatus('current')
if mibBuilder.loadTexts: cipCardClawConnected.setDescription('Indicates CLAW connection status.')
cipCardClawConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 4, 2), )
if mibBuilder.loadTexts: cipCardClawConfigTable.setStatus('current')
if mibBuilder.loadTexts: cipCardClawConfigTable.setDescription('This table contains configuration information for the Common Link Access to Workstation (CLAW) protocol.')
cipCardClawConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 4, 2, 1), ).setIndexNames((0, "CISCO-CHANNEL-MIB", "cipCardEntryIndex"), (0, "CISCO-CHANNEL-MIB", "cipCardDtrBrdIndex"), (0, "CISCO-CHANNEL-MIB", "cipCardSubChannelIndex"), (0, "CISCO-CHANNEL-MIB", "cipCardClawIndex"))
if mibBuilder.loadTexts: cipCardClawConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cipCardClawConfigEntry.setDescription('A list of CLAW configuration values.')
cipCardClawConfigPath = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 4, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipCardClawConfigPath.setStatus('current')
if mibBuilder.loadTexts: cipCardClawConfigPath.setDescription('Hex path identifier for the escon director switch port containing the fiber from the channel on the host to which this CMCC CLAW task connects. This is a concatenation of the switch port number, the channel logical address (used by the host to associate an logical partition (LPAR) with the control unit), and the control unit logical address (address of a logical control unit used by the host to associate a group of physical devices). For a directly connected channel, the switch port number is usually 01.')
cipCardClawConfigDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 4, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipCardClawConfigDevice.setStatus('current')
if mibBuilder.loadTexts: cipCardClawConfigDevice.setDescription('Two digit hex device address for the device the SNA host will use to communicate with the CLAW task on the CMCC card. The address must be even.')
cipCardClawConfigIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 4, 2, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipCardClawConfigIpAddr.setStatus('current')
if mibBuilder.loadTexts: cipCardClawConfigIpAddr.setDescription('IP address of the host application for the CMCC CLAW task as specified in the HOME statement of the PROFILE TCPIP.')
cipCardClawConfigHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 4, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipCardClawConfigHostName.setStatus('current')
if mibBuilder.loadTexts: cipCardClawConfigHostName.setDescription('CLAW host name for this CLAW device.')
cipCardClawConfigRouterName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipCardClawConfigRouterName.setStatus('current')
if mibBuilder.loadTexts: cipCardClawConfigRouterName.setDescription('CLAW router name for this CLAW device.')
cipCardClawConfigHostAppl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 4, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipCardClawConfigHostAppl.setStatus('current')
if mibBuilder.loadTexts: cipCardClawConfigHostAppl.setDescription('CLAW host application name for this CLAW connection.')
cipCardClawConfigRouterAppl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 4, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipCardClawConfigRouterAppl.setStatus('current')
if mibBuilder.loadTexts: cipCardClawConfigRouterAppl.setDescription('CLAW router application name for this CLAW connection.')
cipCardClawConfigBroadcastEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 4, 2, 1, 8), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipCardClawConfigBroadcastEnable.setStatus('current')
if mibBuilder.loadTexts: cipCardClawConfigBroadcastEnable.setDescription('Control processing of broadcast frames for the path/device. Enable turns broadcast processing on.')
cipCardClawConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 4, 2, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cipCardClawConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: cipCardClawConfigRowStatus.setDescription('This object is used by a management station to create or delete the row entry in cipCardClawConfigTable following the RowStatus textual convention.')
cipCardClawDataXferStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 4, 3), )
if mibBuilder.loadTexts: cipCardClawDataXferStatsTable.setStatus('current')
if mibBuilder.loadTexts: cipCardClawDataXferStatsTable.setDescription('This table contains a list of objects pertaining to data transfer statistics per CLAW Logical Link.')
cipCardClawDataXferStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 4, 3, 1), ).setIndexNames((0, "CISCO-CHANNEL-MIB", "cipCardEntryIndex"), (0, "CISCO-CHANNEL-MIB", "cipCardDtrBrdIndex"), (0, "CISCO-CHANNEL-MIB", "cipCardSubChannelIndex"), (0, "CISCO-CHANNEL-MIB", "cipCardClawIndex"))
if mibBuilder.loadTexts: cipCardClawDataXferStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cipCardClawDataXferStatsEntry.setDescription('A list of daughter board statistics.')
cipCardClawDataXferStatsBlocksRead = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 4, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardClawDataXferStatsBlocksRead.setStatus('current')
if mibBuilder.loadTexts: cipCardClawDataXferStatsBlocksRead.setDescription('Number of successful read data transfer channel command words (CCWs) from the channel perspective.')
cipCardClawDataXferStatsBlocksWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 4, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardClawDataXferStatsBlocksWritten.setStatus('current')
if mibBuilder.loadTexts: cipCardClawDataXferStatsBlocksWritten.setDescription('Number of successful write data transfer CCWs from the channel perspective.')
cipCardClawDataXferStatsBytesRead = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 4, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardClawDataXferStatsBytesRead.setStatus('current')
if mibBuilder.loadTexts: cipCardClawDataXferStatsBytesRead.setDescription('Number of bytes successfully read from the channel perspective.')
cipCardClawDataXferStatsHCBytesRead = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 4, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardClawDataXferStatsHCBytesRead.setStatus('current')
if mibBuilder.loadTexts: cipCardClawDataXferStatsHCBytesRead.setDescription('Number of bytes successfully read from the channel perspective. This is the 64-bit (High Capacity) version of clawDataXferStatsBytesRead.')
cipCardClawDataXferStatsBytesWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 4, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardClawDataXferStatsBytesWritten.setStatus('current')
if mibBuilder.loadTexts: cipCardClawDataXferStatsBytesWritten.setDescription('Number of bytes successfully written from the channel perspective.')
cipCardClawDataXferStatsHCBytesWritten = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 4, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardClawDataXferStatsHCBytesWritten.setStatus('current')
if mibBuilder.loadTexts: cipCardClawDataXferStatsHCBytesWritten.setDescription('Number of bytes successfully written from the channel perspective. This is the 64-bit version version of clawDataXferStatsBytesWritten.')
cipCardClawDataXferStatsReadBlocksDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 4, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardClawDataXferStatsReadBlocksDropped.setStatus('current')
if mibBuilder.loadTexts: cipCardClawDataXferStatsReadBlocksDropped.setDescription('Number of read blocks dropped.')
cipCardClawDataXferStatsWriteBlocksDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 4, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardClawDataXferStatsWriteBlocksDropped.setStatus('current')
if mibBuilder.loadTexts: cipCardClawDataXferStatsWriteBlocksDropped.setDescription('Number of write blocks dropped.')
cipCardClawDataXferStatsBufferGetRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 4, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cipCardClawDataXferStatsBufferGetRetryCount.setStatus('current')
if mibBuilder.loadTexts: cipCardClawDataXferStatsBufferGetRetryCount.setDescription('Number of times a buffer was requested and none were available.')
cipCardTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 5))
cipCardLinkFailure = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 5, 1)).setObjects(("CISCO-CHANNEL-MIB", "cipCardDtrBrdIndex"), ("CISCO-CHANNEL-MIB", "cipCardDtrBrdStatus"), ("CISCO-CHANNEL-MIB", "cipCardDtrBrdSignal"), ("CISCO-CHANNEL-MIB", "linkIncidentTrapCause"), ("CISCO-CHANNEL-MIB", "implicitIncidents"), ("CISCO-CHANNEL-MIB", "codeViolationErrors"), ("CISCO-CHANNEL-MIB", "linkFailureSignalOrSyncLoss"), ("CISCO-CHANNEL-MIB", "linkFailureNOSs"), ("CISCO-CHANNEL-MIB", "linkFailureSequenceTimeouts"), ("CISCO-CHANNEL-MIB", "linkFailureInvalidSequences"))
if mibBuilder.loadTexts: cipCardLinkFailure.setStatus('deprecated')
if mibBuilder.loadTexts: cipCardLinkFailure.setDescription('This trap indicates that a significant link event has been recognized resulting in the degradation of the interface line quality. (This trap was deactivated 6/97, below trap is now sent on link failures)')
cipCardDtrBrdLinkFailure = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 20, 1, 5, 2)).setObjects(("CISCO-CHANNEL-MIB", "cipCardDtrBrdStatus"), ("CISCO-CHANNEL-MIB", "cipCardDtrBrdSignal"), ("CISCO-CHANNEL-MIB", "linkIncidentTrapCause"))
if mibBuilder.loadTexts: cipCardDtrBrdLinkFailure.setStatus('current')
if mibBuilder.loadTexts: cipCardDtrBrdLinkFailure.setDescription('This trap indicates that a significant link event has been recognized resulting in the degradation of the interface line quality.')
ciscoChannelMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 20, 2))
ciscoChannelMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 20, 2, 1))
ciscoChannelMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 20, 2, 2))
ciscoChannelMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 20, 2, 1, 1)).setObjects(("CISCO-CHANNEL-MIB", "ciscoChannelGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoChannelMibCompliance = ciscoChannelMibCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoChannelMibCompliance.setDescription('The compliance statement for the TcpIP Offload feature.')
ciscoChannelMibComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 20, 2, 1, 2)).setObjects(("CISCO-CHANNEL-MIB", "ciscoChannelGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoChannelMibComplianceRev1 = ciscoChannelMibComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoChannelMibComplianceRev1.setDescription('The compliance statement for the TcpIP Offload feature.')
ciscoChannelMibComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 20, 2, 1, 3)).setObjects(("CISCO-CHANNEL-MIB", "ciscoChannelGroupRev1"), ("CISCO-CHANNEL-MIB", "ciscoChannelGroupRev2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoChannelMibComplianceRev2 = ciscoChannelMibComplianceRev2.setStatus('current')
if mibBuilder.loadTexts: ciscoChannelMibComplianceRev2.setDescription('The compliance statement for the TcpIP Offload & CSNA features.')
ciscoChannelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 20, 2, 2, 1)).setObjects(("CISCO-CHANNEL-MIB", "cipCardEntryName"), ("CISCO-CHANNEL-MIB", "cipCardEntryTotalMemory"), ("CISCO-CHANNEL-MIB", "cipCardEntryFreeMemory"), ("CISCO-CHANNEL-MIB", "cipCardEntryCpuUtilization"), ("CISCO-CHANNEL-MIB", "cipCardEntryTimeSinceLastReset"), ("CISCO-CHANNEL-MIB", "cipCardEntryMajorSwRevisionNr"), ("CISCO-CHANNEL-MIB", "cipCardEntryMinorSwRevisionNr"), ("CISCO-CHANNEL-MIB", "cipCardEntryMajorHwRevisionNr"), ("CISCO-CHANNEL-MIB", "cipCardEntryMinorHwRevisionNr"), ("CISCO-CHANNEL-MIB", "cipCardApplicationRevision"), ("CISCO-CHANNEL-MIB", "cipCardApplicationCompileInfo"), ("CISCO-CHANNEL-MIB", "cipCardDtrBrdType"), ("CISCO-CHANNEL-MIB", "cipCardDtrBrdStatus"), ("CISCO-CHANNEL-MIB", "cipCardDtrBrdSignal"), ("CISCO-CHANNEL-MIB", "cipCardDtrBrdOnline"), ("CISCO-CHANNEL-MIB", "implicitIncidents"), ("CISCO-CHANNEL-MIB", "codeViolationErrors"), ("CISCO-CHANNEL-MIB", "linkFailureSignalOrSyncLoss"), ("CISCO-CHANNEL-MIB", "linkFailureNOSs"), ("CISCO-CHANNEL-MIB", "linkFailureSequenceTimeouts"), ("CISCO-CHANNEL-MIB", "linkFailureInvalidSequences"), ("CISCO-CHANNEL-MIB", "linkIncidentTrapCause"), ("CISCO-CHANNEL-MIB", "cipCardSubChannelIndex"), ("CISCO-CHANNEL-MIB", "cipCardSubChannelConnections"), ("CISCO-CHANNEL-MIB", "cipCardSubChannelCancels"), ("CISCO-CHANNEL-MIB", "cipCardSubChannelSelectiveResets"), ("CISCO-CHANNEL-MIB", "cipCardSubChannelSystemResets"), ("CISCO-CHANNEL-MIB", "cipCardSubChannelDeviceErrors"), ("CISCO-CHANNEL-MIB", "cipCardSubChannelWriteBlocksDropped"), ("CISCO-CHANNEL-MIB", "cipCardSubChannelLastSenseData"), ("CISCO-CHANNEL-MIB", "cipCardSubChannelLastSenseDataTime"), ("CISCO-CHANNEL-MIB", "cipCardSubChannelCuBusies"), ("CISCO-CHANNEL-MIB", "cipCardClawIndex"), ("CISCO-CHANNEL-MIB", "cipCardClawConnected"), ("CISCO-CHANNEL-MIB", "cipCardClawConfigPath"), ("CISCO-CHANNEL-MIB", "cipCardClawConfigDevice"), ("CISCO-CHANNEL-MIB", "cipCardClawConfigIpAddr"), ("CISCO-CHANNEL-MIB", "cipCardClawConfigHostName"), ("CISCO-CHANNEL-MIB", "cipCardClawConfigRouterName"), ("CISCO-CHANNEL-MIB", "cipCardClawConfigHostAppl"), ("CISCO-CHANNEL-MIB", "cipCardClawConfigRouterAppl"), ("CISCO-CHANNEL-MIB", "cipCardClawDataXferStatsBlocksRead"), ("CISCO-CHANNEL-MIB", "cipCardClawDataXferStatsBlocksWritten"), ("CISCO-CHANNEL-MIB", "cipCardClawDataXferStatsBytesRead"), ("CISCO-CHANNEL-MIB", "cipCardClawDataXferStatsHCBytesRead"), ("CISCO-CHANNEL-MIB", "cipCardClawDataXferStatsBytesWritten"), ("CISCO-CHANNEL-MIB", "cipCardClawDataXferStatsHCBytesWritten"), ("CISCO-CHANNEL-MIB", "cipCardClawDataXferStatsReadBlocksDropped"), ("CISCO-CHANNEL-MIB", "cipCardClawDataXferStatsWriteBlocksDropped"), ("CISCO-CHANNEL-MIB", "cipCardClawDataXferStatsBufferGetRetryCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoChannelGroup = ciscoChannelGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoChannelGroup.setDescription('A collection of objects providing configuration capability.')
ciscoChannelGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 20, 2, 2, 2)).setObjects(("CISCO-CHANNEL-MIB", "cipCardEntryName"), ("CISCO-CHANNEL-MIB", "cipCardEntryTotalMemory"), ("CISCO-CHANNEL-MIB", "cipCardEntryFreeMemory"), ("CISCO-CHANNEL-MIB", "cipCardEntryCpuUtilization"), ("CISCO-CHANNEL-MIB", "cipCardEntryTimeSinceLastReset"), ("CISCO-CHANNEL-MIB", "cipCardEntryMajorSwRevisionNr"), ("CISCO-CHANNEL-MIB", "cipCardEntryMinorSwRevisionNr"), ("CISCO-CHANNEL-MIB", "cipCardEntryMajorHwRevisionNr"), ("CISCO-CHANNEL-MIB", "cipCardEntryMinorHwRevisionNr"), ("CISCO-CHANNEL-MIB", "cipCardApplicationRevision"), ("CISCO-CHANNEL-MIB", "cipCardApplicationCompileInfo"), ("CISCO-CHANNEL-MIB", "cipCardDtrBrdType"), ("CISCO-CHANNEL-MIB", "cipCardDtrBrdStatus"), ("CISCO-CHANNEL-MIB", "cipCardDtrBrdSignal"), ("CISCO-CHANNEL-MIB", "cipCardDtrBrdOnline"), ("CISCO-CHANNEL-MIB", "implicitIncidents"), ("CISCO-CHANNEL-MIB", "codeViolationErrors"), ("CISCO-CHANNEL-MIB", "linkFailureSignalOrSyncLoss"), ("CISCO-CHANNEL-MIB", "linkFailureNOSs"), ("CISCO-CHANNEL-MIB", "linkFailureSequenceTimeouts"), ("CISCO-CHANNEL-MIB", "linkFailureInvalidSequences"), ("CISCO-CHANNEL-MIB", "linkIncidentTrapCause"), ("CISCO-CHANNEL-MIB", "cipCardDtrBrdLastStat"), ("CISCO-CHANNEL-MIB", "cipCardDtrBrdNextStat"), ("CISCO-CHANNEL-MIB", "cipCardSubChannelIndex"), ("CISCO-CHANNEL-MIB", "cipCardSubChannelConnections"), ("CISCO-CHANNEL-MIB", "cipCardSubChannelCancels"), ("CISCO-CHANNEL-MIB", "cipCardSubChannelSelectiveResets"), ("CISCO-CHANNEL-MIB", "cipCardSubChannelSystemResets"), ("CISCO-CHANNEL-MIB", "cipCardSubChannelDeviceErrors"), ("CISCO-CHANNEL-MIB", "cipCardSubChannelWriteBlocksDropped"), ("CISCO-CHANNEL-MIB", "cipCardSubChannelLastSenseData"), ("CISCO-CHANNEL-MIB", "cipCardSubChannelLastSenseDataTime"), ("CISCO-CHANNEL-MIB", "cipCardSubChannelCuBusies"), ("CISCO-CHANNEL-MIB", "cipCardSubChannelCmdRetries"), ("CISCO-CHANNEL-MIB", "cipCardClawIndex"), ("CISCO-CHANNEL-MIB", "cipCardClawConnected"), ("CISCO-CHANNEL-MIB", "cipCardClawConfigPath"), ("CISCO-CHANNEL-MIB", "cipCardClawConfigDevice"), ("CISCO-CHANNEL-MIB", "cipCardClawConfigIpAddr"), ("CISCO-CHANNEL-MIB", "cipCardClawConfigHostName"), ("CISCO-CHANNEL-MIB", "cipCardClawConfigRouterName"), ("CISCO-CHANNEL-MIB", "cipCardClawConfigHostAppl"), ("CISCO-CHANNEL-MIB", "cipCardClawConfigRouterAppl"), ("CISCO-CHANNEL-MIB", "cipCardClawDataXferStatsBlocksRead"), ("CISCO-CHANNEL-MIB", "cipCardClawDataXferStatsBlocksWritten"), ("CISCO-CHANNEL-MIB", "cipCardClawDataXferStatsBytesRead"), ("CISCO-CHANNEL-MIB", "cipCardClawDataXferStatsHCBytesRead"), ("CISCO-CHANNEL-MIB", "cipCardClawDataXferStatsBytesWritten"), ("CISCO-CHANNEL-MIB", "cipCardClawDataXferStatsHCBytesWritten"), ("CISCO-CHANNEL-MIB", "cipCardClawDataXferStatsReadBlocksDropped"), ("CISCO-CHANNEL-MIB", "cipCardClawDataXferStatsWriteBlocksDropped"), ("CISCO-CHANNEL-MIB", "cipCardClawDataXferStatsBufferGetRetryCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoChannelGroupRev1 = ciscoChannelGroupRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoChannelGroupRev1.setDescription('A collection of objects providing configuration capability.')
ciscoChannelGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 20, 2, 2, 3)).setObjects(("CISCO-CHANNEL-MIB", "cipCardEntryCpuLoad1m"), ("CISCO-CHANNEL-MIB", "cipCardEntryCpuLoad5m"), ("CISCO-CHANNEL-MIB", "cipCardEntryCpuLoad60m"), ("CISCO-CHANNEL-MIB", "cipCardEntryDmaLoad1m"), ("CISCO-CHANNEL-MIB", "cipCardEntryDmaLoad5m"), ("CISCO-CHANNEL-MIB", "cipCardEntryDmaLoad60m"), ("CISCO-CHANNEL-MIB", "cipCardDtrBrdChannelLoad1m"), ("CISCO-CHANNEL-MIB", "cipCardDtrBrdChannelLoad5m"), ("CISCO-CHANNEL-MIB", "cipCardDtrBrdChannelLoad60m"), ("CISCO-CHANNEL-MIB", "cipCardClawConfigBroadcastEnable"), ("CISCO-CHANNEL-MIB", "cipCardClawConfigRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoChannelGroupRev2 = ciscoChannelGroupRev2.setStatus('current')
if mibBuilder.loadTexts: ciscoChannelGroupRev2.setDescription('A collection of objects providing configuration capability.')
ciscoChannelGroupRev3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 20, 2, 2, 4)).setObjects(("CISCO-CHANNEL-MIB", "cipCardSubChannelResetEvent"), ("CISCO-CHANNEL-MIB", "cipCardSubChannelShortBusy"), ("CISCO-CHANNEL-MIB", "cipCardSubChannelCMDRetry"), ("CISCO-CHANNEL-MIB", "cipCardSubChannelBufferWait"), ("CISCO-CHANNEL-MIB", "cipCardSubChannelStatPending"), ("CISCO-CHANNEL-MIB", "cipCardSubChannelSuspend"), ("CISCO-CHANNEL-MIB", "cipCardSubChannelFBLWait"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoChannelGroupRev3 = ciscoChannelGroupRev3.setStatus('current')
if mibBuilder.loadTexts: ciscoChannelGroupRev3.setDescription('A collection of Subchannel device status objects.')
mibBuilder.exportSymbols("CISCO-CHANNEL-MIB", cipCardClawIndex=cipCardClawIndex, cipCardEntryTimeSinceLastReset=cipCardEntryTimeSinceLastReset, cipCardClawConfigHostAppl=cipCardClawConfigHostAppl, cipCardApplicationTable=cipCardApplicationTable, cipCardEntryCpuLoad1m=cipCardEntryCpuLoad1m, cipCardClawConfigEntry=cipCardClawConfigEntry, cipCardEntryDmaLoad1m=cipCardEntryDmaLoad1m, cipCard=cipCard, cipCardSubChannelCMDRetry=cipCardSubChannelCMDRetry, ciscoChannelMibGroups=ciscoChannelMibGroups, cipCardClawDataXferStatsBytesRead=cipCardClawDataXferStatsBytesRead, ciscoChannelMibComplianceRev1=ciscoChannelMibComplianceRev1, cipCardEntryCpuLoad60m=cipCardEntryCpuLoad60m, cipCardClawDataXferStatsBlocksWritten=cipCardClawDataXferStatsBlocksWritten, cipCardClawTable=cipCardClawTable, cipCardSubChannelFBLWait=cipCardSubChannelFBLWait, cipCardClawConfigRowStatus=cipCardClawConfigRowStatus, ciscoChannelMibConformance=ciscoChannelMibConformance, cipCardEntryMajorSwRevisionNr=cipCardEntryMajorSwRevisionNr, cipCardDtrBrdStatus=cipCardDtrBrdStatus, cipCardSubChannelCmdRetries=cipCardSubChannelCmdRetries, cipCardSubChannelConnections=cipCardSubChannelConnections, cipCardApplicationNameIndex=cipCardApplicationNameIndex, cipCardSubChannelShortBusy=cipCardSubChannelShortBusy, ciscoChannelMibCompliance=ciscoChannelMibCompliance, cipCardDaughterBoardEntry=cipCardDaughterBoardEntry, cipCardDtrBrdIndex=cipCardDtrBrdIndex, cipCardEntryMinorSwRevisionNr=cipCardEntryMinorSwRevisionNr, cipCardClawDataXferStatsHCBytesWritten=cipCardClawDataXferStatsHCBytesWritten, cipCardClawDataXferStatsBlocksRead=cipCardClawDataXferStatsBlocksRead, cipCardSubChannelSuspend=cipCardSubChannelSuspend, cipCardClawDataXferStatsTable=cipCardClawDataXferStatsTable, cipCardTraps=cipCardTraps, ciscoChannelGroup=ciscoChannelGroup, ciscoChannelGroupRev1=ciscoChannelGroupRev1, ciscoChannelGroupRev2=ciscoChannelGroupRev2, cipCardSubChannelStatPending=cipCardSubChannelStatPending, cipCardDtrBrdLastStat=cipCardDtrBrdLastStat, cipCardEntryMajorHwRevisionNr=cipCardEntryMajorHwRevisionNr, cipCardSubChannelEntry=cipCardSubChannelEntry, cipCardSubChannelIndex=cipCardSubChannelIndex, PYSNMP_MODULE_ID=channel, cipCardEntryIndex=cipCardEntryIndex, cipCardClawConfigBroadcastEnable=cipCardClawConfigBroadcastEnable, linkFailureSequenceTimeouts=linkFailureSequenceTimeouts, ciscoChannelGroupRev3=ciscoChannelGroupRev3, cipCardClawConfigIpAddr=cipCardClawConfigIpAddr, cipCardClawDataXferStatsReadBlocksDropped=cipCardClawDataXferStatsReadBlocksDropped, cipCardEntryDmaLoad5m=cipCardEntryDmaLoad5m, cipCardClawConfigHostName=cipCardClawConfigHostName, linkFailureNOSs=linkFailureNOSs, cipCardDtrBrdChannelLoad1m=cipCardDtrBrdChannelLoad1m, cipCardSubChannelTable=cipCardSubChannelTable, cipCardSubChannelSelectiveResets=cipCardSubChannelSelectiveResets, cipCardEntryName=cipCardEntryName, cipCardDtrBrdNextStat=cipCardDtrBrdNextStat, cipCardApplicationEntry=cipCardApplicationEntry, cipCardSubChannelLastSenseData=cipCardSubChannelLastSenseData, cipCardDtrBrdChannelLoad60m=cipCardDtrBrdChannelLoad60m, implicitIncidents=implicitIncidents, cipCardSubChannelDeviceErrors=cipCardSubChannelDeviceErrors, cipCardEntryTotalMemory=cipCardEntryTotalMemory, cipCardClawDataXferStatsBufferGetRetryCount=cipCardClawDataXferStatsBufferGetRetryCount, cipCardEntryCpuLoad5m=cipCardEntryCpuLoad5m, linkIncidentTrapCause=linkIncidentTrapCause, cipCardTable=cipCardTable, cipCardClaw=cipCardClaw, cipCardDtrBrdOnline=cipCardDtrBrdOnline, cipCardClawConfigPath=cipCardClawConfigPath, cipCardEntryCpuUtilization=cipCardEntryCpuUtilization, cipCardClawConfigDevice=cipCardClawConfigDevice, cipCardClawConfigTable=cipCardClawConfigTable, cipCardSubChannelSystemResets=cipCardSubChannelSystemResets, codeViolationErrors=codeViolationErrors, cipCardApplicationCompileInfo=cipCardApplicationCompileInfo, cipCardSubChannelCancels=cipCardSubChannelCancels, channel=channel, cipCardClawConfigRouterAppl=cipCardClawConfigRouterAppl, cipCardClawConnected=cipCardClawConnected, cipCardClawDataXferStatsBytesWritten=cipCardClawDataXferStatsBytesWritten, linkFailureSignalOrSyncLoss=linkFailureSignalOrSyncLoss, cipCardEntryFreeMemory=cipCardEntryFreeMemory, cipCardClawEntry=cipCardClawEntry, ciscoChannelMibCompliances=ciscoChannelMibCompliances, cipCardEntry=cipCardEntry, cipCardEntryMinorHwRevisionNr=cipCardEntryMinorHwRevisionNr, ciscoChannelMibComplianceRev2=ciscoChannelMibComplianceRev2, cipCardDtrBrdType=cipCardDtrBrdType, cipCardLinkFailure=cipCardLinkFailure, cipCardDtrBrdLinkFailure=cipCardDtrBrdLinkFailure, cipCardDtrBrdSignal=cipCardDtrBrdSignal, linkFailureInvalidSequences=linkFailureInvalidSequences, cipCardSubChannelCuBusies=cipCardSubChannelCuBusies, cipCardDtrBrdChannelLoad5m=cipCardDtrBrdChannelLoad5m, cipCardApplicationRevision=cipCardApplicationRevision, cipCardSubChannelLastSenseDataTime=cipCardSubChannelLastSenseDataTime, cipCardClawDataXferStatsEntry=cipCardClawDataXferStatsEntry, cipCardEntryDmaLoad60m=cipCardEntryDmaLoad60m, cipCardClawDataXferStatsWriteBlocksDropped=cipCardClawDataXferStatsWriteBlocksDropped, cipCardClawDataXferStatsHCBytesRead=cipCardClawDataXferStatsHCBytesRead, cipCardSubChannelResetEvent=cipCardSubChannelResetEvent, cipCardDaughterBoardTable=cipCardDaughterBoardTable, cipCardSubChannelBufferWait=cipCardSubChannelBufferWait, cipCardSubChannelWriteBlocksDropped=cipCardSubChannelWriteBlocksDropped, cipCardClawConfigRouterName=cipCardClawConfigRouterName)
