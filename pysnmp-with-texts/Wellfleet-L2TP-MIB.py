#
# PySNMP MIB module Wellfleet-L2TP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-L2TP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:40:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Unsigned32, Gauge32, MibIdentifier, TimeTicks, Bits, Integer32, ObjectIdentity, Counter32, ModuleIdentity, IpAddress, iso = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Unsigned32", "Gauge32", "MibIdentifier", "TimeTicks", "Bits", "Integer32", "ObjectIdentity", "Counter32", "ModuleIdentity", "IpAddress", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfL2TPGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfL2TPGroup")
wfTunnelAuthTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 1), )
if mibBuilder.loadTexts: wfTunnelAuthTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfTunnelAuthTable.setDescription('Infomation used for tunnel authentication between the LAC and LNS')
wfTunnelAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 1, 1), ).setIndexNames((0, "Wellfleet-L2TP-MIB", "wfTunnelAuthSlot"), (0, "Wellfleet-L2TP-MIB", "wfTunnelAuthInstance"))
if mibBuilder.loadTexts: wfTunnelAuthEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfTunnelAuthEntry.setDescription('An entry defining a tunnel authentication entity')
wfTunnelAuthDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTunnelAuthDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfTunnelAuthDelete.setDescription('Creation and deletion flag for this record')
wfTunnelAuthDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTunnelAuthDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfTunnelAuthDisable.setDescription('Disable/Enable the usage of this tunnel authentication entry')
wfTunnelAuthSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTunnelAuthSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfTunnelAuthSlot.setDescription('Slot corresponding to this L2TP configuration')
wfTunnelAuthInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTunnelAuthInstance.setStatus('mandatory')
if mibBuilder.loadTexts: wfTunnelAuthInstance.setDescription('The instance index of the authentication entry')
wfTunnelAuthSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTunnelAuthSecret.setStatus('mandatory')
if mibBuilder.loadTexts: wfTunnelAuthSecret.setDescription('The tunnel authentication shared secret')
wfL2TPTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 2), )
if mibBuilder.loadTexts: wfL2TPTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPTable.setDescription('Configuration info for L2TP subsystem running on the slot')
wfL2TPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 2, 1), ).setIndexNames((0, "Wellfleet-L2TP-MIB", "wfL2TPSlot"))
if mibBuilder.loadTexts: wfL2TPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPEntry.setDescription('There is a per slot L2TP entry for every slot configured with L2TP')
wfL2TPDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfL2TPDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPDelete.setDescription('Creation and deletion flag for this record')
wfL2TPDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfL2TPDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPDisable.setDescription("`Enable/Disable L2TP'")
wfL2TPLnsAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfL2TPLnsAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPLnsAddr.setDescription("`IP address of the LNS (Note: this must be unique per slot)'")
wfL2TPIPstate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPIPstate.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPIPstate.setDescription("`State of WAN IP address for the LNS'")
wfL2TPSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPSlot.setDescription('Slot on which L2TP is configured')
wfL2TPReceiveWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 2, 1, 6), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfL2TPReceiveWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPReceiveWindowSize.setDescription('The recieve window size for tunnel creation in the slot')
wfL2TPRetransmitTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 2, 1, 7), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfL2TPRetransmitTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPRetransmitTimer.setDescription('The time period in sec to wait for an ACK before retransmission.')
wfL2TPMaxRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 2, 1, 8), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfL2TPMaxRetransmit.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPMaxRetransmit.setDescription('The max number of retransmission allowed.')
wfL2TPHelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 2, 1, 9), Integer32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfL2TPHelloTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPHelloTimer.setDescription('The time period in sec of tunnel inactivity before sending a Hello. The draft says 60sec.')
wfL2TPAckTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 2, 1, 10), Integer32().clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfL2TPAckTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPAckTimer.setDescription('The max amount of delay in mini-seconds before sending an Ack.')
wfL2TPAckLastNPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 2, 1, 11), Integer32().clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfL2TPAckLastNPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPAckLastNPkts.setDescription('')
wfL2TPLnsHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 2, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfL2TPLnsHostName.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPLnsHostName.setDescription('To host name used in the Host Name AVP of the LNS')
wfL2TPTunnelInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfL2TPTunnelInfo.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPTunnelInfo.setDescription('To enable or disable the creation of TunnelInfoEntry.')
wfL2TPSessionInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfL2TPSessionInfo.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPSessionInfo.setDescription('To enable or disable the creation of SessionInfoEntry.')
wfL2TPDebugFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfL2TPDebugFlag.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPDebugFlag.setDescription('The switch to control the level of debug info')
wfL2TPMaxSession = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 2, 1, 16), Integer32().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfL2TPMaxSession.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPMaxSession.setDescription('The max session/call allowed')
wfL2TPPortCfgMask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 2, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfL2TPPortCfgMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPPortCfgMask.setDescription('Used by SM to indicate the port being configured with L2TP')
wfL2TPIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 2, 1, 18), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfL2TPIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPIpAddr.setDescription('IP address of the L2TP_IP interface for the slot')
wfL2TPIpCctNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 2, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfL2TPIpCctNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPIpCctNum.setDescription('The circuit number of the L2TP_IP interface for the slot')
wfL2TPTunnelDataFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfL2TPTunnelDataFlowControl.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPTunnelDataFlowControl.setDescription('This object determines whether or not L2TP is to use flow control on the tunneled data packets. ')
wfL2TPRemoveDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfL2TPRemoveDomainName.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPRemoveDomainName.setDescription('This object determines whether or not to remove the domain name from the complete username (before RADIUS authentication).')
wfL2TPDomainNameDelimiter = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 2, 1, 22), DisplayString().clone('@')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfL2TPDomainNameDelimiter.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPDomainNameDelimiter.setDescription('This character identifies the delimiter used to separate the domain name from the username and is used in conjunction with the RemoveDomainName feature above.')
wfL2TPNsaOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("local", 2), ("radius", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfL2TPNsaOrigin.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPNsaOrigin.setDescription('This object determines where the Name Server Addresses will originate from, or if the feature is to be disabled. It can take on the following values and meaning: 1 indicates Name Server Addresses are to be disabled. 2 indicates Local origin from Site Manager. 3 indicates remote origin from a RADIUS Server.')
wfL2TPNsaPrimaryDNS = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 2, 1, 24), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfL2TPNsaPrimaryDNS.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPNsaPrimaryDNS.setDescription('Primary DNS Server Address')
wfL2TPNsaSecondaryDNS = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 2, 1, 25), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfL2TPNsaSecondaryDNS.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPNsaSecondaryDNS.setDescription('Secondary DNS Server Address')
wfL2TPNsaPrimaryNBNS = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 2, 1, 26), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfL2TPNsaPrimaryNBNS.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPNsaPrimaryNBNS.setDescription('Primary NBNS Server Address')
wfL2TPNsaSecondaryNBNS = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 2, 1, 27), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfL2TPNsaSecondaryNBNS.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPNsaSecondaryNBNS.setDescription('Secondary NBNS Server Address')
wfTunnelCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 3), )
if mibBuilder.loadTexts: wfTunnelCircuitTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfTunnelCircuitTable.setDescription('The circuit entry used for L2TP on the slot')
wfTunnelCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 3, 1), ).setIndexNames((0, "Wellfleet-L2TP-MIB", "wfTunnelCircuitNum"))
if mibBuilder.loadTexts: wfTunnelCircuitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfTunnelCircuitEntry.setDescription('An entry defining circuits specified for L2TP ')
wfTunnelCircuitDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTunnelCircuitDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfTunnelCircuitDelete.setDescription('Creation and deletion flag for this record')
wfTunnelCircuitNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTunnelCircuitNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfTunnelCircuitNum.setDescription('Tunnel Circuit Number')
wfTunnelCircuitSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTunnelCircuitSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfTunnelCircuitSlot.setDescription('The slot on which tunnel Circuit resides')
wfL2TPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 4), )
if mibBuilder.loadTexts: wfL2TPStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPStatsTable.setDescription('')
wfL2TPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 4, 1), ).setIndexNames((0, "Wellfleet-L2TP-MIB", "wfL2TPStatsSlot"))
if mibBuilder.loadTexts: wfL2TPStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPStatsEntry.setDescription('An entry storing L2TP statistics')
wfL2TPStatsCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfL2TPStatsCreate.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPStatsCreate.setDescription('Creation and deletion flag for this record')
wfL2TPStatsSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPStatsSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPStatsSlot.setDescription('Enable and disable flag for this record')
wfL2TPStatsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPStatsIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPStatsIpAddress.setDescription('L2TP LNS IP address')
wfL2TPStatsValidSccrq = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPStatsValidSccrq.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPStatsValidSccrq.setDescription('L2TP Stats')
wfL2TPStatsValidScccn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPStatsValidScccn.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPStatsValidScccn.setDescription('L2TP Stats')
wfL2TPStatsValidIcrq = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPStatsValidIcrq.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPStatsValidIcrq.setDescription('L2TP Stats')
wfL2TPStatsValidIccn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPStatsValidIccn.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPStatsValidIccn.setDescription('L2TP Stats')
wfL2TPStatsInvalidSccrq = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPStatsInvalidSccrq.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPStatsInvalidSccrq.setDescription('L2TP Stats')
wfL2TPStatsInvalidScccn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPStatsInvalidScccn.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPStatsInvalidScccn.setDescription('L2TP Stats')
wfL2TPStatsInvalidIcrq = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPStatsInvalidIcrq.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPStatsInvalidIcrq.setDescription('L2TP Stats')
wfL2TPStatsInvalidIccn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPStatsInvalidIccn.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPStatsInvalidIccn.setDescription('L2TP Stats')
wfL2TPStatsSuccessTunnelAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPStatsSuccessTunnelAuth.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPStatsSuccessTunnelAuth.setDescription('L2TP Stats')
wfL2TPStatsSuccessSessionAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPStatsSuccessSessionAuth.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPStatsSuccessSessionAuth.setDescription('L2TP Stats')
wfL2TPStatsFailTunnelAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPStatsFailTunnelAuth.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPStatsFailTunnelAuth.setDescription('L2TP Stats')
wfL2TPStatsFailSessionAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPStatsFailSessionAuth.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPStatsFailSessionAuth.setDescription('L2TP Stats')
wfL2TPStatsActiveTunnelCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPStatsActiveTunnelCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPStatsActiveTunnelCount.setDescription('L2TP Stats')
wfL2TPStatsActiveSessionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPStatsActiveSessionCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPStatsActiveSessionCount.setDescription('L2TP Stats')
wfL2TPStatsDropInCtrlPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPStatsDropInCtrlPktCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPStatsDropInCtrlPktCount.setDescription('Total number of invalid L2TP control pkts being dropped.')
wfL2TPStatsDropInPayloadPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPStatsDropInPayloadPktCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPStatsDropInPayloadPktCount.setDescription('Total number of invalid L2TP payload lpkts being dropped.')
wfL2TPStatsHelloPktTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 4, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPStatsHelloPktTxCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPStatsHelloPktTxCount.setDescription('Total number of HELLO pkts transmitted.')
wfL2TPStatsHelloPktRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 4, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPStatsHelloPktRxCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPStatsHelloPktRxCount.setDescription('Total number of HELLO pkts received.')
wfL2TPStatsCdnPktTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 4, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPStatsCdnPktTxCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPStatsCdnPktTxCount.setDescription('Total number of CDN pkts transmitted.')
wfL2TPStatsCdnPktRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 4, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPStatsCdnPktRxCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPStatsCdnPktRxCount.setDescription('Total number of CDN pkts received.')
wfL2TPStatsStopCCNPktTxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 4, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPStatsStopCCNPktTxCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPStatsStopCCNPktTxCount.setDescription('Total number of StopCCN pkts transmitted.')
wfL2TPStatsStopCCNPktRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 4, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPStatsStopCCNPktRxCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPStatsStopCCNPktRxCount.setDescription('Total number of StopCCN pkts received.')
wfL2TPTunnelInfoTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 5), )
if mibBuilder.loadTexts: wfL2TPTunnelInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPTunnelInfoTable.setDescription('Infomation related to the active tunnel')
wfL2TPTunnelInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 5, 1), ).setIndexNames((0, "Wellfleet-L2TP-MIB", "wfL2TPTunnelInfoSlot"), (0, "Wellfleet-L2TP-MIB", "wfL2TPTunnelInfoLnsTunnelId"))
if mibBuilder.loadTexts: wfL2TPTunnelInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPTunnelInfoEntry.setDescription('Info entry for each active L2TP tunnel')
wfL2TPTunnelInfoSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPTunnelInfoSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPTunnelInfoSlot.setDescription('Slot nubmer')
wfL2TPTunnelInfoLnsTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPTunnelInfoLnsTunnelId.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPTunnelInfoLnsTunnelId.setDescription('The tunnel ID assigned by LNS')
wfL2TPTunnelInfoLacTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPTunnelInfoLacTunnelId.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPTunnelInfoLacTunnelId.setDescription('The tunnel ID assigned by LAC')
wfL2TPTunnelInfoLnsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 5, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPTunnelInfoLnsAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPTunnelInfoLnsAddress.setDescription('IP address of the tunnel LNS endpoint')
wfL2TPTunnelInfoLacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 5, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPTunnelInfoLacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPTunnelInfoLacAddress.setDescription('IP address of the tunnel LAC endpoint')
wfL2TPTunnelInfoFramingCap = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPTunnelInfoFramingCap.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPTunnelInfoFramingCap.setDescription('1 = Synchronous, 2 = Asynchronous, 3 = Both')
wfL2TPTunnelInfoBearerCap = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPTunnelInfoBearerCap.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPTunnelInfoBearerCap.setDescription('1 = Digital, 2 = Analog, 3 = Both')
wfL2TPTunnelInfoLacVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 5, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPTunnelInfoLacVendorName.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPTunnelInfoLacVendorName.setDescription('The Vendor Name used in the tunnel SCCRQ message')
wfL2TPTunnelInfoLacHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 5, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPTunnelInfoLacHostName.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPTunnelInfoLacHostName.setDescription('The Host name used in the tunnel SCCRQ message')
wfL2TPTunnelInfoRecvWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPTunnelInfoRecvWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPTunnelInfoRecvWindowSize.setDescription('The Receive Window Size used in the tunnel SCCRQ message')
wfL2TPTunnelInfoActiveSessionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPTunnelInfoActiveSessionCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPTunnelInfoActiveSessionCount.setDescription('The total number of active session in the tunnel')
wfL2TPTunnelInfoFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPTunnelInfoFirmwareRevision.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPTunnelInfoFirmwareRevision.setDescription('The Firmware Revision used in the tunnel SCCRQ message')
wfL2TPSessionInfoTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 6), )
if mibBuilder.loadTexts: wfL2TPSessionInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPSessionInfoTable.setDescription('Infomation related to the active session')
wfL2TPSessionInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 6, 1), ).setIndexNames((0, "Wellfleet-L2TP-MIB", "wfL2TPSessionInfoSlot"), (0, "Wellfleet-L2TP-MIB", "wfL2TPSessionInfoLnsTunnelId"), (0, "Wellfleet-L2TP-MIB", "wfL2TPSessionInfoLnsCallId"))
if mibBuilder.loadTexts: wfL2TPSessionInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPSessionInfoEntry.setDescription('Info entry for each active L2TP session')
wfL2TPSessionInfoSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPSessionInfoSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPSessionInfoSlot.setDescription('The slot nubmer where the session resides')
wfL2TPSessionInfoLnsTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPSessionInfoLnsTunnelId.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPSessionInfoLnsTunnelId.setDescription('Tunnel ID of the tunnel that the session is on.')
wfL2TPSessionInfoLacTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPSessionInfoLacTunnelId.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPSessionInfoLacTunnelId.setDescription('Tunnel ID of the tunnel that the session is on.')
wfL2TPSessionInfoLnsCallId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPSessionInfoLnsCallId.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPSessionInfoLnsCallId.setDescription('The call ID assigned by the LNS')
wfL2TPSessionInfoLacCallId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPSessionInfoLacCallId.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPSessionInfoLacCallId.setDescription('The call ID assigned by the LAC in the ICRQ message')
wfL2TPSessionInfoCallSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 6, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPSessionInfoCallSerialNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPSessionInfoCallSerialNum.setDescription('The Call Serial Number used in the ICRQ message')
wfL2TPSessionInfoCallBearerType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPSessionInfoCallBearerType.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPSessionInfoCallBearerType.setDescription('The Bearer Type used in the ICRQ message')
wfL2TPSessionInfoDialingNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 6, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPSessionInfoDialingNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPSessionInfoDialingNum.setDescription('The Dialing Number used in the ICRQ message')
wfL2TPSessionInfoDialedNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 6, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPSessionInfoDialedNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPSessionInfoDialedNum.setDescription('The Dialed Number used in the ICRQ message')
wfL2TPSessionInfoSubAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 6, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPSessionInfoSubAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPSessionInfoSubAddress.setDescription('The subaddress used in the ICRQ message')
wfL2TPSessionInfoConnectSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPSessionInfoConnectSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPSessionInfoConnectSpeed.setDescription('The Connect Speed used in the ICCN message')
wfL2TPSessionInfoFramingType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPSessionInfoFramingType.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPSessionInfoFramingType.setDescription('The Framing Type used in the ICCN message')
wfL2TPSessionInfoLocalRecvPktWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPSessionInfoLocalRecvPktWindow.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPSessionInfoLocalRecvPktWindow.setDescription('This object contains the local Send Window Size.')
wfL2TPSessionInfoRemoteRecvPktWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPSessionInfoRemoteRecvPktWindow.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPSessionInfoRemoteRecvPktWindow.setDescription('This object contains the remote receive window size.')
wfL2TPSessionInfoPhysicalChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPSessionInfoPhysicalChannelId.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPSessionInfoPhysicalChannelId.setDescription('This object contains the physical channel identifier for the session.')
wfL2TPSessionInfoNextSendSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPSessionInfoNextSendSeq.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPSessionInfoNextSendSeq.setDescription('This object contains the next send sequence number for for this session.')
wfL2TPSessionInfoNextSendSeqAck = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPSessionInfoNextSendSeqAck.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPSessionInfoNextSendSeqAck.setDescription('This object contains the next send acknowledgement for this session.')
wfL2TPSessionInfoNextRecvSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 6, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPSessionInfoNextRecvSeq.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPSessionInfoNextRecvSeq.setDescription('This object contains the next receive sequence number for this session.')
wfL2TPSessionInfoNextRecvSeqAck = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 6, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPSessionInfoNextRecvSeqAck.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPSessionInfoNextRecvSeqAck.setDescription('This object contains the next receive acknowledgement for this session.')
wfL2TPSessionInfoAssignedIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 6, 1, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPSessionInfoAssignedIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPSessionInfoAssignedIpAddress.setDescription('Address assigned to this session.')
wfL2TPSessionInfoUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 6, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPSessionInfoUsername.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPSessionInfoUsername.setDescription('User tunnelled within this session.')
wfL2TPSessionInfoTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 6, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPSessionInfoTxPackets.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPSessionInfoTxPackets.setDescription('Number of outbound data packets for this session.')
wfL2TPSessionInfoRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 6, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPSessionInfoRxPackets.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPSessionInfoRxPackets.setDescription('Number of inbound data packets for this session.')
wfL2TPSessionInfoConnectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 6, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfL2TPSessionInfoConnectTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfL2TPSessionInfoConnectTime.setDescription('Time the session was started')
wfTunnelLineTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 7), )
if mibBuilder.loadTexts: wfTunnelLineTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfTunnelLineTable.setDescription('The line entry used for L2TP on the slot')
wfTunnelLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 7, 1), ).setIndexNames((0, "Wellfleet-L2TP-MIB", "wfTunnelLineNum"))
if mibBuilder.loadTexts: wfTunnelLineEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfTunnelLineEntry.setDescription('An entry defining lines specified for L2TP ')
wfTunnelLineDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTunnelLineDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfTunnelLineDelete.setDescription('Creation and deletion flag for this record')
wfTunnelLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTunnelLineNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfTunnelLineNum.setDescription('Tunnel Line Number')
wfTunnelLineSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 23, 7, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfTunnelLineSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfTunnelLineSlot.setDescription('The slot on which tunnel Line resides')
mibBuilder.exportSymbols("Wellfleet-L2TP-MIB", wfL2TPSessionInfoRemoteRecvPktWindow=wfL2TPSessionInfoRemoteRecvPktWindow, wfL2TPSlot=wfL2TPSlot, wfL2TPHelloTimer=wfL2TPHelloTimer, wfL2TPSessionInfo=wfL2TPSessionInfo, wfL2TPMaxRetransmit=wfL2TPMaxRetransmit, wfL2TPDisable=wfL2TPDisable, wfL2TPSessionInfoFramingType=wfL2TPSessionInfoFramingType, wfTunnelAuthEntry=wfTunnelAuthEntry, wfTunnelCircuitNum=wfTunnelCircuitNum, wfL2TPSessionInfoCallSerialNum=wfL2TPSessionInfoCallSerialNum, wfL2TPSessionInfoNextRecvSeq=wfL2TPSessionInfoNextRecvSeq, wfL2TPSessionInfoLnsCallId=wfL2TPSessionInfoLnsCallId, wfL2TPIpCctNum=wfL2TPIpCctNum, wfTunnelLineEntry=wfTunnelLineEntry, wfL2TPSessionInfoNextSendSeq=wfL2TPSessionInfoNextSendSeq, wfL2TPSessionInfoLnsTunnelId=wfL2TPSessionInfoLnsTunnelId, wfL2TPPortCfgMask=wfL2TPPortCfgMask, wfL2TPTunnelInfoFramingCap=wfL2TPTunnelInfoFramingCap, wfL2TPStatsFailSessionAuth=wfL2TPStatsFailSessionAuth, wfL2TPSessionInfoConnectSpeed=wfL2TPSessionInfoConnectSpeed, wfTunnelAuthSlot=wfTunnelAuthSlot, wfL2TPRetransmitTimer=wfL2TPRetransmitTimer, wfL2TPSessionInfoNextRecvSeqAck=wfL2TPSessionInfoNextRecvSeqAck, wfL2TPStatsStopCCNPktRxCount=wfL2TPStatsStopCCNPktRxCount, wfL2TPTunnelInfoLnsAddress=wfL2TPTunnelInfoLnsAddress, wfL2TPSessionInfoConnectTime=wfL2TPSessionInfoConnectTime, wfL2TPAckLastNPkts=wfL2TPAckLastNPkts, wfL2TPNsaPrimaryNBNS=wfL2TPNsaPrimaryNBNS, wfL2TPTunnelInfoSlot=wfL2TPTunnelInfoSlot, wfL2TPSessionInfoTxPackets=wfL2TPSessionInfoTxPackets, wfL2TPStatsActiveTunnelCount=wfL2TPStatsActiveTunnelCount, wfL2TPStatsEntry=wfL2TPStatsEntry, wfL2TPStatsFailTunnelAuth=wfL2TPStatsFailTunnelAuth, wfL2TPTunnelInfoFirmwareRevision=wfL2TPTunnelInfoFirmwareRevision, wfL2TPLnsAddr=wfL2TPLnsAddr, wfL2TPTunnelDataFlowControl=wfL2TPTunnelDataFlowControl, wfL2TPNsaSecondaryNBNS=wfL2TPNsaSecondaryNBNS, wfL2TPStatsSlot=wfL2TPStatsSlot, wfL2TPNsaPrimaryDNS=wfL2TPNsaPrimaryDNS, wfL2TPStatsCdnPktRxCount=wfL2TPStatsCdnPktRxCount, wfL2TPSessionInfoRxPackets=wfL2TPSessionInfoRxPackets, wfL2TPTunnelInfoBearerCap=wfL2TPTunnelInfoBearerCap, wfL2TPEntry=wfL2TPEntry, wfL2TPTunnelInfo=wfL2TPTunnelInfo, wfL2TPSessionInfoNextSendSeqAck=wfL2TPSessionInfoNextSendSeqAck, wfL2TPStatsInvalidScccn=wfL2TPStatsInvalidScccn, wfL2TPTunnelInfoLacTunnelId=wfL2TPTunnelInfoLacTunnelId, wfL2TPNsaOrigin=wfL2TPNsaOrigin, wfL2TPStatsActiveSessionCount=wfL2TPStatsActiveSessionCount, wfL2TPRemoveDomainName=wfL2TPRemoveDomainName, wfL2TPStatsDropInCtrlPktCount=wfL2TPStatsDropInCtrlPktCount, wfL2TPSessionInfoLocalRecvPktWindow=wfL2TPSessionInfoLocalRecvPktWindow, wfTunnelCircuitEntry=wfTunnelCircuitEntry, wfL2TPStatsCreate=wfL2TPStatsCreate, wfL2TPIpAddr=wfL2TPIpAddr, wfL2TPStatsValidIccn=wfL2TPStatsValidIccn, wfL2TPStatsSuccessSessionAuth=wfL2TPStatsSuccessSessionAuth, wfTunnelLineNum=wfTunnelLineNum, wfL2TPStatsInvalidIcrq=wfL2TPStatsInvalidIcrq, wfL2TPLnsHostName=wfL2TPLnsHostName, wfL2TPStatsSuccessTunnelAuth=wfL2TPStatsSuccessTunnelAuth, wfL2TPIPstate=wfL2TPIPstate, wfL2TPSessionInfoEntry=wfL2TPSessionInfoEntry, wfL2TPSessionInfoDialingNum=wfL2TPSessionInfoDialingNum, wfL2TPStatsInvalidSccrq=wfL2TPStatsInvalidSccrq, wfL2TPSessionInfoAssignedIpAddress=wfL2TPSessionInfoAssignedIpAddress, wfL2TPStatsValidSccrq=wfL2TPStatsValidSccrq, wfL2TPStatsIpAddress=wfL2TPStatsIpAddress, wfTunnelAuthDisable=wfTunnelAuthDisable, wfL2TPSessionInfoLacCallId=wfL2TPSessionInfoLacCallId, wfL2TPSessionInfoPhysicalChannelId=wfL2TPSessionInfoPhysicalChannelId, wfL2TPReceiveWindowSize=wfL2TPReceiveWindowSize, wfTunnelAuthSecret=wfTunnelAuthSecret, wfL2TPMaxSession=wfL2TPMaxSession, wfL2TPStatsHelloPktRxCount=wfL2TPStatsHelloPktRxCount, wfL2TPTunnelInfoLacAddress=wfL2TPTunnelInfoLacAddress, wfTunnelLineTable=wfTunnelLineTable, wfL2TPSessionInfoSubAddress=wfL2TPSessionInfoSubAddress, wfL2TPTunnelInfoEntry=wfL2TPTunnelInfoEntry, wfTunnelCircuitTable=wfTunnelCircuitTable, wfL2TPTunnelInfoLnsTunnelId=wfL2TPTunnelInfoLnsTunnelId, wfL2TPSessionInfoLacTunnelId=wfL2TPSessionInfoLacTunnelId, wfL2TPStatsTable=wfL2TPStatsTable, wfL2TPDebugFlag=wfL2TPDebugFlag, wfTunnelCircuitSlot=wfTunnelCircuitSlot, wfL2TPDelete=wfL2TPDelete, wfL2TPStatsDropInPayloadPktCount=wfL2TPStatsDropInPayloadPktCount, wfL2TPStatsStopCCNPktTxCount=wfL2TPStatsStopCCNPktTxCount, wfTunnelLineDelete=wfTunnelLineDelete, wfL2TPDomainNameDelimiter=wfL2TPDomainNameDelimiter, wfTunnelAuthDelete=wfTunnelAuthDelete, wfL2TPStatsInvalidIccn=wfL2TPStatsInvalidIccn, wfL2TPStatsValidIcrq=wfL2TPStatsValidIcrq, wfL2TPSessionInfoUsername=wfL2TPSessionInfoUsername, wfL2TPSessionInfoDialedNum=wfL2TPSessionInfoDialedNum, wfL2TPTunnelInfoRecvWindowSize=wfL2TPTunnelInfoRecvWindowSize, wfTunnelAuthTable=wfTunnelAuthTable, wfTunnelCircuitDelete=wfTunnelCircuitDelete, wfL2TPSessionInfoTable=wfL2TPSessionInfoTable, wfL2TPTunnelInfoTable=wfL2TPTunnelInfoTable, wfTunnelAuthInstance=wfTunnelAuthInstance, wfL2TPNsaSecondaryDNS=wfL2TPNsaSecondaryDNS, wfL2TPTunnelInfoLacVendorName=wfL2TPTunnelInfoLacVendorName, wfL2TPStatsCdnPktTxCount=wfL2TPStatsCdnPktTxCount, wfL2TPAckTimer=wfL2TPAckTimer, wfL2TPSessionInfoSlot=wfL2TPSessionInfoSlot, wfL2TPSessionInfoCallBearerType=wfL2TPSessionInfoCallBearerType, wfL2TPTunnelInfoActiveSessionCount=wfL2TPTunnelInfoActiveSessionCount, wfL2TPTable=wfL2TPTable, wfTunnelLineSlot=wfTunnelLineSlot, wfL2TPStatsValidScccn=wfL2TPStatsValidScccn, wfL2TPStatsHelloPktTxCount=wfL2TPStatsHelloPktTxCount, wfL2TPTunnelInfoLacHostName=wfL2TPTunnelInfoLacHostName)
