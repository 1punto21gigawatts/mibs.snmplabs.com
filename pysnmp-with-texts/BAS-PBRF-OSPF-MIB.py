#
# PySNMP MIB module BAS-PBRF-OSPF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAS-PBRF-OSPF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:34:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
BasSlotId, BasLogicalPortId, basPbrfOSPF, BasChassisId, BasInterfaceId = mibBuilder.importSymbols("BAS-MIB", "BasSlotId", "BasLogicalPortId", "basPbrfOSPF", "BasChassisId", "BasInterfaceId")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, MibIdentifier, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, NotificationType, Unsigned32, IpAddress, ModuleIdentity, TimeTicks, Counter64, Bits, iso, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibIdentifier", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "NotificationType", "Unsigned32", "IpAddress", "ModuleIdentity", "TimeTicks", "Counter64", "Bits", "iso", "ObjectIdentity")
RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention")
basPbrfOSPFMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1))
if mibBuilder.loadTexts: basPbrfOSPFMIB.setLastUpdated('9812220800Z')
if mibBuilder.loadTexts: basPbrfOSPFMIB.setOrganization('Broadband Access Systems, Inc.')
if mibBuilder.loadTexts: basPbrfOSPFMIB.setContactInfo(' Tech Support Broadband Access Systems, Inc. 201 Forest Street Marlborough, MA 01752 USA 508-485-8200 support@basystems.com')
if mibBuilder.loadTexts: basPbrfOSPFMIB.setDescription('The MIB module defines the configuration MIB objects for Broadband Access Systems, Inc. OSPF Export policy based routing filters.')
basPbrfOSPFImport = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 1))
basPbrfOSPFExport = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 2))
basPbrfOSPFImportTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 1, 1), )
if mibBuilder.loadTexts: basPbrfOSPFImportTable.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFImportTable.setDescription('A table of OSPF import PBRF test filter entries.')
basPbrfOSPFImportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 1, 1, 1), ).setIndexNames((0, "BAS-PBRF-OSPF-MIB", "basPbrfOSPFImportChassis"), (0, "BAS-PBRF-OSPF-MIB", "basPbrfOSPFImportSlot"), (0, "BAS-PBRF-OSPF-MIB", "basPbrfOSPFImportIf"), (0, "BAS-PBRF-OSPF-MIB", "basPbrfOSPFImportLPort"), (0, "BAS-PBRF-OSPF-MIB", "basPbrfOSPFImportIndex"))
if mibBuilder.loadTexts: basPbrfOSPFImportEntry.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFImportEntry.setDescription('An entry containing management information applicable to an OSPF import PBRF filter used for testing the filter.')
basPbrfOSPFImportChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 1, 1, 1, 1), BasChassisId())
if mibBuilder.loadTexts: basPbrfOSPFImportChassis.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFImportChassis.setDescription('The chassis identifier of this chassis.')
basPbrfOSPFImportSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 1, 1, 1, 2), BasSlotId())
if mibBuilder.loadTexts: basPbrfOSPFImportSlot.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFImportSlot.setDescription('The BAS slot ID of this card.')
basPbrfOSPFImportIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 1, 1, 1, 3), BasInterfaceId())
if mibBuilder.loadTexts: basPbrfOSPFImportIf.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFImportIf.setDescription('The BAS interface ID of this card.')
basPbrfOSPFImportLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 1, 1, 1, 4), BasLogicalPortId())
if mibBuilder.loadTexts: basPbrfOSPFImportLPort.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFImportLPort.setDescription('The BAS logical port ID of this card.')
basPbrfOSPFImportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 1, 1, 1, 5), Integer32())
if mibBuilder.loadTexts: basPbrfOSPFImportIndex.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFImportIndex.setDescription('The index of the filter.')
basPbrfOSPFImportTemplateCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basPbrfOSPFImportTemplateCount.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFImportTemplateCount.setDescription('The number of templates assigned to this filter.')
basPbrfOSPFImportRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 1, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basPbrfOSPFImportRowStatus.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFImportRowStatus.setDescription('The row status of the filter.')
basPbrfOSPFImportDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 1, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basPbrfOSPFImportDescr.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFImportDescr.setDescription('The descr of the OSPF Import.')
basPbrfOSPFImportFilterTempTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 1, 2), )
if mibBuilder.loadTexts: basPbrfOSPFImportFilterTempTable.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFImportFilterTempTable.setDescription('A table of OSPF import PBRF filters.')
basPbrfOSPFImportFilterTempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 1, 2, 1), ).setIndexNames((0, "BAS-PBRF-OSPF-MIB", "basPbrfOSPFImportFilterTempChassis"), (0, "BAS-PBRF-OSPF-MIB", "basPbrfOSPFImportFilterTempSlot"), (0, "BAS-PBRF-OSPF-MIB", "basPbrfOSPFImportFilterTempIf"), (0, "BAS-PBRF-OSPF-MIB", "basPbrfOSPFImportFilterTempLPort"), (0, "BAS-PBRF-OSPF-MIB", "basPbrfOSPFImportFilterTempIndex"), (0, "BAS-PBRF-OSPF-MIB", "basPbrfOSPFImportFilterTempTemplate"))
if mibBuilder.loadTexts: basPbrfOSPFImportFilterTempEntry.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFImportFilterTempEntry.setDescription('An entry containing management information applicable to an OSPF import PBRF filter.')
basPbrfOSPFImportFilterTempChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 1, 2, 1, 1), BasChassisId())
if mibBuilder.loadTexts: basPbrfOSPFImportFilterTempChassis.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFImportFilterTempChassis.setDescription('The chassis identifier of this chassis.')
basPbrfOSPFImportFilterTempSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 1, 2, 1, 2), BasSlotId())
if mibBuilder.loadTexts: basPbrfOSPFImportFilterTempSlot.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFImportFilterTempSlot.setDescription('The BAS slot ID of this card.')
basPbrfOSPFImportFilterTempIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 1, 2, 1, 3), BasInterfaceId())
if mibBuilder.loadTexts: basPbrfOSPFImportFilterTempIf.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFImportFilterTempIf.setDescription('The BAS interface ID of this card.')
basPbrfOSPFImportFilterTempLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 1, 2, 1, 4), BasLogicalPortId())
if mibBuilder.loadTexts: basPbrfOSPFImportFilterTempLPort.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFImportFilterTempLPort.setDescription('The BAS logical port ID of this card.')
basPbrfOSPFImportFilterTempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 1, 2, 1, 5), Integer32())
if mibBuilder.loadTexts: basPbrfOSPFImportFilterTempIndex.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFImportFilterTempIndex.setDescription('The index of the filter.')
basPbrfOSPFImportFilterTempTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 1, 2, 1, 6), Integer32())
if mibBuilder.loadTexts: basPbrfOSPFImportFilterTempTemplate.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFImportFilterTempTemplate.setDescription('The index for the specific template.')
basPbrfOSPFImportFilterTempOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 1, 2, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basPbrfOSPFImportFilterTempOrder.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFImportFilterTempOrder.setDescription('The order in which the template is applied.')
basPbrfOSPFImportFilterTempRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 1, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basPbrfOSPFImportFilterTempRowStatus.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFImportFilterTempRowStatus.setDescription('The row status of the filter.')
basPbrfOSPFImportTemplateTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 1, 3), )
if mibBuilder.loadTexts: basPbrfOSPFImportTemplateTable.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFImportTemplateTable.setDescription('A list of OSPF Import template entries.')
basPbrfOSPFImportTemplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 1, 3, 1), ).setIndexNames((0, "BAS-PBRF-OSPF-MIB", "basPbrfOSPFImportTemplateChassis"), (0, "BAS-PBRF-OSPF-MIB", "basPbrfOSPFImportTemplateSlot"), (0, "BAS-PBRF-OSPF-MIB", "basPbrfOSPFImportTemplateIf"), (0, "BAS-PBRF-OSPF-MIB", "basPbrfOSPFImportTemplateLPort"), (0, "BAS-PBRF-OSPF-MIB", "basPbrfOSPFImportTemplateIndex"))
if mibBuilder.loadTexts: basPbrfOSPFImportTemplateEntry.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFImportTemplateEntry.setDescription('An entry containing management information applicable to an OSPF Import PBRF template.')
basPbrfOSPFImportTemplateChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 1, 3, 1, 1), BasChassisId())
if mibBuilder.loadTexts: basPbrfOSPFImportTemplateChassis.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFImportTemplateChassis.setDescription('The BAS chassis identifier of this chassis.')
basPbrfOSPFImportTemplateSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 1, 3, 1, 2), BasSlotId())
if mibBuilder.loadTexts: basPbrfOSPFImportTemplateSlot.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFImportTemplateSlot.setDescription('The BAS slot ID of this card.')
basPbrfOSPFImportTemplateIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 1, 3, 1, 3), BasInterfaceId())
if mibBuilder.loadTexts: basPbrfOSPFImportTemplateIf.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFImportTemplateIf.setDescription('The BAS interface ID of this card.')
basPbrfOSPFImportTemplateLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 1, 3, 1, 4), BasLogicalPortId())
if mibBuilder.loadTexts: basPbrfOSPFImportTemplateLPort.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFImportTemplateLPort.setDescription('The BAS logical port ID of this card.')
basPbrfOSPFImportTemplateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 1, 3, 1, 5), Integer32())
if mibBuilder.loadTexts: basPbrfOSPFImportTemplateIndex.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFImportTemplateIndex.setDescription('The Route Address key of of the template.')
basPbrfOSPFImportTemplateRouteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 1, 3, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basPbrfOSPFImportTemplateRouteAddr.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFImportTemplateRouteAddr.setDescription('The Route Address key of of the template.')
basPbrfOSPFImportTemplateRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 1, 3, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basPbrfOSPFImportTemplateRouteMask.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFImportTemplateRouteMask.setDescription('The Route Mask key of of the template.')
basPbrfOSPFImportTemplatePeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 1, 3, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basPbrfOSPFImportTemplatePeerAddr.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFImportTemplatePeerAddr.setDescription('The PeerAddr key of the template.')
basPbrfOSPFImportTemplatePeerMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 1, 3, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basPbrfOSPFImportTemplatePeerMask.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFImportTemplatePeerMask.setDescription('The PeerMask key of the template.')
basPbrfOSPFImportTemplateTag = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 1, 3, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basPbrfOSPFImportTemplateTag.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFImportTemplateTag.setDescription('The tag key of the template.')
basPbrfOSPFImportTemplateKeyBits = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 1, 3, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basPbrfOSPFImportTemplateKeyBits.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFImportTemplateKeyBits.setDescription('The key bits key mask of the template.')
basPbrfOSPFImportTemplatePref = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 1, 3, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basPbrfOSPFImportTemplatePref.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFImportTemplatePref.setDescription('The preference of the template action.')
basPbrfOSPFImportTemplateFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 1, 3, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basPbrfOSPFImportTemplateFlags.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFImportTemplateFlags.setDescription('The flags of the template action.')
basPbrfOSPFImportTemplateRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 1, 3, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basPbrfOSPFImportTemplateRowStatus.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFImportTemplateRowStatus.setDescription('The row status of the template.')
basPbrfOSPFImportTemplateDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 1, 3, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basPbrfOSPFImportTemplateDescr.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFImportTemplateDescr.setDescription('The descr of the OSPF Import template.')
basPbrfOSPFExportTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 2, 1), )
if mibBuilder.loadTexts: basPbrfOSPFExportTable.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFExportTable.setDescription('A table of OSPF import PBRF test filter entries.')
basPbrfOSPFExportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 2, 1, 1), ).setIndexNames((0, "BAS-PBRF-OSPF-MIB", "basPbrfOSPFExportChassis"), (0, "BAS-PBRF-OSPF-MIB", "basPbrfOSPFExportSlot"), (0, "BAS-PBRF-OSPF-MIB", "basPbrfOSPFExportIf"), (0, "BAS-PBRF-OSPF-MIB", "basPbrfOSPFExportLPort"), (0, "BAS-PBRF-OSPF-MIB", "basPbrfOSPFExportIndex"))
if mibBuilder.loadTexts: basPbrfOSPFExportEntry.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFExportEntry.setDescription('An entry containing management information applicable to an OSPF import PBRF filter used for testing the filter.')
basPbrfOSPFExportChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 2, 1, 1, 1), BasChassisId())
if mibBuilder.loadTexts: basPbrfOSPFExportChassis.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFExportChassis.setDescription('The chassis identifier of this chassis.')
basPbrfOSPFExportSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 2, 1, 1, 2), BasSlotId())
if mibBuilder.loadTexts: basPbrfOSPFExportSlot.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFExportSlot.setDescription('The BAS slot ID of this card.')
basPbrfOSPFExportIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 2, 1, 1, 3), BasInterfaceId())
if mibBuilder.loadTexts: basPbrfOSPFExportIf.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFExportIf.setDescription('The BAS interface ID of this card.')
basPbrfOSPFExportLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 2, 1, 1, 4), BasLogicalPortId())
if mibBuilder.loadTexts: basPbrfOSPFExportLPort.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFExportLPort.setDescription('The BAS logical port ID of this card.')
basPbrfOSPFExportIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 2, 1, 1, 5), Integer32())
if mibBuilder.loadTexts: basPbrfOSPFExportIndex.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFExportIndex.setDescription('The index of the filter.')
basPbrfOSPFExportTemplateCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basPbrfOSPFExportTemplateCount.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFExportTemplateCount.setDescription('The number of templates assigned to this filter.')
basPbrfOSPFExportRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 2, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basPbrfOSPFExportRowStatus.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFExportRowStatus.setDescription('The row status of the filter.')
basPbrfOSPFExportDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 2, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basPbrfOSPFExportDescr.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFExportDescr.setDescription('The descr of the OSPF Export.')
basPbrfOSPFExportFilterTempTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 2, 2), )
if mibBuilder.loadTexts: basPbrfOSPFExportFilterTempTable.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFExportFilterTempTable.setDescription('A table of OSPf Export PBRF filter/template bindings.')
basPbrfOSPFExportFilterTempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 2, 2, 1), ).setIndexNames((0, "BAS-PBRF-OSPF-MIB", "basPbrfOSPFExportFilterTempChassis"), (0, "BAS-PBRF-OSPF-MIB", "basPbrfOSPFExportFilterTempSlot"), (0, "BAS-PBRF-OSPF-MIB", "basPbrfOSPFExportFilterTempIf"), (0, "BAS-PBRF-OSPF-MIB", "basPbrfOSPFExportFilterTempLPort"), (0, "BAS-PBRF-OSPF-MIB", "basPbrfOSPFExportFilterTempIndex"), (0, "BAS-PBRF-OSPF-MIB", "basPbrfOSPFExportFilterTempTemplate"))
if mibBuilder.loadTexts: basPbrfOSPFExportFilterTempEntry.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFExportFilterTempEntry.setDescription('An entry containing management information applicable to an OSPF import PBRF filter.')
basPbrfOSPFExportFilterTempChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 2, 2, 1, 1), BasChassisId())
if mibBuilder.loadTexts: basPbrfOSPFExportFilterTempChassis.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFExportFilterTempChassis.setDescription('The BAS chassis identifier of this chassis.')
basPbrfOSPFExportFilterTempSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 2, 2, 1, 2), BasSlotId())
if mibBuilder.loadTexts: basPbrfOSPFExportFilterTempSlot.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFExportFilterTempSlot.setDescription('The BAS slot ID of this card.')
basPbrfOSPFExportFilterTempIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 2, 2, 1, 3), BasInterfaceId())
if mibBuilder.loadTexts: basPbrfOSPFExportFilterTempIf.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFExportFilterTempIf.setDescription('The BAS interface ID of this card.')
basPbrfOSPFExportFilterTempLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 2, 2, 1, 4), BasLogicalPortId())
if mibBuilder.loadTexts: basPbrfOSPFExportFilterTempLPort.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFExportFilterTempLPort.setDescription('The BAS logical port ID of this card.')
basPbrfOSPFExportFilterTempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 2, 2, 1, 5), Integer32())
if mibBuilder.loadTexts: basPbrfOSPFExportFilterTempIndex.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFExportFilterTempIndex.setDescription('The index of the filter.')
basPbrfOSPFExportFilterTempTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 2, 2, 1, 6), Integer32())
if mibBuilder.loadTexts: basPbrfOSPFExportFilterTempTemplate.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFExportFilterTempTemplate.setDescription('The index for the specific template.')
basPbrfOSPFExportFilterTempOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 2, 2, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basPbrfOSPFExportFilterTempOrder.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFExportFilterTempOrder.setDescription('The order in which the template is applied.')
basPbrfOSPFExportFilterTempRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 2, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basPbrfOSPFExportFilterTempRowStatus.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFExportFilterTempRowStatus.setDescription('The row status of the filter.')
basPbrfOSPFExportTemplateTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 2, 3), )
if mibBuilder.loadTexts: basPbrfOSPFExportTemplateTable.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFExportTemplateTable.setDescription('A list of OSPF Export template entries.')
basPbrfOSPFExportTemplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 2, 3, 1), ).setIndexNames((0, "BAS-PBRF-OSPF-MIB", "basPbrfOSPFExportTemplateChassis"), (0, "BAS-PBRF-OSPF-MIB", "basPbrfOSPFExportTemplateSlot"), (0, "BAS-PBRF-OSPF-MIB", "basPbrfOSPFExportTemplateIf"), (0, "BAS-PBRF-OSPF-MIB", "basPbrfOSPFExportTemplateLPort"), (0, "BAS-PBRF-OSPF-MIB", "basPbrfOSPFExportTemplateIndex"))
if mibBuilder.loadTexts: basPbrfOSPFExportTemplateEntry.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFExportTemplateEntry.setDescription('An entry containing management information applicable to an OSPF Export PBRF template.')
basPbrfOSPFExportTemplateChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 2, 3, 1, 1), BasChassisId())
if mibBuilder.loadTexts: basPbrfOSPFExportTemplateChassis.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFExportTemplateChassis.setDescription('The BAS chassis identifier of this chassis.')
basPbrfOSPFExportTemplateSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 2, 3, 1, 2), BasSlotId())
if mibBuilder.loadTexts: basPbrfOSPFExportTemplateSlot.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFExportTemplateSlot.setDescription('The BAS slot ID of this card.')
basPbrfOSPFExportTemplateIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 2, 3, 1, 3), BasInterfaceId())
if mibBuilder.loadTexts: basPbrfOSPFExportTemplateIf.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFExportTemplateIf.setDescription('The BAS interface ID of this card.')
basPbrfOSPFExportTemplateLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 2, 3, 1, 4), BasLogicalPortId())
if mibBuilder.loadTexts: basPbrfOSPFExportTemplateLPort.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFExportTemplateLPort.setDescription('The BAS logical port ID of this card.')
basPbrfOSPFExportTemplateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 2, 3, 1, 5), Integer32())
if mibBuilder.loadTexts: basPbrfOSPFExportTemplateIndex.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFExportTemplateIndex.setDescription('The index of the template')
basPbrfOSPFExportTemplateRouteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 2, 3, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basPbrfOSPFExportTemplateRouteAddr.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFExportTemplateRouteAddr.setDescription('The Route Address key of of the template.')
basPbrfOSPFExportTemplateRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 2, 3, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basPbrfOSPFExportTemplateRouteMask.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFExportTemplateRouteMask.setDescription('The Route Mask key of of the template.')
basPbrfOSPFExportTemplateProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 2, 3, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basPbrfOSPFExportTemplateProtocol.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFExportTemplateProtocol.setDescription('The protocol key of the template.')
basPbrfOSPFExportTemplateSpecific1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 2, 3, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basPbrfOSPFExportTemplateSpecific1.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFExportTemplateSpecific1.setDescription('The specific1 key of the template.')
basPbrfOSPFExportTemplateSpecific2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 2, 3, 1, 10), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basPbrfOSPFExportTemplateSpecific2.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFExportTemplateSpecific2.setDescription('The specific2 key of the template.')
basPbrfOSPFExportTemplateTag = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 2, 3, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basPbrfOSPFExportTemplateTag.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFExportTemplateTag.setDescription('The tag key of the template.')
basPbrfOSPFExportTemplateKeyBits = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 2, 3, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basPbrfOSPFExportTemplateKeyBits.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFExportTemplateKeyBits.setDescription('The key bits key mask of the template.')
basPbrfOSPFExportTemplateMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 2, 3, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basPbrfOSPFExportTemplateMetric.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFExportTemplateMetric.setDescription('The metric of the template action.')
basPbrfOSPFExportTemplateFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 2, 3, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basPbrfOSPFExportTemplateFlags.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFExportTemplateFlags.setDescription('The flags of the template action.')
basPbrfOSPFExportTemplateActionTag = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 2, 3, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basPbrfOSPFExportTemplateActionTag.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFExportTemplateActionTag.setDescription('The tag of the template action.')
basPbrfOSPFExportTemplateRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 2, 3, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basPbrfOSPFExportTemplateRowStatus.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFExportTemplateRowStatus.setDescription('The row status of the template.')
basPbrfOSPFExportTemplateDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 11, 2, 1, 2, 3, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basPbrfOSPFExportTemplateDescr.setStatus('current')
if mibBuilder.loadTexts: basPbrfOSPFExportTemplateDescr.setDescription('The descr of the OSPF Export template.')
mibBuilder.exportSymbols("BAS-PBRF-OSPF-MIB", basPbrfOSPFExportFilterTempRowStatus=basPbrfOSPFExportFilterTempRowStatus, basPbrfOSPFImportFilterTempTemplate=basPbrfOSPFImportFilterTempTemplate, basPbrfOSPFImportIndex=basPbrfOSPFImportIndex, basPbrfOSPFImportTemplateRouteMask=basPbrfOSPFImportTemplateRouteMask, basPbrfOSPFExportTemplateSlot=basPbrfOSPFExportTemplateSlot, basPbrfOSPFExportLPort=basPbrfOSPFExportLPort, basPbrfOSPFMIB=basPbrfOSPFMIB, basPbrfOSPFExportTable=basPbrfOSPFExportTable, basPbrfOSPFImportFilterTempOrder=basPbrfOSPFImportFilterTempOrder, basPbrfOSPFExportIndex=basPbrfOSPFExportIndex, basPbrfOSPFExportFilterTempTemplate=basPbrfOSPFExportFilterTempTemplate, basPbrfOSPFExportTemplateSpecific2=basPbrfOSPFExportTemplateSpecific2, basPbrfOSPFImportTemplateEntry=basPbrfOSPFImportTemplateEntry, basPbrfOSPFExportTemplateDescr=basPbrfOSPFExportTemplateDescr, basPbrfOSPFImportTemplateLPort=basPbrfOSPFImportTemplateLPort, basPbrfOSPFImportTemplateIf=basPbrfOSPFImportTemplateIf, basPbrfOSPFExportTemplateChassis=basPbrfOSPFExportTemplateChassis, basPbrfOSPFImport=basPbrfOSPFImport, basPbrfOSPFImportLPort=basPbrfOSPFImportLPort, basPbrfOSPFImportTemplatePeerAddr=basPbrfOSPFImportTemplatePeerAddr, basPbrfOSPFImportFilterTempRowStatus=basPbrfOSPFImportFilterTempRowStatus, basPbrfOSPFImportTemplateTag=basPbrfOSPFImportTemplateTag, basPbrfOSPFImportFilterTempEntry=basPbrfOSPFImportFilterTempEntry, basPbrfOSPFImportTemplateRowStatus=basPbrfOSPFImportTemplateRowStatus, basPbrfOSPFImportEntry=basPbrfOSPFImportEntry, basPbrfOSPFImportFilterTempSlot=basPbrfOSPFImportFilterTempSlot, basPbrfOSPFExportFilterTempIf=basPbrfOSPFExportFilterTempIf, basPbrfOSPFExportFilterTempIndex=basPbrfOSPFExportFilterTempIndex, basPbrfOSPFExportTemplateRouteAddr=basPbrfOSPFExportTemplateRouteAddr, basPbrfOSPFImportDescr=basPbrfOSPFImportDescr, basPbrfOSPFExportTemplateActionTag=basPbrfOSPFExportTemplateActionTag, basPbrfOSPFExportFilterTempTable=basPbrfOSPFExportFilterTempTable, basPbrfOSPFExportTemplateCount=basPbrfOSPFExportTemplateCount, basPbrfOSPFExportTemplateSpecific1=basPbrfOSPFExportTemplateSpecific1, basPbrfOSPFImportFilterTempIndex=basPbrfOSPFImportFilterTempIndex, basPbrfOSPFImportIf=basPbrfOSPFImportIf, basPbrfOSPFExport=basPbrfOSPFExport, basPbrfOSPFImportTemplateFlags=basPbrfOSPFImportTemplateFlags, basPbrfOSPFImportTemplateIndex=basPbrfOSPFImportTemplateIndex, basPbrfOSPFExportTemplateMetric=basPbrfOSPFExportTemplateMetric, basPbrfOSPFImportFilterTempTable=basPbrfOSPFImportFilterTempTable, basPbrfOSPFImportSlot=basPbrfOSPFImportSlot, basPbrfOSPFImportFilterTempLPort=basPbrfOSPFImportFilterTempLPort, basPbrfOSPFImportTemplateChassis=basPbrfOSPFImportTemplateChassis, basPbrfOSPFExportFilterTempChassis=basPbrfOSPFExportFilterTempChassis, basPbrfOSPFExportTemplateKeyBits=basPbrfOSPFExportTemplateKeyBits, basPbrfOSPFExportTemplateFlags=basPbrfOSPFExportTemplateFlags, basPbrfOSPFExportTemplateTable=basPbrfOSPFExportTemplateTable, basPbrfOSPFExportFilterTempLPort=basPbrfOSPFExportFilterTempLPort, basPbrfOSPFImportRowStatus=basPbrfOSPFImportRowStatus, basPbrfOSPFExportIf=basPbrfOSPFExportIf, basPbrfOSPFImportTemplateKeyBits=basPbrfOSPFImportTemplateKeyBits, PYSNMP_MODULE_ID=basPbrfOSPFMIB, basPbrfOSPFExportChassis=basPbrfOSPFExportChassis, basPbrfOSPFExportTemplateEntry=basPbrfOSPFExportTemplateEntry, basPbrfOSPFExportTemplateIndex=basPbrfOSPFExportTemplateIndex, basPbrfOSPFImportTemplateCount=basPbrfOSPFImportTemplateCount, basPbrfOSPFImportTemplateRouteAddr=basPbrfOSPFImportTemplateRouteAddr, basPbrfOSPFExportDescr=basPbrfOSPFExportDescr, basPbrfOSPFExportTemplateRouteMask=basPbrfOSPFExportTemplateRouteMask, basPbrfOSPFImportChassis=basPbrfOSPFImportChassis, basPbrfOSPFExportFilterTempEntry=basPbrfOSPFExportFilterTempEntry, basPbrfOSPFExportTemplateIf=basPbrfOSPFExportTemplateIf, basPbrfOSPFImportTable=basPbrfOSPFImportTable, basPbrfOSPFExportSlot=basPbrfOSPFExportSlot, basPbrfOSPFExportTemplateTag=basPbrfOSPFExportTemplateTag, basPbrfOSPFImportFilterTempIf=basPbrfOSPFImportFilterTempIf, basPbrfOSPFImportTemplatePeerMask=basPbrfOSPFImportTemplatePeerMask, basPbrfOSPFExportFilterTempSlot=basPbrfOSPFExportFilterTempSlot, basPbrfOSPFExportTemplateRowStatus=basPbrfOSPFExportTemplateRowStatus, basPbrfOSPFExportRowStatus=basPbrfOSPFExportRowStatus, basPbrfOSPFExportEntry=basPbrfOSPFExportEntry, basPbrfOSPFImportFilterTempChassis=basPbrfOSPFImportFilterTempChassis, basPbrfOSPFExportTemplateProtocol=basPbrfOSPFExportTemplateProtocol, basPbrfOSPFExportFilterTempOrder=basPbrfOSPFExportFilterTempOrder, basPbrfOSPFExportTemplateLPort=basPbrfOSPFExportTemplateLPort, basPbrfOSPFImportTemplateSlot=basPbrfOSPFImportTemplateSlot, basPbrfOSPFImportTemplateDescr=basPbrfOSPFImportTemplateDescr, basPbrfOSPFImportTemplatePref=basPbrfOSPFImportTemplatePref, basPbrfOSPFImportTemplateTable=basPbrfOSPFImportTemplateTable)
