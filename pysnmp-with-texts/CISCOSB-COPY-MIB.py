#
# PySNMP MIB module CISCOSB-COPY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCOSB-COPY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:22:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
rndErrorSeverity, rndErrorDesc = mibBuilder.importSymbols("CISCOSB-DEVICEPARAMS-MIB", "rndErrorSeverity", "rndErrorDesc")
switch001, rndNotifications = mibBuilder.importSymbols("CISCOSB-MIB", "switch001", "rndNotifications")
RlSecSdAccessType, = mibBuilder.importSymbols("CISCOSB-SECSD-MIB", "RlSecSdAccessType")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, Counter64, NotificationType, Bits, MibIdentifier, Unsigned32, ObjectIdentity, ModuleIdentity, IpAddress, Integer32, Gauge32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "Counter64", "NotificationType", "Bits", "MibIdentifier", "Unsigned32", "ObjectIdentity", "ModuleIdentity", "IpAddress", "Integer32", "Gauge32", "iso")
DisplayString, TruthValue, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention", "RowStatus")
rlCopy = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87))
rlCopy.setRevisions(('2010-07-25 00:00', '2010-05-11 00:00', '2010-02-17 00:00', '2009-08-10 00:00', '2006-02-02 00:00', '2003-09-22 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rlCopy.setRevisionsDescriptions(('Added USB file type.', 'Added objects rlCopyInetDestinationUnitList,rlCopyHistoryInetDestinationUnitList,rlCopyInetUnitStatusList,rlCopyHistoryInetUnitStatusList.', 'Added mirror-config and MIB rlCopyMirrorTimeout.', 'The private MIB module definition for file copy in CISCOSB devices.', 'Added objects rlCopyMessagesTable and rlCopyMessagesTableRemoveEntries.', 'Initial version of this MIB.',))
if mibBuilder.loadTexts: rlCopy.setLastUpdated('201005110000Z')
if mibBuilder.loadTexts: rlCopy.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: rlCopy.setContactInfo('Postal: 170 West Tasman Drive San Jose , CA 95134-1706 USA Website: Cisco Small Business Support Community <http://www.cisco.com/go/smallbizsupport>')
if mibBuilder.loadTexts: rlCopy.setDescription('Added field rlCopyInetSpecificCopyInfo')
class RlCopyApplicationType(TextualConvention, Integer32):
    description = 'Specifies management application'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("mcli", 1), ("cli", 2), ("ewb", 3), ("nms", 4), ("initerm", 5), ("serial", 6))

class RlCopyLocationType(TextualConvention, Integer32):
    description = 'Specifies file location'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("local", 1), ("anotherUnit", 2), ("tftp", 3), ("xmodem", 4), ("scp", 5), ("serial", 6), ("http", 7), ("https", 8), ("http-xml", 9), ("https-xml", 10))

class RlCopyFileType(TextualConvention, Integer32):
    description = 'The File type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("other", 1), ("runningConfig", 2), ("startupConfig", 3), ("backupConfig", 4), ("runningMibConfig", 5), ("startupMibConfig", 6), ("backupMibConfig", 7), ("image", 8), ("boot", 9), ("null", 10), ("logging", 11), ("mirrorConfig", 12), ("usb", 13))

class RlCopySecSdAccessType(TextualConvention, Integer32):
    description = 'Sec sd access type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("exclude", 1), ("include-encrypted", 2), ("include-decrypted", 3), ("default", 4))

rlCopyMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCopyMibVersion.setStatus('current')
if mibBuilder.loadTexts: rlCopyMibVersion.setDescription('Indicates the Copy support version. The current version is 1.')
rlCopyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 2), )
if mibBuilder.loadTexts: rlCopyTable.setStatus('current')
if mibBuilder.loadTexts: rlCopyTable.setDescription(' The (conceptual) table listing only one entry at a time with parameters needed for configuration of the file copy action.')
rlCopyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 2, 1), ).setIndexNames((0, "CISCOSB-COPY-MIB", "rlCopyIndex"))
if mibBuilder.loadTexts: rlCopyEntry.setStatus('current')
if mibBuilder.loadTexts: rlCopyEntry.setDescription(' An entry (conceptual row) in the CopyTable.')
rlCopyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCopyIndex.setStatus('current')
if mibBuilder.loadTexts: rlCopyIndex.setDescription('The row index in the table.')
rlCopyApplicationId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 2, 1, 2), RlCopyApplicationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCopyApplicationId.setStatus('current')
if mibBuilder.loadTexts: rlCopyApplicationId.setDescription('The applicatione activated this comand')
rlCopySourceLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 2, 1, 3), RlCopyLocationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopySourceLocation.setStatus('current')
if mibBuilder.loadTexts: rlCopySourceLocation.setDescription('Source File Location')
rlCopySourceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopySourceIpAddress.setStatus('current')
if mibBuilder.loadTexts: rlCopySourceIpAddress.setDescription('The Ip address of the source remote host')
rlCopySourceUnitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopySourceUnitNumber.setStatus('current')
if mibBuilder.loadTexts: rlCopySourceUnitNumber.setDescription('The unit number of the source unit')
rlCopySourceFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopySourceFileName.setStatus('current')
if mibBuilder.loadTexts: rlCopySourceFileName.setDescription('The name of the source file.')
rlCopySourceFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 2, 1, 7), RlCopyFileType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopySourceFileType.setStatus('current')
if mibBuilder.loadTexts: rlCopySourceFileType.setDescription('The type of the source file.')
rlCopyDestinationLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 2, 1, 8), RlCopyLocationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyDestinationLocation.setStatus('current')
if mibBuilder.loadTexts: rlCopyDestinationLocation.setDescription('Destination File Location')
rlCopyDestinationIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 2, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyDestinationIpAddress.setStatus('current')
if mibBuilder.loadTexts: rlCopyDestinationIpAddress.setDescription('The Ip address of the destination remote host')
rlCopyDestinationUnitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyDestinationUnitNumber.setStatus('current')
if mibBuilder.loadTexts: rlCopyDestinationUnitNumber.setDescription('The unit number of the destination unit, value 257 means all units')
rlCopyDestinationFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 2, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyDestinationFileName.setStatus('current')
if mibBuilder.loadTexts: rlCopyDestinationFileName.setDescription('The name of the destination file.')
rlCopyDestinationFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 2, 1, 12), RlCopyFileType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyDestinationFileType.setStatus('current')
if mibBuilder.loadTexts: rlCopyDestinationFileType.setDescription('The type of the destination file.')
rlCopyUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 2, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCopyUpTime.setStatus('current')
if mibBuilder.loadTexts: rlCopyUpTime.setDescription('The time elapsed since this entry was created.')
rlCopyOperationState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("uploadInProgress", 1), ("downloadInProgress", 2), ("copyFailed", 3), ("copyTimedout", 4), ("copyFinished", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCopyOperationState.setStatus('current')
if mibBuilder.loadTexts: rlCopyOperationState.setDescription('The state of the copy operation.')
rlCopyBytesTransferred = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCopyBytesTransferred.setStatus('current')
if mibBuilder.loadTexts: rlCopyBytesTransferred.setDescription('The number of bytes that were transferred by the copy operation.')
rlCopyInBackground = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyInBackground.setStatus('current')
if mibBuilder.loadTexts: rlCopyInBackground.setDescription('When enabled the copy operation is done in the background.')
rlCopyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 2, 1, 17), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyRowStatus.setStatus('current')
if mibBuilder.loadTexts: rlCopyRowStatus.setDescription('It is used to insert or delete an entry')
rlCopyHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistoryIndex.setDescription('The index of the entry corresponding to this one in the rlCopyHistoryTable (equals rlCopyHistoryHistoryIndex). A value of 0 indicates that no history entry should be kept for this copy operation.')
rlCopyFreeHistoryIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCopyFreeHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: rlCopyFreeHistoryIndex.setDescription('Gives the next free index in the rlCopyHistoryTable (i.e., the next available value for rlCopyHistoryHistoryIndex)')
rlCopyHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 4), )
if mibBuilder.loadTexts: rlCopyHistoryTable.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistoryTable.setDescription(' The (conceptual) table listing only one entry at a time with parameters needed for configuration of the file copy action.')
rlCopyHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 4, 1), ).setIndexNames((0, "CISCOSB-COPY-MIB", "rlCopyHistoryHistoryIndex"))
if mibBuilder.loadTexts: rlCopyHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistoryEntry.setDescription(' An entry (conceptual row) in the rlCopyHistoryTable.')
rlCopyHistoryHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCopyHistoryHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistoryHistoryIndex.setDescription('The row index in the table.')
rlCopyHistoryApplicationId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 4, 1, 2), RlCopyApplicationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCopyHistoryApplicationId.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistoryApplicationId.setDescription('The application that activated this comand')
rlCopyHistorySourceLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 4, 1, 3), RlCopyLocationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyHistorySourceLocation.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistorySourceLocation.setDescription('Source File Location')
rlCopyHistorySourceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 4, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyHistorySourceIpAddress.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistorySourceIpAddress.setDescription('The IP address of the source remote host')
rlCopyHistorySourceUnitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyHistorySourceUnitNumber.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistorySourceUnitNumber.setDescription('The unit number of the source unit')
rlCopyHistorySourceFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 4, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyHistorySourceFileName.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistorySourceFileName.setDescription('The name of the source file.')
rlCopyHistorySourceFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 4, 1, 7), RlCopyFileType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyHistorySourceFileType.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistorySourceFileType.setDescription('The type of the source file.')
rlCopyHistoryDestinationLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 4, 1, 8), RlCopyLocationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyHistoryDestinationLocation.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistoryDestinationLocation.setDescription('Destination File Location')
rlCopyHistoryDestinationIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 4, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyHistoryDestinationIpAddress.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistoryDestinationIpAddress.setDescription('The IP address of the destination remote host')
rlCopyHistoryDestinationUnitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 4, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyHistoryDestinationUnitNumber.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistoryDestinationUnitNumber.setDescription('The unit number of the destination unit')
rlCopyHistoryDestinationFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 4, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyHistoryDestinationFileName.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistoryDestinationFileName.setDescription('The name of the destination file.')
rlCopyHistoryDestinationFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 4, 1, 12), RlCopyFileType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyHistoryDestinationFileType.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistoryDestinationFileType.setDescription('The type of the destination file.')
rlCopyHistoryUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 4, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCopyHistoryUpTime.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistoryUpTime.setDescription('The time elapsed since this entry was created.')
rlCopyHistoryOperationState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("uploadInProgress", 1), ("downloadInProgress", 2), ("copyFailed", 3), ("copyTimedout", 4), ("copyFinished", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCopyHistoryOperationState.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistoryOperationState.setDescription('The state of the copy operation.')
rlCopyHistoryBytesTransferred = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCopyHistoryBytesTransferred.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistoryBytesTransferred.setDescription('The number of bytes that were transferred by the copy operation.')
rlCopyHistoryInBackground = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyHistoryInBackground.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistoryInBackground.setDescription('When enabled the copy operation is done in the background.')
rlCopyHistoryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 4, 1, 17), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyHistoryRowStatus.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistoryRowStatus.setDescription('It is used delete an entry. No other operations are permitted since the history table is populated and updated through the copy table only.')
rlCopyHistoryErrorMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 4, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCopyHistoryErrorMessage.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistoryErrorMessage.setDescription('Error message as a result of failed copy action.')
rlCopyAuditingEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyAuditingEnable.setStatus('current')
if mibBuilder.loadTexts: rlCopyAuditingEnable.setDescription('Controls whether SysLog messages should be issued on file copy events')
rlCopyMessagesTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 6), )
if mibBuilder.loadTexts: rlCopyMessagesTable.setStatus('current')
if mibBuilder.loadTexts: rlCopyMessagesTable.setDescription(' The table listing the messages issued during a COPY operation.')
rlCopyMessagesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 6, 1), ).setIndexNames((0, "CISCOSB-COPY-MIB", "rlCopyMessagesCopyIndex"), (0, "CISCOSB-COPY-MIB", "rlCopyMessagesMessageIndex"))
if mibBuilder.loadTexts: rlCopyMessagesEntry.setStatus('current')
if mibBuilder.loadTexts: rlCopyMessagesEntry.setDescription(' An entry (conceptual row) in the rlCopyMessagesTable.')
rlCopyMessagesCopyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: rlCopyMessagesCopyIndex.setStatus('current')
if mibBuilder.loadTexts: rlCopyMessagesCopyIndex.setDescription('The index of the copy operation whose messages are displayed.')
rlCopyMessagesMessageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: rlCopyMessagesMessageIndex.setStatus('current')
if mibBuilder.loadTexts: rlCopyMessagesMessageIndex.setDescription('The index of the displayed message.')
rlCopyMessagesMessageText = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCopyMessagesMessageText.setStatus('current')
if mibBuilder.loadTexts: rlCopyMessagesMessageText.setDescription('The text of the message occurred in the copy operation.')
rlCopyMessagesStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 6, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyMessagesStatus.setStatus('current')
if mibBuilder.loadTexts: rlCopyMessagesStatus.setDescription('Only destroy is supported.')
rlCopyMessagesTableRemoveEntries = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyMessagesTableRemoveEntries.setStatus('current')
if mibBuilder.loadTexts: rlCopyMessagesTableRemoveEntries.setDescription('Setting this object with value n will remove all entries associated with copy operation represented by the value n from the rlCopyMessagesTable, i.e. all the entries with rlCopyMessagesCopyIndex = n.')
rlCopyFinished = NotificationType((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 0, 180)).setObjects(("CISCOSB-DEVICEPARAMS-MIB", "rndErrorDesc"), ("CISCOSB-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlCopyFinished.setStatus('current')
if mibBuilder.loadTexts: rlCopyFinished.setDescription('Informational trap indicating that the device has finished a copy operation successfully.')
rlCopyFailed = NotificationType((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 0, 181)).setObjects(("CISCOSB-DEVICEPARAMS-MIB", "rndErrorDesc"), ("CISCOSB-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlCopyFailed.setStatus('current')
if mibBuilder.loadTexts: rlCopyFailed.setDescription('Informational trap indicating that the copy operation has failed.')
rlCopySWFinished = NotificationType((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 0, 211)).setObjects(("CISCOSB-DEVICEPARAMS-MIB", "rndErrorDesc"), ("CISCOSB-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlCopySWFinished.setStatus('current')
if mibBuilder.loadTexts: rlCopySWFinished.setDescription('A trap indicating that the device has finished a copy operation of image successfully.')
rlCopySWToUnits = NotificationType((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 0, 212)).setObjects(("CISCOSB-DEVICEPARAMS-MIB", "rndErrorDesc"), ("CISCOSB-DEVICEPARAMS-MIB", "rndErrorSeverity"), ("CISCOSB-COPY-MIB", "rlCopyUnitsList"))
if mibBuilder.loadTexts: rlCopySWToUnits.setStatus('current')
if mibBuilder.loadTexts: rlCopySWToUnits.setDescription('A trap indicating to master unit that remote units have finished a copy operation of image successfully.')
rlCopyMirrorFileIllegal = NotificationType((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 0, 220)).setObjects(("CISCOSB-DEVICEPARAMS-MIB", "rndErrorDesc"), ("CISCOSB-DEVICEPARAMS-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlCopyMirrorFileIllegal.setStatus('current')
if mibBuilder.loadTexts: rlCopyMirrorFileIllegal.setDescription('A trap indicating that the mirror configuration file is illegal due to failure of prevoius copy operation/s to mirror-config.')
rlCopyInetTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 8), )
if mibBuilder.loadTexts: rlCopyInetTable.setStatus('current')
if mibBuilder.loadTexts: rlCopyInetTable.setDescription(' The (conceptual) table listing only one entry at a time with parameters needed for configuration of the file copy action.')
rlCopyInetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 8, 1), ).setIndexNames((0, "CISCOSB-COPY-MIB", "rlCopyInetIndex"))
if mibBuilder.loadTexts: rlCopyInetEntry.setStatus('current')
if mibBuilder.loadTexts: rlCopyInetEntry.setDescription(' An entry (conceptual row) in the CopyTable.')
rlCopyInetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCopyInetIndex.setStatus('current')
if mibBuilder.loadTexts: rlCopyInetIndex.setDescription('The row index in the table.')
rlCopyInetApplicationId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 8, 1, 2), RlCopyApplicationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCopyInetApplicationId.setStatus('current')
if mibBuilder.loadTexts: rlCopyInetApplicationId.setDescription('The applicatione activated this comand')
rlCopyInetSourceLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 8, 1, 3), RlCopyLocationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyInetSourceLocation.setStatus('current')
if mibBuilder.loadTexts: rlCopyInetSourceLocation.setDescription('Source File Location')
rlCopyInetSourceIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 8, 1, 4), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyInetSourceIpAddressType.setStatus('current')
if mibBuilder.loadTexts: rlCopyInetSourceIpAddressType.setDescription('The Inet address type of the source remote host')
rlCopyInetSourceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 8, 1, 5), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyInetSourceIpAddress.setStatus('current')
if mibBuilder.loadTexts: rlCopyInetSourceIpAddress.setDescription('The Inet address of the source remote host')
rlCopyInetSourceUnitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 8, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyInetSourceUnitNumber.setStatus('current')
if mibBuilder.loadTexts: rlCopyInetSourceUnitNumber.setDescription('The unit number of the source unit')
rlCopyInetSourceFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 8, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyInetSourceFileName.setStatus('current')
if mibBuilder.loadTexts: rlCopyInetSourceFileName.setDescription('The name of the source file.')
rlCopyInetSourceFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 8, 1, 8), RlCopyFileType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyInetSourceFileType.setStatus('current')
if mibBuilder.loadTexts: rlCopyInetSourceFileType.setDescription('The type of the source file.')
rlCopyInetDestinationLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 8, 1, 9), RlCopyLocationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyInetDestinationLocation.setStatus('current')
if mibBuilder.loadTexts: rlCopyInetDestinationLocation.setDescription('Destination File Location')
rlCopyInetDestinationIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 8, 1, 10), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyInetDestinationIpAddressType.setStatus('current')
if mibBuilder.loadTexts: rlCopyInetDestinationIpAddressType.setDescription('The Inet address type of the destination remote host')
rlCopyInetDestinationIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 8, 1, 11), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyInetDestinationIpAddress.setStatus('current')
if mibBuilder.loadTexts: rlCopyInetDestinationIpAddress.setDescription('The Inet address of the destination remote host')
rlCopyInetDestinationUnitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 8, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyInetDestinationUnitNumber.setStatus('current')
if mibBuilder.loadTexts: rlCopyInetDestinationUnitNumber.setDescription('The unit number of the destination unit, value 257 means all units')
rlCopyInetDestinationFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 8, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyInetDestinationFileName.setStatus('current')
if mibBuilder.loadTexts: rlCopyInetDestinationFileName.setDescription('The name of the destination file.')
rlCopyInetDestinationFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 8, 1, 14), RlCopyFileType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyInetDestinationFileType.setStatus('current')
if mibBuilder.loadTexts: rlCopyInetDestinationFileType.setDescription('The type of the destination file.')
rlCopyInetUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 8, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCopyInetUpTime.setStatus('current')
if mibBuilder.loadTexts: rlCopyInetUpTime.setDescription('The time elapsed since this entry was created.')
rlCopyInetOperationState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 8, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("uploadInProgress", 1), ("downloadInProgress", 2), ("copyFailed", 3), ("copyTimedout", 4), ("copyFinished", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCopyInetOperationState.setStatus('current')
if mibBuilder.loadTexts: rlCopyInetOperationState.setDescription('The state of the copy operation.')
rlCopyInetBytesTransferred = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 8, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCopyInetBytesTransferred.setStatus('current')
if mibBuilder.loadTexts: rlCopyInetBytesTransferred.setDescription('The number of bytes that were transferred by the copy operation.')
rlCopyInetInBackground = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 8, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyInetInBackground.setStatus('current')
if mibBuilder.loadTexts: rlCopyInetInBackground.setDescription('When enabled the copy operation is done in the background.')
rlCopyInetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 8, 1, 19), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyInetRowStatus.setStatus('current')
if mibBuilder.loadTexts: rlCopyInetRowStatus.setDescription('It is used to insert or delete an entry')
rlCopyInetHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 8, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyInetHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: rlCopyInetHistoryIndex.setDescription('The index of the entry corresponding to this one in the rlCopyHistoryTable (equals rlCopyHistoryHistoryIndex). A value of 0 indicates that no history entry should be kept for this copy operation.')
rlCopyInetDestinationUnitList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 8, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyInetDestinationUnitList.setStatus('current')
if mibBuilder.loadTexts: rlCopyInetDestinationUnitList.setDescription('A bitmap of destination units for copy operation.')
rlCopyInetUnitStatusList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 8, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCopyInetUnitStatusList.setStatus('current')
if mibBuilder.loadTexts: rlCopyInetUnitStatusList.setDescription('A bitmap of copy operation status for each unit.')
rlCopyInetSpecificCopyInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 8, 1, 23), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyInetSpecificCopyInfo.setStatus('current')
if mibBuilder.loadTexts: rlCopyInetSpecificCopyInfo.setDescription('Copy application specific information. For example: for SCP copy this field can be used to pass username and password information.')
rlCopyHistoryInetTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 9), )
if mibBuilder.loadTexts: rlCopyHistoryInetTable.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistoryInetTable.setDescription(' The (conceptual) table listing only one entry at a time with parameters needed for configuration of the file copy action.')
rlCopyHistoryInetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 9, 1), ).setIndexNames((0, "CISCOSB-COPY-MIB", "rlCopyHistoryInetHistoryIndex"))
if mibBuilder.loadTexts: rlCopyHistoryInetEntry.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistoryInetEntry.setDescription(' An entry (conceptual row) in the rlCopyHistoryTable.')
rlCopyHistoryInetHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCopyHistoryInetHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistoryInetHistoryIndex.setDescription('The row index in the table.')
rlCopyHistoryInetApplicationId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 9, 1, 2), RlCopyApplicationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCopyHistoryInetApplicationId.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistoryInetApplicationId.setDescription('The application that activated this comand')
rlCopyHistoryInetSourceLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 9, 1, 3), RlCopyLocationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyHistoryInetSourceLocation.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistoryInetSourceLocation.setDescription('Source File Location')
rlCopyHistoryInetSourceIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 9, 1, 4), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyHistoryInetSourceIpAddressType.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistoryInetSourceIpAddressType.setDescription('The Inet address type of the source remote host')
rlCopyHistoryInetSourceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 9, 1, 5), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyHistoryInetSourceIpAddress.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistoryInetSourceIpAddress.setDescription('The Inet address of the source remote host')
rlCopyHistoryInetSourceUnitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 9, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyHistoryInetSourceUnitNumber.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistoryInetSourceUnitNumber.setDescription('The unit number of the source unit')
rlCopyHistoryInetSourceFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 9, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyHistoryInetSourceFileName.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistoryInetSourceFileName.setDescription('The name of the source file.')
rlCopyHistoryInetSourceFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 9, 1, 8), RlCopyFileType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyHistoryInetSourceFileType.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistoryInetSourceFileType.setDescription('The type of the source file.')
rlCopyHistoryInetDestinationLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 9, 1, 9), RlCopyLocationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyHistoryInetDestinationLocation.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistoryInetDestinationLocation.setDescription('Destination File Location')
rlCopyHistoryInetDestinationIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 9, 1, 10), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyHistoryInetDestinationIpAddressType.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistoryInetDestinationIpAddressType.setDescription('The Inet address type of the destination remote host')
rlCopyHistoryInetDestinationIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 9, 1, 11), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyHistoryInetDestinationIpAddress.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistoryInetDestinationIpAddress.setDescription('The Inet address of the destination remote host')
rlCopyHistoryInetDestinationUnitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 9, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyHistoryInetDestinationUnitNumber.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistoryInetDestinationUnitNumber.setDescription('The unit number of the destination unit')
rlCopyHistoryInetDestinationFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 9, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyHistoryInetDestinationFileName.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistoryInetDestinationFileName.setDescription('The name of the destination file.')
rlCopyHistoryInetDestinationFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 9, 1, 14), RlCopyFileType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyHistoryInetDestinationFileType.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistoryInetDestinationFileType.setDescription('The type of the destination file.')
rlCopyHistoryInetUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 9, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCopyHistoryInetUpTime.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistoryInetUpTime.setDescription('The time elapsed since this entry was created.')
rlCopyHistoryInetOperationState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 9, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("uploadInProgress", 1), ("downloadInProgress", 2), ("copyFailed", 3), ("copyTimedout", 4), ("copyFinished", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCopyHistoryInetOperationState.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistoryInetOperationState.setDescription('The state of the copy operation.')
rlCopyHistoryInetBytesTransferred = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 9, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCopyHistoryInetBytesTransferred.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistoryInetBytesTransferred.setDescription('The number of bytes that were transferred by the copy operation.')
rlCopyHistoryInetInBackground = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 9, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyHistoryInetInBackground.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistoryInetInBackground.setDescription('When enabled the copy operation is done in the background.')
rlCopyHistoryInetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 9, 1, 19), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyHistoryInetRowStatus.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistoryInetRowStatus.setDescription('It is used delete an entry. No other operations are permitted since the history table is populated and updated through the copy table only.')
rlCopyHistoryInetErrorMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 9, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCopyHistoryInetErrorMessage.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistoryInetErrorMessage.setDescription('Error message as a result of failed copy action.')
rlCopyHistoryInetDestinationUnitList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 9, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyHistoryInetDestinationUnitList.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistoryInetDestinationUnitList.setDescription('A bitmap of destination units for copy operation.')
rlCopyHistoryInetUnitStatusList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 9, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCopyHistoryInetUnitStatusList.setStatus('current')
if mibBuilder.loadTexts: rlCopyHistoryInetUnitStatusList.setDescription('A bitmap of copy operation status for each unit.')
rlCopyUnitsList = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 10), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rlCopyUnitsList.setStatus('current')
if mibBuilder.loadTexts: rlCopyUnitsList.setDescription('Potential list of units used by trap rlCopySWToUnits')
rlCopyMirrorTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyMirrorTimeout.setStatus('current')
if mibBuilder.loadTexts: rlCopyMirrorTimeout.setDescription(' This MIB should be used in order to change the time-interval of automatic copy of startup-config to mirror-config. The MIB is for debugging purposes only, and given value should be the number of minutes for time-interval of this copy.')
rlCopyOptionsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 12), )
if mibBuilder.loadTexts: rlCopyOptionsTable.setStatus('current')
if mibBuilder.loadTexts: rlCopyOptionsTable.setDescription('The table includes more field options for the copy operation.')
rlCopyOptionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 12, 1), ).setIndexNames((0, "CISCOSB-COPY-MIB", "rlCopyOptionsIndex"))
if mibBuilder.loadTexts: rlCopyOptionsEntry.setStatus('current')
if mibBuilder.loadTexts: rlCopyOptionsEntry.setDescription(' An entry (conceptual row) in the rlCopyOptionsTable.')
rlCopyOptionsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 12, 1, 1), Unsigned32())
if mibBuilder.loadTexts: rlCopyOptionsIndex.setStatus('current')
if mibBuilder.loadTexts: rlCopyOptionsIndex.setDescription('The index should be equal to the value of rlCopyInetIndex of the relevant rlCopyInetEntry.')
rlCopyOptionsRequestedSsdAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 12, 1, 2), RlCopySecSdAccessType().clone('default')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlCopyOptionsRequestedSsdAccess.setStatus('current')
if mibBuilder.loadTexts: rlCopyOptionsRequestedSsdAccess.setDescription('The requested format for sensitive data in the copy. Relevant only for configuration file upload')
rlCopyMirror = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 13))
rlCopyMirrorEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlCopyMirrorEnable.setStatus('current')
if mibBuilder.loadTexts: rlCopyMirrorEnable.setDescription(' This MIB should be used in order to enable/disable automatic copy of startup-config to mirror-config.')
rlCopyStaticDowngradeStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 87, 14), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlCopyStaticDowngradeStatus.setStatus('current')
if mibBuilder.loadTexts: rlCopyStaticDowngradeStatus.setDescription('Controls whether static downgrade in progress ')
mibBuilder.exportSymbols("CISCOSB-COPY-MIB", rlCopyHistoryBytesTransferred=rlCopyHistoryBytesTransferred, rlCopyInetDestinationFileName=rlCopyInetDestinationFileName, rlCopyHistoryDestinationIpAddress=rlCopyHistoryDestinationIpAddress, rlCopyInetSpecificCopyInfo=rlCopyInetSpecificCopyInfo, rlCopyHistoryTable=rlCopyHistoryTable, rlCopyHistoryDestinationUnitNumber=rlCopyHistoryDestinationUnitNumber, rlCopyHistoryRowStatus=rlCopyHistoryRowStatus, rlCopyUnitsList=rlCopyUnitsList, rlCopySourceLocation=rlCopySourceLocation, rlCopyOptionsRequestedSsdAccess=rlCopyOptionsRequestedSsdAccess, rlCopyInetTable=rlCopyInetTable, PYSNMP_MODULE_ID=rlCopy, rlCopyInetSourceUnitNumber=rlCopyInetSourceUnitNumber, rlCopyHistoryInetSourceFileType=rlCopyHistoryInetSourceFileType, rlCopyMessagesMessageText=rlCopyMessagesMessageText, rlCopyRowStatus=rlCopyRowStatus, rlCopyHistoryInetUnitStatusList=rlCopyHistoryInetUnitStatusList, rlCopyMessagesMessageIndex=rlCopyMessagesMessageIndex, rlCopyAuditingEnable=rlCopyAuditingEnable, rlCopyHistoryInetDestinationFileType=rlCopyHistoryInetDestinationFileType, rlCopyHistoryInetSourceIpAddressType=rlCopyHistoryInetSourceIpAddressType, RlCopyFileType=RlCopyFileType, rlCopyHistorySourceLocation=rlCopyHistorySourceLocation, rlCopy=rlCopy, rlCopyMirror=rlCopyMirror, rlCopyMessagesTable=rlCopyMessagesTable, rlCopyHistoryInetSourceLocation=rlCopyHistoryInetSourceLocation, rlCopyOptionsTable=rlCopyOptionsTable, rlCopyMessagesCopyIndex=rlCopyMessagesCopyIndex, rlCopyInetRowStatus=rlCopyInetRowStatus, rlCopyInetDestinationFileType=rlCopyInetDestinationFileType, rlCopyInetUpTime=rlCopyInetUpTime, rlCopyInetOperationState=rlCopyInetOperationState, rlCopyHistoryInetErrorMessage=rlCopyHistoryInetErrorMessage, rlCopyInetDestinationUnitNumber=rlCopyInetDestinationUnitNumber, rlCopyHistoryApplicationId=rlCopyHistoryApplicationId, rlCopyFailed=rlCopyFailed, rlCopyInetDestinationUnitList=rlCopyInetDestinationUnitList, rlCopyHistorySourceUnitNumber=rlCopyHistorySourceUnitNumber, rlCopyEntry=rlCopyEntry, rlCopyMirrorTimeout=rlCopyMirrorTimeout, rlCopyIndex=rlCopyIndex, rlCopyHistoryInetDestinationIpAddress=rlCopyHistoryInetDestinationIpAddress, rlCopyMessagesTableRemoveEntries=rlCopyMessagesTableRemoveEntries, rlCopyHistoryInetUpTime=rlCopyHistoryInetUpTime, rlCopyBytesTransferred=rlCopyBytesTransferred, rlCopySWToUnits=rlCopySWToUnits, rlCopySWFinished=rlCopySWFinished, rlCopyInetSourceFileType=rlCopyInetSourceFileType, rlCopyHistoryUpTime=rlCopyHistoryUpTime, rlCopyDestinationFileName=rlCopyDestinationFileName, rlCopyFinished=rlCopyFinished, rlCopyHistoryInetRowStatus=rlCopyHistoryInetRowStatus, rlCopyHistoryInetInBackground=rlCopyHistoryInetInBackground, rlCopyMirrorEnable=rlCopyMirrorEnable, rlCopySourceUnitNumber=rlCopySourceUnitNumber, rlCopyHistoryInetDestinationUnitList=rlCopyHistoryInetDestinationUnitList, RlCopyLocationType=RlCopyLocationType, rlCopyInetHistoryIndex=rlCopyInetHistoryIndex, rlCopyHistoryInetDestinationIpAddressType=rlCopyHistoryInetDestinationIpAddressType, rlCopyHistoryInetOperationState=rlCopyHistoryInetOperationState, rlCopyInetEntry=rlCopyInetEntry, rlCopyHistorySourceFileType=rlCopyHistorySourceFileType, rlCopyHistoryDestinationFileName=rlCopyHistoryDestinationFileName, rlCopyDestinationLocation=rlCopyDestinationLocation, rlCopyInetApplicationId=rlCopyInetApplicationId, rlCopyHistoryErrorMessage=rlCopyHistoryErrorMessage, rlCopyHistoryDestinationLocation=rlCopyHistoryDestinationLocation, rlCopyHistoryEntry=rlCopyHistoryEntry, rlCopyUpTime=rlCopyUpTime, rlCopyHistoryInetTable=rlCopyHistoryInetTable, rlCopyMessagesStatus=rlCopyMessagesStatus, rlCopyDestinationFileType=rlCopyDestinationFileType, rlCopyHistoryInetDestinationFileName=rlCopyHistoryInetDestinationFileName, rlCopyInetSourceLocation=rlCopyInetSourceLocation, rlCopyInetBytesTransferred=rlCopyInetBytesTransferred, rlCopyHistoryInetDestinationLocation=rlCopyHistoryInetDestinationLocation, rlCopyHistoryHistoryIndex=rlCopyHistoryHistoryIndex, rlCopyHistorySourceFileName=rlCopyHistorySourceFileName, RlCopyApplicationType=RlCopyApplicationType, rlCopyHistoryInBackground=rlCopyHistoryInBackground, rlCopyHistoryInetSourceIpAddress=rlCopyHistoryInetSourceIpAddress, rlCopyHistoryInetDestinationUnitNumber=rlCopyHistoryInetDestinationUnitNumber, rlCopyInetSourceIpAddress=rlCopyInetSourceIpAddress, rlCopyOptionsIndex=rlCopyOptionsIndex, rlCopyMibVersion=rlCopyMibVersion, rlCopyDestinationUnitNumber=rlCopyDestinationUnitNumber, rlCopyStaticDowngradeStatus=rlCopyStaticDowngradeStatus, rlCopyHistoryDestinationFileType=rlCopyHistoryDestinationFileType, rlCopyInetDestinationIpAddressType=rlCopyInetDestinationIpAddressType, rlCopyInetIndex=rlCopyInetIndex, rlCopyApplicationId=rlCopyApplicationId, rlCopyHistoryInetSourceFileName=rlCopyHistoryInetSourceFileName, rlCopyHistoryInetBytesTransferred=rlCopyHistoryInetBytesTransferred, rlCopyInetUnitStatusList=rlCopyInetUnitStatusList, rlCopyOperationState=rlCopyOperationState, rlCopyOptionsEntry=rlCopyOptionsEntry, rlCopyInetSourceFileName=rlCopyInetSourceFileName, rlCopySourceIpAddress=rlCopySourceIpAddress, rlCopyHistoryInetHistoryIndex=rlCopyHistoryInetHistoryIndex, rlCopySourceFileName=rlCopySourceFileName, rlCopyInetDestinationLocation=rlCopyInetDestinationLocation, rlCopyInetInBackground=rlCopyInetInBackground, rlCopyHistoryOperationState=rlCopyHistoryOperationState, RlCopySecSdAccessType=RlCopySecSdAccessType, rlCopyMirrorFileIllegal=rlCopyMirrorFileIllegal, rlCopyHistorySourceIpAddress=rlCopyHistorySourceIpAddress, rlCopyDestinationIpAddress=rlCopyDestinationIpAddress, rlCopyInBackground=rlCopyInBackground, rlCopyFreeHistoryIndex=rlCopyFreeHistoryIndex, rlCopyMessagesEntry=rlCopyMessagesEntry, rlCopyInetSourceIpAddressType=rlCopyInetSourceIpAddressType, rlCopyTable=rlCopyTable, rlCopyHistoryInetEntry=rlCopyHistoryInetEntry, rlCopyInetDestinationIpAddress=rlCopyInetDestinationIpAddress, rlCopySourceFileType=rlCopySourceFileType, rlCopyHistoryIndex=rlCopyHistoryIndex, rlCopyHistoryInetSourceUnitNumber=rlCopyHistoryInetSourceUnitNumber, rlCopyHistoryInetApplicationId=rlCopyHistoryInetApplicationId)
