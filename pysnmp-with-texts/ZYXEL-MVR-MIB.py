#
# PySNMP MIB module ZYXEL-MVR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZYXEL-MVR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:51:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
dot1dBasePort, = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBasePort")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, ObjectIdentity, Integer32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Counter64, Gauge32, ModuleIdentity, Unsigned32, iso, TimeTicks, Bits, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "ObjectIdentity", "Integer32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Counter64", "Gauge32", "ModuleIdentity", "Unsigned32", "iso", "TimeTicks", "Bits", "NotificationType")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
esMgmt, = mibBuilder.importSymbols("ZYXEL-ES-SMI", "esMgmt")
zyxelMvr = ModuleIdentity((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 55))
if mibBuilder.loadTexts: zyxelMvr.setLastUpdated('201207010000Z')
if mibBuilder.loadTexts: zyxelMvr.setOrganization('Enterprise Solution ZyXEL')
if mibBuilder.loadTexts: zyxelMvr.setContactInfo('')
if mibBuilder.loadTexts: zyxelMvr.setDescription('The subtree for Multicast VLAN Registration (MVR)')
zyxelMvrSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 55, 1))
zyMvrMaxNumberOfVlans = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 55, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyMvrMaxNumberOfVlans.setStatus('current')
if mibBuilder.loadTexts: zyMvrMaxNumberOfVlans.setDescription('The maximum number of multicast VLAN registration (MVR) VLAN entries that can be created.')
zyxelMvrTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 55, 1, 2), )
if mibBuilder.loadTexts: zyxelMvrTable.setStatus('current')
if mibBuilder.loadTexts: zyxelMvrTable.setDescription('The table contains multicast VLAN registration (MVR) configuration.')
zyxelMvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 55, 1, 2, 1), ).setIndexNames((0, "ZYXEL-MVR-MIB", "zyMvrVid"))
if mibBuilder.loadTexts: zyxelMvrEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelMvrEntry.setDescription('An entry contains multicast VLAN registration (MVR) configuration.')
zyMvrVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 55, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: zyMvrVid.setStatus('current')
if mibBuilder.loadTexts: zyMvrVid.setDescription('Enter the VLAN ID (1 to 4094) of the multicast VLAN. ')
zyMvrName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 55, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyMvrName.setStatus('current')
if mibBuilder.loadTexts: zyMvrName.setDescription('Enter a descriptive name (up to 32 printable ASCII characters) for identification purposes. ')
zyMvrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 55, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dynamic", 0), ("compatible", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyMvrMode.setStatus('current')
if mibBuilder.loadTexts: zyMvrMode.setDescription('Specify the MVR mode on the Switch. Choices are Dynamic and Compatible. Select Dynamic to send IGMP reports to all MVR source ports in the multicast VLAN. Select Compatible to set the Switch not to send IGMP reports. ')
zyMvr8021pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 55, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyMvr8021pPriority.setStatus('current')
if mibBuilder.loadTexts: zyMvr8021pPriority.setDescription('Select a priority level (0-7) with which the Switch replaces the priority in outgoing IGMP control packets (belonging to this multicast VLAN).')
zyMvrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 55, 1, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zyMvrRowStatus.setStatus('current')
if mibBuilder.loadTexts: zyMvrRowStatus.setDescription('This object allows entries to be created and deleted from the Multicast VLAN Registration (MVR) table.')
zyxelMvrPortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 55, 1, 3), )
if mibBuilder.loadTexts: zyxelMvrPortTable.setStatus('current')
if mibBuilder.loadTexts: zyxelMvrPortTable.setDescription('The table contains multicast VLAN registration (MVR) port configuration.')
zyxelMvrPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 55, 1, 3, 1), ).setIndexNames((0, "ZYXEL-MVR-MIB", "zyMvrVid"), (0, "BRIDGE-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: zyxelMvrPortEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelMvrPortEntry.setDescription('An entry contains multicast VLAN registration (MVR) port configuration.')
zyMvrPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 55, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("sourcePort", 2), ("receiverPort", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyMvrPortRole.setStatus('current')
if mibBuilder.loadTexts: zyMvrPortRole.setDescription('Specify the roles on the port. None(1), Set the port not to participate in MVR. No MVR multicast traffic is sent or received on this port. Source Port(2), Set the port as the MVR source port that sends and receives multicast traffic. All source ports must belong to a single multicast VLAN. Receiver Port(3), Set the port as a receiver port that only receives multicast traffic.')
zyMvrPortTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 55, 1, 3, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyMvrPortTagging.setStatus('current')
if mibBuilder.loadTexts: zyMvrPortTagging.setDescription('Enable/Disable this port to tag the VLAN ID on all the outgoing frames.')
zyMvrMaxNumberOfGroups = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 55, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyMvrMaxNumberOfGroups.setStatus('current')
if mibBuilder.loadTexts: zyMvrMaxNumberOfGroups.setDescription('The maximum number of Multicast VLAN Registration (MVR) groups that can be created.')
zyxelMvrGroupTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 55, 1, 5), )
if mibBuilder.loadTexts: zyxelMvrGroupTable.setStatus('current')
if mibBuilder.loadTexts: zyxelMvrGroupTable.setDescription('The table contains multicast VLAN registration (MVR) group configuration.')
zyxelMvrGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 55, 1, 5, 1), ).setIndexNames((0, "ZYXEL-MVR-MIB", "zyMvrVid"), (0, "ZYXEL-MVR-MIB", "zyMvrGroupName"))
if mibBuilder.loadTexts: zyxelMvrGroupEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelMvrGroupEntry.setDescription('An entry contains multicast VLAN registration (MVR) group configuration.')
zyMvrGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 55, 1, 5, 1, 1), DisplayString())
if mibBuilder.loadTexts: zyMvrGroupName.setStatus('current')
if mibBuilder.loadTexts: zyMvrGroupName.setDescription('Enter a descriptive name for identification purposes.')
zyMvrGroupStartIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 55, 1, 5, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyMvrGroupStartIpAddressType.setStatus('current')
if mibBuilder.loadTexts: zyMvrGroupStartIpAddressType.setDescription('The address type of zyxelMvrGroupStartIpAddress.')
zyMvrGroupStartIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 55, 1, 5, 1, 3), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyMvrGroupStartIpAddress.setStatus('current')
if mibBuilder.loadTexts: zyMvrGroupStartIpAddress.setDescription('Enter the starting IP multicast address of the multicast group.')
zyMvrGroupEndIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 55, 1, 5, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyMvrGroupEndIpAddressType.setStatus('current')
if mibBuilder.loadTexts: zyMvrGroupEndIpAddressType.setDescription('The address type of zyxelMvrGroupEndIpAddress.')
zyMvrGroupEndIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 55, 1, 5, 1, 5), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyMvrGroupEndIpAddress.setStatus('current')
if mibBuilder.loadTexts: zyMvrGroupEndIpAddress.setDescription('Enter the ending IP multicast address of the multicast group. Enter the same IP address as the Start Address entry if you want to configure only one IP address for a multicast group.')
zyMvrGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 55, 1, 5, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zyMvrGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: zyMvrGroupRowStatus.setDescription('This object allows entries to be created and deleted from the Multicast VLAN Registration (MVR) group table.')
mibBuilder.exportSymbols("ZYXEL-MVR-MIB", zyMvrGroupName=zyMvrGroupName, zyMvrGroupStartIpAddress=zyMvrGroupStartIpAddress, zyMvrPortRole=zyMvrPortRole, zyMvrGroupEndIpAddressType=zyMvrGroupEndIpAddressType, PYSNMP_MODULE_ID=zyxelMvr, zyMvrGroupStartIpAddressType=zyMvrGroupStartIpAddressType, zyMvrPortTagging=zyMvrPortTagging, zyMvrName=zyMvrName, zyMvr8021pPriority=zyMvr8021pPriority, zyMvrRowStatus=zyMvrRowStatus, zyMvrMaxNumberOfVlans=zyMvrMaxNumberOfVlans, zyMvrVid=zyMvrVid, zyxelMvrPortTable=zyxelMvrPortTable, zyxelMvr=zyxelMvr, zyMvrMode=zyMvrMode, zyMvrGroupRowStatus=zyMvrGroupRowStatus, zyxelMvrTable=zyxelMvrTable, zyxelMvrEntry=zyxelMvrEntry, zyxelMvrGroupTable=zyxelMvrGroupTable, zyxelMvrGroupEntry=zyxelMvrGroupEntry, zyMvrGroupEndIpAddress=zyMvrGroupEndIpAddress, zyxelMvrSetup=zyxelMvrSetup, zyxelMvrPortEntry=zyxelMvrPortEntry, zyMvrMaxNumberOfGroups=zyMvrMaxNumberOfGroups)
