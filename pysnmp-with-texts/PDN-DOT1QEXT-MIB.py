#
# PySNMP MIB module PDN-DOT1QEXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PDN-DOT1QEXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:38:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
pdn_dot1q, = mibBuilder.importSymbols("PDN-HEADER-MIB", "pdn-dot1q")
TblCmd, = mibBuilder.importSymbols("PDN-TC", "TblCmd")
dot1qVlanStaticEntry, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "dot1qVlanStaticEntry")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Bits, Unsigned32, ObjectIdentity, Integer32, TimeTicks, ModuleIdentity, NotificationType, Counter32, iso, Gauge32, MibIdentifier, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Unsigned32", "ObjectIdentity", "Integer32", "TimeTicks", "ModuleIdentity", "NotificationType", "Counter32", "iso", "Gauge32", "MibIdentifier", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
pdnDot1qExt = ModuleIdentity((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 39, 1))
pdnDot1qExt.setRevisions(('2005-07-26 00:00', '2003-11-12 00:00', '2002-11-30 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: pdnDot1qExt.setRevisionsDescriptions((' o Added objects for VLAN stacking (Q in Q) ', ' o Added table that maps Bridge Ports (Dot1dBasePort) with Priorities (PIWG). o Added a new object to clear the Bridge Forwarding Table.', 'DG Changed INTEGER to Integer32 in Uplink object SYNTAX Added default values for uplink and nhr in case SecureMode is disabled.',))
if mibBuilder.loadTexts: pdnDot1qExt.setLastUpdated('200507260000Z')
if mibBuilder.loadTexts: pdnDot1qExt.setOrganization('Paradyne Corp MIB Working Group')
if mibBuilder.loadTexts: pdnDot1qExt.setContactInfo('Paradyne Networks, Inc. 8545, 126th Ave. N., Largo, FL 33779 www.paradyne.com General Comments to: mibwg_team@paradyne.com Editors: Dragana Gough Jesus A. Pinto Dave Hammers')
if mibBuilder.loadTexts: pdnDot1qExt.setDescription('The Paradyne enterprise DOT1q extension MIB. This MIB provides additional DOT1q configuration objects not provided by rfc2674.')
pdnDot1qExtObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 39, 1, 1))
pdnDot1qVlanStaticExtTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 39, 1, 1, 1), )
if mibBuilder.loadTexts: pdnDot1qVlanStaticExtTable.setStatus('current')
if mibBuilder.loadTexts: pdnDot1qVlanStaticExtTable.setDescription('The Paradyne dot1qVlanStatic extension table. This table is used for configuring extensions to static vlans.')
pdnDot1qVlanStaticExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 39, 1, 1, 1, 1), )
dot1qVlanStaticEntry.registerAugmentions(("PDN-DOT1QEXT-MIB", "pdnDot1qVlanStaticExtEntry"))
pdnDot1qVlanStaticExtEntry.setIndexNames(*dot1qVlanStaticEntry.getIndexNames())
if mibBuilder.loadTexts: pdnDot1qVlanStaticExtEntry.setStatus('current')
if mibBuilder.loadTexts: pdnDot1qVlanStaticExtEntry.setDescription('An entry in the Paradyne dot1q extension to Static Vlan Table')
pdnDot1qVlanStaticSecureModeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 39, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnDot1qVlanStaticSecureModeStatus.setStatus('current')
if mibBuilder.loadTexts: pdnDot1qVlanStaticSecureModeStatus.setDescription('This is objects configure secure mode status for the selected VLAN. The secure VLAN mode implies that the users on this VLAN cannot talk to users on a different VLAN. This setting also validates the configuration of the next three objects in this table. If the pdnDot1qVlanStaticSecureModeStatus is disabled non of the other three objects configurations apply.')
pdnDot1qVlanStaticProxyArpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 39, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnDot1qVlanStaticProxyArpStatus.setStatus('current')
if mibBuilder.loadTexts: pdnDot1qVlanStaticProxyArpStatus.setDescription('This objects enables/disabled proxy arp on secure VLAN. If the VLAN is secure, it can optionally have Proxy ARP enabled. This object is not valid unless pdnDot1qVlanStaticSecureModeStatus is set to ENABLED.This object will be disabled(1) by default.')
pdnDot1qVlanStaticUplink = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 39, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnDot1qVlanStaticUplink.setStatus('current')
if mibBuilder.loadTexts: pdnDot1qVlanStaticUplink.setDescription('This is used to configure the port number of the port on which all frames belonging to secure VLAN are to be forwarded. This object is not valid unless pdnDot1qVlanStaticSecureModeStatus is set to ENABLED. If pdnDot1qVlanStaticSecureModeStatus is disabled this object will read 0 port.')
pdnDot1qVlanStaticDefaultNHR = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 39, 1, 1, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnDot1qVlanStaticDefaultNHR.setStatus('current')
if mibBuilder.loadTexts: pdnDot1qVlanStaticDefaultNHR.setDescription('This object is used to configure Default Next Hop Router Ip Address that would be used only if the Next Hop Router cannot be learned (i.e from snooping messages). This object is not valid unless pdnDot1qVlanStaticSecureModeStatus is set to ENABLED. If pdnDot1qVlanStaticSecureModeStatus is disabled this object will read 0.0.0.0 address.')
pdnDot1qVlanStaticOuterTag = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 39, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnDot1qVlanStaticOuterTag.setStatus('current')
if mibBuilder.loadTexts: pdnDot1qVlanStaticOuterTag.setDescription('When VLAN stacking (Q in Q) is desired, this object contains the value of the outer 802.1q VLAN outer tag. A value of zero (0) indicates that VLAN stacking is not enabled. ')
pdnDot1qVlanStaticOuterDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 39, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnDot1qVlanStaticOuterDefaultPriority.setStatus('current')
if mibBuilder.loadTexts: pdnDot1qVlanStaticOuterDefaultPriority.setDescription('When VLAN stacking (Q in Q) is desired, this object contains the default value of the priority bits in the 802.1q VLAN outer tag for unknown unicast, broadcast and multicast packets. For known unicast traffic, the inner VLAN tag priority is copied to the outer tag priority. If pdnDot1qVlanStaticOuterTag (above) is zero (0) this object is ignored. ')
pdnDot1qVlanStaticOuterEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 39, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(33024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnDot1qVlanStaticOuterEthertype.setStatus('current')
if mibBuilder.loadTexts: pdnDot1qVlanStaticOuterEthertype.setDescription('When VLAN stacking (Q in Q) is desired, this object contains the value of the ethertype in the 802.1q VLAN outer tag. If pdnDot1qVlanStaticOuterTag (above) is zero (0) this object is ignored. ')
pdnDot1BasePortPIWGTable = MibTable((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 39, 1, 1, 2), )
if mibBuilder.loadTexts: pdnDot1BasePortPIWGTable.setStatus('current')
if mibBuilder.loadTexts: pdnDot1BasePortPIWGTable.setDescription('This table allows mapping of Bridge Ports and Priorities. In General, every bridge port has an associated physical port port (identified by its ifIndex). This relationship is defined in the Dot1dBasePortTable (RFC1493). In addition, each bridge port is associated with one priority (PIWG) from a range of valid priorities. This table defines this relationship. The range of priorities can vary from product to product. ')
pdnDot1BasePortPIWGEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 39, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "PDN-DOT1QEXT-MIB", "pdnDot1BasePort"))
if mibBuilder.loadTexts: pdnDot1BasePortPIWGEntry.setStatus('current')
if mibBuilder.loadTexts: pdnDot1BasePortPIWGEntry.setDescription('The priority (PIWG) defined on a Bridge port.')
pdnDot1BasePort = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 39, 1, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: pdnDot1BasePort.setStatus('current')
if mibBuilder.loadTexts: pdnDot1BasePort.setDescription('This object specifies the bridge port associated with this PIWG')
pdnDot1BasePortPIWGId = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 39, 1, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnDot1BasePortPIWGId.setStatus('current')
if mibBuilder.loadTexts: pdnDot1BasePortPIWGId.setDescription('This is the integer identifier of the priority (PIWG)')
pdnDot1BasePortPIWGCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 39, 1, 1, 2, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdnDot1BasePortPIWGCircuit.setStatus('current')
if mibBuilder.loadTexts: pdnDot1BasePortPIWGCircuit.setDescription('This is the object identifier of the priority (PIWG), The value of this object must be a valid identifier defined under the Paradyne Enterprise Definitions (pdn_Header.mib). ')
pdnDot1TpFdbClear = MibScalar((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 39, 1, 1, 3), TblCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdnDot1TpFdbClear.setStatus('current')
if mibBuilder.loadTexts: pdnDot1TpFdbClear.setDescription("This object is used to perform a clear on the Bridge Forwarding Table (dot1dTpFdbTable). A set operation to this object with the value of 'clear (2)' will clear the entire Bridge Forwarding Table. A get operation will always return the value of 'noCmd (1)'. ")
pdnDot1qExtConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 39, 1, 2))
pdnDot1qExtGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 39, 1, 2, 1))
pdnDot1qExtCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 39, 1, 2, 2))
pdnDot1qExtCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 39, 1, 2, 2, 1)).setObjects(("PDN-DOT1QEXT-MIB", "pdnDot1qVlanExtGroup"), ("PDN-DOT1QEXT-MIB", "pdnDot1BasePortPIWGGroup"), ("PDN-DOT1QEXT-MIB", "pdnDot1GeneralGroup"), ("PDN-DOT1QEXT-MIB", "pdnDot1dVlanStackingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnDot1qExtCompliance = pdnDot1qExtCompliance.setStatus('current')
if mibBuilder.loadTexts: pdnDot1qExtCompliance.setDescription('Compliance statement for using this MIB for configuring Dot1q Static Vlan table.')
pdnDot1qVlanExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 39, 1, 2, 1, 1)).setObjects(("PDN-DOT1QEXT-MIB", "pdnDot1qVlanStaticSecureModeStatus"), ("PDN-DOT1QEXT-MIB", "pdnDot1qVlanStaticProxyArpStatus"), ("PDN-DOT1QEXT-MIB", "pdnDot1qVlanStaticUplink"), ("PDN-DOT1QEXT-MIB", "pdnDot1qVlanStaticDefaultNHR"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnDot1qVlanExtGroup = pdnDot1qVlanExtGroup.setStatus('current')
if mibBuilder.loadTexts: pdnDot1qVlanExtGroup.setDescription('A collection of configuration objects required for configuring Static Vlan Table.')
pdnDot1BasePortPIWGGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 39, 1, 2, 1, 2)).setObjects(("PDN-DOT1QEXT-MIB", "pdnDot1BasePortPIWGId"), ("PDN-DOT1QEXT-MIB", "pdnDot1BasePortPIWGCircuit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnDot1BasePortPIWGGroup = pdnDot1BasePortPIWGGroup.setStatus('current')
if mibBuilder.loadTexts: pdnDot1BasePortPIWGGroup.setDescription('A collection of read-only objects to provide associations between bridge ports and priorities.')
pdnDot1GeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 39, 1, 2, 1, 3)).setObjects(("PDN-DOT1QEXT-MIB", "pdnDot1TpFdbClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnDot1GeneralGroup = pdnDot1GeneralGroup.setStatus('current')
if mibBuilder.loadTexts: pdnDot1GeneralGroup.setDescription('This group is optional, but if suppported it should be read-writtable.')
pdnDot1dVlanStackingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1795, 2, 24, 2, 39, 1, 2, 1, 4)).setObjects(("PDN-DOT1QEXT-MIB", "pdnDot1qVlanStaticOuterTag"), ("PDN-DOT1QEXT-MIB", "pdnDot1qVlanStaticOuterDefaultPriority"), ("PDN-DOT1QEXT-MIB", "pdnDot1qVlanStaticOuterEthertype"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pdnDot1dVlanStackingGroup = pdnDot1dVlanStackingGroup.setStatus('current')
if mibBuilder.loadTexts: pdnDot1dVlanStackingGroup.setDescription('Provides the ability to configure VLAN Stacking (Q in Q) parameters.')
mibBuilder.exportSymbols("PDN-DOT1QEXT-MIB", pdnDot1qVlanStaticProxyArpStatus=pdnDot1qVlanStaticProxyArpStatus, pdnDot1BasePortPIWGTable=pdnDot1BasePortPIWGTable, pdnDot1qExtCompliances=pdnDot1qExtCompliances, pdnDot1qExtObjects=pdnDot1qExtObjects, pdnDot1BasePortPIWGId=pdnDot1BasePortPIWGId, pdnDot1qVlanStaticOuterDefaultPriority=pdnDot1qVlanStaticOuterDefaultPriority, pdnDot1qExt=pdnDot1qExt, pdnDot1BasePort=pdnDot1BasePort, pdnDot1qVlanStaticOuterEthertype=pdnDot1qVlanStaticOuterEthertype, pdnDot1qExtCompliance=pdnDot1qExtCompliance, pdnDot1qExtGroups=pdnDot1qExtGroups, pdnDot1BasePortPIWGGroup=pdnDot1BasePortPIWGGroup, pdnDot1TpFdbClear=pdnDot1TpFdbClear, pdnDot1qVlanExtGroup=pdnDot1qVlanExtGroup, pdnDot1qVlanStaticDefaultNHR=pdnDot1qVlanStaticDefaultNHR, pdnDot1GeneralGroup=pdnDot1GeneralGroup, pdnDot1qVlanStaticExtEntry=pdnDot1qVlanStaticExtEntry, pdnDot1dVlanStackingGroup=pdnDot1dVlanStackingGroup, pdnDot1BasePortPIWGEntry=pdnDot1BasePortPIWGEntry, pdnDot1qVlanStaticExtTable=pdnDot1qVlanStaticExtTable, PYSNMP_MODULE_ID=pdnDot1qExt, pdnDot1BasePortPIWGCircuit=pdnDot1BasePortPIWGCircuit, pdnDot1qExtConformance=pdnDot1qExtConformance, pdnDot1qVlanStaticSecureModeStatus=pdnDot1qVlanStaticSecureModeStatus, pdnDot1qVlanStaticUplink=pdnDot1qVlanStaticUplink, pdnDot1qVlanStaticOuterTag=pdnDot1qVlanStaticOuterTag)
