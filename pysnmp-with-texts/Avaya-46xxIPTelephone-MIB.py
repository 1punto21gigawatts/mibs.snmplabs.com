#
# PySNMP MIB module Avaya-46xxIPTelephone-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Avaya-46xxIPTelephone-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:33:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, IpAddress, Integer32, Gauge32, TimeTicks, Unsigned32, MibIdentifier, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, ModuleIdentity, iso, NotificationType, Counter32, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "IpAddress", "Integer32", "Gauge32", "TimeTicks", "Unsigned32", "MibIdentifier", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "ModuleIdentity", "iso", "NotificationType", "Counter32", "enterprises")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
endpointMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1))
if mibBuilder.loadTexts: endpointMIB.setLastUpdated('0612052000Z')
if mibBuilder.loadTexts: endpointMIB.setOrganization('avaya')
if mibBuilder.loadTexts: endpointMIB.setContactInfo('Avaya Customer Services Avaya, Inc. 211 Mt. Airy Road Basking Ridge, NJ 07920 USA WWW: www.avaya.com Tel: +1 908 953 6000')
if mibBuilder.loadTexts: endpointMIB.setDescription('MIB Module for 46xx IP Telephones through Release 2.8 in accordance with 46xx Common Requirements COMPAS 75441, Issue 2.8. Copyright 2006 by Avaya Inc. All rights reserved.')
avaya = MibIdentifier((1, 3, 6, 1, 4, 1, 6889))
avayaProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 1))
avayaMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2))
avayaipEndpointProd = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 1, 69))
avayaipEndpointMIBs = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 69))
endptID = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1))
endptMARKET = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptMARKET.setStatus('obsolete')
if mibBuilder.loadTexts: endptMARKET.setDescription("ID designation. This variable returns a string specifying 'domestic' or 'export'.")
endptMODEL = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptMODEL.setStatus('current')
if mibBuilder.loadTexts: endptMODEL.setDescription('Model identifier. This variable returns a string of up to 8 ASCII characters.')
endptMCIPADD = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptMCIPADD.setStatus('current')
if mibBuilder.loadTexts: endptMCIPADD.setDescription('List of call server addresses. This variable returns a sequence of IP addresses, in dotted-decimal orDNS format and separated by commas, of call server IP addresses available for use.')
endptMCIPINUSE = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptMCIPINUSE.setStatus('current')
if mibBuilder.loadTexts: endptMCIPINUSE.setDescription('Call server address. This variable returns a 4-octet string specifying the IP address of the call server currently in use.')
endptMCPORT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptMCPORT.setStatus('current')
if mibBuilder.loadTexts: endptMCPORT.setDescription('Transport layer port number. This variable returns an integer specifying the port number in use by the current call server.')
endptPHONESN = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptPHONESN.setStatus('current')
if mibBuilder.loadTexts: endptPHONESN.setDescription("Housing serial number. This variable returns a string of up to 18 ASCII characters, specifying the serial number on the outside of the endpoint's housing.")
endptPWBCC = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptPWBCC.setStatus('current')
if mibBuilder.loadTexts: endptPWBCC.setDescription('PWB comcode. This variable returns a string of up to 9 numerical characters, specifying the comcode or version number of the printed wiring board of the endpoint.')
endptPWBSN = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptPWBSN.setStatus('current')
if mibBuilder.loadTexts: endptPWBSN.setDescription("PWB serial number. This variable returns a string of up to 18 ASCII characters, specifying the serial number on the endpoint's printed wiring board, or N/A if the board has no serial number.")
endptETHERADD = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptETHERADD.setStatus('current')
if mibBuilder.loadTexts: endptETHERADD.setDescription("MAC address. This variable returns a 6-octet string specifying the endpoint's MAC address.")
endptESPEED = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptESPEED.setStatus('current')
if mibBuilder.loadTexts: endptESPEED.setDescription("Ethernet interface speed. This variable returns a string specifying the endpoint's Ethernet interface speed in Mbps: '100', '10', or '0'.")
endptIPADD = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptIPADD.setStatus('current')
if mibBuilder.loadTexts: endptIPADD.setDescription("IP address. This variable returns a 4-octet string specifying the endpoint's current IP address.")
endptDHCPLEASETIME = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDHCPLEASETIME.setStatus('current')
if mibBuilder.loadTexts: endptDHCPLEASETIME.setDescription('Duration of IPADD lease. This variable returns an unsigned integer specifying the length of time of the IPADD lease, in seconds as received by DHCP option 51.')
endptDHCPLEASERENEW = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDHCPLEASERENEW.setStatus('current')
if mibBuilder.loadTexts: endptDHCPLEASERENEW.setDescription('Renewal time of IPADD lease. This variable returns an unsigned integer specifying the length of time at which to renew the IPADD lease, in seconds as received by DHCP option 58.')
endptDHCPLEASEREBIND = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDHCPLEASEREBIND.setStatus('current')
if mibBuilder.loadTexts: endptDHCPLEASEREBIND.setDescription('Rebind time of IPADD lease. This variable returns an unsigned integer specifying the length of time at which to rebind the IPADD lease, in seconds as received by DHCP option 59.')
endptGIPADD = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptGIPADD.setStatus('current')
if mibBuilder.loadTexts: endptGIPADD.setDescription('List of router addresses. This variable returns a sequence of IP addresses, in dotted-decimal format and separated by commas, of routers available for use.')
endptGIPINUSE = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 16), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptGIPINUSE.setStatus('current')
if mibBuilder.loadTexts: endptGIPINUSE.setDescription('Router address. This variable returns a 4-octet string specifying the IP address of the router currently in use.')
endptNETMASK = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 17), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNETMASK.setStatus('current')
if mibBuilder.loadTexts: endptNETMASK.setDescription('Subnet mask. This variable returns a 4-octet string specifying the subnet mask currently in use.')
endptTFTPDIR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptTFTPDIR.setStatus('current')
if mibBuilder.loadTexts: endptTFTPDIR.setDescription('TFTP server path name. This variable returns a string of 0-127 ASCII characters, specifying the path name currently prepended to file names used in TFTP read operations.')
endptTFTPSRVR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptTFTPSRVR.setStatus('current')
if mibBuilder.loadTexts: endptTFTPSRVR.setDescription('List of TFTP server addresses. This variable returns a sequence of IP addresses, in dotted-decimal orDNS format and separated by commas, of TFTP servers available for use.')
endptTFTPINUSE = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptTFTPINUSE.setStatus('current')
if mibBuilder.loadTexts: endptTFTPINUSE.setDescription('TFTP server address. This variable returns a 4-octet string specifying the IP address of the TFTP server currently in use (or all zeroes if no server used successfully during initialization).')
endptBOOTNAME = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptBOOTNAME.setStatus('current')
if mibBuilder.loadTexts: endptBOOTNAME.setDescription('Boot code file ID. This variable returns a string specifying the boot code file used to initiate telephone operation.')
endptAPPNAME = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptAPPNAME.setStatus('current')
if mibBuilder.loadTexts: endptAPPNAME.setDescription('Application file ID. This variable returns a string specifying the system-specific application file that should be used for telephone operation.')
endptSSON = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptSSON.setStatus('obsolete')
if mibBuilder.loadTexts: endptSSON.setDescription('Site-specific option number (SSON). This variable returns an integer between 128 and 254 inclusive, specifying the SSON in use. The default is 176.')
endptBBURST = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptBBURST.setStatus('obsolete')
if mibBuilder.loadTexts: endptBBURST.setDescription('Blackburst flag. This variable returns 0 if Blackburst is currently OFF, else 1.')
endptHUBSTAT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptHUBSTAT.setStatus('obsolete')
if mibBuilder.loadTexts: endptHUBSTAT.setDescription('Hub flag. This variable has been superseded by endptPHY2STAT.')
endptDSCPAUD = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDSCPAUD.setStatus('current')
if mibBuilder.loadTexts: endptDSCPAUD.setDescription('DSCP for audio. This variable specifies the Differentiated Services Code Point for audio currently in use (between 0 and 63 inclusive).')
endptDSCPSIG = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDSCPSIG.setStatus('current')
if mibBuilder.loadTexts: endptDSCPSIG.setDescription(' DSCP for signaling. This variable specifies the Differentiated Services Code Point for signaling currently in use (between 0 and 63 inclusive).')
endptL2Q = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptL2Q.setStatus('current')
if mibBuilder.loadTexts: endptL2Q.setDescription("802.1Q framing flag. This variable returns 0 if the Layer 2 802.1Q framing parameter is set to 'auto', 1 if it is set to on/enabled, else 2 for off/disabled.")
endptL2QAUD = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptL2QAUD.setStatus('current')
if mibBuilder.loadTexts: endptL2QAUD.setDescription('Audio priority. This variable returns an integer between 0 and 7 inclusive specifying the current Layer 2 802.1Q audio priority value.')
endptL2QSIG = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptL2QSIG.setStatus('current')
if mibBuilder.loadTexts: endptL2QSIG.setDescription('Signaling priority. This variable returns an integer between 0 and 7 inclusive specifying the current Layer 2 802.1Q signaling priority value.')
endptL2QVLAN = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptL2QVLAN.setStatus('current')
if mibBuilder.loadTexts: endptL2QVLAN.setDescription('Telephone VLAN Identifier. This variable returns an integer between 0 and 4094 inclusive specifying the current Layer 2 802.1Q VLAN Identifier value.')
endpt46XXUPGR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endpt46XXUPGR.setStatus('current')
if mibBuilder.loadTexts: endpt46XXUPGR.setDescription('Upgrade script ID. This variable returns a string of up to 16 ASCII characters specifying the name of the upgrade script retrieved by TFTP after the most recent power-up or reset.')
endptDNSSRVR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDNSSRVR.setStatus('current')
if mibBuilder.loadTexts: endptDNSSRVR.setDescription('List of DNS server addresses. This variable returns a sequence of IP addresses, in dotted-decimal format and separated by commas, of DNS servers available for use.')
endptDNSINUSE = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 34), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDNSINUSE.setStatus('obsolete')
if mibBuilder.loadTexts: endptDNSINUSE.setDescription('DNS server address. This variable returns a 4-octet string specifying the IP address of the DNS server currently in use.')
endptDOMAIN = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDOMAIN.setStatus('current')
if mibBuilder.loadTexts: endptDOMAIN.setDescription('List of DNS domain labels. This variable returns a sequence of labels, separated by periods, for use as the highest-level domain in resolving DNS names in system values.')
endptRTCPMON = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 36), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptRTCPMON.setStatus('current')
if mibBuilder.loadTexts: endptRTCPMON.setDescription('RTCP Monitor address. This variable returns a 4-octet string specifying the IP address of the RTCP monitor currently in use.')
endptPHY2STAT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptPHY2STAT.setStatus('current')
if mibBuilder.loadTexts: endptPHY2STAT.setDescription("Secondary Ethernet interface setting. This variable returns 0 if the endpoint's secondary Ethernet interface is currently NOT enabled (or none exists), 1 if the hub is setfor auto-negotiation, 2 for 10Mbps half-duplex, 3 for 10Mbps full-duplex, 4 for 100Mbps half-duplex, and 5 for 100Mbps full-duplex.")
endptIRSTAT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptIRSTAT.setStatus('current')
if mibBuilder.loadTexts: endptIRSTAT.setDescription("IR Interface flag. This variable returns 0 if the endpoint's IR interface is currently NOT enabled, else 1.")
endptSMTPSRVR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 39), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptSMTPSRVR.setStatus('current')
if mibBuilder.loadTexts: endptSMTPSRVR.setDescription('SMTP server IP addresses. This variable returns a comma-separated list of SMTP server IP addresses available for use, in dotted-decimal or DNS format.')
endptDSPVERSION = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 40), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDSPVERSION.setStatus('current')
if mibBuilder.loadTexts: endptDSPVERSION.setDescription('DSP Version. This variable returns a string of up to 10 characters, that identifies the version of the DSP firmware in the endpoint.')
endptLOGSRVR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 41), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptLOGSRVR.setStatus('current')
if mibBuilder.loadTexts: endptLOGSRVR.setDescription('Event Log server address. This variable returns at most one IP address, in dotted-decimal or DNS format, of the server to be used for event logging. This function is intended for Avaya use, in debugging if necessary.')
endptLOGSTAT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptLOGSTAT.setStatus('obsolete')
if mibBuilder.loadTexts: endptLOGSTAT.setDescription("Event Log flag. This variable returns 0 if the endpoint's event logging capability is currently NOT enabled, else 1. This function is intended for Avaya use, in debugging if necessary.")
endptAGCHAND = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptAGCHAND.setStatus('current')
if mibBuilder.loadTexts: endptAGCHAND.setDescription("Handset AGC status. This variable returns 1 if the endpoint's handset Automatic Gain Control capability is currently enabled, else 0.")
endptAGCHEAD = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptAGCHEAD.setStatus('current')
if mibBuilder.loadTexts: endptAGCHEAD.setDescription("Headset AGC status. This variable returns 1 if the endpoint's headset Automatic Gain Control capability is currently enabled, else 0.")
endptPHY1STAT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptPHY1STAT.setStatus('current')
if mibBuilder.loadTexts: endptPHY1STAT.setDescription("Ethernet line interface status. This variable returns 0 if the endpoint's Ethernet line interface is currently NOT enabled, 1 if the Ethernet line interface is currently for auto-negotiation, 2 for 10Mbps half-duplex, 3 for 10Mbps full-duplex, 4 for 100Mbps half-duplex, and 5 for 100Mbps full-duplex.")
endptL2QSTAT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptL2QSTAT.setStatus('current')
if mibBuilder.loadTexts: endptL2QSTAT.setDescription('802.1Q tagging flag. This variable returns 0 if the Layer 2 802.1Q tagging parameter is currently OFF, else 1.')
endptVLANTEST = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptVLANTEST.setStatus('obsolete')
if mibBuilder.loadTexts: endptVLANTEST.setDescription('VLAN pause parameter. This variable returns the number of seconds for the endpoint to wait for a DHCPOFFER message when using a non-zero VLAN ID. Valid values are integers from 0 to 999 inclusive.')
endptPHONECC = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 48), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptPHONECC.setStatus('current')
if mibBuilder.loadTexts: endptPHONECC.setDescription('Phone comcode. This variable returns a string of up to 9 numerical characters, specifying the comcode of the endpoint itself.')
endptVLANLIST = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 49), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptVLANLIST.setStatus('current')
if mibBuilder.loadTexts: endptVLANLIST.setDescription('VLAN ID list. This variable returns a list of zero or more VLAN IDs.')
endptAGCSPKR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptAGCSPKR.setStatus('current')
if mibBuilder.loadTexts: endptAGCSPKR.setDescription("Speakerphone AGC status. This variable returns 1 if the endpoint's speakerphone Automatic Gain Control capability is currently enabled, else 0.")
endptHTTPSRVR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 51), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptHTTPSRVR.setStatus('current')
if mibBuilder.loadTexts: endptHTTPSRVR.setDescription('HTTP server IP addresses. This variable returns a comma-separated list of HTTP server IP addresses available for use, in dotted-decimal or DNS format.')
endptHTTPDIR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 52), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptHTTPDIR.setStatus('current')
if mibBuilder.loadTexts: endptHTTPDIR.setDescription('HTTP server Directory. This variable returns the path used in formation of the URI for HTTP GET operations.')
endptHTTPPORT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptHTTPPORT.setStatus('current')
if mibBuilder.loadTexts: endptHTTPPORT.setDescription('HTTP TCP port number. This variable returns the TCP port number used by HTTP during initialization.')
endptHTTPUSED = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 54), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptHTTPUSED.setStatus('current')
if mibBuilder.loadTexts: endptHTTPUSED.setDescription('HTTP initialization server IP address. This variable returns a 4-octet IP address for the HTTP server used during initialization (all zeroes if no server successfully used during initialization).')
endptPROCSTAT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptPROCSTAT.setStatus('current')
if mibBuilder.loadTexts: endptPROCSTAT.setDescription('Local Procedure flag. This variable returns 0 if Local Procedures are currently allowed for this telephone, else 1.')
endptPROCPSWD = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptPROCPSWD.setStatus('current')
if mibBuilder.loadTexts: endptPROCPSWD.setDescription('Local Procedure Password. This variable returns 0 if the Local Procedure Password is null, else 1.')
endptSIG = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptSIG.setStatus('current')
if mibBuilder.loadTexts: endptSIG.setDescription('Signaling protocol download flag. This variable returns the integer corresponding to the current signaling protocol.')
endptGROUP = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptGROUP.setStatus('current')
if mibBuilder.loadTexts: endptGROUP.setDescription('Group identifier. This variable returns the integer corresponding to the current group identifier.')
endptSNMPADD = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 59), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptSNMPADD.setStatus('current')
if mibBuilder.loadTexts: endptSNMPADD.setDescription('SNMP source addresses. This variable returns one or more allowable source IP addresses for SNMP queries, in dotted decimal or DNS format.')
endptCODESRVR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 60), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptCODESRVR.setStatus('obsolete')
if mibBuilder.loadTexts: endptCODESRVR.setDescription('HTTP server addresses. This variable returns zero or more HTTP server addresses for software download, in dotted decimal or DNS format.')
endptCODEUSED = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 61), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptCODEUSED.setStatus('obsolete')
if mibBuilder.loadTexts: endptCODEUSED.setDescription('HTTP server address used. This variable returns the HTTP server address from CODESRVR used, if any, during initialization, or all zeroes if no HTTP server was used.')
endptSTATIC = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptSTATIC.setStatus('current')
if mibBuilder.loadTexts: endptSTATIC.setDescription('Static programming override flag. This variable returns the integer corresponding to the current level of override permissions for static programming.')
endptTLSSRVR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 63), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptTLSSRVR.setStatus('current')
if mibBuilder.loadTexts: endptTLSSRVR.setDescription('TLS server addresses. This variable returns zero or more Transport Layer Security server addresses for software download, in dotted decimal or DNS format.')
endptTLSUSED = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 64), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptTLSUSED.setStatus('current')
if mibBuilder.loadTexts: endptTLSUSED.setDescription('TLS server address used. This variable returns the TLS server address from TLSSRVR used, if any, during initialization, or all zeroes if no TLS server was used.')
endptCNAPORT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptCNAPORT.setStatus('current')
if mibBuilder.loadTexts: endptCNAPORT.setDescription('Chatter server port. This variable returns the Chatter server registration transport-layer port number (from 0 to 65535; default is 8888).')
endptCNASRVR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 66), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptCNASRVR.setStatus('current')
if mibBuilder.loadTexts: endptCNASRVR.setDescription('CNA server addresses. This variable returns zero or more Chatter server addresses for network analysis, in dotted decimal or DNS format.')
endptDSTOFFSET = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 67), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDSTOFFSET.setStatus('current')
if mibBuilder.loadTexts: endptDSTOFFSET.setDescription('Daylight Savings Time Offset. This variable returns the offset in local time for Daylight Savings Time. Currently used in SIP phones.')
endptDSTSTART = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 68), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDSTSTART.setStatus('current')
if mibBuilder.loadTexts: endptDSTSTART.setDescription('Daylight Savings Time Start. This variable returns the first day or date Daylight Savings Time is effective. Currently used in SIP phones.')
endptDSTSTOP = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 69), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDSTSTOP.setStatus('current')
if mibBuilder.loadTexts: endptDSTSTOP.setDescription('Daylight Savings Time Stop. This variable returns the first day or date after Daylight Savings Time is over. Currently used in SIP phones.')
endptGMTOFFSET = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 70), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptGMTOFFSET.setStatus('current')
if mibBuilder.loadTexts: endptGMTOFFSET.setDescription('Greenwich Mean Time Offset. This variable returns the offset in local time for Greenwich Mean Time. Currently used in SIP phones.')
endptSNTPSRVR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 71), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptSNTPSRVR.setStatus('current')
if mibBuilder.loadTexts: endptSNTPSRVR.setDescription('SNTP server addresses. This variable returns zero or more SNTP server addresses for obtaining time data, in dotted decimal or DNS format. Currently used in SIP phones.')
endptBAKLIGHTOFF = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 72), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptBAKLIGHTOFF.setStatus('current')
if mibBuilder.loadTexts: endptBAKLIGHTOFF.setDescription('Backlight idle timer setting. This variable returns the number of minutes of idle time, after which the telephone backlightis turned off. Range is 0-999, with a default of 120. Used in phones with backlit displays.')
endptDOT1X = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 73), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDOT1X.setStatus('current')
if mibBuilder.loadTexts: endptDOT1X.setDescription('Current value for 802.1X handling. This variable returns 0 if the telephone supports unicast Supplicant operation only, with PAE multicast pass-through without proxy Logoff, 1 if the same as 0 but with proxy Logoff, and 2 if Unicast both unicast or Multicast Supplicant operation, without PAE multicast pass- through, is supported. The default is 0.')
endptAUDIOENV = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptAUDIOENV.setStatus('current')
if mibBuilder.loadTexts: endptAUDIOENV.setDescription('Audio environment selection index. This variable returns the current setting from the audio environment table (from 0 to 107, default is 0).')
endptAUDIOSTHD = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 75), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptAUDIOSTHD.setStatus('current')
if mibBuilder.loadTexts: endptAUDIOSTHD.setDescription('Audio headset sidetone setting. This variable returns the current setting (0, 1, or 2; default is 0).')
endptAUDIOSTHS = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 76), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptAUDIOSTHS.setStatus('current')
if mibBuilder.loadTexts: endptAUDIOSTHS.setDescription('Audio handset sidetone setting. This variable returns the current setting (0, 1, or 2; default is 0).')
endptDHCPINUSE = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 77), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDHCPINUSE.setStatus('current')
if mibBuilder.loadTexts: endptDHCPINUSE.setDescription("DHCP server address. This variable returns a 4-octet string specifying the IP address of the DHCP server from which the telephone's IP address was obtained (or all zeroes if the telephone was statically addressed).")
endptDHCPLEASEEXP = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 78), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDHCPLEASEEXP.setStatus('current')
if mibBuilder.loadTexts: endptDHCPLEASEEXP.setDescription('Remaining time of IPADD lease. This variable returns an unsigned integer specifying the length of time in seconds until the expiration of the IP address lease, or 0 if the lease has expired.')
endptDHCPSTD = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 79), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDHCPSTD.setStatus('current')
if mibBuilder.loadTexts: endptDHCPSTD.setDescription('DHCP lease violation flag. This variable returns 1 if the telephone is not allowed to use the IP address after its lease has expired, or else 0 if the telephone is allowed to continue operating after the IP address lease has expired.).')
endptDHCPT1REM = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 80), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDHCPT1REM.setStatus('current')
if mibBuilder.loadTexts: endptDHCPT1REM.setDescription('Remaining time until IP address lease renewal. This variable returns an unsigned integer specifying the length of time in seconds until the start of the IP address lease renewal, or 0 if the lease has expired.')
endptDHCPT2REM = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDHCPT2REM.setStatus('current')
if mibBuilder.loadTexts: endptDHCPT2REM.setDescription('Remaining time until IP address lease renewal. This variable returns an unsigned integer specifying the length of time in seconds until the start of the IP address lease rebindingl, or 0 if the lease has expired.')
endptICMPDU = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptICMPDU.setStatus('current')
if mibBuilder.loadTexts: endptICMPDU.setDescription('ICMP Destination support setting. This variable returns 2 if the telephone transmits Destination Unreachable messages with code 2 if the designated transport protocol is not supported AND also if the telephone transmits Destination Unreachable messages with code 3 if a closed UD/TCP port is designated. This variable returns 1 if the telephone only transmits Destination Unreachable messages with code 3 if a closed UD/TCP port is designated. This variable returns 0 if the telephone does not transmit Destination Unreachable messages.')
endptICMPRED = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 82), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptICMPRED.setStatus('current')
if mibBuilder.loadTexts: endptICMPRED.setDescription('ICMP Redirect support setting. This variable returns 1 if the telephone supports received Redirect messages as specified in RFC 1122, Sections 3.2.2.2 and 3.3.1.2, or 0 if the telephone does not provide this support.')
endptSSONCONTENT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 83), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptSSONCONTENT.setStatus('current')
if mibBuilder.loadTexts: endptSSONCONTENT.setDescription('Contents of DHCP Site Specific Option Number. This variable returns the data portion of the DHCP SSON as designated by endptNVSSON.')
endptBRURI = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 1, 84), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptBRURI.setStatus('current')
if mibBuilder.loadTexts: endptBRURI.setDescription('Backup and restore URI. This variable returns a string specifying the URI used for backup and restore files.')
endptNVM = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 2))
endptNVMCIPADD = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVMCIPADD.setStatus('current')
if mibBuilder.loadTexts: endptNVMCIPADD.setDescription('IP address of call server stored in Non-Volatile Memory (NVM). This variable returns a 4-octet string or DNS string. Default is AvayaCallServer.')
endptNVMCPORT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVMCPORT.setStatus('obsolete')
if mibBuilder.loadTexts: endptNVMCPORT.setDescription('NVM Transport layer port number. This variable returns an integer specifying the call server port number stored in NVM.')
endptNVIPADD = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVIPADD.setStatus('current')
if mibBuilder.loadTexts: endptNVIPADD.setDescription("NVM IP address. This variable returns a 4-octet string specifying the endpoint's IP address stored in NVM.")
endptNVGIPADD = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVGIPADD.setStatus('current')
if mibBuilder.loadTexts: endptNVGIPADD.setDescription('NVM Router address. This variable returns a 4- octet string specifying the IP address of the router as stored in NVM.')
endptNVNETMASK = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVNETMASK.setStatus('current')
if mibBuilder.loadTexts: endptNVNETMASK.setDescription('NVM Subnet mask. This variable returns a 4-octet string specifying the subnet mask as stored in NVM.')
endptNVTFTPSRVR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVTFTPSRVR.setStatus('obsolete')
if mibBuilder.loadTexts: endptNVTFTPSRVR.setDescription('NVM TFTP server address. This variable returns a 4-octet string specifying the IP address of the file server as stored in NVM. The default is AvayaTFTPserver.')
endptNVSSON = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVSSON.setStatus('current')
if mibBuilder.loadTexts: endptNVSSON.setDescription('NVM Site-specific option number. This variable returns an integer between 128 and 254 inclusive, specifying the SSON stored in NVM. The default is 176.')
endptNVBBURST = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVBBURST.setStatus('obsolete')
if mibBuilder.loadTexts: endptNVBBURST.setDescription('NVM Blackburst flag. This variable returns 0 if the Blackburst parameter in NVM is OFF, else 1.')
endptNVHUBSTAT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVHUBSTAT.setStatus('obsolete')
if mibBuilder.loadTexts: endptNVHUBSTAT.setDescription('NVM Hub flag. This variable has been superseded by endptNVPHY2STAT.')
endptNVDSCPAUD = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVDSCPAUD.setStatus('current')
if mibBuilder.loadTexts: endptNVDSCPAUD.setDescription('NVM DSCP for audio. This variable specifies the Differentiated Services Code Point for audio stored in NVM (integer between 0 and 63 inclusive).')
endptNVDSCPSIG = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVDSCPSIG.setStatus('current')
if mibBuilder.loadTexts: endptNVDSCPSIG.setDescription(' NVM DSCP for signaling. This variable specifies the Differentiated Services Code Point for signaling stored in NVM (integer between 0 and 63 inclusive).')
endptNVL2Q = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVL2Q.setStatus('current')
if mibBuilder.loadTexts: endptNVL2Q.setDescription("NVM 802.1Q flag. This variable returns 0 if the Layer 2 802.1Q framing parameter in NVM is set to 'auto', 1 if it is set to on/enabled, else 2 for off/disabled.")
endptNVL2QAUD = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVL2QAUD.setStatus('current')
if mibBuilder.loadTexts: endptNVL2QAUD.setDescription('NVM Audio priority. This variable returns an integer between 0 and 7 inclusive specifying the Layer 2 802.1Q audio priority value stored in NVM.')
endptNVL2QSIG = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVL2QSIG.setStatus('current')
if mibBuilder.loadTexts: endptNVL2QSIG.setDescription('NVM Signaling priority. This variable returns an integer between 0 and 7 inclusive specifying the Layer 2 802.1Q signaling priority value stored in NVM.')
endptNVL2QVLAN = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVL2QVLAN.setStatus('current')
if mibBuilder.loadTexts: endptNVL2QVLAN.setDescription('NVM VLAN Identifier. This variable returns an integer between 0 and 4094 inclusive specifying the Layer 2 802.1Q VLAN Identifier value stored in NVM.')
endptNVPHY2STAT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVPHY2STAT.setStatus('current')
if mibBuilder.loadTexts: endptNVPHY2STAT.setDescription("NVM Secondary Ethernet interface setting. This variable returns 0 if the endpoint's secondary Ethernet interface in NVM is currently NOT enabled(or none exists), 1 if the hub is set for auto-negotiation, 2 for 10Mbps half-duplex, 3 for 10Mbps full-duplex, 4 for 100Mbps half-duplex, and 5 for 100Mbps full-duplex.")
endptNVLOGSTAT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 2, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVLOGSTAT.setStatus('current')
if mibBuilder.loadTexts: endptNVLOGSTAT.setDescription("NVM Event Log flag. This variable returns 0 if the endpoint's event logging capability in NVM is currently NOT enabled, else 1.")
endptNVAGCHAND = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 2, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVAGCHAND.setStatus('current')
if mibBuilder.loadTexts: endptNVAGCHAND.setDescription("NVM Handset AGC status. This variable returns 1 if the endpoint's handset Automatic Gain Control capability in NVM is currently enabled, else 0.")
endptNVAGCHEAD = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 2, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVAGCHEAD.setStatus('current')
if mibBuilder.loadTexts: endptNVAGCHEAD.setDescription("NVM Headset AGC status. This variable returns 1 if the endpoint's headset Automatic Gain Control capability in NVM is currently enabled, else 0.")
endptNVIRSTAT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 2, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVIRSTAT.setStatus('current')
if mibBuilder.loadTexts: endptNVIRSTAT.setDescription("NVM IR Interface flag. This variable returns 0 if the endpoint's IR interface capability in NVM is currently NOT enabled, else 1.")
endptNVPHY1STAT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 2, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVPHY1STAT.setStatus('current')
if mibBuilder.loadTexts: endptNVPHY1STAT.setDescription("NVM Ethernet line interface status. This variable returns 0 if the endpoint's Ethernet line interface in NVM iscurrently NOT enabled, 1 if the Ethernet line interface in NVM is currently for auto-negotiation, 2 for 10Mbps half-duplex, 3 for 10Mbps full-duplex, 4 for 100Mbps half-duplex, and 5 for 100Mbps full-duplex.")
endptNVVLANTEST = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 2, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVVLANTEST.setStatus('current')
if mibBuilder.loadTexts: endptNVVLANTEST.setDescription('NVM VLAN pause parameter. This variable returns the number of seconds stored in NVM for the endppoint to wait for a DHCPOFFER message when using a non-zero VLAN ID. Valid values are integers from 0 to 999 inclusive.')
endptNVVLANLIST = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 2, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVVLANLIST.setStatus('obsolete')
if mibBuilder.loadTexts: endptNVVLANLIST.setDescription('NVM VLAN ID list. This variable returns a list of zero or more VLAN IDs in NVM.')
endptNVAGCSPKR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 2, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVAGCSPKR.setStatus('current')
if mibBuilder.loadTexts: endptNVAGCSPKR.setDescription("Speakerphone AGC status. This variable returns 1 if the endpoint's speakerphone Automatic Gain Control capability in NVM is currently enabled, else 0.")
endptNVHTTPSRVR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 2, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVHTTPSRVR.setStatus('obsolete')
if mibBuilder.loadTexts: endptNVHTTPSRVR.setDescription('NVM HTTP server IP addresses. This variable returns a comma-separated list of HTTP server IP addresses available for use as stored in NVM, in dotted-decimal format.')
endptNVAUTH = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 2, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVAUTH.setStatus('current')
if mibBuilder.loadTexts: endptNVAUTH.setDescription('Script file authentication flag. This variable returns 1 if the endpoint must authenticate script files, else 0.')
endptNVFILESRVR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 2, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVFILESRVR.setStatus('current')
if mibBuilder.loadTexts: endptNVFILESRVR.setDescription('NVM File server address. This variable returns a 4-octet string specifying the IP address of the file server as stored in NVM.')
endptNVALERT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 2, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVALERT.setStatus('current')
if mibBuilder.loadTexts: endptNVALERT.setDescription('Alerting Mode flag. This variable returns 1 if the alerting mode setting in non-volatile memory is enabled, else 0.')
endptNVCHADDR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 2, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVCHADDR.setStatus('current')
if mibBuilder.loadTexts: endptNVCHADDR.setDescription('Manually-entered DHCP chaddr value. This variable returns a manually-entered value for the DHCP chaddr field as stored in non-volatile memory, if any. A Hexadecimal value with range of 0 (the default) to 999999.')
endptNVCONTRAST = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 2, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVCONTRAST.setStatus('current')
if mibBuilder.loadTexts: endptNVCONTRAST.setDescription('Display Contrast setting. This variable returns the value of the display contrast setting in non-volatile memory. Range is 0-15, with 8 the default.')
endptMaintenance = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 3))
endptUPGRADESCRIPT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptUPGRADESCRIPT.setStatus('current')
if mibBuilder.loadTexts: endptUPGRADESCRIPT.setDescription("Script loading status flag. This variable returns '0' if the upgrade script (endpt46XXUPGR) was successfully obtained and interpreted since the last power-up or reset. This variable returns '1' if the upgrade script was successfully obtained and but NOT successfully interpreted since the last power-up or reset. This variable returns '2' if the upgrade script was NOT successfully obtained since the last power-up or reset.")
endptAPPINUSE = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptAPPINUSE.setStatus('current')
if mibBuilder.loadTexts: endptAPPINUSE.setDescription('Application file name. This variable returns the name of the application file in the endpoint.')
endptAPPSTAT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptAPPSTAT.setStatus('current')
if mibBuilder.loadTexts: endptAPPSTAT.setDescription("Application download flag. This variable returns '0' if the most recent attempt to download and store an application file was successful. This variable returns '1' if the most recent attempt to download an application file was successful but the file was not successfully stored in NVM. This variable returns '2' if the most recent attempt to download an application file was NOT successful.")
endptRecentLog = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 3, 4), )
if mibBuilder.loadTexts: endptRecentLog.setStatus('current')
if mibBuilder.loadTexts: endptRecentLog.setDescription('Each entry is one of up to 75 syslog event messages added since last reset or power-up, each of which has severity code less than the value of NVLOGLOCAL. Entries are in chronological order, oldest first.')
endptRecentLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 3, 4, 1), ).setIndexNames((0, "Avaya-46xxIPTelephone-MIB", "endptRecentLogText"))
if mibBuilder.loadTexts: endptRecentLogEntry.setStatus('current')
if mibBuilder.loadTexts: endptRecentLogEntry.setDescription('Each entry is one of up to 75 syslog event messages added since last reset or power-up, each of which has severity code less than the value of NVLOGLOCAL. Entries are in chronological order, oldest first.')
endptRecentLogText = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 3, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptRecentLogText.setStatus('current')
if mibBuilder.loadTexts: endptRecentLogText.setDescription('Syslog event message.')
endptResetLog = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 3, 5), )
if mibBuilder.loadTexts: endptResetLog.setStatus('current')
if mibBuilder.loadTexts: endptResetLog.setDescription('Each entry is one of up to 75 syslog event messages added before the last reset or power-up, each of which has severity code less than the value of NVLOGLOCAL. Entries are in chronological order, oldest first.')
endptResetLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 3, 5, 1), ).setIndexNames((0, "Avaya-46xxIPTelephone-MIB", "endptResetLogText"))
if mibBuilder.loadTexts: endptResetLogEntry.setStatus('current')
if mibBuilder.loadTexts: endptResetLogEntry.setDescription('Each entry is one of up to 75 syslog event messages added before the last reset or power-up, each of which has severity code less than the value of NVLOGLOCAL. Entries are in chronological order, oldest first.')
endptResetLogText = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 3, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptResetLogText.setStatus('current')
if mibBuilder.loadTexts: endptResetLogText.setDescription('Syslog event message.')
endptDEFINITY = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 4))
endptPORTAUD = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptPORTAUD.setStatus('current')
if mibBuilder.loadTexts: endptPORTAUD.setDescription("Transport-layer audio port. This variable returns the endpoint's transport layer port number for audio, currently in use.")
endptPORTSIG = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptPORTSIG.setStatus('current')
if mibBuilder.loadTexts: endptPORTSIG.setDescription("Transport-layer signaling port. This variable returns the endpoint's transport layer port number for signaling, currently in use.")
endptFEIPADD = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 4, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptFEIPADD.setStatus('current')
if mibBuilder.loadTexts: endptFEIPADD.setDescription('Audio endpoint address. This variable returns a 4-octet string specifying the address of the far-end audio endpoint currently in use.')
endptFEPORT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptFEPORT.setStatus('current')
if mibBuilder.loadTexts: endptFEPORT.setDescription("Audio endpoint port number. This variable returns the far-end endpoint's transport layer port number for audio, currently in use.")
endptCODECR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 4, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptCODECR.setStatus('current')
if mibBuilder.loadTexts: endptCODECR.setDescription('Receive codec. This variable returns the designation of the Receive codec currently in use.')
endptCODECT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 4, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptCODECT.setStatus('current')
if mibBuilder.loadTexts: endptCODECT.setDescription('Transmit codec. This variable returns the designation of the Transmit codec currently in use.')
endptJCPC = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptJCPC.setStatus('current')
if mibBuilder.loadTexts: endptJCPC.setDescription('Jitter compensation packet count. This variable returns the Jitter compensation packet count currently in use (between 0 and 20, inclusive).')
endptTMSEC = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptTMSEC.setStatus('current')
if mibBuilder.loadTexts: endptTMSEC.setDescription('Transmit buffer fill level. This variable returns the transmit buffer minimum fill level, in msec, currently in use.')
endptNVPHONEXT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 4, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNVPHONEXT.setStatus('current')
if mibBuilder.loadTexts: endptNVPHONEXT.setDescription("Endpoint's phone extension. This variable returns a text string identifying the endpoint's extension, in free text format. The default value is NULL. ")
endptL2QBBE = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptL2QBBE.setStatus('obsolete')
if mibBuilder.loadTexts: endptL2QBBE.setDescription("802.1Q BBE priority value. This variable returns an integer between 0 and 7 inclusive specifying the far-end endpoint's Layer 2 Better than Best Effort audio priority value.")
endptDSCPBBE = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDSCPBBE.setStatus('current')
if mibBuilder.loadTexts: endptDSCPBBE.setDescription("DSCP BBE priority value. This variable returns an integer between 0 and 7 inclusive specifying the far-end endpoint's DiffServ Better than Best Effort audio priority value.")
endptRTCPCONT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 4, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptRTCPCONT.setStatus('current')
if mibBuilder.loadTexts: endptRTCPCONT.setDescription('RTCP Control flag. This variable returns 0 if the RTCP control status is off/disabled, else 1.')
endptRTCPFLOW = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 4, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptRTCPFLOW.setStatus('current')
if mibBuilder.loadTexts: endptRTCPFLOW.setDescription('RTCP Flowrate. This variable returns an integer between 0 and 65335 inclusive specifying the RTCP flowrate in milliseconds.')
endptRSVPCONT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 4, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptRSVPCONT.setStatus('current')
if mibBuilder.loadTexts: endptRSVPCONT.setDescription('RSVP Control flag. This variable returns 0 if the RSVP control status is off/disabled, else 1.')
endptRSVPRFRSH = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 4, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptRSVPRFRSH.setStatus('current')
if mibBuilder.loadTexts: endptRSVPRFRSH.setDescription('RSVP Refresh rate. This variable returns an integer between 0 and 65335 inclusive specifying the RSVP refresh rate in milliseconds.')
endptRSVPRTRY = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 4, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptRSVPRTRY.setStatus('current')
if mibBuilder.loadTexts: endptRSVPRTRY.setDescription('RSVP Failed Retry flag. This variable returns 0 if the RSVP Failed Retry Reservation control status is off/disabled, else 1.')
endptRSVPPROF = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 4, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptRSVPPROF.setStatus('current')
if mibBuilder.loadTexts: endptRSVPPROF.setDescription('RSVP profile flag. This variable returns 0 if the RSVP profile is guaranteed, else 1 for controlled load.')
endptPHNCC = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 4, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptPHNCC.setStatus('current')
if mibBuilder.loadTexts: endptPHNCC.setDescription('Telephone country code. This variable returns 1-3 digits; the administered international country code for the location of the serving call server.')
endptPHNDPLENGTH = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 4, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptPHNDPLENGTH.setStatus('current')
if mibBuilder.loadTexts: endptPHNDPLENGTH.setDescription('Telephone dial plan length. This variable returns 1 or 2 digits (3-10); the length of the administered dial plan for the serving call server.')
endptPHNIC = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 4, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptPHNIC.setStatus('current')
if mibBuilder.loadTexts: endptPHNIC.setDescription('Telephone international access code. This variable returns 1-4 digits; the digits dialed to access public network international trunks from the serving call server.')
endptPHNLD = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 4, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptPHNLD.setStatus('current')
if mibBuilder.loadTexts: endptPHNLD.setDescription('Telephone long distance access code. This variable returns 1 digit or Null; the digit dialed to access public network long distance trunks from the serving call server.')
endptPHNLDLENGTH = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 4, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptPHNLDLENGTH.setStatus('current')
if mibBuilder.loadTexts: endptPHNLDLENGTH.setDescription('Length of national telephone number. This variable returns 1 or 2 digits (5-15); the number of digits in the longest possible national telephone number for the location of the serving call server.')
endptPHNOL = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 4, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptPHNOL.setStatus('current')
if mibBuilder.loadTexts: endptPHNOL.setDescription('Outside line access code. This variable returns 1 or 2 digits or Null; the digit(s) dialed to access public network local trunks from the serving call server.')
endptNTWKAUDIO = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 4, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptNTWKAUDIO.setStatus('current')
if mibBuilder.loadTexts: endptNTWKAUDIO.setDescription('Network audio quality display flag. This variable returns 0 if the Network audio quality display status is off/disabled, else 1. This flag does not apply to the 4610, 4620, or 4630 IP Telephones.')
endptENHDIALSTAT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 4, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptENHDIALSTAT.setStatus('current')
if mibBuilder.loadTexts: endptENHDIALSTAT.setDescription('Enhanced Local Dialing status. This variable returns 0 if the Enhanced Local Dialing status is off/disabled, else 1.')
endptRESTORESTAT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 4, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptRESTORESTAT.setStatus('current')
if mibBuilder.loadTexts: endptRESTORESTAT.setDescription('FTP Backup/restore status. This variable returns 0 if the automatic FTP backup and restore feature status is off/disabled, else 1.')
endptFTPUSERSTAT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 4, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptFTPUSERSTAT.setStatus('current')
if mibBuilder.loadTexts: endptFTPUSERSTAT.setDescription('FTP User permissions status. This variable returns 0 if the user may not change previously-administered FTP server and Directory data, 1 if the user may change or create both FTP server and Directory data, and 2 if the user may only change or create FTP Directory data.')
endptRASGkList = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 4, 28), )
if mibBuilder.loadTexts: endptRASGkList.setStatus('current')
if mibBuilder.loadTexts: endptRASGkList.setDescription('Each entry is one of up to 30 gatekeeper addresses in dotted-decimal or DNS format, as downloaded from the call server during RAS. Entries are listed in the order received.')
endptRASGkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 4, 28, 1), ).setIndexNames((0, "Avaya-46xxIPTelephone-MIB", "endptRASGkEntryData"))
if mibBuilder.loadTexts: endptRASGkEntry.setStatus('current')
if mibBuilder.loadTexts: endptRASGkEntry.setDescription('Each entry is one of up to 30 gatekeeper addresses in dotted-decimal or DNS format, as downloaded from the call server during RAS. Entries are listed in the order received.')
endptRASGkEntryData = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 4, 28, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptRASGkEntryData.setStatus('current')
if mibBuilder.loadTexts: endptRASGkEntryData.setDescription('Data for an individual RAS-provided Gatekeeper.')
endptAdvApps = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 5))
endptCIBURL = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 5, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptCIBURL.setStatus('obsolete')
if mibBuilder.loadTexts: endptCIBURL.setDescription('Documentation URL. This variable returns a URL of the directory in which the web-based Customer Information Booklet web pages are located.')
endptDIRSRVR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 5, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDIRSRVR.setStatus('current')
if mibBuilder.loadTexts: endptDIRSRVR.setDescription("LDAP Server address. This variable returns a the IP address of the LDAP server to be used for the phone's Directoryapplication, in dotted decimal or DNS format.")
endptDIRTOPDN = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 5, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDIRTOPDN.setStatus('current')
if mibBuilder.loadTexts: endptDIRTOPDN.setDescription("Directory Top Name. This variable returns a string specifying the Topmost Distinguished Name in the LDAP Directory to be used for the 4630's Directory application.")
endptDIRFULLNAME = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 5, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDIRFULLNAME.setStatus('current')
if mibBuilder.loadTexts: endptDIRFULLNAME.setDescription("Directory FullName Label. This variable returns a string specifying the LDAP Directory's Full Name Field Label, to be used for the 4630's Directory application.")
endptDIRTELNUM = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 5, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDIRTELNUM.setStatus('current')
if mibBuilder.loadTexts: endptDIRTELNUM.setDescription("Directory Phone Number Label. This variable returns a string specifying the LDAP Directory's Telephone Number Field Label, to be used for the 4630's Directory application.")
endptDIRSRCHTIME = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDIRSRCHTIME.setStatus('current')
if mibBuilder.loadTexts: endptDIRSRCHTIME.setDescription('Directory Search Duration. This variable returns an integer specifying the maximum number of seconds the LDAP Directory should be searched before reporting completion or failure of the search.')
endptDIRSRVRPWD = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 5, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDIRSRVRPWD.setStatus('current')
if mibBuilder.loadTexts: endptDIRSRVRPWD.setDescription('Directory Access Password. This variable returns a string specifying the password used for accessing the LDAP Directory. The null string is returned if no password has been specified.')
endptDIRUSERID = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 5, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDIRUSERID.setStatus('current')
if mibBuilder.loadTexts: endptDIRUSERID.setDescription('Directory Access User ID. This variable returns a string specifying the User identity used for accessing the LDAP Directory. The null strong is returned if no user ID has been specified.')
endptDIRCODING = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 5, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDIRCODING.setStatus('current')
if mibBuilder.loadTexts: endptDIRCODING.setDescription('Directory Coding Scheme. This variable returns a string specifying the character coding scheme (e.g. ASCII or Latin-1) to be used for LDAP Directory queries.')
endptDIRSTAT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDIRSTAT.setStatus('current')
if mibBuilder.loadTexts: endptDIRSTAT.setDescription('Directory Connection Status. This variable returns an integer specifying the result code for the most recent Bind Request sent by the 4630 to the LDAP server.')
endptFTPSRVR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 5, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptFTPSRVR.setStatus('current')
if mibBuilder.loadTexts: endptFTPSRVR.setDescription("FTP Server address. This variable returns the IP address of the FTP server to be used for the phone's file storage and retrieval, in dotted decimal or DNS format.")
endptFTPDIR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 5, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptFTPDIR.setStatus('current')
if mibBuilder.loadTexts: endptFTPDIR.setDescription("FTP Server directory. This variable returns a path name of the directory on the FTP server to be used for the phone's file storage and retrieval.")
endptPHNEMERGNUM = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 5, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptPHNEMERGNUM.setStatus('current')
if mibBuilder.loadTexts: endptPHNEMERGNUM.setDescription('Emergency number. This variable returns a string specifying the emergency number to be outpulsed when the user presses the optional Emergency button in the 4630 Speed Dial application.')
endptPHNNUMOFCA = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 5, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptPHNNUMOFCA.setStatus('current')
if mibBuilder.loadTexts: endptPHNNUMOFCA.setDescription('Number of Call Appearances. This variable returns the number of Call Appearances downloaded from the DEFINITY during registration to the 4630, 462x and 4610SW.')
endptPHNNUMOFFB = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 5, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptPHNNUMOFFB.setStatus('current')
if mibBuilder.loadTexts: endptPHNNUMOFFB.setDescription('Number of Feature Buttons. This variable returns the number of administered Feature Buttons downloaded from the switch during registration to the 4630, 462x and 4610SW.')
endptWEBCODING = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 5, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptWEBCODING.setStatus('current')
if mibBuilder.loadTexts: endptWEBCODING.setDescription('Web Coding Scheme. This variable returns a string specifying the character coding scheme (e.g. ASCII or Latin-1) to be used for characters entered on forms on web pages. Used by the 4630 Web application.')
endptWEBEXCEPT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 5, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptWEBEXCEPT.setStatus('current')
if mibBuilder.loadTexts: endptWEBEXCEPT.setDescription('Web Proxy Server Exception List. This variable returns a string specifying a list of one or more HTTP proxy server Exception domains, separated by commas with no intervening spaces, up to 127 total characters. Used by the 4630 Web application.')
endptWEBHOME = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 5, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptWEBHOME.setStatus('current')
if mibBuilder.loadTexts: endptWEBHOME.setDescription('Web application URL. This variable returns a URL of the Home page for the 4630 Web application.')
endptWEBPORT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 5, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptWEBPORT.setStatus('current')
if mibBuilder.loadTexts: endptWEBPORT.setDescription('Web application TCP port. This variable returns an integer specifying the TCP port most recently used for the HTTP proxy server. Used by the 4630 Web application.')
endptWEBPROXY = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 5, 20), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptWEBPROXY.setStatus('current')
if mibBuilder.loadTexts: endptWEBPROXY.setDescription('Web Proxy Server. This variable returns an IP addresses, in dotted-decimal or DNS format, of an HTTP proxy server. Used by the 4630 Web application.')
endptDIRLDAPPORT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 5, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDIRLDAPPORT.setStatus('current')
if mibBuilder.loadTexts: endptDIRLDAPPORT.setDescription('LDAP Directory Port. This variable returns the port number for LDAP messages, and has a default value of 389.')
endptVMLCODING = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 5, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptVMLCODING.setStatus('current')
if mibBuilder.loadTexts: endptVMLCODING.setDescription('Voice Mail Coding Scheme. This variable returns a string specifying the character coding scheme (e.g. ASCII or Latin-1) to be used for characters entered on forms on the 4630 Voice Mail application.')
endptVMLHOME = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 5, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptVMLHOME.setStatus('current')
if mibBuilder.loadTexts: endptVMLHOME.setDescription('Voice Mail application URL. This variable returns a URL of the Home page for the 4630 Voice Mail application.')
endptCLACTIVE = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 5, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptCLACTIVE.setStatus('obsolete')
if mibBuilder.loadTexts: endptCLACTIVE.setDescription('Call Log activation flag. This variable returns 0 if the call log status is off/disabled, else 1.')
endptWMLCODING = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 5, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptWMLCODING.setStatus('obsolete')
if mibBuilder.loadTexts: endptWMLCODING.setDescription('4610SW/2x Web Coding Scheme. This variable returns a string specifying the character coding scheme (e.g. ASCII or Latin-1) to be used for characters entered on forms on web pages. Used by the 4610SW/462x Web application.')
endptWMLEXCEPT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 5, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptWMLEXCEPT.setStatus('current')
if mibBuilder.loadTexts: endptWMLEXCEPT.setDescription('4610SW/2x Web Proxy Server Exception List. This variable returns a string specifying a list of one or more HTTP proxy server Exception domains, separated by commas with no intervening spaces, up to 127 total characters. Used by the 4610SW/462x Web application.')
endptWMLHOME = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 5, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptWMLHOME.setStatus('current')
if mibBuilder.loadTexts: endptWMLHOME.setDescription('4610SW/2x Web application URL. This variable returns a URL of the Home page for the 4610SW/462x Web application.')
endptWMLPORT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 5, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptWMLPORT.setStatus('current')
if mibBuilder.loadTexts: endptWMLPORT.setDescription('4610SW/2x Web application TCP port. This variable returns an integer specifying the TCP port most recently used for the HTTP proxy server. Used by the 4610SW/462x Web application.')
endptWMLPROXY = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 5, 29), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptWMLPROXY.setStatus('current')
if mibBuilder.loadTexts: endptWMLPROXY.setDescription('4610SW/2x Web Proxy Server. This variable returns an IP addresses, in dotted-decimal or DNS format, of an HTTP proxy server. Used by the 4610SW/2x Web application.')
endptCTISTAT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 5, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptCTISTAT.setStatus('current')
if mibBuilder.loadTexts: endptCTISTAT.setDescription('CTI flag. This variable returns 0 if the CTI application is set to off, else 1.')
endptCTIUDPPORT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 5, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptCTIUDPPORT.setStatus('current')
if mibBuilder.loadTexts: endptCTIUDPPORT.setDescription('CTI application UDP port. This variable returns an integer specifying the UDP port most recently used for the UDP listener to receive broadcast messages.')
endptSTKSTAT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 5, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptSTKSTAT.setStatus('current')
if mibBuilder.loadTexts: endptSTKSTAT.setDescription('Stock Ticker flag. This variable returns 0 if the 4630 Stock Ticker application is set to off, else 1.')
endptSUBSCRIBELIST = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 5, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptSUBSCRIBELIST.setStatus('current')
if mibBuilder.loadTexts: endptSUBSCRIBELIST.setDescription("4610SW/2x Web push subscription list. This variable returns a string containing one or more fully qualified URLs to which the phone's Web application subscribes for potential pushed content.")
endptTPSLIST = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 5, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptTPSLIST.setStatus('current')
if mibBuilder.loadTexts: endptTPSLIST.setDescription('4610SW/2x Web Trusted Push Server list. This variable returns a string containing one or more domains and paths in DNS format, used to determine for validation of push requests.')
endptWMLIDLETIME = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 5, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptWMLIDLETIME.setStatus('current')
if mibBuilder.loadTexts: endptWMLIDLETIME.setDescription('Web Idle Timer. This variable returns the number of minutes, from 1 to 60 inclusive, of idle activity on the telephone before the Web Idle Timer URI is displayed.')
endptWMLIDLEURI = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 5, 36), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptWMLIDLEURI.setStatus('current')
if mibBuilder.loadTexts: endptWMLIDLEURI.setDescription('Web Idle Timer URI. This variable returns the URI of the WML page displayed after the 4610SW/462x Web Idle Timer expires.')
endptAdjuncts = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 6))
endptFKEU = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptFKEU.setStatus('current')
if mibBuilder.loadTexts: endptFKEU.setDescription('FKEU flag. This variable returns 0 if the Feature Key Expansion Unit is off, disabled, or not present, else 1.')
endptFKEUHEALTH = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptFKEUHEALTH.setStatus('current')
if mibBuilder.loadTexts: endptFKEUHEALTH.setDescription('FKEU flag. This variable returns 1 if the most recent self-test of the Feature Key Expansion Unit or the 4620 failed, else 0.')
endptSIP = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 7))
endptCALLFWDSTAT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptCALLFWDSTAT.setStatus('current')
if mibBuilder.loadTexts: endptCALLFWDSTAT.setDescription('Call Forwarding setting. This variable returns the sum of all Call Forwarding permissions. Range is 0 to 7, with 0 as the default.')
endptCOVERAGEADDR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 7, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptCOVERAGEADDR.setStatus('current')
if mibBuilder.loadTexts: endptCOVERAGEADDR.setDescription('Call Coverage Server address. This variable returns the URI to which call coverage is sent; up to 255 characters.')
endptDATETIMEFORMAT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDATETIMEFORMAT.setStatus('current')
if mibBuilder.loadTexts: endptDATETIMEFORMAT.setDescription('Date and Time format specification. This variable returns a parameter indicating the desired format for display of date and time. Range is 0 to 3, with 0 as the default.')
endptMUSICSRVR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 7, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptMUSICSRVR.setStatus('current')
if mibBuilder.loadTexts: endptMUSICSRVR.setDescription('List of music server addresses. This variable returns a sequence of IP addresses, in dotted-decimal format and separated by commas, of music servers available for use.')
endptMUSICSRVRINUSE = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 7, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptMUSICSRVRINUSE.setStatus('current')
if mibBuilder.loadTexts: endptMUSICSRVRINUSE.setDescription('Music server address. This variable returns a 4-octet string specifying the IP address of the music server most recently used.')
endptMWISRVR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 7, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptMWISRVR.setStatus('current')
if mibBuilder.loadTexts: endptMWISRVR.setDescription('List of message waiting indicator server addresses. This variable returns a sequence of IP addresses, in dotted-decimal format and separated by commas, of message waiting indicator servers available for use.')
endptMWISRVRINUSE = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 7, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptMWISRVRINUSE.setStatus('current')
if mibBuilder.loadTexts: endptMWISRVRINUSE.setDescription('Message waiting indicator server address. This variable returns a 4-octet string specifying the IP address of the message waiting indicator server most recently used.')
endptREGISTERWAIT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 7, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptREGISTERWAIT.setStatus('current')
if mibBuilder.loadTexts: endptREGISTERWAIT.setDescription('Registration wait interval. This variable returns the number of seconds between attempts to re-register with the current server. Range is 0 to 65535, with 3600 as the default.')
endptSIPPROXYSRVR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 7, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptSIPPROXYSRVR.setStatus('current')
if mibBuilder.loadTexts: endptSIPPROXYSRVR.setDescription('List of SIP Proxy server addresses. This variable returns a sequence of IP addresses, in dotted-decimal format and separated by commas, of SIP Proxy servers available for use.')
endptSIPPROXYSRVRINUSE = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 7, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptSIPPROXYSRVRINUSE.setStatus('current')
if mibBuilder.loadTexts: endptSIPPROXYSRVRINUSE.setDescription('SIP Proxy server address. This variable returns a 4-octet string specifying the IP address of the SIP Proxy server most recently used.')
endptSIPREGISTRAR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 7, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptSIPREGISTRAR.setStatus('current')
if mibBuilder.loadTexts: endptSIPREGISTRAR.setDescription('List of SIP registrar addresses. This variable returns a sequence of IP addresses, in dotted-decimal format and separated by commas, of SIP registrars available for use.')
endptSIPREGISTRARINUSE = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 7, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptSIPREGISTRARINUSE.setStatus('current')
if mibBuilder.loadTexts: endptSIPREGISTRARINUSE.setDescription('SIP registrar address. This variable returns a 4-octet string specifying the IP address of the SIP registrar most recently used.')
endptSPEAKERSTAT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 7, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptSPEAKERSTAT.setStatus('current')
if mibBuilder.loadTexts: endptSPEAKERSTAT.setDescription('Speaker setting. This variable returns a parameter indicating the allowed level of speakerphone functionality. Range is 0 to 2, with 2 as the default.')
endptSIPPORT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 7, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptSIPPORT.setStatus('current')
if mibBuilder.loadTexts: endptSIPPORT.setDescription('TCP/UDP port used for SIP messages. This variable returns the current port number used for SIP messaging. The default is 5060.')
endptSIPDOMAIN = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 7, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptSIPDOMAIN.setStatus('current')
if mibBuilder.loadTexts: endptSIPDOMAIN.setDescription('SIP registration domain name. This text is used in the Contact header field as part of SIP registration.')
endptPHNNUMOFSA = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 7, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptPHNNUMOFSA.setStatus('current')
if mibBuilder.loadTexts: endptPHNNUMOFSA.setDescription('Number of Session Appearances. This variable returns the number of Session Appearances administered for the SIP phone.')
endptDIALWAIT = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 7, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDIALWAIT.setStatus('current')
if mibBuilder.loadTexts: endptDIALWAIT.setDescription('Dialing timeout interval. This variable returns the number of seconds after the user stops dialing, that the telephone waits before automatically dialing the number enterered so far. The range is 0 to 10, and zero seconds means the telephone will wait forever, or until the user presses Send.')
endptDIALPLAN = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 7, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptDIALPLAN.setStatus('current')
if mibBuilder.loadTexts: endptDIALPLAN.setDescription('SIP dial plan. This variable returns the administered dial plan, used during manual dialing to allow a call to be initiated without the use of a Send button and without waiting for the expiration of a timeout interval; up to 1000 characters.')
endptCALLFWDADDR = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 7, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptCALLFWDADDR.setStatus('current')
if mibBuilder.loadTexts: endptCALLFWDADDR.setDescription('Call Forwarding address. This variable returns the URI to which calls are forwarded; up to 255 characters.')
endptCALLFWDDELAY = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 69, 1, 7, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endptCALLFWDDELAY.setStatus('current')
if mibBuilder.loadTexts: endptCALLFWDDELAY.setDescription('Call Forwarding delay. This variable returns the number of times the telephone will ring before a call is forwarded, if Call Forwarding on No Answer is selected.')
mibBuilder.exportSymbols("Avaya-46xxIPTelephone-MIB", endptHTTPDIR=endptHTTPDIR, endptAdvApps=endptAdvApps, endptDIRTOPDN=endptDIRTOPDN, endptDHCPSTD=endptDHCPSTD, endptDIRTELNUM=endptDIRTELNUM, endptWMLPORT=endptWMLPORT, endptPWBCC=endptPWBCC, endptDSCPSIG=endptDSCPSIG, endptPHNNUMOFFB=endptPHNNUMOFFB, endptNVMCIPADD=endptNVMCIPADD, endptSTKSTAT=endptSTKSTAT, endptFKEUHEALTH=endptFKEUHEALTH, endptWEBPORT=endptWEBPORT, endptResetLog=endptResetLog, endptHTTPUSED=endptHTTPUSED, endptRTCPMON=endptRTCPMON, endptBBURST=endptBBURST, endptNVAGCSPKR=endptNVAGCSPKR, endptNETMASK=endptNETMASK, endptSIPREGISTRAR=endptSIPREGISTRAR, endptResetLogEntry=endptResetLogEntry, endptL2QSIG=endptL2QSIG, endptNVPHY1STAT=endptNVPHY1STAT, endptPHY1STAT=endptPHY1STAT, endptTFTPINUSE=endptTFTPINUSE, endptRecentLog=endptRecentLog, endptWMLIDLEURI=endptWMLIDLEURI, endptGMTOFFSET=endptGMTOFFSET, endpt46XXUPGR=endpt46XXUPGR, endptDSTSTOP=endptDSTSTOP, endptNVFILESRVR=endptNVFILESRVR, endptWMLHOME=endptWMLHOME, endptNTWKAUDIO=endptNTWKAUDIO, endptMCIPINUSE=endptMCIPINUSE, avayaipEndpointProd=avayaipEndpointProd, endptDIRSRVRPWD=endptDIRSRVRPWD, endptResetLogText=endptResetLogText, endptL2Q=endptL2Q, endptPHY2STAT=endptPHY2STAT, endptNVLOGSTAT=endptNVLOGSTAT, endptSSONCONTENT=endptSSONCONTENT, endptNVL2QSIG=endptNVL2QSIG, endptDIRCODING=endptDIRCODING, endptRSVPPROF=endptRSVPPROF, endptAUDIOSTHS=endptAUDIOSTHS, endptAPPNAME=endptAPPNAME, endptCTIUDPPORT=endptCTIUDPPORT, avayaMibs=avayaMibs, endptNVALERT=endptNVALERT, endptAGCHAND=endptAGCHAND, endptMARKET=endptMARKET, endptPHONESN=endptPHONESN, endptICMPDU=endptICMPDU, endptFEIPADD=endptFEIPADD, endptRSVPRFRSH=endptRSVPRFRSH, endptTFTPDIR=endptTFTPDIR, endptHTTPSRVR=endptHTTPSRVR, endptPHNLDLENGTH=endptPHNLDLENGTH, endptDIALWAIT=endptDIALWAIT, endptCALLFWDDELAY=endptCALLFWDDELAY, endptNVL2QAUD=endptNVL2QAUD, endptDNSINUSE=endptDNSINUSE, endptDSCPBBE=endptDSCPBBE, endptTPSLIST=endptTPSLIST, endptCODEUSED=endptCODEUSED, endptMUSICSRVRINUSE=endptMUSICSRVRINUSE, avayaProducts=avayaProducts, endptWMLPROXY=endptWMLPROXY, endptPROCSTAT=endptPROCSTAT, endptNVVLANTEST=endptNVVLANTEST, endptVMLHOME=endptVMLHOME, endptPHNCC=endptPHNCC, endptNVPHY2STAT=endptNVPHY2STAT, endptAPPSTAT=endptAPPSTAT, endptPHNOL=endptPHNOL, endptIRSTAT=endptIRSTAT, endptNVAGCHAND=endptNVAGCHAND, endptIPADD=endptIPADD, endptCODESRVR=endptCODESRVR, endptRecentLogEntry=endptRecentLogEntry, endptMCIPADD=endptMCIPADD, endptNVIRSTAT=endptNVIRSTAT, endptL2QVLAN=endptL2QVLAN, endptNVBBURST=endptNVBBURST, endptAPPINUSE=endptAPPINUSE, endptCIBURL=endptCIBURL, avayaipEndpointMIBs=avayaipEndpointMIBs, endptRTCPFLOW=endptRTCPFLOW, endptDHCPLEASETIME=endptDHCPLEASETIME, endptDHCPT2REM=endptDHCPT2REM, endptCODECT=endptCODECT, endptDIRSRVR=endptDIRSRVR, endptFTPSRVR=endptFTPSRVR, endptDOMAIN=endptDOMAIN, endptRASGkList=endptRASGkList, endptCOVERAGEADDR=endptCOVERAGEADDR, endptCNASRVR=endptCNASRVR, endptMODEL=endptMODEL, endptPHNIC=endptPHNIC, endptL2QBBE=endptL2QBBE, endptRASGkEntry=endptRASGkEntry, endptDHCPINUSE=endptDHCPINUSE, endptPHNEMERGNUM=endptPHNEMERGNUM, endptFEPORT=endptFEPORT, endptVLANLIST=endptVLANLIST, endptSNTPSRVR=endptSNTPSRVR, endptAGCSPKR=endptAGCSPKR, endptTLSSRVR=endptTLSSRVR, endptNVHTTPSRVR=endptNVHTTPSRVR, endptTFTPSRVR=endptTFTPSRVR, endptSIG=endptSIG, endptNVDSCPSIG=endptNVDSCPSIG, endptDIRSTAT=endptDIRSTAT, endptBOOTNAME=endptBOOTNAME, endptAdjuncts=endptAdjuncts, endptDOT1X=endptDOT1X, endptDIRSRCHTIME=endptDIRSRCHTIME, endptDIALPLAN=endptDIALPLAN, endptSSON=endptSSON, endptNVCHADDR=endptNVCHADDR, endptMaintenance=endptMaintenance, endptETHERADD=endptETHERADD, endptFTPUSERSTAT=endptFTPUSERSTAT, endptLOGSTAT=endptLOGSTAT, endptCLACTIVE=endptCLACTIVE, endptRSVPRTRY=endptRSVPRTRY, endptDHCPT1REM=endptDHCPT1REM, endptWMLIDLETIME=endptWMLIDLETIME, endptGIPINUSE=endptGIPINUSE, endptDSTOFFSET=endptDSTOFFSET, avaya=avaya, endptDIRUSERID=endptDIRUSERID, endptDHCPLEASEREBIND=endptDHCPLEASEREBIND, endptNVMCPORT=endptNVMCPORT, endptLOGSRVR=endptLOGSRVR, endptDATETIMEFORMAT=endptDATETIMEFORMAT, endptSIPPROXYSRVR=endptSIPPROXYSRVR, endptWEBPROXY=endptWEBPROXY, endptDHCPLEASEEXP=endptDHCPLEASEEXP, endptMUSICSRVR=endptMUSICSRVR, endptCALLFWDADDR=endptCALLFWDADDR, endptNVVLANLIST=endptNVVLANLIST, endptDNSSRVR=endptDNSSRVR, endptNVL2QVLAN=endptNVL2QVLAN, endptPORTSIG=endptPORTSIG, endptENHDIALSTAT=endptENHDIALSTAT, endptDHCPLEASERENEW=endptDHCPLEASERENEW, endptDIRLDAPPORT=endptDIRLDAPPORT, endptHTTPPORT=endptHTTPPORT, endptNVHUBSTAT=endptNVHUBSTAT, endptMWISRVR=endptMWISRVR, endptAUDIOSTHD=endptAUDIOSTHD, endpointMIB=endpointMIB, endptNVNETMASK=endptNVNETMASK, endptAUDIOENV=endptAUDIOENV, endptFKEU=endptFKEU, endptSIPREGISTRARINUSE=endptSIPREGISTRARINUSE, endptPWBSN=endptPWBSN, endptPROCPSWD=endptPROCPSWD, endptL2QSTAT=endptL2QSTAT, endptNVDSCPAUD=endptNVDSCPAUD, endptSIPPORT=endptSIPPORT, endptSMTPSRVR=endptSMTPSRVR, endptRSVPCONT=endptRSVPCONT, endptDSCPAUD=endptDSCPAUD, endptVLANTEST=endptVLANTEST, endptDSPVERSION=endptDSPVERSION, endptSTATIC=endptSTATIC, endptNVTFTPSRVR=endptNVTFTPSRVR, endptNVM=endptNVM, endptDSTSTART=endptDSTSTART, endptNVGIPADD=endptNVGIPADD, endptICMPRED=endptICMPRED, endptTMSEC=endptTMSEC, endptRESTORESTAT=endptRESTORESTAT, PYSNMP_MODULE_ID=endpointMIB, endptAGCHEAD=endptAGCHEAD, endptCALLFWDSTAT=endptCALLFWDSTAT, endptDIRFULLNAME=endptDIRFULLNAME, endptGIPADD=endptGIPADD, endptPHONECC=endptPHONECC, endptHUBSTAT=endptHUBSTAT, endptUPGRADESCRIPT=endptUPGRADESCRIPT, endptESPEED=endptESPEED, endptREGISTERWAIT=endptREGISTERWAIT, endptDEFINITY=endptDEFINITY, endptJCPC=endptJCPC, endptCODECR=endptCODECR, endptFTPDIR=endptFTPDIR, endptPHNLD=endptPHNLD, endptGROUP=endptGROUP, endptCTISTAT=endptCTISTAT, endptRTCPCONT=endptRTCPCONT, endptWEBEXCEPT=endptWEBEXCEPT, endptSPEAKERSTAT=endptSPEAKERSTAT, endptBAKLIGHTOFF=endptBAKLIGHTOFF, endptNVCONTRAST=endptNVCONTRAST, endptSIPDOMAIN=endptSIPDOMAIN, endptRASGkEntryData=endptRASGkEntryData, endptNVAGCHEAD=endptNVAGCHEAD, endptPHNNUMOFCA=endptPHNNUMOFCA, endptL2QAUD=endptL2QAUD, endptID=endptID, endptWEBCODING=endptWEBCODING, endptWMLCODING=endptWMLCODING, endptNVIPADD=endptNVIPADD, endptBRURI=endptBRURI, endptNVAUTH=endptNVAUTH, endptSNMPADD=endptSNMPADD, endptSIPPROXYSRVRINUSE=endptSIPPROXYSRVRINUSE, endptMCPORT=endptMCPORT, endptPORTAUD=endptPORTAUD, endptPHNNUMOFSA=endptPHNNUMOFSA, endptWEBHOME=endptWEBHOME, endptNVSSON=endptNVSSON, endptPHNDPLENGTH=endptPHNDPLENGTH, endptNVL2Q=endptNVL2Q, endptMWISRVRINUSE=endptMWISRVRINUSE, endptRecentLogText=endptRecentLogText, endptTLSUSED=endptTLSUSED, endptSIP=endptSIP, endptCNAPORT=endptCNAPORT, endptWMLEXCEPT=endptWMLEXCEPT, endptSUBSCRIBELIST=endptSUBSCRIBELIST, endptNVPHONEXT=endptNVPHONEXT, endptVMLCODING=endptVMLCODING)
