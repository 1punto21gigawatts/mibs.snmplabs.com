#
# PySNMP MIB module IEEE8021-DEVID-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IEEE8021-DEVID-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:52:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
entPhysicalIndex, PhysicalIndex = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex", "PhysicalIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Counter32, Unsigned32, NotificationType, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, TimeTicks, IpAddress, Bits, Integer32, ModuleIdentity, Gauge32, Counter64, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Unsigned32", "NotificationType", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "TimeTicks", "IpAddress", "Bits", "Integer32", "ModuleIdentity", "Gauge32", "Counter64", "iso")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
ieee8021DevIDMIB = ModuleIdentity((1, 3, 111, 2, 802, 1, 1, 17))
ieee8021DevIDMIB.setRevisions(('2009-06-25 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ieee8021DevIDMIB.setRevisionsDescriptions(('Published as part of IEEE standard 802.1AR',))
if mibBuilder.loadTexts: ieee8021DevIDMIB.setLastUpdated('200906250000Z')
if mibBuilder.loadTexts: ieee8021DevIDMIB.setOrganization('IEEE 802.1 Working Group')
if mibBuilder.loadTexts: ieee8021DevIDMIB.setContactInfo('http:/grouper.ieee.org/groups/8021/index.html')
if mibBuilder.loadTexts: ieee8021DevIDMIB.setDescription("This is the management module of the Secure Device Identifier (DevID) for managing IEEE 802.1AR. As specified in the current IEEE 802.1AR draft document. This is the management module of the Secure Device Identifier (DevID) for managing IEEE 802.1AR. A DevID is cryptographically bound to a device, and supports authentication of the device's identity. Locally significant identities can be securely associated with an initial manufacturer-provisioned DevID and used in provisioning and authentication protocols to allow a network administrator to establish the trustworthiness of a device and select appropriate policies for transmission and reception of data and control protocols to and from the device. A device indicates any entity in an IEEE 802 LAN that seeks to obtain services from the network. The use of a Secure Device Identifier (DevID) in a DevID module allows network entities to associate a DevID credential with devices that participate or wish to participate in authenticated access to one or more networks. A device with DevID capability incorporates a globally unique manufacturer provided Initial SecureDevice Identifier (IDevID), stored in a way that ensures it will remain unmodified in the absence of both unrestricted access to the device and extraordinary efforts by an attacker. The device may support the creation of Locally Signification Device Identifiers (LDevIDs) by network administrator. Each LDevID is bound to the device in a way that makes it impossible for it to be forged or transferred to a device with a different IDevID without knowledge of the private key used to effect the crytographic binding. LDevID can incorporate, and fully protect, additional information specified by the network administrator to support local authorization conventions. LDevIDs may also be used to entirely replace IDevIDs in such a way as to assure the privacy of the user of a LDevID and the equipment in which it is installed. Every device has exactly one (IDevID) and zero or more LDevIDs. The number of LDevIDs depends upon the capabilities of the DevID module and on the administrative policy of the network(s) in which the device is used")
devIDMIBNotifications = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 17, 0))
devIDMIBObjects = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 17, 1))
devIDMIBConformance = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 17, 2))
class DevIDErrorStatus(TextualConvention, Integer32):
    description = 'This textual convention is used to define the error state of a devID operation. The value none(1) which means no error, indicating a successful operation. The value internalError(2) is used to display an system error.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("none", 1), ("internalError", 2))

class DevIDAlgorithmIdentifier(TextualConvention, Integer32):
    description = 'This textual convention is used to define the algorithm type for the public key.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("rsaEncryption", 1), ("idecPublicKey", 2))

devIDGlobalMIBObjects = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 17, 1, 1))
devIDMgmtMIBObjects = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 17, 1, 2))
devIDStatsMIBObjects = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 17, 1, 3))
devIDPublicKeyCount = MibScalar((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDPublicKeyCount.setReference('IEEE 802.1AR 6.4, and 6.3.2')
if mibBuilder.loadTexts: devIDPublicKeyCount.setStatus('current')
if mibBuilder.loadTexts: devIDPublicKeyCount.setDescription('This gives the total number of DevID public keys installed in the DevID module.')
devIDPublicKeyTable = MibTable((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 2), )
if mibBuilder.loadTexts: devIDPublicKeyTable.setReference('IEEE 802.1AR 6.4, and 6.3.2')
if mibBuilder.loadTexts: devIDPublicKeyTable.setStatus('current')
if mibBuilder.loadTexts: devIDPublicKeyTable.setDescription('A table containing the public key, the keys keyIndex, a value indicating if the key is enabled. This allows the administrator to determine the DevID keys installed in the DevID module. The maximum number of entries in this table is limited by the value of devIDPublicKeyCount.')
devIDPublicKeyEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: devIDPublicKeyEntry.setStatus('current')
if mibBuilder.loadTexts: devIDPublicKeyEntry.setDescription('An entry containing DevID public key, the keys keyIndex, a value indicating if the key is enabled')
devIDPublicKeyIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: devIDPublicKeyIndex.setReference('IEEE 802.1AR 6.4, and 6.3.2')
if mibBuilder.loadTexts: devIDPublicKeyIndex.setStatus('current')
if mibBuilder.loadTexts: devIDPublicKeyIndex.setDescription('All keys are indexed internally with this object. The value of this object is within 0..devIDPublicKeyCount. This is the keyIndex and operations on keys will use the keyIndex to address a specific key. The IDevID key shall only be at index 0. Any error in retrieving a key will be displayed in the devIDPublicKeyErrStatus object.')
devIDPublicKeyEnabled = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 2, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devIDPublicKeyEnabled.setReference('IEEE 802.1AR 6.4, and 6.3.2')
if mibBuilder.loadTexts: devIDPublicKeyEnabled.setStatus('current')
if mibBuilder.loadTexts: devIDPublicKeyEnabled.setDescription('The enable/disable state of this public key. This setting persists across restarts.')
devIDPublicKeyAlgorithm = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 2, 1, 3), DevIDAlgorithmIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDPublicKeyAlgorithm.setReference('IEEE 802.1AR 6.4, 6.3.2 and 7.2.9')
if mibBuilder.loadTexts: devIDPublicKeyAlgorithm.setStatus('current')
if mibBuilder.loadTexts: devIDPublicKeyAlgorithm.setDescription('The DevID PublicKey Algorithm field shall indicate the public key algorithm identifier. This object identifies the public key algorithm as either rsaEncryption or idecPublicKey')
devIDPublicKeyPubkeySHA1Hash = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 2, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDPublicKeyPubkeySHA1Hash.setReference('IEEE 802.1AR 6.4, 6.3.2 and 7.2.9')
if mibBuilder.loadTexts: devIDPublicKeyPubkeySHA1Hash.setStatus('current')
if mibBuilder.loadTexts: devIDPublicKeyPubkeySHA1Hash.setDescription('The SHA1 Hash of this DevID public key.')
devIDPublicKeyErrStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 2, 1, 5), DevIDErrorStatus().clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDPublicKeyErrStatus.setReference('IEEE 802.1AR 6.4, and 6.3.2')
if mibBuilder.loadTexts: devIDPublicKeyErrStatus.setStatus('current')
if mibBuilder.loadTexts: devIDPublicKeyErrStatus.setDescription('The displays the status of an operation on the public key. The default value is none which means no error, indicating a successful operation.')
devIDCredentialCount = MibScalar((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDCredentialCount.setReference('IEEE 802.1AR 6.4, and 6.3.2')
if mibBuilder.loadTexts: devIDCredentialCount.setStatus('current')
if mibBuilder.loadTexts: devIDCredentialCount.setDescription('This gives the total number of DevID credentials installed in the DevID module.')
devIDCredentialTable = MibTable((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 4), )
if mibBuilder.loadTexts: devIDCredentialTable.setReference('IEEE 802.1AR 6.4, and 6.3.3')
if mibBuilder.loadTexts: devIDCredentialTable.setStatus('current')
if mibBuilder.loadTexts: devIDCredentialTable.setDescription('A table of current DevID credentials, where for each certificate the following are indicated: sha1 hash of the certificate, section7 defined fields of cert serial number, issuer, subject, HardwareModuleName, and pubkey.')
devIDCredentialEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 4, 1), ).setIndexNames((0, "IEEE8021-DEVID-MIB", "devIDCredentialIndex"))
if mibBuilder.loadTexts: devIDCredentialEntry.setStatus('current')
if mibBuilder.loadTexts: devIDCredentialEntry.setDescription('An entry containing DevID Credential information')
devIDCredentialIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: devIDCredentialIndex.setReference('IEEE 802.1AR 6.4, and 6.3.2')
if mibBuilder.loadTexts: devIDCredentialIndex.setStatus('current')
if mibBuilder.loadTexts: devIDCredentialIndex.setDescription('All credentials are indexed internally with this object. The value of this object is within [0..devIDCredentialCount]. This is the credentialIndex and operations on credentials will use the credentialIndex to address a specific crdential. The IDevID credential shall only be at index 0. Additional operations on credentials use the credentialIndex to address a specific credential.')
devIDCredentialEnabled = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 4, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: devIDCredentialEnabled.setReference('IEEE 802.1AR 6.3.6')
if mibBuilder.loadTexts: devIDCredentialEnabled.setStatus('current')
if mibBuilder.loadTexts: devIDCredentialEnabled.setDescription('The enable/disable state of this credential. This setting persists across restarts.')
devIDCredentialSHA1Hash = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 4, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDCredentialSHA1Hash.setReference('IEEE 802.1AR 7.2.2')
if mibBuilder.loadTexts: devIDCredentialSHA1Hash.setStatus('current')
if mibBuilder.loadTexts: devIDCredentialSHA1Hash.setDescription('The SHA1 Hash of this DevID credential.')
devIDCredentialSerialNumber = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 4, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDCredentialSerialNumber.setReference('IEEE 802.1AR 7.2.2')
if mibBuilder.loadTexts: devIDCredentialSerialNumber.setStatus('current')
if mibBuilder.loadTexts: devIDCredentialSerialNumber.setDescription('The serial number of the credential.')
devIDCredentialIssuer = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 4, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDCredentialIssuer.setReference('IEEE 802.1AR 7.2.4')
if mibBuilder.loadTexts: devIDCredentialIssuer.setStatus('current')
if mibBuilder.loadTexts: devIDCredentialIssuer.setDescription('The issuer field of the credential.')
devIDCredentialSubject = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 4, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDCredentialSubject.setReference('IEEE 802.1AR 7.2.8')
if mibBuilder.loadTexts: devIDCredentialSubject.setStatus('current')
if mibBuilder.loadTexts: devIDCredentialSubject.setDescription('The subject field of the credential.')
devIDCredentialSubjectAltName = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 4, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDCredentialSubjectAltName.setReference('IEEE 802.1AR 7.2.8')
if mibBuilder.loadTexts: devIDCredentialSubjectAltName.setStatus('current')
if mibBuilder.loadTexts: devIDCredentialSubjectAltName.setDescription('The subjectaltname field of the credential')
devIDCredentialEntityIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 4, 1, 8), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDCredentialEntityIndex.setReference('IEEE 802.1AR 6.4')
if mibBuilder.loadTexts: devIDCredentialEntityIndex.setStatus('current')
if mibBuilder.loadTexts: devIDCredentialEntityIndex.setDescription('This refers to the entPhysicalIndex in entPhysicalTable to identify the associated physical entity.')
devIDCredentialPubkeyIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 4, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDCredentialPubkeyIndex.setReference('IEEE 802.1AR 7.2.9')
if mibBuilder.loadTexts: devIDCredentialPubkeyIndex.setStatus('current')
if mibBuilder.loadTexts: devIDCredentialPubkeyIndex.setDescription('Has the appropriate devIDPublicKeyIndex value from devIDPublicKeyTable to identify the public key information.')
devIDCredentialErrStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 4, 1, 10), DevIDErrorStatus().clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDCredentialErrStatus.setReference('IEEE 802.1AR 6.4, and 6.3.2')
if mibBuilder.loadTexts: devIDCredentialErrStatus.setStatus('current')
if mibBuilder.loadTexts: devIDCredentialErrStatus.setDescription('The displays the status of an operation on the credential. The default value is none which means no error, indicating a successful operation.')
devIDStatisticsTable = MibTable((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 5), )
if mibBuilder.loadTexts: devIDStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: devIDStatisticsTable.setDescription('A table containing statistics information.')
devIDStatisticsEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 5, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: devIDStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: devIDStatisticsEntry.setDescription('An entry containing DevID statistics.')
devIDStatisticKeyGenerationCount = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDStatisticKeyGenerationCount.setReference('IEEE 802.1AR 6.4, and 6.3.8')
if mibBuilder.loadTexts: devIDStatisticKeyGenerationCount.setStatus('current')
if mibBuilder.loadTexts: devIDStatisticKeyGenerationCount.setDescription('This gives the total number of additional LDevID key material generation within the DevID module. Discontinuities occur at system restart and counter rollover.')
devIDStatisticKeyInsertionCount = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDStatisticKeyInsertionCount.setReference('IEEE 802.1AR 6.4, and 6.3.9')
if mibBuilder.loadTexts: devIDStatisticKeyInsertionCount.setStatus('current')
if mibBuilder.loadTexts: devIDStatisticKeyInsertionCount.setDescription('This gives the total number of additional LDevID key material generation followed by an insertion within the DevID module. Discontinuities occur at system restart and counter rollover.')
devIDStatisticKeyDeletionCount = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDStatisticKeyDeletionCount.setReference('IEEE 802.1AR 6.4, and 6.3.10')
if mibBuilder.loadTexts: devIDStatisticKeyDeletionCount.setStatus('current')
if mibBuilder.loadTexts: devIDStatisticKeyDeletionCount.setDescription('This gives the total number of LDevID keypair deletions within the DevID module. Discontinuities occur at system restart and counter rollover.')
devIDStatisticCSRGenerationCount = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDStatisticCSRGenerationCount.setReference('IEEE 802.1AR 6.4, and 6.3.11')
if mibBuilder.loadTexts: devIDStatisticCSRGenerationCount.setStatus('current')
if mibBuilder.loadTexts: devIDStatisticCSRGenerationCount.setDescription('This gives the total number of Certificate Signing Request (CSR) generation as defined in RFC2986. Discontinuities occur at system restart and counter rollover.')
devIDStatisticCredentialInsertionCount = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDStatisticCredentialInsertionCount.setReference('IEEE 802.1AR 6.4, and 6.3.12')
if mibBuilder.loadTexts: devIDStatisticCredentialInsertionCount.setStatus('current')
if mibBuilder.loadTexts: devIDStatisticCredentialInsertionCount.setDescription('This gives the total number of LDevID credentials installed into the DevID module. Discontinuities occur at system restart and counter rollover.')
devIDStatisticCredentialDeletionCount = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 17, 1, 2, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devIDStatisticCredentialDeletionCount.setReference('IEEE 802.1AR 6.4, and 6.3.14')
if mibBuilder.loadTexts: devIDStatisticCredentialDeletionCount.setStatus('current')
if mibBuilder.loadTexts: devIDStatisticCredentialDeletionCount.setDescription('This gives the total number of LDevID credentials deletions into the DevID module. Discontinuities occur at system restart and counter rollover.')
devIDMIBCompliances = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 17, 2, 1))
devIDMIBGroups = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 17, 2, 2))
devIDMIBModuleCompliance = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 17, 2, 1, 1)).setObjects(("IEEE8021-DEVID-MIB", "devIDMIBObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    devIDMIBModuleCompliance = devIDMIBModuleCompliance.setStatus('current')
if mibBuilder.loadTexts: devIDMIBModuleCompliance.setDescription('Module Compliance for this mib.')
devIDMIBObjectGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 17, 2, 2, 1)).setObjects(("IEEE8021-DEVID-MIB", "devIDPublicKeyCount"), ("IEEE8021-DEVID-MIB", "devIDPublicKeyEnabled"), ("IEEE8021-DEVID-MIB", "devIDPublicKeyAlgorithm"), ("IEEE8021-DEVID-MIB", "devIDPublicKeyPubkeySHA1Hash"), ("IEEE8021-DEVID-MIB", "devIDPublicKeyErrStatus"), ("IEEE8021-DEVID-MIB", "devIDCredentialCount"), ("IEEE8021-DEVID-MIB", "devIDCredentialEnabled"), ("IEEE8021-DEVID-MIB", "devIDCredentialSHA1Hash"), ("IEEE8021-DEVID-MIB", "devIDCredentialSerialNumber"), ("IEEE8021-DEVID-MIB", "devIDCredentialIssuer"), ("IEEE8021-DEVID-MIB", "devIDCredentialSubject"), ("IEEE8021-DEVID-MIB", "devIDCredentialSubjectAltName"), ("IEEE8021-DEVID-MIB", "devIDCredentialEntityIndex"), ("IEEE8021-DEVID-MIB", "devIDCredentialPubkeyIndex"), ("IEEE8021-DEVID-MIB", "devIDCredentialErrStatus"), ("IEEE8021-DEVID-MIB", "devIDStatisticKeyGenerationCount"), ("IEEE8021-DEVID-MIB", "devIDStatisticKeyInsertionCount"), ("IEEE8021-DEVID-MIB", "devIDStatisticKeyDeletionCount"), ("IEEE8021-DEVID-MIB", "devIDStatisticCSRGenerationCount"), ("IEEE8021-DEVID-MIB", "devIDStatisticCredentialInsertionCount"), ("IEEE8021-DEVID-MIB", "devIDStatisticCredentialDeletionCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    devIDMIBObjectGroup = devIDMIBObjectGroup.setStatus('current')
if mibBuilder.loadTexts: devIDMIBObjectGroup.setDescription('A collection of objects providing public key manageability, credential manageability and stats.')
mibBuilder.exportSymbols("IEEE8021-DEVID-MIB", devIDStatisticCSRGenerationCount=devIDStatisticCSRGenerationCount, devIDStatisticsEntry=devIDStatisticsEntry, devIDStatisticKeyInsertionCount=devIDStatisticKeyInsertionCount, DevIDErrorStatus=DevIDErrorStatus, devIDCredentialSHA1Hash=devIDCredentialSHA1Hash, devIDStatisticKeyDeletionCount=devIDStatisticKeyDeletionCount, devIDPublicKeyEnabled=devIDPublicKeyEnabled, devIDCredentialEntityIndex=devIDCredentialEntityIndex, devIDCredentialCount=devIDCredentialCount, ieee8021DevIDMIB=ieee8021DevIDMIB, devIDCredentialSubject=devIDCredentialSubject, devIDMIBGroups=devIDMIBGroups, devIDPublicKeyCount=devIDPublicKeyCount, devIDStatsMIBObjects=devIDStatsMIBObjects, DevIDAlgorithmIdentifier=DevIDAlgorithmIdentifier, devIDCredentialErrStatus=devIDCredentialErrStatus, devIDMIBObjects=devIDMIBObjects, devIDCredentialIndex=devIDCredentialIndex, devIDMIBNotifications=devIDMIBNotifications, devIDCredentialEntry=devIDCredentialEntry, devIDGlobalMIBObjects=devIDGlobalMIBObjects, devIDCredentialEnabled=devIDCredentialEnabled, devIDMgmtMIBObjects=devIDMgmtMIBObjects, devIDPublicKeyIndex=devIDPublicKeyIndex, devIDPublicKeyTable=devIDPublicKeyTable, devIDStatisticCredentialDeletionCount=devIDStatisticCredentialDeletionCount, devIDStatisticsTable=devIDStatisticsTable, devIDCredentialPubkeyIndex=devIDCredentialPubkeyIndex, devIDPublicKeyAlgorithm=devIDPublicKeyAlgorithm, PYSNMP_MODULE_ID=ieee8021DevIDMIB, devIDCredentialTable=devIDCredentialTable, devIDCredentialIssuer=devIDCredentialIssuer, devIDPublicKeyPubkeySHA1Hash=devIDPublicKeyPubkeySHA1Hash, devIDPublicKeyErrStatus=devIDPublicKeyErrStatus, devIDMIBObjectGroup=devIDMIBObjectGroup, devIDStatisticKeyGenerationCount=devIDStatisticKeyGenerationCount, devIDCredentialSerialNumber=devIDCredentialSerialNumber, devIDMIBModuleCompliance=devIDMIBModuleCompliance, devIDMIBCompliances=devIDMIBCompliances, devIDPublicKeyEntry=devIDPublicKeyEntry, devIDMIBConformance=devIDMIBConformance, devIDStatisticCredentialInsertionCount=devIDStatisticCredentialInsertionCount, devIDCredentialSubjectAltName=devIDCredentialSubjectAltName)
