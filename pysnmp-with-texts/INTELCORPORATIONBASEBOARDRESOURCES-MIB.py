#
# PySNMP MIB module INTELCORPORATIONBASEBOARDRESOURCES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTELCORPORATIONBASEBOARDRESOURCES-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:55:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, Counter32, Gauge32, Integer32, enterprises, MibIdentifier, TimeTicks, Counter64, IpAddress, ModuleIdentity, NotificationType, Unsigned32, ObjectIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Gauge32", "Integer32", "enterprises", "MibIdentifier", "TimeTicks", "Counter64", "IpAddress", "ModuleIdentity", "NotificationType", "Unsigned32", "ObjectIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DmiInteger(Integer32):
    pass

class DmiInteger64X(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-18446744073709551615, 18446744073709551615)

class DmiDisplaystring(DisplayString):
    pass

class DmiDateX(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(28, 28)
    fixedLength = 28

class DmiComponentIndex(Integer32):
    pass

intel = MibIdentifier((1, 3, 6, 1, 4, 1, 343))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2))
server_products = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 6)).setLabel("server-products")
platforms = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 6, 2))
resources = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3))
dmtfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1))
tComponentid = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 1), )
if mibBuilder.loadTexts: tComponentid.setStatus('mandatory')
if mibBuilder.loadTexts: tComponentid.setDescription('This group defines the attributes common to all components. This groupis required.')
eComponentid = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 1, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARDRESOURCES-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eComponentid.setStatus('mandatory')
if mibBuilder.loadTexts: eComponentid.setDescription('')
a1Manufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 1, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Manufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: a1Manufacturer.setDescription('Manufacturer of this system.')
a1Product = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 1, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Product.setStatus('mandatory')
if mibBuilder.loadTexts: a1Product.setDescription('Product name for this system.')
a1Version = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 1, 1, 3), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Version.setStatus('mandatory')
if mibBuilder.loadTexts: a1Version.setDescription('Version number of this system.')
a1SerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 1, 1, 4), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1SerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a1SerialNumber.setDescription('Serial number for this system.')
a1Installation = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 1, 1, 5), DmiDateX()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Installation.setStatus('mandatory')
if mibBuilder.loadTexts: a1Installation.setDescription('The time and date when this component was installed.')
a1Verify = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vAnErrorOccurredCheckStatusCode", 0), ("vThisComponentDoesNotExist", 1), ("vVerificationIsNotSupported", 2), ("vReserved", 3), ("vThisComponentExistsButTheFunctionalityI", 4), ("vThisComponentExistsButTheFunctionality1", 5), ("vThisComponentExistsAndIsNotFunctioningC", 6), ("vThisComponentExistsAndIsFunctioningCorr", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1Verify.setStatus('mandatory')
if mibBuilder.loadTexts: a1Verify.setDescription('A code that provides a level of verification that the component is stillinstalled and working.')
tSystemResources2 = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 41), )
if mibBuilder.loadTexts: tSystemResources2.setStatus('mandatory')
if mibBuilder.loadTexts: tSystemResources2.setDescription('This group describes the base level of Memory, I/O, DMA, and INT(interrupt) resources that are used by a device in the system.')
eSystemResources2 = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 41, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARDRESOURCES-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARDRESOURCES-MIB", "a41SystemResourcesIndex"))
if mibBuilder.loadTexts: eSystemResources2.setStatus('mandatory')
if mibBuilder.loadTexts: eSystemResources2.setDescription('')
a41SystemResourcesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 41, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a41SystemResourcesIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a41SystemResourcesIndex.setDescription('A number that uniquely identifies the rows in this table.')
a41ResourceUser = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 41, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a41ResourceUser.setStatus('mandatory')
if mibBuilder.loadTexts: a41ResourceUser.setDescription("A unique number for each different 'resource user' that has resourcesspecified in this table.")
a41ResourceSet = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 41, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a41ResourceSet.setStatus('mandatory')
if mibBuilder.loadTexts: a41ResourceSet.setDescription('A number used as the ID of a set of Memory, I/O, DMA and/or INTresources for the resource user.')
a41ResourceAssignment = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 41, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vAllocated", 3), ("vAssignable", 4), ("vTemporaryAssignment", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a41ResourceAssignment.setStatus('mandatory')
if mibBuilder.loadTexts: a41ResourceAssignment.setDescription('Describes the state of the assignment of this set of resources. (Note: Thisvalue must be the same for all resources within a given set.)')
a41ResourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 41, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vMemory", 3), ("vIo", 4), ("vIrq", 5), ("vDma", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a41ResourceType.setStatus('mandatory')
if mibBuilder.loadTexts: a41ResourceType.setDescription('The type of resource described by this row.')
a41ResourceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 41, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a41ResourceNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a41ResourceNumber.setDescription('DMA or IRQ number - 0 for Memory and I/O ranges. This is theinterrupt or DMA number relative to the bus that the interrupt is sourced from.')
a41ResourceInfoId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 41, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a41ResourceInfoId.setStatus('mandatory')
if mibBuilder.loadTexts: a41ResourceInfoId.setDescription("ID of the row in the 'Info' table for this type of system resource. E.g. ifthis Resource Type is 'I/O' then this would be an index into the 'System Resource I/OInfo' table.")
a41StartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 41, 1, 8), DmiInteger64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a41StartAddress.setStatus('mandatory')
if mibBuilder.loadTexts: a41StartAddress.setDescription('Starting physical address for this memory range, or the minimum baseaddress if this attribute is being used to describe a programmable range. 0 for IRQ andDMA resources.')
a41EndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 41, 1, 9), DmiInteger64X()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a41EndAddress.setStatus('mandatory')
if mibBuilder.loadTexts: a41EndAddress.setDescription('Ending physical address (address of last byte) for this memory range, orthe maximum configurable base address if this attribute is being used to describe aprogrammable range. 0 for IRQ and DMA resources.')
a41ResourceSize = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 41, 1, 10), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a41ResourceSize.setStatus('mandatory')
if mibBuilder.loadTexts: a41ResourceSize.setDescription('Number of consecutive bytes that a memory or I/O resource consumes. 0for IRQ and DMA resources.')
a41BaseAlignment = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 41, 1, 11), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a41BaseAlignment.setStatus('mandatory')
if mibBuilder.loadTexts: a41BaseAlignment.setDescription('Alignment of Start Address, in bytes. Indicates the granularity of theincrements in which a programmable range can be set.')
a41Shareable = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 41, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a41Shareable.setStatus('mandatory')
if mibBuilder.loadTexts: a41Shareable.setDescription('Indicates whether the resource is shareable.')
a41Shared = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 41, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a41Shared.setStatus('mandatory')
if mibBuilder.loadTexts: a41Shared.setDescription('Indicates whether this resource, or a portion of this resource, is sharedwith another device.')
tSystemResourceDeviceInfo = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 42), )
if mibBuilder.loadTexts: tSystemResourceDeviceInfo.setStatus('mandatory')
if mibBuilder.loadTexts: tSystemResourceDeviceInfo.setDescription('This group describes the base level of Memory, I/O, DMA, and INT(interrupt) resources that are used by a device in the system.')
eSystemResourceDeviceInfo = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 42, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARDRESOURCES-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARDRESOURCES-MIB", "a42ResourceUser"))
if mibBuilder.loadTexts: eSystemResourceDeviceInfo.setStatus('mandatory')
if mibBuilder.loadTexts: eSystemResourceDeviceInfo.setDescription('')
a42ResourceUser = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 42, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a42ResourceUser.setStatus('mandatory')
if mibBuilder.loadTexts: a42ResourceUser.setDescription("A number that uniquely identifies this device. This number may bederived from the 'device number' that is assigned by 'Plug N Play', or may be uniquelyassigned by the component instrumentation.")
a42DeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 42, 1, 2), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a42DeviceId.setStatus('mandatory')
if mibBuilder.loadTexts: a42DeviceId.setDescription('Physical Device ID from Config manager info. Equal to theCISTPL_ ANFID field for PCMCIA devices. 0xFFFFFFFF = Unknown')
a42DeviceSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 42, 1, 3), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a42DeviceSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a42DeviceSerialNumber.setDescription('Device Serial Number from Config manager info. 0 = Undefined')
a42LogicalDeviceId_ClassCode = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 42, 1, 4), DmiInteger()).setLabel("a42LogicalDeviceId-ClassCode").setMaxAccess("readonly")
if mibBuilder.loadTexts: a42LogicalDeviceId_ClassCode.setStatus('mandatory')
if mibBuilder.loadTexts: a42LogicalDeviceId_ClassCode.setDescription('Logical device ID for PnP ISA devices, Class code for PCI devices, CISTPL_FUNCID for PCMCIA devices. 0xFFFFFFFF = Undefined, 0 = reserved')
a42DeviceFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 42, 1, 5), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a42DeviceFlags.setStatus('mandatory')
if mibBuilder.loadTexts: a42DeviceFlags.setDescription('Device flags from config manager info.Bit 0: 1 = device has been initializedBit 1: 1 = device is enabledBit 2: 1 = device config has been lockedBit 3: 1 = device has temporary config resources assignedBit 4: 1 = device is reconfigurable')
a42DeviceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 42, 1, 6), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a42DeviceNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a42DeviceNumber.setDescription('Device Number for PCI Devices, Logical Device number for PnPDevices. 0 otherwise.')
a42FunctionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 42, 1, 7), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a42FunctionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a42FunctionNumber.setDescription('Function Number for PCI & EISA Devices. 0 otherwise.')
a42BusType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 42, 1, 8), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a42BusType.setStatus('mandatory')
if mibBuilder.loadTexts: a42BusType.setDescription('Bus number (0-255) for PCI Devices, Slot number for EISA and PnPDevices, Card logical socket number for PCMCIA devices. Zero otherwise.')
a42CmReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 42, 1, 9), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a42CmReserved.setStatus('mandatory')
if mibBuilder.loadTexts: a42CmReserved.setDescription('Data from the Reserved field of the Configuration Manager bus accessstructure, or 0.')
tSystemResourceMemoryInfo = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 43), )
if mibBuilder.loadTexts: tSystemResourceMemoryInfo.setStatus('mandatory')
if mibBuilder.loadTexts: tSystemResourceMemoryInfo.setDescription('This group presents additional information about memory resource thathave been defined in the System Resources table.')
eSystemResourceMemoryInfo = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 43, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARDRESOURCES-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARDRESOURCES-MIB", "a43SystemResourceMemoryInfoIndex"))
if mibBuilder.loadTexts: eSystemResourceMemoryInfo.setStatus('mandatory')
if mibBuilder.loadTexts: eSystemResourceMemoryInfo.setDescription('')
a43SystemResourceMemoryInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 43, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a43SystemResourceMemoryInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a43SystemResourceMemoryInfoIndex.setDescription('A number the uniquely identifies rows in this table.')
a43IsapcmciaRangeDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 43, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("v8-bitMemoryOnly", 3), ("v16-bitMemoryOnly", 4), ("v8-And16-bitMemorySupported", 5), ("v32-bitMemoryOnly", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a43IsapcmciaRangeDescriptor.setStatus('mandatory')
if mibBuilder.loadTexts: a43IsapcmciaRangeDescriptor.setDescription('For PnP ISA/PCMCIA memory range descriptor compatibility.')
a43EisaRangeDescriptor = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 43, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("v8-bitMemoryOnly", 3), ("v16-bitMemoryOnly", 4), ("v8-And16-bitMemorySupported", 5), ("v32-bitMemoryOnly", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a43EisaRangeDescriptor.setStatus('mandatory')
if mibBuilder.loadTexts: a43EisaRangeDescriptor.setDescription('For PnP EISA memory range descriptor compatibility.')
a43DecodeSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 43, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vDecodeSupportsHighAddress", 3), ("vDecodeSupportsRangeLength", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a43DecodeSupport.setStatus('mandatory')
if mibBuilder.loadTexts: a43DecodeSupport.setDescription('For PnP memory range descriptor compatibility.')
a43Cacheable = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 43, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("vFalse", 0), ("vTrue", 1), ("vUnknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a43Cacheable.setStatus('mandatory')
if mibBuilder.loadTexts: a43Cacheable.setDescription('Indicates whether it is allowable for this memory range to be cached ornot.')
a43CacheType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 43, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vWrite-back", 3), ("vWrite-through", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a43CacheType.setStatus('mandatory')
if mibBuilder.loadTexts: a43CacheType.setDescription('Indicates Cache Type that is compatible with this resource.')
a43Read_write = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 43, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vRomReadOnly", 3), ("vRamReadwrite", 4)))).setLabel("a43Read-write").setMaxAccess("readonly")
if mibBuilder.loadTexts: a43Read_write.setStatus('mandatory')
if mibBuilder.loadTexts: a43Read_write.setDescription('Indicates the read-write accessibility of this memory resource.')
tSystemResourceIoInfo = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 44), )
if mibBuilder.loadTexts: tSystemResourceIoInfo.setStatus('mandatory')
if mibBuilder.loadTexts: tSystemResourceIoInfo.setDescription('This group presents additional information about I/O resources that havebeen defined in the System Resources table.')
eSystemResourceIoInfo = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 44, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARDRESOURCES-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARDRESOURCES-MIB", "a44SystemResourceIoInfoIndex"))
if mibBuilder.loadTexts: eSystemResourceIoInfo.setStatus('mandatory')
if mibBuilder.loadTexts: eSystemResourceIoInfo.setDescription('')
a44SystemResourceIoInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 44, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a44SystemResourceIoInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a44SystemResourceIoInfoIndex.setDescription('A number the uniquely identifies rows in this table.')
a44IoDecode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 44, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("v10Bits", 3), ("v16Bits", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a44IoDecode.setStatus('mandatory')
if mibBuilder.loadTexts: a44IoDecode.setDescription('Number of bits used for I/O decode')
tSystemResourceIrqInfo = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 45), )
if mibBuilder.loadTexts: tSystemResourceIrqInfo.setStatus('mandatory')
if mibBuilder.loadTexts: tSystemResourceIrqInfo.setDescription('This group presents additional information about I/O resources that havebeen defined in the System Resources table.')
eSystemResourceIrqInfo = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 45, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARDRESOURCES-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARDRESOURCES-MIB", "a45SystemResourceIrqInfoIndex"))
if mibBuilder.loadTexts: eSystemResourceIrqInfo.setStatus('mandatory')
if mibBuilder.loadTexts: eSystemResourceIrqInfo.setDescription('')
a45SystemResourceIrqInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 45, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a45SystemResourceIrqInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a45SystemResourceIrqInfoIndex.setDescription('A number the uniquely identifies rows in this table.')
a45TriggerType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 45, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vLevel", 3), ("vEdge", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a45TriggerType.setStatus('mandatory')
if mibBuilder.loadTexts: a45TriggerType.setDescription('The trigger type for this interrupt.')
a45TriggerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 45, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vActiveLow", 3), ("vActiveHigh", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a45TriggerLevel.setStatus('mandatory')
if mibBuilder.loadTexts: a45TriggerLevel.setDescription('The trigger level for this interrupt.')
tSystemResourceDmaInfo = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 46), )
if mibBuilder.loadTexts: tSystemResourceDmaInfo.setStatus('mandatory')
if mibBuilder.loadTexts: tSystemResourceDmaInfo.setDescription('This group presents additional information about DMA resources thathave been defined in the System Resources table.')
eSystemResourceDmaInfo = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 46, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARDRESOURCES-MIB", "DmiComponentIndex"), (0, "INTELCORPORATIONBASEBOARDRESOURCES-MIB", "a46SystemResourceDmaInfoIndex"))
if mibBuilder.loadTexts: eSystemResourceDmaInfo.setStatus('mandatory')
if mibBuilder.loadTexts: eSystemResourceDmaInfo.setDescription('')
a46SystemResourceDmaInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 46, 1, 1), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a46SystemResourceDmaInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a46SystemResourceDmaInfoIndex.setDescription('A number the uniquely identifies rows in this table.')
a46DmaTransferWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 46, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("v8-bit", 3), ("v8-And16-bit", 4), ("v16-bit", 5), ("v32-bit", 6), ("v64-bit", 7), ("v128-bit", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a46DmaTransferWidth.setStatus('mandatory')
if mibBuilder.loadTexts: a46DmaTransferWidth.setDescription('Width of DMA transfers supported')
a46DmaAddressSize = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 46, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6, 7))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("v8-bit", 3), ("v16-bit", 5), ("v32-bit", 6), ("v64-bit", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a46DmaAddressSize.setStatus('mandatory')
if mibBuilder.loadTexts: a46DmaAddressSize.setDescription('The width of the DMA address.')
a46DmaMaximumTransferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 46, 1, 4), DmiInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a46DmaMaximumTransferSize.setStatus('mandatory')
if mibBuilder.loadTexts: a46DmaMaximumTransferSize.setDescription('The maximum number of bytes that can be transferred by thisDMA Channel.')
a46DmaTransferPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 46, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("v8-bit", 3), ("v8-And16-bit", 4), ("v16-bit", 5), ("v32-bit", 6), ("v64-bit", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a46DmaTransferPreference.setStatus('mandatory')
if mibBuilder.loadTexts: a46DmaTransferPreference.setDescription('DMA transfer type preference.')
a46BusMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 46, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vLogicalDeviceIsNotABusMaster", 3), ("vLogicalDeviceIsABusMaster", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a46BusMaster.setStatus('mandatory')
if mibBuilder.loadTexts: a46BusMaster.setDescription('Indicates whether the device is using DMA is a bus master.')
a46ByteMode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 46, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vDmaMayNotExecuteInCountByByteMode", 3), ("vDmaMayExecuteInCountByByteMode", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a46ByteMode.setStatus('mandatory')
if mibBuilder.loadTexts: a46ByteMode.setDescription("Indicates whether DMA may execute in 'count by byte' mode.")
a46WordMode = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 46, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vDmaMayNotExecuteInCountByWordMode", 3), ("vDmaMayExecuteInCountByWordMode", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a46WordMode.setStatus('mandatory')
if mibBuilder.loadTexts: a46WordMode.setDescription("Indicates whether DMA may execute in 'count by word' mode.")
a46ChannelTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 46, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vIsaCompatible", 3), ("vTypeA", 4), ("vTypeB", 5), ("vTypeF", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a46ChannelTiming.setStatus('mandatory')
if mibBuilder.loadTexts: a46ChannelTiming.setDescription('DMA channel speed support.')
a46Type_cTiming = MibScalar((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 46, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vOther", 1), ("vUnknown", 2), ("vIsaCompatible", 3), ("vCTypeTimingIsNotSupported", 4), ("vCTypeTimingIsSupported", 5)))).setLabel("a46Type-cTiming").setMaxAccess("readonly")
if mibBuilder.loadTexts: a46Type_cTiming.setStatus('mandatory')
if mibBuilder.loadTexts: a46Type_cTiming.setDescription('Indicates whether C type (burst) timing is supported.')
tMiftomib = MibTable((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 1001), )
if mibBuilder.loadTexts: tMiftomib.setStatus('mandatory')
if mibBuilder.loadTexts: tMiftomib.setDescription('This group defines attributes required for DMI to SNMP translati n.')
eMiftomib = MibTableRow((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 1001, 1), ).setIndexNames((0, "INTELCORPORATIONBASEBOARDRESOURCES-MIB", "DmiComponentIndex"))
if mibBuilder.loadTexts: eMiftomib.setStatus('mandatory')
if mibBuilder.loadTexts: eMiftomib.setDescription('')
a1001MibName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 1001, 1, 1), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1001MibName.setStatus('mandatory')
if mibBuilder.loadTexts: a1001MibName.setDescription('The MIB name that defines this MIF')
a1001MibOid = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 1001, 1, 2), DmiDisplaystring()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a1001MibOid.setStatus('mandatory')
if mibBuilder.loadTexts: a1001MibOid.setDescription('The MIB Object Identifier that corresponds to this MIF')
a1001DisableTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 2, 6, 2, 3, 1, 1001, 1, 3), DmiInteger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a1001DisableTrap.setStatus('mandatory')
if mibBuilder.loadTexts: a1001DisableTrap.setDescription('This attribute can be changed to disable sending oftraps from this component')
mibBuilder.exportSymbols("INTELCORPORATIONBASEBOARDRESOURCES-MIB", eSystemResourceDmaInfo=eSystemResourceDmaInfo, a41ResourceInfoId=a41ResourceInfoId, tMiftomib=tMiftomib, DmiInteger64X=DmiInteger64X, a45TriggerType=a45TriggerType, platforms=platforms, a42DeviceNumber=a42DeviceNumber, a46DmaTransferWidth=a46DmaTransferWidth, a46SystemResourceDmaInfoIndex=a46SystemResourceDmaInfoIndex, a43IsapcmciaRangeDescriptor=a43IsapcmciaRangeDescriptor, a1001MibOid=a1001MibOid, a42ResourceUser=a42ResourceUser, DmiComponentIndex=DmiComponentIndex, tSystemResourceDmaInfo=tSystemResourceDmaInfo, tSystemResourceIrqInfo=tSystemResourceIrqInfo, a1Verify=a1Verify, a43EisaRangeDescriptor=a43EisaRangeDescriptor, a41StartAddress=a41StartAddress, a41ResourceUser=a41ResourceUser, dmtfGroups=dmtfGroups, a1Version=a1Version, a41ResourceSize=a41ResourceSize, a44IoDecode=a44IoDecode, a41ResourceSet=a41ResourceSet, eSystemResourceIoInfo=eSystemResourceIoInfo, tSystemResourceMemoryInfo=tSystemResourceMemoryInfo, a42CmReserved=a42CmReserved, a46WordMode=a46WordMode, a46DmaAddressSize=a46DmaAddressSize, DmiDateX=DmiDateX, DmiInteger=DmiInteger, a41ResourceAssignment=a41ResourceAssignment, a43Read_write=a43Read_write, a42DeviceId=a42DeviceId, a41SystemResourcesIndex=a41SystemResourcesIndex, eComponentid=eComponentid, eMiftomib=eMiftomib, a41ResourceNumber=a41ResourceNumber, a41BaseAlignment=a41BaseAlignment, tComponentid=tComponentid, a42LogicalDeviceId_ClassCode=a42LogicalDeviceId_ClassCode, a42FunctionNumber=a42FunctionNumber, a1001DisableTrap=a1001DisableTrap, eSystemResourceMemoryInfo=eSystemResourceMemoryInfo, a46ChannelTiming=a46ChannelTiming, server_products=server_products, eSystemResourceDeviceInfo=eSystemResourceDeviceInfo, a46BusMaster=a46BusMaster, a1Installation=a1Installation, tSystemResourceIoInfo=tSystemResourceIoInfo, a43CacheType=a43CacheType, resources=resources, a46ByteMode=a46ByteMode, a43Cacheable=a43Cacheable, a45SystemResourceIrqInfoIndex=a45SystemResourceIrqInfoIndex, tSystemResources2=tSystemResources2, DmiDisplaystring=DmiDisplaystring, intel=intel, a46DmaMaximumTransferSize=a46DmaMaximumTransferSize, a1SerialNumber=a1SerialNumber, a43DecodeSupport=a43DecodeSupport, a46Type_cTiming=a46Type_cTiming, eSystemResources2=eSystemResources2, a45TriggerLevel=a45TriggerLevel, a1Product=a1Product, a41ResourceType=a41ResourceType, a44SystemResourceIoInfoIndex=a44SystemResourceIoInfoIndex, a42DeviceFlags=a42DeviceFlags, a41Shared=a41Shared, products=products, eSystemResourceIrqInfo=eSystemResourceIrqInfo, tSystemResourceDeviceInfo=tSystemResourceDeviceInfo, a41EndAddress=a41EndAddress, a42DeviceSerialNumber=a42DeviceSerialNumber, a1Manufacturer=a1Manufacturer, a42BusType=a42BusType, a46DmaTransferPreference=a46DmaTransferPreference, a41Shareable=a41Shareable, a1001MibName=a1001MibName, a43SystemResourceMemoryInfoIndex=a43SystemResourceMemoryInfoIndex)
