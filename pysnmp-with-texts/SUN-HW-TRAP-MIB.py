#
# PySNMP MIB module SUN-HW-TRAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SUN-HW-TRAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:12:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
IpAddress, Counter32, Bits, ObjectIdentity, Integer32, enterprises, MibIdentifier, Counter64, TimeTicks, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Gauge32, Unsigned32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter32", "Bits", "ObjectIdentity", "Integer32", "enterprises", "MibIdentifier", "Counter64", "TimeTicks", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Gauge32", "Unsigned32", "NotificationType")
TextualConvention, RowPointer, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowPointer", "DisplayString")
sun = MibIdentifier((1, 3, 6, 1, 4, 1, 42))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2))
ilom = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175))
sunHwTrapMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 42, 2, 175, 103))
sunHwTrapMIB.setRevisions(('2010-05-05 00:00', '2009-12-04 00:00', '2009-09-09 00:00', '2009-04-17 00:00', '2008-10-29 00:00', '2007-02-06 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: sunHwTrapMIB.setRevisionsDescriptions(('Version: 2.4 Add sunHwTrapFaultDiagnosed trap', 'Version: 2.3 Add Storage and drive traps', 'Version: 2.2 Bug fix: missing varbinds in sunHwTrapPowerConsumptionThresholdDeasserted', 'Version: 2.1 Released with ILOM version 3.0', 'Version: 1.1 Added keywords for HP SIM integration', 'Version: 1.0',))
if mibBuilder.loadTexts: sunHwTrapMIB.setLastUpdated('201005050000Z')
if mibBuilder.loadTexts: sunHwTrapMIB.setOrganization('Oracle Corporation')
if mibBuilder.loadTexts: sunHwTrapMIB.setContactInfo('Oracle Corporation Worldwide Headquarters 500 Oracle Parkway Redwood Shores, CA 94065 U.S.A http://www.oracle.com or contact your local support representative')
if mibBuilder.loadTexts: sunHwTrapMIB.setDescription('Copyright (c) 2007, 2010, Oracle and/or its affiliates. All rights reserved. The SUN-HW-TRAP-MIB describes the hardware related notifications/traps that may be generated by Oracle systems')
sunHwTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 1))
sunHwTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2))
sunHwTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0))
sunHwTrapData = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 1))
sunHwTrapDataTables = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 2))
sunHwTrapConformances = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 3))
sunHwTrapCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 3, 1))
sunHwTrapGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 3, 2))
sunHwTrapObjectGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 3, 2, 1))
sunHwTrapNotifGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 3, 2, 2))
class SunHwTrapThresholdTypeTC(TextualConvention, Integer32):
    description = 'Describes whether a threshold is an upper threshold or a lower threshold'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("upper", 1), ("lower", 2), ("unknown", 3))

class SunHwTrapSeverityTC(TextualConvention, Integer32):
    description = 'Describes the severity levels that a trap can take.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("other", 1), ("fatal", 2), ("critical", 3), ("nonCritical", 4), ("ok", 5))

class SunHwTrapHAStateTC(TextualConvention, Integer32):
    description = 'Describes the states that a high availability system can take.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("other", 1), ("initializing", 2), ("standalone", 3), ("standby", 4), ("master", 5))

class SunHwTrapHardDriveStatesTC(TextualConvention, Integer32):
    description = 'Describes the states a hard drive can be in when hard drive status is reported.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("other", 1), ("present", 2), ("fault", 3), ("predictiveFailure", 4), ("hotSpare", 5), ("consistencyCheckInProgress", 6), ("inCriticalArray", 7), ("inFailedArray", 8), ("rebuildInProgress", 9), ("rebuildAborted", 10))

class SunHwTrapDisableReasonsTC(TextualConvention, Integer32):
    description = 'Describes the reasons that a component is disabled.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("unknown", 1), ("faultOrError", 2), ("configuration", 3))

class SunHwTrapFloatingPointValueTC(TextualConvention, OctetString):
    description = 'A floating point number converted to a string in decimal notation of the form [-]mmm.dd'
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class SunHwTrapHardDriveProbableCauseTC(TextualConvention, Integer32):
    description = 'Probable cause for hard drive error'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("unknown", 1), ("reassignwriteoperationfailed", 2), ("unrecoverablemediumerrorduringrebuild", 3), ("badblocklogfull", 4), ("badblocklogalmostfull", 5), ("rebuildfailed", 6), ("globalsparecoverage", 7), ("uncorrectederror", 10), ("nonmediumerror", 11), ("selftestfailed", 12), ("smarthealthstatusfailed", 13), ("startstopmax", 14))

class SunHwTrapDriveControllerProbableCauseTC(TextualConvention, Integer32):
    description = 'Probable cause for drive controller error'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6))
    namedValues = NamedValues(("unknown", 1), ("fatalflasherror", 2), ("batterybackuperror", 3), ("fatalcacheerror", 4), ("controllerfailed", 6))

class SunHwTrapStorageVolumeProbableCauseTC(TextualConvention, Integer32):
    description = 'Probable cause for storage volume error'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 8))
    namedValues = NamedValues(("unknown", 1), ("raidfailed", 2), ("raidmissing", 3), ("raiddegraded", 4), ("badblocklogfull", 6), ("raiderror", 8))

class SunHwTrapDiagEntityTC(TextualConvention, Integer32):
    description = 'Describes the entity that diagnosed the fault.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("fdd", 1), ("alomfm", 2), ("solarisfma", 3), ("other", 4))

class SunHwTrapSuspectFruStatusTC(TextualConvention, Integer32):
    description = 'Describes the status of a FRU.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("other", 1), ("suspected", 2), ("faulted", 3), ("repaired", 4), ("replaced", 5), ("acquitted", 6))

sunHwTrapSystemIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 1, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunHwTrapSystemIdentifier.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapSystemIdentifier.setDescription('A text string used to identify the source of the trap. Typically this is the host name.')
sunHwTrapComponentName = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 1, 2), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunHwTrapComponentName.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapComponentName.setDescription('The name of the component which is the source of the trap.')
sunHwTrapThresholdType = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 1, 3), SunHwTrapThresholdTypeTC()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunHwTrapThresholdType.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapThresholdType.setDescription('Identifies the threshold type that the sensor is reporting on.')
sunHwTrapThresholdValue = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 1, 4), SunHwTrapFloatingPointValueTC()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunHwTrapThresholdValue.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapThresholdValue.setDescription('The threshold setting that has been crossed.')
sunHwTrapSensorValue = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 1, 5), SunHwTrapFloatingPointValueTC()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunHwTrapSensorValue.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapSensorValue.setDescription("The threshold sensor's reading at the time the trap was generated.")
sunHwTrapSuspectComponentName = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 1, 6), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunHwTrapSuspectComponentName.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapSuspectComponentName.setDescription('Contains the name of a component that is suspected of causing a fault.')
sunHwTrapFaultClass = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 1, 7), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunHwTrapFaultClass.setReference('SUN-FM-MIB.sunFmFaultEventClass http://www.opensolaris.org/os/community/fm/mib/sun-fm-mib.mib')
if mibBuilder.loadTexts: sunHwTrapFaultClass.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapFaultClass.setDescription("The class represents a hierarchical classification string indicating the type of problem detected, as reported by the fault management subsystem, such as, for instance the Solaris fault manager. Information on the Solaris fault manager can be found at http://www.opensolaris.org/os/community/fm. This object will have a value of NULL if the system doesn't support this information.")
sunHwTrapFaultCertainty = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunHwTrapFaultCertainty.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapFaultCertainty.setDescription("The percentage likelihood that the component is the source of the problem. This object will have a value of 0 if the system doesn't support this information.")
sunHwTrapAdditionalInfo = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 1, 9), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunHwTrapAdditionalInfo.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapAdditionalInfo.setDescription('An optional textual description which provides additional information relevant to this notification.')
sunHwTrapAssocObjectId = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 1, 10), RowPointer()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunHwTrapAssocObjectId.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapAssocObjectId.setDescription('The object in the entPhysicalTable to which this notification applies. The value is the name of the instance of the first accessible columnar object in the entPhysicalTable conceptual row. If no association exists or the association cannot be determined, this object will have a value of 0.0.')
sunHwTrapNewHAState = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 1, 11), SunHwTrapHAStateTC()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunHwTrapNewHAState.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapNewHAState.setDescription('This object provides the new value of the high availability state after a high availability state change has occurred.')
sunHwTrapOldHAState = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 1, 12), SunHwTrapHAStateTC()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunHwTrapOldHAState.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapOldHAState.setDescription('This object provides the old value of the high availability state after a high availability state change has occurred.')
sunHwTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 1, 13), SunHwTrapSeverityTC()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunHwTrapSeverity.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapSeverity.setDescription('An indication of the severity of the notfication.')
sunHwTrapChassisId = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 1, 14), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunHwTrapChassisId.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapChassisId.setDescription('A text string containing the chassis serial number. When combined with the sunHwTrapProductName, it unambiguously identifies the system. If the source of the trap is a blade, the text string will contain the chassis serial number and the blade serial number, in the following format <chassis-serial-number::blade-serial-number>')
sunHwTrapProductName = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 1, 15), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunHwTrapProductName.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapProductName.setDescription('A text string containing the product name. When combined with the sunHwTrapChassisId, it unambiguously identifies the system. If the source of the trap is a blade, the text string will contain the chassis product name and the blade product name, in the following format <chassis-name>::<blade-name>')
sunHwTrapHardDriveState = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 1, 16), SunHwTrapHardDriveStatesTC()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunHwTrapHardDriveState.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapHardDriveState.setDescription('The states a hard drive can be in when hard drive status is reported.')
sunHwTrapFaultMessageID = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 1, 17), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunHwTrapFaultMessageID.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapFaultMessageID.setDescription("The message ID that can be used to get additional information about the problem from Sun's knowledge article database. This object will have a value of NULL if the system doesn't support this information.")
sunHwTrapFaultUUID = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 1, 18), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunHwTrapFaultUUID.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapFaultUUID.setDescription("The universal unique identifier that was assigned to this fault. This object will have a value of NULL if the system doesn't support this information.")
sunHwTrapDisableReason = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 1, 19), SunHwTrapDisableReasonsTC()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunHwTrapDisableReason.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapDisableReason.setDescription('An indication as to why the component was disabled.')
sunHwTrapTestMessage = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 1, 20), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunHwTrapTestMessage.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapTestMessage.setDescription('This is a test trap')
sunHwTrapHardDriveProbableCause = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 1, 21), SunHwTrapHardDriveProbableCauseTC()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunHwTrapHardDriveProbableCause.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapHardDriveProbableCause.setDescription('Probable cause for hard drive error')
sunHwTrapDriveControllerProbableCause = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 1, 22), SunHwTrapDriveControllerProbableCauseTC()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunHwTrapDriveControllerProbableCause.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapDriveControllerProbableCause.setDescription('Probable cause for drive controller error')
sunHwTrapStorageVolumeProbableCause = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 1, 23), SunHwTrapStorageVolumeProbableCauseTC()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunHwTrapStorageVolumeProbableCause.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapStorageVolumeProbableCause.setDescription('Probable cause for storage volume error')
sunHwTrapEventTime = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 1, 24), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunHwTrapEventTime.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapEventTime.setDescription('Time stamp for when the fault occurred.')
sunHwTrapDiagEntity = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 1, 25), SunHwTrapDiagEntityTC()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunHwTrapDiagEntity.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapDiagEntity.setDescription('Name and version of the software component that generated this fault event.')
sunHwTrapFaultDescription = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 1, 26), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunHwTrapFaultDescription.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapFaultDescription.setDescription('A textual description of the fault.')
sunHwTrapKaUrl = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 1, 27), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunHwTrapKaUrl.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapKaUrl.setDescription('Knowledge article URL.')
sunHwTrapSuspectCnt = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 1, 28), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunHwTrapSuspectCnt.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapSuspectCnt.setDescription('The number of suspected faults diagnosed as the cause of given set of reported hardware errors.')
sunHwTrapHostname = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 1, 29), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunHwTrapHostname.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapHostname.setDescription('Hostname of the SP or system')
sunHwTrapProductManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 1, 30), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunHwTrapProductManufacturer.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapProductManufacturer.setDescription('Product manufacturer')
sunHwTrapProductSn = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 1, 31), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunHwTrapProductSn.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapProductSn.setDescription('Product serial number')
sunHwTrapSuspectTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 2, 1), )
if mibBuilder.loadTexts: sunHwTrapSuspectTable.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapSuspectTable.setDescription('Table of diagnosed fault suspects.')
sunHwTrapSuspectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 2, 1, 1), ).setIndexNames((0, "SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruIndex"))
if mibBuilder.loadTexts: sunHwTrapSuspectEntry.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapSuspectEntry.setDescription('Suspect table entry.')
sunHwTrapSuspectFruIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)))
if mibBuilder.loadTexts: sunHwTrapSuspectFruIndex.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapSuspectFruIndex.setDescription('A sequence number for suspect FRUs.')
sunHwTrapSuspectFruFaultCertainty = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunHwTrapSuspectFruFaultCertainty.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapSuspectFruFaultCertainty.setDescription("The percentage likelihood that the fru is the source of the problem. This object will have a value of 0 if the system doesn't support this information.")
sunHwTrapSuspectFruFaultClass = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 2, 1, 1, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunHwTrapSuspectFruFaultClass.setReference('SUN-FM-MIB.sunFmFaultEventClass http://www.opensolaris.org/os/community/fm/mib/sun-fm-mib.mib')
if mibBuilder.loadTexts: sunHwTrapSuspectFruFaultClass.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapSuspectFruFaultClass.setDescription("The class represents a hierarchical classification string indicating the type of problem detected, as reported by the fault management subsystem, such as, for instance the Solaris fault manager. Information on the Solaris fault manager can be found at http://www.opensolaris.org/os/community/fm. This object will have a value of NULL if the system doesn't support this information.")
sunHwTrapSuspectFruName = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 2, 1, 1, 4), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunHwTrapSuspectFruName.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapSuspectFruName.setDescription('The name of the suspect FRU.')
sunHwTrapSuspectFruLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 2, 1, 1, 5), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunHwTrapSuspectFruLocation.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapSuspectFruLocation.setDescription('The location of the suspect FRU.')
sunHwTrapSuspectFruChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 2, 1, 1, 6), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunHwTrapSuspectFruChassisId.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapSuspectFruChassisId.setDescription('A text string containing the chassis serial number. When combined with the sunHwTrapProductName, it unambiguously identifies the system. If the source of the trap is a blade, the text string will contain the chassis serial number and the blade serial number, in the following format <chassis-serial-number::blade-serial-number>')
sunHwTrapSuspectFruManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 2, 1, 1, 7), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunHwTrapSuspectFruManufacturer.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapSuspectFruManufacturer.setDescription('Name of the manufacturer of this FRU/CRU.')
sunHwTrapSuspectFruPn = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 2, 1, 1, 8), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunHwTrapSuspectFruPn.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapSuspectFruPn.setDescription('Number used to order a FRU/CRU (i.e 501-7324-06).')
sunHwTrapSuspectFruSn = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 2, 1, 1, 9), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunHwTrapSuspectFruSn.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapSuspectFruSn.setDescription('18-character FRU serial number for this FRU/CRU (i.e. 1005LCB-0725ZG01JE).')
sunHwTrapSuspectFruRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 2, 1, 1, 10), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunHwTrapSuspectFruRevision.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapSuspectFruRevision.setDescription('Revision level.')
sunHwTrapSuspectFruStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 2, 1, 1, 11), SunHwTrapSuspectFruStatusTC()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: sunHwTrapSuspectFruStatus.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapSuspectFruStatus.setDescription('Status of FRU.')
sunHwTrapVoltageFatalThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 1)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdType"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapSensorValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapSeverity"))
if mibBuilder.loadTexts: sunHwTrapVoltageFatalThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapVoltageFatalThresholdExceeded.setDescription('A voltage sensor has reported that its value has gone above an upper fatal threshold setting or below a lower fatal threshold setting. The sunHwTrapThresholdType object indicates whether the threshold was an upper or lower.')
sunHwTrapVoltageFatalThresholdDeasserted = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 2)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdType"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapSensorValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapSeverity"))
if mibBuilder.loadTexts: sunHwTrapVoltageFatalThresholdDeasserted.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapVoltageFatalThresholdDeasserted.setDescription('A voltage sensor has reported that its value has gone below an upper fatal threshold setting or above a lower fatal threshold setting. The sunHwTrapThresholdType object indicates whether the threshold was an upper or lower.')
sunHwTrapVoltageCritThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 3)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdType"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapSensorValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapSeverity"))
if mibBuilder.loadTexts: sunHwTrapVoltageCritThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapVoltageCritThresholdExceeded.setDescription('A voltage sensor has reported that its value has gone above an upper critical threshold setting or below a lower critical threshold setting. The sunHwTrapThresholdType object indicates whether the threshold was an upper or lower.')
sunHwTrapVoltageCritThresholdDeasserted = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 4)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdType"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapSensorValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapSeverity"))
if mibBuilder.loadTexts: sunHwTrapVoltageCritThresholdDeasserted.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapVoltageCritThresholdDeasserted.setDescription('A voltage sensor has reported that its value has gone below an upper critical threshold setting or above a lower critical threshold setting. The sunHwTrapThresholdType object indicates whether the threshold was an upper or lower.')
sunHwTrapVoltageNonCritThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 5)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdType"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapSensorValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapSeverity"))
if mibBuilder.loadTexts: sunHwTrapVoltageNonCritThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapVoltageNonCritThresholdExceeded.setDescription('A voltage sensor has reported that its value has gone above an upper non-critical threshold setting or below a lower non-critical threshold setting. The sunHwTrapThresholdType object indicates whether the threshold was an upper or lower.')
sunHwTrapVoltageOk = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 6)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdType"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapSensorValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapSeverity"))
if mibBuilder.loadTexts: sunHwTrapVoltageOk.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapVoltageOk.setDescription('A voltage sensor has reported that its value is in the normal operating range.')
sunHwTrapTempFatalThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 7)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdType"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapSensorValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapSeverity"))
if mibBuilder.loadTexts: sunHwTrapTempFatalThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapTempFatalThresholdExceeded.setDescription('A temperature sensor has reported that its value has gone above an upper fatal threshold setting or below a lower fatal threshold setting. The sunHwTrapThresholdType object indicates whether the threshold was an upper or lower.')
sunHwTrapTempFatalThresholdDeasserted = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 8)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdType"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapSensorValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapSeverity"))
if mibBuilder.loadTexts: sunHwTrapTempFatalThresholdDeasserted.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapTempFatalThresholdDeasserted.setDescription('A temperature sensor has reported that its value has gone below an upper fatal threshold setting or above a lower fatal threshold setting. The sunHwTrapThresholdType object indicates whether the threshold was an upper or lower.')
sunHwTrapTempCritThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 9)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdType"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapSensorValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapSeverity"))
if mibBuilder.loadTexts: sunHwTrapTempCritThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapTempCritThresholdExceeded.setDescription('A temperature sensor has reported that its value has gone above an upper critical threshold setting or below a lower critical threshold setting. The sunHwTrapThresholdType object indicates whether the threshold was an upper or lower.')
sunHwTrapTempCritThresholdDeasserted = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 10)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdType"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapSensorValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapSeverity"))
if mibBuilder.loadTexts: sunHwTrapTempCritThresholdDeasserted.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapTempCritThresholdDeasserted.setDescription('A temperature sensor has reported that its value has gone below an upper critical threshold setting or above a lower critical threshold setting. The sunHwTrapThresholdType object indicates whether the threshold was an upper or lower.')
sunHwTrapTempNonCritThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 11)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdType"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapSensorValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapSeverity"))
if mibBuilder.loadTexts: sunHwTrapTempNonCritThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapTempNonCritThresholdExceeded.setDescription('A temperature sensor has reported that its value has gone above an upper non-critical threshold setting or below a lower non-critical threshold setting. The sunHwTrapThresholdType object indicates whether the threshold was an upper or lower.')
sunHwTrapTempOk = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 12)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdType"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapSensorValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapSeverity"))
if mibBuilder.loadTexts: sunHwTrapTempOk.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapTempOk.setDescription('A temperature sensor has reported that its value is in the normal operating range.')
sunHwTrapElectricalCurrentFatalThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 13)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdType"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapSensorValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapSeverity"))
if mibBuilder.loadTexts: sunHwTrapElectricalCurrentFatalThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapElectricalCurrentFatalThresholdExceeded.setDescription('An electrical current sensor has reported that its value has gone above an upper fatal threshold setting or below a lower fatal threshold setting. The sunHwTrapThresholdType object indicates whether the threshold was an upper or lower.')
sunHwTrapElectricalCurrentFatalThresholdDeasserted = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 14)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdType"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapSensorValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapSeverity"))
if mibBuilder.loadTexts: sunHwTrapElectricalCurrentFatalThresholdDeasserted.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapElectricalCurrentFatalThresholdDeasserted.setDescription('An electrical current sensor has reported that its value has gone below an upper fatal threshold setting or above a lower fatal threshold setting. The sunHwTrapThresholdType object indicates whether the threshold was an upper or lower.')
sunHwTrapElectricalCurrentCritThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 15)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdType"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapSensorValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapSeverity"))
if mibBuilder.loadTexts: sunHwTrapElectricalCurrentCritThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapElectricalCurrentCritThresholdExceeded.setDescription('An electrical current sensor has reported that its value has gone above an upper critical threshold setting or below a lower critical threshold setting. The sunHwTrapThresholdType object indicates whether the threshold was an upper or lower.')
sunHwTrapElectricalCurrentCritThresholdDeasserted = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 16)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdType"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapSensorValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapSeverity"))
if mibBuilder.loadTexts: sunHwTrapElectricalCurrentCritThresholdDeasserted.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapElectricalCurrentCritThresholdDeasserted.setDescription('An electrical current sensor has reported that its value has gone below an upper critical threshold setting or above a lower critical threshold setting. The sunHwTrapThresholdType object indicates whether the threshold was an upper or lower.')
sunHwTrapElectricalCurrentNonCritThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 17)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdType"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapSensorValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapSeverity"))
if mibBuilder.loadTexts: sunHwTrapElectricalCurrentNonCritThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapElectricalCurrentNonCritThresholdExceeded.setDescription('An electrical current sensor has reported that its value has gone above an upper non-critical threshold setting or below a lower non-critical threshold setting. The sunHwTrapThresholdType object indicates whether the threshold was an upper or lower.')
sunHwTrapElectricalCurrentOk = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 18)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdType"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapSensorValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapSeverity"))
if mibBuilder.loadTexts: sunHwTrapElectricalCurrentOk.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapElectricalCurrentOk.setDescription('An electrical current sensor has reported that its value is in the normal operating range.')
sunHwTrapFanSpeedFatalThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 19)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdType"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapSensorValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapSeverity"))
if mibBuilder.loadTexts: sunHwTrapFanSpeedFatalThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapFanSpeedFatalThresholdExceeded.setDescription('A fan speed sensor has reported that its value has gone above an upper fatal threshold setting or below a lower fatal threshold setting. The sunHwTrapThresholdType object indicates whether the threshold was an upper or lower.')
sunHwTrapFanSpeedFatalThresholdDeasserted = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 20)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdType"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapSensorValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapSeverity"))
if mibBuilder.loadTexts: sunHwTrapFanSpeedFatalThresholdDeasserted.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapFanSpeedFatalThresholdDeasserted.setDescription('A fan speed sensor has reported that its value has gone below an upper fatal threshold setting or above a lower fatal threshold setting. The sunHwTrapThresholdType object indicates whether the threshold was an upper or lower.')
sunHwTrapFanSpeedCritThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 21)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdType"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapSensorValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapSeverity"))
if mibBuilder.loadTexts: sunHwTrapFanSpeedCritThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapFanSpeedCritThresholdExceeded.setDescription('A fan speed sensor has reported that its value has gone above an upper critical threshold setting or below a lower critical threshold setting. The sunHwTrapThresholdType object indicates whether the threshold was an upper or lower.')
sunHwTrapFanSpeedCritThresholdDeasserted = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 22)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdType"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapSensorValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapSeverity"))
if mibBuilder.loadTexts: sunHwTrapFanSpeedCritThresholdDeasserted.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapFanSpeedCritThresholdDeasserted.setDescription('A fan speed sensor has reported that its value has gone below an upper critical threshold setting or above a lower critical threshold setting. The sunHwTrapThresholdType object indicates whether the threshold was an upper or lower.')
sunHwTrapFanSpeedNonCritThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 23)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdType"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapSensorValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapSeverity"))
if mibBuilder.loadTexts: sunHwTrapFanSpeedNonCritThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapFanSpeedNonCritThresholdExceeded.setDescription('A fan speed sensor has reported that its value has gone above an upper non-critical threshold setting or below a lower non-critical threshold setting. The sunHwTrapThresholdType object indicates whether the threshold was an upper or lower.')
sunHwTrapFanSpeedOk = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 24)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdType"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapSensorValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapSeverity"))
if mibBuilder.loadTexts: sunHwTrapFanSpeedOk.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapFanSpeedOk.setDescription('A fan speed sensor has reported that its value is in the normal operating range.')
sunHwTrapSensorFatalThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 25)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdType"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapSensorValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapSeverity"))
if mibBuilder.loadTexts: sunHwTrapSensorFatalThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapSensorFatalThresholdExceeded.setDescription("A sensor has reported that its value has gone above an upper fatal threshold setting or below a lower fatal threshold setting. The generic 'sensor' trap is generated when the SNMP agent does not recognize the component type. The sunHwTrapThresholdType object indicates whether the threshold was an upper or lower.")
sunHwTrapSensorFatalThresholdDeasserted = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 26)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdType"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapSensorValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapSeverity"))
if mibBuilder.loadTexts: sunHwTrapSensorFatalThresholdDeasserted.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapSensorFatalThresholdDeasserted.setDescription("A sensor has reported that its value has gone below an upper fatal threshold setting or above a lower fatal threshold setting. The generic 'sensor' trap is generated when the SNMP agent does not recognize the component type. The sunHwTrapThresholdType object indicates whether the threshold was an upper or lower.")
sunHwTrapSensorCritThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 27)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdType"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapSensorValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapSeverity"))
if mibBuilder.loadTexts: sunHwTrapSensorCritThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapSensorCritThresholdExceeded.setDescription("A sensor has reported that its value has gone above an upper critical threshold setting or below a lower critical threshold setting. The generic 'sensor' trap is generated when the SNMP agent does not recognize the component type. The sunHwTrapThresholdType object indicates whether the threshold was an upper or lower.")
sunHwTrapSensorCritThresholdDeasserted = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 28)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdType"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapSensorValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapSeverity"))
if mibBuilder.loadTexts: sunHwTrapSensorCritThresholdDeasserted.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapSensorCritThresholdDeasserted.setDescription("A sensor has reported that its value has gone below an upper critical threshold setting or above a lower critical threshold setting. The generic 'sensor' trap is generated when the SNMP agent does not recognize the component type. The sunHwTrapThresholdType object indicates whether the threshold was an upper or lower.")
sunHwTrapSensorNonCritThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 29)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdType"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapSensorValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapSeverity"))
if mibBuilder.loadTexts: sunHwTrapSensorNonCritThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapSensorNonCritThresholdExceeded.setDescription("A sensor has reported that its value has gone above an upper non-critical threshold setting or below a lower non-critical threshold setting. The generic 'sensor' trap is generated when the SNMP agent does not recognize the component type. The sunHwTrapThresholdType object indicates whether the threshold was an upper or lower.")
sunHwTrapSensorThresholdOk = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 30)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdType"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapSensorValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapSeverity"))
if mibBuilder.loadTexts: sunHwTrapSensorThresholdOk.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapSensorThresholdOk.setDescription("A sensor has reported that its value is in the normal operating range. The generic 'sensor' trap is generated when the SNMP agent does not recognize the component type.")
sunHwTrapPowerSupplyFault = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 31)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultClass"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultCertainty"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultMessageID"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultUUID"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"))
if mibBuilder.loadTexts: sunHwTrapPowerSupplyFault.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapPowerSupplyFault.setDescription('A power supply component is suspected of causing a fault.')
sunHwTrapPowerSupplyFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 64)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"))
if mibBuilder.loadTexts: sunHwTrapPowerSupplyFaultCleared.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapPowerSupplyFaultCleared.setDescription('A power supply component fault has been cleared.')
sunHwTrapPowerSupplyError = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 32)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"))
if mibBuilder.loadTexts: sunHwTrapPowerSupplyError.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapPowerSupplyError.setDescription('A power supply sensor has detected an error.')
sunHwTrapPowerSupplyOk = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 33)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"))
if mibBuilder.loadTexts: sunHwTrapPowerSupplyOk.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapPowerSupplyOk.setDescription('A power supply sensor has returned to its normal state.')
sunHwTrapFanFault = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 34)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultClass"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultCertainty"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultMessageID"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultUUID"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"))
if mibBuilder.loadTexts: sunHwTrapFanFault.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapFanFault.setDescription('A fan component is suspected of causing a fault.')
sunHwTrapFanFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 65)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"))
if mibBuilder.loadTexts: sunHwTrapFanFaultCleared.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapFanFaultCleared.setDescription('A fan component fault has been cleared.')
sunHwTrapFanError = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 35)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"))
if mibBuilder.loadTexts: sunHwTrapFanError.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapFanError.setDescription('A fan sensor has detected an error.')
sunHwTrapFanOk = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 36)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"))
if mibBuilder.loadTexts: sunHwTrapFanOk.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapFanOk.setDescription('A fan sensor has returned to its normal state.')
sunHwTrapProcessorFault = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 37)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultClass"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultCertainty"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultMessageID"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultUUID"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"))
if mibBuilder.loadTexts: sunHwTrapProcessorFault.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapProcessorFault.setDescription('A processor component is suspected of causing a fault.')
sunHwTrapProcessorFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 66)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"))
if mibBuilder.loadTexts: sunHwTrapProcessorFaultCleared.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapProcessorFaultCleared.setDescription('A processor component fault has been cleared.')
sunHwTrapProcessorError = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 38)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"))
if mibBuilder.loadTexts: sunHwTrapProcessorError.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapProcessorError.setDescription('A processor sensor has detected an error.')
sunHwTrapProcessorOk = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 39)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"))
if mibBuilder.loadTexts: sunHwTrapProcessorOk.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapProcessorOk.setDescription('A processor sensor has returned to its normal state.')
sunHwTrapMemoryFault = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 40)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultClass"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultCertainty"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultMessageID"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultUUID"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"))
if mibBuilder.loadTexts: sunHwTrapMemoryFault.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapMemoryFault.setDescription('A memory component is suspected of causing a fault.')
sunHwTrapMemoryFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 67)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"))
if mibBuilder.loadTexts: sunHwTrapMemoryFaultCleared.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapMemoryFaultCleared.setDescription('A memory component fault has been cleared.')
sunHwTrapMemoryError = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 41)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"))
if mibBuilder.loadTexts: sunHwTrapMemoryError.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapMemoryError.setDescription('A memory sensor has detected an error.')
sunHwTrapMemoryOk = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 42)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"))
if mibBuilder.loadTexts: sunHwTrapMemoryOk.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapMemoryOk.setDescription('A memory sensor has returned to its normal state.')
sunHwTrapHardDriveFault = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 43)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultClass"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultCertainty"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultMessageID"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultUUID"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapHardDriveProbableCause"))
if mibBuilder.loadTexts: sunHwTrapHardDriveFault.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapHardDriveFault.setDescription('A hard drive component is suspected of causing a fault.')
sunHwTrapHardDriveFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 68)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"))
if mibBuilder.loadTexts: sunHwTrapHardDriveFaultCleared.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapHardDriveFaultCleared.setDescription('A hard drive component fault has been cleared.')
sunHwTrapHardDriveError = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 44)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapHardDriveProbableCause"))
if mibBuilder.loadTexts: sunHwTrapHardDriveError.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapHardDriveError.setDescription('A hard drive sensor has detected an error.')
sunHwTrapHardDriveOk = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 45)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"))
if mibBuilder.loadTexts: sunHwTrapHardDriveOk.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapHardDriveOk.setDescription('A hard drive sensor has returned to its normal state.')
sunHwTrapIOFault = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 46)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultClass"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultCertainty"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultMessageID"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultUUID"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"))
if mibBuilder.loadTexts: sunHwTrapIOFault.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapIOFault.setDescription('A component in the IO subsystem is suspected of causing a fault.')
sunHwTrapIOFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 69)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"))
if mibBuilder.loadTexts: sunHwTrapIOFaultCleared.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapIOFaultCleared.setDescription('An IO subsystem component fault has been cleared.')
sunHwTrapIOError = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 47)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"))
if mibBuilder.loadTexts: sunHwTrapIOError.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapIOError.setDescription('An IO sensor has detected an error.')
sunHwTrapIOOk = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 48)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"))
if mibBuilder.loadTexts: sunHwTrapIOOk.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapIOOk.setDescription('An IO sensor has returned to its normal state.')
sunHwTrapSlotOrConnectorFault = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 49)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultClass"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultCertainty"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultMessageID"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultUUID"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"))
if mibBuilder.loadTexts: sunHwTrapSlotOrConnectorFault.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapSlotOrConnectorFault.setDescription('A slot or connector component is suspected of causing a fault.')
sunHwTrapSlotOrConnectorFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 70)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"))
if mibBuilder.loadTexts: sunHwTrapSlotOrConnectorFaultCleared.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapSlotOrConnectorFaultCleared.setDescription('A slot or connector component fault has been cleared.')
sunHwTrapSlotOrConnectorError = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 50)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"))
if mibBuilder.loadTexts: sunHwTrapSlotOrConnectorError.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapSlotOrConnectorError.setDescription('A sensor associated with a slot or connector has detected an error.')
sunHwTrapSlotOrConnectorOk = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 51)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"))
if mibBuilder.loadTexts: sunHwTrapSlotOrConnectorOk.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapSlotOrConnectorOk.setDescription('A sensor associated with a slot or connector has returned to its normal state.')
sunHwTrapComponentFault = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 52)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultClass"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultCertainty"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultMessageID"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultUUID"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"))
if mibBuilder.loadTexts: sunHwTrapComponentFault.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapComponentFault.setDescription("A component is suspected of causing a fault. This generic 'component' trap is generated when the SNMP agent does not recognize the component type.")
sunHwTrapComponentFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 71)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"))
if mibBuilder.loadTexts: sunHwTrapComponentFaultCleared.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapComponentFaultCleared.setDescription("A component fault has been cleared. This generic 'component' trap is generated when the SNMP agent does not recognize the component type.")
sunHwTrapComponentError = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 53)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"))
if mibBuilder.loadTexts: sunHwTrapComponentError.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapComponentError.setDescription("A sensor has detected an error. This generic 'component' trap is generated when the SNMP agent does not recognize the component type.")
sunHwTrapComponentOk = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 54)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"))
if mibBuilder.loadTexts: sunHwTrapComponentOk.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapComponentOk.setDescription("A sensor has returned to its normal state. This generic 'component' trap is generated when the SNMP agent does not recognize the component type.")
sunHwTrapFruInserted = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 55)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"))
if mibBuilder.loadTexts: sunHwTrapFruInserted.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapFruInserted.setDescription('A field replaceable unit has been inserted into the system.')
sunHwTrapFruRemoved = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 56)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"))
if mibBuilder.loadTexts: sunHwTrapFruRemoved.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapFruRemoved.setDescription('A field replaceable unit has been removed from the system.')
sunHwTrapComponentDisabled = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 57)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapDisableReason"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"))
if mibBuilder.loadTexts: sunHwTrapComponentDisabled.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapComponentDisabled.setDescription('The component operational state has changed or is changing to disabled.')
sunHwTrapComponentEnabled = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 58)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"))
if mibBuilder.loadTexts: sunHwTrapComponentEnabled.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapComponentEnabled.setDescription('The component operational state has changed or is changing to enabled.')
sunHwTrapPreOSError = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 59)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"))
if mibBuilder.loadTexts: sunHwTrapPreOSError.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapPreOSError.setDescription('An error has been detected in the period before the operating system has taken control of the system.')
sunHwTrapHAStateChange = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 60)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapNewHAState"), ("SUN-HW-TRAP-MIB", "sunHwTrapOldHAState"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"))
if mibBuilder.loadTexts: sunHwTrapHAStateChange.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapHAStateChange.setDescription('The high availability component identified by sunHwTrapSystemIdentifier has changed state.')
sunHwTrapSecurityIntrusion = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 61)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"))
if mibBuilder.loadTexts: sunHwTrapSecurityIntrusion.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapSecurityIntrusion.setDescription('An intrusion sensor has detected that someone may have physically tampered with the system.')
sunHwTrapHardDriveStatus = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 62)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapHardDriveState"))
if mibBuilder.loadTexts: sunHwTrapHardDriveStatus.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapHardDriveStatus.setDescription('The hard drive identified by sunHwTrapComponentName has changed state.')
sunHwTrapTestTrap = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 63)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapTestMessage"))
if mibBuilder.loadTexts: sunHwTrapTestTrap.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapTestTrap.setDescription('This is a test trap')
sunHwTrapPowerConsumptionThresholdExceeded = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 72)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdType"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapSensorValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapSeverity"))
if mibBuilder.loadTexts: sunHwTrapPowerConsumptionThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapPowerConsumptionThresholdExceeded.setDescription('A power consumption threshold has been exceeded.')
sunHwTrapPowerConsumptionThresholdDeasserted = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 73)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdType"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapSensorValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapSeverity"))
if mibBuilder.loadTexts: sunHwTrapPowerConsumptionThresholdDeasserted.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapPowerConsumptionThresholdDeasserted.setDescription('A power consumption threshold has been deasserted.')
sunHwTrapDriveControllerFault = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 74)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultClass"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultCertainty"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultMessageID"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultUUID"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapDriveControllerProbableCause"))
if mibBuilder.loadTexts: sunHwTrapDriveControllerFault.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapDriveControllerFault.setDescription('A drive controller component is suspected of causing a fault.')
sunHwTrapDriveControllerFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 75)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"))
if mibBuilder.loadTexts: sunHwTrapDriveControllerFaultCleared.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapDriveControllerFaultCleared.setDescription('A drive controller has been cleared.')
sunHwTrapDriveControllerError = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 76)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapDriveControllerProbableCause"))
if mibBuilder.loadTexts: sunHwTrapDriveControllerError.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapDriveControllerError.setDescription('A drive controller sensor has detected an error.')
sunHwTrapStorageVolumeFault = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 77)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultClass"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultCertainty"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultMessageID"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultUUID"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapStorageVolumeProbableCause"))
if mibBuilder.loadTexts: sunHwTrapStorageVolumeFault.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapStorageVolumeFault.setDescription('A RAID component is suspected of causing a fault.')
sunHwTrapStorageVolumeFaultCleared = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 78)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"))
if mibBuilder.loadTexts: sunHwTrapStorageVolumeFaultCleared.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapStorageVolumeFaultCleared.setDescription('A storage volume fault has been cleared.')
sunHwTrapStorageVolumeError = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 79)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapStorageVolumeProbableCause"))
if mibBuilder.loadTexts: sunHwTrapStorageVolumeError.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapStorageVolumeError.setDescription('A RAID sensor has detected an error.')
sunHwTrapFaultDiagnosed = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 2, 0, 80)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapEventTime"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultMessageID"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultUUID"), ("SUN-HW-TRAP-MIB", "sunHwTrapKaUrl"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultDescription"), ("SUN-HW-TRAP-MIB", "sunHwTrapSeverity"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductManufacturer"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductSn"), ("SUN-HW-TRAP-MIB", "sunHwTrapDiagEntity"), ("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapHostname"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectCnt"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruFaultCertainty"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruFaultClass"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruName"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruLocation"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruManufacturer"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruPn"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruSn"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruRevision"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruStatus"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruFaultCertainty"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruFaultClass"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruName"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruLocation"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruManufacturer"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruPn"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruSn"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruRevision"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruStatus"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruFaultCertainty"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruFaultClass"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruName"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruLocation"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruManufacturer"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruPn"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruSn"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruRevision"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruStatus"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruFaultCertainty"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruFaultClass"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruName"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruLocation"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruManufacturer"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruPn"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruSn"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruRevision"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruStatus"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruFaultCertainty"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruFaultClass"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruName"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruLocation"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruManufacturer"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruPn"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruSn"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruRevision"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruStatus"))
if mibBuilder.loadTexts: sunHwTrapFaultDiagnosed.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapFaultDiagnosed.setDescription('Diagnosed fault has been detected. Objects common to all suspects: sunHwTrapFaultMessageID, sunHwTrapFaultUUID, sunHwTrapKaUrl, sunHwTrapFaultDescription, sunHwTrapSeverity, sunHwTrapProductManufacturer, sunHwTrapProductName, sunHwTrapProductSn, sunHwTrapDiagEntity, sunHwTrapSystemIdentifier, sunHwTrapHostname, sunHwTrapSuspectCnt, List of suspects objects: sunHwTrapSuspectFruFaultCertainty sunHwTrapSuspectFruFaultClass sunHwTrapSuspectFruName sunHwTrapSuspectFruLocation sunHwTrapSuspectFruChassisId sunHwTrapSuspectFruManufacturer sunHwTrapSuspectFruPn sunHwTrapSuspectFruSn sunHwTrapSuspectFruRevision sunHwTrapSuspectFruStatus')
sunHwTrapNotificationObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 3, 2, 1, 2)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapSystemIdentifier"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdType"), ("SUN-HW-TRAP-MIB", "sunHwTrapThresholdValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapSensorValue"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectComponentName"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultClass"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultCertainty"), ("SUN-HW-TRAP-MIB", "sunHwTrapAdditionalInfo"), ("SUN-HW-TRAP-MIB", "sunHwTrapAssocObjectId"), ("SUN-HW-TRAP-MIB", "sunHwTrapNewHAState"), ("SUN-HW-TRAP-MIB", "sunHwTrapOldHAState"), ("SUN-HW-TRAP-MIB", "sunHwTrapSeverity"), ("SUN-HW-TRAP-MIB", "sunHwTrapChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductName"), ("SUN-HW-TRAP-MIB", "sunHwTrapHardDriveState"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultMessageID"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultUUID"), ("SUN-HW-TRAP-MIB", "sunHwTrapDisableReason"), ("SUN-HW-TRAP-MIB", "sunHwTrapTestMessage"), ("SUN-HW-TRAP-MIB", "sunHwTrapHardDriveProbableCause"), ("SUN-HW-TRAP-MIB", "sunHwTrapDriveControllerProbableCause"), ("SUN-HW-TRAP-MIB", "sunHwTrapStorageVolumeProbableCause"), ("SUN-HW-TRAP-MIB", "sunHwTrapEventTime"), ("SUN-HW-TRAP-MIB", "sunHwTrapDiagEntity"), ("SUN-HW-TRAP-MIB", "sunHwTrapKaUrl"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultDescription"), ("SUN-HW-TRAP-MIB", "sunHwTrapHostname"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductManufacturer"), ("SUN-HW-TRAP-MIB", "sunHwTrapProductSn"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectCnt"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruFaultCertainty"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruFaultClass"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruName"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruLocation"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruChassisId"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruManufacturer"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruPn"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruSn"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruRevision"), ("SUN-HW-TRAP-MIB", "sunHwTrapSuspectFruStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sunHwTrapNotificationObjectGroup = sunHwTrapNotificationObjectGroup.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapNotificationObjectGroup.setDescription('The collection of objects used in notifications.')
sunHwTrapNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 42, 2, 175, 103, 3, 2, 2, 1)).setObjects(("SUN-HW-TRAP-MIB", "sunHwTrapVoltageFatalThresholdExceeded"), ("SUN-HW-TRAP-MIB", "sunHwTrapVoltageFatalThresholdDeasserted"), ("SUN-HW-TRAP-MIB", "sunHwTrapVoltageCritThresholdExceeded"), ("SUN-HW-TRAP-MIB", "sunHwTrapVoltageCritThresholdDeasserted"), ("SUN-HW-TRAP-MIB", "sunHwTrapVoltageNonCritThresholdExceeded"), ("SUN-HW-TRAP-MIB", "sunHwTrapVoltageOk"), ("SUN-HW-TRAP-MIB", "sunHwTrapTempFatalThresholdExceeded"), ("SUN-HW-TRAP-MIB", "sunHwTrapTempFatalThresholdDeasserted"), ("SUN-HW-TRAP-MIB", "sunHwTrapTempCritThresholdExceeded"), ("SUN-HW-TRAP-MIB", "sunHwTrapTempCritThresholdDeasserted"), ("SUN-HW-TRAP-MIB", "sunHwTrapTempNonCritThresholdExceeded"), ("SUN-HW-TRAP-MIB", "sunHwTrapTempOk"), ("SUN-HW-TRAP-MIB", "sunHwTrapElectricalCurrentFatalThresholdExceeded"), ("SUN-HW-TRAP-MIB", "sunHwTrapElectricalCurrentFatalThresholdDeasserted"), ("SUN-HW-TRAP-MIB", "sunHwTrapElectricalCurrentCritThresholdExceeded"), ("SUN-HW-TRAP-MIB", "sunHwTrapElectricalCurrentCritThresholdDeasserted"), ("SUN-HW-TRAP-MIB", "sunHwTrapElectricalCurrentNonCritThresholdExceeded"), ("SUN-HW-TRAP-MIB", "sunHwTrapElectricalCurrentOk"), ("SUN-HW-TRAP-MIB", "sunHwTrapFanSpeedFatalThresholdExceeded"), ("SUN-HW-TRAP-MIB", "sunHwTrapFanSpeedFatalThresholdDeasserted"), ("SUN-HW-TRAP-MIB", "sunHwTrapFanSpeedCritThresholdExceeded"), ("SUN-HW-TRAP-MIB", "sunHwTrapFanSpeedCritThresholdDeasserted"), ("SUN-HW-TRAP-MIB", "sunHwTrapFanSpeedNonCritThresholdExceeded"), ("SUN-HW-TRAP-MIB", "sunHwTrapFanSpeedOk"), ("SUN-HW-TRAP-MIB", "sunHwTrapSensorFatalThresholdExceeded"), ("SUN-HW-TRAP-MIB", "sunHwTrapSensorFatalThresholdDeasserted"), ("SUN-HW-TRAP-MIB", "sunHwTrapSensorCritThresholdExceeded"), ("SUN-HW-TRAP-MIB", "sunHwTrapSensorCritThresholdDeasserted"), ("SUN-HW-TRAP-MIB", "sunHwTrapSensorNonCritThresholdExceeded"), ("SUN-HW-TRAP-MIB", "sunHwTrapSensorThresholdOk"), ("SUN-HW-TRAP-MIB", "sunHwTrapPowerSupplyFault"), ("SUN-HW-TRAP-MIB", "sunHwTrapPowerSupplyFaultCleared"), ("SUN-HW-TRAP-MIB", "sunHwTrapPowerSupplyError"), ("SUN-HW-TRAP-MIB", "sunHwTrapPowerSupplyOk"), ("SUN-HW-TRAP-MIB", "sunHwTrapFanFault"), ("SUN-HW-TRAP-MIB", "sunHwTrapFanFaultCleared"), ("SUN-HW-TRAP-MIB", "sunHwTrapFanError"), ("SUN-HW-TRAP-MIB", "sunHwTrapFanOk"), ("SUN-HW-TRAP-MIB", "sunHwTrapProcessorFault"), ("SUN-HW-TRAP-MIB", "sunHwTrapProcessorFaultCleared"), ("SUN-HW-TRAP-MIB", "sunHwTrapProcessorError"), ("SUN-HW-TRAP-MIB", "sunHwTrapProcessorOk"), ("SUN-HW-TRAP-MIB", "sunHwTrapMemoryFault"), ("SUN-HW-TRAP-MIB", "sunHwTrapMemoryFaultCleared"), ("SUN-HW-TRAP-MIB", "sunHwTrapMemoryError"), ("SUN-HW-TRAP-MIB", "sunHwTrapMemoryOk"), ("SUN-HW-TRAP-MIB", "sunHwTrapHardDriveFault"), ("SUN-HW-TRAP-MIB", "sunHwTrapHardDriveFaultCleared"), ("SUN-HW-TRAP-MIB", "sunHwTrapHardDriveError"), ("SUN-HW-TRAP-MIB", "sunHwTrapHardDriveOk"), ("SUN-HW-TRAP-MIB", "sunHwTrapIOFault"), ("SUN-HW-TRAP-MIB", "sunHwTrapIOFaultCleared"), ("SUN-HW-TRAP-MIB", "sunHwTrapIOError"), ("SUN-HW-TRAP-MIB", "sunHwTrapIOOk"), ("SUN-HW-TRAP-MIB", "sunHwTrapSlotOrConnectorFault"), ("SUN-HW-TRAP-MIB", "sunHwTrapSlotOrConnectorFaultCleared"), ("SUN-HW-TRAP-MIB", "sunHwTrapSlotOrConnectorError"), ("SUN-HW-TRAP-MIB", "sunHwTrapSlotOrConnectorOk"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentFault"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentFaultCleared"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentError"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentOk"), ("SUN-HW-TRAP-MIB", "sunHwTrapFruInserted"), ("SUN-HW-TRAP-MIB", "sunHwTrapFruRemoved"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentDisabled"), ("SUN-HW-TRAP-MIB", "sunHwTrapComponentEnabled"), ("SUN-HW-TRAP-MIB", "sunHwTrapPreOSError"), ("SUN-HW-TRAP-MIB", "sunHwTrapHAStateChange"), ("SUN-HW-TRAP-MIB", "sunHwTrapSecurityIntrusion"), ("SUN-HW-TRAP-MIB", "sunHwTrapHardDriveStatus"), ("SUN-HW-TRAP-MIB", "sunHwTrapTestTrap"), ("SUN-HW-TRAP-MIB", "sunHwTrapPowerConsumptionThresholdExceeded"), ("SUN-HW-TRAP-MIB", "sunHwTrapPowerConsumptionThresholdDeasserted"), ("SUN-HW-TRAP-MIB", "sunHwTrapDriveControllerFault"), ("SUN-HW-TRAP-MIB", "sunHwTrapDriveControllerFaultCleared"), ("SUN-HW-TRAP-MIB", "sunHwTrapDriveControllerError"), ("SUN-HW-TRAP-MIB", "sunHwTrapStorageVolumeFault"), ("SUN-HW-TRAP-MIB", "sunHwTrapStorageVolumeFaultCleared"), ("SUN-HW-TRAP-MIB", "sunHwTrapStorageVolumeError"), ("SUN-HW-TRAP-MIB", "sunHwTrapFaultDiagnosed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sunHwTrapNotificationsGroup = sunHwTrapNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: sunHwTrapNotificationsGroup.setDescription('The collection of notifications used to indicate faults, errors, and other conditions related to HW components in the system.')
mibBuilder.exportSymbols("SUN-HW-TRAP-MIB", sunHwTrapFanFaultCleared=sunHwTrapFanFaultCleared, sunHwTrapFanSpeedFatalThresholdDeasserted=sunHwTrapFanSpeedFatalThresholdDeasserted, sunHwTrapSlotOrConnectorFault=sunHwTrapSlotOrConnectorFault, sunHwTrapNewHAState=sunHwTrapNewHAState, sunHwTrapFaultDiagnosed=sunHwTrapFaultDiagnosed, sunHwTrapSensorCritThresholdDeasserted=sunHwTrapSensorCritThresholdDeasserted, sunHwTrapMemoryFault=sunHwTrapMemoryFault, sunHwTrapMemoryFaultCleared=sunHwTrapMemoryFaultCleared, sunHwTrapSystemIdentifier=sunHwTrapSystemIdentifier, products=products, sunHwTrapTestTrap=sunHwTrapTestTrap, sunHwTrapPowerSupplyOk=sunHwTrapPowerSupplyOk, sunHwTrapGroups=sunHwTrapGroups, sunHwTrapFanOk=sunHwTrapFanOk, sunHwTrapSuspectFruLocation=sunHwTrapSuspectFruLocation, SunHwTrapDriveControllerProbableCauseTC=SunHwTrapDriveControllerProbableCauseTC, sunHwTrapMIB=sunHwTrapMIB, sunHwTrapTempCritThresholdDeasserted=sunHwTrapTempCritThresholdDeasserted, sunHwTrapSuspectComponentName=sunHwTrapSuspectComponentName, sunHwTrapHAStateChange=sunHwTrapHAStateChange, sunHwTrapElectricalCurrentOk=sunHwTrapElectricalCurrentOk, sunHwTrapTempOk=sunHwTrapTempOk, sunHwTrapDriveControllerFaultCleared=sunHwTrapDriveControllerFaultCleared, sunHwTrapStorageVolumeProbableCause=sunHwTrapStorageVolumeProbableCause, sunHwTrapFanSpeedNonCritThresholdExceeded=sunHwTrapFanSpeedNonCritThresholdExceeded, sunHwTrapSlotOrConnectorOk=sunHwTrapSlotOrConnectorOk, sunHwTrapHardDriveError=sunHwTrapHardDriveError, sunHwTrapNotifGroups=sunHwTrapNotifGroups, SunHwTrapDiagEntityTC=SunHwTrapDiagEntityTC, SunHwTrapDisableReasonsTC=SunHwTrapDisableReasonsTC, sunHwTrapObjects=sunHwTrapObjects, sunHwTrapConformances=sunHwTrapConformances, sunHwTrapVoltageNonCritThresholdExceeded=sunHwTrapVoltageNonCritThresholdExceeded, sun=sun, sunHwTrapPowerConsumptionThresholdExceeded=sunHwTrapPowerConsumptionThresholdExceeded, sunHwTrapSensorNonCritThresholdExceeded=sunHwTrapSensorNonCritThresholdExceeded, sunHwTrapFaultUUID=sunHwTrapFaultUUID, sunHwTrapTempNonCritThresholdExceeded=sunHwTrapTempNonCritThresholdExceeded, sunHwTrapProductName=sunHwTrapProductName, sunHwTrapIOFaultCleared=sunHwTrapIOFaultCleared, sunHwTrapStorageVolumeError=sunHwTrapStorageVolumeError, sunHwTrapHardDriveState=sunHwTrapHardDriveState, sunHwTrapNotificationObjectGroup=sunHwTrapNotificationObjectGroup, SunHwTrapStorageVolumeProbableCauseTC=SunHwTrapStorageVolumeProbableCauseTC, sunHwTrapSecurityIntrusion=sunHwTrapSecurityIntrusion, sunHwTrapStorageVolumeFaultCleared=sunHwTrapStorageVolumeFaultCleared, sunHwTrapThresholdValue=sunHwTrapThresholdValue, sunHwTrapHardDriveOk=sunHwTrapHardDriveOk, sunHwTrapSuspectFruFaultClass=sunHwTrapSuspectFruFaultClass, sunHwTrapElectricalCurrentCritThresholdExceeded=sunHwTrapElectricalCurrentCritThresholdExceeded, sunHwTrapHardDriveFaultCleared=sunHwTrapHardDriveFaultCleared, sunHwTrapSuspectFruPn=sunHwTrapSuspectFruPn, sunHwTrapIOFault=sunHwTrapIOFault, sunHwTrapFruRemoved=sunHwTrapFruRemoved, sunHwTrapFaultDescription=sunHwTrapFaultDescription, sunHwTrapElectricalCurrentNonCritThresholdExceeded=sunHwTrapElectricalCurrentNonCritThresholdExceeded, sunHwTrapDriveControllerProbableCause=sunHwTrapDriveControllerProbableCause, sunHwTrapSuspectFruName=sunHwTrapSuspectFruName, sunHwTrapSensorFatalThresholdExceeded=sunHwTrapSensorFatalThresholdExceeded, sunHwTrapFanError=sunHwTrapFanError, sunHwTrapElectricalCurrentCritThresholdDeasserted=sunHwTrapElectricalCurrentCritThresholdDeasserted, SunHwTrapSeverityTC=SunHwTrapSeverityTC, SunHwTrapThresholdTypeTC=SunHwTrapThresholdTypeTC, sunHwTrapFanSpeedFatalThresholdExceeded=sunHwTrapFanSpeedFatalThresholdExceeded, sunHwTrapComponentOk=sunHwTrapComponentOk, sunHwTrapSuspectTable=sunHwTrapSuspectTable, sunHwTrapFaultClass=sunHwTrapFaultClass, sunHwTrapData=sunHwTrapData, sunHwTrapDriveControllerFault=sunHwTrapDriveControllerFault, sunHwTrapSuspectFruStatus=sunHwTrapSuspectFruStatus, sunHwTrapSuspectFruChassisId=sunHwTrapSuspectFruChassisId, sunHwTrapSuspectFruRevision=sunHwTrapSuspectFruRevision, sunHwTrapProcessorError=sunHwTrapProcessorError, sunHwTrapAssocObjectId=sunHwTrapAssocObjectId, sunHwTrapSlotOrConnectorFaultCleared=sunHwTrapSlotOrConnectorFaultCleared, sunHwTrapPowerSupplyFault=sunHwTrapPowerSupplyFault, sunHwTrapSlotOrConnectorError=sunHwTrapSlotOrConnectorError, sunHwTrapComponentFaultCleared=sunHwTrapComponentFaultCleared, sunHwTrapComponentError=sunHwTrapComponentError, sunHwTrapIOOk=sunHwTrapIOOk, sunHwTrapFanSpeedCritThresholdExceeded=sunHwTrapFanSpeedCritThresholdExceeded, sunHwTrapHardDriveFault=sunHwTrapHardDriveFault, sunHwTrapCompliances=sunHwTrapCompliances, sunHwTrapDiagEntity=sunHwTrapDiagEntity, sunHwTrapDisableReason=sunHwTrapDisableReason, sunHwTrapVoltageFatalThresholdExceeded=sunHwTrapVoltageFatalThresholdExceeded, sunHwTrapVoltageFatalThresholdDeasserted=sunHwTrapVoltageFatalThresholdDeasserted, sunHwTrapSensorValue=sunHwTrapSensorValue, SunHwTrapSuspectFruStatusTC=SunHwTrapSuspectFruStatusTC, sunHwTrapProductManufacturer=sunHwTrapProductManufacturer, SunHwTrapFloatingPointValueTC=SunHwTrapFloatingPointValueTC, sunHwTrapFanFault=sunHwTrapFanFault, sunHwTrapSeverity=sunHwTrapSeverity, sunHwTrapComponentFault=sunHwTrapComponentFault, PYSNMP_MODULE_ID=sunHwTrapMIB, sunHwTrapComponentDisabled=sunHwTrapComponentDisabled, sunHwTrapMemoryError=sunHwTrapMemoryError, sunHwTrapHostname=sunHwTrapHostname, SunHwTrapHardDriveProbableCauseTC=SunHwTrapHardDriveProbableCauseTC, sunHwTrapPreOSError=sunHwTrapPreOSError, sunHwTrapFanSpeedCritThresholdDeasserted=sunHwTrapFanSpeedCritThresholdDeasserted, ilom=ilom, sunHwTrapFaultMessageID=sunHwTrapFaultMessageID, sunHwTrapSuspectFruManufacturer=sunHwTrapSuspectFruManufacturer, sunHwTrapTempFatalThresholdDeasserted=sunHwTrapTempFatalThresholdDeasserted, sunHwTrapElectricalCurrentFatalThresholdDeasserted=sunHwTrapElectricalCurrentFatalThresholdDeasserted, sunHwTrapDataTables=sunHwTrapDataTables, sunHwTrapTempFatalThresholdExceeded=sunHwTrapTempFatalThresholdExceeded, sunHwTrapSuspectFruFaultCertainty=sunHwTrapSuspectFruFaultCertainty, SunHwTrapHAStateTC=SunHwTrapHAStateTC, sunHwTrapSuspectFruSn=sunHwTrapSuspectFruSn, sunHwTrapElectricalCurrentFatalThresholdExceeded=sunHwTrapElectricalCurrentFatalThresholdExceeded, sunHwTrapHardDriveProbableCause=sunHwTrapHardDriveProbableCause, sunHwTrapObjectGroups=sunHwTrapObjectGroups, sunHwTrapSuspectCnt=sunHwTrapSuspectCnt, sunHwTrapThresholdType=sunHwTrapThresholdType, sunHwTrapDriveControllerError=sunHwTrapDriveControllerError, sunHwTrapProcessorFaultCleared=sunHwTrapProcessorFaultCleared, sunHwTrapIOError=sunHwTrapIOError, sunHwTrapStorageVolumeFault=sunHwTrapStorageVolumeFault, sunHwTrapFruInserted=sunHwTrapFruInserted, sunHwTrapKaUrl=sunHwTrapKaUrl, sunHwTrapFanSpeedOk=sunHwTrapFanSpeedOk, sunHwTraps=sunHwTraps, sunHwTrapPrefix=sunHwTrapPrefix, sunHwTrapPowerSupplyFaultCleared=sunHwTrapPowerSupplyFaultCleared, sunHwTrapOldHAState=sunHwTrapOldHAState, sunHwTrapTestMessage=sunHwTrapTestMessage, sunHwTrapSensorFatalThresholdDeasserted=sunHwTrapSensorFatalThresholdDeasserted, sunHwTrapComponentEnabled=sunHwTrapComponentEnabled, sunHwTrapAdditionalInfo=sunHwTrapAdditionalInfo, sunHwTrapPowerSupplyError=sunHwTrapPowerSupplyError, sunHwTrapSuspectEntry=sunHwTrapSuspectEntry, sunHwTrapProcessorFault=sunHwTrapProcessorFault, sunHwTrapComponentName=sunHwTrapComponentName, sunHwTrapSuspectFruIndex=sunHwTrapSuspectFruIndex, sunHwTrapVoltageOk=sunHwTrapVoltageOk, sunHwTrapProcessorOk=sunHwTrapProcessorOk, sunHwTrapPowerConsumptionThresholdDeasserted=sunHwTrapPowerConsumptionThresholdDeasserted, sunHwTrapVoltageCritThresholdExceeded=sunHwTrapVoltageCritThresholdExceeded, sunHwTrapNotificationsGroup=sunHwTrapNotificationsGroup, sunHwTrapSensorThresholdOk=sunHwTrapSensorThresholdOk, sunHwTrapChassisId=sunHwTrapChassisId, SunHwTrapHardDriveStatesTC=SunHwTrapHardDriveStatesTC, sunHwTrapMemoryOk=sunHwTrapMemoryOk, sunHwTrapHardDriveStatus=sunHwTrapHardDriveStatus, sunHwTrapTempCritThresholdExceeded=sunHwTrapTempCritThresholdExceeded, sunHwTrapEventTime=sunHwTrapEventTime, sunHwTrapSensorCritThresholdExceeded=sunHwTrapSensorCritThresholdExceeded, sunHwTrapFaultCertainty=sunHwTrapFaultCertainty, sunHwTrapVoltageCritThresholdDeasserted=sunHwTrapVoltageCritThresholdDeasserted, sunHwTrapProductSn=sunHwTrapProductSn)
