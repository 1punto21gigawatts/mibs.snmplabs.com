#
# PySNMP MIB module HP-ICF-TUNNELED-NODE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-TUNNELED-NODE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:35:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Counter32, Integer32, Counter64, Bits, ModuleIdentity, Unsigned32, TimeTicks, iso, NotificationType, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, IpAddress, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Integer32", "Counter64", "Bits", "ModuleIdentity", "Unsigned32", "TimeTicks", "iso", "NotificationType", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "IpAddress", "ObjectIdentity")
TruthValue, DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "RowStatus", "TextualConvention")
hpicfTunneledNode = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 128))
hpicfTunneledNode.setRevisions(('2016-12-06 00:00', '2016-08-05 00:00', '2016-02-11 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfTunneledNode.setRevisionsDescriptions(('Added hpicfTunneledNodeMode object to the hpicfTunneledNodeTable.', 'Added MIB for Papi Security Key.', 'Initial version.',))
if mibBuilder.loadTexts: hpicfTunneledNode.setLastUpdated('201612060000Z')
if mibBuilder.loadTexts: hpicfTunneledNode.setOrganization('HPE')
if mibBuilder.loadTexts: hpicfTunneledNode.setContactInfo('Hewlett-Packard Enterprise Development LP. 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpicfTunneledNode.setDescription('This MIB module contains HP proprietary objects for managing the Tunneled Node protocol.')
hpicfTunneledNodeObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 128, 1))
hpicfTunneledNodeConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 128, 2))
hpicfTunneledNodeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 128, 1, 1))
hpicfTunneledNodeTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 128, 1, 1, 1), )
if mibBuilder.loadTexts: hpicfTunneledNodeTable.setStatus('current')
if mibBuilder.loadTexts: hpicfTunneledNodeTable.setDescription('This table contains the configuration information for the Tunneled Node.')
hpicfTunneledNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 128, 1, 1, 1, 1), ).setIndexNames((0, "HP-ICF-TUNNELED-NODE-MIB", "hpicfTunneledNodeIndex"))
if mibBuilder.loadTexts: hpicfTunneledNodeEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfTunneledNodeEntry.setDescription('An entry in the hpicfTunneledNodeTable that contains the configuration information of a Tunneled Node.')
hpicfTunneledNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 128, 1, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hpicfTunneledNodeIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfTunneledNodeIndex.setDescription('The index of a Tunneled Node profile in hpicfTunneledNodeTable. Only one Tunneled Node profile can be created.')
hpicfTunneledNodeEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 128, 1, 1, 1, 1, 2), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfTunneledNodeEnable.setStatus('current')
if mibBuilder.loadTexts: hpicfTunneledNodeEnable.setDescription('Provides the status of Tunneled Node protocol.')
hpicfTunneledNodePrimaryAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 128, 1, 1, 1, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfTunneledNodePrimaryAddrType.setStatus('current')
if mibBuilder.loadTexts: hpicfTunneledNodePrimaryAddrType.setDescription('The type of address in hpicfTunneledNodePrimaryAddr.')
hpicfTunneledNodePrimaryAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 128, 1, 1, 1, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfTunneledNodePrimaryAddr.setStatus('current')
if mibBuilder.loadTexts: hpicfTunneledNodePrimaryAddr.setDescription('The address of a known Controller.')
hpicfTunneledNodeBackupAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 128, 1, 1, 1, 1, 5), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfTunneledNodeBackupAddrType.setStatus('current')
if mibBuilder.loadTexts: hpicfTunneledNodeBackupAddrType.setDescription('The type of address in hpicfTunneledNodeBackupAddr.')
hpicfTunneledNodeBackupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 128, 1, 1, 1, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfTunneledNodeBackupAddr.setStatus('current')
if mibBuilder.loadTexts: hpicfTunneledNodeBackupAddr.setDescription('The address of a known Backup Controller.')
hpicfTunneledNodeTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 128, 1, 1, 1, 1, 7), Unsigned32().clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfTunneledNodeTimeout.setStatus('current')
if mibBuilder.loadTexts: hpicfTunneledNodeTimeout.setDescription('The keep alive timeout between a switch and a controller.')
hpicfTunneledNodeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 128, 1, 1, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfTunneledNodeRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfTunneledNodeRowStatus.setDescription('The status of this conceptual row in hpicfTunneledNodeTable. This object takes values of createAndGo (4), createAndWait (5), active (1) and destroy (6) as part of a SNMP request. A value of createAndGo (4) indicates that all the required columns are configured within this request and the profile will be set to active, if the request succeeds. A value of createAndWait (5) indicates that some of the required columns are not configured within this request and the profile be set to notReady, if the request succeeds. A value of active (1) is used to set the profile to active state from notReady state. A request with active would succeed only if all the required columns are already configured. A value of destroy (6) is used to delete the profile. A conceptual row in this table can be in either of the following states: active (1) and notReady (3). A value of active (1) indicates that all the required columns are appropriately configured and the profile can be applied on ports. A value of notReady (3) indicates that one or more of the required columns are not configured yet and the profile cannot be applied on ports. The following are the required columns: Controller IP (hpicfTunneledNodePrimaryAddr). When the profile is in use on any port, the values of required columns cannot be modified. When the profile is in use on any port, the corresponding conceptual row can not be deleted.')
hpicfTunneledNodeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 128, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("portbased", 1), ("rolebased", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfTunneledNodeMode.setStatus('current')
if mibBuilder.loadTexts: hpicfTunneledNodeMode.setDescription('The Tunneled Node Mode can be Per port or per user.')
hpicfTunneledNodePortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 128, 1, 1, 2), )
if mibBuilder.loadTexts: hpicfTunneledNodePortConfigTable.setStatus('current')
if mibBuilder.loadTexts: hpicfTunneledNodePortConfigTable.setDescription('This table contains the per port configuration information of the Tunneled Node protocol.')
hpicfTunneledNodePortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 128, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpicfTunneledNodePortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfTunneledNodePortConfigEntry.setDescription('An entry in the hpicfTunneledNodePortConfigTable that contains the configuration information of the tunneled node protocol on a port.')
hpicfTunneledNodePortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 128, 1, 1, 2, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfTunneledNodePortRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfTunneledNodePortRowStatus.setDescription('Status of this conceptual row in hpicfTunneledNodePortConfigTable.')
hpicfTunneledNodeFallbackLclSw = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 128, 1, 1, 2, 1, 2), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfTunneledNodeFallbackLclSw.setStatus('current')
if mibBuilder.loadTexts: hpicfTunneledNodeFallbackLclSw.setDescription(' Provides the status of Fallback to Local Switching when tunnel establishment with the controller fails.')
hpicfTunneledNodeClearStats = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 128, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfTunneledNodeClearStats.setStatus('current')
if mibBuilder.loadTexts: hpicfTunneledNodeClearStats.setDescription('Clears the Tunneled Node statistics for all the Tunneled Node enabled ports. By default, this object is set to FALSE.')
hpicfTunneledNodePapiTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 128, 1, 1, 4), )
if mibBuilder.loadTexts: hpicfTunneledNodePapiTable.setStatus('current')
if mibBuilder.loadTexts: hpicfTunneledNodePapiTable.setDescription('This table contains the configuration information for the papi security key.')
hpicfTunneledNodePapiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 128, 1, 1, 4, 1), ).setIndexNames((0, "HP-ICF-TUNNELED-NODE-MIB", "hpicfTunneledNodePapiAuthMode"))
if mibBuilder.loadTexts: hpicfTunneledNodePapiEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfTunneledNodePapiEntry.setDescription('An entry in the hpicfTunneledNodePapiTable that contains the configuration information of papi security.')
hpicfTunneledNodePapiAuthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 128, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("md5", 2))))
if mibBuilder.loadTexts: hpicfTunneledNodePapiAuthMode.setStatus('current')
if mibBuilder.loadTexts: hpicfTunneledNodePapiAuthMode.setDescription('The authentication mode supported by this key.')
hpicfTunneledNodePapiKeyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 128, 1, 1, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfTunneledNodePapiKeyValue.setStatus('current')
if mibBuilder.loadTexts: hpicfTunneledNodePapiKeyValue.setDescription('A unique string that serves as the key-value for papi security. A read on this object will always return an empty string.')
hpicfTunneledNodePapiKeyEncr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 128, 1, 1, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfTunneledNodePapiKeyEncr.setStatus('current')
if mibBuilder.loadTexts: hpicfTunneledNodePapiKeyEncr.setDescription('The encrypted form of a unique string that serves as the key-value in the papi security.This object can be accessed only when hpSwitchAuthenticationEncryptCredentialsMethod is set to a value other than none(0). This object should only be written with an encrypted key previously read from a compatible HPE Networking device.')
hpicfTunneledNodePapiRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 128, 1, 1, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfTunneledNodePapiRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfTunneledNodePapiRowStatus.setDescription('The row status for this papi security key instance.')
hpicfTunneledNodeCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 128, 2, 1))
hpicfTunneledNodeGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 128, 2, 2))
hpicfTunneledNodeCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 128, 2, 1, 1)).setObjects(("HP-ICF-TUNNELED-NODE-MIB", "hpicfTunneledNodeGroup"), ("HP-ICF-TUNNELED-NODE-MIB", "hpicfTunneledNodePortGroup"), ("HP-ICF-TUNNELED-NODE-MIB", "hpicfTunneledNodePapiGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfTunneledNodeCompliance = hpicfTunneledNodeCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfTunneledNodeCompliance.setDescription('The compliance statement for the hpicfTunneledNode mib.')
hpicfTunneledNodeCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 128, 2, 1, 2)).setObjects(("HP-ICF-TUNNELED-NODE-MIB", "hpicfTunneledNodeGroup1"), ("HP-ICF-TUNNELED-NODE-MIB", "hpicfTunneledNodePortGroup"), ("HP-ICF-TUNNELED-NODE-MIB", "hpicfTunneledNodePapiGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfTunneledNodeCompliance1 = hpicfTunneledNodeCompliance1.setStatus('current')
if mibBuilder.loadTexts: hpicfTunneledNodeCompliance1.setDescription('The compliance statement for the hpicfTunneledNode mib.')
hpicfTunneledNodeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 128, 2, 2, 1)).setObjects(("HP-ICF-TUNNELED-NODE-MIB", "hpicfTunneledNodeEnable"), ("HP-ICF-TUNNELED-NODE-MIB", "hpicfTunneledNodePrimaryAddrType"), ("HP-ICF-TUNNELED-NODE-MIB", "hpicfTunneledNodePrimaryAddr"), ("HP-ICF-TUNNELED-NODE-MIB", "hpicfTunneledNodeBackupAddrType"), ("HP-ICF-TUNNELED-NODE-MIB", "hpicfTunneledNodeBackupAddr"), ("HP-ICF-TUNNELED-NODE-MIB", "hpicfTunneledNodeTimeout"), ("HP-ICF-TUNNELED-NODE-MIB", "hpicfTunneledNodeRowStatus"), ("HP-ICF-TUNNELED-NODE-MIB", "hpicfTunneledNodeClearStats"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfTunneledNodeGroup = hpicfTunneledNodeGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfTunneledNodeGroup.setDescription('A collection of objects for the hpicfTunneledNodeTable configurations.')
hpicfTunneledNodePortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 128, 2, 2, 2)).setObjects(("HP-ICF-TUNNELED-NODE-MIB", "hpicfTunneledNodePortRowStatus"), ("HP-ICF-TUNNELED-NODE-MIB", "hpicfTunneledNodeFallbackLclSw"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfTunneledNodePortGroup = hpicfTunneledNodePortGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfTunneledNodePortGroup.setDescription('A collection of objects for the hpicfTunneledNodePortConfigTable configurations.')
hpicfTunneledNodePapiGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 128, 2, 2, 3)).setObjects(("HP-ICF-TUNNELED-NODE-MIB", "hpicfTunneledNodePapiKeyValue"), ("HP-ICF-TUNNELED-NODE-MIB", "hpicfTunneledNodePapiKeyEncr"), ("HP-ICF-TUNNELED-NODE-MIB", "hpicfTunneledNodePapiRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfTunneledNodePapiGroup = hpicfTunneledNodePapiGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfTunneledNodePapiGroup.setDescription('A collection of objects for the hpicfTunneledNodePapiGroup configuration.')
hpicfTunneledNodeGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 128, 2, 2, 4)).setObjects(("HP-ICF-TUNNELED-NODE-MIB", "hpicfTunneledNodeEnable"), ("HP-ICF-TUNNELED-NODE-MIB", "hpicfTunneledNodePrimaryAddrType"), ("HP-ICF-TUNNELED-NODE-MIB", "hpicfTunneledNodePrimaryAddr"), ("HP-ICF-TUNNELED-NODE-MIB", "hpicfTunneledNodeBackupAddrType"), ("HP-ICF-TUNNELED-NODE-MIB", "hpicfTunneledNodeBackupAddr"), ("HP-ICF-TUNNELED-NODE-MIB", "hpicfTunneledNodeTimeout"), ("HP-ICF-TUNNELED-NODE-MIB", "hpicfTunneledNodeRowStatus"), ("HP-ICF-TUNNELED-NODE-MIB", "hpicfTunneledNodeClearStats"), ("HP-ICF-TUNNELED-NODE-MIB", "hpicfTunneledNodeMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfTunneledNodeGroup1 = hpicfTunneledNodeGroup1.setStatus('current')
if mibBuilder.loadTexts: hpicfTunneledNodeGroup1.setDescription('A collection of objects for the hpicfTunneledNodeTable configurations.')
mibBuilder.exportSymbols("HP-ICF-TUNNELED-NODE-MIB", hpicfTunneledNodeRowStatus=hpicfTunneledNodeRowStatus, hpicfTunneledNodePapiEntry=hpicfTunneledNodePapiEntry, hpicfTunneledNodeBackupAddr=hpicfTunneledNodeBackupAddr, hpicfTunneledNodeFallbackLclSw=hpicfTunneledNodeFallbackLclSw, hpicfTunneledNodeMode=hpicfTunneledNodeMode, hpicfTunneledNodeBackupAddrType=hpicfTunneledNodeBackupAddrType, hpicfTunneledNodePapiKeyEncr=hpicfTunneledNodePapiKeyEncr, hpicfTunneledNodeClearStats=hpicfTunneledNodeClearStats, hpicfTunneledNodeCompliance1=hpicfTunneledNodeCompliance1, hpicfTunneledNodeConfig=hpicfTunneledNodeConfig, hpicfTunneledNodeIndex=hpicfTunneledNodeIndex, hpicfTunneledNode=hpicfTunneledNode, hpicfTunneledNodePapiTable=hpicfTunneledNodePapiTable, hpicfTunneledNodeCompliances=hpicfTunneledNodeCompliances, hpicfTunneledNodeTimeout=hpicfTunneledNodeTimeout, hpicfTunneledNodeEnable=hpicfTunneledNodeEnable, hpicfTunneledNodeTable=hpicfTunneledNodeTable, PYSNMP_MODULE_ID=hpicfTunneledNode, hpicfTunneledNodeGroup=hpicfTunneledNodeGroup, hpicfTunneledNodeObjects=hpicfTunneledNodeObjects, hpicfTunneledNodePrimaryAddrType=hpicfTunneledNodePrimaryAddrType, hpicfTunneledNodePortConfigTable=hpicfTunneledNodePortConfigTable, hpicfTunneledNodePortConfigEntry=hpicfTunneledNodePortConfigEntry, hpicfTunneledNodePapiRowStatus=hpicfTunneledNodePapiRowStatus, hpicfTunneledNodeEntry=hpicfTunneledNodeEntry, hpicfTunneledNodePapiAuthMode=hpicfTunneledNodePapiAuthMode, hpicfTunneledNodeCompliance=hpicfTunneledNodeCompliance, hpicfTunneledNodeGroups=hpicfTunneledNodeGroups, hpicfTunneledNodePortGroup=hpicfTunneledNodePortGroup, hpicfTunneledNodeGroup1=hpicfTunneledNodeGroup1, hpicfTunneledNodePortRowStatus=hpicfTunneledNodePortRowStatus, hpicfTunneledNodeConformance=hpicfTunneledNodeConformance, hpicfTunneledNodePapiKeyValue=hpicfTunneledNodePapiKeyValue, hpicfTunneledNodePapiGroup=hpicfTunneledNodePapiGroup, hpicfTunneledNodePrimaryAddr=hpicfTunneledNodePrimaryAddr)
