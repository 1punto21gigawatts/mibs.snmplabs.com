#
# PySNMP MIB module LEFTHAND-NETWORKS-NUS-COMMON-SECURITY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LEFTHAND-NETWORKS-NUS-COMMON-SECURITY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:06:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
lhnModules, = mibBuilder.importSymbols("LEFTHAND-NETWORKS-GLOBAL-REG", "lhnModules")
lhnNusCommonSecurity, = mibBuilder.importSymbols("LEFTHAND-NETWORKS-NUS-COMMON-MIB", "lhnNusCommonSecurity")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Counter64, NotificationType, MibIdentifier, Bits, ModuleIdentity, IpAddress, Gauge32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ObjectIdentity, iso, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter64", "NotificationType", "MibIdentifier", "Bits", "ModuleIdentity", "IpAddress", "Gauge32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ObjectIdentity", "iso", "Unsigned32")
TruthValue, DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "RowStatus", "TextualConvention")
lhnNusCommonSecurityModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 9804, 1, 1, 10))
if mibBuilder.loadTexts: lhnNusCommonSecurityModule.setLastUpdated('0106010000Z')
if mibBuilder.loadTexts: lhnNusCommonSecurityModule.setOrganization('LeftHand Networks, Inc.')
if mibBuilder.loadTexts: lhnNusCommonSecurityModule.setContactInfo(' Author: Jose Faria LeftHand Networks postal: 6185 Arapahoe Rd. Boulder, CO 80301 USA email: jfaria@lefthandnetworks.com phone: +1 303 449-4100 ')
if mibBuilder.loadTexts: lhnNusCommonSecurityModule.setDescription('Security items for NUS Devices')
secUserCount = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secUserCount.setStatus('current')
if mibBuilder.loadTexts: secUserCount.setDescription('Number of users in the NUS')
secUserTable = MibTable((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 2), )
if mibBuilder.loadTexts: secUserTable.setStatus('current')
if mibBuilder.loadTexts: secUserTable.setDescription('A table of users for the NUS. The number of entries is given by secUserCount.')
secUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 2, 1), ).setIndexNames((0, "LEFTHAND-NETWORKS-NUS-COMMON-SECURITY-MIB", "secUserIndex"))
if mibBuilder.loadTexts: secUserEntry.setStatus('current')
if mibBuilder.loadTexts: secUserEntry.setDescription('A row of network setup parameters for the NUS.')
secUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 2, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: secUserIndex.setStatus('current')
if mibBuilder.loadTexts: secUserIndex.setDescription('security user index')
secUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 2, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: secUserName.setStatus('current')
if mibBuilder.loadTexts: secUserName.setDescription('security username for NUS')
secUserDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 2, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secUserDesc.setStatus('current')
if mibBuilder.loadTexts: secUserDesc.setDescription('security user description for NUS')
secUserPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 2, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secUserPasswd.setStatus('current')
if mibBuilder.loadTexts: secUserPasswd.setDescription('security user password for NUS')
secUserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: secUserRowStatus.setStatus('current')
if mibBuilder.loadTexts: secUserRowStatus.setDescription('The row status')
secGroupCount = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secGroupCount.setStatus('current')
if mibBuilder.loadTexts: secGroupCount.setDescription('Number of security groups in the NUS')
secGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 4), )
if mibBuilder.loadTexts: secGroupTable.setStatus('current')
if mibBuilder.loadTexts: secGroupTable.setDescription('A table of users for the NUS. The number of entries is given by secUserCount.')
secGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 4, 1), ).setIndexNames((0, "LEFTHAND-NETWORKS-NUS-COMMON-SECURITY-MIB", "secGroupIndex"))
if mibBuilder.loadTexts: secGroupEntry.setStatus('current')
if mibBuilder.loadTexts: secGroupEntry.setDescription('A row of network setup parameters for the NUS.')
secGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 4, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: secGroupIndex.setStatus('current')
if mibBuilder.loadTexts: secGroupIndex.setDescription('index for security group')
secGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 4, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secGroupName.setStatus('current')
if mibBuilder.loadTexts: secGroupName.setDescription('security groupname for NUS')
secGroupDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 4, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secGroupDesc.setStatus('current')
if mibBuilder.loadTexts: secGroupDesc.setDescription('security group description for NUS')
secGroupUserCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secGroupUserCount.setStatus('current')
if mibBuilder.loadTexts: secGroupUserCount.setDescription('security group user count for NUS')
secGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: secGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: secGroupRowStatus.setDescription('The row status')
secGroupUserTable = MibTable((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 5), )
if mibBuilder.loadTexts: secGroupUserTable.setStatus('current')
if mibBuilder.loadTexts: secGroupUserTable.setDescription('security group user table')
secGroupUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 5, 1), ).setIndexNames((0, "LEFTHAND-NETWORKS-NUS-COMMON-SECURITY-MIB", "secGroupIndex"), (0, "LEFTHAND-NETWORKS-NUS-COMMON-SECURITY-MIB", "secGroupUserIndex"))
if mibBuilder.loadTexts: secGroupUserEntry.setStatus('current')
if mibBuilder.loadTexts: secGroupUserEntry.setDescription('A row of network setup parameters for the NUS.')
secGroupUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 5, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: secGroupUserIndex.setStatus('current')
if mibBuilder.loadTexts: secGroupUserIndex.setDescription('index for security group user')
secGroupUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 5, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: secGroupUserName.setStatus('current')
if mibBuilder.loadTexts: secGroupUserName.setDescription('security group username for NUS')
secGroupUserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: secGroupUserRowStatus.setStatus('current')
if mibBuilder.loadTexts: secGroupUserRowStatus.setDescription('The row status')
secAdminUserCount = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secAdminUserCount.setStatus('current')
if mibBuilder.loadTexts: secAdminUserCount.setDescription('Number of users in the NUS')
secAdminUserTable = MibTable((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 7), )
if mibBuilder.loadTexts: secAdminUserTable.setStatus('current')
if mibBuilder.loadTexts: secAdminUserTable.setDescription('A table of users for the NUS. The number of entries is given by secUserCount.')
secAdminUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 7, 1), ).setIndexNames((0, "LEFTHAND-NETWORKS-NUS-COMMON-SECURITY-MIB", "secAdminUserIndex"))
if mibBuilder.loadTexts: secAdminUserEntry.setStatus('current')
if mibBuilder.loadTexts: secAdminUserEntry.setDescription('A row of network setup parameters for the NUS.')
secAdminUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 7, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: secAdminUserIndex.setStatus('current')
if mibBuilder.loadTexts: secAdminUserIndex.setDescription('security user index')
secAdminUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 7, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: secAdminUserName.setStatus('current')
if mibBuilder.loadTexts: secAdminUserName.setDescription('security username for NUS')
secAdminUserDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 7, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secAdminUserDesc.setStatus('current')
if mibBuilder.loadTexts: secAdminUserDesc.setDescription('security user description for NUS')
secAdminUserPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 7, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secAdminUserPasswd.setStatus('current')
if mibBuilder.loadTexts: secAdminUserPasswd.setDescription('security user password for NUS')
secAdminUserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 7, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: secAdminUserRowStatus.setStatus('current')
if mibBuilder.loadTexts: secAdminUserRowStatus.setDescription('The row status')
secAdminGroupCount = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secAdminGroupCount.setStatus('current')
if mibBuilder.loadTexts: secAdminGroupCount.setDescription('Number of security groups in the NUS')
secAdminGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 9), )
if mibBuilder.loadTexts: secAdminGroupTable.setStatus('current')
if mibBuilder.loadTexts: secAdminGroupTable.setDescription('A table of users for the NUS. The number of entries is given by secUserCount.')
secAdminGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 9, 1), ).setIndexNames((0, "LEFTHAND-NETWORKS-NUS-COMMON-SECURITY-MIB", "secAdminGroupIndex"))
if mibBuilder.loadTexts: secAdminGroupEntry.setStatus('current')
if mibBuilder.loadTexts: secAdminGroupEntry.setDescription('A row of network setup parameters for the NUS.')
secAdminGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 9, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: secAdminGroupIndex.setStatus('current')
if mibBuilder.loadTexts: secAdminGroupIndex.setDescription('index for security group')
secAdminGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 9, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secAdminGroupName.setStatus('current')
if mibBuilder.loadTexts: secAdminGroupName.setDescription('security groupname for NUS')
secAdminGroupDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 9, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secAdminGroupDesc.setStatus('current')
if mibBuilder.loadTexts: secAdminGroupDesc.setDescription('security group description for NUS')
secAdminGroupUserOrSubGroupCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 9, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secAdminGroupUserOrSubGroupCount.setStatus('current')
if mibBuilder.loadTexts: secAdminGroupUserOrSubGroupCount.setDescription('security group user count for NUS')
secAdminGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 9, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: secAdminGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: secAdminGroupRowStatus.setDescription('The row status')
secAdminGroupUserOrSubGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 10), )
if mibBuilder.loadTexts: secAdminGroupUserOrSubGroupTable.setStatus('current')
if mibBuilder.loadTexts: secAdminGroupUserOrSubGroupTable.setDescription('security group user table')
secAdminGroupUserOrSubGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 10, 1), ).setIndexNames((0, "LEFTHAND-NETWORKS-NUS-COMMON-SECURITY-MIB", "secAdminGroupIndex"), (0, "LEFTHAND-NETWORKS-NUS-COMMON-SECURITY-MIB", "secAdminGroupUserOrSubGroupIndex"))
if mibBuilder.loadTexts: secAdminGroupUserOrSubGroupEntry.setStatus('current')
if mibBuilder.loadTexts: secAdminGroupUserOrSubGroupEntry.setDescription('A row of network setup parameters for the NUS.')
secAdminGroupUserOrSubGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 10, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: secAdminGroupUserOrSubGroupIndex.setStatus('current')
if mibBuilder.loadTexts: secAdminGroupUserOrSubGroupIndex.setDescription('index for security group user')
secAdminGroupUserOrSubGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 10, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: secAdminGroupUserOrSubGroupName.setStatus('current')
if mibBuilder.loadTexts: secAdminGroupUserOrSubGroupName.setDescription('security admin group username for NUS')
secAdminGroupUserOrSubGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 10, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: secAdminGroupUserOrSubGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: secAdminGroupUserOrSubGroupRowStatus.setDescription('The row status')
secAdminGroupAccessTable = MibTable((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 11), )
if mibBuilder.loadTexts: secAdminGroupAccessTable.setStatus('current')
if mibBuilder.loadTexts: secAdminGroupAccessTable.setDescription('security admin group key access table')
secAdminGroupAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 11, 1), ).setIndexNames((0, "LEFTHAND-NETWORKS-NUS-COMMON-SECURITY-MIB", "secAdminGroupIndex"), (0, "LEFTHAND-NETWORKS-NUS-COMMON-SECURITY-MIB", "secAdminGroupAccessIndex"))
if mibBuilder.loadTexts: secAdminGroupAccessEntry.setStatus('current')
if mibBuilder.loadTexts: secAdminGroupAccessEntry.setDescription('A row of keys for the admin group.')
secAdminGroupAccessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 11, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: secAdminGroupAccessIndex.setStatus('current')
if mibBuilder.loadTexts: secAdminGroupAccessIndex.setDescription('index to admin group key access table')
secAdminGroupAccessKey = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 11, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secAdminGroupAccessKey.setStatus('current')
if mibBuilder.loadTexts: secAdminGroupAccessKey.setDescription('key in admin group key access table')
secAdminGroupAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 11, 1, 3), Bits().clone(namedValues=NamedValues(("get", 0), ("set", 1), ("add", 2), ("delete", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: secAdminGroupAccessMode.setStatus('current')
if mibBuilder.loadTexts: secAdminGroupAccessMode.setDescription('mode of access in admin group key access table')
secAdminGroupAccessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 11, 11, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: secAdminGroupAccessRowStatus.setStatus('current')
if mibBuilder.loadTexts: secAdminGroupAccessRowStatus.setDescription('the row status')
mibBuilder.exportSymbols("LEFTHAND-NETWORKS-NUS-COMMON-SECURITY-MIB", secAdminGroupUserOrSubGroupRowStatus=secAdminGroupUserOrSubGroupRowStatus, secGroupIndex=secGroupIndex, secAdminGroupTable=secAdminGroupTable, secUserDesc=secUserDesc, secGroupUserName=secGroupUserName, secAdminGroupCount=secAdminGroupCount, secUserEntry=secUserEntry, secAdminUserRowStatus=secAdminUserRowStatus, secAdminUserEntry=secAdminUserEntry, secUserRowStatus=secUserRowStatus, secAdminGroupName=secAdminGroupName, secGroupUserTable=secGroupUserTable, secGroupTable=secGroupTable, secUserName=secUserName, secAdminGroupAccessKey=secAdminGroupAccessKey, secAdminGroupUserOrSubGroupCount=secAdminGroupUserOrSubGroupCount, secAdminUserCount=secAdminUserCount, secGroupDesc=secGroupDesc, secAdminGroupAccessMode=secAdminGroupAccessMode, secAdminUserName=secAdminUserName, secAdminUserDesc=secAdminUserDesc, secAdminGroupIndex=secAdminGroupIndex, secAdminGroupEntry=secAdminGroupEntry, secAdminUserPasswd=secAdminUserPasswd, secAdminUserIndex=secAdminUserIndex, secAdminUserTable=secAdminUserTable, secGroupUserRowStatus=secGroupUserRowStatus, secGroupUserEntry=secGroupUserEntry, secUserTable=secUserTable, secAdminGroupRowStatus=secAdminGroupRowStatus, secAdminGroupAccessEntry=secAdminGroupAccessEntry, secAdminGroupUserOrSubGroupTable=secAdminGroupUserOrSubGroupTable, secAdminGroupUserOrSubGroupEntry=secAdminGroupUserOrSubGroupEntry, lhnNusCommonSecurityModule=lhnNusCommonSecurityModule, secUserIndex=secUserIndex, secAdminGroupAccessTable=secAdminGroupAccessTable, secGroupUserIndex=secGroupUserIndex, PYSNMP_MODULE_ID=lhnNusCommonSecurityModule, secAdminGroupUserOrSubGroupName=secAdminGroupUserOrSubGroupName, secGroupUserCount=secGroupUserCount, secAdminGroupAccessIndex=secAdminGroupAccessIndex, secUserCount=secUserCount, secGroupName=secGroupName, secAdminGroupDesc=secAdminGroupDesc, secAdminGroupAccessRowStatus=secAdminGroupAccessRowStatus, secUserPasswd=secUserPasswd, secGroupCount=secGroupCount, secAdminGroupUserOrSubGroupIndex=secAdminGroupUserOrSubGroupIndex, secGroupRowStatus=secGroupRowStatus, secGroupEntry=secGroupEntry)
