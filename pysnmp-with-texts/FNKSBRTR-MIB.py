#
# PySNMP MIB module FNKSBRTR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FNKSBRTR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:14:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, NotificationType, MibIdentifier, Bits, ObjectIdentity, ModuleIdentity, Integer32, NotificationType, enterprises, Counter64, Gauge32, iso, Counter32, TimeTicks, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "NotificationType", "MibIdentifier", "Bits", "ObjectIdentity", "ModuleIdentity", "Integer32", "NotificationType", "enterprises", "Counter64", "Gauge32", "iso", "Counter32", "TimeTicks", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
funk = MibIdentifier((1, 3, 6, 1, 4, 1, 1411))
funkSbr = MibIdentifier((1, 3, 6, 1, 4, 1, 1411, 1))
funkSbrTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 1411, 1, 1))
funkSbrTrapVars = MibIdentifier((1, 3, 6, 1, 4, 1, 1411, 1, 1, 1))
funkSbrTrapVarComp = MibScalar((1, 3, 6, 1, 4, 1, 1411, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("core", 1), ("accounting", 2), ("authentication", 3))))
if mibBuilder.loadTexts: funkSbrTrapVarComp.setStatus('optional')
if mibBuilder.loadTexts: funkSbrTrapVarComp.setDescription('The component within the SBR server that issued the trap.')
funkSbrTrapVarSev = MibScalar((1, 3, 6, 1, 4, 1, 1411, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("informational", 1), ("warning", 2), ("error", 3))))
if mibBuilder.loadTexts: funkSbrTrapVarSev.setStatus('optional')
if mibBuilder.loadTexts: funkSbrTrapVarSev.setDescription('The severity of the event that caused the trap.')
funkSbrTrapVarSWName = MibScalar((1, 3, 6, 1, 4, 1, 1411, 1, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: funkSbrTrapVarSWName.setStatus('optional')
if mibBuilder.loadTexts: funkSbrTrapVarSWName.setDescription('The identity of the software that is the RADIUS server.')
funkSbrTrapVarThreadsAvail = MibScalar((1, 3, 6, 1, 4, 1, 1411, 1, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 10)))
if mibBuilder.loadTexts: funkSbrTrapVarThreadsAvail.setStatus('optional')
if mibBuilder.loadTexts: funkSbrTrapVarThreadsAvail.setDescription('The number of threads available in the thread worker pool.')
funkSbrTrapVarBytesAvail = MibScalar((1, 3, 6, 1, 4, 1, 1411, 1, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: funkSbrTrapVarBytesAvail.setStatus('optional')
if mibBuilder.loadTexts: funkSbrTrapVarBytesAvail.setDescription('The number of bytes available in the file system.')
funkSbrTrapVarPrivateDir = MibScalar((1, 3, 6, 1, 4, 1, 1411, 1, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: funkSbrTrapVarPrivateDir.setStatus('optional')
if mibBuilder.loadTexts: funkSbrTrapVarPrivateDir.setDescription('The file system path to the private directory used by the RADIUS server.')
funkSbrTrapVarNumberOfOccurrences = MibScalar((1, 3, 6, 1, 4, 1, 1411, 1, 1, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 10)))
if mibBuilder.loadTexts: funkSbrTrapVarNumberOfOccurrences.setStatus('optional')
if mibBuilder.loadTexts: funkSbrTrapVarNumberOfOccurrences.setDescription("The dilution factor for the trap. The trap is sent on once for every 'n' occurrences of this event.")
funkSbrTrapVarSQLConnects = MibScalar((1, 3, 6, 1, 4, 1, 1411, 1, 1, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 10)))
if mibBuilder.loadTexts: funkSbrTrapVarSQLConnects.setStatus('optional')
if mibBuilder.loadTexts: funkSbrTrapVarSQLConnects.setDescription('The number of connection attempts to a SQL database.')
funkSbrTrapVarSQLDisconnects = MibScalar((1, 3, 6, 1, 4, 1, 1411, 1, 1, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 10)))
if mibBuilder.loadTexts: funkSbrTrapVarSQLDisconnects.setStatus('optional')
if mibBuilder.loadTexts: funkSbrTrapVarSQLDisconnects.setDescription('The number of disconnects from a SQL database (due to an error encountered during an operation).')
funkSbrTrapVarSQLTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 1411, 1, 1, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 10)))
if mibBuilder.loadTexts: funkSbrTrapVarSQLTimeouts.setStatus('optional')
if mibBuilder.loadTexts: funkSbrTrapVarSQLTimeouts.setDescription('The number of timeouts encountered when trying to perform a transaction against a SQL database.')
funkSbrTrapVarServiceDispatcherErrCode = MibScalar((1, 3, 6, 1, 4, 1, 1411, 1, 1, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 10)))
if mibBuilder.loadTexts: funkSbrTrapVarServiceDispatcherErrCode.setStatus('optional')
if mibBuilder.loadTexts: funkSbrTrapVarServiceDispatcherErrCode.setDescription('The error code returned in response to an attempt to start the RADIUS service on Windows NT.')
funkSbrTrapVarSetStatusErrCode = MibScalar((1, 3, 6, 1, 4, 1, 1411, 1, 1, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 10)))
if mibBuilder.loadTexts: funkSbrTrapVarSetStatusErrCode.setStatus('optional')
if mibBuilder.loadTexts: funkSbrTrapVarSetStatusErrCode.setDescription('The error code returned in response to an attempt to inform the service control dispatcher of the status of the RADIUS service on Windows NT.')
funkSbrTrapVarGetDiskFreeSpaceErrCode = MibScalar((1, 3, 6, 1, 4, 1, 1411, 1, 1, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 10)))
if mibBuilder.loadTexts: funkSbrTrapVarGetDiskFreeSpaceErrCode.setStatus('optional')
if mibBuilder.loadTexts: funkSbrTrapVarGetDiskFreeSpaceErrCode.setDescription('The error code returned in response to an attempt to call GetDiskFreeSpaceEx to determine the amount of free disk space available on Windows NT.')
funkSbrTrapVarIniString = MibScalar((1, 3, 6, 1, 4, 1, 1411, 1, 1, 1, 14), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: funkSbrTrapVarIniString.setStatus('optional')
if mibBuilder.loadTexts: funkSbrTrapVarIniString.setDescription('The INI file setting used to specify a configuration value.')
funkSbrTrapVarDbType = MibScalar((1, 3, 6, 1, 4, 1, 1411, 1, 1, 1, 15), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: funkSbrTrapVarDbType.setStatus('optional')
if mibBuilder.loadTexts: funkSbrTrapVarDbType.setDescription('The type of database being employed by the RADIUS server.')
funkSbrTrapVarFailedSystemName = MibScalar((1, 3, 6, 1, 4, 1, 1411, 1, 1, 1, 16), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: funkSbrTrapVarFailedSystemName.setStatus('optional')
if mibBuilder.loadTexts: funkSbrTrapVarFailedSystemName.setDescription('The name of the remote system failing connectivity from the radius server.')
funkSbrTrapVarUserName = MibScalar((1, 3, 6, 1, 4, 1, 1411, 1, 1, 1, 17), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: funkSbrTrapVarUserName.setStatus('optional')
if mibBuilder.loadTexts: funkSbrTrapVarUserName.setDescription('The name of the user to whom the trap refers.')
funkSbrTrapVarPersistStoreName = MibScalar((1, 3, 6, 1, 4, 1, 1411, 1, 1, 1, 18), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: funkSbrTrapVarPersistStoreName.setStatus('optional')
if mibBuilder.loadTexts: funkSbrTrapVarPersistStoreName.setDescription('The name of the persistent storage to which the trap refers.')
funkSbrTrapVarDiagnosticMessage = MibScalar((1, 3, 6, 1, 4, 1, 1411, 1, 1, 1, 19), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: funkSbrTrapVarDiagnosticMessage.setStatus('optional')
if mibBuilder.loadTexts: funkSbrTrapVarDiagnosticMessage.setDescription('A generic diagnostic message that may be helpful in determining and addressing the possible root causes of the trap.')
funkSbrTrapVarIPAddrPoolName = MibScalar((1, 3, 6, 1, 4, 1, 1411, 1, 1, 1, 20), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: funkSbrTrapVarIPAddrPoolName.setStatus('optional')
if mibBuilder.loadTexts: funkSbrTrapVarIPAddrPoolName.setDescription('The name of the IP address pool to which the trap refers.')
funkSbrTrapVarIPAddrAvail = MibScalar((1, 3, 6, 1, 4, 1, 1411, 1, 1, 1, 21), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)))
if mibBuilder.loadTexts: funkSbrTrapVarIPAddrAvail.setStatus('optional')
if mibBuilder.loadTexts: funkSbrTrapVarIPAddrAvail.setDescription('The number of addresses available in the IP address pool.')
funkSbrTrapServiceStarted = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,100)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarSWName"))
if mibBuilder.loadTexts: funkSbrTrapServiceStarted.setDescription('This trap will be sent when the RADIUS server is started.')
funkSbrTrapServiceStopped = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,101)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarSWName"))
if mibBuilder.loadTexts: funkSbrTrapServiceStopped.setDescription('This trap will be sent when the RADIUS server is stopped.')
funkSbrTrapThreadsNormal = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,102)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarThreadsAvail"))
if mibBuilder.loadTexts: funkSbrTrapThreadsNormal.setDescription('This trap will be sent when the the number of available threads in the accounting or authentication server has risen above a specified threshold.')
funkSbrTrapFSNormal = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,103)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarBytesAvail"))
if mibBuilder.loadTexts: funkSbrTrapFSNormal.setDescription('This trap will be sent when the the number of bytes available in the file system from which the server is running has risen above a specified threshold.')
funkSbrTrapConcurrencyReconnect = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,104)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarFailedSystemName"))
if mibBuilder.loadTexts: funkSbrTrapConcurrencyReconnect.setDescription('This trap will be sent when Radius reconnects to the concurrency server after it has sent a ConcurrencyFailure, ConcurrentyTimeout, or ConcurrencyLocalProxyFailure trap.')
funkSbrTrapSQLReconnect = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,105)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarFailedSystemName"))
if mibBuilder.loadTexts: funkSbrTrapSQLReconnect.setDescription('This trap will be sent when Radius reconnects to the SQL database after it has sent a SQLConnectFail trap.')
funkSbrTrapLDAPReconnect = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,106)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarFailedSystemName"))
if mibBuilder.loadTexts: funkSbrTrapLDAPReconnect.setDescription('This trap will be sent when Radius reconnects to the LDAP server after it has sent a LDAPConnectFail trap.')
funkSbrTrapUserAccountLocked = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,107)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarUserName"))
if mibBuilder.loadTexts: funkSbrTrapUserAccountLocked.setDescription("This trap will be sent when a user's account becomes locked out due to an excessive number of rejected authentication attempts within a defined period of time.")
funkSbrTrapUserAccountReleased = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,108)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarUserName"))
if mibBuilder.loadTexts: funkSbrTrapUserAccountReleased.setDescription("This trap will be sent when a user's account, previously locked out due to an excessive number of rejected authentication attempts, becomes unlocked.")
funkSbrTrapProxySpoolReconnect = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,109)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarFailedSystemName"))
if mibBuilder.loadTexts: funkSbrTrapProxySpoolReconnect.setDescription('This trap will be sent when the proxy accounting spooler reconnects to the target realm after it has sent a ProxySpoolTimeout trap.')
funkSbrTrapIPAddrPoolNormal = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,110)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarIPAddrPoolName"), ("FNKSBRTR-MIB", "funkSbrTrapVarIPAddrAvail"))
if mibBuilder.loadTexts: funkSbrTrapIPAddrPoolNormal.setDescription('This trap will be sent when the number of available IP addresses in any pool has risen above a specified threshold.')
funkSbrTrapCmdArgBadPrivDir = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,5000)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarPrivateDir"))
if mibBuilder.loadTexts: funkSbrTrapCmdArgBadPrivDir.setDescription('This trap will be sent when an invalid private directory is specified on the command line used to launch the RADIUS server. The command line option is ignored.')
funkSbrTrapLowThreads = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,5001)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarThreadsAvail"))
if mibBuilder.loadTexts: funkSbrTrapLowThreads.setDescription('This trap will be sent when the count of threads available for the accounting or authentication server drops below a configurable threshold. An informational trap is sent when the count of available threads (at some future point) rises to an acceptable level.')
funkSbrTrapConcurrencyFailure = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,5002)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarNumberOfOccurrences"))
if mibBuilder.loadTexts: funkSbrTrapConcurrencyFailure.setDescription("This trap will be sent when communications with the RADIUS concurrency server fails. The trap is 'diluted', i.e. it is sent only once for every 'n' occurrences of the failure.")
funkSbrTrapConcurrencyTimeout = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,5003)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarNumberOfOccurrences"))
if mibBuilder.loadTexts: funkSbrTrapConcurrencyTimeout.setDescription("This trap will be sent when communications with the RADIUS concurrency server times out. The trap is 'diluted', i.e. it is sent only once for every 'n' occurrences of the failure.")
funkSbrTrapConcurrencyLocalProxyFailure = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,5004)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarNumberOfOccurrences"))
if mibBuilder.loadTexts: funkSbrTrapConcurrencyLocalProxyFailure.setDescription("This trap will be sent when a local error prevents the RADIUS server from sending a proxy request to the RADIUS concurrency server. The trap is 'diluted', i.e. it is sent only once for every 'n' occurrences of the failure.")
funkSbrTrapStaticAcctProxyTimeout = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,5005)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarNumberOfOccurrences"))
if mibBuilder.loadTexts: funkSbrTrapStaticAcctProxyTimeout.setDescription("This trap will be sent when the RADIUS server times out in an attempt to forward an accounting request to the location specified by the static proxy option. The trap is 'diluted', i.e. it is sent only once for every 'n' occurrences of the failure.")
funkSbrTrapStaticAcctProxyLocalFailure = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,5006)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarNumberOfOccurrences"))
if mibBuilder.loadTexts: funkSbrTrapStaticAcctProxyLocalFailure.setDescription("This trap will be sent when the RADIUS server encounters a local failure in an attempt to forward an accounting request to the location specified by the static proxy option. The trap is 'diluted', i.e. it is sent only once for every 'n' occurrences of the failure.")
funkSbrTrapLowFSSpace = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,5007)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarBytesAvail"))
if mibBuilder.loadTexts: funkSbrTrapLowFSSpace.setDescription("This trap will be sent when the amount of space available in the file system in which the server's private directory resides falls below a configurable threshold. An informational trap is sent when the amount of available space (at some future point) rises to an acceptable level.")
funkSbrTrapSQLConnectFail = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,5008)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarSQLConnects"))
if mibBuilder.loadTexts: funkSbrTrapSQLConnectFail.setDescription("This trap will be sent when the connection to a SQL database has failed. The trap is 'diluted', i.e. it is sent only once for every 'n' occurrences of the timeout.")
funkSbrTrapSQLDisconnect = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,5009)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarSQLDisconnects"))
if mibBuilder.loadTexts: funkSbrTrapSQLDisconnect.setDescription("This trap will be sent when a disconnect to a SQL database occurs. The trap is 'diluted', i.e. it is sent only once for every 'n' occurrences of the disconnect.")
funkSbrTrapSQLTimeout = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,5010)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarSQLTimeouts"))
if mibBuilder.loadTexts: funkSbrTrapSQLTimeout.setDescription("This trap will be sent when a timeout occurs during an attempt to perform transactions to a SQL database. The trap is 'diluted', i.e. it is sent only once for every 'n' occurrences of the timeout.")
funkSbrTrapAcctDbTimeout = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,5011)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarNumberOfOccurrences"))
if mibBuilder.loadTexts: funkSbrTrapAcctDbTimeout.setDescription("This trap will be sent when the access to the accounting database has timed out. The trap is 'diluted', i.e. it is sent only once for every 'n' occurrences of the timeout.")
funkSbrTrapAcctDbFailure = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,5012)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarNumberOfOccurrences"))
if mibBuilder.loadTexts: funkSbrTrapAcctDbFailure.setDescription("This trap will be sent when the access to the accounting database has failed. The trap is 'diluted', i.e. it is sent only once for every 'n' occurrences of the failure.")
funkSbrTrapVerifyServerTimeout = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,5013)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarNumberOfOccurrences"))
if mibBuilder.loadTexts: funkSbrTrapVerifyServerTimeout.setDescription("This trap will be sent when an attempt to communicate with the Verification Server has timed out. The trap is 'diluted', i.e. it is sent only once for every 'n' occurrences of the timeout.")
funkSbrTrapVerifyServerFail = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,5014)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarNumberOfOccurrences"))
if mibBuilder.loadTexts: funkSbrTrapVerifyServerFail.setDescription("This trap will be sent when an attempt to communicate with the Verification Server has failed. The trap is 'diluted', i.e. it is sent only once for every 'n' occurrences of the failure.")
funkSbrTrapLDAPConnectFailure = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,5015)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarFailedSystemName"))
if mibBuilder.loadTexts: funkSbrTrapLDAPConnectFailure.setDescription('This trap will be sent when a connect failure takes place to an LDAP server.')
funkSbrTrapLDAPConnectFailures = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,5016)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarNumberOfOccurrences"))
if mibBuilder.loadTexts: funkSbrTrapLDAPConnectFailures.setDescription("This trap will be sent when an attempt to communicate with the LDAP Server has failed. The trap is 'diluted', i.e. it is sent only once for every 'n' occurrences of the failure.")
funkSbrTrapLDAPDisconnects = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,5017)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarNumberOfOccurrences"))
if mibBuilder.loadTexts: funkSbrTrapLDAPDisconnects.setDescription("This trap will be sent the LDAP Server has Disconnected. The trap is 'diluted', i.e. it is sent only once for every 'n' occurrences of the failure.")
funkSbrTrapLDAPRequestTimeouts = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,5018)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarNumberOfOccurrences"))
if mibBuilder.loadTexts: funkSbrTrapLDAPRequestTimeouts.setDescription("This trap will be sent when an request sent to the LDAP Server has timed out. The trap is 'diluted', i.e. it is sent only once for every 'n' occurrences of the failure.")
funkSbrTrapLDAPDisconnect = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,5019)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarFailedSystemName"))
if mibBuilder.loadTexts: funkSbrTrapLDAPDisconnect.setDescription('This trap will be sent when a disconnect to a LDAP server occurs.')
funkSbrTrapLDAPRequestTimeout = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,5020)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarFailedSystemName"))
if mibBuilder.loadTexts: funkSbrTrapLDAPRequestTimeout.setDescription('This trap will be sent when a request sent to the LDAP Server has timed out.')
funkSbrTrapProxySpoolTimeout = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,5021)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarFailedSystemName"))
if mibBuilder.loadTexts: funkSbrTrapProxySpoolTimeout.setDescription('This trap will be sent when a request forwarded by the proxy accounting spooler has timed out.')
funkSbrTrapProxySpoolTimeouts = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,5022)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarNumberOfOccurrences"))
if mibBuilder.loadTexts: funkSbrTrapProxySpoolTimeouts.setDescription("This trap will be sent when a request forwarded by the proxy accounting spooler has timed out. The trap is 'diluted', i.e. it is sent only once for every 'n' occurrences of the timeout.")
funkSbrTrapSoftLimitViolation = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,5023)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarNumberOfOccurrences"), ("FNKSBRTR-MIB", "funkSbrTrapVarFailedSystemName"))
if mibBuilder.loadTexts: funkSbrTrapSoftLimitViolation.setDescription("This trap will be sent when accepting a concurrency request exceeds a realm's soft limit. The trap is 'diluted', i.e. it is sent only once for every 'n' occurrences of all such violations.")
funkSbrTrapHardLimitViolation = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,5024)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarNumberOfOccurrences"), ("FNKSBRTR-MIB", "funkSbrTrapVarFailedSystemName"))
if mibBuilder.loadTexts: funkSbrTrapHardLimitViolation.setDescription("This trap will be sent when a concurrency request is rejected because a realm's hard limit has been reached. The trap is 'diluted', i.e. it is sent only once for every 'n' occurrences of all such violations.")
funkSbrTrapConcurrencyServerMisconfiguration = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,5025)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarFailedSystemName"))
if mibBuilder.loadTexts: funkSbrTrapConcurrencyServerMisconfiguration.setDescription('This trap will be sent when a PAS realm has been misconfigured All authentication requests to the named realm will be rejected.')
funkSbrTrapACCTWriteFailure = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,5026)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarNumberOfOccurrences"), ("FNKSBRTR-MIB", "funkSbrTrapVarPersistStoreName"), ("FNKSBRTR-MIB", "funkSbrTrapVarDiagnosticMessage"))
if mibBuilder.loadTexts: funkSbrTrapACCTWriteFailure.setDescription("This trap will be sent when the server is unable to commit accounting data to a persistent store such as the file system, database, etc. The trap is 'diluted', i.e. it is sent only once for every 'n' occurrences of all such failures.")
funkSbrTrapIPAddrPoolLow = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,5027)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarIPAddrPoolName"), ("FNKSBRTR-MIB", "funkSbrTrapVarIPAddrAvail"))
if mibBuilder.loadTexts: funkSbrTrapIPAddrPoolLow.setDescription('This trap will be sent when the number of available IP addresses in any pool falls below a configurable threshold. An informational trap is sent when the number of available IP addresses (at some future point) rises to an acceptable level.')
funkSbrTrapStartServiceError = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10000)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarServiceDispatcherErrCode"))
if mibBuilder.loadTexts: funkSbrTrapStartServiceError.setDescription('This trap will be sent for an NT version of RADIUS when the service control dispatcher returns an error.')
funkSbrTrapSetStatusError = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10001)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarSetStatusErrCode"))
if mibBuilder.loadTexts: funkSbrTrapSetStatusError.setDescription('This trap will be sent for an NT version of RADIUS when the attempt to inform the service control dispatcher of the status of the RADIUS server encounters an error.')
funkSbrTrapBadPrivDir = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10002)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarPrivateDir"))
if mibBuilder.loadTexts: funkSbrTrapBadPrivDir.setDescription('This trap will be sent for an NT version of RADIUS when the attempt to inform the service control dispatcher of the status of the RADIUS server encounters an error.')
funkSbrTrapFailedThreadCreate = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10003)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"))
if mibBuilder.loadTexts: funkSbrTrapFailedThreadCreate.setDescription('This trap will be sent when an attempt to create a thread at server startup encounters a failure. The server will fail to start.')
funkSbrTrapFailedMutexCreate = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10004)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"))
if mibBuilder.loadTexts: funkSbrTrapFailedMutexCreate.setDescription('This trap will be sent when an attempt to create a mutex at server startup encounters a failure. The server will fail to start.')
funkSbrTrapFailedSignalInit = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10005)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"))
if mibBuilder.loadTexts: funkSbrTrapFailedSignalInit.setDescription('This trap will be sent when an attempt to initialize signal handling at server startup encounters a failure. The server will fail to start.')
funkSbrTrapFailedEventInit = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10006)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"))
if mibBuilder.loadTexts: funkSbrTrapFailedEventInit.setDescription('This trap will be sent when an attempt to initialize event processing at server startup encounters a failure. The server will fail to start.')
funkSbrTrapFailedLogFile = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10007)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"))
if mibBuilder.loadTexts: funkSbrTrapFailedLogFile.setDescription('This trap will be sent when an attempt to open or create a log file at server startup encounters a failure. The server will fail to start.')
funkSbrTrapFailedLDAPAdminInit = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10008)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"))
if mibBuilder.loadTexts: funkSbrTrapFailedLDAPAdminInit.setDescription('This trap will be sent when an attempt to initialize the LDAP administration interface at server startup encounters a failure. The server will fail to start.')
funkSbrTrapFailedRPCInit = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10009)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"))
if mibBuilder.loadTexts: funkSbrTrapFailedRPCInit.setDescription('This trap will be sent when an attempt to initialize the RPC administration interface at server startup encounters a failure. The server will fail to start.')
funkSbrTrapFailedIPInit = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10010)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"))
if mibBuilder.loadTexts: funkSbrTrapFailedIPInit.setDescription('This trap will be sent when an attempt to initialize basic TCP/IP services at server startup encounters a failure. The server will fail to start.')
funkSbrTrapFailedCurrentSessionsInit = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10011)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"))
if mibBuilder.loadTexts: funkSbrTrapFailedCurrentSessionsInit.setDescription('This trap will be sent when an attempt to initialize current sessions list processing at server startup encounters a failure. The server will fail to start.')
funkSbrTrapFailedChallCacheInit = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10012)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"))
if mibBuilder.loadTexts: funkSbrTrapFailedChallCacheInit.setDescription('This trap will be sent when an attempt to initialize the RADIUS challenge continuation cache at server startup encounters a failure. The server will fail to start.')
funkSbrTrapFailedActiveRASInit = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10013)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"))
if mibBuilder.loadTexts: funkSbrTrapFailedActiveRASInit.setDescription('This trap will be sent when an attempt to initialize the RAS activity monitor at server startup encounters a failure. The server will fail to start.')
funkSbrTrapFailedDictionaryInit = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10014)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"))
if mibBuilder.loadTexts: funkSbrTrapFailedDictionaryInit.setDescription('This trap will be sent when an attempt to initialize the dictionary processing at server startup encounters a failure. The server will fail to start.')
funkSbrTrapFailedVendorInit = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10015)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"))
if mibBuilder.loadTexts: funkSbrTrapFailedVendorInit.setDescription('This trap will be sent when an attempt to process the vendor.ini file at server startup encounters a failure. The server will fail to start.')
funkSbrTrapFailedDBInit = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10016)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarDbType"))
if mibBuilder.loadTexts: funkSbrTrapFailedDBInit.setDescription('This trap will be sent when an attempt to initialize the internal database at server startup encounters a failure. The server will fail to start.')
funkSbrTrapFailedUnixUserInit = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10017)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"))
if mibBuilder.loadTexts: funkSbrTrapFailedUnixUserInit.setDescription('This trap will be sent when an attempt to initialize the Unix user browsing component at server startup encounters a failure. The server will fail to start.')
funkSbrTrapFailedAdminRightsInit = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10018)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"))
if mibBuilder.loadTexts: funkSbrTrapFailedAdminRightsInit.setDescription('This trap will be sent when an attempt to initialize the administration user rights component at server startup encounters a failure. The server will fail to start.')
funkSbrTrapFailedDbOpen = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10019)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarDbType"))
if mibBuilder.loadTexts: funkSbrTrapFailedDbOpen.setDescription('This trap will be sent when an attempt to open the internal database at server startup encounters a failure. The server will fail to start.')
funkSbrTrapFailedDNISLookupInit = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10020)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"))
if mibBuilder.loadTexts: funkSbrTrapFailedDNISLookupInit.setDescription('This trap will be sent when an attempt to initialize the tunnel DNIS lookup component at server startup encounters a failure. The server will fail to start.')
funkSbrTrapFailedConfigCacheInit = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10021)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"))
if mibBuilder.loadTexts: funkSbrTrapFailedConfigCacheInit.setDescription('This trap will be sent when an attempt to initialize the configuration caching component at server startup encounters a failure. The server will fail to start.')
funkSbrTrapFailedDbCacheInit = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10022)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"))
if mibBuilder.loadTexts: funkSbrTrapFailedDbCacheInit.setDescription('This trap will be sent when an attempt to initialize the database caching component at server startup encounters a failure. The server will fail to start.')
funkSbrTrapFailedLicenseInit = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10023)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"))
if mibBuilder.loadTexts: funkSbrTrapFailedLicenseInit.setDescription('This trap will be sent when an attempt to initialize the licensing component at server startup encounters a failure. The server will fail to start.')
funkSbrTrapFailedNDSTrusteeInit = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10024)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"))
if mibBuilder.loadTexts: funkSbrTrapFailedNDSTrusteeInit.setDescription('This trap will be sent when an attempt to initialize NDS trustee processing on NetWare at server startup encounters a failure. The server will fail to start.')
funkSbrTrapFailedHostLookupInit = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10025)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"))
if mibBuilder.loadTexts: funkSbrTrapFailedHostLookupInit.setDescription('This trap will be sent when an attempt to initialize host lookup processing on NetWare at server startup encounters a failure. The server will fail to start.')
funkSbrTrapFailedAddrPoolInit = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10026)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"))
if mibBuilder.loadTexts: funkSbrTrapFailedAddrPoolInit.setDescription('This trap will be sent when an attempt to initialize IP/IPX address pool resource management at server startup encounters a failure. The server will fail to start.')
funkSbrTrapFailedLoginLimitInit = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10027)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"))
if mibBuilder.loadTexts: funkSbrTrapFailedLoginLimitInit.setDescription('This trap will be sent when an attempt to initialize user login count tracking at server startup encounters a failure. The server will fail to start.')
funkSbrTrapFailedPersistStoreCreate = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10028)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"))
if mibBuilder.loadTexts: funkSbrTrapFailedPersistStoreCreate.setDescription('This trap will be sent when an attempt to create the persistent store for current session list processing at server startup encounters a failure. The server will fail to start.')
funkSbrTrapFailedPersistStoreInit = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10029)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"))
if mibBuilder.loadTexts: funkSbrTrapFailedPersistStoreInit.setDescription('This trap will be sent when an attempt to initialize the persistent store for current session list processing at server startup encounters a failure. The server will fail to start.')
funkSbrTrapFailedPerfMonInit = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10030)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"))
if mibBuilder.loadTexts: funkSbrTrapFailedPerfMonInit.setDescription('This trap will be sent for an NT version of RADIUS when an attempt to initialize the Windows NT performance monitor interface at server startup encounters a failure. The server will fail to start.')
funkSbrTrapFailedLockInit = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10031)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"))
if mibBuilder.loadTexts: funkSbrTrapFailedLockInit.setDescription('This trap will be sent when an attempt to initialize admin locking component at server startup encounters a failure. The server will fail to start.')
funkSbrTrapFailedPlugInInit = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10032)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"))
if mibBuilder.loadTexts: funkSbrTrapFailedPlugInInit.setDescription('This trap will be sent when an attempt to initialize the plug-in support component at server startup encounters a failure. The server will fail to start.')
funkSbrTrapFailedPacketCacheInit = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10033)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"))
if mibBuilder.loadTexts: funkSbrTrapFailedPacketCacheInit.setDescription('This trap will be sent when an attempt to initialize duplicate packet request cache at server startup encounters a failure. The server will fail to start.')
funkSbrTrapFailedNameMangleInit = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10034)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"))
if mibBuilder.loadTexts: funkSbrTrapFailedNameMangleInit.setDescription('This trap will be sent when an attempt to initialize name mangling support at server startup encounters a failure. The server will fail to start.')
funkSbrTrapFailedNameStripInit = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10035)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"))
if mibBuilder.loadTexts: funkSbrTrapFailedNameStripInit.setDescription('This trap will be sent when an attempt to initialize name stripping support at server startup encounters a failure. The server will fail to start.')
funkSbrTrapFailedFSSpaceChecking = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10036)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarGetDiskFreeSpaceErrCode"))
if mibBuilder.loadTexts: funkSbrTrapFailedFSSpaceChecking.setDescription('This trap will be sent when an attempt to determine the amount of free file system space fails. File system space checking will be disabled until the server is restarted.')
funkSbrTrapFailedNameValidateInit = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10037)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"))
if mibBuilder.loadTexts: funkSbrTrapFailedNameValidateInit.setDescription('This trap will be sent when an attempt to initialize name validation support at server startup encounters a failure. The server will fail to start.')
funkSbrTrapFailedResourceCheckInit = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10038)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"))
if mibBuilder.loadTexts: funkSbrTrapFailedResourceCheckInit.setDescription('This trap will be sent when an attempt to initialize system resource checking at server startup encounters a failure. The server will fail to start.')
funkSbrTrapFailedSystemStatsInit = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10039)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"))
if mibBuilder.loadTexts: funkSbrTrapFailedSystemStatsInit.setDescription('This trap will be sent when an attempt to initialize statistic collection at server startup encounters a failure. The server will fail to start.')
funkSbrTrapSQLConnectFailure = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10040)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarFailedSystemName"))
if mibBuilder.loadTexts: funkSbrTrapSQLConnectFailure.setDescription('This trap will be sent when a connection attempt from the SQL authentication or accounting plug-in to the specified system has failed.')
funkSbrTrapSQLDiscon = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10041)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarFailedSystemName"))
if mibBuilder.loadTexts: funkSbrTrapSQLDiscon.setDescription('This trap will be sent when a disconnect from a SQL database has occurred.')
funkSbrTrapFailedReserveMemoryAlloc = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10043)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarIniString"))
if mibBuilder.loadTexts: funkSbrTrapFailedReserveMemoryAlloc.setDescription('This trap will be sent when an attempt to allocate reserved memory based on a setting in the radius.ini file fails. The server will start without reserved memory, but will be unable to warn of low memory conditions.')
funkSbrTrapReserveMemoryFreed = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10044)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarIniString"))
if mibBuilder.loadTexts: funkSbrTrapReserveMemoryFreed.setDescription('This trap will be sent when an attempt to allocate memory during runtime fails and the block of memory reserved at system startup is freed in an attempt to alleviate the low memory condition.')
funkSbrTrapMemoryAllocFail = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10045)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"), ("FNKSBRTR-MIB", "funkSbrTrapVarNumberOfOccurrences"))
if mibBuilder.loadTexts: funkSbrTrapMemoryAllocFail.setDescription("This trap will be sent when an attempt to allocate memory has failed. The trap is 'diluted', i.e. it is sent only once for every 'n' occurrences of the failure.")
funkSbrTrapFailedMibInfoCollectInit = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10048)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"))
if mibBuilder.loadTexts: funkSbrTrapFailedMibInfoCollectInit.setDescription('This trap will be sent when an attempt to initialize MIB information collection at server startup encounters a failure. The server will fail to start.')
funkSbrTrapFailedMibInfoAccessInit = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10049)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"))
if mibBuilder.loadTexts: funkSbrTrapFailedMibInfoAccessInit.setDescription('This trap will be sent when an attempt to initialize MIB access at server startup encounters a failure. The server will fail to start.')
funkSbrTrapFailedCommonIPInit = NotificationType((1, 3, 6, 1, 4, 1, 1411, 1, 1) + (0,10050)).setObjects(("FNKSBRTR-MIB", "funkSbrTrapVarComp"), ("FNKSBRTR-MIB", "funkSbrTrapVarSev"))
if mibBuilder.loadTexts: funkSbrTrapFailedCommonIPInit.setDescription('This trap will be sent when an attempt to initialize common IP services at server startup encounters a failure. The server will fail to start.')
mibBuilder.exportSymbols("FNKSBRTR-MIB", funkSbrTrapFailedLogFile=funkSbrTrapFailedLogFile, funkSbrTrapConcurrencyFailure=funkSbrTrapConcurrencyFailure, funkSbrTrapACCTWriteFailure=funkSbrTrapACCTWriteFailure, funkSbrTrapFailedUnixUserInit=funkSbrTrapFailedUnixUserInit, funkSbrTrapVarSQLDisconnects=funkSbrTrapVarSQLDisconnects, funkSbrTrapStaticAcctProxyTimeout=funkSbrTrapStaticAcctProxyTimeout, funkSbrTrapStaticAcctProxyLocalFailure=funkSbrTrapStaticAcctProxyLocalFailure, funkSbrTrapVarIPAddrAvail=funkSbrTrapVarIPAddrAvail, funkSbrTrapSQLDiscon=funkSbrTrapSQLDiscon, funkSbrTrapAcctDbTimeout=funkSbrTrapAcctDbTimeout, funkSbrTrapFailedActiveRASInit=funkSbrTrapFailedActiveRASInit, funkSbrTrapFailedCommonIPInit=funkSbrTrapFailedCommonIPInit, funkSbrTrapSQLTimeout=funkSbrTrapSQLTimeout, funkSbrTrapHardLimitViolation=funkSbrTrapHardLimitViolation, funkSbrTrapVarGetDiskFreeSpaceErrCode=funkSbrTrapVarGetDiskFreeSpaceErrCode, funkSbrTrapFailedPersistStoreInit=funkSbrTrapFailedPersistStoreInit, funkSbrTrapVarThreadsAvail=funkSbrTrapVarThreadsAvail, funkSbrTrapLDAPRequestTimeouts=funkSbrTrapLDAPRequestTimeouts, funkSbrTrapFailedPerfMonInit=funkSbrTrapFailedPerfMonInit, funkSbrTrapLDAPConnectFailures=funkSbrTrapLDAPConnectFailures, funkSbrTrapVarFailedSystemName=funkSbrTrapVarFailedSystemName, funkSbrTrapFailedSystemStatsInit=funkSbrTrapFailedSystemStatsInit, funkSbrTrapServiceStarted=funkSbrTrapServiceStarted, funkSbrTrapBadPrivDir=funkSbrTrapBadPrivDir, funkSbrTrapLDAPConnectFailure=funkSbrTrapLDAPConnectFailure, funkSbrTrapThreadsNormal=funkSbrTrapThreadsNormal, funkSbrTrapFailedHostLookupInit=funkSbrTrapFailedHostLookupInit, funkSbrTrapFailedResourceCheckInit=funkSbrTrapFailedResourceCheckInit, funkSbrTrapFailedReserveMemoryAlloc=funkSbrTrapFailedReserveMemoryAlloc, funkSbrTrapConcurrencyReconnect=funkSbrTrapConcurrencyReconnect, funkSbrTrapFailedLoginLimitInit=funkSbrTrapFailedLoginLimitInit, funkSbrTrapAcctDbFailure=funkSbrTrapAcctDbFailure, funkSbrTrapFailedVendorInit=funkSbrTrapFailedVendorInit, funkSbrTrapFailedThreadCreate=funkSbrTrapFailedThreadCreate, funkSbrTrapFailedLockInit=funkSbrTrapFailedLockInit, funkSbrTrapVarPrivateDir=funkSbrTrapVarPrivateDir, funkSbrTrapMemoryAllocFail=funkSbrTrapMemoryAllocFail, funkSbrTrapConcurrencyTimeout=funkSbrTrapConcurrencyTimeout, funkSbrTrapFailedEventInit=funkSbrTrapFailedEventInit, funkSbrTrapServiceStopped=funkSbrTrapServiceStopped, funkSbrTrapProxySpoolTimeout=funkSbrTrapProxySpoolTimeout, funkSbrTrapIPAddrPoolNormal=funkSbrTrapIPAddrPoolNormal, funkSbrTrapFailedSignalInit=funkSbrTrapFailedSignalInit, funkSbrTrapUserAccountLocked=funkSbrTrapUserAccountLocked, funkSbrTrapConcurrencyLocalProxyFailure=funkSbrTrapConcurrencyLocalProxyFailure, funkSbrTrapSQLConnectFailure=funkSbrTrapSQLConnectFailure, funkSbrTrapVarDiagnosticMessage=funkSbrTrapVarDiagnosticMessage, funkSbrTrapLowThreads=funkSbrTrapLowThreads, funkSbrTrapProxySpoolReconnect=funkSbrTrapProxySpoolReconnect, funkSbrTrapVarComp=funkSbrTrapVarComp, funkSbrTrapFailedRPCInit=funkSbrTrapFailedRPCInit, funkSbrTrapFailedMibInfoCollectInit=funkSbrTrapFailedMibInfoCollectInit, funkSbrTrapUserAccountReleased=funkSbrTrapUserAccountReleased, funk=funk, funkSbrTrapStartServiceError=funkSbrTrapStartServiceError, funkSbrTrapFailedIPInit=funkSbrTrapFailedIPInit, funkSbrTrapFailedDBInit=funkSbrTrapFailedDBInit, funkSbrTrapFSNormal=funkSbrTrapFSNormal, funkSbrTrapVarIPAddrPoolName=funkSbrTrapVarIPAddrPoolName, funkSbrTrapVarServiceDispatcherErrCode=funkSbrTrapVarServiceDispatcherErrCode, funkSbrTrapVarSetStatusErrCode=funkSbrTrapVarSetStatusErrCode, funkSbrTrapLowFSSpace=funkSbrTrapLowFSSpace, funkSbrTrapSQLDisconnect=funkSbrTrapSQLDisconnect, funkSbr=funkSbr, funkSbrTrapVarUserName=funkSbrTrapVarUserName, funkSbrTrapVarPersistStoreName=funkSbrTrapVarPersistStoreName, funkSbrTrapCmdArgBadPrivDir=funkSbrTrapCmdArgBadPrivDir, funkSbrTrapFailedNDSTrusteeInit=funkSbrTrapFailedNDSTrusteeInit, funkSbrTrapLDAPDisconnect=funkSbrTrapLDAPDisconnect, funkSbrTrapVerifyServerTimeout=funkSbrTrapVerifyServerTimeout, funkSbrTrapSoftLimitViolation=funkSbrTrapSoftLimitViolation, funkSbrTrapFailedLDAPAdminInit=funkSbrTrapFailedLDAPAdminInit, funkSbrTrapVarSQLTimeouts=funkSbrTrapVarSQLTimeouts, funkSbrTrapSetStatusError=funkSbrTrapSetStatusError, funkSbrTrapFailedPersistStoreCreate=funkSbrTrapFailedPersistStoreCreate, funkSbrTrapFailedDbCacheInit=funkSbrTrapFailedDbCacheInit, funkSbrTrapFailedPacketCacheInit=funkSbrTrapFailedPacketCacheInit, funkSbrTrapLDAPRequestTimeout=funkSbrTrapLDAPRequestTimeout, funkSbrTrapFailedChallCacheInit=funkSbrTrapFailedChallCacheInit, funkSbrTrapFailedNameMangleInit=funkSbrTrapFailedNameMangleInit, funkSbrTrapFailedDictionaryInit=funkSbrTrapFailedDictionaryInit, funkSbrTrapFailedDbOpen=funkSbrTrapFailedDbOpen, funkSbrTrapVarSQLConnects=funkSbrTrapVarSQLConnects, funkSbrTrapVarNumberOfOccurrences=funkSbrTrapVarNumberOfOccurrences, funkSbrTrapVarIniString=funkSbrTrapVarIniString, funkSbrTrapVarSev=funkSbrTrapVarSev, funkSbrTrapFailedAdminRightsInit=funkSbrTrapFailedAdminRightsInit, funkSbrTrapFailedMibInfoAccessInit=funkSbrTrapFailedMibInfoAccessInit, funkSbrTrapFailedNameStripInit=funkSbrTrapFailedNameStripInit, funkSbrTrapSQLConnectFail=funkSbrTrapSQLConnectFail, funkSbrTrapFailedPlugInInit=funkSbrTrapFailedPlugInInit, funkSbrTrapReserveMemoryFreed=funkSbrTrapReserveMemoryFreed, funkSbrTrapFailedDNISLookupInit=funkSbrTrapFailedDNISLookupInit, funkSbrTrapFailedCurrentSessionsInit=funkSbrTrapFailedCurrentSessionsInit, funkSbrTrapFailedLicenseInit=funkSbrTrapFailedLicenseInit, funkSbrTrapVerifyServerFail=funkSbrTrapVerifyServerFail, funkSbrTraps=funkSbrTraps, funkSbrTrapProxySpoolTimeouts=funkSbrTrapProxySpoolTimeouts, funkSbrTrapIPAddrPoolLow=funkSbrTrapIPAddrPoolLow, funkSbrTrapFailedNameValidateInit=funkSbrTrapFailedNameValidateInit, funkSbrTrapVarSWName=funkSbrTrapVarSWName, funkSbrTrapVarDbType=funkSbrTrapVarDbType, funkSbrTrapFailedAddrPoolInit=funkSbrTrapFailedAddrPoolInit, funkSbrTrapLDAPReconnect=funkSbrTrapLDAPReconnect, funkSbrTrapFailedMutexCreate=funkSbrTrapFailedMutexCreate, funkSbrTrapSQLReconnect=funkSbrTrapSQLReconnect, funkSbrTrapFailedConfigCacheInit=funkSbrTrapFailedConfigCacheInit, funkSbrTrapFailedFSSpaceChecking=funkSbrTrapFailedFSSpaceChecking, funkSbrTrapVars=funkSbrTrapVars, funkSbrTrapVarBytesAvail=funkSbrTrapVarBytesAvail, funkSbrTrapLDAPDisconnects=funkSbrTrapLDAPDisconnects, funkSbrTrapConcurrencyServerMisconfiguration=funkSbrTrapConcurrencyServerMisconfiguration)
