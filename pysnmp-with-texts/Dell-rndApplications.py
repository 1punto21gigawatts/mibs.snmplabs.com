#
# PySNMP MIB module Dell-rndApplications (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Dell-rndApplications
# Produced by pysmi-0.3.4 at Wed May  1 12:57:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
rnd, = mibBuilder.importSymbols("Dell-MIB", "rnd")
InterfaceIndex, ifIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex", "InterfaceIndexOrZero")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Counter32, Counter64, Unsigned32, ModuleIdentity, TimeTicks, Gauge32, Bits, IpAddress, Integer32, ObjectIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter32", "Counter64", "Unsigned32", "ModuleIdentity", "TimeTicks", "Gauge32", "Bits", "IpAddress", "Integer32", "ObjectIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier")
RowStatus, TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "TextualConvention", "DisplayString")
rndApplications = ModuleIdentity((1, 3, 6, 1, 4, 1, 89, 35))
rndApplications.setRevisions(('2004-06-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rndApplications.setRevisionsDescriptions(('Initial version of this MIB.',))
if mibBuilder.loadTexts: rndApplications.setLastUpdated('200406010000Z')
if mibBuilder.loadTexts: rndApplications.setOrganization('Dell')
if mibBuilder.loadTexts: rndApplications.setContactInfo('www.dell.com')
if mibBuilder.loadTexts: rndApplications.setDescription('The private MIB module definition for RND applications MIB.')
rndMidLevelManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 35, 2))
rndAlarmOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 35, 2, 2))
rndAlarmEnabling = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndAlarmEnabling.setStatus('current')
if mibBuilder.loadTexts: rndAlarmEnabling.setDescription('Indicates whether alarms should be issued to the high-level NMS ')
rndAlarmInterval = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 2, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndAlarmInterval.setStatus('current')
if mibBuilder.loadTexts: rndAlarmInterval.setDescription('Indicates the minimal period of time which must pass after issuing an alarm before issuing the same alarm again.')
rndMonitoredElementsTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 2, 3), )
if mibBuilder.loadTexts: rndMonitoredElementsTable.setStatus('current')
if mibBuilder.loadTexts: rndMonitoredElementsTable.setDescription('The table of monitored elements of the network')
rndMonitoredElementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 2, 3, 1), ).setIndexNames((0, "Dell-rndApplications", "rndMonitoredElementAddress"))
if mibBuilder.loadTexts: rndMonitoredElementEntry.setStatus('current')
if mibBuilder.loadTexts: rndMonitoredElementEntry.setDescription(' The row definition for this table.')
rndMonitoredElementAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndMonitoredElementAddress.setStatus('current')
if mibBuilder.loadTexts: rndMonitoredElementAddress.setDescription('The IP address of the monitored element')
rndMonitoredElementCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndMonitoredElementCommunity.setStatus('current')
if mibBuilder.loadTexts: rndMonitoredElementCommunity.setDescription('The community of the monitored element')
rndMonitoredElementLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndMonitoredElementLabel.setStatus('current')
if mibBuilder.loadTexts: rndMonitoredElementLabel.setDescription('The label assigned by the network manager to the monitored element')
rndDefaultPollingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndDefaultPollingInterval.setStatus('current')
if mibBuilder.loadTexts: rndDefaultPollingInterval.setDescription('The default period of time between two consecutive pollings of the monitored element for the value of an object instance. If no other polling interval is specifically assigned to the monitored object instance, this one will be used')
rndDefaultLogFile = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 3, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndDefaultLogFile.setStatus('current')
if mibBuilder.loadTexts: rndDefaultLogFile.setDescription('The default file path of the log-file which will contain the polling results for the monitored element. If no other file path is specifically assigned to the monitored object instance, this log-file will be used.')
rndMonitoredElementStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 3, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndMonitoredElementStatus.setStatus('current')
if mibBuilder.loadTexts: rndMonitoredElementStatus.setDescription('It is used to manage the monitored elements table and indicates the current monitoring status of an element.')
rndMonitoringTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 2, 4), )
if mibBuilder.loadTexts: rndMonitoringTable.setStatus('current')
if mibBuilder.loadTexts: rndMonitoringTable.setDescription('The table of monitored object instances. Each monitored object instance belongs to a monitored element previously entered in the rndMonitoredElementsTable. ')
rndMonitoringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 2, 4, 1), ).setIndexNames((0, "Dell-rndApplications", "rndMonitoredElement"), (1, "Dell-rndApplications", "rndMonitoredObjectInstanceLabel"))
if mibBuilder.loadTexts: rndMonitoringEntry.setStatus('current')
if mibBuilder.loadTexts: rndMonitoringEntry.setDescription(' The row definition for this table.')
rndMonitoredElement = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndMonitoredElement.setStatus('current')
if mibBuilder.loadTexts: rndMonitoredElement.setDescription('A label assigned by the network manager to a monitored element to which this monitored object instance belongs. This label must have been previously entered in an instance of rndMonitoredElementLabel')
rndMonitoredObjectInstanceLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndMonitoredObjectInstanceLabel.setStatus('current')
if mibBuilder.loadTexts: rndMonitoredObjectInstanceLabel.setDescription('The label assigned by the network manager to the monitored object instance')
rndMonitoredObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndMonitoredObjectName.setStatus('current')
if mibBuilder.loadTexts: rndMonitoredObjectName.setDescription('The symbolic object type name of the object to which the monitored object instance belongs (as it appears the MIB module definition). In case of ambiguity the <MIB module name> : <object type name> format should be used. An instance of rndMonitoredObjectName need not be assigned any value, if the corresponding instance of rndMonitoredObjectIdentifier is assigned a value, since any one of these, together with the object instance identifier, suffices to unambigously identify the monitored object instance.')
rndMonitoredObjectIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 4, 1, 4), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndMonitoredObjectIdentifier.setStatus('current')
if mibBuilder.loadTexts: rndMonitoredObjectIdentifier.setDescription('The object identifier of the object to which the monitored object instance belongs. An instance of rndMonitoredObjectIdentifier need not be assigned any value, if the corresponding instance of rndMonitoredObjectName is assigned a value, since any one of these, together with the object instance identifier, suffices to unambigously identify the monitored object instance.')
rndMonitoredObjectInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 4, 1, 5), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndMonitoredObjectInstance.setStatus('current')
if mibBuilder.loadTexts: rndMonitoredObjectInstance.setDescription('The instance identifier (key) of the monitored object instance.')
rndMonitoredObjectSyntax = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("integer", 1), ("octet-string", 2), ("ip-address", 3), ("object-identifier", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndMonitoredObjectSyntax.setStatus('current')
if mibBuilder.loadTexts: rndMonitoredObjectSyntax.setDescription('The syntax of the monitored object instance (i.e., the syntax of the object type of the object to which the monitored instance belongs). Need not be assigned any value if the corresponding instance of rndMonitoredObjectName has been assigned a value')
rndMonitoringInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndMonitoringInterval.setStatus('current')
if mibBuilder.loadTexts: rndMonitoringInterval.setDescription("The period of time between two consecutive retrievals of the monitored object instance's value.")
rndAlarmMaxTreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndAlarmMaxTreshold.setStatus('current')
if mibBuilder.loadTexts: rndAlarmMaxTreshold.setDescription('The value of the monitored object instance, the exceeding of which will cause the generation of an alarm to the high-level management station.')
rndAlarmMinTreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 4, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndAlarmMinTreshold.setStatus('current')
if mibBuilder.loadTexts: rndAlarmMinTreshold.setDescription('If the value of the monitored object instance falls below the value assigned to rndAlarmMinTreshold, an alarm to the high-level management station will be issued.')
rndMonitoringLogfile = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 4, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndMonitoringLogfile.setStatus('current')
if mibBuilder.loadTexts: rndMonitoringLogfile.setDescription('The entire path of the file in which the results of the monitoring of this object instance should be recorded.')
rndMonitoringEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 4, 1, 11), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndMonitoringEntryStatus.setStatus('current')
if mibBuilder.loadTexts: rndMonitoringEntryStatus.setDescription('It is used to manage the monitored object instances table and indicates the current monitoring status of an object instance.')
rndMonitoredIntegerInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 4, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndMonitoredIntegerInstance.setStatus('current')
if mibBuilder.loadTexts: rndMonitoredIntegerInstance.setDescription('')
rndMibFilesTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 2, 5), )
if mibBuilder.loadTexts: rndMibFilesTable.setStatus('current')
if mibBuilder.loadTexts: rndMibFilesTable.setDescription('The table of monitored object instances. Each monitored object instance belongs to a monitored element previously entered in the rndMonitoredElementsTable. ')
rndMibFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 2, 5, 1), ).setIndexNames((0, "Dell-rndApplications", "rndMibFileIndex"))
if mibBuilder.loadTexts: rndMibFileEntry.setStatus('current')
if mibBuilder.loadTexts: rndMibFileEntry.setDescription(' The row definition for this table.')
rndMibFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndMibFileIndex.setStatus('current')
if mibBuilder.loadTexts: rndMibFileIndex.setDescription('The number of the MIB file in the list MIB files supported by the Mid-Level management station. The order of the MIB files in this list must reflect the the IMPORT relation between the MIBS contained in the MIB files, i.e., if MIB A IMPORTS FROM MIB B, the file containing MIB A must have a lesser index in this table than the file containing MIB B.')
rndMibFilePath = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndMibFilePath.setStatus('current')
if mibBuilder.loadTexts: rndMibFilePath.setDescription('The path of the MIB file in the MIB file server.')
rndMibFileRefresh = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndMibFileRefresh.setStatus('current')
if mibBuilder.loadTexts: rndMibFileRefresh.setDescription('Indicates if the file should be fetched after setting this entry from the MIB file server.')
rndMibFileEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 5, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndMibFileEntryStatus.setStatus('current')
if mibBuilder.loadTexts: rndMibFileEntryStatus.setDescription('It is used to manage the MIB files table.')
rndHardwareConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 2, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndHardwareConfiguration.setStatus('current')
if mibBuilder.loadTexts: rndHardwareConfiguration.setDescription('Indicates whether the current SET SNMP PDU contains hardware configuration (i.e., normally read-only variables). SET of such variables in the Mid-level management station will be allowed only if this variable is included in the SNMP PDU and its value is true. Its value as returned in a GET SNMP PDU will always be false.')
rndEraseSimulatedConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("eraseSimulatedConfiguration", 1), ("simulatedConfigurationPresent", 2), ("simulatedConfigurationErased", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndEraseSimulatedConfiguration.setStatus('current')
if mibBuilder.loadTexts: rndEraseSimulatedConfiguration.setDescription('eraseSimulatedConfiguration instructs the MLNMS to erase all the simulated configuration from its configuration data-base (CDB). This the only accepted value for SNMP SET statements and will never be returned in SNMP GET statements. simulatedConfigurationPresent indicates that the MLNMS currently has a simulated configuration. simulatedConfigurationErased indicates that the MLNMS currently has no simulated configuration.')
rndDeleteValuesTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 2, 8), )
if mibBuilder.loadTexts: rndDeleteValuesTable.setStatus('current')
if mibBuilder.loadTexts: rndDeleteValuesTable.setDescription('This table indicates which MIB variables are row status fields which control the status of the entry to which they belong. This table also indicates which (integer!) value of these MIB variables will cause, if present in a SNMP SET PDU, the deletion of the conceptual row instance to which the SET MIB variable instance belongs.')
rndDeleteValuesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 2, 8, 1), ).setIndexNames((1, "Dell-rndApplications", "rndRowStatusVariableName"))
if mibBuilder.loadTexts: rndDeleteValuesEntry.setStatus('current')
if mibBuilder.loadTexts: rndDeleteValuesEntry.setDescription(' The row definition for the rndDeleteValuesTable table.')
rndRowStatusVariableName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 8, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndRowStatusVariableName.setStatus('current')
if mibBuilder.loadTexts: rndRowStatusVariableName.setDescription('The name of the row status field. This name may not necessarily be any name which is present in the MIBs loaded into the MLNMS station.')
rndRowStatusObjectId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 8, 1, 2), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndRowStatusObjectId.setStatus('current')
if mibBuilder.loadTexts: rndRowStatusObjectId.setDescription('The object id of the row status field. If the rndRowStatusVariableName is a name present in the MIBs loaded into the MLNMS, this MIB variable is not required, but if given, it must match the object id known to the MLNMS. The variable identified by rndRowStatusVariableName and/or rndRowStatusObjectId must be a read-write MIB variable of type INTEGER which belongs to an entry (i.e, is a child of a MIB variable of type SEQUENCE).')
rndRowDeleteValue = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 8, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndRowDeleteValue.setStatus('current')
if mibBuilder.loadTexts: rndRowDeleteValue.setDescription('The value of the variable identified by rndRowStatusVariableName and/or rndRowStatusObjectId, which, if present in a SNMP SET PDU, will cause the deletion of the conceptual row instance which the SET MIB variable instance belongs.')
rndDeleteValueEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 8, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndDeleteValueEntryStatus.setStatus('current')
if mibBuilder.loadTexts: rndDeleteValueEntryStatus.setDescription('It is used to delete an entry from this table.')
snmpTesting = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 35, 2, 9))
rndSimulatedVariablesTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 2, 9, 1), )
if mibBuilder.loadTexts: rndSimulatedVariablesTable.setStatus('current')
if mibBuilder.loadTexts: rndSimulatedVariablesTable.setDescription('This table indicates which MIB variables are simulated.')
rndSimulatedVariablesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 2, 9, 1, 1), ).setIndexNames((0, "Dell-rndApplications", "rndSimulatedVariableEntryIndex"))
if mibBuilder.loadTexts: rndSimulatedVariablesEntry.setStatus('current')
if mibBuilder.loadTexts: rndSimulatedVariablesEntry.setDescription(' The row definition for the rndSimulatedVariablesTable table.')
rndSimulatedVariableEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndSimulatedVariableEntryIndex.setStatus('current')
if mibBuilder.loadTexts: rndSimulatedVariableEntryIndex.setDescription('The index entry.')
rndSimulatedVariableObjectId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 9, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndSimulatedVariableObjectId.setStatus('current')
if mibBuilder.loadTexts: rndSimulatedVariableObjectId.setDescription('The object id of the simulated variable. If the simulated variable belongs to a table entry, the entire entry is henceforth supported.')
rndNotSupportedField = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rndNotSupportedField.setStatus('current')
if mibBuilder.loadTexts: rndNotSupportedField.setDescription('Variable for not supported simulation.')
rndSimulatedVariableEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 9, 1, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndSimulatedVariableEntryStatus.setStatus('current')
if mibBuilder.loadTexts: rndSimulatedVariableEntryStatus.setDescription('It is used to delete an entry from this table.')
rndSnmpTestPassword = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 2, 9, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndSnmpTestPassword.setStatus('current')
if mibBuilder.loadTexts: rndSnmpTestPassword.setDescription('This variable enables the user supplying the correct code to use the SNMP test feature.')
rndSnmpTests = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 2, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noSimulation", 1), ("simulateSetFailure", 2), ("simulateAppGet", 3), ("simulateAppGetNext", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndSnmpTests.setStatus('current')
if mibBuilder.loadTexts: rndSnmpTests.setDescription('This variable enables the authorized user to test various SNMP features.')
rndSimulateUndo = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 2, 9, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rndSimulateUndo.setStatus('current')
if mibBuilder.loadTexts: rndSimulateUndo.setDescription('This variable enables the authorized user to test the SNMP UNDO feature.')
rlSnmpServTestRequest = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 2, 9, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSnmpServTestRequest.setStatus('current')
if mibBuilder.loadTexts: rlSnmpServTestRequest.setDescription('This variable enables the authorized user to test the SNMP SERV package.')
rlSnmpServTestResponse = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 2, 9, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlSnmpServTestResponse.setStatus('current')
if mibBuilder.loadTexts: rlSnmpServTestResponse.setDescription('This variable enables the authorized user to retrieve the results of a the SNMP SERV package test.')
rlSnmpServCreateTestPool = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 2, 9, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("create", 1), ("no-create", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSnmpServCreateTestPool.setStatus('current')
if mibBuilder.loadTexts: rlSnmpServCreateTestPool.setDescription('This variable enables the authorized user to indicate that after its reset the device should create a buffer pool for SNMPServ process PDU testing.')
rlSnmpServITCbindClients = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 2, 9, 8), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlSnmpServITCbindClients.setStatus('current')
if mibBuilder.loadTexts: rlSnmpServITCbindClients.setDescription('This variable enables the authorized user to to indicate that after its reset the device should create ITC clients for SnmpServ data requests clients. The semantics of this variable is as follows: subidentifier 2*n indicates whether the client n is synchronous(1) or asynchronous(2) subidentifier 2*n+1 indicates the number of simulatneous requests expected by client n.')
rlSnmpTestSimulatedVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 35, 2, 9, 9))
rlTstBasicRateTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 2, 9, 10), )
if mibBuilder.loadTexts: rlTstBasicRateTable.setStatus('current')
if mibBuilder.loadTexts: rlTstBasicRateTable.setDescription('Table for testing SNMP agent.')
rlTstBasicRateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 2, 9, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: rlTstBasicRateEntry.setStatus('current')
if mibBuilder.loadTexts: rlTstBasicRateEntry.setDescription('An entry in the rlTstBasicRateTable.')
rlTstBasicRateIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 9, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(75, 76))).clone(namedValues=NamedValues(("isdns", 75), ("isdnu", 76)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlTstBasicRateIfType.setStatus('current')
if mibBuilder.loadTexts: rlTstBasicRateIfType.setDescription('')
rlTstBasicRateLineTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 9, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pointToPoint", 1), ("pointToMultipoint", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlTstBasicRateLineTopology.setStatus('current')
if mibBuilder.loadTexts: rlTstBasicRateLineTopology.setDescription('')
rlTstBasicRateIfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 9, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("te", 1), ("nt", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlTstBasicRateIfMode.setStatus('current')
if mibBuilder.loadTexts: rlTstBasicRateIfMode.setDescription('')
rlTstBasicRateSignalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 9, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlTstBasicRateSignalMode.setStatus('current')
if mibBuilder.loadTexts: rlTstBasicRateSignalMode.setDescription('')
rlMibTree = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 35, 2, 10))
rlMibTreeTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 2, 10, 1), )
if mibBuilder.loadTexts: rlMibTreeTable.setStatus('current')
if mibBuilder.loadTexts: rlMibTreeTable.setDescription('This reflects the MIB tree of the device.')
rlMibTreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 2, 10, 1, 1), ).setIndexNames((0, "Dell-rndApplications", "rlMibTreeFather"), (0, "Dell-rndApplications", "rlMibTreeSonIndex"))
if mibBuilder.loadTexts: rlMibTreeEntry.setStatus('current')
if mibBuilder.loadTexts: rlMibTreeEntry.setDescription(' Each row shows a tree relationsship in the MIB.')
rlMibTreeFather = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 10, 1, 1, 1), DisplayString())
if mibBuilder.loadTexts: rlMibTreeFather.setStatus('current')
if mibBuilder.loadTexts: rlMibTreeFather.setDescription(' The father in a tree relation ship.')
rlMibTreeSonIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 10, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: rlMibTreeSonIndex.setStatus('current')
if mibBuilder.loadTexts: rlMibTreeSonIndex.setDescription(' Running index for this table.')
rlMibTreeSon = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 10, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlMibTreeSon.setStatus('current')
if mibBuilder.loadTexts: rlMibTreeSon.setDescription(' The son in a tree relation ship.')
rlMibTreeSonObjectId = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 10, 1, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlMibTreeSonObjectId.setStatus('current')
if mibBuilder.loadTexts: rlMibTreeSonObjectId.setDescription(' The object identifier of the son in a tree relation ship.')
rlMibTreeGrandFather = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 10, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlMibTreeGrandFather.setStatus('current')
if mibBuilder.loadTexts: rlMibTreeGrandFather.setDescription(" The grand father (i.e father's father) in a tree relation ship.")
rlMibInstances = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 35, 2, 11))
rlMibTableInstancesInfoTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 2, 11, 1), )
if mibBuilder.loadTexts: rlMibTableInstancesInfoTable.setStatus('current')
if mibBuilder.loadTexts: rlMibTableInstancesInfoTable.setDescription('A table for retreiving information on the current instances in a requested MIB table.')
rlMibTableInstancesInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 2, 11, 1, 1), ).setIndexNames((1, "Dell-rndApplications", "rlMibTableInstancesInfoTableName"))
if mibBuilder.loadTexts: rlMibTableInstancesInfoEntry.setStatus('current')
if mibBuilder.loadTexts: rlMibTableInstancesInfoEntry.setDescription("A row with index rlMibTableInstancesInfoTableName = 'xTable' contains information on current instances in 'xTable'.")
rlMibTableInstancesInfoTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 11, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 160)))
if mibBuilder.loadTexts: rlMibTableInstancesInfoTableName.setStatus('current')
if mibBuilder.loadTexts: rlMibTableInstancesInfoTableName.setDescription('The name of the MIB table (for examle: snmpCommunityTable)')
rlMibTableInstancesInfoNumOfInstances = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 2, 11, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlMibTableInstancesInfoNumOfInstances.setStatus('current')
if mibBuilder.loadTexts: rlMibTableInstancesInfoNumOfInstances.setDescription('Get operation on this object will retreive the current number of instances in the MIB table specified by the index rlMibTableInstancesInfoTableName.')
rsPingMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 35, 4))
class PingCompletionStatus(TextualConvention, Integer32):
    description = 'If all the echo request packets in this sequence have been responded by valid echo responses, this object is set to ok. Otherwise this status indicates the problem. bad-reply-data indicates that the reply data is not equal to the response data.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("ok", 1), ("timeout", 2), ("net-unreachable", 3), ("host-unreachable", 4), ("protocol-unreachable", 5), ("time-to-live-exceeded", 6), ("reassembly-time-exceeded", 7), ("unable-to-send", 8), ("bad-reply-data", 9), ("incomplete", 10))

rsPingTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 4, 1), )
if mibBuilder.loadTexts: rsPingTable.setStatus('current')
if mibBuilder.loadTexts: rsPingTable.setDescription('A table of ping request entries.')
rsPingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 4, 1, 1), ).setIndexNames((0, "Dell-rndApplications", "rsPingAddress"))
if mibBuilder.loadTexts: rsPingEntry.setStatus('current')
if mibBuilder.loadTexts: rsPingEntry.setDescription('A ping request entry. A management station wishing to create an entry should first generate a pseudo-random serial number to be used as the index to this sparse table. It must also create in the same PDU the associated instance of the address object. It should also modify in the same PDU the default values for the other configuration objects if the defaults are not appropriate. Once the sequence completes, the management station should retrieve the values of the status objects of interest, and should then delete the entry. In order to prevent old entries from clogging the table, entries will be aged out, but an entry will never be deleted within 5 minutes of completing.')
rsPingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 4, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsPingAddress.setStatus('current')
if mibBuilder.loadTexts: rsPingAddress.setDescription('The address of the device to be pinged. Once an instance of this object is created, its value can not be changed.')
rsPingPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsPingPacketCount.setStatus('current')
if mibBuilder.loadTexts: rsPingPacketCount.setDescription('Specifies the number of ping packets to send to the target in this sequence.')
rsPingPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 4, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsPingPacketSize.setStatus('current')
if mibBuilder.loadTexts: rsPingPacketSize.setDescription('Specifies the size of ping packets to send to the target in this sequence. The lower and upper boundaries of this object are implementation dependent.')
rsPingPacketTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsPingPacketTimeout.setStatus('current')
if mibBuilder.loadTexts: rsPingPacketTimeout.setDescription("Specifies the amount of time to wait for a response to a transmitted packet before declaring the packet 'dropped.'")
rsPingDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsPingDelay.setStatus('current')
if mibBuilder.loadTexts: rsPingDelay.setDescription('Specifies the minimum amount of time to wait before sending the next packet in a sequence after receiving a response. The actual delay may be greater due to internal task scheduling.')
rsPingTrapOnCompletion = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 4, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsPingTrapOnCompletion.setStatus('current')
if mibBuilder.loadTexts: rsPingTrapOnCompletion.setDescription('Specifies whether or not a rsPingCompletion trap should be issued on completion of the sequence of pings. If such a trap is desired, the NMS should ensure that the community table contains an instance specified by the NMSs IP address with rndCommunityTrapsEnable = trapsEnable.')
rsPingSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 4, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPingSentPackets.setStatus('current')
if mibBuilder.loadTexts: rsPingSentPackets.setDescription('The number of ping packets that have been sent to the target in this sequence.')
rsPingReceivedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 4, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPingReceivedPackets.setStatus('current')
if mibBuilder.loadTexts: rsPingReceivedPackets.setDescription('The number of ping packets that have been received from the target in this sequence.')
rsPingMinReturnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 4, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPingMinReturnTime.setStatus('current')
if mibBuilder.loadTexts: rsPingMinReturnTime.setDescription('The minimum round trip time of all the packets that have been sent in this sequence. The value returned to a GET request is meaningless if no ping response in a sequence has been received yet.')
rsPingAvgReturnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 4, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPingAvgReturnTime.setStatus('current')
if mibBuilder.loadTexts: rsPingAvgReturnTime.setDescription('The average round trip time of all the packets that have been sent in this sequence.The value returned to a GET request is meaningless if no ping response in a sequence has been received yet.')
rsPingMaxReturnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 4, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPingMaxReturnTime.setStatus('current')
if mibBuilder.loadTexts: rsPingMaxReturnTime.setDescription('The maximum round trip time of all the packets that have been sent in this sequence.The value returned to a GET request is meaningless if no ping response in a sequence has been received yet.')
rsPingCompletionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 4, 1, 1, 12), PingCompletionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPingCompletionStatus.setStatus('current')
if mibBuilder.loadTexts: rsPingCompletionStatus.setDescription('If all the echo request packets in this sequence have been responded by valid echo responses, this object is set to ok. Otherwise this status indicates the problem. bad-reply-data indicates that the reply data is not equal to the response data.')
rsPingTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 4, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(19, 19)).setFixedLength(19)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPingTimeStamp.setStatus('current')
if mibBuilder.loadTexts: rsPingTimeStamp.setDescription('The time-stamp indicating the time and date of creation or last update of this request. The format of the time-stamp is dd/mm/yyyy hh:mm:ss')
rsPingEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 4, 1, 1, 14), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsPingEntryStatus.setStatus('current')
if mibBuilder.loadTexts: rsPingEntryStatus.setDescription('The status of this table entry.')
rsPingInetTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 4, 2), )
if mibBuilder.loadTexts: rsPingInetTable.setStatus('current')
if mibBuilder.loadTexts: rsPingInetTable.setDescription('A table of ping request entries.')
rsPingInetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 4, 2, 1), ).setIndexNames((0, "Dell-rndApplications", "rsPingInetAddressType"), (0, "Dell-rndApplications", "rsPingInetAddress"))
if mibBuilder.loadTexts: rsPingInetEntry.setStatus('current')
if mibBuilder.loadTexts: rsPingInetEntry.setDescription('A ping request entry. A management station wishing to create an entry should first generate a pseudo-random serial number to be used as the index to this sparse table. It must also create in the same PDU the associated instance of the address object. It should also modify in the same PDU the default values for the other configuration objects if the defaults are not appropriate. Once the sequence completes, the management station should retrieve the values of the status objects of interest, and should then delete the entry. In order to prevent old entries from clogging the table, entries will be aged out, but an entry will never be deleted within 5 minutes of completing.')
rsPingInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 4, 2, 1, 1), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsPingInetAddressType.setStatus('current')
if mibBuilder.loadTexts: rsPingInetAddressType.setDescription('The address type of the device to be pinged. Once an instance of this object is created, its value can not be changed.')
rsPingInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 4, 2, 1, 2), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsPingInetAddress.setStatus('current')
if mibBuilder.loadTexts: rsPingInetAddress.setDescription('The address of the device to be pinged. Once an instance of this object is created, its value can not be changed.')
rsPingInetPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsPingInetPacketCount.setStatus('current')
if mibBuilder.loadTexts: rsPingInetPacketCount.setDescription('Specifies the number of ping packets to send to the target in this sequence.')
rsPingInetPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 4, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsPingInetPacketSize.setStatus('current')
if mibBuilder.loadTexts: rsPingInetPacketSize.setDescription('Specifies the size of ping packets to send to the target in this sequence. The lower and upper boundaries of this object are implementation dependent.')
rsPingInetPacketTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsPingInetPacketTimeout.setStatus('current')
if mibBuilder.loadTexts: rsPingInetPacketTimeout.setDescription("Specifies the amount of time (in milliseconds) to wait for a response to a transmitted packet before declaring the packet 'dropped.'")
rsPingInetDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsPingInetDelay.setStatus('current')
if mibBuilder.loadTexts: rsPingInetDelay.setDescription('Specifies the minimum amount of time (in milliseconds) to wait before sending the next packet in a sequence after receiving a response. The actual delay may be greater due to internal task scheduling.')
rsPingInetTrapOnCompletion = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 4, 2, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsPingInetTrapOnCompletion.setStatus('current')
if mibBuilder.loadTexts: rsPingInetTrapOnCompletion.setDescription('Specifies whether or not a rsPingCompletion trap should be issued on completion of the sequence of pings. If such a trap is desired, the NMS should ensure that the community table contains an instance specified by the NMSs IP address with rndCommunityTrapsEnable = trapsEnable.')
rsPingInetSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPingInetSentPackets.setStatus('current')
if mibBuilder.loadTexts: rsPingInetSentPackets.setDescription('The number of ping packets that have been sent to the target in this sequence.')
rsPingInetReceivedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPingInetReceivedPackets.setStatus('current')
if mibBuilder.loadTexts: rsPingInetReceivedPackets.setDescription('The number of ping packets that have been received from the target in this sequence.')
rsPingInetMinReturnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 4, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPingInetMinReturnTime.setStatus('current')
if mibBuilder.loadTexts: rsPingInetMinReturnTime.setDescription('The minimum round trip time (in milliseconds) of all the packets that have been sent in this sequence. The value returned to a GET request is meaningless if no ping response in a sequence has been received yet.')
rsPingInetAvgReturnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 4, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPingInetAvgReturnTime.setStatus('current')
if mibBuilder.loadTexts: rsPingInetAvgReturnTime.setDescription('The average round trip time (in milliseconds) of all the packets that have been sent in this sequence.The value returned to a GET request is meaningless if no ping response in a sequence has been received yet.')
rsPingInetMaxReturnTime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 4, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPingInetMaxReturnTime.setStatus('current')
if mibBuilder.loadTexts: rsPingInetMaxReturnTime.setDescription('The maximum round trip time (in milliseconds) of all the packets that have been sent in this sequence.The value returned to a GET request is meaningless if no ping response in a sequence has been received yet.')
rsPingInetCompletionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 4, 2, 1, 13), PingCompletionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPingInetCompletionStatus.setStatus('current')
if mibBuilder.loadTexts: rsPingInetCompletionStatus.setDescription('If all the echo request packets in this sequence have been responded by valid echo responses, this object is set to ok. Otherwise this status indicates the problem. bad-reply-data indicates that the reply data is not equal to the response data.')
rsPingInetTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 4, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(19, 19)).setFixedLength(19)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPingInetTimeStamp.setStatus('current')
if mibBuilder.loadTexts: rsPingInetTimeStamp.setDescription('The time-stamp indicating the time and date of creation or last update of this request. The format of the time-stamp is dd/mm/yyyy hh:mm:ss')
rsPingInetEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 4, 2, 1, 15), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsPingInetEntryStatus.setStatus('current')
if mibBuilder.loadTexts: rsPingInetEntryStatus.setDescription('The status of this table entry.')
rsPingInetSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 4, 2, 1, 16), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsPingInetSourceAddr.setStatus('current')
if mibBuilder.loadTexts: rsPingInetSourceAddr.setDescription('The status of this table entry.')
rsPowerSupplyRedundacy = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 35, 5))
rsPowerSupplyRedundacyTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 5, 1), )
if mibBuilder.loadTexts: rsPowerSupplyRedundacyTable.setStatus('current')
if mibBuilder.loadTexts: rsPowerSupplyRedundacyTable.setDescription('The power supply redundancy table.')
rsPowerSupplyRedundacyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 5, 1, 1), ).setIndexNames((0, "Dell-rndApplications", "rsPowerSupplyRedundacyReNumber"))
if mibBuilder.loadTexts: rsPowerSupplyRedundacyEntry.setStatus('current')
if mibBuilder.loadTexts: rsPowerSupplyRedundacyEntry.setDescription('The status of power supply redundancy for this table.')
rsPowerSupplyRedundacyReNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPowerSupplyRedundacyReNumber.setStatus('current')
if mibBuilder.loadTexts: rsPowerSupplyRedundacyReNumber.setDescription('This number identifies the module backed up by power supply redundancy in the stack.')
rsPowerSupplyRedundacyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notExist", 1), ("existButNotWorking", 2), ("bothWorking", 3), ("internalOnlyWorking", 4), ("externalOnlyWorking", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsPowerSupplyRedundacyStatus.setStatus('current')
if mibBuilder.loadTexts: rsPowerSupplyRedundacyStatus.setDescription('The status of a power supply redundancy of the entry.')
rsNvram = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 35, 6))
rsEraseNvramAfterReset = MibScalar((1, 3, 6, 1, 4, 1, 89, 35, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsEraseNvramAfterReset.setStatus('current')
if mibBuilder.loadTexts: rsEraseNvramAfterReset.setDescription('The name of NVRAM application that will be erased after reset or ALL if all NVRAM should be erased.')
rsNvramApplTable = MibTable((1, 3, 6, 1, 4, 1, 89, 35, 6, 2), )
if mibBuilder.loadTexts: rsNvramApplTable.setStatus('current')
if mibBuilder.loadTexts: rsNvramApplTable.setDescription('The NVRAM application table.')
rsNvramApplEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 35, 6, 2, 1), ).setIndexNames((0, "Dell-rndApplications", "rsNvramApplIndex"))
if mibBuilder.loadTexts: rsNvramApplEntry.setStatus('current')
if mibBuilder.loadTexts: rsNvramApplEntry.setDescription('The status of NVRAM application table.')
rsNvramApplIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsNvramApplIndex.setStatus('current')
if mibBuilder.loadTexts: rsNvramApplIndex.setDescription('The index of NVRAM application table.')
rsNvramApplName = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 35, 6, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsNvramApplName.setStatus('current')
if mibBuilder.loadTexts: rsNvramApplName.setDescription('The name of application used NVRAM.')
mibBuilder.exportSymbols("Dell-rndApplications", rsPingInetTimeStamp=rsPingInetTimeStamp, rlTstBasicRateEntry=rlTstBasicRateEntry, rsNvramApplName=rsNvramApplName, rndMonitoringLogfile=rndMonitoringLogfile, rndMidLevelManagement=rndMidLevelManagement, rndSimulatedVariableEntryIndex=rndSimulatedVariableEntryIndex, rlMibTreeEntry=rlMibTreeEntry, rndSimulateUndo=rndSimulateUndo, rndMonitoredElementLabel=rndMonitoredElementLabel, rndMibFilesTable=rndMibFilesTable, rsPingInetSentPackets=rsPingInetSentPackets, rndEraseSimulatedConfiguration=rndEraseSimulatedConfiguration, rndSnmpTestPassword=rndSnmpTestPassword, rndMonitoredObjectIdentifier=rndMonitoredObjectIdentifier, rsNvramApplTable=rsNvramApplTable, rndSimulatedVariablesTable=rndSimulatedVariablesTable, rsPingMaxReturnTime=rsPingMaxReturnTime, rsPingEntry=rsPingEntry, rndMonitoringInterval=rndMonitoringInterval, rndNotSupportedField=rndNotSupportedField, rndMonitoredIntegerInstance=rndMonitoredIntegerInstance, rlMibTableInstancesInfoEntry=rlMibTableInstancesInfoEntry, rndDeleteValuesTable=rndDeleteValuesTable, rsPingInetSourceAddr=rsPingInetSourceAddr, rlMibInstances=rlMibInstances, rlMibTreeTable=rlMibTreeTable, rlSnmpServTestResponse=rlSnmpServTestResponse, PingCompletionStatus=PingCompletionStatus, rndRowStatusObjectId=rndRowStatusObjectId, rsPowerSupplyRedundacyReNumber=rsPowerSupplyRedundacyReNumber, rsPingInetPacketTimeout=rsPingInetPacketTimeout, rlMibTreeSonIndex=rlMibTreeSonIndex, rsPingInetReceivedPackets=rsPingInetReceivedPackets, rndRowDeleteValue=rndRowDeleteValue, rndSimulatedVariableObjectId=rndSimulatedVariableObjectId, rndMonitoredObjectInstance=rndMonitoredObjectInstance, rsPingInetDelay=rsPingInetDelay, rsPowerSupplyRedundacyEntry=rsPowerSupplyRedundacyEntry, rsPingPacketCount=rsPingPacketCount, rlMibTableInstancesInfoTable=rlMibTableInstancesInfoTable, rndMonitoringEntry=rndMonitoringEntry, rsPingPacketSize=rsPingPacketSize, rsPingEntryStatus=rsPingEntryStatus, rsPingInetAddress=rsPingInetAddress, rndSimulatedVariablesEntry=rndSimulatedVariablesEntry, rndMibFileEntryStatus=rndMibFileEntryStatus, rndMonitoredObjectSyntax=rndMonitoredObjectSyntax, rsPingPacketTimeout=rsPingPacketTimeout, rsPingReceivedPackets=rsPingReceivedPackets, rndAlarmMinTreshold=rndAlarmMinTreshold, rlMibTree=rlMibTree, rlTstBasicRateTable=rlTstBasicRateTable, rndAlarmMaxTreshold=rndAlarmMaxTreshold, rsPingAvgReturnTime=rsPingAvgReturnTime, rsPingInetPacketCount=rsPingInetPacketCount, rsPingTrapOnCompletion=rsPingTrapOnCompletion, rlTstBasicRateLineTopology=rlTstBasicRateLineTopology, rsPingInetMaxReturnTime=rsPingInetMaxReturnTime, rsEraseNvramAfterReset=rsEraseNvramAfterReset, rlMibTreeSon=rlMibTreeSon, rlMibTableInstancesInfoNumOfInstances=rlMibTableInstancesInfoNumOfInstances, rsPingAddress=rsPingAddress, rlMibTreeGrandFather=rlMibTreeGrandFather, rndMonitoredElementCommunity=rndMonitoredElementCommunity, rndRowStatusVariableName=rndRowStatusVariableName, rsPowerSupplyRedundacy=rsPowerSupplyRedundacy, rndMibFileRefresh=rndMibFileRefresh, rndMibFileIndex=rndMibFileIndex, rndMonitoredElementsTable=rndMonitoredElementsTable, rndMonitoringEntryStatus=rndMonitoringEntryStatus, rndMonitoredElementStatus=rndMonitoredElementStatus, rsPingInetCompletionStatus=rsPingInetCompletionStatus, rndMonitoredObjectInstanceLabel=rndMonitoredObjectInstanceLabel, rndDefaultLogFile=rndDefaultLogFile, rsPingSentPackets=rsPingSentPackets, rsPingInetEntryStatus=rsPingInetEntryStatus, rlSnmpServTestRequest=rlSnmpServTestRequest, rndAlarmInterval=rndAlarmInterval, rndSimulatedVariableEntryStatus=rndSimulatedVariableEntryStatus, rsPingCompletionStatus=rsPingCompletionStatus, rsPowerSupplyRedundacyTable=rsPowerSupplyRedundacyTable, rsNvramApplIndex=rsNvramApplIndex, rsPingTable=rsPingTable, rsPingInetAvgReturnTime=rsPingInetAvgReturnTime, rndMonitoringTable=rndMonitoringTable, rsPingMIB=rsPingMIB, rsPingInetAddressType=rsPingInetAddressType, rlSnmpServCreateTestPool=rlSnmpServCreateTestPool, rndMonitoredElementAddress=rndMonitoredElementAddress, rndMonitoredObjectName=rndMonitoredObjectName, rsPingInetTrapOnCompletion=rsPingInetTrapOnCompletion, rndMonitoredElementEntry=rndMonitoredElementEntry, rlMibTableInstancesInfoTableName=rlMibTableInstancesInfoTableName, rsNvram=rsNvram, rlTstBasicRateSignalMode=rlTstBasicRateSignalMode, snmpTesting=snmpTesting, rlTstBasicRateIfMode=rlTstBasicRateIfMode, rlMibTreeFather=rlMibTreeFather, rndAlarmOptions=rndAlarmOptions, rsPingInetMinReturnTime=rsPingInetMinReturnTime, rndMibFileEntry=rndMibFileEntry, rlMibTreeSonObjectId=rlMibTreeSonObjectId, rndMibFilePath=rndMibFilePath, rlTstBasicRateIfType=rlTstBasicRateIfType, rsNvramApplEntry=rsNvramApplEntry, rndDeleteValueEntryStatus=rndDeleteValueEntryStatus, rlSnmpServITCbindClients=rlSnmpServITCbindClients, rsPowerSupplyRedundacyStatus=rsPowerSupplyRedundacyStatus, rndMonitoredElement=rndMonitoredElement, rsPingInetTable=rsPingInetTable, rndHardwareConfiguration=rndHardwareConfiguration, rsPingTimeStamp=rsPingTimeStamp, rndDeleteValuesEntry=rndDeleteValuesEntry, rsPingInetEntry=rsPingInetEntry, rndSnmpTests=rndSnmpTests, PYSNMP_MODULE_ID=rndApplications, rndDefaultPollingInterval=rndDefaultPollingInterval, rsPingDelay=rsPingDelay, rndApplications=rndApplications, rsPingMinReturnTime=rsPingMinReturnTime, rsPingInetPacketSize=rsPingInetPacketSize, rlSnmpTestSimulatedVariables=rlSnmpTestSimulatedVariables, rndAlarmEnabling=rndAlarmEnabling)
