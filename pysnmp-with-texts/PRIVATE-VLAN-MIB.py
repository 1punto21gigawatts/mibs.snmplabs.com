#
# PySNMP MIB module PRIVATE-VLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PRIVATE-VLAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:42:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
dlink_common_mgmt, = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "dlink-common-mgmt")
VlanIdOrNone, PortList, VlanId = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIdOrNone", "PortList", "VlanId")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
iso, ModuleIdentity, Gauge32, NotificationType, ObjectIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Integer32, Counter64, Counter32, TimeTicks, MibIdentifier, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ModuleIdentity", "Gauge32", "NotificationType", "ObjectIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Integer32", "Counter64", "Counter32", "TimeTicks", "MibIdentifier", "IpAddress")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
swPrivateVLANMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 12, 69))
if mibBuilder.loadTexts: swPrivateVLANMIB.setLastUpdated('200808110000Z')
if mibBuilder.loadTexts: swPrivateVLANMIB.setOrganization('D-Link Corp.')
if mibBuilder.loadTexts: swPrivateVLANMIB.setContactInfo('http://support.dlink.com')
if mibBuilder.loadTexts: swPrivateVLANMIB.setDescription('The Private VLAN module MIB for the proprietary enterprise. Other related VLAN parameters will reference to rfc2674q(rfc4363q).mib.')
class SecondaryVlanType(TextualConvention, Integer32):
    description = 'The type of secondary VLAN.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("isolated", 1), ("community", 2))

swPrivateVlanCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 69, 1))
swPrivateVlanInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 69, 2))
swPrivateVlanMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 69, 3))
swPrivateVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 69, 3, 1), )
if mibBuilder.loadTexts: swPrivateVlanTable.setStatus('current')
if mibBuilder.loadTexts: swPrivateVlanTable.setDescription('A table containing current private VLAN information.')
swPrivateVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 69, 3, 1, 1), ).setIndexNames((0, "PRIVATE-VLAN-MIB", "swPrivateVlanId"))
if mibBuilder.loadTexts: swPrivateVlanEntry.setStatus('current')
if mibBuilder.loadTexts: swPrivateVlanEntry.setDescription('The management information of a private VLAN domain.')
swPrivateVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 69, 3, 1, 1, 1), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPrivateVlanId.setStatus('current')
if mibBuilder.loadTexts: swPrivateVlanId.setDescription('The VLAN-ID referring to the private VLAN of the private VLAN domain. A private VLAN is the unique and common VLAN identifier of the whole private VLAN domain. Every port in a private VLAN is a member of the private VLAN. The IP subnet of the private VLAN shall be associated with the private VLAN. Only the private VLAN is visible outside of the domain.')
swPrivateVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 69, 3, 1, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPrivateVlanName.setStatus('current')
if mibBuilder.loadTexts: swPrivateVlanName.setDescription('An administratively assigned string which may be used to identify the private VLAN.')
swPrivateVlanPromiscuousPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 69, 3, 1, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPrivateVlanPromiscuousPorts.setStatus('current')
if mibBuilder.loadTexts: swPrivateVlanPromiscuousPorts.setDescription('The promiscuous port has the ability to communicate with any port within the private VLAN. A promiscuous port is an untagged member of the private VLAN.')
swPrivateVlanTrunkPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 69, 3, 1, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPrivateVlanTrunkPorts.setStatus('current')
if mibBuilder.loadTexts: swPrivateVlanTrunkPorts.setDescription('The trunk port, also known as the Inter-switch link, has the ability to communicate with any port within the private VLAN. A trunk port is a tagged member of the private VLAN.')
swPrivateVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 69, 3, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swPrivateVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: swPrivateVlanRowStatus.setDescription('This object indicates the status of this entry.')
swSecondaryVlanTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 69, 3, 2), )
if mibBuilder.loadTexts: swSecondaryVlanTable.setStatus('current')
if mibBuilder.loadTexts: swSecondaryVlanTable.setDescription('A table containing current secondary VLAN information.')
swSecondaryVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 69, 3, 2, 1), ).setIndexNames((0, "PRIVATE-VLAN-MIB", "swPrivateVlanId"), (0, "PRIVATE-VLAN-MIB", "swSecondaryVlanId"))
if mibBuilder.loadTexts: swSecondaryVlanEntry.setStatus('current')
if mibBuilder.loadTexts: swSecondaryVlanEntry.setDescription('The management information of a secondary VLAN of a private VLAN domain.')
swSecondaryVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 69, 3, 2, 1, 1), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSecondaryVlanId.setStatus('current')
if mibBuilder.loadTexts: swSecondaryVlanId.setDescription('The VLAN-ID referring to this SwSecondaryVLANEntry.')
swSecondaryVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 69, 3, 2, 1, 2), SecondaryVlanType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swSecondaryVlanType.setStatus('current')
if mibBuilder.loadTexts: swSecondaryVlanType.setDescription("An isolated VLAN is a secondary VLAN whose distinctive characteristic is that all hosts connected to its ports are isolated at Layer 2. A private VLAN has only one isolated VLAN. If the swPrivateVlanIsolatedVlanIndex has a value of zero, this indicates there are no associated isolated VLANs in the private VLAN domain. Otherwise, it is the associated isolated VLAN ID. A community VLAN is a secondary VLAN that is associated with a group of ports that connects to a certain 'community' of end devices with mutual trust relationships. There can be multiple distinct community VLANs in a private VLAN domain.")
swSecondaryVlanPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 69, 3, 2, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swSecondaryVlanPorts.setStatus('current')
if mibBuilder.loadTexts: swSecondaryVlanPorts.setDescription('If swSecondaryVlanType is isolated, the ports in the isolated VLAN of the private VLAN have complete Layer 2 separation from other ports within the same private VLAN, except for the promiscuous and trunk ports. If swSecondaryVlanType is community, the ports can communicate with other ports in the same Secondary VLAN and with promiscuous ports.')
swSecondaryVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 69, 3, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swSecondaryVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: swSecondaryVlanRowStatus.setDescription('This object indicates the status of this entry.')
mibBuilder.exportSymbols("PRIVATE-VLAN-MIB", swPrivateVlanName=swPrivateVlanName, swSecondaryVlanEntry=swSecondaryVlanEntry, swSecondaryVlanId=swSecondaryVlanId, swSecondaryVlanTable=swSecondaryVlanTable, swSecondaryVlanPorts=swSecondaryVlanPorts, swPrivateVlanId=swPrivateVlanId, swPrivateVlanTrunkPorts=swPrivateVlanTrunkPorts, swPrivateVlanMgmt=swPrivateVlanMgmt, swSecondaryVlanRowStatus=swSecondaryVlanRowStatus, swSecondaryVlanType=swSecondaryVlanType, swPrivateVlanCtrl=swPrivateVlanCtrl, swPrivateVlanInfo=swPrivateVlanInfo, SecondaryVlanType=SecondaryVlanType, swPrivateVlanRowStatus=swPrivateVlanRowStatus, swPrivateVlanPromiscuousPorts=swPrivateVlanPromiscuousPorts, swPrivateVlanTable=swPrivateVlanTable, swPrivateVlanEntry=swPrivateVlanEntry, swPrivateVLANMIB=swPrivateVLANMIB, PYSNMP_MODULE_ID=swPrivateVLANMIB)
