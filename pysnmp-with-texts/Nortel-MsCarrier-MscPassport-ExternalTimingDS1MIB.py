#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-ExternalTimingDS1MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-ExternalTimingDS1MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:29:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
mscLpIndex, mscLp = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex", "mscLp")
RowStatus, StorageType, Integer32, DisplayString = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "RowStatus", "StorageType", "Integer32", "DisplayString")
mscPassportMIBs, = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscPassportMIBs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, IpAddress, Integer32, ObjectIdentity, Counter64, Gauge32, Unsigned32, Counter32, MibIdentifier, NotificationType, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "IpAddress", "Integer32", "ObjectIdentity", "Counter64", "Gauge32", "Unsigned32", "Counter32", "MibIdentifier", "NotificationType", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
externalTimingDS1MIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 151))
mscLpEDS1 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 28))
mscLpEDS1RowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 28, 1), )
if mibBuilder.loadTexts: mscLpEDS1RowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEDS1RowStatusTable.setDescription('This entry controls the addition and deletion of mscLpEDS1 components.')
mscLpEDS1RowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 28, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-ExternalTimingDS1MIB", "mscLpEDS1Index"))
if mibBuilder.loadTexts: mscLpEDS1RowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEDS1RowStatusEntry.setDescription('A single entry in the table represents a single mscLpEDS1 component.')
mscLpEDS1RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 28, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEDS1RowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEDS1RowStatus.setDescription('This variable is used as the basis for SNMP naming of mscLpEDS1 components. These components can be added and deleted.')
mscLpEDS1ComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 28, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEDS1ComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEDS1ComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscLpEDS1StorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 28, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEDS1StorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEDS1StorageType.setDescription('This variable represents the storage type value for the mscLpEDS1 tables.')
mscLpEDS1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 28, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)))
if mibBuilder.loadTexts: mscLpEDS1Index.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEDS1Index.setDescription('This variable represents the index for the mscLpEDS1 tables.')
mscLpEDS1ProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 28, 10), )
if mibBuilder.loadTexts: mscLpEDS1ProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEDS1ProvTable.setDescription('This group contains all of the provisioning data for an EDS1 component.')
mscLpEDS1ProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 28, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-ExternalTimingDS1MIB", "mscLpEDS1Index"))
if mibBuilder.loadTexts: mscLpEDS1ProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEDS1ProvEntry.setDescription('An entry in the mscLpEDS1ProvTable.')
mscLpEDS1LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 28, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("d4", 0), ("esf", 1))).clone('esf')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscLpEDS1LineType.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEDS1LineType.setDescription('This attribute defines the framing format of the DS1 line. The option d4 defines a framing pattern of 12 frames per multiframe. The option esf defines a framing pattern of 24 frames per multiframe. The default option esf is permitted.')
mscLpEDS1OperStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 28, 14), )
if mibBuilder.loadTexts: mscLpEDS1OperStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEDS1OperStatusTable.setDescription('This group includes the Operational Status attribute. This attribute defines the current operational state of this component.')
mscLpEDS1OperStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 28, 14, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-ExternalTimingDS1MIB", "mscLpEDS1Index"))
if mibBuilder.loadTexts: mscLpEDS1OperStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEDS1OperStatusEntry.setDescription('An entry in the mscLpEDS1OperStatusTable.')
mscLpEDS1SnmpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 28, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEDS1SnmpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEDS1SnmpOperStatus.setDescription('The current state of the interface. The up state indicates the interface is operational and capable of forwarding packets. The down state indicates the interface is not operational, thus unable to forward packets. testing state indicates that no operational packets can be passed.')
mscLpEDS1StateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 28, 15), )
if mibBuilder.loadTexts: mscLpEDS1StateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEDS1StateTable.setDescription('This group contains the three OSI State attributes and the six OSI Status attributes. The descriptions generically indicate what each attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241- 7001-150, Passport Operations and Maintenance Guide.')
mscLpEDS1StateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 28, 15, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-ExternalTimingDS1MIB", "mscLpEDS1Index"))
if mibBuilder.loadTexts: mscLpEDS1StateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEDS1StateEntry.setDescription('An entry in the mscLpEDS1StateTable.')
mscLpEDS1AdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 28, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEDS1AdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEDS1AdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component. The OSI Status attributes, if supported by the component, may provide more details, qualifying the state of the component.')
mscLpEDS1OperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 28, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEDS1OperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEDS1OperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle. The OSI Status attributes, if supported by the component, may provide more details, qualifying the state of the component.')
mscLpEDS1UsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 28, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEDS1UsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEDS1UsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time. The OSI Status attributes, if supported by the component, may provide more details, qualifying the state of the component.')
mscLpEDS1AvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 28, 15, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEDS1AvailabilityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEDS1AvailabilityStatus.setDescription('If supported by the component, this attribute indicates the OSI Availability status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value inTest indicates that the resource is undergoing a test procedure. If adminState is locked or shuttingDown, the normal users are precluded from using the resource and controlStatus is reservedForTest. Tests that do not exclude additional users can be present in any operational or administrative state but the reservedForTest condition should not be present. The value failed indicates that the component has an internal fault that prevents it from operating. The operationalState is disabled. The value dependency indicates that the component cannot operate because some other resource on which it depends is unavailable. The operationalState is disabled. The value powerOff indicates the resource requires power to be applied and it is not powered on. The operationalState is disabled. The value offLine indicates the resource requires a routine operation (either manual, automatic, or both) to be performed to place it on-line and make it available for use. The operationalState is disabled. The value offDuty indicates the resource is inactive in accordance with a predetermined time schedule. In the absence of other disabling conditions, the operationalState is enabled or disabled. The value degraded indicates the service provided by the component is degraded in some way, such as in speed or operating capacity. However, the resource remains available for service. The operationalState is enabled. The value notInstalled indicates the resource is not present. The operationalState is disabled. The value logFull is not used. Description of bits: inTest(0) failed(1) powerOff(2) offLine(3) offDuty(4) dependency(5) degraded(6) notInstalled(7) logFull(8)')
mscLpEDS1ProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 28, 15, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEDS1ProceduralStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEDS1ProceduralStatus.setDescription("If supported by the component, this attribute indicates the OSI Procedural status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value initializationRequired indicates (for a resource which doesn't initialize autonomously) that initialization is required before it can perform its normal functions, and this procedure has not been initiated. The operationalState is disabled. The value notInitialized indicates (for a resource which does initialize autonomously) that initialization is required before it can perform its normal functions, and this procedure has not been initiated. The operationalState may be enabled or disabled. The value initializing indicates that initialization has been initiated but is not yet complete. The operationalState may be enabled or disabled. The value reporting indicates the resource has completed some processing operation and is notifying the results. The operationalState is enabled. The value terminating indicates the component is in a termination phase. If the resource doesn't reinitialize autonomously, operationalState is disabled; otherwise it is enabled or disabled. Description of bits: initializationRequired(0) notInitialized(1) initializing(2) reporting(3) terminating(4)")
mscLpEDS1ControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 28, 15, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEDS1ControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEDS1ControlStatus.setDescription('If supported by the component, this attribute indicates the OSI Control status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value subjectToTest indicates the resource is available but tests may be conducted simultaneously at unpredictable times, which may cause it to exhibit unusual characteristics. The value partOfServicesLocked indicates that part of the service is restricted from users of a resource. The adminState is unlocked. The value reservedForTest indicates that the component is administratively unavailable because it is undergoing a test procedure. The adminState is locked. The value suspended indicates that the service has been administratively suspended. Description of bits: subjectToTest(0) partOfServicesLocked(1) reservedForTest(2) suspended(3)')
mscLpEDS1AlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 28, 15, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEDS1AlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEDS1AlarmStatus.setDescription('If supported by the component, this attribute indicates the OSI Alarm status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value underRepair indicates the component is currently being repaired. The operationalState is enabled or disabled. The value critical indicates one or more critical alarms are outstanding against the component. Other, less severe, alarms may also be outstanding. The operationalState is enabled or disabled. The value major indicates one or more major alarms are outstanding against the component. Other, less severe, alarms may also be outstanding. The operationalState is enabled or disabled. The value minor indicates one or more minor alarms are outstanding against the component. Other, less severe, alarms may also be outstanding. The operationalState is enabled or disabled. The value alarmOutstanding generically indicates that an alarm of some severity is outstanding against the component. Description of bits: underRepair(0) critical(1) major(2) minor(3) alarmOutstanding(4)')
mscLpEDS1StandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 28, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEDS1StandbyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEDS1StandbyStatus.setDescription('If supported by the component, this attribute indicates the OSI Standby status of the component. The value notSet indicates that either the attribute is not supported or that none of the status conditions described below are present. Note that this is a non-standard value, used because the original specification indicated this attribute was set-valued and thus, did not provide a value to indicate that none of the other three are applicable. The value hotStandby indicates that the resource is not providing service but will be immediately able to take over the role of the resource to be backed up, without initialization activity, and containing the same information as the resource to be backed up. The value coldStandby indicates the resource is a backup for another resource but will not be immediately able to take over the role of the backed up resource and will require some initialization activity. The value providingService indicates that this component, as a backup resource, is currently backing up another resource.')
mscLpEDS1UnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 28, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEDS1UnknownStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEDS1UnknownStatus.setDescription('This attribute indicates the OSI Unknown status of the component. The value false indicates that all of the other OSI State and Status attribute values can be considered accurate. The value true indicates that the actual state of the component is not known for sure.')
mscLpEDS1OperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 28, 16), )
if mibBuilder.loadTexts: mscLpEDS1OperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEDS1OperTable.setDescription('This group contains the common operational data for EE1 and EDS1 components.')
mscLpEDS1OperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 28, 16, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-LogicalProcessorMIB", "mscLpIndex"), (0, "Nortel-MsCarrier-MscPassport-ExternalTimingDS1MIB", "mscLpEDS1Index"))
if mibBuilder.loadTexts: mscLpEDS1OperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEDS1OperEntry.setDescription('An entry in the mscLpEDS1OperTable.')
mscLpEDS1LosAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 28, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEDS1LosAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEDS1LosAlarm.setDescription('This attribute indicates whether a LOS (Loss of Signal) alarm state has been entered. A LOS alarm is declared after LOS defects have been observed and accumulated for a period of 2 seconds +/- 0.5 second . A LOS defect is detected upon observing all zeros for 150 ms . If the LOS defects are intermittently occurring, the LOS defect accumulator is decremented at a rate of 1/10 of the incrementing rate (alarm integration ratio of 1/10), with all measurements based on a 200 ms polling cycle. The port goes into an operational state of disabled until the LOS alarm state is cleared. The LOS alarm state is cleared when LOS defects are absent for 10 seconds +/- 0.5 second.')
mscLpEDS1LofAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 28, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEDS1LofAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEDS1LofAlarm.setDescription('This attribute indicates whether a LOF (Loss of Frame) alarm state has been entered. The LOF alarm state is entered when LOF defects (for DS1: 2 out of 5 framing bits in error; for E1: 3 consecutive frame alignment patterns in error) have been detected for 3 seconds +/- 0.5 second . If the LOF defects are intermittently occurring, the LOF defect accumulator is decremented at a rate of 1/10 of the incrementing rate (alarm integration ratio of 1/10), with all measurements based on a 200 ms polling cycle. The port goes into an operational state of disabled until the LOF alarm state is cleared. The condition is cleared when framing has been achieved for 10 seconds +/- 0.5 second.')
mscLpEDS1RxAisAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 12, 28, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscLpEDS1RxAisAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: mscLpEDS1RxAisAlarm.setDescription('This attribute indicates whether an AIS (Alarm Indication Signal) alarm has been entered. The AIS Alarm state is entered when AIS defects have been observed and accumulated for 2.5 seconds +/- 0.5 second. An AIS defect is detected after having received less than 3 zeros in a 2048 bit period. If the AIS defects are intermittently occurring, the AIS defect accumulator is decremented at a rate of 1/ 10 of the incrementing rate (alarm integration ratio of 1/10), with all measurement based on a 200 ms polling cycle. The port goes into an operational state of disabled for the duration of an AIS alarm state. The AIS alarm state is cleared when AIS defects are absent for 10 seconds +/- 0.5 second.')
externalTimingDS1Group = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 151, 1))
externalTimingDS1GroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 151, 1, 1))
externalTimingDS1GroupCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 151, 1, 1, 3))
externalTimingDS1GroupCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 151, 1, 1, 3, 2))
externalTimingDS1Capabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 151, 3))
externalTimingDS1CapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 151, 3, 1))
externalTimingDS1CapabilitiesCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 151, 3, 1, 3))
externalTimingDS1CapabilitiesCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 151, 3, 1, 3, 2))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-ExternalTimingDS1MIB", mscLpEDS1UsageState=mscLpEDS1UsageState, mscLpEDS1UnknownStatus=mscLpEDS1UnknownStatus, mscLpEDS1=mscLpEDS1, mscLpEDS1RowStatusTable=mscLpEDS1RowStatusTable, mscLpEDS1OperTable=mscLpEDS1OperTable, mscLpEDS1AdminState=mscLpEDS1AdminState, mscLpEDS1LofAlarm=mscLpEDS1LofAlarm, mscLpEDS1StateTable=mscLpEDS1StateTable, mscLpEDS1RowStatusEntry=mscLpEDS1RowStatusEntry, externalTimingDS1GroupCA02=externalTimingDS1GroupCA02, mscLpEDS1StorageType=mscLpEDS1StorageType, mscLpEDS1StateEntry=mscLpEDS1StateEntry, mscLpEDS1AvailabilityStatus=mscLpEDS1AvailabilityStatus, mscLpEDS1OperEntry=mscLpEDS1OperEntry, mscLpEDS1OperStatusTable=mscLpEDS1OperStatusTable, mscLpEDS1ProvTable=mscLpEDS1ProvTable, mscLpEDS1ProceduralStatus=mscLpEDS1ProceduralStatus, externalTimingDS1CapabilitiesCA02A=externalTimingDS1CapabilitiesCA02A, mscLpEDS1OperStatusEntry=mscLpEDS1OperStatusEntry, mscLpEDS1RowStatus=mscLpEDS1RowStatus, mscLpEDS1ProvEntry=mscLpEDS1ProvEntry, mscLpEDS1Index=mscLpEDS1Index, externalTimingDS1Group=externalTimingDS1Group, externalTimingDS1GroupCA=externalTimingDS1GroupCA, externalTimingDS1CapabilitiesCA02=externalTimingDS1CapabilitiesCA02, mscLpEDS1LineType=mscLpEDS1LineType, externalTimingDS1CapabilitiesCA=externalTimingDS1CapabilitiesCA, mscLpEDS1ControlStatus=mscLpEDS1ControlStatus, mscLpEDS1StandbyStatus=mscLpEDS1StandbyStatus, externalTimingDS1MIB=externalTimingDS1MIB, mscLpEDS1LosAlarm=mscLpEDS1LosAlarm, mscLpEDS1ComponentName=mscLpEDS1ComponentName, mscLpEDS1AlarmStatus=mscLpEDS1AlarmStatus, mscLpEDS1OperationalState=mscLpEDS1OperationalState, mscLpEDS1RxAisAlarm=mscLpEDS1RxAisAlarm, externalTimingDS1Capabilities=externalTimingDS1Capabilities, externalTimingDS1GroupCA02A=externalTimingDS1GroupCA02A, mscLpEDS1SnmpOperStatus=mscLpEDS1SnmpOperStatus)
