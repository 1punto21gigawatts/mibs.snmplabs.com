#
# PySNMP MIB module EF-6000-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EF-6000-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:59:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, NotificationType, ModuleIdentity, Counter32, TimeTicks, iso, Unsigned32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Integer32, NotificationType, Gauge32, enterprises, MibIdentifier, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "NotificationType", "ModuleIdentity", "Counter32", "TimeTicks", "iso", "Unsigned32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Integer32", "NotificationType", "Gauge32", "enterprises", "MibIdentifier", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DisplayString(OctetString):
    pass

class Ef6000SysOperStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("operational", 1), ("redundant-failure", 2), ("minor-failure", 3), ("major-failure", 4), ("not-operational", 5))

class Ef6000FruCode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
    namedValues = NamedValues(("fru-bkplane", 1), ("fru-ctp", 2), ("fru-sbar", 3), ("fru-fan2", 4), ("fru-fan", 5), ("fru-power", 6), ("fru-reserved", 7), ("fru-glsl", 8), ("fru-gsml", 9), ("fru-gxxl", 10), ("fru-gsf1", 11), ("fru-gsf2", 12), ("fru-glsr", 13), ("fru-gsmr", 14), ("fru-gxxr", 15), ("fru-fint1", 16))

class Ef6000FruPosition(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 255)

class Ef6000PortIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2048)

class Ef6000PortPhyState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("psNotInstalled", 1), ("psAvailable", 2), ("psBlocked", 3), ("psUnavailable", 4), ("psLinkFailure", 5), ("psLinkFailLOL", 6), ("psIntDiags", 7), ("psExtLoop", 8), ("psPortFail", 9), ("psSR", 10), ("psLR", 11), ("psInaccessible", 12), ("psInactive", 13))

class Ef6000PortWWN(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class Ef6000PortList(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(32, 32)
    fixedLength = 32

mcData = MibIdentifier((1, 3, 6, 1, 4, 1, 289))
commDev = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2))
fibreChannel = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2, 1))
fcSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2, 1, 1))
ef_6000 = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2)).setLabel("ef-6000")
ef6000Sys = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 1))
ef6000Fru = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 2))
ef6000Port = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3))
ef6000PortBinding = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 4))
ef6000Zoning = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 5))
ef6000TA = MibIdentifier((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 6))
ef6000SysCurrentDate = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000SysCurrentDate.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000SysCurrentDate.setDescription('The current date information.')
ef6000SysBootDate = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000SysBootDate.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000SysBootDate.setDescription('The date and time of the last IPL of the switch.')
ef6000SysFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000SysFirmwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000SysFirmwareVersion.setDescription('The current version of the firmware.')
ef6000SysTypeNum = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000SysTypeNum.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000SysTypeNum.setDescription('The ASCII type number of the switch.')
ef6000SysModelNum = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000SysModelNum.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000SysModelNum.setDescription('The ASCII model number of the switch.')
ef6000SysMfg = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000SysMfg.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000SysMfg.setDescription('The ASCII manufacturer of the switch.')
ef6000SysPlantOfMfg = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000SysPlantOfMfg.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000SysPlantOfMfg.setDescription('The ASCII plant of manufacturer of the switch.')
ef6000SysEcLevel = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000SysEcLevel.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000SysEcLevel.setDescription('The ASCII EC level ID of the switch.')
ef6000SysSerialNum = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000SysSerialNum.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000SysSerialNum.setDescription('The ASCII system serial number of the switch.')
ef6000SysOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 1, 10), Ef6000SysOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000SysOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000SysOperStatus.setDescription('The current operational status of the switch.')
ef6000SysState = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("online", 1), ("coming-online", 2), ("offline", 3), ("going-offline", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000SysState.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000SysState.setDescription('If the operational status of the switch is operational, the switch will be in one of the four states: online(1), coming-online(2), offline(3), and going-offline(4).')
ef6000SysAdmStatus = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("online", 1), ("offline", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ef6000SysAdmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000SysAdmStatus.setDescription('The desired administrative status of the switch. A management station may place the switch in a desired state by setting this object accordingly. The desired administrative status are online(1) and offline(2). The online means setting the switch to be accessible by an external Fibre Channel port, and offline means setting the switch to be inaccessible.')
ef6000SysConfigSpeed = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("one-gig", 1), ("two-gig", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000SysConfigSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000SysConfigSpeed.setDescription("Switch speed capability. It's a user initiated option to adjust the system-wide port speed capability.")
ef6000FruTable = MibTable((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 2, 1), )
if mibBuilder.loadTexts: ef6000FruTable.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000FruTable.setDescription('A table that contains one entry for each module.')
ef6000FruEntry = MibTableRow((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 2, 1, 1), ).setIndexNames((0, "EF-6000-MIB", "ef6000FruCode"), (0, "EF-6000-MIB", "ef6000FruPosition"))
if mibBuilder.loadTexts: ef6000FruEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000FruEntry.setDescription('An entry containing the service parameters of the module.')
ef6000FruCode = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 2, 1, 1, 1), Ef6000FruCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000FruCode.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000FruCode.setDescription('Field Replaceable Unit. A hardware component of the product that is replaceable as an entire unit. Each module defined in this MIB has a fixed FRU code.')
ef6000FruPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 2, 1, 1, 2), Ef6000FruPosition()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000FruPosition.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000FruPosition.setDescription('This object identifies the position of the module. The value starts from 1 to the maximum number of the cards that can be contained within this switch.')
ef6000FruStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("backup", 2), ("update-busy", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000FruStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000FruStatus.setDescription('This object identifies the operational status of the module. The active(1) state indicates that the current module is active; The backup(2) state indicates that the back up module is used; The update-busy (3) state indicates that the module is in the updating process; The failed(4) state indicates that the current module is failed.')
ef6000FruPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000FruPartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000FruPartNumber.setDescription('The part number of the module.')
ef6000FruSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000FruSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000FruSerialNumber.setDescription('The serial number of the module.')
ef6000FruPowerOnHours = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000FruPowerOnHours.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000FruPowerOnHours.setDescription('The number of the hours that the FRU has been in operation.')
ef6000FruTestDate = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000FruTestDate.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000FruTestDate.setDescription('The final test date of the module.')
ef6000PortTable = MibTable((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1), )
if mibBuilder.loadTexts: ef6000PortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortTable.setDescription('A table that contains one entry for each switch port.')
ef6000PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1), ).setIndexNames((0, "EF-6000-MIB", "ef6000PortIndex"))
if mibBuilder.loadTexts: ef6000PortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortEntry.setDescription('An entry containing the information of the switch port.')
ef6000PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 1), Ef6000PortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortIndex.setDescription('The fixed physical port number on the switch. It ranges from 1 to the number of physical ports that can be supported in the switch.')
ef6000PortPhyState = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 2), Ef6000PortPhyState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortPhyState.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortPhyState.setDescription('The physical state of the port.')
ef6000PortOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("online", 1), ("offline", 2), ("testing", 3), ("faulty", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortOpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortOpStatus.setDescription('The operational status of the port. The online(1) state indicates that user frames can be passed.')
ef6000PortAdmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("online", 1), ("offline", 2), ("testing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ef6000PortAdmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortAdmStatus.setDescription('The desired state of the port. A management station may place the port in a desired state by setting this object accordingly. The testing(3) state indicates that no user frames can be passed. As the result of either explicit management action or per configuration information accessible by the switch, ef6000PortAdmStatus is then changed to either the online(1) or testing(3) states, or remains in the offline state.')
ef6000PortConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("lc", 2), ("mt-rj", 3), ("mu", 4), ("internal-port", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortConnector.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortConnector.setDescription('Supported connector types of the port.')
ef6000PortDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortDistance.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortDistance.setDescription('A bit map to represent distance types of the Port. bit 0 unknown bit 1-3 reserved bit 4 long distance (l) bit 5 intermediate distance (i) bit 6 short distance (s) bit 7 very long distance')
ef6000PortType = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("longDistance", 2), ("longWaveLaser-LL", 3), ("shortWaveLaser-OFC", 4), ("shortWaveLaser-noOFC", 5), ("longWaveLaser-LC", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortType.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortType.setDescription('Supported transceiver types of the port.')
ef6000PortMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortMedia.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortMedia.setDescription('A bit map to represent transmission media of the port. bit 0 single mode (sm) bit 1 reserved bit 2 multi-mode, 50m (m5) bit 3 multi-mode, 62.5 (m6) bit 4-6 reserved bit 7 copper')
ef6000PortSpeedCap = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortSpeedCap.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortSpeedCap.setDescription('A bit map to represent the speed of optical transceiver. bit 0 100 MBytes/Sec bit 1 reserved bit 2 200 MBytes/Sec bit 3 reserved bit 4 400 MBytes/Sec bit 5-7 reserved')
ef6000PortConfigSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("one-gig", 1), ("two-gig", 2), ("negotiate", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortConfigSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortConfigSpeed.setDescription('The configured port speed.')
ef6000PortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("one-gig", 2), ("two-gig", 3), ("negotiate", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortSpeed.setDescription('The current operating speed of the port.')
ef6000PortTxWords32 = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortTxWords32.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortTxWords32.setDescription('A 32 bit counter for the number of words within frames that the port has transmitted. (Primitive signals and primitive sequence are not included.)')
ef6000PortRxWords32 = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortRxWords32.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortRxWords32.setDescription('A 32 bit counter for the number of words within frames that the port has received. (Primitive signals and primitive sequence are not included.)')
ef6000PortTxFrames32 = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortTxFrames32.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortTxFrames32.setDescription('A 32 bit counter for the number of (Fibre Channel) frames that the port has transmitted.')
ef6000PortRxFrames32 = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortRxFrames32.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortRxFrames32.setDescription('A 32 bit counter for the number of (Fibre Channel) frames that the port has received.')
ef6000PortTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortTxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortTxThroughput.setDescription('The Bps (bytes per second) transmission rate of the port.')
ef6000PortRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortRxThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortRxThroughput.setDescription('The Bps (bytes per second) reception rate of the port.')
ef6000PortTxC2Words32 = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortTxC2Words32.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortTxC2Words32.setDescription('A 32 bit counter for the number of class 2 4-byte words that the port has transmitted. (Primitive signals and primitive sequence are not included.)')
ef6000PortRxC2Words32 = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortRxC2Words32.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortRxC2Words32.setDescription('A 32 bit counter for the number of class 2 4-byte words that the port has received. (Primitive signals and primitive sequence are not included.)')
ef6000PortTxC2Frames32 = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortTxC2Frames32.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortTxC2Frames32.setDescription('A 32 bit counter for the number of Class 2 frames that the port has transmitted.')
ef6000PortRxC2Frames32 = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortRxC2Frames32.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortRxC2Frames32.setDescription('A 32 bit counter for the number of Class 2 frames that the port has received.')
ef6000PortTxC2Octets32 = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortTxC2Octets32.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortTxC2Octets32.setDescription('A 32 bit counter for the number of Class 2 Octets that the port has transmitted.')
ef6000PortRxC2Octets32 = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortRxC2Octets32.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortRxC2Octets32.setDescription('A 32 bit counter for the number of Class 2 Octets that the port has received.')
ef6000PortTxC3Words32 = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortTxC3Words32.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortTxC3Words32.setDescription('A 32 bit counter for the number of class 3 4-byte words that the port has transmitted. (Primitive signals and primitive sequence are not included.)')
ef6000PortRxC3Words32 = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortRxC3Words32.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortRxC3Words32.setDescription('A 32 bit counter for the number of class 3 4-byte words that the port has received. (Primitive signals and primitive sequence are not included.)')
ef6000PortTxC3Frames32 = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortTxC3Frames32.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortTxC3Frames32.setDescription('A 32 bit counter for the number of Class 3 frames that the port has transmitted.')
ef6000PortRxC3Frames32 = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortRxC3Frames32.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortRxC3Frames32.setDescription('A 32 bit counter for the number of Class 3 frames that the port has received.')
ef6000PortTxC3Octets32 = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortTxC3Octets32.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortTxC3Octets32.setDescription('A 32 bit counter for the number of Class 3 Octets that the port has transmitted.')
ef6000PortRxC3Octets32 = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortRxC3Octets32.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortRxC3Octets32.setDescription('A 32 bit counter for the number of Class 3 Octets that the port has received.')
ef6000PortC3Discards32 = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortC3Discards32.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortC3Discards32.setDescription('A 32 bit counter for the number of Class 3 frames that the port has discarded.')
ef6000PortDiscardFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortDiscardFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortDiscardFrames.setDescription('The number of frames that the port has discarded.')
ef6000PortTxLinkResets = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortTxLinkResets.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortTxLinkResets.setDescription('The number of link resets initiated by this switch port.')
ef6000PortRxLinkResets = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortRxLinkResets.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortRxLinkResets.setDescription('The number of link resets initiated by the attached N_port.')
ef6000PortTxOLSs = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortTxOLSs.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortTxOLSs.setDescription('The number of offline sequences initiated by this switch port.')
ef6000PortRxOLSs = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortRxOLSs.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortRxOLSs.setDescription('The number of offline sequences initiated by the attached N_port.')
ef6000PortSyncLosses = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortSyncLosses.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortSyncLosses.setDescription('The number of loss of synchronization timeout.')
ef6000PortSigLosses = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortSigLosses.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortSigLosses.setDescription('The number of times that a Loss of Signal is detected.')
ef6000PortProtocolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortProtocolErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortProtocolErrors.setDescription('The number of protocol errors detected.')
ef6000PortInvalidTxWords = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortInvalidTxWords.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortInvalidTxWords.setDescription('The number of Invalid Transmission words that the port has received.')
ef6000PortLinkFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortLinkFailures.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortLinkFailures.setDescription('The number of transitions to an LFx state.')
ef6000PortCrcs = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortCrcs.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortCrcs.setDescription('The number of CRC errors detected from frames received.')
ef6000PortTruncs = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortTruncs.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortTruncs.setDescription('The number of frames shorter than the Fibre Channel minimum.')
ef6000PortTxWords64 = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 67), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortTxWords64.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortTxWords64.setDescription('A 64 bit counter for the number of words within frames that the port has transmitted. (Primitive signals and primitive sequence are not included.)')
ef6000PortRxWords64 = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 68), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortRxWords64.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortRxWords64.setDescription('A 64 bit counter for the number of words within frames that the port has received. (Primitive signals and primitive sequence are not included.)')
ef6000PortTxFrames64 = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 69), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortTxFrames64.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortTxFrames64.setDescription('A 64 bit counter for the number of (Fibre Channel) frames that the port has transmitted.')
ef6000PortRxFrames64 = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 70), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortRxFrames64.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortRxFrames64.setDescription('A 64 bit counter for the number of (Fibre Channel) frames that the port has received.')
ef6000PortTxC2Words64 = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 71), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortTxC2Words64.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortTxC2Words64.setDescription('A 64 bit counter for the number of class 2 4-byte words that the port has transmitted. (Primitive signals and primitive sequence are not included.)')
ef6000PortRxC2Words64 = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 72), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortRxC2Words64.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortRxC2Words64.setDescription('A 64 bit counter for the number of class 2 4-byte words that the port has received. (Primitive signals and primitive sequence are not included.)')
ef6000PortTxC2Frames64 = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 73), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortTxC2Frames64.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortTxC2Frames64.setDescription('A 64 bit counter for the number of Class 2 frames that the port has transmitted.')
ef6000PortRxC2Frames64 = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 74), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortRxC2Frames64.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortRxC2Frames64.setDescription('A 64 bit counter for the number of Class 2 frames that the port has received.')
ef6000PortTxC2Octets64 = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 75), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortTxC2Octets64.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortTxC2Octets64.setDescription('A 64 bit counter for the number of Class 2 Octets that the port has transmitted.')
ef6000PortRxC2Octets64 = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 76), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortRxC2Octets64.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortRxC2Octets64.setDescription('A 64 bit counter for the number of Class 2 Octets that the port has received.')
ef6000PortTxC3Words64 = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 77), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortTxC3Words64.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortTxC3Words64.setDescription('A 64 bit counter for the number of class 3 4-byte words that the port has transmitted. (Primitive signals and primitive sequence are not included.)')
ef6000PortRxC3Words64 = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 78), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortRxC3Words64.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortRxC3Words64.setDescription('A 64 bit counter for the number of class 3 4-byte words that the port has received. (Primitive signals and primitive sequence are not included.)')
ef6000PortTxC3Frames64 = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 79), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortTxC3Frames64.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortTxC3Frames64.setDescription('A 64 bit counter for the number of Class 3 frames that the port has transmitted.')
ef6000PortRxC3Frames64 = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 80), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortRxC3Frames64.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortRxC3Frames64.setDescription('A 64 bit counter for the number of Class 3 frames that the port has received.')
ef6000PortTxC3Octets64 = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 81), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortTxC3Octets64.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortTxC3Octets64.setDescription('A 64 bit counter for the number of Class 3 Octets that the port has transmitted.')
ef6000PortRxC3Octets64 = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 82), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortRxC3Octets64.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortRxC3Octets64.setDescription('A 64 bit counter for the number of Class 3 Octets that the port has received.')
ef6000PortC3Discards64 = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 3, 1, 1, 83), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortC3Discards64.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortC3Discards64.setDescription('A 64 bit counter for the number of Class 3 frames that the port has discarded.')
ef6000PortBindingTable = MibTable((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 4, 1), )
if mibBuilder.loadTexts: ef6000PortBindingTable.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortBindingTable.setDescription('A table that contains one entry for each switch port.')
ef6000PortBindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 4, 1, 1), ).setIndexNames((0, "EF-6000-MIB", "ef6000PortBindingIndex"))
if mibBuilder.loadTexts: ef6000PortBindingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortBindingEntry.setDescription('An entry containing the port binding information of the switch port.')
ef6000PortBindingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 4, 1, 1, 1), Ef6000PortIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortBindingIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortBindingIndex.setDescription('The fixed physical port number on the switch. It ranges from 1 to the number of physical ports that can be supported in the switch.')
ef6000PortBindingFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ef6000PortBindingFlag.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortBindingFlag.setDescription('The flag indicates whether or not Port Binding is in effect for an individual port.')
ef6000PortConfiguredWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 4, 1, 1, 3), Ef6000PortWWN()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ef6000PortConfiguredWWN.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortConfiguredWWN.setDescription('The authorized port WWN for attached servers and storage systems (F ports), or the authorized switch WWN for attached switches (E ports).')
ef6000PortAttachedWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 4, 1, 1, 4), Ef6000PortWWN()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000PortAttachedWWN.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000PortAttachedWWN.setDescription('The WWN of the device currently attached to the port whether it has successfully connected or is currently being rejected due to a Port Binding violation.')
ef6000ActiveZoneSetName = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 5, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000ActiveZoneSetName.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000ActiveZoneSetName.setDescription('The active zone set name. This value will return NULL if the active zone set state is disabled')
ef6000ActiveZoneCount = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000ActiveZoneCount.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000ActiveZoneCount.setDescription('The number of zones in the active zone set. This value will return 0 if the active zone set state is disabled')
ef6000DefaultZoneSetState = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000DefaultZoneSetState.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000DefaultZoneSetState.setDescription('The set state of the default zone set (1=Enabled,2= Disabled).')
ef6000ActiveZoneSetState = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000ActiveZoneSetState.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000ActiveZoneSetState.setDescription('The state of the active zone set. If the active zone set state is disabled, then ActiveZoneSetName and ActiveZoneSetCount are invalid (1=Enabled,2= Disabled). ')
ef6000HardwareEnforcedZoning = MibScalar((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000HardwareEnforcedZoning.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000HardwareEnforcedZoning.setDescription('Indicates if zoning is hardware enforced (1=Yes, 2=No).')
ef6000ActiveZoneTable = MibTable((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 5, 6), )
if mibBuilder.loadTexts: ef6000ActiveZoneTable.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000ActiveZoneTable.setDescription('A table that contains one entry for each zone in the active zone set.')
ef6000ActiveZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 5, 6, 1), ).setIndexNames((0, "EF-6000-MIB", "ef6000ZoneIndex"))
if mibBuilder.loadTexts: ef6000ActiveZoneEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000ActiveZoneEntry.setDescription('An entry containing the information specific to a zone.')
ef6000ZoneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 5, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000ZoneIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000ZoneIndex.setDescription('Zone index number. This number will range from 1 to the number of zones specified by the ActiveZoneCount. ')
ef6000ZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 5, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000ZoneName.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000ZoneName.setDescription('This object is the name of this zone entry.')
ef6000ZoneMemberCount = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 5, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000ZoneMemberCount.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000ZoneMemberCount.setDescription('This object contains a count of the number of members in this zone entry.')
ef6000ActiveMemberTable = MibTable((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 5, 7), )
if mibBuilder.loadTexts: ef6000ActiveMemberTable.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000ActiveMemberTable.setDescription('A table that contains one entry for each member in the active zone set.')
ef6000ActiveMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 5, 7, 1), ).setIndexNames((0, "EF-6000-MIB", "ef6000MemberZoneIndex"), (0, "EF-6000-MIB", "ef6000MemberIndex"))
if mibBuilder.loadTexts: ef6000ActiveMemberEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000ActiveMemberEntry.setDescription('An entry containing the information specific to a member.')
ef6000MemberZoneIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 5, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000MemberZoneIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000MemberZoneIndex.setDescription('The index of the zone that this member belongs to. This is the same value as ef6000ZoneIndex.')
ef6000MemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 5, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000MemberIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000MemberIndex.setDescription('Member index number. This number will range from 1 to the number of members specified by the corresponding ZoneMemberCount. ')
ef6000MemberType = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 5, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("wwn", 1), ("portnumber", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000MemberType.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000MemberType.setDescription('This object is the type of addressing that is associated with this member.')
ef6000MemberWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 5, 7, 1, 4), Ef6000PortWWN()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000MemberWWN.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000MemberWWN.setDescription('The WWN name as an 8-octet string. This value is only valid if the member type is 1, otherwise it will return all zeros.')
ef6000MemberDomainID = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 5, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000MemberDomainID.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000MemberDomainID.setDescription('The domain ID. This value is only valid if the member type is 2, otherwise it will return NULL.')
ef6000MemberPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 5, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000MemberPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000MemberPortNumber.setDescription('The port number. This value is only valid if the member type is 2, otherwise it will return NULL.')
ef6000TATable = MibTable((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 6, 1), )
if mibBuilder.loadTexts: ef6000TATable.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000TATable.setDescription('A table that contains one entry for each configured threshold alert.')
ef6000TAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 6, 1, 1), ).setIndexNames((0, "EF-6000-MIB", "ef6000TAIndex"))
if mibBuilder.loadTexts: ef6000TAEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000TAEntry.setDescription('An entry containing a threshold alert configuration.')
ef6000TAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000TAIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000TAIndex.setDescription('This object is used to identify which threshold has been triggered.')
ef6000TAName = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000TAName.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000TAName.setDescription('The threshold alert name.')
ef6000TAState = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000TAState.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000TAState.setDescription('The current state of the threshold.')
ef6000TAType = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("throughput", 1), ("counter", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000TAType.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000TAType.setDescription('The type of the threshold.')
ef6000TAPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("list", 1), ("ePorts", 2), ("fPorts", 3), ("flPorts", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000TAPortType.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000TAPortType.setDescription('A threshold can be set on a list of physical port numbers or on all the ports of the specified type (ePorts, fPorts).')
ef6000TAPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 6, 1, 1, 6), Ef6000PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000TAPortList.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000TAPortList.setDescription('A bit map that identifies which ports this threhold alert applies to (only valid if the Threshold Alert Port Type = list). The left most bit represents the port 0.')
ef6000TAInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 6, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000TAInterval.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000TAInterval.setDescription('The number of minutes in a threshold alert interval.')
ef6000TATriggerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 6, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000TATriggerValue.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000TATriggerValue.setDescription('If the alert type is a Throughput Threshold Alert, then this is the percent utilization (1-100) required to trigger an alert. If the alert type is a Counter Threshold Alert, then this is the counter delta required to trigger an alert.')
ef6000TTADirection = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("transmit", 1), ("receive", 2), ("either", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000TTADirection.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000TTADirection.setDescription('This only applies when the alert type is a Throughput Threshold Alert. It specifies the throughput direction of the threshold.')
ef6000TTATriggerDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 6, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000TTATriggerDuration.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000TTATriggerDuration.setDescription('This only applies when the alert type is a Throughput Threshold Alert. It specifies the amount of time during a threshold alert interval that the trigger must be exceeded before an alert is generated.')
ef6000CTACounter = MibTableColumn((1, 3, 6, 1, 4, 1, 289, 2, 1, 1, 2, 6, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ef6000CTACounter.setStatus('mandatory')
if mibBuilder.loadTexts: ef6000CTACounter.setDescription('This only applies when the alert type is a Counter Threshold Alert. It specifies statistical counter or counter set to be monitored. (This object is not supported in the current release.)')
ef6000PortScn = NotificationType((1, 3, 6, 1, 4, 1, 289) + (0,1)).setObjects(("EF-6000-MIB", "ef6000PortOpStatus"))
if mibBuilder.loadTexts: ef6000PortScn.setDescription('An ef6000PortScn(1) is generated whenever a Fc_Port changes its operational state. For instance, the Fc_Port goes from on-line to offline.')
ef6000FruScn = NotificationType((1, 3, 6, 1, 4, 1, 289) + (0,2)).setObjects(("EF-6000-MIB", "ef6000FruStatus"))
if mibBuilder.loadTexts: ef6000FruScn.setDescription('An ef6000FruScn(2) is generated whenever a FRU status changes its operational state.')
ef6000PortBindingViolation = NotificationType((1, 3, 6, 1, 4, 1, 289) + (0,3)).setObjects(("EF-6000-MIB", "ef6000PortAttachedWWN"))
if mibBuilder.loadTexts: ef6000PortBindingViolation.setDescription('An ef6000PortBindingViolation(3) is generated whenever the switch detects that a port binding violation occurs.')
ef6000ThresholdAlert = NotificationType((1, 3, 6, 1, 4, 1, 289) + (0,4)).setObjects(("EF-6000-MIB", "ef6000PortIndex"), ("EF-6000-MIB", "ef6000TAIndex"))
if mibBuilder.loadTexts: ef6000ThresholdAlert.setDescription('An ef6000ThresholdAlert(4) is generated whenever a threshold alert occurs.')
mibBuilder.exportSymbols("EF-6000-MIB", ef6000TA=ef6000TA, ef6000SysEcLevel=ef6000SysEcLevel, ef6000PortBindingTable=ef6000PortBindingTable, ef6000SysModelNum=ef6000SysModelNum, Ef6000PortList=Ef6000PortList, ef6000SysFirmwareVersion=ef6000SysFirmwareVersion, Ef6000PortIndex=Ef6000PortIndex, ef6000SysBootDate=ef6000SysBootDate, fcSwitch=fcSwitch, ef6000PortScn=ef6000PortScn, ef6000TAIndex=ef6000TAIndex, ef6000SysAdmStatus=ef6000SysAdmStatus, ef6000PortTxC2Frames64=ef6000PortTxC2Frames64, ef6000PortRxC2Octets64=ef6000PortRxC2Octets64, ef6000TAPortList=ef6000TAPortList, ef6000PortRxC3Words32=ef6000PortRxC3Words32, ef6000FruPosition=ef6000FruPosition, ef6000Zoning=ef6000Zoning, ef6000Port=ef6000Port, ef6000PortRxOLSs=ef6000PortRxOLSs, ef6000PortConfiguredWWN=ef6000PortConfiguredWWN, ef6000FruPartNumber=ef6000FruPartNumber, ef6000PortAdmStatus=ef6000PortAdmStatus, ef6000PortConfigSpeed=ef6000PortConfigSpeed, ef6000PortBindingViolation=ef6000PortBindingViolation, ef6000PortRxC3Frames64=ef6000PortRxC3Frames64, ef6000PortTxC3Words64=ef6000PortTxC3Words64, ef6000PortLinkFailures=ef6000PortLinkFailures, ef6000PortTxC3Frames64=ef6000PortTxC3Frames64, ef6000FruStatus=ef6000FruStatus, ef6000TAInterval=ef6000TAInterval, ef6000PortTxWords32=ef6000PortTxWords32, ef6000PortDiscardFrames=ef6000PortDiscardFrames, ef6000PortBindingIndex=ef6000PortBindingIndex, ef6000CTACounter=ef6000CTACounter, ef6000ZoneMemberCount=ef6000ZoneMemberCount, ef6000Sys=ef6000Sys, DisplayString=DisplayString, ef6000PortRxC2Words32=ef6000PortRxC2Words32, ef6000PortC3Discards32=ef6000PortC3Discards32, Ef6000FruPosition=Ef6000FruPosition, ef6000ActiveMemberTable=ef6000ActiveMemberTable, ef6000PortRxLinkResets=ef6000PortRxLinkResets, ef6000PortRxC2Frames32=ef6000PortRxC2Frames32, ef6000MemberPortNumber=ef6000MemberPortNumber, ef6000FruCode=ef6000FruCode, Ef6000PortWWN=Ef6000PortWWN, ef6000FruPowerOnHours=ef6000FruPowerOnHours, ef6000ActiveZoneSetName=ef6000ActiveZoneSetName, ef6000PortRxFrames32=ef6000PortRxFrames32, ef6000PortRxFrames64=ef6000PortRxFrames64, ef6000MemberZoneIndex=ef6000MemberZoneIndex, ef6000SysSerialNum=ef6000SysSerialNum, ef6000PortRxC3Octets32=ef6000PortRxC3Octets32, ef6000SysPlantOfMfg=ef6000SysPlantOfMfg, ef6000SysTypeNum=ef6000SysTypeNum, ef6000PortTxC3Words32=ef6000PortTxC3Words32, ef6000PortTxThroughput=ef6000PortTxThroughput, ef6000PortTxC2Octets32=ef6000PortTxC2Octets32, ef6000PortRxC3Octets64=ef6000PortRxC3Octets64, ef6000PortRxWords64=ef6000PortRxWords64, ef6000PortRxC3Frames32=ef6000PortRxC3Frames32, ef6000PortTxC3Octets64=ef6000PortTxC3Octets64, ef6000TTATriggerDuration=ef6000TTATriggerDuration, ef6000ThresholdAlert=ef6000ThresholdAlert, ef6000HardwareEnforcedZoning=ef6000HardwareEnforcedZoning, ef6000ZoneIndex=ef6000ZoneIndex, ef6000MemberType=ef6000MemberType, ef6000Fru=ef6000Fru, ef6000MemberDomainID=ef6000MemberDomainID, ef6000PortTxC2Words32=ef6000PortTxC2Words32, ef6000TTADirection=ef6000TTADirection, ef6000PortTxLinkResets=ef6000PortTxLinkResets, ef6000PortRxC3Words64=ef6000PortRxC3Words64, ef6000ActiveMemberEntry=ef6000ActiveMemberEntry, ef6000PortSpeedCap=ef6000PortSpeedCap, ef_6000=ef_6000, ef6000PortBinding=ef6000PortBinding, ef6000PortTable=ef6000PortTable, ef6000PortType=ef6000PortType, ef6000PortEntry=ef6000PortEntry, ef6000PortCrcs=ef6000PortCrcs, ef6000PortTxC2Frames32=ef6000PortTxC2Frames32, Ef6000FruCode=Ef6000FruCode, ef6000ActiveZoneCount=ef6000ActiveZoneCount, ef6000TAState=ef6000TAState, ef6000PortProtocolErrors=ef6000PortProtocolErrors, ef6000ActiveZoneTable=ef6000ActiveZoneTable, ef6000PortRxC2Frames64=ef6000PortRxC2Frames64, ef6000SysCurrentDate=ef6000SysCurrentDate, ef6000TATable=ef6000TATable, ef6000PortAttachedWWN=ef6000PortAttachedWWN, ef6000FruSerialNumber=ef6000FruSerialNumber, ef6000PortConnector=ef6000PortConnector, ef6000PortBindingEntry=ef6000PortBindingEntry, ef6000PortTxFrames64=ef6000PortTxFrames64, ef6000PortInvalidTxWords=ef6000PortInvalidTxWords, ef6000PortTxC2Words64=ef6000PortTxC2Words64, ef6000PortOpStatus=ef6000PortOpStatus, ef6000PortMedia=ef6000PortMedia, ef6000PortRxThroughput=ef6000PortRxThroughput, ef6000PortTxFrames32=ef6000PortTxFrames32, ef6000MemberIndex=ef6000MemberIndex, ef6000PortPhyState=ef6000PortPhyState, mcData=mcData, ef6000PortSpeed=ef6000PortSpeed, fibreChannel=fibreChannel, ef6000PortTxOLSs=ef6000PortTxOLSs, ef6000PortBindingFlag=ef6000PortBindingFlag, commDev=commDev, ef6000SysMfg=ef6000SysMfg, ef6000PortDistance=ef6000PortDistance, ef6000TAType=ef6000TAType, ef6000PortTxC3Octets32=ef6000PortTxC3Octets32, ef6000TAName=ef6000TAName, ef6000ActiveZoneSetState=ef6000ActiveZoneSetState, ef6000FruTestDate=ef6000FruTestDate, ef6000FruScn=ef6000FruScn, ef6000PortIndex=ef6000PortIndex, ef6000PortRxC2Words64=ef6000PortRxC2Words64, ef6000SysState=ef6000SysState, ef6000SysConfigSpeed=ef6000SysConfigSpeed, ef6000PortTxC3Frames32=ef6000PortTxC3Frames32, ef6000FruEntry=ef6000FruEntry, Ef6000PortPhyState=Ef6000PortPhyState, ef6000PortC3Discards64=ef6000PortC3Discards64, ef6000PortRxC2Octets32=ef6000PortRxC2Octets32, ef6000FruTable=ef6000FruTable, ef6000SysOperStatus=ef6000SysOperStatus, ef6000PortSyncLosses=ef6000PortSyncLosses, ef6000PortSigLosses=ef6000PortSigLosses, ef6000ActiveZoneEntry=ef6000ActiveZoneEntry, ef6000ZoneName=ef6000ZoneName, ef6000PortTxWords64=ef6000PortTxWords64, ef6000DefaultZoneSetState=ef6000DefaultZoneSetState, ef6000PortRxWords32=ef6000PortRxWords32, ef6000TAEntry=ef6000TAEntry, ef6000PortTxC2Octets64=ef6000PortTxC2Octets64, ef6000PortTruncs=ef6000PortTruncs, ef6000TAPortType=ef6000TAPortType, Ef6000SysOperStatus=Ef6000SysOperStatus, ef6000MemberWWN=ef6000MemberWWN, ef6000TATriggerValue=ef6000TATriggerValue)
