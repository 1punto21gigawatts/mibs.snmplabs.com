#
# PySNMP MIB module NETSCREEN-CHASSIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETSCREEN-CHASSIS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:20:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
netscreen, = mibBuilder.importSymbols("NETSCREEN-SMI", "netscreen")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, iso, Counter64, Unsigned32, Integer32, MibIdentifier, Bits, ObjectIdentity, IpAddress, Counter32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "iso", "Counter64", "Unsigned32", "Integer32", "MibIdentifier", "Bits", "ObjectIdentity", "IpAddress", "Counter32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
netscreenChassis = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 21))
if mibBuilder.loadTexts: netscreenChassis.setLastUpdated('200705080000Z')
if mibBuilder.loadTexts: netscreenChassis.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: netscreenChassis.setContactInfo('Customer Support 1194 North Mathilda Avenue Sunnyvale, California 94089-1206 USA Tel: 1-800-638-8296 E-mail: customerservice@juniper.net HTTP://www.juniper.net')
if mibBuilder.loadTexts: netscreenChassis.setDescription('This module defines the objects that are used to monitor device status such as Battery, Fan, Power and Temperature')
nsPowerTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 21, 1), )
if mibBuilder.loadTexts: nsPowerTable.setStatus('current')
if mibBuilder.loadTexts: nsPowerTable.setDescription('Information describing installed power supply modules and their status')
nsPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 21, 1, 1), ).setIndexNames((0, "NETSCREEN-CHASSIS-MIB", "nsPowerId"))
if mibBuilder.loadTexts: nsPowerEntry.setStatus('current')
if mibBuilder.loadTexts: nsPowerEntry.setDescription('Information describing one power supply module and its status')
nsPowerId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 21, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPowerId.setStatus('current')
if mibBuilder.loadTexts: nsPowerId.setDescription('A 32-bit integer uniquely identifying the power supply id. For 5400, range is 1~3, For 5200, range is 1~2')
nsPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 21, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPowerStatus.setStatus('current')
if mibBuilder.loadTexts: nsPowerStatus.setDescription("A 32-bit integer uniquely identifying the power supply module's status: 0. Fail 1. Good 2. Not installed")
nsPowerDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 21, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsPowerDesc.setStatus('current')
if mibBuilder.loadTexts: nsPowerDesc.setDescription('A description for the power supply module')
nsFanTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 21, 2), )
if mibBuilder.loadTexts: nsFanTable.setStatus('current')
if mibBuilder.loadTexts: nsFanTable.setDescription('Information describing the installed Fan modules and their status')
nsFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 21, 2, 1), ).setIndexNames((0, "NETSCREEN-CHASSIS-MIB", "nsFanId"))
if mibBuilder.loadTexts: nsFanEntry.setStatus('current')
if mibBuilder.loadTexts: nsFanEntry.setDescription('Information describing one installed Fan module and its status')
nsFanId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 21, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsFanId.setStatus('current')
if mibBuilder.loadTexts: nsFanId.setDescription('A 32-bit integer uniquely identifying the Fan id. At the time of this writing.')
nsFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 21, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsFanStatus.setStatus('current')
if mibBuilder.loadTexts: nsFanStatus.setDescription("A 32-bit integer uniquely identifying the Fan module's status: 0. Fail 1. Good ")
nsFanDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 21, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsFanDesc.setStatus('current')
if mibBuilder.loadTexts: nsFanDesc.setDescription('A description for the Fan module')
sysBatteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 3224, 21, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBatteryStatus.setStatus('current')
if mibBuilder.loadTexts: sysBatteryStatus.setDescription('Information describing the installed Battery and its status: 1. Good 2. Error ')
nsTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 21, 4), )
if mibBuilder.loadTexts: nsTemperatureTable.setStatus('current')
if mibBuilder.loadTexts: nsTemperatureTable.setDescription('Information describing the temperature measured by each module')
nsTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 21, 4, 1), ).setIndexNames((0, "NETSCREEN-CHASSIS-MIB", "nsTemperatureId"))
if mibBuilder.loadTexts: nsTemperatureEntry.setStatus('current')
if mibBuilder.loadTexts: nsTemperatureEntry.setDescription('The temperature measured by a module')
nsTemperatureId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 21, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsTemperatureId.setStatus('current')
if mibBuilder.loadTexts: nsTemperatureId.setDescription('A 32-bit integer uniquely identifying temperature measured on a board or on a component e.g. CPU')
nsTemperatureSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 21, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsTemperatureSlotId.setStatus('current')
if mibBuilder.loadTexts: nsTemperatureSlotId.setDescription('A 32-bit integer uniquely identifying the slot where the temperature is measured. ')
nsTemperatureCur = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 21, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsTemperatureCur.setStatus('current')
if mibBuilder.loadTexts: nsTemperatureCur.setDescription('The current temperature measured by the module, unit is Celsius')
nsTemperatureDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 21, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsTemperatureDesc.setStatus('current')
if mibBuilder.loadTexts: nsTemperatureDesc.setDescription('A description for the module')
nsSlotTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 21, 5), )
if mibBuilder.loadTexts: nsSlotTable.setStatus('current')
if mibBuilder.loadTexts: nsSlotTable.setDescription('Information describing the installed management and traffic processing modules and their status, built-in and internal module are also listed here. ')
nsSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 21, 5, 1), ).setIndexNames((0, "NETSCREEN-CHASSIS-MIB", "nsSlotId"), (0, "NETSCREEN-CHASSIS-MIB", "nsSubSlotId"))
if mibBuilder.loadTexts: nsSlotEntry.setStatus('current')
if mibBuilder.loadTexts: nsSlotEntry.setDescription('Information describing one installed module and its status')
nsSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 21, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSlotId.setStatus('current')
if mibBuilder.loadTexts: nsSlotId.setDescription('A 32-bit integer uniquely identifying the slot id. The range varies on different platforms ')
nsSlotType = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 21, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSlotType.setStatus('current')
if mibBuilder.loadTexts: nsSlotType.setDescription('A description of the installed module')
nsSlotStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 21, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSlotStatus.setStatus('current')
if mibBuilder.loadTexts: nsSlotStatus.setDescription('Slot status')
nsSlotSN = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 21, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsSlotSN.setStatus('current')
if mibBuilder.loadTexts: nsSlotSN.setDescription('Serial Number of the module')
mibBuilder.exportSymbols("NETSCREEN-CHASSIS-MIB", sysBatteryStatus=sysBatteryStatus, nsTemperatureSlotId=nsTemperatureSlotId, nsPowerDesc=nsPowerDesc, nsFanDesc=nsFanDesc, nsSlotEntry=nsSlotEntry, nsSlotId=nsSlotId, nsTemperatureEntry=nsTemperatureEntry, nsSlotStatus=nsSlotStatus, nsPowerStatus=nsPowerStatus, nsTemperatureCur=nsTemperatureCur, nsFanId=nsFanId, nsSlotTable=nsSlotTable, nsTemperatureId=nsTemperatureId, nsPowerEntry=nsPowerEntry, netscreenChassis=netscreenChassis, PYSNMP_MODULE_ID=netscreenChassis, nsPowerId=nsPowerId, nsFanEntry=nsFanEntry, nsTemperatureTable=nsTemperatureTable, nsFanTable=nsFanTable, nsFanStatus=nsFanStatus, nsSlotSN=nsSlotSN, nsSlotType=nsSlotType, nsPowerTable=nsPowerTable, nsTemperatureDesc=nsTemperatureDesc)
