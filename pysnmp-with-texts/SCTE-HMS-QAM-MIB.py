#
# PySNMP MIB module SCTE-HMS-QAM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SCTE-HMS-QAM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:01:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
QAMChannelModulationFormat, QAMChannelInterleaveMode = mibBuilder.importSymbols("SCTE-HMS-HEADENDIDENT-TC-MIB", "QAMChannelModulationFormat", "QAMChannelInterleaveMode")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
enterprises, iso, Unsigned32, MibIdentifier, Bits, TimeTicks, Counter32, Gauge32, ObjectIdentity, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, IpAddress, Integer32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "iso", "Unsigned32", "MibIdentifier", "Bits", "TimeTicks", "Counter32", "Gauge32", "ObjectIdentity", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "IpAddress", "Integer32", "Counter64")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
heDigitalQamMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 5591, 1, 11, 5, 3, 1))
heDigitalQamMIB.setRevisions(('2008-07-16 03:05', '2008-04-18 10:55', '2008-02-04 18:50', '2007-12-17 11:50', '2007-10-03 17:00', '2007-10-02 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: heDigitalQamMIB.setRevisionsDescriptions(('Updated Objects based on Comments at 7/11/08 meeting. 1. Made QAMChannelInterleave mode an imported enumeration and used the values from the docsiFDownChannelInterleave enumeration. 2. Changed name of QAMModulationFormat to QAMChannelModulationFormat. 3. Added unknown and other to qamChannelAnnexMode 4. For consistency changed values names for qamChannelCommonOutputBw, qamChannelCommonUtilization to add the word Common to the names. 5. Changed description clause of qamConfigQamChannelIdMin and qamConfigQamChannelIdMax to reference entPhysicalIndex. ', 'Renumbered objects in qamConfigTable to remove gaps.', 'Changes based on comments, 1. Changed description of qamChannelPower. 2. Added units to qamChannelOutputBw. 3. Changed Units on qamChannelUtilization to 0.1 Percent.', 'Changes based on comments, 1. Removed IpAddress import. 2. Changed UNITS,comment, SYNTAX on qamChannelUtilization.', 'Added SCTE-HMS-HEADENDIDENT-TC name to file. Added QAMModulationFormat textual convention.', 'Prepare MIB for ballot.',))
if mibBuilder.loadTexts: heDigitalQamMIB.setLastUpdated('200807160305Z')
if mibBuilder.loadTexts: heDigitalQamMIB.setOrganization('SCTE HMS Working Group')
if mibBuilder.loadTexts: heDigitalQamMIB.setContactInfo('SCTE HMS Subcommittee, Chairman mailto:standards@scte.org ')
if mibBuilder.loadTexts: heDigitalQamMIB.setDescription("This MIB module is for representing Edge QAM equipment present in the headend (or indoor) and is supported by a SNMP agent. It defines QAM channel related configuration MIB objects associated with both QAM channel's physical and logical characteristics. qamChannelTable is optional for devices that are supporting equivalent DOCSIS MIB objects. qamConfigTable is optional and applies to devices that choose to provide logical level configuration. ")
qamMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 5591, 1, 11, 5, 3, 1, 1))
if mibBuilder.loadTexts: qamMIBObjects.setStatus('current')
if mibBuilder.loadTexts: qamMIBObjects.setDescription('This branch specifies the QAM MIB objects.')
qamMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 5591, 1, 11, 5, 3, 1, 2))
if mibBuilder.loadTexts: qamMIBConformance.setStatus('current')
if mibBuilder.loadTexts: qamMIBConformance.setDescription('This branch describes the different QAM MIB object groups and the different level of compliance.')
qamMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 5591, 1, 11, 5, 3, 1, 2, 1))
if mibBuilder.loadTexts: qamMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: qamMIBCompliances.setDescription('The different levels of compliance to the QAM MIB.')
qamMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 5591, 1, 11, 5, 3, 1, 2, 2))
if mibBuilder.loadTexts: qamMIBGroups.setStatus('current')
if mibBuilder.loadTexts: qamMIBGroups.setDescription('The QAM MIB object groups.')
qamChannelTable = MibTable((1, 3, 6, 1, 4, 1, 5591, 1, 11, 5, 3, 1, 1, 1), )
if mibBuilder.loadTexts: qamChannelTable.setStatus('current')
if mibBuilder.loadTexts: qamChannelTable.setDescription('This table describes the configuration and attributes of each QAM channel of the QAM designated by ifIndex.')
qamChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5591, 1, 11, 5, 3, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: qamChannelEntry.setStatus('current')
if mibBuilder.loadTexts: qamChannelEntry.setDescription('There is an entry in the table for each QAM channel. The index to this table is the ifIndex of each QAM channel.')
qamChannelFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 5591, 1, 11, 5, 3, 1, 1, 1, 1, 1), Unsigned32()).setUnits('Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: qamChannelFrequency.setStatus('current')
if mibBuilder.loadTexts: qamChannelFrequency.setDescription('The center frequency of the QAM channel.')
qamChannelModulationFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 5591, 1, 11, 5, 3, 1, 1, 1, 1, 2), QAMChannelModulationFormat()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qamChannelModulationFormat.setStatus('current')
if mibBuilder.loadTexts: qamChannelModulationFormat.setDescription('RF Modululation for this output QAM channel when qamChannelContWaveMode is off.')
qamChannelInterleaverLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 5591, 1, 11, 5, 3, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("level1", 1), ("level2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qamChannelInterleaverLevel.setStatus('current')
if mibBuilder.loadTexts: qamChannelInterleaverLevel.setDescription('The interleaver level for FEC coding. level1 - implies interleaver level 1 level2 - implies interleaver level 2 This object is only valid when AnnexMode has the value annexB.')
qamChannelInterleaverMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5591, 1, 11, 5, 3, 1, 1, 1, 1, 4), QAMChannelInterleaveMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qamChannelInterleaverMode.setReference('ITU-T J.83 Annex B.')
if mibBuilder.loadTexts: qamChannelInterleaverMode.setStatus('current')
if mibBuilder.loadTexts: qamChannelInterleaverMode.setDescription("The interleaving depth or operation mode of the interleaver. 'taps8Increment16': protection 5.9/4.1 usec, latency .22/.15 msec 'taps16Increment8': protection 12/8.2 usec, latency .48/.33 msec 'taps32Increment4': protection 24/16 usec, latency .98/.68 msec 'taps64Increment2': protection 47/33 usec, latency 2/1.4 msec 'taps128Increment1': protection 95/66 usec, latency 4/2.8 msec 'taps12increment17': protection 18/14 usec, latency 0.43/0.32 msec 'taps128increment2': protection 190/132 usec, latency 8/5.6 msec 'taps128increment3': protection 285/198 usec, latency 12/8.4 msec 'taps128increment4': protection 380/264 usec, latency 16/11 msec 'taps128increment5': protection 475/330 usec, latency 20/14 msec 'taps128increment6': protection 570/396 usec, latency 24/17 msec 'taps128increment7: protection 664/462 usec, latency 28/20 msec 'taps128increment8': protection 759/528 usec, latency 32/22 msec The value 'taps12increment17' is supported by EuroDOCSIS cable systems only, and the others by DOCSIS cable systems. If the QAM chammel interface is down, this object either returns the configured value, or the value of 'unknown'. The value of 'other' is returned if the interleave is known but not defined in the above list. When the qamChannelInterleaverLevel is set to 'level 1', a single interleaving depth is supported, namely 'taps128Increment1'. When the qamChannelInterleaverLevel is set to 'level2', all the other interleaving depths are also supported.")
qamChannelPower = MibTableColumn((1, 3, 6, 1, 4, 1, 5591, 1, 11, 5, 3, 1, 1, 1, 1, 5), Integer32()).setUnits('0.1 dBmV').setMaxAccess("readonly")
if mibBuilder.loadTexts: qamChannelPower.setStatus('current')
if mibBuilder.loadTexts: qamChannelPower.setDescription('The output power of the QAM channel. If the QAM channel is muted, value is not valid.')
qamChannelSquelch = MibTableColumn((1, 3, 6, 1, 4, 1, 5591, 1, 11, 5, 3, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unmuted", 1), ("muted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qamChannelSquelch.setStatus('current')
if mibBuilder.loadTexts: qamChannelSquelch.setDescription('Indicates whether the QAM port is muted or not.')
qamChannelContWaveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5591, 1, 11, 5, 3, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cwmOff", 1), ("cwmOn", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qamChannelContWaveMode.setStatus('current')
if mibBuilder.loadTexts: qamChannelContWaveMode.setDescription('Indicates whether Continuous Wave mode is enabled or not for output.')
qamChannelAnnexMode = MibTableColumn((1, 3, 6, 1, 4, 1, 5591, 1, 11, 5, 3, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("annexA", 3), ("annexB", 4), ("annexC", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qamChannelAnnexMode.setStatus('current')
if mibBuilder.loadTexts: qamChannelAnnexMode.setDescription('Specifies the ITU-T standard supported by the QAM channel annexA - standard specified by Annex A of ITU-T J.83 annexB - standard specified by Annex B of ITU-T J.83 annexC - standard specified by Annex C of ITU-T J.83 Other - other standard that may apply.')
qamChannelCommonTable = MibTable((1, 3, 6, 1, 4, 1, 5591, 1, 11, 5, 3, 1, 1, 2), )
if mibBuilder.loadTexts: qamChannelCommonTable.setStatus('current')
if mibBuilder.loadTexts: qamChannelCommonTable.setDescription('This table decribes MPEG and DOCSIS characteristics that are not part of the DOCSIS-IF-MIB.')
qamChannelCommonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5591, 1, 11, 5, 3, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: qamChannelCommonEntry.setStatus('current')
if mibBuilder.loadTexts: qamChannelCommonEntry.setDescription('Each entry of this table describes attributes of an RF channel for both MPEG and DOCSIS QAMs.')
qamChannelCommonOutputBw = MibTableColumn((1, 3, 6, 1, 4, 1, 5591, 1, 11, 5, 3, 1, 1, 2, 1, 1), Integer32()).setUnits('bps').setMaxAccess("readonly")
if mibBuilder.loadTexts: qamChannelCommonOutputBw.setStatus('current')
if mibBuilder.loadTexts: qamChannelCommonOutputBw.setDescription('The QAM channel output bandwidth or capacity.')
qamChannelCommonUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 5591, 1, 11, 5, 3, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 1000), ))).setUnits('0.1 Percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: qamChannelCommonUtilization.setStatus('current')
if mibBuilder.loadTexts: qamChannelCommonUtilization.setDescription('The utilization of the QAM channel in 0.1 percentage. This rate may be calculated as transport stream packets / ( transport stream packets + null packets ). If not applicable, a value of -1 is returned.')
qamConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5591, 1, 11, 5, 3, 1, 1, 3), )
if mibBuilder.loadTexts: qamConfigTable.setStatus('current')
if mibBuilder.loadTexts: qamConfigTable.setDescription("This table is designed to show the IP addresses configuration for the QAM channels, optionally UDP port range, Program Number range associated with QAM channels. Configuring these parameters is necessary when performing session-based provisioning. A session-based provisioning request must conform to the configurations in this table. The QAM channels within an QAM device may be partitioned to support multiple UDP, QAM or ProgramNo ranges. Though it's helpful to partition the QAM channels when the total number of QAM channel increases, this is not a must. This table may also be used to show the reserved UDP ports, or program numbers for special purposes instead of using default ones allowed by hardware, software, or MPEG protocol.")
qamConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5591, 1, 11, 5, 3, 1, 1, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "SCTE-HMS-QAM-MIB", "qamConfigIndex"))
if mibBuilder.loadTexts: qamConfigEntry.setStatus('current')
if mibBuilder.loadTexts: qamConfigEntry.setDescription('Each entry corresponds to the configuration of a QAM channel range.')
qamConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5591, 1, 11, 5, 3, 1, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: qamConfigIndex.setStatus('current')
if mibBuilder.loadTexts: qamConfigIndex.setDescription('The table index.')
qamConfigQamChannelIdMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5591, 1, 11, 5, 3, 1, 1, 3, 1, 2), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: qamConfigQamChannelIdMin.setStatus('current')
if mibBuilder.loadTexts: qamConfigQamChannelIdMin.setDescription('QAMChannelId maybe within a line card or global depending on entPhysicalIndex.')
qamConfigQamChannelIdMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5591, 1, 11, 5, 3, 1, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qamConfigQamChannelIdMax.setStatus('current')
if mibBuilder.loadTexts: qamConfigQamChannelIdMax.setDescription('QAMChannelId maybe within a line card or global depending on entPhysicalIndex.')
qamConfigIPAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 5591, 1, 11, 5, 3, 1, 1, 3, 1, 4), InetAddressType().clone('ipv4')).setMaxAccess("readonly")
if mibBuilder.loadTexts: qamConfigIPAddrType.setStatus('current')
if mibBuilder.loadTexts: qamConfigIPAddrType.setDescription('The type of the program destination address as defined by inetAddressType. The default value is 1 for ipv4(1)')
qamConfigIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5591, 1, 11, 5, 3, 1, 1, 3, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: qamConfigIPAddr.setStatus('current')
if mibBuilder.loadTexts: qamConfigIPAddr.setDescription('IP address of the QAM channel.')
qamConfigUdpPortRangeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5591, 1, 11, 5, 3, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qamConfigUdpPortRangeMin.setStatus('current')
if mibBuilder.loadTexts: qamConfigUdpPortRangeMin.setDescription('The lowest UDP port of the UDP port range that can be used on this QAM channel.')
qamConfigUdpPortRangeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5591, 1, 11, 5, 3, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: qamConfigUdpPortRangeMax.setStatus('current')
if mibBuilder.loadTexts: qamConfigUdpPortRangeMax.setDescription('The highest UDP port of the UDP port range that can be used on this QAM channel.')
qamConfigOutputProgNoMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5591, 1, 11, 5, 3, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: qamConfigOutputProgNoMin.setStatus('current')
if mibBuilder.loadTexts: qamConfigOutputProgNoMin.setDescription('The lowest MPEG output program number that can be used on the QAM channel.')
qamConfigOutputProgNoMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5591, 1, 11, 5, 3, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: qamConfigOutputProgNoMax.setStatus('current')
if mibBuilder.loadTexts: qamConfigOutputProgNoMax.setDescription('The highest MPEG output program number that can be used on the QAM channel.')
qamSupport = ModuleCompliance((1, 3, 6, 1, 4, 1, 5591, 1, 11, 5, 3, 1, 2, 1, 1)).setObjects(("SCTE-HMS-QAM-MIB", "qamChannelGroup"), ("SCTE-HMS-QAM-MIB", "qamConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qamSupport = qamSupport.setStatus('current')
if mibBuilder.loadTexts: qamSupport.setDescription('These objects describe the support level for QAM.')
docsisSupport = ModuleCompliance((1, 3, 6, 1, 4, 1, 5591, 1, 11, 5, 3, 1, 2, 1, 2)).setObjects(("SCTE-HMS-QAM-MIB", "qamMpegDocsisCommonGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsisSupport = docsisSupport.setStatus('current')
if mibBuilder.loadTexts: docsisSupport.setDescription('These objects are not covered by any DOCSIS MIB, but they would need to be supported by a DOCSIS EQAM.')
qamMpegDocsisCommonGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5591, 1, 11, 5, 3, 1, 2, 2, 1)).setObjects(("SCTE-HMS-QAM-MIB", "qamChannelCommonOutputBw"), ("SCTE-HMS-QAM-MIB", "qamChannelCommonUtilization"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qamMpegDocsisCommonGroup = qamMpegDocsisCommonGroup.setStatus('current')
if mibBuilder.loadTexts: qamMpegDocsisCommonGroup.setDescription('These objects are not covered by any DOCSIS MIB. It is legitimate for a DOCSIS QAM to support them.')
qamChannelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5591, 1, 11, 5, 3, 1, 2, 2, 2)).setObjects(("SCTE-HMS-QAM-MIB", "qamChannelFrequency"), ("SCTE-HMS-QAM-MIB", "qamChannelModulationFormat"), ("SCTE-HMS-QAM-MIB", "qamChannelInterleaverLevel"), ("SCTE-HMS-QAM-MIB", "qamChannelInterleaverMode"), ("SCTE-HMS-QAM-MIB", "qamChannelPower"), ("SCTE-HMS-QAM-MIB", "qamChannelSquelch"), ("SCTE-HMS-QAM-MIB", "qamChannelContWaveMode"), ("SCTE-HMS-QAM-MIB", "qamChannelAnnexMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qamChannelGroup = qamChannelGroup.setStatus('current')
if mibBuilder.loadTexts: qamChannelGroup.setDescription('The objects characterizing the RF channel and that may be supported by an equivalent DOCSIS MIB object.')
qamConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5591, 1, 11, 5, 3, 1, 2, 2, 3)).setObjects(("SCTE-HMS-QAM-MIB", "qamConfigQamChannelIdMin"), ("SCTE-HMS-QAM-MIB", "qamConfigQamChannelIdMax"), ("SCTE-HMS-QAM-MIB", "qamConfigIPAddrType"), ("SCTE-HMS-QAM-MIB", "qamConfigIPAddr"), ("SCTE-HMS-QAM-MIB", "qamConfigUdpPortRangeMin"), ("SCTE-HMS-QAM-MIB", "qamConfigUdpPortRangeMax"), ("SCTE-HMS-QAM-MIB", "qamConfigOutputProgNoMin"), ("SCTE-HMS-QAM-MIB", "qamConfigOutputProgNoMax"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    qamConfigGroup = qamConfigGroup.setStatus('current')
if mibBuilder.loadTexts: qamConfigGroup.setDescription('QAM configuration objects.')
mibBuilder.exportSymbols("SCTE-HMS-QAM-MIB", qamConfigUdpPortRangeMin=qamConfigUdpPortRangeMin, qamMIBConformance=qamMIBConformance, qamSupport=qamSupport, qamChannelGroup=qamChannelGroup, docsisSupport=docsisSupport, qamChannelAnnexMode=qamChannelAnnexMode, qamChannelCommonTable=qamChannelCommonTable, qamChannelFrequency=qamChannelFrequency, qamChannelCommonEntry=qamChannelCommonEntry, qamMIBGroups=qamMIBGroups, qamConfigQamChannelIdMax=qamConfigQamChannelIdMax, qamChannelSquelch=qamChannelSquelch, qamConfigIPAddrType=qamConfigIPAddrType, qamChannelCommonUtilization=qamChannelCommonUtilization, qamConfigOutputProgNoMin=qamConfigOutputProgNoMin, qamConfigIPAddr=qamConfigIPAddr, qamMpegDocsisCommonGroup=qamMpegDocsisCommonGroup, qamChannelContWaveMode=qamChannelContWaveMode, PYSNMP_MODULE_ID=heDigitalQamMIB, qamChannelModulationFormat=qamChannelModulationFormat, qamConfigIndex=qamConfigIndex, qamChannelEntry=qamChannelEntry, qamConfigTable=qamConfigTable, qamChannelInterleaverLevel=qamChannelInterleaverLevel, qamChannelPower=qamChannelPower, qamConfigQamChannelIdMin=qamConfigQamChannelIdMin, qamConfigGroup=qamConfigGroup, qamMIBCompliances=qamMIBCompliances, qamChannelCommonOutputBw=qamChannelCommonOutputBw, qamConfigOutputProgNoMax=qamConfigOutputProgNoMax, qamChannelTable=qamChannelTable, heDigitalQamMIB=heDigitalQamMIB, qamChannelInterleaverMode=qamChannelInterleaverMode, qamMIBObjects=qamMIBObjects, qamConfigEntry=qamConfigEntry, qamConfigUdpPortRangeMax=qamConfigUdpPortRangeMax)
