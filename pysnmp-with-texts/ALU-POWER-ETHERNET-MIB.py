#
# PySNMP MIB module ALU-POWER-ETHERNET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALU-POWER-ETHERNET-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:21:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
softentIND1InLinePower, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1InLinePower")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, IpAddress, MibIdentifier, TimeTicks, ObjectIdentity, Bits, Unsigned32, Gauge32, ModuleIdentity, iso, Counter64, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "IpAddress", "MibIdentifier", "TimeTicks", "ObjectIdentity", "Bits", "Unsigned32", "Gauge32", "ModuleIdentity", "iso", "Counter64", "NotificationType")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
powerEthernetMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999))
powerEthernetMIB.setRevisions(('2002-12-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: powerEthernetMIB.setRevisionsDescriptions(('Initial version, published as RFC yyyy.',))
if mibBuilder.loadTexts: powerEthernetMIB.setLastUpdated('200212020000Z')
if mibBuilder.loadTexts: powerEthernetMIB.setOrganization('IETF Ethernet Interfaces and Hub MIB Working Group')
if mibBuilder.loadTexts: powerEthernetMIB.setContactInfo(' Chair: Dan Romascanu Avaya Inc. Tel: +972-3-645-8414 Email: dromasca@avaya.com Editor: Avi Berger PowerDsine Inc. Tel: 972-9-7755100 Ext 307 Fax: 972-9-7755120 E-mail: avib@PowerDsine.com ')
if mibBuilder.loadTexts: powerEthernetMIB.setDescription('The MIB module for for managing Powered Devices (PD) or Power Source Equipment (PSE) working according to the IEEE 802.af Powered Ethernet (DTE Power via MDI) standard. The following terms are used throughout this MIB module. For complete formal definitions, the IEEE 802.3 standards should be consulted wherever possible: Group - A recommended, but optional, entity defined by the IEEE 802.3 management standard, in order to support a modular numbering scheme. The classical example allows an implementor to represent field-replaceable units as groups of ports, with the port numbering matching the modular hardware implementation. Port - This entity identifies the port within the group for which this entry contains information. The numbering scheme for ports is implementation specific.')
pethNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 0))
pethObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 1))
pethConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 2))
pethPsePortTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 1, 1), )
if mibBuilder.loadTexts: pethPsePortTable.setStatus('current')
if mibBuilder.loadTexts: pethPsePortTable.setDescription('A table of objects that display and control the power characteristics power Ethernet ports on a Power Source Entity (PSE) device. This group will be implemented in managed power Ethernet switches and mid-span devices.')
pethPsePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 1, 1, 1), ).setIndexNames((0, "ALU-POWER-ETHERNET-MIB", "pethPsePortGroupIndex"), (0, "ALU-POWER-ETHERNET-MIB", "pethPsePortIndex"))
if mibBuilder.loadTexts: pethPsePortEntry.setStatus('current')
if mibBuilder.loadTexts: pethPsePortEntry.setDescription('A set of objects that display and control the power characteristics of a power Ethernet PSE port.')
pethPsePortGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: pethPsePortGroupIndex.setStatus('current')
if mibBuilder.loadTexts: pethPsePortGroupIndex.setDescription('This variable uniquely identifies the group containing the port to which a power Ethernet PSE is connected. Group means box in the stack, module in a rack and the value 1 MUST be used for non-modular devices . pethPseMidSpanGroupCapacity is the number of Mid-Span PSE groups that can be contained within the Mid-Span PSE.')
pethPsePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: pethPsePortIndex.setStatus('current')
if mibBuilder.loadTexts: pethPsePortIndex.setDescription('This variable uniquely identifies the power Ethernet PSE port within group pethPseGroupIndex to which the power Ethernet PSE entry is connected.')
pethPsePortAdminEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pethPsePortAdminEnable.setStatus('current')
if mibBuilder.loadTexts: pethPsePortAdminEnable.setDescription('Enables power supply on this port. Setting this object at a value enable(1) enables power and detection mechanism for this port. Setting this object at a value disable(2) disables power for this port.')
pethPsePortPowerPairsControlAbility = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 1, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pethPsePortPowerPairsControlAbility.setStatus('current')
if mibBuilder.loadTexts: pethPsePortPowerPairsControlAbility.setDescription('Describes the capability of controlling the power pairs functionality to switch pins for sourcing power. The value true indicate that the device has the capability to control the power pairs')
pethPsePortPowerPairs = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("signal", 1), ("spare", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pethPsePortPowerPairs.setStatus('current')
if mibBuilder.loadTexts: pethPsePortPowerPairs.setDescription('Describes or controls the pairs in use. If the value of pethPsePortPowerPairsControl is true, this object is writable. A value of signal(1) means that the signal pairs only are in use. A value of spare(2) means that the spare pairs only are in use.')
pethPsePortPowerDetectionControl = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("test", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pethPsePortPowerDetectionControl.setStatus('current')
if mibBuilder.loadTexts: pethPsePortPowerDetectionControl.setDescription('Controls the power detection mechanism of the port. Setting the value auto(1) enables the power detection mechanism of the port. Setting the value test(2) puts the port in a testmode: force continuous discovery without applying power regardless of whether PD detected.')
pethPsePortDetectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5, 7, 8))).clone(namedValues=NamedValues(("disabled", 1), ("searching", 2), ("deliveringPower", 4), ("fault", 5), ("test", 7), ("denyLowPriority", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pethPsePortDetectionStatus.setStatus('current')
if mibBuilder.loadTexts: pethPsePortDetectionStatus.setDescription('Describes the operational status of the port PD detection. A value of disabled(1)- indicates that the PSE State diagram is in the state IDLE A value of searching(2)- indicates that the PSE State diagram is in the state DETECTION, CLASSIFICATION, SIGNATURE_INVALID or BACKOFF. A value of deliveringPower(4) - indicates that the PSE State diagram is in the state POWER_UP, POWER_ON or POWER_OFF. A value of fault(5) - indicates that the PSE State diagram is in the state TEST_ERROR or the state IDLE due to the variable error condition. Faults detected are vendor specific. A value of test(7) - indicates that the PSE State diagram is in the state TEST_MODE. A value of denyLowPriority(8) indicates that the port was disabled by the power management system, in order to keep active higher priority ports. ')
pethPsePortPowerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("critical", 1), ("high", 2), ("low", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pethPsePortPowerPriority.setStatus('current')
if mibBuilder.loadTexts: pethPsePortPowerPriority.setDescription('This object controls the priority of the port from the point of view of a power management algorithm. The priority that is set by this variable could be used by a control mechanism that prevents over current situations by disconnecting first ports with lower power priority. Ports that connect devices critical to the operation of the network - like the E911 telephones ports - should be set to higher priority.')
pethPsePortPowerMaintenanceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("underCurrent", 2), ("mPSAbsent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pethPsePortPowerMaintenanceStatus.setReference('[IEEE Draft P802.3af/D4.0, November, 2002, 30.9.1.1.8 aPSEPowerMaintenanceStatus]')
if mibBuilder.loadTexts: pethPsePortPowerMaintenanceStatus.setStatus('current')
if mibBuilder.loadTexts: pethPsePortPowerMaintenanceStatus.setDescription('The value ok(1) indicates the Power Maintenance Signature is present and the overcurrent condition has not been detected. The value overCurrent (2) indicates an overcurrent condition has been detected. The value mPSAbsent(3) indicates that the Power Maintenance Signature is absent.')
pethPsePortMPSAbsentCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pethPsePortMPSAbsentCounter.setReference('[IEEE Draft P802.3af/D4.0, November, 2002, object 30.9.1.1.9 aPSEUnderCurrentCounter]')
if mibBuilder.loadTexts: pethPsePortMPSAbsentCounter.setStatus('current')
if mibBuilder.loadTexts: pethPsePortMPSAbsentCounter.setDescription('Counts the number of times that the pethPsePortPowerMaintenanceStatus attribute changes from any value to the value mPSAbsent(3).')
pethPsePortOverCurrentCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pethPsePortOverCurrentCounter.setReference('[IEEE Draft P802.3af/D4.0, November, 2002, object 30.9.1.1.1 aPSEOverCurrentCounter]')
if mibBuilder.loadTexts: pethPsePortOverCurrentCounter.setStatus('current')
if mibBuilder.loadTexts: pethPsePortOverCurrentCounter.setDescription('Counts the number of times that the aPSEPowerCurrentStatus attribute changes from any value to the value overCurrent(2).')
pethPsePortType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("telephone", 2), ("webcam", 3), ("wireless", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pethPsePortType.setStatus('current')
if mibBuilder.loadTexts: pethPsePortType.setDescription('A manager will set the value of this variable to a value that indicates the type of the device that is connected to theport. This value can be the result of the mapping the address of the station connected to the port and of the value of the pethPdPortType of the respective PD port.')
pethPsePortPowerClassifications = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("class0", 1), ("class1", 2), ("class2", 3), ("class3", 4), ("class4", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pethPsePortPowerClassifications.setReference('[IEEE Draft P802.3af/D4.0, November, 2002, object 30.9.1.1.7 aPSEPowerClassification]')
if mibBuilder.loadTexts: pethPsePortPowerClassifications.setStatus('current')
if mibBuilder.loadTexts: pethPsePortPowerClassifications.setDescription('Classification is a way to tag different terminals on the Power over LAN network according to their power consumption. Devices such as IP telephones, WLAN access points and others, will be classified according to their power requirements. The value is only valid while a valid PD is being detected as indicated by the attribute pethPsePortDetectionStatus reporting the value or deliveringPower(4).')
pethPdPortTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 1, 2), )
if mibBuilder.loadTexts: pethPdPortTable.setStatus('current')
if mibBuilder.loadTexts: pethPdPortTable.setDescription('A table of objects that display and control the power characteristics power Ethernet ports on a Powered Device(PD) device. This group will be implemented in managed powered and mid-span devices.')
pethPdPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 1, 2, 1), ).setIndexNames((0, "ALU-POWER-ETHERNET-MIB", "pethPdPortIndex"))
if mibBuilder.loadTexts: pethPdPortEntry.setStatus('current')
if mibBuilder.loadTexts: pethPdPortEntry.setDescription('A set of objects that display and control the power characteristics of a Powered Device port.')
pethPdPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: pethPdPortIndex.setStatus('current')
if mibBuilder.loadTexts: pethPdPortIndex.setDescription('An index value that uniquely identifies an interface to a PD device. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex. The mapping between the ifIndex values and the numbering of the port on the device is an implementation issue.')
pethPdPortAdminEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pethPdPortAdminEnable.setStatus('current')
if mibBuilder.loadTexts: pethPdPortAdminEnable.setDescription('This value identifies the operational state of the PD functions. An interface which can provide the PD functions will be enabled to do so when this attribute has the value enable. When this attribute has the value disable the interface will act as it would if it had no PD function.')
pethMainPseObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 1, 3))
pethMainPseTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 1, 3, 1), )
if mibBuilder.loadTexts: pethMainPseTable.setStatus('current')
if mibBuilder.loadTexts: pethMainPseTable.setDescription("A table of objects that display and control the Main power on a PSE device. Example - an Ethernet switch midspan device can control an Ethnternet port and the Main Power supply unit's.")
pethMainPseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 1, 3, 1, 1), ).setIndexNames((0, "ALU-POWER-ETHERNET-MIB", "pethMainPseGroupIndex"))
if mibBuilder.loadTexts: pethMainPseEntry.setStatus('current')
if mibBuilder.loadTexts: pethMainPseEntry.setDescription('A set of objects that display and control the Main power of a PSE. ')
pethMainPseGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: pethMainPseGroupIndex.setStatus('current')
if mibBuilder.loadTexts: pethMainPseGroupIndex.setDescription('This variable uniquely identifies the group to which power Ethernet PSE is connected.Group means (box in the stack, module in a rack) and the value 1 MUST be used for non-modular devices ')
pethMainPsePower = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 1, 3, 1, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: pethMainPsePower.setStatus('current')
if mibBuilder.loadTexts: pethMainPsePower.setDescription('The nominal power of the PSE expressed in Watts.')
pethMainPseOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("faulty", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pethMainPseOperStatus.setStatus('current')
if mibBuilder.loadTexts: pethMainPseOperStatus.setDescription('The operational status of the main PSE.')
pethMainPseConsumptionPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 1, 3, 1, 1, 4), Gauge32()).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: pethMainPseConsumptionPower.setStatus('current')
if mibBuilder.loadTexts: pethMainPseConsumptionPower.setDescription('Measured usage power expressed in Watts.')
pethMainPseUsageThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pethMainPseUsageThreshold.setStatus('current')
if mibBuilder.loadTexts: pethMainPseUsageThreshold.setDescription('The usage threshold expressed in percents for comparing the measured power and initiating an alarm if the threshold is exceeded.')
pethNotificationControl = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 1, 4))
pethNotificationControlTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 1, 4, 1), )
if mibBuilder.loadTexts: pethNotificationControlTable.setStatus('current')
if mibBuilder.loadTexts: pethNotificationControlTable.setDescription('A table of objects that display and control the Notification on a PSE device.')
pethNotificationControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 1, 4, 1, 1), ).setIndexNames((0, "ALU-POWER-ETHERNET-MIB", "pethNotificationControlGroupIndex"))
if mibBuilder.loadTexts: pethNotificationControlEntry.setStatus('current')
if mibBuilder.loadTexts: pethNotificationControlEntry.setDescription('A set of objects that control the Notification events.')
pethNotificationControlGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: pethNotificationControlGroupIndex.setStatus('current')
if mibBuilder.loadTexts: pethNotificationControlGroupIndex.setDescription('This variable uniquely identifies the group. Group means box in the stack, module in a rack and it is RECOMENDED that the value 1 be used for non-modular devices ')
pethNotificationControlEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pethNotificationControlEnable.setStatus('current')
if mibBuilder.loadTexts: pethNotificationControlEnable.setDescription('Enable Notification from Agent')
pethPsePortOnOffNotification = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 0, 1)).setObjects(("ALU-POWER-ETHERNET-MIB", "pethPsePortDetectionStatus"))
if mibBuilder.loadTexts: pethPsePortOnOffNotification.setStatus('current')
if mibBuilder.loadTexts: pethPsePortOnOffNotification.setDescription(' This Notification indicates if Pse Port is delivering or not power to the PD. This Notification SHOULD be sent on every status change except in the searching mode.')
pethPsePortPowerMaintenanceStatusNotification = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 0, 2)).setObjects(("ALU-POWER-ETHERNET-MIB", "pethPsePortPowerMaintenanceStatus"))
if mibBuilder.loadTexts: pethPsePortPowerMaintenanceStatusNotification.setStatus('current')
if mibBuilder.loadTexts: pethPsePortPowerMaintenanceStatusNotification.setDescription(' This Notification indicates a Port Change Status and it SHOULD be sent on every status change.')
pethMainPowerUsageOnNotification = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 0, 4)).setObjects(("ALU-POWER-ETHERNET-MIB", "pethMainPseConsumptionPower"))
if mibBuilder.loadTexts: pethMainPowerUsageOnNotification.setStatus('current')
if mibBuilder.loadTexts: pethMainPowerUsageOnNotification.setDescription(' This Notification indicate PSE Threshold usage indication is on, the usage power is above the threshold.')
pethMainPowerUsageOffNotification = NotificationType((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 0, 5)).setObjects(("ALU-POWER-ETHERNET-MIB", "pethMainPseConsumptionPower"))
if mibBuilder.loadTexts: pethMainPowerUsageOffNotification.setStatus('current')
if mibBuilder.loadTexts: pethMainPowerUsageOffNotification.setDescription(' This Notification indicate PSE Threshold usage indication off, the usage power is below the threshold.')
pethCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 2, 1))
pethGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 2, 2))
pethCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 2, 1, 1)).setObjects(("ALU-POWER-ETHERNET-MIB", "pethPsePortGroup"), ("ALU-POWER-ETHERNET-MIB", "pethPdPortGroup"), ("ALU-POWER-ETHERNET-MIB", "pethMainPseGroup"), ("ALU-POWER-ETHERNET-MIB", "pethNotificationControlGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pethCompliance = pethCompliance.setStatus('current')
if mibBuilder.loadTexts: pethCompliance.setDescription('Describes the requirements for conformance to the Power Ethernet MIB.')
pethPseCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 2, 1, 2)).setObjects(("ALU-POWER-ETHERNET-MIB", "pethPsePortGroup"), ("ALU-POWER-ETHERNET-MIB", "pethMainPseGroup"), ("ALU-POWER-ETHERNET-MIB", "pethNotificationControlGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pethPseCompliance = pethPseCompliance.setStatus('current')
if mibBuilder.loadTexts: pethPseCompliance.setDescription('Describes the requirements for conformance to the PSE and MID- Span.')
pethPdCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 2, 1, 3)).setObjects(("ALU-POWER-ETHERNET-MIB", "pethPdPortGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pethPdCompliance = pethPdCompliance.setStatus('current')
if mibBuilder.loadTexts: pethPdCompliance.setDescription('Describes the requirements for conformance to the PD.')
pethPsePortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 2, 2, 1)).setObjects(("ALU-POWER-ETHERNET-MIB", "pethPsePortAdminEnable"), ("ALU-POWER-ETHERNET-MIB", "pethPsePortPowerPairsControlAbility"), ("ALU-POWER-ETHERNET-MIB", "pethPsePortPowerDetectionControl"), ("ALU-POWER-ETHERNET-MIB", "pethPsePortPowerPairs"), ("ALU-POWER-ETHERNET-MIB", "pethPsePortDetectionStatus"), ("ALU-POWER-ETHERNET-MIB", "pethPsePortPowerPriority"), ("ALU-POWER-ETHERNET-MIB", "pethPsePortPowerMaintenanceStatus"), ("ALU-POWER-ETHERNET-MIB", "pethPsePortMPSAbsentCounter"), ("ALU-POWER-ETHERNET-MIB", "pethPsePortOverCurrentCounter"), ("ALU-POWER-ETHERNET-MIB", "pethPsePortType"), ("ALU-POWER-ETHERNET-MIB", "pethPsePortPowerClassifications"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pethPsePortGroup = pethPsePortGroup.setStatus('current')
if mibBuilder.loadTexts: pethPsePortGroup.setDescription('The pethPsePortGroup is mandatory for systems which implement PSE ports.')
pethPdPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 2, 2, 2)).setObjects(("ALU-POWER-ETHERNET-MIB", "pethPdPortAdminEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pethPdPortGroup = pethPdPortGroup.setStatus('current')
if mibBuilder.loadTexts: pethPdPortGroup.setDescription('The pethPdPortGroup is mandatory for systems which implement PD Ports.')
pethMainPseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 2, 2, 3)).setObjects(("ALU-POWER-ETHERNET-MIB", "pethMainPsePower"), ("ALU-POWER-ETHERNET-MIB", "pethMainPseOperStatus"), ("ALU-POWER-ETHERNET-MIB", "pethMainPseConsumptionPower"), ("ALU-POWER-ETHERNET-MIB", "pethMainPseUsageThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pethMainPseGroup = pethMainPseGroup.setStatus('current')
if mibBuilder.loadTexts: pethMainPseGroup.setDescription('Main PSE Objects. ')
pethNotificationControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 2, 2, 4)).setObjects(("ALU-POWER-ETHERNET-MIB", "pethNotificationControlEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pethNotificationControlGroup = pethNotificationControlGroup.setStatus('current')
if mibBuilder.loadTexts: pethNotificationControlGroup.setDescription('Notification Control Objects. ')
pethPsePortNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 2, 1, 4)).setObjects(("ALU-POWER-ETHERNET-MIB", "pethPsePortOnOffNotification"), ("ALU-POWER-ETHERNET-MIB", "pethPsePortPowerMaintenanceStatusNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pethPsePortNotificationGroup = pethPsePortNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: pethPsePortNotificationGroup.setDescription('Pse Notification indications')
pethMainPowerNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 27, 999, 2, 1, 5)).setObjects(("ALU-POWER-ETHERNET-MIB", "pethMainPowerUsageOnNotification"), ("ALU-POWER-ETHERNET-MIB", "pethMainPowerUsageOffNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pethMainPowerNotificationGroup = pethMainPowerNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: pethMainPowerNotificationGroup.setDescription('Pse Notification indications')
mibBuilder.exportSymbols("ALU-POWER-ETHERNET-MIB", pethMainPsePower=pethMainPsePower, pethGroups=pethGroups, pethNotificationControlTable=pethNotificationControlTable, pethPsePortTable=pethPsePortTable, pethPdPortAdminEnable=pethPdPortAdminEnable, pethMainPseOperStatus=pethMainPseOperStatus, pethPsePortGroupIndex=pethPsePortGroupIndex, pethPsePortPowerClassifications=pethPsePortPowerClassifications, pethNotificationControlEntry=pethNotificationControlEntry, pethPdPortTable=pethPdPortTable, pethPdPortEntry=pethPdPortEntry, pethMainPseUsageThreshold=pethMainPseUsageThreshold, powerEthernetMIB=powerEthernetMIB, PYSNMP_MODULE_ID=powerEthernetMIB, pethMainPowerUsageOffNotification=pethMainPowerUsageOffNotification, pethPdPortGroup=pethPdPortGroup, pethCompliance=pethCompliance, pethMainPseGroupIndex=pethMainPseGroupIndex, pethObjects=pethObjects, pethNotifications=pethNotifications, pethPsePortOnOffNotification=pethPsePortOnOffNotification, pethPdCompliance=pethPdCompliance, pethMainPseGroup=pethMainPseGroup, pethPsePortPowerDetectionControl=pethPsePortPowerDetectionControl, pethPseCompliance=pethPseCompliance, pethCompliances=pethCompliances, pethMainPseConsumptionPower=pethMainPseConsumptionPower, pethMainPseObjects=pethMainPseObjects, pethPsePortEntry=pethPsePortEntry, pethMainPseEntry=pethMainPseEntry, pethNotificationControl=pethNotificationControl, pethPsePortGroup=pethPsePortGroup, pethMainPowerNotificationGroup=pethMainPowerNotificationGroup, pethPsePortDetectionStatus=pethPsePortDetectionStatus, pethNotificationControlEnable=pethNotificationControlEnable, pethPsePortNotificationGroup=pethPsePortNotificationGroup, pethNotificationControlGroup=pethNotificationControlGroup, pethPsePortPowerPairs=pethPsePortPowerPairs, pethPsePortPowerPriority=pethPsePortPowerPriority, pethMainPseTable=pethMainPseTable, pethNotificationControlGroupIndex=pethNotificationControlGroupIndex, pethPsePortAdminEnable=pethPsePortAdminEnable, pethPdPortIndex=pethPdPortIndex, pethPsePortPowerPairsControlAbility=pethPsePortPowerPairsControlAbility, pethPsePortOverCurrentCounter=pethPsePortOverCurrentCounter, pethPsePortPowerMaintenanceStatusNotification=pethPsePortPowerMaintenanceStatusNotification, pethConformance=pethConformance, pethPsePortMPSAbsentCounter=pethPsePortMPSAbsentCounter, pethPsePortType=pethPsePortType, pethPsePortPowerMaintenanceStatus=pethPsePortPowerMaintenanceStatus, pethPsePortIndex=pethPsePortIndex, pethMainPowerUsageOnNotification=pethMainPowerUsageOnNotification)
