#
# PySNMP MIB module AETHRA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AETHRA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:15:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
IANAifType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
ifDescr, ifIndex = mibBuilder.importSymbols("IF-MIB", "ifDescr", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Integer32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, enterprises, NotificationType, ObjectIdentity, Unsigned32, MibIdentifier, NotificationType, Gauge32, iso, Bits, IpAddress, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Integer32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "enterprises", "NotificationType", "ObjectIdentity", "Unsigned32", "MibIdentifier", "NotificationType", "Gauge32", "iso", "Bits", "IpAddress", "Counter32")
PhysAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "DisplayString", "TextualConvention")
aethra = MibIdentifier((1, 3, 6, 1, 4, 1, 7745))
atosnt = MibIdentifier((1, 3, 6, 1, 4, 1, 7745, 5))
tools = MibIdentifier((1, 3, 6, 1, 4, 1, 7745, 5, 1))
system = MibIdentifier((1, 3, 6, 1, 4, 1, 7745, 5, 2))
dsl = MibIdentifier((1, 3, 6, 1, 4, 1, 7745, 5, 3))
voip = MibIdentifier((1, 3, 6, 1, 4, 1, 7745, 5, 4))
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 7745, 5, 5))
ifc = MibIdentifier((1, 3, 6, 1, 4, 1, 7745, 5, 6))
fileTransfer = MibIdentifier((1, 3, 6, 1, 4, 1, 7745, 5, 1, 1))
fileTransferProtocol = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("tftp", 1), ("ftp", 2), ("http", 3), ("file", 4), ("scp", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileTransferProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: fileTransferProtocol.setDescription('Set this parameter to configure the protocol for file transfer command. The protocol file(4) reads from a local disk for download command, writes to a local disk for upload. OID: 1.3.6.1.4.1.7745.5.1.1.1')
fileTransferFileName = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileTransferFileName.setStatus('mandatory')
if mibBuilder.loadTexts: fileTransferFileName.setDescription('Set this parameter to configure the name of the file to download or upload. When using HTTP protocol set full url as fileTransferFileName. OID: 1.3.6.1.4.1.7745.5.1.1.2')
fileTransferServerName = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 1, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileTransferServerName.setStatus('mandatory')
if mibBuilder.loadTexts: fileTransferServerName.setDescription('Set this parameter to configure the name or IP address of remote server when using TFTP or FTP protocol. When not configured systemDefaultTftpServer or systemDefaultFtpServer is used for the respective protocols. OID: 1.3.6.1.4.1.7745.5.1.1.3')
fileTransferOption = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("firmware", 1), ("boot", 2), ("userconf", 3), ("logs", 4), ("package", 5), ("localfile", 6), ("welcome", 7), ("license", 8), ("certificate", 9), ("defaultconf", 10), ("bannerPre", 11), ("bannerPost", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileTransferOption.setStatus('mandatory')
if mibBuilder.loadTexts: fileTransferOption.setDescription('Set this parameter to configure the type of file you are downloading or uploading. When not configured firmware type is used. firmware(1) is the operating system file, boot(2) is the system boot, userconf(3) is the current system configuration file, logs(4) is the logs file and is available only for upload command, package(5) is bundle is a package that contains boot and os in a single file, localfile(6) is any file you want to download or upload in the system, welcome(7) is a text message displayed before access to system console by telnet or ssh, license(8) is a license file to enable advanced system features, certificate(9) is the custom certificate file for the security protocol system (SSL), defaultconf(10) is the custom default configuration file, bannerPre(10) is available only from version 5.6.11, is a custom pre login banner file, bannerPost(10)is available only from version 5.6.11, is a custom post login banner file. OID: 1.3.6.1.4.1.7745.5.1.1.4')
fileTransferStorageFileName = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileTransferStorageFileName.setStatus('mandatory')
if mibBuilder.loadTexts: fileTransferStorageFileName.setDescription('Set this parameter to configure the name of the local file when using file(4) protocol. OID: 1.3.6.1.4.1.7745.5.1.1.5')
fileTransferExec = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noaction", 0), ("download", 1), ("upload", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileTransferExec.setStatus('mandatory')
if mibBuilder.loadTexts: fileTransferExec.setDescription('Set this parameter to start download or upload. OID: 1.3.6.1.4.1.7745.5.1.1.6')
fileTransferStatus = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileTransferStatus.setStatus('mandatory')
if mibBuilder.loadTexts: fileTransferStatus.setDescription('Get this parameter to read the current status of file transfer command. OID: 1.3.6.1.4.1.7745.5.1.1.7')
ping = MibIdentifier((1, 3, 6, 1, 4, 1, 7745, 5, 1, 2))
pingParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 7745, 5, 1, 2, 1))
pingHost = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 1, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingHost.setStatus('mandatory')
if mibBuilder.loadTexts: pingHost.setDescription('Set this parameter to configure the host name or IP address to ping. OID: 1.3.6.1.4.1.7745.5.1.2.1.1')
pingSize = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingSize.setStatus('mandatory')
if mibBuilder.loadTexts: pingSize.setDescription('Set this parameter to configure the size of ping packet. OID: 1.3.6.1.4.1.7745.5.1.2.1.2')
pingTries = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingTries.setStatus('mandatory')
if mibBuilder.loadTexts: pingTries.setDescription('Set this parameter to configure the number of ping tries. OID: 1.3.6.1.4.1.7745.5.1.2.1.3')
pingTTL = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingTTL.setStatus('mandatory')
if mibBuilder.loadTexts: pingTTL.setDescription('Set this parameter to configure ping TTL option. OID: 1.3.6.1.4.1.7745.5.1.2.1.4')
pingTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: pingTimeOut.setDescription('Set this parameter to configure ping response timeout (sec). OID: 1.3.6.1.4.1.7745.5.1.2.1.5')
pingSource = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 1, 2, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingSource.setStatus('mandatory')
if mibBuilder.loadTexts: pingSource.setDescription('Set this parameter to configure the name or IP address of the ping source. OID: 1.3.6.1.4.1.7745.5.1.2.1.6')
pingStart = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noaction", 0), ("start", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingStart.setStatus('mandatory')
if mibBuilder.loadTexts: pingStart.setDescription('Set this parameter to start ping. OID: 1.3.6.1.4.1.7745.5.1.2.1.7')
pingStatus = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 1, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pingStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pingStatus.setDescription('Get this parameter to read the current status of ping command. OID: 1.3.6.1.4.1.7745.5.1.2.1.8')
pingStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 7745, 5, 1, 2, 2))
pingTXpacket = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 1, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pingTXpacket.setStatus('mandatory')
if mibBuilder.loadTexts: pingTXpacket.setDescription('Get this parameter to read the number of packets transmitted. OID: 1.3.6.1.4.1.7745.5.1.2.2.1')
pingRXpacket = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 1, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pingRXpacket.setStatus('mandatory')
if mibBuilder.loadTexts: pingRXpacket.setDescription('Get this parameter to read the number of packets received. OID: 1.3.6.1.4.1.7745.5.1.2.2.2')
pingLOSTpacket = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 1, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pingLOSTpacket.setStatus('mandatory')
if mibBuilder.loadTexts: pingLOSTpacket.setDescription('Get this parameter to read the number of packets losted. OID: 1.3.6.1.4.1.7745.5.1.2.2.3')
pingMinRTT = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 1, 2, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pingMinRTT.setStatus('mandatory')
if mibBuilder.loadTexts: pingMinRTT.setDescription('Get this parameter to read the minimum Round Trip Time (RTT) value. OID: 1.3.6.1.4.1.7745.5.1.2.2.4')
pingMaxRTT = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 1, 2, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pingMaxRTT.setStatus('mandatory')
if mibBuilder.loadTexts: pingMaxRTT.setDescription('Get this parameter to read the maximum Round Trip Time (RTT) value. OID: 1.3.6.1.4.1.7745.5.1.2.2.5')
pingAvgRTT = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 1, 2, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pingAvgRTT.setStatus('mandatory')
if mibBuilder.loadTexts: pingAvgRTT.setDescription('Get this parameter to read the average Round Trip Time (RTT) value. OID: 1.3.6.1.4.1.7745.5.1.2.2.6')
systemLoglevel = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLoglevel.setStatus('mandatory')
if mibBuilder.loadTexts: systemLoglevel.setDescription('Set this parameter to configure the log level of the node system. OID: 1.3.6.1.4.1.7745.5.2.1')
systemDescription = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemDescription.setStatus('mandatory')
if mibBuilder.loadTexts: systemDescription.setDescription('Set this parameter to configure system description. OID: 1.3.6.1.4.1.7745.5.2.2 ')
systemName = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemName.setStatus('mandatory')
if mibBuilder.loadTexts: systemName.setDescription("Set this parameter to configure system name, it's also used as network hostname. OID: 1.3.6.1.4.1.7745.5.2.3")
systemLocalDomain = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLocalDomain.setStatus('mandatory')
if mibBuilder.loadTexts: systemLocalDomain.setDescription("Set this parameter to configure system local domain, it's also used as network workgroup. OID: 1.3.6.1.4.1.7745.5.2.4")
systemDefaultTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemDefaultTftpServer.setStatus('mandatory')
if mibBuilder.loadTexts: systemDefaultTftpServer.setDescription('Set this parameter to configure the name or IP address for the default remote TFTP server. OID: 1.3.6.1.4.1.7745.5.2.5')
systemTftpLocalAdd = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemTftpLocalAdd.setStatus('mandatory')
if mibBuilder.loadTexts: systemTftpLocalAdd.setDescription('Set this parameter to configure the name or the local IP address used by the TFTP client. OID: 1.3.6.1.4.1.7745.5.2.6')
systemDefaultFtpServer = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemDefaultFtpServer.setStatus('mandatory')
if mibBuilder.loadTexts: systemDefaultFtpServer.setDescription('Set this parameter to configure the name or IP address and port for the default remote FTP server. OID: 1.3.6.1.4.1.7745.5.2.7')
systemFtpLocalAdd = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemFtpLocalAdd.setStatus('mandatory')
if mibBuilder.loadTexts: systemFtpLocalAdd.setDescription('Set this parameter to configure the name or the local IP address used by the FTP client. OID: 1.3.6.1.4.1.7745.5.2.8')
systemFtpUsername = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemFtpUsername.setStatus('mandatory')
if mibBuilder.loadTexts: systemFtpUsername.setDescription('Set this parameter to configure the username for the default remote FTP server. OID: 1.3.6.1.4.1.7745.5.2.9')
systemFtpPassword = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemFtpPassword.setStatus('mandatory')
if mibBuilder.loadTexts: systemFtpPassword.setDescription('Set this parameter to configure the password for the default remote FTP server. OID: 1.3.6.1.4.1.7745.5.2.10')
systemAAAProfile = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemAAAProfile.setStatus('mandatory')
if mibBuilder.loadTexts: systemAAAProfile.setDescription('Set this parameter to configure the AAA profile used by the system. OID: 1.3.6.1.4.1.7745.5.2.11 ')
systemAAALogTimeout = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemAAALogTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: systemAAALogTimeout.setDescription('Set this parameter to configure the AAA login timeout. OID: 1.3.6.1.4.1.7745.5.2.12')
systemBackupAuth = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemBackupAuth.setStatus('mandatory')
if mibBuilder.loadTexts: systemBackupAuth.setDescription('Set this parameter to enable the backup authentication system. OID: 1.3.6.1.4.1.7745.5.2.13')
systemScrollLine = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemScrollLine.setStatus('mandatory')
if mibBuilder.loadTexts: systemScrollLine.setDescription('Set this parameter to enable the system scroll line. OID: 1.3.6.1.4.1.7745.5.2.14')
systemKernelLogs = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemKernelLogs.setStatus('mandatory')
if mibBuilder.loadTexts: systemKernelLogs.setDescription('Set this parameter to enable the system kernel logs OID: 1.3.6.1.4.1.7745.5.2.15')
systemCryptedPassword = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemCryptedPassword.setStatus('mandatory')
if mibBuilder.loadTexts: systemCryptedPassword.setDescription('Set this parameter to enable the system crypted password. OID: 1.3.6.1.4.1.7745.5.2.16')
systemSave = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noaction", 0), ("save", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSave.setStatus('mandatory')
if mibBuilder.loadTexts: systemSave.setDescription('Set this parameter to save current configuration. OID: 1.3.6.1.4.1.7745.5.2.17')
systemRestart = MibIdentifier((1, 3, 6, 1, 4, 1, 7745, 5, 2, 18))
restartOption = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("saveConf", 0), ("notSaveConf", 1), ("restoreDefaultConf", 2), ("restoreFactoryDefault", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartOption.setStatus('mandatory')
if mibBuilder.loadTexts: restartOption.setDescription('Set this parameter to choose restart command option. saveConf(0) saving configuration changes before restart the system, notSaveConf(1) restart the system without saving configuration changes, restoreDefaultConf(2) restart the system with the default configuration, restoreFactoryDefault(3) available only from version 5.6.14, restart the system with the factory default. OID: 1.3.6.1.4.1.7745.5.2.18.1')
restartDelay = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 18, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartDelay.setStatus('mandatory')
if mibBuilder.loadTexts: restartDelay.setDescription('Set this parameter to configure restart timeout (sec). OID: 1.3.6.1.4.1.7745.5.2.18.2')
restartExec = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 18, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("noaction", 0), ("restart", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartExec.setStatus('mandatory')
if mibBuilder.loadTexts: restartExec.setDescription('Set this parameter to restart the system. OID: 1.3.6.1.4.1.7745.5.2.18.3')
restartStatus = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 18, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: restartStatus.setStatus('mandatory')
if mibBuilder.loadTexts: restartStatus.setDescription('Get this parameter to read the current status of restart command. OID: OID: 1.3.6.1.4.1.7745.5.2.18.4')
performance = MibIdentifier((1, 3, 6, 1, 4, 1, 7745, 5, 2, 19))
performanceCpuAvg1min = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 19, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performanceCpuAvg1min.setStatus('mandatory')
if mibBuilder.loadTexts: performanceCpuAvg1min.setDescription('Get this parameter to read the CPU average utilization in 1 minute (in %). OID: 1.3.6.1.4.1.7745.5.2.19.1')
performanceCpuAvg5min = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 19, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performanceCpuAvg5min.setStatus('mandatory')
if mibBuilder.loadTexts: performanceCpuAvg5min.setDescription('Get this parameter to read the CPU average utilization in 5 minute (in %). OID: 1.3.6.1.4.1.7745.5.2.19.2')
performanceCpuAvg15min = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 19, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performanceCpuAvg15min.setStatus('mandatory')
if mibBuilder.loadTexts: performanceCpuAvg15min.setDescription('Get this parameter to read the CPU average utilization in 15 minute (in %). OID: 1.3.6.1.4.1.7745.5.2.19.3')
performanceDynMemLoad = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 19, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performanceDynMemLoad.setStatus('mandatory')
if mibBuilder.loadTexts: performanceDynMemLoad.setDescription('Get this parameter to read the usage of dynamic memory (in %). OID: 1.3.6.1.4.1.7745.5.2.19.4')
performanceDynMemTotal = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 19, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performanceDynMemTotal.setStatus('mandatory')
if mibBuilder.loadTexts: performanceDynMemTotal.setDescription('Get this parameter to read the total dynamic memory (in KBytes). OID: 1.3.6.1.4.1.7745.5.2.19.5')
performanceDynMemFree = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 19, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: performanceDynMemFree.setStatus('mandatory')
if mibBuilder.loadTexts: performanceDynMemFree.setDescription('Get this parameter to read the free dynamic memory (in KBytes). OID: 1.3.6.1.4.1.7745.5.2.19.6')
systemDefaultScpServer = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemDefaultScpServer.setStatus('mandatory')
if mibBuilder.loadTexts: systemDefaultScpServer.setDescription('Set this parameter to configure the name or IP address and port for the default remote SCP server. OID: 1.3.6.1.4.1.7745.5.2.20')
systemScpUsername = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemScpUsername.setStatus('mandatory')
if mibBuilder.loadTexts: systemScpUsername.setDescription('Set this parameter to configure the username for the default remote SCP server. OID: 1.3.6.1.4.1.7745.5.2.21')
systemScpPassword = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemScpPassword.setStatus('mandatory')
if mibBuilder.loadTexts: systemScpPassword.setDescription('Set this parameter to configure the password for the default remote SCP server. OID: 1.3.6.1.4.1.7745.5.2.22')
systemConsoleEnable = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemConsoleEnable.setStatus('mandatory')
if mibBuilder.loadTexts: systemConsoleEnable.setDescription('Set this parameter to enable or disable serial console. OID: 1.3.6.1.4.1.7745.5.2.23')
systemLogMsgRate = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 2, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLogMsgRate.setStatus('mandatory')
if mibBuilder.loadTexts: systemLogMsgRate.setDescription('Set this parameter to configure the maximum number of log messages per minute. A value set to 0 (zero) is equivalent to unlimited. OID: 1.3.6.1.4.1.7745.5.2.24')
xdsl = MibIdentifier((1, 3, 6, 1, 4, 1, 7745, 5, 3, 1))
xdslTable = MibTable((1, 3, 6, 1, 4, 1, 7745, 5, 3, 1, 1), )
if mibBuilder.loadTexts: xdslTable.setStatus('mandatory')
if mibBuilder.loadTexts: xdslTable.setDescription('This is a table showing the list of xdsl interface entries. OID: 1.3.6.1.4.1.7745.5.3.1.1')
xdslEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7745, 5, 3, 1, 1, 1), ).setIndexNames((0, "AETHRA-MIB", "xdslIndex"))
if mibBuilder.loadTexts: xdslEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xdslEntry.setDescription('OID: 1.3.6.1.4.1.7745.5.3.1.1.1')
xdslIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xdslIndex.setDescription('Get this parameter to read the index of the row. OID: 1.3.6.1.4.1.7745.5.3.1.1.1.1')
xdslLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslLinkStatus.setStatus('mandatory')
if mibBuilder.loadTexts: xdslLinkStatus.setDescription('Get this parameter to read the link status. OID: 1.3.6.1.4.1.7745.5.3.1.1.1.2')
xdslTc = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslTc.setStatus('mandatory')
if mibBuilder.loadTexts: xdslTc.setDescription('Get this parameter to read link transmission convergence. OID: 1.3.6.1.4.1.7745.5.3.1.1.1.3')
xdslUsAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslUsAttenuation.setStatus('mandatory')
if mibBuilder.loadTexts: xdslUsAttenuation.setDescription('Get this parameter to read link upstream attenuation (0.1 dB steps). OID: 1.3.6.1.4.1.7745.5.3.1.1.1.4')
xdslDsAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDsAttenuation.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDsAttenuation.setDescription('Get this parameter to read link downstream attenuation (0.1 dB steps). OID: 1.3.6.1.4.1.7745.5.3.1.1.1.5')
xdslUsNoiseMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslUsNoiseMargin.setStatus('mandatory')
if mibBuilder.loadTexts: xdslUsNoiseMargin.setDescription('Get this parameter to read link upstream noise margin (0.1 dB steps). OID: 1.3.6.1.4.1.7745.5.3.1.1.1.6')
xdslDsNoiseMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDsNoiseMargin.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDsNoiseMargin.setDescription('Get this parameter to read link downstream noise margin (0.1 dB steps). OID: 1.3.6.1.4.1.7745.5.3.1.1.1.7')
xdslUsCurrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslUsCurrRate.setStatus('mandatory')
if mibBuilder.loadTexts: xdslUsCurrRate.setDescription('Get this parameter to read link upstream current rate (in Kbps). OID: 1.3.6.1.4.1.7745.5.3.1.1.1.8')
xdslDsCurrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDsCurrRate.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDsCurrRate.setDescription('Get this parameter to read link downstream current rate (in Kbps). OID: 1.3.6.1.4.1.7745.5.3.1.1.1.9')
xdslModulationType = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 1, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslModulationType.setStatus('mandatory')
if mibBuilder.loadTexts: xdslModulationType.setDescription('Get this parameter to read link modulation type. OID: 1.3.6.1.4.1.7745.5.3.1.1.1.10')
xdslUsMaxTheorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslUsMaxTheorRate.setStatus('mandatory')
if mibBuilder.loadTexts: xdslUsMaxTheorRate.setDescription('Get this parameter to read link upstream attainable max rate (in Kbps). OID: 1.3.6.1.4.1.7745.5.3.1.1.1.11')
xdslDsMaxTheorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDsMaxTheorRate.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDsMaxTheorRate.setDescription('Get this parameter to read link downstream attainable max rate (in Kbps). OID: 1.3.6.1.4.1.7745.5.3.1.1.1.12')
xdslUsTotBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslUsTotBytes.setStatus('mandatory')
if mibBuilder.loadTexts: xdslUsTotBytes.setDescription('Get this parameter to read link upstream total bytes. OID: 1.3.6.1.4.1.7745.5.3.1.1.1.13')
xdslDsTotBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslDsTotBytes.setStatus('mandatory')
if mibBuilder.loadTexts: xdslDsTotBytes.setDescription('Get this parameter to read link downstream total bytes. OID: 1.3.6.1.4.1.7745.5.3.1.1.1.14')
xdslNeTotCrcErr = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslNeTotCrcErr.setStatus('mandatory')
if mibBuilder.loadTexts: xdslNeTotCrcErr.setDescription('Get this parameter to read link near-end total CRC errors. OID: 1.3.6.1.4.1.7745.5.3.1.1.1.15')
xdslNeShowtimeCrcErr = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xdslNeShowtimeCrcErr.setStatus('mandatory')
if mibBuilder.loadTexts: xdslNeShowtimeCrcErr.setDescription('Get this parameter to read link near-end last showtime CRC errors. OID: 1.3.6.1.4.1.7745.5.3.1.1.1.16')
shdsl = MibIdentifier((1, 3, 6, 1, 4, 1, 7745, 5, 3, 2))
shdslTable = MibTable((1, 3, 6, 1, 4, 1, 7745, 5, 3, 2, 1), )
if mibBuilder.loadTexts: shdslTable.setStatus('mandatory')
if mibBuilder.loadTexts: shdslTable.setDescription('This is a table showing the list of shdsl physical interface entries. OID: 1.3.6.1.4.1.7745.5.3.2.1')
shdslEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7745, 5, 3, 2, 1, 1), ).setIndexNames((0, "AETHRA-MIB", "shdslIndex"))
if mibBuilder.loadTexts: shdslEntry.setStatus('mandatory')
if mibBuilder.loadTexts: shdslEntry.setDescription('OID: 1.3.6.1.4.1.7745.5.3.2.1.1')
shdslIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslIndex.setStatus('mandatory')
if mibBuilder.loadTexts: shdslIndex.setDescription('Get this parameter to read the index of the row. OID: 1.3.6.1.4.1.7745.5.3.2.1.1.1')
shdslPhyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslPhyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: shdslPhyStatus.setDescription('Get this parameter to read physical status. OID: 1.3.6.1.4.1.7745.5.3.2.1.1.2')
shdslTc = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslTc.setStatus('mandatory')
if mibBuilder.loadTexts: shdslTc.setDescription('Get this parameter to read physical transmission convergence. OID: 1.3.6.1.4.1.7745.5.3.2.1.1.3')
shdslUsAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslUsAttenuation.setStatus('mandatory')
if mibBuilder.loadTexts: shdslUsAttenuation.setDescription('Get this parameter to read physical upstream attenuation (0.1 dB steps). OID: 1.3.6.1.4.1.7745.5.3.2.1.1.4')
shdslDsAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDsAttenuation.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDsAttenuation.setDescription('Get this parameter to read physical downstream attenuation (0.1 dB steps). OID: 1.3.6.1.4.1.7745.5.3.2.1.1.5')
shdslUsNoiseMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslUsNoiseMargin.setStatus('mandatory')
if mibBuilder.loadTexts: shdslUsNoiseMargin.setDescription('Get this parameter to read physical upstream noise margin (0.1 dB steps). OID: 1.3.6.1.4.1.7745.5.3.2.1.1.6')
shdslDsNoiseMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDsNoiseMargin.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDsNoiseMargin.setDescription('Get this parameter to read physical downstream noise margin (0.1 dB steps). OID: 1.3.6.1.4.1.7745.5.3.2.1.1.7')
shdslUsCurrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslUsCurrRate.setStatus('mandatory')
if mibBuilder.loadTexts: shdslUsCurrRate.setDescription('Get this parameter to read physical upstream current rate (in Kbps). OID: 1.3.6.1.4.1.7745.5.3.2.1.1.8')
shdslDsCurrRate = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDsCurrRate.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDsCurrRate.setDescription('Get this parameter to read physical downstream current rate (in Kbps). OID: 1.3.6.1.4.1.7745.5.3.2.1.1.9')
shdslModulationType = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 2, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslModulationType.setStatus('mandatory')
if mibBuilder.loadTexts: shdslModulationType.setDescription('Get this parameter to read physical modulation type. OID: 1.3.6.1.4.1.7745.5.3.2.1.1.10')
shdslUsMaxTheorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslUsMaxTheorRate.setStatus('mandatory')
if mibBuilder.loadTexts: shdslUsMaxTheorRate.setDescription('Get this parameter to read physical upstream attainable max rate (in Kbps). OID: 1.3.6.1.4.1.7745.5.3.2.1.1.11')
shdslDsMaxTheorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDsMaxTheorRate.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDsMaxTheorRate.setDescription('Get this parameter to read physical downstream attainable max rate (in Kbps). OID: 1.3.6.1.4.1.7745.5.3.2.1.1.12')
shdslUsTotBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslUsTotBytes.setStatus('mandatory')
if mibBuilder.loadTexts: shdslUsTotBytes.setDescription('Get this parameter to read physical upstream total bytes. OID: 1.3.6.1.4.1.7745.5.3.2.1.1.13')
shdslDsTotBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDsTotBytes.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDsTotBytes.setDescription('Get this parameter to read physical downstream total bytes. OID: 1.3.6.1.4.1.7745.5.3.2.1.1.14')
shdslNeTotCrcErr = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslNeTotCrcErr.setStatus('mandatory')
if mibBuilder.loadTexts: shdslNeTotCrcErr.setDescription('Get this parameter to read physical near-end total CRC errors. OID: 1.3.6.1.4.1.7745.5.3.2.1.1.15')
shdslNeShowtimeCrcErr = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslNeShowtimeCrcErr.setStatus('mandatory')
if mibBuilder.loadTexts: shdslNeShowtimeCrcErr.setDescription('Get this parameter to read physical near-end last showtime CRC errors. OID: 1.3.6.1.4.1.7745.5.3.2.1.1.16')
shdslUsPower = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 2, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslUsPower.setStatus('mandatory')
if mibBuilder.loadTexts: shdslUsPower.setDescription('Get this parameter to read physical Us Power. OID: 1.3.6.1.4.1.7745.5.3.2.1.1.17')
shdslDsPower = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 3, 2, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shdslDsPower.setStatus('mandatory')
if mibBuilder.loadTexts: shdslDsPower.setDescription('Get this parameter to read physical Ds Power. OID: 1.3.6.1.4.1.7745.5.3.2.1.1.18')
trunk = MibIdentifier((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1))
trunkTable = MibTable((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 1), )
if mibBuilder.loadTexts: trunkTable.setStatus('mandatory')
if mibBuilder.loadTexts: trunkTable.setDescription('This is a table showing the list of configured voip SIP trunk. OID: 1.3.6.1.4.1.7745.5.4.1.1')
trunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 1, 1), ).setIndexNames((0, "AETHRA-MIB", "trunkIndex"))
if mibBuilder.loadTexts: trunkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: trunkEntry.setDescription('OID: 1.3.6.1.4.1.7745.5.4.1.1.1')
trunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: trunkIndex.setDescription('Get this parameter to read the index of the row. OID: 1.3.6.1.4.1.7745.5.4.1.1.1.1')
trunkName = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkName.setStatus('mandatory')
if mibBuilder.loadTexts: trunkName.setDescription('Get this parameter to read trunk name. OID: 1.3.6.1.4.1.7745.5.4.1.1.1.2')
trunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkType.setStatus('mandatory')
if mibBuilder.loadTexts: trunkType.setDescription('Get this parameter to read trunk type. OID: 1.3.6.1.4.1.7745.5.4.1.1.1.3')
trunkEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("registered", 1), ("unregistered", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkEnable.setStatus('mandatory')
if mibBuilder.loadTexts: trunkEnable.setDescription('Get this parameter to read trunk registration enable. OID: 1.3.6.1.4.1.7745.5.4.1.1.1.4')
trunkDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkDescription.setStatus('mandatory')
if mibBuilder.loadTexts: trunkDescription.setDescription('Get this parameter to read trunk description. OID: 1.3.6.1.4.1.7745.5.4.1.1.1.5')
trunkUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkUserName.setStatus('mandatory')
if mibBuilder.loadTexts: trunkUserName.setDescription('Get this parameter to read trunk username. OID: 1.3.6.1.4.1.7745.5.4.1.1.1.6')
trunkRegHost = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRegHost.setStatus('mandatory')
if mibBuilder.loadTexts: trunkRegHost.setDescription('Get this parameter to read trunk registar host. OID: 1.3.6.1.4.1.7745.5.4.1.1.1.7')
trunkProxyHost = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkProxyHost.setStatus('mandatory')
if mibBuilder.loadTexts: trunkProxyHost.setDescription('Get this parameter to read trunk proxy host. OID: 1.3.6.1.4.1.7745.5.4.1.1.1.8')
trunkIfcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkIfcStatus.setStatus('mandatory')
if mibBuilder.loadTexts: trunkIfcStatus.setDescription('Get this parameter to read trunk interface status. OID: 1.3.6.1.4.1.7745.5.4.1.1.1.9')
trunkRegStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkRegStatus.setStatus('mandatory')
if mibBuilder.loadTexts: trunkRegStatus.setDescription('Get this parameter to read trunk registration status. OID: 1.3.6.1.4.1.7745.5.4.1.1.1.10')
trunkMsgWait = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkMsgWait.setStatus('mandatory')
if mibBuilder.loadTexts: trunkMsgWait.setDescription('Get this parameter to read trunk message wait status. OID: 1.3.6.1.4.1.7745.5.4.1.1.1.11')
trunkIsdnTable = MibTable((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 2), )
if mibBuilder.loadTexts: trunkIsdnTable.setStatus('mandatory')
if mibBuilder.loadTexts: trunkIsdnTable.setDescription('This is a table showing the list of configured voip ISDN trunk. OID: 1.3.6.1.4.1.7745.5.4.1.2')
trunkIsdnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 2, 1), ).setIndexNames((0, "AETHRA-MIB", "trunkIsdnIndex"))
if mibBuilder.loadTexts: trunkIsdnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: trunkIsdnEntry.setDescription('OID: 1.3.6.1.4.1.7745.5.4.1.2.1')
trunkIsdnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkIsdnIndex.setStatus('mandatory')
if mibBuilder.loadTexts: trunkIsdnIndex.setDescription('Get this parameter to read the index of the row. OID: 1.3.6.1.4.1.7745.5.4.1.2.1.1')
trunkIsdnName = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkIsdnName.setStatus('mandatory')
if mibBuilder.loadTexts: trunkIsdnName.setDescription('Get this parameter to read trunk name. OID: 1.3.6.1.4.1.7745.5.4.1.2.1.2')
trunkIsdnType = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkIsdnType.setStatus('mandatory')
if mibBuilder.loadTexts: trunkIsdnType.setDescription('Get this parameter to read trunk type. OID: 1.3.6.1.4.1.7745.5.4.1.2.1.3')
trunkIsdnEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkIsdnEnable.setStatus('mandatory')
if mibBuilder.loadTexts: trunkIsdnEnable.setDescription('Get this parameter to read trunk enable configuration. OID: 1.3.6.1.4.1.7745.5.4.1.2.1.4')
trunkIsdnDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkIsdnDescription.setStatus('mandatory')
if mibBuilder.loadTexts: trunkIsdnDescription.setDescription('Get this parameter to read trunk description. OID: 1.3.6.1.4.1.7745.5.4.1.2.1.5')
trunkIsdnB1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkIsdnB1Status.setStatus('mandatory')
if mibBuilder.loadTexts: trunkIsdnB1Status.setDescription('Get this parameter to read trunk B1 status. OID: 1.3.6.1.4.1.7745.5.4.1.2.1.6')
trunkIsdnB2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkIsdnB2Status.setStatus('mandatory')
if mibBuilder.loadTexts: trunkIsdnB2Status.setDescription('Get this parameter to read trunk B2 status. OID: 1.3.6.1.4.1.7745.5.4.1.2.1.7')
trunkFxoTable = MibTable((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 3), )
if mibBuilder.loadTexts: trunkFxoTable.setStatus('mandatory')
if mibBuilder.loadTexts: trunkFxoTable.setDescription('This is a table showing the list of configured voip FXO trunk. OID: 1.3.6.1.4.1.7745.5.4.1.3')
trunkFxoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 3, 1), ).setIndexNames((0, "AETHRA-MIB", "trunkFxoIndex"))
if mibBuilder.loadTexts: trunkFxoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: trunkFxoEntry.setDescription('OID: 1.3.6.1.4.1.7745.5.4.1.3.1')
trunkFxoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkFxoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: trunkFxoIndex.setDescription('Get this parameter to read the index of the row. OID: 1.3.6.1.4.1.7745.5.4.1.3.1.1')
trunkFxoName = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkFxoName.setStatus('mandatory')
if mibBuilder.loadTexts: trunkFxoName.setDescription('Get this parameter to read trunk name. OID: 1.3.6.1.4.1.7745.5.4.1.3.1.2')
trunkFxoType = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkFxoType.setStatus('mandatory')
if mibBuilder.loadTexts: trunkFxoType.setDescription('Get this parameter to read trunk type. OID: 1.3.6.1.4.1.7745.5.4.1.3.1.3')
trunkFxoEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkFxoEnable.setStatus('mandatory')
if mibBuilder.loadTexts: trunkFxoEnable.setDescription('Get this parameter to read trunk enable configuration. OID: 1.3.6.1.4.1.7745.5.4.1.3.1.4')
trunkFxoDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkFxoDescription.setStatus('mandatory')
if mibBuilder.loadTexts: trunkFxoDescription.setDescription('Get this parameter to read trunk description. OID: 1.3.6.1.4.1.7745.5.4.1.3.1.5')
trunkFxoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 1, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkFxoStatus.setStatus('mandatory')
if mibBuilder.loadTexts: trunkFxoStatus.setDescription('Get this parameter to read trunk status. OID: 1.3.6.1.4.1.7745.5.4.1.3.1.6')
userTerminal = MibIdentifier((1, 3, 6, 1, 4, 1, 7745, 5, 4, 2))
usTermPotsTable = MibTable((1, 3, 6, 1, 4, 1, 7745, 5, 4, 2, 1), )
if mibBuilder.loadTexts: usTermPotsTable.setStatus('mandatory')
if mibBuilder.loadTexts: usTermPotsTable.setDescription('This is a table showing the list of configured voip POTS user terminal. OID: 1.3.6.1.4.1.7745.5.4.2.1')
usTermPotsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7745, 5, 4, 2, 1, 1), ).setIndexNames((0, "AETHRA-MIB", "usTermPotsIndex"))
if mibBuilder.loadTexts: usTermPotsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: usTermPotsEntry.setDescription('OID: 1.3.6.1.4.1.7745.5.4.2.1.1')
usTermPotsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usTermPotsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: usTermPotsIndex.setDescription('Get this parameter to read the index of the row. OID: 1.3.6.1.4.1.7745.5.4.2.1.1.1')
usTermPotsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usTermPotsEnable.setStatus('mandatory')
if mibBuilder.loadTexts: usTermPotsEnable.setDescription('Get this parameter to read user terminal enable configuration. OID: 1.3.6.1.4.1.7745.5.4.2.1.1.2')
usTermPotsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usTermPotsDescription.setStatus('mandatory')
if mibBuilder.loadTexts: usTermPotsDescription.setDescription('Get this parameter to read user terminal description. OID: 1.3.6.1.4.1.7745.5.4.2.1.1.3')
usTermPotsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usTermPotsStatus.setStatus('mandatory')
if mibBuilder.loadTexts: usTermPotsStatus.setDescription('Get this parameter to read user terminal status. OID: 1.3.6.1.4.1.7745.5.4.2.1.1.4')
usTermPotsDspSlic = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usTermPotsDspSlic.setStatus('mandatory')
if mibBuilder.loadTexts: usTermPotsDspSlic.setDescription('Get this parameter to read user terminal DSP Slic. OID: 1.3.6.1.4.1.7745.5.4.2.1.1.5')
usTermISDNTable = MibTable((1, 3, 6, 1, 4, 1, 7745, 5, 4, 2, 2), )
if mibBuilder.loadTexts: usTermISDNTable.setStatus('mandatory')
if mibBuilder.loadTexts: usTermISDNTable.setDescription('This is a table showing the list of configured voip ISDN user terminal. OID: 1.3.6.1.4.1.7745.5.4.2.2')
usTermISDNEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7745, 5, 4, 2, 2, 1), ).setIndexNames((0, "AETHRA-MIB", "usTermISDNIndex"))
if mibBuilder.loadTexts: usTermISDNEntry.setStatus('mandatory')
if mibBuilder.loadTexts: usTermISDNEntry.setDescription('OID: 1.3.6.1.4.1.7745.5.4.2.2.1')
usTermISDNIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usTermISDNIndex.setStatus('mandatory')
if mibBuilder.loadTexts: usTermISDNIndex.setDescription('Get this parameter to read the index of the row. OID: 1.3.6.1.4.1.7745.5.4.2.2.1.1')
usTermISDNEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usTermISDNEnable.setStatus('mandatory')
if mibBuilder.loadTexts: usTermISDNEnable.setDescription('Get this parameter to read user terminal enable configuration. OID: 1.3.6.1.4.1.7745.5.4.2.2.1.2')
usTermISDNDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usTermISDNDescription.setStatus('mandatory')
if mibBuilder.loadTexts: usTermISDNDescription.setDescription('Get this parameter to read user terminal description. OID: 1.3.6.1.4.1.7745.5.4.2.2.1.3')
usTermIsdnStatusB1 = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 2, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usTermIsdnStatusB1.setStatus('mandatory')
if mibBuilder.loadTexts: usTermIsdnStatusB1.setDescription('Get this parameter to read user terminal B1 status. OID: 1.3.6.1.4.1.7745.5.4.2.2.1.4')
usTermIsdnStatusB2 = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 2, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usTermIsdnStatusB2.setStatus('mandatory')
if mibBuilder.loadTexts: usTermIsdnStatusB2.setDescription('Get this parameter to read user terminal B2 status. OID: 1.3.6.1.4.1.7745.5.4.2.2.1.5')
usTermDectTable = MibTable((1, 3, 6, 1, 4, 1, 7745, 5, 4, 2, 3), )
if mibBuilder.loadTexts: usTermDectTable.setStatus('mandatory')
if mibBuilder.loadTexts: usTermDectTable.setDescription('This is a table showing the list of configured voip DECT user terminal. OID: 1.3.6.1.4.1.7745.5.4.2.3')
usTermDectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7745, 5, 4, 2, 3, 1), ).setIndexNames((0, "AETHRA-MIB", "usTermDectIndex"))
if mibBuilder.loadTexts: usTermDectEntry.setStatus('mandatory')
if mibBuilder.loadTexts: usTermDectEntry.setDescription('OID: 1.3.6.1.4.1.7745.5.4.2.3.1')
usTermDectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usTermDectIndex.setStatus('mandatory')
if mibBuilder.loadTexts: usTermDectIndex.setDescription('Get this parameter to read the index of the row. OID: 1.3.6.1.4.1.7745.5.4.2.3.1.1')
usTermDectEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: usTermDectEnable.setStatus('mandatory')
if mibBuilder.loadTexts: usTermDectEnable.setDescription('Get this parameter to read user terminal enable configuration. OID: 1.3.6.1.4.1.7745.5.4.2.3.1.2')
usTermDectDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 2, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usTermDectDescription.setStatus('mandatory')
if mibBuilder.loadTexts: usTermDectDescription.setDescription('Get this parameter to read user terminal description. OID: 1.3.6.1.4.1.7745.5.4.2.3.1.3')
usTermDectStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 2, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usTermDectStatus.setStatus('mandatory')
if mibBuilder.loadTexts: usTermDectStatus.setDescription('Get this parameter to read user terminal status. OID: 1.3.6.1.4.1.7745.5.4.2.3.1.4')
usTermDectDspSlic = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 4, 2, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usTermDectDspSlic.setStatus('mandatory')
if mibBuilder.loadTexts: usTermDectDspSlic.setDescription('Get this parameter to read user terminal DSP Slic. OID: 1.3.6.1.4.1.7745.5.4.2.3.1.5')
voipMaxConnection = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipMaxConnection.setStatus('mandatory')
if mibBuilder.loadTexts: voipMaxConnection.setDescription('Set this parameter to configure global voip max connections. OID: 1.3.6.1.4.1.7745.5.4.3')
genericTrap = NotificationType((1, 3, 6, 1, 4, 1, 7745, 5, 5, 1)).setObjects(("AETHRA-MIB", "genericError"))
if mibBuilder.loadTexts: genericTrap.setStatus('current')
if mibBuilder.loadTexts: genericTrap.setDescription('This trap is used to send generic string alarm messages to SNMP manager, when a particular condition occurs. OID: 1.3.6.1.4.1.7745.5.5.1')
genericError = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 5, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: genericError.setStatus('mandatory')
if mibBuilder.loadTexts: genericError.setDescription('Describe a generic error for generic trap. OID: 1.3.6.1.4.1.7745.5.5.2')
interfaceUp = NotificationType((1, 3, 6, 1, 4, 1, 7745, 5, 5, 3)).setObjects(("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: interfaceUp.setStatus('current')
if mibBuilder.loadTexts: interfaceUp.setDescription('This trap is sent when a physical interface go up. OID: 1.3.6.1.4.1.7745.5.5.3')
interfaceDown = NotificationType((1, 3, 6, 1, 4, 1, 7745, 5, 5, 4)).setObjects(("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: interfaceDown.setStatus('current')
if mibBuilder.loadTexts: interfaceDown.setDescription('This trap is sent when a physical interface go down. OID: 1.3.6.1.4.1.7745.5.5.4')
trunkRegistered = NotificationType((1, 3, 6, 1, 4, 1, 7745, 5, 5, 5)).setObjects(("AETHRA-MIB", "trunkName"))
if mibBuilder.loadTexts: trunkRegistered.setStatus('current')
if mibBuilder.loadTexts: trunkRegistered.setDescription('This trap is sent when a voip SIP Trunk registered. OID: 1.3.6.1.4.1.7745.5.5.5')
trunkUnregistered = NotificationType((1, 3, 6, 1, 4, 1, 7745, 5, 5, 6)).setObjects(("AETHRA-MIB", "trunkName"))
if mibBuilder.loadTexts: trunkUnregistered.setStatus('current')
if mibBuilder.loadTexts: trunkUnregistered.setDescription('This trap is sent when a voip SIP Trunk unregistered. OID: 1.3.6.1.4.1.7745.5.5.6')
mgmtAccesses = MibIdentifier((1, 3, 6, 1, 4, 1, 7745, 5, 5, 7))
mgmtUser = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 5, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtUser.setStatus('mandatory')
if mibBuilder.loadTexts: mgmtUser.setDescription('A textual string containing user name. OID: 1.3.6.1.4.1.7745.5.5.7.1')
mgmtPrivilege = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 5, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtPrivilege.setStatus('mandatory')
if mibBuilder.loadTexts: mgmtPrivilege.setDescription('A textual string containing user privilege. OID: 1.3.6.1.4.1.7745.5.5.7.2')
mgmtTime = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 5, 7, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtTime.setStatus('mandatory')
if mibBuilder.loadTexts: mgmtTime.setDescription('A textual string containing time and date of event. OID: 1.3.6.1.4.1.7745.5.5.7.3')
mgmtType = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 5, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("console", 1), ("telnet", 2), ("web", 3), ("snmp", 4), ("ssh", 5), ("tr069", 6), ("unknown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtType.setStatus('mandatory')
if mibBuilder.loadTexts: mgmtType.setDescription('A textual string containing user access type. OID: 1.3.6.1.4.1.7745.5.5.7.4')
mgmtAddress = MibScalar((1, 3, 6, 1, 4, 1, 7745, 5, 5, 7, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mgmtAddress.setDescription('A textual string containing ip for remote access type. OID: 1.3.6.1.4.1.7745.5.5.7.5')
mgmtLogin = NotificationType((1, 3, 6, 1, 4, 1, 7745, 5, 5, 7, 6)).setObjects(("AETHRA-MIB", "mgmtUser"), ("AETHRA-MIB", "mgmtPrivilege"), ("AETHRA-MIB", "mgmtTime"), ("AETHRA-MIB", "mgmtType"), ("AETHRA-MIB", "mgmtAddress"))
if mibBuilder.loadTexts: mgmtLogin.setStatus('current')
if mibBuilder.loadTexts: mgmtLogin.setDescription('This trap is sent when a user login in the system console. OID: 1.3.6.1.4.1.7745.5.5.7.6')
mgmtLogout = NotificationType((1, 3, 6, 1, 4, 1, 7745, 5, 5, 7, 7)).setObjects(("AETHRA-MIB", "mgmtUser"), ("AETHRA-MIB", "mgmtPrivilege"), ("AETHRA-MIB", "mgmtTime"), ("AETHRA-MIB", "mgmtType"), ("AETHRA-MIB", "mgmtAddress"))
if mibBuilder.loadTexts: mgmtLogout.setStatus('current')
if mibBuilder.loadTexts: mgmtLogout.setDescription('This trap is sent when a user logout from the system console. OID: 1.3.6.1.4.1.7745.5.5.7.7')
mgmtChange = NotificationType((1, 3, 6, 1, 4, 1, 7745, 5, 5, 7, 8)).setObjects(("AETHRA-MIB", "mgmtUser"), ("AETHRA-MIB", "mgmtTime"), ("AETHRA-MIB", "mgmtType"), ("AETHRA-MIB", "mgmtAddress"))
if mibBuilder.loadTexts: mgmtChange.setStatus('current')
if mibBuilder.loadTexts: mgmtChange.setDescription('This trap is sent when a logged user change param in the system console. OID: 1.3.6.1.4.1.7745.5.5.7.8')
ifcTable = MibTable((1, 3, 6, 1, 4, 1, 7745, 5, 6, 1), )
if mibBuilder.loadTexts: ifcTable.setStatus('mandatory')
if mibBuilder.loadTexts: ifcTable.setDescription('This is a table showing the list of interface entries. The number of entries is given by the value of mib-2 ifNumber. The indexes for the rows are equivalent to mib-2 ifIndex. OID: 1.3.6.1.4.1.7745.5.6.1')
ifcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7745, 5, 6, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: ifcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ifcEntry.setDescription(' OID: 1.3.6.1.4.1.7745.5.6.1.1')
ifcName = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 6, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifcName.setStatus('mandatory')
if mibBuilder.loadTexts: ifcName.setDescription('Get this parameter to read interface name. OID: 1.3.6.1.4.1.7745.5.6.1.1.1')
ifcDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifcDescr.setStatus('mandatory')
if mibBuilder.loadTexts: ifcDescr.setDescription('Get this parameter to read interface description. OID: 1.3.6.1.4.1.7745.5.6.1.1.2')
ifcType = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 6, 1, 1, 3), IANAifType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifcType.setStatus('mandatory')
if mibBuilder.loadTexts: ifcType.setDescription('Get this parameter to read interface type. The types refer to those assigned by the Internet Assigned Numbers Authority (IANA). OID: 1.3.6.1.4.1.7745.5.6.1.1.3')
ifcPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 6, 1, 1, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifcPhysAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ifcPhysAddress.setDescription('Get this parameter to read interface physical address (mac address). OID: 1.3.6.1.4.1.7745.5.6.1.1.4')
ifcMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifcMtu.setStatus('mandatory')
if mibBuilder.loadTexts: ifcMtu.setDescription('Get this parameter to read interface MTU, the size of the largest datagram which can be sent/received on the interface, specified in octets. OID: 1.3.6.1.4.1.7745.5.6.1.1.5')
ifcSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 6, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifcSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: ifcSpeed.setDescription("Get this parameter to read interface speed, an estimate of the interface's current bandwidth in bits per second. OID: 1.3.6.1.4.1.7745.5.6.1.1.6")
ifcRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 6, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifcRxRate.setStatus('mandatory')
if mibBuilder.loadTexts: ifcRxRate.setDescription('Get this parameter to read the current and effective RX rate in bit per second. OID: 1.3.6.1.4.1.7745.5.6.1.1.7')
ifcTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 7745, 5, 6, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifcTxRate.setStatus('mandatory')
if mibBuilder.loadTexts: ifcTxRate.setDescription('Get this parameter to read the current and effective TX rate in bit per second. OID: 1.3.6.1.4.1.7745.5.6.1.1.8')
mibBuilder.exportSymbols("AETHRA-MIB", shdslUsAttenuation=shdslUsAttenuation, pingSource=pingSource, shdslDsMaxTheorRate=shdslDsMaxTheorRate, trunkTable=trunkTable, trunkIsdnEnable=trunkIsdnEnable, ifcPhysAddress=ifcPhysAddress, ping=ping, pingMaxRTT=pingMaxRTT, trunkEntry=trunkEntry, pingTTL=pingTTL, shdslDsNoiseMargin=shdslDsNoiseMargin, fileTransferProtocol=fileTransferProtocol, performanceDynMemTotal=performanceDynMemTotal, shdslUsCurrRate=shdslUsCurrRate, systemFtpPassword=systemFtpPassword, xdslDsNoiseMargin=xdslDsNoiseMargin, trunkIfcStatus=trunkIfcStatus, trunkFxoStatus=trunkFxoStatus, pingTimeOut=pingTimeOut, interfaceUp=interfaceUp, systemAAALogTimeout=systemAAALogTimeout, ifcSpeed=ifcSpeed, shdsl=shdsl, restartExec=restartExec, mgmtUser=mgmtUser, trunkIsdnIndex=trunkIsdnIndex, dsl=dsl, genericTrap=genericTrap, xdslEntry=xdslEntry, trunkFxoTable=trunkFxoTable, trunkFxoEntry=trunkFxoEntry, shdslNeShowtimeCrcErr=shdslNeShowtimeCrcErr, shdslPhyStatus=shdslPhyStatus, systemName=systemName, ifc=ifc, mgmtAccesses=mgmtAccesses, pingStatus=pingStatus, systemDefaultFtpServer=systemDefaultFtpServer, xdslTable=xdslTable, trunkIsdnB2Status=trunkIsdnB2Status, restartDelay=restartDelay, mgmtAddress=mgmtAddress, shdslNeTotCrcErr=shdslNeTotCrcErr, performanceDynMemFree=performanceDynMemFree, traps=traps, shdslDsCurrRate=shdslDsCurrRate, fileTransferServerName=fileTransferServerName, voipMaxConnection=voipMaxConnection, mgmtType=mgmtType, usTermDectTable=usTermDectTable, usTermISDNEntry=usTermISDNEntry, xdslModulationType=xdslModulationType, xdslDsMaxTheorRate=xdslDsMaxTheorRate, usTermISDNDescription=usTermISDNDescription, usTermISDNEnable=usTermISDNEnable, xdslUsNoiseMargin=xdslUsNoiseMargin, trunkProxyHost=trunkProxyHost, trunkRegStatus=trunkRegStatus, system=system, trunkIsdnEntry=trunkIsdnEntry, userTerminal=userTerminal, ifcEntry=ifcEntry, pingLOSTpacket=pingLOSTpacket, usTermDectEnable=usTermDectEnable, shdslUsNoiseMargin=shdslUsNoiseMargin, fileTransferFileName=fileTransferFileName, ifcName=ifcName, shdslEntry=shdslEntry, shdslUsMaxTheorRate=shdslUsMaxTheorRate, pingTXpacket=pingTXpacket, usTermPotsDspSlic=usTermPotsDspSlic, trunkIsdnType=trunkIsdnType, usTermPotsIndex=usTermPotsIndex, usTermDectDescription=usTermDectDescription, genericError=genericError, restartOption=restartOption, pingTries=pingTries, trunkFxoEnable=trunkFxoEnable, aethra=aethra, trunkFxoDescription=trunkFxoDescription, mgmtPrivilege=mgmtPrivilege, ifcTxRate=ifcTxRate, trunkIndex=trunkIndex, systemScpUsername=systemScpUsername, xdslUsMaxTheorRate=xdslUsMaxTheorRate, systemTftpLocalAdd=systemTftpLocalAdd, trunkMsgWait=trunkMsgWait, fileTransferStorageFileName=fileTransferStorageFileName, systemScpPassword=systemScpPassword, xdslIndex=xdslIndex, shdslTc=shdslTc, trunkRegHost=trunkRegHost, trunkUnregistered=trunkUnregistered, usTermPotsStatus=usTermPotsStatus, mgmtTime=mgmtTime, trunk=trunk, systemDefaultTftpServer=systemDefaultTftpServer, mgmtLogin=mgmtLogin, systemConsoleEnable=systemConsoleEnable, trunkFxoIndex=trunkFxoIndex, performance=performance, fileTransferExec=fileTransferExec, ifcType=ifcType, pingHost=pingHost, trunkIsdnName=trunkIsdnName, usTermIsdnStatusB2=usTermIsdnStatusB2, shdslIndex=shdslIndex, systemCryptedPassword=systemCryptedPassword, performanceDynMemLoad=performanceDynMemLoad, trunkIsdnDescription=trunkIsdnDescription, xdslUsTotBytes=xdslUsTotBytes, fileTransferStatus=fileTransferStatus, systemLoglevel=systemLoglevel, xdslDsTotBytes=xdslDsTotBytes, shdslDsPower=shdslDsPower, usTermDectIndex=usTermDectIndex, pingSize=pingSize, trunkDescription=trunkDescription, trunkUserName=trunkUserName, usTermDectStatus=usTermDectStatus, systemFtpUsername=systemFtpUsername, usTermISDNTable=usTermISDNTable, ifcDescr=ifcDescr, trunkFxoType=trunkFxoType, xdslNeShowtimeCrcErr=xdslNeShowtimeCrcErr, shdslTable=shdslTable, fileTransferOption=fileTransferOption, usTermPotsDescription=usTermPotsDescription, trunkName=trunkName, systemDescription=systemDescription, performanceCpuAvg15min=performanceCpuAvg15min, systemScrollLine=systemScrollLine, pingStart=pingStart, trunkIsdnB1Status=trunkIsdnB1Status, systemSave=systemSave, performanceCpuAvg1min=performanceCpuAvg1min, xdslUsAttenuation=xdslUsAttenuation, xdslNeTotCrcErr=xdslNeTotCrcErr, shdslModulationType=shdslModulationType, usTermPotsTable=usTermPotsTable, interfaceDown=interfaceDown, ifcMtu=ifcMtu, systemRestart=systemRestart, trunkIsdnTable=trunkIsdnTable, xdslUsCurrRate=xdslUsCurrRate, usTermISDNIndex=usTermISDNIndex, xdsl=xdsl, trunkEnable=trunkEnable, pingParameters=pingParameters, pingAvgRTT=pingAvgRTT, mgmtLogout=mgmtLogout, xdslLinkStatus=xdslLinkStatus, pingMinRTT=pingMinRTT, trunkRegistered=trunkRegistered, xdslTc=xdslTc, trunkFxoName=trunkFxoName, mgmtChange=mgmtChange, xdslDsAttenuation=xdslDsAttenuation, atosnt=atosnt, systemAAAProfile=systemAAAProfile, shdslDsTotBytes=shdslDsTotBytes, shdslDsAttenuation=shdslDsAttenuation, systemDefaultScpServer=systemDefaultScpServer, systemFtpLocalAdd=systemFtpLocalAdd, usTermDectDspSlic=usTermDectDspSlic, pingRXpacket=pingRXpacket, shdslUsPower=shdslUsPower, voip=voip, ifcRxRate=ifcRxRate, fileTransfer=fileTransfer, usTermDectEntry=usTermDectEntry, pingStatistics=pingStatistics, usTermIsdnStatusB1=usTermIsdnStatusB1, tools=tools, restartStatus=restartStatus, trunkType=trunkType, performanceCpuAvg5min=performanceCpuAvg5min, systemBackupAuth=systemBackupAuth, ifcTable=ifcTable, systemKernelLogs=systemKernelLogs, systemLogMsgRate=systemLogMsgRate, xdslDsCurrRate=xdslDsCurrRate, shdslUsTotBytes=shdslUsTotBytes, usTermPotsEntry=usTermPotsEntry, usTermPotsEnable=usTermPotsEnable, systemLocalDomain=systemLocalDomain)
