#
# PySNMP MIB module SW-IGMP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SW-IGMP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:12:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, Integer32, TimeTicks, Counter32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ModuleIdentity, enterprises, NotificationType, ObjectIdentity, Unsigned32, MibIdentifier, Bits, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Integer32", "TimeTicks", "Counter32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ModuleIdentity", "enterprises", "NotificationType", "ObjectIdentity", "Unsigned32", "MibIdentifier", "Bits", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class PortList(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

marconi = MibIdentifier((1, 3, 6, 1, 4, 1, 326))
systems = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2))
external = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20))
dlink = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1))
dlinkcommon = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 1))
golf = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2))
golfproducts = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 1))
es2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 1, 3))
golfcommon = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2))
marconi_mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2)).setLabel("marconi-mgmt")
es2000Mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28))
swL2Mgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2))
swIGMP = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7))
swIGMPCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7, 1))
swIGMPAdminState = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIGMPAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: swIGMPAdminState.setDescription('This object allows the user to enable/disable the IGMP snooping function. The IGMP function provided by the device includes both v1 and v2.')
swIGMPTimeout = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7, 1, 2), Integer32().clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIGMPTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: swIGMPTimeout.setDescription('The timeout value for sending IGMP query packet when no one was sent by the multicast router in the lan. The device will actively send the query message.')
swIGMPInfoTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7, 2), )
if mibBuilder.loadTexts: swIGMPInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: swIGMPInfoTable.setDescription('The table contains the number current IGMP query packets which is captured by this device, as well as the IGMP query packets sent by the device.')
swIGMPInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7, 2, 1), ).setIndexNames((0, "SW-IGMP-MIB", "swIGMPInfoIndex"))
if mibBuilder.loadTexts: swIGMPInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: swIGMPInfoEntry.setDescription('Information about current IGMP query information, provided that swDevIGMPCaptureState and swIGMPCtrlState of associated VLAN entry are all enabled.')
swIGMPInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swIGMPInfoIndex.setDescription('This object indicates the IGMP query information entry number. It could be up to 12 entries, depending on current number of VLAN entries.')
swIGMPInfoVid = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPInfoVid.setStatus('mandatory')
if mibBuilder.loadTexts: swIGMPInfoVid.setDescription('This object indicates the Vid of associated IGMP info table entry. It follows swIGMPCtrlVid in the associated entry of IGMP control table (swIGMPCtrlTable).')
swIGMPInfoQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPInfoQueryCount.setStatus('mandatory')
if mibBuilder.loadTexts: swIGMPInfoQueryCount.setDescription('This object indicates the number of query packets received since the IGMP function enabled, in per-VLAN basis.')
swIGMPInfoTxQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPInfoTxQueryCount.setStatus('mandatory')
if mibBuilder.loadTexts: swIGMPInfoTxQueryCount.setDescription('This object indicates the send count of IGMP query messages, in per-VLAN basis. In case of IGMP timer expiration, the switch sends IGMP query packets to related VLAN member ports and increment this object by 1.')
swIGMPTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7, 3), )
if mibBuilder.loadTexts: swIGMPTable.setStatus('mandatory')
if mibBuilder.loadTexts: swIGMPTable.setDescription('This table contains information regarding to the IGMP group membership report received by each port. The system will use the information recorded in this table to forward the multicast packet to those ports which have group membership. Since packets will not be forwarded to necessary ports, the network bandwith can thus be saved.')
swIGMPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7, 3, 1), ).setIndexNames((0, "SW-IGMP-MIB", "swIGMPVid"), (0, "SW-IGMP-MIB", "swIGMPGroupIpAddr"))
if mibBuilder.loadTexts: swIGMPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: swIGMPEntry.setDescription('Each entry describes the ports which are member of a specific group address. Note that when a specific multicast address existing in the table also exist in the filter table, the filter table has higher priority over this table.')
swIGMPVid = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPVid.setStatus('mandatory')
if mibBuilder.loadTexts: swIGMPVid.setDescription('This object indicates the Vid of individual IGMP table entry. It shows the Vid of IGMP report information captured on network.')
swIGMPGroupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPGroupIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: swIGMPGroupIpAddr.setDescription('A IP multicast group address which has port membership in the underlying network.')
swIGMPGroupMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7, 3, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPGroupMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: swIGMPGroupMacAddr.setDescription('The multicast MAC address corresponds to swIGMPGroupIpAddr.')
swIGMPPortMap = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7, 3, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPPortMap.setStatus('mandatory')
if mibBuilder.loadTexts: swIGMPPortMap.setDescription('Indicates the set of ports which are members of this multicast group. These ports are represented by a octet string.The most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port.')
swIGMPIpGroupReportCount = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPIpGroupReportCount.setStatus('mandatory')
if mibBuilder.loadTexts: swIGMPIpGroupReportCount.setDescription('Indicates the number of group membership report packets received by the device corresponding to this multicast group.')
swIGMPCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7, 4), )
if mibBuilder.loadTexts: swIGMPCtrlTable.setStatus('mandatory')
if mibBuilder.loadTexts: swIGMPCtrlTable.setDescription("The table controls the Vlan's IGMP function. Its scale depends on current VLAN state (swVlanInfoStatus). If VLAN is disabled or in Mac-Base mode, there is only one entry in the table, with index 1. If VLAN is in Port-Base or 802.1q mode, the number of entries can be up to 12, with index range from 1 to 12.")
swIGMPCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7, 4, 1), ).setIndexNames((0, "SW-IGMP-MIB", "swIGMPCtrlIndex"))
if mibBuilder.loadTexts: swIGMPCtrlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: swIGMPCtrlEntry.setDescription('The entry in IGMP control table (swIGMPCtrlTable). The entry is effective only when IGMP capture switch is enabled.')
swIGMPCtrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIGMPCtrlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: swIGMPCtrlIndex.setDescription('This object indicates the IGMP control entry number.Its scale depends on current VLAN state (es400VlanInfoStatus). If VLAN is disabled or in Mac-Base mode, there is only one entry in the table, with index 1. If VLAN is in Port-Base or 802.1q mode, the number of entries is 12, with index range from 1 to 12.')
swIGMPCtrlVid = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIGMPCtrlVid.setStatus('mandatory')
if mibBuilder.loadTexts: swIGMPCtrlVid.setDescription("This object indicates the IGMP control entry's VLAN id. If VLAN is disabled or in Mac-Base mode, the Vid is always 0 and cannot be changed by management users. If VLAN is in Port-Base mode, the Vid is arranged from 1 to 12 , fixed form. If VLAN is in 802.1q mode, the Vid setting can vary from 1 to 4094 by management user, and the Vid in each entry must be unique in the IGMP Control Table.")
swIGMPCtrlTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 9999)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIGMPCtrlTimer.setStatus('mandatory')
if mibBuilder.loadTexts: swIGMPCtrlTimer.setDescription('The timer value for sending IGMP query packet when none was sent by the multicast router in the LAN. The timer works in per-VLAN basis. Our device will be activated to send the query message if the timer is expired. Please reference RFC2236-1997. And it recommends a default of 125 seconds. The timeout value must be at least 30 seconds.')
swIGMPCtrlState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 20, 1, 2, 2, 2, 28, 2, 7, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("deleted", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swIGMPCtrlState.setStatus('mandatory')
if mibBuilder.loadTexts: swIGMPCtrlState.setDescription('This object indicates the status of this entry. other(1) - This entry is currently in use but the conditions under which it will remain so are different from each of the following values. disable(2) - IGMP funtion is disabled for this entry. enable(3) - IGMP funtion is enabled for this entry. deleted(4) - IGMP entry is deleted.')
mibBuilder.exportSymbols("SW-IGMP-MIB", swIGMPCtrlVid=swIGMPCtrlVid, MacAddress=MacAddress, dlinkcommon=dlinkcommon, marconi=marconi, golf=golf, swIGMPCtrlTimer=swIGMPCtrlTimer, swIGMPInfoQueryCount=swIGMPInfoQueryCount, swIGMPIpGroupReportCount=swIGMPIpGroupReportCount, swIGMPCtrlEntry=swIGMPCtrlEntry, swIGMPCtrlState=swIGMPCtrlState, swIGMPCtrl=swIGMPCtrl, PortList=PortList, swIGMPInfoIndex=swIGMPInfoIndex, swIGMPInfoTxQueryCount=swIGMPInfoTxQueryCount, swIGMPCtrlTable=swIGMPCtrlTable, swIGMPTimeout=swIGMPTimeout, external=external, swIGMPGroupIpAddr=swIGMPGroupIpAddr, es2000=es2000, swIGMPVid=swIGMPVid, marconi_mgmt=marconi_mgmt, systems=systems, swIGMPInfoTable=swIGMPInfoTable, swIGMPInfoVid=swIGMPInfoVid, golfproducts=golfproducts, swIGMPPortMap=swIGMPPortMap, swIGMPAdminState=swIGMPAdminState, swIGMPTable=swIGMPTable, swIGMPCtrlIndex=swIGMPCtrlIndex, golfcommon=golfcommon, es2000Mgmt=es2000Mgmt, swIGMPInfoEntry=swIGMPInfoEntry, swIGMPEntry=swIGMPEntry, swIGMP=swIGMP, dlink=dlink, swIGMPGroupMacAddr=swIGMPGroupMacAddr, swL2Mgmt=swL2Mgmt)
