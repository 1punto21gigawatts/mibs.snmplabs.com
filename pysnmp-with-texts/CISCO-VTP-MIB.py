#
# PySNMP MIB module CISCO-VTP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-VTP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:51:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
Cisco2KVlanList, = mibBuilder.importSymbols("CISCO-TC", "Cisco2KVlanList")
ifIndex, InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndexOrZero", "InterfaceIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
OwnerString, = mibBuilder.importSymbols("RMON-MIB", "OwnerString")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Bits, MibIdentifier, ObjectIdentity, NotificationType, Counter32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Gauge32, IpAddress, iso, Integer32, TimeTicks, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibIdentifier", "ObjectIdentity", "NotificationType", "Counter32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Gauge32", "IpAddress", "iso", "Integer32", "TimeTicks", "Counter64")
DisplayString, TimeStamp, TextualConvention, TruthValue, DateAndTime, RowStatus, TestAndIncr = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeStamp", "TextualConvention", "TruthValue", "DateAndTime", "RowStatus", "TestAndIncr")
ciscoVtpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 46))
ciscoVtpMIB.setRevisions(('2013-10-14 00:00', '2010-05-12 00:00', '2009-12-03 00:00', '2008-03-07 00:00', '2007-10-04 00:00', '2006-02-17 00:00', '2004-02-11 00:00', '2003-11-21 00:00', '2003-08-08 00:00', '2003-07-11 00:00', '2003-04-16 00:00', '2002-04-10 00:00', '2002-02-28 00:00', '2001-08-03 00:00', '2001-02-26 00:00', '2001-02-12 00:00', '2000-09-19 00:00', '2000-04-10 00:00', '2000-01-06 00:00', '1999-02-25 11:30', '1999-01-05 11:30', '1998-05-19 11:30', '1997-08-08 11:38', '1997-05-09 11:30', '1997-02-24 11:15', '1997-01-27 17:30', '1996-09-16 12:30', '1996-07-17 12:30', '1996-01-18 18:20',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoVtpMIB.setRevisionsDescriptions(('Added following OBJECT-GROUP - vtpSourceInterfaceGroup - vtpConfigFileGroup - vtpVlanLocalShutdownGroup - vtpLocalUpdaterGroup - vtpDeviceIdGroup Added new compliance - vtpMIBCompliance16.', 'Added vlanTrunkPortActiveVlansGroup. Updated the description of vtpServerDisabled.', 'Added vtpTrunkPruningGroup3 and vtpConfigNotificationsGroup8. Modified the description of vtpNotificationsEnabled and managementDomainPruningState.', 'Added vlanStatsGroup. Deprecated vtpConfigNotificationsGroup5 and replaced it with vtpConfigNotificationsGroup6 and vtpConfigNotificationsGroup7.', 'Correct the descriptions of the object vtpConfigDigestErrors and the tables vtpVlanTable and vtpInternalVlanTable.', 'Removed the OwnerString TEXTUAL-CONVENTION and imported the same from RMON-MIB.', "Added 'dynamicGvrp(4)' for the TC VlanTypeExt.", "Add vtpInternalVlanGrp to configure internal VLANs' allocation policy and show the owner application names.", 'Split vtpConfigNotificationsGroup into two groups: vtpConfigNotificationsGroupRev1 and vtpConfigNotificationsGroup5. Write a new compliance statement to list vtpConfigNotificationsGroupRev1 in instead of vtpConfigNotificationsGroup in the MANDATORY-GROUPS.', 'Modify the description of the TC VlanIndex.', "Add support for VTP version 3 features. -- Add enumerators and modify the 'DESCRIPTION' of 6 existing objects: vtpVersion, managementDomainLocalMode, managementDomainConfigRevNumber, managementDomainLastUpdater, managementDomainLastChange, managementDomainVersionInUse. -- Add 3 new groups: vtpAuthGroup, vtpDiscoverGroup, vtpDatabaseGroup.", '-- Add 4 new notifications/traps vtpLocalModeChanged, vtpVersionInUseChanged, vtpVlanCreated and vtpVlanDeleted. -- Add 2 new objects vtpVlanCreatedNotifEnabled and vtpVlanDeletedNotifEnabled to control the generation of vtpVlanCreated and vtpVlanDeleted. -- Use vtpNotificationsEnabled to control the generation of vtpLocalModeChanged and vtpVersionInUseChanged by grouping them in a new group vtpConfigNotificationsGroup2. -- Deprecate the object vlanTrunkPortsDot1qTag and its related group.', 'Deprecate the object, vlanTrunkPortDot1qTunnel.', 'Add a new off(4) mode to managementDomainLocalMode.', 'Deprecate read-only object vtpVlanEditTypeExt and add a new read-create object vtpVlanEditTypeExt2. Enable Notification groups.', 'Added Remote SPAN (RSPAN) VLAN feature, VLAN management features without supporting VTP protocol and a new object to handle one-VLAN-editing.', 'Added the mapping from VLAN ID to its corresponding ifIndex', 'Added 4k VLAN editing and Dot1qTunnel support', 'Added 4k VLAN support', 'Added import of NOTIFICATION-GROUP', 'Added support for encapsulation type notApplicable', 'Added support for encapsulation type negotiation', 'Added Backup CRF object', 'Added ARE and STE hop counts.', 'Added support for turning on VTP for Trunk cards.', 'Added support for version 2 features.', 'Updated the Token-Ring support.', 'Updated to include objects in support of VTP pruning.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoVtpMIB.setLastUpdated('201310140000Z')
if mibBuilder.loadTexts: ciscoVtpMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoVtpMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-wbu@cisco.com, cs-lan-switch-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoVtpMIB.setDescription('The MIB module for entities implementing the VTP protocol and Vlan management.')
vtpMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 46, 1))
class VlanIndex(TextualConvention, Integer32):
    description = 'The VLAN-id of a VLAN on ISL or 802.1q trunks. Modification of default parameters is allowed. Implementations are allowed to restrict the range of VLANs. For entities support up to 1024 VLANS. VLANs above 1000 are reserved for default VLANs and future use. Modification of default parameters is allowed. Creation or deletion of VLANs above 1000 is not allowed. For a new object which needs the vlan-id of a VLAN as its SYNTAX, it is suggested to import VlanIndex from Q-BRIDGE-MIB instead of importing this TC here in CISCO-VTP-MIB.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 4095)

class ManagementDomainIndex(TextualConvention, Integer32):
    description = 'An arbitrary integer-value to uniquely identify a management domain on the local system.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 255)

class VlanType(TextualConvention, Integer32):
    description = "The type of a VLAN. Note that the 'ethernet' type, is used for any ethernet or 802.3 VLAN, including an ATM Ethernet ELAN; and the 'tokenRing' ('trCrf') type is used for each VLAN representing a single logical 802.5 ring including an ATM Token-Ring ELAN. The 'trCrf' type is used for token ring VLANs made up of (at most) one transparently bridged LAN segment. The 'trBrf' type is used for VLANs which represent the scope of many 'trCrf' VLANs all connected together via source route bridging. The token ring 'trBrf' can be said to represent the bridged broadcast domain."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("ethernet", 1), ("fddi", 2), ("tokenRing", 3), ("fddiNet", 4), ("trNet", 5), ("deprecated", 6))

class VlanTypeExt(TextualConvention, Bits):
    reference = 'RFC2674.'
    description = 'The additional type information of VLAN. vtpmanageable(0) An user defined VLAN which is manageable through VTP protocol. The value of this bit cannot be changed. internal(1) An internal VLAN created by the device. Internal VLANs cannot be created or deleted. The value of this bit cannot be changed. reserved(2) A VLAN reserved by the device. Reserved VLANs cannot be created or deleted. The value of this bit cannot be changed. rspan(3) A VLAN created to exclusively carry the traffic for a Remote Switched Port Analyzer (RSPAN). This bit can only be set or cleared during the VLAN creation. Once the VLAN is created, the value of this bit cannot be modified. dynamicGvrp(4) A VLAN dynamically created by GVRP (GARP VLAN Registration Protocol) propagation. The value of this bit cannot be changed.'
    status = 'current'
    namedValues = NamedValues(("vtpmanageable", 0), ("internal", 1), ("reserved", 2), ("rspan", 3), ("dynamicGvrp", 4))

vtpStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 1))
vtpVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("none", 3), ("three", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpVersion.setStatus('current')
if mibBuilder.loadTexts: vtpVersion.setDescription('The version of VTP in use on the local system. A device will report its version capability and not any particular version in use on the device. If the device does not support vtp, the version is none(3).')
vtpMaxVlanStorage = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpMaxVlanStorage.setStatus('current')
if mibBuilder.loadTexts: vtpMaxVlanStorage.setDescription('An estimate of the maximum number of VLANs about which the local system can recover complete VTP information after a reboot. If the number of defined VLANs is greater than this value, then the system can not act as a VTP Server. For a device which has no means to calculate the estimated number, this value is -1.')
vtpNotificationsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtpNotificationsEnabled.setStatus('current')
if mibBuilder.loadTexts: vtpNotificationsEnabled.setDescription('An indication of whether the notifications/traps defined by the vtpConfigNotificationsGroup, vtpConfigNotificationsGroup2, and vtpConfigNotificationsGroup8 are enabled.')
vtpVlanCreatedNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtpVlanCreatedNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: vtpVlanCreatedNotifEnabled.setDescription("An indication of whether the notification should be generated when a VLAN is created. If the value of this object is 'true' then the vtpVlanCreated notification will be generated. If the value of this object is 'false' then the vtpVlanCreated notification will not be generated.")
vtpVlanDeletedNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtpVlanDeletedNotifEnabled.setStatus('current')
if mibBuilder.loadTexts: vtpVlanDeletedNotifEnabled.setDescription("An indication of whether the notification should be generated when a VLAN is deleted. If the value of this object is 'true' then the vtpVlanDeleted notification will be generated. If the value of this object is 'false' then the vtpVlanDeleted notification will not be generated.")
vlanManagementDomains = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 2))
managementDomainTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 2, 1), )
if mibBuilder.loadTexts: managementDomainTable.setStatus('current')
if mibBuilder.loadTexts: managementDomainTable.setDescription('The table containing information on the management domains in which the local system is participating. Devices which support only one management domain will support just one row in this table, and will not let it be deleted nor let other rows be created. Devices which support multiple management domains will allow rows to be created and deleted, but will not allow the last row to be deleted. If the device does not support VTP, the table is read-only.')
managementDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-VTP-MIB", "managementDomainIndex"))
if mibBuilder.loadTexts: managementDomainEntry.setStatus('current')
if mibBuilder.loadTexts: managementDomainEntry.setDescription('Information about the status of one management domain.')
managementDomainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 2, 1, 1, 1), ManagementDomainIndex())
if mibBuilder.loadTexts: managementDomainIndex.setStatus('current')
if mibBuilder.loadTexts: managementDomainIndex.setDescription('An arbitrary value to uniquely identify the management domain on the local system.')
managementDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: managementDomainName.setStatus('current')
if mibBuilder.loadTexts: managementDomainName.setDescription("The management name of a domain in which the local system is participating. The zero-length name corresponds to the 'no management-domain' state which is the initial value at installation-time if not configured otherwise. Note that the zero-length name does not correspond to an operational management domain, and a device does not send VTP advertisements while in the 'no management-domain' state. A device leaves the 'no management-domain' state when it obtains a management-domain name, either through configuration or through inheriting the management-domain name from a received VTP advertisement. When the value of an existing instance of this object is modified by network management, the local system should re- initialize its VLAN information (for the given management domain) as if it had just been configured with a management domain name at installation time.")
managementDomainLocalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("client", 1), ("server", 2), ("transparent", 3), ("off", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: managementDomainLocalMode.setStatus('current')
if mibBuilder.loadTexts: managementDomainLocalMode.setDescription("The local VTP mode in this management domain when managementDomainVersionInUse is version1(1) or version2(2). If managementDomainVersionInUse is version3(4), this object has the same value with vtpDatabaseLocalMode of VLAN database type. - 'client' indicates that the local system is acting as a VTP client. - 'server' indicates that the local system is acting as a VTP server. - 'transparent' indicates that the local system does not generate or listen to VTP messages, but forwards messages. This mode can also be set by the device itself when the amount of VLAN information is too large for it to hold in DRAM. - 'off' indicates that the local system does not generate, listen to or forward any VTP messages.")
managementDomainConfigRevNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 2, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementDomainConfigRevNumber.setStatus('current')
if mibBuilder.loadTexts: managementDomainConfigRevNumber.setDescription("The current Configuration Revision Number as known by the local device for this management domain when managementDomainVersionInUse is version1(1) or version2(2). If managementDomainVersionInUse is version3(4), this object has the same value with vtpDatabaseRevisionNumber of VLAN database type. This value is updated (if necessary) whenever a VTP advertisement is received or generated. When in the 'no management-domain' state, this value is 0.")
managementDomainLastUpdater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 2, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementDomainLastUpdater.setStatus('current')
if mibBuilder.loadTexts: managementDomainLastUpdater.setDescription('The IP-address (or one of them) of the VTP Server which last updated the Configuration Revision Number, as indicated in the most recently received VTP advertisement for this management domain, when managementDomainVersionInUse is version1(1) or version2(2). If managementDomainVersionInUse is version3(4), this object has the value of 0.0.0.0. Before an advertisement has been received, this value is 0.0.0.0.')
managementDomainLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 2, 1, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementDomainLastChange.setStatus('current')
if mibBuilder.loadTexts: managementDomainLastChange.setDescription('The time at which the Configuration Revision Number was (last) increased to its current value, as indicated in the most recently received VTP advertisement for this management domain when managementDomainVersionInUse is not version3(4) or in the most recently received VTP VLAN database advertisement for this management domain when managementDomainVersionInUse is version3(4). The value 0x0000010100000000 indicates that the device which last increased the Configuration Revision Number had no idea of the date/time, or that no advertisement has been received.')
managementDomainRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 2, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: managementDomainRowStatus.setStatus('current')
if mibBuilder.loadTexts: managementDomainRowStatus.setDescription('The status of this conceptual row.')
managementDomainTftpServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 2, 1, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: managementDomainTftpServer.setStatus('current')
if mibBuilder.loadTexts: managementDomainTftpServer.setDescription('The IP address of a TFTP Server in/from which VTP VLAN information for this management domain is to be stored/retrieved. If the information is being locally stored in NVRAM, this object should take the value 0.0.0.0.')
managementDomainTftpPathname = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 2, 1, 1, 9), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: managementDomainTftpPathname.setStatus('current')
if mibBuilder.loadTexts: managementDomainTftpPathname.setDescription('The complete pathname of the file at the TFTP Server identified by the value of managementDomainTftpServer in/from which VTP VLAN information for this management domain is to be stored/retrieved. If the value of corresponding instance of managementDomainTftpServer is 0.0.0.0, the value of this object is ignored.')
managementDomainPruningState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: managementDomainPruningState.setStatus('current')
if mibBuilder.loadTexts: managementDomainPruningState.setDescription("An indication of whether VTP pruning is enabled or disabled in this managament domain. This object can only be modified, either when the corresponding instance value of managementDomainVersionInUse is 'version1' or 'version2' and the corresponding instance value of managementDomainLocalMode is 'server', or when the corresponding instance value of managementDomainVersionInUse is 'version3' and the corresponding instance value of managementDomainLocalMode is 'server' or 'client'.")
managementDomainVersionInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("version1", 1), ("version2", 2), ("none", 3), ("version3", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: managementDomainVersionInUse.setStatus('current')
if mibBuilder.loadTexts: managementDomainVersionInUse.setDescription('The current version of the VTP that is in use by the designated management domain. This object can be set to none(3) only when vtpVersion is none(3).')
managementDomainPruningStateOper = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementDomainPruningStateOper.setStatus('current')
if mibBuilder.loadTexts: managementDomainPruningStateOper.setDescription('Indicates whether VTP pruning is operationally enabled or disabled in this managament domain.')
managementDomainAdminSrcIf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 2, 1, 1, 13), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: managementDomainAdminSrcIf.setStatus('current')
if mibBuilder.loadTexts: managementDomainAdminSrcIf.setDescription('The object specifies the interface to be used as the preferred source interface for the VTP IP updater address. A zero length value indicates that a source interface is not specified.')
managementDomainSourceOnlyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 2, 1, 1, 14), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: managementDomainSourceOnlyMode.setStatus('current')
if mibBuilder.loadTexts: managementDomainSourceOnlyMode.setDescription("The object specifies whether to use only the IP address of managementDomainAdminSrcIf as the VTP IP updater address. 'true' indicates to only use the IP address of managementDomainAdminSrcIf as the VTP IP updater address. 'false' indicates to use the IP address of managementDomainAdminSrcIf as the VTP IP updater address if managementDomainAdminSrcIf is configured with an IP address. Otherwise, the first available IP address of the system will be used.")
managementDomainOperSrcIf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 2, 1, 1, 15), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementDomainOperSrcIf.setStatus('current')
if mibBuilder.loadTexts: managementDomainOperSrcIf.setDescription('The object indicates the interface used as the preferred source interface for the VTP IP updater address. A zero length string indicates that a source interface is not available.')
managementDomainConfigFile = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 2, 1, 1, 16), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: managementDomainConfigFile.setStatus('current')
if mibBuilder.loadTexts: managementDomainConfigFile.setDescription('The object specifies the file name where VTP configuration is stored in the format of <filename> or <devices>:[<filename>]. <device> can be (but not limited to): flash, bootflash, slot0, slot1, disk0.')
managementDomainLocalUpdaterType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 2, 1, 1, 17), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementDomainLocalUpdaterType.setStatus('current')
if mibBuilder.loadTexts: managementDomainLocalUpdaterType.setDescription("The object indicates the type of the Internet address of the preferred source interface for the VTP IP updater. The value of this object is 'unknown' if managementDomainVersionInUse is 'version3' or managementDomainLocalMode is not 'server'.")
managementDomainLocalUpdater = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 2, 1, 1, 18), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementDomainLocalUpdater.setStatus('current')
if mibBuilder.loadTexts: managementDomainLocalUpdater.setDescription('The object indicates the Internet address of the preferred source interface for the VTP IP updater.')
managementDomainDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 2, 1, 1, 19), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: managementDomainDeviceID.setStatus('current')
if mibBuilder.loadTexts: managementDomainDeviceID.setDescription("The object indicates a value that uniquely identifies this device within a VTP Domain. The value of this object is zero length string if managementDomainVersionInUse is not 'version3'.")
vlanInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 3))
vtpVlanTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 3, 1), )
if mibBuilder.loadTexts: vtpVlanTable.setStatus('current')
if mibBuilder.loadTexts: vtpVlanTable.setDescription('This table contains information on the VLANs which currently exist.')
vtpVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-VTP-MIB", "managementDomainIndex"), (0, "CISCO-VTP-MIB", "vtpVlanIndex"))
if mibBuilder.loadTexts: vtpVlanEntry.setStatus('current')
if mibBuilder.loadTexts: vtpVlanEntry.setDescription('Information about one current VLAN. The managementDomainIndex value in the INDEX clause indicates which management domain the VLAN is in.')
vtpVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 3, 1, 1, 1), VlanIndex())
if mibBuilder.loadTexts: vtpVlanIndex.setStatus('current')
if mibBuilder.loadTexts: vtpVlanIndex.setDescription('The VLAN-id of this VLAN on ISL or 802.1q trunks.')
vtpVlanState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("operational", 1), ("suspended", 2), ("mtuTooBigForDevice", 3), ("mtuTooBigForTrunk", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpVlanState.setStatus('current')
if mibBuilder.loadTexts: vtpVlanState.setDescription("The state of this VLAN. The state 'mtuTooBigForDevice' indicates that this device cannot participate in this VLAN because the VLAN's MTU is larger than the device can support. The state 'mtuTooBigForTrunk' indicates that while this VLAN's MTU is supported by this device, it is too large for one or more of the device's trunk ports.")
vtpVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 3, 1, 1, 3), VlanType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpVlanType.setStatus('current')
if mibBuilder.loadTexts: vtpVlanType.setDescription('The type of this VLAN.')
vtpVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpVlanName.setStatus('current')
if mibBuilder.loadTexts: vtpVlanName.setDescription('The name of this VLAN. This name is used as the ELAN-name for an ATM LAN-Emulation segment of this VLAN.')
vtpVlanMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1500, 18190))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpVlanMtu.setStatus('current')
if mibBuilder.loadTexts: vtpVlanMtu.setDescription('The MTU size on this VLAN, defined as the size of largest MAC-layer (information field portion of the) data frame which can be transmitted on the VLAN.')
vtpVlanDot10Said = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 3, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpVlanDot10Said.setStatus('current')
if mibBuilder.loadTexts: vtpVlanDot10Said.setDescription('The value of the 802.10 SAID field for this VLAN.')
vtpVlanRingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpVlanRingNumber.setStatus('current')
if mibBuilder.loadTexts: vtpVlanRingNumber.setDescription("The ring number of this VLAN. This object is only instantiated when the value of the corresponding instance of vtpVlanType has a value of 'fddi' or 'tokenRing' and Source Routing is in use on this VLAN.")
vtpVlanBridgeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpVlanBridgeNumber.setStatus('current')
if mibBuilder.loadTexts: vtpVlanBridgeNumber.setDescription('The bridge number of the VTP-capable switches for this VLAN. This object is only instantiated for VLANs that are involved with emulating token ring segments.')
vtpVlanStpType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ieee", 1), ("ibm", 2), ("hybrid", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpVlanStpType.setStatus('current')
if mibBuilder.loadTexts: vtpVlanStpType.setDescription("The type of the Spanning Tree Protocol (STP) running on this VLAN. This object is only instanciated when the value of the corresponding instance of vtpVlanType has a value of 'fddiNet' or 'trNet'. The value returned by this object depends upon the value of the corresponding instance of vtpVlanEditStpType. - 'ieee' indicates IEEE STP is running exclusively. - 'ibm' indicates IBM STP is running exclusively. - 'hybrid' indicates a STP that allows a combination of IEEE and IBM is running. The 'hybrid' STP type results from tokenRing/fddi VLANs that are children of this trNet/fddiNet parent VLAN being configured in a combination of SRT and SRB vtpVlanBridgeTypes while the instance of vtpVlanEditStpType that corresponds to this object is set to 'auto'.")
vtpVlanParentVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 3, 1, 1, 10), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpVlanParentVlan.setStatus('current')
if mibBuilder.loadTexts: vtpVlanParentVlan.setDescription("The parent VLAN for this VLAN. This object is only instantiated when the value of the corresponding instance of vtpVlanType has a value of 'fddi' or 'tokenRing' and Source Routing is in use on this VLAN. The parent VLAN must have a vtpVlanType value of fddiNet(4) or trNet(5), respectively.")
vtpVlanTranslationalVlan1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 3, 1, 1, 11), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpVlanTranslationalVlan1.setStatus('current')
if mibBuilder.loadTexts: vtpVlanTranslationalVlan1.setDescription('A VLAN to which this VLAN is being translational-bridged. If this value and the corresponding instance of vtpVlanTranslationalVlan2 are both zero, then this VLAN is not being translational-bridged.')
vtpVlanTranslationalVlan2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 3, 1, 1, 12), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpVlanTranslationalVlan2.setStatus('current')
if mibBuilder.loadTexts: vtpVlanTranslationalVlan2.setDescription('Another VLAN, i.e., other than that indicated by vtpVlanTranslationalVlan1, to which this VLAN is being translational-bridged. If this value and the corresponding instance of vtpVlanTranslationalVlan1 are both zero, then this VLAN is not being translational-bridged.')
vtpVlanBridgeType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("srt", 1), ("srb", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpVlanBridgeType.setStatus('current')
if mibBuilder.loadTexts: vtpVlanBridgeType.setDescription('The type of the Source Route bridging mode in use on this VLAN. This object is only instantiated when the value of the corresponding instance of vtpVlanType has a value of fddi(2) or tokenRing(3) and Source Routing is in use on this VLAN.')
vtpVlanAreHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 13))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpVlanAreHopCount.setStatus('current')
if mibBuilder.loadTexts: vtpVlanAreHopCount.setDescription('The maximum number of bridge hops allowed in All Routes Explorer frames on this VLAN. This object is only instantiated when the value of the corresponding instance of vtpVlanType has a value of fddi(2) or tokenRing(3) and Source Routing is in use on this VLAN.')
vtpVlanSteHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 13))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpVlanSteHopCount.setStatus('current')
if mibBuilder.loadTexts: vtpVlanSteHopCount.setDescription('The maximum number of bridge hops allowed in Spanning Tree Explorer frames on this VLAN. This object is only instantiated when the value of the corresponding instance of vtpVlanType has a value of fddi(2) or tokenRing(3) and Source Routing is in use on this VLAN.')
vtpVlanIsCRFBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 3, 1, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpVlanIsCRFBackup.setStatus('current')
if mibBuilder.loadTexts: vtpVlanIsCRFBackup.setDescription('True if this VLAN is of type trCrf and also is acting as a backup trCrf for the ISL distributed BRF')
vtpVlanTypeExt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 3, 1, 1, 17), VlanTypeExt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpVlanTypeExt.setStatus('current')
if mibBuilder.loadTexts: vtpVlanTypeExt.setDescription('The additional type information of this VLAN.')
vtpVlanIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 3, 1, 1, 18), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpVlanIfIndex.setStatus('current')
if mibBuilder.loadTexts: vtpVlanIfIndex.setDescription('The value of the ifIndex corresponding to this VLAN ID. If the VLAN ID does not have its corresponding interface, this object has the value of zero.')
internalVlanInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 3, 2))
vtpInternalVlanAllocPolicy = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ascending", 1), ("descending", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtpInternalVlanAllocPolicy.setStatus('current')
if mibBuilder.loadTexts: vtpInternalVlanAllocPolicy.setDescription("The internal VLAN allocation policy. 'ascending' - internal VLANs are allocated starting from a lowwer VLAN ID and upwards. 'descending' - internal VLANs are allocated starting from a higher VLAN ID and downwards.")
vtpInternalVlanTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 3, 2, 2), )
if mibBuilder.loadTexts: vtpInternalVlanTable.setStatus('current')
if mibBuilder.loadTexts: vtpInternalVlanTable.setDescription('A vtpInternalVlanTable entry contains information on an existing internal VLAN. It is internally created by the device for a specific application program and hence owned by the application. It cannot be modified or deleted by (local or network) management.')
vtpInternalVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 3, 2, 2, 1), ).setIndexNames((0, "CISCO-VTP-MIB", "managementDomainIndex"), (0, "CISCO-VTP-MIB", "vtpVlanIndex"))
if mibBuilder.loadTexts: vtpInternalVlanEntry.setStatus('current')
if mibBuilder.loadTexts: vtpInternalVlanEntry.setDescription('Information about one current internal VLAN.')
vtpInternalVlanOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 3, 2, 2, 1, 1), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpInternalVlanOwner.setStatus('current')
if mibBuilder.loadTexts: vtpInternalVlanOwner.setDescription("The program name of the internal VLAN's owner application. This internal VLAN is allocated by the device specifically for this application and no one else could create, modify or delete this VLAN.")
vlanEdit = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 4))
vtpEditControlTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 4, 1), )
if mibBuilder.loadTexts: vtpEditControlTable.setStatus('current')
if mibBuilder.loadTexts: vtpEditControlTable.setDescription('This table provides the means to control the editing of the VLANs for a particular management domain. Each and every entry in this table augments its corresponding entry in the managementDomainTable; thus, an entry in this table is created/deleted only as a by-product of creating/deleting an entry in the managementDomainTable.')
vtpEditControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 4, 1, 1), )
managementDomainEntry.registerAugmentions(("CISCO-VTP-MIB", "vtpEditControlEntry"))
vtpEditControlEntry.setIndexNames(*managementDomainEntry.getIndexNames())
if mibBuilder.loadTexts: vtpEditControlEntry.setStatus('current')
if mibBuilder.loadTexts: vtpEditControlEntry.setDescription('Control information for editing the VLANs in one management domain.')
vtpVlanEditOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("copy", 2), ("apply", 3), ("release", 4), ("restartTimer", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vtpVlanEditOperation.setStatus('current')
if mibBuilder.loadTexts: vtpVlanEditOperation.setDescription("This object always has the value 'none' when read. When written, each value causes the appropriate action: 'copy' - causes the creation of rows in the vtpVlanEditTable exactly corresponding to the current global VLAN information for this management domain. If the Edit Buffer (for this management domain) is not currently empty, a copy operation fails. A successful copy operation starts the deadman-timer. 'apply' - first performs a consistent check on the the modified information contained in the Edit Buffer, and if consistent, then tries to instanciate the modified information as the new global VLAN information. Note that an empty Edit Buffer (for the management domain) would always result in an inconsistency since the default VLANs are required to be present. 'release' - flushes the Edit Buffer (for this management domain), clears the Owner information, and aborts the deadman-timer. A release is generated automatically if the deadman-timer ever expires. 'restartTimer' - restarts the deadman-timer. 'none' - no operation is performed.")
vtpVlanApplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("inProgress", 1), ("succeeded", 2), ("configNumberError", 3), ("inconsistentEdit", 4), ("tooBig", 5), ("localNVStoreFail", 6), ("remoteNVStoreFail", 7), ("editBufferEmpty", 8), ("someOtherError", 9), ("notPrimaryServer", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpVlanApplyStatus.setStatus('current')
if mibBuilder.loadTexts: vtpVlanApplyStatus.setDescription("The current status of an 'apply' operation to instanciate the Edit Buffer as the new global VLAN information (for this management domain). If no apply is currently active, the status represented is that of the most recently completed apply. The possible values are: inProgress - 'apply' operation in progress; succeeded - the 'apply' was successful (this value is also used when no apply has been invoked since the last time the local system restarted); configNumberError - the apply failed because the value of vtpVlanEditConfigRevNumber was less or equal to the value of current value of managementDomainConfigRevNumber; inconsistentEdit - the apply failed because the modified information was not self-consistent; tooBig - the apply failed because the modified information was too large to fit in this VTP Server's non-volatile storage location; localNVStoreFail - the apply failed in trying to store the new information in a local non-volatile storage location; remoteNVStoreFail - the apply failed in trying to store the new information in a remote non-volatile storage location; editBufferEmpty - the apply failed because the Edit Buffer was empty (for this management domain). someOtherError - the apply failed for some other reason (e.g., insufficient memory). notPrimaryServer - the apply failed because the local device is not a VTP primary server for VLAN database type when managementDomainVersionInUse is version3(4).")
vtpVlanEditBufferOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 4, 1, 1, 3), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vtpVlanEditBufferOwner.setStatus('current')
if mibBuilder.loadTexts: vtpVlanEditBufferOwner.setDescription('The management station which is currently using the Edit Buffer for this management domain. When the Edit Buffer for a management domain is not currently in use, the value of this object is the zero-length string. Note that it is also the zero-length string if a manager fails to set this object when invoking a copy operation.')
vtpVlanEditConfigRevNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 4, 1, 1, 4), Gauge32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vtpVlanEditConfigRevNumber.setStatus('current')
if mibBuilder.loadTexts: vtpVlanEditConfigRevNumber.setDescription("The Configuration Revision Number to be used for the next apply operation. This value is initialized (by the agent) on a copy operation to be one greater than the value of managementDomainConfigRevNumber. On an apply, if the number is less or equal to the value of managementDomainConfigRevNumber, then the apply fails. The value can be modified (increased) by network management before an apply to ensure that an apply does not fail for this reason. This object is used to allow management control over whether a configuration revision received via a VTP advertisement after a copy operation but before the succeeding apply operation is lost by being overwritten by the (local) edit operation. By default, the apply operation will fail in this situation. By increasing this object's value after the copy but before the apply, management can control whether the apply is to succeed (with the update via VTP advertisement being lost).")
vtpVlanEditModifiedVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 4, 1, 1, 5), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpVlanEditModifiedVlan.setStatus('current')
if mibBuilder.loadTexts: vtpVlanEditModifiedVlan.setDescription("The VLAN-id of the modified VLAN in the Edit Buffer. If the object has the value of zero, any VLAN can be edited. If the value of the object is not zero, only this VLAN can be edited. The object's value is reset to zero after a successful 'apply' operation or a 'release' operation. This object is only supported for devices which allow only one VLAN editing for each 'apply' operation. For devices which allow multiple VLAN editing for each 'apply' operation, this object is not supported.")
vtpVlanEditTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 4, 2), )
if mibBuilder.loadTexts: vtpVlanEditTable.setStatus('current')
if mibBuilder.loadTexts: vtpVlanEditTable.setDescription("The table which contains the information in the Edit Buffers, one Edit Buffer per management domain. The information for a particular management domain is initialized, by a 'copy' operation, to be the current global VLAN information for that management domain. After initialization, editing can be performed to add VLANs, delete VLANs, or modify their global parameters. The information as modified through editing is local to this Edit Buffer. An apply operation using the vtpVlanEditOperation object is necessary to instanciate the modified information as the new global VLAN information for that management domain. To use the Edit Buffer, a manager acts as follows: 1. ensures the Edit Buffer for a management domain is empty, i.e., there are no rows in this table for this management domain. 2. issues a SNMP set operation which sets vtpVlanEditOperation to 'copy', and vtpVlanEditBufferOwner to its own identifier (e.g., its own IP address). 3. if this set operation is successful, proceeds to edit the information in the vtpVlanEditTable. 4. if and when the edited information is to be instantiated, issues a SNMP set operation which sets vtpVlanEditOperation to 'apply'. 5. issues retrieval requests to obtain the value of vtpVlanApplyStatus, until the result of the apply is determined. 6. releases the Edit Buffer by issuing a SNMP set operation which sets vtpVlanEditOperation to 'release'. Note that the information contained in this table is not saved across agent reboots.")
vtpVlanEditEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 4, 2, 1), ).setIndexNames((0, "CISCO-VTP-MIB", "managementDomainIndex"), (0, "CISCO-VTP-MIB", "vtpVlanEditIndex"))
if mibBuilder.loadTexts: vtpVlanEditEntry.setStatus('current')
if mibBuilder.loadTexts: vtpVlanEditEntry.setDescription('Information about one VLAN in the Edit Buffer for a particular management domain.')
vtpVlanEditIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 4, 2, 1, 1), VlanIndex())
if mibBuilder.loadTexts: vtpVlanEditIndex.setStatus('current')
if mibBuilder.loadTexts: vtpVlanEditIndex.setDescription('The VLAN-id which this VLAN would have on ISL or 802.1q trunks.')
vtpVlanEditState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("operational", 1), ("suspended", 2))).clone('operational')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vtpVlanEditState.setStatus('current')
if mibBuilder.loadTexts: vtpVlanEditState.setDescription('The state which this VLAN would have.')
vtpVlanEditType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 4, 2, 1, 3), VlanType().clone('ethernet')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vtpVlanEditType.setStatus('current')
if mibBuilder.loadTexts: vtpVlanEditType.setDescription('The type which this VLAN would have. An implementation may restrict access to this object.')
vtpVlanEditName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 4, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vtpVlanEditName.setStatus('current')
if mibBuilder.loadTexts: vtpVlanEditName.setDescription('The name which this VLAN would have. This name would be used as the ELAN-name for an ATM LAN-Emulation segment of this VLAN. An implementation may restrict access to this object.')
vtpVlanEditMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1500, 18190)).clone(1500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vtpVlanEditMtu.setStatus('current')
if mibBuilder.loadTexts: vtpVlanEditMtu.setDescription('The MTU size which this VLAN would have, defined as the size of largest MAC-layer (information field portion of the) data frame which can be transmitted on the VLAN. An implementation may restrict access to this object.')
vtpVlanEditDot10Said = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 4, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vtpVlanEditDot10Said.setStatus('current')
if mibBuilder.loadTexts: vtpVlanEditDot10Said.setDescription('The value of the 802.10 SAID field which would be used for this VLAN. An implementation may restrict access to this object.')
vtpVlanEditRingNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vtpVlanEditRingNumber.setStatus('current')
if mibBuilder.loadTexts: vtpVlanEditRingNumber.setDescription("The ring number which would be used for this VLAN. This object is only instantiated when the value of the corresponding instance of vtpVlanEditType has a value of 'fddi' or 'tokenRing' and Source Routing is in use on this VLAN.")
vtpVlanEditBridgeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vtpVlanEditBridgeNumber.setStatus('current')
if mibBuilder.loadTexts: vtpVlanEditBridgeNumber.setDescription('The bridge number of the VTP-capable switches which would be used for this VLAN. This object is only instantiated when the value of the corresponding instance of vtpVlanEditType has a value of fddiNet(4) or trNet(5).')
vtpVlanEditStpType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ieee", 1), ("ibm", 2), ("auto", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vtpVlanEditStpType.setStatus('current')
if mibBuilder.loadTexts: vtpVlanEditStpType.setDescription("The type of the Spanning Tree Protocol which would be running on this VLAN. This object is only instantiated when the value of the corresponding instance of vtpVlanEditType has a value of fddiNet(4) or trNet(5). If 'ieee' is selected, the STP that runs will be IEEE. If 'ibm' is selected, the STP that runs will be IBM. If 'auto' is selected, the STP that runs will be dependant on the values of vtpVlanEditBridgeType for all children tokenRing/fddi type VLANs. This will result in a 'hybrid' STP (see vtpVlanStpType).")
vtpVlanEditParentVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 4, 2, 1, 10), VlanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vtpVlanEditParentVlan.setStatus('current')
if mibBuilder.loadTexts: vtpVlanEditParentVlan.setDescription("The VLAN index of the VLAN which would be the parent for this VLAN. This object is only instantiated when the value of the corresponding instance of vtpVlanEditType has a value of 'fddi' or 'tokenRing' and Source Routing is in use on this VLAN. The parent VLAN must have a vtpVlanEditType value of fddiNet(4) or trNet(5), respectively.")
vtpVlanEditRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 4, 2, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vtpVlanEditRowStatus.setStatus('current')
if mibBuilder.loadTexts: vtpVlanEditRowStatus.setDescription("The status of this row. Any and all columnar objects in an existing row can be modified irrespective of the status of the row. A row is not qualified for activation until instances of at least its vtpVlanEditType, vtpVlanEditName and vtpVlanEditDot10Said columns have appropriate values. The management station should endeavor to make all rows consistent in the table before 'apply'ing the buffer. An inconsistent entry in the table will cause the entire buffer to be rejected with the vtpVlanApplyStatus object set to the appropriate error value.")
vtpVlanEditTranslationalVlan1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 4, 2, 1, 12), VlanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vtpVlanEditTranslationalVlan1.setStatus('current')
if mibBuilder.loadTexts: vtpVlanEditTranslationalVlan1.setDescription('A VLAN to which this VLAN would be translational-bridged. If this value and the corresponding instance of vtpVlanTranslationalVlan2 are both zero, then this VLAN would not be translational-bridged. An implementation may restrict access to this object.')
vtpVlanEditTranslationalVlan2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 4, 2, 1, 13), VlanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vtpVlanEditTranslationalVlan2.setStatus('current')
if mibBuilder.loadTexts: vtpVlanEditTranslationalVlan2.setDescription('Another VLAN, i.e., other than that indicated by vtpVlanEditTranslationalVlan1, to which this VLAN would be translational-bridged. If this value and the corresponding instance of vtpVlanTranslationalVlan1 are both zero, then this VLAN would not be translational-bridged. An implementation may restrict access to this object.')
vtpVlanEditBridgeType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("srt", 1), ("srb", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vtpVlanEditBridgeType.setStatus('current')
if mibBuilder.loadTexts: vtpVlanEditBridgeType.setDescription('The type of Source Route bridging mode which would be in use on this VLAN. This object is only instantiated when the value of the corresponding instance of vtpVlanEditType has a value of fddi(2) or tokenRing(3) and Source Routing is in use on this VLAN.')
vtpVlanEditAreHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 4, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 13))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vtpVlanEditAreHopCount.setStatus('current')
if mibBuilder.loadTexts: vtpVlanEditAreHopCount.setDescription('The maximum number of bridge hops allowed in All Routes Explorer frames on this VLAN. This object is only instantiated when the value of the corresponding instance of vtpVlanType has a value of fddi(2) or tokenRing(3) and Source Routing is in use on this VLAN.')
vtpVlanEditSteHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 4, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 13))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vtpVlanEditSteHopCount.setStatus('current')
if mibBuilder.loadTexts: vtpVlanEditSteHopCount.setDescription('The maximum number of bridge hops allowed in Spanning Tree Explorer frames on this VLAN. This object is only instantiated when the value of the corresponding instance of vtpVlanType has a value of fddi(2) or tokenRing(3) and Source Routing is in use on this VLAN.')
vtpVlanEditIsCRFBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 4, 2, 1, 17), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vtpVlanEditIsCRFBackup.setStatus('current')
if mibBuilder.loadTexts: vtpVlanEditIsCRFBackup.setDescription('True if this VLAN is of type trCrf and also is acting as a backup trCrf for the ISL distributed BRF. This object is only instantiated when the value of the corresponding instance of vtpVlanEditType has a value of tokenRing(3).')
vtpVlanEditTypeExt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 4, 2, 1, 18), VlanTypeExt()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpVlanEditTypeExt.setStatus('deprecated')
if mibBuilder.loadTexts: vtpVlanEditTypeExt.setDescription('The additional type information of this VLAN. vtpVlanEditTypeExt object is superseded by vtpVlanEditTypeExt2.')
vtpVlanEditTypeExt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 4, 2, 1, 19), VlanTypeExt()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vtpVlanEditTypeExt2.setStatus('current')
if mibBuilder.loadTexts: vtpVlanEditTypeExt2.setDescription('The additional type information of this VLAN. The VlanTypeExt TC specifies which bits may be written by a management application. The agent should provide a default value.')
vtpVlanLocalShutdownTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 4, 3), )
if mibBuilder.loadTexts: vtpVlanLocalShutdownTable.setStatus('current')
if mibBuilder.loadTexts: vtpVlanLocalShutdownTable.setDescription('Ths table contains the VLAN local shutdown information within management domain.')
vtpVlanLocalShutdownEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 4, 3, 1), ).setIndexNames((0, "CISCO-VTP-MIB", "managementDomainIndex"), (0, "CISCO-VTP-MIB", "vtpVlanIndex"))
if mibBuilder.loadTexts: vtpVlanLocalShutdownEntry.setStatus('current')
if mibBuilder.loadTexts: vtpVlanLocalShutdownEntry.setDescription('An entry containing VLAN local shutdown information for a particular VLAN in the management domain. An entry is created if a VLAN which supports local shutdown has been created. An entry is deleted if a VLAN which supports local shutdown has been removed.')
vtpVlanLocalShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtpVlanLocalShutdown.setStatus('current')
if mibBuilder.loadTexts: vtpVlanLocalShutdown.setDescription('The object specifies the VLAN local shutdown state.')
vtpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 5))
vtpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 5, 1), )
if mibBuilder.loadTexts: vtpStatsTable.setStatus('current')
if mibBuilder.loadTexts: vtpStatsTable.setDescription('A table of VTP statistics.')
vtpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 5, 1, 1), )
managementDomainEntry.registerAugmentions(("CISCO-VTP-MIB", "vtpStatsEntry"))
vtpStatsEntry.setIndexNames(*managementDomainEntry.getIndexNames())
if mibBuilder.loadTexts: vtpStatsEntry.setStatus('current')
if mibBuilder.loadTexts: vtpStatsEntry.setDescription('VTP statistics for one management domain.')
vtpInSummaryAdverts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 5, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpInSummaryAdverts.setStatus('current')
if mibBuilder.loadTexts: vtpInSummaryAdverts.setDescription('The total number of VTP Summary Adverts received for this management domain.')
vtpInSubsetAdverts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 5, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpInSubsetAdverts.setStatus('current')
if mibBuilder.loadTexts: vtpInSubsetAdverts.setDescription('The total number of VTP Subset Adverts received for this management domain.')
vtpInAdvertRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 5, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpInAdvertRequests.setStatus('current')
if mibBuilder.loadTexts: vtpInAdvertRequests.setDescription('The total number of VTP Advert Requests received for this management domain.')
vtpOutSummaryAdverts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpOutSummaryAdverts.setStatus('current')
if mibBuilder.loadTexts: vtpOutSummaryAdverts.setDescription('The total number of VTP Summary Adverts sent for this management domain.')
vtpOutSubsetAdverts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpOutSubsetAdverts.setStatus('current')
if mibBuilder.loadTexts: vtpOutSubsetAdverts.setDescription('The total number of VTP Subset Adverts sent for this management domain.')
vtpOutAdvertRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpOutAdvertRequests.setStatus('current')
if mibBuilder.loadTexts: vtpOutAdvertRequests.setDescription('The total number of VTP Advert Requests sent for this management domain.')
vtpConfigRevNumberErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpConfigRevNumberErrors.setStatus('current')
if mibBuilder.loadTexts: vtpConfigRevNumberErrors.setDescription("The number of occurrences of configuration revision number errors for this management domain. A configuration revision number error occurs when a device receives a VTP advertisement for which: - the advertisement's Configuration Revision Number is the same as the current locally-held value, and - the advertisement's digest value is different from the current locally-held value.")
vtpConfigDigestErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpConfigDigestErrors.setStatus('current')
if mibBuilder.loadTexts: vtpConfigDigestErrors.setDescription("The number of occurrences of configuration digest errors for this management domain. A configuration digest error occurs when a device receives a VTP advertisement for which: - the advertisement's Configuration Revision Number is greater than the current locally-held value, and - the advertisement's digest value computed by the receiving device does not match the checksum in the summary advertisement that was received earlier. This can happen, for example, if there is a mismatch in VTP passwords between the VTP devices.")
vlanTrunkPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 6))
vlanTrunkPortTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 6, 1), )
if mibBuilder.loadTexts: vlanTrunkPortTable.setStatus('current')
if mibBuilder.loadTexts: vlanTrunkPortTable.setDescription("The table containing information on the local system's VLAN trunk ports.")
vlanTrunkPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 6, 1, 1), ).setIndexNames((0, "CISCO-VTP-MIB", "vlanTrunkPortIfIndex"))
if mibBuilder.loadTexts: vlanTrunkPortEntry.setStatus('current')
if mibBuilder.loadTexts: vlanTrunkPortEntry.setDescription('Information about one trunk port.')
vlanTrunkPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 6, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: vlanTrunkPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: vlanTrunkPortIfIndex.setDescription('The value of ifIndex for the interface corresponding to this trunk port.')
vlanTrunkPortManagementDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 6, 1, 1, 2), ManagementDomainIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanTrunkPortManagementDomain.setStatus('current')
if mibBuilder.loadTexts: vlanTrunkPortManagementDomain.setDescription('The value of managementDomainIndex for the management domain on this trunk port. Devices which support only one management domain will support this object read-only.')
vlanTrunkPortEncapsulationType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("isl", 1), ("dot10", 2), ("lane", 3), ("dot1Q", 4), ("negotiate", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanTrunkPortEncapsulationType.setStatus('current')
if mibBuilder.loadTexts: vlanTrunkPortEncapsulationType.setDescription("The type of VLAN encapsulation desired to be used on this trunk port. It is either a particular type, or 'negotiate' meaning whatever type results from the negotiation. negotiate(5) is not allowed if the port does not support negotiation or if its vlanTrunkPortDynamicState is set to on(1) or onNoNegotiate(5). Whether writing to this object in order to modify the encapsulation is supported is both device and interface specific.")
vlanTrunkPortVlansEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 6, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanTrunkPortVlansEnabled.setStatus('current')
if mibBuilder.loadTexts: vlanTrunkPortVlansEnabled.setDescription("A string of octets containing one bit per VLAN in the management domain on this trunk port. The first octet corresponds to VLANs with VlanIndex values of 0 through 7; the second octet to VLANs 8 through 15; etc. The most significant bit of each octet corresponds to the lowest value VlanIndex in that octet. If the bit corresponding to a VLAN is set to '1', then the local system is enabled for sending and receiving frames on that VLAN; if the bit is set to '0', then the system is disabled from sending and receiving frames on that VLAN. To avoid conflicts between overlapping partial updates by multiple managers, i.e., updates which modify only a portion of an instance of this object (e.g., enable/disable a single VLAN on the trunk port), any SNMP Set operation accessing an instance of this object should also write the value of vlanTrunkPortSetSerialNo.")
vlanTrunkPortNativeVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 6, 1, 1, 5), VlanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanTrunkPortNativeVlan.setStatus('current')
if mibBuilder.loadTexts: vlanTrunkPortNativeVlan.setDescription('The VlanIndex of the VLAN which is represented by native frames on this trunk port. For trunk ports not supporting the sending and receiving of native frames, this value should be set to zero.')
vlanTrunkPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 6, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanTrunkPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: vlanTrunkPortRowStatus.setDescription('The status of this row. In some circumstances, the creation of a row in this table is needed to enable the appropriate trunking/tagging protocol on the port, to enable the use of VTP on the port, and to assign the port to the appropriate management domain. In other circumstances, rows in this table will be created as a by-product of other operations.')
vlanTrunkPortInJoins = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 6, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTrunkPortInJoins.setStatus('current')
if mibBuilder.loadTexts: vlanTrunkPortInJoins.setDescription('The number of VTP Join messages received on this trunk port.')
vlanTrunkPortOutJoins = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 6, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTrunkPortOutJoins.setStatus('current')
if mibBuilder.loadTexts: vlanTrunkPortOutJoins.setDescription('The number of VTP Join messages sent on this trunk port.')
vlanTrunkPortOldAdverts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 6, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTrunkPortOldAdverts.setStatus('current')
if mibBuilder.loadTexts: vlanTrunkPortOldAdverts.setDescription('The number of VTP Advertisement messages which indicated the sender does not support VLAN-pruning received on this trunk port.')
vlanTrunkPortVlansPruningEligible = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 6, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanTrunkPortVlansPruningEligible.setStatus('current')
if mibBuilder.loadTexts: vlanTrunkPortVlansPruningEligible.setDescription("A string of octets containing one bit per VLAN in the management domain on this trunk port. The first octet corresponds to VLANs with VlanIndex values of 0 through 7; the second octet to VLANs 8 through 15; etc. The most significant bit of each octet corresponds to the lowest value VlanIndex in that octet. If the bit corresponding to a VLAN is set to '1', then the local system is permitted to prune that VLAN on this trunk port; if the bit is set to '0', then the system must not prune that VLAN on this trunk port. To avoid conflicts between overlapping partial updates by multiple managers, i.e., updates which modify only a portion of an instance of this object (e.g., enable/disable a single VLAN on the trunk port), any SNMP Set operation accessing an instance of this object should also write the value of vlanTrunkPortSetSerialNo.")
vlanTrunkPortVlansXmitJoined = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 6, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTrunkPortVlansXmitJoined.setStatus('current')
if mibBuilder.loadTexts: vlanTrunkPortVlansXmitJoined.setDescription("A string of octets containing one bit per VLAN in the management domain on this trunk port. The first octet corresponds to VLANs with VlanIndex values of 0 through 7; the second octet to VLANs 8 through 15; etc. The most significant bit of each octet corresponds to the lowest value VlanIndex in that octet. If the bit corresponding to a VLAN is set to '1', then this VLAN is presently being forwarded on this trunk port, i.e., it is not pruned; if the bit is set to '0', then this VLAN is presently not being forwarded on this trunk port, either because it is pruned or for some other reason.")
vlanTrunkPortVlansRcvJoined = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 6, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTrunkPortVlansRcvJoined.setStatus('current')
if mibBuilder.loadTexts: vlanTrunkPortVlansRcvJoined.setDescription("A string of octets containing one bit per VLAN in the management domain on this trunk port. The first octet corresponds to VLANs with VlanIndex values of 0 through 7; the second octet to VLANs 8 through 15; etc. The most significant bit of each octet corresponds to the lowest value VlanIndex in that octet. If the bit corresponding to a VLAN is set to '1', then the local switch is currently sending joins for this VLAN on this trunk port, i.e., it is asking to receive frames for this VLAN; if the bit is set to '0', then the local switch is not currently sending joins for this VLAN on this trunk port.")
vlanTrunkPortDynamicState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("desirable", 3), ("auto", 4), ("onNoNegotiate", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanTrunkPortDynamicState.setStatus('current')
if mibBuilder.loadTexts: vlanTrunkPortDynamicState.setDescription("For devices that allows dynamic determination of whether a link between two switches should be a trunk or not, this object allows the operator to mandate the behavior of that dynamic mechanism. on(1) dictates that the interface will always be a trunk. This is the value for static entries (those that show no dynamic behavior). If the negotiation is supported on this port, negotiation will take place with the far end to attempt to bring the far end into trunking state. off(2) allows an operator to specify that the specified interface is never to be trunk, regardless of any dynamic mechanisms to the contrary. This value is useful for overriding the default behavior of some switches. If the negotiation is supported on this port, negotiation will take place with the far end to attempt on the link to bring the far end into non-trunking state. desirable(3) is used to indicate that it is desirable for the interface to become a trunk. The device will initiate any negotiation necessary to become a trunk but will not become a trunk unless it receives confirmation from the far end on the link. auto(4) is used to indicate that the interface is capable and willing to become a trunk but will not initiate trunking negotiations. The far end on the link are required to either start negotiations or start sending encapsulated packets, on which event the specified interface will become a trunk. onNoNegotiate(5) is used to indicate that the interface is permanently set to be a trunk, and no negotiation takes place with the far end on the link to ensure consistent operation. This is similar to on(1) except no negotiation takes place with the far end. If the port does not support negotiation or its vlanTrunkPortEncapsulationType is set to negotiate(5), onNoNegotiate(5) is not allowed. Devices that do no support dynamic determination (for just a particular interface, encapsulation or for the whole device) need only support the 'on', and 'off' values.")
vlanTrunkPortDynamicStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 6, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trunking", 1), ("notTrunking", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTrunkPortDynamicStatus.setStatus('current')
if mibBuilder.loadTexts: vlanTrunkPortDynamicStatus.setDescription('Indicates whether the specified interface is either acting as a trunk or not. This is a result of the vlanTrunkPortDynamicState and the ifOperStatus of the trunk port itself.')
vlanTrunkPortVtpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 6, 1, 1, 15), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanTrunkPortVtpEnabled.setStatus('current')
if mibBuilder.loadTexts: vlanTrunkPortVtpEnabled.setDescription("Some trunk interface modules allow VTP to be enabled/disabled seperately from that of the central device. In such a case this object provides management a way to remotely enable VTP on that module. If a module does not support a seperate VTP enabled state then this object shall always return 'true' and will accept no other value during a SET operation.")
vlanTrunkPortEncapsulationOperType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 6, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("isl", 1), ("dot10", 2), ("lane", 3), ("dot1Q", 4), ("negotiating", 5), ("notApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTrunkPortEncapsulationOperType.setStatus('current')
if mibBuilder.loadTexts: vlanTrunkPortEncapsulationOperType.setDescription('The type of VLAN encapsulation in use on this trunk port. For intefaces with vlanTrunkPortDynamicStatus of notTrunking(2) the vlanTrunkPortEncapsulationOperType shall be notApplicable(6).')
vlanTrunkPortVlansEnabled2k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 6, 1, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanTrunkPortVlansEnabled2k.setStatus('current')
if mibBuilder.loadTexts: vlanTrunkPortVlansEnabled2k.setDescription("A string of octets containing one bit per VLAN for VLANS with VlanIndex values of 1024 through 2047 in the management domain on this trunk port. The first octet corresponds to VLANs with VlanIndex values of 1024 through 1031; the second octet to VLANs 1032 through 1039; etc. The most significant bit of each octet corresponds to the lowest value VlanIndex in that octet. If the bit corresponding to a VLAN is set to '1', then the local system is enabled for sending and receiving frames on that VLAN; if the bit is set to '0', then the system is disabled from sending and receiving frames on that VLAN. The default value is zero length string. To avoid conflicts between overlapping partial updates by multiple managers, i.e., updates which modify only a portion of an instance of this object (e.g., enable/disable a single VLAN on the trunk port), any SNMP Set operation accessing an instance of this object should also write the value of vlanTrunkPortSetSerialNo.")
vlanTrunkPortVlansEnabled3k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 6, 1, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanTrunkPortVlansEnabled3k.setStatus('current')
if mibBuilder.loadTexts: vlanTrunkPortVlansEnabled3k.setDescription("A string of octets containing one bit per VLAN for VLANS with VlanIndex values of 2048 through 3071 in the management domain on this trunk port. The first octet corresponds to VLANs with VlanIndex values of 2048 through 2055; the second octet to VLANs 2056 through 2063; etc. The most significant bit of each octet corresponds to the lowest value VlanIndex in that octet. If the bit corresponding to a VLAN is set to '1', then the local system is enabled for sending and receiving frames on that VLAN; if the bit is set to '0', then the system is disabled from sending and receiving frames on that VLAN. The default value is zero length string. To avoid conflicts between overlapping partial updates by multiple managers, i.e., updates which modify only a portion of an instance of this object (e.g., enable/disable a single VLAN on the trunk port), any SNMP Set operation accessing an instance of this object should also write the value of vlanTrunkPortSetSerialNo.")
vlanTrunkPortVlansEnabled4k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 6, 1, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanTrunkPortVlansEnabled4k.setStatus('current')
if mibBuilder.loadTexts: vlanTrunkPortVlansEnabled4k.setDescription("A string of octets containing one bit per VLAN for VLANS with VlanIndex values of 3072 through 4095 in the management domain on this trunk port. The first octet corresponds to VLANs with VlanIndex values of 3072 through 3079; the second octet to VLANs 3080 through 3087; etc. The most significant bit of each octet corresponds to the lowest value VlanIndex in that octet. If the bit corresponding to a VLAN is set to '1', then the local system is enabled for sending and receiving frames on that VLAN; if the bit is set to '0', then the system is disabled from sending and receiving frames on that VLAN. The default value is zero length string. To avoid conflicts between overlapping partial updates by multiple managers, i.e., updates which modify only a portion of an instance of this object (e.g., enable/disable a single VLAN on the trunk port), any SNMP Set operation accessing an instance of this object should also write the value of vlanTrunkPortSetSerialNo.")
vtpVlansPruningEligible2k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 6, 1, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vtpVlansPruningEligible2k.setStatus('current')
if mibBuilder.loadTexts: vtpVlansPruningEligible2k.setDescription("A string of octets containing one bit per VLAN for VLANS with VlanIndex values of 1024 through 2047 in the management domain on this trunk port. The first octet corresponds to VLANs with VlanIndex values of 1024 through 1031; the second octet to VLANs 1032 through 1039; etc. The most significant bit of each octet corresponds to the lowest value VlanIndex in that octet. If the bit corresponding to a VLAN is set to '1', then the local system is permitted to prune that VLAN on this trunk port; if the bit is set to '0', then the system must not prune that VLAN on this trunk port. The default value is zero length string. To avoid conflicts between overlapping partial updates by multiple managers, i.e., updates which modify only a portion of an instance of this object (e.g., enable/disable a single VLAN on the trunk port), any SNMP Set operation accessing an instance of this object should also write the value of vlanTrunkPortSetSerialNo.")
vtpVlansPruningEligible3k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 6, 1, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vtpVlansPruningEligible3k.setStatus('current')
if mibBuilder.loadTexts: vtpVlansPruningEligible3k.setDescription("A string of octets containing one bit per VLAN for VLANS with VlanIndex values of 2048 through 3071 in the management domain on this trunk port. The first octet corresponds to VLANs with VlanIndex values of 2048 through 2055; the second octet to VLANs 2056 through 2063; etc. The most significant bit of each octet corresponds to the lowest value VlanIndex in that octet. If the bit corresponding to a VLAN is set to '1', then the local system is permitted to prune that VLAN on this trunk port; if the bit is set to '0', then the system must not prune that VLAN on this trunk port. The default value is zero length string. To avoid conflicts between overlapping partial updates by multiple managers, i.e., updates which modify only a portion of an instance of this object (e.g., enable/disable a single VLAN on the trunk port), any SNMP Set operation accessing an instance of this object should also write the value of vlanTrunkPortSetSerialNo.")
vtpVlansPruningEligible4k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 6, 1, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vtpVlansPruningEligible4k.setStatus('current')
if mibBuilder.loadTexts: vtpVlansPruningEligible4k.setDescription("A string of octets containing one bit per VLAN for VLANS with VlanIndex values of 3072 through 4095 in the management domain on this trunk port. The first octet corresponds to VLANs with VlanIndex values of 3072 through 3079; the second octet to VLANs 3080 through 3087; etc. The most significant bit of each octet corresponds to the lowest value VlanIndex in that octet. If the bit corresponding to a VLAN is set to '1', then the local system is permitted to prune that VLAN on this trunk port; if the bit is set to '0', then the system must not prune that VLAN on this trunk port. The default value is zero length string. To avoid conflicts between overlapping partial updates by multiple managers, i.e., updates which modify only a portion of an instance of this object (e.g., enable/disable a single VLAN on the trunk port), any SNMP Set operation accessing an instance of this object should also write the value of vlanTrunkPortSetSerialNo.")
vlanTrunkPortVlansXmitJoined2k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 6, 1, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTrunkPortVlansXmitJoined2k.setStatus('current')
if mibBuilder.loadTexts: vlanTrunkPortVlansXmitJoined2k.setDescription("A string of octets containing one bit per VLAN for VLANS with VlanIndex values of 1024 through 2047 in the management domain on this trunk port. The first octet corresponds to VLANs with VlanIndex values of 1024 through 1031; the second octet to VLANs 1032 through 1039; etc. The most significant bit of each octet corresponds to the lowest value VlanIndex in that octet. If the bit corresponding to a VLAN is set to '1', then this VLAN is presently being forwarded on this trunk port, i.e., it is not pruned; if the bit is set to '0', then this VLAN is presently not being forwarded on this trunk port, either because it is pruned or for some other reason.")
vlanTrunkPortVlansXmitJoined3k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 6, 1, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTrunkPortVlansXmitJoined3k.setStatus('current')
if mibBuilder.loadTexts: vlanTrunkPortVlansXmitJoined3k.setDescription("A string of octets containing one bit per VLAN for VLANS with VlanIndex values of 2048 through 3071 in the management domain on this trunk port. The first octet corresponds to VLANs with VlanIndex values of 2048 through 2055; the second octet to VLANs 2056 through 2063; etc. The most significant bit of each octet corresponds to the lowest value VlanIndex in that octet. If the bit corresponding to a VLAN is set to '1', then this VLAN is presently being forwarded on this trunk port, i.e., it is not pruned; if the bit is set to '0', then this VLAN is presently not being forwarded on this trunk port, either because it is pruned or for some other reason.")
vlanTrunkPortVlansXmitJoined4k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 6, 1, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTrunkPortVlansXmitJoined4k.setStatus('current')
if mibBuilder.loadTexts: vlanTrunkPortVlansXmitJoined4k.setDescription("A string of octets containing one bit per VLAN for VLANS with VlanIndex values of 3072 through 4095 in the management domain on this trunk port. The first octet corresponds to VLANs with VlanIndex values of 3072 through 3079; the second octet to VLANs 3080 through 3087; etc. The most significant bit of each octet corresponds to the lowest value VlanIndex in that octet. If the bit corresponding to a VLAN is set to '1', then this VLAN is presently being forwarded on this trunk port, i.e., it is not pruned; if the bit is set to '0', then this VLAN is presently not being forwarded on this trunk port, either because it is pruned or for some other reason.")
vlanTrunkPortVlansRcvJoined2k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 6, 1, 1, 26), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTrunkPortVlansRcvJoined2k.setStatus('current')
if mibBuilder.loadTexts: vlanTrunkPortVlansRcvJoined2k.setDescription("A string of octets containing one bit per VLAN for VLANS with VlanIndex values of 1024 through 2047 in the management domain on this trunk port. The first octet corresponds to VLANs with VlanIndex values of 1024 through 1031; the second octet to VLANs 1032 through 1039; etc. The most significant bit of each octet corresponds to the lowest value VlanIndex in that octet. If the bit corresponding to a VLAN is set to '1', then the local switch is currently sending joins for this VLAN on this trunk port, i.e., it is asking to receive frames for this VLAN; if the bit is set to '0', then the local switch is not currently sending joins for this VLAN on this trunk port.")
vlanTrunkPortVlansRcvJoined3k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 6, 1, 1, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTrunkPortVlansRcvJoined3k.setStatus('current')
if mibBuilder.loadTexts: vlanTrunkPortVlansRcvJoined3k.setDescription("A string of octets containing one bit per VLAN for VLANS with VlanIndex values of 2048 through 3071 in the management domain on this trunk port. The first octet corresponds to VLANs with VlanIndex values of 2048 through 2055; the second octet to VLANs 2056 through 2063; etc. The most significant bit of each octet corresponds to the lowest value VlanIndex in that octet. If the bit corresponding to a VLAN is set to '1', then the local switch is currently sending joins for this VLAN on this trunk port, i.e., it is asking to receive frames for this VLAN; if the bit is set to '0', then the local switch is not currently sending joins for this VLAN on this trunk port.")
vlanTrunkPortVlansRcvJoined4k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 6, 1, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTrunkPortVlansRcvJoined4k.setStatus('current')
if mibBuilder.loadTexts: vlanTrunkPortVlansRcvJoined4k.setDescription("A string of octets containing one bit per VLAN for VLANS with VlanIndex values of 3072 through 4095 in the management domain on this trunk port. The first octet corresponds to VLANs with VlanIndex values of 3072 through 3079; the second octet to VLANs 3080 through 3087; etc. The most significant bit of each octet corresponds to the lowest value VlanIndex in that octet. If the bit corresponding to a VLAN is set to '1', then the local switch is currently sending joins for this VLAN on this trunk port, i.e., it is asking to receive frames for this VLAN; if the bit is set to '0', then the local switch is not currently sending joins for this VLAN on this trunk port.")
vlanTrunkPortDot1qTunnel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 6, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("trunk", 1), ("access", 2), ("disabled", 3))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanTrunkPortDot1qTunnel.setStatus('deprecated')
if mibBuilder.loadTexts: vlanTrunkPortDot1qTunnel.setDescription("Indicates dot1qtunnel mode of the port. If the portDot1qTunnel is set to 'trunk' mode, the port's vlanTrunkPortDynamicState will be changed to 'onNoNegotiate' and the vlanTrunkPortEncapsulationType will be set to 'dot1Q'. These values cannot be changed unless dot1q tunnel is disabled on this port. If the portDot1qTunnel mode is set to 'access' mode, the port's vlanTrunkPortDynamicState will be set to 'off'.And the value of vlanTrunkPortDynamicState cannot be changed unless dot1q tunnel is disabled on this port. 1Q packets received on this access port will remain. Setting the port to dot1q tunnel 'disabled' mode causes the dot1q tunnel feature to be disabled on this port. This object can't be set to 'trunk' or 'access' mode, when vlanTrunkPortsDot1qTag object is set to 'false'. This object has been deprecated and is replaced by the object 'cltcDot1qTunnelMode' in the CISCO-L2-TUNNEL-CONFIG-MIB")
vlanTrunkPortVlansActiveFirst2k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 6, 1, 1, 30), Cisco2KVlanList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTrunkPortVlansActiveFirst2k.setStatus('current')
if mibBuilder.loadTexts: vlanTrunkPortVlansActiveFirst2k.setDescription('A string of octets containing one bit per VLAN with VlanIndex values of 0 through 2047. If the bit corresponding to a VLAN is set to 1, it indicates that vlan is allowed and active in management domain. If the bit corresponding to a VLAN is set to 0, it indicates that vlan is not allowed or not active in management domain.')
vlanTrunkPortVlansActiveSecond2k = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 6, 1, 1, 31), Cisco2KVlanList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTrunkPortVlansActiveSecond2k.setStatus('current')
if mibBuilder.loadTexts: vlanTrunkPortVlansActiveSecond2k.setDescription('A string of octets containing one bit per VLAN with VlanIndex values of 2048 through 4095. If the bit corresponding to a VLAN is set to 1, it indicates that vlan is allowed and active in management domain. If the bit corresponding to a VLAN is set to 0, it indicates that vlan is not allowed or not active in management domain.')
vlanTrunkPortSetSerialNo = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 6, 2), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanTrunkPortSetSerialNo.setStatus('current')
if mibBuilder.loadTexts: vlanTrunkPortSetSerialNo.setDescription('An advisory lock used to allow several cooperating SNMPv2 managers to coordinate their use of the SNMPv2 set operation acting upon any instance of vlanTrunkPortVlansEnabled.')
vlanTrunkPortsDot1qTag = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 6, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanTrunkPortsDot1qTag.setStatus('deprecated')
if mibBuilder.loadTexts: vlanTrunkPortsDot1qTag.setDescription("An indication of whether the tagging on all VLANs including native VLAN for all 802.1q trunks is enabled. If this object has a value of true(1) then all VLANs including native VLAN are tagged. If the value is false(2) then all VLANs excluding native VLAN are tagged. This object has been deprecated and is replaced by the object 'cltcDot1qAllTaggedEnabled' in the CISCO-L2-TUNNEL-CONFIG-MIB")
vtpDiscover = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 7))
vtpDiscoverTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 7, 1), )
if mibBuilder.loadTexts: vtpDiscoverTable.setStatus('current')
if mibBuilder.loadTexts: vtpDiscoverTable.setDescription('This table contains information related to the discovery of the VTP members in the designated management domain. This table is not instantiated when managementDomainVersionInUse is version1(1), version2(3) or none(3).')
vtpDiscoverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 7, 1, 1), ).setIndexNames((0, "CISCO-VTP-MIB", "managementDomainIndex"))
if mibBuilder.loadTexts: vtpDiscoverEntry.setStatus('current')
if mibBuilder.loadTexts: vtpDiscoverEntry.setDescription('Information related to the discovery of the VTP members in one management domain.')
vtpDiscoverAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("discover", 1), ("noOperation", 2), ("purgeResult", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtpDiscoverAction.setStatus('current')
if mibBuilder.loadTexts: vtpDiscoverAction.setDescription('When this object is set to discover(1), all the entries in vtpDiscoverResultTable for the corresponding management domain will be removed and the local device will begin to discover all VTP members in the management domain. Upon the successful completion of discovery, the discovered result will be stored in the vtpDiscoverResultTable. If vtpDiscoverStatus is inProgress(1), setting vtpDiscoverAction to discover(1) will fail. When this object is set to purgeResult(3), all the entries of vtpDiscoverResultTable for the corresponding management domain will be removed from vtpDiscoverResultTable. When this object is set to noOperation(2), no action will be taken. When read, this object always returns noOperation(2).')
vtpDiscoverStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inProgress", 1), ("succeeded", 2), ("resourceUnavailable", 3), ("someOtherError", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpDiscoverStatus.setStatus('current')
if mibBuilder.loadTexts: vtpDiscoverStatus.setDescription("The current status of VTP discovery. inProgress - a discovery is in progress; succeeded - the discovery was completed successfully (this value is also used when no discover has been invoked since the last time the local system restarted); resourceUnavailable - the discovery failed because the required allocation of a resource is presently unavailable. someOtherError - 'the discovery failed due to a reason no listed.")
vtpLastDiscoverTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 7, 1, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpLastDiscoverTime.setStatus('current')
if mibBuilder.loadTexts: vtpLastDiscoverTime.setDescription('The value of sysUpTime at which the last discovery was completed. A value of zero indicates that no discovery has been invoked since last time the local system restarted.')
vtpDiscoverResultTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 7, 2), )
if mibBuilder.loadTexts: vtpDiscoverResultTable.setStatus('current')
if mibBuilder.loadTexts: vtpDiscoverResultTable.setDescription('The table containing information of discovered VTP members in the management domain in which the local system is participating. This table is not instantiated when managementDomainVersionInUse is version1(1), version2(2) or none(3).')
vtpDiscoverResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 7, 2, 1), ).setIndexNames((0, "CISCO-VTP-MIB", "managementDomainIndex"), (0, "CISCO-VTP-MIB", "vtpDiscoverResultIndex"))
if mibBuilder.loadTexts: vtpDiscoverResultEntry.setStatus('current')
if mibBuilder.loadTexts: vtpDiscoverResultEntry.setDescription('A conceptual row is created for each VTP member which is found through successful discovery.')
vtpDiscoverResultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 7, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpDiscoverResultIndex.setStatus('current')
if mibBuilder.loadTexts: vtpDiscoverResultIndex.setDescription('A value assigned by the system which identifies a VTP member and the associated database in the management domain.')
vtpDiscoverResultDatabaseName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 7, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpDiscoverResultDatabaseName.setStatus('current')
if mibBuilder.loadTexts: vtpDiscoverResultDatabaseName.setDescription('The database name associated with the discovered VTP member.')
vtpDiscoverResultConflicting = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 7, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpDiscoverResultConflicting.setStatus('current')
if mibBuilder.loadTexts: vtpDiscoverResultConflicting.setDescription('Indicates whether this VTP member contains conflicting information. true(1) indicates that this member has conflicting information of the database type in the management domain. false(2) indicates that there is no conflicting information of the database type in the management domain.')
vtpDiscoverResultDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 7, 2, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpDiscoverResultDeviceId.setStatus('current')
if mibBuilder.loadTexts: vtpDiscoverResultDeviceId.setDescription('The unique identifier of the device for this VTP member.')
vtpDiscoverResultPrimaryServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 7, 2, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpDiscoverResultPrimaryServer.setStatus('current')
if mibBuilder.loadTexts: vtpDiscoverResultPrimaryServer.setDescription('The unique identifier of the primary server for this VTP member and the associated database type. There are two different VTP servers, the primary server and the secondary server. When a local device is configured as a server for a certain database type, it becomes secondary server by default. Primary server is an operational role under which a server can initiate or change the VTP configuration of the database type. If this VTP member itself is the primary server, the value of this object is the same as the value of vtpDiscoverResultDeviceId of the instance.')
vtpDiscoverResultRevNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 7, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpDiscoverResultRevNumber.setStatus('current')
if mibBuilder.loadTexts: vtpDiscoverResultRevNumber.setDescription('The current configuration revision number as known by the VTP member. When the database type is unknown for the VTP member, this value is 0.')
vtpDiscoverResultSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 7, 2, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpDiscoverResultSystemName.setStatus('current')
if mibBuilder.loadTexts: vtpDiscoverResultSystemName.setDescription('sysName of the VTP member.')
vtpDatabase = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 8))
vtpDatabaseTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 8, 1), )
if mibBuilder.loadTexts: vtpDatabaseTable.setStatus('current')
if mibBuilder.loadTexts: vtpDatabaseTable.setDescription('This table contains information of the VTP databases. It is not instantiated when managementDomainVersionInUse is version1(1), version2(3) or none(3).')
vtpDatabaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 8, 1, 1), ).setIndexNames((0, "CISCO-VTP-MIB", "managementDomainIndex"), (0, "CISCO-VTP-MIB", "vtpDatabaseIndex"))
if mibBuilder.loadTexts: vtpDatabaseEntry.setStatus('current')
if mibBuilder.loadTexts: vtpDatabaseEntry.setDescription('Information about the status of the VTP database in the domain. Each VTP database type known to the local device type has an entry in this table. An entry is also created for unknown database which is notified through VTP advertisements from other VTP servers.')
vtpDatabaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 8, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: vtpDatabaseIndex.setStatus('current')
if mibBuilder.loadTexts: vtpDatabaseIndex.setDescription('A value assigned by the system which uniquely identifies a VTP database in the local system.')
vtpDatabaseName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 8, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpDatabaseName.setStatus('current')
if mibBuilder.loadTexts: vtpDatabaseName.setDescription('The name of the database.')
vtpDatabaseLocalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("client", 1), ("server", 2), ("transparent", 3), ("off", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtpDatabaseLocalMode.setStatus('current')
if mibBuilder.loadTexts: vtpDatabaseLocalMode.setDescription("The local VTP mode for a particular database type in this administrative domain. - 'client' indicates that the local system is acting as a VTP client of the database type. - 'server' indicates that the local system is acting as a VTP server of the database type. - 'transparent' indicates that the local system does not generate or listen to VTP messages of this database type, but forwards messages. This mode can also be set by the device itself when the size of database is too large for it to hold in DRAM. - 'off' indicates that the local system does not generate, listen to or forward any VTP messages of this database type. The default mode is 'client' for the database type known to the local device and 'transparent' for the unknown database type.")
vtpDatabaseRevNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 8, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpDatabaseRevNumber.setStatus('current')
if mibBuilder.loadTexts: vtpDatabaseRevNumber.setDescription('The current configuration revision number as known by the local device for this VTP 3 database type in the management domain. This value is updated (if necessary) whenever a VTP advertisement for the database type is received or generated. When the database type is unknown to the local device or no VTP advertisement for the database type is received or generated, its value is 0.')
vtpDatabasePrimaryServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 8, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpDatabasePrimaryServer.setStatus('current')
if mibBuilder.loadTexts: vtpDatabasePrimaryServer.setDescription('There are two kinds of VTP version 3 servers for a certain database type - the primary server and the secondary server. When a local device is configured as a server for a certain database type, it becomes secondary server by default. Primary server is an operational role under which a server can initiate or change the VTP configuration of the database type. A true(1) value indicates that the local device is the primary server of the database type in the management domain. A false(2) value indicates that the local device is not the primary server, or the database type is unknown to the local device.')
vtpDatabasePrimaryServerId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 8, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtpDatabasePrimaryServerId.setStatus('current')
if mibBuilder.loadTexts: vtpDatabasePrimaryServerId.setDescription('The unique identifier of the primary server in the management domain for the database type. If no primary server is discovered for the database type, the object has a value of zero length string.')
vtpDatabaseTakeOverPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 8, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtpDatabaseTakeOverPrimary.setStatus('current')
if mibBuilder.loadTexts: vtpDatabaseTakeOverPrimary.setDescription('There are two kinds of VTP version 3 servers for a certain database type - the primary server and the secondary server. When a local device is configured as a server for a certain database type, it becomes secondary server by default. Primary server is an operational role under which a server can initiate or change the VTP configuration of the database type. Setting this object to a true(1) value will advertise the configuration of this database type to the whole domain. In order to successfully setting this object to true(1), the value of vtpDatabaseLocalMode must be server(2). Besides that, when the VTP password is hidden from the configuration file, the password (vtpDatabaseTakeOverPassword) which matches the secret key (vtpAuthSecretKey) must be provided in the same data packet. When read, the object always returns false(2).')
vtpDatabaseTakeOverPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 8, 1, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtpDatabaseTakeOverPassword.setStatus('current')
if mibBuilder.loadTexts: vtpDatabaseTakeOverPassword.setDescription('When read, this object always returns the value of a zero-length octet string. In the case that the VTP password is hidden from the configuration and the local device intends to take over the whole domain, this object must be set to the matching password with the secret key (vtpAuthSecretKey) in the same data packet as which the vtpDatabaseTakeOverPrimary is in. In all the other situations, setting a valid value to this object has no impact on the system.')
vtpAuthentication = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 9))
vtpAuthenticationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 9, 1), )
if mibBuilder.loadTexts: vtpAuthenticationTable.setStatus('current')
if mibBuilder.loadTexts: vtpAuthenticationTable.setDescription('The table contains the authentication information of VTP in which the local system participates. The security mechanism of VTP relies on a secret key that is used to alter the MD5 digest of the packets transmitted on the wire. The secret value is created from a password that may be saved in plain text in the configuration or hidden from the configuration. The device creating or modifying the VTP configuration signs it using the MD5 digest generated from the secret key before advertising it. Other devices in the domain receive this configuration use the same secret key to accept it if correctly signed or drop it otherwise. The user has the option to hide the password from the configuration. Once the password is hidden, the secret key generated from the password is shown in the configuration instead, and there is no other way to show the password in plain text again but clearing it or resetting it. In an un-trusted area, the password on a device can be configured without being unveiled. After that, it has to be provided again by setting the same value to vtpDatabaseTakeOverPassword if the user wants to take over the whole VTP management domain of the database type. When managementDomainVersionInUse is version3(4), the authentication mechanism is common to all VTP database type.')
vtpAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 9, 1, 1), ).setIndexNames((0, "CISCO-VTP-MIB", "managementDomainIndex"))
if mibBuilder.loadTexts: vtpAuthEntry.setStatus('current')
if mibBuilder.loadTexts: vtpAuthEntry.setDescription('Information about the status of the VTP authentication information in one domain.')
vtpAuthPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 9, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtpAuthPassword.setStatus('current')
if mibBuilder.loadTexts: vtpAuthPassword.setDescription("By default, this object has a value of a zero-length character string and is considered to be not configured. The device uses the password to generate the secret key. It can be stored in the configuration in plain text or hidden from the configuration. If a VTP server intends to modify the database's configuration in the domain but the password was hidden from the configuration, the same password (vtpDatabaseTakeOverPassword) as the hidden one has to be provided. When this object is set alone, vtpAuthPasswordType is set to plaintext(1) automatically by the system. Setting this object to a zero length character string resets the password to its default value and the password is considered as not configured. This object is not allowed to be set at the same time when vtpAuthSecretKey is set. When the vtpAuthPasswordType is hidden(2), this object will return a zero-length character string when read.")
vtpAuthPasswordType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("plaintext", 1), ("hidden", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtpAuthPasswordType.setStatus('current')
if mibBuilder.loadTexts: vtpAuthPasswordType.setDescription('By default this object has the value as plaintext(1) and the VTP password is stored in the configuration file in plain text. Setting this object to hidden(2) will hide the password from the configuration. Once this object is set to hidden(2), it cannot be set to plaintext(1) alone. However, it may be set to plaintext(1) at the same time the password is set.')
vtpAuthSecretKey = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 9, 1, 1, 3), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(16, 16), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtpAuthSecretKey.setStatus('current')
if mibBuilder.loadTexts: vtpAuthSecretKey.setDescription("The device creating or modifying the VTP configuration signs it using the MD5 digest generated from the secret key before advertising it. Other devices in the domain receiving this configuration use the same secret key to accept it if it was correctly signed or drop it otherwise. By default, the object has the value as a zero-length string and this value is read only. It is set to this value automatically when the password (vtpAuthPassword) is set to a zero-length octet string. The secret key can be either generated using the password or configured by the user. Once the secret key is configured by the user, it is stored as a hexadecimal string in the device's configuration and the password is considered to be the secret key's matching password and hidden from the configuration automatically. This object is not allowed to be set at the same time when vtpAuthPassword is set. The secret key is overwritten by a newly generated secret key when the password is re-configured.")
vlanStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 10))
vlanStatsVlans = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 10, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanStatsVlans.setStatus('current')
if mibBuilder.loadTexts: vlanStatsVlans.setDescription('This object indicates the number of the existing manageable VLANs with VLAN indices from 1 to 1024 in the system.')
vlanStatsExtendedVlans = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 10, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanStatsExtendedVlans.setStatus('current')
if mibBuilder.loadTexts: vlanStatsExtendedVlans.setDescription('This object indicates the number of the existing manageable VLANs with VLAN indices greater than 1024 in the system.')
vlanStatsInternalVlans = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 10, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanStatsInternalVlans.setStatus('current')
if mibBuilder.loadTexts: vlanStatsInternalVlans.setDescription('This object indicates the number of the internal VLANs existing in the system.')
vlanStatsFreeVlans = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 46, 1, 10, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanStatsFreeVlans.setStatus('current')
if mibBuilder.loadTexts: vlanStatsFreeVlans.setDescription('This object indicates the number of the free or unused VLANs in the system.')
vtpNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 46, 2))
vtpNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 46, 2, 0))
vtpNotificationsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 46, 2, 1))
vtpConfigRevNumberError = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 46, 2, 0, 1)).setObjects(("CISCO-VTP-MIB", "managementDomainConfigRevNumber"))
if mibBuilder.loadTexts: vtpConfigRevNumberError.setStatus('current')
if mibBuilder.loadTexts: vtpConfigRevNumberError.setDescription("A configuration revision number error notification signifies that a device has incremented its vtpConfigRevNumberErrors counter. Generation of this notification is suppressed if the vtpNotificationsEnabled has the value 'false'. The device must throttle the generation of consecutive vtpConfigRevNumberError notifications so that there is at least a five-second gap between notification of this type. When notification are throttled, they are dropped, not queued for sending at a future time. (Note that 'generating' a notification means sending to all configured recipients.)")
vtpConfigDigestError = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 46, 2, 0, 2)).setObjects(("CISCO-VTP-MIB", "managementDomainConfigRevNumber"))
if mibBuilder.loadTexts: vtpConfigDigestError.setStatus('current')
if mibBuilder.loadTexts: vtpConfigDigestError.setDescription("A configuration digest error notification signifies that a device has incremented its vtpConfigDigestErrors counter. Generation of this notification is suppressed if the vtpNotificationsEnabled has the value 'false'. The device must throttle the generation of consecutive vtpConfigDigestError notifications so that there is at least a five-second gap between notification of this type. When notification are throttled, they are dropped, not queued for sending at a future time. (Note that 'generating' a notification means sending to all configured recipients.)")
vtpServerDisabled = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 46, 2, 0, 3)).setObjects(("CISCO-VTP-MIB", "managementDomainConfigRevNumber"), ("CISCO-VTP-MIB", "vtpMaxVlanStorage"))
if mibBuilder.loadTexts: vtpServerDisabled.setStatus('current')
if mibBuilder.loadTexts: vtpServerDisabled.setDescription("A VTP Server disabled notification is generated when the local system is no longer able to function as a VTP Server because the number of defined VLANs is greater than vtpMaxVlanStorage or the local system is not able to recover complete VTP information after a reboot. Generation of this notification is suppressed if the vtpNotificationsEnabled has the value 'false'.")
vtpMtuTooBig = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 46, 2, 0, 4)).setObjects(("CISCO-VTP-MIB", "vlanTrunkPortManagementDomain"), ("CISCO-VTP-MIB", "vtpVlanState"))
if mibBuilder.loadTexts: vtpMtuTooBig.setStatus('current')
if mibBuilder.loadTexts: vtpMtuTooBig.setDescription("A VTP MTU tooBig notification is generated when a VLAN's MTU size is larger than can be supported either: - by one or more of its trunk ports: the included vtpVlanState has the value 'mtuTooBigForTrunk' and the included vlanTrunkPortManagementDomain is for the first (or only) trunk port, or - by the device itself: vtpVlanState has the value 'mtuTooBigForDevice' and any instance of vlanTrunkPortManagementDomain is included. Devices which have no trunk ports do not send vtpMtuTooBig notifications. Generation of this notification is suppressed if the vtpNotificationsEnabled has the value 'false'.")
vtpVersionOneDeviceDetected = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 46, 2, 0, 6)).setObjects(("CISCO-VTP-MIB", "vlanTrunkPortManagementDomain"))
if mibBuilder.loadTexts: vtpVersionOneDeviceDetected.setStatus('current')
if mibBuilder.loadTexts: vtpVersionOneDeviceDetected.setDescription('A VTP version one device detected notification is generated by a device when: a) a management domain has been put into version 2 mode (as accessed by managementDomainVersionInUse). b) 15 minutes has passed since a). c) a version 1 PDU is detected on a trunk on the device that is in that management domain which has a lower revision number than the current configuration.')
vlanTrunkPortDynamicStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 46, 2, 0, 7)).setObjects(("CISCO-VTP-MIB", "vlanTrunkPortDynamicStatus"))
if mibBuilder.loadTexts: vlanTrunkPortDynamicStatusChange.setStatus('current')
if mibBuilder.loadTexts: vlanTrunkPortDynamicStatusChange.setDescription('A vlanTrunkPortDynamicStatusChange notification is generated by a device when the value of vlanTrunkPortDynamicStatus object has been changed.')
vtpLocalModeChanged = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 46, 2, 0, 8)).setObjects(("CISCO-VTP-MIB", "managementDomainLocalMode"))
if mibBuilder.loadTexts: vtpLocalModeChanged.setStatus('current')
if mibBuilder.loadTexts: vtpLocalModeChanged.setDescription('A vtpLocalModeChanged notification is generated by a device when the value of the object managementDomainLocalMode is changed.')
vtpVersionInUseChanged = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 46, 2, 0, 9)).setObjects(("CISCO-VTP-MIB", "managementDomainVersionInUse"))
if mibBuilder.loadTexts: vtpVersionInUseChanged.setStatus('current')
if mibBuilder.loadTexts: vtpVersionInUseChanged.setDescription('A vtpVersionInUseChanged notification is generated by a device when the value of the object managementDomainVersionInUse is changed.')
vtpVlanCreated = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 46, 2, 0, 10)).setObjects(("CISCO-VTP-MIB", "vtpVlanName"))
if mibBuilder.loadTexts: vtpVlanCreated.setStatus('current')
if mibBuilder.loadTexts: vtpVlanCreated.setDescription('A vtpVlanCreated notification is generated by a device when a VLAN is created.')
vtpVlanDeleted = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 46, 2, 0, 11)).setObjects(("CISCO-VTP-MIB", "vtpVlanName"))
if mibBuilder.loadTexts: vtpVlanDeleted.setStatus('current')
if mibBuilder.loadTexts: vtpVlanDeleted.setDescription('A vtpVlanDeleted notification is generated by a device when a VLAN is deleted.')
vtpVlanRingNumberConflict = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 46, 2, 0, 12)).setObjects(("CISCO-VTP-MIB", "vtpVlanRingNumber"), ("IF-MIB", "ifIndex"), ("CISCO-VTP-MIB", "vtpVlanPortLocalSegment"))
if mibBuilder.loadTexts: vtpVlanRingNumberConflict.setStatus('current')
if mibBuilder.loadTexts: vtpVlanRingNumberConflict.setDescription("A VTP ring number configuration conflict notification is generated if, and only at the time when, a device learns of a conflict between: a) the ring number (vtpVlanPortLocalSegment) being used on a token ring segment attached to the port identified by ifIndex, and b) the VTP-obtained ring number (vtpVlanRingNumber) for the VLAN identified by vtpVlanIndex. When such a conflict occurs, the bridge port is put into an administrative down position until the conflict is resolved through local/network management intervention. This notification is only applicable to VLANs of type 'tokenRing'.")
vtpPruningStateOperChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 46, 2, 0, 13)).setObjects(("CISCO-VTP-MIB", "managementDomainPruningStateOper"))
if mibBuilder.loadTexts: vtpPruningStateOperChange.setStatus('current')
if mibBuilder.loadTexts: vtpPruningStateOperChange.setDescription('A vtpPruningStateOperChange notification is generated by the device when the instance value of managementDomainPruningStateOper is changed.')
vtpVlanPortLocalSegment = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 46, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: vtpVlanPortLocalSegment.setStatus('current')
if mibBuilder.loadTexts: vtpVlanPortLocalSegment.setDescription("The ring (segment) number in use on a 802.5 ring. For bridges supporting RFC 1525, this value is the same as given by dot1dSrPortLocalSegment for the bridge port attached to that ring. When tokenRing VLANs are in use, each 'trNet' VLAN can/does have a different instance of dot1dSrPortLocalSegment for each physical port. Note that access to the particuler instance of dot1dSrPortLocalSegment requires knowledge of how the agent supports the multiple 'contexts' required to implement RFC 1525 for multiple VLANs; also note that the assignment of ifIndex values may be different in different 'contexts'.")
vtpMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 46, 3))
vtpMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 1))
vtpMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 2))
vtpMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 1, 1)).setObjects(("CISCO-VTP-MIB", "vtpBasicGroup"), ("CISCO-VTP-MIB", "vtpVlanInfoGroup"), ("CISCO-VTP-MIB", "vtpStatsGroup"), ("CISCO-VTP-MIB", "vtpTrunkPortGroup"), ("CISCO-VTP-MIB", "vtpVlanInfoEditGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpMIBCompliance = vtpMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: vtpMIBCompliance.setDescription('The compliance statement for VTP implementations.')
vtpMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 1, 2)).setObjects(("CISCO-VTP-MIB", "vtpBasicGroup"), ("CISCO-VTP-MIB", "vtpVlanInfoGroup"), ("CISCO-VTP-MIB", "vtpStatsGroup"), ("CISCO-VTP-MIB", "vtpTrunkPortGroup"), ("CISCO-VTP-MIB", "vtpVlanInfoEditGroup"), ("CISCO-VTP-MIB", "vtp4kVlanGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpMIBCompliance2 = vtpMIBCompliance2.setStatus('deprecated')
if mibBuilder.loadTexts: vtpMIBCompliance2.setDescription('The compliance statement for VTP implementations.')
vtpMIBCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 1, 3)).setObjects(("CISCO-VTP-MIB", "vtpBasicGroup"), ("CISCO-VTP-MIB", "vtpVlanInfoGroup"), ("CISCO-VTP-MIB", "vtpStatsGroup"), ("CISCO-VTP-MIB", "vtpTrunkPortGroup"), ("CISCO-VTP-MIB", "vtpVlanInfoEditGroup"), ("CISCO-VTP-MIB", "vtp4kVlanGroup"), ("CISCO-VTP-MIB", "vtpDot1qTunnelGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpMIBCompliance3 = vtpMIBCompliance3.setStatus('deprecated')
if mibBuilder.loadTexts: vtpMIBCompliance3.setDescription('The compliance statement for VTP implementations.')
vtpMIBCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 1, 4)).setObjects(("CISCO-VTP-MIB", "vtpBasicGroup"), ("CISCO-VTP-MIB", "vtpVlanInfoGroup"), ("CISCO-VTP-MIB", "vtpStatsGroup"), ("CISCO-VTP-MIB", "vtpTrunkPortGroup"), ("CISCO-VTP-MIB", "vtpVlanInfoEditGroup"), ("CISCO-VTP-MIB", "vtp4kVlanGroup"), ("CISCO-VTP-MIB", "vtpDot1qTunnelGroup"), ("CISCO-VTP-MIB", "vtpVlanIfIndexGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpMIBCompliance4 = vtpMIBCompliance4.setStatus('deprecated')
if mibBuilder.loadTexts: vtpMIBCompliance4.setDescription('The compliance statement for VTP implementations.')
vtpMIBCompliance5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 1, 5)).setObjects(("CISCO-VTP-MIB", "vtpBasicGroup"), ("CISCO-VTP-MIB", "vtpVlanInfoGroup"), ("CISCO-VTP-MIB", "vtpStatsGroup"), ("CISCO-VTP-MIB", "vtpTrunkPortGroup"), ("CISCO-VTP-MIB", "vtpVersion2BasicGroup"), ("CISCO-VTP-MIB", "vtpVlanInfoEditGroup"), ("CISCO-VTP-MIB", "vtp4kVlanGroup"), ("CISCO-VTP-MIB", "vtpDot1qTunnelGroup"), ("CISCO-VTP-MIB", "vtpVlanIfIndexGroup"), ("CISCO-VTP-MIB", "vtpVlanInfoEditGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpMIBCompliance5 = vtpMIBCompliance5.setStatus('deprecated')
if mibBuilder.loadTexts: vtpMIBCompliance5.setDescription('The compliance statement for VTP implementations.')
vtpMIBCompliance6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 1, 6)).setObjects(("CISCO-VTP-MIB", "vtpBasicGroup"), ("CISCO-VTP-MIB", "vtpVlanInfoGroup"), ("CISCO-VTP-MIB", "vtpConfigNotificationsGroup"), ("CISCO-VTP-MIB", "vtpStatsGroup"), ("CISCO-VTP-MIB", "vtpTrunkPortGroup"), ("CISCO-VTP-MIB", "vtpVersion2BasicGroup"), ("CISCO-VTP-MIB", "vtpNotificationObjectsGroup"), ("CISCO-VTP-MIB", "vtpVlanInfoEditGroup"), ("CISCO-VTP-MIB", "vtp4kVlanGroupRev1"), ("CISCO-VTP-MIB", "vtpDot1qTunnelGroup"), ("CISCO-VTP-MIB", "vtpVlanIfIndexGroup"), ("CISCO-VTP-MIB", "vtpVlanInfoEditGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpMIBCompliance6 = vtpMIBCompliance6.setStatus('deprecated')
if mibBuilder.loadTexts: vtpMIBCompliance6.setDescription('The compliance statement for VTP implementations.')
vtpMIBCompliance7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 1, 7)).setObjects(("CISCO-VTP-MIB", "vtpBasicGroup"), ("CISCO-VTP-MIB", "vtpVlanInfoGroup"), ("CISCO-VTP-MIB", "vtpConfigNotificationsGroup"), ("CISCO-VTP-MIB", "vtpStatsGroup"), ("CISCO-VTP-MIB", "vtpTrunkPortGroup"), ("CISCO-VTP-MIB", "vtpVersion2BasicGroup"), ("CISCO-VTP-MIB", "vtpNotificationObjectsGroup"), ("CISCO-VTP-MIB", "vtpVlanInfoEditGroup"), ("CISCO-VTP-MIB", "vtp4kVlanGroupRev1"), ("CISCO-VTP-MIB", "vtpDot1qTunnelGroup"), ("CISCO-VTP-MIB", "vtpVlanIfIndexGroup"), ("CISCO-VTP-MIB", "vtpVlanInfoEditGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpMIBCompliance7 = vtpMIBCompliance7.setStatus('deprecated')
if mibBuilder.loadTexts: vtpMIBCompliance7.setDescription('The compliance statement for VTP implementations.')
vtpMIBCompliance8 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 1, 8)).setObjects(("CISCO-VTP-MIB", "vtpBasicGroup"), ("CISCO-VTP-MIB", "vtpVlanInfoGroup"), ("CISCO-VTP-MIB", "vtpConfigNotificationsGroup"), ("CISCO-VTP-MIB", "vtpStatsGroup"), ("CISCO-VTP-MIB", "vtpTrunkPortGroup"), ("CISCO-VTP-MIB", "vtpVersion2BasicGroup"), ("CISCO-VTP-MIB", "vtpNotificationObjectsGroup"), ("CISCO-VTP-MIB", "vtpVlanInfoEditGroup"), ("CISCO-VTP-MIB", "vtp4kVlanGroupRev1"), ("CISCO-VTP-MIB", "vtpDot1qTunnelGroup2"), ("CISCO-VTP-MIB", "vtpVlanIfIndexGroup"), ("CISCO-VTP-MIB", "vtpVlanInfoEditGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpMIBCompliance8 = vtpMIBCompliance8.setStatus('deprecated')
if mibBuilder.loadTexts: vtpMIBCompliance8.setDescription('The compliance statement for VTP implementations.')
vtpMIBCompliance9 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 1, 9)).setObjects(("CISCO-VTP-MIB", "vtpBasicGroup"), ("CISCO-VTP-MIB", "vtpVlanInfoGroup"), ("CISCO-VTP-MIB", "vtpConfigNotificationsGroup"), ("CISCO-VTP-MIB", "vtpStatsGroup"), ("CISCO-VTP-MIB", "vtpTrunkPortGroup"), ("CISCO-VTP-MIB", "vtpVersion2BasicGroup"), ("CISCO-VTP-MIB", "vtpNotificationObjectsGroup"), ("CISCO-VTP-MIB", "vtpVlanInfoEditGroup"), ("CISCO-VTP-MIB", "vtp4kVlanGroupRev1"), ("CISCO-VTP-MIB", "vtpVlanIfIndexGroup"), ("CISCO-VTP-MIB", "vtpVlanInfoEditGroup2"), ("CISCO-VTP-MIB", "vtpVlanNotifEnabledGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpMIBCompliance9 = vtpMIBCompliance9.setStatus('deprecated')
if mibBuilder.loadTexts: vtpMIBCompliance9.setDescription('The compliance statement for VTP implementations.')
vtpMIBCompliance10 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 1, 10)).setObjects(("CISCO-VTP-MIB", "vtpBasicGroup"), ("CISCO-VTP-MIB", "vtpVlanInfoGroup"), ("CISCO-VTP-MIB", "vtpConfigNotificationsGroup"), ("CISCO-VTP-MIB", "vtpStatsGroup"), ("CISCO-VTP-MIB", "vtpTrunkPortGroup"), ("CISCO-VTP-MIB", "vtpVersion2BasicGroup"), ("CISCO-VTP-MIB", "vtpNotificationObjectsGroup"), ("CISCO-VTP-MIB", "vtpVlanInfoEditGroup"), ("CISCO-VTP-MIB", "vtp4kVlanGroupRev1"), ("CISCO-VTP-MIB", "vtpVlanIfIndexGroup"), ("CISCO-VTP-MIB", "vtpVlanInfoEditGroup2"), ("CISCO-VTP-MIB", "vtpVlanNotifEnabledGroup"), ("CISCO-VTP-MIB", "vtpDiscoverGroup"), ("CISCO-VTP-MIB", "vtpDatabaseGroup"), ("CISCO-VTP-MIB", "vtpAuthGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpMIBCompliance10 = vtpMIBCompliance10.setStatus('deprecated')
if mibBuilder.loadTexts: vtpMIBCompliance10.setDescription('The compliance statement for VTP implementations.')
vtpMIBCompliance11 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 1, 11)).setObjects(("CISCO-VTP-MIB", "vtpBasicGroup"), ("CISCO-VTP-MIB", "vtpVlanInfoGroup"), ("CISCO-VTP-MIB", "vtpConfigNotificationsGroupRev1"), ("CISCO-VTP-MIB", "vtpStatsGroup"), ("CISCO-VTP-MIB", "vtpTrunkPortGroup"), ("CISCO-VTP-MIB", "vtpVersion2BasicGroup"), ("CISCO-VTP-MIB", "vtpNotificationObjectsGroup"), ("CISCO-VTP-MIB", "vtpVlanInfoEditGroup"), ("CISCO-VTP-MIB", "vtp4kVlanGroupRev1"), ("CISCO-VTP-MIB", "vtpVlanIfIndexGroup"), ("CISCO-VTP-MIB", "vtpVlanInfoEditGroup2"), ("CISCO-VTP-MIB", "vtpVlanNotifEnabledGroup"), ("CISCO-VTP-MIB", "vtpDiscoverGroup"), ("CISCO-VTP-MIB", "vtpDatabaseGroup"), ("CISCO-VTP-MIB", "vtpAuthGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpMIBCompliance11 = vtpMIBCompliance11.setStatus('deprecated')
if mibBuilder.loadTexts: vtpMIBCompliance11.setDescription('The compliance statement for VTP implementations.')
vtpMIBCompliance12 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 1, 12)).setObjects(("CISCO-VTP-MIB", "vtpBasicGroup"), ("CISCO-VTP-MIB", "vtpVlanInfoGroup"), ("CISCO-VTP-MIB", "vtpConfigNotificationsGroupRev1"), ("CISCO-VTP-MIB", "vtpStatsGroup"), ("CISCO-VTP-MIB", "vtpTrunkPortGroup"), ("CISCO-VTP-MIB", "vtpVersion2BasicGroup"), ("CISCO-VTP-MIB", "vtpNotificationObjectsGroup"), ("CISCO-VTP-MIB", "vtpVlanInfoEditGroup"), ("CISCO-VTP-MIB", "vtp4kVlanGroupRev1"), ("CISCO-VTP-MIB", "vtpVlanIfIndexGroup"), ("CISCO-VTP-MIB", "vtpVlanInfoEditGroup2"), ("CISCO-VTP-MIB", "vtpVlanNotifEnabledGroup"), ("CISCO-VTP-MIB", "vtpDiscoverGroup"), ("CISCO-VTP-MIB", "vtpDatabaseGroup"), ("CISCO-VTP-MIB", "vtpAuthGroup"), ("CISCO-VTP-MIB", "vtpInternalVlanGrp"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpMIBCompliance12 = vtpMIBCompliance12.setStatus('deprecated')
if mibBuilder.loadTexts: vtpMIBCompliance12.setDescription('The compliance statement for VTP implementations.')
vtpMIBCompliance13 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 1, 13)).setObjects(("CISCO-VTP-MIB", "vtpBasicGroup"), ("CISCO-VTP-MIB", "vtpVlanInfoGroup"), ("CISCO-VTP-MIB", "vtpConfigNotificationsGroupRev1"), ("CISCO-VTP-MIB", "vtpStatsGroup"), ("CISCO-VTP-MIB", "vtpTrunkPortGroup"), ("CISCO-VTP-MIB", "vtpVersion2BasicGroup"), ("CISCO-VTP-MIB", "vtpNotificationObjectsGroup"), ("CISCO-VTP-MIB", "vtpVlanInfoEditGroup"), ("CISCO-VTP-MIB", "vtp4kVlanGroupRev1"), ("CISCO-VTP-MIB", "vtpVlanIfIndexGroup"), ("CISCO-VTP-MIB", "vtpVlanInfoEditGroup2"), ("CISCO-VTP-MIB", "vtpVlanNotifEnabledGroup"), ("CISCO-VTP-MIB", "vtpDiscoverGroup"), ("CISCO-VTP-MIB", "vtpDatabaseGroup"), ("CISCO-VTP-MIB", "vtpAuthGroup"), ("CISCO-VTP-MIB", "vtpInternalVlanGrp"), ("CISCO-VTP-MIB", "vlanStatsGroup"), ("CISCO-VTP-MIB", "vtpConfigNotificationsGroup6"), ("CISCO-VTP-MIB", "vtpConfigNotificationsGroup7"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpMIBCompliance13 = vtpMIBCompliance13.setStatus('deprecated')
if mibBuilder.loadTexts: vtpMIBCompliance13.setDescription('The compliance statement for VTP implementations.')
vtpMIBCompliance14 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 1, 14)).setObjects(("CISCO-VTP-MIB", "vtpBasicGroup"), ("CISCO-VTP-MIB", "vtpVlanInfoGroup"), ("CISCO-VTP-MIB", "vtpConfigNotificationsGroupRev1"), ("CISCO-VTP-MIB", "vtpStatsGroup"), ("CISCO-VTP-MIB", "vtpTrunkPortGroup"), ("CISCO-VTP-MIB", "vtpVersion2BasicGroup"), ("CISCO-VTP-MIB", "vtpNotificationObjectsGroup"), ("CISCO-VTP-MIB", "vtpTrunkPruningGroup"), ("CISCO-VTP-MIB", "vtpTrunkPruningGroup2"), ("CISCO-VTP-MIB", "vtpTrunkPortGroup2"), ("CISCO-VTP-MIB", "vtpVlanInfoEditGroup"), ("CISCO-VTP-MIB", "vtpTrunkPortGroup3"), ("CISCO-VTP-MIB", "vtp4kVlanGroupRev1"), ("CISCO-VTP-MIB", "vtpVlanIfIndexGroup"), ("CISCO-VTP-MIB", "vtpVlanInfoEditGroup2"), ("CISCO-VTP-MIB", "vtpVlanNotifEnabledGroup"), ("CISCO-VTP-MIB", "vtpConfigNotificationsGroup2"), ("CISCO-VTP-MIB", "vtpConfigNotificationsGroup3"), ("CISCO-VTP-MIB", "vtpConfigNotificationsGroup4"), ("CISCO-VTP-MIB", "vtpDiscoverGroup"), ("CISCO-VTP-MIB", "vtpDatabaseGroup"), ("CISCO-VTP-MIB", "vtpAuthGroup"), ("CISCO-VTP-MIB", "vtpInternalVlanGrp"), ("CISCO-VTP-MIB", "vlanStatsGroup"), ("CISCO-VTP-MIB", "vtpConfigNotificationsGroup6"), ("CISCO-VTP-MIB", "vtpConfigNotificationsGroup7"), ("CISCO-VTP-MIB", "vtpTrunkPruningGroup3"), ("CISCO-VTP-MIB", "vtpConfigNotificationsGroup8"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpMIBCompliance14 = vtpMIBCompliance14.setStatus('deprecated')
if mibBuilder.loadTexts: vtpMIBCompliance14.setDescription('The compliance statement for VTP implementations.')
vtpMIBCompliance15 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 1, 15)).setObjects(("CISCO-VTP-MIB", "vtpBasicGroup"), ("CISCO-VTP-MIB", "vtpVlanInfoGroup"), ("CISCO-VTP-MIB", "vtpConfigNotificationsGroupRev1"), ("CISCO-VTP-MIB", "vtpStatsGroup"), ("CISCO-VTP-MIB", "vtpTrunkPortGroup"), ("CISCO-VTP-MIB", "vtpVersion2BasicGroup"), ("CISCO-VTP-MIB", "vtpNotificationObjectsGroup"), ("CISCO-VTP-MIB", "vtpTrunkPruningGroup"), ("CISCO-VTP-MIB", "vtpTrunkPruningGroup2"), ("CISCO-VTP-MIB", "vtpTrunkPortGroup2"), ("CISCO-VTP-MIB", "vtpVlanInfoEditGroup"), ("CISCO-VTP-MIB", "vtpTrunkPortGroup3"), ("CISCO-VTP-MIB", "vtp4kVlanGroupRev1"), ("CISCO-VTP-MIB", "vtpVlanIfIndexGroup"), ("CISCO-VTP-MIB", "vtpVlanInfoEditGroup2"), ("CISCO-VTP-MIB", "vtpVlanNotifEnabledGroup"), ("CISCO-VTP-MIB", "vtpConfigNotificationsGroup2"), ("CISCO-VTP-MIB", "vtpConfigNotificationsGroup3"), ("CISCO-VTP-MIB", "vtpConfigNotificationsGroup4"), ("CISCO-VTP-MIB", "vtpDiscoverGroup"), ("CISCO-VTP-MIB", "vtpDatabaseGroup"), ("CISCO-VTP-MIB", "vtpAuthGroup"), ("CISCO-VTP-MIB", "vtpInternalVlanGrp"), ("CISCO-VTP-MIB", "vlanStatsGroup"), ("CISCO-VTP-MIB", "vtpConfigNotificationsGroup6"), ("CISCO-VTP-MIB", "vtpConfigNotificationsGroup7"), ("CISCO-VTP-MIB", "vtpTrunkPruningGroup3"), ("CISCO-VTP-MIB", "vtpConfigNotificationsGroup8"), ("CISCO-VTP-MIB", "vlanTrunkPortActiveVlansGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpMIBCompliance15 = vtpMIBCompliance15.setStatus('deprecated')
if mibBuilder.loadTexts: vtpMIBCompliance15.setDescription('The compliance statement for VTP implementations.')
vtpMIBCompliance16 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 1, 16)).setObjects(("CISCO-VTP-MIB", "vtpBasicGroup"), ("CISCO-VTP-MIB", "vtpVlanInfoGroup"), ("CISCO-VTP-MIB", "vtpConfigNotificationsGroupRev1"), ("CISCO-VTP-MIB", "vtpStatsGroup"), ("CISCO-VTP-MIB", "vtpTrunkPortGroup"), ("CISCO-VTP-MIB", "vtpVersion2BasicGroup"), ("CISCO-VTP-MIB", "vtpNotificationObjectsGroup"), ("CISCO-VTP-MIB", "vtpTrunkPruningGroup"), ("CISCO-VTP-MIB", "vtpTrunkPruningGroup2"), ("CISCO-VTP-MIB", "vtpTrunkPortGroup2"), ("CISCO-VTP-MIB", "vtpVlanInfoEditGroup"), ("CISCO-VTP-MIB", "vtpTrunkPortGroup3"), ("CISCO-VTP-MIB", "vtp4kVlanGroupRev1"), ("CISCO-VTP-MIB", "vtpVlanIfIndexGroup"), ("CISCO-VTP-MIB", "vtpVlanInfoEditGroup2"), ("CISCO-VTP-MIB", "vtpVlanNotifEnabledGroup"), ("CISCO-VTP-MIB", "vtpConfigNotificationsGroup2"), ("CISCO-VTP-MIB", "vtpConfigNotificationsGroup3"), ("CISCO-VTP-MIB", "vtpConfigNotificationsGroup4"), ("CISCO-VTP-MIB", "vtpDiscoverGroup"), ("CISCO-VTP-MIB", "vtpDatabaseGroup"), ("CISCO-VTP-MIB", "vtpAuthGroup"), ("CISCO-VTP-MIB", "vtpInternalVlanGrp"), ("CISCO-VTP-MIB", "vlanStatsGroup"), ("CISCO-VTP-MIB", "vtpConfigNotificationsGroup6"), ("CISCO-VTP-MIB", "vtpConfigNotificationsGroup7"), ("CISCO-VTP-MIB", "vtpTrunkPruningGroup3"), ("CISCO-VTP-MIB", "vtpConfigNotificationsGroup8"), ("CISCO-VTP-MIB", "vlanTrunkPortActiveVlansGroup"), ("CISCO-VTP-MIB", "vtpSourceInterfaceGroup"), ("CISCO-VTP-MIB", "vtpConfigFileGroup"), ("CISCO-VTP-MIB", "vtpVlanLocalShutdownGroup"), ("CISCO-VTP-MIB", "vtpLocalUpdaterGroup"), ("CISCO-VTP-MIB", "vtpDeviceIdGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpMIBCompliance16 = vtpMIBCompliance16.setStatus('current')
if mibBuilder.loadTexts: vtpMIBCompliance16.setDescription('The compliance statement for VTP implementations.')
vtpBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 2, 1)).setObjects(("CISCO-VTP-MIB", "vtpVersion"), ("CISCO-VTP-MIB", "vtpMaxVlanStorage"), ("CISCO-VTP-MIB", "vtpNotificationsEnabled"), ("CISCO-VTP-MIB", "managementDomainName"), ("CISCO-VTP-MIB", "managementDomainLocalMode"), ("CISCO-VTP-MIB", "managementDomainConfigRevNumber"), ("CISCO-VTP-MIB", "managementDomainLastUpdater"), ("CISCO-VTP-MIB", "managementDomainLastChange"), ("CISCO-VTP-MIB", "managementDomainTftpServer"), ("CISCO-VTP-MIB", "managementDomainTftpPathname"), ("CISCO-VTP-MIB", "managementDomainRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpBasicGroup = vtpBasicGroup.setStatus('current')
if mibBuilder.loadTexts: vtpBasicGroup.setDescription('A collection of objects providing basic status and control of a VTP implementation.')
vtpVlanInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 2, 13)).setObjects(("CISCO-VTP-MIB", "vtpVlanState"), ("CISCO-VTP-MIB", "vtpVlanType"), ("CISCO-VTP-MIB", "vtpVlanName"), ("CISCO-VTP-MIB", "vtpVlanMtu"), ("CISCO-VTP-MIB", "vtpVlanDot10Said"), ("CISCO-VTP-MIB", "vtpVlanRingNumber"), ("CISCO-VTP-MIB", "vtpVlanBridgeNumber"), ("CISCO-VTP-MIB", "vtpVlanStpType"), ("CISCO-VTP-MIB", "vtpVlanParentVlan"), ("CISCO-VTP-MIB", "vtpVlanTranslationalVlan1"), ("CISCO-VTP-MIB", "vtpVlanTranslationalVlan2"), ("CISCO-VTP-MIB", "vtpVlanBridgeType"), ("CISCO-VTP-MIB", "vtpVlanAreHopCount"), ("CISCO-VTP-MIB", "vtpVlanSteHopCount"), ("CISCO-VTP-MIB", "vtpVlanIsCRFBackup"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpVlanInfoGroup = vtpVlanInfoGroup.setStatus('current')
if mibBuilder.loadTexts: vtpVlanInfoGroup.setDescription('A collection of objects for monitoring VLAN information.')
vtpVlanInfoEditGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 2, 14)).setObjects(("CISCO-VTP-MIB", "vtpVlanEditOperation"), ("CISCO-VTP-MIB", "vtpVlanApplyStatus"), ("CISCO-VTP-MIB", "vtpVlanEditBufferOwner"), ("CISCO-VTP-MIB", "vtpVlanEditConfigRevNumber"), ("CISCO-VTP-MIB", "vtpVlanEditState"), ("CISCO-VTP-MIB", "vtpVlanEditType"), ("CISCO-VTP-MIB", "vtpVlanEditName"), ("CISCO-VTP-MIB", "vtpVlanEditMtu"), ("CISCO-VTP-MIB", "vtpVlanEditDot10Said"), ("CISCO-VTP-MIB", "vtpVlanEditRingNumber"), ("CISCO-VTP-MIB", "vtpVlanEditBridgeNumber"), ("CISCO-VTP-MIB", "vtpVlanEditStpType"), ("CISCO-VTP-MIB", "vtpVlanEditParentVlan"), ("CISCO-VTP-MIB", "vtpVlanEditRowStatus"), ("CISCO-VTP-MIB", "vtpVlanEditTranslationalVlan1"), ("CISCO-VTP-MIB", "vtpVlanEditTranslationalVlan2"), ("CISCO-VTP-MIB", "vtpVlanEditBridgeType"), ("CISCO-VTP-MIB", "vtpVlanEditAreHopCount"), ("CISCO-VTP-MIB", "vtpVlanEditSteHopCount"), ("CISCO-VTP-MIB", "vtpVlanEditIsCRFBackup"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpVlanInfoEditGroup = vtpVlanInfoEditGroup.setStatus('current')
if mibBuilder.loadTexts: vtpVlanInfoEditGroup.setDescription('A collection of objects for editing VLAN information in VTP Servers.')
vtpStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 2, 4)).setObjects(("CISCO-VTP-MIB", "vtpInSummaryAdverts"), ("CISCO-VTP-MIB", "vtpInSubsetAdverts"), ("CISCO-VTP-MIB", "vtpInAdvertRequests"), ("CISCO-VTP-MIB", "vtpOutSummaryAdverts"), ("CISCO-VTP-MIB", "vtpOutSubsetAdverts"), ("CISCO-VTP-MIB", "vtpOutAdvertRequests"), ("CISCO-VTP-MIB", "vtpConfigRevNumberErrors"), ("CISCO-VTP-MIB", "vtpConfigDigestErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpStatsGroup = vtpStatsGroup.setStatus('current')
if mibBuilder.loadTexts: vtpStatsGroup.setDescription('A collection of objects providing VTP statistics.')
vtpTrunkPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 2, 5)).setObjects(("CISCO-VTP-MIB", "vlanTrunkPortManagementDomain"), ("CISCO-VTP-MIB", "vlanTrunkPortEncapsulationType"), ("CISCO-VTP-MIB", "vlanTrunkPortVlansEnabled"), ("CISCO-VTP-MIB", "vlanTrunkPortNativeVlan"), ("CISCO-VTP-MIB", "vlanTrunkPortRowStatus"), ("CISCO-VTP-MIB", "vlanTrunkPortSetSerialNo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpTrunkPortGroup = vtpTrunkPortGroup.setStatus('current')
if mibBuilder.loadTexts: vtpTrunkPortGroup.setDescription('A collection of objects providing information on trunk ports.')
vtpTrunkPortGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 2, 11)).setObjects(("CISCO-VTP-MIB", "vlanTrunkPortDynamicState"), ("CISCO-VTP-MIB", "vlanTrunkPortDynamicStatus"), ("CISCO-VTP-MIB", "vlanTrunkPortVtpEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpTrunkPortGroup2 = vtpTrunkPortGroup2.setStatus('current')
if mibBuilder.loadTexts: vtpTrunkPortGroup2.setDescription('Additional functionality added to the vlanTrunkPortTable.')
vtpTrunkPortGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 2, 15)).setObjects(("CISCO-VTP-MIB", "vlanTrunkPortEncapsulationOperType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpTrunkPortGroup3 = vtpTrunkPortGroup3.setStatus('current')
if mibBuilder.loadTexts: vtpTrunkPortGroup3.setDescription('Additional functionality added to the vlanTrunkPortTable.')
vtpTrunkPruningGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 2, 7)).setObjects(("CISCO-VTP-MIB", "vlanTrunkPortInJoins"), ("CISCO-VTP-MIB", "vlanTrunkPortOutJoins"), ("CISCO-VTP-MIB", "vlanTrunkPortOldAdverts"), ("CISCO-VTP-MIB", "vlanTrunkPortVlansPruningEligible"), ("CISCO-VTP-MIB", "vlanTrunkPortVlansXmitJoined"), ("CISCO-VTP-MIB", "vlanTrunkPortVlansRcvJoined"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpTrunkPruningGroup = vtpTrunkPruningGroup.setStatus('current')
if mibBuilder.loadTexts: vtpTrunkPruningGroup.setDescription('A collection of objects providing information on VLAN pruning.')
vtpTrunkPruningGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 2, 10)).setObjects(("CISCO-VTP-MIB", "managementDomainPruningState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpTrunkPruningGroup2 = vtpTrunkPruningGroup2.setStatus('current')
if mibBuilder.loadTexts: vtpTrunkPruningGroup2.setDescription('A collection of object providing information on whether VLAN pruning is enabled.')
vtpVersion2BasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 2, 12)).setObjects(("CISCO-VTP-MIB", "managementDomainVersionInUse"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpVersion2BasicGroup = vtpVersion2BasicGroup.setStatus('current')
if mibBuilder.loadTexts: vtpVersion2BasicGroup.setDescription('The object required to indicate the version of VTP in use by a management domain.')
vtpConfigNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 2, 6)).setObjects(("CISCO-VTP-MIB", "vtpConfigDigestError"), ("CISCO-VTP-MIB", "vtpConfigRevNumberError"), ("CISCO-VTP-MIB", "vtpServerDisabled"), ("CISCO-VTP-MIB", "vtpMtuTooBig"), ("CISCO-VTP-MIB", "vtpVersionOneDeviceDetected"), ("CISCO-VTP-MIB", "vlanTrunkPortDynamicStatusChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpConfigNotificationsGroup = vtpConfigNotificationsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: vtpConfigNotificationsGroup.setDescription('The notifications which a VTP implementation is required to implement. vtpConfigNotificationsGroup object is superseded by vtpConfigNotificationsGroupRev1, vtpConfigNotificationsGroup5.')
vtp4kVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 2, 16)).setObjects(("CISCO-VTP-MIB", "vtpVlanTypeExt"), ("CISCO-VTP-MIB", "vtpVlanEditTypeExt"), ("CISCO-VTP-MIB", "vlanTrunkPortVlansEnabled2k"), ("CISCO-VTP-MIB", "vlanTrunkPortVlansEnabled3k"), ("CISCO-VTP-MIB", "vlanTrunkPortVlansEnabled4k"), ("CISCO-VTP-MIB", "vtpVlansPruningEligible2k"), ("CISCO-VTP-MIB", "vtpVlansPruningEligible3k"), ("CISCO-VTP-MIB", "vtpVlansPruningEligible4k"), ("CISCO-VTP-MIB", "vlanTrunkPortVlansXmitJoined2k"), ("CISCO-VTP-MIB", "vlanTrunkPortVlansXmitJoined3k"), ("CISCO-VTP-MIB", "vlanTrunkPortVlansXmitJoined4k"), ("CISCO-VTP-MIB", "vlanTrunkPortVlansRcvJoined2k"), ("CISCO-VTP-MIB", "vlanTrunkPortVlansRcvJoined3k"), ("CISCO-VTP-MIB", "vlanTrunkPortVlansRcvJoined4k"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtp4kVlanGroup = vtp4kVlanGroup.setStatus('deprecated')
if mibBuilder.loadTexts: vtp4kVlanGroup.setDescription('A collection of objects providing information for VLANS with VlanIndex from 1024 to 4095. vtp4kVlanGroup object is superseded by vtp4kVlanGroupRev1.')
vtpDot1qTunnelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 2, 17)).setObjects(("CISCO-VTP-MIB", "vlanTrunkPortsDot1qTag"), ("CISCO-VTP-MIB", "vlanTrunkPortDot1qTunnel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpDot1qTunnelGroup = vtpDot1qTunnelGroup.setStatus('deprecated')
if mibBuilder.loadTexts: vtpDot1qTunnelGroup.setDescription('A collection of objects providing information for dot1qtunnel feature. vtpDot1qTunnelGroup object is superseded by vtpDot1qTunnelGroup2.')
vtpVlanIfIndexGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 2, 18)).setObjects(("CISCO-VTP-MIB", "vtpVlanIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpVlanIfIndexGroup = vtpVlanIfIndexGroup.setStatus('current')
if mibBuilder.loadTexts: vtpVlanIfIndexGroup.setDescription('A collection of objects providing information for mapping of VLAN ID to its corresponding ifIndex.')
vtpVlanInfoEditGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 2, 19)).setObjects(("CISCO-VTP-MIB", "vtpVlanEditModifiedVlan"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpVlanInfoEditGroup2 = vtpVlanInfoEditGroup2.setStatus('current')
if mibBuilder.loadTexts: vtpVlanInfoEditGroup2.setDescription("A collection of objects for editing VLAN information when only one VLAN is allowed to be edited for each 'apply' operation.")
vtp4kVlanGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 2, 20)).setObjects(("CISCO-VTP-MIB", "vtpVlanTypeExt"), ("CISCO-VTP-MIB", "vtpVlanEditTypeExt2"), ("CISCO-VTP-MIB", "vlanTrunkPortVlansEnabled2k"), ("CISCO-VTP-MIB", "vlanTrunkPortVlansEnabled3k"), ("CISCO-VTP-MIB", "vlanTrunkPortVlansEnabled4k"), ("CISCO-VTP-MIB", "vtpVlansPruningEligible2k"), ("CISCO-VTP-MIB", "vtpVlansPruningEligible3k"), ("CISCO-VTP-MIB", "vtpVlansPruningEligible4k"), ("CISCO-VTP-MIB", "vlanTrunkPortVlansXmitJoined2k"), ("CISCO-VTP-MIB", "vlanTrunkPortVlansXmitJoined3k"), ("CISCO-VTP-MIB", "vlanTrunkPortVlansXmitJoined4k"), ("CISCO-VTP-MIB", "vlanTrunkPortVlansRcvJoined2k"), ("CISCO-VTP-MIB", "vlanTrunkPortVlansRcvJoined3k"), ("CISCO-VTP-MIB", "vlanTrunkPortVlansRcvJoined4k"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtp4kVlanGroupRev1 = vtp4kVlanGroupRev1.setStatus('current')
if mibBuilder.loadTexts: vtp4kVlanGroupRev1.setDescription('A collection of objects providing information for VLANS with VlanIndex from 1024 to 4095.')
vtpNotificationObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 2, 21)).setObjects(("CISCO-VTP-MIB", "vtpVlanPortLocalSegment"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpNotificationObjectsGroup = vtpNotificationObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: vtpNotificationObjectsGroup.setDescription('A collection of objects included in VTP notifications.')
vtpDot1qTunnelGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 2, 22)).setObjects(("CISCO-VTP-MIB", "vlanTrunkPortsDot1qTag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpDot1qTunnelGroup2 = vtpDot1qTunnelGroup2.setStatus('deprecated')
if mibBuilder.loadTexts: vtpDot1qTunnelGroup2.setDescription('A collection of objects providing information for dot1qtunnel feature.')
vtpConfigNotificationsGroup2 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 2, 23)).setObjects(("CISCO-VTP-MIB", "vtpLocalModeChanged"), ("CISCO-VTP-MIB", "vtpVersionInUseChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpConfigNotificationsGroup2 = vtpConfigNotificationsGroup2.setStatus('current')
if mibBuilder.loadTexts: vtpConfigNotificationsGroup2.setDescription('The notifications which a VTP implementation is required to implement.')
vtpVlanNotifEnabledGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 2, 24)).setObjects(("CISCO-VTP-MIB", "vtpVlanCreatedNotifEnabled"), ("CISCO-VTP-MIB", "vtpVlanDeletedNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpVlanNotifEnabledGroup = vtpVlanNotifEnabledGroup.setStatus('current')
if mibBuilder.loadTexts: vtpVlanNotifEnabledGroup.setDescription('A collection of objects to indicate whether a certain group of notifications are enabled.')
vtpConfigNotificationsGroup3 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 2, 25)).setObjects(("CISCO-VTP-MIB", "vtpVlanCreated"), ("CISCO-VTP-MIB", "vtpVlanDeleted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpConfigNotificationsGroup3 = vtpConfigNotificationsGroup3.setStatus('current')
if mibBuilder.loadTexts: vtpConfigNotificationsGroup3.setDescription('The notifications implemented by a device which supports these features.')
vtpConfigNotificationsGroup4 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 2, 26)).setObjects(("CISCO-VTP-MIB", "vtpVlanRingNumberConflict"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpConfigNotificationsGroup4 = vtpConfigNotificationsGroup4.setStatus('current')
if mibBuilder.loadTexts: vtpConfigNotificationsGroup4.setDescription('The notifications implemented by a device which supports these features.')
vtpDiscoverGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 2, 27)).setObjects(("CISCO-VTP-MIB", "vtpDiscoverAction"), ("CISCO-VTP-MIB", "vtpDiscoverStatus"), ("CISCO-VTP-MIB", "vtpLastDiscoverTime"), ("CISCO-VTP-MIB", "vtpDiscoverResultIndex"), ("CISCO-VTP-MIB", "vtpDiscoverResultDatabaseName"), ("CISCO-VTP-MIB", "vtpDiscoverResultConflicting"), ("CISCO-VTP-MIB", "vtpDiscoverResultDeviceId"), ("CISCO-VTP-MIB", "vtpDiscoverResultPrimaryServer"), ("CISCO-VTP-MIB", "vtpDiscoverResultRevNumber"), ("CISCO-VTP-MIB", "vtpDiscoverResultSystemName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpDiscoverGroup = vtpDiscoverGroup.setStatus('current')
if mibBuilder.loadTexts: vtpDiscoverGroup.setDescription('A collection of objects providing information of VTP discovery.')
vtpDatabaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 2, 28)).setObjects(("CISCO-VTP-MIB", "vtpDatabaseName"), ("CISCO-VTP-MIB", "vtpDatabaseLocalMode"), ("CISCO-VTP-MIB", "vtpDatabaseRevNumber"), ("CISCO-VTP-MIB", "vtpDatabasePrimaryServer"), ("CISCO-VTP-MIB", "vtpDatabasePrimaryServerId"), ("CISCO-VTP-MIB", "vtpDatabaseTakeOverPrimary"), ("CISCO-VTP-MIB", "vtpDatabaseTakeOverPassword"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpDatabaseGroup = vtpDatabaseGroup.setStatus('current')
if mibBuilder.loadTexts: vtpDatabaseGroup.setDescription('A collection of objects providing information of VTP databases.')
vtpAuthGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 2, 29)).setObjects(("CISCO-VTP-MIB", "vtpAuthPassword"), ("CISCO-VTP-MIB", "vtpAuthPasswordType"), ("CISCO-VTP-MIB", "vtpAuthSecretKey"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpAuthGroup = vtpAuthGroup.setStatus('current')
if mibBuilder.loadTexts: vtpAuthGroup.setDescription('A collection of objects providing information of VTP authentication mechanism.')
vtpConfigNotificationsGroupRev1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 2, 30)).setObjects(("CISCO-VTP-MIB", "vtpConfigDigestError"), ("CISCO-VTP-MIB", "vtpConfigRevNumberError"), ("CISCO-VTP-MIB", "vtpVersionOneDeviceDetected"), ("CISCO-VTP-MIB", "vlanTrunkPortDynamicStatusChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpConfigNotificationsGroupRev1 = vtpConfigNotificationsGroupRev1.setStatus('current')
if mibBuilder.loadTexts: vtpConfigNotificationsGroupRev1.setDescription('The notifications which a VTP implementation is required to implement.')
vtpConfigNotificationsGroup5 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 2, 31)).setObjects(("CISCO-VTP-MIB", "vtpServerDisabled"), ("CISCO-VTP-MIB", "vtpMtuTooBig"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpConfigNotificationsGroup5 = vtpConfigNotificationsGroup5.setStatus('deprecated')
if mibBuilder.loadTexts: vtpConfigNotificationsGroup5.setDescription('The additional notifications that may be related to a VTP implementation. vtpConfigNotificationsGroup5 object is superseded by vtpConfigNotificationsGroup6, vtpConfigNotificationsGroup7.')
vtpInternalVlanGrp = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 2, 32)).setObjects(("CISCO-VTP-MIB", "vtpInternalVlanAllocPolicy"), ("CISCO-VTP-MIB", "vtpInternalVlanOwner"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpInternalVlanGrp = vtpInternalVlanGrp.setStatus('current')
if mibBuilder.loadTexts: vtpInternalVlanGrp.setDescription('A collection of objects providing information of internal VLANs.')
vlanStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 2, 33)).setObjects(("CISCO-VTP-MIB", "vlanStatsVlans"), ("CISCO-VTP-MIB", "vlanStatsExtendedVlans"), ("CISCO-VTP-MIB", "vlanStatsInternalVlans"), ("CISCO-VTP-MIB", "vlanStatsFreeVlans"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vlanStatsGroup = vlanStatsGroup.setStatus('current')
if mibBuilder.loadTexts: vlanStatsGroup.setDescription('A collection of objects providing VLAN statistics information in the system.')
vtpConfigNotificationsGroup6 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 2, 34)).setObjects(("CISCO-VTP-MIB", "vtpServerDisabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpConfigNotificationsGroup6 = vtpConfigNotificationsGroup6.setStatus('current')
if mibBuilder.loadTexts: vtpConfigNotificationsGroup6.setDescription('The additional notifications that may be related to a VTP implementation.')
vtpConfigNotificationsGroup7 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 2, 35)).setObjects(("CISCO-VTP-MIB", "vtpMtuTooBig"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpConfigNotificationsGroup7 = vtpConfigNotificationsGroup7.setStatus('current')
if mibBuilder.loadTexts: vtpConfigNotificationsGroup7.setDescription('The additional notifications that may be related to a VTP implementation.')
vtpTrunkPruningGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 2, 36)).setObjects(("CISCO-VTP-MIB", "managementDomainPruningStateOper"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpTrunkPruningGroup3 = vtpTrunkPruningGroup3.setStatus('current')
if mibBuilder.loadTexts: vtpTrunkPruningGroup3.setDescription('A collection of objects providing information on operational VTP pruning state in a manamgement domain.')
vtpConfigNotificationsGroup8 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 2, 37)).setObjects(("CISCO-VTP-MIB", "vtpPruningStateOperChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpConfigNotificationsGroup8 = vtpConfigNotificationsGroup8.setStatus('current')
if mibBuilder.loadTexts: vtpConfigNotificationsGroup8.setDescription('The additional notifications for operational VTP pruning state change in a management domain.')
vlanTrunkPortActiveVlansGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 2, 38)).setObjects(("CISCO-VTP-MIB", "vlanTrunkPortVlansActiveFirst2k"), ("CISCO-VTP-MIB", "vlanTrunkPortVlansActiveSecond2k"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vlanTrunkPortActiveVlansGroup = vlanTrunkPortActiveVlansGroup.setStatus('current')
if mibBuilder.loadTexts: vlanTrunkPortActiveVlansGroup.setDescription('A collection of objects providing active vlan information for a trunking port in a management domain.')
vtpSourceInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 2, 39)).setObjects(("CISCO-VTP-MIB", "managementDomainAdminSrcIf"), ("CISCO-VTP-MIB", "managementDomainSourceOnlyMode"), ("CISCO-VTP-MIB", "managementDomainOperSrcIf"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpSourceInterfaceGroup = vtpSourceInterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: vtpSourceInterfaceGroup.setDescription('A collection of object providing the preferred source interface for the VTP IP updater address.')
vtpConfigFileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 2, 40)).setObjects(("CISCO-VTP-MIB", "managementDomainConfigFile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpConfigFileGroup = vtpConfigFileGroup.setStatus('current')
if mibBuilder.loadTexts: vtpConfigFileGroup.setDescription('A collection of object providing the location of VTP configuration file.')
vtpVlanLocalShutdownGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 2, 41)).setObjects(("CISCO-VTP-MIB", "vtpVlanLocalShutdown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpVlanLocalShutdownGroup = vtpVlanLocalShutdownGroup.setStatus('current')
if mibBuilder.loadTexts: vtpVlanLocalShutdownGroup.setDescription('A collection of object providing the VLAN local shutdown state.')
vtpLocalUpdaterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 2, 42)).setObjects(("CISCO-VTP-MIB", "managementDomainLocalUpdaterType"), ("CISCO-VTP-MIB", "managementDomainLocalUpdater"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpLocalUpdaterGroup = vtpLocalUpdaterGroup.setStatus('current')
if mibBuilder.loadTexts: vtpLocalUpdaterGroup.setDescription('A collection of object providing the local updater IP address.')
vtpDeviceIdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 46, 3, 2, 43)).setObjects(("CISCO-VTP-MIB", "managementDomainDeviceID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtpDeviceIdGroup = vtpDeviceIdGroup.setStatus('current')
if mibBuilder.loadTexts: vtpDeviceIdGroup.setDescription('A collection of object providing the device id.')
mibBuilder.exportSymbols("CISCO-VTP-MIB", vtpVlanDot10Said=vtpVlanDot10Said, vtpDiscoverStatus=vtpDiscoverStatus, vtpMIBGroups=vtpMIBGroups, vtpAuthPassword=vtpAuthPassword, vtpNotificationsEnabled=vtpNotificationsEnabled, vtpVlanAreHopCount=vtpVlanAreHopCount, managementDomainLastUpdater=managementDomainLastUpdater, vtpVlanIfIndexGroup=vtpVlanIfIndexGroup, vtpDiscover=vtpDiscover, vtpVlanLocalShutdownTable=vtpVlanLocalShutdownTable, vtpMIBCompliances=vtpMIBCompliances, vtpVlanEditIsCRFBackup=vtpVlanEditIsCRFBackup, vtpDatabase=vtpDatabase, vtpVlanEditBridgeNumber=vtpVlanEditBridgeNumber, vtpMIBCompliance2=vtpMIBCompliance2, vtpDot1qTunnelGroup=vtpDot1qTunnelGroup, vtpPruningStateOperChange=vtpPruningStateOperChange, vtpVlanDeleted=vtpVlanDeleted, managementDomainConfigRevNumber=managementDomainConfigRevNumber, managementDomainOperSrcIf=managementDomainOperSrcIf, vtpVlanCreatedNotifEnabled=vtpVlanCreatedNotifEnabled, vtpLocalModeChanged=vtpLocalModeChanged, vtpConfigRevNumberErrors=vtpConfigRevNumberErrors, managementDomainName=managementDomainName, vtpVersion=vtpVersion, vtpMIBObjects=vtpMIBObjects, managementDomainSourceOnlyMode=managementDomainSourceOnlyMode, vtpDatabaseLocalMode=vtpDatabaseLocalMode, vtpConfigDigestError=vtpConfigDigestError, vtpDot1qTunnelGroup2=vtpDot1qTunnelGroup2, vtpVlanRingNumber=vtpVlanRingNumber, vlanTrunkPortSetSerialNo=vlanTrunkPortSetSerialNo, vtpConfigNotificationsGroupRev1=vtpConfigNotificationsGroupRev1, managementDomainAdminSrcIf=managementDomainAdminSrcIf, vtpMaxVlanStorage=vtpMaxVlanStorage, vlanTrunkPortIfIndex=vlanTrunkPortIfIndex, managementDomainLocalMode=managementDomainLocalMode, vtpVlanApplyStatus=vtpVlanApplyStatus, vtpDiscoverTable=vtpDiscoverTable, vtpMtuTooBig=vtpMtuTooBig, vtpStats=vtpStats, vtpDiscoverResultDeviceId=vtpDiscoverResultDeviceId, vtpVlanIndex=vtpVlanIndex, vtpTrunkPortGroup3=vtpTrunkPortGroup3, vtpTrunkPortGroup2=vtpTrunkPortGroup2, managementDomainRowStatus=managementDomainRowStatus, vtpMIBConformance=vtpMIBConformance, vtpNotificationsPrefix=vtpNotificationsPrefix, vtpConfigRevNumberError=vtpConfigRevNumberError, vtpVlanEditOperation=vtpVlanEditOperation, managementDomainTftpPathname=managementDomainTftpPathname, vtpMIBCompliance=vtpMIBCompliance, managementDomainTftpServer=managementDomainTftpServer, vlanTrunkPortOldAdverts=vlanTrunkPortOldAdverts, vlanTrunkPortVtpEnabled=vlanTrunkPortVtpEnabled, vlanTrunkPortDynamicStatus=vlanTrunkPortDynamicStatus, vtpDatabasePrimaryServer=vtpDatabasePrimaryServer, vtpVlanEditTable=vtpVlanEditTable, vtpNotificationsObjects=vtpNotificationsObjects, vtpAuthEntry=vtpAuthEntry, vtpTrunkPruningGroup3=vtpTrunkPruningGroup3, vtpVlanNotifEnabledGroup=vtpVlanNotifEnabledGroup, vlanTrunkPortOutJoins=vlanTrunkPortOutJoins, vtpVlanEditIndex=vtpVlanEditIndex, vtpTrunkPruningGroup2=vtpTrunkPruningGroup2, vtpInternalVlanTable=vtpInternalVlanTable, vtpVlansPruningEligible4k=vtpVlansPruningEligible4k, vtpConfigNotificationsGroup5=vtpConfigNotificationsGroup5, vlanTrunkPortVlansEnabled4k=vlanTrunkPortVlansEnabled4k, vlanTrunkPortVlansRcvJoined2k=vlanTrunkPortVlansRcvJoined2k, vtpVlanRingNumberConflict=vtpVlanRingNumberConflict, vtpInAdvertRequests=vtpInAdvertRequests, vtpDiscoverResultIndex=vtpDiscoverResultIndex, vlanTrunkPortDynamicStatusChange=vlanTrunkPortDynamicStatusChange, vtpConfigFileGroup=vtpConfigFileGroup, vtpVlanBridgeType=vtpVlanBridgeType, vtpNotifications=vtpNotifications, vtpVlanEditStpType=vtpVlanEditStpType, vtpMIBCompliance14=vtpMIBCompliance14, vtpMIBCompliance16=vtpMIBCompliance16, managementDomainLastChange=managementDomainLastChange, vtpVlanEditTranslationalVlan1=vtpVlanEditTranslationalVlan1, vlanStatistics=vlanStatistics, vtpAuthGroup=vtpAuthGroup, vlanTrunkPortVlansEnabled2k=vlanTrunkPortVlansEnabled2k, vtpMIBCompliance8=vtpMIBCompliance8, vlanTrunkPortVlansActiveFirst2k=vlanTrunkPortVlansActiveFirst2k, vtpDatabaseIndex=vtpDatabaseIndex, vtpOutAdvertRequests=vtpOutAdvertRequests, vlanTrunkPortDynamicState=vlanTrunkPortDynamicState, vtpVlanEditEntry=vtpVlanEditEntry, vtpVlansPruningEligible2k=vtpVlansPruningEligible2k, vtpDatabaseRevNumber=vtpDatabaseRevNumber, vlanTrunkPortVlansActiveSecond2k=vlanTrunkPortVlansActiveSecond2k, vtpConfigNotificationsGroup2=vtpConfigNotificationsGroup2, vlanTrunkPortNativeVlan=vlanTrunkPortNativeVlan, vlanTrunkPortDot1qTunnel=vlanTrunkPortDot1qTunnel, VlanIndex=VlanIndex, vtpVlanEditTranslationalVlan2=vtpVlanEditTranslationalVlan2, vtpServerDisabled=vtpServerDisabled, managementDomainPruningStateOper=managementDomainPruningStateOper, vtpMIBCompliance11=vtpMIBCompliance11, vtpVlanDeletedNotifEnabled=vtpVlanDeletedNotifEnabled, vtpVlanEditConfigRevNumber=vtpVlanEditConfigRevNumber, vtpDiscoverResultTable=vtpDiscoverResultTable, vtpDiscoverAction=vtpDiscoverAction, vtpDiscoverResultRevNumber=vtpDiscoverResultRevNumber, vtpDatabaseName=vtpDatabaseName, vtpStatsTable=vtpStatsTable, vtpTrunkPortGroup=vtpTrunkPortGroup, vtpConfigNotificationsGroup3=vtpConfigNotificationsGroup3, vtpMIBCompliance4=vtpMIBCompliance4, vlanTrunkPortVlansXmitJoined2k=vlanTrunkPortVlansXmitJoined2k, managementDomainConfigFile=managementDomainConfigFile, vlanTrunkPortVlansXmitJoined3k=vlanTrunkPortVlansXmitJoined3k, vtpMIBCompliance3=vtpMIBCompliance3, managementDomainTable=managementDomainTable, vtpVlanEditMtu=vtpVlanEditMtu, vtpVersionInUseChanged=vtpVersionInUseChanged, vtpVersionOneDeviceDetected=vtpVersionOneDeviceDetected, vtpLocalUpdaterGroup=vtpLocalUpdaterGroup, vtpOutSubsetAdverts=vtpOutSubsetAdverts, vtpVlanSteHopCount=vtpVlanSteHopCount, vtpVlanEditBufferOwner=vtpVlanEditBufferOwner, vtpConfigNotificationsGroup=vtpConfigNotificationsGroup, vtpVlanParentVlan=vtpVlanParentVlan, vtpVlanEditSteHopCount=vtpVlanEditSteHopCount, vlanStatsGroup=vlanStatsGroup, vtpVlanStpType=vtpVlanStpType, vtpVlanEditRingNumber=vtpVlanEditRingNumber, vtpStatus=vtpStatus, vlanTrunkPortsDot1qTag=vlanTrunkPortsDot1qTag, vtpVersion2BasicGroup=vtpVersion2BasicGroup, vtpDiscoverResultConflicting=vtpDiscoverResultConflicting, vtpVlanLocalShutdownEntry=vtpVlanLocalShutdownEntry, managementDomainPruningState=managementDomainPruningState, managementDomainDeviceID=managementDomainDeviceID, vtpMIBCompliance5=vtpMIBCompliance5, vtpOutSummaryAdverts=vtpOutSummaryAdverts, vtpVlanInfoEditGroup2=vtpVlanInfoEditGroup2, vtpVlanMtu=vtpVlanMtu, vtpVlanBridgeNumber=vtpVlanBridgeNumber, vtpAuthSecretKey=vtpAuthSecretKey, vtpVlanPortLocalSegment=vtpVlanPortLocalSegment, ciscoVtpMIB=ciscoVtpMIB, vtpVlansPruningEligible3k=vtpVlansPruningEligible3k, vtpEditControlEntry=vtpEditControlEntry, vlanEdit=vlanEdit, vtpDeviceIdGroup=vtpDeviceIdGroup, vtpMIBCompliance12=vtpMIBCompliance12, vtpVlanEditBridgeType=vtpVlanEditBridgeType, VlanTypeExt=VlanTypeExt, vlanStatsExtendedVlans=vlanStatsExtendedVlans, vtpVlanInfoEditGroup=vtpVlanInfoEditGroup, managementDomainLocalUpdater=managementDomainLocalUpdater, vtpVlanTranslationalVlan2=vtpVlanTranslationalVlan2, vtpVlanIfIndex=vtpVlanIfIndex, vlanTrunkPortVlansRcvJoined=vlanTrunkPortVlansRcvJoined, vlanTrunkPortVlansXmitJoined4k=vlanTrunkPortVlansXmitJoined4k, vtpSourceInterfaceGroup=vtpSourceInterfaceGroup, managementDomainVersionInUse=managementDomainVersionInUse, vtpVlanState=vtpVlanState, vtpVlanLocalShutdown=vtpVlanLocalShutdown, vtpVlanEditParentVlan=vtpVlanEditParentVlan, vtpAuthentication=vtpAuthentication, vtpVlanEditRowStatus=vtpVlanEditRowStatus, vlanTrunkPortRowStatus=vlanTrunkPortRowStatus, vtpInternalVlanEntry=vtpInternalVlanEntry, vtpAuthenticationTable=vtpAuthenticationTable, vtpVlanEditName=vtpVlanEditName, vtpInSubsetAdverts=vtpInSubsetAdverts, vtpVlanEditAreHopCount=vtpVlanEditAreHopCount, internalVlanInfo=internalVlanInfo, vtpVlanCreated=vtpVlanCreated, vtpMIBCompliance15=vtpMIBCompliance15, vtpStatsGroup=vtpStatsGroup, vtpVlanEntry=vtpVlanEntry, vtpDatabaseTable=vtpDatabaseTable, vlanTrunkPortActiveVlansGroup=vlanTrunkPortActiveVlansGroup, vtpMIBCompliance9=vtpMIBCompliance9, vtpVlanEditTypeExt=vtpVlanEditTypeExt, vtpLastDiscoverTime=vtpLastDiscoverTime, VlanType=VlanType, vtpInSummaryAdverts=vtpInSummaryAdverts, vtpDiscoverEntry=vtpDiscoverEntry, vtpInternalVlanGrp=vtpInternalVlanGrp, vtpDiscoverResultPrimaryServer=vtpDiscoverResultPrimaryServer, vtpVlanTypeExt=vtpVlanTypeExt, vtp4kVlanGroup=vtp4kVlanGroup, vtpInternalVlanAllocPolicy=vtpInternalVlanAllocPolicy, vlanTrunkPortVlansEnabled=vlanTrunkPortVlansEnabled, vtpMIBCompliance7=vtpMIBCompliance7, vtpVlanName=vtpVlanName, vlanTrunkPortVlansXmitJoined=vlanTrunkPortVlansXmitJoined, vlanStatsVlans=vlanStatsVlans, vtpDatabaseTakeOverPassword=vtpDatabaseTakeOverPassword, vlanTrunkPortManagementDomain=vlanTrunkPortManagementDomain, vtpAuthPasswordType=vtpAuthPasswordType, vtpMIBCompliance13=vtpMIBCompliance13, vtpVlanInfoGroup=vtpVlanInfoGroup, vtpConfigNotificationsGroup6=vtpConfigNotificationsGroup6, vtpVlanTranslationalVlan1=vtpVlanTranslationalVlan1, vtpVlanEditState=vtpVlanEditState, ManagementDomainIndex=ManagementDomainIndex, vtpVlanEditTypeExt2=vtpVlanEditTypeExt2, vlanTrunkPorts=vlanTrunkPorts, vlanTrunkPortEncapsulationType=vlanTrunkPortEncapsulationType, vlanStatsFreeVlans=vlanStatsFreeVlans, vtp4kVlanGroupRev1=vtp4kVlanGroupRev1, vtpVlanEditModifiedVlan=vtpVlanEditModifiedVlan, vlanManagementDomains=vlanManagementDomains, vtpDiscoverGroup=vtpDiscoverGroup, vlanTrunkPortEncapsulationOperType=vlanTrunkPortEncapsulationOperType, vtpStatsEntry=vtpStatsEntry, vtpDatabaseGroup=vtpDatabaseGroup, vtpDatabasePrimaryServerId=vtpDatabasePrimaryServerId, vtpEditControlTable=vtpEditControlTable, vtpVlanIsCRFBackup=vtpVlanIsCRFBackup, vlanTrunkPortVlansRcvJoined4k=vlanTrunkPortVlansRcvJoined4k, vlanTrunkPortEntry=vlanTrunkPortEntry, vlanTrunkPortInJoins=vlanTrunkPortInJoins, vtpMIBCompliance10=vtpMIBCompliance10, vtpVlanLocalShutdownGroup=vtpVlanLocalShutdownGroup, vtpNotificationObjectsGroup=vtpNotificationObjectsGroup, vlanTrunkPortVlansEnabled3k=vlanTrunkPortVlansEnabled3k, managementDomainIndex=managementDomainIndex, vtpVlanType=vtpVlanType, managementDomainLocalUpdaterType=managementDomainLocalUpdaterType, vtpConfigNotificationsGroup7=vtpConfigNotificationsGroup7, vtpConfigDigestErrors=vtpConfigDigestErrors, vtpVlanTable=vtpVlanTable, vlanInfo=vlanInfo, vtpBasicGroup=vtpBasicGroup, vtpMIBCompliance6=vtpMIBCompliance6, PYSNMP_MODULE_ID=ciscoVtpMIB, vlanStatsInternalVlans=vlanStatsInternalVlans, vlanTrunkPortVlansRcvJoined3k=vlanTrunkPortVlansRcvJoined3k, managementDomainEntry=managementDomainEntry, vtpConfigNotificationsGroup8=vtpConfigNotificationsGroup8, vtpDatabaseEntry=vtpDatabaseEntry, vtpInternalVlanOwner=vtpInternalVlanOwner, vtpDiscoverResultDatabaseName=vtpDiscoverResultDatabaseName, vtpVlanEditType=vtpVlanEditType, vtpDiscoverResultEntry=vtpDiscoverResultEntry, vtpVlanEditDot10Said=vtpVlanEditDot10Said, vtpConfigNotificationsGroup4=vtpConfigNotificationsGroup4, vtpDatabaseTakeOverPrimary=vtpDatabaseTakeOverPrimary, vlanTrunkPortVlansPruningEligible=vlanTrunkPortVlansPruningEligible, vtpTrunkPruningGroup=vtpTrunkPruningGroup, vtpDiscoverResultSystemName=vtpDiscoverResultSystemName, vlanTrunkPortTable=vlanTrunkPortTable)
