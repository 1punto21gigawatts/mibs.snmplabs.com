#
# PySNMP MIB module SWITCHING-EXTENSION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SWITCHING-EXTENSION-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:13:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
IANAifType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
InterfaceIndex, InterfaceIndexOrZero, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero", "ifIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
dot1qVlanIndex, dot1qFdbId, VlanIndex = mibBuilder.importSymbols("Q-BRIDGE-MIB", "dot1qVlanIndex", "dot1qFdbId", "VlanIndex")
quanta, switch, AgentPortMask = mibBuilder.importSymbols("QUANTA-SWITCH-MIB", "quanta", "switch", "AgentPortMask")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, ObjectIdentity, Counter32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, IpAddress, TimeTicks, Bits, NotificationType, Integer32, Gauge32, iso, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "ObjectIdentity", "Counter32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "IpAddress", "TimeTicks", "Bits", "NotificationType", "Integer32", "Gauge32", "iso", "MibIdentifier")
TimeStamp, PhysAddress, MacAddress, DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "PhysAddress", "MacAddress", "DisplayString", "RowStatus", "TextualConvention")
VlanList, = mibBuilder.importSymbols("SWITCHING-MIB", "VlanList")
switchingExtension = ModuleIdentity((1, 3, 6, 1, 4, 1, 7244, 2, 101))
if mibBuilder.loadTexts: switchingExtension.setLastUpdated('200803310000Z')
if mibBuilder.loadTexts: switchingExtension.setOrganization('Quanta Computer Inc.')
if mibBuilder.loadTexts: switchingExtension.setContactInfo(' Customer Support Postal: Quanta Computer Inc. No. 4, Wen Ming 1 St., Kuei Shan Hsiang, Tao Yuan Shien, Taiwan, R.O.C. Tel: +886 327 2345 E-Mail: Morpheus.Chang@quantatw.com')
if mibBuilder.loadTexts: switchingExtension.setDescription('QCI switching extension MIB')
agentInfoGroupExtension = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1))
agentInventoryGroupExtension = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1))
agentInventroyHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 100), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventroyHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: agentInventroyHardwareVersion.setDescription("The switch's hardware version. ")
agentInventoryLoaderVersion = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 102), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryLoaderVersion.setStatus('current')
if mibBuilder.loadTexts: agentInventoryLoaderVersion.setDescription("The Switch's loader version ")
agentInventoryBootRomVersion = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 103), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryBootRomVersion.setStatus('current')
if mibBuilder.loadTexts: agentInventoryBootRomVersion.setDescription("The switch's Boot Rom Version. ")
agentInventoryOpCodeVersion = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 104), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryOpCodeVersion.setStatus('current')
if mibBuilder.loadTexts: agentInventoryOpCodeVersion.setDescription("The switch's Operation Code version.")
agentInventoryLabelRevNumber = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 105), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentInventoryLabelRevNumber.setStatus('current')
if mibBuilder.loadTexts: agentInventoryLabelRevNumber.setDescription("The switch's Label Revision Number.")
agentTemperatureFanStatusTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 106), )
if mibBuilder.loadTexts: agentTemperatureFanStatusTable.setStatus('current')
if mibBuilder.loadTexts: agentTemperatureFanStatusTable.setDescription("The switch's temperature and FANs information table")
agentTemperatureFanStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 106, 1), ).setIndexNames((0, "SWITCHING-EXTENSION-MIB", "agentTemperatureFanUnitIndex"))
if mibBuilder.loadTexts: agentTemperatureFanStatusEntry.setStatus('current')
if mibBuilder.loadTexts: agentTemperatureFanStatusEntry.setDescription('entry of temperature and FANs information table')
agentTemperatureFanUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 106, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTemperatureFanUnitIndex.setStatus('current')
if mibBuilder.loadTexts: agentTemperatureFanUnitIndex.setDescription('Unique index of temperature and FANs Information entry')
agentTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 106, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTemperature.setStatus('current')
if mibBuilder.loadTexts: agentTemperature.setDescription('temperature of the unit')
agentTemperature1 = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 106, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTemperature1.setStatus('current')
if mibBuilder.loadTexts: agentTemperature1.setDescription('temperature 1 of the unit')
agentTemperature2 = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 106, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTemperature2.setStatus('current')
if mibBuilder.loadTexts: agentTemperature2.setDescription('temperature 2 of the unit')
agentTemperature3 = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 106, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTemperature3.setStatus('current')
if mibBuilder.loadTexts: agentTemperature3.setDescription('temperature 3 of the unit')
agentTemperature4 = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 106, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTemperature4.setStatus('current')
if mibBuilder.loadTexts: agentTemperature4.setDescription('temperature 4 of the unit')
agentTemperature5 = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 106, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTemperature5.setStatus('current')
if mibBuilder.loadTexts: agentTemperature5.setDescription('temperature 5 of the unit')
agentFAN1 = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 106, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFAN1.setStatus('current')
if mibBuilder.loadTexts: agentFAN1.setDescription('FAN1 status of the unit')
agentFAN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 106, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFAN2.setStatus('current')
if mibBuilder.loadTexts: agentFAN2.setDescription('FAN2 status of the unit')
agentFAN3 = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 106, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFAN3.setStatus('current')
if mibBuilder.loadTexts: agentFAN3.setDescription('FAN3 status of the unit')
agentFAN4 = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 106, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFAN4.setStatus('current')
if mibBuilder.loadTexts: agentFAN4.setDescription('FAN3 status of the unit')
agentFANChipType = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 106, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFANChipType.setStatus('current')
if mibBuilder.loadTexts: agentFANChipType.setDescription('fan chip type of the unit')
agentPowerSupplyStatusTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 107), )
if mibBuilder.loadTexts: agentPowerSupplyStatusTable.setStatus('current')
if mibBuilder.loadTexts: agentPowerSupplyStatusTable.setDescription("The switch's power supplies information table")
agentPowerSupplyStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 107, 1), ).setIndexNames((0, "SWITCHING-EXTENSION-MIB", "agentPowerSupplyUnitIndex"))
if mibBuilder.loadTexts: agentPowerSupplyStatusEntry.setStatus('current')
if mibBuilder.loadTexts: agentPowerSupplyStatusEntry.setDescription('entry of power supplies information table')
agentPowerSupplyUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 107, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPowerSupplyUnitIndex.setStatus('current')
if mibBuilder.loadTexts: agentPowerSupplyUnitIndex.setDescription('Unique index of power supplies Information entry')
agentPowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 107, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("notpresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPowerSupplyStatus.setStatus('current')
if mibBuilder.loadTexts: agentPowerSupplyStatus.setDescription('status of the power supply')
agentPowerSupplyName = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 107, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPowerSupplyName.setStatus('current')
if mibBuilder.loadTexts: agentPowerSupplyName.setDescription('name of the power supply')
agentPowerSupplyModel = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 107, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPowerSupplyModel.setStatus('current')
if mibBuilder.loadTexts: agentPowerSupplyModel.setDescription('model of the power supply')
agentPowerSupplyRevisionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 107, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPowerSupplyRevisionNumber.setStatus('current')
if mibBuilder.loadTexts: agentPowerSupplyRevisionNumber.setDescription('revision number of the power supply')
agentPowerSupplyManufacturerLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 107, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPowerSupplyManufacturerLocation.setStatus('current')
if mibBuilder.loadTexts: agentPowerSupplyManufacturerLocation.setDescription('manufacturer location of the power supply')
agentPowerSupplyManufacturingDate = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 107, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPowerSupplyManufacturingDate.setStatus('current')
if mibBuilder.loadTexts: agentPowerSupplyManufacturingDate.setDescription('manufacturing date of the power supply')
agentPowerSupplySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 107, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPowerSupplySerialNumber.setStatus('current')
if mibBuilder.loadTexts: agentPowerSupplySerialNumber.setDescription('serial number of the power supply')
agentPowerSupplyTemperature1 = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 107, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPowerSupplyTemperature1.setStatus('current')
if mibBuilder.loadTexts: agentPowerSupplyTemperature1.setDescription('temperature 1 of the power supply')
agentPowerSupplyTemperature2 = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 107, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPowerSupplyTemperature2.setStatus('current')
if mibBuilder.loadTexts: agentPowerSupplyTemperature2.setDescription('temperature 2 of the power supply')
agentPowerSupplyFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 107, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPowerSupplyFanSpeed.setStatus('current')
if mibBuilder.loadTexts: agentPowerSupplyFanSpeed.setDescription('fan speed of the power supply')
agentPowerSupplyFanDuty = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 107, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPowerSupplyFanDuty.setStatus('current')
if mibBuilder.loadTexts: agentPowerSupplyFanDuty.setDescription('fan duty of the power supply')
agentPowerConsumption = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 107, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPowerConsumption.setStatus('current')
if mibBuilder.loadTexts: agentPowerConsumption.setDescription('power consumption of the power supply')
agentDOMTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 108), )
if mibBuilder.loadTexts: agentDOMTable.setStatus('current')
if mibBuilder.loadTexts: agentDOMTable.setDescription("The switch's dom information table")
agentDOMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 108, 1), ).setIndexNames((0, "SWITCHING-EXTENSION-MIB", "agentDOMtransceiverIndex"))
if mibBuilder.loadTexts: agentDOMEntry.setStatus('current')
if mibBuilder.loadTexts: agentDOMEntry.setDescription('entry of dom information table')
agentDOMtransceiverIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 108, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDOMtransceiverIndex.setStatus('current')
if mibBuilder.loadTexts: agentDOMtransceiverIndex.setDescription('Unique index of dom Information entry')
agentDOMTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 108, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDOMTemperature.setStatus('current')
if mibBuilder.loadTexts: agentDOMTemperature.setDescription('temperature of the transceiver module')
agentDOMVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 108, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDOMVoltage.setStatus('current')
if mibBuilder.loadTexts: agentDOMVoltage.setDescription('votage of the transceiver module')
agentDOMBias = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 108, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDOMBias.setStatus('current')
if mibBuilder.loadTexts: agentDOMBias.setDescription('Bias current of the transceiver module')
agentDOMTxpower = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 108, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDOMTxpower.setStatus('current')
if mibBuilder.loadTexts: agentDOMTxpower.setDescription('Tx Power of the transceiver module')
agentDOMRxpower = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 108, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDOMRxpower.setStatus('current')
if mibBuilder.loadTexts: agentDOMRxpower.setDescription('Rx Power of the transceiver module')
agentDOMtemperatureHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 108, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDOMtemperatureHighAlarm.setStatus('current')
if mibBuilder.loadTexts: agentDOMtemperatureHighAlarm.setDescription('Temperature high alarm of the transceiver module')
agentDOMtemperatureHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 108, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDOMtemperatureHighWarning.setStatus('current')
if mibBuilder.loadTexts: agentDOMtemperatureHighWarning.setDescription('Temperature high warning of the transceiver module')
agentDOMtemperatureLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 108, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDOMtemperatureLowWarning.setStatus('current')
if mibBuilder.loadTexts: agentDOMtemperatureLowWarning.setDescription('Temperature low warning of the transceiver module')
agentDOMtemperatureLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 108, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDOMtemperatureLowAlarm.setStatus('current')
if mibBuilder.loadTexts: agentDOMtemperatureLowAlarm.setDescription('Temperature low alarm of the transceiver module')
agentDOMvotageHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 108, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDOMvotageHighAlarm.setStatus('current')
if mibBuilder.loadTexts: agentDOMvotageHighAlarm.setDescription('Votage high alarm of the transceiver module')
agentDOMvotageHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 108, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDOMvotageHighWarning.setStatus('current')
if mibBuilder.loadTexts: agentDOMvotageHighWarning.setDescription('Votage high warning of the transceiver module')
agentDOMvotageLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 108, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDOMvotageLowWarning.setStatus('current')
if mibBuilder.loadTexts: agentDOMvotageLowWarning.setDescription('Votage low warning of the transceiver module')
agentDOMvotageLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 108, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDOMvotageLowAlarm.setStatus('current')
if mibBuilder.loadTexts: agentDOMvotageLowAlarm.setDescription('Votage low alarm of the transceiver module')
agentDOMbiasHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 108, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDOMbiasHighAlarm.setStatus('current')
if mibBuilder.loadTexts: agentDOMbiasHighAlarm.setDescription('Bias high alarm of the transceiver module')
agentDOMbiasHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 108, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDOMbiasHighWarning.setStatus('current')
if mibBuilder.loadTexts: agentDOMbiasHighWarning.setDescription('Bias high warning of the transceiver module')
agentDOMbiasLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 108, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDOMbiasLowWarning.setStatus('current')
if mibBuilder.loadTexts: agentDOMbiasLowWarning.setDescription('Bias low warning of the transceiver module')
agentDOMbiasLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 108, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDOMbiasLowAlarm.setStatus('current')
if mibBuilder.loadTexts: agentDOMbiasLowAlarm.setDescription('Bias low alarm of the transceiver module')
agentDOMtxpowerHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 108, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDOMtxpowerHighAlarm.setStatus('current')
if mibBuilder.loadTexts: agentDOMtxpowerHighAlarm.setDescription('Tx Power high alarm of the transceiver module')
agentDOMtxpowerHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 108, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDOMtxpowerHighWarning.setStatus('current')
if mibBuilder.loadTexts: agentDOMtxpowerHighWarning.setDescription('Tx Power high warning of the transceiver module')
agentDOMtxpowerLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 108, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDOMtxpowerLowWarning.setStatus('current')
if mibBuilder.loadTexts: agentDOMtxpowerLowWarning.setDescription('Tx Power low warning of the transceiver module')
agentDOMtxpowerLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 108, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDOMtxpowerLowAlarm.setStatus('current')
if mibBuilder.loadTexts: agentDOMtxpowerLowAlarm.setDescription('Tx Power low alarm of the transceiver module')
agentDOMrxpowerHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 108, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDOMrxpowerHighAlarm.setStatus('current')
if mibBuilder.loadTexts: agentDOMrxpowerHighAlarm.setDescription('Rx Power high alarm of the transceiver module')
agentDOMrxpowerHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 108, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDOMrxpowerHighWarning.setStatus('current')
if mibBuilder.loadTexts: agentDOMrxpowerHighWarning.setDescription('Rx Power high warning of the transceiver module')
agentDOMrxpowerLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 108, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDOMrxpowerLowWarning.setStatus('current')
if mibBuilder.loadTexts: agentDOMrxpowerLowWarning.setDescription('Rx Power low warning of the transceiver module')
agentDOMrxpowerLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 1, 108, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDOMrxpowerLowAlarm.setStatus('current')
if mibBuilder.loadTexts: agentDOMrxpowerLowAlarm.setDescription('Rx Power low alarm of the transceiver module')
agentDOMGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 101, 100))
agentDOMAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 100, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDOMAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentDOMAdminMode.setDescription('Enable or disable the DOM feature. The default mode is disabled.')
agentDOMInterval = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 100, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 1800)).clone(600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDOMInterval.setStatus('current')
if mibBuilder.loadTexts: agentDOMInterval.setDescription('Configure the interval of Digital Optical Monitor.')
agent10GModuleInfoGroupExtension = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 2))
agent10GModuleTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 2, 107), )
if mibBuilder.loadTexts: agent10GModuleTable.setStatus('current')
if mibBuilder.loadTexts: agent10GModuleTable.setDescription("The switch's 10G module information table")
agent10GModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 2, 107, 1), ).setIndexNames((0, "SWITCHING-EXTENSION-MIB", "agent10GModuleUnitIndex"), (0, "SWITCHING-EXTENSION-MIB", "agent10GModuleSlotIndex"), (0, "SWITCHING-EXTENSION-MIB", "agent10GModulePortIndex"))
if mibBuilder.loadTexts: agent10GModuleEntry.setStatus('current')
if mibBuilder.loadTexts: agent10GModuleEntry.setDescription('entry of 10G module information table')
agent10GModuleUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 2, 107, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agent10GModuleUnitIndex.setStatus('current')
if mibBuilder.loadTexts: agent10GModuleUnitIndex.setDescription('The unit number associated with this unit.')
agent10GModuleSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 2, 107, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agent10GModuleSlotIndex.setStatus('current')
if mibBuilder.loadTexts: agent10GModuleSlotIndex.setDescription('Unique slot index in 10G module entry.')
agent10GModulePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 2, 107, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agent10GModulePortIndex.setStatus('current')
if mibBuilder.loadTexts: agent10GModulePortIndex.setDescription('Unique port index of the slot in 10G module entry.')
agent10GModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 2, 107, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agent10GModuleIndex.setStatus('current')
if mibBuilder.loadTexts: agent10GModuleIndex.setDescription('Unique index of 10G module entry.')
agent10GModuleInterfaceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 2, 107, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agent10GModuleInterfaceNumber.setStatus('current')
if mibBuilder.loadTexts: agent10GModuleInterfaceNumber.setDescription('Interface number of the corresponding 10G module index entry.')
agent10GModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 2, 107, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agent10GModuleType.setStatus('current')
if mibBuilder.loadTexts: agent10GModuleType.setDescription("10G module's types. It could be CX4 or SFP Plus.")
agent10GModuleComplianceCode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 2, 107, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agent10GModuleComplianceCode.setStatus('current')
if mibBuilder.loadTexts: agent10GModuleComplianceCode.setDescription("10G module's Compliance codes")
agent10GModuleVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 2, 107, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agent10GModuleVendorName.setStatus('current')
if mibBuilder.loadTexts: agent10GModuleVendorName.setDescription("10G module's vendor name.")
agent10GModulePartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 2, 107, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agent10GModulePartNumber.setStatus('current')
if mibBuilder.loadTexts: agent10GModulePartNumber.setDescription("10G module's part number.")
agent10GModuleSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 2, 107, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agent10GModuleSerialNumber.setStatus('current')
if mibBuilder.loadTexts: agent10GModuleSerialNumber.setDescription("10G module's serial number.")
agent10GModuleRevisionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 2, 107, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agent10GModuleRevisionNumber.setStatus('current')
if mibBuilder.loadTexts: agent10GModuleRevisionNumber.setDescription("10G module's revision number.")
agent10GModuleManufacturingDate = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 2, 107, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agent10GModuleManufacturingDate.setStatus('current')
if mibBuilder.loadTexts: agent10GModuleManufacturingDate.setDescription("10G module's Manufacturing date.")
agentGBICInfoTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 3), )
if mibBuilder.loadTexts: agentGBICInfoTable.setStatus('current')
if mibBuilder.loadTexts: agentGBICInfoTable.setDescription("The switch's GBIC information table")
agentGBICInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 3, 1), ).setIndexNames((0, "SWITCHING-EXTENSION-MIB", "agentGBICInfoIndex"))
if mibBuilder.loadTexts: agentGBICInfoEntry.setStatus('current')
if mibBuilder.loadTexts: agentGBICInfoEntry.setDescription('entry of GBIC information table')
agentGBICInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentGBICInfoIndex.setStatus('current')
if mibBuilder.loadTexts: agentGBICInfoIndex.setDescription('Unique index of GBIC Information entry')
agentGBICInfoInterfaceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentGBICInfoInterfaceNumber.setStatus('current')
if mibBuilder.loadTexts: agentGBICInfoInterfaceNumber.setDescription('interface number of the corresponding GBIC index entry')
agentGBICInfoComplianceCode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentGBICInfoComplianceCode.setStatus('current')
if mibBuilder.loadTexts: agentGBICInfoComplianceCode.setDescription('Gigabit Ethernet Compliance codes')
agentGBICInfoVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentGBICInfoVendorName.setStatus('current')
if mibBuilder.loadTexts: agentGBICInfoVendorName.setDescription('GBIC vendor name')
agentGBICInfoPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentGBICInfoPartNumber.setStatus('current')
if mibBuilder.loadTexts: agentGBICInfoPartNumber.setDescription('GBIC part number')
agentGBICInfoSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentGBICInfoSerialNumber.setStatus('current')
if mibBuilder.loadTexts: agentGBICInfoSerialNumber.setDescription('GBIC serial number')
agentGBICInfoRevisionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentGBICInfoRevisionNumber.setStatus('current')
if mibBuilder.loadTexts: agentGBICInfoRevisionNumber.setDescription('GBIC revision number')
agentGBICInfoManufacturingDate = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 1, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentGBICInfoManufacturingDate.setStatus('current')
if mibBuilder.loadTexts: agentGBICInfoManufacturingDate.setDescription('GBIC manufacturing date')
agentConfigGroupExtension = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2))
agentCLIConfigGroupExtension = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 1))
agentSerialGroupExtension = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 1, 5))
agentSerialPasswdCnt = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 1, 5, 100), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSerialPasswdCnt.setStatus('current')
if mibBuilder.loadTexts: agentSerialPasswdCnt.setDescription("The switch's serial port password count threshold. ")
agentSerialPasswdCntSetToDefault = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 1, 5, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSerialPasswdCntSetToDefault.setStatus('current')
if mibBuilder.loadTexts: agentSerialPasswdCntSetToDefault.setDescription("Set the switch's serial port password count threshold to the default value. ")
agentSerialSilentTime = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 1, 5, 102), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSerialSilentTime.setStatus('current')
if mibBuilder.loadTexts: agentSerialSilentTime.setDescription('If a user fail to login into the console for agentSerialPasswdCnt times, the user cannot login again for a period of agentSerialSilentTime seconds ')
agentSerialSilentTimeSetToDefault = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 1, 5, 103), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSerialSilentTimeSetToDefault.setStatus('current')
if mibBuilder.loadTexts: agentSerialSilentTimeSetToDefault.setDescription("Set the switch's serial port silent time to the default value. ")
agentVtyGroupExtension = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 1, 6))
agentVtyTelnetServerAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 1, 6, 103), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentVtyTelnetServerAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentVtyTelnetServerAdminMode.setDescription("The switch's telnet server admin mode.")
agentVtyPasswdCnt = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 1, 6, 104), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentVtyPasswdCnt.setStatus('current')
if mibBuilder.loadTexts: agentVtyPasswdCnt.setDescription("The switch's password count threshold for telnet and SSH connections. System will reject telnet or SSH connections if users fail the password authentication for agentVtyPasswdCnt times ")
agentVtyPasswdCntSetToDefault = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 1, 6, 105), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentVtyPasswdCntSetToDefault.setStatus('current')
if mibBuilder.loadTexts: agentVtyPasswdCntSetToDefault.setDescription("Set the switch's password count threshold to the default value for telnet and SSH connections. ")
agentVtyTerminalLength = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 1, 6, 106), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 100)).clone(24)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentVtyTerminalLength.setStatus('current')
if mibBuilder.loadTexts: agentVtyTerminalLength.setDescription("The switch's terminal length for telnet connections.")
agentVtyTerminalLengthSetToDefault = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 1, 6, 107), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentVtyTerminalLengthSetToDefault.setStatus('current')
if mibBuilder.loadTexts: agentVtyTerminalLengthSetToDefault.setDescription("Set the switch's terminal length to the default value for telnet connections.")
agentNetworkConfigGroupExtension = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 3))
agentNetworkHttpPort = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 3, 100), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkHttpPort.setStatus('current')
if mibBuilder.loadTexts: agentNetworkHttpPort.setDescription("The switch's HTTP port number. ")
agentNetworkDhcpClientIfClientIdFormat = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 3, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hexformat", 1), ("textformat", 2))).clone('hexformat')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkDhcpClientIfClientIdFormat.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDhcpClientIfClientIdFormat.setDescription("Set the switch's client ID agentNetworkDhcpClientIfClientId format. It could be HEX(00:00:00:00:00:00) or TEXT( which length is less or equal to 32) ")
agentNetworkDhcpClientIfClientId = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 3, 102), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkDhcpClientIfClientId.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDhcpClientIfClientId.setDescription("Set the switch's Client ID. The client ID is used in asking for an IP address from the DHCP server. It could be HEX(00:00:00:00:00:00) or TEXT( which length is less or equal to 32) ")
agentNetworkDhcpSetToInventoryClientIfClientId = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 3, 103), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkDhcpSetToInventoryClientIfClientId.setStatus('current')
if mibBuilder.loadTexts: agentNetworkDhcpSetToInventoryClientIfClientId.setDescription("If enable, set switch's Client ID to the inventory's default value ")
agentNetworkDhcpRestart = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 3, 104), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("noRestart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentNetworkDhcpRestart.setStatus('obsolete')
if mibBuilder.loadTexts: agentNetworkDhcpRestart.setDescription("If restart, release current IP address and Re-get the switch's IP address from the DHCP/BOOTP server ")
agentSwitchConfigGroupExtension = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8))
agentIPFilterConfigGroupExtension = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 10))
agentIPFilterConfigAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 10, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIPFilterConfigAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentIPFilterConfigAdminMode.setDescription('enable/disable IP filter function of the switch. ')
agentIpFilterConfigCreate = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 10, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpFilterConfigCreate.setStatus('current')
if mibBuilder.loadTexts: agentIpFilterConfigCreate.setDescription('Creates a new IpFilter entry with name and ip mask or ipv6/prefix length. Max length of ip filter name is 64. Ipv4 Example: IpFilterName 1.1.1.1 255.255.255.0 Ipv6 Example: IpFilterName2 1111::1/64 ')
agentIpFilterConfigDelete = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 10, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpFilterConfigDelete.setStatus('current')
if mibBuilder.loadTexts: agentIpFilterConfigDelete.setDescription('Delete a IpFilter entry by name.')
agentIpFilterConfigTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 10, 30), )
if mibBuilder.loadTexts: agentIpFilterConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentIpFilterConfigTable.setDescription("The switch's IP filter table")
agentIpFilterConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 10, 30, 1), ).setIndexNames((0, "SWITCHING-EXTENSION-MIB", "agentIpFilterConfigIndex"))
if mibBuilder.loadTexts: agentIpFilterConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentIpFilterConfigEntry.setDescription('entry of IP filter table')
agentIpFilterConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 10, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpFilterConfigIndex.setStatus('current')
if mibBuilder.loadTexts: agentIpFilterConfigIndex.setDescription('Unique index of IP Filter entry')
agentIpFilterConfigIP = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 10, 30, 1, 2), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpFilterConfigIP.setStatus('current')
if mibBuilder.loadTexts: agentIpFilterConfigIP.setDescription('set the IPv4/IPv6 address which are allowed to connect to DUT IP should be changed with mask.')
agentIpFilterConfigMask = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 10, 30, 1, 3), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpFilterConfigMask.setStatus('current')
if mibBuilder.loadTexts: agentIpFilterConfigMask.setDescription('set the IPv4/IPv6 mask for defining an IPv4/IPv6 range. IP should be changed with mask.')
agentIpFilterConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 10, 30, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpFilterConfigName.setStatus('current')
if mibBuilder.loadTexts: agentIpFilterConfigName.setDescription('The name of IpFilter entry.')
agentTransferConfigGroupExtension = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 9))
agentTransferCopyGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 9, 3))
agentTransferCopyRunningConfigToSwitchDestFilename = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 9, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferCopyRunningConfigToSwitchDestFilename.setStatus('current')
if mibBuilder.loadTexts: agentTransferCopyRunningConfigToSwitchDestFilename.setDescription('The filename used to store current running config in the switch. It can be up to 30 alphanumeric characters.')
agentTransferCopyRunningConfigStart = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 9, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferCopyRunningConfigStart.setStatus('current')
if mibBuilder.loadTexts: agentTransferCopyRunningConfigStart.setDescription('Copy running configure to switch, the filename is specified in agentTransferCopyRunningConfigToSwitchDestFilename.')
agentTransferCopyRunningConfigStatus = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 9, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 4, 15, 16))).clone(namedValues=NamedValues(("success", 0), ("failure", 1), ("wrongFileType", 4), ("noPartitionTableEntry", 15), ("runByOtherUsers", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTransferCopyRunningConfigStatus.setStatus('current')
if mibBuilder.loadTexts: agentTransferCopyRunningConfigStatus.setDescription('Indicates the current status of a copy running configure operation.')
agentTransferDeleteGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 9, 4))
agentTransferDeleteSwitchFilename = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 9, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDeleteSwitchFilename.setStatus('current')
if mibBuilder.loadTexts: agentTransferDeleteSwitchFilename.setDescription('The filename of the file to be deleted from the switch. It can be up to 32 alphanumeric characters.')
agentTransferDeleteStart = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 9, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentTransferDeleteStart.setStatus('current')
if mibBuilder.loadTexts: agentTransferDeleteStart.setDescription('start deleting file; the filename is specified in agentTransferDeleteSwitchFilename.')
agentTransferDeleteStatus = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 9, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("success", 0), ("failure", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentTransferDeleteStatus.setStatus('current')
if mibBuilder.loadTexts: agentTransferDeleteStatus.setDescription('Indicates the current status of the deleting operation.')
agentStormContorlConfigGroupExtension = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 18))
agentSwitchBroadcastControlMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchBroadcastControlMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchBroadcastControlMode.setDescription('The switch config broadcast allows you to enable or disable broadcast storm recovery mode. When you specify Enable for Broadcast Storm Recovery and the broadcast traffic on any Ethernet port exceeds 20 percent of the link speed, the switch blocks (discards) the broadcast traffic until the broadcast traffic returns to 10 percent or less. Upper limit for 10M link is 20% and lower limit is 10%. For 100M link Upper limit is 5% and lower limit is 2%')
agentSwitchMulticastControlMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 18, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchMulticastControlMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMulticastControlMode.setDescription('The switch config multicast allows you to enable or disable multicast storm recovery mode. When you specify Enable for Multicast Storm Recovery and the multicast traffic on any Ethernet port exceeds 20 percent of the link speed, the switch blocks (discards) the multicast traffic until the multicast traffic returns to 10 percent or less. Upper limit for 10M link is 20% and lower limit is 10%. For 100M link Upper limit is 5% and lower limit is 2%')
agentSwitchUnicastControlMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 18, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchUnicastControlMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchUnicastControlMode.setDescription('The switch config unicast allows you to enable or disable unicast storm recovery mode. When you specify Enable for unicast Storm Recovery and the unicast traffic on any Ethernet port exceeds 20 percent of the link speed, the switch blocks (discards) the unicast traffic until the unicast traffic returns to 10 percent or less. Upper limit for 10M link is 20% and lower limit is 10%. For 100M link Upper limit is 5% and lower limit is 2%')
agentSwitchDot3FlowControlMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 18, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchDot3FlowControlMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchDot3FlowControlMode.setDescription('Config switchconfig flowcontrol allows you to enable or disable 802.3x flow control for the switch. This value applies to only full-duplex mode ports. ')
agentSwitchStormControlBroadcastTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 18, 10), )
if mibBuilder.loadTexts: agentSwitchStormControlBroadcastTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchStormControlBroadcastTable.setDescription("The switch's storm control table")
agentSwitchStormControlBroadcastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 18, 10, 1), ).setIndexNames((0, "SWITCHING-EXTENSION-MIB", "agentSwitchBcastStormIfIndex"))
if mibBuilder.loadTexts: agentSwitchStormControlBroadcastEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchStormControlBroadcastEntry.setDescription('storm control for a specific port.')
agentSwitchBcastStormIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 18, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchBcastStormIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentSwitchBcastStormIfIndex.setDescription('Unique index of switch broadcast storm entry')
agentSwitchBcastStormExtensionPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 18, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 14880000)).clone(4160)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchBcastStormExtensionPktRate.setStatus('current')
if mibBuilder.loadTexts: agentSwitchBcastStormExtensionPktRate.setDescription('The Pkt rate, range is from 1 to 14880000.')
agentSwitchBcastStormExtensionAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 18, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchBcastStormExtensionAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchBcastStormExtensionAdminMode.setDescription('enable/disable broadcast storm control')
agentSwitchStormControlMulticastTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 18, 20), )
if mibBuilder.loadTexts: agentSwitchStormControlMulticastTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchStormControlMulticastTable.setDescription("The switch's storm control table")
agentSwitchStormControlMulticastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 18, 20, 1), ).setIndexNames((0, "SWITCHING-EXTENSION-MIB", "agentSwitchMcastStormIfIndex"))
if mibBuilder.loadTexts: agentSwitchStormControlMulticastEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchStormControlMulticastEntry.setDescription('storm control for a specific port.')
agentSwitchMcastStormIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 18, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMcastStormIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMcastStormIfIndex.setDescription('Unique index of switch Multicast storm entry')
agentSwitchMcastStormExtensionPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 18, 20, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 14880000)).clone(4160)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchMcastStormExtensionPktRate.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMcastStormExtensionPktRate.setDescription('The Pkt rate, range is from 1 to 14880000.')
agentSwitchMcastStormExtensionAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 18, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchMcastStormExtensionAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchMcastStormExtensionAdminMode.setDescription('enable/disable Multicast storm control')
agentSwitchStormControlUnicastTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 18, 30), )
if mibBuilder.loadTexts: agentSwitchStormControlUnicastTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchStormControlUnicastTable.setDescription("The switch's storm control table")
agentSwitchStormControlUnicastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 18, 30, 1), ).setIndexNames((0, "SWITCHING-EXTENSION-MIB", "agentSwitchUcastStormIfIndex"))
if mibBuilder.loadTexts: agentSwitchStormControlUnicastEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchStormControlUnicastEntry.setDescription('storm control for a specific port.')
agentSwitchUcastStormIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 18, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchUcastStormIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentSwitchUcastStormIfIndex.setDescription('Unique index of switch Unicast storm entry')
agentSwitchUcastStormExtensionPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 18, 30, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 14880000)).clone(4160)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchUcastStormExtensionPktRate.setStatus('current')
if mibBuilder.loadTexts: agentSwitchUcastStormExtensionPktRate.setDescription('The Pkt rate, range is from 1 to 14880000.')
agentSwitchUcastStormExtensionAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 18, 30, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchUcastStormExtensionAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchUcastStormExtensionAdminMode.setDescription('enable/disable ingress rate limit')
agentSwitchFlowControlTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 18, 40), )
if mibBuilder.loadTexts: agentSwitchFlowControlTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchFlowControlTable.setDescription("The switch's storm control table")
agentSwitchFlowControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 18, 40, 1), ).setIndexNames((0, "SWITCHING-EXTENSION-MIB", "agentSwitchFlowControlIfIndex"))
if mibBuilder.loadTexts: agentSwitchFlowControlEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchFlowControlEntry.setDescription('storm control for a specific port.')
agentSwitchFlowControlIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 18, 40, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchFlowControlIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentSwitchFlowControlIfIndex.setDescription('Unique index of switch FlowControl storm entry')
agentSwitchFlowControlAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 18, 40, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchFlowControlAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchFlowControlAdminMode.setDescription('enable/disable FlowControl storm control')
agentSwitchStormControlActionTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 18, 50), )
if mibBuilder.loadTexts: agentSwitchStormControlActionTable.setStatus('current')
if mibBuilder.loadTexts: agentSwitchStormControlActionTable.setDescription("The switch's storm control table")
agentSwitchStormControlActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 18, 50, 1), ).setIndexNames((0, "SWITCHING-EXTENSION-MIB", "agentSwitchStormControlActionIfIndex"))
if mibBuilder.loadTexts: agentSwitchStormControlActionEntry.setStatus('current')
if mibBuilder.loadTexts: agentSwitchStormControlActionEntry.setDescription('storm control for a specific port.')
agentSwitchStormControlActionIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 18, 50, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchStormControlActionIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentSwitchStormControlActionIfIndex.setDescription('Unique index of switch StormControlAction storm entry')
agentSwitchStormControlActionShutdownMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 18, 50, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchStormControlActionShutdownMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchStormControlActionShutdownMode.setDescription('Shutdown this interface if a storm occurs.')
agentSwitchStormControlActionTrapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 18, 50, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchStormControlActionTrapMode.setStatus('current')
if mibBuilder.loadTexts: agentSwitchStormControlActionTrapMode.setDescription('Send SNMP trap if a storm occurs.')
agentErrRecoveryConfigGroupExtension = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 28))
agentErrRecoveryInterval = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 28, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 86400)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentErrRecoveryInterval.setStatus('current')
if mibBuilder.loadTexts: agentErrRecoveryInterval.setDescription('Configure Recovery Timer Interval.')
agentErrRecoveryStormCtrlCauseMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 28, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentErrRecoveryStormCtrlCauseMode.setStatus('current')
if mibBuilder.loadTexts: agentErrRecoveryStormCtrlCauseMode.setDescription('Enable/Disable timer to recover from storm-control error disable state.')
agentErrRecoveryUdldCauseMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 28, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentErrRecoveryUdldCauseMode.setStatus('current')
if mibBuilder.loadTexts: agentErrRecoveryUdldCauseMode.setDescription('Enable/Disable timer to recover from udld error disable state.')
agentErrRecoveryPortSecurityCauseMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 28, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentErrRecoveryPortSecurityCauseMode.setStatus('current')
if mibBuilder.loadTexts: agentErrRecoveryPortSecurityCauseMode.setDescription('Enable/Disable timer to recover from port-security error disable state.')
agentErrRecoveryBpduCauseMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 28, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentErrRecoveryBpduCauseMode.setStatus('current')
if mibBuilder.loadTexts: agentErrRecoveryBpduCauseMode.setDescription('Enable/Disable timer to recover from bpdu error disable state.')
agentErrRecoveryLinkFlapCauseMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 28, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentErrRecoveryLinkFlapCauseMode.setStatus('current')
if mibBuilder.loadTexts: agentErrRecoveryLinkFlapCauseMode.setDescription('Enable/Disable timer to recover from link flap error disable state.')
agentErrRecoveryMacFlapCauseMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 28, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentErrRecoveryMacFlapCauseMode.setStatus('current')
if mibBuilder.loadTexts: agentErrRecoveryMacFlapCauseMode.setDescription('Enable/Disable timer to recover from MAC flap error disable state.')
agentErrDetectLinkFlapCauseMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 28, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentErrDetectLinkFlapCauseMode.setStatus('current')
if mibBuilder.loadTexts: agentErrDetectLinkFlapCauseMode.setDescription('Enable/Disable error disable detection for link flapping state.')
agentErrDetectMacFlapCauseMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 28, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentErrDetectMacFlapCauseMode.setStatus('current')
if mibBuilder.loadTexts: agentErrDetectMacFlapCauseMode.setDescription('Enable/Disable error disable detection for MAC flapping state.')
agentPortConfigExtensionTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 13), )
if mibBuilder.loadTexts: agentPortConfigExtensionTable.setStatus('current')
if mibBuilder.loadTexts: agentPortConfigExtensionTable.setDescription("The switch's port capability table")
agentPortConfigExtensionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 13, 1), ).setIndexNames((0, "SWITCHING-EXTENSION-MIB", "agentPortConfigExtensionIfIndex"))
if mibBuilder.loadTexts: agentPortConfigExtensionEntry.setStatus('current')
if mibBuilder.loadTexts: agentPortConfigExtensionEntry.setDescription('port capability setting for a specific port.')
agentPortConfigExtensionIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortConfigExtensionIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentPortConfigExtensionIfIndex.setDescription('port index used to uniquelly identify an entry of the port capability Table')
agentPortConfigExtensionAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortConfigExtensionAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentPortConfigExtensionAdminMode.setDescription("The switch's Port Admin Mode")
agentPortConfigExtensionLinkTrapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 13, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortConfigExtensionLinkTrapMode.setStatus('current')
if mibBuilder.loadTexts: agentPortConfigExtensionLinkTrapMode.setDescription('If enabled, link up and link down traps will be sent for this port.')
agentPortConfigExtensionClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 13, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortConfigExtensionClearStats.setStatus('current')
if mibBuilder.loadTexts: agentPortConfigExtensionClearStats.setDescription('clear stats for this port only')
agentPortConfigExtensionMaxFrameSizeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 13, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1518, 12288))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortConfigExtensionMaxFrameSizeLimit.setStatus('current')
if mibBuilder.loadTexts: agentPortConfigExtensionMaxFrameSizeLimit.setDescription('This object identifies the largest value that can be configured for agentPortConfigExtensionMaxFrameSize')
agentPortConfigExtensionMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 13, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1518, 12288))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortConfigExtensionMaxFrameSize.setStatus('current')
if mibBuilder.loadTexts: agentPortConfigExtensionMaxFrameSize.setDescription('This object identifies the currently configured maximum frame size value for this port. The maximmum value that this object can be set to is the value of agentPortConfigExtensionMaxFrameSizeLimit. For Ethernet ports which support 802.1Q vlan tagging, the minimum value that this object can be set to is 1522')
agentSwitchSnoopingGroupExtension = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 6))
agentIgmpSnoopL2MulticastStaticTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 6, 112), )
if mibBuilder.loadTexts: agentIgmpSnoopL2MulticastStaticTable.setStatus('current')
if mibBuilder.loadTexts: agentIgmpSnoopL2MulticastStaticTable.setDescription('Table for IGMP snooping static multicast addresses.')
agentIgmpSnoopL2MulticastStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 6, 112, 1), ).setIndexNames((0, "SWITCHING-EXTENSION-MIB", "agentIgmpSnoopL2MulticastStaticIndex"))
if mibBuilder.loadTexts: agentIgmpSnoopL2MulticastStaticEntry.setStatus('current')
if mibBuilder.loadTexts: agentIgmpSnoopL2MulticastStaticEntry.setDescription('Entry for static multicast addresses.')
agentIgmpSnoopL2MulticastStaticIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 6, 112, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIgmpSnoopL2MulticastStaticIndex.setStatus('current')
if mibBuilder.loadTexts: agentIgmpSnoopL2MulticastStaticIndex.setDescription('Unique index of agentIgmpSnoopL2MulticastStaticEntry.')
agentIgmpSnoopL2MulticastStaticVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 6, 112, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIgmpSnoopL2MulticastStaticVlanId.setStatus('current')
if mibBuilder.loadTexts: agentIgmpSnoopL2MulticastStaticVlanId.setDescription('This is defined as dot1qVlanIndex in the Q-BRIDGE-MIB.')
agentIgmpSnoopL2MulticastStaticMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 6, 112, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIgmpSnoopL2MulticastStaticMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentIgmpSnoopL2MulticastStaticMacAddress.setDescription('MAC address of multicast group.')
agentIgmpSnoopL2MulticastStaticMemberPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 6, 112, 1, 4), AgentPortMask().clone(hexValue="000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIgmpSnoopL2MulticastStaticMemberPortMask.setStatus('current')
if mibBuilder.loadTexts: agentIgmpSnoopL2MulticastStaticMemberPortMask.setDescription('IGMP Snooping L2 Multicast Static Port Mask.')
agentIgmpSnoopL2MulticastStaticActivePortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 6, 112, 1, 5), AgentPortMask().clone(hexValue="000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIgmpSnoopL2MulticastStaticActivePortMask.setStatus('current')
if mibBuilder.loadTexts: agentIgmpSnoopL2MulticastStaticActivePortMask.setDescription('IGMP Snooping L2 Multicast Static Active Port Mask.')
agentIgmpSnoopL2MulticastStaticMemberPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 6, 112, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentIgmpSnoopL2MulticastStaticMemberPorts.setStatus('current')
if mibBuilder.loadTexts: agentIgmpSnoopL2MulticastStaticMemberPorts.setDescription('The set of ports which are members. (2,3) means port 2 and port 3 are Multicast Static Ports.')
agentIgmpSnoopL2MulticastStaticActivePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 6, 112, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIgmpSnoopL2MulticastStaticActivePorts.setStatus('current')
if mibBuilder.loadTexts: agentIgmpSnoopL2MulticastStaticActivePorts.setDescription('The set of ports which are active. (2,3) means port 2 and port 3 are active.')
agentMldSnoopL2MulticastStaticTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 6, 113), )
if mibBuilder.loadTexts: agentMldSnoopL2MulticastStaticTable.setStatus('current')
if mibBuilder.loadTexts: agentMldSnoopL2MulticastStaticTable.setDescription('Table for MLD snooping static multicast addresses.')
agentMldSnoopL2MulticastStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 6, 113, 1), ).setIndexNames((0, "SWITCHING-EXTENSION-MIB", "agentMldSnoopL2MulticastStaticIndex"))
if mibBuilder.loadTexts: agentMldSnoopL2MulticastStaticEntry.setStatus('current')
if mibBuilder.loadTexts: agentMldSnoopL2MulticastStaticEntry.setDescription('Entry for static multicast addresses.')
agentMldSnoopL2MulticastStaticIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 6, 113, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMldSnoopL2MulticastStaticIndex.setStatus('current')
if mibBuilder.loadTexts: agentMldSnoopL2MulticastStaticIndex.setDescription('Unique index of agentMldSnoopL2MulticastStaticEntry.')
agentMldSnoopL2MulticastStaticVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 6, 113, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMldSnoopL2MulticastStaticVlanId.setStatus('current')
if mibBuilder.loadTexts: agentMldSnoopL2MulticastStaticVlanId.setDescription('This is defined as dot1qVlanIndex in the Q-BRIDGE-MIB.')
agentMldSnoopL2MulticastStaticMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 6, 113, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMldSnoopL2MulticastStaticMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentMldSnoopL2MulticastStaticMacAddress.setDescription('MAC address of multicast group.')
agentMldSnoopL2MulticastStaticMemberPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 6, 113, 1, 4), AgentPortMask().clone(hexValue="000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMldSnoopL2MulticastStaticMemberPortMask.setStatus('current')
if mibBuilder.loadTexts: agentMldSnoopL2MulticastStaticMemberPortMask.setDescription('MLD Snooping L2 Multicast Static Port Mask.')
agentMldSnoopL2MulticastStaticActivePortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 6, 113, 1, 5), AgentPortMask().clone(hexValue="000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMldSnoopL2MulticastStaticActivePortMask.setStatus('current')
if mibBuilder.loadTexts: agentMldSnoopL2MulticastStaticActivePortMask.setDescription('MLD Snooping L2 Multicast Static Active Port Mask.')
agentMldSnoopL2MulticastStaticMemberPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 6, 113, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentMldSnoopL2MulticastStaticMemberPorts.setStatus('current')
if mibBuilder.loadTexts: agentMldSnoopL2MulticastStaticMemberPorts.setDescription('The set of ports which are members. (2,3) means port 2 and port 3 are Multicast Static Ports.')
agentMldSnoopL2MulticastStaticActivePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 2, 8, 6, 113, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMldSnoopL2MulticastStaticActivePorts.setStatus('current')
if mibBuilder.loadTexts: agentMldSnoopL2MulticastStaticActivePorts.setDescription('The set of ports which are active. (2,3) means port 2 and port 3 are active.')
agentSwitchCurrBootFilesGroupExtension = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 101, 103))
agentSwitchCurrBootRomFileName = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 103, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchCurrBootRomFileName.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCurrBootRomFileName.setDescription('Current BootRom Filename. This is shown on vxWorks plateforms. ')
agentSwitchCurrBootLoaderFileName = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 103, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCurrBootLoaderFileName.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCurrBootLoaderFileName.setDescription('Current Boot Loader Filename. This is shown on vxWorks plateforms. ')
agentSwitchCurrBootConfigFileName = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 103, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchCurrBootConfigFileName.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCurrBootConfigFileName.setDescription('Current configuration Filename ')
agentSwitchCurrBootOpCodeFileName = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 103, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSwitchCurrBootOpCodeFileName.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCurrBootOpCodeFileName.setDescription('Current Operation Code Filename ')
agentSwitchCurrUBootFileName = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 103, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCurrUBootFileName.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCurrUBootFileName.setDescription('Current UBoot Filename. This is shown on linux plateforms. ')
agentSwitchCurrKernelFileName = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 103, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCurrKernelFileName.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCurrKernelFileName.setDescription('Current Kernel Filename. This is shown on linux plateforms. ')
agentSwitchCurrVMTracerFileName = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 103, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCurrVMTracerFileName.setStatus('current')
if mibBuilder.loadTexts: agentSwitchCurrVMTracerFileName.setDescription('Current VMTracer image Filename. This is shown on vmtracer supported L3 linux plateforms. ')
agentLinkStateConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 101, 15))
agentLinkStateConfigAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLinkStateConfigAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentLinkStateConfigAdminMode.setDescription('The administration mode of the Link state.')
agentLinkStateGroupTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 101, 15, 2), )
if mibBuilder.loadTexts: agentLinkStateGroupTable.setStatus('current')
if mibBuilder.loadTexts: agentLinkStateGroupTable.setDescription('This table includes entries for the status of all currently configured Link state group.')
agentLinkStateGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 101, 15, 2, 1), ).setIndexNames((0, "SWITCHING-EXTENSION-MIB", "agentLinkStateGroupId"))
if mibBuilder.loadTexts: agentLinkStateGroupEntry.setStatus('current')
if mibBuilder.loadTexts: agentLinkStateGroupEntry.setDescription('This table includes entries for the status of all currently configured Link state group.')
agentLinkStateGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 15, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentLinkStateGroupId.setStatus('current')
if mibBuilder.loadTexts: agentLinkStateGroupId.setDescription('The id of the Link State group.')
agentLinkStateGroupMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 15, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLinkStateGroupMode.setStatus('current')
if mibBuilder.loadTexts: agentLinkStateGroupMode.setDescription('The mode of this Link State group.')
agentLinkStateGroupUpstreamPort = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 15, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLinkStateGroupUpstreamPort.setStatus('current')
if mibBuilder.loadTexts: agentLinkStateGroupUpstreamPort.setDescription('The up stream port of the Link State group.')
agentLinkStateGroupDownstreamPort = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 15, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentLinkStateGroupDownstreamPort.setStatus('current')
if mibBuilder.loadTexts: agentLinkStateGroupDownstreamPort.setDescription('The down stream port of the Link State group.')
agentLinkStateGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 15, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentLinkStateGroupStatus.setStatus('current')
if mibBuilder.loadTexts: agentLinkStateGroupStatus.setDescription('The status of Link State group. active(1) - This group setting is active. createAndGo(4) - Set to this value to create a new group. destroy(6) - Set to this value to remove this group.')
agentPortBackupConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 101, 16))
agentPortBackupConfigAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortBackupConfigAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentPortBackupConfigAdminMode.setDescription('The administration mode of the Port-backup.')
agentPortBackupGroupTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 101, 16, 2), )
if mibBuilder.loadTexts: agentPortBackupGroupTable.setStatus('current')
if mibBuilder.loadTexts: agentPortBackupGroupTable.setDescription('This table includes entries for the status of all currently configured Port-backup group.')
agentPortBackupGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 101, 16, 2, 1), ).setIndexNames((0, "SWITCHING-EXTENSION-MIB", "agentPortBackupGroupId"))
if mibBuilder.loadTexts: agentPortBackupGroupEntry.setStatus('current')
if mibBuilder.loadTexts: agentPortBackupGroupEntry.setDescription('This table includes entries for the status of all currently configured Port-backup group.')
agentPortBackupGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 16, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentPortBackupGroupId.setStatus('current')
if mibBuilder.loadTexts: agentPortBackupGroupId.setDescription('The id of the Port-backup group.')
agentPortBackupGroupMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 16, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortBackupGroupMode.setStatus('current')
if mibBuilder.loadTexts: agentPortBackupGroupMode.setDescription('The mode of this Port-backup group.')
agentPortBackupGroupActivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 16, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortBackupGroupActivePort.setStatus('current')
if mibBuilder.loadTexts: agentPortBackupGroupActivePort.setDescription('The active port of the Port-backup group.')
agentPortBackupGroupBackupPort = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 16, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortBackupGroupBackupPort.setStatus('current')
if mibBuilder.loadTexts: agentPortBackupGroupBackupPort.setDescription('The backup port of the Port-backup group.')
agentMacMoveUpdatetMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 16, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentMacMoveUpdatetMode.setStatus('current')
if mibBuilder.loadTexts: agentMacMoveUpdatetMode.setDescription('The mode of MAC Address-Table Move Update.')
agentPortBackupGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 16, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentPortBackupGroupStatus.setStatus('current')
if mibBuilder.loadTexts: agentPortBackupGroupStatus.setDescription('The status of Port-backup group. active(1) - This group setting is active. createAndGo(4) - Set to this value to create a new group. destroy(6) - Set to this value to remove this group.')
agentPortBackupGroupFailBackTime = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 16, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentPortBackupGroupFailBackTime.setStatus('current')
if mibBuilder.loadTexts: agentPortBackupGroupFailBackTime.setDescription('The value of the Port-backup fail back time.')
agentCDPConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 101, 110))
agentCDPConfigAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 110, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCDPConfigAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentCDPConfigAdminMode.setDescription('enable/disable CDP (Cisco Discovery Protocol)')
agentCDPConfigTimeToLive = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 110, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCDPConfigTimeToLive.setStatus('current')
if mibBuilder.loadTexts: agentCDPConfigTimeToLive.setDescription('The time that CDP information will be kept in other CDP-aware switch. The range is 10 to 255.')
agentCDPConfigTransmitInterval = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 110, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCDPConfigTransmitInterval.setStatus('current')
if mibBuilder.loadTexts: agentCDPConfigTransmitInterval.setDescription('The time interval that the CDP information is sent. The range is 5 to 254.')
agentCDPConfigNumInPkts = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 110, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCDPConfigNumInPkts.setStatus('current')
if mibBuilder.loadTexts: agentCDPConfigNumInPkts.setDescription('The number of CDP packets received.')
agentCDPConfigNumOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 110, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCDPConfigNumOutPkts.setStatus('current')
if mibBuilder.loadTexts: agentCDPConfigNumOutPkts.setDescription('The number of CDP packets sent out.')
agentCDPConfigNumErrPkts = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 110, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCDPConfigNumErrPkts.setStatus('current')
if mibBuilder.loadTexts: agentCDPConfigNumErrPkts.setDescription('The number of error CDP packets received/sent.')
agentCDPConfigResetNumPkts = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 110, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCDPConfigResetNumPkts.setStatus('current')
if mibBuilder.loadTexts: agentCDPConfigResetNumPkts.setDescription('reset CDP in/out/err packet counters')
agentCDPConfigResetDeviceInformation = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 110, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCDPConfigResetDeviceInformation.setStatus('current')
if mibBuilder.loadTexts: agentCDPConfigResetDeviceInformation.setDescription('clear CDP neighbor information')
agentCDPConfigPortModeTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 101, 110, 10), )
if mibBuilder.loadTexts: agentCDPConfigPortModeTable.setStatus('current')
if mibBuilder.loadTexts: agentCDPConfigPortModeTable.setDescription('The switch CDP administration table')
agentCDPConfigPortModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 101, 110, 10, 1), ).setIndexNames((0, "SWITCHING-EXTENSION-MIB", "agentCDPConfigPortModeIfIndex"))
if mibBuilder.loadTexts: agentCDPConfigPortModeEntry.setStatus('current')
if mibBuilder.loadTexts: agentCDPConfigPortModeEntry.setDescription('CDP administration setting for a specific port.')
agentCDPConfigPortModeIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 110, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCDPConfigPortModeIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentCDPConfigPortModeIfIndex.setDescription('port index used to uniquelly identify an entry of the CDP administration Table')
agentCDPConfigPortModeAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 110, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentCDPConfigPortModeAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentCDPConfigPortModeAdminMode.setDescription('CDP administration for every individual port. ')
agentCDPConfigNeighborInfoTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 101, 110, 20), )
if mibBuilder.loadTexts: agentCDPConfigNeighborInfoTable.setStatus('current')
if mibBuilder.loadTexts: agentCDPConfigNeighborInfoTable.setDescription('The switch CDP neighbor information table')
agentCDPConfigNeighborInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 101, 110, 20, 1), ).setIndexNames((0, "SWITCHING-EXTENSION-MIB", "agentCDPConfigNeighborInfoIndex"))
if mibBuilder.loadTexts: agentCDPConfigNeighborInfoEntry.setStatus('current')
if mibBuilder.loadTexts: agentCDPConfigNeighborInfoEntry.setDescription('CDP neighbor information.')
agentCDPConfigNeighborInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 110, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCDPConfigNeighborInfoIndex.setStatus('current')
if mibBuilder.loadTexts: agentCDPConfigNeighborInfoIndex.setDescription('index used to uniquelly identify an entry of the CDP neighbor information Table')
agentCDPConfigNeighborInfoDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 110, 20, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCDPConfigNeighborInfoDeviceID.setStatus('current')
if mibBuilder.loadTexts: agentCDPConfigNeighborInfoDeviceID.setDescription('neighbor CDP device ID. ')
agentCDPConfigNeighborInfoLocalIF = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 110, 20, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCDPConfigNeighborInfoLocalIF.setStatus('current')
if mibBuilder.loadTexts: agentCDPConfigNeighborInfoLocalIF.setDescription('Local IF number from which the CDP packets are received. ')
agentCDPConfigNeighborInfoHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 110, 20, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCDPConfigNeighborInfoHoldTime.setStatus('current')
if mibBuilder.loadTexts: agentCDPConfigNeighborInfoHoldTime.setDescription("CDP packets' time to live. ")
agentCDPConfigNeighborInfoCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 110, 20, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCDPConfigNeighborInfoCapability.setStatus('current')
if mibBuilder.loadTexts: agentCDPConfigNeighborInfoCapability.setDescription("neighborhood's capabilities. ")
agentCDPConfigNeighborInfoPlatform = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 110, 20, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCDPConfigNeighborInfoPlatform.setStatus('current')
if mibBuilder.loadTexts: agentCDPConfigNeighborInfoPlatform.setDescription("neighborhood's platform. ")
agentCDPConfigNeighborInfoPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 110, 20, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCDPConfigNeighborInfoPortID.setStatus('current')
if mibBuilder.loadTexts: agentCDPConfigNeighborInfoPortID.setDescription("neighborhood's port ID from which the CDP packets are sent out. ")
agentCDPConfigNeighborInfoManagementAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 110, 20, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCDPConfigNeighborInfoManagementAddress.setStatus('current')
if mibBuilder.loadTexts: agentCDPConfigNeighborInfoManagementAddress.setDescription("neighborhood's management address from which the CDP packets are sent out. ")
agentVlanVoiceConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 101, 111))
agentVlanVoiceVlanIDCreate = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 111, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4093))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentVlanVoiceVlanIDCreate.setStatus('current')
if mibBuilder.loadTexts: agentVlanVoiceVlanIDCreate.setDescription('The Voice Vlan Vlan Id.')
agentVlanVoiceAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 111, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentVlanVoiceAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentVlanVoiceAdminMode.setDescription('The Voice Vlan administration.')
agentVlanVoiceMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 111, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentVlanVoiceMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentVlanVoiceMacAddress.setDescription('The Voice Vlan MAC address. Multicast mac address is not allowed.')
agentVlanVoiceMacMask = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 111, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(128, 128), ValueRangeConstraint(192, 192), ValueRangeConstraint(224, 224), ValueRangeConstraint(240, 240), ValueRangeConstraint(248, 248), ValueRangeConstraint(252, 252), ValueRangeConstraint(254, 254), ValueRangeConstraint(255, 255), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentVlanVoiceMacMask.setStatus('current')
if mibBuilder.loadTexts: agentVlanVoiceMacMask.setDescription('The Voice Vlan MAC mask.')
agentVlanVoicePriority = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 111, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentVlanVoicePriority.setStatus('current')
if mibBuilder.loadTexts: agentVlanVoicePriority.setDescription('The Voice Vlan priority.')
agentVlanVoiceName = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 111, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentVlanVoiceName.setStatus('current')
if mibBuilder.loadTexts: agentVlanVoiceName.setDescription('The Voice Vlan name.')
agentVlanVoiceConfigTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 101, 111, 7), )
if mibBuilder.loadTexts: agentVlanVoiceConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentVlanVoiceConfigTable.setDescription('The switch Voice Vlan show table.')
agentVlanVoiceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 101, 111, 7, 1), ).setIndexNames((0, "SWITCHING-EXTENSION-MIB", "agentVlanVoiceConfigIndex"))
if mibBuilder.loadTexts: agentVlanVoiceConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentVlanVoiceConfigEntry.setDescription('The switch Voice Vlan show entry.')
agentVlanVoiceConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 111, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentVlanVoiceConfigIndex.setStatus('current')
if mibBuilder.loadTexts: agentVlanVoiceConfigIndex.setDescription('Voice Vlan Index.')
agentVlanVoiceConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 111, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentVlanVoiceConfigName.setStatus('current')
if mibBuilder.loadTexts: agentVlanVoiceConfigName.setDescription('The Voice Vlan name.')
agentVlanVoiceConfigMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 111, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentVlanVoiceConfigMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentVlanVoiceConfigMacAddress.setDescription('The Voice Vlan MAC address.')
agentVlanVoiceConfigMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 111, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(128, 128), ValueRangeConstraint(192, 192), ValueRangeConstraint(224, 224), ValueRangeConstraint(240, 240), ValueRangeConstraint(248, 248), ValueRangeConstraint(252, 252), ValueRangeConstraint(254, 254), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentVlanVoiceConfigMacMask.setStatus('current')
if mibBuilder.loadTexts: agentVlanVoiceConfigMacMask.setDescription('The Voice Vlan MAC mask.')
agentVlanVoiceConfigPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 111, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentVlanVoiceConfigPriority.setStatus('current')
if mibBuilder.loadTexts: agentVlanVoiceConfigPriority.setDescription('The Voice Vlan priority.')
agentVlanVoiceConfigDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 111, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentVlanVoiceConfigDelete.setStatus('current')
if mibBuilder.loadTexts: agentVlanVoiceConfigDelete.setDescription('Remove Voice Vlan entry.')
agentVoiceVlanConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 101, 114))
agentVoiceVlanAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 114, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentVoiceVlanAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentVoiceVlanAdminMode.setDescription('The Voice Vlan administration Mode. The default mode is disabled.')
agentVoiceVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 101, 114, 2), )
if mibBuilder.loadTexts: agentVoiceVlanConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentVoiceVlanConfigTable.setDescription('The switch Voice Vlan show table.')
agentVoiceVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 101, 114, 2, 1), ).setIndexNames((0, "SWITCHING-EXTENSION-MIB", "agentVoiceVlanConfigIndex"))
if mibBuilder.loadTexts: agentVoiceVlanConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentVoiceVlanConfigEntry.setDescription('The switch Voice Vlan show entry.')
agentVoiceVlanConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 114, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4093))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentVoiceVlanConfigIndex.setStatus('current')
if mibBuilder.loadTexts: agentVoiceVlanConfigIndex.setDescription('Voice Vlan Index.')
agentVoiceVlanConfigIfMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 114, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 0), ("vlanid", 1), ("dot1p", 2), ("none", 3), ("untagged", 4))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentVoiceVlanConfigIfMode.setStatus('current')
if mibBuilder.loadTexts: agentVoiceVlanConfigIfMode.setDescription('The Voice VLAN mode for selected interface.')
agentVoiceVlanConfigIfModeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 114, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentVoiceVlanConfigIfModeValue.setStatus('current')
if mibBuilder.loadTexts: agentVoiceVlanConfigIfModeValue.setDescription('The Voice VLAN mode value of the selected interface.')
agentVoiceVlanConfigCosOverrideMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 114, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentVoiceVlanConfigCosOverrideMode.setStatus('current')
if mibBuilder.loadTexts: agentVoiceVlanConfigCosOverrideMode.setDescription('The CoS Override mode for selected interface. The default mode is disabled.')
agentVoiceVlanConfigOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 114, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentVoiceVlanConfigOperState.setStatus('current')
if mibBuilder.loadTexts: agentVoiceVlanConfigOperState.setDescription('The operational status of the voice vlan of the given interface.')
agentVTPConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 101, 115))
agentVTPAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 115, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentVTPAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentVTPAdminMode.setDescription('Enable or disable the VTP feature. The default mode is enabled.')
agentVTPVersion = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 115, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentVTPVersion.setStatus('current')
if mibBuilder.loadTexts: agentVTPVersion.setDescription('The VTP version.')
agentVTPConfigRevision = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 115, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentVTPConfigRevision.setStatus('current')
if mibBuilder.loadTexts: agentVTPConfigRevision.setDescription('The revision for the VTP domain status.')
agentVTPMaxVlanNumSupported = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 115, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentVTPMaxVlanNumSupported.setStatus('current')
if mibBuilder.loadTexts: agentVTPMaxVlanNumSupported.setDescription('The maximum VLANs supported for VTP.')
agentVTPVlanNumSupported = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 115, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentVTPVlanNumSupported.setStatus('current')
if mibBuilder.loadTexts: agentVTPVlanNumSupported.setDescription('The VLAN number for VTP currently.')
agentVTPOperatingMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 115, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("server", 0), ("client", 1), ("transparent", 2))).clone('server')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentVTPOperatingMode.setStatus('current')
if mibBuilder.loadTexts: agentVTPOperatingMode.setDescription('The operational mode of VTP device. The default setting is server mode.')
agentVTPDomainName = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 115, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentVTPDomainName.setStatus('current')
if mibBuilder.loadTexts: agentVTPDomainName.setDescription('The name of the VTP administrative domain.')
agentVTPPruningMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 115, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentVTPPruningMode.setStatus('current')
if mibBuilder.loadTexts: agentVTPPruningMode.setDescription('Enable or disable the VTP pruning mode.')
agentVTPDomainPassword = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 115, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentVTPDomainPassword.setStatus('current')
if mibBuilder.loadTexts: agentVTPDomainPassword.setDescription('The the password for the VTP administrative domain.')
agentVTPV2Mode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 115, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentVTPV2Mode.setStatus('current')
if mibBuilder.loadTexts: agentVTPV2Mode.setDescription('Enable or disable the VTP V2 mode.')
agentVTPMD5Digest = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 115, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentVTPMD5Digest.setStatus('current')
if mibBuilder.loadTexts: agentVTPMD5Digest.setDescription('The MD5 Digest for the VTP domain status.')
agentVTPConfigLastModified = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 115, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentVTPConfigLastModified.setStatus('current')
if mibBuilder.loadTexts: agentVTPConfigLastModified.setDescription('The timestamp of the last configuration modification and the IP address of the switch that caused the configuration change to the database.')
agentVTPLocalUpdaterID = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 115, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentVTPLocalUpdaterID.setStatus('current')
if mibBuilder.loadTexts: agentVTPLocalUpdaterID.setDescription('The local updater ID for the VTP domain status.')
agentVTPPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 101, 115, 14), )
if mibBuilder.loadTexts: agentVTPPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentVTPPortConfigTable.setDescription('The VTP Trunk status show table.')
agentVTPPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 101, 115, 14, 1), ).setIndexNames((0, "SWITCHING-EXTENSION-MIB", "agentVTPPortConfigIndex"))
if mibBuilder.loadTexts: agentVTPPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentVTPPortConfigEntry.setDescription('The switch Voice Vlan show entry.')
agentVTPPortConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 115, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: agentVTPPortConfigIndex.setStatus('current')
if mibBuilder.loadTexts: agentVTPPortConfigIndex.setDescription('VTP Trunkport Index.')
agentVTPPortConfigTrunkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 115, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentVTPPortConfigTrunkMode.setStatus('current')
if mibBuilder.loadTexts: agentVTPPortConfigTrunkMode.setDescription('The VTP Trunk mode for selected interface.')
agentFIPSnoopingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 101, 116))
agentFIPSnoopingAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 116, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFIPSnoopingAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentFIPSnoopingAdminMode.setDescription('Enable or disable the FIPSnooping feature. The default mode is disable.')
agentFIPSnoopingVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 101, 116, 2), )
if mibBuilder.loadTexts: agentFIPSnoopingVlanConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentFIPSnoopingVlanConfigTable.setDescription('A table of the FIP Snooping Vlan configuration entries.')
agentFIPSnoopingVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 101, 116, 2, 1), ).setIndexNames((0, "SWITCHING-EXTENSION-MIB", "agentFIPSnoopingVlanIndex"))
if mibBuilder.loadTexts: agentFIPSnoopingVlanConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentFIPSnoopingVlanConfigEntry.setDescription('Represents entry for a FIP Snooping configurable Vlan.')
agentFIPSnoopingVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 116, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFIPSnoopingVlanIndex.setStatus('current')
if mibBuilder.loadTexts: agentFIPSnoopingVlanIndex.setDescription('VlanIndex values in the vlans.')
agentFIPSnoopingVlanAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 116, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFIPSnoopingVlanAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentFIPSnoopingVlanAdminMode.setDescription('This enables or disables FIP Snooping on a selected Vlan interface.')
agentFIPSnoopingSessionTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 101, 116, 5), )
if mibBuilder.loadTexts: agentFIPSnoopingSessionTable.setStatus('current')
if mibBuilder.loadTexts: agentFIPSnoopingSessionTable.setDescription('A table that contains the objects for the with each port.')
agentFIPSnoopingSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 101, 116, 5, 1), ).setIndexNames((0, "SWITCHING-EXTENSION-MIB", "agentFIPSnoopingSessionKey"))
if mibBuilder.loadTexts: agentFIPSnoopingSessionEntry.setStatus('current')
if mibBuilder.loadTexts: agentFIPSnoopingSessionEntry.setDescription('The information for FIP Snooping sessions.')
agentFIPSnoopingSessionKey = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 116, 5, 1, 1), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFIPSnoopingSessionKey.setStatus('current')
if mibBuilder.loadTexts: agentFIPSnoopingSessionKey.setDescription('The FIP Snooping Session Key.')
agentFIPSnoopingSessionIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 116, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFIPSnoopingSessionIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentFIPSnoopingSessionIfIndex.setDescription('Name of the interface which is connected.')
agentFIPSnoopingSessionFCFMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 116, 5, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFIPSnoopingSessionFCFMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentFIPSnoopingSessionFCFMacAddress.setDescription('The FCF MAC address of the session.')
agentFIPSnoopingSessionENodeMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 116, 5, 1, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFIPSnoopingSessionENodeMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentFIPSnoopingSessionENodeMacAddress.setDescription('The ENode MAC address of the session.')
agentFIPSnoopingSessionENodeIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 116, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFIPSnoopingSessionENodeIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentFIPSnoopingSessionENodeIfIndex.setDescription('The ENode interface of the session.')
agentFIPSnoopingFCFTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 101, 116, 6), )
if mibBuilder.loadTexts: agentFIPSnoopingFCFTable.setStatus('current')
if mibBuilder.loadTexts: agentFIPSnoopingFCFTable.setDescription('A table that contains the objects for the with each port.')
agentFIPSnoopingFCFEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 101, 116, 6, 1), ).setIndexNames((0, "SWITCHING-EXTENSION-MIB", "agentFIPSnoopingFCFKey"))
if mibBuilder.loadTexts: agentFIPSnoopingFCFEntry.setStatus('current')
if mibBuilder.loadTexts: agentFIPSnoopingFCFEntry.setDescription('The information for FIP Snooping FCF.')
agentFIPSnoopingFCFKey = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 116, 6, 1, 1), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFIPSnoopingFCFKey.setStatus('current')
if mibBuilder.loadTexts: agentFIPSnoopingFCFKey.setDescription('The FIP Snooping FCF Key.')
agentFIPSnoopingFCFIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 116, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFIPSnoopingFCFIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentFIPSnoopingFCFIfIndex.setDescription('Name of the interface to which the FCoE Forwarder (FCF) is connected.')
agentFIPSnoopingFCFVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 116, 6, 1, 3), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFIPSnoopingFCFVlan.setStatus('current')
if mibBuilder.loadTexts: agentFIPSnoopingFCFVlan.setDescription('Vlan Index for which this entry is associated with.')
agentFIPSnoopingFCFENodeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 116, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFIPSnoopingFCFENodeNumber.setStatus('current')
if mibBuilder.loadTexts: agentFIPSnoopingFCFENodeNumber.setDescription('Total number of ENodes that are connected to the FCF')
agentFIPSnoopingFCFFCMap = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 116, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFIPSnoopingFCFFCMap.setStatus('current')
if mibBuilder.loadTexts: agentFIPSnoopingFCFFCMap.setDescription('FC-Map value used by the FCF. The default value is 0xEFC00.')
agentFIPSnoopingFCFSwitchName = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 116, 6, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFIPSnoopingFCFSwitchName.setStatus('current')
if mibBuilder.loadTexts: agentFIPSnoopingFCFSwitchName.setDescription('Name ID')
agentFIPSnoopingFCFFabricName = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 116, 6, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFIPSnoopingFCFFabricName.setStatus('current')
if mibBuilder.loadTexts: agentFIPSnoopingFCFFabricName.setDescription('Name of the FCF.')
agentFIPSnoopingENodeTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 101, 116, 7), )
if mibBuilder.loadTexts: agentFIPSnoopingENodeTable.setStatus('current')
if mibBuilder.loadTexts: agentFIPSnoopingENodeTable.setDescription('A table that contains the objects for the with each port.')
agentFIPSnoopingENodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 101, 116, 7, 1), ).setIndexNames((0, "SWITCHING-EXTENSION-MIB", "agentFIPSnoopingENodeKey"))
if mibBuilder.loadTexts: agentFIPSnoopingENodeEntry.setStatus('current')
if mibBuilder.loadTexts: agentFIPSnoopingENodeEntry.setDescription('The information for FIP Snooping ENode.')
agentFIPSnoopingENodeKey = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 116, 7, 1, 1), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFIPSnoopingENodeKey.setStatus('current')
if mibBuilder.loadTexts: agentFIPSnoopingENodeKey.setDescription('The FIP Snooping ENode Key.')
agentFIPSnoopingENodeIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 116, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFIPSnoopingENodeIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentFIPSnoopingENodeIfIndex.setDescription('The interface of enode.')
agentFIPSnoopingENodeVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 116, 7, 1, 3), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFIPSnoopingENodeVlan.setStatus('current')
if mibBuilder.loadTexts: agentFIPSnoopingENodeVlan.setDescription('Vlan Index for which this entry is associated with.')
agentFIPSnoopingENodeNameID = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 116, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentFIPSnoopingENodeNameID.setStatus('current')
if mibBuilder.loadTexts: agentFIPSnoopingENodeNameID.setDescription('Name ID')
agentMLAGGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 101, 117))
agentMLAGAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 117, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentMLAGAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentMLAGAdminMode.setDescription('Enable or disable the MLAG feature. The default mode is disabled.')
agentMLAGDomainId = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 117, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentMLAGDomainId.setStatus('current')
if mibBuilder.loadTexts: agentMLAGDomainId.setDescription('Configure the domain Id of Multi-Chassis Link Aggregation.')
agentMLAGConfigurationConsistancyStatus = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 117, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("success", 1), ("failure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMLAGConfigurationConsistancyStatus.setStatus('current')
if mibBuilder.loadTexts: agentMLAGConfigurationConsistancyStatus.setDescription('Check the switch configuration for consistency parameter.')
agentMLAGMemberCount = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 117, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMLAGMemberCount.setStatus('current')
if mibBuilder.loadTexts: agentMLAGMemberCount.setDescription('Get the number of MLAG members.')
agentMLAGSystemMac = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 117, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentMLAGSystemMac.setStatus('current')
if mibBuilder.loadTexts: agentMLAGSystemMac.setDescription('Set the system mac of Multi-Chassis Link Aggregation.')
agentMLAGKeepaliveTimeout = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 117, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 600)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentMLAGKeepaliveTimeout.setStatus('current')
if mibBuilder.loadTexts: agentMLAGKeepaliveTimeout.setDescription('To specify the timeout (in seconds) between re-transmissions to the MLAG peer device. The range is from 3 to 20. The default is 5.')
agentMLAGPeerGatewayMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 117, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentMLAGPeerGatewayMode.setStatus('current')
if mibBuilder.loadTexts: agentMLAGPeerGatewayMode.setDescription('Enable or disable Layer 3 forwarding for packets destined to the gateway MAC address of the MLAG. The default mode is enabled.')
agentMLAGDelayRestore = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 117, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentMLAGDelayRestore.setStatus('current')
if mibBuilder.loadTexts: agentMLAGDelayRestore.setDescription('To delay the MLAG from coming up on the restored MLAG peer device after a reload when the peer adjacency is already established. The default value is 0, it means that there is no delay time. The range of delay time is from 5 to 600 seconds.')
agentMLAGMemberLinkdownMode = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 117, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentMLAGMemberLinkdownMode.setStatus('current')
if mibBuilder.loadTexts: agentMLAGMemberLinkdownMode.setDescription('Enable or disable member port link down mode when MLAG is starting or stopping. The default mode is disabled.')
agentMLAGPeerLinkGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 101, 117, 10))
agentMLAGPeerLinkifIndex = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 117, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentMLAGPeerLinkifIndex.setStatus('current')
if mibBuilder.loadTexts: agentMLAGPeerLinkifIndex.setDescription('Use this to set MLAG peer link interface. Set 0 to disable MLAG peer link.')
agentMLAGPeerLinkifStatus = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 117, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMLAGPeerLinkifStatus.setStatus('current')
if mibBuilder.loadTexts: agentMLAGPeerLinkifStatus.setDescription('Show MLAG peer link interface status.')
agentMLAGPeerLinkActiveVlans = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 117, 10, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMLAGPeerLinkActiveVlans.setStatus('current')
if mibBuilder.loadTexts: agentMLAGPeerLinkActiveVlans.setDescription('Show MLAG peer link interface active vlans.')
agentMLAGPeerLinkForbiddenVlans = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 101, 117, 10, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMLAGPeerLinkForbiddenVlans.setStatus('current')
if mibBuilder.loadTexts: agentMLAGPeerLinkForbiddenVlans.setDescription('Show MLAG peer link interface forbidden vlans.')
agentMLAGPortChannelTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 101, 117, 11), )
if mibBuilder.loadTexts: agentMLAGPortChannelTable.setStatus('current')
if mibBuilder.loadTexts: agentMLAGPortChannelTable.setDescription('Table of Multi-Chassis Link Aggregation port channel status for the specified interface.')
agentMLAGPortChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 101, 117, 11, 1), ).setIndexNames((0, "SWITCHING-EXTENSION-MIB", "agentMLAGPortChannelifIndex"))
if mibBuilder.loadTexts: agentMLAGPortChannelEntry.setStatus('current')
if mibBuilder.loadTexts: agentMLAGPortChannelEntry.setDescription('Table of Multi-Chassis Link Aggregation port channel status for the specified interface.')
agentMLAGPortChannelifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 117, 11, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMLAGPortChannelifIndex.setStatus('current')
if mibBuilder.loadTexts: agentMLAGPortChannelifIndex.setDescription('This is a unique index for an entry in the agentMLAGPortChannelTable. A non-zero value indicates the ifIndex for the corresponding interface entry in the ifTable.')
agentMLAGPortChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 117, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agentMLAGPortChannelId.setStatus('current')
if mibBuilder.loadTexts: agentMLAGPortChannelId.setDescription('Identity of MLAG port channel number. Zero to disable MLAG mode.')
agentMLAGPortChannelifIndexStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 117, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMLAGPortChannelifIndexStatus.setStatus('current')
if mibBuilder.loadTexts: agentMLAGPortChannelifIndexStatus.setDescription('Interface status of MLAG port channel number.')
agentMLAGPortChannelConsistancy = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 117, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("success", 1), ("failure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMLAGPortChannelConsistancy.setStatus('current')
if mibBuilder.loadTexts: agentMLAGPortChannelConsistancy.setDescription('Configuration consistancy of MLAG port channel number.')
agentMLAGPortChannelActiveVlans = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 117, 11, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMLAGPortChannelActiveVlans.setStatus('current')
if mibBuilder.loadTexts: agentMLAGPortChannelActiveVlans.setDescription('Active vlans of MLAG port channel number.')
agentMLAGVlanRoutingPortTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 101, 117, 12), )
if mibBuilder.loadTexts: agentMLAGVlanRoutingPortTable.setStatus('current')
if mibBuilder.loadTexts: agentMLAGVlanRoutingPortTable.setDescription('Table of Multi-Chassis Link Aggregation Forbidden Configuration for the specified vlan routing interface.')
agentMLAGVlanRoutingPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 101, 117, 12, 1), ).setIndexNames((0, "SWITCHING-EXTENSION-MIB", "agentMLAGVlanRoutingPortifIndex"))
if mibBuilder.loadTexts: agentMLAGVlanRoutingPortEntry.setStatus('current')
if mibBuilder.loadTexts: agentMLAGVlanRoutingPortEntry.setDescription('Table of Multi-Chassis Link Aggregation Forbidden Configuration for the specified vlan routing interface.')
agentMLAGVlanRoutingPortifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 117, 12, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMLAGVlanRoutingPortifIndex.setStatus('current')
if mibBuilder.loadTexts: agentMLAGVlanRoutingPortifIndex.setDescription('This is a unique index for an entry in the agentMLAGVlanRoutingPortTable. A non-zero value indicates the ifIndex for the corresponding interface entry in the ifTable.')
agentMLAGVlanRoutingPortForbiddenMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 117, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentMLAGVlanRoutingPortForbiddenMode.setStatus('current')
if mibBuilder.loadTexts: agentMLAGVlanRoutingPortForbiddenMode.setDescription('Enable or disable forbidden mode of VLAN on peer link interface. The default mode is disabled.')
agentDCBXGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118))
agentDCBXConfigTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 1), )
if mibBuilder.loadTexts: agentDCBXConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentDCBXConfigTable.setDescription('Table of Data center bridging exchange configurations for the specified interface.')
agentDCBXConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 1, 1), ).setIndexNames((0, "SWITCHING-EXTENSION-MIB", "agentDCBXifIndex"))
if mibBuilder.loadTexts: agentDCBXConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentDCBXConfigEntry.setDescription('Table of Data center bridging exchange configurations for the specified interface.')
agentDCBXifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDCBXifIndex.setStatus('current')
if mibBuilder.loadTexts: agentDCBXifIndex.setDescription('This is a unique index for an entry in the agentDCBXPFCConfigTable. A non-zero value indicates the ifIndex for the corresponding interface entry in the ifTable.')
agentDCBXAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDCBXAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentDCBXAdminMode.setDescription('Enable/Disable DCBX for the specified interface.')
agentDCBXVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cee", 1), ("ieee", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDCBXVersion.setStatus('current')
if mibBuilder.loadTexts: agentDCBXVersion.setDescription('Configure DCBX version for the specified interface.')
agentDCBXPFCConfigTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 2), )
if mibBuilder.loadTexts: agentDCBXPFCConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentDCBXPFCConfigTable.setDescription('Table of Data center bridging exchange configurations for the specified interface.')
agentDCBXPFCConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 2, 1), ).setIndexNames((0, "SWITCHING-EXTENSION-MIB", "agentDCBXifIndex"))
if mibBuilder.loadTexts: agentDCBXPFCConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentDCBXPFCConfigEntry.setDescription('Table of Data center bridging exchange configurations for the specified interface.')
agentDCBXPFCEnableMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDCBXPFCEnableMode.setStatus('current')
if mibBuilder.loadTexts: agentDCBXPFCEnableMode.setDescription('Show the enable mode setting for DCBX PFC feature.')
agentDCBXPFCAdvertiseMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDCBXPFCAdvertiseMode.setStatus('current')
if mibBuilder.loadTexts: agentDCBXPFCAdvertiseMode.setDescription('Configure advertise mode setting for DCBX PFC feature.')
agentDCBXPFCWillingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDCBXPFCWillingMode.setStatus('current')
if mibBuilder.loadTexts: agentDCBXPFCWillingMode.setDescription('Configure willing mode setting for DCBX PFC feature.')
agentDCBXPFCPriorityMask = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDCBXPFCPriorityMask.setStatus('current')
if mibBuilder.loadTexts: agentDCBXPFCPriorityMask.setDescription('Show the priority mask for DCBX PFC feature.')
agentDCBXPFCMaxTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDCBXPFCMaxTrafficClass.setStatus('current')
if mibBuilder.loadTexts: agentDCBXPFCMaxTrafficClass.setDescription('Show the max traffic class for DCBX PFC feature.')
agentDCBXPFCOperVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDCBXPFCOperVersion.setStatus('current')
if mibBuilder.loadTexts: agentDCBXPFCOperVersion.setDescription('Show the version for Operational DCBX PFC feature.')
agentDCBXPFCOperMaxVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDCBXPFCOperMaxVersion.setStatus('current')
if mibBuilder.loadTexts: agentDCBXPFCOperMaxVersion.setDescription('Show the max version for Operational DCBX PFC feature.')
agentDCBXPFCOperErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDCBXPFCOperErrors.setStatus('current')
if mibBuilder.loadTexts: agentDCBXPFCOperErrors.setDescription('Shows error reason for DCBX PFC feature.')
agentDCBXPFCOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDCBXPFCOperMode.setStatus('current')
if mibBuilder.loadTexts: agentDCBXPFCOperMode.setDescription('Show the operational mode for DCBX PFC feature.')
agentDCBXPFCOperPeerSyncd = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDCBXPFCOperPeerSyncd.setStatus('current')
if mibBuilder.loadTexts: agentDCBXPFCOperPeerSyncd.setDescription('Show feature sync for Operational DCBX PFC feature.')
agentDCBXPFCOperPriorityMask = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDCBXPFCOperPriorityMask.setStatus('current')
if mibBuilder.loadTexts: agentDCBXPFCOperPriorityMask.setDescription('Show the priority mask for Operational DCBX PFC feature.')
agentDCBXPFCOperMaxTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDCBXPFCOperMaxTrafficClass.setStatus('current')
if mibBuilder.loadTexts: agentDCBXPFCOperMaxTrafficClass.setDescription('Show the max traffic class for Operational DCBX PFC feature.')
agentDCBXPFCPeerLocalifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 2, 1, 13), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDCBXPFCPeerLocalifIndex.setStatus('current')
if mibBuilder.loadTexts: agentDCBXPFCPeerLocalifIndex.setDescription('Show the local interface for Peer DCBX PFC feature.')
agentDCBXPFCPeerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notpresent", 0), ("successful", 1), ("unsuccessful", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDCBXPFCPeerStatus.setStatus('current')
if mibBuilder.loadTexts: agentDCBXPFCPeerStatus.setDescription('Show the status for Peer DCBX PFC feature.')
agentDCBXPFCPeerEnableMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDCBXPFCPeerEnableMode.setStatus('current')
if mibBuilder.loadTexts: agentDCBXPFCPeerEnableMode.setDescription('Show administrative mode setting for Peer DCBX PFC feature.')
agentDCBXPFCPeerWillingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDCBXPFCPeerWillingMode.setStatus('current')
if mibBuilder.loadTexts: agentDCBXPFCPeerWillingMode.setDescription('Show willing mode setting for Peer DCBX PFC feature.')
agentDCBXPFCPeerPriorityMask = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 2, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDCBXPFCPeerPriorityMask.setStatus('current')
if mibBuilder.loadTexts: agentDCBXPFCPeerPriorityMask.setDescription('Show priority mask for Peer DCBX PFC feature.')
agentDCBXPFCPeerMaxTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 2, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDCBXPFCPeerMaxTrafficClass.setStatus('current')
if mibBuilder.loadTexts: agentDCBXPFCPeerMaxTrafficClass.setDescription('Show the max traffic class for Peer DCBX PFC feature.')
agentDCBXPFCDCBXOperVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cee", 1), ("ieee", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDCBXPFCDCBXOperVersion.setStatus('current')
if mibBuilder.loadTexts: agentDCBXPFCDCBXOperVersion.setDescription('Show the operational version for DCBX PFC feature.')
agentDCBXPgConfigTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 3), )
if mibBuilder.loadTexts: agentDCBXPgConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentDCBXPgConfigTable.setDescription('Table of Data center bridging exchange Priority Group feature configurations for the specified interface.')
agentDCBXPgConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 3, 1), ).setIndexNames((0, "SWITCHING-EXTENSION-MIB", "agentDCBXifIndex"))
if mibBuilder.loadTexts: agentDCBXPgConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentDCBXPgConfigEntry.setDescription('Table of Data center bridging exchange Priority Group feature configurations for the specified interface.')
agentDCBXPgEnableMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDCBXPgEnableMode.setStatus('current')
if mibBuilder.loadTexts: agentDCBXPgEnableMode.setDescription('Show enable mode setting for DCBX Priority Group feature.')
agentDCBXPgAdvertiseMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDCBXPgAdvertiseMode.setStatus('current')
if mibBuilder.loadTexts: agentDCBXPgAdvertiseMode.setDescription('Enable/Disable advertise mode setting for DCBX Priority Group feature.')
agentDCBXPgWillingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDCBXPgWillingMode.setStatus('current')
if mibBuilder.loadTexts: agentDCBXPgWillingMode.setDescription('Enable/Disable willing mode setting for DCBX Priority Group feature.')
agentDCBXPgGroupBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDCBXPgGroupBandwidth.setStatus('current')
if mibBuilder.loadTexts: agentDCBXPgGroupBandwidth.setDescription('Show a 8 byte array which will be filled with bandwidth of 8 priority group.')
agentDCBXPgPriorityGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDCBXPgPriorityGroupId.setStatus('current')
if mibBuilder.loadTexts: agentDCBXPgPriorityGroupId.setDescription('Show priority map for Peer DCBX Priority Group feature.')
agentDCBXPgMaxTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 3, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDCBXPgMaxTrafficClass.setStatus('current')
if mibBuilder.loadTexts: agentDCBXPgMaxTrafficClass.setDescription('Show the max traffic class for Peer DCBX Priority Group feature.')
agentDCBXPgOperVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 3, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDCBXPgOperVersion.setStatus('current')
if mibBuilder.loadTexts: agentDCBXPgOperVersion.setDescription('Show opertional version for DCBX Priority Group feature.')
agentDCBXPgMaxVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 3, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDCBXPgMaxVersion.setStatus('current')
if mibBuilder.loadTexts: agentDCBXPgMaxVersion.setDescription('Show max version for DCBX Priority Group feature.')
agentDCBXPgErrorReason = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDCBXPgErrorReason.setStatus('current')
if mibBuilder.loadTexts: agentDCBXPgErrorReason.setDescription('Show error reason for DCBX Priority Group feature.')
agentDCBXPgIsOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDCBXPgIsOperational.setStatus('current')
if mibBuilder.loadTexts: agentDCBXPgIsOperational.setDescription('Show the operational mode of the PG for a interface.')
agentDCBXPgSyncedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDCBXPgSyncedMode.setStatus('current')
if mibBuilder.loadTexts: agentDCBXPgSyncedMode.setDescription('Show feature sync for DCBX Priority Group feature.')
agentDCBXPgOperGroupBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDCBXPgOperGroupBandwidth.setStatus('current')
if mibBuilder.loadTexts: agentDCBXPgOperGroupBandwidth.setDescription('Show a 8 byte array which will be filled with bandwidth of 8 priority group.')
agentDCBXPgOperPriorityGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 3, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDCBXPgOperPriorityGroupId.setStatus('current')
if mibBuilder.loadTexts: agentDCBXPgOperPriorityGroupId.setDescription('Show the operational priority map of the PG for a interface.')
agentDCBXPgOperMaxTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 3, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDCBXPgOperMaxTrafficClass.setStatus('current')
if mibBuilder.loadTexts: agentDCBXPgOperMaxTrafficClass.setDescription('Show the max traffic class for Operational DCBX Priority Group feature.')
agentDCBXPgPeerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notpresent", 0), ("successful", 1), ("unsuccessful", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDCBXPgPeerStatus.setStatus('current')
if mibBuilder.loadTexts: agentDCBXPgPeerStatus.setDescription('Show status (Error bit) for Peer DCBX Priority Group feature.')
agentDCBXPgPeerEnableMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDCBXPgPeerEnableMode.setStatus('current')
if mibBuilder.loadTexts: agentDCBXPgPeerEnableMode.setDescription('Show enable mode setting for Peer DCBX Priority Group feature.')
agentDCBXPgPeerWillingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDCBXPgPeerWillingMode.setStatus('current')
if mibBuilder.loadTexts: agentDCBXPgPeerWillingMode.setDescription('Show willing mode setting for Peer DCBX Priority Group feature.')
agentDCBXPgPeerGroupBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 3, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDCBXPgPeerGroupBandwidth.setStatus('current')
if mibBuilder.loadTexts: agentDCBXPgPeerGroupBandwidth.setDescription('Show a 8 byte array which will be filled with bandwidth of 8 priority group.')
agentDCBXPgPeerPriorityGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 3, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDCBXPgPeerPriorityGroupId.setStatus('current')
if mibBuilder.loadTexts: agentDCBXPgPeerPriorityGroupId.setDescription('Show priority map for Peer DCBX Priority Group feature.')
agentDCBXPgPeerMaxTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 3, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDCBXPgPeerMaxTrafficClass.setStatus('current')
if mibBuilder.loadTexts: agentDCBXPgPeerMaxTrafficClass.setDescription('Show the max traffic class for Peer DCBX Priority Group feature.')
agentDCBXPgDCBXOperVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 118, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cee", 1), ("ieee", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentDCBXPgDCBXOperVersion.setStatus('current')
if mibBuilder.loadTexts: agentDCBXPgDCBXOperVersion.setDescription('Show the operational version for DCBX Priority Group feature.')
class BridgeEvbTLVTC(TextualConvention, Bits):
    description = 'EVB TLV structure.'
    status = 'current'
    namedValues = NamedValues(("vdpCapable", 0), ("ecpCapable", 1), ("ecpRTE", 2), ("vdpTimerCapable", 3), ("reflectiveRelayCap", 14), ("stdForwardingCap", 15))

agentEvbGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 101, 119))
agentEvbConfigTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 101, 119, 1), )
if mibBuilder.loadTexts: agentEvbConfigTable.setStatus('current')
if mibBuilder.loadTexts: agentEvbConfigTable.setDescription('Table of Edge Virtual Bridging feature configurations for the specified interface.')
agentEvbConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 101, 119, 1, 1), ).setIndexNames((0, "SWITCHING-EXTENSION-MIB", "agentEvbifIndex"))
if mibBuilder.loadTexts: agentEvbConfigEntry.setStatus('current')
if mibBuilder.loadTexts: agentEvbConfigEntry.setDescription('Table of Edge Virtual Bridging feature configurations for the specified interface.')
agentEvbifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 119, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 53))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentEvbifIndex.setStatus('current')
if mibBuilder.loadTexts: agentEvbifIndex.setDescription('Show interface index for Evb feature.')
agentEvbAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 119, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentEvbAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentEvbAdminMode.setDescription('Enable/disable mode setting for Evb feature.')
agentEvbCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 119, 1, 1, 3), BridgeEvbTLVTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentEvbCapability.setStatus('current')
if mibBuilder.loadTexts: agentEvbCapability.setDescription('Configure capabilities for Evb feature.')
agentEvbForwardingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 119, 1, 1, 4), BridgeEvbTLVTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentEvbForwardingMode.setStatus('current')
if mibBuilder.loadTexts: agentEvbForwardingMode.setDescription('Configure forwarding mode for Evb feature.')
agentEvbRetransmissionExp = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 119, 1, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentEvbRetransmissionExp.setStatus('current')
if mibBuilder.loadTexts: agentEvbRetransmissionExp.setDescription('Configure RTE for Evb feature.')
agentEvbOperCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 119, 1, 1, 6), BridgeEvbTLVTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentEvbOperCapability.setStatus('current')
if mibBuilder.loadTexts: agentEvbOperCapability.setDescription('Show current capabilities for Evb feature.')
agentEvbOperForwardingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 119, 1, 1, 7), BridgeEvbTLVTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentEvbOperForwardingMode.setStatus('current')
if mibBuilder.loadTexts: agentEvbOperForwardingMode.setDescription('Show forwarding mode for Evb feature.')
agentEvbOperRetransmissionExp = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 119, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentEvbOperRetransmissionExp.setStatus('current')
if mibBuilder.loadTexts: agentEvbOperRetransmissionExp.setDescription('Show RTE for Evb feature.')
agentEvbVsiGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 101, 119, 2))
agentEvbVsiTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 101, 119, 2, 1), )
if mibBuilder.loadTexts: agentEvbVsiTable.setStatus('current')
if mibBuilder.loadTexts: agentEvbVsiTable.setDescription('Table of Edge Virtual Bridging VSI feature status for the specified interface.')
agentEvbVsiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 101, 119, 2, 1, 1), ).setIndexNames((0, "SWITCHING-EXTENSION-MIB", "agentEvbifIndex"), (0, "SWITCHING-EXTENSION-MIB", "agentEvbVsiInstanceId"))
if mibBuilder.loadTexts: agentEvbVsiEntry.setStatus('current')
if mibBuilder.loadTexts: agentEvbVsiEntry.setDescription('Table of Edge Virtual Bridging VSI feature status for the specified interface.')
agentEvbVsiInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 119, 2, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentEvbVsiInstanceId.setStatus('current')
if mibBuilder.loadTexts: agentEvbVsiInstanceId.setDescription('Show interface instance id for Evb Vsi feature.')
agentEvbVsiMgrId = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 119, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentEvbVsiMgrId.setStatus('current')
if mibBuilder.loadTexts: agentEvbVsiMgrId.setDescription('Show interface mgr id for Evb Vsi feature.')
agentEvbVsiId = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 119, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentEvbVsiId.setStatus('current')
if mibBuilder.loadTexts: agentEvbVsiId.setDescription('Show id for Evb Vsi feature.')
agentEvbVsiVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 119, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentEvbVsiVersion.setStatus('current')
if mibBuilder.loadTexts: agentEvbVsiVersion.setDescription('Show interface version for Evb Vsi feature.')
agentEvbVsiMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 119, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("preassociate", 1), ("preassocerr", 2), ("associate", 3), ("deassociate", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentEvbVsiMode.setStatus('current')
if mibBuilder.loadTexts: agentEvbVsiMode.setDescription('Show interface mode for Evb Vsi feature.')
agentEvbVsiState = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 119, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unassociated", 1), ("assocprocessing", 2), ("associated", 3), ("preassocprocessing", 4), ("preassociated", 5), ("deassocprocessing", 6), ("exit", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentEvbVsiState.setStatus('current')
if mibBuilder.loadTexts: agentEvbVsiState.setDescription('Show interface state for Evb Vsi feature.')
agentEvbVsiNumMacs = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 119, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentEvbVsiNumMacs.setStatus('current')
if mibBuilder.loadTexts: agentEvbVsiNumMacs.setDescription('Show interface number of Macs for Evb Vsi feature.')
agentEvbVsiMacTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 101, 119, 2, 2), )
if mibBuilder.loadTexts: agentEvbVsiMacTable.setStatus('current')
if mibBuilder.loadTexts: agentEvbVsiMacTable.setDescription('Table of Edge Virtual Bridging VSI Mac feature status for the specified interface.')
agentEvbVsiMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 101, 119, 2, 2, 1), ).setIndexNames((0, "SWITCHING-EXTENSION-MIB", "agentEvbifIndex"), (0, "SWITCHING-EXTENSION-MIB", "agentEvbVsiInstanceId"), (0, "SWITCHING-EXTENSION-MIB", "agentEvbVsiMacAddress"), (0, "SWITCHING-EXTENSION-MIB", "agentEvbVsiVlanId"))
if mibBuilder.loadTexts: agentEvbVsiMacEntry.setStatus('current')
if mibBuilder.loadTexts: agentEvbVsiMacEntry.setDescription('Table of Edge Virtual Bridging VSI Mac feature status for the specified interface.')
agentEvbVsiMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 119, 2, 2, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentEvbVsiMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentEvbVsiMacAddress.setDescription('Show interface MacAddress for Evb Vsi feature.')
agentEvbVsiVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 119, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentEvbVsiVlanId.setStatus('current')
if mibBuilder.loadTexts: agentEvbVsiVlanId.setDescription('Show interface VlanId for Evb Vsi feature.')
agentVMTracerGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 101, 120))
agentVMTracerIfCtlTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 101, 120, 1), )
if mibBuilder.loadTexts: agentVMTracerIfCtlTable.setStatus('current')
if mibBuilder.loadTexts: agentVMTracerIfCtlTable.setDescription('Table of VM Tracer feature status for the specified interface.')
agentVMTracerIfCtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 101, 120, 1, 1), ).setIndexNames((0, "SWITCHING-EXTENSION-MIB", "agentVMTracerIfIndex"))
if mibBuilder.loadTexts: agentVMTracerIfCtlEntry.setStatus('current')
if mibBuilder.loadTexts: agentVMTracerIfCtlEntry.setDescription('Table of VM Tracer feature status for the specified interface.')
agentVMTracerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 120, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentVMTracerIfIndex.setStatus('current')
if mibBuilder.loadTexts: agentVMTracerIfIndex.setDescription('Show interface index for VM Tracer feature.')
agentVMTracerAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 120, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentVMTracerAdminMode.setStatus('current')
if mibBuilder.loadTexts: agentVMTracerAdminMode.setDescription('Enable/Disable VM Tracer mode for specified interface.')
agentVMTracerSessionTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 101, 120, 2), )
if mibBuilder.loadTexts: agentVMTracerSessionTable.setStatus('current')
if mibBuilder.loadTexts: agentVMTracerSessionTable.setDescription('Table of VM Tracer feature session.')
agentVMTracerSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 101, 120, 2, 1), ).setIndexNames((0, "SWITCHING-EXTENSION-MIB", "agentVMTracerSessionIndex"))
if mibBuilder.loadTexts: agentVMTracerSessionEntry.setStatus('current')
if mibBuilder.loadTexts: agentVMTracerSessionEntry.setDescription('Table of VM Tracer feature session.')
agentVMTracerSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 120, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentVMTracerSessionIndex.setStatus('current')
if mibBuilder.loadTexts: agentVMTracerSessionIndex.setDescription('Index of VM Tracer feature session.')
agentVMTracerSessionName = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 120, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentVMTracerSessionName.setStatus('current')
if mibBuilder.loadTexts: agentVMTracerSessionName.setDescription('Name of VM Tracer feature session.')
agentVMTracerSessionUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 120, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentVMTracerSessionUrl.setStatus('current')
if mibBuilder.loadTexts: agentVMTracerSessionUrl.setDescription('Url of VM Tracer feature session.')
agentVMTracerSessionUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 120, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentVMTracerSessionUsername.setStatus('current')
if mibBuilder.loadTexts: agentVMTracerSessionUsername.setDescription('Username of VM Tracer feature session.')
agentVMTracerSessionPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 120, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentVMTracerSessionPassword.setStatus('current')
if mibBuilder.loadTexts: agentVMTracerSessionPassword.setDescription('Password of VM Tracer feature session.')
agentVMTracerSessionAutoVlanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 120, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentVMTracerSessionAutoVlanMode.setStatus('current')
if mibBuilder.loadTexts: agentVMTracerSessionAutoVlanMode.setDescription('AutoVlan mode of VM Tracer feature session.')
agentVMTracerSessionAllowVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 120, 2, 1, 7), VlanList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentVMTracerSessionAllowVlan.setStatus('current')
if mibBuilder.loadTexts: agentVMTracerSessionAllowVlan.setDescription('Allow vlan range of VM Tracer feature session.')
agentVMTracerSessionConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 120, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connected", 1), ("disconnected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentVMTracerSessionConnectionStatus.setStatus('current')
if mibBuilder.loadTexts: agentVMTracerSessionConnectionStatus.setDescription('Connection status of VM Tracer feature session.')
agentVMTracerSessionClear = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 120, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentVMTracerSessionClear.setStatus('current')
if mibBuilder.loadTexts: agentVMTracerSessionClear.setDescription('Clear current VM Tracer feature session.')
agentVMTracerVMTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 101, 120, 3), )
if mibBuilder.loadTexts: agentVMTracerVMTable.setStatus('current')
if mibBuilder.loadTexts: agentVMTracerVMTable.setDescription('Table of VM Tracer feature vm.')
agentVMTracerVMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 101, 120, 3, 1), ).setIndexNames((0, "SWITCHING-EXTENSION-MIB", "agentVMTracerSessionIndex"), (0, "SWITCHING-EXTENSION-MIB", "agentVMTracerVMIndex"))
if mibBuilder.loadTexts: agentVMTracerVMEntry.setStatus('current')
if mibBuilder.loadTexts: agentVMTracerVMEntry.setDescription('Table of VM Tracer feature vm.')
agentVMTracerVMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 120, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentVMTracerVMIndex.setStatus('current')
if mibBuilder.loadTexts: agentVMTracerVMIndex.setDescription('Index of VM Tracer feature vm.')
agentVMTracerVMName = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 120, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentVMTracerVMName.setStatus('current')
if mibBuilder.loadTexts: agentVMTracerVMName.setDescription('Name of VM Tracer feature vm.')
agentVMTracerVMInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 120, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentVMTracerVMInterface.setStatus('current')
if mibBuilder.loadTexts: agentVMTracerVMInterface.setDescription('Interface of VM Tracer feature vm.')
agentVMTracerVMAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 120, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentVMTracerVMAdapter.setStatus('current')
if mibBuilder.loadTexts: agentVMTracerVMAdapter.setDescription('Adapter of VM Tracer feature vm.')
agentVMTracerVMMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 120, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentVMTracerVMMacAddress.setStatus('current')
if mibBuilder.loadTexts: agentVMTracerVMMacAddress.setDescription('MacAddress of VM Tracer feature vm.')
agentVMTracerVMPortGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 120, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentVMTracerVMPortGroup.setStatus('current')
if mibBuilder.loadTexts: agentVMTracerVMPortGroup.setDescription('PortGroup of VM Tracer feature vm.')
agentVMTracerVMVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 120, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentVMTracerVMVlanId.setStatus('current')
if mibBuilder.loadTexts: agentVMTracerVMVlanId.setDescription('VlanId of VM Tracer feature vm.')
agentVMTracerVMSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 120, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentVMTracerVMSwitch.setStatus('current')
if mibBuilder.loadTexts: agentVMTracerVMSwitch.setDescription('Switch of VM Tracer feature vm.')
agentVMTracerVMHost = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 120, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentVMTracerVMHost.setStatus('current')
if mibBuilder.loadTexts: agentVMTracerVMHost.setDescription('Host of VM Tracer feature vm.')
agentVMTracerVMHostCpuSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 120, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentVMTracerVMHostCpuSpeed.setStatus('current')
if mibBuilder.loadTexts: agentVMTracerVMHostCpuSpeed.setDescription('Host Cpu Speed of VM Tracer feature vm.')
agentVMTracerVMHostMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 120, 3, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentVMTracerVMHostMemory.setStatus('current')
if mibBuilder.loadTexts: agentVMTracerVMHostMemory.setDescription('Host Memory of VM Tracer feature vm.')
agentVMTracerVMHostSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 120, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentVMTracerVMHostSystem.setStatus('current')
if mibBuilder.loadTexts: agentVMTracerVMHostSystem.setDescription('Host System of VM Tracer feature vm.')
agentVMTracerVMHostVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 120, 3, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentVMTracerVMHostVendor.setStatus('current')
if mibBuilder.loadTexts: agentVMTracerVMHostVendor.setDescription('Host Vendor of VM Tracer feature vm.')
agentVMTracerVMHostCpuCores = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 120, 3, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentVMTracerVMHostCpuCores.setStatus('current')
if mibBuilder.loadTexts: agentVMTracerVMHostCpuCores.setDescription('Host Cpu Cores of VM Tracer feature vm.')
agentVMTracerVMHostCpuPackages = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 101, 120, 3, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentVMTracerVMHostCpuPackages.setStatus('current')
if mibBuilder.loadTexts: agentVMTracerVMHostCpuPackages.setDescription('Host Cpu Packages of VM Tracer feature vm.')
mibBuilder.exportSymbols("SWITCHING-EXTENSION-MIB", agentVoiceVlanConfigCosOverrideMode=agentVoiceVlanConfigCosOverrideMode, agentVlanVoiceName=agentVlanVoiceName, agentDCBXPgOperMaxTrafficClass=agentDCBXPgOperMaxTrafficClass, agentDCBXPFCDCBXOperVersion=agentDCBXPFCDCBXOperVersion, agentSwitchStormControlMulticastEntry=agentSwitchStormControlMulticastEntry, agentFIPSnoopingVlanConfigTable=agentFIPSnoopingVlanConfigTable, agentCDPConfigNumErrPkts=agentCDPConfigNumErrPkts, agentLinkStateGroupId=agentLinkStateGroupId, agentIgmpSnoopL2MulticastStaticMemberPorts=agentIgmpSnoopL2MulticastStaticMemberPorts, agentDCBXPgPeerWillingMode=agentDCBXPgPeerWillingMode, agentDCBXPgIsOperational=agentDCBXPgIsOperational, agentVTPPortConfigIndex=agentVTPPortConfigIndex, agentDCBXPgMaxVersion=agentDCBXPgMaxVersion, agentDCBXPgOperGroupBandwidth=agentDCBXPgOperGroupBandwidth, agentLinkStateGroupUpstreamPort=agentLinkStateGroupUpstreamPort, agentInventoryBootRomVersion=agentInventoryBootRomVersion, agentDOMtemperatureLowAlarm=agentDOMtemperatureLowAlarm, agentPowerSupplySerialNumber=agentPowerSupplySerialNumber, agentVTPAdminMode=agentVTPAdminMode, agentDCBXPFCPriorityMask=agentDCBXPFCPriorityMask, agent10GModuleVendorName=agent10GModuleVendorName, agentNetworkHttpPort=agentNetworkHttpPort, agentMLAGPeerLinkifIndex=agentMLAGPeerLinkifIndex, agentCDPConfigNeighborInfoCapability=agentCDPConfigNeighborInfoCapability, agentMldSnoopL2MulticastStaticActivePorts=agentMldSnoopL2MulticastStaticActivePorts, agentDCBXPgEnableMode=agentDCBXPgEnableMode, agentDCBXPgMaxTrafficClass=agentDCBXPgMaxTrafficClass, agentDOMRxpower=agentDOMRxpower, agentPortBackupGroupFailBackTime=agentPortBackupGroupFailBackTime, agentPortBackupGroupEntry=agentPortBackupGroupEntry, agentSwitchUcastStormExtensionAdminMode=agentSwitchUcastStormExtensionAdminMode, agentEvbVsiEntry=agentEvbVsiEntry, agentVtyTelnetServerAdminMode=agentVtyTelnetServerAdminMode, agentTransferCopyRunningConfigStatus=agentTransferCopyRunningConfigStatus, agentTemperatureFanUnitIndex=agentTemperatureFanUnitIndex, agentCDPConfigNeighborInfoPortID=agentCDPConfigNeighborInfoPortID, agentInventroyHardwareVersion=agentInventroyHardwareVersion, agentPowerSupplyModel=agentPowerSupplyModel, agentVMTracerVMHostVendor=agentVMTracerVMHostVendor, agentPowerSupplyStatusTable=agentPowerSupplyStatusTable, agentSwitchBcastStormExtensionPktRate=agentSwitchBcastStormExtensionPktRate, agentCDPConfigTimeToLive=agentCDPConfigTimeToLive, agentDCBXPFCMaxTrafficClass=agentDCBXPFCMaxTrafficClass, agentSwitchBcastStormExtensionAdminMode=agentSwitchBcastStormExtensionAdminMode, agentMLAGMemberCount=agentMLAGMemberCount, agentInfoGroupExtension=agentInfoGroupExtension, agentEvbVsiNumMacs=agentEvbVsiNumMacs, agentSwitchMulticastControlMode=agentSwitchMulticastControlMode, agentVMTracerVMAdapter=agentVMTracerVMAdapter, agentVMTracerVMHostCpuPackages=agentVMTracerVMHostCpuPackages, agentFIPSnoopingSessionENodeMacAddress=agentFIPSnoopingSessionENodeMacAddress, agentGBICInfoSerialNumber=agentGBICInfoSerialNumber, agentDOMvotageLowWarning=agentDOMvotageLowWarning, agentLinkStateGroupStatus=agentLinkStateGroupStatus, agentVlanVoiceMacAddress=agentVlanVoiceMacAddress, agentPortConfigExtensionMaxFrameSizeLimit=agentPortConfigExtensionMaxFrameSizeLimit, agentDOMtxpowerHighWarning=agentDOMtxpowerHighWarning, agentMLAGPortChannelifIndex=agentMLAGPortChannelifIndex, agentCDPConfigNumInPkts=agentCDPConfigNumInPkts, agentVMTracerVMSwitch=agentVMTracerVMSwitch, agentSwitchStormControlActionIfIndex=agentSwitchStormControlActionIfIndex, agentFIPSnoopingGroup=agentFIPSnoopingGroup, agentTemperature5=agentTemperature5, agentPortBackupGroupBackupPort=agentPortBackupGroupBackupPort, agentMLAGPortChannelifIndexStatus=agentMLAGPortChannelifIndexStatus, agent10GModulePartNumber=agent10GModulePartNumber, agentVMTracerSessionAutoVlanMode=agentVMTracerSessionAutoVlanMode, agentVTPMD5Digest=agentVTPMD5Digest, agentMLAGConfigurationConsistancyStatus=agentMLAGConfigurationConsistancyStatus, agentMLAGKeepaliveTimeout=agentMLAGKeepaliveTimeout, agentMLAGVlanRoutingPortForbiddenMode=agentMLAGVlanRoutingPortForbiddenMode, agentCDPConfigNeighborInfoHoldTime=agentCDPConfigNeighborInfoHoldTime, agentDCBXPFCWillingMode=agentDCBXPFCWillingMode, agentDOMbiasHighAlarm=agentDOMbiasHighAlarm, agentFIPSnoopingSessionENodeIfIndex=agentFIPSnoopingSessionENodeIfIndex, agentTemperature2=agentTemperature2, agentIPFilterConfigGroupExtension=agentIPFilterConfigGroupExtension, agentVMTracerSessionUrl=agentVMTracerSessionUrl, agentErrRecoveryPortSecurityCauseMode=agentErrRecoveryPortSecurityCauseMode, agentDCBXPFCOperErrors=agentDCBXPFCOperErrors, agentInventoryGroupExtension=agentInventoryGroupExtension, agentFAN3=agentFAN3, agentFIPSnoopingFCFENodeNumber=agentFIPSnoopingFCFENodeNumber, agentDOMtemperatureHighAlarm=agentDOMtemperatureHighAlarm, agentDCBXPgPriorityGroupId=agentDCBXPgPriorityGroupId, agentVtyPasswdCntSetToDefault=agentVtyPasswdCntSetToDefault, agentDCBXPgConfigEntry=agentDCBXPgConfigEntry, agentDCBXPFCConfigTable=agentDCBXPFCConfigTable, agentLinkStateConfigGroup=agentLinkStateConfigGroup, agentTemperatureFanStatusTable=agentTemperatureFanStatusTable, agentCDPConfigNeighborInfoTable=agentCDPConfigNeighborInfoTable, agentMLAGPeerGatewayMode=agentMLAGPeerGatewayMode, agentSwitchCurrUBootFileName=agentSwitchCurrUBootFileName, agentSwitchCurrBootFilesGroupExtension=agentSwitchCurrBootFilesGroupExtension, agentVtyPasswdCnt=agentVtyPasswdCnt, agentDOMVoltage=agentDOMVoltage, agentSerialSilentTimeSetToDefault=agentSerialSilentTimeSetToDefault, agentEvbVsiVersion=agentEvbVsiVersion, agentFIPSnoopingFCFVlan=agentFIPSnoopingFCFVlan, agentNetworkDhcpRestart=agentNetworkDhcpRestart, agentVMTracerIfIndex=agentVMTracerIfIndex, agentPortBackupConfigAdminMode=agentPortBackupConfigAdminMode, agentMLAGPeerLinkForbiddenVlans=agentMLAGPeerLinkForbiddenVlans, agentDCBXPgSyncedMode=agentDCBXPgSyncedMode, agentDCBXPgWillingMode=agentDCBXPgWillingMode, agent10GModuleInterfaceNumber=agent10GModuleInterfaceNumber, agentVTPOperatingMode=agentVTPOperatingMode, agentIpFilterConfigDelete=agentIpFilterConfigDelete, agentNetworkDhcpSetToInventoryClientIfClientId=agentNetworkDhcpSetToInventoryClientIfClientId, agentDCBXPgOperPriorityGroupId=agentDCBXPgOperPriorityGroupId, agentGBICInfoRevisionNumber=agentGBICInfoRevisionNumber, agentDCBXPgErrorReason=agentDCBXPgErrorReason, agentDOMTemperature=agentDOMTemperature, agentTransferCopyRunningConfigToSwitchDestFilename=agentTransferCopyRunningConfigToSwitchDestFilename, agentDCBXPFCPeerWillingMode=agentDCBXPFCPeerWillingMode, agentVlanVoiceVlanIDCreate=agentVlanVoiceVlanIDCreate, agentDCBXVersion=agentDCBXVersion, agentSwitchStormControlActionShutdownMode=agentSwitchStormControlActionShutdownMode, agentDOMbiasHighWarning=agentDOMbiasHighWarning, agentCDPConfigTransmitInterval=agentCDPConfigTransmitInterval, agentVMTracerVMHost=agentVMTracerVMHost, agentDCBXPFCPeerLocalifIndex=agentDCBXPFCPeerLocalifIndex, agentSwitchSnoopingGroupExtension=agentSwitchSnoopingGroupExtension, agentSwitchCurrVMTracerFileName=agentSwitchCurrVMTracerFileName, agentCDPConfigGroup=agentCDPConfigGroup, agentLinkStateGroupTable=agentLinkStateGroupTable, agentPowerSupplyStatusEntry=agentPowerSupplyStatusEntry, agentVMTracerSessionIndex=agentVMTracerSessionIndex, BridgeEvbTLVTC=BridgeEvbTLVTC, agentVMTracerSessionConnectionStatus=agentVMTracerSessionConnectionStatus, agentMldSnoopL2MulticastStaticMemberPorts=agentMldSnoopL2MulticastStaticMemberPorts, agentDCBXPFCOperMode=agentDCBXPFCOperMode, agentDOMrxpowerHighWarning=agentDOMrxpowerHighWarning, agentVTPDomainPassword=agentVTPDomainPassword, agentNetworkDhcpClientIfClientIdFormat=agentNetworkDhcpClientIfClientIdFormat, agentDCBXPgGroupBandwidth=agentDCBXPgGroupBandwidth, agentStormContorlConfigGroupExtension=agentStormContorlConfigGroupExtension, agentVtyGroupExtension=agentVtyGroupExtension, agentFIPSnoopingSessionIfIndex=agentFIPSnoopingSessionIfIndex, agentMLAGVlanRoutingPortTable=agentMLAGVlanRoutingPortTable, agentDCBXPFCPeerPriorityMask=agentDCBXPFCPeerPriorityMask, agentVTPPortConfigTable=agentVTPPortConfigTable, agentCDPConfigPortModeAdminMode=agentCDPConfigPortModeAdminMode, agentVlanVoiceConfigPriority=agentVlanVoiceConfigPriority, agentErrRecoveryBpduCauseMode=agentErrRecoveryBpduCauseMode, agentSwitchBroadcastControlMode=agentSwitchBroadcastControlMode, agentTemperature=agentTemperature, agentFIPSnoopingSessionTable=agentFIPSnoopingSessionTable, agentInventoryOpCodeVersion=agentInventoryOpCodeVersion, agentEvbVsiMacEntry=agentEvbVsiMacEntry, agentVlanVoiceConfigName=agentVlanVoiceConfigName, agentTransferDeleteGroup=agentTransferDeleteGroup, agentPortBackupGroupId=agentPortBackupGroupId, agentIpFilterConfigMask=agentIpFilterConfigMask, agentVMTracerVMName=agentVMTracerVMName, agentPowerSupplyTemperature2=agentPowerSupplyTemperature2, agentDCBXPgPeerMaxTrafficClass=agentDCBXPgPeerMaxTrafficClass, agentDCBXifIndex=agentDCBXifIndex, agentLinkStateGroupDownstreamPort=agentLinkStateGroupDownstreamPort, agentErrRecoveryConfigGroupExtension=agentErrRecoveryConfigGroupExtension, agentDCBXConfigEntry=agentDCBXConfigEntry, agent10GModuleTable=agent10GModuleTable, agentVlanVoiceConfigMacAddress=agentVlanVoiceConfigMacAddress, agentVoiceVlanConfigEntry=agentVoiceVlanConfigEntry, agentDCBXPgOperVersion=agentDCBXPgOperVersion, agentTemperatureFanStatusEntry=agentTemperatureFanStatusEntry, agentMLAGDelayRestore=agentMLAGDelayRestore, agentErrRecoveryStormCtrlCauseMode=agentErrRecoveryStormCtrlCauseMode, switchingExtension=switchingExtension, agentFIPSnoopingENodeEntry=agentFIPSnoopingENodeEntry, agentMldSnoopL2MulticastStaticActivePortMask=agentMldSnoopL2MulticastStaticActivePortMask, agentVMTracerIfCtlTable=agentVMTracerIfCtlTable, agentVMTracerVMMacAddress=agentVMTracerVMMacAddress, agentMLAGPeerLinkifStatus=agentMLAGPeerLinkifStatus, agentMldSnoopL2MulticastStaticMemberPortMask=agentMldSnoopL2MulticastStaticMemberPortMask, agentEvbVsiVlanId=agentEvbVsiVlanId, agentCDPConfigAdminMode=agentCDPConfigAdminMode, agentVTPV2Mode=agentVTPV2Mode, agentDOMtxpowerLowAlarm=agentDOMtxpowerLowAlarm, agentVlanVoiceConfigTable=agentVlanVoiceConfigTable, agentFIPSnoopingAdminMode=agentFIPSnoopingAdminMode, agentMLAGVlanRoutingPortEntry=agentMLAGVlanRoutingPortEntry, agentVTPVersion=agentVTPVersion, agentVtyTerminalLength=agentVtyTerminalLength, agentVoiceVlanConfigOperState=agentVoiceVlanConfigOperState, agentIpFilterConfigIndex=agentIpFilterConfigIndex, agentInventoryLoaderVersion=agentInventoryLoaderVersion, agentMLAGGroup=agentMLAGGroup, agentGBICInfoIndex=agentGBICInfoIndex, agentPortConfigExtensionClearStats=agentPortConfigExtensionClearStats, agentFIPSnoopingFCFSwitchName=agentFIPSnoopingFCFSwitchName, agentVTPMaxVlanNumSupported=agentVTPMaxVlanNumSupported, agentCDPConfigNumOutPkts=agentCDPConfigNumOutPkts, agentFIPSnoopingSessionKey=agentFIPSnoopingSessionKey, agentEvbifIndex=agentEvbifIndex, agentNetworkDhcpClientIfClientId=agentNetworkDhcpClientIfClientId, agentVlanVoiceConfigDelete=agentVlanVoiceConfigDelete, agentFIPSnoopingFCFFCMap=agentFIPSnoopingFCFFCMap, agentCDPConfigPortModeIfIndex=agentCDPConfigPortModeIfIndex, agentIPFilterConfigAdminMode=agentIPFilterConfigAdminMode, agentMLAGAdminMode=agentMLAGAdminMode, agentVMTracerVMVlanId=agentVMTracerVMVlanId, agentVMTracerSessionEntry=agentVMTracerSessionEntry, agentSwitchStormControlUnicastTable=agentSwitchStormControlUnicastTable, agentSwitchStormControlBroadcastTable=agentSwitchStormControlBroadcastTable, PYSNMP_MODULE_ID=switchingExtension, agentVMTracerSessionAllowVlan=agentVMTracerSessionAllowVlan, agentDOMBias=agentDOMBias, agentVoiceVlanConfigGroup=agentVoiceVlanConfigGroup, agentCDPConfigNeighborInfoDeviceID=agentCDPConfigNeighborInfoDeviceID, agentDCBXPgPeerStatus=agentDCBXPgPeerStatus, agentSerialSilentTime=agentSerialSilentTime, agentVMTracerSessionTable=agentVMTracerSessionTable, agentVTPConfigGroup=agentVTPConfigGroup, agentDCBXPgPeerGroupBandwidth=agentDCBXPgPeerGroupBandwidth, agentCDPConfigNeighborInfoIndex=agentCDPConfigNeighborInfoIndex, agentErrRecoveryUdldCauseMode=agentErrRecoveryUdldCauseMode, agentDOMrxpowerHighAlarm=agentDOMrxpowerHighAlarm, agentFIPSnoopingVlanAdminMode=agentFIPSnoopingVlanAdminMode, agentFIPSnoopingENodeIfIndex=agentFIPSnoopingENodeIfIndex, agentSwitchFlowControlIfIndex=agentSwitchFlowControlIfIndex, agentEvbVsiMacAddress=agentEvbVsiMacAddress, agentEvbVsiInstanceId=agentEvbVsiInstanceId, agentNetworkConfigGroupExtension=agentNetworkConfigGroupExtension, agentIgmpSnoopL2MulticastStaticVlanId=agentIgmpSnoopL2MulticastStaticVlanId, agentMLAGPeerLinkActiveVlans=agentMLAGPeerLinkActiveVlans, agentEvbOperRetransmissionExp=agentEvbOperRetransmissionExp, agentVMTracerAdminMode=agentVMTracerAdminMode, agentIgmpSnoopL2MulticastStaticTable=agentIgmpSnoopL2MulticastStaticTable, agentDCBXPFCPeerStatus=agentDCBXPFCPeerStatus, agentTemperature4=agentTemperature4, agentMacMoveUpdatetMode=agentMacMoveUpdatetMode, agentPowerSupplyRevisionNumber=agentPowerSupplyRevisionNumber, agentMLAGSystemMac=agentMLAGSystemMac, agentTransferCopyRunningConfigStart=agentTransferCopyRunningConfigStart, agentCDPConfigResetDeviceInformation=agentCDPConfigResetDeviceInformation, agentMLAGPortChannelTable=agentMLAGPortChannelTable, agentDOMtemperatureHighWarning=agentDOMtemperatureHighWarning, agentVoiceVlanConfigIfModeValue=agentVoiceVlanConfigIfModeValue, agentFIPSnoopingENodeVlan=agentFIPSnoopingENodeVlan, agentIpFilterConfigEntry=agentIpFilterConfigEntry, agentCDPConfigNeighborInfoManagementAddress=agentCDPConfigNeighborInfoManagementAddress, agentDOMTxpower=agentDOMTxpower, agentVoiceVlanConfigIndex=agentVoiceVlanConfigIndex, agentIpFilterConfigName=agentIpFilterConfigName, agentVlanVoiceConfigEntry=agentVlanVoiceConfigEntry, agentTransferDeleteStatus=agentTransferDeleteStatus, agentSwitchBcastStormIfIndex=agentSwitchBcastStormIfIndex, agentPortConfigExtensionTable=agentPortConfigExtensionTable, agentVlanVoiceConfigGroup=agentVlanVoiceConfigGroup, agentVTPVlanNumSupported=agentVTPVlanNumSupported, agentDOMtxpowerLowWarning=agentDOMtxpowerLowWarning, agentEvbVsiId=agentEvbVsiId, agentVMTracerSessionName=agentVMTracerSessionName)
mibBuilder.exportSymbols("SWITCHING-EXTENSION-MIB", agentSwitchStormControlMulticastTable=agentSwitchStormControlMulticastTable, agentEvbVsiMode=agentEvbVsiMode, agentSwitchUcastStormIfIndex=agentSwitchUcastStormIfIndex, agent10GModuleType=agent10GModuleType, agentTransferCopyGroup=agentTransferCopyGroup, agentSwitchCurrBootLoaderFileName=agentSwitchCurrBootLoaderFileName, agentCDPConfigNeighborInfoLocalIF=agentCDPConfigNeighborInfoLocalIF, agentErrDetectMacFlapCauseMode=agentErrDetectMacFlapCauseMode, agentVMTracerVMTable=agentVMTracerVMTable, agentIgmpSnoopL2MulticastStaticActivePortMask=agentIgmpSnoopL2MulticastStaticActivePortMask, agentVMTracerVMIndex=agentVMTracerVMIndex, agentDOMbiasLowAlarm=agentDOMbiasLowAlarm, agentPowerSupplyManufacturingDate=agentPowerSupplyManufacturingDate, agentFIPSnoopingFCFEntry=agentFIPSnoopingFCFEntry, agentSwitchMcastStormIfIndex=agentSwitchMcastStormIfIndex, agentSwitchFlowControlEntry=agentSwitchFlowControlEntry, agentGBICInfoVendorName=agentGBICInfoVendorName, agentDOMvotageLowAlarm=agentDOMvotageLowAlarm, agentEvbOperForwardingMode=agentEvbOperForwardingMode, agentVMTracerIfCtlEntry=agentVMTracerIfCtlEntry, agentDCBXPgAdvertiseMode=agentDCBXPgAdvertiseMode, agentDCBXPFCPeerMaxTrafficClass=agentDCBXPFCPeerMaxTrafficClass, agentGBICInfoInterfaceNumber=agentGBICInfoInterfaceNumber, agentPowerSupplyTemperature1=agentPowerSupplyTemperature1, agentLinkStateConfigAdminMode=agentLinkStateConfigAdminMode, agentDOMtransceiverIndex=agentDOMtransceiverIndex, agentFIPSnoopingSessionEntry=agentFIPSnoopingSessionEntry, agentDCBXPFCPeerEnableMode=agentDCBXPFCPeerEnableMode, agentEvbVsiMacTable=agentEvbVsiMacTable, agent10GModuleManufacturingDate=agent10GModuleManufacturingDate, agentVTPPortConfigTrunkMode=agentVTPPortConfigTrunkMode, agentPortBackupGroupMode=agentPortBackupGroupMode, agentVMTracerVMPortGroup=agentVMTracerVMPortGroup, agentFIPSnoopingENodeNameID=agentFIPSnoopingENodeNameID, agentVMTracerVMHostCpuSpeed=agentVMTracerVMHostCpuSpeed, agentMldSnoopL2MulticastStaticMacAddress=agentMldSnoopL2MulticastStaticMacAddress, agentSwitchCurrKernelFileName=agentSwitchCurrKernelFileName, agentCDPConfigPortModeTable=agentCDPConfigPortModeTable, agent10GModuleIndex=agent10GModuleIndex, agentDCBXPFCOperPeerSyncd=agentDCBXPFCOperPeerSyncd, agentSwitchStormControlActionTable=agentSwitchStormControlActionTable, agentMLAGPortChannelActiveVlans=agentMLAGPortChannelActiveVlans, agentDOMvotageHighWarning=agentDOMvotageHighWarning, agentFANChipType=agentFANChipType, agentTemperature3=agentTemperature3, agentDCBXPFCEnableMode=agentDCBXPFCEnableMode, agentVMTracerSessionPassword=agentVMTracerSessionPassword, agentSerialPasswdCntSetToDefault=agentSerialPasswdCntSetToDefault, agentPortConfigExtensionIfIndex=agentPortConfigExtensionIfIndex, agentEvbGroup=agentEvbGroup, agentGBICInfoTable=agentGBICInfoTable, agentIgmpSnoopL2MulticastStaticMacAddress=agentIgmpSnoopL2MulticastStaticMacAddress, agentVMTracerVMEntry=agentVMTracerVMEntry, agentTemperature1=agentTemperature1, agentIpFilterConfigCreate=agentIpFilterConfigCreate, agentSerialPasswdCnt=agentSerialPasswdCnt, agentDCBXPFCOperMaxVersion=agentDCBXPFCOperMaxVersion, agentTransferDeleteStart=agentTransferDeleteStart, agentPortConfigExtensionAdminMode=agentPortConfigExtensionAdminMode, agentEvbForwardingMode=agentEvbForwardingMode, agent10GModuleInfoGroupExtension=agent10GModuleInfoGroupExtension, agentMLAGPortChannelConsistancy=agentMLAGPortChannelConsistancy, agentVlanVoiceMacMask=agentVlanVoiceMacMask, agent10GModuleSerialNumber=agent10GModuleSerialNumber, agent10GModuleSlotIndex=agent10GModuleSlotIndex, agentSwitchStormControlActionTrapMode=agentSwitchStormControlActionTrapMode, agentDOMrxpowerLowAlarm=agentDOMrxpowerLowAlarm, agentDOMInterval=agentDOMInterval, agentSwitchFlowControlTable=agentSwitchFlowControlTable, agentFIPSnoopingSessionFCFMacAddress=agentFIPSnoopingSessionFCFMacAddress, agentPortBackupGroupStatus=agentPortBackupGroupStatus, agentDCBXPgConfigTable=agentDCBXPgConfigTable, agentIgmpSnoopL2MulticastStaticIndex=agentIgmpSnoopL2MulticastStaticIndex, agentDCBXAdminMode=agentDCBXAdminMode, agentVMTracerSessionClear=agentVMTracerSessionClear, agentSwitchFlowControlAdminMode=agentSwitchFlowControlAdminMode, agentIgmpSnoopL2MulticastStaticMemberPortMask=agentIgmpSnoopL2MulticastStaticMemberPortMask, agentSwitchMcastStormExtensionPktRate=agentSwitchMcastStormExtensionPktRate, agentFAN4=agentFAN4, agentFIPSnoopingVlanConfigEntry=agentFIPSnoopingVlanConfigEntry, agentPortConfigExtensionEntry=agentPortConfigExtensionEntry, agentVlanVoiceConfigIndex=agentVlanVoiceConfigIndex, agentVTPPortConfigEntry=agentVTPPortConfigEntry, agentMLAGPeerLinkGroup=agentMLAGPeerLinkGroup, agentSwitchStormControlActionEntry=agentSwitchStormControlActionEntry, agentMldSnoopL2MulticastStaticIndex=agentMldSnoopL2MulticastStaticIndex, agentPortBackupGroupTable=agentPortBackupGroupTable, agentGBICInfoPartNumber=agentGBICInfoPartNumber, agentEvbOperCapability=agentEvbOperCapability, agentEvbConfigTable=agentEvbConfigTable, agentIpFilterConfigTable=agentIpFilterConfigTable, agentCDPConfigPortModeEntry=agentCDPConfigPortModeEntry, agentDOMTable=agentDOMTable, agentDOMGroup=agentDOMGroup, agentEvbVsiGroup=agentEvbVsiGroup, agentSwitchUcastStormExtensionPktRate=agentSwitchUcastStormExtensionPktRate, agentLinkStateGroupEntry=agentLinkStateGroupEntry, agentMldSnoopL2MulticastStaticTable=agentMldSnoopL2MulticastStaticTable, agentPowerSupplyManufacturerLocation=agentPowerSupplyManufacturerLocation, agentErrDetectLinkFlapCauseMode=agentErrDetectLinkFlapCauseMode, agentTransferDeleteSwitchFilename=agentTransferDeleteSwitchFilename, agentVMTracerVMHostMemory=agentVMTracerVMHostMemory, agentDCBXConfigTable=agentDCBXConfigTable, agentCDPConfigNeighborInfoPlatform=agentCDPConfigNeighborInfoPlatform, agentCDPConfigResetNumPkts=agentCDPConfigResetNumPkts, agentDCBXPFCOperVersion=agentDCBXPFCOperVersion, agentVMTracerGroup=agentVMTracerGroup, agentSerialGroupExtension=agentSerialGroupExtension, agentGBICInfoEntry=agentGBICInfoEntry, agentEvbConfigEntry=agentEvbConfigEntry, agentDCBXPgPeerPriorityGroupId=agentDCBXPgPeerPriorityGroupId, agentDCBXPFCOperPriorityMask=agentDCBXPFCOperPriorityMask, agentSwitchStormControlBroadcastEntry=agentSwitchStormControlBroadcastEntry, agent10GModuleEntry=agent10GModuleEntry, agentMLAGDomainId=agentMLAGDomainId, agentFAN2=agentFAN2, agentVTPPruningMode=agentVTPPruningMode, agentPortConfigExtensionMaxFrameSize=agentPortConfigExtensionMaxFrameSize, agentGBICInfoComplianceCode=agentGBICInfoComplianceCode, agent10GModulePortIndex=agent10GModulePortIndex, agentErrRecoveryInterval=agentErrRecoveryInterval, agentEvbCapability=agentEvbCapability, agentSwitchCurrBootRomFileName=agentSwitchCurrBootRomFileName, agentSwitchCurrBootOpCodeFileName=agentSwitchCurrBootOpCodeFileName, agentVoiceVlanAdminMode=agentVoiceVlanAdminMode, agentFIPSnoopingFCFKey=agentFIPSnoopingFCFKey, agentDCBXPFCConfigEntry=agentDCBXPFCConfigEntry, agentSwitchUnicastControlMode=agentSwitchUnicastControlMode, agentDOMvotageHighAlarm=agentDOMvotageHighAlarm, agentDCBXPgPeerEnableMode=agentDCBXPgPeerEnableMode, agentDOMEntry=agentDOMEntry, agentVoiceVlanConfigTable=agentVoiceVlanConfigTable, agentFIPSnoopingFCFTable=agentFIPSnoopingFCFTable, agentEvbRetransmissionExp=agentEvbRetransmissionExp, agent10GModuleUnitIndex=agent10GModuleUnitIndex, agentVtyTerminalLengthSetToDefault=agentVtyTerminalLengthSetToDefault, agentPortBackupConfigGroup=agentPortBackupConfigGroup, agentMldSnoopL2MulticastStaticEntry=agentMldSnoopL2MulticastStaticEntry, agentFIPSnoopingVlanIndex=agentFIPSnoopingVlanIndex, agentPowerConsumption=agentPowerConsumption, agentFIPSnoopingFCFFabricName=agentFIPSnoopingFCFFabricName, agentVTPConfigLastModified=agentVTPConfigLastModified, agentPortConfigExtensionLinkTrapMode=agentPortConfigExtensionLinkTrapMode, agentErrRecoveryMacFlapCauseMode=agentErrRecoveryMacFlapCauseMode, agentDOMbiasLowWarning=agentDOMbiasLowWarning, agentErrRecoveryLinkFlapCauseMode=agentErrRecoveryLinkFlapCauseMode, agentVMTracerVMHostSystem=agentVMTracerVMHostSystem, agentMLAGVlanRoutingPortifIndex=agentMLAGVlanRoutingPortifIndex, agentVoiceVlanConfigIfMode=agentVoiceVlanConfigIfMode, agentInventoryLabelRevNumber=agentInventoryLabelRevNumber, agentVMTracerVMInterface=agentVMTracerVMInterface, agentLinkStateGroupMode=agentLinkStateGroupMode, agentVTPLocalUpdaterID=agentVTPLocalUpdaterID, agentMLAGPortChannelEntry=agentMLAGPortChannelEntry, agentDCBXPFCOperMaxTrafficClass=agentDCBXPFCOperMaxTrafficClass, agentConfigGroupExtension=agentConfigGroupExtension, agentPowerSupplyName=agentPowerSupplyName, agentCLIConfigGroupExtension=agentCLIConfigGroupExtension, agentPowerSupplyFanDuty=agentPowerSupplyFanDuty, agentPowerSupplyUnitIndex=agentPowerSupplyUnitIndex, agentSwitchMcastStormExtensionAdminMode=agentSwitchMcastStormExtensionAdminMode, agentDOMAdminMode=agentDOMAdminMode, agent10GModuleRevisionNumber=agent10GModuleRevisionNumber, agentVlanVoiceConfigMacMask=agentVlanVoiceConfigMacMask, agentVMTracerSessionUsername=agentVMTracerSessionUsername, agentDCBXPgDCBXOperVersion=agentDCBXPgDCBXOperVersion, agentVTPConfigRevision=agentVTPConfigRevision, agentFIPSnoopingENodeTable=agentFIPSnoopingENodeTable, agentEvbAdminMode=agentEvbAdminMode, agentEvbVsiState=agentEvbVsiState, agentPowerSupplyStatus=agentPowerSupplyStatus, agentSwitchCurrBootConfigFileName=agentSwitchCurrBootConfigFileName, agentFIPSnoopingFCFIfIndex=agentFIPSnoopingFCFIfIndex, agentGBICInfoManufacturingDate=agentGBICInfoManufacturingDate, agentIpFilterConfigIP=agentIpFilterConfigIP, agentVMTracerVMHostCpuCores=agentVMTracerVMHostCpuCores, agentIgmpSnoopL2MulticastStaticActivePorts=agentIgmpSnoopL2MulticastStaticActivePorts, agentCDPConfigNeighborInfoEntry=agentCDPConfigNeighborInfoEntry, agentDOMrxpowerLowWarning=agentDOMrxpowerLowWarning, agentDOMtemperatureLowWarning=agentDOMtemperatureLowWarning, agentVlanVoiceAdminMode=agentVlanVoiceAdminMode, agentDCBXGroup=agentDCBXGroup, agentFIPSnoopingENodeKey=agentFIPSnoopingENodeKey, agentMLAGMemberLinkdownMode=agentMLAGMemberLinkdownMode, agentSwitchStormControlUnicastEntry=agentSwitchStormControlUnicastEntry, agentDCBXPFCAdvertiseMode=agentDCBXPFCAdvertiseMode, agentSwitchConfigGroupExtension=agentSwitchConfigGroupExtension, agentSwitchDot3FlowControlMode=agentSwitchDot3FlowControlMode, agentVlanVoicePriority=agentVlanVoicePriority, agentVTPDomainName=agentVTPDomainName, agent10GModuleComplianceCode=agent10GModuleComplianceCode, agentPowerSupplyFanSpeed=agentPowerSupplyFanSpeed, agentFAN1=agentFAN1, agentPortBackupGroupActivePort=agentPortBackupGroupActivePort, agentMLAGPortChannelId=agentMLAGPortChannelId, agentEvbVsiTable=agentEvbVsiTable, agentDOMtxpowerHighAlarm=agentDOMtxpowerHighAlarm, agentIgmpSnoopL2MulticastStaticEntry=agentIgmpSnoopL2MulticastStaticEntry, agentEvbVsiMgrId=agentEvbVsiMgrId, agentTransferConfigGroupExtension=agentTransferConfigGroupExtension, agentMldSnoopL2MulticastStaticVlanId=agentMldSnoopL2MulticastStaticVlanId)
