#
# PySNMP MIB module NetWare-Server-Trend-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NetWare-Server-Trend-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:26:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
InternationalDisplayString, = mibBuilder.importSymbols("HOST-RESOURCES-MIB", "InternationalDisplayString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, enterprises, ModuleIdentity, Bits, Integer32, TimeTicks, NotificationType, ObjectIdentity, MibIdentifier, Gauge32, NotificationType, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Counter64, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "enterprises", "ModuleIdentity", "Bits", "Integer32", "TimeTicks", "NotificationType", "ObjectIdentity", "MibIdentifier", "Gauge32", "NotificationType", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Counter64", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
novell = MibIdentifier((1, 3, 6, 1, 4, 1, 23))
mibDoc = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2))
nwTrend = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 26))
nwtControl = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 26, 1))
nwtTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 2, 26, 2))
class NWTime(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class Seconds(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

nwtControlTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 26, 1, 1), )
if mibBuilder.loadTexts: nwtControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwtControlTable.setDescription('A list of data table entries')
nwtControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 26, 1, 1, 1), ).setIndexNames((0, "NetWare-Server-Trend-MIB", "nwtControlAttributeClass"), (0, "NetWare-Server-Trend-MIB", "nwtControlIndex"))
if mibBuilder.loadTexts: nwtControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwtControlEntry.setDescription('A list of parameters that describe the thresholds and trends being performed.')
nwtControlAttributeClass = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 26, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27))).clone(namedValues=NamedValues(("avgLoggedInUsers", 1), ("avgConnections", 2), ("fileReads", 3), ("fileWrites", 4), ("fileReadKBytes", 5), ("fileWriteKBytes", 6), ("lslInPackets", 7), ("lslOutPackets", 8), ("ncpRequests", 9), ("pctCpuUtilization", 10), ("pctCacheBuffers", 11), ("pctCodeAndDataMemory", 12), ("pctAllocatedMemory", 13), ("pctDirtyPacketReceiveBuffers", 14), ("physIfInPackets", 15), ("physIfOutPackets", 16), ("physIfInKBytes", 17), ("physIfOutKBytes", 18), ("queueAvgNumReadyJobs", 19), ("queueAvgNumReadyKBytes", 20), ("queueAvgNextJobWaitTime", 21), ("volumePctFreeSpace", 22), ("pctCacheHitRate", 23), ("diskPctFreeRedirectionArea", 24), ("serverProcesses", 25), ("noECBCount", 26), ("osPktRcvBuffer", 27)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwtControlAttributeClass.setStatus('mandatory')
if mibBuilder.loadTexts: nwtControlAttributeClass.setDescription("An enumeration which identifies the attribute being monitored. See also the definition of the corresponding trap. The pctCpuUtilization is monitored for each CPU in the server. The attributes whose name starts with 'physIf', are monitored for each physical network interface on the server. The attributes whose name starts with 'queue', are monitored for each queue on the server. The attributes whose name starts with 'volume', are monitored for each volume on the server. The attributes whose name starts with 'disk' are monitored for each disk on the server. All other attributes have a single instance.")
nwtControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 26, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwtControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nwtControlIndex.setDescription('An index to be used to access the nwtHistoryTable to retrieve the stored samples for this variable. This value must remain constant at least from one re- initialization of the agent to the next re- initialization.')
nwtControlAttributeInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 26, 1, 1, 1, 3), InternationalDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwtControlAttributeInstance.setStatus('mandatory')
if mibBuilder.loadTexts: nwtControlAttributeInstance.setDescription("A printable string which uniquely, and permanently, identifies one particular 'instance' of the attribute. For example, if nwtControlAttributeClass specifies an attribute of a NetWare volume, nwtControlAttributeInstance will specify the volume to which this particular instance pertains. A zero-length string will be returned if the attribute can not have multiple instances.")
nwtControlSampleInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 26, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("fiveSeconds", 1), ("tenSeconds", 2), ("fifteenSeconds", 3), ("thirtySeconds", 4), ("oneMinute", 5), ("fiveMinutes", 6), ("fifteenMinutes", 7), ("thirtyMinutes", 8), ("oneHour", 9), ("fourHours", 10), ("eightHours", 11), ("oneDay", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwtControlSampleInterval.setStatus('mandatory')
if mibBuilder.loadTexts: nwtControlSampleInterval.setDescription('An enumeration which identifies the interval over which the data is sampled, compared with the rising and falling thresholds, and saved in the history. Intervals will be aligned to the real world clock. For instance, hourly samples will be taken on the hour, 15- minute samples will be taken at n:00, n:15, n:30, and n:45, etc. If a valid sample can not be taken for any reason (server down, excessive timer skew, etc.) then the sample value will be set to the invalid value. If the interval is changed, any associated history will be discarded and a new history collection commenced.')
nwtControlSampleType = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 26, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("absoluteValue", 1), ("deltaValue", 2), ("averageValue", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwtControlSampleType.setStatus('mandatory')
if mibBuilder.loadTexts: nwtControlSampleType.setDescription("The method of sampling the selected variable and calculating the value to be compared against the thresholds. If the value of this object is 'absoluteValue', the value of the selected variable at the end of the sampling interval will be compared directly with both the nwtControlRisingThreshold and the nwtControlFallingThreshold values. If the value of this object is 'deltaValue', the value of the selected variable at the end of the sampling interval will be subtracted from its value at the end of the previous sampling interval, and the difference compared with both the nwtControlRisingThreshold and the nwtControlFallingThreshold values. If the value of this object is 'averageValue', the average value of the selected variable over the sampling interval will be compared with both the nwtControlRisingThreshold and the nwtControlFallingThreshold values. ")
nwtControlSampleInvalidValue = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 26, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwtControlSampleInvalidValue.setStatus('mandatory')
if mibBuilder.loadTexts: nwtControlSampleInvalidValue.setDescription("The value used to represent 'invalid' for this variable. Any sample of this variable having a value equal to the value of nwtControlSampleInvalidValue is not a valid sample and should be treated accordingly.")
nwtControlLastSampleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 26, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwtControlLastSampleValue.setStatus('mandatory')
if mibBuilder.loadTexts: nwtControlLastSampleValue.setDescription("The value of the variable during the last sampling period. The value during the current sampling period is not made available until the period is completed. Note that if the associated value nwtControlSampleType is set to 'deltaValue', the value of this object is the difference in the sampled variable since the last sample. If the value of nwtControlSampleType is 'averageValue', the value of this object is the average value of the selected variable over the sampling interval.")
nwtControlReferenceTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 26, 1, 1, 1, 8), NWTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwtControlReferenceTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: nwtControlReferenceTimeStamp.setDescription('The absolute date and time (UTC) of the beginning of the history associated with this control entry, expressed as seconds since midnight on January 1, 1970. The timestamp of any sample in the history may be computed as follows: nwtControlReferenceTimeStamp + (nwtHistorySampleIndex * intervalInSeconds) A value of 0 indicates that there is no history available for this variable.')
nwtControlThresholdState = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 26, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwtControlThresholdState.setStatus('mandatory')
if mibBuilder.loadTexts: nwtControlThresholdState.setDescription("The current state of threshold monitoring for this nwtControlEntry. When the state is 'enabled', the sampled value will be compared to the appropriate threshold, and a trap generated if appropriate. When the state is 'disabled', the thresholds will be ignored, and no trap will ever be generated.")
nwtControlThresholdType = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 26, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("risingAlarm", 1), ("fallingAlarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwtControlThresholdType.setStatus('mandatory')
if mibBuilder.loadTexts: nwtControlThresholdType.setDescription('An enumeration that indicates whether a trap is to be generated when the sampled variable rises to the nwtControlRisingThreshold, or when it falls to the nwtControlFallingThreshold.')
nwtControlRisingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 26, 1, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwtControlRisingThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: nwtControlRisingThreshold.setDescription("A threshold for the sampled variable. When the current sampled value is greater than or equal to this threshold, and the value at the last sampling interval was less than this threshold, and the value of nwtControlThresholdType is 'risingAlarm', a single trap will be generated. After a a trap is generated, another such trap will not be generated until the sampled value falls below this threshold and reaches the nwtControlFallingThreshold.")
nwtControlFallingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 26, 1, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwtControlFallingThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: nwtControlFallingThreshold.setDescription("A threshold for the sampled variable. When the current sampled value is less than or equal to this threshold, and the value at the last sampling interval was greater than this threshold, and the value of nwtControlThresholdType is 'fallingAlarm', a single trap will be generated. After a trap is generated, another such trap will not be generated until the sampled value rises above this threshold and reaches the nwtControlRisingThreshold.")
nwtControlHistoryState = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 26, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwtControlHistoryState.setStatus('mandatory')
if mibBuilder.loadTexts: nwtControlHistoryState.setDescription("The current state of history collection for this nwtControlEntry. When the state is 'enabled', each sampled value will be added to the history. When the state is 'disabled', sampled values will not be added to the stored history.")
nwtControlHistoryLastSampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 26, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwtControlHistoryLastSampleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nwtControlHistoryLastSampleIndex.setDescription('The value of nwtHistorySampleIndex for the most recent sample in the associated history. A value of 0 indicates that there is no history available for this variable.')
nwtControlHistoryBucketsRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 26, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nwtControlHistoryBucketsRequested.setStatus('mandatory')
if mibBuilder.loadTexts: nwtControlHistoryBucketsRequested.setDescription('The requested number of discrete sampling intervals over which data should be saved in the part of the nwtHistoryTable associated with this sampled variable. When this object is modified, the agent should set nwtControlHistoryBucketsGranted as closely to this object as is possible for the particular agent implementation, the local policy, and available resources. If the size of the history is increased, no history data will be lost. If the size of the history is decreased, the oldest samples will be discarded as necessary.')
nwtControlHistoryBucketsGranted = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 26, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwtControlHistoryBucketsGranted.setStatus('mandatory')
if mibBuilder.loadTexts: nwtControlHistoryBucketsGranted.setDescription('The number of discrete sampling intervals over which data shall be saved in the part of the nwtHistoryTable associated with this sampled variable. There will be times when the actual number of buckets associated with this entry is less than the value of this object. In this case, at the end of each sampling interval, a new bucket will be added to the part of the nwtHistoryTable associated with this nwtControlEntry. When the number of buckets reaches the value of this object and a new bucket is to be added to the part of the nwtHistoryTable associated with this nwtControlEntry, the oldest bucket associated with this nwtControlEntry shall be deleted by the agent so that the new bucket can be added.')
nwtControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 26, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwtControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nwtControlStatus.setDescription("The current status of the attribute instance monitored by this nwtControlEntry. As new volumes, disks, adapters, etc. are added to the server, entries for the new instances of each monitored attribute will automatically be added to this table, using appropriate default values for thresholds etc. From time-to-time, volumes, disks, adapters, etc. may also be permanently removed from the server; however, the entries for those instances in this table, and any associated histories, will continue to exist. A value of 'valid' indicates that the instance defined by this nwtControlEntry is present in the server. A value of 'invalid' indicates that the instance defined by this nwtControlEntry is no longer present in the server. Any associated history data is still available.")
nwtHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 23, 2, 26, 1, 2), )
if mibBuilder.loadTexts: nwtHistoryTable.setStatus('mandatory')
if mibBuilder.loadTexts: nwtHistoryTable.setDescription('A list of history data sample entries')
nwtHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 23, 2, 26, 1, 2, 1), ).setIndexNames((0, "NetWare-Server-Trend-MIB", "nwtHistoryControlIndex"), (0, "NetWare-Server-Trend-MIB", "nwtHistorySampleIndex"))
if mibBuilder.loadTexts: nwtHistoryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nwtHistoryEntry.setDescription('An historical sample of the variable defined in the corresponding nwtControlEntry, which set up the parameters for a regular collection of these samples')
nwtHistoryControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 26, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwtHistoryControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nwtHistoryControlIndex.setDescription('The history of which this entry is a part. The history identified by a particular value of this index is the same history as identified by the same value of nwtControlIndex.')
nwtHistorySampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 26, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwtHistorySampleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nwtHistorySampleIndex.setDescription('An index that uniquely identifies the particular sample this entry represents among all samples associated with the same nwtControlEntry. This index starts at 1 and increases by one as each interval passes. For periods when the server is down, or the agent is not running, the corresponding value of nwtHistorySampleValue will be equal to the value of nwtControlSampleInvalidValue. The timestamp of any sample in the history may be computed as follows: nwtControlReferenceTimeStamp + (nwtHistorySampleIndex * intervalInSeconds)')
nwtHistorySampleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 23, 2, 26, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nwtHistorySampleValue.setStatus('mandatory')
if mibBuilder.loadTexts: nwtHistorySampleValue.setDescription('The value of the monitored object at the time the sample was taken.')
nwtServerName = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 26, 2, 1), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48)))
if mibBuilder.loadTexts: nwtServerName.setStatus('mandatory')
if mibBuilder.loadTexts: nwtServerName.setDescription('The physical name of this server')
nwtTrapTime = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 26, 2, 2), NWTime())
if mibBuilder.loadTexts: nwtTrapTime.setStatus('mandatory')
if mibBuilder.loadTexts: nwtTrapTime.setDescription('The time in seconds since midnight January 1st 1970 Universal Coordinated Time UTC.')
nwtThreshold = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 26, 2, 3), Integer32())
if mibBuilder.loadTexts: nwtThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: nwtThreshold.setDescription('The threshold value that has been exceeded.')
nwtInterval = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 26, 2, 4), Seconds())
if mibBuilder.loadTexts: nwtInterval.setStatus('mandatory')
if mibBuilder.loadTexts: nwtInterval.setDescription('The sample interval in seconds.')
nwtInterfaceName = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 26, 2, 5), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)))
if mibBuilder.loadTexts: nwtInterfaceName.setStatus('mandatory')
if mibBuilder.loadTexts: nwtInterfaceName.setDescription('The name of the physical interface.')
nwtQueueName = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 26, 2, 6), InternationalDisplayString())
if mibBuilder.loadTexts: nwtQueueName.setStatus('mandatory')
if mibBuilder.loadTexts: nwtQueueName.setDescription('The name of the queue.')
nwtVolumeName = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 26, 2, 7), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)))
if mibBuilder.loadTexts: nwtVolumeName.setStatus('mandatory')
if mibBuilder.loadTexts: nwtVolumeName.setDescription('The physical name of the volume.')
nwtDiskName = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 26, 2, 8), InternationalDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)))
if mibBuilder.loadTexts: nwtDiskName.setStatus('mandatory')
if mibBuilder.loadTexts: nwtDiskName.setDescription('The name of the disk.')
nwtCPUDescription = MibScalar((1, 3, 6, 1, 4, 1, 23, 2, 26, 2, 9), InternationalDisplayString())
if mibBuilder.loadTexts: nwtCPUDescription.setStatus('mandatory')
if mibBuilder.loadTexts: nwtCPUDescription.setDescription('The processor description.')
nwtThresholdLoggedInUsers = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 26) + (0,1)).setObjects(("NetWare-Server-Trend-MIB", "nwtServerName"), ("NetWare-Server-Trend-MIB", "nwtTrapTime"), ("NetWare-Server-Trend-MIB", "nwtThreshold"), ("NetWare-Server-Trend-MIB", "nwtInterval"))
if mibBuilder.loadTexts: nwtThresholdLoggedInUsers.setDescription('The average number of logged in users exceeded the threshold')
nwtThresholdConnections = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 26) + (0,2)).setObjects(("NetWare-Server-Trend-MIB", "nwtServerName"), ("NetWare-Server-Trend-MIB", "nwtTrapTime"), ("NetWare-Server-Trend-MIB", "nwtThreshold"), ("NetWare-Server-Trend-MIB", "nwtInterval"))
if mibBuilder.loadTexts: nwtThresholdConnections.setDescription('The average number of connections exceeded the threshold')
nwtThresholdFileReads = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 26) + (0,3)).setObjects(("NetWare-Server-Trend-MIB", "nwtServerName"), ("NetWare-Server-Trend-MIB", "nwtTrapTime"), ("NetWare-Server-Trend-MIB", "nwtThreshold"), ("NetWare-Server-Trend-MIB", "nwtInterval"))
if mibBuilder.loadTexts: nwtThresholdFileReads.setDescription('The number of file system reads exceeded the threshold')
nwtThresholdFileWrites = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 26) + (0,4)).setObjects(("NetWare-Server-Trend-MIB", "nwtServerName"), ("NetWare-Server-Trend-MIB", "nwtTrapTime"), ("NetWare-Server-Trend-MIB", "nwtThreshold"), ("NetWare-Server-Trend-MIB", "nwtInterval"))
if mibBuilder.loadTexts: nwtThresholdFileWrites.setDescription('The number of file system writes exceeded the threshold')
nwtThresholdFileReadKBytes = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 26) + (0,5)).setObjects(("NetWare-Server-Trend-MIB", "nwtServerName"), ("NetWare-Server-Trend-MIB", "nwtTrapTime"), ("NetWare-Server-Trend-MIB", "nwtThreshold"), ("NetWare-Server-Trend-MIB", "nwtInterval"))
if mibBuilder.loadTexts: nwtThresholdFileReadKBytes.setDescription('The number of KBytes read from file system exceeded the threshold')
nwtThresholdFileWriteKBytes = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 26) + (0,6)).setObjects(("NetWare-Server-Trend-MIB", "nwtServerName"), ("NetWare-Server-Trend-MIB", "nwtTrapTime"), ("NetWare-Server-Trend-MIB", "nwtThreshold"), ("NetWare-Server-Trend-MIB", "nwtInterval"))
if mibBuilder.loadTexts: nwtThresholdFileWriteKBytes.setDescription('The number of KBytes written to file system exceeded the threshold')
nwtThresholdLslInPackets = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 26) + (0,7)).setObjects(("NetWare-Server-Trend-MIB", "nwtServerName"), ("NetWare-Server-Trend-MIB", "nwtTrapTime"), ("NetWare-Server-Trend-MIB", "nwtThreshold"), ("NetWare-Server-Trend-MIB", "nwtInterval"))
if mibBuilder.loadTexts: nwtThresholdLslInPackets.setDescription('The total packets received by the server exceeded the threshold')
nwtThresholdLslOutPackets = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 26) + (0,8)).setObjects(("NetWare-Server-Trend-MIB", "nwtServerName"), ("NetWare-Server-Trend-MIB", "nwtTrapTime"), ("NetWare-Server-Trend-MIB", "nwtThreshold"), ("NetWare-Server-Trend-MIB", "nwtInterval"))
if mibBuilder.loadTexts: nwtThresholdLslOutPackets.setDescription('The total packets transmitted by the server exceeded the threshold')
nwtThresholdNcpRequests = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 26) + (0,9)).setObjects(("NetWare-Server-Trend-MIB", "nwtServerName"), ("NetWare-Server-Trend-MIB", "nwtTrapTime"), ("NetWare-Server-Trend-MIB", "nwtThreshold"), ("NetWare-Server-Trend-MIB", "nwtInterval"))
if mibBuilder.loadTexts: nwtThresholdNcpRequests.setDescription('The number of NCPs processed by the server exceeded the threshold')
nwtThresholdPctCpuUtilization = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 26) + (0,10)).setObjects(("NetWare-Server-Trend-MIB", "nwtServerName"), ("NetWare-Server-Trend-MIB", "nwtTrapTime"), ("NetWare-Server-Trend-MIB", "nwtThreshold"), ("NetWare-Server-Trend-MIB", "nwtInterval"), ("NetWare-Server-Trend-MIB", "nwtCPUDescription"))
if mibBuilder.loadTexts: nwtThresholdPctCpuUtilization.setDescription('CPU utilization exceeded the threshold')
nwtThresholdPctCacheBuffers = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 26) + (0,11)).setObjects(("NetWare-Server-Trend-MIB", "nwtServerName"), ("NetWare-Server-Trend-MIB", "nwtTrapTime"), ("NetWare-Server-Trend-MIB", "nwtThreshold"))
if mibBuilder.loadTexts: nwtThresholdPctCacheBuffers.setDescription('Cache buffers fell below the threshold')
nwtThresholdCodeAndDataMemory = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 26) + (0,12)).setObjects(("NetWare-Server-Trend-MIB", "nwtServerName"), ("NetWare-Server-Trend-MIB", "nwtTrapTime"), ("NetWare-Server-Trend-MIB", "nwtThreshold"))
if mibBuilder.loadTexts: nwtThresholdCodeAndDataMemory.setDescription('Code and data memory exceeded the threshold')
nwtThresholdAllocatedMemory = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 26) + (0,13)).setObjects(("NetWare-Server-Trend-MIB", "nwtServerName"), ("NetWare-Server-Trend-MIB", "nwtTrapTime"), ("NetWare-Server-Trend-MIB", "nwtThreshold"))
if mibBuilder.loadTexts: nwtThresholdAllocatedMemory.setDescription('Allocated memory exceeded the threshold')
nwtThresholdPctDirtyCacheBuffers = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 26) + (0,14)).setObjects(("NetWare-Server-Trend-MIB", "nwtServerName"), ("NetWare-Server-Trend-MIB", "nwtTrapTime"), ("NetWare-Server-Trend-MIB", "nwtThreshold"), ("NetWare-Server-Trend-MIB", "nwtInterval"))
if mibBuilder.loadTexts: nwtThresholdPctDirtyCacheBuffers.setDescription('Dirty Cache buffers exceeded the threshold')
nwtThresholdPhysIfInPackets = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 26) + (0,15)).setObjects(("NetWare-Server-Trend-MIB", "nwtServerName"), ("NetWare-Server-Trend-MIB", "nwtTrapTime"), ("NetWare-Server-Trend-MIB", "nwtThreshold"), ("NetWare-Server-Trend-MIB", "nwtInterval"), ("NetWare-Server-Trend-MIB", "nwtInterfaceName"))
if mibBuilder.loadTexts: nwtThresholdPhysIfInPackets.setDescription('The packets received on some physical interface exceeded the threshold')
nwtThresholdPhysIfOutPackets = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 26) + (0,16)).setObjects(("NetWare-Server-Trend-MIB", "nwtServerName"), ("NetWare-Server-Trend-MIB", "nwtTrapTime"), ("NetWare-Server-Trend-MIB", "nwtThreshold"), ("NetWare-Server-Trend-MIB", "nwtInterval"), ("NetWare-Server-Trend-MIB", "nwtInterfaceName"))
if mibBuilder.loadTexts: nwtThresholdPhysIfOutPackets.setDescription('The packets transmitted on some physical interface exceeded the threshold')
nwtThresholdPhysIfInKBytes = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 26) + (0,17)).setObjects(("NetWare-Server-Trend-MIB", "nwtServerName"), ("NetWare-Server-Trend-MIB", "nwtTrapTime"), ("NetWare-Server-Trend-MIB", "nwtThreshold"), ("NetWare-Server-Trend-MIB", "nwtInterval"), ("NetWare-Server-Trend-MIB", "nwtInterfaceName"))
if mibBuilder.loadTexts: nwtThresholdPhysIfInKBytes.setDescription('The total KBytes received on some interface exceeded the threshold')
nwtThresholdPhysIfOutKBytes = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 26) + (0,18)).setObjects(("NetWare-Server-Trend-MIB", "nwtServerName"), ("NetWare-Server-Trend-MIB", "nwtTrapTime"), ("NetWare-Server-Trend-MIB", "nwtThreshold"), ("NetWare-Server-Trend-MIB", "nwtInterval"), ("NetWare-Server-Trend-MIB", "nwtInterfaceName"))
if mibBuilder.loadTexts: nwtThresholdPhysIfOutKBytes.setDescription('The KBytes transmitted on some interface exceeded the threshold')
nwtThresholdQueueNumReadyJobs = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 26) + (0,19)).setObjects(("NetWare-Server-Trend-MIB", "nwtServerName"), ("NetWare-Server-Trend-MIB", "nwtTrapTime"), ("NetWare-Server-Trend-MIB", "nwtThreshold"), ("NetWare-Server-Trend-MIB", "nwtQueueName"), ("NetWare-Server-Trend-MIB", "nwtInterval"))
if mibBuilder.loadTexts: nwtThresholdQueueNumReadyJobs.setDescription('The number of ready jobs in some queue exceeded the threshold')
nwtThresholdQueueNumReadyKBytes = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 26) + (0,20)).setObjects(("NetWare-Server-Trend-MIB", "nwtServerName"), ("NetWare-Server-Trend-MIB", "nwtTrapTime"), ("NetWare-Server-Trend-MIB", "nwtThreshold"), ("NetWare-Server-Trend-MIB", "nwtQueueName"), ("NetWare-Server-Trend-MIB", "nwtInterval"))
if mibBuilder.loadTexts: nwtThresholdQueueNumReadyKBytes.setDescription('The number of KBytes in ready jobs in some queue exceeded the threshold')
nwtThresholdQueueNextJobWaitTime = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 26) + (0,21)).setObjects(("NetWare-Server-Trend-MIB", "nwtServerName"), ("NetWare-Server-Trend-MIB", "nwtTrapTime"), ("NetWare-Server-Trend-MIB", "nwtThreshold"), ("NetWare-Server-Trend-MIB", "nwtQueueName"))
if mibBuilder.loadTexts: nwtThresholdQueueNextJobWaitTime.setDescription('The wait time of the next ready to run job in some queue exceeded the threshold')
nwtThresholdVolumePctFreeSpace = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 26) + (0,22)).setObjects(("NetWare-Server-Trend-MIB", "nwtServerName"), ("NetWare-Server-Trend-MIB", "nwtTrapTime"), ("NetWare-Server-Trend-MIB", "nwtThreshold"), ("NetWare-Server-Trend-MIB", "nwtVolumeName"))
if mibBuilder.loadTexts: nwtThresholdVolumePctFreeSpace.setDescription('Free space on some volume fell below the threshold')
nwtThresholdPctCacheHitRate = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 26) + (0,23)).setObjects(("NetWare-Server-Trend-MIB", "nwtServerName"), ("NetWare-Server-Trend-MIB", "nwtTrapTime"), ("NetWare-Server-Trend-MIB", "nwtThreshold"), ("NetWare-Server-Trend-MIB", "nwtInterval"))
if mibBuilder.loadTexts: nwtThresholdPctCacheHitRate.setDescription('File cache hit rate fell below the threshold')
nwtThresholdDiskPctFreeRedirectionArea = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 26) + (0,24)).setObjects(("NetWare-Server-Trend-MIB", "nwtServerName"), ("NetWare-Server-Trend-MIB", "nwtTrapTime"), ("NetWare-Server-Trend-MIB", "nwtThreshold"), ("NetWare-Server-Trend-MIB", "nwtDiskName"))
if mibBuilder.loadTexts: nwtThresholdDiskPctFreeRedirectionArea.setDescription('Free redirection area on some disk fell below the threshold')
nwtThresholdServerProcesses = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 26) + (0,25)).setObjects(("NetWare-Server-Trend-MIB", "nwtServerName"), ("NetWare-Server-Trend-MIB", "nwtTrapTime"), ("NetWare-Server-Trend-MIB", "nwtThreshold"))
if mibBuilder.loadTexts: nwtThresholdServerProcesses.setDescription('The number of context processes currently loaded or running on the system exceeded the threshold.')
nwtThresholdNoECBCount = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 26) + (0,26)).setObjects(("NetWare-Server-Trend-MIB", "nwtServerName"), ("NetWare-Server-Trend-MIB", "nwtTrapTime"), ("NetWare-Server-Trend-MIB", "nwtThreshold"), ("NetWare-Server-Trend-MIB", "nwtInterval"), ("NetWare-Server-Trend-MIB", "nwtInterfaceName"))
if mibBuilder.loadTexts: nwtThresholdNoECBCount.setDescription('The total number of times a packet was received and not consumed my a protocol stack.')
nwtThresholdOsPktRcvBuffer = NotificationType((1, 3, 6, 1, 4, 1, 23, 2, 26) + (0,27)).setObjects(("NetWare-Server-Trend-MIB", "nwtServerName"), ("NetWare-Server-Trend-MIB", "nwtTrapTime"), ("NetWare-Server-Trend-MIB", "nwtThreshold"), ("NetWare-Server-Trend-MIB", "nwtInterval"), ("NetWare-Server-Trend-MIB", "nwtInterfaceName"))
if mibBuilder.loadTexts: nwtThresholdOsPktRcvBuffer.setDescription('The current number of packet receive buffers being used by the operating system exceeded the threshold')
mibBuilder.exportSymbols("NetWare-Server-Trend-MIB", nwtHistoryControlIndex=nwtHistoryControlIndex, nwtControlReferenceTimeStamp=nwtControlReferenceTimeStamp, nwtControlSampleInterval=nwtControlSampleInterval, nwtThresholdVolumePctFreeSpace=nwtThresholdVolumePctFreeSpace, nwtThresholdQueueNumReadyKBytes=nwtThresholdQueueNumReadyKBytes, nwtTrapTime=nwtTrapTime, nwtHistorySampleIndex=nwtHistorySampleIndex, nwtControlEntry=nwtControlEntry, nwtThresholdConnections=nwtThresholdConnections, nwtThresholdFileWriteKBytes=nwtThresholdFileWriteKBytes, nwtCPUDescription=nwtCPUDescription, nwtThresholdPctCpuUtilization=nwtThresholdPctCpuUtilization, nwtThresholdPhysIfOutKBytes=nwtThresholdPhysIfOutKBytes, nwtControlHistoryState=nwtControlHistoryState, nwtThresholdDiskPctFreeRedirectionArea=nwtThresholdDiskPctFreeRedirectionArea, Seconds=Seconds, nwtThresholdAllocatedMemory=nwtThresholdAllocatedMemory, nwtThresholdFileReads=nwtThresholdFileReads, nwtHistoryEntry=nwtHistoryEntry, nwtThresholdFileWrites=nwtThresholdFileWrites, nwtTrapInfo=nwtTrapInfo, nwtControl=nwtControl, nwTrend=nwTrend, nwtInterval=nwtInterval, nwtDiskName=nwtDiskName, nwtControlSampleType=nwtControlSampleType, nwtControlRisingThreshold=nwtControlRisingThreshold, nwtThresholdQueueNumReadyJobs=nwtThresholdQueueNumReadyJobs, nwtControlSampleInvalidValue=nwtControlSampleInvalidValue, nwtThresholdPhysIfInPackets=nwtThresholdPhysIfInPackets, nwtThresholdQueueNextJobWaitTime=nwtThresholdQueueNextJobWaitTime, nwtThresholdPctDirtyCacheBuffers=nwtThresholdPctDirtyCacheBuffers, nwtControlLastSampleValue=nwtControlLastSampleValue, nwtThresholdLslOutPackets=nwtThresholdLslOutPackets, NWTime=NWTime, nwtVolumeName=nwtVolumeName, nwtThresholdPhysIfOutPackets=nwtThresholdPhysIfOutPackets, nwtControlTable=nwtControlTable, nwtControlHistoryLastSampleIndex=nwtControlHistoryLastSampleIndex, nwtControlThresholdState=nwtControlThresholdState, nwtThresholdCodeAndDataMemory=nwtThresholdCodeAndDataMemory, nwtQueueName=nwtQueueName, nwtInterfaceName=nwtInterfaceName, nwtControlStatus=nwtControlStatus, nwtControlAttributeClass=nwtControlAttributeClass, nwtControlHistoryBucketsGranted=nwtControlHistoryBucketsGranted, nwtThresholdFileReadKBytes=nwtThresholdFileReadKBytes, nwtThresholdPctCacheHitRate=nwtThresholdPctCacheHitRate, nwtThresholdPhysIfInKBytes=nwtThresholdPhysIfInKBytes, nwtHistoryTable=nwtHistoryTable, nwtThresholdNcpRequests=nwtThresholdNcpRequests, nwtThresholdLslInPackets=nwtThresholdLslInPackets, nwtThreshold=nwtThreshold, nwtThresholdLoggedInUsers=nwtThresholdLoggedInUsers, mibDoc=mibDoc, nwtServerName=nwtServerName, nwtControlHistoryBucketsRequested=nwtControlHistoryBucketsRequested, nwtControlAttributeInstance=nwtControlAttributeInstance, nwtThresholdOsPktRcvBuffer=nwtThresholdOsPktRcvBuffer, novell=novell, nwtControlThresholdType=nwtControlThresholdType, nwtControlIndex=nwtControlIndex, nwtThresholdServerProcesses=nwtThresholdServerProcesses, nwtHistorySampleValue=nwtHistorySampleValue, nwtThresholdNoECBCount=nwtThresholdNoECBCount, nwtThresholdPctCacheBuffers=nwtThresholdPctCacheBuffers, nwtControlFallingThreshold=nwtControlFallingThreshold)
