#
# PySNMP MIB module Unisphere-Data-ADDRESS-POOL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Unisphere-Data-ADDRESS-POOL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:30:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Counter32, iso, Bits, Unsigned32, MibIdentifier, TimeTicks, NotificationType, IpAddress, Gauge32, ModuleIdentity, ObjectIdentity, Counter64, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "iso", "Bits", "Unsigned32", "MibIdentifier", "TimeTicks", "NotificationType", "IpAddress", "Gauge32", "ModuleIdentity", "ObjectIdentity", "Counter64", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
RowStatus, DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention", "TruthValue")
usDataMibs, = mibBuilder.importSymbols("Unisphere-Data-MIBs", "usDataMibs")
usdRouterName, = mibBuilder.importSymbols("Unisphere-Data-ROUTER-MIB", "usdRouterName")
usdAddressPoolMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4874, 2, 2, 21))
usdAddressPoolMIB.setRevisions(('2002-05-06 18:38', '2001-05-02 11:57', '2001-04-27 15:00', '1999-06-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: usdAddressPoolMIB.setRevisionsDescriptions(('Added usdAddressPoolProfileTable to support an address pool with multiple address ranges.', 'Added pool exhaustion variables and notifications for high pool utilization and pool exhaustion.', 'Fixed range on usdAddressPoolNextPoolIndex.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: usdAddressPoolMIB.setLastUpdated('200205061838Z')
if mibBuilder.loadTexts: usdAddressPoolMIB.setOrganization('Unisphere Networks, Inc.')
if mibBuilder.loadTexts: usdAddressPoolMIB.setContactInfo(' Unisphere Networks, Inc. Postal: 10 Technology Park Road Westford, MA 01886 USA Tel: +1 978 589 5800 E-mail: mib@UnisphereNetworks.com')
if mibBuilder.loadTexts: usdAddressPoolMIB.setDescription('The Address Pool MIB for the Unisphere Networks enterprise.')
usdAddressPoolObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 21, 1))
usdAddressPool = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 21, 1, 1))
usdAddressPoolTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 21, 1, 1, 1), )
if mibBuilder.loadTexts: usdAddressPoolTable.setStatus('current')
if mibBuilder.loadTexts: usdAddressPoolTable.setDescription('A table of IP address pool configuration entries.')
usdAddressPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 21, 1, 1, 1, 1), ).setIndexNames((0, "Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolIndex"))
if mibBuilder.loadTexts: usdAddressPoolEntry.setStatus('current')
if mibBuilder.loadTexts: usdAddressPoolEntry.setDescription('An entry describing an IP address pool configuration.')
usdAddressPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 21, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: usdAddressPoolIndex.setStatus('current')
if mibBuilder.loadTexts: usdAddressPoolIndex.setDescription('An arbitrary integer index that distinguishes this address pool.')
usdAddressPoolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 21, 1, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAddressPoolRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdAddressPoolRowStatus.setDescription("Controls creation/deletion of address pools. Only value 'active' will be observed with GET. Only values 'createAndGo' and 'destroy' are supported for SET. Once created, entry content cannot be modified except by deleting and recreating an entry with the same index.")
usdAddressPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 21, 1, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAddressPoolName.setReference('RFC 854: NVT ASCII character set.')
if mibBuilder.loadTexts: usdAddressPoolName.setStatus('current')
if mibBuilder.loadTexts: usdAddressPoolName.setDescription('The name of this address pool. Represents textual information taken from the NVT ASCII graphics character set (codes 32 through 126).')
usdAddressPoolStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 21, 1, 1, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAddressPoolStart.setStatus('deprecated')
if mibBuilder.loadTexts: usdAddressPoolStart.setDescription('The starting IP address for the range of addresses comprising this pool.')
usdAddressPoolEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 21, 1, 1, 1, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAddressPoolEnd.setStatus('deprecated')
if mibBuilder.loadTexts: usdAddressPoolEnd.setDescription('The ending IP address for the range of addresses comprising this pool.')
usdAddressPoolSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 21, 1, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAddressPoolSize.setStatus('deprecated')
if mibBuilder.loadTexts: usdAddressPoolSize.setDescription('The number of addresses available in this pool.')
usdAddressPoolInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 21, 1, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAddressPoolInUse.setStatus('deprecated')
if mibBuilder.loadTexts: usdAddressPoolInUse.setDescription('The number of addresses currently allocated from this pool.')
usdAddressPoolHighUtilThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 21, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(85)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAddressPoolHighUtilThreshold.setStatus('current')
if mibBuilder.loadTexts: usdAddressPoolHighUtilThreshold.setDescription('The value of address pool utilization, where if reached for the first time, will generate a high address pool utilization event to the management entity on this system. The value of this object must be greater than the value of usdAddressPoolAbatedUtilThreshold.')
usdAddressPoolAbatedUtilThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 21, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(75)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAddressPoolAbatedUtilThreshold.setStatus('current')
if mibBuilder.loadTexts: usdAddressPoolAbatedUtilThreshold.setDescription('The value of address pool utilization that is used to determine when to generate an abated address pool utilization event notification to the management entity on this system. The value of this object must be less than the value of the usdAddressPoolHighUtilThreshold. The abated address pool utilization event is sent once if the high address pool utilization threshold is reached and utilization falls to the value of this object.')
usdAddressPoolUtilPct = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 21, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAddressPoolUtilPct.setStatus('current')
if mibBuilder.loadTexts: usdAddressPoolUtilPct.setDescription('The current address utilization for this pool.')
usdAddressPoolTrapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 21, 1, 1, 1, 1, 11), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAddressPoolTrapEnable.setStatus('current')
if mibBuilder.loadTexts: usdAddressPoolTrapEnable.setDescription('The configuration setting for address pool notifications. Setting this object to enable(1) will enable the sending of usdAddressPool event notifications to the management entity on this device. Setting this object to false(2) will disable event notification reports.')
usdAddressPoolProfileTable = MibTable((1, 3, 6, 1, 4, 1, 4874, 2, 2, 21, 1, 1, 3), )
if mibBuilder.loadTexts: usdAddressPoolProfileTable.setStatus('current')
if mibBuilder.loadTexts: usdAddressPoolProfileTable.setDescription('A table of IP address pool profile entries.')
usdAddressPoolProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4874, 2, 2, 21, 1, 1, 3, 1), ).setIndexNames((0, "Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolIndex"), (0, "Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolProfileIndex"))
if mibBuilder.loadTexts: usdAddressPoolProfileEntry.setStatus('current')
if mibBuilder.loadTexts: usdAddressPoolProfileEntry.setDescription('An IP address pool profile entry.')
usdAddressPoolProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 21, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: usdAddressPoolProfileIndex.setStatus('current')
if mibBuilder.loadTexts: usdAddressPoolProfileIndex.setDescription('A monotonically increasing integer for the sole purpose of indexing entries within the named address pool.')
usdAddressPoolProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 21, 1, 1, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAddressPoolProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: usdAddressPoolProfileRowStatus.setDescription("Controls creation/deletion of address pools. Only value 'active' will be observed with GET. Only values 'createAndGo' and 'destroy' are supported for SET. Once created, entry content cannot be modified except by deleting and recreating an entry with the same index.")
usdAddressPoolProfileStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 21, 1, 1, 3, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAddressPoolProfileStart.setStatus('current')
if mibBuilder.loadTexts: usdAddressPoolProfileStart.setDescription('The starting IP address for the range of addresses comprising this pool.')
usdAddressPoolProfileEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 21, 1, 1, 3, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: usdAddressPoolProfileEnd.setStatus('current')
if mibBuilder.loadTexts: usdAddressPoolProfileEnd.setDescription('The ending IP address for the range of addresses comprising this pool.')
usdAddressPoolProfileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 21, 1, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAddressPoolProfileSize.setStatus('current')
if mibBuilder.loadTexts: usdAddressPoolProfileSize.setDescription('The number of addresses available in this pool.')
usdAddressPoolProfileInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 4874, 2, 2, 21, 1, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAddressPoolProfileInUse.setStatus('current')
if mibBuilder.loadTexts: usdAddressPoolProfileInUse.setDescription('The number of addresses currently allocated from this pool.')
usdAddressPoolNextPoolIndex = MibScalar((1, 3, 6, 1, 4, 1, 4874, 2, 2, 21, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: usdAddressPoolNextPoolIndex.setStatus('current')
if mibBuilder.loadTexts: usdAddressPoolNextPoolIndex.setDescription('Coordinate usdAddressPoolIndex value allocation for entries in usdAddressPoolTable. A GET of this object returns the next available usdAddressPoolIndex value to be used to create an entry in the associated usdAddressPoolTable; or zero, if no valid usdAddressPoolIndex is available. This object returns a value of zero when it is the lexicographic successor of a varbind presented in an SNMP GETNEXT or GETBULK request, for which circumstance it is assumed that a new index allocation is unintended. Successive GETs will return different values, thus avoiding collisions among cooperating management clients seeking to create table entries simultaneously.')
usdAddressPoolTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 21, 3))
usdAddressPoolTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 21, 3, 0))
usdAddressPoolHighAddrUtil = NotificationType((1, 3, 6, 1, 4, 1, 4874, 2, 2, 21, 3, 0, 1)).setObjects(("Unisphere-Data-ROUTER-MIB", "usdRouterName"), ("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolName"), ("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolSize"), ("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolInUse"), ("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolUtilPct"))
if mibBuilder.loadTexts: usdAddressPoolHighAddrUtil.setStatus('current')
if mibBuilder.loadTexts: usdAddressPoolHighAddrUtil.setDescription('Reports address pool utilization has reached the configured high utilization threshold.')
usdAddressPoolAbatedAddrUtil = NotificationType((1, 3, 6, 1, 4, 1, 4874, 2, 2, 21, 3, 0, 2)).setObjects(("Unisphere-Data-ROUTER-MIB", "usdRouterName"), ("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolName"), ("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolSize"), ("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolInUse"), ("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolUtilPct"))
if mibBuilder.loadTexts: usdAddressPoolAbatedAddrUtil.setStatus('current')
if mibBuilder.loadTexts: usdAddressPoolAbatedAddrUtil.setDescription('Reports address pool utilization has fallen to the configured abated threshold level.')
usdAddressPoolNoAddresses = NotificationType((1, 3, 6, 1, 4, 1, 4874, 2, 2, 21, 3, 0, 3)).setObjects(("Unisphere-Data-ROUTER-MIB", "usdRouterName"), ("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolName"), ("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolSize"))
if mibBuilder.loadTexts: usdAddressPoolNoAddresses.setStatus('current')
if mibBuilder.loadTexts: usdAddressPoolNoAddresses.setDescription('Reports address pool has exhausted its supply of addresses. This trap is issued every time a request is made to allocate an address from a fully utilized pool.')
usdAddressPoolMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 21, 4))
usdAddressPoolMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 21, 4, 1))
usdAddressPoolMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 2, 2, 21, 4, 2))
usdAddressPoolCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 21, 4, 1, 1)).setObjects(("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAddressPoolCompliance = usdAddressPoolCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: usdAddressPoolCompliance.setDescription('Obsolete compliance statement for systems providing local address pools. This statement became obsolete when pool exhaustion variables and notifications were added.')
usdAddressPoolCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 21, 4, 1, 2)).setObjects(("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolGroup2"), ("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolTrapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAddressPoolCompliance2 = usdAddressPoolCompliance2.setStatus('obsolete')
if mibBuilder.loadTexts: usdAddressPoolCompliance2.setDescription('Obsolete compliance statement for systems providing local address pools. This statement became obsolete when support was added for address pools with multiple address ranges.')
usdAddressPoolCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 4874, 2, 2, 21, 4, 1, 3)).setObjects(("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolGroup3"), ("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolTrapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAddressPoolCompliance3 = usdAddressPoolCompliance3.setStatus('current')
if mibBuilder.loadTexts: usdAddressPoolCompliance3.setDescription('The compliance statement for systems providing local address pools.')
usdAddressPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 21, 4, 2, 1)).setObjects(("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolRowStatus"), ("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolName"), ("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolStart"), ("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolEnd"), ("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolSize"), ("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolInUse"), ("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolNextPoolIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAddressPoolGroup = usdAddressPoolGroup.setStatus('obsolete')
if mibBuilder.loadTexts: usdAddressPoolGroup.setDescription('Obsolete collection of objects providing management of local address pools. This group became obsolete when pool exhaustion variables and notifications were added.')
usdAddressPoolGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 21, 4, 2, 2)).setObjects(("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolRowStatus"), ("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolName"), ("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolStart"), ("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolEnd"), ("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolSize"), ("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolInUse"), ("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolNextPoolIndex"), ("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolHighUtilThreshold"), ("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolAbatedUtilThreshold"), ("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolUtilPct"), ("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolTrapEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAddressPoolGroup2 = usdAddressPoolGroup2.setStatus('deprecated')
if mibBuilder.loadTexts: usdAddressPoolGroup2.setDescription('The basic collection of objects providing management of local address pools. This group was deprecated when support was added for address pools with multiple address ranges.')
usdAddressPoolTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 21, 4, 2, 3)).setObjects(("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolHighAddrUtil"), ("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolAbatedAddrUtil"), ("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolNoAddresses"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAddressPoolTrapGroup = usdAddressPoolTrapGroup.setStatus('current')
if mibBuilder.loadTexts: usdAddressPoolTrapGroup.setDescription('The notifications providing alarms for high pool utilization and pool exhaustion of local address pools.')
usdAddressPoolGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 4874, 2, 2, 21, 4, 2, 4)).setObjects(("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolRowStatus"), ("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolName"), ("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolNextPoolIndex"), ("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolHighUtilThreshold"), ("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolAbatedUtilThreshold"), ("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolUtilPct"), ("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolTrapEnable"), ("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolProfileRowStatus"), ("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolProfileStart"), ("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolProfileEnd"), ("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolProfileSize"), ("Unisphere-Data-ADDRESS-POOL-MIB", "usdAddressPoolProfileInUse"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    usdAddressPoolGroup3 = usdAddressPoolGroup3.setStatus('current')
if mibBuilder.loadTexts: usdAddressPoolGroup3.setDescription('The basic collection of objects providing management of local address pools.')
mibBuilder.exportSymbols("Unisphere-Data-ADDRESS-POOL-MIB", usdAddressPoolProfileTable=usdAddressPoolProfileTable, usdAddressPoolGroup3=usdAddressPoolGroup3, usdAddressPoolProfileStart=usdAddressPoolProfileStart, usdAddressPoolInUse=usdAddressPoolInUse, usdAddressPool=usdAddressPool, usdAddressPoolTable=usdAddressPoolTable, usdAddressPoolUtilPct=usdAddressPoolUtilPct, usdAddressPoolCompliance3=usdAddressPoolCompliance3, usdAddressPoolGroup=usdAddressPoolGroup, usdAddressPoolProfileSize=usdAddressPoolProfileSize, usdAddressPoolGroup2=usdAddressPoolGroup2, usdAddressPoolEnd=usdAddressPoolEnd, usdAddressPoolMIB=usdAddressPoolMIB, usdAddressPoolAbatedUtilThreshold=usdAddressPoolAbatedUtilThreshold, usdAddressPoolProfileEntry=usdAddressPoolProfileEntry, usdAddressPoolMIBCompliances=usdAddressPoolMIBCompliances, PYSNMP_MODULE_ID=usdAddressPoolMIB, usdAddressPoolObjects=usdAddressPoolObjects, usdAddressPoolStart=usdAddressPoolStart, usdAddressPoolMIBConformance=usdAddressPoolMIBConformance, usdAddressPoolHighUtilThreshold=usdAddressPoolHighUtilThreshold, usdAddressPoolNoAddresses=usdAddressPoolNoAddresses, usdAddressPoolRowStatus=usdAddressPoolRowStatus, usdAddressPoolName=usdAddressPoolName, usdAddressPoolProfileIndex=usdAddressPoolProfileIndex, usdAddressPoolProfileRowStatus=usdAddressPoolProfileRowStatus, usdAddressPoolProfileEnd=usdAddressPoolProfileEnd, usdAddressPoolTrapEnable=usdAddressPoolTrapEnable, usdAddressPoolNextPoolIndex=usdAddressPoolNextPoolIndex, usdAddressPoolTrapPrefix=usdAddressPoolTrapPrefix, usdAddressPoolCompliance=usdAddressPoolCompliance, usdAddressPoolSize=usdAddressPoolSize, usdAddressPoolMIBGroups=usdAddressPoolMIBGroups, usdAddressPoolHighAddrUtil=usdAddressPoolHighAddrUtil, usdAddressPoolProfileInUse=usdAddressPoolProfileInUse, usdAddressPoolIndex=usdAddressPoolIndex, usdAddressPoolEntry=usdAddressPoolEntry, usdAddressPoolTrapGroup=usdAddressPoolTrapGroup, usdAddressPoolCompliance2=usdAddressPoolCompliance2, usdAddressPoolAbatedAddrUtil=usdAddressPoolAbatedAddrUtil, usdAddressPoolTraps=usdAddressPoolTraps)
