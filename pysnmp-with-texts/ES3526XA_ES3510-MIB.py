#
# PySNMP MIB module ES3526XA_ES3510-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ES3526XA_ES3510-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:06:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
dot1dStpPortEntry, MacAddress, Timeout, dot1dStpPort, BridgeId = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dStpPortEntry", "MacAddress", "Timeout", "dot1dStpPort", "BridgeId")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
PortList, VlanIndex = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList", "VlanIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Gauge32, Counter32, ModuleIdentity, IpAddress, NotificationType, iso, TimeTicks, Bits, Integer32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, MibIdentifier, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Gauge32", "Counter32", "ModuleIdentity", "IpAddress", "NotificationType", "iso", "TimeTicks", "Bits", "Integer32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "MibIdentifier", "enterprises")
TruthValue, DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention", "RowStatus")
MacAddress, = mibBuilder.importSymbols("TOKEN-RING-RMON-MIB", "MacAddress")
accton = MibIdentifier((1, 3, 6, 1, 4, 1, 259))
edgecore = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8))
cheetahSwitchMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1))
es3526XA_ES3510MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 259, 8, 1, 5))
es3526XA_ES3510MIB.setRevisions(('2001-09-06 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: es3526XA_ES3510MIB.setRevisionsDescriptions(('Initial version of this MIB.',))
if mibBuilder.loadTexts: es3526XA_ES3510MIB.setLastUpdated('200109060000Z')
if mibBuilder.loadTexts: es3526XA_ES3510MIB.setOrganization('Accton Technology Corp.')
if mibBuilder.loadTexts: es3526XA_ES3510MIB.setContactInfo('Accton Technology Corp. Customer Service Postal: No. 1 Creation Rd. III, Science-based Industrial Park,Hsinchu 300-77, Taiwan, R.O.C. Tel: +886-3-5770270 E-mail: support@accton.com.tw')
if mibBuilder.loadTexts: es3526XA_ES3510MIB.setDescription('The MIB module for es3526XA_ES3510.')
es3526XA_ES3510MIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1))
es3526XA_ES3510Notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 2))
es3526XA_ES3510Conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 3))
switchMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1))
portMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 2))
trunkMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 3))
lacpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 4))
staMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5))
tftpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 6))
restartMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 7))
mirrorMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 8))
igmpSnoopMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9))
ipMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 10))
bcastStormMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 11))
vlanMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 12))
priorityMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13))
trapDestMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 14))
qosMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16))
securityMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17))
sysLogMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19))
lineMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 20))
sysTimeMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23))
fileMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 24))
dnsMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26))
mvrMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44))
dhcpSnoopMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46))
clusterMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47))
ipSrcGuardMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 48))
class KeySegment(DisplayString):
    description = 'The total length of the key is 1024 characters, it is divided into 8 parts and stored in 8 separated mib variables as below: Key1: part 1 of the key (1-128) Key2: part 2 of the key (129-256) Key3: part 3 of the key (257-384) Key4: part 4 of the key (385-512) Key5: part 5 of the key (513-640) Key6: part 6 of the key (641-768) Key7: part 7 of the key (769-896) Key8: part 8 of the key (897-1024) Please note that if the key string is less then 1024 characters, the remaining part of the string will be filled by a zero-length string. For example, if the length of the key is 129, we will get a string of length 128 in Key1, and a string of length 1 in Key2, moreover, Key3 to Key8 will all be zero-length strings.'
    status = 'current'
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 128)

class ValidStatus(TextualConvention, Integer32):
    description = 'A simple status value for the object to create and destroy a table entry. This is a simplified variant of RowStatus as it supports only two values. Setting it to valid(1) creates an entry. Setting it to invalid(2) destroys an entry.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("valid", 1), ("invalid", 2))

class StaPathCostMode(TextualConvention, Integer32):
    description = 'The path cost mode of a spanning tree algorithm, short(1) indicates that we retrieve/configure the spanning tree path cost as a 16 bit value and long(2) indicates that we retrieve/configure the spanning tree path cost as a 32 bit value.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("short", 1), ("long", 2))

switchManagementVlan = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4092))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchManagementVlan.setStatus('current')
if mibBuilder.loadTexts: switchManagementVlan.setDescription('The VLAN on which management is done.')
switchNumber = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchNumber.setStatus('current')
if mibBuilder.loadTexts: switchNumber.setDescription('The total number of switches present on this system.')
switchInfoTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 3), )
if mibBuilder.loadTexts: switchInfoTable.setStatus('current')
if mibBuilder.loadTexts: switchInfoTable.setDescription('Table of descriptive and status information about switches in this system.')
switchInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 3, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "swUnitIndex"))
if mibBuilder.loadTexts: switchInfoEntry.setStatus('current')
if mibBuilder.loadTexts: switchInfoEntry.setDescription('An entry in the table, containing information about a single switch in this system.')
swUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: swUnitIndex.setStatus('current')
if mibBuilder.loadTexts: swUnitIndex.setDescription('This object identifies the switch within the system for which this entry contains information. This value can never be greater than switchNumber.')
swHardwareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swHardwareVer.setStatus('current')
if mibBuilder.loadTexts: swHardwareVer.setDescription('Hardware version of the main board.')
swMicrocodeVer = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMicrocodeVer.setStatus('current')
if mibBuilder.loadTexts: swMicrocodeVer.setDescription('Microcode version of the main board.')
swLoaderVer = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swLoaderVer.setStatus('current')
if mibBuilder.loadTexts: swLoaderVer.setDescription('Loader version of the main board.')
swBootRomVer = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBootRomVer.setStatus('current')
if mibBuilder.loadTexts: swBootRomVer.setDescription('Boot ROM code version of the main board.')
swOpCodeVer = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swOpCodeVer.setStatus('current')
if mibBuilder.loadTexts: swOpCodeVer.setDescription('Operation code version of the main board.')
swPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortNumber.setStatus('current')
if mibBuilder.loadTexts: swPortNumber.setDescription('The total port number of this switch (including expansion slot).')
swPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internalPower", 1), ("redundantPower", 2), ("internalAndRedundantPower", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPowerStatus.setStatus('current')
if mibBuilder.loadTexts: swPowerStatus.setDescription('Indicates the switch using internalPower(1), redundantPower(2) or both(3)')
swRoleInSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("backupMaster", 2), ("slave", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRoleInSystem.setStatus('current')
if mibBuilder.loadTexts: swRoleInSystem.setDescription('Indicates the switch is master(1), backupMaster(2) or slave(3) in this system.')
swSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSerialNumber.setStatus('current')
if mibBuilder.loadTexts: swSerialNumber.setDescription('Serial number of the switch.')
swServiceTag = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swServiceTag.setStatus('current')
if mibBuilder.loadTexts: swServiceTag.setDescription('Service tag serial-number of the switch.')
switchOperState = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("noncritical", 4), ("critical", 5), ("nonrecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchOperState.setStatus('current')
if mibBuilder.loadTexts: switchOperState.setDescription('Global operation state of the switch.')
switchProductId = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 5))
swProdName = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdName.setStatus('current')
if mibBuilder.loadTexts: swProdName.setDescription('')
swProdManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdManufacturer.setStatus('current')
if mibBuilder.loadTexts: swProdManufacturer.setDescription('')
swProdDescription = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdDescription.setStatus('current')
if mibBuilder.loadTexts: swProdDescription.setDescription('')
swProdVersion = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 5, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdVersion.setStatus('current')
if mibBuilder.loadTexts: swProdVersion.setDescription('')
swProdUrl = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 5, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdUrl.setStatus('current')
if mibBuilder.loadTexts: swProdUrl.setDescription('')
swIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIdentifier.setStatus('current')
if mibBuilder.loadTexts: swIdentifier.setDescription('A unique identifier of which switch in the chassis is currently being looked at.')
swChassisServiceTag = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 5, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swChassisServiceTag.setStatus('current')
if mibBuilder.loadTexts: swChassisServiceTag.setDescription('The service tag of the chassis this switch resides in.')
amtrMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 8))
amtrMacAddrAgingStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 8, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amtrMacAddrAgingStatus.setStatus('current')
if mibBuilder.loadTexts: amtrMacAddrAgingStatus.setDescription('If this is enabled(1), the MAC address table will age out according to its timer. If this is disabled(2), the MAC address table will not age out.')
amtrMacAddrDelete = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 1, 8, 4), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amtrMacAddrDelete.setStatus('current')
if mibBuilder.loadTexts: amtrMacAddrDelete.setDescription('when it is set by the value, the MAC address table will delete all dynamic mac address.')
portTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 2, 1), )
if mibBuilder.loadTexts: portTable.setStatus('current')
if mibBuilder.loadTexts: portTable.setDescription("Table of descriptive and status information about configuration of each switch port (including expansion slot) in this system. This table also contains information about each trunk (similar to Cisco's EtherChannel).")
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 2, 1, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "portIndex"))
if mibBuilder.loadTexts: portEntry.setStatus('current')
if mibBuilder.loadTexts: portEntry.setDescription('An entry in the table, containing information about configuration in one switch port of the switch.')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: portIndex.setStatus('current')
if mibBuilder.loadTexts: portIndex.setDescription('This is defined as ifIndex in the IF-MIB.')
portName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portName.setStatus('current')
if mibBuilder.loadTexts: portName.setDescription('Indicates the port name. This is same as ifAlias in the IF-MIB (RFC2863 or later).')
portType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("hundredBaseTX", 2), ("hundredBaseFX", 3), ("thousandBaseSX", 4), ("thousandBaseLX", 5), ("thousandBaseT", 6), ("thousandBaseGBIC", 7), ("thousandBaseSfp", 8), ("hundredBaseFxScSingleMode", 9), ("hundredBaseFxScMultiMode", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portType.setStatus('current')
if mibBuilder.loadTexts: portType.setDescription('Indicates the port type.')
portSpeedDpxCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("reserved", 1), ("halfDuplex10", 2), ("fullDuplex10", 3), ("halfDuplex100", 4), ("fullDuplex100", 5), ("halfDuplex1000", 6), ("fullDuplex1000", 7))).clone('halfDuplex10')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSpeedDpxCfg.setStatus('current')
if mibBuilder.loadTexts: portSpeedDpxCfg.setDescription('Set the port speed and duplex mode as follows: halfDuplex10(2) - 10Mbps and half duplex mode fullDuplex10(3) - 10Mbps and full duplex mode halfDuplex100(4) - 100Mbps and half duplex mode fullDuplex100(5) - 100Mbps and full duplex mode halfDuplex1000(6) - 1000Mbps and half duplex mode fullDuplex1000(7) - 1000Mbps and full duplex mode hundredBaseTX port can be set as halfDuplex10(2) fullDuplex10(3) halfDuplex100(4) fullDuplex100(5) hundredBaseFX port can be set as halfDuplex100(4) fullDuplex100(5) thousandBaseSX port can be set as halfDuplex1000(6) fullDuplex1000(7) The actual operating speed and duplex of the port is given by portSpeedDpxStatus.')
portFlowCtrlCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("backPressure", 3), ("dot3xFlowControl", 4))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFlowCtrlCfg.setStatus('current')
if mibBuilder.loadTexts: portFlowCtrlCfg.setDescription('(1) Flow control mechanism is enabled. If the port type is hundredBaseTX or thousandBaseSX: When the port is operating in halfDuplex mode, the port uses backPressure flow control mechanism. When the port is operating in fullDuplex mode, the port uses IEEE 802.3x flow control mechanism. If the port type is hundredBaseFX: When the port is operating in halfDuplex mode, the port uses backPressure flow control mechanism. When the port is operating in fullDuplex mode, Flow control mechanism will not function. (2) Flow control mechanism is disabled. (3) Flow control mechanism is backPressure. when the port is in fullDuplex mode.This flow control mechanism will not function. (4) Flow control mechanism is IEEE 802.3x flow control. when the port is in halfDuplex mode.This flow control mechanism will not function. hundredBaseTX and thousandBaseSX port can be set as: enabled(1), disabled(2), backPressure(3), dot3xFlowControl(4). hundredBaseFX port can be set as: enabled(1), disabled(2), backPressure(3). The actual flow control mechanism is used given by portFlowCtrlStatus.')
portCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 2, 1, 1, 6), Bits().clone(namedValues=NamedValues(("portCap10half", 0), ("portCap10full", 1), ("portCap100half", 2), ("portCap100full", 3), ("portCap1000half", 4), ("portCap1000full", 5), ("reserved6", 6), ("reserved7", 7), ("reserved8", 8), ("reserved9", 9), ("reserved10", 10), ("reserved11", 11), ("reserved12", 12), ("reserved13", 13), ("portCapSym", 14), ("portCapFlowCtrl", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portCapabilities.setStatus('current')
if mibBuilder.loadTexts: portCapabilities.setDescription('Port capabilities.')
portAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portAutonegotiation.setStatus('current')
if mibBuilder.loadTexts: portAutonegotiation.setDescription('Whether autonegotiation is enabled.')
portSpeedDpxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("error", 1), ("halfDuplex10", 2), ("fullDuplex10", 3), ("halfDuplex100", 4), ("fullDuplex100", 5), ("halfDuplex1000", 6), ("fullDuplex1000", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSpeedDpxStatus.setStatus('current')
if mibBuilder.loadTexts: portSpeedDpxStatus.setDescription('The operating speed and duplex mode of the switched port. If this index is a trunk, the speed is the speed of its individual members. If this index is a trunk and the result is inconsistent among its member ports, this value is error(1).')
portFlowCtrlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("error", 1), ("backPressure", 2), ("dot3xFlowControl", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portFlowCtrlStatus.setStatus('current')
if mibBuilder.loadTexts: portFlowCtrlStatus.setDescription('(2) BackPressure flow control machanism is used. (3) IEEE 802.3 flow control machanism is used. (4) Flow control mechanism is disabled. If this index is a trunk and the result is inconsistent among its member ports, this value is error(1).')
portTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTrunkIndex.setStatus('current')
if mibBuilder.loadTexts: portTrunkIndex.setDescription('The trunk to which this port belongs. A value of 0 means that this port does not belong to any trunk. A value greater than zero means that this port belongs to trunk at trunkIndex, defined by the corresponding trunkPorts.')
trunkMaxId = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkMaxId.setStatus('current')
if mibBuilder.loadTexts: trunkMaxId.setDescription('The maximum number for a trunk identifier.')
trunkValidNumber = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkValidNumber.setStatus('current')
if mibBuilder.loadTexts: trunkValidNumber.setDescription('The number of valid trunks.')
trunkTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 3, 3), )
if mibBuilder.loadTexts: trunkTable.setStatus('current')
if mibBuilder.loadTexts: trunkTable.setDescription('Table of descriptive and status information about configuration of each trunk, similar to Cisco EtherChannel.')
trunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 3, 3, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "trunkIndex"))
if mibBuilder.loadTexts: trunkEntry.setStatus('current')
if mibBuilder.loadTexts: trunkEntry.setDescription('An entry in the table, containing information about configuration in one trunk of the switch.')
trunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 3, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: trunkIndex.setStatus('current')
if mibBuilder.loadTexts: trunkIndex.setDescription('This object identifies the trunk within the switch for which this entry contains information.')
trunkPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 3, 3, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkPorts.setStatus('current')
if mibBuilder.loadTexts: trunkPorts.setDescription('The complete set of ports currently associated with this trunk.')
trunkCreation = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("lacp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkCreation.setStatus('current')
if mibBuilder.loadTexts: trunkCreation.setDescription('A value of static(1) means a statically configured trunk. A value of lacp(2) means an LACP-configured trunk.')
trunkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 3, 3, 1, 4), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkStatus.setStatus('current')
if mibBuilder.loadTexts: trunkStatus.setDescription('Writing this to valid(1) creates an entry. Writing this to invalid(2) destroys an entry. A trunk created by LACP cannot be manually destroyed or (re)configured.')
lacpPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 4, 1), )
if mibBuilder.loadTexts: lacpPortTable.setStatus('current')
if mibBuilder.loadTexts: lacpPortTable.setDescription('Table for LACP port configuration.')
lacpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 4, 1, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "lacpPortIndex"))
if mibBuilder.loadTexts: lacpPortEntry.setStatus('current')
if mibBuilder.loadTexts: lacpPortEntry.setDescription('Entry for LACP port configuration.')
lacpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 4, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: lacpPortIndex.setStatus('current')
if mibBuilder.loadTexts: lacpPortIndex.setDescription('This is defined as ifIndex in the IF-MIB.')
lacpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpPortStatus.setStatus('current')
if mibBuilder.loadTexts: lacpPortStatus.setDescription('Whether 802.3ad LACP is enabled.')
staSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 1), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staSystemStatus.setStatus('current')
if mibBuilder.loadTexts: staSystemStatus.setDescription('Global spanning tree status. (1) Spanning tree protocol is enabled. (2) Spanning tree protocol is disabled.')
staPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 2), )
if mibBuilder.loadTexts: staPortTable.setReference('IEEE 802.1d, IEEE 802.1w, IEEE 802.1s.')
if mibBuilder.loadTexts: staPortTable.setStatus('current')
if mibBuilder.loadTexts: staPortTable.setDescription('The table manages port settings for Spanning Tree Protocol 802.1d, 802.1w or 802.1s depending on the value specified by staProtocolType.')
staPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 2, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "staPortIndex"))
if mibBuilder.loadTexts: staPortEntry.setStatus('current')
if mibBuilder.loadTexts: staPortEntry.setDescription('The conceptual entry of staPortTable.')
staPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: staPortIndex.setStatus('current')
if mibBuilder.loadTexts: staPortIndex.setDescription('The port and the trunk (excluding trunk member ports) interface of the staPortTable. The interface identified by a particular value of this index is the same interface as identified by the same value of dot1dStpPort in the BRIDGE-MIB.')
staPortFastForward = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 2, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortFastForward.setStatus('current')
if mibBuilder.loadTexts: staPortFastForward.setDescription('Whether fast forwarding is enabled.')
staPortProtocolMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 2, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortProtocolMigration.setReference('IEEE 802.1w clause 14.8.2.4, 17.18.10, 17.26')
if mibBuilder.loadTexts: staPortProtocolMigration.setStatus('current')
if mibBuilder.loadTexts: staPortProtocolMigration.setDescription('When operating in RSTP (version 2) mode, writing true(1) to this object forces this port to transmit RSTP BPDUs. Any other operation on this object has no effect and it always returns false(2) when read.')
staPortAdminEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 2, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortAdminEdgePort.setReference('IEEE 802.1t clause 14.8.2, 18.3.3')
if mibBuilder.loadTexts: staPortAdminEdgePort.setStatus('current')
if mibBuilder.loadTexts: staPortAdminEdgePort.setDescription('The administrative value of the edge port parameter. A value of true(1) indicates that this port should be assumed as an edge-port and a value of false(2) indicates that this port should be assumed as a non-edge-port.')
staPortOperEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPortOperEdgePort.setReference('IEEE 802.1t clause 14.8.2, 18.3.4')
if mibBuilder.loadTexts: staPortOperEdgePort.setStatus('current')
if mibBuilder.loadTexts: staPortOperEdgePort.setDescription('The operational value of the edge port parameter. The object is initialized to the value of staPortAdminEdgePort and is set false when a BPDU is received.')
staPortAdminPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceTrue", 0), ("forceFalse", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortAdminPointToPoint.setReference('IEEE 802.1w clause 6.4.3, 6.5, 14.8.2')
if mibBuilder.loadTexts: staPortAdminPointToPoint.setStatus('current')
if mibBuilder.loadTexts: staPortAdminPointToPoint.setDescription('The administrative point-to-point status of the LAN segment attached to this port. A value of forceTrue(0) indicates that this port should always be treated as if it is connected to a point-to-point link. A value of forceFalse(1) indicates that this port should be treated as having a shared media connection. A value of auto(2) indicates that this port is considered to have a point-to-point link if it is an Aggregator and all of its members are aggregatable, or if the MAC entity is configured for full duplex operation, either through auto-negotiation or by management means.')
staPortOperPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPortOperPointToPoint.setReference('IEEE 802.1w clause 6.4.3, 6.5, 14.8.2')
if mibBuilder.loadTexts: staPortOperPointToPoint.setStatus('current')
if mibBuilder.loadTexts: staPortOperPointToPoint.setDescription('The operational point-to-point status of the LAN segment attached to this port. This indicates whether a port is considered to have a point-to-point connection or not. The value is determined by management or by auto-detection, as described in the staPortAdminPointToPoint object.')
staPortLongPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortLongPathCost.setStatus('current')
if mibBuilder.loadTexts: staPortLongPathCost.setDescription('The contribution of this port to the path cost (in 32 bits value) of paths towards the spanning tree root which include this port. This object is used to configure the spanning tree port path cost in the 32-bit value range when the staPathCostMethod is long(2). If the staPathCostMethod is short(1), this mib object is not instantiated.')
staPortSystemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 2, 1, 9), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortSystemStatus.setStatus('current')
if mibBuilder.loadTexts: staPortSystemStatus.setDescription('Per-port spanning tree status. (1) Spanning tree protocol is enabled. (2) Spanning tree protocol is disabled.')
staProtocolType = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stp", 1), ("rstp", 2), ("mstp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staProtocolType.setReference('IEEE 802.1w clause 14.8.1, 17.12, 17.16.1')
if mibBuilder.loadTexts: staProtocolType.setStatus('current')
if mibBuilder.loadTexts: staProtocolType.setDescription("The version of Spanning Tree Protocol the bridge is currently running. The value 'stp(1)' indicates the Spanning Tree Protocol is as specified in IEEE 802.1D,'rstp(2)' indicates that the Rapid Spanning Tree Protocol is as specified in IEEE 802.1w, and the value 'mstp(3)' indicates that the Multiple Spanning Tree Protocol is as specified in IEEE 802.1s. Here LEO doesn't support 'mstp(3)' New values may be defined in the future as new or updated versions of the protocol become available.")
staTxHoldCount = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staTxHoldCount.setReference('IEEE 802.1w clause 17.16.6')
if mibBuilder.loadTexts: staTxHoldCount.setStatus('current')
if mibBuilder.loadTexts: staTxHoldCount.setDescription('The value used by the Port Transmit state machine to limit the maximum transmission rate.')
staPathCostMethod = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 5), StaPathCostMode().clone('short')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPathCostMethod.setStatus('current')
if mibBuilder.loadTexts: staPathCostMethod.setDescription("Indicates the type of spanning tree path cost mode configured on the switch. This mode applies to all instances of the spanning tree protocol running on the switch. When the value of this MIB object is changed, the path cost of all ports will be reassigned to the default path cost values based on the new spanning tree path cost mode and the ports' speed. When the value of this MIB object is set to long(2), the staPortLongPathCost MIB object must be used to retrieve/configure the spanning tree port path cost as a 32-bit value. The set operation on dot1dStpPortPathCost in BRIDGE-MIB will be rejected. While retrieving the value of dot1dStpPortPathCost, the maximum value of 65535 will be returned if the value of staPortLongPathCost for the same instance exceeds 65535. When the value of this MIB object is set to short(1), the dot1dStpPortPathCost in BRIDGE-MIB must be used.")
xstMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6))
mstName = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstName.setStatus('current')
if mibBuilder.loadTexts: mstName.setDescription('The name of the Multiple Spanning Tree region.')
mstRevision = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstRevision.setStatus('current')
if mibBuilder.loadTexts: mstRevision.setDescription('The Revision number of the Multiple Spanning Tree region.')
mstMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstMaxHops.setStatus('current')
if mibBuilder.loadTexts: mstMaxHops.setDescription('The max hop number counts of the Multiple Spanning Tree region.')
xstInstanceCfgTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 4), )
if mibBuilder.loadTexts: xstInstanceCfgTable.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgTable.setDescription('This table is used to configure the property of a specific instance in Multiple Spanning Tree or Rapid Spanning Tree. If Rapid Spanning Tree protocol is in use, the mstInstanceEditIndex is always 0.')
xstInstanceCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 4, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "xstInstanceCfgIndex"))
if mibBuilder.loadTexts: xstInstanceCfgEntry.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgEntry.setDescription('A conceptual row containing the property of the RST or MST instance.')
xstInstanceCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: xstInstanceCfgIndex.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgIndex.setDescription('An arbitrary integer within the range from 1 to the value of the maximum instance that uniquely identifies a spanning tree instance.')
xstInstanceCfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xstInstanceCfgPriority.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgPriority.setDescription('The priority of a specific spanning tree instance. The value assigned should be in the range 0-61440 in steps of 4096.')
xstInstanceCfgTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 4, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgTimeSinceTopologyChange.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgTimeSinceTopologyChange.setDescription('The time (in hundredths of a second) since the last topology change detected by the bridge entity in RST or MST.')
xstInstanceCfgTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgTopChanges.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgTopChanges.setDescription('The total number of topology changes detected by this bridge in RST or MST since the management entity was last reset or initialized.')
xstInstanceCfgDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 4, 1, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgDesignatedRoot.setReference('IEEE 802.1w.')
if mibBuilder.loadTexts: xstInstanceCfgDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgDesignatedRoot.setDescription('The bridge identifier of the root of the spanning tree as determined by the Multiple Spanning Tree Protocol. (802.1s) or Rapid Spanning Tree Protocol (802.1w) executed by this node. This value is used as the root identifier parameter in all configuration bridge PDUs originated by this node.')
xstInstanceCfgRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgRootCost.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgRootCost.setDescription('The cost of the path to the root as seen from this bridge of the RST or MST.')
xstInstanceCfgRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgRootPort.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgRootPort.setDescription('The number of the port which offers the lowest cost path from this bridge to the root bridge of the RST or MST.')
xstInstanceCfgMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 4, 1, 8), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgMaxAge.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgMaxAge.setDescription('The maximum age of Multiple Spanning Tree Protocol (802.1s) or Rapid Spanning Tree Protocol (802.1w) information learned from the network on any port before it is discarded, in units of hundredths of a second. This is the actual value that this bridge is currently using.')
xstInstanceCfgHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 4, 1, 9), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgHelloTime.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgHelloTime.setDescription('The amount of time between the transmission of configuration bridge PDUs by this node on any port when it is the root of the specific spanning tree or trying to become so, in units of hundredths of a second. This is the actual value that this bridge is currently using in RST or MST.')
xstInstanceCfgHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 4, 1, 10), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgHoldTime.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgHoldTime.setDescription('This time value determines the interval length during which no more than two configuration bridge PDUs shall be transmitted by this node, in units of hundredths of a second.')
xstInstanceCfgForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 4, 1, 11), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgForwardDelay.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgForwardDelay.setDescription('For RST or MST protocol, this time value, measured in units of hundredths of a second, controls how fast a port changes its spanning state when moving towards the forwarding state. The value determines how long the port stays in each of the listening and learning states, which precede the forwarding state. This value is also used, when a topology change has been detected and is underway, to age all dynamic entries in the forwarding database. This value is the current value being used by the bridge. xstInstanceCfgBridgeForwardDelay defines the value that this bridge and all others would start using if/when this bridge were to become the root.')
xstInstanceCfgBridgeMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 4, 1, 12), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgBridgeMaxAge.setReference('802.1D-1990.')
if mibBuilder.loadTexts: xstInstanceCfgBridgeMaxAge.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgBridgeMaxAge.setDescription('For RST or MST protocol, the time (in hundredths of second) that all bridges use for MaxAge when this bridge is acting as the root. Note that 802.1D-1990 specifies that the range for this parameter is related to the value of xstInstanceCfgBridgeHelloTime. The granularity of this timer is specified by 802.1D-1990 to be 1 second.')
xstInstanceCfgBridgeHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 4, 1, 13), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgBridgeHelloTime.setReference('802.1D-1990.')
if mibBuilder.loadTexts: xstInstanceCfgBridgeHelloTime.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgBridgeHelloTime.setDescription('For RST or MST protocol,the time (in hundredths of a second) that all bridges use for HelloTime when this bridge is acting as the root. The granularity of this timer is specified by 802.1D-1990 to be 1 second.')
xstInstanceCfgBridgeForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 4, 1, 14), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgBridgeForwardDelay.setReference('802.1D-1990.')
if mibBuilder.loadTexts: xstInstanceCfgBridgeForwardDelay.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgBridgeForwardDelay.setDescription('For RST or MST protocol, the time (in hundredths of a second) that all bridges use for ForwardDelay when this bridge is acting as the root. Note that 802.1D-1990 specifies that the range for this parameter is related to the value of xstInstanceCfgBridgeMaxAge. The granularity of this timer is specified by 802.1D-1990 to be 1 second.')
xstInstanceCfgTxHoldCount = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgTxHoldCount.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgTxHoldCount.setDescription('For RST or MST protocol, the value used by the port transmit state machine to limit the maximum transmission rate.')
xstInstanceCfgPathCostMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 4, 1, 16), StaPathCostMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgPathCostMethod.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgPathCostMethod.setDescription("For RST or MST protocol, this indicates the type of spanning tree path cost mode used by the switch. The mode applies to all instances of the Spanning Tree protocol running on the switch. When the value of this MIB object is changed, the path cost of all ports will be reassigned to the default path cost values based on the new spanning tree path cost mode and the ports' speed. When the value of this MIB object is set to long(2), the xstInstancePortPathCost MIB object must be used in order to retrieve/configure the spanning tree port path cost as a 32-bit value. The set operation on dot1dStpPortPathCost in BRIDGE-MIB will be rejected. While retrieving the value of dot1dStpPortPathCost, the maximum value of 65535 will be returned if the value of xstInstancePortPathCost for the same instance exceeds 65535. When the value of this MIB object is set to short(1), the dot1dStpPortPathCost in BRIDGE-MIB must be used.")
xstInstancePortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 5), )
if mibBuilder.loadTexts: xstInstancePortTable.setStatus('current')
if mibBuilder.loadTexts: xstInstancePortTable.setDescription('The extension table for dot1dStpPortEntry to provide additional Spanning Tree information and configuration.')
xstInstancePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 5, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "xstInstancePortInstance"), (0, "ES3526XA_ES3510-MIB", "xstInstancePortPort"))
if mibBuilder.loadTexts: xstInstancePortEntry.setStatus('current')
if mibBuilder.loadTexts: xstInstancePortEntry.setDescription('The conceptual row for xstInstancePortTable.')
xstInstancePortInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: xstInstancePortInstance.setStatus('current')
if mibBuilder.loadTexts: xstInstancePortInstance.setDescription('The instance of the MSTP.')
xstInstancePortPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 5, 1, 2), Integer32())
if mibBuilder.loadTexts: xstInstancePortPort.setStatus('current')
if mibBuilder.loadTexts: xstInstancePortPort.setDescription('The port and the trunk (excluding trunk member ports) interface of the mstInstancePortTable. The interface identified by a particular value of this index is the same interface as identified by the same value of dot1dStpPort in the BRIDGE-MIB.')
xstInstancePortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xstInstancePortPriority.setStatus('current')
if mibBuilder.loadTexts: xstInstancePortPriority.setDescription('Defines the priority used for this port in the Spanning Tree Algorithm. If the path cost for all ports on a switch is the same, the port with the highest priority (i.e., lowest value) will be configured as an active link in the Spanning Tree. This makes a port with higher priority less likely to be blocked if the Spanning Tree Algorithm is detecting network loops. Where more than one port is assigned the highest priority, the port with lowest numeric identifier will be enabled.')
xstInstancePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("discarding", 1), ("learning", 2), ("forwarding", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortState.setStatus('current')
if mibBuilder.loadTexts: xstInstancePortState.setDescription("The port's current state as defined by application of the Spanning Tree Protocol. This state controls what action a port takes on reception of a frame: discarding(1): Port receives configuration messages, but does not forward packets. learning(2): Port has transmitted configuration messages for an interval set by the Forward Delay parameter without receiving contradictory information. Port address table is cleared, and the port begins learning addresses. forwarding(3): Port forwards packets, and continues learning addresses. For ports which are disabled (see xstInstancePortEnable), this object will have a value of discarding(1).")
xstInstancePortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 5, 1, 5), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortEnable.setStatus('current')
if mibBuilder.loadTexts: xstInstancePortEnable.setDescription('The enabled/disabled status of the port.')
xstInstancePortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xstInstancePortPathCost.setStatus('current')
if mibBuilder.loadTexts: xstInstancePortPathCost.setDescription('The pathcost of the RST or MST in the range 1 to 200000000. This parameter is used to determine the best path between devices. Therefore, lower values should be assigned to ports attached to faster media, and higher values assigned to ports with slower media. (Path cost takes precedence over port priority).')
xstInstancePortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 5, 1, 7), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: xstInstancePortDesignatedRoot.setDescription('The unique bridge identifier of the bridge recorded as the root in the configuration BPDUs transmitted by the designated bridge for the segment to which the port is attached.')
xstInstancePortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortDesignatedCost.setStatus('current')
if mibBuilder.loadTexts: xstInstancePortDesignatedCost.setDescription('The path cost of the designated port of the segment connected to this port. This value is compared to the root path cost field in received bridge PDUs.')
xstInstancePortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 5, 1, 9), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortDesignatedBridge.setStatus('current')
if mibBuilder.loadTexts: xstInstancePortDesignatedBridge.setDescription("The bridge identifier of the bridge which this port considers to be the designated bridge for this port's segment.")
xstInstancePortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 5, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortDesignatedPort.setStatus('current')
if mibBuilder.loadTexts: xstInstancePortDesignatedPort.setDescription("The port identifier of the port on the designated bridge for this port's segment.")
xstInstancePortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortForwardTransitions.setStatus('current')
if mibBuilder.loadTexts: xstInstancePortForwardTransitions.setDescription('The number of times this port has transitioned from the learning state to the forwarding state.')
xstInstancePortPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("root", 2), ("designated", 3), ("alternate", 4), ("backup", 5), ("master", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortPortRole.setStatus('current')
if mibBuilder.loadTexts: xstInstancePortPortRole.setDescription('The role of the port in the RST or MST protocol: (1) The port has no role within the spanning tree (2) The port is part of the active topology connecting the bridge to the root bridge (i.e., root port) (3) The port is connecting a LAN through the bridge to the root bridge (i.e., designated port) (4) The port may provide connectivity if other bridges, bridge ports, or LANs fail or are removed. (5) The port provides backup if other bridges, bridge ports, or LANs fail or are removed. (6) For MST protocol only, indicates whether this instance is in a master role.')
mstInstanceEditTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 6), )
if mibBuilder.loadTexts: mstInstanceEditTable.setStatus('current')
if mibBuilder.loadTexts: mstInstanceEditTable.setDescription('The Multiple Spanning Tree region instance vlan configuration table. Please read the actual instance vlan mapped in the mstInstanceOperTable.')
mstInstanceEditEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 6, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "mstInstanceEditIndex"))
if mibBuilder.loadTexts: mstInstanceEditEntry.setStatus('current')
if mibBuilder.loadTexts: mstInstanceEditEntry.setDescription('A conceptual row containing the status of the MSTP instance.')
mstInstanceEditIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: mstInstanceEditIndex.setStatus('current')
if mibBuilder.loadTexts: mstInstanceEditIndex.setDescription('An arbitrary integer within the range from 1 to the value of the maximum instance that uniquely identifies a spanning tree instance.')
mstInstanceEditVlansMap = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstInstanceEditVlansMap.setStatus('current')
if mibBuilder.loadTexts: mstInstanceEditVlansMap.setDescription("A string of octets containing one bit per VLAN. The first octet corresponds to VLANs with vlanIndex values of 0 through 7; the second octet to VLANs 8 through 15; etc., The most significant bit of each octet corresponds to the lowest value vlanIndex in that octet. For each VLAN, if it is mapped to this MSTP instance, then the bit corresponding to that VLAN is set to '1'. To create a row, write any of mstInstanceEditVlansMap, mstInstanceEditVlansMap2k, mstInstanceEditVlansMap3k or mstInstanceEditVlansMap4k, to a non-empty list. To destroy a row, write all of these four variables to an empty list.")
mstInstanceEditVlansMap2k = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstInstanceEditVlansMap2k.setStatus('current')
if mibBuilder.loadTexts: mstInstanceEditVlansMap2k.setDescription("A string of octets containing one bit per VLAN for VLANS with vlanIndex values of 1024 through 2047. The first octet corresponds to VLANs with vlanIndex values of 1024 through 1031; the second octet to VLANs 1032 through 1039; etc. The most significant bit of each octet corresponds to the lowest value vlanIndex in that octet. For each VLAN, if it is mapped to this MSTP instance, then the bit corresponding to that VLAN is set to '1'. To create a row, write any of mstInstanceEditVlansMap, mstInstanceEditVlansMap2k, mstInstanceEditVlansMap3k or mstInstanceEditVlansMap4k, to a non-empty list. To destroy a row, write all of these four variables to an empty list.")
mstInstanceEditVlansMap3k = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstInstanceEditVlansMap3k.setStatus('current')
if mibBuilder.loadTexts: mstInstanceEditVlansMap3k.setDescription("A string of octets containing one bit per VLAN for VLANS with vlanIndex values of 2048 through 3071. The first octet corresponds to VLANs with vlanIndex values of 2048 through 2055; the second octet to VLANs 2056 through 2063; etc. The most significant bit of each octet corresponds to the lowest value vlanIndex in that octet. For each VLAN, if it is mapped to this MSTP instance, then the bit corresponding to that VLAN is set to '1'. To create a row, write any of mstInstanceEditVlansMap, mstInstanceEditVlansMap2k, mstInstanceEditVlansMap3k or mstInstanceEditVlansMap4k, to a non-empty list. To destroy a row, write all of these four variables to an empty list.")
mstInstanceEditVlansMap4k = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstInstanceEditVlansMap4k.setStatus('current')
if mibBuilder.loadTexts: mstInstanceEditVlansMap4k.setDescription("A string of octets containing one bit per VLAN for VLANS with vlanIndex values of 3072 through 4095. The first octet corresponds to VLANs with vlanIndex values of 3072 through 3079; the second octet to VLANs 3080 through 3087; etc. The most significant bit of each octet corresponds to the lowest value vlanIndex in that octet. For each VLAN, if it is mapped to this MSTP instance, then the bit corresponding to that VLAN is set to '1'. To create a row, write any of mstInstanceEditVlansMap, mstInstanceEditVlansMap2k, mstInstanceEditVlansMap3k or mstInstanceEditVlansMap4k, to a non-empty list. To destroy a row, write all of these four variables to an empty list.")
mstInstanceEditRemainingHops = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceEditRemainingHops.setStatus('current')
if mibBuilder.loadTexts: mstInstanceEditRemainingHops.setDescription('The remaining hop count for this MST instance.')
mstInstanceOperTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 7), )
if mibBuilder.loadTexts: mstInstanceOperTable.setStatus('current')
if mibBuilder.loadTexts: mstInstanceOperTable.setDescription('The Multiple Spanning Tree region instance vlan mapped table.')
mstInstanceOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 7, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "mstInstanceOperIndex"))
if mibBuilder.loadTexts: mstInstanceOperEntry.setStatus('current')
if mibBuilder.loadTexts: mstInstanceOperEntry.setDescription('A conceptual row containing the status of the MSTP instance.')
mstInstanceOperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: mstInstanceOperIndex.setStatus('current')
if mibBuilder.loadTexts: mstInstanceOperIndex.setDescription('An arbitrary integer within the range from 1 to the value of the maximum instance that uniquely identifies a spanning tree instance.')
mstInstanceOperVlansMap = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceOperVlansMap.setStatus('current')
if mibBuilder.loadTexts: mstInstanceOperVlansMap.setDescription("A string of octets containing one bit per VLAN. The first octet corresponds to VLANs with vlanIndex values of 0 through 7; the second octet to VLANs 8 through 15; etc., The most significant bit of each octet corresponds to the lowest value vlanIndex in that octet. For each VLAN, if it is mapped to this MSTP instance, then the bit corresponding to that VLAN is set to '1'.")
mstInstanceOperVlansMap2k = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceOperVlansMap2k.setStatus('current')
if mibBuilder.loadTexts: mstInstanceOperVlansMap2k.setDescription("A string of octets containing one bit per VLAN for VLANS with vlanIndex values of 1024 through 2047. The first octet corresponds to VLANs with vlanIndex values of 1024 through 1031; the second octet to VLANs 1032 through 1039; etc. The most significant bit of each octet corresponds to the lowest value vlanIndex in that octet. For each VLAN, if it is mapped to this MSTP instance, then the bit corresponding to that VLAN is set to '1'.")
mstInstanceOperVlansMap3k = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 7, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceOperVlansMap3k.setStatus('current')
if mibBuilder.loadTexts: mstInstanceOperVlansMap3k.setDescription("A string of octets containing one bit per VLAN for VLANS with vlanIndex values of 2048 through 3071. The first octet corresponds to VLANs with vlanIndex values of 2048 through 2055; the second octet to VLANs 2056 through 2063; etc. The most significant bit of each octet corresponds to the lowest value vlanIndex in that octet. For each VLAN, if it is mapped to this MSTP instance, then the bit corresponding to that VLAN is set to '1'.")
mstInstanceOperVlansMap4k = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 6, 7, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceOperVlansMap4k.setStatus('current')
if mibBuilder.loadTexts: mstInstanceOperVlansMap4k.setDescription("A string of octets containing one bit per VLAN for VLANS with vlanIndex values of 3072 through 4095. The first octet corresponds to VLANs with vlanIndex values of 3072 through 3079; the second octet to VLANs 3080 through 3087; etc. The most significant bit of each octet corresponds to the lowest value vlanIndex in that octet. For each VLAN, if it is mapped to this MSTP instance, then the bit corresponding to that VLAN is set to '1'.")
staLoopbackDetectionPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 7), )
if mibBuilder.loadTexts: staLoopbackDetectionPortTable.setStatus('current')
if mibBuilder.loadTexts: staLoopbackDetectionPortTable.setDescription('A table provides the mechanism to configure the spanning tree loopback detection of each port or trunk')
staLoopbackDetectionPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 7, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "staLoopbackDetectionPortIfIndex"))
if mibBuilder.loadTexts: staLoopbackDetectionPortEntry.setStatus('current')
if mibBuilder.loadTexts: staLoopbackDetectionPortEntry.setDescription('A conceptual row of staLoopbackDetectionPortTable.')
staLoopbackDetectionPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 7, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: staLoopbackDetectionPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: staLoopbackDetectionPortIfIndex.setDescription('The port and the trunk interfaces of the portTable. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex in the IF-MIB.')
staLoopbackDetectionPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 7, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staLoopbackDetectionPortStatus.setStatus('current')
if mibBuilder.loadTexts: staLoopbackDetectionPortStatus.setDescription('Status of the port on whether spanning tree loopback detection is enabled.')
staLoopbackDetectionPortTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 7, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staLoopbackDetectionPortTrapStatus.setStatus('current')
if mibBuilder.loadTexts: staLoopbackDetectionPortTrapStatus.setDescription('The parameter indicates whether the trap has to be sent when the loopback BPDUs have been detected.')
staLoopbackDetectionPortReleaseMode = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staLoopbackDetectionPortReleaseMode.setStatus('current')
if mibBuilder.loadTexts: staLoopbackDetectionPortReleaseMode.setDescription('Setting it to auto(1) indicates that this port can be released from discarding state automatically after loopback has occurred. Setting it to manual(2) indicates that this port can be released from discarding state manually after loopback has occurred.')
staLoopbackDetectionPortRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 5, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noRelease", 1), ("release", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staLoopbackDetectionPortRelease.setStatus('current')
if mibBuilder.loadTexts: staLoopbackDetectionPortRelease.setDescription('Set this to release(2) to release the port from discarding state. noRelease(1) will always be obtained when reading this variable.')
tftpFileType = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("opcode", 1), ("config", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFileType.setStatus('current')
if mibBuilder.loadTexts: tftpFileType.setDescription('Type of file to transfer.')
tftpSrcFile = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpSrcFile.setStatus('current')
if mibBuilder.loadTexts: tftpSrcFile.setDescription('The source file name for TFTP transfer when a transfer is next requested via this MIB. This value is set to the zero length string when no file name has been specified.')
tftpDestFile = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 6, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpDestFile.setStatus('current')
if mibBuilder.loadTexts: tftpDestFile.setDescription('The destination file name for TFTP transfer when a transfer is next requested via this MIB. This value is set to the zero length string when no file name has been specified.')
tftpServer = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 6, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpServer.setStatus('current')
if mibBuilder.loadTexts: tftpServer.setDescription("The IP address of the TFTP server for transfer when a download is next requested via this MIB. This value is set to `0.0.0.0' when no IP address has been specified.")
tftpAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notDownloading", 1), ("downloadToPROM", 2), ("downloadToRAM", 3), ("upload", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpAction.setStatus('current')
if mibBuilder.loadTexts: tftpAction.setDescription("When this object is set to downloadToRAM(3) or downloadToPROM(2), the device will discontinue its normal operation and begin download of the file specified by tftpSrcFile from the server specified by tftpServer to tftpDestFile in the device using the TFTP protocol. If downloadToRAM(3) is specified, the new image is copied to RAM only (the old image remains unaltered in the flash EPROM). If downloadToPROM(2) is specified the new image is written to the flash EPROM memory after its checksum has been verified to be correct. When the download process is completed, the device will warm boot to restart the newly loaded application. When the device is not downloading, this object will have a value of notDownloading(1). downloadToRAM(3) applies only to configuration download. Otherwise 'invalid value' is replied. When this object is set to upload(4), the device will begin upload of the file specified by tftpScrFile in the device to tftpDestFile in the server specified by tftpServer.")
tftpStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("tftpSuccess", 1), ("tftpStatusUnknown", 2), ("tftpGeneralError", 3), ("tftpNoResponseFromServer", 4), ("tftpDownloadChecksumError", 5), ("tftpDownloadIncompatibleImage", 6), ("tftpTftpFileNotFound", 7), ("tftpTftpAccessViolation", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tftpStatus.setStatus('current')
if mibBuilder.loadTexts: tftpStatus.setDescription('The status of the last transfer procedure, if any. This object will have a value of downloadStatusUnknown(2) if no transfer process has been performed.')
restartOpCodeFile = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartOpCodeFile.setStatus('current')
if mibBuilder.loadTexts: restartOpCodeFile.setDescription('Name of op-code file for start-up.')
restartConfigFile = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartConfigFile.setStatus('current')
if mibBuilder.loadTexts: restartConfigFile.setDescription('Name of configuration file for start-up.')
restartControl = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("running", 1), ("warmBoot", 2), ("coldBoot", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartControl.setStatus('current')
if mibBuilder.loadTexts: restartControl.setDescription('Setting this object to warmBoot(2) causes the device to restart the application software with current configuration parameters saved in non-volatile memory. Setting this object to coldBoot(3) causes the device to reinitialize configuration parameters in non-volatile memory to default values and restart the application software. When the device is running normally, this variable has a value of running(1).')
mirrorTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 8, 1), )
if mibBuilder.loadTexts: mirrorTable.setStatus('current')
if mibBuilder.loadTexts: mirrorTable.setDescription('Table of descriptive and status information about switches in this system.')
mirrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 8, 1, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "mirrorDestinationPort"), (0, "ES3526XA_ES3510-MIB", "mirrorSourcePort"))
if mibBuilder.loadTexts: mirrorEntry.setStatus('current')
if mibBuilder.loadTexts: mirrorEntry.setDescription('An entry in the table, containing information about a single switch in this system. ')
mirrorDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 8, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: mirrorDestinationPort.setStatus('current')
if mibBuilder.loadTexts: mirrorDestinationPort.setDescription('Destination port for mirrored packets. This is defined as ifIndex in the IF-MIB.')
mirrorSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 8, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: mirrorSourcePort.setStatus('current')
if mibBuilder.loadTexts: mirrorSourcePort.setDescription('Source port for mirrored packets. This is defined as ifIndex in the IF-MIB.')
mirrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rx", 1), ("tx", 2), ("both", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mirrorType.setStatus('current')
if mibBuilder.loadTexts: mirrorType.setDescription('If this value is rx(1), receive packets will be mirrored. If this value is tx(2), transmit packets will be mirrored. If this value is both(3), receive and transmit packets will be mirrored.')
mirrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 8, 1, 1, 4), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mirrorStatus.setStatus('current')
if mibBuilder.loadTexts: mirrorStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
igmpSnoopStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopStatus.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopStatus.setDescription('Parameter to enable or disable IGMP snooping on the device. When enabled, the device will examine IGMP packets and set up filters for IGMP ports. ')
igmpSnoopQuerier = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQuerier.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopQuerier.setDescription('Whether to act as querier.')
igmpSnoopQueryCount = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQueryCount.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopQueryCount.setDescription('Maximum number of queries that have not been heard on the system before the system starts taking action to solicit reports.')
igmpSnoopQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 125)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQueryInterval.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopQueryInterval.setDescription('Query interval.')
igmpSnoopQueryMaxResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 25)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQueryMaxResponseTime.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopQueryMaxResponseTime.setDescription('Timeout value (seconds) between IGMP reports received on a port for an IP Multicast Address that can pass before the system sends an IGMP Query out the port and removes it from the list.')
igmpSnoopQueryTimeout = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 500)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQueryTimeout.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopQueryTimeout.setDescription('Query time-out.')
igmpSnoopVersion = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopVersion.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopVersion.setDescription('Version.')
igmpSnoopRouterCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 8), )
if mibBuilder.loadTexts: igmpSnoopRouterCurrentTable.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopRouterCurrentTable.setDescription('Table for current router ports.')
igmpSnoopRouterCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 8, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "igmpSnoopRouterCurrentVlanIndex"))
if mibBuilder.loadTexts: igmpSnoopRouterCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopRouterCurrentEntry.setDescription('Entry for current router ports.')
igmpSnoopRouterCurrentVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 8, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopRouterCurrentVlanIndex.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopRouterCurrentVlanIndex.setDescription('This is defined as dot1qVlanIndex in the Q-BRIDGE-MIB.')
igmpSnoopRouterCurrentPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 8, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopRouterCurrentPorts.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopRouterCurrentPorts.setDescription('The set of ports which are current router ports. Within this list, some router ports are static router ports. Please refer to igmpSnoopRouterStaticTable.')
igmpSnoopRouterCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 8, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopRouterCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopRouterCurrentStatus.setDescription('The set of ports which are static router ports.')
igmpSnoopRouterStaticTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 9), )
if mibBuilder.loadTexts: igmpSnoopRouterStaticTable.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopRouterStaticTable.setDescription('Table for static router ports.')
igmpSnoopRouterStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 9, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "igmpSnoopRouterStaticVlanIndex"))
if mibBuilder.loadTexts: igmpSnoopRouterStaticEntry.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopRouterStaticEntry.setDescription('Entry for static router ports.')
igmpSnoopRouterStaticVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 9, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopRouterStaticVlanIndex.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopRouterStaticVlanIndex.setDescription('This is defined as dot1qVlanIndex in the Q-BRIDGE-MIB.')
igmpSnoopRouterStaticPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 9, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpSnoopRouterStaticPorts.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopRouterStaticPorts.setDescription('The set of ports which are static router ports.')
igmpSnoopRouterStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 9, 1, 3), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpSnoopRouterStaticStatus.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopRouterStaticStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
igmpSnoopMulticastCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 10), )
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentTable.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentTable.setDescription('Table for current multicast addresses.')
igmpSnoopMulticastCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 10, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "igmpSnoopMulticastCurrentVlanIndex"), (0, "ES3526XA_ES3510-MIB", "igmpSnoopMulticastCurrentIpAddress"))
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentEntry.setDescription('Entry for current multicast addresses.')
igmpSnoopMulticastCurrentVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentVlanIndex.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentVlanIndex.setDescription('This is defined as dot1qVlanIndex in the Q-BRIDGE-MIB.')
igmpSnoopMulticastCurrentIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 10, 1, 2), IpAddress())
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentIpAddress.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentIpAddress.setDescription('IP address of multicast group.')
igmpSnoopMulticastCurrentPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 10, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentPorts.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentPorts.setDescription('The set of ports which are members.')
igmpSnoopMulticastCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 10, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentStatus.setDescription('The set of ports which are static members.')
igmpSnoopMulticastStaticTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 11), )
if mibBuilder.loadTexts: igmpSnoopMulticastStaticTable.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastStaticTable.setDescription('Table for static multicast addresses.')
igmpSnoopMulticastStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 11, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "igmpSnoopMulticastStaticVlanIndex"), (0, "ES3526XA_ES3510-MIB", "igmpSnoopMulticastStaticIpAddress"))
if mibBuilder.loadTexts: igmpSnoopMulticastStaticEntry.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastStaticEntry.setDescription('Entry for static multicast addresses.')
igmpSnoopMulticastStaticVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 11, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopMulticastStaticVlanIndex.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastStaticVlanIndex.setDescription('The interface identified by a particular value of this index is the same interface as identified by the same value of dot1qVlanIndex in the Q-BRIDGE-MIB. The entry will only appear here after a configure to igmpSnoopMulticastStaticTable.')
igmpSnoopMulticastStaticIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 11, 1, 2), IpAddress())
if mibBuilder.loadTexts: igmpSnoopMulticastStaticIpAddress.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastStaticIpAddress.setDescription('IP address of multicast group.')
igmpSnoopMulticastStaticPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 11, 1, 3), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpSnoopMulticastStaticPorts.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastStaticPorts.setDescription('The set of ports which are members.')
igmpSnoopMulticastStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 11, 1, 4), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpSnoopMulticastStaticStatus.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastStaticStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
igmpSnoopCurrentVlanTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 14), )
if mibBuilder.loadTexts: igmpSnoopCurrentVlanTable.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopCurrentVlanTable.setDescription('Table for enabling or disabling IGMP snooping per VLAN.')
igmpSnoopCurrentVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 14, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "igmpSnoopCurrentVlanIndex"))
if mibBuilder.loadTexts: igmpSnoopCurrentVlanEntry.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopCurrentVlanEntry.setDescription('Entry for enabling or disabling IGMP snooping.')
igmpSnoopCurrentVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 14, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopCurrentVlanIndex.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopCurrentVlanIndex.setDescription('Same is dot1qVlanIndex in the Q-BRIDGE-MIB. This table has only one entry - the entry for the VLAN of the management interface.')
igmpSnoopCurrentVlanImmediateLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 14, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopCurrentVlanImmediateLeave.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopCurrentVlanImmediateLeave.setDescription('The parameter to enable or disable the Immediate-Leave feature on this VLAN.')
igmpSnoopLeaveProxy = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 15), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopLeaveProxy.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopLeaveProxy.setDescription('This enables or disables Leave Proxy for IGMP Snooping.')
igmpSnoopFilterStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 17), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopFilterStatus.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopFilterStatus.setDescription('Parameter to enable or disable IGMP filtering on the device.')
igmpSnoopProfileTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 18), )
if mibBuilder.loadTexts: igmpSnoopProfileTable.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopProfileTable.setDescription('The table for configuring the IGMP snooping profile.')
igmpSnoopProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 18, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "igmpSnoopProfileId"))
if mibBuilder.loadTexts: igmpSnoopProfileEntry.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopProfileEntry.setDescription('The entry for configuring the IGMP snooping profile.')
igmpSnoopProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 18, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopProfileId.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopProfileId.setDescription('The ID of the IGMP snooping profile.')
igmpSnoopProfileAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('deny')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopProfileAction.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopProfileAction.setDescription('The access mode of the IGMP snooping profile.')
igmpSnoopProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 18, 1, 3), ValidStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopProfileStatus.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopProfileStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
igmpSnoopProfileCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 19))
igmpSnoopProfileCtlId = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 19, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopProfileCtlId.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopProfileCtlId.setDescription('The ID of the IGMP snooping profile.')
igmpSnoopProfileCtlInetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 19, 2), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopProfileCtlInetAddressType.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopProfileCtlInetAddressType.setDescription('The address type is associated with this agent. Only ipv4(1) type is supported.')
igmpSnoopProfileCtlStartInetAddress = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 19, 3), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopProfileCtlStartInetAddress.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopProfileCtlStartInetAddress.setDescription('The specified addresses in the start of the controlled IP multicast addresses.')
igmpSnoopProfileCtlEndInetAddress = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 19, 4), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopProfileCtlEndInetAddress.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopProfileCtlEndInetAddress.setDescription('The specified addresses in the end of the controlled IP multicast addresses.')
igmpSnoopProfileCtlAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 19, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("create", 2), ("destroy", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopProfileCtlAction.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopProfileCtlAction.setDescription('Setting it to create(2) creates the range of the controlled IP multicast addresses. Setting it to destroy(3) destroys the range of the controlled IP multicast addresses. When the action is completed, this object becomes noAction(1).')
igmpSnoopProfileRangeTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 20), )
if mibBuilder.loadTexts: igmpSnoopProfileRangeTable.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopProfileRangeTable.setDescription('The table for configuring the range of the IGMP snooping profile.')
igmpSnoopProfileRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 20, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "igmpSnoopProfileRangeProfileId"), (0, "ES3526XA_ES3510-MIB", "igmpSnoopProfileRangeInetAddressType"), (0, "ES3526XA_ES3510-MIB", "igmpSnoopProfileRangeStartInetAddress"))
if mibBuilder.loadTexts: igmpSnoopProfileRangeEntry.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopProfileRangeEntry.setDescription('The entry for configuring the range of the IGMP snooping profile.')
igmpSnoopProfileRangeProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 20, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopProfileRangeProfileId.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopProfileRangeProfileId.setDescription('This is defined as igmpSnoopProfileId.')
igmpSnoopProfileRangeInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 20, 1, 2), InetAddressType())
if mibBuilder.loadTexts: igmpSnoopProfileRangeInetAddressType.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopProfileRangeInetAddressType.setDescription('The address type is associated with this agent. Only ipv4(1) type is supported.')
igmpSnoopProfileRangeStartInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 20, 1, 3), InetAddress())
if mibBuilder.loadTexts: igmpSnoopProfileRangeStartInetAddress.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopProfileRangeStartInetAddress.setDescription('The specified addresses in the start of the controlled IP multicast addresses.')
igmpSnoopProfileRangeEndInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 20, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopProfileRangeEndInetAddress.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopProfileRangeEndInetAddress.setDescription('The specified addresses in the end of the controlled IP multicast addresses.')
igmpSnoopProfileRangeAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('deny')).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopProfileRangeAction.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopProfileRangeAction.setDescription('The access mode of the IGMP snooping profile.')
igmpSnoopFilterPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 21), )
if mibBuilder.loadTexts: igmpSnoopFilterPortTable.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopFilterPortTable.setDescription('Table for port configuration in IGMP filtering.')
igmpSnoopFilterPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 21, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "igmpSnoopFilterPortIndex"))
if mibBuilder.loadTexts: igmpSnoopFilterPortEntry.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopFilterPortEntry.setDescription('Entry for port configuration in IGMP filtering.')
igmpSnoopFilterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 21, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopFilterPortIndex.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopFilterPortIndex.setDescription('The port and trunk (including trunk members) interface of the portTable. The interface identified by a particular value of this index is the same interface identified by the same value of ifIndex in the IF-MIB.')
igmpSnoopFilterPortProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 21, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopFilterPortProfileId.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopFilterPortProfileId.setDescription('The igmpSnoopProfileEntry identified by a particular value of this index is the same interface identified by the same value of the igmpSnoopProfileId object. If there is no corresponding entry in the igmpSnoopProfileTable, then no association exists. In particular, if this value is zero, no associated profile will be generated, as zero is not a valid profile index.')
igmpSnoopThrottlePortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 22), )
if mibBuilder.loadTexts: igmpSnoopThrottlePortTable.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopThrottlePortTable.setDescription('Table for port configuration in IGMP throttling.')
igmpSnoopThrottlePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 22, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "igmpSnoopThrottlePortIndex"))
if mibBuilder.loadTexts: igmpSnoopThrottlePortEntry.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopThrottlePortEntry.setDescription('Entry for port configuration in IGMP throttling.')
igmpSnoopThrottlePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 22, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopThrottlePortIndex.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopThrottlePortIndex.setDescription('The port and trunk (including trunk members) interface of the portTable. The interface identified by a particular value of this index is the same interface identified by the same value of ifIndex in the IF-MIB.')
igmpSnoopThrottlePortRunningStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 22, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopThrottlePortRunningStatus.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopThrottlePortRunningStatus.setDescription('Describes the running status of the IGMP throttling to the switch. A value of true(1) indicates the IGMP throttling mechanism is active. A value of false(2) indicates the IGMP throttling mechanism is inactive.')
igmpSnoopThrottlePortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("replace", 1), ("deny", 2))).clone('deny')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopThrottlePortAction.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopThrottlePortAction.setDescription('The action mode of the IGMP throttling. A value of replace(1) means to replace a joined multicast group randomly when an interface receives an IGMP report and the number of current joined multicast groups is equal to the maximum number of IGMP groups that the interface can join. A value of deny(2) means to deny the IGMP report request when an interface receives an IGMP report and the number of current joined multicast groups is equal to the maximum number of IGMP groups that the interface can join.')
igmpSnoopThrottlePortMaxGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 22, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopThrottlePortMaxGroups.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopThrottlePortMaxGroups.setDescription('The maximum number of IGMP groups that the interface can join.')
igmpSnoopThrottlePortCurrentGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 9, 22, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopThrottlePortCurrentGroups.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopThrottlePortCurrentGroups.setDescription('The current number of IGMP groups that the interface has joined.')
netConfigTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 10, 1), )
if mibBuilder.loadTexts: netConfigTable.setStatus('current')
if mibBuilder.loadTexts: netConfigTable.setDescription('A table of netConfigEntries.')
netConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 10, 1, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "netConfigIfIndex"), (0, "ES3526XA_ES3510-MIB", "netConfigIPAddress"), (0, "ES3526XA_ES3510-MIB", "netConfigSubnetMask"))
if mibBuilder.loadTexts: netConfigEntry.setStatus('current')
if mibBuilder.loadTexts: netConfigEntry.setDescription('A set of configuration parameters for a particular network interface on this device. If the device has no network interface, this table is empty. The index is composed of the ifIndex assigned to the corresponding interface.')
netConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 10, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: netConfigIfIndex.setStatus('current')
if mibBuilder.loadTexts: netConfigIfIndex.setDescription('VLAN interface on which this entry is defined. This is defined as ifIndex in the IF-MIB.')
netConfigIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 10, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: netConfigIPAddress.setStatus('current')
if mibBuilder.loadTexts: netConfigIPAddress.setDescription('The IP address of this Net interface. The default value for this object is 0.0.0.0. If either the netConfigIPAddress or netConfigSubnetMask are 0.0.0.0, then when the device boots, it may use BOOTP to try to figure out what these values should be. If BOOTP fails, before the device can talk on the network, this value must be configured (e.g., through a terminal attached to the device). If BOOTP is used, care should be taken to not send BOOTP broadcasts too frequently and to eventually send very infrequently if no replies are received.')
netConfigSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 10, 1, 1, 3), IpAddress())
if mibBuilder.loadTexts: netConfigSubnetMask.setStatus('current')
if mibBuilder.loadTexts: netConfigSubnetMask.setDescription('The subnet mask of this Net interface. The default value for this object is 0.0.0.0. If either the netConfigIPAddress or netConfigSubnetMask are 0.0.0.0, then when the device boots, it may use BOOTP to try to figure out what these values should be. If BOOTP fails, before the device can talk on the network, this value must be configured (e.g., through a terminal attached to the device). If BOOTP is used, care should be taken to not send BOOTP broadcasts too frequently and to eventually send very infrequently if no replies are received.')
netConfigPrimaryInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netConfigPrimaryInterface.setStatus('current')
if mibBuilder.loadTexts: netConfigPrimaryInterface.setDescription('Whether this is a primary interface.')
netConfigUnnumbered = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unnumbered", 1), ("notUnnumbered", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netConfigUnnumbered.setStatus('current')
if mibBuilder.loadTexts: netConfigUnnumbered.setDescription('Whether this is an unnumbered interface.')
netConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 10, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netConfigStatus.setStatus('current')
if mibBuilder.loadTexts: netConfigStatus.setDescription('The status of this netConfigEntry. An entry may not exist in the active state unless all objects in the entry have an appropriate value.')
netDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 10, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netDefaultGateway.setStatus('current')
if mibBuilder.loadTexts: netDefaultGateway.setDescription('The IP Address of the default gateway. If this value is undefined or unknown, it shall have the value 0.0.0.0.')
ipHttpState = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHttpState.setStatus('current')
if mibBuilder.loadTexts: ipHttpState.setDescription('Whether HTTP is enabled.')
ipHttpPort = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 10, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHttpPort.setStatus('current')
if mibBuilder.loadTexts: ipHttpPort.setDescription('The port number for HTTP.')
ipDhcpRestart = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("noRestart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDhcpRestart.setStatus('current')
if mibBuilder.loadTexts: ipDhcpRestart.setDescription('Write it to restart(1) to restart DHCP. When read, this value always returns noRestart(2).')
ipHttpsState = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHttpsState.setStatus('current')
if mibBuilder.loadTexts: ipHttpsState.setDescription('Whether HTTPS is enabled.')
ipHttpsPort = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 10, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHttpsPort.setStatus('current')
if mibBuilder.loadTexts: ipHttpsPort.setDescription('The port number for HTTPS.')
pingMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 10, 15))
pingIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 10, 15, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingIpAddress.setStatus('current')
if mibBuilder.loadTexts: pingIpAddress.setDescription('The address of the device to be pinged.')
pingPacketSize = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 10, 15, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 512)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingPacketSize.setStatus('current')
if mibBuilder.loadTexts: pingPacketSize.setDescription('Specifies the size of ping packets to send to the target in this ping operation. The lower and upper boundaries of this object are protocol-dependent.')
pingRoundTripTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 10, 15, 3), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pingRoundTripTime.setStatus('current')
if mibBuilder.loadTexts: pingRoundTripTime.setDescription('The last round trip time of a single ping operation. When the ping opertion is time out, a value of -1 will be returned.')
pingCompleted = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 10, 15, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pingCompleted.setStatus('current')
if mibBuilder.loadTexts: pingCompleted.setDescription('A value of true(1) will be read when this ping operation have been either responded to or timed out. A value of false(2) will be read when there is a ping operation is currently running and all associate objects in pingMgt cannot be modified during this period.')
pingAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 10, 15, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("pingStart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingAction.setStatus('current')
if mibBuilder.loadTexts: pingAction.setDescription('The action of the pingMgt. Set this objects to pingStart(2) to begin the ping operation. Once the action is set to pingStart(2), the associate pingMgt objects cannot be modified until this ping operation is completed (pingCompleted is true). When the ping has ended or no ping operation is performing, this object will get a value of noAction(1).')
bcastStormTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 11, 1), )
if mibBuilder.loadTexts: bcastStormTable.setStatus('current')
if mibBuilder.loadTexts: bcastStormTable.setDescription('Table of descriptive and status information about configuration of each switch ports(including expansion slot) in this system.')
bcastStormEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 11, 1, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "bcastStormIfIndex"))
if mibBuilder.loadTexts: bcastStormEntry.setStatus('current')
if mibBuilder.loadTexts: bcastStormEntry.setDescription('An entry in the table, containing information about configuration in one switch port of the switch.')
bcastStormIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 11, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: bcastStormIfIndex.setStatus('current')
if mibBuilder.loadTexts: bcastStormIfIndex.setDescription('This is defined as ifIndex in the IF-MIB.')
bcastStormStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcastStormStatus.setStatus('current')
if mibBuilder.loadTexts: bcastStormStatus.setDescription('Whether broadcast storm protection is enabled.')
bcastStormOctetRateScale = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("scale-1m", 0), ("scale-100k", 1), ("scale-10k", 2), ("scale-1k", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcastStormOctetRateScale.setStatus('current')
if mibBuilder.loadTexts: bcastStormOctetRateScale.setDescription('Broadcast storm scale as octets per second. If this is scale-1m(0), then Broadcast storm scale as 1M bytes per second, If this is scale-100k(1), then Broadcast storm scale as 100K bytes per second, If this is scale-10k(2), then Broadcast storm scale as 10K bytes per second, If this is scale-1k(3), then Broadcast storm scale as 1K bytes per second,')
bcastStormOctetRateLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcastStormOctetRateLevel.setStatus('current')
if mibBuilder.loadTexts: bcastStormOctetRateLevel.setDescription('Broadcast storm level.')
vlanTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 12, 1), )
if mibBuilder.loadTexts: vlanTable.setStatus('current')
if mibBuilder.loadTexts: vlanTable.setDescription('Table for VLAN configuration.')
vlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 12, 1, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "vlanIndex"))
if mibBuilder.loadTexts: vlanEntry.setStatus('current')
if mibBuilder.loadTexts: vlanEntry.setDescription('Entry for VLAN configuration.')
vlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 12, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: vlanIndex.setStatus('current')
if mibBuilder.loadTexts: vlanIndex.setDescription('Same is dot1qVlanIndex in the Q-BRIDGE-MIB. This table has only one entry - the entry for the VLAN of the management interface.')
vlanAddressMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("user", 1), ("bootp", 2), ("dhcp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanAddressMethod.setStatus('current')
if mibBuilder.loadTexts: vlanAddressMethod.setDescription('Method to get the IP address.')
vlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 12, 2), )
if mibBuilder.loadTexts: vlanPortTable.setStatus('current')
if mibBuilder.loadTexts: vlanPortTable.setDescription('Table for port configuration in VLAN.')
vlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 12, 2, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "vlanPortIndex"))
if mibBuilder.loadTexts: vlanPortEntry.setStatus('current')
if mibBuilder.loadTexts: vlanPortEntry.setDescription('Entry for port configuration in VLAN.')
vlanPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 12, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: vlanPortIndex.setStatus('current')
if mibBuilder.loadTexts: vlanPortIndex.setDescription('This is defined as ifIndex in the IF-MIB.')
vlanPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hybrid", 1), ("dot1qTrunk", 2), ("access", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPortMode.setStatus('current')
if mibBuilder.loadTexts: vlanPortMode.setDescription('This variable sets the 802.1Q VLAN mode. Setting it to hybrid(1) sets a hybrid link. Setting it to dot1qTrunk(2) sets a trunk link. Setting it to access(3) sets an access link,but it is not supported in LEO product.')
vlanPortPrivateVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 12, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("isolated", 2), ("community", 3), ("promiscous", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPortPrivateVlanType.setStatus('current')
if mibBuilder.loadTexts: vlanPortPrivateVlanType.setDescription('The port type defined for Private vlan.')
prioIpPrecDscpStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("precedence", 2), ("dscp", 3), ("tos", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIpPrecDscpStatus.setStatus('current')
if mibBuilder.loadTexts: prioIpPrecDscpStatus.setDescription('Whether IP precedence or DSCP look-up is enabled.')
prioIpPrecTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 2), )
if mibBuilder.loadTexts: prioIpPrecTable.setStatus('current')
if mibBuilder.loadTexts: prioIpPrecTable.setDescription('Table for IP precedence priority mapping.')
prioIpPrecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 2, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "prioIpPrecPort"), (0, "ES3526XA_ES3510-MIB", "prioIpPrecValue"))
if mibBuilder.loadTexts: prioIpPrecEntry.setStatus('current')
if mibBuilder.loadTexts: prioIpPrecEntry.setDescription('Entry for IP precendence priority mapping.')
prioIpPrecPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: prioIpPrecPort.setStatus('current')
if mibBuilder.loadTexts: prioIpPrecPort.setDescription('This is defined as ifIndex in the IF-MIB.')
prioIpPrecValue = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: prioIpPrecValue.setStatus('current')
if mibBuilder.loadTexts: prioIpPrecValue.setDescription('Precedence value for this entry.')
prioIpPrecCos = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIpPrecCos.setStatus('current')
if mibBuilder.loadTexts: prioIpPrecCos.setDescription('Class of service for this entry.')
prioIpPrecRestoreDefault = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIpPrecRestoreDefault.setStatus('current')
if mibBuilder.loadTexts: prioIpPrecRestoreDefault.setDescription('This object is to restore IP Precedence settings of a port to default. To do this, write it to the value of ifIndex defined by the ifIndex in the IF-MIB. The range is 1-28 when port number is 26. When read, this object always returns 0.')
prioIpDscpTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 4), )
if mibBuilder.loadTexts: prioIpDscpTable.setStatus('current')
if mibBuilder.loadTexts: prioIpDscpTable.setDescription('Table for IP DSCP priority mapping.')
prioIpDscpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 4, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "prioIpDscpPort"), (0, "ES3526XA_ES3510-MIB", "prioIpDscpValue"))
if mibBuilder.loadTexts: prioIpDscpEntry.setStatus('current')
if mibBuilder.loadTexts: prioIpDscpEntry.setDescription('Entry for IP DSCP priority mapping.')
prioIpDscpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: prioIpDscpPort.setStatus('current')
if mibBuilder.loadTexts: prioIpDscpPort.setDescription('This is defined as ifIndex in the IF-MIB.')
prioIpDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: prioIpDscpValue.setStatus('current')
if mibBuilder.loadTexts: prioIpDscpValue.setDescription('DSCP value for this entry.')
prioIpDscpCos = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIpDscpCos.setStatus('current')
if mibBuilder.loadTexts: prioIpDscpCos.setDescription('Class of service for this entry.')
prioIpDscpRestoreDefault = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIpDscpRestoreDefault.setStatus('current')
if mibBuilder.loadTexts: prioIpDscpRestoreDefault.setDescription('This object is to restore IP DSCP settings of a port to default. To do this, write it to the value of ifIndex defined by the ifIndex in the IF-MIB. The range is 1-28 when port number is 26. When read, this object always returns 0.')
prioIpPortEnableStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIpPortEnableStatus.setStatus('current')
if mibBuilder.loadTexts: prioIpPortEnableStatus.setDescription('Whether IP Port priority look-up is enabled.')
prioIpPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 7), )
if mibBuilder.loadTexts: prioIpPortTable.setStatus('current')
if mibBuilder.loadTexts: prioIpPortTable.setDescription('Table for IP port priority mapping.')
prioIpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 7, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "prioIpPortPhysPort"), (0, "ES3526XA_ES3510-MIB", "prioIpPortValue"))
if mibBuilder.loadTexts: prioIpPortEntry.setStatus('current')
if mibBuilder.loadTexts: prioIpPortEntry.setDescription('Entry for IP port priority mapping.')
prioIpPortPhysPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: prioIpPortPhysPort.setStatus('current')
if mibBuilder.loadTexts: prioIpPortPhysPort.setDescription('This is defined as ifIndex in the IF-MIB.')
prioIpPortValue = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: prioIpPortValue.setStatus('current')
if mibBuilder.loadTexts: prioIpPortValue.setDescription('IP port for this value.')
prioIpPortCos = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prioIpPortCos.setStatus('current')
if mibBuilder.loadTexts: prioIpPortCos.setDescription('Class of service for this entry.')
prioIpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prioIpPortStatus.setStatus('current')
if mibBuilder.loadTexts: prioIpPortStatus.setDescription('Writing this to valid(1) creates an entry. Writing this to invalid(2) destroys an entry.')
prioCopy = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 8))
prioCopyIpPrec = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 8, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioCopyIpPrec.setStatus('current')
if mibBuilder.loadTexts: prioCopyIpPrec.setDescription('Action to copy IP Precedence settings from a source port to many destination ports. The first four octets represent an integer for the source port, in high-to-low (big-endian) order. Starting from the 5th octet is destination port list in a form described by PortList in the Q-BRIDGE-MIB. Writing this object will perform copy. Reading this object will always get a zero-length octet string.')
prioCopyIpDscp = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 8, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioCopyIpDscp.setStatus('current')
if mibBuilder.loadTexts: prioCopyIpDscp.setDescription('Action to copy IP DSCP settings from a source port to many destination ports. The first four octets represent an integer for the source port, in high-to-low (big-endian) order. Starting from the 5th octet is destination port list in a form described by PortList in the Q-BRIDGE-MIB. Writing this object will perform copy. Reading this object will always get a zero-length octet string.')
prioCopyIpPort = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 8, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioCopyIpPort.setStatus('current')
if mibBuilder.loadTexts: prioCopyIpPort.setDescription('Action to copy IP Port settings from a source port to many destination ports. The first four octets represent an integer for the source port, in high-to-low (big-endian) order. Starting from the 5th octet is destination port list in a form described by PortList in the Q-BRIDGE-MIB. Writing this object will perform copy. Reading this object will always get a zero-length octet string.')
prioWrrTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 9), )
if mibBuilder.loadTexts: prioWrrTable.setStatus('current')
if mibBuilder.loadTexts: prioWrrTable.setDescription('Table for weighted round robin (WRR).')
prioWrrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 9, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "prioWrrTrafficClass"))
if mibBuilder.loadTexts: prioWrrEntry.setStatus('current')
if mibBuilder.loadTexts: prioWrrEntry.setDescription('Entry for weighted round robin (WRR).')
prioWrrTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: prioWrrTrafficClass.setStatus('current')
if mibBuilder.loadTexts: prioWrrTrafficClass.setDescription('Traffic class for this entry, as defined in dot1dTrafficClass in the Q-BRIDGE-MIB. The actual maximum depends on the hardware, and is equal to dot1dPortNumTrafficClasses-1.')
prioWrrWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioWrrWeight.setStatus('current')
if mibBuilder.loadTexts: prioWrrWeight.setDescription('Weight for this entry.')
prioQueueMode = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("wrr", 1), ("strict", 2), ("hybrid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioQueueMode.setStatus('current')
if mibBuilder.loadTexts: prioQueueMode.setDescription('The global status for the prioQueue. wrr(1),strict(2),hybrid(4)')
prioIpTosTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 11), )
if mibBuilder.loadTexts: prioIpTosTable.setStatus('current')
if mibBuilder.loadTexts: prioIpTosTable.setDescription('Table for IP tos priority mapping.')
prioIpTosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 11, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "prioIpTosPort"), (0, "ES3526XA_ES3510-MIB", "prioIpTosValue"))
if mibBuilder.loadTexts: prioIpTosEntry.setStatus('current')
if mibBuilder.loadTexts: prioIpTosEntry.setDescription('Entry for IP tos priority mapping.')
prioIpTosPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 11, 1, 2), Integer32())
if mibBuilder.loadTexts: prioIpTosPort.setStatus('current')
if mibBuilder.loadTexts: prioIpTosPort.setDescription('This is defined as ifIndex in the IF-MIB.')
prioIpTosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: prioIpTosValue.setStatus('current')
if mibBuilder.loadTexts: prioIpTosValue.setDescription('Tos value for this entry.')
prioIpTosCos = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIpTosCos.setStatus('current')
if mibBuilder.loadTexts: prioIpTosCos.setDescription('Class of service for this entry.')
prioIpTosRestoreDefault = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 13, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIpTosRestoreDefault.setStatus('current')
if mibBuilder.loadTexts: prioIpTosRestoreDefault.setDescription('This object is to restore IP Tos settings of a port to default. To do this, write it to the value of ifIndex defined by the ifIndex in the IF-MIB. The range is 1-28 when port number is 26. When read, this object always returns 0.')
trapDestTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 14, 1), )
if mibBuilder.loadTexts: trapDestTable.setStatus('current')
if mibBuilder.loadTexts: trapDestTable.setDescription('A list of trap destination entries.')
trapDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 14, 1, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "trapDestAddress"))
if mibBuilder.loadTexts: trapDestEntry.setStatus('current')
if mibBuilder.loadTexts: trapDestEntry.setDescription('A destination entry describes the destination IP address, the community string, and SNMP version to use when sending a trap.')
trapDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 14, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: trapDestAddress.setStatus('current')
if mibBuilder.loadTexts: trapDestAddress.setDescription('The address to send traps.')
trapDestCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 14, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapDestCommunity.setStatus('current')
if mibBuilder.loadTexts: trapDestCommunity.setDescription('A community to which this destination address belongs.')
trapDestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 14, 1, 1, 3), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapDestStatus.setStatus('current')
if mibBuilder.loadTexts: trapDestStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
trapDestVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("version1", 1), ("version2", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapDestVersion.setStatus('current')
if mibBuilder.loadTexts: trapDestVersion.setDescription('Determines the version of the trap that is to be sent to the trap receiver. If the value is 1, then an SNMP version 1 trap is sent and if the value is 2, an SNMP version 2 trap is sent.')
trapDestUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 14, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(162)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapDestUdpPort.setStatus('current')
if mibBuilder.loadTexts: trapDestUdpPort.setDescription('Determines the UDP port number that the trap will be sent to.')
rateLimitMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 1))
rateLimitPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 1, 2), )
if mibBuilder.loadTexts: rateLimitPortTable.setStatus('current')
if mibBuilder.loadTexts: rateLimitPortTable.setDescription('Table for rate limit of each port.')
rateLimitPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 1, 2, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "rlPortIndex"))
if mibBuilder.loadTexts: rateLimitPortEntry.setStatus('current')
if mibBuilder.loadTexts: rateLimitPortEntry.setDescription('Entry for rate limit of each port.')
rlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: rlPortIndex.setStatus('current')
if mibBuilder.loadTexts: rlPortIndex.setDescription('The port and the trunk (including trunk member) interface of the portTable. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex in the IF-MIB.')
rlPortInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 1, 2, 1, 6), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortInputStatus.setStatus('current')
if mibBuilder.loadTexts: rlPortInputStatus.setDescription('Whether input rate limit is enabled for this port.')
rlPortOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 1, 2, 1, 7), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortOutputStatus.setStatus('current')
if mibBuilder.loadTexts: rlPortOutputStatus.setDescription('Whether output rate limit is enabled for this port.')
rlPortInputLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortInputLevel.setStatus('current')
if mibBuilder.loadTexts: rlPortInputLevel.setDescription('The Level of the input rate limit.all ports range is 1..127')
rlPortInputScale = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("scale-10m", 0), ("scale-1m", 1), ("scale-100k", 2), ("scale-10k", 3), ("scale-1k", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortInputScale.setStatus('current')
if mibBuilder.loadTexts: rlPortInputScale.setDescription('Rate Limit scale as octets per second. If this is scale-10m(0), then Rate Limit scale as 10M bytes per second, If this is scale-1m(1), then Rate Limit scale as 1M bytes per second, If this is scale-100k(2), then Rate Limit scale as 100K bytes per second, If this is scale-10k(3), then Rate Limit scale as 10K bytes per second, If this is scale-1k(4), then Rate Limit scale as 1K bytes per second,')
rlPortOutputLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortOutputLevel.setStatus('current')
if mibBuilder.loadTexts: rlPortOutputLevel.setDescription('The Level of the output rate limit.all ports range is 1..127')
rlPortOutputScale = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("scale-10m", 0), ("scale-1m", 1), ("scale-100k", 2), ("scale-10k", 3), ("scale-1k", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortOutputScale.setStatus('current')
if mibBuilder.loadTexts: rlPortOutputScale.setDescription('Rate Limit scale as octets per second. If this is scale-10m(0), then Rate Limit scale as 10M bytes per second, If this is scale-1m(1), then Rate Limit scale as 1M bytes per second, If this is scale-100k(2), then Rate Limit scale as 100K bytes per second, If this is scale-10k(3), then Rate Limit scale as 10K bytes per second, If this is scale-1k(4), then Rate Limit scale as 1K bytes per second,')
cosMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 3))
prioAclToCosMappingTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 3, 1), )
if mibBuilder.loadTexts: prioAclToCosMappingTable.setStatus('current')
if mibBuilder.loadTexts: prioAclToCosMappingTable.setDescription('Table for ACL to CoS Mapping.')
prioAclToCosMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 3, 1, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "prioAclToCosMappingIfIndex"), (0, "ES3526XA_ES3510-MIB", "prioAclToCosMappingAclName"))
if mibBuilder.loadTexts: prioAclToCosMappingEntry.setStatus('current')
if mibBuilder.loadTexts: prioAclToCosMappingEntry.setDescription('Entry for ACL to CoS Mapping.')
prioAclToCosMappingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 3, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: prioAclToCosMappingIfIndex.setStatus('current')
if mibBuilder.loadTexts: prioAclToCosMappingIfIndex.setDescription('The port interface of the prioAclToCosMappingEntry. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex in the IF-MIB.')
prioAclToCosMappingAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15)))
if mibBuilder.loadTexts: prioAclToCosMappingAclName.setStatus('current')
if mibBuilder.loadTexts: prioAclToCosMappingAclName.setDescription('The name of an IP ACL. Within a feature a unique name is used to identify the list to which the entry belongs in the device.')
prioAclToCosMappingCosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prioAclToCosMappingCosValue.setStatus('current')
if mibBuilder.loadTexts: prioAclToCosMappingCosValue.setDescription('CoS value of the prioAclToCosMappingTable.')
prioAclToCosMappingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 3, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prioAclToCosMappingStatus.setStatus('current')
if mibBuilder.loadTexts: prioAclToCosMappingStatus.setDescription("The status of this conceptual row entry. This object isused to manage the creation and deletion of conceptual rows. The status column has six defined values: - 'active', which indicates that the conceptual row is available for use by the managed device; - 'notInService', which indicates that the conceptual row exists in the agent, but is unavailable for use by the managed device (see NOTE below); - 'notReady', which indicates that the conceptual row exists in the agent, but is missing information necessary in order to be available for use by the managed device; - 'createAndGo', which is supplied by a management station wishing to create a new instance of a conceptual row and to have its status automatically set to active, making it available for use by the managed device; - 'createAndWait', which is supplied by a management station wishing to create a new instance of a conceptual row (but not make it available for use by the managed device); and, - 'destroy', which is supplied by a management station wishing to delete all of the instances associated with an existing conceptual row. Whereas five of the six values (all except 'notReady') may be specified in a management protocol set operation, only three values will be returned in response to a management protocol retrieval operation: 'notReady', 'notInService' or 'active'. That is, when queried, an existing conceptual row has only three states: it is either available for use by the managed device (the status column has value 'active'); it is not available for use by the managed device, though the agent has sufficient information to make it so (the status column has value 'notInService'); or, it is not available for use by the managed device, and an attempt to make it so would fail because the agent has insufficient information (the state column has value 'notReady'). For a detailed description of this object, please refer to SNMPv2-TC MIB.")
portSecurityMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 2))
radiusMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 4))
tacacsMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 5))
sshMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6))
aclMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7))
ipFilterMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 9))
portSecPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 2, 1), )
if mibBuilder.loadTexts: portSecPortTable.setStatus('current')
if mibBuilder.loadTexts: portSecPortTable.setDescription('The Port Security(MAC bindind) Table')
portSecPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 2, 1, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "portSecPortIndex"))
if mibBuilder.loadTexts: portSecPortEntry.setStatus('current')
if mibBuilder.loadTexts: portSecPortEntry.setDescription('The entry of portSecPortTable')
portSecPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: portSecPortIndex.setStatus('current')
if mibBuilder.loadTexts: portSecPortIndex.setDescription('The port and the trunk (excluding trunk members) interface of the portTable. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex in the IF-MIB.')
portSecPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 2, 1, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecPortStatus.setStatus('current')
if mibBuilder.loadTexts: portSecPortStatus.setDescription('Set enabled(1) to enable port security and set disabled(2) to disable port security.')
portSecAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("trap", 2), ("shutdown", 3), ("trapAndShutdown", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecAction.setStatus('current')
if mibBuilder.loadTexts: portSecAction.setDescription('The corresponding actions that will take place when a port is under intrusion, when this variable is set to none(1), no action will be performed, when this variable is set to trap(2), a swPortSecurityTrap trap will be sent, when this variable is set to shutdown(3), the port will shutdown, when this variable is set to trapAndShutdown(4), a swPortSecurityTrap will be sent and the port will shutdown.')
portSecMaxMacCount = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecMaxMacCount.setStatus('current')
if mibBuilder.loadTexts: portSecMaxMacCount.setDescription('The maximun number of MAC addresses that will be learned and locked. When we change the value of this variable, if the portSecPortStatus is enabled, we will discard all secure MAC and begin to learn again, until the number of MAC has reached this value, and only the secure MAC addresses can enter this port. If the portSecPortStatus is disabled, we will begin to learn the MAC, and auto enabled the portSecPortStatus when the MAC has reached this value.')
radiusServerGlobalAuthPort = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerGlobalAuthPort.setStatus('current')
if mibBuilder.loadTexts: radiusServerGlobalAuthPort.setDescription('Aauthentication port number for RADIUS server. When specified radius server do not set aauthentication port number, this value is used.')
radiusServerGlobalAcctPort = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerGlobalAcctPort.setStatus('current')
if mibBuilder.loadTexts: radiusServerGlobalAcctPort.setDescription('Accounting port number of RADIUS server. When specified radius server do not set accounting port number, this value is used.')
radiusServerGlobalKey = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerGlobalKey.setStatus('current')
if mibBuilder.loadTexts: radiusServerGlobalKey.setDescription('Key for RADIUS. This variable can only be written. When this variable is read, it always returns a zero-length string. When specified radius server do not set key, this this value is used.')
radiusServerGlobalRetransmit = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerGlobalRetransmit.setStatus('current')
if mibBuilder.loadTexts: radiusServerGlobalRetransmit.setDescription('Maximum number of retransmissions for RADIUS. When specified radius server do not set maximum number of retransmissions, this value is used.')
radiusServerGlobalTimeout = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerGlobalTimeout.setStatus('current')
if mibBuilder.loadTexts: radiusServerGlobalTimeout.setDescription('Timeout for RADIUS. When specified radius server do not set timeout, this value is used.')
radiusServerTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 4, 7), )
if mibBuilder.loadTexts: radiusServerTable.setStatus('current')
if mibBuilder.loadTexts: radiusServerTable.setDescription('The table for RADIUS server.')
radiusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 4, 7, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "radiusServerIndex"))
if mibBuilder.loadTexts: radiusServerEntry.setStatus('current')
if mibBuilder.loadTexts: radiusServerEntry.setDescription('The conceptual row for radiusServerTable.')
radiusServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 4, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: radiusServerIndex.setStatus('current')
if mibBuilder.loadTexts: radiusServerIndex.setDescription('The RADIUS server index in the table.')
radiusServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 4, 7, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radiusServerAddress.setStatus('current')
if mibBuilder.loadTexts: radiusServerAddress.setDescription('IP address of a RADIUS server.')
radiusServerAuthPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 4, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radiusServerAuthPortNumber.setStatus('current')
if mibBuilder.loadTexts: radiusServerAuthPortNumber.setDescription('Authentication port number of RADIUS server.')
radiusServerAcctPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 4, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radiusServerAcctPortNumber.setStatus('current')
if mibBuilder.loadTexts: radiusServerAcctPortNumber.setDescription('Accounting port number of RADIUS server.')
radiusServerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 4, 7, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerKey.setStatus('current')
if mibBuilder.loadTexts: radiusServerKey.setDescription('Key for RADIUS. This variable can only be written. When this variable is read, it always returns a zero-length string.')
radiusServerRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 4, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerRetransmit.setStatus('current')
if mibBuilder.loadTexts: radiusServerRetransmit.setDescription('Timeout for RADIUS.')
radiusServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 4, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerTimeout.setStatus('current')
if mibBuilder.loadTexts: radiusServerTimeout.setDescription('Timeout for RADIUS.')
radiusServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 4, 7, 1, 8), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radiusServerStatus.setStatus('current')
if mibBuilder.loadTexts: radiusServerStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
tacacsPlusServerGlobalPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsPlusServerGlobalPortNumber.setStatus('current')
if mibBuilder.loadTexts: tacacsPlusServerGlobalPortNumber.setDescription('TCP port number of TACACS+ server. When specified TACACS+ server do not set TCP port number, this this value is used.')
tacacsPlusServerGlobalKey = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsPlusServerGlobalKey.setStatus('current')
if mibBuilder.loadTexts: tacacsPlusServerGlobalKey.setDescription('The encryption key used to encrpt the traffic between client and TACACS+ server. Do not use blank spaces in the string. This variable can only be set. When this variable is read, it always returns a zero-length string.When specified TACACS+ server do not set the encryption key , this this value is used.')
tacacsPlusServerTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 5, 4), )
if mibBuilder.loadTexts: tacacsPlusServerTable.setStatus('current')
if mibBuilder.loadTexts: tacacsPlusServerTable.setDescription('The table for TACACS+ server.')
tacacsPlusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 5, 4, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "tacacsPlusServerIndex"))
if mibBuilder.loadTexts: tacacsPlusServerEntry.setStatus('current')
if mibBuilder.loadTexts: tacacsPlusServerEntry.setDescription('The conceptual row for tacacsPlusServerTable.')
tacacsPlusServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 5, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: tacacsPlusServerIndex.setStatus('current')
if mibBuilder.loadTexts: tacacsPlusServerIndex.setDescription('TACACS+ server index.')
tacacsPlusServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 5, 4, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tacacsPlusServerAddress.setStatus('current')
if mibBuilder.loadTexts: tacacsPlusServerAddress.setDescription('IP address of a TACACS+ server.')
tacacsPlusServerPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tacacsPlusServerPortNumber.setStatus('current')
if mibBuilder.loadTexts: tacacsPlusServerPortNumber.setDescription('TCP port number of a TACACS+ server.')
tacacsPlusServerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 5, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tacacsPlusServerKey.setStatus('current')
if mibBuilder.loadTexts: tacacsPlusServerKey.setDescription('The encryption key used to encrpt the traffic between client and TACACS+ server. Do not use blank spaces in the string. This variable can only be set. When this variable is read, it always returns a zero-length string.')
tacacsPlusServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 5, 4, 1, 8), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tacacsPlusServerStatus.setStatus('current')
if mibBuilder.loadTexts: tacacsPlusServerStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
tacacsPlusServerRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 5, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tacacsPlusServerRetransmit.setStatus('current')
if mibBuilder.loadTexts: tacacsPlusServerRetransmit.setDescription('The maximum number of retransmissions for TACACS+.')
tacacsPlusServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 5, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 540))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tacacsPlusServerTimeout.setStatus('current')
if mibBuilder.loadTexts: tacacsPlusServerTimeout.setDescription('Timeout for TACACS+.')
tacacsPlusServerGlobalRetransmit = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsPlusServerGlobalRetransmit.setStatus('current')
if mibBuilder.loadTexts: tacacsPlusServerGlobalRetransmit.setDescription('The maximum number of retransmissions for TACACS+ global server.')
tacacsPlusServerGlobalTimeout = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 540))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsPlusServerGlobalTimeout.setStatus('current')
if mibBuilder.loadTexts: tacacsPlusServerGlobalTimeout.setDescription(' Timeout for TACACS+ global server.')
sshServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerStatus.setStatus('current')
if mibBuilder.loadTexts: sshServerStatus.setDescription('The status of Secure Shell Server. Set this value to enabled(1) to enable SSH server, set this value to disabled(2) to disable the SSH server.')
sshServerMajorVersion = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshServerMajorVersion.setStatus('current')
if mibBuilder.loadTexts: sshServerMajorVersion.setDescription('The major version of the SSH Server.')
sshServerMinorVersion = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshServerMinorVersion.setStatus('current')
if mibBuilder.loadTexts: sshServerMinorVersion.setDescription('The minor version of the SSH Server.')
sshTimeout = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshTimeout.setStatus('current')
if mibBuilder.loadTexts: sshTimeout.setDescription('The time interval that the router waits for the SSH client to respond. The range is 1-120.')
sshAuthRetries = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshAuthRetries.setStatus('current')
if mibBuilder.loadTexts: sshAuthRetries.setDescription('The number of attempts after which the interface is reset. The range is 1-5.')
sshConnInfoTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 6), )
if mibBuilder.loadTexts: sshConnInfoTable.setStatus('current')
if mibBuilder.loadTexts: sshConnInfoTable.setDescription('The table for Secure Shell Connection.')
sshConnInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 6, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "sshConnID"))
if mibBuilder.loadTexts: sshConnInfoEntry.setStatus('current')
if mibBuilder.loadTexts: sshConnInfoEntry.setDescription('The conceptual row for sshConnInfoTable.')
sshConnID = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: sshConnID.setStatus('current')
if mibBuilder.loadTexts: sshConnID.setDescription('The connection ID of the Secure Shell Connection.')
sshConnMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnMajorVersion.setStatus('current')
if mibBuilder.loadTexts: sshConnMajorVersion.setDescription('The SSH major version.')
sshConnMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnMinorVersion.setStatus('current')
if mibBuilder.loadTexts: sshConnMinorVersion.setDescription('The SSH minor version.')
sshConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("negotiationStart", 1), ("authenticationStart", 2), ("sessionStart", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnStatus.setStatus('current')
if mibBuilder.loadTexts: sshConnStatus.setDescription('The SSH connection State. negotiationStart(1) means the SSH is in its negotiation start state, authenticationStart(2) means the SSH is in authentication start state, sessionStart(3) means the SSH is in session start State.')
sshConnUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnUserName.setStatus('current')
if mibBuilder.loadTexts: sshConnUserName.setDescription('The user name of the connection.')
sshDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noDisconnect", 1), ("disconnect", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshDisconnect.setStatus('current')
if mibBuilder.loadTexts: sshDisconnect.setDescription('Set the variable to disconnect the connection, noDisconnect(1) will always be obtained when reading this variable.')
sshConnEncryptionTypeStr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnEncryptionTypeStr.setStatus('current')
if mibBuilder.loadTexts: sshConnEncryptionTypeStr.setDescription('The encryption type of the SSH.')
sshKeySize = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 896))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshKeySize.setStatus('current')
if mibBuilder.loadTexts: sshKeySize.setDescription('The SSH server key size.')
sshRsaHostKey1 = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 8), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey1.setStatus('current')
if mibBuilder.loadTexts: sshRsaHostKey1.setDescription('The RSA host key segment 1.')
sshRsaHostKey2 = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 9), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey2.setStatus('current')
if mibBuilder.loadTexts: sshRsaHostKey2.setDescription('The RSA host key segment 2.')
sshRsaHostKey3 = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 10), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey3.setStatus('current')
if mibBuilder.loadTexts: sshRsaHostKey3.setDescription('The RSA host key segment 3.')
sshRsaHostKey4 = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 11), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey4.setStatus('current')
if mibBuilder.loadTexts: sshRsaHostKey4.setDescription('The RSA host key segment 4.')
sshRsaHostKey5 = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 12), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey5.setStatus('current')
if mibBuilder.loadTexts: sshRsaHostKey5.setDescription('The RSA host key segment 5.')
sshRsaHostKey6 = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 13), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey6.setStatus('current')
if mibBuilder.loadTexts: sshRsaHostKey6.setDescription('The RSA host key segment 6.')
sshRsaHostKey7 = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 14), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey7.setStatus('current')
if mibBuilder.loadTexts: sshRsaHostKey7.setDescription('The RSA host key segment 7.')
sshRsaHostKey8 = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 15), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey8.setStatus('current')
if mibBuilder.loadTexts: sshRsaHostKey8.setDescription('The RSA host key segment 8.')
sshDsaHostKey1 = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 16), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey1.setStatus('current')
if mibBuilder.loadTexts: sshDsaHostKey1.setDescription('The DSA host key segment 1.')
sshDsaHostKey2 = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 17), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey2.setStatus('current')
if mibBuilder.loadTexts: sshDsaHostKey2.setDescription('The DSA host key segment 2.')
sshDsaHostKey3 = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 18), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey3.setStatus('current')
if mibBuilder.loadTexts: sshDsaHostKey3.setDescription('The DSA host key segment 3.')
sshDsaHostKey4 = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 19), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey4.setStatus('current')
if mibBuilder.loadTexts: sshDsaHostKey4.setDescription('The DSA host key segment 4.')
sshDsaHostKey5 = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 20), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey5.setStatus('current')
if mibBuilder.loadTexts: sshDsaHostKey5.setDescription('The DSA host key segment 5.')
sshDsaHostKey6 = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 21), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey6.setStatus('current')
if mibBuilder.loadTexts: sshDsaHostKey6.setDescription('The DSA host key segment 6.')
sshDsaHostKey7 = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 22), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey7.setStatus('current')
if mibBuilder.loadTexts: sshDsaHostKey7.setDescription('The DSA host key segment 7.')
sshDsaHostKey8 = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 23), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey8.setStatus('current')
if mibBuilder.loadTexts: sshDsaHostKey8.setDescription('The DSA host key segment 8.')
sshHostKeyGenAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noGen", 1), ("genRsaKey", 2), ("genDsaKey", 3), ("genBothKeys", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshHostKeyGenAction.setStatus('current')
if mibBuilder.loadTexts: sshHostKeyGenAction.setDescription('This variable is for host key generating. For the set behavior: Set it to genRsaKey(2) to generate the RSA host key, and to genDsaKey(3) to generate the DSA host key, if genBothKeys(4) is set, both RSA and DSA host key are generated. For the get behavior: You will get genRsaKey(2), genDsaKey(3) or genBothKeys(4) when the key gen action is in progress. otherwise, you will get noGen(1).')
sshHostKeyGenStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("success", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshHostKeyGenStatus.setStatus('current')
if mibBuilder.loadTexts: sshHostKeyGenStatus.setDescription('The result of the last KeyGen status. if no key gen action has been performed. you will get unknown(1) status.')
sshHostKeySaveAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noSave", 1), ("save", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshHostKeySaveAction.setStatus('current')
if mibBuilder.loadTexts: sshHostKeySaveAction.setDescription('To save host key from memory to flash. For the set behavior: Set it to save(2) to perform the save operation. For the get behavior: You will get save(1) when the save action is in progress. Otherwise, you will get noSave(1).')
sshHostKeySaveStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("success", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshHostKeySaveStatus.setStatus('current')
if mibBuilder.loadTexts: sshHostKeySaveStatus.setDescription('The result of the last savekey status. If no save action has been performed, you will get unknown(1) status.')
sshHostKeyDelAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 6, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noDel", 1), ("delRsaKey", 2), ("delDsaKey", 3), ("delBothKeys", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshHostKeyDelAction.setStatus('current')
if mibBuilder.loadTexts: sshHostKeyDelAction.setDescription('To delete the host key. For the set behavior: Set it to delRsaKey(2) to delete the RSA host key, to delDsaKey(3) to delete the DSA host key, or to delBothKeys(4) to delete both RSA and DSA host key. For the get behavior: You will get delRsaKey(2), delDsaKey(3) or delBothKeys(4) when the delete operation is in progress. Otherwise, you will get noDel(1).')
aclIpAceTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1), )
if mibBuilder.loadTexts: aclIpAceTable.setStatus('current')
if mibBuilder.loadTexts: aclIpAceTable.setDescription('The conceptual table of all of aclIpAceEntry.')
aclIpAceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "aclIpAceName"), (0, "ES3526XA_ES3510-MIB", "aclIpAceIndex"))
if mibBuilder.loadTexts: aclIpAceEntry.setStatus('current')
if mibBuilder.loadTexts: aclIpAceEntry.setDescription('The conceptual row for aclIpAceTable.')
aclIpAceName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15)))
if mibBuilder.loadTexts: aclIpAceName.setStatus('current')
if mibBuilder.loadTexts: aclIpAceName.setDescription('The name of an ACL. Within a feature a unique name is used to identify the list to which the entry belongs in the device.')
aclIpAceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: aclIpAceIndex.setStatus('current')
if mibBuilder.loadTexts: aclIpAceIndex.setDescription('The unique index of an ACE within an ACL.')
aclIpAcePrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclIpAcePrecedence.setStatus('current')
if mibBuilder.loadTexts: aclIpAcePrecedence.setDescription('Specifies the IP precedence value to be matched against. This object cannot not be configured when the status of the entry, aclIpAceStatus, is active(1).')
aclIpAceAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceAction.setStatus('current')
if mibBuilder.loadTexts: aclIpAceAction.setDescription('Indicates the action to be taken if a packet matches this ACE. This object cannot not be configured when the status of the entry, aclIpAceStatus, is active(1).')
aclIpAceSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceSourceIpAddr.setStatus('current')
if mibBuilder.loadTexts: aclIpAceSourceIpAddr.setDescription("The specified source IP address. The packet's source address is AND-ed with the value of aclIpAceSourceIpAddrBitmask and then compared against the value of this object. This object cannot be configured when the status of the entry, aclIpAceStatus, is active(1).")
aclIpAceSourceIpAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceSourceIpAddrBitmask.setStatus('current')
if mibBuilder.loadTexts: aclIpAceSourceIpAddrBitmask.setDescription("The specified source IP address mask. The packet's destination address is AND-ed with the value of aclIpAceSourceIpAddr and then compared against the value of this object.")
aclIpAceDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceDestIpAddr.setStatus('current')
if mibBuilder.loadTexts: aclIpAceDestIpAddr.setDescription("The specified destination IP address. The packet's destination address is AND-ed with the value of aclIpAceDestIpAddrBitmask and then compared against the value of this object.")
aclIpAceDestIpAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceDestIpAddrBitmask.setStatus('current')
if mibBuilder.loadTexts: aclIpAceDestIpAddrBitmask.setDescription('The specified destination IP address mask.')
aclIpAceProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceProtocol.setStatus('current')
if mibBuilder.loadTexts: aclIpAceProtocol.setDescription("The protocol number field in the IP header used to indicate the higher layer protocol as specified in RFC 1700. A value value of 0 matches every IP packet. The object=256, means 'any' For example : 0 is IP, 1 is ICMP, 2 is IGMP, 4 is IP in IP encapsulation, 6 is TCP, 9 is IGRP, 17 is UDP, 47 is GRE, 50 is ESP, 51 is AH, 88 is IGRP, 89 is OSPF, 94 is KA9Q/NOS compatible IP over IP, 103 is PIMv2, 108 is PCP. ")
aclIpAcePrec = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAcePrec.setStatus('current')
if mibBuilder.loadTexts: aclIpAcePrec.setDescription('Specifies the IP precedence value to be matched against. This object cannot be configured when the status of the entry, aclIpAceStatus, is active(1). The value of this object is ignored whenever the value of aclIpAcePrec object is 8.')
aclIpAceTos = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceTos.setStatus('current')
if mibBuilder.loadTexts: aclIpAceTos.setDescription('Specifies the IP ToS facility value to be matched against. This object cannot be configured when the status of the entry, aclIpAceStatus, is active(1). The value of this object is ignored whenever the value of aclIpAcePrec object is 9.')
aclIpAceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceDscp.setStatus('current')
if mibBuilder.loadTexts: aclIpAceDscp.setDescription('Specifies the DSCP value to be matched against. This object cannot be configured when the status of the entry, aclIpAceStatus, is active(1). The value of this object is ignored whenever the value of aclIpAcePrec object is 64.')
aclIpAceSourcePortOp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperator", 1), ("equal", 2), ("range", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceSourcePortOp.setStatus('current')
if mibBuilder.loadTexts: aclIpAceSourcePortOp.setDescription("Indicates how a packet's source TCP/UDP port number is to be compared. noOperator(1), which is the default value, means no comparison is to be made with the source TCP/UDP port number.")
aclIpAceMinSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceMinSourcePort.setStatus('current')
if mibBuilder.loadTexts: aclIpAceMinSourcePort.setDescription('If the aclIpAceSourcePortOp is range(3), this indicates the lower bound of the TCP/UDP port number value range.')
aclIpAceMaxSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceMaxSourcePort.setStatus('current')
if mibBuilder.loadTexts: aclIpAceMaxSourcePort.setDescription('If the aclIpAceSourcePortOp is range(3), this indicates the upper bound of the TCP/UDP port number value range.')
aclIpAceDestPortOp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperator", 1), ("equal", 2), ("range", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceDestPortOp.setStatus('current')
if mibBuilder.loadTexts: aclIpAceDestPortOp.setDescription("Indicates how a packet's destination TCP/UDP port number is to be compared. noOperator(1), which is the default value, means that no comparison is to be made with the destination TCP/UDP port number.")
aclIpAceMinDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceMinDestPort.setStatus('current')
if mibBuilder.loadTexts: aclIpAceMinDestPort.setDescription('If the aclIpAceDestPortOp is range(3), this indicates the lower bound of the TCP/UDP port number value range.')
aclIpAceMaxDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceMaxDestPort.setStatus('current')
if mibBuilder.loadTexts: aclIpAceMaxDestPort.setDescription('If the aclIpAceDestPortOp is range(3), this indicates the upper bound of the TCP/UDP port number value range.')
aclIpAceControlCode = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceControlCode.setStatus('current')
if mibBuilder.loadTexts: aclIpAceControlCode.setDescription('Indicates how the control flags of TCP packets are to be compared. aceIpControlCode is AND-ed with aceIpControlCodeBitmask.')
aclIpAceControlCodeBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceControlCodeBitmask.setStatus('current')
if mibBuilder.loadTexts: aclIpAceControlCodeBitmask.setDescription('Indicates how the control flags of TCP packets are to be compared. It can be used to check multiple flags of the FIN, SYN, RST, PSH, ACK, URG by the sum of FIN=1, SYN=2, RST=4, PSH=8, ACK=16, URG=32.')
aclIpAceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 1, 1, 23), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclIpAceStatus.setStatus('current')
if mibBuilder.loadTexts: aclIpAceStatus.setDescription("The status of this conceptual row entry. This object isused to manage the creation and deletion of conceptual rows. The status column has six defined values: - 'active', which indicates that the conceptual row is available for use by the managed device; - 'notInService', which indicates that the conceptual row exists in the agent, but is unavailable for use by the managed device (see NOTE below); - 'notReady', which indicates that the conceptual row exists in the agent, but is missing information necessary in order to be available for use by the managed device; - 'createAndGo', which is supplied by a management station wishing to create a new instance of a conceptual row and to have its status automatically set to active, making it available for use by the managed device; - 'createAndWait', which is supplied by a management station wishing to create a new instance of a conceptual row (but not make it available for use by the managed device); and, - 'destroy', which is supplied by a management station wishing to delete all of the instances associated with an existing conceptual row. Whereas five of the six values (all except 'notReady') may be specified in a management protocol set operation, only three values will be returned in response to a management protocol retrieval operation: 'notReady', 'notInService' or 'active'. That is, when queried, an existing conceptual row has only three states: it is either available for use by the managed device (the status column has value 'active'); it is not available for use by the managed device, though the agent has sufficient information to make it so (the status column has value 'notInService'); or, it is not available for use by the managed device, and an attempt to make it so would fail because the agent has insufficient information (the state column has value 'notReady'). For a detailed description of this object, please refer to SNMPv2-TC MIB.")
aclMacAceTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 2), )
if mibBuilder.loadTexts: aclMacAceTable.setStatus('current')
if mibBuilder.loadTexts: aclMacAceTable.setDescription('The conceptual table of all of aclMacAceEntry.')
aclMacAceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 2, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "aclMacAceName"), (0, "ES3526XA_ES3510-MIB", "aclMacAceIndex"))
if mibBuilder.loadTexts: aclMacAceEntry.setStatus('current')
if mibBuilder.loadTexts: aclMacAceEntry.setDescription('The conceptual row for aclMacAceTable. ')
aclMacAceName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15)))
if mibBuilder.loadTexts: aclMacAceName.setStatus('current')
if mibBuilder.loadTexts: aclMacAceName.setDescription('The name of an ACL. Within a feature, a unique name is used to identify the list to which the entry belongs in the device.')
aclMacAceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: aclMacAceIndex.setStatus('current')
if mibBuilder.loadTexts: aclMacAceIndex.setDescription('The unique index of an ACE within an ACL.')
aclMacAcePrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aclMacAcePrecedence.setStatus('current')
if mibBuilder.loadTexts: aclMacAcePrecedence.setDescription("Specifies the entry's precedence.")
aclMacAceAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceAction.setStatus('current')
if mibBuilder.loadTexts: aclMacAceAction.setDescription('Indicates the action to be taken if a packet matches this ACE. This object cannot be configured when the status of the entry, aclMacAceStatus, is active(1).')
aclMacAcePktformat = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("any", 1), ("untagged-Eth2", 2), ("untagged802Dot3", 3), ("tagggedEth2", 4), ("tagged802Dot3", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAcePktformat.setStatus('current')
if mibBuilder.loadTexts: aclMacAcePktformat.setDescription('Used to check the packet format of the packets. This object cannot be configured when the status of the entry, aclMacAceStatus, is active(1).')
aclMacAceSourceMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceSourceMacAddr.setStatus('current')
if mibBuilder.loadTexts: aclMacAceSourceMacAddr.setDescription("Indicates the 48-bit destination MAC address. The specified source MAC of the packet The packet's source MAC address is AND-ed with the value of aceMacSourceMacAddrBitmask and then compared against the value of this object. This object cannot be configured when the status of the entry, aclMacAceStatus, is active(1).")
aclMacAceSourceMacAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceSourceMacAddrBitmask.setStatus('current')
if mibBuilder.loadTexts: aclMacAceSourceMacAddrBitmask.setDescription('The specified source MAC address mask. This object cannot be configured when the status of the entry, aclMacAceStatus, is active(1).')
aclMacAceDestMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceDestMacAddr.setStatus('current')
if mibBuilder.loadTexts: aclMacAceDestMacAddr.setDescription("Indicates the 48-bit destination MAC address. The specified destination MAC of the packet. The packet's destination MAC address is AND-ed with the value of aceMacDestMacAddrBitmask and then compared against the value of this object. This object cannot be configured when the status of the entry, aclMacAceStatus, is active(1).")
aclMacAceDestMacAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceDestMacAddrBitmask.setStatus('current')
if mibBuilder.loadTexts: aclMacAceDestMacAddrBitmask.setDescription('The specified destination MAC address mask. This object cannot be configured when the status of the entry, aclMacAceStatus, is active(1).')
aclMacAceVidOp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("noOperator", 1), ("range", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceVidOp.setStatus('current')
if mibBuilder.loadTexts: aclMacAceVidOp.setDescription("Indicates how a packet's vid is to be compared. This object cannot be configured when the status of the entry, aclMacAceStatus, is active(1).")
aclMacAceMinVid = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceMinVid.setStatus('current')
if mibBuilder.loadTexts: aclMacAceMinVid.setDescription('Indicates the lower bound of the vid value range if the aclMacAceVidOp is range(3). This object cannot be configured when the status of the entry, aclMacAceStatus, is active(1).')
aclMacAceMaxVid = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceMaxVid.setStatus('current')
if mibBuilder.loadTexts: aclMacAceMaxVid.setDescription('Indicates the upper bound of the vid value range if the aclMacAceVidOp is range(3). This object cannot be configured when the status of the entry, aclMacAceStatus, is active(1).')
aclMacAceEtherTypeOp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("noOperator", 1), ("range", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceEtherTypeOp.setStatus('current')
if mibBuilder.loadTexts: aclMacAceEtherTypeOp.setDescription("Indicates how a packet's ethertype is to be compared. This object cannot be configured when the status of the entry, aclMacAceStatus, is active(1).")
aclMacAceMinEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceMinEtherType.setStatus('current')
if mibBuilder.loadTexts: aclMacAceMinEtherType.setDescription('Indicates the lower bound of the vid value range if the aclMacAceEtherTypeOp is range(3). This object cannot be configured when the status of the entry, aclMacAceStatus, is active(1).')
aclMacAceMaxEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceMaxEtherType.setStatus('current')
if mibBuilder.loadTexts: aclMacAceMaxEtherType.setDescription('Indicates the upper bound of the vid value range if the aclMacAceEtherTypeOp is range(3). This object cannot be configured when the status of the entry, aclMacAceStatus, is active(1).')
aclMacAceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 2, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAceStatus.setStatus('current')
if mibBuilder.loadTexts: aclMacAceStatus.setDescription("The status of this conceptual row entry. This object isused to manage the creation and deletion of conceptual rows. The status column has six defined values: - 'active', which indicates that the conceptual row is available for use by the managed device; - 'notInService', which indicates that the conceptual row exists in the agent, but is unavailable for use by the managed device (see NOTE below); - 'notReady', which indicates that the conceptual row exists in the agent, but is missing information necessary in order to be available for use by the managed device; - 'createAndGo', which is supplied by a management station wishing to create a new instance of a conceptual row and to have its status automatically set to active, making it available for use by the managed device; - 'createAndWait', which is supplied by a management station wishing to create a new instance of a conceptual row (but not make it available for use by the managed device); and, - 'destroy', which is supplied by a management station wishing to delete all of the instances associated with an existing conceptual row. Whereas five of the six values (all except 'notReady') may be specified in a management protocol set operation, only three values will be returned in response to a management protocol retrieval operation: 'notReady', 'notInService' or 'active'. That is, when queried, an existing conceptual row has only three states: it is either available for use by the managed device (the status column has value 'active'); it is not available for use by the managed device, though the agent has sufficient information to make it so (the status column has value 'notInService'); or, it is not available for use by the managed device, and an attempt to make it so would fail because the agent has insufficient information (the state column has value 'notReady'). For a detailed description of this object, please refer to SNMPv2-TC MIB.")
aclAclGroupTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 3), )
if mibBuilder.loadTexts: aclAclGroupTable.setStatus('current')
if mibBuilder.loadTexts: aclAclGroupTable.setDescription('The conceptual table of aclAclGroupEntry.')
aclAclGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 3, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "aclAclGroupIfIndex"))
if mibBuilder.loadTexts: aclAclGroupEntry.setStatus('current')
if mibBuilder.loadTexts: aclAclGroupEntry.setDescription('The conceptual row for aclAclGroupTable.')
aclAclGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: aclAclGroupIfIndex.setStatus('current')
if mibBuilder.loadTexts: aclAclGroupIfIndex.setDescription('The interface number specifying the ACL binding to.')
aclAclGroupIngressIpAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclAclGroupIngressIpAcl.setStatus('current')
if mibBuilder.loadTexts: aclAclGroupIngressIpAcl.setDescription('Specifies the ingress IP ACL(standard or extended) binding to the interface.')
aclAclGroupEgressIpAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclAclGroupEgressIpAcl.setStatus('current')
if mibBuilder.loadTexts: aclAclGroupEgressIpAcl.setDescription('Specifies the egress IP ACL(standard or extended) binding to the interface.But it is not supported in LEO product.')
aclAclGroupIngressMacAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclAclGroupIngressMacAcl.setStatus('current')
if mibBuilder.loadTexts: aclAclGroupIngressMacAcl.setDescription('Specifies the ingress MAC ACL binding to the interface.')
aclAclGroupEgressMacAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 7, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclAclGroupEgressMacAcl.setStatus('current')
if mibBuilder.loadTexts: aclAclGroupEgressMacAcl.setDescription('Specifies the egress MAC ACL binding to the interface.But it is not supported in LEO product.')
ipFilterSnmpTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 9, 1), )
if mibBuilder.loadTexts: ipFilterSnmpTable.setStatus('current')
if mibBuilder.loadTexts: ipFilterSnmpTable.setDescription('A list of IP address entries.')
ipFilterSnmpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 9, 1, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "ipFilterSnmpStartAddress"))
if mibBuilder.loadTexts: ipFilterSnmpEntry.setStatus('current')
if mibBuilder.loadTexts: ipFilterSnmpEntry.setDescription('This entry includes an IP address range which the system will allow to connect to this device through SNMP.')
ipFilterSnmpStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 9, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: ipFilterSnmpStartAddress.setStatus('current')
if mibBuilder.loadTexts: ipFilterSnmpStartAddress.setDescription('The start IP address.')
ipFilterSnmpEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 9, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterSnmpEndAddress.setStatus('current')
if mibBuilder.loadTexts: ipFilterSnmpEndAddress.setDescription('The end IP address.')
ipFilterSnmpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 9, 1, 1, 3), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterSnmpStatus.setStatus('current')
if mibBuilder.loadTexts: ipFilterSnmpStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
ipFilterHTTPTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 9, 2), )
if mibBuilder.loadTexts: ipFilterHTTPTable.setStatus('current')
if mibBuilder.loadTexts: ipFilterHTTPTable.setDescription('A list of IP address entries.')
ipFilterHTTPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 9, 2, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "ipFilterHTTPStartAddress"))
if mibBuilder.loadTexts: ipFilterHTTPEntry.setStatus('current')
if mibBuilder.loadTexts: ipFilterHTTPEntry.setDescription('This entry includes an IP address range which the system will allow to connect to this device through SNMP.')
ipFilterHTTPStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 9, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: ipFilterHTTPStartAddress.setStatus('current')
if mibBuilder.loadTexts: ipFilterHTTPStartAddress.setDescription('The start IP address.')
ipFilterHTTPEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 9, 2, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterHTTPEndAddress.setStatus('current')
if mibBuilder.loadTexts: ipFilterHTTPEndAddress.setDescription('The end IP address.')
ipFilterHTTPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 9, 2, 1, 3), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterHTTPStatus.setStatus('current')
if mibBuilder.loadTexts: ipFilterHTTPStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
ipFilterTelnetTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 9, 3), )
if mibBuilder.loadTexts: ipFilterTelnetTable.setStatus('current')
if mibBuilder.loadTexts: ipFilterTelnetTable.setDescription('A list of IP address entries.')
ipFilterTelnetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 9, 3, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "ipFilterTelnetStartAddress"))
if mibBuilder.loadTexts: ipFilterTelnetEntry.setStatus('current')
if mibBuilder.loadTexts: ipFilterTelnetEntry.setDescription('This entry includes an IP address range which the system will allow them to connect to this device through SNMP.')
ipFilterTelnetStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 9, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: ipFilterTelnetStartAddress.setStatus('current')
if mibBuilder.loadTexts: ipFilterTelnetStartAddress.setDescription('The start IP address.')
ipFilterTelnetEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 9, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterTelnetEndAddress.setStatus('current')
if mibBuilder.loadTexts: ipFilterTelnetEndAddress.setDescription('The end IP address.')
ipFilterTelnetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 17, 9, 3, 1, 3), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterTelnetStatus.setStatus('current')
if mibBuilder.loadTexts: ipFilterTelnetStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
sysLogStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogStatus.setStatus('current')
if mibBuilder.loadTexts: sysLogStatus.setDescription('Whether system log is enabled.')
sysLogHistoryFlashLevel = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogHistoryFlashLevel.setStatus('current')
if mibBuilder.loadTexts: sysLogHistoryFlashLevel.setDescription('Severity level for logging to flash.')
sysLogHistoryRamLevel = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogHistoryRamLevel.setStatus('current')
if mibBuilder.loadTexts: sysLogHistoryRamLevel.setDescription('Severity level for logging to RAM.')
remoteLogMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 6))
remoteLogStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 6, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteLogStatus.setStatus('current')
if mibBuilder.loadTexts: remoteLogStatus.setDescription('Whether the remote log system is enabled.')
remoteLogLevel = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteLogLevel.setStatus('current')
if mibBuilder.loadTexts: remoteLogLevel.setDescription('Severity level for remote log.')
remoteLogFacilityType = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("localUse0", 16), ("localUse1", 17), ("localUse2", 18), ("localUse3", 19), ("localUse4", 20), ("localUse5", 21), ("localUse6", 22), ("localUse7", 23)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteLogFacilityType.setStatus('current')
if mibBuilder.loadTexts: remoteLogFacilityType.setDescription(' The FacilityType for remote log.')
remoteLogServerTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 6, 4), )
if mibBuilder.loadTexts: remoteLogServerTable.setStatus('current')
if mibBuilder.loadTexts: remoteLogServerTable.setDescription('A Table for storing the remote log Server list.')
remoteLogServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 6, 4, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "remoteLogServerIp"))
if mibBuilder.loadTexts: remoteLogServerEntry.setStatus('current')
if mibBuilder.loadTexts: remoteLogServerEntry.setDescription('A conceptually row for remoteLogServerTable.')
remoteLogServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 6, 4, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: remoteLogServerIp.setStatus('current')
if mibBuilder.loadTexts: remoteLogServerIp.setDescription('The IP address of the remote log Server.')
remoteLogServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 6, 4, 1, 2), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: remoteLogServerStatus.setStatus('current')
if mibBuilder.loadTexts: remoteLogServerStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
smtpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 7))
smtpStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 7, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpStatus.setStatus('current')
if mibBuilder.loadTexts: smtpStatus.setDescription('Set enabled(1) to enable the SMTP, set disabled(2) to disable the SMTP.')
smtpSeverityLevel = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpSeverityLevel.setStatus('current')
if mibBuilder.loadTexts: smtpSeverityLevel.setDescription('Specify the SMTP minimum severity level to send the event message.')
smtpSourceEMail = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 7, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 41))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpSourceEMail.setStatus('current')
if mibBuilder.loadTexts: smtpSourceEMail.setDescription("SMTP source email address, the sender's mail address that appears in the 'From' field of the mail.")
smtpServerIpTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 7, 4), )
if mibBuilder.loadTexts: smtpServerIpTable.setStatus('current')
if mibBuilder.loadTexts: smtpServerIpTable.setDescription('The SMTP server IP table. The maximum servers to be added is 3.')
smtpServerIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 7, 4, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "smtpServerIp"))
if mibBuilder.loadTexts: smtpServerIpEntry.setStatus('current')
if mibBuilder.loadTexts: smtpServerIpEntry.setDescription('A conceptual row of the smtpServerIpTable.')
smtpServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 7, 4, 1, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: smtpServerIp.setStatus('current')
if mibBuilder.loadTexts: smtpServerIp.setDescription("SMTP mail server's IP address.")
smtpServerIpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 7, 4, 1, 2), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: smtpServerIpStatus.setStatus('current')
if mibBuilder.loadTexts: smtpServerIpStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
smtpDestEMailTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 7, 5), )
if mibBuilder.loadTexts: smtpDestEMailTable.setStatus('current')
if mibBuilder.loadTexts: smtpDestEMailTable.setDescription('The table of the destination e-mail address. The maximum numbers of destination email address to be added is 5.')
smtpDestEMailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 7, 5, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "smtpDestEMail"))
if mibBuilder.loadTexts: smtpDestEMailEntry.setStatus('current')
if mibBuilder.loadTexts: smtpDestEMailEntry.setDescription('A conceptual row of the smtpDestEMailTable.')
smtpDestEMail = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 7, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 41)))
if mibBuilder.loadTexts: smtpDestEMail.setStatus('current')
if mibBuilder.loadTexts: smtpDestEMail.setDescription('SMTP destination e-mail address.')
smtpDestEMailStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 19, 7, 5, 1, 2), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: smtpDestEMailStatus.setStatus('current')
if mibBuilder.loadTexts: smtpDestEMailStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
consoleMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 20, 1))
telnetMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 20, 2))
consoleDataBits = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("databits7", 1), ("databits8", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleDataBits.setStatus('current')
if mibBuilder.loadTexts: consoleDataBits.setDescription('Number of data bits.')
consoleParity = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("partyNone", 1), ("partyEven", 2), ("partyOdd", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleParity.setStatus('current')
if mibBuilder.loadTexts: consoleParity.setDescription('Defines the generation of a parity bit.')
consoleStopBits = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stopbits1", 1), ("stopbits2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleStopBits.setStatus('current')
if mibBuilder.loadTexts: consoleStopBits.setDescription('The console stop bits, valid values are stopbits1(1) or stopbits2(2)')
consoleExecTimeout = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 20, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleExecTimeout.setStatus('current')
if mibBuilder.loadTexts: consoleExecTimeout.setDescription('In a serial console, use the consoleExecTimeout variable to set the interval that the EXEC command interpreter waits until user input is detected; set the value to 0 to disable it.')
consolePasswordThreshold = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 20, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consolePasswordThreshold.setStatus('current')
if mibBuilder.loadTexts: consolePasswordThreshold.setDescription('The number of failed console logon attempts that may be made before the system will not accept a further attempt in the time specified by consoleSilentTime. A value of 0 disables the functionality.')
consoleSilentTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 20, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleSilentTime.setStatus('current')
if mibBuilder.loadTexts: consoleSilentTime.setDescription('The length of time that the management console is inaccessible after the number of failed logon attempts has reached consolePasswordThreshold. A value of 0 disables the functionality.')
consoleAdminBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 20, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleAdminBaudRate.setStatus('current')
if mibBuilder.loadTexts: consoleAdminBaudRate.setDescription('Baud rate. Valid values are 2400, 4800, 9600, 19200, 38400, 57600, 115200. Setting this variable to 0 means autobaud. Please read the actual baud rate in the consoleOperBaudRate variable.')
consoleOperBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 20, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: consoleOperBaudRate.setStatus('current')
if mibBuilder.loadTexts: consoleOperBaudRate.setDescription('The baud rate currently in use.')
consoleLoginResponseTimeout = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 20, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleLoginResponseTimeout.setStatus('current')
if mibBuilder.loadTexts: consoleLoginResponseTimeout.setDescription('Console login response timeout setting. Valid range is 0 to 300. Setting to 0 means disabled.')
telnetExecTimeout = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 20, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetExecTimeout.setStatus('current')
if mibBuilder.loadTexts: telnetExecTimeout.setDescription('In a telnet session, to set the interval that the EXEC command interpreter waits until user input is detected, use the telnetExecTimeout variables. ')
telnetPasswordThreshold = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 20, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPasswordThreshold.setStatus('current')
if mibBuilder.loadTexts: telnetPasswordThreshold.setDescription('In a telnet session, use the consolePasswordThreshold variabes to set the password intrusion threshold, which limits the number of failed logon attempts allowed. Set it value to 0 to disable it.')
telnetLoginResponseTimeout = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 20, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetLoginResponseTimeout.setStatus('current')
if mibBuilder.loadTexts: telnetLoginResponseTimeout.setDescription('Telnet login response timeout setting. Valid range is 1 to 300. This timout setting cannot be disbled.')
sntpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 1))
sntpStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpStatus.setStatus('current')
if mibBuilder.loadTexts: sntpStatus.setDescription('Set enabled(1) to enable the SNTP, set disabled(2) to disable the SNTP.')
sntpServiceMode = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("unicast", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpServiceMode.setStatus('current')
if mibBuilder.loadTexts: sntpServiceMode.setDescription('Service mode.')
sntpPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 16384))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpPollInterval.setStatus('current')
if mibBuilder.loadTexts: sntpPollInterval.setDescription('Polling interval.')
sntpServerTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 1, 4), )
if mibBuilder.loadTexts: sntpServerTable.setStatus('current')
if mibBuilder.loadTexts: sntpServerTable.setDescription('Table for SNTP servers')
sntpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 1, 4, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "sntpServerIndex"))
if mibBuilder.loadTexts: sntpServerEntry.setStatus('current')
if mibBuilder.loadTexts: sntpServerEntry.setDescription('Entry for SNTP servers.')
sntpServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: sntpServerIndex.setStatus('current')
if mibBuilder.loadTexts: sntpServerIndex.setDescription('The index of a server. This table has fixed size.')
sntpServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 1, 4, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: sntpServerIpAddress.setDescription('The IP address of a server. Valid IP addresses must occupy contiguous indexes. All IP addresses after the last valid index is 0.')
sysCurrentTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCurrentTime.setStatus('current')
if mibBuilder.loadTexts: sysCurrentTime.setDescription("It is a text string in the following form, based on Unix: 'Mmm _d hh:mm:ss yyyy'. 'Mmm' is the first three letters of the English name of the month. '_d' is the day of month. A single-digit day is preceded by the space. 'hh:mm:ss' is a 24-hour representations of hours, minutes, and seconds. A single-digit hour is preceded by a zero. 'yyyy' is the four-digit year. An example is: 'Jan 1 02:03:04 2002'.")
sysTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeZone.setStatus('current')
if mibBuilder.loadTexts: sysTimeZone.setDescription("It is a text string in the following form: '[s]hh:mm'. '[s]' is a plus-or-minus sign. For UTC, this is omitted. For a positive offset, this is '+'. For a negative offset, this is '-'. 'hh:mm' in the hour and minute offset from UTC. A single-digit hour is preceded by a zero.")
sysTimeZoneName = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeZoneName.setStatus('current')
if mibBuilder.loadTexts: sysTimeZoneName.setDescription('The name of the time zone.')
ntpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 5))
ntpStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 5, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpStatus.setStatus('current')
if mibBuilder.loadTexts: ntpStatus.setDescription('Set enabled(1) to enable the NTP, set disabled(2) to disable the NTP.')
ntpServiceMode = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("unicast", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpServiceMode.setStatus('current')
if mibBuilder.loadTexts: ntpServiceMode.setDescription('Service mode.')
ntpPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 16384))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpPollInterval.setStatus('current')
if mibBuilder.loadTexts: ntpPollInterval.setDescription('Polling interval.')
ntpAuthenticateStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 5, 4), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpAuthenticateStatus.setStatus('current')
if mibBuilder.loadTexts: ntpAuthenticateStatus.setDescription('Set enabled(1) to enable the NTP Authenticate, set disabled(2) to disable the NTP.')
ntpServerTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 5, 5), )
if mibBuilder.loadTexts: ntpServerTable.setStatus('current')
if mibBuilder.loadTexts: ntpServerTable.setDescription('Table for NTP servers')
ntpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 5, 5, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "ntpServerIpAddress"))
if mibBuilder.loadTexts: ntpServerEntry.setStatus('current')
if mibBuilder.loadTexts: ntpServerEntry.setDescription('Entry for NTP servers.')
ntpServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 5, 5, 1, 1), IpAddress())
if mibBuilder.loadTexts: ntpServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: ntpServerIpAddress.setDescription('The IP address of a server. Valid IP addresses must occupy contiguous indexes. All IP addresses after the last valid index is 0.')
ntpServerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntpServerVersion.setStatus('current')
if mibBuilder.loadTexts: ntpServerVersion.setDescription('NTP version.')
ntpServerKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpServerKeyId.setStatus('current')
if mibBuilder.loadTexts: ntpServerKeyId.setDescription('Key for a NTP server. This variable can only be written. ')
ntpServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("create", 1), ("active", 2), ("destroy", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntpServerStatus.setStatus('current')
if mibBuilder.loadTexts: ntpServerStatus.setDescription("The status of this conceptual row entry. This object isused to manage the creation and deletion of conceptual rows. The status column has six defined values: - 'active', which indicates that the conceptual row is available for use by the managed device; - 'create', which is supplied by a management station wishing to create a new instance of a conceptual row and to have its status automatically set to active, making it available for use by the managed device; - 'destroy', which is supplied by a management station wishing to delete all of the instances associated with an existing conceptual row.")
ntpAuthKeyTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 5, 6), )
if mibBuilder.loadTexts: ntpAuthKeyTable.setStatus('current')
if mibBuilder.loadTexts: ntpAuthKeyTable.setDescription('Table for NTP Authentication keys')
ntpAuthKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 5, 6, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "ntpAuthKeyId"))
if mibBuilder.loadTexts: ntpAuthKeyEntry.setStatus('current')
if mibBuilder.loadTexts: ntpAuthKeyEntry.setDescription('Entry for NTP Authentication keys.')
ntpAuthKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 5, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536)))
if mibBuilder.loadTexts: ntpAuthKeyId.setStatus('current')
if mibBuilder.loadTexts: ntpAuthKeyId.setDescription('The index of a Authentication key. This table has fixed size.')
ntpAuthKeyWord = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 5, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntpAuthKeyWord.setStatus('current')
if mibBuilder.loadTexts: ntpAuthKeyWord.setDescription('The Authentication key word is used to created a key by the MD5 And the max length is 32.')
ntpAuthKeyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 23, 5, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("create", 1), ("active", 2), ("destroy", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntpAuthKeyStatus.setStatus('current')
if mibBuilder.loadTexts: ntpAuthKeyStatus.setDescription("The status of this conceptual row entry. This object isused to manage the creation and deletion of conceptual rows. The status column has six defined values: - 'active', which indicates that the conceptual row is available for use by the managed device; - 'create', which is supplied by a management station wishing to create a new instance of a conceptual row and to have its status automatically set to active, making it available for use by the managed device; - 'destroy', which is supplied by a management station wishing to delete all of the instances associated with an existing conceptual row.")
fileCopyMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 24, 1))
fileCopySrcOperType = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 24, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("file", 1), ("runningCfg", 2), ("startUpCfg", 3), ("tftp", 4), ("unit", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopySrcOperType.setStatus('current')
if mibBuilder.loadTexts: fileCopySrcOperType.setDescription("The Copy Operation that we want to perform on the fileCopyDestOperType, this operation is similar to the CLI command 'copy fileCopySrcOperType fileCopyDestOperType'. file(1) means we want to perform the 'copy file fileCopyDestType' operation, runningCfg(2) means we want to perform the 'copy running-config fileCopyDestOperType' operation, startUpCfg(3) means we want to perform the 'copy startup-config fileCopyDestOperType' operation, tftp(4) means we want to perform the 'copy tftp fileCopyDestOperType' operation, unit(5) is only available in stacking systems, in which we can copy files from one unit to another unit and it means we want to perform the 'copy unit fileCopyDestOperType' operation. The possible permutations are as follows: (1)copy file file (2)copy file runningCfg (3) copy file startUpCfg (4)copy file tftp (5) copy file unit(for stacking systems only) (6)copy runningCfg file (7)copy runningCfg startUpCfg (8)copy runningCfg tftp (9)copy startupCfg file (10)copy startupCfg runningCfg (11)copy startupCfg tftp (12)copy tftp file (13)copy tftp runningCfg (14)copy tftp startUpCfg (15)copy unit file.")
fileCopySrcFileName = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 24, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopySrcFileName.setStatus('current')
if mibBuilder.loadTexts: fileCopySrcFileName.setDescription('The source file name for fileCopyMgt when a copy operation is next requested via this MIB. This value is set to a zero length string when no file name has been specified. Note: If the fileCopySrcOperType is runningCfg(2) or startUpCfg(3), this variable can be ignored.')
fileCopyDestOperType = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("file", 1), ("runningCfg", 2), ("startUpCfg", 3), ("tftp", 4), ("unit", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyDestOperType.setStatus('current')
if mibBuilder.loadTexts: fileCopyDestOperType.setDescription("The Copy Operation that we want to perform on fileCopySrcOperType, this operation is similar to the CLI command 'copy fileCopySrcOperType fileCopyDestOperType'. file(1) means we want to perform the 'copy fileCopySrcType file ' operation, runningCfg(2) means we want to perform the 'copy fileCopySrcOperType running-config ' operation, startUpCfg(3) means we want to perform the 'copy fileCopySrcOperType startup-config ' operation, tftp(4) means we want to perform the 'copy fileCopySrcOperType tftp' operation, unit(5) is only available in stacking systems in which we can copy files from one unit to another unit. It means we want to perform the 'copy fileCopySrcOperType unit' operation. The possible permutations are as follows: (1)copy file file (2)copy file runningCfg (3) copy file startUpCfg (4)copy file tftp (5) copy file unit(for stacking system only) (6)copy runningCfg file (7)copy runningCfg startUpCfg (8)copy runningCfg tftp (9)copy startupCfg file (10)copy startupCfg runningCfg (11)copy startupCfg tftp (12)copy tftp file (13)copy tftp runningCfg (14)copy tftp startUpCfg (15)copy unit file.")
fileCopyDestFileName = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 24, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyDestFileName.setStatus('current')
if mibBuilder.loadTexts: fileCopyDestFileName.setDescription('The destination file name for fileCopyMgt when a copy operation is next requested via this MIB. This value is set to a zero length string when no file name has been specified. Note: If the fileCopyDestOperType is runningCfg(2) or startupCfg(3), this variable can be ignored.')
fileCopyFileType = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 24, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("opcode", 1), ("config", 2), ("bootRom", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyFileType.setStatus('current')
if mibBuilder.loadTexts: fileCopyFileType.setDescription('Type of file to copy in fileCopyMgt. If the fileCopySrcOperType or fileCopyDestOperType is either runningCfg(2) or startupCfg(3), this variable can be ignored. If the fileCopySrcOperType or fileCopyDestOperType is unit(5), this variable cannot be set to bootRom(3).')
fileCopyTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 24, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyTftpServer.setStatus('current')
if mibBuilder.loadTexts: fileCopyTftpServer.setDescription("The IP address of the TFTP server for transfer when a download is next requested via this MIB. This value is set to '0.0.0.0' when no IP address has been specified. If neither fileCopySrcOperType nor fileCopyDestOperType is tftp(4), this variable can be ignored.")
fileCopyUnitId = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 24, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyUnitId.setStatus('current')
if mibBuilder.loadTexts: fileCopyUnitId.setDescription("Specifies the switch unit for stackable devices. When performing the 'copy unit file' or 'copy file unit' action, if neither fileCopySrcOperType nor fileCopyDestOperType is unit(5), this variable can be ignored.")
fileCopyAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 24, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notCopying", 1), ("copy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyAction.setStatus('current')
if mibBuilder.loadTexts: fileCopyAction.setDescription('Setting this object to copy(2) to begin the copy Operation.')
fileCopyStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 24, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("fileCopyTftpUndefError", 1), ("fileCopyTftpFileNotFound", 2), ("fileCopyTftpAccessViolation", 3), ("fileCopyTftpDiskFull", 4), ("fileCopyTftpIllegalOperation", 5), ("fileCopyTftpUnkownTransferId", 6), ("fileCopyTftpFileExisted", 7), ("fileCopyTftpNoSuchUser", 8), ("fileCopyTftpTimeout", 9), ("fileCopyTftpSendError", 10), ("fileCopyTftpReceiverError", 11), ("fileCopyTftpSocketOpenError", 12), ("fileCopyTftpSocketBindError", 13), ("fileCopyTftpUserCancel", 14), ("fileCopyTftpCompleted", 15), ("fileCopyParaError", 16), ("fileCopyBusy", 17), ("fileCopyUnknown", 18), ("fileCopyReadFileError", 19), ("fileCopySetStartupError", 20), ("fileCopyFileSizeExceed", 21), ("fileCopyMagicWordError", 22), ("fileCopyImageTypeError", 23), ("fileCopyHeaderChecksumError", 24), ("fileCopyImageChecksumError", 25), ("fileCopyWriteFlashFinish", 26), ("fileCopyWriteFlashError", 27), ("fileCopyWriteFlashProgramming", 28), ("fileCopyError", 29), ("fileCopySuccess", 30), ("fileCopyCompleted", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileCopyStatus.setStatus('current')
if mibBuilder.loadTexts: fileCopyStatus.setDescription('The status of the last copy procedure, if any. This object will have a value of downloadStatusUnknown(2) if no copy operation has been performed.')
fileCopyTftpErrMsg = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 24, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileCopyTftpErrMsg.setStatus('current')
if mibBuilder.loadTexts: fileCopyTftpErrMsg.setDescription('TFTP error message, this value is meaningful only when the fileCopyStatus is fileCopyTftpUndefError(1).')
fileInfoMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 24, 2))
fileInfoTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 24, 2, 1), )
if mibBuilder.loadTexts: fileInfoTable.setStatus('current')
if mibBuilder.loadTexts: fileInfoTable.setDescription('This table contain the information of the file system; we can also perform the delete, set startup file operation.')
fileInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 24, 2, 1, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "fileInfoUnitID"), (1, "ES3526XA_ES3510-MIB", "fileInfoFileName"))
if mibBuilder.loadTexts: fileInfoEntry.setStatus('current')
if mibBuilder.loadTexts: fileInfoEntry.setDescription('A conceptually row for fileInfoTable.')
fileInfoUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 24, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: fileInfoUnitID.setStatus('current')
if mibBuilder.loadTexts: fileInfoUnitID.setDescription('The switch unit in a stacking system, in a non-stacking system, this value is always 1.')
fileInfoFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 24, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: fileInfoFileName.setStatus('current')
if mibBuilder.loadTexts: fileInfoFileName.setDescription('The file Name of the file System in the device.')
fileInfoFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 24, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("diag", 1), ("runtime", 2), ("syslog", 3), ("cmdlog", 4), ("config", 5), ("postlog", 6), ("private", 7), ("certificate", 8), ("webarchive", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileInfoFileType.setStatus('current')
if mibBuilder.loadTexts: fileInfoFileType.setDescription('The file type of the file System in the device.')
fileInfoIsStartUp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 24, 2, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileInfoIsStartUp.setStatus('current')
if mibBuilder.loadTexts: fileInfoIsStartUp.setDescription('This flag indicate whether this file is a startup file. Set this object to true(1) to indicate that this is a startup file. Setting this object to false(2) is a invalid operation.')
fileInfoFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 24, 2, 1, 1, 5), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: fileInfoFileSize.setStatus('current')
if mibBuilder.loadTexts: fileInfoFileSize.setDescription('The sizes (in bytes) of the file.')
fileInfoCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 24, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileInfoCreationTime.setStatus('current')
if mibBuilder.loadTexts: fileInfoCreationTime.setDescription("The creation time of the file, This is a text string in the following form, based on Unix: 'Mmm _d hh:mm:ss yyyy'. 'Mmm' are the first three letters of the English name of the month. '_d' is the day of month. A single-digit day is preceded by a space. 'hh:mm:ss' is a 24-hour representations of hours, minutes, and seconds. A single-digit hour is preceded by a zero. 'yyyy' is the four-digit year. An example is: 'Jan 1 02:03:04 2002'.")
fileInfoDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 24, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noDelete", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileInfoDelete.setStatus('current')
if mibBuilder.loadTexts: fileInfoDelete.setDescription('Write this object to delete(2) to delete a file, when read, this always return noDelete(1).')
dnsDomainLookup = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsDomainLookup.setStatus('current')
if mibBuilder.loadTexts: dnsDomainLookup.setDescription('To enable the IP Domain Naming System (DNS)-based host name-to-address translation.')
dnsDomainName = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsDomainName.setStatus('current')
if mibBuilder.loadTexts: dnsDomainName.setDescription('To define a default domain name to complete unqualified host names (names without a dotted-decimal domain name).')
dnsHostTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 3), )
if mibBuilder.loadTexts: dnsHostTable.setStatus('current')
if mibBuilder.loadTexts: dnsHostTable.setDescription('This table is used to define static host name-to-address mapping.')
dnsHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 3, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "dnsHostName"), (0, "ES3526XA_ES3510-MIB", "dnsHostIndex"))
if mibBuilder.loadTexts: dnsHostEntry.setStatus('current')
if mibBuilder.loadTexts: dnsHostEntry.setDescription('A conceptual row for the dnsHostTable.')
dnsHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)))
if mibBuilder.loadTexts: dnsHostName.setStatus('current')
if mibBuilder.loadTexts: dnsHostName.setDescription('The DNS Host name.')
dnsHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: dnsHostIndex.setStatus('current')
if mibBuilder.loadTexts: dnsHostIndex.setDescription('The secondary index of this dnsHostTable, representing the sequence of the dnsHostIp.')
dnsHostIp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 3, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dnsHostIp.setStatus('current')
if mibBuilder.loadTexts: dnsHostIp.setDescription('The DNS Host IP.')
dnsAliasTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 4), )
if mibBuilder.loadTexts: dnsAliasTable.setStatus('current')
if mibBuilder.loadTexts: dnsAliasTable.setDescription('This table displays the alias of the host name.')
dnsAliasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 4, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "dnsAliasName"), (0, "ES3526XA_ES3510-MIB", "dnsAliasAlias"))
if mibBuilder.loadTexts: dnsAliasEntry.setStatus('current')
if mibBuilder.loadTexts: dnsAliasEntry.setDescription('A conceptual row for the dnsAliasTable.')
dnsAliasName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsAliasName.setStatus('current')
if mibBuilder.loadTexts: dnsAliasName.setDescription('Host name.')
dnsAliasAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsAliasAlias.setStatus('current')
if mibBuilder.loadTexts: dnsAliasAlias.setDescription('Alias.')
dnsDomainListTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 5), )
if mibBuilder.loadTexts: dnsDomainListTable.setStatus('current')
if mibBuilder.loadTexts: dnsDomainListTable.setDescription('This table defines a list of default domain names to complete unqualified host names.')
dnsDomainListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 5, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "dnsDomainListName"))
if mibBuilder.loadTexts: dnsDomainListEntry.setStatus('current')
if mibBuilder.loadTexts: dnsDomainListEntry.setDescription('A conceptual row for the dnsDomainListTable.')
dnsDomainListName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)))
if mibBuilder.loadTexts: dnsDomainListName.setStatus('current')
if mibBuilder.loadTexts: dnsDomainListName.setDescription('Domain name.')
dnsDomainListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 5, 1, 2), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dnsDomainListStatus.setStatus('current')
if mibBuilder.loadTexts: dnsDomainListStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
dnsNameServerTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 6), )
if mibBuilder.loadTexts: dnsNameServerTable.setStatus('current')
if mibBuilder.loadTexts: dnsNameServerTable.setDescription('To specify the address of one or more name servers to use for name and address resolution. This table has fixed size, will get 0.0.0.0 dnsNameServerIp if this entry is not existed.')
dnsNameServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 6, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "dnsNameServerIndex"))
if mibBuilder.loadTexts: dnsNameServerEntry.setStatus('current')
if mibBuilder.loadTexts: dnsNameServerEntry.setDescription('A conceptual row for dnsNameServerTable.')
dnsNameServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: dnsNameServerIndex.setStatus('current')
if mibBuilder.loadTexts: dnsNameServerIndex.setDescription('Index of this dnsNameServerTable, representing the sequence of the dnsNameServerIp.')
dnsNameServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 6, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsNameServerIp.setStatus('current')
if mibBuilder.loadTexts: dnsNameServerIp.setDescription('IP address of name server.')
dnsCacheTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 7), )
if mibBuilder.loadTexts: dnsCacheTable.setStatus('current')
if mibBuilder.loadTexts: dnsCacheTable.setDescription('To display the RRs in DNS cache.')
dnsCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 7, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "dnsCacheIndex"))
if mibBuilder.loadTexts: dnsCacheEntry.setStatus('current')
if mibBuilder.loadTexts: dnsCacheEntry.setDescription('A conceptual row for the dnsCacheTable.')
dnsCacheIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: dnsCacheIndex.setStatus('current')
if mibBuilder.loadTexts: dnsCacheIndex.setDescription('The entry sequence number.')
dnsCacheFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCacheFlag.setStatus('current')
if mibBuilder.loadTexts: dnsCacheFlag.setDescription('Always get 4, means this record is unreliable.')
dnsCacheType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("address", 1), ("cname", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCacheType.setStatus('current')
if mibBuilder.loadTexts: dnsCacheType.setDescription('Cache Type: address(1); cname(2).')
dnsCacheIp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 7, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCacheIp.setStatus('current')
if mibBuilder.loadTexts: dnsCacheIp.setDescription('The DNS cache IP.')
dnsCacheTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 876000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCacheTtl.setStatus('current')
if mibBuilder.loadTexts: dnsCacheTtl.setDescription('The DNS cache TTL.')
dnsCacheDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 26, 7, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCacheDomain.setStatus('current')
if mibBuilder.loadTexts: dnsCacheDomain.setDescription('The DNS cache domain.')
mvrStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrStatus.setStatus('current')
if mibBuilder.loadTexts: mvrStatus.setDescription('Parameter to enable or disable MVR(Multicast VLAN Registration) on the device. NOTE: IGMP Snooping must be enabled first before enabling MVR and MVR will be disabled when IGMP Snooping is disabled.')
mvrVlanId = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrVlanId.setStatus('current')
if mibBuilder.loadTexts: mvrVlanId.setDescription('To set VLAN for MVR.The VLAN identified by a particular value of this index is the same VLAN as identified by the same value of dot1qVlanIndex in the Q-BRIDGE-MIB.')
mvrMaxGroups = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrMaxGroups.setStatus('current')
if mibBuilder.loadTexts: mvrMaxGroups.setDescription('The maximum number of MVR groups.')
mvrCurrentGroups = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrCurrentGroups.setStatus('current')
if mibBuilder.loadTexts: mvrCurrentGroups.setDescription('The current number of MVR groups.')
mvrGroupsCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 5))
mvrGroupsCtlId = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 5, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrGroupsCtlId.setStatus('current')
if mibBuilder.loadTexts: mvrGroupsCtlId.setDescription('The start of a contiguous range of MVR group addresses.')
mvrGroupsCtlCount = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrGroupsCtlCount.setStatus('current')
if mibBuilder.loadTexts: mvrGroupsCtlCount.setDescription('The range count for configuring MVR group addresses.')
mvrGroupsCtlAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noAction", 0), ("create", 1), ("destory", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrGroupsCtlAction.setStatus('current')
if mibBuilder.loadTexts: mvrGroupsCtlAction.setDescription('Sets the configure action for a contiguous range of MVR group addresses. The start addresses is the current value of mvrGroupsCtlId and the range count is the current value of mvrGroupsCtlCount. Set this object to create(2) to create MVR group addresses. Set this object to destory(3) to delete MVR group addresses. When the action is complete, this object becomes noAction(1).')
mvrGroupTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 6), )
if mibBuilder.loadTexts: mvrGroupTable.setStatus('current')
if mibBuilder.loadTexts: mvrGroupTable.setDescription('The table for configuring the MVR group.')
mvrGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 6, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "mvrGroupId"))
if mibBuilder.loadTexts: mvrGroupEntry.setStatus('current')
if mibBuilder.loadTexts: mvrGroupEntry.setDescription('The entry for configuring the MVR group.')
mvrGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: mvrGroupId.setStatus('current')
if mibBuilder.loadTexts: mvrGroupId.setDescription('The multicast address of the MVR group.')
mvrGroutActive = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrGroutActive.setStatus('current')
if mibBuilder.loadTexts: mvrGroutActive.setDescription('To indicate if the group has a member or not. If there are no members, the status is inactive(2); otherwise the status is active(1).')
mvrGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrGroupStatus.setStatus('current')
if mibBuilder.loadTexts: mvrGroupStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
mvrGroupStaticTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 7), )
if mibBuilder.loadTexts: mvrGroupStaticTable.setStatus('current')
if mibBuilder.loadTexts: mvrGroupStaticTable.setDescription('The table for configuring the static members of the MVR group.')
mvrGroupStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 7, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "mvrGroupStaticAddress"))
if mibBuilder.loadTexts: mvrGroupStaticEntry.setStatus('current')
if mibBuilder.loadTexts: mvrGroupStaticEntry.setDescription('The entry for configuring the static members of the MVR group.')
mvrGroupStaticAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 7, 1, 1), IpAddress())
if mibBuilder.loadTexts: mvrGroupStaticAddress.setStatus('current')
if mibBuilder.loadTexts: mvrGroupStaticAddress.setDescription('The multicast address of the MVR group.')
mvrGroupStaticPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 7, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrGroupStaticPorts.setStatus('current')
if mibBuilder.loadTexts: mvrGroupStaticPorts.setDescription('The set of ports configured by management in this entry. Ports entered in this list will be the static members of this MVR group.')
mvrGroupStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrGroupStaticStatus.setStatus('current')
if mibBuilder.loadTexts: mvrGroupStaticStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
mvrGroupCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 8), )
if mibBuilder.loadTexts: mvrGroupCurrentTable.setStatus('current')
if mibBuilder.loadTexts: mvrGroupCurrentTable.setDescription('The table for the current members of the MVR group.')
mvrGroupCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 8, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "mvrGroupCurrentAddress"))
if mibBuilder.loadTexts: mvrGroupCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: mvrGroupCurrentEntry.setDescription('The entry for the current members of the MVR group.')
mvrGroupCurrentAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 8, 1, 1), IpAddress())
if mibBuilder.loadTexts: mvrGroupCurrentAddress.setStatus('current')
if mibBuilder.loadTexts: mvrGroupCurrentAddress.setDescription('The multicast address of the MVR group.')
mvrGroupCurrentPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 8, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrGroupCurrentPorts.setStatus('current')
if mibBuilder.loadTexts: mvrGroupCurrentPorts.setDescription('The complete set of ports currently associated with this MVR group.')
mvrPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 9), )
if mibBuilder.loadTexts: mvrPortTable.setStatus('current')
if mibBuilder.loadTexts: mvrPortTable.setDescription('The table for configuring the MVR port.')
mvrPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 9, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "mvrIfIndex"))
if mibBuilder.loadTexts: mvrPortEntry.setStatus('current')
if mibBuilder.loadTexts: mvrPortEntry.setDescription('The entry for configuring the MVR port.')
mvrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 9, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: mvrIfIndex.setStatus('current')
if mibBuilder.loadTexts: mvrIfIndex.setDescription('The port interface of the portTable. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex in the IF-MIB.')
mvrPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("source", 1), ("receiver", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrPortType.setStatus('current')
if mibBuilder.loadTexts: mvrPortType.setDescription('For configuring the MVR port type. To disable the MVR port type, use the none(0).')
mvrPortImmediateLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 9, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrPortImmediateLeave.setStatus('current')
if mibBuilder.loadTexts: mvrPortImmediateLeave.setDescription('To enable immediate leave on MVR port.')
mvrPortActive = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrPortActive.setStatus('current')
if mibBuilder.loadTexts: mvrPortActive.setDescription('To indicate if the port is associated with the MVR group. If the port is the MVR receiver port or the MVR source port in MVR vlan, the status is active(1); otherwise the status is inactive(2).')
mvrRunningStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 44, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrRunningStatus.setStatus('current')
if mibBuilder.loadTexts: mvrRunningStatus.setDescription('Describes the running status of MVR (Multicast VLAN Registration) to the switch. A value of true(1) indicates that all necessary conditions in the MVR environment are satisfied. A value of false(2) indicates that some necessary conditions in the MVR environment are not satisfied.')
dhcpSnoopGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 1))
dhcpSnoopVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 2))
dhcpSnoopInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 3))
dhcpSnoopBindings = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 4))
dhcpSnoopStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 5))
dhcpSnoopEnable = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopEnable.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopEnable.setDescription('This object indicates whether the DHCP Snooping feature is enabled.')
dhcpSnoopVerifyMacAddressEnable = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopVerifyMacAddressEnable.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopVerifyMacAddressEnable.setDescription('This object indicates whether DHCP Snooping Mac address verification is enabled.')
dhcpSnoopInformationOptionEnable = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopInformationOptionEnable.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopInformationOptionEnable.setDescription('This object indicates whether the DHCP snooping information option(option 82) feature is enabled.')
dhcpSnoopInformationOptionPolicy = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("drop", 1), ("keep", 2), ("replace", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopInformationOptionPolicy.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopInformationOptionPolicy.setDescription('This object indicates which reforwarding policy shall be used for DHCP snooping information option(option 82). A value of drop(1) means to drop the DHCP request packet which has the information option(option 82). A value of keep(2) means to keep the existing information option(option 82) of the DHCP request packet. A value of replace(3), which is the default value, means to replace the existing information option(option 82) of the DHCP request packet.')
dhcpSnoopVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 2, 1), )
if mibBuilder.loadTexts: dhcpSnoopVlanConfigTable.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopVlanConfigTable.setDescription('A table contains DHCP Snooping configurations of existing VLANs.')
dhcpSnoopVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 2, 1, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "dhcpSnoopVlanIndex"))
if mibBuilder.loadTexts: dhcpSnoopVlanConfigEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopVlanConfigEntry.setDescription('An instance contains the configuration to enable or disable DHCP Snooping at each existing VLAN.')
dhcpSnoopVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 2, 1, 1, 1), VlanIndex())
if mibBuilder.loadTexts: dhcpSnoopVlanIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopVlanIndex.setDescription('This object indicates the VLAN ID on which DHCP Snooping feature is configured.')
dhcpSnoopVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 2, 1, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopVlanEnable.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopVlanEnable.setDescription('This object indicates whether DHCP Snooping is enabled in this VLAN.')
dhcpSnoopPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 3, 1), )
if mibBuilder.loadTexts: dhcpSnoopPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopPortConfigTable.setDescription('A table provides the mechanism to configure the trust state of each port or trunk for DHCP Snooping purpose.')
dhcpSnoopPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 3, 1, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "dhcpSnoopPortIfIndex"))
if mibBuilder.loadTexts: dhcpSnoopPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopPortConfigEntry.setDescription('An instance contains the configuration to enable or disable trust state of each port or trunk for DHCP Snooping purpose.')
dhcpSnoopPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 3, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: dhcpSnoopPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopPortIfIndex.setDescription('The ifIndex value of the port or trunk.')
dhcpSnoopPortTrustEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 3, 1, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopPortTrustEnable.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopPortTrustEnable.setDescription('This object indicates whether the port or trunk is trusted for DHCP Snooping purpose.')
dhcpSnoopBindingsTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 4, 1), )
if mibBuilder.loadTexts: dhcpSnoopBindingsTable.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopBindingsTable.setDescription('A table contains the DHCP bindings information learnt by the device.')
dhcpSnoopBindingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 4, 1, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "dhcpSnoopBindingsVlanIndex"), (0, "ES3526XA_ES3510-MIB", "dhcpSnoopBindingsMacAddress"))
if mibBuilder.loadTexts: dhcpSnoopBindingsEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopBindingsEntry.setDescription('An instance contains the Mac address, IP address type, IP address, VLAN number, interface number, leased time and status.')
dhcpSnoopBindingsVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 4, 1, 1, 1), VlanIndex())
if mibBuilder.loadTexts: dhcpSnoopBindingsVlanIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopBindingsVlanIndex.setDescription('This object indicates the VLAN which a DHCP client host belongs to.')
dhcpSnoopBindingsMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 4, 1, 1, 2), MacAddress())
if mibBuilder.loadTexts: dhcpSnoopBindingsMacAddress.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopBindingsMacAddress.setDescription('This object indicates the MAC address of a DHCP client host.')
dhcpSnoopBindingsAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 4, 1, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopBindingsAddrType.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopBindingsAddrType.setDescription('This object indicates the type of IP address denoted in dhcpSnoopBindingsIpAddress type.')
dhcpSnoopBindingsEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("static", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopBindingsEntryType.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopBindingsEntryType.setDescription('This object indicates that this binding is obtained from dynamically learning or is a static configuraion.')
dhcpSnoopBindingsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 4, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopBindingsIpAddress.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopBindingsIpAddress.setDescription('This object indicates the allocated IP address of a DHCP client host.')
dhcpSnoopBindingsPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 4, 1, 1, 6), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopBindingsPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopBindingsPortIfIndex.setDescription('This object indicates the port or trunk where a DHCP client host connects to.')
dhcpSnoopBindingsLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 4, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopBindingsLeaseTime.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopBindingsLeaseTime.setDescription('This object indicates the leased time of this DHCP bindings.')
dhcpSnoopTotalForwardedPkts = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopTotalForwardedPkts.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopTotalForwardedPkts.setDescription('Indicates the total number of packets subjected to DHCP Snooping is forwarded.')
dhcpSnoopUntrustedPortDroppedPkts = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 46, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopUntrustedPortDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopUntrustedPortDroppedPkts.setDescription('Indicates the number of packets subjected to DHCP Snooping is dropped because they come from untrusted interface.')
clusterEnable = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusterEnable.setStatus('current')
if mibBuilder.loadTexts: clusterEnable.setDescription('Enables or disables clustering on the device.')
clusterCommanderEnable = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusterCommanderEnable.setStatus('current')
if mibBuilder.loadTexts: clusterCommanderEnable.setDescription('Enables or disables the device as commander in a cluster.')
clusterIpPool = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusterIpPool.setStatus('current')
if mibBuilder.loadTexts: clusterIpPool.setDescription('The start internal IP address of a cluster pool.')
clusterClearCandidateTable = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noClear", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusterClearCandidateTable.setStatus('current')
if mibBuilder.loadTexts: clusterClearCandidateTable.setDescription('Setting this object to clear(2) starts to clear the candidate table.')
clusterRole = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5))).clone(namedValues=NamedValues(("commander", 1), ("candidate", 2), ("activeMember", 3), ("disabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterRole.setStatus('current')
if mibBuilder.loadTexts: clusterRole.setDescription('The current role of the device in a cluster. commander(1) : The switch is the controlling device in a cluster. candidate(2) : The switch has been discovered by the commander, but it has not been manually configured for access from the commander. activeMember(3): The switch has been manually configured for access from the commander and it is active in the cluster. disabled(5) : The switch has clustering disabled.')
clusterMemberCount = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterMemberCount.setStatus('current')
if mibBuilder.loadTexts: clusterMemberCount.setDescription('The total number of members in a cluster.')
clusterCandidateCount = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterCandidateCount.setStatus('current')
if mibBuilder.loadTexts: clusterCandidateCount.setDescription('The total number of candidates in a cluster.')
clusterCandidateTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 9), )
if mibBuilder.loadTexts: clusterCandidateTable.setStatus('current')
if mibBuilder.loadTexts: clusterCandidateTable.setDescription('A table listing cluster candidates.')
clusterCandidateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 9, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "clusterCandidateMacAddr"))
if mibBuilder.loadTexts: clusterCandidateEntry.setStatus('current')
if mibBuilder.loadTexts: clusterCandidateEntry.setDescription('A conceptual row containing the information of the candidate.')
clusterCandidateMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 9, 1, 1), MacAddress())
if mibBuilder.loadTexts: clusterCandidateMacAddr.setStatus('current')
if mibBuilder.loadTexts: clusterCandidateMacAddr.setDescription('The MAC address of the candidate.')
clusterCandidateDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 42))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterCandidateDesc.setStatus('current')
if mibBuilder.loadTexts: clusterCandidateDesc.setDescription('The description of the candidate.')
clusterCandidateRole = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("candidate", 2), ("activeMember", 3), ("inactiveMember", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterCandidateRole.setStatus('current')
if mibBuilder.loadTexts: clusterCandidateRole.setDescription('The role of the candidate. candidate(2) : The switch is discovered by the commander, but it has not been manually configured for access from the commander. activeMember(3) : The switch is manually configured for access from the commander and it is active in the cluster. inactiveMember(4): The switch is manually configured for access from the commander, but it is inactive in the cluster.')
clusterMemberTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 10), )
if mibBuilder.loadTexts: clusterMemberTable.setStatus('current')
if mibBuilder.loadTexts: clusterMemberTable.setDescription('A table listing clustering members.')
clusterMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 10, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "clusterMemberId"))
if mibBuilder.loadTexts: clusterMemberEntry.setStatus('current')
if mibBuilder.loadTexts: clusterMemberEntry.setDescription('A conceptual row containing the information of the member.')
clusterMemberId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: clusterMemberId.setStatus('current')
if mibBuilder.loadTexts: clusterMemberId.setDescription('The ID of the member.')
clusterMemberMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 10, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterMemberMacAddr.setStatus('current')
if mibBuilder.loadTexts: clusterMemberMacAddr.setDescription('The MAC address of the member.')
clusterMemberDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 42))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterMemberDesc.setStatus('current')
if mibBuilder.loadTexts: clusterMemberDesc.setDescription('The description of the member.')
clusterMemberActive = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("activeMember", 3), ("inactiveMember", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusterMemberActive.setStatus('current')
if mibBuilder.loadTexts: clusterMemberActive.setDescription('The active status of the member. activeMember(3) : The switch is manually configured for access from the commander and it is active in the cluster. inactiveMember(4): The switch is manually configured for access from the commander, but it is inactive in the cluster.')
clusterMemberAddCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 11))
clusterMemberAddCtlMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 11, 1), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusterMemberAddCtlMacAddr.setStatus('current')
if mibBuilder.loadTexts: clusterMemberAddCtlMacAddr.setDescription('The MAC address of the device associated with clusterMemberAddCtlAction.')
clusterMemberAddCtlId = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 11, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusterMemberAddCtlId.setStatus('current')
if mibBuilder.loadTexts: clusterMemberAddCtlId.setDescription('The member id associated with clusterMemberAddCtlAction.')
clusterMemberAddCtlAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 11, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAdd", 1), ("add", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusterMemberAddCtlAction.setStatus('current')
if mibBuilder.loadTexts: clusterMemberAddCtlAction.setDescription('Adds the device to members that can be accessed from the commander. The MAC of the device is the current value of clusterMemberAddCtlMacAddr and the assigned member ID is the current value of clusterMemberAddCtlId. Set this object to add(2) to begin adding the member.')
clusterMemberRemoveCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 12))
clusterMemberRemoveCtlId = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 12, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusterMemberRemoveCtlId.setStatus('current')
if mibBuilder.loadTexts: clusterMemberRemoveCtlId.setDescription('The member ID associated with clusterMemberRemoveCtlAction.')
clusterMemberRemoveCtlAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 47, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noRemove", 1), ("remove", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusterMemberRemoveCtlAction.setStatus('current')
if mibBuilder.loadTexts: clusterMemberRemoveCtlAction.setDescription('Removes the device from members that can be accessed from the commander. The member ID is the current value of clusterMemberRemoveCtlId. Set this object to remove(2) to begin removing the member.')
ipSrcGuardConfigTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 48, 1), )
if mibBuilder.loadTexts: ipSrcGuardConfigTable.setStatus('current')
if mibBuilder.loadTexts: ipSrcGuardConfigTable.setDescription('A table contains the configurations to enable or disable IP Source Guard at each port or trunk.')
ipSrcGuardConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 48, 1, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "ipSrcGuardPortIfIndex"))
if mibBuilder.loadTexts: ipSrcGuardConfigEntry.setStatus('current')
if mibBuilder.loadTexts: ipSrcGuardConfigEntry.setDescription('An instance contains the configuration to enable or disable IP Source Guard at each port or trunk.')
ipSrcGuardPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 48, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ipSrcGuardPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: ipSrcGuardPortIfIndex.setDescription('This object idents the port or trunk which is capable of IP Source Guard feature.')
ipSrcGuardMode = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 48, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("diabled", 0), ("srcIp", 1), ("srcIpMac", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSrcGuardMode.setStatus('current')
if mibBuilder.loadTexts: ipSrcGuardMode.setDescription('This object indicates whether Ip Source Guard is enabled at this interface. If the value equals 0, it means Ip Source Guard is disabled. If the value equals 1, it means Ip Source Guard is enabled, and packets are filtered by checking source ip. If the value equals 2, it means Ip Source Guard is enabled and packets are filtered by checking source ip and source mac.')
ipSrcGuardAddrTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 48, 2), )
if mibBuilder.loadTexts: ipSrcGuardAddrTable.setStatus('current')
if mibBuilder.loadTexts: ipSrcGuardAddrTable.setDescription('A table contains the IP Source Guard bindings information learnt by the device.')
ipSrcGuardAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 48, 2, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "ipSrcGuardBindingsVlanIndex"), (0, "ES3526XA_ES3510-MIB", "ipSrcGuardBindingsMacAddress"))
if mibBuilder.loadTexts: ipSrcGuardAddrEntry.setStatus('current')
if mibBuilder.loadTexts: ipSrcGuardAddrEntry.setDescription('An instance contains the Mac address, IP address type, IP address, VLAN number, interface number, leased time and status.')
ipSrcGuardBindingsVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 48, 2, 1, 1), VlanIndex())
if mibBuilder.loadTexts: ipSrcGuardBindingsVlanIndex.setStatus('current')
if mibBuilder.loadTexts: ipSrcGuardBindingsVlanIndex.setDescription('This object indicates the VLAN which a DHCP client host belongs to.')
ipSrcGuardBindingsMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 48, 2, 1, 2), MacAddress())
if mibBuilder.loadTexts: ipSrcGuardBindingsMacAddress.setStatus('current')
if mibBuilder.loadTexts: ipSrcGuardBindingsMacAddress.setDescription('This object indicates the MAC address of a DHCP client host.')
ipSrcGuardBindingsAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 48, 2, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSrcGuardBindingsAddrType.setStatus('current')
if mibBuilder.loadTexts: ipSrcGuardBindingsAddrType.setDescription('This object indicates the type of IP address denoted in ipSrcGuardBindingsIpAddress type.')
ipSrcGuardBindingsEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 48, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("dynamic", 1), ("static", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSrcGuardBindingsEntryType.setStatus('current')
if mibBuilder.loadTexts: ipSrcGuardBindingsEntryType.setDescription('This object indicates that this binding is obtained from dynamically learning or is a static configuraion.')
ipSrcGuardBindingsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 48, 2, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSrcGuardBindingsIpAddress.setStatus('current')
if mibBuilder.loadTexts: ipSrcGuardBindingsIpAddress.setDescription('This object indicates the allocated IP address of a DHCP client host.')
ipSrcGuardBindingsPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 48, 2, 1, 6), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSrcGuardBindingsPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: ipSrcGuardBindingsPortIfIndex.setDescription('This object indicates the port or trunk where a DHCP client host connects to.')
ipSrcGuardBindingsLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 48, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSrcGuardBindingsLeaseTime.setStatus('current')
if mibBuilder.loadTexts: ipSrcGuardBindingsLeaseTime.setDescription('This object indicates the leased time of this DHCP bindings.')
ipSrcGuardBindingsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 48, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSrcGuardBindingsStatus.setStatus('current')
if mibBuilder.loadTexts: ipSrcGuardBindingsStatus.setDescription("The status of this conceptual row entry. This object issued to manage the creation and deletion of conceptual rows. The status column has six defined values: - 'active', which indicates that the conceptual row is available for use by the managed device; - 'notInService', which indicates that the conceptual row exists in the agent, but is unavailable for use by the managed device.")
es3526XA_ES3510Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 2, 1))
es3526XA_ES3510TrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 2, 1, 0))
swPowerStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 2, 1, 0, 1)).setObjects(("ES3526XA_ES3510-MIB", "swIndivPowerUnitIndex"), ("ES3526XA_ES3510-MIB", "swIndivPowerIndex"), ("ES3526XA_ES3510-MIB", "swIndivPowerStatus"))
if mibBuilder.loadTexts: swPowerStatusChangeTrap.setStatus('current')
if mibBuilder.loadTexts: swPowerStatusChangeTrap.setDescription('This trap is sent when the power status of an individual power changes.')
swIpFilterRejectTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 2, 1, 0, 40)).setObjects(("ES3526XA_ES3510-MIB", "trapIpFilterRejectMode"), ("ES3526XA_ES3510-MIB", "trapIpFilterRejectIp"))
if mibBuilder.loadTexts: swIpFilterRejectTrap.setStatus('current')
if mibBuilder.loadTexts: swIpFilterRejectTrap.setDescription('This trap is sent when an incorrect IP address is rejected by the ipfilter.')
swSmtpConnFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 2, 1, 0, 41)).setObjects(("ES3526XA_ES3510-MIB", "smtpServerIp"))
if mibBuilder.loadTexts: swSmtpConnFailureTrap.setStatus('current')
if mibBuilder.loadTexts: swSmtpConnFailureTrap.setDescription('This trap is triggered if the SMTP system cannot open a connection to the mail server successfully.')
swAuthenticationFailure = NotificationType((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 2, 1, 0, 66)).setObjects(("ES3526XA_ES3510-MIB", "trapVarLoginUserName"), ("ES3526XA_ES3510-MIB", "trapVarLoginMethod"), ("ES3526XA_ES3510-MIB", "trapVarLoginIPAddress"), ("ES3526XA_ES3510-MIB", "trapVarLoginTime"))
if mibBuilder.loadTexts: swAuthenticationFailure.setStatus('current')
if mibBuilder.loadTexts: swAuthenticationFailure.setDescription('This trap will be triggered if authentication is failed.')
swAuthenticationSuccess = NotificationType((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 2, 1, 0, 67)).setObjects(("ES3526XA_ES3510-MIB", "trapVarLoginUserName"), ("ES3526XA_ES3510-MIB", "trapVarLoginMethod"), ("ES3526XA_ES3510-MIB", "trapVarLoginIPAddress"), ("ES3526XA_ES3510-MIB", "trapVarLoginTime"))
if mibBuilder.loadTexts: swAuthenticationSuccess.setStatus('current')
if mibBuilder.loadTexts: swAuthenticationSuccess.setDescription('This trap will be triggered if authentication is successful.')
swVlanChangeStatus = NotificationType((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 2, 1, 0, 251)).setObjects(("ES3526XA_ES3510-MIB", "vlanChangeStatus"), ("ES3526XA_ES3510-MIB", "vlanChangeVlan"), ("ES3526XA_ES3510-MIB", "vlanChangePortIfIndex"))
if mibBuilder.loadTexts: swVlanChangeStatus.setStatus('current')
if mibBuilder.loadTexts: swVlanChangeStatus.setDescription('This trap will be triggered if vlan status is change. vlanChangeStatus (1)create vlan (2)delete vlan (3)add port to vlan (4)delete port from vlan (5)native vlan change ')
diffServMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4))
diffServPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 9), )
if mibBuilder.loadTexts: diffServPortTable.setStatus('current')
if mibBuilder.loadTexts: diffServPortTable.setDescription('Table for differentiated services on each port.')
diffServPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 9, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "diffServPortIfIndex"))
if mibBuilder.loadTexts: diffServPortEntry.setStatus('current')
if mibBuilder.loadTexts: diffServPortEntry.setDescription('Entry for differentiated services on each port.')
diffServPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 9, 1, 1), Integer32())
if mibBuilder.loadTexts: diffServPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: diffServPortIfIndex.setDescription('This object is the interface index of diffServPortEntry. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex in the IF-MIB.')
diffServPortPolicyMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 9, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServPortPolicyMapIndex.setStatus('current')
if mibBuilder.loadTexts: diffServPortPolicyMapIndex.setDescription('Specifies the policy map binding to the interface. The policy map identified by a particular value of this index is associated with the same DiffServPolicyMapEntry as identified by the same value of diffServPolicyMapIndex.')
diffServPortIngressIpAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 9, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServPortIngressIpAclIndex.setStatus('current')
if mibBuilder.loadTexts: diffServPortIngressIpAclIndex.setDescription('Specifies the ingress IP ACL binding to the interface. The ingress IP ACL identified by a particular value of this index is associated with the same diffServAclEntry as identified by the same value of diffServAclIndex.')
diffServPortIngressMacAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 9, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServPortIngressMacAclIndex.setStatus('current')
if mibBuilder.loadTexts: diffServPortIngressMacAclIndex.setDescription('Specifies the ingress MAC ACL binding to the interface. The ingress MAC ACL identified by a particular value of this index is associated with the same diffServAclEntry as identified by the same value of diffServAclIndex.')
diffServPolicyMapTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 10), )
if mibBuilder.loadTexts: diffServPolicyMapTable.setStatus('current')
if mibBuilder.loadTexts: diffServPolicyMapTable.setDescription('Table for policy map.')
diffServPolicyMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 10, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "diffServPolicyMapIndex"))
if mibBuilder.loadTexts: diffServPolicyMapEntry.setStatus('current')
if mibBuilder.loadTexts: diffServPolicyMapEntry.setDescription('Entry for policy map.')
diffServPolicyMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 10, 1, 1), Integer32())
if mibBuilder.loadTexts: diffServPolicyMapIndex.setStatus('current')
if mibBuilder.loadTexts: diffServPolicyMapIndex.setDescription('An index that uniquely identifies an entry in this table.')
diffServPolicyMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServPolicyMapName.setStatus('current')
if mibBuilder.loadTexts: diffServPolicyMapName.setDescription('The name of this entry.')
diffServPolicyMapDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServPolicyMapDescription.setStatus('current')
if mibBuilder.loadTexts: diffServPolicyMapDescription.setDescription('The description of this entry.')
diffServPolicyMapElementIndexList = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 10, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServPolicyMapElementIndexList.setStatus('current')
if mibBuilder.loadTexts: diffServPolicyMapElementIndexList.setDescription('The octet string containes the diffServPolicyMapElementEntry indexes. Two octets express one index and it is represented in network order. This index list indicates the diffServPolicyMapEntrys which belong to this entry.')
diffServPolicyMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 10, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServPolicyMapStatus.setStatus('current')
if mibBuilder.loadTexts: diffServPolicyMapStatus.setDescription("This object is used to create a new row, or modify or delete an existing row, in this table. The status column has six defined values: The status column has six defined values: - 'active', which indicates that the conceptual row is available for use by the managed device; - 'notInService', which indicates that the conceptual row exists in the agent, but is unavailable for use by the managed device (see NOTE below); - 'notReady', which indicates that the conceptual row exists in the agent, but is missing information necessary in order to be available for use by the managed device; - 'createAndGo', which is supplied by a management station wishing to create a new instance of a conceptual row and to have its status automatically set to active, making it available for use by the managed device; - 'createAndWait', which is supplied by a management station wishing to create a new instance of a conceptual row (but not make it available for use by the managed device); and, - 'destroy', which is supplied by a management station wishing to delete all of the instances associated with an existing conceptual row. Whereas five of the six values (all except 'notReady') may be specified in a management protocol set operation, only three values will be returned in response to a management protocol retrieval operation: 'notReady', 'notInService' or 'active'. That is, when queried, an existing conceptual row has only three states: it is either available for use by the managed device (the status column has the value 'active');it is not available for use by the managed device, though the agent has sufficient information to make it so (the status column has the value 'notInService'); or, it is not available for use by the managed device, and an attempt to make it so would fail because the agent has insufficient information (the state column has the value 'notReady'). For a detailed description of this object, please refer to SNMPv2-TC MIB.")
diffServPolicyMapAttachCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 11))
diffServPolicyMapAttachCtlIndex = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServPolicyMapAttachCtlIndex.setStatus('current')
if mibBuilder.loadTexts: diffServPolicyMapAttachCtlIndex.setDescription('Index for attachment control. Specifies the policy map as the target to relate with the policy map element. The policy map identified by a particular value of this index is associated with the same diffServPolicyMapEntry as identified by the same value of diffServPolicyMapIndex.')
diffServPolicyMapAttachCtlElementIndex = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServPolicyMapAttachCtlElementIndex.setStatus('current')
if mibBuilder.loadTexts: diffServPolicyMapAttachCtlElementIndex.setDescription('Element Index for attachment control.Specifies the policy map element to relate with the policy map. The policy map element identified by a particular value of this index is associated with the same diffServPolicyMapElementEntry as identified by the same value of diffServPolicyMapElementIndex.')
diffServPolicyMapAttachCtlAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 11, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("attach", 2), ("detach", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServPolicyMapAttachCtlAction.setStatus('current')
if mibBuilder.loadTexts: diffServPolicyMapAttachCtlAction.setDescription('Action for attachment control. When setting this object to attach(2) to begin the attaching operation, a particular policy map element is attached to a particular policy map. When setting this object to detach(3) to begin the not attached operation, a particular policy map element is not attached to a particular policy map. When the action is finshed or no action is taken, the value of this object is noAction(1). A particular policy map is specified in the diffServPolicyMapAttachCtlIndex. A particularpolicy map element is specified in the diffServPolicyMapAttachCtlElementIndex.')
diffServPolicyMapElementTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 12), )
if mibBuilder.loadTexts: diffServPolicyMapElementTable.setStatus('current')
if mibBuilder.loadTexts: diffServPolicyMapElementTable.setDescription('Table for policy map element.')
diffServPolicyMapElementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 12, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "diffServPolicyMapElementIndex"))
if mibBuilder.loadTexts: diffServPolicyMapElementEntry.setStatus('current')
if mibBuilder.loadTexts: diffServPolicyMapElementEntry.setDescription('Entry for policy map element.')
diffServPolicyMapElementIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 12, 1, 1), Integer32())
if mibBuilder.loadTexts: diffServPolicyMapElementIndex.setStatus('current')
if mibBuilder.loadTexts: diffServPolicyMapElementIndex.setDescription('An index that uniquely identifies an entry in this table.')
diffServPolicyMapElementClassMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServPolicyMapElementClassMapIndex.setStatus('current')
if mibBuilder.loadTexts: diffServPolicyMapElementClassMapIndex.setDescription('Specifies the class map binding to this entry. The class map identified by a particular value of this index is associated with the same diffServClassMapEntry as identified by the same value of diffServClassMapIndex.')
diffServPolicyMapElementMeterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 12, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServPolicyMapElementMeterIndex.setStatus('current')
if mibBuilder.loadTexts: diffServPolicyMapElementMeterIndex.setDescription('Specifies the meter binding to this entry. The meter identified by a particular value of this index is associated with the same diffServMeterEntry as identified by the same value of diffServMeterIndex. If this value is zero, no associated meter will be associated, as zero is not a valid meter index.')
diffServPolicyMapElementActionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServPolicyMapElementActionIndex.setStatus('current')
if mibBuilder.loadTexts: diffServPolicyMapElementActionIndex.setDescription('Specifies the action binding to this entry. The action identified by a particular value of this index is associated with the same diffServActionEntry as identified by the same value of diffServActionIndex.')
diffServPolicyMapElementStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 12, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServPolicyMapElementStatus.setStatus('current')
if mibBuilder.loadTexts: diffServPolicyMapElementStatus.setDescription("This object is used to create a new row, or modify or delete an existing row, in this table. The status column has six defined values: The status column has six defined values: - 'active', which indicates that the conceptual row is available for use by the managed device; - 'notInService', which indicates that the conceptual row exists in the agent, but is unavailable for use by the managed device (see NOTE below); - 'notReady', which indicates that the conceptual row exists in the agent, but is missing information necessary in order to be available for use by the managed device; - 'createAndGo', which is supplied by a management station wishing to create a new instance of a conceptual row and to have its status automatically set to active, making it available for use by the managed device; - 'createAndWait', which is supplied by a management station wishing to create a new instance of a conceptual row (but not make it available for use by the managed device); and, - 'destroy', which is supplied by a management station wishing to delete all of the instances associated with an existing conceptual row. Whereas five of the six values (all except 'notReady') may be specified in a management protocol set operation, only three values will be returned in response to a management protocol retrieval operation: 'notReady', 'notInService' or 'active'. That is, when queried, an existing conceptual row has only three states: it is either available for use by the managed device (the status column has the value 'active'); it is not available for use by the managed device, though the agent has sufficient information to make it so (the status column has the value 'notInService'); or, it is not available for use by the managed device, and an attempt to make it so would fail because the agent has insufficient information (the state column has the value 'notReady'). For a detailed description of this object, please refer to SNMPv2-TC MIB.")
diffServClassMapTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 13), )
if mibBuilder.loadTexts: diffServClassMapTable.setStatus('current')
if mibBuilder.loadTexts: diffServClassMapTable.setDescription('Table for class map.')
diffServClassMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 13, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "diffServClassMapIndex"))
if mibBuilder.loadTexts: diffServClassMapEntry.setStatus('current')
if mibBuilder.loadTexts: diffServClassMapEntry.setDescription('Entry for class map.')
diffServClassMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 13, 1, 1), Integer32())
if mibBuilder.loadTexts: diffServClassMapIndex.setStatus('current')
if mibBuilder.loadTexts: diffServClassMapIndex.setDescription('An index that uniquely identifies an entry in this table.')
diffServClassMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 13, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServClassMapName.setStatus('current')
if mibBuilder.loadTexts: diffServClassMapName.setDescription('The name of this entry.')
diffServClassMapDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 13, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServClassMapDescription.setStatus('current')
if mibBuilder.loadTexts: diffServClassMapDescription.setDescription('The description of this entry.')
diffServClassMapMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("matchAny", 1), ("matchAll", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServClassMapMatchType.setStatus('current')
if mibBuilder.loadTexts: diffServClassMapMatchType.setDescription('The map match type of this entry.')
diffServClassMapElementIndexTypeList = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 13, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServClassMapElementIndexTypeList.setStatus('current')
if mibBuilder.loadTexts: diffServClassMapElementIndexTypeList.setDescription('The octet string containes the type of class map element indexes. Two octets which are represented in network order express one type of the class map element index in network order and it maps the index of differServClasssMapElementIndexList in order. When the type is macAce(1), the maping index of differServClasssMapElementIndexList is the diffServMacAceEntry. When the type is ipAce(2), the maping index of differServClasssMapElementIndexList is the diffServIpAceEntry. When the type is acl(3), the maping index of differServClasssMapElementIndexList is the diffServAclEntry. When the type is ipv6Ace(4), the maping index of differServClasssMapElementIndexList is the diffServIpv6AceEntry.')
diffServClassMapElementIndexList = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 13, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServClassMapElementIndexList.setStatus('current')
if mibBuilder.loadTexts: diffServClassMapElementIndexList.setDescription('The octet string containes the class map element indexes. Two octets express one index and it is represented in network order. This index list indicates the particular class map elements which belong to this table. The class map element uses type to indicate diffServAclEntry, the diffServIpAceEntry, the diffServMacAceEntry or diffServIpv6AceEntry. The type is two octet specified in differServClasssMapElementIndexTypeList in order. When the type is macAce(1), the maping index of differServClasssMapElementIndexList is the diffServMacAceEntry. When the type is ipAce(2), the maping index of differServClasssMapElementIndexList is the diffServIpAceEntry. When the type is acl(3), the maping index of differServClasssMapElementIndexList is the diffServAclEntry. When the type is ipv6Ace(4), the maping index of differServClasssMapElementIndexList is the diffServIpv6AceEntry.')
diffServClassMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 13, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServClassMapStatus.setStatus('current')
if mibBuilder.loadTexts: diffServClassMapStatus.setDescription("This object is used to create a new row or modify or delete an existing row in this table.The status column has six defined values: The status column has six defined values: - 'active', which indicates that the conceptual row is available for use by the managed device; - 'notInService', which indicates that the conceptual row exists in the agent, but is unavailable for use by the managed device (see NOTE below); - 'notReady', which indicates that the conceptual row exists in the agent, but is missing information necessary in order to be available for use by the managed device; - 'createAndGo', which is supplied by a management station wishing to create a new instance of a conceptual row and to have its status automatically set to active, making it available for use by the managed device; - 'createAndWait', which is supplied by a management station wishing to create a new instance of a conceptual row (but not make it available for use by the managed device); and, - 'destroy', which is supplied by a management station wishing to delete all of the instances associated with an existing conceptual row. Whereas five of the six values (all except 'notReady') may be specified in a management protocol set operation, only three values will be returned in response to a management protocol retrieval operation: 'notReady', 'notInService' or 'active'. That is, when queried, an existing conceptual row has only three states: it is either available for use by the managed device (the status column has the value 'active'); it is not available for use by the managed device, though the agent has sufficient information to make it so (the status column has the value 'notInService'); or, it is not available for use by the managed device, and an attempt to make it so would fail because the agent has insufficient information (the state column has the value 'notReady'). For a detailed description of this object, please refer to SNMPv2-TC MIB.")
diffServClassMapAttachCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 14))
diffServClassMapAttachCtlIndex = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 14, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServClassMapAttachCtlIndex.setStatus('current')
if mibBuilder.loadTexts: diffServClassMapAttachCtlIndex.setDescription('Index for attachment control. Specifies the class map as the target to relate with class map elements. The class map identified by a particular value of this index is associated with the same diffServClassMapEntry as identified by the same value of diffServClassMapIndex.')
diffServClassMapAttachCtlElementIndexType = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 14, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("macAce", 1), ("ipAce", 2), ("acl", 3), ("ipv6Ace", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServClassMapAttachCtlElementIndexType.setStatus('current')
if mibBuilder.loadTexts: diffServClassMapAttachCtlElementIndexType.setDescription('Element Index for attachment control. Specifies the type of class map element to relate with the class map. When type is macAce(1), the index of diffServClassMapAttachCtlElementIndex is the index of diffServMacAceEntry. When the type is ipAce(2), the index of diffServClassMapAttachCtlElementIndex is the index of diffServIpAceEntry. When the type is acl(3), the index of diffServClassMapAttachCtlElementIndex is the index of diffServAclEntry. When the type is ipv6Ace(4), the index of diffServClassMapAttachCtlElementIndex is the index of diffServIpv6AceEntry.')
diffServClassMapAttachCtlElementIndex = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 14, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServClassMapAttachCtlElementIndex.setStatus('current')
if mibBuilder.loadTexts: diffServClassMapAttachCtlElementIndex.setDescription('Element Index for attachment control. Specifies the class map element related with the class map. The class map element uses type to indicate diffServAclEntry, the diffServIpAceEntry, the diffServMacAceEntry or the diffServIpv6AceEntry. The type is specified in diffServClassMapAttachCtlElementIndexType. When the type is macAce(1), the maping index of differServClasssMapElementIndexList is the diffServMacAceEntry. When the type is ipAce(2), the maping index of differServClasssMapElementIndexList is the diffServIpAceEntry. When the type is acl(3), the maping index of differServClasssMapElementIndexList is the diffServAclEntry. When the type is ipv6Ace(4), the maping index of differServClasssMapElementIndexList is the diffServIpv6AceEntry.')
diffServClassMapAttachCtlAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 14, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("attach", 2), ("detach", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServClassMapAttachCtlAction.setStatus('current')
if mibBuilder.loadTexts: diffServClassMapAttachCtlAction.setDescription('Action for attachment control. When setting this object to attach(2) to begin the attaching operation, a particular class map element is attached to a particular class map. When setting this object to detach(3) to begin the not attached operation, then a particular class map element is not attached to a particular class map. When the action is finshed or no action is taken, the value of this object is noAction(1). The value of a particular class map is specified in the AclAttachCtlTargetIndex. The class map element is specified by diffServClassMapAttachCtlElementIndexType and diffServClassMapAttachCtlElementIndex.')
diffServAclTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 15), )
if mibBuilder.loadTexts: diffServAclTable.setStatus('current')
if mibBuilder.loadTexts: diffServAclTable.setDescription('Table for ACL.')
diffServAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 15, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "diffServAclIndex"))
if mibBuilder.loadTexts: diffServAclEntry.setStatus('current')
if mibBuilder.loadTexts: diffServAclEntry.setDescription('Entry for ACL.')
diffServAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 15, 1, 1), Integer32())
if mibBuilder.loadTexts: diffServAclIndex.setStatus('current')
if mibBuilder.loadTexts: diffServAclIndex.setDescription('An index that uniquely identifies an entry in the ACL table.')
diffServAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 15, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServAclName.setStatus('current')
if mibBuilder.loadTexts: diffServAclName.setDescription('The name of this entry.')
diffServAclType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mac", 1), ("ipstandard", 2), ("ipextended", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServAclType.setStatus('current')
if mibBuilder.loadTexts: diffServAclType.setDescription('The type of this entry. When the value of ACL type is modified, then the ACEs in the diffServAclAceIndexList of this entry will be auto-removed, and this entry will be aoto- unbound from the diffServPortTable and the diffServClassMapTable.')
diffServAclAceIndexList = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 15, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServAclAceIndexList.setStatus('current')
if mibBuilder.loadTexts: diffServAclAceIndexList.setDescription('The octet string containes the ACE indexes. Two octets express one index and it is represented in network order. This index list indicates the particular ACEs which belong to this table. The ACE uses type to indicate the diffServIpAceEntry, the diffServMacAceEntry or the diffServIpv6AceEntry. The type is specified in diffServAclType. When the type is macAce(1), the index of diffServAclAceIndexList is the diffServMacAceEntry. When the type is ipAce(2), the index of diffServAclAceIndexList is the diffServIpAceEntry. When the type is ipv6Ace(3), the index of diffServAclAceIndexListis the diffServIpv6AceEntry.')
diffServAclStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 15, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServAclStatus.setStatus('current')
if mibBuilder.loadTexts: diffServAclStatus.setDescription("This object is used to create a new row or modify or delete an existing row in this table. The status column has six defined values: - 'active', which indicates that the conceptual row is available for use by the managed device; - 'notInService', which indicates that the conceptual row exists in the agent, but is unavailable for use by the managed device (see NOTE below); - 'notReady', which indicates that the conceptual row exists in the agent, but is missing information necessary in order to be available for use by the managed device; - 'createAndGo', which is supplied by a management station wishing to create a new instance of a conceptual row and to have its status automatically set to active, making it available for use by the managed device; - 'createAndWait', which is supplied by a management station wishing to create a new instance of a conceptual row (but not make it available for use by the managed device); and, - 'destroy', which is supplied by a management station wishing to delete all of the instances associated with an existing conceptual row. Whereas five of the six values (all except 'notReady') may be specified in a management protocol set operation, only three values will be returned in response to a management protocol retrieval operation: 'notReady', 'notInService' or 'active'. That is, when queried, an existing conceptual row has only three states: it is either available for use by the managed device (the status column has the value 'active'); it is not available for use by the managed device, though the agent has sufficient information to make it so (the status column has the value 'notInService'); or, it is not available for use by the managed device, and an attempt to make it so would fail because the agent has insufficient information (the state column has the value 'notReady'). For a detailed description of this object, please refer to SNMPv2-TC MIB.")
diffServAclAttachCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 16))
diffServAclAttachCtlIndex = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 16, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServAclAttachCtlIndex.setStatus('current')
if mibBuilder.loadTexts: diffServAclAttachCtlIndex.setDescription('Index for attachment control. Specifies the ACL as the target to relate with the IP ACE, the MAC ACE or IPv6 ACE. The ACL identified by a particular value of this index is associated with the same diffServAclEntry as identified by the same value of diffServAclIndex.')
diffServAclAttachCtlAceType = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 16, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("macAce", 1), ("ipAce", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServAclAttachCtlAceType.setStatus('current')
if mibBuilder.loadTexts: diffServAclAttachCtlAceType.setDescription('Type for attachment control. Specifies the type of diffServAclAttachCtlAceIndex to relate with the diffServAclAttachCtlIndex. When the type is macAce(1), the index of diffServAclAceIndexList is the diffServMacAceEntry. When the type is ipAce(2), the index of diffServAclAceIndexList is the diffServIpAceEntry.')
diffServAclAttachCtlAceIndex = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 16, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServAclAttachCtlAceIndex.setStatus('current')
if mibBuilder.loadTexts: diffServAclAttachCtlAceIndex.setDescription('Index for attachment control. Specifies the ACE to relate with the diffServAclAttachCtlIndex. When diffServAclAttachCtlAceType is macAce(1), the value of diffServAclAttachCtlIndex is the diffServMacAceEntry. When diffServAclAttachCtlAceType is ipAce(2), the value of diffServAclAttachCtlIndex is the diffServIpAceEntry. When diffServAclAttachCtlAceType is ipv6Ace(3), the value of diffServAclAttachCtlIndex is the diffServIpv6AceEntry.')
diffServAclAttachCtlAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 16, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("attach", 2), ("detach", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServAclAttachCtlAction.setStatus('current')
if mibBuilder.loadTexts: diffServAclAttachCtlAction.setDescription('Action for attachment control. When setting this object to attach(2) to begin the attaching operation, a particular ACE is attached to a particular ACL. When setting this object to detach(3) to begin the not attached operation, then a particular ACE is not attached to a particular ACL. When the action is finshed or no action is taken, the value of this object is noAction(1), The value of a particular ACL is specified in the diffServAclAttachCtlAceType and diffServAclAttachCtlAceIndex.')
diffServIpAceTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17), )
if mibBuilder.loadTexts: diffServIpAceTable.setStatus('current')
if mibBuilder.loadTexts: diffServIpAceTable.setDescription('Table for IP ACE.')
diffServIpAceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "diffServIpAceIndex"))
if mibBuilder.loadTexts: diffServIpAceEntry.setStatus('current')
if mibBuilder.loadTexts: diffServIpAceEntry.setDescription('Entry for IP ACE.')
diffServIpAceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1, 1), Integer32())
if mibBuilder.loadTexts: diffServIpAceIndex.setStatus('current')
if mibBuilder.loadTexts: diffServIpAceIndex.setDescription('An index that uniquely identifies an entry in the IP ACE table.')
diffServIpAceType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standard", 1), ("extended", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceType.setStatus('current')
if mibBuilder.loadTexts: diffServIpAceType.setDescription('The specified IP ACE type. When the type of this entry is modified, then this entry will be auto-unbound from the diffServAclEntry and the not supporting field of this entry will be set 0.')
diffServIpAceAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceAccess.setStatus('current')
if mibBuilder.loadTexts: diffServIpAceAccess.setDescription('Indicates the action to be taken if a packet matches this ACE.')
diffServIpAceSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceSourceIpAddr.setStatus('current')
if mibBuilder.loadTexts: diffServIpAceSourceIpAddr.setDescription("The specified source IP address. The packet's source address is AND-ed with the value of IpAceSourceIpAddrBitmask and then compared against the value of this object.")
diffServIpAceSourceIpAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceSourceIpAddrBitmask.setStatus('current')
if mibBuilder.loadTexts: diffServIpAceSourceIpAddrBitmask.setDescription("The specified source IP address mask. The packet's source address is AND-ed with the value of IpAceSourceIpAddr and then compared against the value of this object.")
diffServIpAceDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceDestIpAddr.setStatus('current')
if mibBuilder.loadTexts: diffServIpAceDestIpAddr.setDescription("The specified destination IP address. The packet's destination address is AND-ed with the value of diffServIpAceDestIpAddrBitmask and then compared against the value of this object. This object may not be modified if the associated diffServIpAceType object is equal to standard(1).")
diffServIpAceDestIpAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceDestIpAddrBitmask.setStatus('current')
if mibBuilder.loadTexts: diffServIpAceDestIpAddrBitmask.setDescription('The specified destination IP address mask. This object may not be modified if the associated diffServIpAceType object is equal to standard(1).')
diffServIpAceProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceProtocol.setStatus('current')
if mibBuilder.loadTexts: diffServIpAceProtocol.setDescription("The protocol number field in the IP header used to indicate the higher layer protocol as specified in RFC 1700. A value of 0 matches every IP packet. The object=256 means 'any'. For example: 0 is IP, 1 is ICMP, 2 is IGMP, 4 is IP in IP encapsulation, 6 is TCP, 9 is IGRP, 17 is UDP, 47 is GRE, 50 is ESP, 51 is AH, 88 is IGRP, 89 is OSPF, 94 is KA9Q/NOS compatible IP over IP, 103 is PIMv2, 108 is PCP. This object may not be modified if the associated diffServIpAceType object is equal to standard(1).")
diffServIpAcePrec = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAcePrec.setStatus('current')
if mibBuilder.loadTexts: diffServIpAcePrec.setDescription('Specifies the IP precedence value to match against. The value of this object is ignored whenever the value of diffServIpAcePrec object is 8. This object may not be modified if the associated diffServIpAceType object is equal to standard(1).')
diffServIpAceTos = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceTos.setStatus('current')
if mibBuilder.loadTexts: diffServIpAceTos.setDescription('Specifies the IP ToS facility value to match against. The value of this object is ignored whenever the value of diffServIpAcePrec object is 9. This object may not be modified if the associated diffServIpAceType object is equal to standard(1).')
diffServIpAceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceDscp.setStatus('current')
if mibBuilder.loadTexts: diffServIpAceDscp.setDescription('Specifies the DSCP value to match against. The value of this object is ignored whenever the value of diffServIpAcePrec object is 64. This object may not be modified if the associated diffServIpAceType object is equal to standard(1).')
diffServIpAceSourcePortOp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperator", 1), ("equal", 2), ("range", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceSourcePortOp.setStatus('current')
if mibBuilder.loadTexts: diffServIpAceSourcePortOp.setDescription("Indicates how a packet's source TCP/UDP port number is to be compared. noOperator(1), which is the default value, means no comparison is to be made with the source TCP/UDP port number. equal(2), which is used the diffServIpAceSourcePortBitmask and the diffServIpAceMinSourcePort to match against. range(3),which is used the diffServIpAceMinSourcePort and the diffServIpAceMaxSourcePort to match against. This object may not be modified if the associated diffServIpAceType object is equal to standard(1).")
diffServIpAceMinSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceMinSourcePort.setStatus('current')
if mibBuilder.loadTexts: diffServIpAceMinSourcePort.setDescription('If the diffServIpAceSourcePortOp is range(3), this indicates the lower bound of the TCP/UDP port number value range. This object may not be modified if the associated diffServIpAceType object is equal to standard(1).')
diffServIpAceMaxSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceMaxSourcePort.setStatus('current')
if mibBuilder.loadTexts: diffServIpAceMaxSourcePort.setDescription('If the diffServIpAceSourcePortOp is range(3), this indicates the upper bound of the TCP/UDP port number value range. This object may not be modified if the associated diffServIpAceType object is equal to standard(1).')
diffServIpAceSourcePortBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceSourcePortBitmask.setStatus('current')
if mibBuilder.loadTexts: diffServIpAceSourcePortBitmask.setDescription('If the diffServIpAceSourcePortOp is equal(2), this indicates the bitmask of the diffServIpAceMinSourcePort. This object may not be modified if the associated diffServIpAceType object is equal to standard(1).')
diffServIpAceDestPortOp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperator", 1), ("equal", 2), ("range", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceDestPortOp.setStatus('current')
if mibBuilder.loadTexts: diffServIpAceDestPortOp.setDescription("Indicates how a packet's destination TCP/UDP port number is to be compared. noOperator(1), which is the default value, means that no comparison is to be made with the destination TCP/UDP port number. equal(2), which is used the diffServIpAceSourcePortBitmask and the diffServIpAceMinDestPort to match against. range(3),which is used the diffServIpAceMinDestPort and the diffServIpAceMaxDestPort to match against. This object may not be modified if the associated diffServIpAceType object is equal to standard(1).")
diffServIpAceMinDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceMinDestPort.setStatus('current')
if mibBuilder.loadTexts: diffServIpAceMinDestPort.setDescription('If the diffServIpAceDestPortOp is range(3), this indicates the lower bound of the TCP/UDP port number value range. This object may not be modified if the associated diffServIpAceType object is equal to standard(1).')
diffServIpAceMaxDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceMaxDestPort.setStatus('current')
if mibBuilder.loadTexts: diffServIpAceMaxDestPort.setDescription('If the diffServIpAceDestPortOp is range(3), this indicates the upper bound of the TCP/UDP port number value range. This object may not be modified if the associated diffServIpAceType object is equal to standard(1).')
diffServIpAceDestPortBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceDestPortBitmask.setStatus('current')
if mibBuilder.loadTexts: diffServIpAceDestPortBitmask.setDescription('If the diffServIpAceDestPortOp is equal(2), this indicates the bitmask of the diffServIpAceMinDestPort. This object may not be modified if the associated diffServIpAceType object is equal to standard(1).')
diffServIpAceControlCode = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceControlCode.setStatus('current')
if mibBuilder.loadTexts: diffServIpAceControlCode.setDescription('Indicates how the control flags of TCP packets are to be compared. diffServIpAceControlCode is AND-ed with diffServIpAceControlCodeBitmask. This object may not be modified if the associated diffServIpAceType object is equal to standard(1).')
diffServIpAceControlCodeBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceControlCodeBitmask.setStatus('current')
if mibBuilder.loadTexts: diffServIpAceControlCodeBitmask.setDescription('Indicates how the control flags of TCP packets are to be compared. It can be used to check multiple flags of the FIN, SYN, RST, PSH, ACK, URG by the sum of FIN=1, SYN=2, RST=4, PSH=8, ACK=16, URG=32. This object may not be modified if the associated diffServIpAceType object is equal to standard(1).')
diffServIpAceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 17, 1, 22), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceStatus.setStatus('current')
if mibBuilder.loadTexts: diffServIpAceStatus.setDescription("This object is used to create a new row or modify or delete an existing row in this table. The status column has six defined values: The status column has six defined values: - 'active', which indicates that the conceptual row is available for use by the managed device; - 'notInService', which indicates that the conceptual row exists in the agent, but is unavailable for use by the managed device (see NOTE below); - 'notReady', which indicates that the conceptual row exists in the agent, but is missing information necessary in order to be available for use by the managed device; - 'createAndGo', which is supplied by a management station wishing to create a new instance of a conceptual row and to have its status automatically set to active, making it available for use by the managed device; - 'createAndWait', which is supplied by a management station wishing to create a new instance of a conceptual row (but not make it available for use by the managed device); and, - 'destroy', which is supplied by a management station wishing to delete all of the instances associated with an existing conceptual row. Whereas five of the six values (all except 'notReady') may be specified in a management protocol set operation, only three values will be returned in response to a management protocol retrieval operation: 'notReady', 'notInService' or 'active'. That is, when queried, an existing conceptual row has only three states: it is either available for use by the managed device (the status column has the value 'active'); it is not available for use by the managed device, though the agent has sufficient information to make it so (the status column has the value 'notInService'); or, it is not available for use by the managed device, and an attempt to make it so would fail because the agent has insufficient information (the state column has the value 'notReady'). For a detailed description of this object, please refer to SNMPv2-TC MIB.")
diffServMacAceTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 18), )
if mibBuilder.loadTexts: diffServMacAceTable.setStatus('current')
if mibBuilder.loadTexts: diffServMacAceTable.setDescription('Table for MAC ACE.')
diffServMacAceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 18, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "diffServMacAceIndex"))
if mibBuilder.loadTexts: diffServMacAceEntry.setStatus('current')
if mibBuilder.loadTexts: diffServMacAceEntry.setDescription('Entry for MAC ACE.')
diffServMacAceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 18, 1, 1), Integer32())
if mibBuilder.loadTexts: diffServMacAceIndex.setStatus('current')
if mibBuilder.loadTexts: diffServMacAceIndex.setDescription('An index that uniquely identifies an entry in the MAC ACE table.')
diffServMacAceAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceAccess.setStatus('current')
if mibBuilder.loadTexts: diffServMacAceAccess.setDescription('Indicates the action to be taken if a packet matches this ACE.')
diffServMacAcePktformat = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("any", 1), ("untagged-Eth2", 2), ("untagged802Dot3", 3), ("tagggedEth2", 4), ("tagged802Dot3", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAcePktformat.setStatus('current')
if mibBuilder.loadTexts: diffServMacAcePktformat.setDescription('Used to check the packet format of the packets. This object cannot be configured when the status of the entry, diffServMacAceStatus, is active(1).')
diffServMacAceSourceMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 18, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceSourceMacAddr.setStatus('current')
if mibBuilder.loadTexts: diffServMacAceSourceMacAddr.setDescription("Indicates the 48-bit source MAC address. The specified source MAC of the packet. The packet's source MAC address is AND-ed with the value of diffServMacAceSourceMacAddrBitmask and then compared against the value of this object.")
diffServMacAceSourceMacAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 18, 1, 5), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceSourceMacAddrBitmask.setStatus('current')
if mibBuilder.loadTexts: diffServMacAceSourceMacAddrBitmask.setDescription('The specified source MAC address mask.')
diffServMacAceDestMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 18, 1, 6), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceDestMacAddr.setStatus('current')
if mibBuilder.loadTexts: diffServMacAceDestMacAddr.setDescription("Indicates the 48-bit destination MAC address. The specified destination MAC of the packet. The packet's destination MAC address is AND-ed with the value of diffServMacAceDestMacAddrBitmask and then compared against the value of this object.")
diffServMacAceDestMacAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 18, 1, 7), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceDestMacAddrBitmask.setStatus('current')
if mibBuilder.loadTexts: diffServMacAceDestMacAddrBitmask.setDescription('The specified destination MAC address mask.')
diffServMacAceVidOp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 18, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperator", 1), ("equal", 2), ("range", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceVidOp.setStatus('current')
if mibBuilder.loadTexts: diffServMacAceVidOp.setDescription("Indicates how a packet's VID is to be compared. This object cannot be configured when the status of the entry, diffServMacAceStatus, is active(1).")
diffServMacAceMinVid = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 18, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceMinVid.setStatus('current')
if mibBuilder.loadTexts: diffServMacAceMinVid.setDescription('Indicates the lower bound of the VID value range if the diffServMacAceVidOp is range(3).')
diffServMacAceVidBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 18, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceVidBitmask.setStatus('current')
if mibBuilder.loadTexts: diffServMacAceVidBitmask.setDescription('The bitmask of the VID if the diffServMacAceVidOp is equal(2). Default value is 0xfff.')
diffServMacAceMaxVid = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 18, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceMaxVid.setStatus('current')
if mibBuilder.loadTexts: diffServMacAceMaxVid.setDescription('Indicates the upper bound of the VID value range if the diffServMacAceVidOp is range(3). This object cannot be configured when the status of the entry, diffServMacAceStatus, is active(1).')
diffServMacAceEtherTypeOp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 18, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperator", 1), ("equal", 2), ("range", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceEtherTypeOp.setStatus('current')
if mibBuilder.loadTexts: diffServMacAceEtherTypeOp.setDescription("Indicates how a packet's ether type is to be compared.")
diffServMacAceEtherTypeBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 18, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceEtherTypeBitmask.setStatus('current')
if mibBuilder.loadTexts: diffServMacAceEtherTypeBitmask.setDescription("The bitmask of ether type if the diffServMacAceEtherTypeOp is equal(2). The default value is 'FFFF'h.")
diffServMacAceMinEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 18, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceMinEtherType.setStatus('current')
if mibBuilder.loadTexts: diffServMacAceMinEtherType.setDescription('Indicates the lower bound of the ether type value range if the diffServMacAceEtherTypeOp is range(3).')
diffServMacAceMaxEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 18, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceMaxEtherType.setStatus('current')
if mibBuilder.loadTexts: diffServMacAceMaxEtherType.setDescription('Indicates the upper bound of the ether type value range if the diffServMacAceEtherTypeOp is range(3).')
diffServMacAceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 18, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceStatus.setStatus('current')
if mibBuilder.loadTexts: diffServMacAceStatus.setDescription("This object is used to create a new row or modify or delete an existing row in this table. The status column has six defined values: The status column has six defined values: - 'active', which indicates that the conceptual row is available for use by the managed device; - 'notInService', which indicates that the conceptual row exists in the agent, but is unavailable for use by the managed device (see NOTE below); - 'notReady', which indicates that the conceptual row exists in the agent, but is missing information necessary in order to be available for use by the managed device; - 'createAndGo', which is supplied by a management station wishing to create a new instance of a conceptual row and to have its status automatically set to active, making it available for use by the managed device; - 'createAndWait', which is supplied by a management station wishing to create a new instance of a conceptual row (but not make it available for use by the managed device); and, - 'destroy', which is supplied by a management station wishing to delete all of the instances associated with an existing conceptual row. Whereas five of the six values (all except 'notReady') may be specified in a management protocol set operation, only three values will be returned in response to a management protocol retrieval operation: 'notReady', 'notInService' or 'active'. That is, when queried, an existing conceptual row has only three states: it is either available for use by the managed device (the status column has the value 'active'); it is not available for use by the managed device, though the agent has sufficient information to make it so (the status column has the value 'notInService'); or, it is not available for use by the managed device, and an attempt to make it so would fail because the agent has insufficient information (the state column has the value 'notReady'). For a detailed description of this object, please refer to SNMPv2-TC MIB.")
diffServActionTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 19), )
if mibBuilder.loadTexts: diffServActionTable.setStatus('current')
if mibBuilder.loadTexts: diffServActionTable.setDescription('Table for action.')
diffServActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 19, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "diffServActionIndex"))
if mibBuilder.loadTexts: diffServActionEntry.setStatus('current')
if mibBuilder.loadTexts: diffServActionEntry.setDescription('Entry for action.')
diffServActionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 19, 1, 1), Integer32())
if mibBuilder.loadTexts: diffServActionIndex.setStatus('current')
if mibBuilder.loadTexts: diffServActionIndex.setDescription('An index that uniquely identifies an entry in the action table.')
diffServActionList = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 19, 1, 2), Bits().clone(namedValues=NamedValues(("actionPktNewPri", 0), ("actionPktNewIpPrec", 1), ("actionPktNewDscp", 2), ("actionRedPktNewDscp", 3), ("actionRedDrop", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServActionList.setStatus('current')
if mibBuilder.loadTexts: diffServActionList.setDescription('The bitmap value used to identify which action capabilities are enabled on the entry. The actionPktNewPri, actionPktNewIpPrec and actionPktNewDscp can not be enabled at the same time on the entry. The actionRedPktNewDscp and actionRedDrop can not be enabled at the same time on the entry.')
diffServActionPktNewPri = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 19, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServActionPktNewPri.setStatus('current')
if mibBuilder.loadTexts: diffServActionPktNewPri.setDescription('Specifies the new priority value for the packet when the action is satisfied. If the actionPktNewPri bit of the diffServActionList is not enabled, this object can not be set.')
diffServActionPktNewIpPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 19, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServActionPktNewIpPrec.setStatus('current')
if mibBuilder.loadTexts: diffServActionPktNewIpPrec.setDescription('Specifies the new IP precedence facility value for the packet when the action is satisfied. If the actionPktNewIpPrec bit of the diffServActionList is not enabled, this object can not be set.')
diffServActionPktNewDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 19, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServActionPktNewDscp.setStatus('current')
if mibBuilder.loadTexts: diffServActionPktNewDscp.setDescription('Specifies the new DSCP value for the packet when the action is satisfied. If the actionPktNewDscp bit of the diffServActionList is not enabled, this object can not be set.')
diffServActionRedPktNewDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 19, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServActionRedPktNewDscp.setStatus('current')
if mibBuilder.loadTexts: diffServActionRedPktNewDscp.setDescription('Specifies the new DSCP value for the red marking packet when the action is satisfied. If the actionRedPktNewDscp bit of the diffServActionList is not enabled, this object can not be set.')
diffServActionRedDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 19, 1, 7), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServActionRedDrop.setStatus('current')
if mibBuilder.loadTexts: diffServActionRedDrop.setDescription('The actionRedDrop bit of the diffServActionList is for configuring this object. If the value of this object is enabled, the red marking packet will be dropped.')
diffServActionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 19, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServActionStatus.setStatus('current')
if mibBuilder.loadTexts: diffServActionStatus.setDescription("This object is used to create a new row, modify or delete an existing row in this table. The status column has six defined values: The status column has six defined values: - 'active', which indicates that the conceptual row is available for use by the managed device; - 'notInService', which indicates that the conceptual row exists in the agent, but is unavailable for use by the managed device (see NOTE below); - 'notReady', which indicates that the conceptual row exists in the agent, but is missing information necessary in order to be available for use by the managed device; - 'createAndGo', which is supplied by a management station wishing to create a new instance of a conceptual row and to have its status automatically set to active, making it available for use by the managed device; - 'createAndWait', which is supplied by a management station wishing to create a new instance of a conceptual row (but not make it available for use by the managed device); and, - 'destroy', which is supplied by a management station wishing to delete all of the instances associated with an existing conceptual row. Whereas five of the six values (all except 'notReady') may be specified in a management protocol set operation, only three values will be returned in response to a management protocol retrieval operation: 'notReady', 'notInService' or 'active'. That is, when queried, an existing conceptual row has only three states: it is either available for use by the managed device (the status column has the value 'active'); it is not available for use by the managed device, though the agent has sufficient information to make it so (the status column has the value 'notInService'); or, it is not available for use by the managed device, and an attempt to make it so would fail because the agent has insufficient information (the state column has the value 'notReady'). For a detailed description of this object, please refer to SNMPv2-TC MIB.")
diffServMeterTable = MibTable((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 20), )
if mibBuilder.loadTexts: diffServMeterTable.setStatus('current')
if mibBuilder.loadTexts: diffServMeterTable.setDescription('Table for meter.')
diffServMeterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 20, 1), ).setIndexNames((0, "ES3526XA_ES3510-MIB", "diffServActionIndex"))
if mibBuilder.loadTexts: diffServMeterEntry.setStatus('current')
if mibBuilder.loadTexts: diffServMeterEntry.setDescription('Entry for meter.')
diffServMeterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 20, 1, 1), Integer32())
if mibBuilder.loadTexts: diffServMeterIndex.setStatus('current')
if mibBuilder.loadTexts: diffServMeterIndex.setDescription('An entry that describes a single set of token bucket parameters.')
diffServMeterModel = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("default", 1), ("flow", 2), ("trTcmColorBlind", 3), ("trTcmColorAware", 4), ("srTcmColorBlind", 5), ("srTcmColorAware", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMeterModel.setStatus('current')
if mibBuilder.loadTexts: diffServMeterModel.setDescription('The Metering algorithm associated with the Token Bucket parameters. The zeroDotZero indicates this is unknown.')
diffServMeterRate = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 20, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMeterRate.setStatus('current')
if mibBuilder.loadTexts: diffServMeterRate.setDescription('The token-bucket rate, in kilobits per second (kbps).')
diffServMeterBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 20, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1522))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMeterBurstSize.setStatus('current')
if mibBuilder.loadTexts: diffServMeterBurstSize.setDescription('The maximum number of bytes in a single transmission burst.')
diffServMeterInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 20, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMeterInterval.setStatus('current')
if mibBuilder.loadTexts: diffServMeterInterval.setDescription('The time interval used with the token bucket. ')
diffServMeterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 8, 1, 5, 1, 16, 4, 20, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMeterStatus.setStatus('current')
if mibBuilder.loadTexts: diffServMeterStatus.setDescription("This object is used to create a new row or modify or delete an existing row in this table. The status column has six defined values: The status column has six defined values: - 'active', which indicates that the conceptual row is available for use by the managed device; - 'notInService', which indicates that the conceptual row exists in the agent, but is unavailable for use by the managed device (see NOTE below); - 'notReady', which indicates that the conceptual row exists in the agent, but is missing information necessary in order to be available for use by the managed device; - 'createAndGo', which is supplied by a management station wishing to create a new instance of a conceptual row and to have its status automatically set to active, making it available for use by the managed device; - 'createAndWait', which is supplied by a management station wishing to create a new instance of a conceptual row (but not make it available for use by the managed device); and, - 'destroy', which is supplied by a management station wishing to delete all of the instances associated with an existing conceptual row. Whereas five of the six values (all except 'notReady') may be specified in a management protocol set operation, only three values will be returned in response to a management protocol retrieval operation: 'notReady', 'notInService' or 'active'. That is, when queried, an existing conceptual row has only three states: it is either available for use by the managed device (the status column has the value 'active'); it is not available for use by the managed device, though the agent has sufficient information to make it so (the status column has the value 'notInService'); or, it is not available for use by the managed device, and an attempt to make it so would fail because the agent has insufficient information (the state column has the value 'notReady'). For a detailed description of this object, please refer to SNMPv2-TC MIB.")
mibBuilder.exportSymbols("ES3526XA_ES3510-MIB", dhcpSnoopBindingsEntryType=dhcpSnoopBindingsEntryType, prioIpPrecCos=prioIpPrecCos, diffServAclAttachCtlIndex=diffServAclAttachCtlIndex, swProdDescription=swProdDescription, staPortOperPointToPoint=staPortOperPointToPoint, bcastStormTable=bcastStormTable, vlanPortEntry=vlanPortEntry, diffServIpAceEntry=diffServIpAceEntry, tacacsPlusServerGlobalPortNumber=tacacsPlusServerGlobalPortNumber, staPortFastForward=staPortFastForward, ipDhcpRestart=ipDhcpRestart, fileCopyMgt=fileCopyMgt, restartMgt=restartMgt, clusterMgt=clusterMgt, portMgt=portMgt, prioIpPrecTable=prioIpPrecTable, vlanPortTable=vlanPortTable, prioAclToCosMappingStatus=prioAclToCosMappingStatus, sshKeySize=sshKeySize, dhcpSnoopMgt=dhcpSnoopMgt, prioIpPrecRestoreDefault=prioIpPrecRestoreDefault, ntpMgt=ntpMgt, ipSrcGuardBindingsIpAddress=ipSrcGuardBindingsIpAddress, sysLogMgt=sysLogMgt, xstInstancePortPathCost=xstInstancePortPathCost, amtrMgt=amtrMgt, sntpPollInterval=sntpPollInterval, trunkPorts=trunkPorts, igmpSnoopThrottlePortAction=igmpSnoopThrottlePortAction, prioIpDscpPort=prioIpDscpPort, diffServMacAceSourceMacAddrBitmask=diffServMacAceSourceMacAddrBitmask, mstMaxHops=mstMaxHops, bcastStormIfIndex=bcastStormIfIndex, trapDestTable=trapDestTable, diffServMacAceAccess=diffServMacAceAccess, dhcpSnoopVlanEnable=dhcpSnoopVlanEnable, diffServMeterInterval=diffServMeterInterval, ntpAuthenticateStatus=ntpAuthenticateStatus, sshConnID=sshConnID, ipSrcGuardPortIfIndex=ipSrcGuardPortIfIndex, diffServActionTable=diffServActionTable, sysCurrentTime=sysCurrentTime, tacacsPlusServerGlobalRetransmit=tacacsPlusServerGlobalRetransmit, prioIpTosEntry=prioIpTosEntry, mstInstanceOperIndex=mstInstanceOperIndex, sshRsaHostKey8=sshRsaHostKey8, mirrorTable=mirrorTable, dnsHostTable=dnsHostTable, swVlanChangeStatus=swVlanChangeStatus, igmpSnoopProfileStatus=igmpSnoopProfileStatus, swServiceTag=swServiceTag, igmpSnoopProfileCtlInetAddressType=igmpSnoopProfileCtlInetAddressType, telnetMgt=telnetMgt, radiusServerKey=radiusServerKey, sysTimeMgt=sysTimeMgt, xstInstanceCfgPathCostMethod=xstInstanceCfgPathCostMethod, ipSrcGuardConfigEntry=ipSrcGuardConfigEntry, diffServIpAceTable=diffServIpAceTable, swPowerStatusChangeTrap=swPowerStatusChangeTrap, tftpAction=tftpAction, smtpStatus=smtpStatus, diffServPolicyMapElementMeterIndex=diffServPolicyMapElementMeterIndex, fileCopyUnitId=fileCopyUnitId, diffServActionRedPktNewDscp=diffServActionRedPktNewDscp, pingIpAddress=pingIpAddress, es3526XA_ES3510Traps=es3526XA_ES3510Traps, radiusMgt=radiusMgt, mstRevision=mstRevision, sshDsaHostKey5=sshDsaHostKey5, fileCopySrcFileName=fileCopySrcFileName, fileInfoIsStartUp=fileInfoIsStartUp, dnsAliasName=dnsAliasName, diffServMacAceVidBitmask=diffServMacAceVidBitmask, aclIpAceSourceIpAddrBitmask=aclIpAceSourceIpAddrBitmask, remoteLogLevel=remoteLogLevel, mvrGroupCurrentTable=mvrGroupCurrentTable, diffServPolicyMapElementStatus=diffServPolicyMapElementStatus, igmpSnoopRouterCurrentStatus=igmpSnoopRouterCurrentStatus, aclMacAceMinEtherType=aclMacAceMinEtherType, portFlowCtrlStatus=portFlowCtrlStatus, fileInfoUnitID=fileInfoUnitID, diffServClassMapElementIndexList=diffServClassMapElementIndexList, diffServMeterModel=diffServMeterModel, aclIpAceDestIpAddrBitmask=aclIpAceDestIpAddrBitmask, lineMgt=lineMgt, netConfigPrimaryInterface=netConfigPrimaryInterface, trapDestUdpPort=trapDestUdpPort, dhcpSnoopInformationOptionPolicy=dhcpSnoopInformationOptionPolicy, dnsCacheIndex=dnsCacheIndex, diffServActionPktNewDscp=diffServActionPktNewDscp, mvrPortActive=mvrPortActive, swLoaderVer=swLoaderVer, mvrMgt=mvrMgt, igmpSnoopCurrentVlanEntry=igmpSnoopCurrentVlanEntry, mstInstanceEditRemainingHops=mstInstanceEditRemainingHops, clusterMemberAddCtlMacAddr=clusterMemberAddCtlMacAddr, ipSrcGuardBindingsMacAddress=ipSrcGuardBindingsMacAddress, dnsAliasAlias=dnsAliasAlias, diffServAclIndex=diffServAclIndex, ntpServerTable=ntpServerTable, xstInstanceCfgRootPort=xstInstanceCfgRootPort, diffServPolicyMapStatus=diffServPolicyMapStatus, clusterMemberEntry=clusterMemberEntry, vlanMgt=vlanMgt, diffServActionRedDrop=diffServActionRedDrop, remoteLogFacilityType=remoteLogFacilityType, aclIpAceMaxDestPort=aclIpAceMaxDestPort, diffServMeterIndex=diffServMeterIndex, swRoleInSystem=swRoleInSystem, aclMacAceAction=aclMacAceAction, sshRsaHostKey7=sshRsaHostKey7, diffServClassMapAttachCtlAction=diffServClassMapAttachCtlAction, xstInstancePortEnable=xstInstancePortEnable, prioIpPrecDscpStatus=prioIpPrecDscpStatus, swChassisServiceTag=swChassisServiceTag, ntpServerVersion=ntpServerVersion, diffServMacAceEtherTypeBitmask=diffServMacAceEtherTypeBitmask, mvrGroutActive=mvrGroutActive, ntpServerKeyId=ntpServerKeyId, prioIpPortStatus=prioIpPortStatus, mstInstanceOperVlansMap2k=mstInstanceOperVlansMap2k, tacacsPlusServerStatus=tacacsPlusServerStatus, rateLimitPortEntry=rateLimitPortEntry, diffServAclEntry=diffServAclEntry, mvrPortEntry=mvrPortEntry, netConfigIfIndex=netConfigIfIndex, ipFilterHTTPStatus=ipFilterHTTPStatus, sysTimeZone=sysTimeZone, dnsDomainListStatus=dnsDomainListStatus, dhcpSnoopBindingsTable=dhcpSnoopBindingsTable, remoteLogServerStatus=remoteLogServerStatus, prioIpPortValue=prioIpPortValue, portAutonegotiation=portAutonegotiation, ipFilterSnmpEntry=ipFilterSnmpEntry, vlanTable=vlanTable, diffServIpAceMaxSourcePort=diffServIpAceMaxSourcePort, smtpServerIpEntry=smtpServerIpEntry, ipFilterTelnetEndAddress=ipFilterTelnetEndAddress, igmpSnoopQueryTimeout=igmpSnoopQueryTimeout, consolePasswordThreshold=consolePasswordThreshold, sshConnEncryptionTypeStr=sshConnEncryptionTypeStr, tftpServer=tftpServer, aclIpAceTable=aclIpAceTable, aclAclGroupIngressIpAcl=aclAclGroupIngressIpAcl, pingPacketSize=pingPacketSize, dnsMgt=dnsMgt, portIndex=portIndex, igmpSnoopProfileCtlAction=igmpSnoopProfileCtlAction, diffServMacAceMaxEtherType=diffServMacAceMaxEtherType, portSecMaxMacCount=portSecMaxMacCount, swProdUrl=swProdUrl, swPowerStatus=swPowerStatus, tftpStatus=tftpStatus, bcastStormOctetRateScale=bcastStormOctetRateScale, sshConnInfoTable=sshConnInfoTable, diffServMacAceEtherTypeOp=diffServMacAceEtherTypeOp, igmpSnoopRouterStaticPorts=igmpSnoopRouterStaticPorts, netDefaultGateway=netDefaultGateway, sshConnInfoEntry=sshConnInfoEntry, sntpServerIndex=sntpServerIndex, dnsNameServerIndex=dnsNameServerIndex, diffServPolicyMapElementEntry=diffServPolicyMapElementEntry, diffServMeterRate=diffServMeterRate, portTable=portTable, diffServAclAttachCtlAceType=diffServAclAttachCtlAceType, smtpServerIpStatus=smtpServerIpStatus, prioQueueMode=prioQueueMode, prioIpDscpCos=prioIpDscpCos, portSecAction=portSecAction, fileInfoEntry=fileInfoEntry, dnsHostIp=dnsHostIp, diffServPolicyMapName=diffServPolicyMapName, switchNumber=switchNumber, xstInstancePortDesignatedBridge=xstInstancePortDesignatedBridge, igmpSnoopFilterPortIndex=igmpSnoopFilterPortIndex, ipHttpState=ipHttpState, aclMacAceVidOp=aclMacAceVidOp, remoteLogServerEntry=remoteLogServerEntry, ntpServerStatus=ntpServerStatus, diffServPolicyMapAttachCtlIndex=diffServPolicyMapAttachCtlIndex, ipSrcGuardBindingsStatus=ipSrcGuardBindingsStatus, tacacsPlusServerEntry=tacacsPlusServerEntry, portSecPortEntry=portSecPortEntry, fileInfoMgt=fileInfoMgt, prioAclToCosMappingCosValue=prioAclToCosMappingCosValue, clusterCandidateEntry=clusterCandidateEntry, diffServClassMapIndex=diffServClassMapIndex, clusterCandidateMacAddr=clusterCandidateMacAddr, diffServAclStatus=diffServAclStatus, mvrPortType=mvrPortType, diffServMacAceSourceMacAddr=diffServMacAceSourceMacAddr, prioIpPortPhysPort=prioIpPortPhysPort, aclAclGroupIngressMacAcl=aclAclGroupIngressMacAcl, lacpMgt=lacpMgt, fileInfoTable=fileInfoTable, ntpAuthKeyId=ntpAuthKeyId, ipMgt=ipMgt, igmpSnoopProfileRangeEntry=igmpSnoopProfileRangeEntry, smtpDestEMailTable=smtpDestEMailTable, radiusServerStatus=radiusServerStatus, staPortEntry=staPortEntry, tacacsPlusServerKey=tacacsPlusServerKey, tftpDestFile=tftpDestFile, fileCopyFileType=fileCopyFileType, sshConnMajorVersion=sshConnMajorVersion, sshHostKeyGenAction=sshHostKeyGenAction, diffServAclAttachCtlAction=diffServAclAttachCtlAction, clusterMemberAddCtl=clusterMemberAddCtl, fileInfoFileType=fileInfoFileType, prioCopyIpPort=prioCopyIpPort, trapDestMgt=trapDestMgt, lacpPortTable=lacpPortTable, radiusServerIndex=radiusServerIndex, mvrGroupId=mvrGroupId, sysLogHistoryFlashLevel=sysLogHistoryFlashLevel, remoteLogServerIp=remoteLogServerIp, igmpSnoopCurrentVlanTable=igmpSnoopCurrentVlanTable, pingAction=pingAction, bcastStormStatus=bcastStormStatus, restartConfigFile=restartConfigFile, aclMacAceEntry=aclMacAceEntry, dhcpSnoopVlanIndex=dhcpSnoopVlanIndex, clusterCandidateRole=clusterCandidateRole, consoleExecTimeout=consoleExecTimeout, dnsDomainListName=dnsDomainListName, prioIpPortCos=prioIpPortCos, igmpSnoopThrottlePortTable=igmpSnoopThrottlePortTable, igmpSnoopCurrentVlanImmediateLeave=igmpSnoopCurrentVlanImmediateLeave, tacacsPlusServerRetransmit=tacacsPlusServerRetransmit, staPortAdminEdgePort=staPortAdminEdgePort, aclAclGroupTable=aclAclGroupTable, fileInfoFileName=fileInfoFileName, rlPortIndex=rlPortIndex, aclIpAceDestIpAddr=aclIpAceDestIpAddr, diffServAclAttachCtl=diffServAclAttachCtl, mvrStatus=mvrStatus, remoteLogMgt=remoteLogMgt, dhcpSnoopEnable=dhcpSnoopEnable, igmpSnoopMulticastStaticIpAddress=igmpSnoopMulticastStaticIpAddress, radiusServerTimeout=radiusServerTimeout, restartControl=restartControl, ipSrcGuardBindingsPortIfIndex=ipSrcGuardBindingsPortIfIndex, mvrGroupsCtlCount=mvrGroupsCtlCount, staLoopbackDetectionPortRelease=staLoopbackDetectionPortRelease, sshHostKeyDelAction=sshHostKeyDelAction, tacacsPlusServerIndex=tacacsPlusServerIndex, aclMgt=aclMgt, portSpeedDpxCfg=portSpeedDpxCfg, aclIpAceControlCodeBitmask=aclIpAceControlCodeBitmask, dhcpSnoopTotalForwardedPkts=dhcpSnoopTotalForwardedPkts, mstInstanceOperTable=mstInstanceOperTable, portType=portType, amtrMacAddrDelete=amtrMacAddrDelete, smtpSeverityLevel=smtpSeverityLevel)
mibBuilder.exportSymbols("ES3526XA_ES3510-MIB", igmpSnoopThrottlePortCurrentGroups=igmpSnoopThrottlePortCurrentGroups, mvrGroupStaticEntry=mvrGroupStaticEntry, consoleOperBaudRate=consoleOperBaudRate, aclIpAceAction=aclIpAceAction, aclMacAceSourceMacAddrBitmask=aclMacAceSourceMacAddrBitmask, igmpSnoopMulticastCurrentPorts=igmpSnoopMulticastCurrentPorts, xstInstancePortPortRole=xstInstancePortPortRole, smtpDestEMail=smtpDestEMail, aclMacAceEtherTypeOp=aclMacAceEtherTypeOp, xstInstanceCfgForwardDelay=xstInstanceCfgForwardDelay, tacacsPlusServerTable=tacacsPlusServerTable, diffServActionIndex=diffServActionIndex, netConfigIPAddress=netConfigIPAddress, diffServPortEntry=diffServPortEntry, staLoopbackDetectionPortEntry=staLoopbackDetectionPortEntry, igmpSnoopStatus=igmpSnoopStatus, igmpSnoopMulticastCurrentVlanIndex=igmpSnoopMulticastCurrentVlanIndex, ipHttpsPort=ipHttpsPort, trunkCreation=trunkCreation, vlanAddressMethod=vlanAddressMethod, clusterMemberRemoveCtlAction=clusterMemberRemoveCtlAction, mstInstanceOperEntry=mstInstanceOperEntry, sshTimeout=sshTimeout, dhcpSnoopBindingsIpAddress=dhcpSnoopBindingsIpAddress, clusterMemberMacAddr=clusterMemberMacAddr, clusterIpPool=clusterIpPool, consoleParity=consoleParity, consoleAdminBaudRate=consoleAdminBaudRate, mirrorDestinationPort=mirrorDestinationPort, dhcpSnoopPortConfigTable=dhcpSnoopPortConfigTable, dnsHostIndex=dnsHostIndex, diffServMacAceStatus=diffServMacAceStatus, consoleSilentTime=consoleSilentTime, xstInstanceCfgTable=xstInstanceCfgTable, xstInstancePortPort=xstInstancePortPort, prioIpDscpValue=prioIpDscpValue, igmpSnoopFilterPortTable=igmpSnoopFilterPortTable, diffServIpAceSourceIpAddrBitmask=diffServIpAceSourceIpAddrBitmask, swOpCodeVer=swOpCodeVer, igmpSnoopRouterCurrentVlanIndex=igmpSnoopRouterCurrentVlanIndex, clusterCandidateCount=clusterCandidateCount, smtpDestEMailEntry=smtpDestEMailEntry, netConfigUnnumbered=netConfigUnnumbered, aclMacAceName=aclMacAceName, aclAclGroupIfIndex=aclAclGroupIfIndex, rlPortOutputLevel=rlPortOutputLevel, prioAclToCosMappingAclName=prioAclToCosMappingAclName, sshHostKeySaveAction=sshHostKeySaveAction, mvrMaxGroups=mvrMaxGroups, diffServMacAceTable=diffServMacAceTable, portSecurityMgt=portSecurityMgt, diffServClassMapMatchType=diffServClassMapMatchType, igmpSnoopQuerier=igmpSnoopQuerier, prioIpPrecValue=prioIpPrecValue, sshHostKeySaveStatus=sshHostKeySaveStatus, aclMacAceSourceMacAddr=aclMacAceSourceMacAddr, switchProductId=switchProductId, ipFilterHTTPEntry=ipFilterHTTPEntry, sysLogStatus=sysLogStatus, prioIpTosPort=prioIpTosPort, ipFilterSnmpStatus=ipFilterSnmpStatus, prioIpPrecPort=prioIpPrecPort, igmpSnoopMulticastStaticVlanIndex=igmpSnoopMulticastStaticVlanIndex, sshDsaHostKey1=sshDsaHostKey1, vlanPortMode=vlanPortMode, consoleLoginResponseTimeout=consoleLoginResponseTimeout, staTxHoldCount=staTxHoldCount, igmpSnoopFilterPortProfileId=igmpSnoopFilterPortProfileId, fileCopyDestOperType=fileCopyDestOperType, netConfigStatus=netConfigStatus, sntpServerIpAddress=sntpServerIpAddress, diffServPortPolicyMapIndex=diffServPortPolicyMapIndex, qosMgt=qosMgt, prioWrrEntry=prioWrrEntry, radiusServerAcctPortNumber=radiusServerAcctPortNumber, dnsHostName=dnsHostName, diffServMacAceDestMacAddr=diffServMacAceDestMacAddr, mvrRunningStatus=mvrRunningStatus, dnsCacheDomain=dnsCacheDomain, fileCopySrcOperType=fileCopySrcOperType, ipSrcGuardBindingsLeaseTime=ipSrcGuardBindingsLeaseTime, es3526XA_ES3510MIB=es3526XA_ES3510MIB, xstInstanceCfgTimeSinceTopologyChange=xstInstanceCfgTimeSinceTopologyChange, diffServIpAceSourcePortBitmask=diffServIpAceSourcePortBitmask, xstInstanceCfgBridgeHelloTime=xstInstanceCfgBridgeHelloTime, prioIpDscpRestoreDefault=prioIpDscpRestoreDefault, xstInstanceCfgHelloTime=xstInstanceCfgHelloTime, dnsDomainListTable=dnsDomainListTable, ntpStatus=ntpStatus, xstInstanceCfgPriority=xstInstanceCfgPriority, sshDsaHostKey4=sshDsaHostKey4, portSpeedDpxStatus=portSpeedDpxStatus, netConfigTable=netConfigTable, staLoopbackDetectionPortTable=staLoopbackDetectionPortTable, mstInstanceEditVlansMap3k=mstInstanceEditVlansMap3k, rlPortOutputScale=rlPortOutputScale, swAuthenticationFailure=swAuthenticationFailure, rlPortInputScale=rlPortInputScale, igmpSnoopMulticastCurrentStatus=igmpSnoopMulticastCurrentStatus, mstInstanceEditVlansMap2k=mstInstanceEditVlansMap2k, diffServPortIngressMacAclIndex=diffServPortIngressMacAclIndex, xstInstancePortPriority=xstInstancePortPriority, ntpPollInterval=ntpPollInterval, telnetExecTimeout=telnetExecTimeout, diffServIpAceDestPortOp=diffServIpAceDestPortOp, sntpMgt=sntpMgt, igmpSnoopProfileCtl=igmpSnoopProfileCtl, dhcpSnoopVlan=dhcpSnoopVlan, diffServIpAceMinSourcePort=diffServIpAceMinSourcePort, ntpServerIpAddress=ntpServerIpAddress, prioAclToCosMappingIfIndex=prioAclToCosMappingIfIndex, mvrGroupStaticPorts=mvrGroupStaticPorts, mstInstanceOperVlansMap3k=mstInstanceOperVlansMap3k, clusterMemberCount=clusterMemberCount, ipFilterHTTPTable=ipFilterHTTPTable, remoteLogStatus=remoteLogStatus, diffServPolicyMapElementActionIndex=diffServPolicyMapElementActionIndex, tacacsPlusServerPortNumber=tacacsPlusServerPortNumber, mvrGroupStaticStatus=mvrGroupStaticStatus, igmpSnoopProfileCtlStartInetAddress=igmpSnoopProfileCtlStartInetAddress, prioWrrWeight=prioWrrWeight, dhcpSnoopVerifyMacAddressEnable=dhcpSnoopVerifyMacAddressEnable, tacacsPlusServerGlobalTimeout=tacacsPlusServerGlobalTimeout, sshServerMajorVersion=sshServerMajorVersion, ipFilterTelnetEntry=ipFilterTelnetEntry, clusterEnable=clusterEnable, diffServAclAceIndexList=diffServAclAceIndexList, fileInfoFileSize=fileInfoFileSize, consoleDataBits=consoleDataBits, switchInfoTable=switchInfoTable, igmpSnoopThrottlePortRunningStatus=igmpSnoopThrottlePortRunningStatus, sshRsaHostKey1=sshRsaHostKey1, diffServIpAceDestIpAddr=diffServIpAceDestIpAddr, igmpSnoopProfileRangeProfileId=igmpSnoopProfileRangeProfileId, portSecPortTable=portSecPortTable, aclIpAceSourcePortOp=aclIpAceSourcePortOp, trunkMaxId=trunkMaxId, dnsAliasEntry=dnsAliasEntry, igmpSnoopProfileAction=igmpSnoopProfileAction, cosMgt=cosMgt, ipSrcGuardBindingsAddrType=ipSrcGuardBindingsAddrType, ipSrcGuardConfigTable=ipSrcGuardConfigTable, diffServActionStatus=diffServActionStatus, igmpSnoopMulticastStaticStatus=igmpSnoopMulticastStaticStatus, igmpSnoopProfileEntry=igmpSnoopProfileEntry, radiusServerAddress=radiusServerAddress, aclMacAceStatus=aclMacAceStatus, ntpServiceMode=ntpServiceMode, trunkMgt=trunkMgt, diffServPolicyMapElementIndexList=diffServPolicyMapElementIndexList, swHardwareVer=swHardwareVer, bcastStormEntry=bcastStormEntry, clusterMemberAddCtlAction=clusterMemberAddCtlAction, diffServActionPktNewIpPrec=diffServActionPktNewIpPrec, diffServClassMapEntry=diffServClassMapEntry, mvrGroupsCtl=mvrGroupsCtl, xstInstanceCfgEntry=xstInstanceCfgEntry, igmpSnoopProfileRangeStartInetAddress=igmpSnoopProfileRangeStartInetAddress, sshRsaHostKey2=sshRsaHostKey2, sysTimeZoneName=sysTimeZoneName, swIpFilterRejectTrap=swIpFilterRejectTrap, mvrGroupEntry=mvrGroupEntry, trunkTable=trunkTable, sntpServerEntry=sntpServerEntry, diffServMacAceIndex=diffServMacAceIndex, diffServMeterEntry=diffServMeterEntry, igmpSnoopMulticastStaticPorts=igmpSnoopMulticastStaticPorts, clusterCommanderEnable=clusterCommanderEnable, xstInstanceCfgBridgeMaxAge=xstInstanceCfgBridgeMaxAge, igmpSnoopRouterCurrentTable=igmpSnoopRouterCurrentTable, igmpSnoopLeaveProxy=igmpSnoopLeaveProxy, dnsCacheIp=dnsCacheIp, mirrorSourcePort=mirrorSourcePort, fileInfoCreationTime=fileInfoCreationTime, diffServPolicyMapElementTable=diffServPolicyMapElementTable, aclIpAceControlCode=aclIpAceControlCode, aclAclGroupEgressIpAcl=aclAclGroupEgressIpAcl, mvrPortTable=mvrPortTable, es3526XA_ES3510MIBObjects=es3526XA_ES3510MIBObjects, diffServPolicyMapTable=diffServPolicyMapTable, trapDestCommunity=trapDestCommunity, staPortProtocolMigration=staPortProtocolMigration, igmpSnoopMgt=igmpSnoopMgt, xstInstancePortForwardTransitions=xstInstancePortForwardTransitions, mvrCurrentGroups=mvrCurrentGroups, sshHostKeyGenStatus=sshHostKeyGenStatus, prioCopyIpPrec=prioCopyIpPrec, staPortAdminPointToPoint=staPortAdminPointToPoint, diffServClassMapStatus=diffServClassMapStatus, diffServClassMapName=diffServClassMapName, aclIpAceMinDestPort=aclIpAceMinDestPort, ipHttpsState=ipHttpsState, sshDsaHostKey8=sshDsaHostKey8, aclMacAceMinVid=aclMacAceMinVid, rateLimitMgt=rateLimitMgt, fileMgt=fileMgt, prioIpTosRestoreDefault=prioIpTosRestoreDefault, dnsNameServerTable=dnsNameServerTable, dhcpSnoopBindingsEntry=dhcpSnoopBindingsEntry, xstInstancePortTable=xstInstancePortTable, bcastStormOctetRateLevel=bcastStormOctetRateLevel, ipFilterSnmpStartAddress=ipFilterSnmpStartAddress, prioWrrTable=prioWrrTable, smtpDestEMailStatus=smtpDestEMailStatus, xstMgt=xstMgt, diffServPolicyMapAttachCtl=diffServPolicyMapAttachCtl, igmpSnoopQueryMaxResponseTime=igmpSnoopQueryMaxResponseTime, sshAuthRetries=sshAuthRetries, ntpAuthKeyWord=ntpAuthKeyWord, es3526XA_ES3510Conformance=es3526XA_ES3510Conformance, trunkEntry=trunkEntry, prioIpTosCos=prioIpTosCos, dnsAliasTable=dnsAliasTable, prioCopyIpDscp=prioCopyIpDscp, mstInstanceEditTable=mstInstanceEditTable, ipFilterTelnetTable=ipFilterTelnetTable, telnetLoginResponseTimeout=telnetLoginResponseTimeout, dnsDomainName=dnsDomainName, igmpSnoopRouterStaticEntry=igmpSnoopRouterStaticEntry, tftpFileType=tftpFileType, sshConnMinorVersion=sshConnMinorVersion, remoteLogServerTable=remoteLogServerTable, aclAclGroupEntry=aclAclGroupEntry, staPortOperEdgePort=staPortOperEdgePort, mvrGroupCurrentEntry=mvrGroupCurrentEntry, mirrorMgt=mirrorMgt, trapDestVersion=trapDestVersion, rlPortInputStatus=rlPortInputStatus, dnsDomainLookup=dnsDomainLookup, igmpSnoopThrottlePortIndex=igmpSnoopThrottlePortIndex, radiusServerGlobalRetransmit=radiusServerGlobalRetransmit, dhcpSnoopBindingsPortIfIndex=dhcpSnoopBindingsPortIfIndex, diffServMeterStatus=diffServMeterStatus, PYSNMP_MODULE_ID=es3526XA_ES3510MIB, priorityMgt=priorityMgt, smtpServerIp=smtpServerIp, aclIpAceName=aclIpAceName, diffServMacAceMinEtherType=diffServMacAceMinEtherType, mvrGroupStaticTable=mvrGroupStaticTable, diffServActionPktNewPri=diffServActionPktNewPri, ipSrcGuardMgt=ipSrcGuardMgt, igmpSnoopProfileCtlEndInetAddress=igmpSnoopProfileCtlEndInetAddress, fileCopyStatus=fileCopyStatus, aclMacAceDestMacAddrBitmask=aclMacAceDestMacAddrBitmask, lacpPortStatus=lacpPortStatus, staProtocolType=staProtocolType, diffServPolicyMapAttachCtlAction=diffServPolicyMapAttachCtlAction, radiusServerTable=radiusServerTable, prioIpTosValue=prioIpTosValue, dnsHostEntry=dnsHostEntry, diffServIpAceMinDestPort=diffServIpAceMinDestPort, StaPathCostMode=StaPathCostMode, switchManagementVlan=switchManagementVlan, aclIpAceMinSourcePort=aclIpAceMinSourcePort)
mibBuilder.exportSymbols("ES3526XA_ES3510-MIB", igmpSnoopFilterStatus=igmpSnoopFilterStatus, ntpAuthKeyEntry=ntpAuthKeyEntry, diffServIpAceIndex=diffServIpAceIndex, es3526XA_ES3510Notifications=es3526XA_ES3510Notifications, netConfigEntry=netConfigEntry, diffServPolicyMapElementClassMapIndex=diffServPolicyMapElementClassMapIndex, diffServIpAceTos=diffServIpAceTos, diffServMeterTable=diffServMeterTable, staLoopbackDetectionPortTrapStatus=staLoopbackDetectionPortTrapStatus, smtpServerIpTable=smtpServerIpTable, mvrVlanId=mvrVlanId, dnsNameServerIp=dnsNameServerIp, sntpServerTable=sntpServerTable, mstInstanceEditIndex=mstInstanceEditIndex, clusterMemberActive=clusterMemberActive, xstInstancePortDesignatedPort=xstInstancePortDesignatedPort, mirrorStatus=mirrorStatus, switchMgt=switchMgt, igmpSnoopProfileRangeInetAddressType=igmpSnoopProfileRangeInetAddressType, diffServMacAceMinVid=diffServMacAceMinVid, aclIpAceStatus=aclIpAceStatus, mvrGroupCurrentAddress=mvrGroupCurrentAddress, bcastStormMgt=bcastStormMgt, tacacsMgt=tacacsMgt, aclIpAceDestPortOp=aclIpAceDestPortOp, sshDsaHostKey7=sshDsaHostKey7, rlPortInputLevel=rlPortInputLevel, xstInstancePortDesignatedCost=xstInstancePortDesignatedCost, swIdentifier=swIdentifier, trapDestAddress=trapDestAddress, mvrGroupStaticAddress=mvrGroupStaticAddress, smtpSourceEMail=smtpSourceEMail, dhcpSnoopStatistics=dhcpSnoopStatistics, trapDestStatus=trapDestStatus, diffServMacAceVidOp=diffServMacAceVidOp, tacacsPlusServerTimeout=tacacsPlusServerTimeout, staMgt=staMgt, aclIpAcePrec=aclIpAcePrec, igmpSnoopThrottlePortEntry=igmpSnoopThrottlePortEntry, diffServPolicyMapElementIndex=diffServPolicyMapElementIndex, tftpSrcFile=tftpSrcFile, staPathCostMethod=staPathCostMethod, mirrorType=mirrorType, sshRsaHostKey6=sshRsaHostKey6, consoleStopBits=consoleStopBits, pingMgt=pingMgt, tftpMgt=tftpMgt, staPortSystemStatus=staPortSystemStatus, xstInstanceCfgBridgeForwardDelay=xstInstanceCfgBridgeForwardDelay, aclMacAceMaxEtherType=aclMacAceMaxEtherType, securityMgt=securityMgt, diffServPolicyMapDescription=diffServPolicyMapDescription, diffServIpAceMaxDestPort=diffServIpAceMaxDestPort, diffServPortIfIndex=diffServPortIfIndex, diffServIpAceControlCode=diffServIpAceControlCode, radiusServerGlobalAcctPort=radiusServerGlobalAcctPort, sshDsaHostKey3=sshDsaHostKey3, diffServIpAceProtocol=diffServIpAceProtocol, igmpSnoopCurrentVlanIndex=igmpSnoopCurrentVlanIndex, diffServIpAceControlCodeBitmask=diffServIpAceControlCodeBitmask, lacpPortEntry=lacpPortEntry, prioIpPortTable=prioIpPortTable, vlanPortPrivateVlanType=vlanPortPrivateVlanType, ipSrcGuardBindingsVlanIndex=ipSrcGuardBindingsVlanIndex, clusterMemberId=clusterMemberId, tacacsPlusServerAddress=tacacsPlusServerAddress, es3526XA_ES3510TrapsPrefix=es3526XA_ES3510TrapsPrefix, dhcpSnoopUntrustedPortDroppedPkts=dhcpSnoopUntrustedPortDroppedPkts, KeySegment=KeySegment, xstInstancePortState=xstInstancePortState, diffServClassMapAttachCtlElementIndexType=diffServClassMapAttachCtlElementIndexType, igmpSnoopQueryInterval=igmpSnoopQueryInterval, rlPortOutputStatus=rlPortOutputStatus, staLoopbackDetectionPortStatus=staLoopbackDetectionPortStatus, prioIpDscpTable=prioIpDscpTable, ntpAuthKeyTable=ntpAuthKeyTable, aclIpAceProtocol=aclIpAceProtocol, ipFilterHTTPStartAddress=ipFilterHTTPStartAddress, accton=accton, dhcpSnoopBindingsVlanIndex=dhcpSnoopBindingsVlanIndex, staPortTable=staPortTable, prioIpPortEnableStatus=prioIpPortEnableStatus, dhcpSnoopBindingsAddrType=dhcpSnoopBindingsAddrType, xstInstanceCfgTxHoldCount=xstInstanceCfgTxHoldCount, ipSrcGuardAddrTable=ipSrcGuardAddrTable, diffServPolicyMapAttachCtlElementIndex=diffServPolicyMapAttachCtlElementIndex, switchOperState=switchOperState, diffServClassMapTable=diffServClassMapTable, ipFilterTelnetStartAddress=ipFilterTelnetStartAddress, swProdVersion=swProdVersion, ntpServerEntry=ntpServerEntry, igmpSnoopProfileRangeTable=igmpSnoopProfileRangeTable, igmpSnoopRouterStaticVlanIndex=igmpSnoopRouterStaticVlanIndex, sshRsaHostKey5=sshRsaHostKey5, diffServAclName=diffServAclName, trunkStatus=trunkStatus, igmpSnoopThrottlePortMaxGroups=igmpSnoopThrottlePortMaxGroups, diffServPortIngressIpAclIndex=diffServPortIngressIpAclIndex, diffServIpAceDscp=diffServIpAceDscp, swAuthenticationSuccess=swAuthenticationSuccess, lacpPortIndex=lacpPortIndex, diffServMacAceDestMacAddrBitmask=diffServMacAceDestMacAddrBitmask, igmpSnoopRouterStaticTable=igmpSnoopRouterStaticTable, xstInstanceCfgDesignatedRoot=xstInstanceCfgDesignatedRoot, rateLimitPortTable=rateLimitPortTable, portSecPortIndex=portSecPortIndex, trunkIndex=trunkIndex, clusterMemberDesc=clusterMemberDesc, diffServIpAceSourceIpAddr=diffServIpAceSourceIpAddr, sshDsaHostKey2=sshDsaHostKey2, clusterMemberRemoveCtlId=clusterMemberRemoveCtlId, xstInstanceCfgIndex=xstInstanceCfgIndex, xstInstancePortDesignatedRoot=xstInstancePortDesignatedRoot, igmpSnoopFilterPortEntry=igmpSnoopFilterPortEntry, dhcpSnoopVlanConfigEntry=dhcpSnoopVlanConfigEntry, diffServMacAceEntry=diffServMacAceEntry, vlanPortIndex=vlanPortIndex, diffServMacAcePktformat=diffServMacAcePktformat, dhcpSnoopGlobal=dhcpSnoopGlobal, edgecore=edgecore, ValidStatus=ValidStatus, igmpSnoopMulticastCurrentTable=igmpSnoopMulticastCurrentTable, prioIpPrecEntry=prioIpPrecEntry, clusterMemberTable=clusterMemberTable, prioAclToCosMappingEntry=prioAclToCosMappingEntry, ipSrcGuardAddrEntry=ipSrcGuardAddrEntry, prioCopy=prioCopy, dhcpSnoopPortConfigEntry=dhcpSnoopPortConfigEntry, dnsCacheEntry=dnsCacheEntry, mvrGroupsCtlAction=mvrGroupsCtlAction, dhcpSnoopBindings=dhcpSnoopBindings, sshConnUserName=sshConnUserName, diffServIpAceType=diffServIpAceType, dhcpSnoopInterface=dhcpSnoopInterface, igmpSnoopRouterStaticStatus=igmpSnoopRouterStaticStatus, fileCopyDestFileName=fileCopyDestFileName, portCapabilities=portCapabilities, mvrGroupsCtlId=mvrGroupsCtlId, dnsDomainListEntry=dnsDomainListEntry, diffServIpAceSourcePortOp=diffServIpAceSourcePortOp, swUnitIndex=swUnitIndex, radiusServerRetransmit=radiusServerRetransmit, ipFilterTelnetStatus=ipFilterTelnetStatus, mstInstanceOperVlansMap=mstInstanceOperVlansMap, telnetPasswordThreshold=telnetPasswordThreshold, mvrPortImmediateLeave=mvrPortImmediateLeave, cheetahSwitchMgt=cheetahSwitchMgt, xstInstanceCfgTopChanges=xstInstanceCfgTopChanges, vlanIndex=vlanIndex, sshDisconnect=sshDisconnect, clusterClearCandidateTable=clusterClearCandidateTable, swProdName=swProdName, diffServClassMapElementIndexTypeList=diffServClassMapElementIndexTypeList, sshMgt=sshMgt, portEntry=portEntry, clusterCandidateTable=clusterCandidateTable, diffServMacAceMaxVid=diffServMacAceMaxVid, amtrMacAddrAgingStatus=amtrMacAddrAgingStatus, ipHttpPort=ipHttpPort, diffServAclAttachCtlAceIndex=diffServAclAttachCtlAceIndex, diffServClassMapAttachCtlElementIndex=diffServClassMapAttachCtlElementIndex, igmpSnoopProfileId=igmpSnoopProfileId, ipFilterHTTPEndAddress=ipFilterHTTPEndAddress, clusterRole=clusterRole, sshDsaHostKey6=sshDsaHostKey6, diffServPolicyMapIndex=diffServPolicyMapIndex, dnsCacheTtl=dnsCacheTtl, dnsCacheTable=dnsCacheTable, mstInstanceOperVlansMap4k=mstInstanceOperVlansMap4k, vlanEntry=vlanEntry, igmpSnoopProfileTable=igmpSnoopProfileTable, diffServIpAceDestPortBitmask=diffServIpAceDestPortBitmask, prioAclToCosMappingTable=prioAclToCosMappingTable, netConfigSubnetMask=netConfigSubnetMask, igmpSnoopProfileCtlId=igmpSnoopProfileCtlId, trunkValidNumber=trunkValidNumber, diffServClassMapDescription=diffServClassMapDescription, staLoopbackDetectionPortIfIndex=staLoopbackDetectionPortIfIndex, dhcpSnoopPortTrustEnable=dhcpSnoopPortTrustEnable, ntpAuthKeyStatus=ntpAuthKeyStatus, diffServAclTable=diffServAclTable, dhcpSnoopInformationOptionEnable=dhcpSnoopInformationOptionEnable, diffServPortTable=diffServPortTable, diffServClassMapAttachCtlIndex=diffServClassMapAttachCtlIndex, dhcpSnoopBindingsLeaseTime=dhcpSnoopBindingsLeaseTime, prioIpTosTable=prioIpTosTable, pingCompleted=pingCompleted, diffServIpAceStatus=diffServIpAceStatus, radiusServerGlobalTimeout=radiusServerGlobalTimeout, aclIpAcePrecedence=aclIpAcePrecedence, fileCopyTftpServer=fileCopyTftpServer, diffServClassMapAttachCtl=diffServClassMapAttachCtl, sshConnStatus=sshConnStatus, igmpSnoopRouterCurrentEntry=igmpSnoopRouterCurrentEntry, aclIpAceDscp=aclIpAceDscp, ipSrcGuardMode=ipSrcGuardMode, igmpSnoopMulticastStaticTable=igmpSnoopMulticastStaticTable, mstInstanceEditVlansMap=mstInstanceEditVlansMap, igmpSnoopMulticastCurrentEntry=igmpSnoopMulticastCurrentEntry, sshRsaHostKey3=sshRsaHostKey3, mvrGroupCurrentPorts=mvrGroupCurrentPorts, portTrunkIndex=portTrunkIndex, staPortLongPathCost=staPortLongPathCost, igmpSnoopQueryCount=igmpSnoopQueryCount, swBootRomVer=swBootRomVer, dhcpSnoopVlanConfigTable=dhcpSnoopVlanConfigTable, diffServMgt=diffServMgt, radiusServerEntry=radiusServerEntry, igmpSnoopRouterCurrentPorts=igmpSnoopRouterCurrentPorts, swSmtpConnFailureTrap=swSmtpConnFailureTrap, clusterMemberAddCtlId=clusterMemberAddCtlId, diffServIpAceAccess=diffServIpAceAccess, xstInstanceCfgHoldTime=xstInstanceCfgHoldTime, prioWrrTrafficClass=prioWrrTrafficClass, clusterCandidateDesc=clusterCandidateDesc, dnsCacheType=dnsCacheType, swPortNumber=swPortNumber, igmpSnoopProfileRangeAction=igmpSnoopProfileRangeAction, mirrorEntry=mirrorEntry, smtpMgt=smtpMgt, aclIpAceIndex=aclIpAceIndex, portFlowCtrlCfg=portFlowCtrlCfg, igmpSnoopProfileRangeEndInetAddress=igmpSnoopProfileRangeEndInetAddress, igmpSnoopVersion=igmpSnoopVersion, fileCopyTftpErrMsg=fileCopyTftpErrMsg, xstInstanceCfgRootCost=xstInstanceCfgRootCost, xstInstancePortEntry=xstInstancePortEntry, fileInfoDelete=fileInfoDelete, diffServAclType=diffServAclType, diffServActionEntry=diffServActionEntry, igmpSnoopMulticastStaticEntry=igmpSnoopMulticastStaticEntry, pingRoundTripTime=pingRoundTripTime, ipFilterMgt=ipFilterMgt, aclIpAceSourceIpAddr=aclIpAceSourceIpAddr, sntpServiceMode=sntpServiceMode, portName=portName, ipSrcGuardBindingsEntryType=ipSrcGuardBindingsEntryType, igmpSnoopMulticastCurrentIpAddress=igmpSnoopMulticastCurrentIpAddress, dhcpSnoopBindingsMacAddress=dhcpSnoopBindingsMacAddress, sshServerMinorVersion=sshServerMinorVersion, aclIpAceMaxSourcePort=aclIpAceMaxSourcePort, sshServerStatus=sshServerStatus, ipFilterSnmpEndAddress=ipFilterSnmpEndAddress, prioIpPortEntry=prioIpPortEntry, staLoopbackDetectionPortReleaseMode=staLoopbackDetectionPortReleaseMode, mvrGroupStatus=mvrGroupStatus, mvrIfIndex=mvrIfIndex, fileCopyAction=fileCopyAction, dnsCacheFlag=dnsCacheFlag, consoleMgt=consoleMgt, sntpStatus=sntpStatus, aclAclGroupEgressMacAcl=aclAclGroupEgressMacAcl, portSecPortStatus=portSecPortStatus, ipFilterSnmpTable=ipFilterSnmpTable)
mibBuilder.exportSymbols("ES3526XA_ES3510-MIB", diffServPolicyMapEntry=diffServPolicyMapEntry, staSystemStatus=staSystemStatus, swMicrocodeVer=swMicrocodeVer, diffServMeterBurstSize=diffServMeterBurstSize, restartOpCodeFile=restartOpCodeFile, switchInfoEntry=switchInfoEntry, tacacsPlusServerGlobalKey=tacacsPlusServerGlobalKey, aclMacAcePrecedence=aclMacAcePrecedence, aclMacAceMaxVid=aclMacAceMaxVid, aclMacAceTable=aclMacAceTable, sysLogHistoryRamLevel=sysLogHistoryRamLevel, diffServIpAceDestIpAddrBitmask=diffServIpAceDestIpAddrBitmask, aclMacAceDestMacAddr=aclMacAceDestMacAddr, staPortIndex=staPortIndex, xstInstanceCfgMaxAge=xstInstanceCfgMaxAge, dhcpSnoopPortIfIndex=dhcpSnoopPortIfIndex, aclIpAceTos=aclIpAceTos, xstInstancePortInstance=xstInstancePortInstance, aclMacAcePktformat=aclMacAcePktformat, trapDestEntry=trapDestEntry, radiusServerAuthPortNumber=radiusServerAuthPortNumber, dnsNameServerEntry=dnsNameServerEntry, diffServIpAcePrec=diffServIpAcePrec, aclIpAceEntry=aclIpAceEntry, swSerialNumber=swSerialNumber, radiusServerGlobalKey=radiusServerGlobalKey, radiusServerGlobalAuthPort=radiusServerGlobalAuthPort, sshRsaHostKey4=sshRsaHostKey4, clusterMemberRemoveCtl=clusterMemberRemoveCtl, diffServActionList=diffServActionList, mstName=mstName, aclMacAceIndex=aclMacAceIndex, mstInstanceEditVlansMap4k=mstInstanceEditVlansMap4k, mvrGroupTable=mvrGroupTable, swProdManufacturer=swProdManufacturer, mstInstanceEditEntry=mstInstanceEditEntry, prioIpDscpEntry=prioIpDscpEntry)
