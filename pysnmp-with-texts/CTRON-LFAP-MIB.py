#
# PySNMP MIB module CTRON-LFAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CTRON-LFAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:30:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ctSystem, = mibBuilder.importSymbols("CTRON-MIB-NAMES", "ctSystem")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Bits, ObjectIdentity, NotificationType, Counter32, TimeTicks, Integer32, MibIdentifier, ModuleIdentity, Counter64, iso, IpAddress, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Bits", "ObjectIdentity", "NotificationType", "Counter32", "TimeTicks", "Integer32", "MibIdentifier", "ModuleIdentity", "Counter64", "iso", "IpAddress", "Unsigned32")
DisplayString, PhysAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "PhysAddress", "TextualConvention")
ctLFAP = ModuleIdentity((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11))
ctLFAP.setRevisions(('1999-12-29 00:00', '1997-09-25 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ctLFAP.setRevisionsDescriptions(('Upgrade LFAP to version 4. Enhance configuration options.', 'First implementation on SSR. LFAP Protocol version 3.',))
if mibBuilder.loadTexts: ctLFAP.setLastUpdated('9912290000Z')
if mibBuilder.loadTexts: ctLFAP.setOrganization('Cabletron Systems, Inc')
if mibBuilder.loadTexts: ctLFAP.setContactInfo('Cabletron Systems, Inc. 35 Industrial Way, P.O. Box 5005 Rochester, NH 03867-0505 (603) 332-9400 support@cabletron.com http://www.ctron.com')
if mibBuilder.loadTexts: ctLFAP.setDescription('This mib module defines an SNMP enterprise MIB under Cabletron Enterprise. RFC 2124. Light-weight Flow Admission Protocol.')
flowPolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 1))
flowPolicyConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 1, 6))
monLfap = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2))
monLfapCounts = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 1))
monCxnCounts = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 2))
flowPolicyPolling = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 3))
flowPolicyControl = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowPolicyControl.setStatus('current')
if mibBuilder.loadTexts: flowPolicyControl.setDescription('This object allows flow policy to be enabled or disabled on each switch. Setting this object to disable(1) disables flow policy functionality on the switch. Setting this object to enable(2) enables the flow policy function.')
flowPolicyStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("active", 3), ("error", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowPolicyStatus.setStatus('current')
if mibBuilder.loadTexts: flowPolicyStatus.setDescription('This object gives the status of flow policy processing on each switch. The value of disabled(1) indicates that the flow policy function has been totally disabled. The value of enabled(2) indicates that the flow policy functions have been enabled and is searching for a policy server. The value of active(3) indicates that the flow policy function is fully operational. The value of error(4) indicates that the flow policy function has experienced some fatal error and has disabled itself.')
flowPolicyActiveServer = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowPolicyActiveServer.setStatus('current')
if mibBuilder.loadTexts: flowPolicyActiveServer.setDescription('This object reflects the IP address of the remote policy server currently being used.')
flowPolicyServerAddrTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 1, 4), )
if mibBuilder.loadTexts: flowPolicyServerAddrTable.setStatus('current')
if mibBuilder.loadTexts: flowPolicyServerAddrTable.setDescription('An ordered list of flow policy server addresses with which flow policy processing will attempt to establish contact.')
flowPolicyServerAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 1, 4, 1), ).setIndexNames((0, "CTRON-LFAP-MIB", "flowPolicyServerAddrIndex"))
if mibBuilder.loadTexts: flowPolicyServerAddrEntry.setStatus('current')
if mibBuilder.loadTexts: flowPolicyServerAddrEntry.setDescription('A component entry containing objects for a particular server.')
flowPolicyServerAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowPolicyServerAddrIndex.setStatus('current')
if mibBuilder.loadTexts: flowPolicyServerAddrIndex.setDescription('A unique value for each flow policy server address that indexes the table.')
flowPolicyServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 1, 4, 1, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowPolicyServerAddr.setStatus('current')
if mibBuilder.loadTexts: flowPolicyServerAddr.setDescription('This object contains the address of a flow policy server.')
flowPolicyConfigPolicy = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("available", 1), ("unavailable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowPolicyConfigPolicy.setStatus('current')
if mibBuilder.loadTexts: flowPolicyConfigPolicy.setDescription('This object indicates whether or not the CCE supports connection policy. A value of available(1) indicates that connection policy support is available from this CCE. A value of unavailable(2) indicates that this CCE is incapable of supporting connection policy.')
flowPolicyConfigStatistics = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("available", 1), ("unavailable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowPolicyConfigStatistics.setStatus('current')
if mibBuilder.loadTexts: flowPolicyConfigStatistics.setDescription('This object indicates whether or not the CCE supports connection statistics. A value of available(1) indicates that connection statistics are supported from this CCE. A value of unavailable(2) indicates that this CCE is incapable of supporting connection statistics.')
monLfapFARsSent = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapFARsSent.setStatus('current')
if mibBuilder.loadTexts: monLfapFARsSent.setDescription('This object contains the number of LFAP FARs sent from the flow control entity (CCE)')
monLfapFARsReceived = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapFARsReceived.setStatus('current')
if mibBuilder.loadTexts: monLfapFARsReceived.setDescription('This object contains the number of LFAP FARs received by the CCE.')
monLfapFAAsSent = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapFAAsSent.setStatus('current')
if mibBuilder.loadTexts: monLfapFAAsSent.setDescription('This object contains the number of LFAP FAAs sent from the CCE.')
monLfapFAAsReceived = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapFAAsReceived.setStatus('current')
if mibBuilder.loadTexts: monLfapFAAsReceived.setDescription('This object contains the number of LFAP FAAs received by the CCE.')
monLfapFAUsSent = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapFAUsSent.setStatus('current')
if mibBuilder.loadTexts: monLfapFAUsSent.setDescription('This object contains the number of LFAP FAUs sent from the CCE.')
monLfapFAUsReceived = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapFAUsReceived.setStatus('current')
if mibBuilder.loadTexts: monLfapFAUsReceived.setDescription('This object contains the number of LFAP FAUs received by the CCE.')
monLfapFUNsSent = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapFUNsSent.setStatus('current')
if mibBuilder.loadTexts: monLfapFUNsSent.setDescription('This object contains the number of LFAP FUNs sent from the CCE.')
monLfapFUNsReceived = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapFUNsReceived.setStatus('current')
if mibBuilder.loadTexts: monLfapFUNsReceived.setDescription('This object contains the number of LFAP FUNs received by the CCE.')
monLfapFUAsSent = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapFUAsSent.setStatus('current')
if mibBuilder.loadTexts: monLfapFUAsSent.setDescription('This object contains the number of LFAP FUAs sent from the CCE.')
monLfapFUAsReceived = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapFUAsReceived.setStatus('current')
if mibBuilder.loadTexts: monLfapFUAsReceived.setDescription('This object contains the number of LFAP FUAs received by the CCE.')
monLfapFCRsSent = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapFCRsSent.setStatus('current')
if mibBuilder.loadTexts: monLfapFCRsSent.setDescription('This object contains the number of LFAP FCRs sent from the CCE.')
monLfapFCRsReceived = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapFCRsReceived.setStatus('current')
if mibBuilder.loadTexts: monLfapFCRsReceived.setDescription('This object contains the number of LFAP FCRs received by the CCE.')
monLfapFCAsSent = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapFCAsSent.setStatus('current')
if mibBuilder.loadTexts: monLfapFCAsSent.setDescription('This object contains the number of LFAP FCAs sent from the CCE.')
monLfapFCAsReceived = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapFCAsReceived.setStatus('current')
if mibBuilder.loadTexts: monLfapFCAsReceived.setDescription('This object contains the number of LFAP FCAs received by the CCE.')
monLfapARsSent = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapARsSent.setStatus('current')
if mibBuilder.loadTexts: monLfapARsSent.setDescription('This object contains the number of LFAP ARs sent from the CCE.')
monLfapARsReceived = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapARsReceived.setStatus('current')
if mibBuilder.loadTexts: monLfapARsReceived.setDescription('This object contains the number of LFAP ARs received by the CCE.')
monLfapARAsSent = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapARAsSent.setStatus('current')
if mibBuilder.loadTexts: monLfapARAsSent.setDescription('This object contains the number of LFAP ARAs sent from the CCE.')
monLfapARAsReceived = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapARAsReceived.setStatus('current')
if mibBuilder.loadTexts: monLfapARAsReceived.setDescription('This object contains the number of LFAP ARAs received by the CCE.')
monLfapFSNsSent = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapFSNsSent.setStatus('current')
if mibBuilder.loadTexts: monLfapFSNsSent.setDescription('This object contains the number of LFAP FSNs sent from the CCE.')
monLfapFSNsReceived = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapFSNsReceived.setStatus('current')
if mibBuilder.loadTexts: monLfapFSNsReceived.setDescription('This object contains the number of LFAP FSNs received by the CCE.')
monLfapFSAsSent = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapFSAsSent.setStatus('current')
if mibBuilder.loadTexts: monLfapFSAsSent.setDescription('This object contains the number of LFAP FSAs sent from the CCE.')
monLfapFSAsReceived = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapFSAsReceived.setStatus('current')
if mibBuilder.loadTexts: monLfapFSAsReceived.setDescription('This object contains the number of LFAP FSAs received by the CCE.')
monLfapDroppedMessages = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapDroppedMessages.setStatus('current')
if mibBuilder.loadTexts: monLfapDroppedMessages.setDescription('This object contains the number of Lfap messages which were dropped by the CCE and not sent to the FAS.')
monLfapVRsSent = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapVRsSent.setStatus('current')
if mibBuilder.loadTexts: monLfapVRsSent.setDescription('This object contains the number of LFAP VRs sent from the CCE.')
monLfapVRAsReceived = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapVRAsReceived.setStatus('current')
if mibBuilder.loadTexts: monLfapVRAsReceived.setDescription('This object contains the number of LFAP VRAs received by the CCE.')
monLfapConnSuccess = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapConnSuccess.setStatus('current')
if mibBuilder.loadTexts: monLfapConnSuccess.setDescription('This object contains the number of successful connections made from the CCE to server(s).')
monLfapConnFailure = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapConnFailure.setStatus('current')
if mibBuilder.loadTexts: monLfapConnFailure.setDescription('This object contains the number of unsuccessful attempts to connect from the CCE to the server(s).')
monLfapBytesSent = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapBytesSent.setStatus('current')
if mibBuilder.loadTexts: monLfapBytesSent.setDescription('This object contains the total number of bytes sent in messages from the CCE to the server(s).')
monLfapBytesReceived = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapBytesReceived.setStatus('current')
if mibBuilder.loadTexts: monLfapBytesReceived.setDescription('This object contains the total number of bytes received in messages from the server(s) to the CCE.')
monLfapMsgsSent = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapMsgsSent.setStatus('current')
if mibBuilder.loadTexts: monLfapMsgsSent.setDescription('This object contains the total number of messages sent from the CCE to the server(s).')
monLfapMsgsReceived = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapMsgsReceived.setStatus('current')
if mibBuilder.loadTexts: monLfapMsgsReceived.setDescription('This object contains the total number of messages received from the server(s) to the CCE.')
monLfapMsgsReceivedError = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapMsgsReceivedError.setStatus('current')
if mibBuilder.loadTexts: monLfapMsgsReceivedError.setDescription('This object contains the total number of messages received in error from the server(s) to the CCE.')
monLfapMsgsSendQueue = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapMsgsSendQueue.setStatus('current')
if mibBuilder.loadTexts: monLfapMsgsSendQueue.setDescription('This object contains the number of messages currently in the send queue.')
monLfapMsgsSendQueuePeak = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapMsgsSendQueuePeak.setStatus('current')
if mibBuilder.loadTexts: monLfapMsgsSendQueuePeak.setDescription('This object contains the peak number of messages in the send queue.')
monLfapMsgsReceiveQueue = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapMsgsReceiveQueue.setStatus('current')
if mibBuilder.loadTexts: monLfapMsgsReceiveQueue.setDescription('This object contains the number of messages currently in the receive queue.')
monLfapDroppedMessagesConnected = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapDroppedMessagesConnected.setStatus('current')
if mibBuilder.loadTexts: monLfapDroppedMessagesConnected.setDescription('This object contains the number of LFAP messages which were dropped by the CCE and not sent to the server while the CCE was connected to the server.')
monLfapDroppedFARs = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapDroppedFARs.setStatus('current')
if mibBuilder.loadTexts: monLfapDroppedFARs.setDescription('This object contains the number of LFAP FARs which were dropped by the CCE and not sent to the server.')
monLfapDroppedFUNIs = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapDroppedFUNIs.setStatus('current')
if mibBuilder.loadTexts: monLfapDroppedFUNIs.setDescription('This object contains the number of LFAP FUN-Inactives which were dropped by the CCE and not sent to the server.')
monLfapDroppedFUNs = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapDroppedFUNs.setStatus('current')
if mibBuilder.loadTexts: monLfapDroppedFUNs.setDescription('This object contains the number of LFAP FUN-Updates which were dropped by the CCE and not sent to the server.')
monLfapDroppedARs = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapDroppedARs.setStatus('current')
if mibBuilder.loadTexts: monLfapDroppedARs.setDescription('This object contains the number of LFAP ARs which were dropped by the CCE and not sent to the server.')
monLfapDroppedARAs = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapDroppedARAs.setStatus('current')
if mibBuilder.loadTexts: monLfapDroppedARAs.setDescription('This object contains the number of LFAP ARAs which were dropped by the CCE and not sent to the server.')
monLfapDroppedVRs = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapDroppedVRs.setStatus('current')
if mibBuilder.loadTexts: monLfapDroppedVRs.setDescription('This object contains the number of LFAP VRs which were dropped by the CCE and not sent to the server.')
monLfapYesRespCnt = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapYesRespCnt.setStatus('current')
if mibBuilder.loadTexts: monLfapYesRespCnt.setDescription('This object contains the number of positive LFAP responses received from the FAS.')
monLfapNoRespCnt = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapNoRespCnt.setStatus('current')
if mibBuilder.loadTexts: monLfapNoRespCnt.setDescription('This object contains the number of negative LFAP responses received from the FAS.')
monLfapFlowSetups = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapFlowSetups.setStatus('current')
if mibBuilder.loadTexts: monLfapFlowSetups.setDescription('This object contains the number of flow setups.')
monLfapFlowTeardowns = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapFlowTeardowns.setStatus('current')
if mibBuilder.loadTexts: monLfapFlowTeardowns.setDescription('This object contains the number of flow teardowns.')
monLfapFlowActivePeak = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 2, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monLfapFlowActivePeak.setStatus('current')
if mibBuilder.loadTexts: monLfapFlowActivePeak.setDescription('This object contains the peak number of active flows.')
monActiveCxnCnt = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 2, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monActiveCxnCnt.setStatus('current')
if mibBuilder.loadTexts: monActiveCxnCnt.setDescription('This object contains the number of connections on which statistics are being reported.')
flowPolicyPollingTimerInterval = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowPolicyPollingTimerInterval.setStatus('current')
if mibBuilder.loadTexts: flowPolicyPollingTimerInterval.setDescription('This object contains the number of minutes between statistics polling periods.')
flowPolicyPollingBatchSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowPolicyPollingBatchSize.setStatus('current')
if mibBuilder.loadTexts: flowPolicyPollingBatchSize.setDescription('This object specifies the number of connections that comprise a batch for polling purposes.')
flowPolicyPollingBatchInterval = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flowPolicyPollingBatchInterval.setStatus('current')
if mibBuilder.loadTexts: flowPolicyPollingBatchInterval.setDescription('This object contains the current number of milliseconds between statistics polling batches. A polling period is divided into polling batches, the duration between which is calculated by dividing the value of flowPolicyPollingTimerInterval times 60,000 by the number of batches. The number of polling batches is calculated by dividing the actual number of connections by the value of flowPolicyPollingBatchSize. Between batches, the statistics polling mechanism pauses this number of milliseconds.')
flowPolicyPollingBatchUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowPolicyPollingBatchUpdateInterval.setStatus('current')
if mibBuilder.loadTexts: flowPolicyPollingBatchUpdateInterval.setDescription('This object specifies the time in seconds to send flow create and delete information to the server.')
flowPolicyPollingLostContactInterval = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 2000)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowPolicyPollingLostContactInterval.setStatus('current')
if mibBuilder.loadTexts: flowPolicyPollingLostContactInterval.setDescription('This object specifies the time to wait in seconds until the CCE realizes it has lost contact with a server.')
flowPolicyPollingServerRetryInterval = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowPolicyPollingServerRetryInterval.setStatus('current')
if mibBuilder.loadTexts: flowPolicyPollingServerRetryInterval.setDescription('This object specifies the time in seconds to wait before trying to connect to the server(s) in the list after being unable to connect to any of the server(s).')
flowPolicyPollingSendQueueMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 2000000)).clone(50000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowPolicyPollingSendQueueMaxSize.setStatus('current')
if mibBuilder.loadTexts: flowPolicyPollingSendQueueMaxSize.setDescription('This object specifies the maximum number of messages the send queue can hold before messages are dropped.')
flowPolicyPollingTaskPriority = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 250)).clone(230)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flowPolicyPollingTaskPriority.setStatus('current')
if mibBuilder.loadTexts: flowPolicyPollingTaskPriority.setDescription('This object specifies the task priority of LFAP.')
lfapConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 4))
lfapCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 4, 1))
lfapGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 4, 2))
lfapComplianceV10 = ModuleCompliance((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 4, 2, 3, 1)).setObjects(("CTRON-LFAP-MIB", "lfapConfGroupV10"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lfapComplianceV10 = lfapComplianceV10.setStatus('deprecated')
if mibBuilder.loadTexts: lfapComplianceV10.setDescription('The compliance statement for the CTRON-LFAP-MIB.')
lfapComplianceV40 = ModuleCompliance((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 4, 2, 4, 1)).setObjects(("CTRON-LFAP-MIB", "lfapConfGroupV40"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lfapComplianceV40 = lfapComplianceV40.setStatus('current')
if mibBuilder.loadTexts: lfapComplianceV40.setDescription('The compliance statement for the CTRON-LFAP-MIB.')
lfapConfGroupV10 = ObjectGroup((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 4, 2, 3)).setObjects(("CTRON-LFAP-MIB", "flowPolicyControl"), ("CTRON-LFAP-MIB", "flowPolicyStatus"), ("CTRON-LFAP-MIB", "flowPolicyActiveServer"), ("CTRON-LFAP-MIB", "flowPolicyServerAddrIndex"), ("CTRON-LFAP-MIB", "flowPolicyServerAddr"), ("CTRON-LFAP-MIB", "flowPolicyConfigPolicy"), ("CTRON-LFAP-MIB", "flowPolicyConfigStatistics"), ("CTRON-LFAP-MIB", "monLfapFARsSent"), ("CTRON-LFAP-MIB", "monLfapFARsReceived"), ("CTRON-LFAP-MIB", "monLfapFAAsSent"), ("CTRON-LFAP-MIB", "monLfapFAAsReceived"), ("CTRON-LFAP-MIB", "monLfapFAUsSent"), ("CTRON-LFAP-MIB", "monLfapFAUsReceived"), ("CTRON-LFAP-MIB", "monLfapFUNsSent"), ("CTRON-LFAP-MIB", "monLfapFUNsReceived"), ("CTRON-LFAP-MIB", "monLfapFUAsSent"), ("CTRON-LFAP-MIB", "monLfapFUAsReceived"), ("CTRON-LFAP-MIB", "monLfapFCRsSent"), ("CTRON-LFAP-MIB", "monLfapFCRsReceived"), ("CTRON-LFAP-MIB", "monLfapFCAsSent"), ("CTRON-LFAP-MIB", "monLfapFCAsReceived"), ("CTRON-LFAP-MIB", "monLfapARsSent"), ("CTRON-LFAP-MIB", "monLfapARsReceived"), ("CTRON-LFAP-MIB", "monLfapARAsSent"), ("CTRON-LFAP-MIB", "monLfapARAsReceived"), ("CTRON-LFAP-MIB", "monLfapFSNsSent"), ("CTRON-LFAP-MIB", "monLfapFSNsReceived"), ("CTRON-LFAP-MIB", "monLfapFSAsSent"), ("CTRON-LFAP-MIB", "monLfapFSAsReceived"), ("CTRON-LFAP-MIB", "monLfapDroppedMessages"), ("CTRON-LFAP-MIB", "monLfapYesRespCnt"), ("CTRON-LFAP-MIB", "monLfapNoRespCnt"), ("CTRON-LFAP-MIB", "monActiveCxnCnt"), ("CTRON-LFAP-MIB", "flowPolicyPollingTimerInterval"), ("CTRON-LFAP-MIB", "flowPolicyPollingBatchSize"), ("CTRON-LFAP-MIB", "flowPolicyPollingBatchInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lfapConfGroupV10 = lfapConfGroupV10.setStatus('deprecated')
if mibBuilder.loadTexts: lfapConfGroupV10.setDescription('A set of managed objects that make up version 1.0 of the CTRON LFAP MIB.')
lfapConfGroupV40 = ObjectGroup((1, 3, 6, 1, 4, 1, 52, 4, 1, 5, 11, 4, 2, 4)).setObjects(("CTRON-LFAP-MIB", "flowPolicyControl"), ("CTRON-LFAP-MIB", "flowPolicyStatus"), ("CTRON-LFAP-MIB", "flowPolicyActiveServer"), ("CTRON-LFAP-MIB", "flowPolicyServerAddrIndex"), ("CTRON-LFAP-MIB", "flowPolicyServerAddr"), ("CTRON-LFAP-MIB", "flowPolicyConfigPolicy"), ("CTRON-LFAP-MIB", "flowPolicyConfigStatistics"), ("CTRON-LFAP-MIB", "monLfapFARsSent"), ("CTRON-LFAP-MIB", "monLfapFARsReceived"), ("CTRON-LFAP-MIB", "monLfapFAAsSent"), ("CTRON-LFAP-MIB", "monLfapFAAsReceived"), ("CTRON-LFAP-MIB", "monLfapFAUsSent"), ("CTRON-LFAP-MIB", "monLfapFAUsReceived"), ("CTRON-LFAP-MIB", "monLfapFUNsSent"), ("CTRON-LFAP-MIB", "monLfapFUNsReceived"), ("CTRON-LFAP-MIB", "monLfapFUAsSent"), ("CTRON-LFAP-MIB", "monLfapFUAsReceived"), ("CTRON-LFAP-MIB", "monLfapFCRsSent"), ("CTRON-LFAP-MIB", "monLfapFCRsReceived"), ("CTRON-LFAP-MIB", "monLfapFCAsSent"), ("CTRON-LFAP-MIB", "monLfapFCAsReceived"), ("CTRON-LFAP-MIB", "monLfapARsSent"), ("CTRON-LFAP-MIB", "monLfapARsReceived"), ("CTRON-LFAP-MIB", "monLfapARAsSent"), ("CTRON-LFAP-MIB", "monLfapARAsReceived"), ("CTRON-LFAP-MIB", "monLfapFSNsSent"), ("CTRON-LFAP-MIB", "monLfapFSNsReceived"), ("CTRON-LFAP-MIB", "monLfapFSAsSent"), ("CTRON-LFAP-MIB", "monLfapFSAsReceived"), ("CTRON-LFAP-MIB", "monLfapDroppedMessages"), ("CTRON-LFAP-MIB", "monLfapVRsSent"), ("CTRON-LFAP-MIB", "monLfapVRAsReceived"), ("CTRON-LFAP-MIB", "monLfapConnSuccess"), ("CTRON-LFAP-MIB", "monLfapConnFailure"), ("CTRON-LFAP-MIB", "monLfapBytesSent"), ("CTRON-LFAP-MIB", "monLfapBytesReceived"), ("CTRON-LFAP-MIB", "monLfapMsgsSent"), ("CTRON-LFAP-MIB", "monLfapMsgsReceived"), ("CTRON-LFAP-MIB", "monLfapMsgsReceivedError"), ("CTRON-LFAP-MIB", "monLfapMsgsSendQueue"), ("CTRON-LFAP-MIB", "monLfapMsgsSendQueuePeak"), ("CTRON-LFAP-MIB", "monLfapMsgsReceiveQueue"), ("CTRON-LFAP-MIB", "monLfapDroppedMessagesConnected"), ("CTRON-LFAP-MIB", "monLfapDroppedFARs"), ("CTRON-LFAP-MIB", "monLfapDroppedFUNIs"), ("CTRON-LFAP-MIB", "monLfapDroppedFUNs"), ("CTRON-LFAP-MIB", "monLfapDroppedARs"), ("CTRON-LFAP-MIB", "monLfapDroppedARAs"), ("CTRON-LFAP-MIB", "monLfapDroppedVRs"), ("CTRON-LFAP-MIB", "monLfapYesRespCnt"), ("CTRON-LFAP-MIB", "monLfapNoRespCnt"), ("CTRON-LFAP-MIB", "monLfapFlowSetups"), ("CTRON-LFAP-MIB", "monLfapFlowTeardowns"), ("CTRON-LFAP-MIB", "monLfapFlowActivePeak"), ("CTRON-LFAP-MIB", "monActiveCxnCnt"), ("CTRON-LFAP-MIB", "flowPolicyPollingTimerInterval"), ("CTRON-LFAP-MIB", "flowPolicyPollingBatchSize"), ("CTRON-LFAP-MIB", "flowPolicyPollingBatchInterval"), ("CTRON-LFAP-MIB", "flowPolicyPollingBatchUpdateInterval"), ("CTRON-LFAP-MIB", "flowPolicyPollingLostContactInterval"), ("CTRON-LFAP-MIB", "flowPolicyPollingServerRetryInterval"), ("CTRON-LFAP-MIB", "flowPolicyPollingSendQueueMaxSize"), ("CTRON-LFAP-MIB", "flowPolicyPollingTaskPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lfapConfGroupV40 = lfapConfGroupV40.setStatus('current')
if mibBuilder.loadTexts: lfapConfGroupV40.setDescription('A set of managed objects that make up version 4.0 of the CTRON LFAP MIB.')
mibBuilder.exportSymbols("CTRON-LFAP-MIB", monLfapVRsSent=monLfapVRsSent, flowPolicyControl=flowPolicyControl, monLfapMsgsSendQueuePeak=monLfapMsgsSendQueuePeak, monLfapFUAsReceived=monLfapFUAsReceived, monLfapMsgsSendQueue=monLfapMsgsSendQueue, flowPolicy=flowPolicy, monLfapDroppedVRs=monLfapDroppedVRs, monLfapDroppedFARs=monLfapDroppedFARs, monLfapConnFailure=monLfapConnFailure, flowPolicyServerAddr=flowPolicyServerAddr, monLfap=monLfap, monLfapFAAsReceived=monLfapFAAsReceived, monLfapBytesSent=monLfapBytesSent, flowPolicyPollingBatchSize=flowPolicyPollingBatchSize, ctLFAP=ctLFAP, flowPolicyPollingLostContactInterval=flowPolicyPollingLostContactInterval, monLfapDroppedARs=monLfapDroppedARs, lfapCompliances=lfapCompliances, flowPolicyServerAddrIndex=flowPolicyServerAddrIndex, flowPolicyPolling=flowPolicyPolling, monLfapDroppedARAs=monLfapDroppedARAs, monLfapFlowSetups=monLfapFlowSetups, monLfapFARsSent=monLfapFARsSent, monLfapDroppedFUNs=monLfapDroppedFUNs, lfapComplianceV40=lfapComplianceV40, flowPolicyPollingServerRetryInterval=flowPolicyPollingServerRetryInterval, monLfapFSNsSent=monLfapFSNsSent, monLfapFSAsSent=monLfapFSAsSent, monLfapVRAsReceived=monLfapVRAsReceived, monLfapFARsReceived=monLfapFARsReceived, monLfapARAsSent=monLfapARAsSent, flowPolicyConfigPolicy=flowPolicyConfigPolicy, monLfapFUAsSent=monLfapFUAsSent, monLfapARAsReceived=monLfapARAsReceived, flowPolicyConfigStatistics=flowPolicyConfigStatistics, flowPolicyPollingTimerInterval=flowPolicyPollingTimerInterval, monLfapFAUsReceived=monLfapFAUsReceived, monLfapFAAsSent=monLfapFAAsSent, flowPolicyStatus=flowPolicyStatus, flowPolicyPollingBatchInterval=flowPolicyPollingBatchInterval, monLfapFlowActivePeak=monLfapFlowActivePeak, monLfapFAUsSent=monLfapFAUsSent, monLfapMsgsReceiveQueue=monLfapMsgsReceiveQueue, monLfapFSAsReceived=monLfapFSAsReceived, monLfapFCAsSent=monLfapFCAsSent, flowPolicyActiveServer=flowPolicyActiveServer, monLfapFCAsReceived=monLfapFCAsReceived, lfapGroups=lfapGroups, monLfapFlowTeardowns=monLfapFlowTeardowns, monLfapNoRespCnt=monLfapNoRespCnt, lfapConformance=lfapConformance, flowPolicyServerAddrTable=flowPolicyServerAddrTable, monCxnCounts=monCxnCounts, flowPolicyConfig=flowPolicyConfig, monLfapMsgsReceivedError=monLfapMsgsReceivedError, monLfapFCRsReceived=monLfapFCRsReceived, monLfapDroppedMessages=monLfapDroppedMessages, flowPolicyPollingBatchUpdateInterval=flowPolicyPollingBatchUpdateInterval, flowPolicyPollingTaskPriority=flowPolicyPollingTaskPriority, monLfapFUNsSent=monLfapFUNsSent, flowPolicyServerAddrEntry=flowPolicyServerAddrEntry, monLfapMsgsSent=monLfapMsgsSent, monLfapFCRsSent=monLfapFCRsSent, monLfapDroppedMessagesConnected=monLfapDroppedMessagesConnected, monLfapConnSuccess=monLfapConnSuccess, monLfapBytesReceived=monLfapBytesReceived, monLfapFUNsReceived=monLfapFUNsReceived, monLfapCounts=monLfapCounts, monLfapMsgsReceived=monLfapMsgsReceived, lfapConfGroupV10=lfapConfGroupV10, monActiveCxnCnt=monActiveCxnCnt, monLfapARsSent=monLfapARsSent, lfapComplianceV10=lfapComplianceV10, flowPolicyPollingSendQueueMaxSize=flowPolicyPollingSendQueueMaxSize, PYSNMP_MODULE_ID=ctLFAP, monLfapYesRespCnt=monLfapYesRespCnt, monLfapARsReceived=monLfapARsReceived, monLfapFSNsReceived=monLfapFSNsReceived, lfapConfGroupV40=lfapConfGroupV40, monLfapDroppedFUNIs=monLfapDroppedFUNIs)
