#
# PySNMP MIB module WG102-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WG102-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:36:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, iso, Counter64, ObjectIdentity, TimeTicks, MibIdentifier, enterprises, Gauge32, Unsigned32, Bits, Integer32, NotificationType, NotificationType, IpAddress, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "iso", "Counter64", "ObjectIdentity", "TimeTicks", "MibIdentifier", "enterprises", "Gauge32", "Unsigned32", "Bits", "Integer32", "NotificationType", "NotificationType", "IpAddress", "ModuleIdentity")
PhysAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "DisplayString", "TextualConvention")
netgear = MibIdentifier((1, 3, 6, 1, 4, 1, 4526))
wirelessProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4))
wg102 = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3))
version = ModuleIdentity((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000))
if mibBuilder.loadTexts: version.setLastUpdated('200409081800Z')
if mibBuilder.loadTexts: version.setOrganization('NETGEAR Inc.')
if mibBuilder.loadTexts: version.setContactInfo('4500 Great America Parkway Santa Clara, California 95054 Phone: (408) 907-8000 Fax: (408) 907-8097 Web Site: http://www.netgear.com ')
if mibBuilder.loadTexts: version.setDescription('The MIB module for 802.11g ProSafe Wireless Access Point entities.')
wirelessAPSystemGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 1))
wirelessAPManageGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 2))
wirelessAP24GGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3))
apMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 1, 1), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: apMacAddress.setDescription("Access Point MAC address, It will be like '00c002003009'")
apFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apFirmwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: apFirmwareVersion.setDescription('')
apIPaddress = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIPaddress.setStatus('mandatory')
if mibBuilder.loadTexts: apIPaddress.setDescription('')
apIPsubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apIPsubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: apIPsubnetMask.setDescription('')
apGateway = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apGateway.setStatus('mandatory')
if mibBuilder.loadTexts: apGateway.setDescription('')
apDNSServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apDNSServerIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: apDNSServerIPAddress.setDescription('')
apDHCPMode = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("dhcp-Client", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apDHCPMode.setStatus('mandatory')
if mibBuilder.loadTexts: apDHCPMode.setDescription('')
apSystemName = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSystemName.setStatus('mandatory')
if mibBuilder.loadTexts: apSystemName.setDescription('Wireless Access Point Name')
apTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTimeZone.setStatus('mandatory')
if mibBuilder.loadTexts: apTimeZone.setDescription(' Input the numeric 0 UK,GreenWich,Casablanca,Monrovia (GMT), -12 Eniwetok,Kwajalein (GMT-12:00), -11 Midway I., Samoa (GMT-11:00), -10 Hawaii (GMT-10:00), -9.5 Marqesas Is. (GMT-09:30), -9 Alaska (GMT-09:00), -8.5 Pitciarn Is. (GMT-08:30), -8 Pacific Time ..US and Canada (GMT-08:00), -7 MountainTime(USA),Arizona (GMT-07:00), -6 CentralTime(USA),Mexico City,Tequciqalpa (GMT-06:00), -5 EasternTime(USA),Bogota,Lima,Quito,Indiana East (GMT-05:00), -4 Caracas,La Paz (GMT-04:00), -3.5 Newfoundland (GMT-03:30), -3 Brasilia,Beunos Aires,Georgetown (GMT-03:00), -2 Mid-Atlantic (GMT-02:00), -1 Azores,Cape Verde Is. (GMT-01:00), 1 Europe (GMT+01:00), 2 Egypt,Finland,Romania,Turkey,Greece,Israel,Jordan(GMT+02:00), 3 Iraq, Syria,Russia (GMT+03:00), 3.5 Iran (GMT+03:30), 4 Armenia, Azerbaijan (GMT+04:00), 4.5 Afghanistan (GMT+04:30), 5 Russia,Pakistan (GMT+05:00), 5.5 India (GMT+05:30), 6 Bangladesh,Russia (GMT+06:00), 6.5 Burma (GMT+06:30), 7 Russia,Thailand, Combodia, Laos (GMT+07:00), 8 Russia,China,Mongolia,Indonesia,Philippines,Taiwan,WA (GMT+08:00), 9 Russia,Japan,Korea (GMT+09:00), 9.5 Adelaide,Darwin (GMT+09:30), 10 Eastern Standard(Aust),Russia,Gaum,Papua New Guinea (GMT+10:00) ')
apDaylightSaving = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apDaylightSaving.setStatus('mandatory')
if mibBuilder.loadTexts: apDaylightSaving.setDescription('')
apCountryDomain = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(410, 36, 124, 208, 40, 246, 250, 276, 372, 380, 392, 484, 528, 554, 578, 630, 340, 724, 752, 756, 826, 840))).clone(namedValues=NamedValues(("asia", 410), ("australia", 36), ("canada", 124), ("denmark", 208), ("europe", 40), ("finland", 246), ("france", 250), ("germany", 276), ("ireland", 372), ("italy", 380), ("japan", 392), ("mexico", 484), ("netherlands", 528), ("newZealand", 554), ("norway", 578), ("puertoRico", 630), ("southAmerica", 340), ("spain", 724), ("sweden", 752), ("switzerland", 756), ("unitedKingdom", 826), ("unitedStates", 840)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apCountryDomain.setStatus('mandatory')
if mibBuilder.loadTexts: apCountryDomain.setDescription('Wireless Access Point Country Domain')
apDateTime = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apDateTime.setStatus('mandatory')
if mibBuilder.loadTexts: apDateTime.setDescription('')
apConnectedStation = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 1, 19))
apConnectedStationTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 1, 19, 1), )
if mibBuilder.loadTexts: apConnectedStationTable.setStatus('mandatory')
if mibBuilder.loadTexts: apConnectedStationTable.setDescription('Wireless AP Connected Station Table Object')
apConnectedStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 1, 19, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: apConnectedStationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: apConnectedStationEntry.setDescription('An entry containing information for Wireless AP Connected Station Table')
apConnectedStationMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 1, 19, 1, 1, 1), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apConnectedStationMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: apConnectedStationMacAddr.setDescription('Wireless Connected Station Mac Address')
apConnectedStationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 1, 19, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("dot1xAuthenticated", 0), ("macAuthenticated", 1), ("authenticating", 2), ("allow", 3), ("blocked", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apConnectedStationStatus.setStatus('mandatory')
if mibBuilder.loadTexts: apConnectedStationStatus.setDescription('Wireless Connected Station Status')
apRebootNow = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-reboot", 0), ("reboot", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRebootNow.setStatus('mandatory')
if mibBuilder.loadTexts: apRebootNow.setDescription('Setting this object to true(1) causes the device to reset. Reading this object always returns false(2).')
apResetToFactoryDefault = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-reset", 0), ("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apResetToFactoryDefault.setStatus('mandatory')
if mibBuilder.loadTexts: apResetToFactoryDefault.setDescription('Setting this object to true(1) causes the device to reset to factory default value. Reading this object always returns false(2).')
apTrapReceiveIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 2, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apTrapReceiveIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: apTrapReceiveIpAddress.setDescription(' ')
apSNMPEnable = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSNMPEnable.setStatus('mandatory')
if mibBuilder.loadTexts: apSNMPEnable.setDescription(' ')
apSNMPReadCommunity = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSNMPReadCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: apSNMPReadCommunity.setDescription(' ')
apSNMPWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSNMPWriteCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: apSNMPWriteCommunity.setDescription(' ')
apAccessControl = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("loacl", 1), ("radiusBased", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAccessControl.setStatus('mandatory')
if mibBuilder.loadTexts: apAccessControl.setDescription('Wireless Access Point Control')
apAccessControlList = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 2, 13))
apAccessControlListTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 2, 13, 1), )
if mibBuilder.loadTexts: apAccessControlListTable.setStatus('mandatory')
if mibBuilder.loadTexts: apAccessControlListTable.setDescription('Wireless Access Point Control List Table Object')
apAccessControlListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 2, 13, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: apAccessControlListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: apAccessControlListEntry.setDescription('An entry containing information for Wireless Access Point Control List Table Object')
apAccessControlListMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 2, 13, 1, 1, 1), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apAccessControlListMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: apAccessControlListMacAddr.setDescription('Wireless Access Point Control List Mac Address')
apCtlOperate = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 2, 14))
apAddACLMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 2, 14, 1), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apAddACLMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: apAddACLMacAddr.setDescription("The added entry's Physical Address, Reading this object always return '000000000000'")
apDelACLMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 2, 14, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apDelACLMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: apDelACLMacAddr.setDescription("The deleted entry's Physical Address, Reading this object always return '000000000000'")
apSyslog = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSyslog.setStatus('mandatory')
if mibBuilder.loadTexts: apSyslog.setDescription('')
apSyslogPort = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 2, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSyslogPort.setStatus('mandatory')
if mibBuilder.loadTexts: apSyslogPort.setDescription('Syslog Port')
apSyslogServer = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 2, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSyslogServer.setStatus('mandatory')
if mibBuilder.loadTexts: apSyslogServer.setDescription('')
apWirelessSettingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1))
apWirelessSecurityGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2))
apWirelessMode = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("b-and-g", 1), ("b", 2), ("g", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWirelessMode.setStatus('mandatory')
if mibBuilder.loadTexts: apWirelessMode.setDescription('')
apOperateMode = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4))).clone(namedValues=NamedValues(("wirelessAccessPoint", 0), ("pointToPoint", 2), ("pointToMultiPoint", 3), ("repeaterAccessPoint", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apOperateMode.setStatus('mandatory')
if mibBuilder.loadTexts: apOperateMode.setDescription('AP Operation Mode')
apBridgeWlanClientAsoc = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apBridgeWlanClientAsoc.setStatus('mandatory')
if mibBuilder.loadTexts: apBridgeWlanClientAsoc.setDescription('')
apSSID = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSSID.setStatus('mandatory')
if mibBuilder.loadTexts: apSSID.setDescription('Wireless Access Point SSID This object value should be the same as IEEE 802.11 MIB dot11DesiredSSID')
apChannelNo = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apChannelNo.setStatus('mandatory')
if mibBuilder.loadTexts: apChannelNo.setDescription('Wireless Access Point Channel No Auto(0) default')
apRemoteMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 6), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRemoteMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: apRemoteMacAddress.setDescription('The Destination Address When one operation mode is selected which the remote address necessary.')
apChildMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 7), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apChildMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: apChildMacAddress.setDescription('')
apBroadcastSSID = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apBroadcastSSID.setStatus('mandatory')
if mibBuilder.loadTexts: apBroadcastSSID.setDescription('Enabled or disabled Wireless Access Point Broadcast Wireless Network Name SSID')
apWirelessSeparation = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWirelessSeparation.setStatus('mandatory')
if mibBuilder.loadTexts: apWirelessSeparation.setDescription('')
apFragmentationLength = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 2346))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apFragmentationLength.setStatus('mandatory')
if mibBuilder.loadTexts: apFragmentationLength.setDescription('')
apBeaconInterval = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apBeaconInterval.setStatus('mandatory')
if mibBuilder.loadTexts: apBeaconInterval.setDescription('')
apRTSThreshold = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 2346))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apRTSThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: apRTSThreshold.setDescription('')
apPreambleType = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("long", 0), ("auto", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apPreambleType.setStatus('mandatory')
if mibBuilder.loadTexts: apPreambleType.setDescription('')
apOutputPowerLevel = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("full", 0), ("half", 1), ("quarter", 2), ("eighth", 3), ("minimum", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apOutputPowerLevel.setStatus('mandatory')
if mibBuilder.loadTexts: apOutputPowerLevel.setDescription('')
apDTIM = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apDTIM.setStatus('mandatory')
if mibBuilder.loadTexts: apDTIM.setDescription('')
apSuperG = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSuperG.setStatus('mandatory')
if mibBuilder.loadTexts: apSuperG.setDescription('')
apHTTPRedirect = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHTTPRedirect.setStatus('mandatory')
if mibBuilder.loadTexts: apHTTPRedirect.setDescription('')
apHTTPRedirectURL = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apHTTPRedirectURL.setStatus('mandatory')
if mibBuilder.loadTexts: apHTTPRedirectURL.setDescription('')
apDataRate = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("auto-negotiate", 0), ("rate-1Mbps", 1), ("rate-2Mbps", 2), ("rate-5dot5Mbps", 3), ("rate-11Mbps", 4), ("rate-6Mbps", 5), ("rate-9Mbps", 6), ("rate-12Mbps", 7), ("rate-18Mbps", 8), ("rate-24Mbps", 9), ("rate-36Mbps", 10), ("rate-48Mbps", 11), ("rate-54Mbps", 12), ("rate-108Mbps", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apDataRate.setStatus('mandatory')
if mibBuilder.loadTexts: apDataRate.setDescription('')
apStatistic = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 20))
apWiredEthernetStat = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 20, 1))
apLanRecvPacket = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 20, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanRecvPacket.setStatus('current')
if mibBuilder.loadTexts: apLanRecvPacket.setDescription('the field indicates the sum of received packets.')
apLanTransPacket = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 20, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanTransPacket.setStatus('current')
if mibBuilder.loadTexts: apLanTransPacket.setDescription('the field indicates the sum of transmitted packets.')
apLanRecvBytes = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 20, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanRecvBytes.setStatus('current')
if mibBuilder.loadTexts: apLanRecvBytes.setDescription('the field indicates the sum of received bytes.')
apLanTransBytes = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 20, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLanTransBytes.setStatus('current')
if mibBuilder.loadTexts: apLanTransBytes.setDescription('the field indicates the sum of transmitted bytes.')
apWirelessStat = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 20, 2))
apWlanRecvUnicastPacket = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 20, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWlanRecvUnicastPacket.setStatus('current')
if mibBuilder.loadTexts: apWlanRecvUnicastPacket.setDescription('the field indicates the sum of received unicast packets.')
apWlanTransUnicastPacket = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 20, 2, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWlanTransUnicastPacket.setStatus('current')
if mibBuilder.loadTexts: apWlanTransUnicastPacket.setDescription('the field indicates the sum of transmitted unicast packets.')
apWlanRecvBroadcastPsacket = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 20, 2, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWlanRecvBroadcastPsacket.setStatus('current')
if mibBuilder.loadTexts: apWlanRecvBroadcastPsacket.setDescription('the field indicates the sum of received broadcast packets.')
apWlanTransBroadcastPacket = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 20, 2, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWlanTransBroadcastPacket.setStatus('current')
if mibBuilder.loadTexts: apWlanTransBroadcastPacket.setDescription('the field indicates the sum of transmitted broadcast packets.')
apWlanRecvMulticastPacket = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 20, 2, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWlanRecvMulticastPacket.setStatus('current')
if mibBuilder.loadTexts: apWlanRecvMulticastPacket.setDescription('the field indicates the sum of received multicast packets.')
apWlanTransMulticastPacket = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 20, 2, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWlanTransMulticastPacket.setStatus('current')
if mibBuilder.loadTexts: apWlanTransMulticastPacket.setDescription('the field indicates the sum of transmitted multicast packets.')
apWlanRecvPacket = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 20, 2, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWlanRecvPacket.setStatus('current')
if mibBuilder.loadTexts: apWlanRecvPacket.setDescription('the field indicates the sum of received packets.')
apWlanTransPacket = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 20, 2, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWlanTransPacket.setStatus('current')
if mibBuilder.loadTexts: apWlanTransPacket.setDescription('the field indicates the sum of transmitted packets.')
apWlanRecvBytes = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 20, 2, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWlanRecvBytes.setStatus('current')
if mibBuilder.loadTexts: apWlanRecvBytes.setDescription('the field indicates the sum of received bytes.')
apWlanTransBytes = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 20, 2, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apWlanTransBytes.setStatus('current')
if mibBuilder.loadTexts: apWlanTransBytes.setDescription('the field indicates the sum of transmitted bytes.')
apPTMPallowList = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 27))
mac1 = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 27, 1), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac1.setStatus('mandatory')
if mibBuilder.loadTexts: mac1.setDescription('')
mac2 = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 27, 2), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac2.setStatus('mandatory')
if mibBuilder.loadTexts: mac2.setDescription('')
mac3 = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 27, 3), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac3.setStatus('mandatory')
if mibBuilder.loadTexts: mac3.setDescription('')
mac4 = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 1, 27, 4), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mac4.setStatus('mandatory')
if mibBuilder.loadTexts: mac4.setDescription('')
apSecuritySystem = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("wep", 1), ("wpa-psk", 2), ("wpa-802dot1x", 3), ("dot1x", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSecuritySystem.setStatus('mandatory')
if mibBuilder.loadTexts: apSecuritySystem.setDescription('')
ap802dot1xWEPKeySize = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("bit64", 1), ("bit128", 2), ("bit152", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ap802dot1xWEPKeySize.setStatus('mandatory')
if mibBuilder.loadTexts: ap802dot1xWEPKeySize.setDescription('')
apWEPMode = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 6, 2, 3, 7))).clone(namedValues=NamedValues(("open-64WEP-MODE", 0), ("open-128WEP-MODE", 1), ("open-152WEP-MODE", 6), ("share-64WEP-MODE", 2), ("share-128WEP-MODE", 3), ("share-152WEP-MODE", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWEPMode.setStatus('mandatory')
if mibBuilder.loadTexts: apWEPMode.setDescription('')
apWEPKeysSet = MibIdentifier((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 4))
apKeys24GSetTable = MibTable((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 4, 1), )
if mibBuilder.loadTexts: apKeys24GSetTable.setStatus('mandatory')
if mibBuilder.loadTexts: apKeys24GSetTable.setDescription('')
apKeys24GSetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: apKeys24GSetEntry.setStatus('mandatory')
if mibBuilder.loadTexts: apKeys24GSetEntry.setDescription('')
apKeysSetEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apKeysSetEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: apKeysSetEnabled.setDescription('')
apKeys = MibTableColumn((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 13))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apKeys.setStatus('mandatory')
if mibBuilder.loadTexts: apKeys.setDescription('')
apWPANetworkKey = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWPANetworkKey.setStatus('mandatory')
if mibBuilder.loadTexts: apWPANetworkKey.setDescription('')
apWPAEncryption = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3))).clone(namedValues=NamedValues(("tkip", 0), ("aes-ccmp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWPAEncryption.setStatus('mandatory')
if mibBuilder.loadTexts: apWPAEncryption.setDescription('')
apWPAGroupKeyUpdate = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWPAGroupKeyUpdate.setStatus('mandatory')
if mibBuilder.loadTexts: apWPAGroupKeyUpdate.setDescription('')
apWPAGroupKeyLifetime = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWPAGroupKeyLifetime.setStatus('mandatory')
if mibBuilder.loadTexts: apWPAGroupKeyLifetime.setDescription('')
apWPAMembershipTerminatedGroupKeyUpdate = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWPAMembershipTerminatedGroupKeyUpdate.setStatus('mandatory')
if mibBuilder.loadTexts: apWPAMembershipTerminatedGroupKeyUpdate.setDescription('')
apPrimaryRadiusServer = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apPrimaryRadiusServer.setStatus('mandatory')
if mibBuilder.loadTexts: apPrimaryRadiusServer.setDescription('')
apPrimaryRadiusPort = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apPrimaryRadiusPort.setStatus('mandatory')
if mibBuilder.loadTexts: apPrimaryRadiusPort.setDescription('Radius Port')
apPrimaryRadiusSharedKey = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apPrimaryRadiusSharedKey.setStatus('mandatory')
if mibBuilder.loadTexts: apPrimaryRadiusSharedKey.setDescription('Radius Server Shared Key')
apPrimaryRadiusAccountServer = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apPrimaryRadiusAccountServer.setStatus('mandatory')
if mibBuilder.loadTexts: apPrimaryRadiusAccountServer.setDescription('')
apPrimaryRadiusAccountPort = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apPrimaryRadiusAccountPort.setStatus('mandatory')
if mibBuilder.loadTexts: apPrimaryRadiusAccountPort.setDescription('')
apPrimaryRadiusAccountSharedKey = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apPrimaryRadiusAccountSharedKey.setStatus('mandatory')
if mibBuilder.loadTexts: apPrimaryRadiusAccountSharedKey.setDescription('Radius Server Shared Key')
apSecondaryRadiusServer = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSecondaryRadiusServer.setStatus('mandatory')
if mibBuilder.loadTexts: apSecondaryRadiusServer.setDescription('')
apSecondaryRadiusPort = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSecondaryRadiusPort.setStatus('mandatory')
if mibBuilder.loadTexts: apSecondaryRadiusPort.setDescription('Radius Port')
apSecondaryRadiusSharedKey = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSecondaryRadiusSharedKey.setStatus('mandatory')
if mibBuilder.loadTexts: apSecondaryRadiusSharedKey.setDescription('Radius Server Shared Key')
apSecondaryRadiusAccountServer = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSecondaryRadiusAccountServer.setStatus('mandatory')
if mibBuilder.loadTexts: apSecondaryRadiusAccountServer.setDescription('')
apSecondaryRadiusAccountPort = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSecondaryRadiusAccountPort.setStatus('mandatory')
if mibBuilder.loadTexts: apSecondaryRadiusAccountPort.setDescription('')
apSecondaryRadiusAccountSharedKey = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apSecondaryRadiusAccountSharedKey.setStatus('mandatory')
if mibBuilder.loadTexts: apSecondaryRadiusAccountSharedKey.setDescription('Radius Server Shared Key')
apReauthenticationTime = MibScalar((1, 3, 6, 1, 4, 1, 4526, 4, 3, 1000, 3, 2, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1800, 36000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apReauthenticationTime.setStatus('mandatory')
if mibBuilder.loadTexts: apReauthenticationTime.setDescription('')
mibBuilder.exportSymbols("WG102-MIB", netgear=netgear, mac2=mac2, apResetToFactoryDefault=apResetToFactoryDefault, apWlanRecvUnicastPacket=apWlanRecvUnicastPacket, apConnectedStationStatus=apConnectedStationStatus, apDelACLMacAddr=apDelACLMacAddr, apSNMPEnable=apSNMPEnable, apAccessControl=apAccessControl, apBeaconInterval=apBeaconInterval, apPrimaryRadiusPort=apPrimaryRadiusPort, apPrimaryRadiusServer=apPrimaryRadiusServer, apConnectedStationTable=apConnectedStationTable, apWlanRecvMulticastPacket=apWlanRecvMulticastPacket, apWlanTransBytes=apWlanTransBytes, apFirmwareVersion=apFirmwareVersion, apWirelessSecurityGroup=apWirelessSecurityGroup, apChannelNo=apChannelNo, apKeysSetEnabled=apKeysSetEnabled, apHTTPRedirect=apHTTPRedirect, PYSNMP_MODULE_ID=version, apSyslogPort=apSyslogPort, apSystemName=apSystemName, apCtlOperate=apCtlOperate, apDHCPMode=apDHCPMode, apMacAddress=apMacAddress, apStatistic=apStatistic, apSyslogServer=apSyslogServer, apWPAMembershipTerminatedGroupKeyUpdate=apWPAMembershipTerminatedGroupKeyUpdate, apRemoteMacAddress=apRemoteMacAddress, apSyslog=apSyslog, apPTMPallowList=apPTMPallowList, wirelessProducts=wirelessProducts, mac4=mac4, apAccessControlListMacAddr=apAccessControlListMacAddr, mac1=mac1, apWEPKeysSet=apWEPKeysSet, apSecondaryRadiusAccountServer=apSecondaryRadiusAccountServer, apPrimaryRadiusAccountSharedKey=apPrimaryRadiusAccountSharedKey, mac3=mac3, apSNMPReadCommunity=apSNMPReadCommunity, apWlanTransMulticastPacket=apWlanTransMulticastPacket, apWPAGroupKeyLifetime=apWPAGroupKeyLifetime, wirelessAPSystemGroup=wirelessAPSystemGroup, apBridgeWlanClientAsoc=apBridgeWlanClientAsoc, apSecondaryRadiusAccountPort=apSecondaryRadiusAccountPort, apWiredEthernetStat=apWiredEthernetStat, apTrapReceiveIpAddress=apTrapReceiveIpAddress, apLanTransBytes=apLanTransBytes, apAccessControlList=apAccessControlList, apSecuritySystem=apSecuritySystem, apChildMacAddress=apChildMacAddress, apDateTime=apDateTime, apDNSServerIPAddress=apDNSServerIPAddress, apWPANetworkKey=apWPANetworkKey, apSecondaryRadiusSharedKey=apSecondaryRadiusSharedKey, apDaylightSaving=apDaylightSaving, apOperateMode=apOperateMode, apSecondaryRadiusServer=apSecondaryRadiusServer, apSecondaryRadiusPort=apSecondaryRadiusPort, apWlanRecvBroadcastPsacket=apWlanRecvBroadcastPsacket, apFragmentationLength=apFragmentationLength, apSecondaryRadiusAccountSharedKey=apSecondaryRadiusAccountSharedKey, apAccessControlListTable=apAccessControlListTable, apGateway=apGateway, apWirelessStat=apWirelessStat, apWEPMode=apWEPMode, apConnectedStation=apConnectedStation, apPrimaryRadiusAccountServer=apPrimaryRadiusAccountServer, apIPsubnetMask=apIPsubnetMask, apWlanTransPacket=apWlanTransPacket, apBroadcastSSID=apBroadcastSSID, apSuperG=apSuperG, apReauthenticationTime=apReauthenticationTime, apWirelessMode=apWirelessMode, ap802dot1xWEPKeySize=ap802dot1xWEPKeySize, apWPAGroupKeyUpdate=apWPAGroupKeyUpdate, version=version, apOutputPowerLevel=apOutputPowerLevel, apLanRecvPacket=apLanRecvPacket, apWlanRecvPacket=apWlanRecvPacket, apLanRecvBytes=apLanRecvBytes, wirelessAP24GGroup=wirelessAP24GGroup, apConnectedStationEntry=apConnectedStationEntry, apTimeZone=apTimeZone, apKeys24GSetEntry=apKeys24GSetEntry, apWlanRecvBytes=apWlanRecvBytes, apKeys24GSetTable=apKeys24GSetTable, apRTSThreshold=apRTSThreshold, apIPaddress=apIPaddress, apWirelessSettingGroup=apWirelessSettingGroup, apWPAEncryption=apWPAEncryption, apPrimaryRadiusSharedKey=apPrimaryRadiusSharedKey, apPreambleType=apPreambleType, apWlanTransUnicastPacket=apWlanTransUnicastPacket, apSSID=apSSID, apAccessControlListEntry=apAccessControlListEntry, apSNMPWriteCommunity=apSNMPWriteCommunity, apDTIM=apDTIM, apPrimaryRadiusAccountPort=apPrimaryRadiusAccountPort, apCountryDomain=apCountryDomain, apHTTPRedirectURL=apHTTPRedirectURL, apKeys=apKeys, apWirelessSeparation=apWirelessSeparation, apDataRate=apDataRate, apRebootNow=apRebootNow, apConnectedStationMacAddr=apConnectedStationMacAddr, wirelessAPManageGroup=wirelessAPManageGroup, apLanTransPacket=apLanTransPacket, apWlanTransBroadcastPacket=apWlanTransBroadcastPacket, apAddACLMacAddr=apAddACLMacAddr, wg102=wg102)
