#
# PySNMP MIB module HP-ICF-PROVIDER-BRIDGE (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-PROVIDER-BRIDGE
# Produced by pysmi-0.3.4 at Wed May  1 13:35:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
dot1qVlanStaticEntry, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "dot1qVlanStaticEntry")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, NotificationType, Gauge32, iso, ObjectIdentity, Bits, ModuleIdentity, MibIdentifier, TimeTicks, Integer32, IpAddress, Counter64, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "NotificationType", "Gauge32", "iso", "ObjectIdentity", "Bits", "ModuleIdentity", "MibIdentifier", "TimeTicks", "Integer32", "IpAddress", "Counter64", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hpicfProviderBridge = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 40))
hpicfProviderBridge.setRevisions(('2008-10-01 00:00', '2006-08-15 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfProviderBridge.setRevisionsDescriptions(('Added hpSwitch to imports section.', 'Initial revision.',))
if mibBuilder.loadTexts: hpicfProviderBridge.setLastUpdated('200810010000Z')
if mibBuilder.loadTexts: hpicfProviderBridge.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpicfProviderBridge.setContactInfo('Hewlett-Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpicfProviderBridge.setDescription("This MIB module contains the HP 'version' of the standard Provider Bridge MIB and the proprietary extensions to it.")
hpicfProviderBridgeObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 40, 1))
hpicfProviderBridgeBase = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 40, 1, 1))
hpicfProviderBridgeType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 40, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vlanBridge", 1), ("svlanBridge", 2), ("providerEdgeBridge", 3), ("vlanSvlanBridge", 4))).clone('vlanBridge')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfProviderBridgeType.setStatus('current')
if mibBuilder.loadTexts: hpicfProviderBridgeType.setDescription('hpicfProviderBridgeType controls bridge mode configuration. A device can function in one of the 4 modes defined above. vlanBridge - provider bridge feature disabled mode, all vlans are cvlans. svlanBridge - provider bridge mode with only svlans. providerEdgeBridge - provider bridge mode with cvlans and svlans and mappings between them. vlanSvlanBridge - provider bridge mode with independent cvlans and svlans on the same device. Changing from one mode to another will empty out the current configuration information and reboot the device.')
hpicfProviderBridgeEtherType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 40, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1536, 65535)).clone(34984)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfProviderBridgeEtherType.setStatus('current')
if mibBuilder.loadTexts: hpicfProviderBridgeEtherType.setDescription('Defines the 2-byte ethertype for provider tagged frames. The default is 0x88a8. Changing from one tag-type to another with a given hpicfProviderBridgeType configuration will save current configurations and reboot the device, the new tag-type will take effect subsequently.')
hpicfProviderBridgeVlanTypeTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 40, 1, 1, 3), )
if mibBuilder.loadTexts: hpicfProviderBridgeVlanTypeTable.setStatus('current')
if mibBuilder.loadTexts: hpicfProviderBridgeVlanTypeTable.setDescription('HP proprietaty extension to dot1qVlanStaticTable to classify a vlan as a cvlan or an svlan')
hpicfProviderBridgeVlanTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 40, 1, 1, 3, 1), )
dot1qVlanStaticEntry.registerAugmentions(("HP-ICF-PROVIDER-BRIDGE", "hpicfProviderBridgeVlanTypeEntry"))
hpicfProviderBridgeVlanTypeEntry.setIndexNames(*dot1qVlanStaticEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfProviderBridgeVlanTypeEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfProviderBridgeVlanTypeEntry.setDescription('An entry for HP Specific extension table')
hpicfProviderBridgeVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 40, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cvlan", 1), ("svlan", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfProviderBridgeVlanType.setStatus('current')
if mibBuilder.loadTexts: hpicfProviderBridgeVlanType.setDescription('Indicates the vlantype.')
hpicfProviderBridgePortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 40, 1, 1, 4), )
if mibBuilder.loadTexts: hpicfProviderBridgePortTable.setStatus('current')
if mibBuilder.loadTexts: hpicfProviderBridgePortTable.setDescription('This specifies the designated type of an externally accessible port on a Provider Bridge.')
hpicfProviderBridgePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 40, 1, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpicfProviderBridgePortEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfProviderBridgePortEntry.setDescription('An entry that specifies the designated type of an externally accessible port on a Provider Bridge.')
hpicfProviderBridgePortType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 40, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("customer-edge", 1), ("customer-network", 2), ("provider-network", 3))).clone('customer-edge')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfProviderBridgePortType.setReference('IEEE 802.1ad Sec 3')
if mibBuilder.loadTexts: hpicfProviderBridgePortType.setStatus('current')
if mibBuilder.loadTexts: hpicfProviderBridgePortType.setDescription('The type of an externally accessible port on a Provider Bridge. A customer-edge port is a C-VLAN component Port on a Provider Edge Bridge that is connected to customer owned equipment and receives and transmits frames for a single customer. Designating a port as a Customer Edge Port implies Provider Edge Bridge functionality and, specifically, the existence of a C-VLAN component associated with that port. This C-VLAN component is uniquely identified within the Bridge by the port number of the associated Customer Edge Port. A customer-network port is an S-VLAN component Port on a Provider Bridge or within a Provider Edge Bridge that receives and transmits frame for a single customer. A provider-network port is an S-VLAN component Port on a Provider Bridge that can transmit and receive frames for multiple customers.')
hpicfProviderBridgeConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 40, 2))
hpicfProviderBridgeGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 40, 2, 1))
hpicfProviderBridgeBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 40, 2, 1, 1)).setObjects(("HP-ICF-PROVIDER-BRIDGE", "hpicfProviderBridgeType"), ("HP-ICF-PROVIDER-BRIDGE", "hpicfProviderBridgeEtherType"), ("HP-ICF-PROVIDER-BRIDGE", "hpicfProviderBridgePortType"), ("HP-ICF-PROVIDER-BRIDGE", "hpicfProviderBridgeVlanType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfProviderBridgeBaseGroup = hpicfProviderBridgeBaseGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfProviderBridgeBaseGroup.setDescription('Basic Provider Bridge configuration information.')
hpicfProviderBridgeCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 40, 2, 2))
hpicfProviderBridgeCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 40, 2, 2, 1)).setObjects(("HP-ICF-PROVIDER-BRIDGE", "hpicfProviderBridgeBaseGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfProviderBridgeCompliance = hpicfProviderBridgeCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfProviderBridgeCompliance.setDescription('The compliance statement for HP Switches with IEEE standard Provider Bridge MIBs.')
mibBuilder.exportSymbols("HP-ICF-PROVIDER-BRIDGE", hpicfProviderBridgeVlanTypeTable=hpicfProviderBridgeVlanTypeTable, hpicfProviderBridgeBase=hpicfProviderBridgeBase, hpicfProviderBridgePortEntry=hpicfProviderBridgePortEntry, hpicfProviderBridgeVlanTypeEntry=hpicfProviderBridgeVlanTypeEntry, hpicfProviderBridgePortTable=hpicfProviderBridgePortTable, hpicfProviderBridgeGroups=hpicfProviderBridgeGroups, hpicfProviderBridgeVlanType=hpicfProviderBridgeVlanType, hpicfProviderBridgeCompliances=hpicfProviderBridgeCompliances, hpicfProviderBridgeCompliance=hpicfProviderBridgeCompliance, PYSNMP_MODULE_ID=hpicfProviderBridge, hpicfProviderBridgeType=hpicfProviderBridgeType, hpicfProviderBridgePortType=hpicfProviderBridgePortType, hpicfProviderBridge=hpicfProviderBridge, hpicfProviderBridgeObjects=hpicfProviderBridgeObjects, hpicfProviderBridgeEtherType=hpicfProviderBridgeEtherType, hpicfProviderBridgeConformance=hpicfProviderBridgeConformance, hpicfProviderBridgeBaseGroup=hpicfProviderBridgeBaseGroup)
