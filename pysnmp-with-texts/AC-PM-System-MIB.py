#
# PySNMP MIB module AC-PM-System-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AC-PM-System-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:09:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
acProducts, acRegistrations, acPerformance, acGeneric, acBoardMibs, audioCodes = mibBuilder.importSymbols("AUDIOCODES-TYPES-MIB", "acProducts", "acRegistrations", "acPerformance", "acGeneric", "acBoardMibs", "audioCodes")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, Unsigned32, Counter64, Bits, NotificationType, Gauge32, ModuleIdentity, enterprises, iso, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Counter32, Integer32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Unsigned32", "Counter64", "Bits", "NotificationType", "Gauge32", "ModuleIdentity", "enterprises", "iso", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Counter32", "Integer32", "TimeTicks")
TAddress, TextualConvention, DisplayString, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TAddress", "TextualConvention", "DisplayString", "DateAndTime")
acPMSystem = ModuleIdentity((1, 3, 6, 1, 4, 1, 5003, 10, 11))
if mibBuilder.loadTexts: acPMSystem.setLastUpdated('200905041226Z')
if mibBuilder.loadTexts: acPMSystem.setOrganization('AudioCodes Ltd')
if mibBuilder.loadTexts: acPMSystem.setContactInfo('Postal: Support AudioCodes LTD 1 Hayarden Street Airport City Lod, ISRAEL 70151 Tel: 972-3-9764000 Fax: 972-3-9764040 Email: support@audiocodes.com Web: www.audiocodes.com')
if mibBuilder.loadTexts: acPMSystem.setDescription("The AC-PM-System MIB offers performance monitoring For the System related elements in Audiocodes' devices. The Configuration sub-tree is for configuring the interval Period length for the entire AC-PM-System MIB, and the different tables' thresholds. The Data sub-tree presents the tables of monitored elements. Note - for the entire MIB the value (-1) means the value Asked for is either not supported or currently not relevant (this is for when values asked for are for intervals not yet recorded.")
acPMSystemConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1))
acPMSystemConfigurationPeriodLength = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 894780))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMSystemConfigurationPeriodLength.setStatus('current')
if mibBuilder.loadTexts: acPMSystemConfigurationPeriodLength.setDescription('Length of monitoring intervals for entire MIB.Time is in minutes.')
acPMSystemConfigurationResetTotalCounters = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("resetCountersDone", 1), ("resetTotalCounters", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMSystemConfigurationResetTotalCounters.setStatus('current')
if mibBuilder.loadTexts: acPMSystemConfigurationResetTotalCounters.setDescription('Total-Counters Reset. To reset the total counters, set the value of this object to resetTotalCounters(2).')
acPMNetConnectionAttributes = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 31))
acPMNetConnectionAttributesStateHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 31, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMNetConnectionAttributesStateHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMNetConnectionAttributesStateHighThreshold.setDescription('High threshold.')
acPMNetConnectionAttributesStateLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 31, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMNetConnectionAttributesStateLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMNetConnectionAttributesStateLowThreshold.setDescription('Low threshold.')
acPMNetAttributes = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 32))
acPMNetAttributesUnknownUDPPortCounterHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 32, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMNetAttributesUnknownUDPPortCounterHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMNetAttributesUnknownUDPPortCounterHighThreshold.setDescription('High threshold.')
acPMNetAttributesUnknownUDPPortCounterLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 32, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMNetAttributesUnknownUDPPortCounterLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMNetAttributesUnknownUDPPortCounterLowThreshold.setDescription('Low threshold.')
acPMNetUtilsAttributes = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 33))
acPMNetUtilsAttributesKBytesHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 33, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMNetUtilsAttributesKBytesHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMNetUtilsAttributesKBytesHighThreshold.setDescription('High threshold.')
acPMNetUtilsAttributesKBytesLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 33, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMNetUtilsAttributesKBytesLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMNetUtilsAttributesKBytesLowThreshold.setDescription('Low threshold.')
acPMNetUtilsAttributesPacketsHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 33, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMNetUtilsAttributesPacketsHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMNetUtilsAttributesPacketsHighThreshold.setDescription('High threshold.')
acPMNetUtilsAttributesPacketsLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 33, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMNetUtilsAttributesPacketsLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMNetUtilsAttributesPacketsLowThreshold.setDescription('Low threshold.')
acPMNetUtilsAttributesDiscardedPacketsHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 33, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMNetUtilsAttributesDiscardedPacketsHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMNetUtilsAttributesDiscardedPacketsHighThreshold.setDescription('High threshold.')
acPMNetUtilsAttributesDiscardedPacketsLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 33, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMNetUtilsAttributesDiscardedPacketsLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMNetUtilsAttributesDiscardedPacketsLowThreshold.setDescription('Low threshold.')
acPMNetworkAttributes = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 34))
acPMNetworkAttributesDhcpResponseTimeHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 34, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMNetworkAttributesDhcpResponseTimeHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMNetworkAttributesDhcpResponseTimeHighThreshold.setDescription('High threshold.')
acPMNetworkAttributesDhcpResponseTimeLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 34, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMNetworkAttributesDhcpResponseTimeLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMNetworkAttributesDhcpResponseTimeLowThreshold.setDescription('Low threshold.')
acPMCongestionAttributes = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 35))
acPMCongestionAttributesHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 35, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMCongestionAttributesHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMCongestionAttributesHighThreshold.setDescription('High threshold.')
acPMCongestionAttributesLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 35, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMCongestionAttributesLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMCongestionAttributesLowThreshold.setDescription('Low threshold.')
acPMNFSAttributes = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 36))
acPMNFSAttributesRoundTripTimeMsHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 36, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMNFSAttributesRoundTripTimeMsHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMNFSAttributesRoundTripTimeMsHighThreshold.setDescription('High threshold.')
acPMNFSAttributesRoundTripTimeMsLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 36, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMNFSAttributesRoundTripTimeMsLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMNFSAttributesRoundTripTimeMsLowThreshold.setDescription('Low threshold.')
acPMNFSAttributesRetriesHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 36, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMNFSAttributesRetriesHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMNFSAttributesRetriesHighThreshold.setDescription('High threshold.')
acPMNFSAttributesRetriesLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 36, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMNFSAttributesRetriesLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMNFSAttributesRetriesLowThreshold.setDescription('Low threshold.')
acPMNFSAttributesAbortDueToMaxRetriesExceededHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 36, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMNFSAttributesAbortDueToMaxRetriesExceededHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMNFSAttributesAbortDueToMaxRetriesExceededHighThreshold.setDescription('High threshold.')
acPMNFSAttributesAbortDueToMaxRetriesExceededLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 36, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMNFSAttributesAbortDueToMaxRetriesExceededLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMNFSAttributesAbortDueToMaxRetriesExceededLowThreshold.setDescription('Low threshold.')
acPMNFSAttributesDelayedResponsesHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 36, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMNFSAttributesDelayedResponsesHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMNFSAttributesDelayedResponsesHighThreshold.setDescription('High threshold.')
acPMNFSAttributesDelayedResponsesLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 36, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMNFSAttributesDelayedResponsesLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMNFSAttributesDelayedResponsesLowThreshold.setDescription('Low threshold.')
acPMNFSAttributesBytesDroppedOnRecordHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 36, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMNFSAttributesBytesDroppedOnRecordHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMNFSAttributesBytesDroppedOnRecordHighThreshold.setDescription('High threshold.')
acPMNFSAttributesBytesDroppedOnRecordLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 36, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMNFSAttributesBytesDroppedOnRecordLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMNFSAttributesBytesDroppedOnRecordLowThreshold.setDescription('Low threshold.')
acPMMSBGAttributes = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 37))
acPMMSBGAttributesRXGoodOctetsHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 37, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMMSBGAttributesRXGoodOctetsHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMMSBGAttributesRXGoodOctetsHighThreshold.setDescription('High threshold.')
acPMMSBGAttributesRXGoodOctetsLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 37, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMMSBGAttributesRXGoodOctetsLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMMSBGAttributesRXGoodOctetsLowThreshold.setDescription('Low threshold.')
acPMMSBGAttributesRXBadOctetsHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 37, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMMSBGAttributesRXBadOctetsHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMMSBGAttributesRXBadOctetsHighThreshold.setDescription('High threshold.')
acPMMSBGAttributesRXBadOctetsLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 37, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMMSBGAttributesRXBadOctetsLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMMSBGAttributesRXBadOctetsLowThreshold.setDescription('Low threshold.')
acPMMSBGAttributesRXUndersizePacketsHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 37, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMMSBGAttributesRXUndersizePacketsHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMMSBGAttributesRXUndersizePacketsHighThreshold.setDescription('High threshold.')
acPMMSBGAttributesRXUndersizePacketsLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 37, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMMSBGAttributesRXUndersizePacketsLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMMSBGAttributesRXUndersizePacketsLowThreshold.setDescription('Low threshold.')
acPMMSBGAttributesRXOversizePacketsHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 37, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMMSBGAttributesRXOversizePacketsHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMMSBGAttributesRXOversizePacketsHighThreshold.setDescription('High threshold.')
acPMMSBGAttributesRXOversizePacketsLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 37, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMMSBGAttributesRXOversizePacketsLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMMSBGAttributesRXOversizePacketsLowThreshold.setDescription('Low threshold.')
acPMMSBGAttributesRXMacErrorsHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 37, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMMSBGAttributesRXMacErrorsHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMMSBGAttributesRXMacErrorsHighThreshold.setDescription('High threshold.')
acPMMSBGAttributesRXMacErrorsLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 37, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMMSBGAttributesRXMacErrorsLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMMSBGAttributesRXMacErrorsLowThreshold.setDescription('Low threshold.')
acPMMSBGAttributesRXFCSErroredPacketsHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 37, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMMSBGAttributesRXFCSErroredPacketsHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMMSBGAttributesRXFCSErroredPacketsHighThreshold.setDescription('High threshold.')
acPMMSBGAttributesRXFCSErroredPacketsLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 37, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMMSBGAttributesRXFCSErroredPacketsLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMMSBGAttributesRXFCSErroredPacketsLowThreshold.setDescription('Low threshold.')
acPMMSBGAttributesRXDiscardPacketsHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 37, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMMSBGAttributesRXDiscardPacketsHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMMSBGAttributesRXDiscardPacketsHighThreshold.setDescription('High threshold.')
acPMMSBGAttributesRXDiscardPacketsLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 37, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMMSBGAttributesRXDiscardPacketsLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMMSBGAttributesRXDiscardPacketsLowThreshold.setDescription('Low threshold.')
acPMMSBGAttributesTXOctetsHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 37, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMMSBGAttributesTXOctetsHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMMSBGAttributesTXOctetsHighThreshold.setDescription('High threshold.')
acPMMSBGAttributesTXOctetsLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 37, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMMSBGAttributesTXOctetsLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMMSBGAttributesTXOctetsLowThreshold.setDescription('Low threshold.')
acPMMSBGAttributesTXPacketsHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 37, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMMSBGAttributesTXPacketsHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMMSBGAttributesTXPacketsHighThreshold.setDescription('High threshold.')
acPMMSBGAttributesTXPacketsLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 37, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMMSBGAttributesTXPacketsLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMMSBGAttributesTXPacketsLowThreshold.setDescription('Low threshold.')
acPMMSBGAttributesTXCollisionsHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 37, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMMSBGAttributesTXCollisionsHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMMSBGAttributesTXCollisionsHighThreshold.setDescription('High threshold.')
acPMMSBGAttributesTXCollisionsLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 37, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMMSBGAttributesTXCollisionsLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMMSBGAttributesTXCollisionsLowThreshold.setDescription('Low threshold.')
acPMMSBGAttributesTXLatePacketsHighThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 37, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMMSBGAttributesTXLatePacketsHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMMSBGAttributesTXLatePacketsHighThreshold.setDescription('High threshold.')
acPMMSBGAttributesTXLatePacketsLowThreshold = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 1, 37, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acPMMSBGAttributesTXLatePacketsLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMMSBGAttributesTXLatePacketsLowThreshold.setDescription('Low threshold.')
acPMSystemData = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2))
acPMSystemDataAcPMSystemTimeFromStartOfInterval = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSystemDataAcPMSystemTimeFromStartOfInterval.setStatus('current')
if mibBuilder.loadTexts: acPMSystemDataAcPMSystemTimeFromStartOfInterval.setDescription('The time in seconds since the start of the current interval. MIB specific.')
acPMNetConnectionStateTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 21), )
if mibBuilder.loadTexts: acPMNetConnectionStateTable.setStatus('current')
if mibBuilder.loadTexts: acPMNetConnectionStateTable.setDescription('IP connection activity indicator.')
acPMNetConnectionStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 21, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMNetConnectionStateInterval"))
if mibBuilder.loadTexts: acPMNetConnectionStateEntry.setStatus('current')
if mibBuilder.loadTexts: acPMNetConnectionStateEntry.setDescription('')
acPMNetConnectionStateInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 21, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMNetConnectionStateInterval.setStatus('current')
if mibBuilder.loadTexts: acPMNetConnectionStateInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMNetConnectionStateChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 21, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNetConnectionStateChanges.setStatus('current')
if mibBuilder.loadTexts: acPMNetConnectionStateChanges.setDescription('Number of times the state was toggled.')
acPMNetConnectionStateActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 21, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNetConnectionStateActiveTime.setStatus('current')
if mibBuilder.loadTexts: acPMNetConnectionStateActiveTime.setDescription('Percent of interval time for which the conection is active.')
acPMNetUnknownUDPPortCounterTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 22), )
if mibBuilder.loadTexts: acPMNetUnknownUDPPortCounterTable.setStatus('current')
if mibBuilder.loadTexts: acPMNetUnknownUDPPortCounterTable.setDescription('Counts the number of packets discarded due to unknown UDP port, in the reporting interval.')
acPMNetUnknownUDPPortCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 22, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMNetUnknownUDPPortCounterInterval"))
if mibBuilder.loadTexts: acPMNetUnknownUDPPortCounterEntry.setStatus('current')
if mibBuilder.loadTexts: acPMNetUnknownUDPPortCounterEntry.setDescription('')
acPMNetUnknownUDPPortCounterInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 22, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMNetUnknownUDPPortCounterInterval.setStatus('current')
if mibBuilder.loadTexts: acPMNetUnknownUDPPortCounterInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMNetUnknownUDPPortCounterVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 22, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNetUnknownUDPPortCounterVal.setStatus('current')
if mibBuilder.loadTexts: acPMNetUnknownUDPPortCounterVal.setDescription('Value of gauge or counter.')
acPMSystemNetUtils = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 31))
acPMNetUtilKBytesTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 31, 1), )
if mibBuilder.loadTexts: acPMNetUtilKBytesTable.setStatus('current')
if mibBuilder.loadTexts: acPMNetUtilKBytesTable.setDescription('Network interface transmit/receive kilobytes per second (index: 0=transmit, 1=receive)')
acPMNetUtilKBytesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 31, 1, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMNetUtilKBytesDirection"), (0, "AC-PM-System-MIB", "acPMNetUtilKBytesInterval"))
if mibBuilder.loadTexts: acPMNetUtilKBytesEntry.setStatus('current')
if mibBuilder.loadTexts: acPMNetUtilKBytesEntry.setDescription('')
acPMNetUtilKBytesDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 31, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tx", 0), ("rx", 1))))
if mibBuilder.loadTexts: acPMNetUtilKBytesDirection.setStatus('current')
if mibBuilder.loadTexts: acPMNetUtilKBytesDirection.setDescription('Direction of network. 0 - transmit. 1 - receive.')
acPMNetUtilKBytesInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 31, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMNetUtilKBytesInterval.setStatus('current')
if mibBuilder.loadTexts: acPMNetUtilKBytesInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMNetUtilKBytesVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 31, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNetUtilKBytesVal.setStatus('current')
if mibBuilder.loadTexts: acPMNetUtilKBytesVal.setDescription('Value of gauge or counter.')
acPMNetUtilKBytesAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 31, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNetUtilKBytesAverage.setStatus('current')
if mibBuilder.loadTexts: acPMNetUtilKBytesAverage.setDescription('Average value within the period time.')
acPMNetUtilKBytesMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 31, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNetUtilKBytesMax.setStatus('current')
if mibBuilder.loadTexts: acPMNetUtilKBytesMax.setDescription('Maximum value within the period time.')
acPMNetUtilKBytesMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 31, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNetUtilKBytesMin.setStatus('current')
if mibBuilder.loadTexts: acPMNetUtilKBytesMin.setDescription('Minimum value within the period time.')
acPMNetUtilKBytesVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 31, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNetUtilKBytesVolume.setStatus('current')
if mibBuilder.loadTexts: acPMNetUtilKBytesVolume.setDescription('Activity volume.')
acPMNetUtilKBytesTimeBelowLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 31, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNetUtilKBytesTimeBelowLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMNetUtilKBytesTimeBelowLowThreshold.setDescription('Percent of interval time for which gauge is below what was determined as the low threshold.')
acPMNetUtilKBytesTimeBetweenThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 31, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNetUtilKBytesTimeBetweenThresholds.setStatus('current')
if mibBuilder.loadTexts: acPMNetUtilKBytesTimeBetweenThresholds.setDescription('Percent of interval time for which gauge is above what was determined as the high threshold.')
acPMNetUtilKBytesTimeAboveHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 31, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNetUtilKBytesTimeAboveHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMNetUtilKBytesTimeAboveHighThreshold.setDescription('Percent of interval time for which gauge is between what were determined as the low and high thresholds.')
acPMNetUtilKBytesFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 31, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNetUtilKBytesFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMNetUtilKBytesFullDayAverage.setDescription('The average of full 24 hours.')
acPMNetUtilKBytesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 31, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNetUtilKBytesTotal.setStatus('current')
if mibBuilder.loadTexts: acPMNetUtilKBytesTotal.setDescription('Total since last reset.')
acPMNetUtilPacketsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 31, 2), )
if mibBuilder.loadTexts: acPMNetUtilPacketsTable.setStatus('current')
if mibBuilder.loadTexts: acPMNetUtilPacketsTable.setDescription('Network interface transmit/receive packets per second (index: 0=transmit, 1=receive)')
acPMNetUtilPacketsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 31, 2, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMNetUtilPacketsDirection"), (0, "AC-PM-System-MIB", "acPMNetUtilPacketsInterval"))
if mibBuilder.loadTexts: acPMNetUtilPacketsEntry.setStatus('current')
if mibBuilder.loadTexts: acPMNetUtilPacketsEntry.setDescription('')
acPMNetUtilPacketsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 31, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tx", 0), ("rx", 1))))
if mibBuilder.loadTexts: acPMNetUtilPacketsDirection.setStatus('current')
if mibBuilder.loadTexts: acPMNetUtilPacketsDirection.setDescription('Direction of network. 0 - transmit. 1 - receive.')
acPMNetUtilPacketsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 31, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMNetUtilPacketsInterval.setStatus('current')
if mibBuilder.loadTexts: acPMNetUtilPacketsInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMNetUtilPacketsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 31, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNetUtilPacketsVal.setStatus('current')
if mibBuilder.loadTexts: acPMNetUtilPacketsVal.setDescription('Value of gauge or counter.')
acPMNetUtilPacketsAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 31, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNetUtilPacketsAverage.setStatus('current')
if mibBuilder.loadTexts: acPMNetUtilPacketsAverage.setDescription('Average value with in the period time.')
acPMNetUtilPacketsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 31, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNetUtilPacketsMax.setStatus('current')
if mibBuilder.loadTexts: acPMNetUtilPacketsMax.setDescription('Maximum value with in the period time.')
acPMNetUtilPacketsMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 31, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNetUtilPacketsMin.setStatus('current')
if mibBuilder.loadTexts: acPMNetUtilPacketsMin.setDescription('Minimum value with in the period time.')
acPMNetUtilPacketsVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 31, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNetUtilPacketsVolume.setStatus('current')
if mibBuilder.loadTexts: acPMNetUtilPacketsVolume.setDescription('Activity volume.')
acPMNetUtilPacketsTimeBelowLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 31, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNetUtilPacketsTimeBelowLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMNetUtilPacketsTimeBelowLowThreshold.setDescription('Percent of interval time for which gauge is below what was determined as the low threshold.')
acPMNetUtilPacketsTimeBetweenThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 31, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNetUtilPacketsTimeBetweenThresholds.setStatus('current')
if mibBuilder.loadTexts: acPMNetUtilPacketsTimeBetweenThresholds.setDescription('Percent of interval time for which gauge is above what was determined as the high threshold.')
acPMNetUtilPacketsTimeAboveHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 31, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNetUtilPacketsTimeAboveHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMNetUtilPacketsTimeAboveHighThreshold.setDescription('Percent of interval time for which gauge is between what were determined as the low and high thresholds.')
acPMNetUtilPacketsFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 31, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNetUtilPacketsFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMNetUtilPacketsFullDayAverage.setDescription('The average of full 24 hours.')
acPMNetUtilPacketsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 31, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNetUtilPacketsTotal.setStatus('current')
if mibBuilder.loadTexts: acPMNetUtilPacketsTotal.setDescription('Total since last reset.')
acPMNetUtilDiscardedPacketsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 31, 3), )
if mibBuilder.loadTexts: acPMNetUtilDiscardedPacketsTable.setStatus('current')
if mibBuilder.loadTexts: acPMNetUtilDiscardedPacketsTable.setDescription('Counts the number of packets discarded in the reporting interval.')
acPMNetUtilDiscardedPacketsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 31, 3, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMNetUtilDiscardedPacketsInterval"))
if mibBuilder.loadTexts: acPMNetUtilDiscardedPacketsEntry.setStatus('current')
if mibBuilder.loadTexts: acPMNetUtilDiscardedPacketsEntry.setDescription('')
acPMNetUtilDiscardedPacketsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 31, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMNetUtilDiscardedPacketsInterval.setStatus('current')
if mibBuilder.loadTexts: acPMNetUtilDiscardedPacketsInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMNetUtilDiscardedPacketsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 31, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNetUtilDiscardedPacketsVal.setStatus('current')
if mibBuilder.loadTexts: acPMNetUtilDiscardedPacketsVal.setDescription('Value of gauge or counter.')
acPMNetUtilDiscardedPacketsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 31, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNetUtilDiscardedPacketsTotal.setStatus('current')
if mibBuilder.loadTexts: acPMNetUtilDiscardedPacketsTotal.setDescription('Total since last reset.')
acPMSystemNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 41))
acPMDhcpResponseTimeTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 41, 1), )
if mibBuilder.loadTexts: acPMDhcpResponseTimeTable.setStatus('current')
if mibBuilder.loadTexts: acPMDhcpResponseTimeTable.setDescription('DHCP response time, in seconds (from request to response)')
acPMDhcpResponseTimeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 41, 1, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMDhcpResponseTimeInterval"))
if mibBuilder.loadTexts: acPMDhcpResponseTimeEntry.setStatus('current')
if mibBuilder.loadTexts: acPMDhcpResponseTimeEntry.setDescription('')
acPMDhcpResponseTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 41, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMDhcpResponseTimeInterval.setStatus('current')
if mibBuilder.loadTexts: acPMDhcpResponseTimeInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMDhcpResponseTimeVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 41, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMDhcpResponseTimeVal.setStatus('current')
if mibBuilder.loadTexts: acPMDhcpResponseTimeVal.setDescription('Value of gauge or counter.')
acPMDhcpResponseTimeAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 41, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMDhcpResponseTimeAverage.setStatus('current')
if mibBuilder.loadTexts: acPMDhcpResponseTimeAverage.setDescription('Average value with in the period time.')
acPMDhcpResponseTimeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 41, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMDhcpResponseTimeMax.setStatus('current')
if mibBuilder.loadTexts: acPMDhcpResponseTimeMax.setDescription('Maximum value with in the period time.')
acPMDhcpResponseTimeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 41, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMDhcpResponseTimeMin.setStatus('current')
if mibBuilder.loadTexts: acPMDhcpResponseTimeMin.setDescription('Minimum value with in the period time.')
acPMDhcpResponseTimeVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 41, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMDhcpResponseTimeVolume.setStatus('current')
if mibBuilder.loadTexts: acPMDhcpResponseTimeVolume.setDescription('Activity volume.')
acPMDhcpResponseTimeTimeBelowLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 41, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMDhcpResponseTimeTimeBelowLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMDhcpResponseTimeTimeBelowLowThreshold.setDescription('Percent of interval time for which gauge is below what was determined as the low threshold.')
acPMDhcpResponseTimeTimeBetweenThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 41, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMDhcpResponseTimeTimeBetweenThresholds.setStatus('current')
if mibBuilder.loadTexts: acPMDhcpResponseTimeTimeBetweenThresholds.setDescription('Percent of interval time for which gauge is above what was determined as the high threshold.')
acPMDhcpResponseTimeTimeAboveHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 41, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMDhcpResponseTimeTimeAboveHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMDhcpResponseTimeTimeAboveHighThreshold.setDescription('Percent of interval time for which gauge is between what were determined as the low and high thresholds.')
acPMDhcpResponseTimeFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 41, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMDhcpResponseTimeFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMDhcpResponseTimeFullDayAverage.setDescription('The average of full 24 hours.')
acPMDhcpRequestTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 41, 2), )
if mibBuilder.loadTexts: acPMDhcpRequestTable.setStatus('current')
if mibBuilder.loadTexts: acPMDhcpRequestTable.setDescription('Number of DHCP requests sent.')
acPMDhcpRequestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 41, 2, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMDhcpRequestInterval"))
if mibBuilder.loadTexts: acPMDhcpRequestEntry.setStatus('current')
if mibBuilder.loadTexts: acPMDhcpRequestEntry.setDescription('')
acPMDhcpRequestInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 41, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMDhcpRequestInterval.setStatus('current')
if mibBuilder.loadTexts: acPMDhcpRequestInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMDhcpRequestVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 41, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMDhcpRequestVal.setStatus('current')
if mibBuilder.loadTexts: acPMDhcpRequestVal.setDescription('Value of gauge or counter.')
acPMDhcpRequestTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 41, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMDhcpRequestTotal.setStatus('current')
if mibBuilder.loadTexts: acPMDhcpRequestTotal.setDescription('Total since last reset.')
acPMStunQueryTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 41, 3), )
if mibBuilder.loadTexts: acPMStunQueryTable.setStatus('current')
if mibBuilder.loadTexts: acPMStunQueryTable.setDescription('Number of queries sent to STUN server.')
acPMStunQueryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 41, 3, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMStunQueryInterval"))
if mibBuilder.loadTexts: acPMStunQueryEntry.setStatus('current')
if mibBuilder.loadTexts: acPMStunQueryEntry.setDescription('')
acPMStunQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 41, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMStunQueryInterval.setStatus('current')
if mibBuilder.loadTexts: acPMStunQueryInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMStunQueryVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 41, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMStunQueryVal.setStatus('current')
if mibBuilder.loadTexts: acPMStunQueryVal.setDescription('Value of gauge or counter.')
acPMStunDiscoveryTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 41, 4), )
if mibBuilder.loadTexts: acPMStunDiscoveryTable.setStatus('current')
if mibBuilder.loadTexts: acPMStunDiscoveryTable.setDescription('Number of STUN discover operations.')
acPMStunDiscoveryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 41, 4, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMStunDiscoveryInterval"))
if mibBuilder.loadTexts: acPMStunDiscoveryEntry.setStatus('current')
if mibBuilder.loadTexts: acPMStunDiscoveryEntry.setDescription('')
acPMStunDiscoveryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 41, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMStunDiscoveryInterval.setStatus('current')
if mibBuilder.loadTexts: acPMStunDiscoveryInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMStunDiscoveryVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 41, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMStunDiscoveryVal.setStatus('current')
if mibBuilder.loadTexts: acPMStunDiscoveryVal.setDescription('Value of gauge or counter.')
acPMStunRetransmissionTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 41, 5), )
if mibBuilder.loadTexts: acPMStunRetransmissionTable.setStatus('current')
if mibBuilder.loadTexts: acPMStunRetransmissionTable.setDescription('Number of STUN query retransmissions.')
acPMStunRetransmissionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 41, 5, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMStunRetransmissionInterval"))
if mibBuilder.loadTexts: acPMStunRetransmissionEntry.setStatus('current')
if mibBuilder.loadTexts: acPMStunRetransmissionEntry.setDescription('')
acPMStunRetransmissionInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 41, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMStunRetransmissionInterval.setStatus('current')
if mibBuilder.loadTexts: acPMStunRetransmissionInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMStunRetransmissionVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 41, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMStunRetransmissionVal.setStatus('current')
if mibBuilder.loadTexts: acPMStunRetransmissionVal.setDescription('Value of gauge or counter.')
acPMSystemSctp = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 51))
acPMSctpRcvBytesLastSecondTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 51, 1), )
if mibBuilder.loadTexts: acPMSctpRcvBytesLastSecondTable.setStatus('current')
if mibBuilder.loadTexts: acPMSctpRcvBytesLastSecondTable.setDescription('Number of SCTP bytes received in the last second.')
acPMSctpRcvBytesLastSecondEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 51, 1, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMSctpRcvBytesLastSecondInterval"))
if mibBuilder.loadTexts: acPMSctpRcvBytesLastSecondEntry.setStatus('current')
if mibBuilder.loadTexts: acPMSctpRcvBytesLastSecondEntry.setDescription('')
acPMSctpRcvBytesLastSecondInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 51, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMSctpRcvBytesLastSecondInterval.setStatus('current')
if mibBuilder.loadTexts: acPMSctpRcvBytesLastSecondInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMSctpRcvBytesLastSecondVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 51, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSctpRcvBytesLastSecondVal.setStatus('current')
if mibBuilder.loadTexts: acPMSctpRcvBytesLastSecondVal.setDescription('Value of gauge or counter.')
acPMSctpRcvBytesLastSecondAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 51, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSctpRcvBytesLastSecondAverage.setStatus('current')
if mibBuilder.loadTexts: acPMSctpRcvBytesLastSecondAverage.setDescription('Average value within the period time.')
acPMSctpRcvBytesLastSecondMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 51, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSctpRcvBytesLastSecondMax.setStatus('current')
if mibBuilder.loadTexts: acPMSctpRcvBytesLastSecondMax.setDescription('Maximum value within the period time.')
acPMSctpRcvBytesLastSecondMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 51, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSctpRcvBytesLastSecondMin.setStatus('current')
if mibBuilder.loadTexts: acPMSctpRcvBytesLastSecondMin.setDescription('Minimum value within the period time.')
acPMSctpRcvBytesLastSecondFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 51, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSctpRcvBytesLastSecondFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMSctpRcvBytesLastSecondFullDayAverage.setDescription('The average of full 24 hours.')
acPMSctpSentBytesLastSecondTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 51, 2), )
if mibBuilder.loadTexts: acPMSctpSentBytesLastSecondTable.setStatus('current')
if mibBuilder.loadTexts: acPMSctpSentBytesLastSecondTable.setDescription('Number of SCTP bytes sent in the last second.')
acPMSctpSentBytesLastSecondEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 51, 2, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMSctpSentBytesLastSecondInterval"))
if mibBuilder.loadTexts: acPMSctpSentBytesLastSecondEntry.setStatus('current')
if mibBuilder.loadTexts: acPMSctpSentBytesLastSecondEntry.setDescription('')
acPMSctpSentBytesLastSecondInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 51, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMSctpSentBytesLastSecondInterval.setStatus('current')
if mibBuilder.loadTexts: acPMSctpSentBytesLastSecondInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMSctpSentBytesLastSecondVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 51, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSctpSentBytesLastSecondVal.setStatus('current')
if mibBuilder.loadTexts: acPMSctpSentBytesLastSecondVal.setDescription('Value of gauge or counter.')
acPMSctpSentBytesLastSecondAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 51, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSctpSentBytesLastSecondAverage.setStatus('current')
if mibBuilder.loadTexts: acPMSctpSentBytesLastSecondAverage.setDescription('Average value within the period time.')
acPMSctpSentBytesLastSecondMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 51, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSctpSentBytesLastSecondMax.setStatus('current')
if mibBuilder.loadTexts: acPMSctpSentBytesLastSecondMax.setDescription('Maximum value within the period time.')
acPMSctpSentBytesLastSecondMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 51, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSctpSentBytesLastSecondMin.setStatus('current')
if mibBuilder.loadTexts: acPMSctpSentBytesLastSecondMin.setDescription('Minimum value within the period time.')
acPMSctpSentBytesLastSecondFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 51, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSctpSentBytesLastSecondFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMSctpSentBytesLastSecondFullDayAverage.setDescription('The average of full 24 hours.')
acPMSctpRetransBytesTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 51, 3), )
if mibBuilder.loadTexts: acPMSctpRetransBytesTable.setStatus('current')
if mibBuilder.loadTexts: acPMSctpRetransBytesTable.setDescription('Number of retransmission bytes with in the last minute.')
acPMSctpRetransBytesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 51, 3, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMSctpRetransBytesInterval"))
if mibBuilder.loadTexts: acPMSctpRetransBytesEntry.setStatus('current')
if mibBuilder.loadTexts: acPMSctpRetransBytesEntry.setDescription('')
acPMSctpRetransBytesInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 51, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMSctpRetransBytesInterval.setStatus('current')
if mibBuilder.loadTexts: acPMSctpRetransBytesInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMSctpRetransBytesVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 51, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSctpRetransBytesVal.setStatus('current')
if mibBuilder.loadTexts: acPMSctpRetransBytesVal.setDescription('Value of gauge or counter.')
acPMSctpRetransBytesAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 51, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSctpRetransBytesAverage.setStatus('current')
if mibBuilder.loadTexts: acPMSctpRetransBytesAverage.setDescription('Average value within the period time.')
acPMSctpRetransBytesMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 51, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSctpRetransBytesMax.setStatus('current')
if mibBuilder.loadTexts: acPMSctpRetransBytesMax.setDescription('Maximum value within the period time.')
acPMSctpRetransBytesMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 51, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSctpRetransBytesMin.setStatus('current')
if mibBuilder.loadTexts: acPMSctpRetransBytesMin.setDescription('Minimum value within the period time.')
acPMSctpRetransBytesFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 51, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSctpRetransBytesFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMSctpRetransBytesFullDayAverage.setDescription('The average of full 24 hours.')
acPMSctpRetransAttemptsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 51, 4), )
if mibBuilder.loadTexts: acPMSctpRetransAttemptsTable.setStatus('current')
if mibBuilder.loadTexts: acPMSctpRetransAttemptsTable.setDescription('Number of SCTP retransmission attempts with in the last minute.')
acPMSctpRetransAttemptsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 51, 4, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMSctpRetransAttemptsInterval"))
if mibBuilder.loadTexts: acPMSctpRetransAttemptsEntry.setStatus('current')
if mibBuilder.loadTexts: acPMSctpRetransAttemptsEntry.setDescription('')
acPMSctpRetransAttemptsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 51, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMSctpRetransAttemptsInterval.setStatus('current')
if mibBuilder.loadTexts: acPMSctpRetransAttemptsInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMSctpRetransAttemptsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 51, 4, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSctpRetransAttemptsVal.setStatus('current')
if mibBuilder.loadTexts: acPMSctpRetransAttemptsVal.setDescription('Value of gauge or counter.')
acPMSctpRetransAttemptsAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 51, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSctpRetransAttemptsAverage.setStatus('current')
if mibBuilder.loadTexts: acPMSctpRetransAttemptsAverage.setDescription('Average value with in the period time.')
acPMSctpRetransAttemptsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 51, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSctpRetransAttemptsMax.setStatus('current')
if mibBuilder.loadTexts: acPMSctpRetransAttemptsMax.setDescription('Maximum value with in the period time.')
acPMSctpRetransAttemptsMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 51, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSctpRetransAttemptsMin.setStatus('current')
if mibBuilder.loadTexts: acPMSctpRetransAttemptsMin.setDescription('Minimum value with in the period time.')
acPMSctpRetransAttemptsFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 51, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMSctpRetransAttemptsFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMSctpRetransAttemptsFullDayAverage.setDescription('The average of full 24 hours.')
acPMSystemSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 61))
acPMIPsecCurrentSAsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 61, 1), )
if mibBuilder.loadTexts: acPMIPsecCurrentSAsTable.setStatus('current')
if mibBuilder.loadTexts: acPMIPsecCurrentSAsTable.setDescription("Number of concurrent IPsec SA's (security associations)")
acPMIPsecCurrentSAsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 61, 1, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMIPsecCurrentSAsInterval"))
if mibBuilder.loadTexts: acPMIPsecCurrentSAsEntry.setStatus('current')
if mibBuilder.loadTexts: acPMIPsecCurrentSAsEntry.setDescription('')
acPMIPsecCurrentSAsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 61, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMIPsecCurrentSAsInterval.setStatus('current')
if mibBuilder.loadTexts: acPMIPsecCurrentSAsInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMIPsecCurrentSAsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 61, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIPsecCurrentSAsVal.setStatus('current')
if mibBuilder.loadTexts: acPMIPsecCurrentSAsVal.setDescription('Value of gauge or counter.')
acPMIPsecCurrentSAsAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 61, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIPsecCurrentSAsAverage.setStatus('current')
if mibBuilder.loadTexts: acPMIPsecCurrentSAsAverage.setDescription('Average value within the period time.')
acPMIPsecCurrentSAsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 61, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIPsecCurrentSAsMax.setStatus('current')
if mibBuilder.loadTexts: acPMIPsecCurrentSAsMax.setDescription('Maximum value within the period time.')
acPMIPsecCurrentSAsMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 61, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIPsecCurrentSAsMin.setStatus('current')
if mibBuilder.loadTexts: acPMIPsecCurrentSAsMin.setDescription('Minimum value within the period time.')
acPMIPsecCurrentSAsFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 61, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIPsecCurrentSAsFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMIPsecCurrentSAsFullDayAverage.setDescription('The average of full 24 hours.')
acPMIPsecCurrentSAsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 61, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIPsecCurrentSAsTotal.setStatus('current')
if mibBuilder.loadTexts: acPMIPsecCurrentSAsTotal.setDescription('Total since last reset.')
acPMSystemMulticast = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71))
acPMMulticastIPPacketsReceivedTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 1), )
if mibBuilder.loadTexts: acPMMulticastIPPacketsReceivedTable.setStatus('current')
if mibBuilder.loadTexts: acPMMulticastIPPacketsReceivedTable.setDescription('Total numbet of multicast IP packets received from ethernet driver.')
acPMMulticastIPPacketsReceivedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 1, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMMulticastIPPacketsReceivedInterval"))
if mibBuilder.loadTexts: acPMMulticastIPPacketsReceivedEntry.setStatus('current')
if mibBuilder.loadTexts: acPMMulticastIPPacketsReceivedEntry.setDescription('')
acPMMulticastIPPacketsReceivedInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMMulticastIPPacketsReceivedInterval.setStatus('current')
if mibBuilder.loadTexts: acPMMulticastIPPacketsReceivedInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMMulticastIPPacketsReceivedVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMulticastIPPacketsReceivedVal.setStatus('current')
if mibBuilder.loadTexts: acPMMulticastIPPacketsReceivedVal.setDescription('Value of gauge or counter.')
acPMMulticastIPPacketsReceivedAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMulticastIPPacketsReceivedAverage.setStatus('current')
if mibBuilder.loadTexts: acPMMulticastIPPacketsReceivedAverage.setDescription('Average value within the period time.')
acPMMulticastIPPacketsReceivedMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMulticastIPPacketsReceivedMax.setStatus('current')
if mibBuilder.loadTexts: acPMMulticastIPPacketsReceivedMax.setDescription('Maximum value within the period time.')
acPMMulticastIPPacketsReceivedMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMulticastIPPacketsReceivedMin.setStatus('current')
if mibBuilder.loadTexts: acPMMulticastIPPacketsReceivedMin.setDescription('Minimum value within the period time.')
acPMMulticastIPPacketsReceivedFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMulticastIPPacketsReceivedFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMMulticastIPPacketsReceivedFullDayAverage.setDescription('The average of full 24 hours.')
acPMMulticastUDPPacketsReceivedTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 2), )
if mibBuilder.loadTexts: acPMMulticastUDPPacketsReceivedTable.setStatus('current')
if mibBuilder.loadTexts: acPMMulticastUDPPacketsReceivedTable.setDescription('Numbet of multicast IP packets conveying UDP payload that were accepted. These packets presented multicast IP address and UDP port that are registered by at least one channel.')
acPMMulticastUDPPacketsReceivedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 2, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMMulticastUDPPacketsReceivedInterval"))
if mibBuilder.loadTexts: acPMMulticastUDPPacketsReceivedEntry.setStatus('current')
if mibBuilder.loadTexts: acPMMulticastUDPPacketsReceivedEntry.setDescription('')
acPMMulticastUDPPacketsReceivedInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMMulticastUDPPacketsReceivedInterval.setStatus('current')
if mibBuilder.loadTexts: acPMMulticastUDPPacketsReceivedInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMMulticastUDPPacketsReceivedVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMulticastUDPPacketsReceivedVal.setStatus('current')
if mibBuilder.loadTexts: acPMMulticastUDPPacketsReceivedVal.setDescription('Value of gauge or counter.')
acPMMulticastUDPPacketsReceivedAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMulticastUDPPacketsReceivedAverage.setStatus('current')
if mibBuilder.loadTexts: acPMMulticastUDPPacketsReceivedAverage.setDescription('Average value within the period time.')
acPMMulticastUDPPacketsReceivedMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMulticastUDPPacketsReceivedMax.setStatus('current')
if mibBuilder.loadTexts: acPMMulticastUDPPacketsReceivedMax.setDescription('Maximum value within the period time.')
acPMMulticastUDPPacketsReceivedMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMulticastUDPPacketsReceivedMin.setStatus('current')
if mibBuilder.loadTexts: acPMMulticastUDPPacketsReceivedMin.setDescription('Minimum value within the period time.')
acPMMulticastUDPPacketsReceivedFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMulticastUDPPacketsReceivedFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMMulticastUDPPacketsReceivedFullDayAverage.setDescription('The average of full 24 hours.')
acPMMulticastUDPPacketsRejectedTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 3), )
if mibBuilder.loadTexts: acPMMulticastUDPPacketsRejectedTable.setStatus('current')
if mibBuilder.loadTexts: acPMMulticastUDPPacketsRejectedTable.setDescription('Number of multicast IP packets conveying UDP payload that were rejected. That is, these packets presented a multicast IP address or/and UDP port that are not registered.')
acPMMulticastUDPPacketsRejectedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 3, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMMulticastUDPPacketsRejectedInterval"))
if mibBuilder.loadTexts: acPMMulticastUDPPacketsRejectedEntry.setStatus('current')
if mibBuilder.loadTexts: acPMMulticastUDPPacketsRejectedEntry.setDescription('')
acPMMulticastUDPPacketsRejectedInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMMulticastUDPPacketsRejectedInterval.setStatus('current')
if mibBuilder.loadTexts: acPMMulticastUDPPacketsRejectedInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMMulticastUDPPacketsRejectedVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMulticastUDPPacketsRejectedVal.setStatus('current')
if mibBuilder.loadTexts: acPMMulticastUDPPacketsRejectedVal.setDescription('Value of gauge or counter.')
acPMMulticastUDPPacketsRejectedAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMulticastUDPPacketsRejectedAverage.setStatus('current')
if mibBuilder.loadTexts: acPMMulticastUDPPacketsRejectedAverage.setDescription('Average value within the period time.')
acPMMulticastUDPPacketsRejectedMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMulticastUDPPacketsRejectedMax.setStatus('current')
if mibBuilder.loadTexts: acPMMulticastUDPPacketsRejectedMax.setDescription('Maximum value within the period time.')
acPMMulticastUDPPacketsRejectedMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMulticastUDPPacketsRejectedMin.setStatus('current')
if mibBuilder.loadTexts: acPMMulticastUDPPacketsRejectedMin.setDescription('Minimum value within the period time.')
acPMMulticastUDPPacketsRejectedFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMulticastUDPPacketsRejectedFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMMulticastUDPPacketsRejectedFullDayAverage.setDescription('The average of full 24 hours.')
acPMMulticastIGMPPacketsReceivedTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 4), )
if mibBuilder.loadTexts: acPMMulticastIGMPPacketsReceivedTable.setStatus('current')
if mibBuilder.loadTexts: acPMMulticastIGMPPacketsReceivedTable.setDescription('Total number of IGMP packets received.')
acPMMulticastIGMPPacketsReceivedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 4, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMMulticastIGMPPacketsReceivedInterval"))
if mibBuilder.loadTexts: acPMMulticastIGMPPacketsReceivedEntry.setStatus('current')
if mibBuilder.loadTexts: acPMMulticastIGMPPacketsReceivedEntry.setDescription('')
acPMMulticastIGMPPacketsReceivedInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMMulticastIGMPPacketsReceivedInterval.setStatus('current')
if mibBuilder.loadTexts: acPMMulticastIGMPPacketsReceivedInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMMulticastIGMPPacketsReceivedVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMulticastIGMPPacketsReceivedVal.setStatus('current')
if mibBuilder.loadTexts: acPMMulticastIGMPPacketsReceivedVal.setDescription('Value of gauge or counter.')
acPMMulticastIGMPPacketsReceivedAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMulticastIGMPPacketsReceivedAverage.setStatus('current')
if mibBuilder.loadTexts: acPMMulticastIGMPPacketsReceivedAverage.setDescription('Average value within the period time.')
acPMMulticastIGMPPacketsReceivedMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMulticastIGMPPacketsReceivedMax.setStatus('current')
if mibBuilder.loadTexts: acPMMulticastIGMPPacketsReceivedMax.setDescription('Maximum value within the period time.')
acPMMulticastIGMPPacketsReceivedMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMulticastIGMPPacketsReceivedMin.setStatus('current')
if mibBuilder.loadTexts: acPMMulticastIGMPPacketsReceivedMin.setDescription('Minimum value within the period time.')
acPMMulticastIGMPPacketsReceivedFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMMulticastIGMPPacketsReceivedFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMMulticastIGMPPacketsReceivedFullDayAverage.setDescription('The average of full 24 hours.')
acPMIGMPGeneralQueryReceivedTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 5), )
if mibBuilder.loadTexts: acPMIGMPGeneralQueryReceivedTable.setStatus('current')
if mibBuilder.loadTexts: acPMIGMPGeneralQueryReceivedTable.setDescription('Number of IGMP general queries received.')
acPMIGMPGeneralQueryReceivedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 5, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMIGMPGeneralQueryReceivedInterval"))
if mibBuilder.loadTexts: acPMIGMPGeneralQueryReceivedEntry.setStatus('current')
if mibBuilder.loadTexts: acPMIGMPGeneralQueryReceivedEntry.setDescription('')
acPMIGMPGeneralQueryReceivedInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMIGMPGeneralQueryReceivedInterval.setStatus('current')
if mibBuilder.loadTexts: acPMIGMPGeneralQueryReceivedInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMIGMPGeneralQueryReceivedVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIGMPGeneralQueryReceivedVal.setStatus('current')
if mibBuilder.loadTexts: acPMIGMPGeneralQueryReceivedVal.setDescription('Value of gauge or counter.')
acPMIGMPGeneralQueryReceivedAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIGMPGeneralQueryReceivedAverage.setStatus('current')
if mibBuilder.loadTexts: acPMIGMPGeneralQueryReceivedAverage.setDescription('Average value within the period time.')
acPMIGMPGeneralQueryReceivedMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIGMPGeneralQueryReceivedMax.setStatus('current')
if mibBuilder.loadTexts: acPMIGMPGeneralQueryReceivedMax.setDescription('Maximum value within the period time.')
acPMIGMPGeneralQueryReceivedMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIGMPGeneralQueryReceivedMin.setStatus('current')
if mibBuilder.loadTexts: acPMIGMPGeneralQueryReceivedMin.setDescription('Minimum value within the period time.')
acPMIGMPGeneralQueryReceivedFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIGMPGeneralQueryReceivedFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMIGMPGeneralQueryReceivedFullDayAverage.setDescription('The average of full 24 hours.')
acPMIGMPSpecificQueryReceivedTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 6), )
if mibBuilder.loadTexts: acPMIGMPSpecificQueryReceivedTable.setStatus('current')
if mibBuilder.loadTexts: acPMIGMPSpecificQueryReceivedTable.setDescription('Number of IGMP specific queries received.')
acPMIGMPSpecificQueryReceivedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 6, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMIGMPSpecificQueryReceivedInterval"))
if mibBuilder.loadTexts: acPMIGMPSpecificQueryReceivedEntry.setStatus('current')
if mibBuilder.loadTexts: acPMIGMPSpecificQueryReceivedEntry.setDescription('')
acPMIGMPSpecificQueryReceivedInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMIGMPSpecificQueryReceivedInterval.setStatus('current')
if mibBuilder.loadTexts: acPMIGMPSpecificQueryReceivedInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMIGMPSpecificQueryReceivedVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIGMPSpecificQueryReceivedVal.setStatus('current')
if mibBuilder.loadTexts: acPMIGMPSpecificQueryReceivedVal.setDescription('Value of gauge or counter.')
acPMIGMPSpecificQueryReceivedAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIGMPSpecificQueryReceivedAverage.setStatus('current')
if mibBuilder.loadTexts: acPMIGMPSpecificQueryReceivedAverage.setDescription('Average value within the period time.')
acPMIGMPSpecificQueryReceivedMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIGMPSpecificQueryReceivedMax.setStatus('current')
if mibBuilder.loadTexts: acPMIGMPSpecificQueryReceivedMax.setDescription('Maximum value within the period time.')
acPMIGMPSpecificQueryReceivedMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIGMPSpecificQueryReceivedMin.setStatus('current')
if mibBuilder.loadTexts: acPMIGMPSpecificQueryReceivedMin.setDescription('Minimum value within the period time.')
acPMIGMPSpecificQueryReceivedFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIGMPSpecificQueryReceivedFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMIGMPSpecificQueryReceivedFullDayAverage.setDescription('The average of full 24 hours.')
acPMIGMPMembershipReportsSentTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 7), )
if mibBuilder.loadTexts: acPMIGMPMembershipReportsSentTable.setStatus('current')
if mibBuilder.loadTexts: acPMIGMPMembershipReportsSentTable.setDescription('Number of IGMP membership reports sent.')
acPMIGMPMembershipReportsSentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 7, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMIGMPMembershipReportsSentInterval"))
if mibBuilder.loadTexts: acPMIGMPMembershipReportsSentEntry.setStatus('current')
if mibBuilder.loadTexts: acPMIGMPMembershipReportsSentEntry.setDescription('')
acPMIGMPMembershipReportsSentInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMIGMPMembershipReportsSentInterval.setStatus('current')
if mibBuilder.loadTexts: acPMIGMPMembershipReportsSentInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMIGMPMembershipReportsSentVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIGMPMembershipReportsSentVal.setStatus('current')
if mibBuilder.loadTexts: acPMIGMPMembershipReportsSentVal.setDescription('Value of gauge or counter.')
acPMIGMPMembershipReportsSentAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIGMPMembershipReportsSentAverage.setStatus('current')
if mibBuilder.loadTexts: acPMIGMPMembershipReportsSentAverage.setDescription('Average value within the period time.')
acPMIGMPMembershipReportsSentMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIGMPMembershipReportsSentMax.setStatus('current')
if mibBuilder.loadTexts: acPMIGMPMembershipReportsSentMax.setDescription('Maximum value within the period time.')
acPMIGMPMembershipReportsSentMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIGMPMembershipReportsSentMin.setStatus('current')
if mibBuilder.loadTexts: acPMIGMPMembershipReportsSentMin.setDescription('Minimum value within the period time.')
acPMIGMPMembershipReportsSentFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIGMPMembershipReportsSentFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMIGMPMembershipReportsSentFullDayAverage.setDescription('The average of full 24 hours.')
acPMIGMPLeaveGroupSentTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 8), )
if mibBuilder.loadTexts: acPMIGMPLeaveGroupSentTable.setStatus('current')
if mibBuilder.loadTexts: acPMIGMPLeaveGroupSentTable.setDescription('Number of IGMP leave group messages sent.')
acPMIGMPLeaveGroupSentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 8, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMIGMPLeaveGroupSentInterval"))
if mibBuilder.loadTexts: acPMIGMPLeaveGroupSentEntry.setStatus('current')
if mibBuilder.loadTexts: acPMIGMPLeaveGroupSentEntry.setDescription('')
acPMIGMPLeaveGroupSentInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMIGMPLeaveGroupSentInterval.setStatus('current')
if mibBuilder.loadTexts: acPMIGMPLeaveGroupSentInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMIGMPLeaveGroupSentVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIGMPLeaveGroupSentVal.setStatus('current')
if mibBuilder.loadTexts: acPMIGMPLeaveGroupSentVal.setDescription('Value of gauge or counter.')
acPMIGMPLeaveGroupSentAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIGMPLeaveGroupSentAverage.setStatus('current')
if mibBuilder.loadTexts: acPMIGMPLeaveGroupSentAverage.setDescription('Average value within the period time.')
acPMIGMPLeaveGroupSentMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIGMPLeaveGroupSentMax.setStatus('current')
if mibBuilder.loadTexts: acPMIGMPLeaveGroupSentMax.setDescription('Maximum value within the period time.')
acPMIGMPLeaveGroupSentMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIGMPLeaveGroupSentMin.setStatus('current')
if mibBuilder.loadTexts: acPMIGMPLeaveGroupSentMin.setDescription('Minimum value within the period time.')
acPMIGMPLeaveGroupSentFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 71, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMIGMPLeaveGroupSentFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMIGMPLeaveGroupSentFullDayAverage.setDescription('The average of full 24 hours.')
acPMSystemCongestion = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 81))
acPMCongestionGeneralResourcesTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 81, 1), )
if mibBuilder.loadTexts: acPMCongestionGeneralResourcesTable.setStatus('current')
if mibBuilder.loadTexts: acPMCongestionGeneralResourcesTable.setDescription('')
acPMCongestionGeneralResourcesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 81, 1, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMCongestionGeneralResourcesInterval"))
if mibBuilder.loadTexts: acPMCongestionGeneralResourcesEntry.setStatus('current')
if mibBuilder.loadTexts: acPMCongestionGeneralResourcesEntry.setDescription('')
acPMCongestionGeneralResourcesInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 81, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMCongestionGeneralResourcesInterval.setStatus('current')
if mibBuilder.loadTexts: acPMCongestionGeneralResourcesInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMCongestionGeneralResourcesVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 81, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCongestionGeneralResourcesVal.setStatus('current')
if mibBuilder.loadTexts: acPMCongestionGeneralResourcesVal.setDescription('Value of gauge or counter.')
acPMCongestionGeneralResourcesAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 81, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCongestionGeneralResourcesAverage.setStatus('current')
if mibBuilder.loadTexts: acPMCongestionGeneralResourcesAverage.setDescription('Average value within the period time.')
acPMCongestionGeneralResourcesMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 81, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCongestionGeneralResourcesMax.setStatus('current')
if mibBuilder.loadTexts: acPMCongestionGeneralResourcesMax.setDescription('Maximum value within the period time.')
acPMCongestionGeneralResourcesMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 81, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCongestionGeneralResourcesMin.setStatus('current')
if mibBuilder.loadTexts: acPMCongestionGeneralResourcesMin.setDescription('Minimum value within the period time.')
acPMCongestionGeneralResourcesFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 81, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCongestionGeneralResourcesFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMCongestionGeneralResourcesFullDayAverage.setDescription('The average of full 24 hours.')
acPMCongestionDSPresourcesTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 81, 2), )
if mibBuilder.loadTexts: acPMCongestionDSPresourcesTable.setStatus('current')
if mibBuilder.loadTexts: acPMCongestionDSPresourcesTable.setDescription('')
acPMCongestionDSPresourcesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 81, 2, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMCongestionDSPresourcesInterval"))
if mibBuilder.loadTexts: acPMCongestionDSPresourcesEntry.setStatus('current')
if mibBuilder.loadTexts: acPMCongestionDSPresourcesEntry.setDescription('')
acPMCongestionDSPresourcesInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 81, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMCongestionDSPresourcesInterval.setStatus('current')
if mibBuilder.loadTexts: acPMCongestionDSPresourcesInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMCongestionDSPresourcesVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 81, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCongestionDSPresourcesVal.setStatus('current')
if mibBuilder.loadTexts: acPMCongestionDSPresourcesVal.setDescription('Value of gauge or counter.')
acPMCongestionDSPresourcesAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 81, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCongestionDSPresourcesAverage.setStatus('current')
if mibBuilder.loadTexts: acPMCongestionDSPresourcesAverage.setDescription('Average value within the period time.')
acPMCongestionDSPresourcesMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 81, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCongestionDSPresourcesMax.setStatus('current')
if mibBuilder.loadTexts: acPMCongestionDSPresourcesMax.setDescription('Maximum value within the period time.')
acPMCongestionDSPresourcesMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 81, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCongestionDSPresourcesMin.setStatus('current')
if mibBuilder.loadTexts: acPMCongestionDSPresourcesMin.setDescription('Minimum value within the period time.')
acPMCongestionDSPresourcesFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 81, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCongestionDSPresourcesFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMCongestionDSPresourcesFullDayAverage.setDescription('The average of full 24 hours.')
acPMCongestionIPresourcesTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 81, 3), )
if mibBuilder.loadTexts: acPMCongestionIPresourcesTable.setStatus('current')
if mibBuilder.loadTexts: acPMCongestionIPresourcesTable.setDescription('')
acPMCongestionIPresourcesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 81, 3, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMCongestionIPresourcesInterval"))
if mibBuilder.loadTexts: acPMCongestionIPresourcesEntry.setStatus('current')
if mibBuilder.loadTexts: acPMCongestionIPresourcesEntry.setDescription('')
acPMCongestionIPresourcesInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 81, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMCongestionIPresourcesInterval.setStatus('current')
if mibBuilder.loadTexts: acPMCongestionIPresourcesInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMCongestionIPresourcesVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 81, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCongestionIPresourcesVal.setStatus('current')
if mibBuilder.loadTexts: acPMCongestionIPresourcesVal.setDescription('Value of gauge or counter.')
acPMCongestionIPresourcesAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 81, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCongestionIPresourcesAverage.setStatus('current')
if mibBuilder.loadTexts: acPMCongestionIPresourcesAverage.setDescription('Average value within the period time.')
acPMCongestionIPresourcesMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 81, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCongestionIPresourcesMax.setStatus('current')
if mibBuilder.loadTexts: acPMCongestionIPresourcesMax.setDescription('Maximum value within the period time.')
acPMCongestionIPresourcesMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 81, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCongestionIPresourcesMin.setStatus('current')
if mibBuilder.loadTexts: acPMCongestionIPresourcesMin.setDescription('Minimum value within the period time.')
acPMCongestionIPresourcesFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 81, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCongestionIPresourcesFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMCongestionIPresourcesFullDayAverage.setDescription('The average of full 24 hours.')
acPMCongestionATMresourcesTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 81, 4), )
if mibBuilder.loadTexts: acPMCongestionATMresourcesTable.setStatus('current')
if mibBuilder.loadTexts: acPMCongestionATMresourcesTable.setDescription('ATM resources are: ATM end point as for today, restricted to 2016,;AAL2 VCC count (1024) and AAL1 VCC count (2016).')
acPMCongestionATMresourcesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 81, 4, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMCongestionATMresourcesInterval"))
if mibBuilder.loadTexts: acPMCongestionATMresourcesEntry.setStatus('current')
if mibBuilder.loadTexts: acPMCongestionATMresourcesEntry.setDescription('')
acPMCongestionATMresourcesInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 81, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMCongestionATMresourcesInterval.setStatus('current')
if mibBuilder.loadTexts: acPMCongestionATMresourcesInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMCongestionATMresourcesVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 81, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCongestionATMresourcesVal.setStatus('current')
if mibBuilder.loadTexts: acPMCongestionATMresourcesVal.setDescription('Value of gauge or counter.')
acPMCongestionATMresourcesAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 81, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCongestionATMresourcesAverage.setStatus('current')
if mibBuilder.loadTexts: acPMCongestionATMresourcesAverage.setDescription('Average value within the period time.')
acPMCongestionATMresourcesMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 81, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCongestionATMresourcesMax.setStatus('current')
if mibBuilder.loadTexts: acPMCongestionATMresourcesMax.setDescription('Maximum value within the period time.')
acPMCongestionATMresourcesMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 81, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCongestionATMresourcesMin.setStatus('current')
if mibBuilder.loadTexts: acPMCongestionATMresourcesMin.setDescription('Minimum value within the period time.')
acPMCongestionATMresourcesFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 81, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCongestionATMresourcesFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMCongestionATMresourcesFullDayAverage.setDescription('The average of full 24 hours.')
acPMCongestionConferenceResourcesTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 81, 5), )
if mibBuilder.loadTexts: acPMCongestionConferenceResourcesTable.setStatus('current')
if mibBuilder.loadTexts: acPMCongestionConferenceResourcesTable.setDescription('Extension Resources are actually a Conference Resource: Conference Resource congestion is running out of Conference DSPs.')
acPMCongestionConferenceResourcesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 81, 5, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMCongestionConferenceResourcesInterval"))
if mibBuilder.loadTexts: acPMCongestionConferenceResourcesEntry.setStatus('current')
if mibBuilder.loadTexts: acPMCongestionConferenceResourcesEntry.setDescription('')
acPMCongestionConferenceResourcesInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 81, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMCongestionConferenceResourcesInterval.setStatus('current')
if mibBuilder.loadTexts: acPMCongestionConferenceResourcesInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMCongestionConferenceResourcesVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 81, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCongestionConferenceResourcesVal.setStatus('current')
if mibBuilder.loadTexts: acPMCongestionConferenceResourcesVal.setDescription('Value of gauge or counter.')
acPMCongestionConferenceResourcesAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 81, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCongestionConferenceResourcesAverage.setStatus('current')
if mibBuilder.loadTexts: acPMCongestionConferenceResourcesAverage.setDescription('Average value within the period time.')
acPMCongestionConferenceResourcesMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 81, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCongestionConferenceResourcesMax.setStatus('current')
if mibBuilder.loadTexts: acPMCongestionConferenceResourcesMax.setDescription('Maximum value within the period time.')
acPMCongestionConferenceResourcesMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 81, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCongestionConferenceResourcesMin.setStatus('current')
if mibBuilder.loadTexts: acPMCongestionConferenceResourcesMin.setDescription('Minimum value within the period time.')
acPMCongestionConferenceResourcesFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 81, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMCongestionConferenceResourcesFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMCongestionConferenceResourcesFullDayAverage.setDescription('The average of full 24 hours.')
acPMSystemNFS = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91))
acPMNFSCurrentRequestsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 1), )
if mibBuilder.loadTexts: acPMNFSCurrentRequestsTable.setStatus('current')
if mibBuilder.loadTexts: acPMNFSCurrentRequestsTable.setDescription('Current number of NFS requests.')
acPMNFSCurrentRequestsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 1, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMNFSCurrentRequestsType"), (0, "AC-PM-System-MIB", "acPMNFSCurrentRequestsInterval"))
if mibBuilder.loadTexts: acPMNFSCurrentRequestsEntry.setStatus('current')
if mibBuilder.loadTexts: acPMNFSCurrentRequestsEntry.setDescription('')
acPMNFSCurrentRequestsType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("readFile", 0), ("writeFile", 1), ("play", 2), ("record", 3), ("other", 4))))
if mibBuilder.loadTexts: acPMNFSCurrentRequestsType.setStatus('current')
if mibBuilder.loadTexts: acPMNFSCurrentRequestsType.setDescription('Request type: 0 (readFile), 1 (writeFile), 2 (play), 3 (record), 4 (other).')
acPMNFSCurrentRequestsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMNFSCurrentRequestsInterval.setStatus('current')
if mibBuilder.loadTexts: acPMNFSCurrentRequestsInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMNFSCurrentRequestsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSCurrentRequestsVal.setStatus('current')
if mibBuilder.loadTexts: acPMNFSCurrentRequestsVal.setDescription('Value of gauge or counter.')
acPMNFSCurrentRequestsAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSCurrentRequestsAverage.setStatus('current')
if mibBuilder.loadTexts: acPMNFSCurrentRequestsAverage.setDescription('Average value with in the period time.')
acPMNFSCurrentRequestsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSCurrentRequestsMax.setStatus('current')
if mibBuilder.loadTexts: acPMNFSCurrentRequestsMax.setDescription('Maximum value with in the period time.')
acPMNFSCurrentRequestsMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSCurrentRequestsMin.setStatus('current')
if mibBuilder.loadTexts: acPMNFSCurrentRequestsMin.setDescription('Minimum value with in the period time.')
acPMNFSCurrentRequestsFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSCurrentRequestsFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMNFSCurrentRequestsFullDayAverage.setDescription('The average of full 24 hours.')
acPMNFSRequestsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 2), )
if mibBuilder.loadTexts: acPMNFSRequestsTable.setStatus('current')
if mibBuilder.loadTexts: acPMNFSRequestsTable.setDescription('Total number of NFS requests. The index is interpreted as follows: 0 (readFile), 1 (writeFile), 2 (play), 3 (record), 4 (other).')
acPMNFSRequestsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 2, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMNFSRequestsType"), (0, "AC-PM-System-MIB", "acPMNFSRequestsInterval"))
if mibBuilder.loadTexts: acPMNFSRequestsEntry.setStatus('current')
if mibBuilder.loadTexts: acPMNFSRequestsEntry.setDescription('')
acPMNFSRequestsType = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("readFile", 0), ("writeFile", 1), ("play", 2), ("record", 3), ("other", 4))))
if mibBuilder.loadTexts: acPMNFSRequestsType.setStatus('current')
if mibBuilder.loadTexts: acPMNFSRequestsType.setDescription('Request type: 0 (readFile), 1 (writeFile), 2 (play), 3 (record), 4 (other).')
acPMNFSRequestsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMNFSRequestsInterval.setStatus('current')
if mibBuilder.loadTexts: acPMNFSRequestsInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMNFSRequestsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSRequestsVal.setStatus('current')
if mibBuilder.loadTexts: acPMNFSRequestsVal.setDescription('Value of gauge or counter.')
acPMNFSRequestsFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSRequestsFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMNFSRequestsFullDayAverage.setDescription('The average of full 24 hours.')
acPMNFSRoundTripTimeMsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 3), )
if mibBuilder.loadTexts: acPMNFSRoundTripTimeMsTable.setStatus('current')
if mibBuilder.loadTexts: acPMNFSRoundTripTimeMsTable.setDescription('Amount of time between an NFS call and receipt of the corresponding NFS reply. The index corresponds to the index used in the NFSServers INI parameter table. This is the same index used in the SNMP NFS servers table.')
acPMNFSRoundTripTimeMsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 3, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMNFSRoundTripTimeMsRfsNumber"), (0, "AC-PM-System-MIB", "acPMNFSRoundTripTimeMsInterval"))
if mibBuilder.loadTexts: acPMNFSRoundTripTimeMsEntry.setStatus('current')
if mibBuilder.loadTexts: acPMNFSRoundTripTimeMsEntry.setDescription('')
acPMNFSRoundTripTimeMsRfsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: acPMNFSRoundTripTimeMsRfsNumber.setStatus('current')
if mibBuilder.loadTexts: acPMNFSRoundTripTimeMsRfsNumber.setDescription('The remote file system number (0 to 15). As is used in the NFS servers table.')
acPMNFSRoundTripTimeMsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMNFSRoundTripTimeMsInterval.setStatus('current')
if mibBuilder.loadTexts: acPMNFSRoundTripTimeMsInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMNFSRoundTripTimeMsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSRoundTripTimeMsVal.setStatus('current')
if mibBuilder.loadTexts: acPMNFSRoundTripTimeMsVal.setDescription('Value of gauge or counter.')
acPMNFSRoundTripTimeMsAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSRoundTripTimeMsAverage.setStatus('current')
if mibBuilder.loadTexts: acPMNFSRoundTripTimeMsAverage.setDescription('Average value with in the period time.')
acPMNFSRoundTripTimeMsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSRoundTripTimeMsMax.setStatus('current')
if mibBuilder.loadTexts: acPMNFSRoundTripTimeMsMax.setDescription('Maximum value with in the period time.')
acPMNFSRoundTripTimeMsMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSRoundTripTimeMsMin.setStatus('current')
if mibBuilder.loadTexts: acPMNFSRoundTripTimeMsMin.setDescription('Minimum value with in the period time.')
acPMNFSRoundTripTimeMsVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSRoundTripTimeMsVolume.setStatus('current')
if mibBuilder.loadTexts: acPMNFSRoundTripTimeMsVolume.setDescription('Activity volume.')
acPMNFSRoundTripTimeMsTimeBelowLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSRoundTripTimeMsTimeBelowLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMNFSRoundTripTimeMsTimeBelowLowThreshold.setDescription('Percent of interval time for which gauge is below what was determined as the low threshold.')
acPMNFSRoundTripTimeMsTimeBetweenThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSRoundTripTimeMsTimeBetweenThresholds.setStatus('current')
if mibBuilder.loadTexts: acPMNFSRoundTripTimeMsTimeBetweenThresholds.setDescription('Percent of interval time for which gauge is above what was determined as the high threshold.')
acPMNFSRoundTripTimeMsTimeAboveHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSRoundTripTimeMsTimeAboveHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMNFSRoundTripTimeMsTimeAboveHighThreshold.setDescription('Percent of interval time for which gauge is between what were determined as the low and high thresholds.')
acPMNFSRoundTripTimeMsFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSRoundTripTimeMsFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMNFSRoundTripTimeMsFullDayAverage.setDescription('The average of full 24 hours.')
acPMNFSRetriesTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 4), )
if mibBuilder.loadTexts: acPMNFSRetriesTable.setStatus('current')
if mibBuilder.loadTexts: acPMNFSRetriesTable.setDescription('The number of times that the NFS subsystem retransmitted an NFS request because it did not receive a reply in the expected amount of time. The index corresponds to the index used in the NFSServers INI parameter table. This is the same index used in the SNMP NFS servers table.')
acPMNFSRetriesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 4, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMNFSRetriesRfsNumber"), (0, "AC-PM-System-MIB", "acPMNFSRetriesInterval"))
if mibBuilder.loadTexts: acPMNFSRetriesEntry.setStatus('current')
if mibBuilder.loadTexts: acPMNFSRetriesEntry.setDescription('')
acPMNFSRetriesRfsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: acPMNFSRetriesRfsNumber.setStatus('current')
if mibBuilder.loadTexts: acPMNFSRetriesRfsNumber.setDescription('The remote file system number (0 to 15). As is used in the NFS servers table.')
acPMNFSRetriesInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMNFSRetriesInterval.setStatus('current')
if mibBuilder.loadTexts: acPMNFSRetriesInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMNFSRetriesVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSRetriesVal.setStatus('current')
if mibBuilder.loadTexts: acPMNFSRetriesVal.setDescription('Value of gauge or counter.')
acPMNFSRetriesVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSRetriesVolume.setStatus('current')
if mibBuilder.loadTexts: acPMNFSRetriesVolume.setDescription('Activity volume.')
acPMNFSRetriesTimeBelowLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSRetriesTimeBelowLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMNFSRetriesTimeBelowLowThreshold.setDescription('Percent of interval time for which gauge is below what was determined as the low threshold.')
acPMNFSRetriesTimeBetweenThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSRetriesTimeBetweenThresholds.setStatus('current')
if mibBuilder.loadTexts: acPMNFSRetriesTimeBetweenThresholds.setDescription('Percent of interval time for which gauge is above what was determined as the high threshold.')
acPMNFSRetriesTimeAboveHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSRetriesTimeAboveHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMNFSRetriesTimeAboveHighThreshold.setDescription('Percent of interval time for which gauge is between what were determined as the low and high thresholds.')
acPMNFSRetriesFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSRetriesFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMNFSRetriesFullDayAverage.setDescription('The average of full 24 hours.')
acPMNFSAbortDueToMaxRetriesExceededTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 5), )
if mibBuilder.loadTexts: acPMNFSAbortDueToMaxRetriesExceededTable.setStatus('current')
if mibBuilder.loadTexts: acPMNFSAbortDueToMaxRetriesExceededTable.setDescription('The number of times that a request was aborted because of problems communicating with the NFS server. This could be a result of a congested network or busy NFS server. The index corresponds to the index used in the NFSServers INI parameter table.')
acPMNFSAbortDueToMaxRetriesExceededEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 5, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMNFSAbortDueToMaxRetriesExceededRfsNumber"), (0, "AC-PM-System-MIB", "acPMNFSAbortDueToMaxRetriesExceededInterval"))
if mibBuilder.loadTexts: acPMNFSAbortDueToMaxRetriesExceededEntry.setStatus('current')
if mibBuilder.loadTexts: acPMNFSAbortDueToMaxRetriesExceededEntry.setDescription('')
acPMNFSAbortDueToMaxRetriesExceededRfsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: acPMNFSAbortDueToMaxRetriesExceededRfsNumber.setStatus('current')
if mibBuilder.loadTexts: acPMNFSAbortDueToMaxRetriesExceededRfsNumber.setDescription('The remote file system number (0 to 15). As is used in the NFS servers table.')
acPMNFSAbortDueToMaxRetriesExceededInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMNFSAbortDueToMaxRetriesExceededInterval.setStatus('current')
if mibBuilder.loadTexts: acPMNFSAbortDueToMaxRetriesExceededInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMNFSAbortDueToMaxRetriesExceededVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 5, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSAbortDueToMaxRetriesExceededVal.setStatus('current')
if mibBuilder.loadTexts: acPMNFSAbortDueToMaxRetriesExceededVal.setDescription('Value of gauge or counter.')
acPMNFSAbortDueToMaxRetriesExceededVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSAbortDueToMaxRetriesExceededVolume.setStatus('current')
if mibBuilder.loadTexts: acPMNFSAbortDueToMaxRetriesExceededVolume.setDescription('Activity volume.')
acPMNFSAbortDueToMaxRetriesExceededTimeBelowLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSAbortDueToMaxRetriesExceededTimeBelowLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMNFSAbortDueToMaxRetriesExceededTimeBelowLowThreshold.setDescription('Percent of interval time for which gauge is below what was determined as the low threshold.')
acPMNFSAbortDueToMaxRetriesExceededTimeBetweenThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSAbortDueToMaxRetriesExceededTimeBetweenThresholds.setStatus('current')
if mibBuilder.loadTexts: acPMNFSAbortDueToMaxRetriesExceededTimeBetweenThresholds.setDescription('Percent of interval time for which gauge is above what was determined as the high threshold.')
acPMNFSAbortDueToMaxRetriesExceededTimeAboveHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSAbortDueToMaxRetriesExceededTimeAboveHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMNFSAbortDueToMaxRetriesExceededTimeAboveHighThreshold.setDescription('Percent of interval time for which gauge is between what were determined as the low and high thresholds.')
acPMNFSAbortDueToMaxRetriesExceededFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSAbortDueToMaxRetriesExceededFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMNFSAbortDueToMaxRetriesExceededFullDayAverage.setDescription('The average of full 24 hours.')
acPMNFSDelayedResponsesTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 6), )
if mibBuilder.loadTexts: acPMNFSDelayedResponsesTable.setStatus('current')
if mibBuilder.loadTexts: acPMNFSDelayedResponsesTable.setDescription('The number of times that a late reply was received from the NFS server. That is, the reply was received after a timeout and retransmit of that request. The index corresponds to the index used in the NFSServers INI parameter table.')
acPMNFSDelayedResponsesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 6, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMNFSDelayedResponsesRfsNumber"), (0, "AC-PM-System-MIB", "acPMNFSDelayedResponsesInterval"))
if mibBuilder.loadTexts: acPMNFSDelayedResponsesEntry.setStatus('current')
if mibBuilder.loadTexts: acPMNFSDelayedResponsesEntry.setDescription('')
acPMNFSDelayedResponsesRfsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: acPMNFSDelayedResponsesRfsNumber.setStatus('current')
if mibBuilder.loadTexts: acPMNFSDelayedResponsesRfsNumber.setDescription('The remote file system number (0 to 15). As is used in the NFS servers table.')
acPMNFSDelayedResponsesInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 6, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMNFSDelayedResponsesInterval.setStatus('current')
if mibBuilder.loadTexts: acPMNFSDelayedResponsesInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMNFSDelayedResponsesVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 6, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSDelayedResponsesVal.setStatus('current')
if mibBuilder.loadTexts: acPMNFSDelayedResponsesVal.setDescription('Value of gauge or counter.')
acPMNFSDelayedResponsesVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSDelayedResponsesVolume.setStatus('current')
if mibBuilder.loadTexts: acPMNFSDelayedResponsesVolume.setDescription('Activity volume.')
acPMNFSDelayedResponsesTimeBelowLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSDelayedResponsesTimeBelowLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMNFSDelayedResponsesTimeBelowLowThreshold.setDescription('Percent of interval time for which gauge is below what was determined as the low threshold.')
acPMNFSDelayedResponsesTimeBetweenThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSDelayedResponsesTimeBetweenThresholds.setStatus('current')
if mibBuilder.loadTexts: acPMNFSDelayedResponsesTimeBetweenThresholds.setDescription('Percent of interval time for which gauge is above what was determined as the high threshold.')
acPMNFSDelayedResponsesTimeAboveHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSDelayedResponsesTimeAboveHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMNFSDelayedResponsesTimeAboveHighThreshold.setDescription('Percent of interval time for which gauge is between what were determined as the low and high thresholds.')
acPMNFSDelayedResponsesFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSDelayedResponsesFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMNFSDelayedResponsesFullDayAverage.setDescription('The average of full 24 hours.')
acPMNFSBytesDroppedOnRecordTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 7), )
if mibBuilder.loadTexts: acPMNFSBytesDroppedOnRecordTable.setStatus('current')
if mibBuilder.loadTexts: acPMNFSBytesDroppedOnRecordTable.setDescription('The number of bytes of record data dropped because the NFS subsystem cannot push data fast enough to the remote file system. This could be a result of a congested network or busy NFS server. The index corresponds to the index used in the NFSServers INI parameter table.')
acPMNFSBytesDroppedOnRecordEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 7, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMNFSBytesDroppedOnRecordRfsNumber"), (0, "AC-PM-System-MIB", "acPMNFSBytesDroppedOnRecordInterval"))
if mibBuilder.loadTexts: acPMNFSBytesDroppedOnRecordEntry.setStatus('current')
if mibBuilder.loadTexts: acPMNFSBytesDroppedOnRecordEntry.setDescription('')
acPMNFSBytesDroppedOnRecordRfsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: acPMNFSBytesDroppedOnRecordRfsNumber.setStatus('current')
if mibBuilder.loadTexts: acPMNFSBytesDroppedOnRecordRfsNumber.setDescription('The remote file system number (0 to 15). As is used in the NFS servers table.')
acPMNFSBytesDroppedOnRecordInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 7, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMNFSBytesDroppedOnRecordInterval.setStatus('current')
if mibBuilder.loadTexts: acPMNFSBytesDroppedOnRecordInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMNFSBytesDroppedOnRecordVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 7, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSBytesDroppedOnRecordVal.setStatus('current')
if mibBuilder.loadTexts: acPMNFSBytesDroppedOnRecordVal.setDescription('Value of gauge or counter.')
acPMNFSBytesDroppedOnRecordVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSBytesDroppedOnRecordVolume.setStatus('current')
if mibBuilder.loadTexts: acPMNFSBytesDroppedOnRecordVolume.setDescription('Activity volume.')
acPMNFSBytesDroppedOnRecordTimeBelowLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSBytesDroppedOnRecordTimeBelowLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMNFSBytesDroppedOnRecordTimeBelowLowThreshold.setDescription('Percent of interval time for which gauge is below what was determined as the low threshold.')
acPMNFSBytesDroppedOnRecordTimeBetweenThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSBytesDroppedOnRecordTimeBetweenThresholds.setStatus('current')
if mibBuilder.loadTexts: acPMNFSBytesDroppedOnRecordTimeBetweenThresholds.setDescription('Percent of interval time for which gauge is above what was determined as the high threshold.')
acPMNFSBytesDroppedOnRecordTimeAboveHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSBytesDroppedOnRecordTimeAboveHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMNFSBytesDroppedOnRecordTimeAboveHighThreshold.setDescription('Percent of interval time for which gauge is between what were determined as the low and high thresholds.')
acPMNFSBytesDroppedOnRecordFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSBytesDroppedOnRecordFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMNFSBytesDroppedOnRecordFullDayAverage.setDescription('The average of full 24 hours.')
acPMNFSLookupCallsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 8), )
if mibBuilder.loadTexts: acPMNFSLookupCallsTable.setStatus('current')
if mibBuilder.loadTexts: acPMNFSLookupCallsTable.setDescription('The NFS lookup call messages sent to the NFS Server for access to this remote file system. The index corresponds to the index used in the NFSServers INI parameter table.')
acPMNFSLookupCallsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 8, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMNFSLookupCallsRfsNumber"), (0, "AC-PM-System-MIB", "acPMNFSLookupCallsInterval"))
if mibBuilder.loadTexts: acPMNFSLookupCallsEntry.setStatus('current')
if mibBuilder.loadTexts: acPMNFSLookupCallsEntry.setDescription('')
acPMNFSLookupCallsRfsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: acPMNFSLookupCallsRfsNumber.setStatus('current')
if mibBuilder.loadTexts: acPMNFSLookupCallsRfsNumber.setDescription('The remote file system number (0 to 15). As is used in the NFS servers table.')
acPMNFSLookupCallsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 8, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMNFSLookupCallsInterval.setStatus('current')
if mibBuilder.loadTexts: acPMNFSLookupCallsInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMNFSLookupCallsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSLookupCallsVal.setStatus('current')
if mibBuilder.loadTexts: acPMNFSLookupCallsVal.setDescription('Value of gauge or counter.')
acPMNFSLookupCallsVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSLookupCallsVolume.setStatus('current')
if mibBuilder.loadTexts: acPMNFSLookupCallsVolume.setDescription('Activity volume.')
acPMNFSLookupCallsFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSLookupCallsFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMNFSLookupCallsFullDayAverage.setDescription('The average of full 24 hours.')
acPMNFSCreateCallsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 9), )
if mibBuilder.loadTexts: acPMNFSCreateCallsTable.setStatus('current')
if mibBuilder.loadTexts: acPMNFSCreateCallsTable.setDescription('The NFS create call messages sent to the NFS Server for access to this remote file system. The index corresponds to the index used in the NFSServers INI parameter table.')
acPMNFSCreateCallsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 9, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMNFSCreateCallsRfsNumber"), (0, "AC-PM-System-MIB", "acPMNFSCreateCallsInterval"))
if mibBuilder.loadTexts: acPMNFSCreateCallsEntry.setStatus('current')
if mibBuilder.loadTexts: acPMNFSCreateCallsEntry.setDescription('')
acPMNFSCreateCallsRfsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 9, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: acPMNFSCreateCallsRfsNumber.setStatus('current')
if mibBuilder.loadTexts: acPMNFSCreateCallsRfsNumber.setDescription('The remote file system number (0 to 15). As is used in the NFS servers table.')
acPMNFSCreateCallsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 9, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMNFSCreateCallsInterval.setStatus('current')
if mibBuilder.loadTexts: acPMNFSCreateCallsInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMNFSCreateCallsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSCreateCallsVal.setStatus('current')
if mibBuilder.loadTexts: acPMNFSCreateCallsVal.setDescription('Value of gauge or counter.')
acPMNFSCreateCallsVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSCreateCallsVolume.setStatus('current')
if mibBuilder.loadTexts: acPMNFSCreateCallsVolume.setDescription('Activity volume.')
acPMNFSCreateCallsFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSCreateCallsFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMNFSCreateCallsFullDayAverage.setDescription('The average of full 24 hours.')
acPMNFSReadCallsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 10), )
if mibBuilder.loadTexts: acPMNFSReadCallsTable.setStatus('current')
if mibBuilder.loadTexts: acPMNFSReadCallsTable.setDescription('The NFS read call messages sent to the NFS Server for access to this remote file system. The index corresponds to the index used in the NFSServers INI parameter table.')
acPMNFSReadCallsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 10, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMNFSReadCallsRfsNumber"), (0, "AC-PM-System-MIB", "acPMNFSReadCallsInterval"))
if mibBuilder.loadTexts: acPMNFSReadCallsEntry.setStatus('current')
if mibBuilder.loadTexts: acPMNFSReadCallsEntry.setDescription('')
acPMNFSReadCallsRfsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: acPMNFSReadCallsRfsNumber.setStatus('current')
if mibBuilder.loadTexts: acPMNFSReadCallsRfsNumber.setDescription('The remote file system number (0 to 15). As is used in the NFS servers table.')
acPMNFSReadCallsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMNFSReadCallsInterval.setStatus('current')
if mibBuilder.loadTexts: acPMNFSReadCallsInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMNFSReadCallsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSReadCallsVal.setStatus('current')
if mibBuilder.loadTexts: acPMNFSReadCallsVal.setDescription('Value of gauge or counter.')
acPMNFSReadCallsVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSReadCallsVolume.setStatus('current')
if mibBuilder.loadTexts: acPMNFSReadCallsVolume.setDescription('Activity volume.')
acPMNFSReadCallsFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSReadCallsFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMNFSReadCallsFullDayAverage.setDescription('The average of full 24 hours.')
acPMNFSWriteCallsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 11), )
if mibBuilder.loadTexts: acPMNFSWriteCallsTable.setStatus('current')
if mibBuilder.loadTexts: acPMNFSWriteCallsTable.setDescription('The NFS write call messages sent to the NFS Server for access to this remote file system. The index corresponds to the index used in the NFSServers INI parameter table.')
acPMNFSWriteCallsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 11, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMNFSWriteCallsRfsNumber"), (0, "AC-PM-System-MIB", "acPMNFSWriteCallsInterval"))
if mibBuilder.loadTexts: acPMNFSWriteCallsEntry.setStatus('current')
if mibBuilder.loadTexts: acPMNFSWriteCallsEntry.setDescription('')
acPMNFSWriteCallsRfsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: acPMNFSWriteCallsRfsNumber.setStatus('current')
if mibBuilder.loadTexts: acPMNFSWriteCallsRfsNumber.setDescription('The remote file system number (0 to 15). As is used in the NFS servers table.')
acPMNFSWriteCallsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMNFSWriteCallsInterval.setStatus('current')
if mibBuilder.loadTexts: acPMNFSWriteCallsInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMNFSWriteCallsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSWriteCallsVal.setStatus('current')
if mibBuilder.loadTexts: acPMNFSWriteCallsVal.setDescription('Value of gauge or counter.')
acPMNFSWriteCallsVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSWriteCallsVolume.setStatus('current')
if mibBuilder.loadTexts: acPMNFSWriteCallsVolume.setDescription('Activity volume.')
acPMNFSWriteCallsFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 91, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMNFSWriteCallsFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMNFSWriteCallsFullDayAverage.setDescription('The average of full 24 hours.')
acPMSystemMSBG = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101))
acPMRXGoodOctetsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 1), )
if mibBuilder.loadTexts: acPMRXGoodOctetsTable.setStatus('current')
if mibBuilder.loadTexts: acPMRXGoodOctetsTable.setDescription('RX - Good Octets counter (index: 0 - WAN interface 1-12 for LAN interfaces).')
acPMRXGoodOctetsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 1, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMRXGoodOctetsInterfaceNum"), (0, "AC-PM-System-MIB", "acPMRXGoodOctetsInterval"))
if mibBuilder.loadTexts: acPMRXGoodOctetsEntry.setStatus('current')
if mibBuilder.loadTexts: acPMRXGoodOctetsEntry.setDescription('')
acPMRXGoodOctetsInterfaceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 12)))
if mibBuilder.loadTexts: acPMRXGoodOctetsInterfaceNum.setStatus('current')
if mibBuilder.loadTexts: acPMRXGoodOctetsInterfaceNum.setDescription('Interface number: 0 - for the WAN interface and 1-12 for LAN interfaces.')
acPMRXGoodOctetsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMRXGoodOctetsInterval.setStatus('current')
if mibBuilder.loadTexts: acPMRXGoodOctetsInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMRXGoodOctetsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXGoodOctetsVal.setStatus('current')
if mibBuilder.loadTexts: acPMRXGoodOctetsVal.setDescription('Value of gauge or counter.')
acPMRXGoodOctetsAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXGoodOctetsAverage.setStatus('current')
if mibBuilder.loadTexts: acPMRXGoodOctetsAverage.setDescription('Average value within the period time.')
acPMRXGoodOctetsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXGoodOctetsMax.setStatus('current')
if mibBuilder.loadTexts: acPMRXGoodOctetsMax.setDescription('Maximum value within the period time.')
acPMRXGoodOctetsMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXGoodOctetsMin.setStatus('current')
if mibBuilder.loadTexts: acPMRXGoodOctetsMin.setDescription('Minimum value within the period time.')
acPMRXGoodOctetsTimeBelowLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXGoodOctetsTimeBelowLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMRXGoodOctetsTimeBelowLowThreshold.setDescription('Percent of interval time for which gauge is below what was determined as the low threshold.')
acPMRXGoodOctetsTimeBetweenThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXGoodOctetsTimeBetweenThresholds.setStatus('current')
if mibBuilder.loadTexts: acPMRXGoodOctetsTimeBetweenThresholds.setDescription('Percent of interval time for which gauge is above what was determined as the high threshold.')
acPMRXGoodOctetsTimeAboveHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXGoodOctetsTimeAboveHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMRXGoodOctetsTimeAboveHighThreshold.setDescription('Percent of interval time for which gauge is between what were determined as the low and high thresholds.')
acPMRXGoodOctetsFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXGoodOctetsFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMRXGoodOctetsFullDayAverage.setDescription('The average of full 24 hours.')
acPMRXBadOctetsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 2), )
if mibBuilder.loadTexts: acPMRXBadOctetsTable.setStatus('current')
if mibBuilder.loadTexts: acPMRXBadOctetsTable.setDescription('RX - Bad Octets counter (index: 0 - WAN interface 1-12 for LAN interfaces).')
acPMRXBadOctetsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 2, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMRXBadOctetsInterfaceNum"), (0, "AC-PM-System-MIB", "acPMRXBadOctetsInterval"))
if mibBuilder.loadTexts: acPMRXBadOctetsEntry.setStatus('current')
if mibBuilder.loadTexts: acPMRXBadOctetsEntry.setDescription('')
acPMRXBadOctetsInterfaceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 12)))
if mibBuilder.loadTexts: acPMRXBadOctetsInterfaceNum.setStatus('current')
if mibBuilder.loadTexts: acPMRXBadOctetsInterfaceNum.setDescription('Interface number: 0 - for the WAN interface and 1-12 for LAN interfaces.')
acPMRXBadOctetsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMRXBadOctetsInterval.setStatus('current')
if mibBuilder.loadTexts: acPMRXBadOctetsInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMRXBadOctetsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXBadOctetsVal.setStatus('current')
if mibBuilder.loadTexts: acPMRXBadOctetsVal.setDescription('Value of gauge or counter.')
acPMRXBadOctetsAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXBadOctetsAverage.setStatus('current')
if mibBuilder.loadTexts: acPMRXBadOctetsAverage.setDescription('Average value within the period time.')
acPMRXBadOctetsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXBadOctetsMax.setStatus('current')
if mibBuilder.loadTexts: acPMRXBadOctetsMax.setDescription('Maximum value within the period time.')
acPMRXBadOctetsMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXBadOctetsMin.setStatus('current')
if mibBuilder.loadTexts: acPMRXBadOctetsMin.setDescription('Minimum value within the period time.')
acPMRXBadOctetsTimeBelowLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXBadOctetsTimeBelowLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMRXBadOctetsTimeBelowLowThreshold.setDescription('Percent of interval time for which gauge is below what was determined as the low threshold.')
acPMRXBadOctetsTimeBetweenThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXBadOctetsTimeBetweenThresholds.setStatus('current')
if mibBuilder.loadTexts: acPMRXBadOctetsTimeBetweenThresholds.setDescription('Percent of interval time for which gauge is above what was determined as the high threshold.')
acPMRXBadOctetsTimeAboveHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXBadOctetsTimeAboveHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMRXBadOctetsTimeAboveHighThreshold.setDescription('Percent of interval time for which gauge is between what were determined as the low and high thresholds.')
acPMRXBadOctetsFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXBadOctetsFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMRXBadOctetsFullDayAverage.setDescription('The average of full 24 hours.')
acPMRXUndersizePacketsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 3), )
if mibBuilder.loadTexts: acPMRXUndersizePacketsTable.setStatus('current')
if mibBuilder.loadTexts: acPMRXUndersizePacketsTable.setDescription('RX - Undersize Packets counter (index: 0 - WAN interface 1-12 for LAN interfaces).')
acPMRXUndersizePacketsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 3, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMRXUndersizePacketsInterfaceNum"), (0, "AC-PM-System-MIB", "acPMRXUndersizePacketsInterval"))
if mibBuilder.loadTexts: acPMRXUndersizePacketsEntry.setStatus('current')
if mibBuilder.loadTexts: acPMRXUndersizePacketsEntry.setDescription('')
acPMRXUndersizePacketsInterfaceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 12)))
if mibBuilder.loadTexts: acPMRXUndersizePacketsInterfaceNum.setStatus('current')
if mibBuilder.loadTexts: acPMRXUndersizePacketsInterfaceNum.setDescription('Interface number: 0 - for the WAN interface and 1-12 for LAN interfaces.')
acPMRXUndersizePacketsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMRXUndersizePacketsInterval.setStatus('current')
if mibBuilder.loadTexts: acPMRXUndersizePacketsInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMRXUndersizePacketsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXUndersizePacketsVal.setStatus('current')
if mibBuilder.loadTexts: acPMRXUndersizePacketsVal.setDescription('Value of gauge or counter.')
acPMRXUndersizePacketsAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXUndersizePacketsAverage.setStatus('current')
if mibBuilder.loadTexts: acPMRXUndersizePacketsAverage.setDescription('Average value within the period time.')
acPMRXUndersizePacketsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXUndersizePacketsMax.setStatus('current')
if mibBuilder.loadTexts: acPMRXUndersizePacketsMax.setDescription('Maximum value within the period time.')
acPMRXUndersizePacketsMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXUndersizePacketsMin.setStatus('current')
if mibBuilder.loadTexts: acPMRXUndersizePacketsMin.setDescription('Minimum value within the period time.')
acPMRXUndersizePacketsTimeBelowLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXUndersizePacketsTimeBelowLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMRXUndersizePacketsTimeBelowLowThreshold.setDescription('Percent of interval time for which gauge is below what was determined as the low threshold.')
acPMRXUndersizePacketsTimeBetweenThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXUndersizePacketsTimeBetweenThresholds.setStatus('current')
if mibBuilder.loadTexts: acPMRXUndersizePacketsTimeBetweenThresholds.setDescription('Percent of interval time for which gauge is above what was determined as the high threshold.')
acPMRXUndersizePacketsTimeAboveHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXUndersizePacketsTimeAboveHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMRXUndersizePacketsTimeAboveHighThreshold.setDescription('Percent of interval time for which gauge is between what were determined as the low and high thresholds.')
acPMRXUndersizePacketsFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXUndersizePacketsFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMRXUndersizePacketsFullDayAverage.setDescription('The average of full 24 hours.')
acPMRXOversizePacketsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 4), )
if mibBuilder.loadTexts: acPMRXOversizePacketsTable.setStatus('current')
if mibBuilder.loadTexts: acPMRXOversizePacketsTable.setDescription('RX - Oversize Packets counter (index: 0 - WAN interface 1-12 for LAN interfaces).')
acPMRXOversizePacketsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 4, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMRXOversizePacketsInterfaceNum"), (0, "AC-PM-System-MIB", "acPMRXOversizePacketsInterval"))
if mibBuilder.loadTexts: acPMRXOversizePacketsEntry.setStatus('current')
if mibBuilder.loadTexts: acPMRXOversizePacketsEntry.setDescription('')
acPMRXOversizePacketsInterfaceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 12)))
if mibBuilder.loadTexts: acPMRXOversizePacketsInterfaceNum.setStatus('current')
if mibBuilder.loadTexts: acPMRXOversizePacketsInterfaceNum.setDescription('Interface number: 0 - for the WAN interface and 1-12 for LAN interfaces.')
acPMRXOversizePacketsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMRXOversizePacketsInterval.setStatus('current')
if mibBuilder.loadTexts: acPMRXOversizePacketsInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMRXOversizePacketsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXOversizePacketsVal.setStatus('current')
if mibBuilder.loadTexts: acPMRXOversizePacketsVal.setDescription('Value of gauge or counter.')
acPMRXOversizePacketsAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXOversizePacketsAverage.setStatus('current')
if mibBuilder.loadTexts: acPMRXOversizePacketsAverage.setDescription('Average value within the period time.')
acPMRXOversizePacketsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXOversizePacketsMax.setStatus('current')
if mibBuilder.loadTexts: acPMRXOversizePacketsMax.setDescription('Maximum value within the period time.')
acPMRXOversizePacketsMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXOversizePacketsMin.setStatus('current')
if mibBuilder.loadTexts: acPMRXOversizePacketsMin.setDescription('Minimum value within the period time.')
acPMRXOversizePacketsTimeBelowLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXOversizePacketsTimeBelowLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMRXOversizePacketsTimeBelowLowThreshold.setDescription('Percent of interval time for which gauge is below what was determined as the low threshold.')
acPMRXOversizePacketsTimeBetweenThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXOversizePacketsTimeBetweenThresholds.setStatus('current')
if mibBuilder.loadTexts: acPMRXOversizePacketsTimeBetweenThresholds.setDescription('Percent of interval time for which gauge is above what was determined as the high threshold.')
acPMRXOversizePacketsTimeAboveHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXOversizePacketsTimeAboveHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMRXOversizePacketsTimeAboveHighThreshold.setDescription('Percent of interval time for which gauge is between what were determined as the low and high thresholds.')
acPMRXOversizePacketsFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXOversizePacketsFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMRXOversizePacketsFullDayAverage.setDescription('The average of full 24 hours.')
acPMRXMacErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 5), )
if mibBuilder.loadTexts: acPMRXMacErrorsTable.setStatus('current')
if mibBuilder.loadTexts: acPMRXMacErrorsTable.setDescription('RX - MAC Errors counter (index: 0 - WAN interface 1-12 for LAN interfaces).')
acPMRXMacErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 5, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMRXMacErrorsInterfaceNum"), (0, "AC-PM-System-MIB", "acPMRXMacErrorsInterval"))
if mibBuilder.loadTexts: acPMRXMacErrorsEntry.setStatus('current')
if mibBuilder.loadTexts: acPMRXMacErrorsEntry.setDescription('')
acPMRXMacErrorsInterfaceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 12)))
if mibBuilder.loadTexts: acPMRXMacErrorsInterfaceNum.setStatus('current')
if mibBuilder.loadTexts: acPMRXMacErrorsInterfaceNum.setDescription('Interface number: 0 - for the WAN interface and 1-12 for LAN interfaces.')
acPMRXMacErrorsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMRXMacErrorsInterval.setStatus('current')
if mibBuilder.loadTexts: acPMRXMacErrorsInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMRXMacErrorsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 5, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXMacErrorsVal.setStatus('current')
if mibBuilder.loadTexts: acPMRXMacErrorsVal.setDescription('Value of gauge or counter.')
acPMRXMacErrorsAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXMacErrorsAverage.setStatus('current')
if mibBuilder.loadTexts: acPMRXMacErrorsAverage.setDescription('Average value within the period time.')
acPMRXMacErrorsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXMacErrorsMax.setStatus('current')
if mibBuilder.loadTexts: acPMRXMacErrorsMax.setDescription('Maximum value within the period time.')
acPMRXMacErrorsMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXMacErrorsMin.setStatus('current')
if mibBuilder.loadTexts: acPMRXMacErrorsMin.setDescription('Minimum value within the period time.')
acPMRXMacErrorsTimeBelowLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXMacErrorsTimeBelowLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMRXMacErrorsTimeBelowLowThreshold.setDescription('Percent of interval time for which gauge is below what was determined as the low threshold.')
acPMRXMacErrorsTimeBetweenThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXMacErrorsTimeBetweenThresholds.setStatus('current')
if mibBuilder.loadTexts: acPMRXMacErrorsTimeBetweenThresholds.setDescription('Percent of interval time for which gauge is above what was determined as the high threshold.')
acPMRXMacErrorsTimeAboveHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXMacErrorsTimeAboveHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMRXMacErrorsTimeAboveHighThreshold.setDescription('Percent of interval time for which gauge is between what were determined as the low and high thresholds.')
acPMRXMacErrorsFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXMacErrorsFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMRXMacErrorsFullDayAverage.setDescription('The average of full 24 hours.')
acPMRXFCSErroredPacketsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 6), )
if mibBuilder.loadTexts: acPMRXFCSErroredPacketsTable.setStatus('current')
if mibBuilder.loadTexts: acPMRXFCSErroredPacketsTable.setDescription('RX - FCS Errored Packets counter (index: 0 - WAN interface 1-12 for LAN interfaces).')
acPMRXFCSErroredPacketsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 6, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMRXFCSErroredPacketsInterfaceNum"), (0, "AC-PM-System-MIB", "acPMRXFCSErroredPacketsInterval"))
if mibBuilder.loadTexts: acPMRXFCSErroredPacketsEntry.setStatus('current')
if mibBuilder.loadTexts: acPMRXFCSErroredPacketsEntry.setDescription('')
acPMRXFCSErroredPacketsInterfaceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 12)))
if mibBuilder.loadTexts: acPMRXFCSErroredPacketsInterfaceNum.setStatus('current')
if mibBuilder.loadTexts: acPMRXFCSErroredPacketsInterfaceNum.setDescription('Interface number: 0 - for the WAN interface and 1-12 for LAN interfaces.')
acPMRXFCSErroredPacketsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 6, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMRXFCSErroredPacketsInterval.setStatus('current')
if mibBuilder.loadTexts: acPMRXFCSErroredPacketsInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMRXFCSErroredPacketsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 6, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXFCSErroredPacketsVal.setStatus('current')
if mibBuilder.loadTexts: acPMRXFCSErroredPacketsVal.setDescription('Value of gauge or counter.')
acPMRXFCSErroredPacketsAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXFCSErroredPacketsAverage.setStatus('current')
if mibBuilder.loadTexts: acPMRXFCSErroredPacketsAverage.setDescription('Average value within the period time.')
acPMRXFCSErroredPacketsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXFCSErroredPacketsMax.setStatus('current')
if mibBuilder.loadTexts: acPMRXFCSErroredPacketsMax.setDescription('Maximum value within the period time.')
acPMRXFCSErroredPacketsMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXFCSErroredPacketsMin.setStatus('current')
if mibBuilder.loadTexts: acPMRXFCSErroredPacketsMin.setDescription('Minimum value within the period time.')
acPMRXFCSErroredPacketsTimeBelowLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXFCSErroredPacketsTimeBelowLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMRXFCSErroredPacketsTimeBelowLowThreshold.setDescription('Percent of interval time for which gauge is below what was determined as the low threshold.')
acPMRXFCSErroredPacketsTimeBetweenThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXFCSErroredPacketsTimeBetweenThresholds.setStatus('current')
if mibBuilder.loadTexts: acPMRXFCSErroredPacketsTimeBetweenThresholds.setDescription('Percent of interval time for which gauge is above what was determined as the high threshold.')
acPMRXFCSErroredPacketsTimeAboveHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXFCSErroredPacketsTimeAboveHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMRXFCSErroredPacketsTimeAboveHighThreshold.setDescription('Percent of interval time for which gauge is between what were determined as the low and high thresholds.')
acPMRXFCSErroredPacketsFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXFCSErroredPacketsFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMRXFCSErroredPacketsFullDayAverage.setDescription('The average of full 24 hours.')
acPMRXDiscardPacketsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 7), )
if mibBuilder.loadTexts: acPMRXDiscardPacketsTable.setStatus('current')
if mibBuilder.loadTexts: acPMRXDiscardPacketsTable.setDescription('RX - Discard Packets counter (index: 0 - WAN interface 1-12 for LAN interfaces).')
acPMRXDiscardPacketsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 7, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMRXDiscardPacketsInterfaceNum"), (0, "AC-PM-System-MIB", "acPMRXDiscardPacketsInterval"))
if mibBuilder.loadTexts: acPMRXDiscardPacketsEntry.setStatus('current')
if mibBuilder.loadTexts: acPMRXDiscardPacketsEntry.setDescription('')
acPMRXDiscardPacketsInterfaceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 12)))
if mibBuilder.loadTexts: acPMRXDiscardPacketsInterfaceNum.setStatus('current')
if mibBuilder.loadTexts: acPMRXDiscardPacketsInterfaceNum.setDescription('Interface number: 0 - for the WAN interface and 1-12 for LAN interfaces.')
acPMRXDiscardPacketsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 7, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMRXDiscardPacketsInterval.setStatus('current')
if mibBuilder.loadTexts: acPMRXDiscardPacketsInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMRXDiscardPacketsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 7, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXDiscardPacketsVal.setStatus('current')
if mibBuilder.loadTexts: acPMRXDiscardPacketsVal.setDescription('Value of gauge or counter.')
acPMRXDiscardPacketsAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXDiscardPacketsAverage.setStatus('current')
if mibBuilder.loadTexts: acPMRXDiscardPacketsAverage.setDescription('Average value within the period time.')
acPMRXDiscardPacketsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXDiscardPacketsMax.setStatus('current')
if mibBuilder.loadTexts: acPMRXDiscardPacketsMax.setDescription('Maximum value within the period time.')
acPMRXDiscardPacketsMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXDiscardPacketsMin.setStatus('current')
if mibBuilder.loadTexts: acPMRXDiscardPacketsMin.setDescription('Minimum value within the period time.')
acPMRXDiscardPacketsTimeBelowLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXDiscardPacketsTimeBelowLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMRXDiscardPacketsTimeBelowLowThreshold.setDescription('Percent of interval time for which gauge is below what was determined as the low threshold.')
acPMRXDiscardPacketsTimeBetweenThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXDiscardPacketsTimeBetweenThresholds.setStatus('current')
if mibBuilder.loadTexts: acPMRXDiscardPacketsTimeBetweenThresholds.setDescription('Percent of interval time for which gauge is above what was determined as the high threshold.')
acPMRXDiscardPacketsTimeAboveHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXDiscardPacketsTimeAboveHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMRXDiscardPacketsTimeAboveHighThreshold.setDescription('Percent of interval time for which gauge is between what were determined as the low and high thresholds.')
acPMRXDiscardPacketsFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMRXDiscardPacketsFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMRXDiscardPacketsFullDayAverage.setDescription('The average of full 24 hours.')
acPMTXOctetsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 8), )
if mibBuilder.loadTexts: acPMTXOctetsTable.setStatus('current')
if mibBuilder.loadTexts: acPMTXOctetsTable.setDescription('TX - Octets counter (index: 0 - WAN interface 1-12 for LAN interfaces).')
acPMTXOctetsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 8, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMTXOctetsInterfaceNum"), (0, "AC-PM-System-MIB", "acPMTXOctetsInterval"))
if mibBuilder.loadTexts: acPMTXOctetsEntry.setStatus('current')
if mibBuilder.loadTexts: acPMTXOctetsEntry.setDescription('')
acPMTXOctetsInterfaceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 12)))
if mibBuilder.loadTexts: acPMTXOctetsInterfaceNum.setStatus('current')
if mibBuilder.loadTexts: acPMTXOctetsInterfaceNum.setDescription('Interface number: 0 - for the WAN interface and 1-12 for LAN interfaces.')
acPMTXOctetsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 8, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMTXOctetsInterval.setStatus('current')
if mibBuilder.loadTexts: acPMTXOctetsInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMTXOctetsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 8, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTXOctetsVal.setStatus('current')
if mibBuilder.loadTexts: acPMTXOctetsVal.setDescription('Value of gauge or counter.')
acPMTXOctetsAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTXOctetsAverage.setStatus('current')
if mibBuilder.loadTexts: acPMTXOctetsAverage.setDescription('Average value within the period time.')
acPMTXOctetsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTXOctetsMax.setStatus('current')
if mibBuilder.loadTexts: acPMTXOctetsMax.setDescription('Maximum value within the period time.')
acPMTXOctetsMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTXOctetsMin.setStatus('current')
if mibBuilder.loadTexts: acPMTXOctetsMin.setDescription('Minimum value within the period time.')
acPMTXOctetsTimeBelowLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTXOctetsTimeBelowLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMTXOctetsTimeBelowLowThreshold.setDescription('Percent of interval time for which gauge is below what was determined as the low threshold.')
acPMTXOctetsTimeBetweenThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTXOctetsTimeBetweenThresholds.setStatus('current')
if mibBuilder.loadTexts: acPMTXOctetsTimeBetweenThresholds.setDescription('Percent of interval time for which gauge is above what was determined as the high threshold.')
acPMTXOctetsTimeAboveHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTXOctetsTimeAboveHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMTXOctetsTimeAboveHighThreshold.setDescription('Percent of interval time for which gauge is between what were determined as the low and high thresholds.')
acPMTXOctetsFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTXOctetsFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMTXOctetsFullDayAverage.setDescription('The average of full 24 hours.')
acPMTXPacketsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 9), )
if mibBuilder.loadTexts: acPMTXPacketsTable.setStatus('current')
if mibBuilder.loadTexts: acPMTXPacketsTable.setDescription('TX - Packets counter (index: 0 - WAN interface 1-12 for LAN interfaces).')
acPMTXPacketsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 9, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMTXPacketsInterfaceNum"), (0, "AC-PM-System-MIB", "acPMTXPacketsInterval"))
if mibBuilder.loadTexts: acPMTXPacketsEntry.setStatus('current')
if mibBuilder.loadTexts: acPMTXPacketsEntry.setDescription('')
acPMTXPacketsInterfaceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 9, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 12)))
if mibBuilder.loadTexts: acPMTXPacketsInterfaceNum.setStatus('current')
if mibBuilder.loadTexts: acPMTXPacketsInterfaceNum.setDescription('Interface number: 0 - for the WAN interface and 1-12 for LAN interfaces.')
acPMTXPacketsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 9, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMTXPacketsInterval.setStatus('current')
if mibBuilder.loadTexts: acPMTXPacketsInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMTXPacketsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 9, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTXPacketsVal.setStatus('current')
if mibBuilder.loadTexts: acPMTXPacketsVal.setDescription('Value of gauge or counter.')
acPMTXPacketsAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTXPacketsAverage.setStatus('current')
if mibBuilder.loadTexts: acPMTXPacketsAverage.setDescription('Average value within the period time.')
acPMTXPacketsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTXPacketsMax.setStatus('current')
if mibBuilder.loadTexts: acPMTXPacketsMax.setDescription('Maximum value within the period time.')
acPMTXPacketsMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTXPacketsMin.setStatus('current')
if mibBuilder.loadTexts: acPMTXPacketsMin.setDescription('Minimum value within the period time.')
acPMTXPacketsTimeBelowLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTXPacketsTimeBelowLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMTXPacketsTimeBelowLowThreshold.setDescription('Percent of interval time for which gauge is below what was determined as the low threshold.')
acPMTXPacketsTimeBetweenThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTXPacketsTimeBetweenThresholds.setStatus('current')
if mibBuilder.loadTexts: acPMTXPacketsTimeBetweenThresholds.setDescription('Percent of interval time for which gauge is above what was determined as the high threshold.')
acPMTXPacketsTimeAboveHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTXPacketsTimeAboveHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMTXPacketsTimeAboveHighThreshold.setDescription('Percent of interval time for which gauge is between what were determined as the low and high thresholds.')
acPMTXPacketsFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 9, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTXPacketsFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMTXPacketsFullDayAverage.setDescription('The average of full 24 hours.')
acPMTXCollisionsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 10), )
if mibBuilder.loadTexts: acPMTXCollisionsTable.setStatus('current')
if mibBuilder.loadTexts: acPMTXCollisionsTable.setDescription('TX - Collisions counter (index: 0 - WAN interface 1-12 for LAN interfaces).')
acPMTXCollisionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 10, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMTXCollisionsInterfaceNum"), (0, "AC-PM-System-MIB", "acPMTXCollisionsInterval"))
if mibBuilder.loadTexts: acPMTXCollisionsEntry.setStatus('current')
if mibBuilder.loadTexts: acPMTXCollisionsEntry.setDescription('')
acPMTXCollisionsInterfaceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 12)))
if mibBuilder.loadTexts: acPMTXCollisionsInterfaceNum.setStatus('current')
if mibBuilder.loadTexts: acPMTXCollisionsInterfaceNum.setDescription('Interface number: 0 - for the WAN interface and 1-12 for LAN interfaces.')
acPMTXCollisionsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMTXCollisionsInterval.setStatus('current')
if mibBuilder.loadTexts: acPMTXCollisionsInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMTXCollisionsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 10, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTXCollisionsVal.setStatus('current')
if mibBuilder.loadTexts: acPMTXCollisionsVal.setDescription('Value of gauge or counter.')
acPMTXCollisionsAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTXCollisionsAverage.setStatus('current')
if mibBuilder.loadTexts: acPMTXCollisionsAverage.setDescription('Average value within the period time.')
acPMTXCollisionsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTXCollisionsMax.setStatus('current')
if mibBuilder.loadTexts: acPMTXCollisionsMax.setDescription('Maximum value within the period time.')
acPMTXCollisionsMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTXCollisionsMin.setStatus('current')
if mibBuilder.loadTexts: acPMTXCollisionsMin.setDescription('Minimum value within the period time.')
acPMTXCollisionsTimeBelowLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTXCollisionsTimeBelowLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMTXCollisionsTimeBelowLowThreshold.setDescription('Percent of interval time for which gauge is below what was determined as the low threshold.')
acPMTXCollisionsTimeBetweenThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTXCollisionsTimeBetweenThresholds.setStatus('current')
if mibBuilder.loadTexts: acPMTXCollisionsTimeBetweenThresholds.setDescription('Percent of interval time for which gauge is above what was determined as the high threshold.')
acPMTXCollisionsTimeAboveHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTXCollisionsTimeAboveHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMTXCollisionsTimeAboveHighThreshold.setDescription('Percent of interval time for which gauge is between what were determined as the low and high thresholds.')
acPMTXCollisionsFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 10, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTXCollisionsFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMTXCollisionsFullDayAverage.setDescription('The average of full 24 hours.')
acPMTXLatePacketsTable = MibTable((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 11), )
if mibBuilder.loadTexts: acPMTXLatePacketsTable.setStatus('current')
if mibBuilder.loadTexts: acPMTXLatePacketsTable.setDescription('TX - Late Packets counter (index: 0 - WAN interface 1-12 for LAN interfaces).')
acPMTXLatePacketsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 11, 1), ).setIndexNames((0, "AC-PM-System-MIB", "acPMTXLatePacketsInterfaceNum"), (0, "AC-PM-System-MIB", "acPMTXLatePacketsInterval"))
if mibBuilder.loadTexts: acPMTXLatePacketsEntry.setStatus('current')
if mibBuilder.loadTexts: acPMTXLatePacketsEntry.setDescription('')
acPMTXLatePacketsInterfaceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 12)))
if mibBuilder.loadTexts: acPMTXLatePacketsInterfaceNum.setStatus('current')
if mibBuilder.loadTexts: acPMTXLatePacketsInterfaceNum.setDescription('Interface number: 0 - for the WAN interface and 1-12 for LAN interfaces.')
acPMTXLatePacketsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)))
if mibBuilder.loadTexts: acPMTXLatePacketsInterval.setStatus('current')
if mibBuilder.loadTexts: acPMTXLatePacketsInterval.setDescription('Interval index. 0 - current period (incomplete monitoring - mid period). 1 - Last full period. 2 - One before last.')
acPMTXLatePacketsVal = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 11, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTXLatePacketsVal.setStatus('current')
if mibBuilder.loadTexts: acPMTXLatePacketsVal.setDescription('Value of gauge or counter.')
acPMTXLatePacketsAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 11, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTXLatePacketsAverage.setStatus('current')
if mibBuilder.loadTexts: acPMTXLatePacketsAverage.setDescription('Average value within the period time.')
acPMTXLatePacketsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 11, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTXLatePacketsMax.setStatus('current')
if mibBuilder.loadTexts: acPMTXLatePacketsMax.setDescription('Maximum value within the period time.')
acPMTXLatePacketsMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 11, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTXLatePacketsMin.setStatus('current')
if mibBuilder.loadTexts: acPMTXLatePacketsMin.setDescription('Minimum value within the period time.')
acPMTXLatePacketsTimeBelowLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 11, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTXLatePacketsTimeBelowLowThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMTXLatePacketsTimeBelowLowThreshold.setDescription('Percent of interval time for which gauge is below what was determined as the low threshold.')
acPMTXLatePacketsTimeBetweenThresholds = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 11, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTXLatePacketsTimeBetweenThresholds.setStatus('current')
if mibBuilder.loadTexts: acPMTXLatePacketsTimeBetweenThresholds.setDescription('Percent of interval time for which gauge is above what was determined as the high threshold.')
acPMTXLatePacketsTimeAboveHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 11, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTXLatePacketsTimeAboveHighThreshold.setStatus('current')
if mibBuilder.loadTexts: acPMTXLatePacketsTimeAboveHighThreshold.setDescription('Percent of interval time for which gauge is between what were determined as the low and high thresholds.')
acPMTXLatePacketsFullDayAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 5003, 10, 11, 2, 101, 11, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPMTXLatePacketsFullDayAverage.setStatus('current')
if mibBuilder.loadTexts: acPMTXLatePacketsFullDayAverage.setDescription('The average of full 24 hours.')
mibBuilder.exportSymbols("AC-PM-System-MIB", acPMNFSAbortDueToMaxRetriesExceededFullDayAverage=acPMNFSAbortDueToMaxRetriesExceededFullDayAverage, acPMTXCollisionsMin=acPMTXCollisionsMin, acPMDhcpResponseTimeTimeBetweenThresholds=acPMDhcpResponseTimeTimeBetweenThresholds, acPMNFSRetriesTimeAboveHighThreshold=acPMNFSRetriesTimeAboveHighThreshold, acPMSctpRetransBytesTable=acPMSctpRetransBytesTable, acPMNFSCurrentRequestsEntry=acPMNFSCurrentRequestsEntry, acPMNFSCurrentRequestsTable=acPMNFSCurrentRequestsTable, acPMCongestionIPresourcesVal=acPMCongestionIPresourcesVal, acPMTXCollisionsTable=acPMTXCollisionsTable, acPMNFSBytesDroppedOnRecordFullDayAverage=acPMNFSBytesDroppedOnRecordFullDayAverage, acPMRXUndersizePacketsTimeBetweenThresholds=acPMRXUndersizePacketsTimeBetweenThresholds, acPMRXMacErrorsInterval=acPMRXMacErrorsInterval, acPMCongestionAttributes=acPMCongestionAttributes, acPMRXUndersizePacketsEntry=acPMRXUndersizePacketsEntry, acPMSystemConfiguration=acPMSystemConfiguration, acPMNFSCreateCallsVal=acPMNFSCreateCallsVal, acPMIGMPLeaveGroupSentInterval=acPMIGMPLeaveGroupSentInterval, acPMRXUndersizePacketsMin=acPMRXUndersizePacketsMin, acPMNFSReadCallsTable=acPMNFSReadCallsTable, acPMNFSBytesDroppedOnRecordTimeBetweenThresholds=acPMNFSBytesDroppedOnRecordTimeBetweenThresholds, acPMRXMacErrorsMax=acPMRXMacErrorsMax, acPMRXFCSErroredPacketsMin=acPMRXFCSErroredPacketsMin, acPMNFSRoundTripTimeMsTable=acPMNFSRoundTripTimeMsTable, acPMRXBadOctetsTimeBetweenThresholds=acPMRXBadOctetsTimeBetweenThresholds, acPMMulticastUDPPacketsReceivedEntry=acPMMulticastUDPPacketsReceivedEntry, acPMNetUtilPacketsDirection=acPMNetUtilPacketsDirection, acPMNFSDelayedResponsesVolume=acPMNFSDelayedResponsesVolume, acPMTXOctetsEntry=acPMTXOctetsEntry, acPMNFSBytesDroppedOnRecordRfsNumber=acPMNFSBytesDroppedOnRecordRfsNumber, acPMNFSAbortDueToMaxRetriesExceededTimeBetweenThresholds=acPMNFSAbortDueToMaxRetriesExceededTimeBetweenThresholds, acPMIGMPMembershipReportsSentFullDayAverage=acPMIGMPMembershipReportsSentFullDayAverage, acPMNetUtilKBytesTotal=acPMNetUtilKBytesTotal, acPMMSBGAttributesRXGoodOctetsLowThreshold=acPMMSBGAttributesRXGoodOctetsLowThreshold, acPMNetConnectionStateChanges=acPMNetConnectionStateChanges, acPMCongestionGeneralResourcesInterval=acPMCongestionGeneralResourcesInterval, acPMTXPacketsMin=acPMTXPacketsMin, acPMNFSRoundTripTimeMsMax=acPMNFSRoundTripTimeMsMax, acPMMulticastUDPPacketsReceivedInterval=acPMMulticastUDPPacketsReceivedInterval, acPMNFSAttributesRetriesHighThreshold=acPMNFSAttributesRetriesHighThreshold, acPMTXOctetsTimeAboveHighThreshold=acPMTXOctetsTimeAboveHighThreshold, acPMNFSLookupCallsVolume=acPMNFSLookupCallsVolume, acPMTXLatePacketsInterval=acPMTXLatePacketsInterval, acPMNetUtilPacketsMax=acPMNetUtilPacketsMax, acPMNetUtilKBytesVal=acPMNetUtilKBytesVal, acPMMSBGAttributesRXBadOctetsLowThreshold=acPMMSBGAttributesRXBadOctetsLowThreshold, acPMNFSLookupCallsVal=acPMNFSLookupCallsVal, acPMNFSCreateCallsInterval=acPMNFSCreateCallsInterval, acPMMulticastIPPacketsReceivedTable=acPMMulticastIPPacketsReceivedTable, acPMRXGoodOctetsMin=acPMRXGoodOctetsMin, acPMStunDiscoveryVal=acPMStunDiscoveryVal, acPMRXGoodOctetsAverage=acPMRXGoodOctetsAverage, acPMMSBGAttributes=acPMMSBGAttributes, acPMNetConnectionStateActiveTime=acPMNetConnectionStateActiveTime, acPMNetUtilPacketsMin=acPMNetUtilPacketsMin, acPMRXFCSErroredPacketsTable=acPMRXFCSErroredPacketsTable, acPMMulticastUDPPacketsRejectedInterval=acPMMulticastUDPPacketsRejectedInterval, acPMSctpRetransBytesFullDayAverage=acPMSctpRetransBytesFullDayAverage, acPMNFSCreateCallsFullDayAverage=acPMNFSCreateCallsFullDayAverage, acPMMSBGAttributesTXLatePacketsLowThreshold=acPMMSBGAttributesTXLatePacketsLowThreshold, acPMIGMPGeneralQueryReceivedMax=acPMIGMPGeneralQueryReceivedMax, acPMNFSRoundTripTimeMsVal=acPMNFSRoundTripTimeMsVal, acPMNetUtilPacketsVolume=acPMNetUtilPacketsVolume, acPMDhcpResponseTimeTimeAboveHighThreshold=acPMDhcpResponseTimeTimeAboveHighThreshold, acPMIGMPMembershipReportsSentTable=acPMIGMPMembershipReportsSentTable, acPMRXMacErrorsInterfaceNum=acPMRXMacErrorsInterfaceNum, acPMRXOversizePacketsEntry=acPMRXOversizePacketsEntry, acPMTXPacketsInterfaceNum=acPMTXPacketsInterfaceNum, acPMRXDiscardPacketsTimeAboveHighThreshold=acPMRXDiscardPacketsTimeAboveHighThreshold, acPMNFSAbortDueToMaxRetriesExceededVal=acPMNFSAbortDueToMaxRetriesExceededVal, acPMRXOversizePacketsTable=acPMRXOversizePacketsTable, acPMIGMPMembershipReportsSentMin=acPMIGMPMembershipReportsSentMin, acPMDhcpRequestVal=acPMDhcpRequestVal, acPMIGMPSpecificQueryReceivedInterval=acPMIGMPSpecificQueryReceivedInterval, acPMIGMPLeaveGroupSentAverage=acPMIGMPLeaveGroupSentAverage, acPMTXLatePacketsTimeBetweenThresholds=acPMTXLatePacketsTimeBetweenThresholds, acPMCongestionDSPresourcesEntry=acPMCongestionDSPresourcesEntry, acPMNFSRequestsType=acPMNFSRequestsType, acPMNFSRoundTripTimeMsFullDayAverage=acPMNFSRoundTripTimeMsFullDayAverage, acPMRXGoodOctetsTimeAboveHighThreshold=acPMRXGoodOctetsTimeAboveHighThreshold, acPMDhcpResponseTimeMin=acPMDhcpResponseTimeMin, acPMMulticastUDPPacketsReceivedVal=acPMMulticastUDPPacketsReceivedVal, acPMStunQueryInterval=acPMStunQueryInterval, acPMNetUtilDiscardedPacketsVal=acPMNetUtilDiscardedPacketsVal, acPMNetConnectionAttributesStateLowThreshold=acPMNetConnectionAttributesStateLowThreshold, acPMNFSBytesDroppedOnRecordVal=acPMNFSBytesDroppedOnRecordVal, acPMMulticastUDPPacketsReceivedTable=acPMMulticastUDPPacketsReceivedTable, acPMNetUtilKBytesTable=acPMNetUtilKBytesTable, acPMRXMacErrorsAverage=acPMRXMacErrorsAverage, acPMCongestionConferenceResourcesEntry=acPMCongestionConferenceResourcesEntry, acPMIGMPSpecificQueryReceivedVal=acPMIGMPSpecificQueryReceivedVal, acPMRXGoodOctetsTable=acPMRXGoodOctetsTable, acPMSctpRcvBytesLastSecondFullDayAverage=acPMSctpRcvBytesLastSecondFullDayAverage, acPMCongestionIPresourcesFullDayAverage=acPMCongestionIPresourcesFullDayAverage, acPMNFSRetriesVal=acPMNFSRetriesVal, acPMMulticastUDPPacketsRejectedFullDayAverage=acPMMulticastUDPPacketsRejectedFullDayAverage, acPMRXGoodOctetsMax=acPMRXGoodOctetsMax, acPMNetUtilKBytesTimeAboveHighThreshold=acPMNetUtilKBytesTimeAboveHighThreshold, acPMMulticastUDPPacketsRejectedVal=acPMMulticastUDPPacketsRejectedVal, acPMSctpRcvBytesLastSecondInterval=acPMSctpRcvBytesLastSecondInterval, acPMCongestionConferenceResourcesInterval=acPMCongestionConferenceResourcesInterval, acPMNetConnectionStateTable=acPMNetConnectionStateTable, acPMNFSAbortDueToMaxRetriesExceededInterval=acPMNFSAbortDueToMaxRetriesExceededInterval, acPMIGMPGeneralQueryReceivedMin=acPMIGMPGeneralQueryReceivedMin, acPMNFSRequestsInterval=acPMNFSRequestsInterval, acPMNetConnectionStateEntry=acPMNetConnectionStateEntry, acPMRXMacErrorsEntry=acPMRXMacErrorsEntry, acPMMSBGAttributesRXDiscardPacketsHighThreshold=acPMMSBGAttributesRXDiscardPacketsHighThreshold, acPMMulticastIGMPPacketsReceivedInterval=acPMMulticastIGMPPacketsReceivedInterval, acPMTXCollisionsEntry=acPMTXCollisionsEntry, acPMNetUtilKBytesInterval=acPMNetUtilKBytesInterval, acPMNetUtilsAttributes=acPMNetUtilsAttributes, acPMNFSAttributesDelayedResponsesLowThreshold=acPMNFSAttributesDelayedResponsesLowThreshold, acPMSctpRcvBytesLastSecondTable=acPMSctpRcvBytesLastSecondTable, acPMNetUtilKBytesMax=acPMNetUtilKBytesMax, acPMNFSRetriesTimeBelowLowThreshold=acPMNFSRetriesTimeBelowLowThreshold, acPMSctpRetransAttemptsVal=acPMSctpRetransAttemptsVal, acPMTXPacketsAverage=acPMTXPacketsAverage, acPMNetUtilKBytesFullDayAverage=acPMNetUtilKBytesFullDayAverage, acPMNetAttributesUnknownUDPPortCounterLowThreshold=acPMNetAttributesUnknownUDPPortCounterLowThreshold, acPMCongestionIPresourcesInterval=acPMCongestionIPresourcesInterval, acPMRXMacErrorsTimeBetweenThresholds=acPMRXMacErrorsTimeBetweenThresholds, acPMTXLatePacketsTimeAboveHighThreshold=acPMTXLatePacketsTimeAboveHighThreshold, acPMMulticastIGMPPacketsReceivedVal=acPMMulticastIGMPPacketsReceivedVal, acPMMSBGAttributesTXCollisionsLowThreshold=acPMMSBGAttributesTXCollisionsLowThreshold, acPMIGMPMembershipReportsSentVal=acPMIGMPMembershipReportsSentVal, acPMRXMacErrorsTimeAboveHighThreshold=acPMRXMacErrorsTimeAboveHighThreshold, acPMNFSBytesDroppedOnRecordEntry=acPMNFSBytesDroppedOnRecordEntry, acPMNFSDelayedResponsesVal=acPMNFSDelayedResponsesVal, acPMRXUndersizePacketsTimeBelowLowThreshold=acPMRXUndersizePacketsTimeBelowLowThreshold, acPMSystemNetUtils=acPMSystemNetUtils, acPMIGMPLeaveGroupSentVal=acPMIGMPLeaveGroupSentVal, acPMNFSRetriesFullDayAverage=acPMNFSRetriesFullDayAverage, acPMNetUtilPacketsTimeBelowLowThreshold=acPMNetUtilPacketsTimeBelowLowThreshold, acPMRXMacErrorsVal=acPMRXMacErrorsVal, acPMTXLatePacketsInterfaceNum=acPMTXLatePacketsInterfaceNum, acPMCongestionIPresourcesMin=acPMCongestionIPresourcesMin, acPMStunDiscoveryEntry=acPMStunDiscoveryEntry, acPMStunDiscoveryInterval=acPMStunDiscoveryInterval, acPMRXGoodOctetsInterval=acPMRXGoodOctetsInterval, acPMMSBGAttributesRXBadOctetsHighThreshold=acPMMSBGAttributesRXBadOctetsHighThreshold, acPMMSBGAttributesRXMacErrorsHighThreshold=acPMMSBGAttributesRXMacErrorsHighThreshold, acPMRXBadOctetsInterval=acPMRXBadOctetsInterval, acPMRXDiscardPacketsTimeBetweenThresholds=acPMRXDiscardPacketsTimeBetweenThresholds, acPMMSBGAttributesRXGoodOctetsHighThreshold=acPMMSBGAttributesRXGoodOctetsHighThreshold, acPMNFSAttributesBytesDroppedOnRecordLowThreshold=acPMNFSAttributesBytesDroppedOnRecordLowThreshold, acPMMulticastUDPPacketsReceivedMin=acPMMulticastUDPPacketsReceivedMin, acPMNFSAttributesDelayedResponsesHighThreshold=acPMNFSAttributesDelayedResponsesHighThreshold, acPMMSBGAttributesTXOctetsLowThreshold=acPMMSBGAttributesTXOctetsLowThreshold, acPMNFSCurrentRequestsMin=acPMNFSCurrentRequestsMin, acPMMSBGAttributesRXOversizePacketsHighThreshold=acPMMSBGAttributesRXOversizePacketsHighThreshold, acPMMulticastIGMPPacketsReceivedAverage=acPMMulticastIGMPPacketsReceivedAverage, acPMRXMacErrorsTable=acPMRXMacErrorsTable, acPMTXCollisionsTimeAboveHighThreshold=acPMTXCollisionsTimeAboveHighThreshold, acPMNetUtilsAttributesKBytesHighThreshold=acPMNetUtilsAttributesKBytesHighThreshold, acPMSctpRcvBytesLastSecondMin=acPMSctpRcvBytesLastSecondMin, acPMRXMacErrorsFullDayAverage=acPMRXMacErrorsFullDayAverage, acPMNetUtilPacketsTimeAboveHighThreshold=acPMNetUtilPacketsTimeAboveHighThreshold, acPMTXLatePacketsVal=acPMTXLatePacketsVal, acPMNFSBytesDroppedOnRecordInterval=acPMNFSBytesDroppedOnRecordInterval, acPMRXGoodOctetsTimeBelowLowThreshold=acPMRXGoodOctetsTimeBelowLowThreshold, acPMRXGoodOctetsFullDayAverage=acPMRXGoodOctetsFullDayAverage, acPMMulticastIPPacketsReceivedVal=acPMMulticastIPPacketsReceivedVal, acPMNFSReadCallsFullDayAverage=acPMNFSReadCallsFullDayAverage, acPMRXOversizePacketsMin=acPMRXOversizePacketsMin, acPMTXLatePacketsAverage=acPMTXLatePacketsAverage, acPMNFSRoundTripTimeMsInterval=acPMNFSRoundTripTimeMsInterval, acPMIGMPLeaveGroupSentTable=acPMIGMPLeaveGroupSentTable, acPMIGMPGeneralQueryReceivedEntry=acPMIGMPGeneralQueryReceivedEntry, acPMNFSCreateCallsVolume=acPMNFSCreateCallsVolume, acPMNetUtilKBytesTimeBelowLowThreshold=acPMNetUtilKBytesTimeBelowLowThreshold, acPMNFSWriteCallsFullDayAverage=acPMNFSWriteCallsFullDayAverage, acPMNFSReadCallsVal=acPMNFSReadCallsVal, acPMNetworkAttributesDhcpResponseTimeLowThreshold=acPMNetworkAttributesDhcpResponseTimeLowThreshold, acPMNFSBytesDroppedOnRecordTimeAboveHighThreshold=acPMNFSBytesDroppedOnRecordTimeAboveHighThreshold, acPMSystemMSBG=acPMSystemMSBG, acPMRXBadOctetsTable=acPMRXBadOctetsTable, acPMRXDiscardPacketsMax=acPMRXDiscardPacketsMax, acPMCongestionIPresourcesTable=acPMCongestionIPresourcesTable, acPMTXPacketsFullDayAverage=acPMTXPacketsFullDayAverage, acPMIPsecCurrentSAsMax=acPMIPsecCurrentSAsMax, acPMNFSRetriesTable=acPMNFSRetriesTable, acPMCongestionDSPresourcesFullDayAverage=acPMCongestionDSPresourcesFullDayAverage, acPMRXGoodOctetsTimeBetweenThresholds=acPMRXGoodOctetsTimeBetweenThresholds, acPMRXUndersizePacketsVal=acPMRXUndersizePacketsVal, acPMSctpSentBytesLastSecondMin=acPMSctpSentBytesLastSecondMin, acPMCongestionAttributesHighThreshold=acPMCongestionAttributesHighThreshold, acPMIPsecCurrentSAsEntry=acPMIPsecCurrentSAsEntry, acPMSctpRetransAttemptsTable=acPMSctpRetransAttemptsTable, acPMRXUndersizePacketsInterval=acPMRXUndersizePacketsInterval, acPMRXOversizePacketsAverage=acPMRXOversizePacketsAverage, acPMNetUtilPacketsFullDayAverage=acPMNetUtilPacketsFullDayAverage, acPMNetUtilPacketsEntry=acPMNetUtilPacketsEntry, acPMNFSBytesDroppedOnRecordTimeBelowLowThreshold=acPMNFSBytesDroppedOnRecordTimeBelowLowThreshold, acPMCongestionATMresourcesFullDayAverage=acPMCongestionATMresourcesFullDayAverage, acPMTXCollisionsInterfaceNum=acPMTXCollisionsInterfaceNum, acPMCongestionGeneralResourcesMax=acPMCongestionGeneralResourcesMax, acPMIGMPMembershipReportsSentAverage=acPMIGMPMembershipReportsSentAverage, acPMCongestionGeneralResourcesFullDayAverage=acPMCongestionGeneralResourcesFullDayAverage, acPMRXDiscardPacketsTimeBelowLowThreshold=acPMRXDiscardPacketsTimeBelowLowThreshold, acPMSystem=acPMSystem, acPMNFSAbortDueToMaxRetriesExceededTimeAboveHighThreshold=acPMNFSAbortDueToMaxRetriesExceededTimeAboveHighThreshold, acPMCongestionATMresourcesMax=acPMCongestionATMresourcesMax, acPMMulticastUDPPacketsRejectedEntry=acPMMulticastUDPPacketsRejectedEntry, acPMSctpSentBytesLastSecondFullDayAverage=acPMSctpSentBytesLastSecondFullDayAverage, acPMMulticastIPPacketsReceivedAverage=acPMMulticastIPPacketsReceivedAverage, acPMSystemConfigurationResetTotalCounters=acPMSystemConfigurationResetTotalCounters, acPMIPsecCurrentSAsMin=acPMIPsecCurrentSAsMin, acPMTXOctetsInterval=acPMTXOctetsInterval, acPMNetUtilKBytesDirection=acPMNetUtilKBytesDirection, acPMTXOctetsVal=acPMTXOctetsVal, acPMTXCollisionsTimeBelowLowThreshold=acPMTXCollisionsTimeBelowLowThreshold, acPMNFSWriteCallsInterval=acPMNFSWriteCallsInterval, acPMTXPacketsTimeBelowLowThreshold=acPMTXPacketsTimeBelowLowThreshold, acPMTXPacketsInterval=acPMTXPacketsInterval, acPMNetUtilKBytesTimeBetweenThresholds=acPMNetUtilKBytesTimeBetweenThresholds, acPMRXGoodOctetsEntry=acPMRXGoodOctetsEntry, acPMRXDiscardPacketsFullDayAverage=acPMRXDiscardPacketsFullDayAverage, acPMTXCollisionsFullDayAverage=acPMTXCollisionsFullDayAverage, acPMDhcpResponseTimeTimeBelowLowThreshold=acPMDhcpResponseTimeTimeBelowLowThreshold, acPMRXOversizePacketsInterval=acPMRXOversizePacketsInterval, acPMRXBadOctetsMax=acPMRXBadOctetsMax, acPMMulticastUDPPacketsRejectedMax=acPMMulticastUDPPacketsRejectedMax, acPMNFSDelayedResponsesTimeBelowLowThreshold=acPMNFSDelayedResponsesTimeBelowLowThreshold, acPMNetworkAttributesDhcpResponseTimeHighThreshold=acPMNetworkAttributesDhcpResponseTimeHighThreshold, acPMDhcpResponseTimeMax=acPMDhcpResponseTimeMax, acPMMulticastUDPPacketsReceivedMax=acPMMulticastUDPPacketsReceivedMax, acPMRXDiscardPacketsMin=acPMRXDiscardPacketsMin, acPMIGMPSpecificQueryReceivedFullDayAverage=acPMIGMPSpecificQueryReceivedFullDayAverage, acPMTXCollisionsAverage=acPMTXCollisionsAverage, acPMNFSCurrentRequestsType=acPMNFSCurrentRequestsType, acPMRXUndersizePacketsTimeAboveHighThreshold=acPMRXUndersizePacketsTimeAboveHighThreshold, acPMRXBadOctetsTimeBelowLowThreshold=acPMRXBadOctetsTimeBelowLowThreshold, acPMNetUnknownUDPPortCounterVal=acPMNetUnknownUDPPortCounterVal, acPMNFSWriteCallsEntry=acPMNFSWriteCallsEntry, acPMNetUtilPacketsInterval=acPMNetUtilPacketsInterval, acPMTXOctetsMax=acPMTXOctetsMax, acPMSctpRetransAttemptsMin=acPMSctpRetransAttemptsMin, acPMIPsecCurrentSAsVal=acPMIPsecCurrentSAsVal, acPMTXPacketsTimeBetweenThresholds=acPMTXPacketsTimeBetweenThresholds, acPMTXLatePacketsTable=acPMTXLatePacketsTable, acPMMulticastIGMPPacketsReceivedFullDayAverage=acPMMulticastIGMPPacketsReceivedFullDayAverage, acPMNFSAttributesRoundTripTimeMsLowThreshold=acPMNFSAttributesRoundTripTimeMsLowThreshold, acPMSctpRcvBytesLastSecondAverage=acPMSctpRcvBytesLastSecondAverage, acPMMulticastIPPacketsReceivedMin=acPMMulticastIPPacketsReceivedMin, acPMCongestionATMresourcesTable=acPMCongestionATMresourcesTable, acPMMulticastIGMPPacketsReceivedMin=acPMMulticastIGMPPacketsReceivedMin, acPMTXOctetsInterfaceNum=acPMTXOctetsInterfaceNum, acPMNetConnectionAttributes=acPMNetConnectionAttributes, acPMMulticastIPPacketsReceivedInterval=acPMMulticastIPPacketsReceivedInterval, acPMNFSAttributesRetriesLowThreshold=acPMNFSAttributesRetriesLowThreshold, acPMNFSLookupCallsEntry=acPMNFSLookupCallsEntry, acPMSystemConfigurationPeriodLength=acPMSystemConfigurationPeriodLength, acPMNFSAbortDueToMaxRetriesExceededEntry=acPMNFSAbortDueToMaxRetriesExceededEntry, acPMMSBGAttributesRXFCSErroredPacketsLowThreshold=acPMMSBGAttributesRXFCSErroredPacketsLowThreshold)
mibBuilder.exportSymbols("AC-PM-System-MIB", acPMNetUtilDiscardedPacketsEntry=acPMNetUtilDiscardedPacketsEntry, acPMIGMPLeaveGroupSentEntry=acPMIGMPLeaveGroupSentEntry, acPMRXBadOctetsVal=acPMRXBadOctetsVal, acPMNetUnknownUDPPortCounterEntry=acPMNetUnknownUDPPortCounterEntry, acPMNFSRoundTripTimeMsAverage=acPMNFSRoundTripTimeMsAverage, acPMTXOctetsFullDayAverage=acPMTXOctetsFullDayAverage, acPMIPsecCurrentSAsFullDayAverage=acPMIPsecCurrentSAsFullDayAverage, acPMNetUtilDiscardedPacketsTable=acPMNetUtilDiscardedPacketsTable, acPMRXOversizePacketsTimeBetweenThresholds=acPMRXOversizePacketsTimeBetweenThresholds, acPMSystemNFS=acPMSystemNFS, acPMRXFCSErroredPacketsAverage=acPMRXFCSErroredPacketsAverage, acPMSctpSentBytesLastSecondTable=acPMSctpSentBytesLastSecondTable, acPMCongestionIPresourcesAverage=acPMCongestionIPresourcesAverage, acPMIGMPGeneralQueryReceivedAverage=acPMIGMPGeneralQueryReceivedAverage, acPMDhcpRequestInterval=acPMDhcpRequestInterval, acPMMSBGAttributesTXOctetsHighThreshold=acPMMSBGAttributesTXOctetsHighThreshold, acPMNFSReadCallsInterval=acPMNFSReadCallsInterval, acPMRXGoodOctetsInterfaceNum=acPMRXGoodOctetsInterfaceNum, acPMRXFCSErroredPacketsMax=acPMRXFCSErroredPacketsMax, acPMRXBadOctetsAverage=acPMRXBadOctetsAverage, acPMCongestionAttributesLowThreshold=acPMCongestionAttributesLowThreshold, acPMRXFCSErroredPacketsTimeAboveHighThreshold=acPMRXFCSErroredPacketsTimeAboveHighThreshold, acPMNFSCurrentRequestsInterval=acPMNFSCurrentRequestsInterval, acPMCongestionDSPresourcesVal=acPMCongestionDSPresourcesVal, acPMDhcpResponseTimeTable=acPMDhcpResponseTimeTable, acPMIGMPLeaveGroupSentMax=acPMIGMPLeaveGroupSentMax, acPMSctpRetransBytesInterval=acPMSctpRetransBytesInterval, acPMNFSCreateCallsTable=acPMNFSCreateCallsTable, acPMCongestionATMresourcesMin=acPMCongestionATMresourcesMin, acPMStunQueryTable=acPMStunQueryTable, acPMSctpRcvBytesLastSecondMax=acPMSctpRcvBytesLastSecondMax, acPMNFSRetriesEntry=acPMNFSRetriesEntry, acPMNFSWriteCallsVal=acPMNFSWriteCallsVal, acPMMSBGAttributesTXPacketsLowThreshold=acPMMSBGAttributesTXPacketsLowThreshold, acPMSystemCongestion=acPMSystemCongestion, acPMIPsecCurrentSAsTotal=acPMIPsecCurrentSAsTotal, acPMRXDiscardPacketsAverage=acPMRXDiscardPacketsAverage, acPMMulticastIGMPPacketsReceivedEntry=acPMMulticastIGMPPacketsReceivedEntry, acPMRXUndersizePacketsAverage=acPMRXUndersizePacketsAverage, acPMRXDiscardPacketsEntry=acPMRXDiscardPacketsEntry, acPMNetUtilKBytesVolume=acPMNetUtilKBytesVolume, acPMRXUndersizePacketsTable=acPMRXUndersizePacketsTable, acPMCongestionConferenceResourcesMin=acPMCongestionConferenceResourcesMin, acPMNFSLookupCallsRfsNumber=acPMNFSLookupCallsRfsNumber, acPMNFSCurrentRequestsVal=acPMNFSCurrentRequestsVal, acPMRXBadOctetsEntry=acPMRXBadOctetsEntry, acPMRXFCSErroredPacketsEntry=acPMRXFCSErroredPacketsEntry, acPMNFSDelayedResponsesInterval=acPMNFSDelayedResponsesInterval, acPMStunDiscoveryTable=acPMStunDiscoveryTable, acPMTXPacketsTimeAboveHighThreshold=acPMTXPacketsTimeAboveHighThreshold, acPMDhcpResponseTimeAverage=acPMDhcpResponseTimeAverage, acPMMSBGAttributesRXFCSErroredPacketsHighThreshold=acPMMSBGAttributesRXFCSErroredPacketsHighThreshold, acPMNetAttributesUnknownUDPPortCounterHighThreshold=acPMNetAttributesUnknownUDPPortCounterHighThreshold, acPMIGMPMembershipReportsSentEntry=acPMIGMPMembershipReportsSentEntry, acPMNetUnknownUDPPortCounterInterval=acPMNetUnknownUDPPortCounterInterval, acPMRXDiscardPacketsVal=acPMRXDiscardPacketsVal, acPMMSBGAttributesRXUndersizePacketsHighThreshold=acPMMSBGAttributesRXUndersizePacketsHighThreshold, acPMNetUtilsAttributesKBytesLowThreshold=acPMNetUtilsAttributesKBytesLowThreshold, acPMNetUtilDiscardedPacketsInterval=acPMNetUtilDiscardedPacketsInterval, acPMSctpRetransAttemptsAverage=acPMSctpRetransAttemptsAverage, acPMRXBadOctetsFullDayAverage=acPMRXBadOctetsFullDayAverage, acPMSctpRetransBytesMin=acPMSctpRetransBytesMin, acPMNFSRequestsEntry=acPMNFSRequestsEntry, acPMTXOctetsMin=acPMTXOctetsMin, acPMDhcpResponseTimeVal=acPMDhcpResponseTimeVal, acPMNFSWriteCallsRfsNumber=acPMNFSWriteCallsRfsNumber, acPMNFSAttributes=acPMNFSAttributes, acPMRXMacErrorsMin=acPMRXMacErrorsMin, acPMRXFCSErroredPacketsFullDayAverage=acPMRXFCSErroredPacketsFullDayAverage, acPMDhcpResponseTimeEntry=acPMDhcpResponseTimeEntry, acPMNFSRoundTripTimeMsEntry=acPMNFSRoundTripTimeMsEntry, acPMTXCollisionsTimeBetweenThresholds=acPMTXCollisionsTimeBetweenThresholds, acPMNFSRetriesInterval=acPMNFSRetriesInterval, acPMNFSAbortDueToMaxRetriesExceededTimeBelowLowThreshold=acPMNFSAbortDueToMaxRetriesExceededTimeBelowLowThreshold, acPMRXDiscardPacketsInterfaceNum=acPMRXDiscardPacketsInterfaceNum, acPMIGMPLeaveGroupSentFullDayAverage=acPMIGMPLeaveGroupSentFullDayAverage, acPMNFSLookupCallsInterval=acPMNFSLookupCallsInterval, acPMNFSRoundTripTimeMsVolume=acPMNFSRoundTripTimeMsVolume, acPMTXPacketsTable=acPMTXPacketsTable, acPMRXOversizePacketsTimeBelowLowThreshold=acPMRXOversizePacketsTimeBelowLowThreshold, acPMDhcpResponseTimeInterval=acPMDhcpResponseTimeInterval, acPMTXLatePacketsEntry=acPMTXLatePacketsEntry, acPMIGMPGeneralQueryReceivedTable=acPMIGMPGeneralQueryReceivedTable, acPMNFSRetriesVolume=acPMNFSRetriesVolume, acPMSystemNetwork=acPMSystemNetwork, acPMMulticastUDPPacketsRejectedMin=acPMMulticastUDPPacketsRejectedMin, acPMNetUtilPacketsTotal=acPMNetUtilPacketsTotal, acPMSctpSentBytesLastSecondInterval=acPMSctpSentBytesLastSecondInterval, acPMNFSBytesDroppedOnRecordVolume=acPMNFSBytesDroppedOnRecordVolume, acPMRXOversizePacketsFullDayAverage=acPMRXOversizePacketsFullDayAverage, acPMTXCollisionsInterval=acPMTXCollisionsInterval, acPMMSBGAttributesRXUndersizePacketsLowThreshold=acPMMSBGAttributesRXUndersizePacketsLowThreshold, acPMNFSAbortDueToMaxRetriesExceededTable=acPMNFSAbortDueToMaxRetriesExceededTable, acPMMSBGAttributesTXLatePacketsHighThreshold=acPMMSBGAttributesTXLatePacketsHighThreshold, acPMNFSBytesDroppedOnRecordTable=acPMNFSBytesDroppedOnRecordTable, acPMStunRetransmissionVal=acPMStunRetransmissionVal, acPMNFSWriteCallsVolume=acPMNFSWriteCallsVolume, acPMIGMPSpecificQueryReceivedMax=acPMIGMPSpecificQueryReceivedMax, acPMNFSRequestsFullDayAverage=acPMNFSRequestsFullDayAverage, acPMSctpRetransAttemptsFullDayAverage=acPMSctpRetransAttemptsFullDayAverage, acPMNFSLookupCallsFullDayAverage=acPMNFSLookupCallsFullDayAverage, acPMCongestionGeneralResourcesEntry=acPMCongestionGeneralResourcesEntry, acPMSctpRcvBytesLastSecondVal=acPMSctpRcvBytesLastSecondVal, acPMIPsecCurrentSAsTable=acPMIPsecCurrentSAsTable, acPMMulticastUDPPacketsReceivedFullDayAverage=acPMMulticastUDPPacketsReceivedFullDayAverage, acPMRXFCSErroredPacketsVal=acPMRXFCSErroredPacketsVal, acPMRXOversizePacketsVal=acPMRXOversizePacketsVal, acPMSctpRetransBytesMax=acPMSctpRetransBytesMax, acPMNFSRoundTripTimeMsTimeAboveHighThreshold=acPMNFSRoundTripTimeMsTimeAboveHighThreshold, acPMSctpRcvBytesLastSecondEntry=acPMSctpRcvBytesLastSecondEntry, acPMNetUnknownUDPPortCounterTable=acPMNetUnknownUDPPortCounterTable, acPMRXGoodOctetsVal=acPMRXGoodOctetsVal, acPMCongestionConferenceResourcesVal=acPMCongestionConferenceResourcesVal, acPMMSBGAttributesRXMacErrorsLowThreshold=acPMMSBGAttributesRXMacErrorsLowThreshold, acPMIGMPMembershipReportsSentInterval=acPMIGMPMembershipReportsSentInterval, acPMCongestionATMresourcesAverage=acPMCongestionATMresourcesAverage, acPMNetUtilPacketsVal=acPMNetUtilPacketsVal, acPMSctpRetransAttemptsMax=acPMSctpRetransAttemptsMax, acPMIGMPSpecificQueryReceivedAverage=acPMIGMPSpecificQueryReceivedAverage, acPMNFSRoundTripTimeMsTimeBetweenThresholds=acPMNFSRoundTripTimeMsTimeBetweenThresholds, acPMTXLatePacketsMin=acPMTXLatePacketsMin, acPMIPsecCurrentSAsInterval=acPMIPsecCurrentSAsInterval, acPMSystemDataAcPMSystemTimeFromStartOfInterval=acPMSystemDataAcPMSystemTimeFromStartOfInterval, acPMMSBGAttributesRXOversizePacketsLowThreshold=acPMMSBGAttributesRXOversizePacketsLowThreshold, acPMMSBGAttributesTXCollisionsHighThreshold=acPMMSBGAttributesTXCollisionsHighThreshold, acPMTXPacketsEntry=acPMTXPacketsEntry, acPMNFSAbortDueToMaxRetriesExceededVolume=acPMNFSAbortDueToMaxRetriesExceededVolume, acPMIGMPSpecificQueryReceivedTable=acPMIGMPSpecificQueryReceivedTable, acPMNetUtilKBytesEntry=acPMNetUtilKBytesEntry, acPMSctpRetransBytesEntry=acPMSctpRetransBytesEntry, acPMSystemMulticast=acPMSystemMulticast, acPMSctpSentBytesLastSecondEntry=acPMSctpSentBytesLastSecondEntry, acPMMulticastIPPacketsReceivedEntry=acPMMulticastIPPacketsReceivedEntry, acPMDhcpRequestTable=acPMDhcpRequestTable, acPMRXUndersizePacketsFullDayAverage=acPMRXUndersizePacketsFullDayAverage, acPMSystemData=acPMSystemData, acPMRXUndersizePacketsInterfaceNum=acPMRXUndersizePacketsInterfaceNum, acPMMSBGAttributesRXDiscardPacketsLowThreshold=acPMMSBGAttributesRXDiscardPacketsLowThreshold, acPMRXDiscardPacketsTable=acPMRXDiscardPacketsTable, acPMNFSReadCallsVolume=acPMNFSReadCallsVolume, acPMNFSRetriesTimeBetweenThresholds=acPMNFSRetriesTimeBetweenThresholds, acPMRXUndersizePacketsMax=acPMRXUndersizePacketsMax, acPMSctpSentBytesLastSecondVal=acPMSctpSentBytesLastSecondVal, acPMNetUtilPacketsTable=acPMNetUtilPacketsTable, acPMCongestionGeneralResourcesTable=acPMCongestionGeneralResourcesTable, acPMIPsecCurrentSAsAverage=acPMIPsecCurrentSAsAverage, acPMTXOctetsAverage=acPMTXOctetsAverage, acPMSystemSctp=acPMSystemSctp, acPMRXOversizePacketsMax=acPMRXOversizePacketsMax, acPMIGMPGeneralQueryReceivedFullDayAverage=acPMIGMPGeneralQueryReceivedFullDayAverage, acPMNFSRetriesRfsNumber=acPMNFSRetriesRfsNumber, acPMRXFCSErroredPacketsTimeBelowLowThreshold=acPMRXFCSErroredPacketsTimeBelowLowThreshold, acPMCongestionGeneralResourcesVal=acPMCongestionGeneralResourcesVal, acPMCongestionGeneralResourcesAverage=acPMCongestionGeneralResourcesAverage, acPMSctpRetransAttemptsEntry=acPMSctpRetransAttemptsEntry, acPMNetUtilsAttributesDiscardedPacketsHighThreshold=acPMNetUtilsAttributesDiscardedPacketsHighThreshold, PYSNMP_MODULE_ID=acPMSystem, acPMCongestionIPresourcesEntry=acPMCongestionIPresourcesEntry, acPMCongestionDSPresourcesTable=acPMCongestionDSPresourcesTable, acPMIGMPSpecificQueryReceivedEntry=acPMIGMPSpecificQueryReceivedEntry, acPMSctpRetransBytesVal=acPMSctpRetransBytesVal, acPMNFSRequestsVal=acPMNFSRequestsVal, acPMMulticastUDPPacketsRejectedAverage=acPMMulticastUDPPacketsRejectedAverage, acPMNetUtilsAttributesPacketsHighThreshold=acPMNetUtilsAttributesPacketsHighThreshold, acPMNetUtilPacketsAverage=acPMNetUtilPacketsAverage, acPMMulticastUDPPacketsRejectedTable=acPMMulticastUDPPacketsRejectedTable, acPMNFSRoundTripTimeMsMin=acPMNFSRoundTripTimeMsMin, acPMTXOctetsTimeBetweenThresholds=acPMTXOctetsTimeBetweenThresholds, acPMTXPacketsVal=acPMTXPacketsVal, acPMTXCollisionsVal=acPMTXCollisionsVal, acPMNFSCreateCallsRfsNumber=acPMNFSCreateCallsRfsNumber, acPMNetUtilKBytesMin=acPMNetUtilKBytesMin, acPMCongestionATMresourcesEntry=acPMCongestionATMresourcesEntry, acPMNetUtilsAttributesDiscardedPacketsLowThreshold=acPMNetUtilsAttributesDiscardedPacketsLowThreshold, acPMIGMPMembershipReportsSentMax=acPMIGMPMembershipReportsSentMax, acPMCongestionConferenceResourcesAverage=acPMCongestionConferenceResourcesAverage, acPMNFSDelayedResponsesEntry=acPMNFSDelayedResponsesEntry, acPMRXFCSErroredPacketsInterval=acPMRXFCSErroredPacketsInterval, acPMRXMacErrorsTimeBelowLowThreshold=acPMRXMacErrorsTimeBelowLowThreshold, acPMCongestionDSPresourcesAverage=acPMCongestionDSPresourcesAverage, acPMNetUtilsAttributesPacketsLowThreshold=acPMNetUtilsAttributesPacketsLowThreshold, acPMDhcpResponseTimeVolume=acPMDhcpResponseTimeVolume, acPMStunQueryEntry=acPMStunQueryEntry, acPMTXLatePacketsFullDayAverage=acPMTXLatePacketsFullDayAverage, acPMRXBadOctetsInterfaceNum=acPMRXBadOctetsInterfaceNum, acPMCongestionConferenceResourcesTable=acPMCongestionConferenceResourcesTable, acPMIGMPLeaveGroupSentMin=acPMIGMPLeaveGroupSentMin, acPMNFSRoundTripTimeMsRfsNumber=acPMNFSRoundTripTimeMsRfsNumber, acPMRXOversizePacketsInterfaceNum=acPMRXOversizePacketsInterfaceNum, acPMNetUtilPacketsTimeBetweenThresholds=acPMNetUtilPacketsTimeBetweenThresholds, acPMTXOctetsTable=acPMTXOctetsTable, acPMNFSAttributesAbortDueToMaxRetriesExceededLowThreshold=acPMNFSAttributesAbortDueToMaxRetriesExceededLowThreshold, acPMCongestionATMresourcesVal=acPMCongestionATMresourcesVal, acPMDhcpResponseTimeFullDayAverage=acPMDhcpResponseTimeFullDayAverage, acPMCongestionDSPresourcesMin=acPMCongestionDSPresourcesMin, acPMCongestionDSPresourcesInterval=acPMCongestionDSPresourcesInterval, acPMNFSWriteCallsTable=acPMNFSWriteCallsTable, acPMTXCollisionsMax=acPMTXCollisionsMax, acPMRXFCSErroredPacketsTimeBetweenThresholds=acPMRXFCSErroredPacketsTimeBetweenThresholds, acPMSctpSentBytesLastSecondMax=acPMSctpSentBytesLastSecondMax, acPMCongestionConferenceResourcesFullDayAverage=acPMCongestionConferenceResourcesFullDayAverage, acPMTXLatePacketsTimeBelowLowThreshold=acPMTXLatePacketsTimeBelowLowThreshold, acPMDhcpRequestTotal=acPMDhcpRequestTotal, acPMNFSCurrentRequestsAverage=acPMNFSCurrentRequestsAverage, acPMCongestionATMresourcesInterval=acPMCongestionATMresourcesInterval, acPMMulticastIGMPPacketsReceivedTable=acPMMulticastIGMPPacketsReceivedTable, acPMRXOversizePacketsTimeAboveHighThreshold=acPMRXOversizePacketsTimeAboveHighThreshold, acPMDhcpRequestEntry=acPMDhcpRequestEntry, acPMNFSDelayedResponsesTimeAboveHighThreshold=acPMNFSDelayedResponsesTimeAboveHighThreshold, acPMMSBGAttributesTXPacketsHighThreshold=acPMMSBGAttributesTXPacketsHighThreshold, acPMMulticastUDPPacketsReceivedAverage=acPMMulticastUDPPacketsReceivedAverage, acPMSctpRetransBytesAverage=acPMSctpRetransBytesAverage, acPMNetConnectionAttributesStateHighThreshold=acPMNetConnectionAttributesStateHighThreshold, acPMSctpSentBytesLastSecondAverage=acPMSctpSentBytesLastSecondAverage, acPMSctpRetransAttemptsInterval=acPMSctpRetransAttemptsInterval, acPMNFSDelayedResponsesTimeBetweenThresholds=acPMNFSDelayedResponsesTimeBetweenThresholds, acPMNetAttributes=acPMNetAttributes, acPMCongestionDSPresourcesMax=acPMCongestionDSPresourcesMax, acPMNFSRequestsTable=acPMNFSRequestsTable, acPMNFSDelayedResponsesTable=acPMNFSDelayedResponsesTable, acPMTXOctetsTimeBelowLowThreshold=acPMTXOctetsTimeBelowLowThreshold, acPMStunRetransmissionTable=acPMStunRetransmissionTable, acPMNFSAttributesBytesDroppedOnRecordHighThreshold=acPMNFSAttributesBytesDroppedOnRecordHighThreshold, acPMStunQueryVal=acPMStunQueryVal, acPMIGMPGeneralQueryReceivedVal=acPMIGMPGeneralQueryReceivedVal, acPMNFSLookupCallsTable=acPMNFSLookupCallsTable, acPMMulticastIGMPPacketsReceivedMax=acPMMulticastIGMPPacketsReceivedMax, acPMNFSRoundTripTimeMsTimeBelowLowThreshold=acPMNFSRoundTripTimeMsTimeBelowLowThreshold, acPMRXFCSErroredPacketsInterfaceNum=acPMRXFCSErroredPacketsInterfaceNum, acPMNetworkAttributes=acPMNetworkAttributes, acPMMulticastIPPacketsReceivedMax=acPMMulticastIPPacketsReceivedMax, acPMStunRetransmissionEntry=acPMStunRetransmissionEntry, acPMCongestionIPresourcesMax=acPMCongestionIPresourcesMax, acPMNFSReadCallsEntry=acPMNFSReadCallsEntry, acPMRXBadOctetsMin=acPMRXBadOctetsMin, acPMNFSCurrentRequestsFullDayAverage=acPMNFSCurrentRequestsFullDayAverage, acPMRXDiscardPacketsInterval=acPMRXDiscardPacketsInterval, acPMTXPacketsMax=acPMTXPacketsMax, acPMMulticastIPPacketsReceivedFullDayAverage=acPMMulticastIPPacketsReceivedFullDayAverage, acPMNFSDelayedResponsesFullDayAverage=acPMNFSDelayedResponsesFullDayAverage, acPMNFSReadCallsRfsNumber=acPMNFSReadCallsRfsNumber, acPMNFSAttributesAbortDueToMaxRetriesExceededHighThreshold=acPMNFSAttributesAbortDueToMaxRetriesExceededHighThreshold, acPMRXBadOctetsTimeAboveHighThreshold=acPMRXBadOctetsTimeAboveHighThreshold, acPMTXLatePacketsMax=acPMTXLatePacketsMax, acPMSystemSecurity=acPMSystemSecurity, acPMStunRetransmissionInterval=acPMStunRetransmissionInterval, acPMNetConnectionStateInterval=acPMNetConnectionStateInterval, acPMIGMPGeneralQueryReceivedInterval=acPMIGMPGeneralQueryReceivedInterval, acPMIGMPSpecificQueryReceivedMin=acPMIGMPSpecificQueryReceivedMin, acPMNFSCreateCallsEntry=acPMNFSCreateCallsEntry, acPMNFSAbortDueToMaxRetriesExceededRfsNumber=acPMNFSAbortDueToMaxRetriesExceededRfsNumber, acPMCongestionConferenceResourcesMax=acPMCongestionConferenceResourcesMax, acPMCongestionGeneralResourcesMin=acPMCongestionGeneralResourcesMin, acPMNetUtilKBytesAverage=acPMNetUtilKBytesAverage)
mibBuilder.exportSymbols("AC-PM-System-MIB", acPMNetUtilDiscardedPacketsTotal=acPMNetUtilDiscardedPacketsTotal, acPMNFSCurrentRequestsMax=acPMNFSCurrentRequestsMax, acPMNFSAttributesRoundTripTimeMsHighThreshold=acPMNFSAttributesRoundTripTimeMsHighThreshold, acPMNFSDelayedResponsesRfsNumber=acPMNFSDelayedResponsesRfsNumber)
