#
# PySNMP MIB module TPLINK-LLDPMEDCONFIG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TPLINK-LLDPMEDCONFIG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:25:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, Counter32, ObjectIdentity, Unsigned32, MibIdentifier, IpAddress, NotificationType, Bits, Integer32, ModuleIdentity, iso, Gauge32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Counter32", "ObjectIdentity", "Unsigned32", "MibIdentifier", "IpAddress", "NotificationType", "Bits", "Integer32", "ModuleIdentity", "iso", "Gauge32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
tplinkLldpMIBObjects, = mibBuilder.importSymbols("TPLINK-LLDP-MIB", "tplinkLldpMIBObjects")
TPRowStatus, = mibBuilder.importSymbols("TPLINK-TC-MIB", "TPRowStatus")
lldpMed = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4))
lldpMedGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 1))
lldpMedGlobalConfigFastStartRepeatCount = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpMedGlobalConfigFastStartRepeatCount.setStatus('current')
if mibBuilder.loadTexts: lldpMedGlobalConfigFastStartRepeatCount.setDescription('When entering LLDP-MED fast start mechanism, multiple LLDP-MED frames will be transmitted based on this parameter.')
lldpMedPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 2), )
if mibBuilder.loadTexts: lldpMedPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: lldpMedPortConfigTable.setDescription('A table that contains LLDP-MED information of every port.')
lldpMedPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: lldpMedPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: lldpMedPortConfigEntry.setDescription('A list of LLDP-MED information for every port of the device.')
lldpMedConfigPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedConfigPortId.setStatus('current')
if mibBuilder.loadTexts: lldpMedConfigPortId.setDescription('The port id of the switch.')
lldpMedConfigPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpMedConfigPortStatus.setStatus('current')
if mibBuilder.loadTexts: lldpMedConfigPortStatus.setDescription('Select Enable/Disable LLDP-MED for the Port. 0. Disable 1. Enable')
lldpMedConfigPortTlvNetworkPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpMedConfigPortTlvNetworkPolicy.setStatus('current')
if mibBuilder.loadTexts: lldpMedConfigPortTlvNetworkPolicy.setDescription('Select Enable/Disable Network Policy TLV for the Port. 0. Disable 1. Enable')
lldpMedConfigPortTlvLocationId = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpMedConfigPortTlvLocationId.setStatus('current')
if mibBuilder.loadTexts: lldpMedConfigPortTlvLocationId.setDescription('Select Enable/Disable Location Identification TLV for the Port. 0. Disable 1. Enable')
lldpMedConfigPortTlvExtendedPower = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpMedConfigPortTlvExtendedPower.setStatus('current')
if mibBuilder.loadTexts: lldpMedConfigPortTlvExtendedPower.setDescription('Select Enable/Disable Extended Power-Via-MDI TLV for the Port. 0. Disable 1. Enable')
lldpMedConfigPortTlvInventory = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpMedConfigPortTlvInventory.setStatus('current')
if mibBuilder.loadTexts: lldpMedConfigPortTlvInventory.setDescription('Select Enable/Disable Inventory TLV for the Port. 0. Disable 1. Enable')
lldpMedPortConfigTlvLocationTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 3), )
if mibBuilder.loadTexts: lldpMedPortConfigTlvLocationTable.setStatus('current')
if mibBuilder.loadTexts: lldpMedPortConfigTlvLocationTable.setDescription('A table that contains LLDP-MED Location Identification TLV information of every port.')
lldpMedPortConfigTlvLocationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: lldpMedPortConfigTlvLocationEntry.setStatus('current')
if mibBuilder.loadTexts: lldpMedPortConfigTlvLocationEntry.setDescription('A list of LLDP-MED Location Identification TLV information for every port of the device.')
lldpMedConfigLocationPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedConfigLocationPortId.setStatus('current')
if mibBuilder.loadTexts: lldpMedConfigLocationPortId.setDescription('The port id of the switch.')
lldpMedConfigPortLocationEmergencyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpMedConfigPortLocationEmergencyNumber.setStatus('current')
if mibBuilder.loadTexts: lldpMedConfigPortLocationEmergencyNumber.setDescription('Emergency number is Emergency Call Service ELIN identifier, which is used during emergency call setup to a traditional CAMA or ISDN trunk-based PSAP.')
lldpMedConfigPortLocationCivicAddressWhat = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("dhcp-server", 0), ("switch", 1), ("lldp-med-endpoint", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpMedConfigPortLocationCivicAddressWhat.setStatus('current')
if mibBuilder.loadTexts: lldpMedConfigPortLocationCivicAddressWhat.setDescription('This element describes which location the DHCP entry refers to. Currently, three options are defined: the location of the DHCP server (0: DHCP server), the location of the network element believed to be closest to the client (1: Switch) or the location of the client (2: LLDP-MED Endpoint). Option (2) should be used, but may not be known. Options (0) and (1) should not be used unless it is known that the DHCP client is in close physical proximity to the server or network element.')
lldpMedConfigPortLocationCivicAddressCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpMedConfigPortLocationCivicAddressCountryCode.setStatus('current')
if mibBuilder.loadTexts: lldpMedConfigPortLocationCivicAddressCountryCode.setDescription('The two-letters ISO 3166 country code in capital ASCII letters, e.g., CN or US.')
lldpMedConfigPortLocationCivicAddressLanguage = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpMedConfigPortLocationCivicAddressLanguage.setStatus('current')
if mibBuilder.loadTexts: lldpMedConfigPortLocationCivicAddressLanguage.setDescription('Language.')
lldpMedConfigPortLocationCivicAddressProvince = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpMedConfigPortLocationCivicAddressProvince.setStatus('current')
if mibBuilder.loadTexts: lldpMedConfigPortLocationCivicAddressProvince.setDescription('Province or State.')
lldpMedConfigPortLocationCivicAddressCounty = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpMedConfigPortLocationCivicAddressCounty.setStatus('current')
if mibBuilder.loadTexts: lldpMedConfigPortLocationCivicAddressCounty.setDescription('County.')
lldpMedConfigPortLocationCivicAddressCity = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 3, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpMedConfigPortLocationCivicAddressCity.setStatus('current')
if mibBuilder.loadTexts: lldpMedConfigPortLocationCivicAddressCity.setDescription('City.')
lldpMedConfigPortLocationCivicAddressStreet = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpMedConfigPortLocationCivicAddressStreet.setStatus('current')
if mibBuilder.loadTexts: lldpMedConfigPortLocationCivicAddressStreet.setDescription('Street.')
lldpMedConfigPortLocationCivicAddressHouseNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpMedConfigPortLocationCivicAddressHouseNumber.setStatus('current')
if mibBuilder.loadTexts: lldpMedConfigPortLocationCivicAddressHouseNumber.setDescription('House number.')
lldpMedConfigPortLocationCivicAddressName = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 3, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpMedConfigPortLocationCivicAddressName.setStatus('current')
if mibBuilder.loadTexts: lldpMedConfigPortLocationCivicAddressName.setDescription('Residence and office occupant name.')
lldpMedConfigPortLocationCivicAddressPostalZipCode = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 3, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpMedConfigPortLocationCivicAddressPostalZipCode.setStatus('current')
if mibBuilder.loadTexts: lldpMedConfigPortLocationCivicAddressPostalZipCode.setDescription('Postal/zip code.')
lldpMedConfigPortLocationCivicAddressRoomNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 3, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpMedConfigPortLocationCivicAddressRoomNumber.setStatus('current')
if mibBuilder.loadTexts: lldpMedConfigPortLocationCivicAddressRoomNumber.setDescription('Room number.')
lldpMedConfigPortLocationCivicAddressPostOfficeBox = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 3, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpMedConfigPortLocationCivicAddressPostOfficeBox.setStatus('current')
if mibBuilder.loadTexts: lldpMedConfigPortLocationCivicAddressPostOfficeBox.setDescription('Post office box.')
lldpMedConfigPortLocationCivicAddressAdditional = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 3, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpMedConfigPortLocationCivicAddressAdditional.setStatus('current')
if mibBuilder.loadTexts: lldpMedConfigPortLocationCivicAddressAdditional.setDescription('Additional information.')
lldpMedLocalInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 4), )
if mibBuilder.loadTexts: lldpMedLocalInfoTable.setStatus('current')
if mibBuilder.loadTexts: lldpMedLocalInfoTable.setDescription('Local port LLDP-MED information entries.')
lldpMedLocalInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: lldpMedLocalInfoEntry.setStatus('current')
if mibBuilder.loadTexts: lldpMedLocalInfoEntry.setDescription('An entry contains of the LLDP-MED information of local port of the switch.')
lldpMedLocalPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedLocalPortId.setStatus('current')
if mibBuilder.loadTexts: lldpMedLocalPortId.setDescription('Display the port index.')
lldpMEDLocalCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMEDLocalCapabilities.setStatus('current')
if mibBuilder.loadTexts: lldpMEDLocalCapabilities.setDescription('Display the LLDP-MED capabilities the switch supports.')
lldpMedLocalDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedLocalDeviceType.setStatus('current')
if mibBuilder.loadTexts: lldpMedLocalDeviceType.setDescription('LLDP-MED devices are comprised of two primary device types: Network Connectivity Devices and Endpoint Devices. In turn, Endpoint Devices are composed of three defined Classes: Class I, Class II and Class III. Switch is a Network Connectivity Device.')
lldpMedLocalApplicationType = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedLocalApplicationType.setStatus('current')
if mibBuilder.loadTexts: lldpMedLocalApplicationType.setDescription('Display the primary function of the applications defined for the network policy.')
lldpMedLocalUnknownPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedLocalUnknownPolicy.setStatus('current')
if mibBuilder.loadTexts: lldpMedLocalUnknownPolicy.setDescription("A value of 'Yes' indicates that the network policy for the specified application type is currently unknown. In this case, the VLAN ID, the Layer 2 Priority and the DSCP value fields are ignored. A value of 'No' indicates that this network policy is defined.")
lldpMedLocalAppTagged = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedLocalAppTagged.setStatus('current')
if mibBuilder.loadTexts: lldpMedLocalAppTagged.setDescription("Indicate whether the specified application type is using a 'tagged' or an 'untagged' VLAN.")
lldpMedLocalAppVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedLocalAppVLANID.setStatus('current')
if mibBuilder.loadTexts: lldpMedLocalAppVLANID.setDescription('An extension of the VLAN Identifier for the port, as defined in IEEE 802.1P-1998.')
lldpMedLocalAppLayer2Priority = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedLocalAppLayer2Priority.setStatus('current')
if mibBuilder.loadTexts: lldpMedLocalAppLayer2Priority.setDescription('Contain the value of the 802.1p priority which is associated with the given port on the local system. ')
lldpMedLocalAppDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedLocalAppDSCP.setStatus('current')
if mibBuilder.loadTexts: lldpMedLocalAppDSCP.setDescription('Contain the value of the Differentiated Service Code Point (DSCP) as defined in IETF RFC 2474 and RFC 2475 which is associated with the given port on the local system.')
lldpMedLocalLocationDataFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 4, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedLocalLocationDataFormat.setStatus('current')
if mibBuilder.loadTexts: lldpMedLocalLocationDataFormat.setDescription('The location subtype advertised by the local system.')
lldpMedLocalLocationID = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 4, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedLocalLocationID.setStatus('current')
if mibBuilder.loadTexts: lldpMedLocalLocationID.setDescription('The location information. Parsing of this information is depedent upon the location subtype.')
lldpMedLocalPowerType = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 4, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedLocalPowerType.setStatus('current')
if mibBuilder.loadTexts: lldpMedLocalPowerType.setDescription('Defines the type of Power-Via-MDI advertised by the local device.')
lldpMedLocalPowerSource = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 4, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedLocalPowerSource.setStatus('current')
if mibBuilder.loadTexts: lldpMedLocalPowerSource.setDescription('Defines the type of PSE Power Source advertised by the local device.')
lldpMedLocalPowerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 4, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedLocalPowerPriority.setStatus('current')
if mibBuilder.loadTexts: lldpMedLocalPowerPriority.setDescription('Reflects the PD power priority that is being advertised on this PSE port.')
lldpMedLocalPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 4, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedLocalPowerValue.setStatus('current')
if mibBuilder.loadTexts: lldpMedLocalPowerValue.setDescription('Contain the value of the power available from the PSE via this port.')
lldpMedLocalInventoryHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 4, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedLocalInventoryHardwareRevision.setStatus('current')
if mibBuilder.loadTexts: lldpMedLocalInventoryHardwareRevision.setDescription('The vendor-specific hardware revision string as advertised by the local system.')
lldpMedLocalInventoryFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 4, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedLocalInventoryFirmwareRevision.setStatus('current')
if mibBuilder.loadTexts: lldpMedLocalInventoryFirmwareRevision.setDescription('The vendor-specific firmware revision string as advertised by the local system.')
lldpMedLocalInventorySoftwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 4, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedLocalInventorySoftwareRevision.setStatus('current')
if mibBuilder.loadTexts: lldpMedLocalInventorySoftwareRevision.setDescription('The vendor-specific software revision string as advertised by the local system.')
lldpMedLocalInventorySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 4, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedLocalInventorySerialNumber.setStatus('current')
if mibBuilder.loadTexts: lldpMedLocalInventorySerialNumber.setDescription('The vendor-specific serial number as advertised by the local system.')
lldpMedLocalInventoryManufacturerName = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 4, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedLocalInventoryManufacturerName.setStatus('current')
if mibBuilder.loadTexts: lldpMedLocalInventoryManufacturerName.setDescription('The vendor-specific manufacturer name as advertised by the local system.')
lldpMedLocalInventoryModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 4, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedLocalInventoryModelName.setStatus('current')
if mibBuilder.loadTexts: lldpMedLocalInventoryModelName.setDescription('The vendor-specific model name as advertised by the local system.')
lldpMedLocalInventoryAssetID = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 4, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedLocalInventoryAssetID.setStatus('current')
if mibBuilder.loadTexts: lldpMedLocalInventoryAssetID.setDescription('The vendor-specific asset tracking identifier as advertised by the local system.')
lldpMedNeighborInfo = ModuleIdentity((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 5))
lldpMedNeighborInfo.setRevisions(('2011-09-27 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: lldpMedNeighborInfo.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: lldpMedNeighborInfo.setLastUpdated('201109270000Z')
if mibBuilder.loadTexts: lldpMedNeighborInfo.setOrganization('TPLINK')
if mibBuilder.loadTexts: lldpMedNeighborInfo.setContactInfo('www.tplink.com.cn')
if mibBuilder.loadTexts: lldpMedNeighborInfo.setDescription('LLDP-MED Private MIB.')
lldpMedNeighborInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 5, 1), )
if mibBuilder.loadTexts: lldpMedNeighborInfoTable.setStatus('current')
if mibBuilder.loadTexts: lldpMedNeighborInfoTable.setDescription('Neighbor port information entries.')
lldpMedNeighborInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "TPLINK-LLDPMEDCONFIG-MIB", "lldpMedNeighborPortIndexId"))
if mibBuilder.loadTexts: lldpMedNeighborInfoEntry.setStatus('current')
if mibBuilder.loadTexts: lldpMedNeighborInfoEntry.setDescription('An entry contains of the information of neighbor port except the network policy information.')
lldpMedNeighborPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 5, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedNeighborPortId.setStatus('current')
if mibBuilder.loadTexts: lldpMedNeighborPortId.setDescription('Display the port index.')
lldpMedNeighborPortIndexId = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedNeighborPortIndexId.setStatus('current')
if mibBuilder.loadTexts: lldpMedNeighborPortIndexId.setDescription('Display the neighbor index.')
lldpMEDNeighborCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 5, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMEDNeighborCapabilities.setStatus('current')
if mibBuilder.loadTexts: lldpMEDNeighborCapabilities.setDescription('LLDP-MED capabilities of remote devices connected to the device ports and communicating via LLDP-MED.')
lldpMedNeighborDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 5, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedNeighborDeviceType.setStatus('current')
if mibBuilder.loadTexts: lldpMedNeighborDeviceType.setDescription('Device Class as advertised by the device remotely connected to the port.')
lldpMedNeighborLocationDataFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 5, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedNeighborLocationDataFormat.setStatus('current')
if mibBuilder.loadTexts: lldpMedNeighborLocationDataFormat.setDescription('The location subtype advertised by the remote endpoint.')
lldpMedNeighborLocationID = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 5, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedNeighborLocationID.setStatus('current')
if mibBuilder.loadTexts: lldpMedNeighborLocationID.setDescription('The location information advertised by the remote endpoint.')
lldpMedNeighborPowerType = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 5, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedNeighborPowerType.setStatus('current')
if mibBuilder.loadTexts: lldpMedNeighborPowerType.setDescription('Defines the type of Power-Via-MDI advertised by the remote device.')
lldpMedNeighborPowerSource = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 5, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedNeighborPowerSource.setStatus('current')
if mibBuilder.loadTexts: lldpMedNeighborPowerSource.setDescription('Defines the type of Power Source advertised as being used by the device connected remotely to the port.')
lldpMedNeighborPowerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 5, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedNeighborPowerPriority.setStatus('current')
if mibBuilder.loadTexts: lldpMedNeighborPowerPriority.setDescription('Definces the priority advertised as being required by the PD connected remotely to the port.')
lldpMedNeighborPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 5, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedNeighborPowerValue.setStatus('current')
if mibBuilder.loadTexts: lldpMedNeighborPowerValue.setDescription('Conatin the value of the power required by a PD connected remotely to the port.')
lldpMedNeighborInventoryHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 5, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedNeighborInventoryHardwareRevision.setStatus('current')
if mibBuilder.loadTexts: lldpMedNeighborInventoryHardwareRevision.setDescription('The vendor-specific hardware revision string as advertised by the remote endpoint.')
lldpMedNeighborInventoryFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 5, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedNeighborInventoryFirmwareRevision.setStatus('current')
if mibBuilder.loadTexts: lldpMedNeighborInventoryFirmwareRevision.setDescription('The vendor-specific firmware revision string as advertised by the remote endpoint.')
lldpMedNeighborInventorySoftwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 5, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedNeighborInventorySoftwareRevision.setStatus('current')
if mibBuilder.loadTexts: lldpMedNeighborInventorySoftwareRevision.setDescription('The vendor-specific software revision string as advertised by the remote endpoint.')
lldpMedNeighborInventorySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 5, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedNeighborInventorySerialNumber.setStatus('current')
if mibBuilder.loadTexts: lldpMedNeighborInventorySerialNumber.setDescription('The vendor-specific serial number as advertised by the remote endpoint.')
lldpMedNeighborInventoryManufacturerName = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 5, 1, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedNeighborInventoryManufacturerName.setStatus('current')
if mibBuilder.loadTexts: lldpMedNeighborInventoryManufacturerName.setDescription('The vendor-specific manufacturer name as advertised by the remote endpoint.')
lldpMedNeighborInventoryModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 5, 1, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedNeighborInventoryModelName.setStatus('current')
if mibBuilder.loadTexts: lldpMedNeighborInventoryModelName.setDescription('The vendor-specific model name as advertised by the remote endpoint.')
lldpMedNeighborInventoryAssetID = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 5, 1, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedNeighborInventoryAssetID.setStatus('current')
if mibBuilder.loadTexts: lldpMedNeighborInventoryAssetID.setDescription('The vendor-specific asset tracking identifier as advertised by the remote endpoint.')
lldpMedNeighborMediaPolicyInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 5, 2), )
if mibBuilder.loadTexts: lldpMedNeighborMediaPolicyInfoTable.setStatus('current')
if mibBuilder.loadTexts: lldpMedNeighborMediaPolicyInfoTable.setDescription('Neighbor port media policy information entries.')
lldpMedNeighborMediaPolicyInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 5, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "TPLINK-LLDPMEDCONFIG-MIB", "lldpMedNeighborPortIndex"), (0, "TPLINK-LLDPMEDCONFIG-MIB", "lldpMedNeighborMediaPolicyIndex"))
if mibBuilder.loadTexts: lldpMedNeighborMediaPolicyInfoEntry.setStatus('current')
if mibBuilder.loadTexts: lldpMedNeighborMediaPolicyInfoEntry.setDescription('Information about a particular policy on a specific port component.')
lldpMedNeighborPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 5, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedNeighborPort.setStatus('current')
if mibBuilder.loadTexts: lldpMedNeighborPort.setDescription('Display the port index.')
lldpMedNeighborPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedNeighborPortIndex.setStatus('current')
if mibBuilder.loadTexts: lldpMedNeighborPortIndex.setDescription('Display the neighbor index.')
lldpMedNeighborMediaPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedNeighborMediaPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: lldpMedNeighborMediaPolicyIndex.setDescription('Display the neighbor media policy index.')
lldpMedNeighborApplicationType = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 5, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedNeighborApplicationType.setStatus('current')
if mibBuilder.loadTexts: lldpMedNeighborApplicationType.setDescription('The media type that defines the primary function of the application for the policy advertised by the endpoint connected remotely to this port.')
lldpMedNeighborUnknownPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 5, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedNeighborUnknownPolicy.setStatus('current')
if mibBuilder.loadTexts: lldpMedNeighborUnknownPolicy.setDescription("A value of 'Yes' indicates that the network policy for the specified application type is currently unknown. In this case, the VLAN ID, the layer 2 priority and the DSCP value fields are ignored. A value of 'No' indicates that this network policy is defined.")
lldpMedNeighborAppTagged = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 5, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedNeighborAppTagged.setStatus('current')
if mibBuilder.loadTexts: lldpMedNeighborAppTagged.setDescription("Indicate whether the specified application type is using a 'tagged' or an 'untagged' VLAN.")
lldpMedNeighborAppVLANID = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 5, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedNeighborAppVLANID.setStatus('current')
if mibBuilder.loadTexts: lldpMedNeighborAppVLANID.setDescription('An extension of the VLAN Identifier for the remote system connected to this port, as defined in IEEE 802.1P-1998.')
lldpMedNeighborAppLayer2Priority = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 5, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedNeighborAppLayer2Priority.setStatus('current')
if mibBuilder.loadTexts: lldpMedNeighborAppLayer2Priority.setDescription('Contain the value of the 802.1p priority which is associated with the remote system connected at given port.')
lldpMedNeighborAppDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 35, 1, 4, 5, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpMedNeighborAppDSCP.setStatus('current')
if mibBuilder.loadTexts: lldpMedNeighborAppDSCP.setDescription('Contain the value of the Differentiated Service Code Point (DSCP) as defined in IETF 2474 and RFC 2475 which is assocaited with remote system connected at the port.')
mibBuilder.exportSymbols("TPLINK-LLDPMEDCONFIG-MIB", lldpMedConfigPortId=lldpMedConfigPortId, lldpMedConfigPortLocationCivicAddressName=lldpMedConfigPortLocationCivicAddressName, lldpMedLocalUnknownPolicy=lldpMedLocalUnknownPolicy, lldpMedConfigPortTlvNetworkPolicy=lldpMedConfigPortTlvNetworkPolicy, lldpMedConfigPortLocationCivicAddressCounty=lldpMedConfigPortLocationCivicAddressCounty, lldpMedNeighborPortIndex=lldpMedNeighborPortIndex, lldpMedNeighborInventorySoftwareRevision=lldpMedNeighborInventorySoftwareRevision, lldpMedLocalInfoEntry=lldpMedLocalInfoEntry, lldpMedPortConfigTlvLocationEntry=lldpMedPortConfigTlvLocationEntry, lldpMedGlobalConfig=lldpMedGlobalConfig, lldpMedLocalPowerType=lldpMedLocalPowerType, lldpMedNeighborApplicationType=lldpMedNeighborApplicationType, lldpMedLocalDeviceType=lldpMedLocalDeviceType, lldpMedPortConfigEntry=lldpMedPortConfigEntry, lldpMedNeighborAppVLANID=lldpMedNeighborAppVLANID, lldpMedLocalInventoryManufacturerName=lldpMedLocalInventoryManufacturerName, lldpMedConfigPortTlvExtendedPower=lldpMedConfigPortTlvExtendedPower, lldpMedLocalInventorySoftwareRevision=lldpMedLocalInventorySoftwareRevision, lldpMedConfigPortStatus=lldpMedConfigPortStatus, lldpMedLocalInventoryFirmwareRevision=lldpMedLocalInventoryFirmwareRevision, lldpMedNeighborPowerValue=lldpMedNeighborPowerValue, lldpMedNeighborAppTagged=lldpMedNeighborAppTagged, lldpMedNeighborMediaPolicyIndex=lldpMedNeighborMediaPolicyIndex, lldpMedLocalLocationID=lldpMedLocalLocationID, lldpMedConfigPortLocationCivicAddressWhat=lldpMedConfigPortLocationCivicAddressWhat, lldpMedConfigPortLocationCivicAddressCountryCode=lldpMedConfigPortLocationCivicAddressCountryCode, lldpMedConfigPortLocationCivicAddressStreet=lldpMedConfigPortLocationCivicAddressStreet, lldpMedConfigPortLocationCivicAddressAdditional=lldpMedConfigPortLocationCivicAddressAdditional, lldpMedLocalApplicationType=lldpMedLocalApplicationType, lldpMedNeighborInventoryFirmwareRevision=lldpMedNeighborInventoryFirmwareRevision, lldpMedConfigPortLocationCivicAddressPostalZipCode=lldpMedConfigPortLocationCivicAddressPostalZipCode, lldpMedLocalPowerValue=lldpMedLocalPowerValue, lldpMedNeighborLocationDataFormat=lldpMedNeighborLocationDataFormat, lldpMedConfigPortLocationCivicAddressHouseNumber=lldpMedConfigPortLocationCivicAddressHouseNumber, lldpMedNeighborPortIndexId=lldpMedNeighborPortIndexId, lldpMedLocalInventoryAssetID=lldpMedLocalInventoryAssetID, lldpMedLocalPortId=lldpMedLocalPortId, lldpMed=lldpMed, lldpMedConfigPortTlvLocationId=lldpMedConfigPortTlvLocationId, lldpMedNeighborInventoryAssetID=lldpMedNeighborInventoryAssetID, lldpMedLocalInventorySerialNumber=lldpMedLocalInventorySerialNumber, lldpMedNeighborInventorySerialNumber=lldpMedNeighborInventorySerialNumber, lldpMedNeighborMediaPolicyInfoEntry=lldpMedNeighborMediaPolicyInfoEntry, lldpMedNeighborInventoryHardwareRevision=lldpMedNeighborInventoryHardwareRevision, lldpMedPortConfigTlvLocationTable=lldpMedPortConfigTlvLocationTable, lldpMedLocalPowerPriority=lldpMedLocalPowerPriority, lldpMEDNeighborCapabilities=lldpMEDNeighborCapabilities, lldpMedPortConfigTable=lldpMedPortConfigTable, PYSNMP_MODULE_ID=lldpMedNeighborInfo, lldpMedNeighborInfo=lldpMedNeighborInfo, lldpMedNeighborLocationID=lldpMedNeighborLocationID, lldpMedConfigPortLocationCivicAddressPostOfficeBox=lldpMedConfigPortLocationCivicAddressPostOfficeBox, lldpMedLocalAppDSCP=lldpMedLocalAppDSCP, lldpMedNeighborInfoEntry=lldpMedNeighborInfoEntry, lldpMedNeighborInventoryManufacturerName=lldpMedNeighborInventoryManufacturerName, lldpMedLocalAppVLANID=lldpMedLocalAppVLANID, lldpMedNeighborAppDSCP=lldpMedNeighborAppDSCP, lldpMedConfigPortLocationCivicAddressProvince=lldpMedConfigPortLocationCivicAddressProvince, lldpMedLocalInventoryModelName=lldpMedLocalInventoryModelName, lldpMedConfigPortLocationEmergencyNumber=lldpMedConfigPortLocationEmergencyNumber, lldpMedConfigLocationPortId=lldpMedConfigLocationPortId, lldpMedNeighborMediaPolicyInfoTable=lldpMedNeighborMediaPolicyInfoTable, lldpMedLocalLocationDataFormat=lldpMedLocalLocationDataFormat, lldpMEDLocalCapabilities=lldpMEDLocalCapabilities, lldpMedNeighborPortId=lldpMedNeighborPortId, lldpMedNeighborDeviceType=lldpMedNeighborDeviceType, lldpMedLocalAppLayer2Priority=lldpMedLocalAppLayer2Priority, lldpMedNeighborPowerType=lldpMedNeighborPowerType, lldpMedNeighborInventoryModelName=lldpMedNeighborInventoryModelName, lldpMedLocalInventoryHardwareRevision=lldpMedLocalInventoryHardwareRevision, lldpMedConfigPortLocationCivicAddressLanguage=lldpMedConfigPortLocationCivicAddressLanguage, lldpMedLocalInfoTable=lldpMedLocalInfoTable, lldpMedLocalPowerSource=lldpMedLocalPowerSource, lldpMedNeighborPort=lldpMedNeighborPort, lldpMedGlobalConfigFastStartRepeatCount=lldpMedGlobalConfigFastStartRepeatCount, lldpMedConfigPortLocationCivicAddressRoomNumber=lldpMedConfigPortLocationCivicAddressRoomNumber, lldpMedNeighborPowerPriority=lldpMedNeighborPowerPriority, lldpMedNeighborInfoTable=lldpMedNeighborInfoTable, lldpMedLocalAppTagged=lldpMedLocalAppTagged, lldpMedNeighborAppLayer2Priority=lldpMedNeighborAppLayer2Priority, lldpMedNeighborPowerSource=lldpMedNeighborPowerSource, lldpMedConfigPortTlvInventory=lldpMedConfigPortTlvInventory, lldpMedNeighborUnknownPolicy=lldpMedNeighborUnknownPolicy, lldpMedConfigPortLocationCivicAddressCity=lldpMedConfigPortLocationCivicAddressCity)
