#
# PySNMP MIB module HPNSASINFO-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPNSASINFO-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:42:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, enterprises, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ModuleIdentity, Unsigned32, MibIdentifier, TimeTicks, Integer32, Counter64, Gauge32, ObjectIdentity, iso, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "enterprises", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ModuleIdentity", "Unsigned32", "MibIdentifier", "TimeTicks", "Integer32", "Counter64", "Gauge32", "ObjectIdentity", "iso", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hp = MibIdentifier((1, 3, 6, 1, 4, 1, 11))
nm = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2))
hpnsa = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23))
hpnsaSystemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 7))
hpnsaSiMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 1))
hpnsaSiAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 2))
hpnsaSiBasicInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 3))
hpnsaSiSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 4))
hpnsaSiPort = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 5))
hpnsaSiMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 6))
hpnsaSiFloppyDrive = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 8))
hpnsaSiRemoteLocatorLED = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 9))
hpnsaSiMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiMibRevMajor.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiMibRevMajor.setDescription('The major revision level of the MIB.')
hpnsaSiMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiMibRevMinor.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiMibRevMinor.setDescription('The minor revision level of the MIB.')
hpnsaSiAgentTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 2, 1), )
if mibBuilder.loadTexts: hpnsaSiAgentTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiAgentTable.setDescription('A table of software modules that provide an interface to the device this MIB describes.')
hpnsaSiAgentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 2, 1, 1), ).setIndexNames((0, "HPNSASINFO-MIB", "hpnsaSiAgentIndex"))
if mibBuilder.loadTexts: hpnsaSiAgentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiAgentEntry.setDescription('A description of the Agents that access system information.')
hpnsaSiAgentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiAgentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiAgentIndex.setDescription('A unique index for this agent.')
hpnsaSiAgentName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiAgentName.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiAgentName.setDescription('Name of the agent/agents satisfying SNMP requests for this MIB.')
hpnsaSiAgentVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiAgentVersion.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiAgentVersion.setDescription('Version number of the agent/agents satisfying SNMP requests for this MIB.')
hpnsaSiAgentDate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiAgentDate.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiAgentDate.setDescription('The date on which this agent was created. field octets contents range ------------------------------------------------- 1 1 years since 1900 0..255 2 2 month 1..12 3 3 day 1..31 4 4 hour 0..23 5 5 minute 0..59 6 6 second 0..59')
hpnsaSiModel = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 35, 36, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89))).clone(namedValues=NamedValues(("hp-vectra-pc", 0), ("hp-vectra-es-12-pc", 1), ("hp-vectra-rs-20-pc", 2), ("hp-vectra-portablecs-pc", 3), ("hp-vectra-es-pc", 4), ("hp-vectra-cs-pc", 5), ("hp-vectra-rs-16-pc", 6), ("hp-vectra-qs-16-pc", 7), ("hp-vectra-qs-20-pc", 8), ("hp-vectra-rs-20c-pc", 9), ("hp-vectra-rs-25c-pc", 10), ("hp-vectra-ls-286-pc", 11), ("hp-vectra-qs-16s-pc", 12), ("hp-vectra-386-25-pc", 13), ("hp-vectra-486-25t-pc", 14), ("hp-vectra-286-12-pc", 15), ("hp-vectra-486-33t-pc", 16), ("hp-vectra-386-20-pc", 17), ("hp-vectra-386-16n-pc", 18), ("hp-vectra-386-20n-pc", 19), ("hp-vectra-486s-20-pc", 20), ("hp-vectra-386s-20-pc", 21), ("hp-vectra-486-25u-pc", 22), ("hp-vectra-486-33u-pc", 23), ("hp-vectra-486-50u-pc", 24), ("hp-vectra-486-66u-pc", 25), ("hp-vectra-486-st-series", 26), ("hp-vectra-386-25n", 27), ("hp-vectra-486-n", 28), ("hp-vectra-386s-25", 29), ("hp-vectra-386-33n", 30), ("hp-vectra-486-33n", 32), ("hp-netserver-le-series", 35), ("hp-netserver-lm-series", 36), ("hp-netserver-lf-series", 40), ("hp-netserver-lc-series", 41), ("hp-netserver-ls-series", 42), ("hp-netserver-lh-series", 43), ("hp-netserver-lc-series", 44), ("hp-netserver-lx-series", 46), ("hp-netserver-lh-series", 47), ("hp-netserver-lh-series", 49), ("hp-netserver-e-series", 50), ("hp-netserver-e-series", 51), ("hp-netserver-ld-series", 52), ("hp-netserver-racks-series", 54), ("hp-netserver-lc-series", 55), ("hp-netserver-e-series", 56), ("hp-netserver-lx-series", 57), ("hp-netserver-e-series", 58), ("hp-netserver-e-series", 59), ("hp-netserver-lh-series", 60), ("hp-netserver-lc-series", 61), ("hp-netserver-lh-series", 62), ("hp-netserver-lh-series", 63), ("hp-netserver-lx-series", 64), ("hp-netserver-lx-series", 65), ("hp-netserver-lh3000", 66), ("hp-netserver-lh6000", 67), ("hp-netserver-lc2000", 68), ("hp-netserver-lt6000", 69), ("hp-netserver-e-series", 70), ("hp-netserver-e-series", 71), ("hp-netserver-lp1000r", 72), ("hp-netserver-lp2000r", 73), ("hp-netserver-tc6100", 75), ("hp-netserver-tc3100", 79), ("hp-netserver-tc4100", 80), ("hp-netserver-lh6000u3", 82), ("hp-netserver-lt6000ru3", 83), ("hp-netserver-lc2000u3", 84), ("hp-netserver-lh3000u3", 85), ("hp-netserver-lp1000r", 86), ("hp-netserver-lp2000r", 87), ("hp-netserver-tc7100", 88), ("hp-netserver-rc7100", 89)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiModel.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiModel.setDescription('System model')
hpnsaSiBIOSVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiBIOSVersion.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiBIOSVersion.setDescription('Version number of the system BIOS.')
hpnsaSiVideoBIOSVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiVideoBIOSVersion.setStatus('optional')
if mibBuilder.loadTexts: hpnsaSiVideoBIOSVersion.setDescription('Version number of the video BIOS.')
hpnsaSiSCSIBIOSVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiSCSIBIOSVersion.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiSCSIBIOSVersion.setDescription('Version number of the SCSI BIOS.')
hpnsaSiNumEISASlots = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiNumEISASlots.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiNumEISASlots.setDescription('Number of EISA slots in the system.')
hpnsaSiNumPCISlots = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiNumPCISlots.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiNumPCISlots.setDescription('Number of PCI slots in the system.')
hpnsaSiNumCPU = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiNumCPU.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiNumCPU.setDescription('Number of CPUs installed in the system.')
hpnsaSiCPUTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 3, 8), )
if mibBuilder.loadTexts: hpnsaSiCPUTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiCPUTable.setDescription('A table of CPU types installed in the system.')
hpnsaSiCPUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 3, 8, 1), ).setIndexNames((0, "HPNSASINFO-MIB", "hpnsaSiCPUIndex"))
if mibBuilder.loadTexts: hpnsaSiCPUEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiCPUEntry.setDescription('A description of the CPUs installed in the system.')
hpnsaSiCPUIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiCPUIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiCPUIndex.setDescription('A unique index for this CPU.')
hpnsaSiCPUModel = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 253, 254, 255))).clone(namedValues=NamedValues(("cpu-80286", 0), ("cpu-8088", 1), ("cpu-8086", 2), ("cpu-80386", 3), ("cpu-80386-sx", 4), ("cpu-486-dx", 5), ("cpu-486-sx", 6), ("cpu-486-dx2-or-overdrive", 8), ("cpu-486-p23t", 9), ("cpu-487-sx", 10), ("cpu-pentium", 11), ("cpu-pentium-overdrive", 12), ("cpu-486-24c", 13), ("cpu-pentium-series-p54c", 14), ("cpu-pentium-series-p54ct", 15), ("cpu-pentium-series-p54cm", 16), ("cpu-486-sx2", 17), ("cpu-486-sl", 18), ("cpu-pentium-series-p6", 19), ("cpu-pentium-ii", 20), ("cpu-pentium-ii-xeon", 21), ("cpu-pentium-iii", 22), ("cpu-pentium-iii-xeon", 23), ("cpu-itanium", 25), ("notpresent", 253), ("cpu-dual-pentium", 254), ("cpu-unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiCPUModel.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiCPUModel.setDescription('CPU model')
hpnsaSiCPUSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 3, 8, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiCPUSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiCPUSpeed.setDescription('CPU speed in MHz.')
hpnsaSiOpSysType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 3, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiOpSysType.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiOpSysType.setDescription('Name of the operating system executing on this system, e.g., Microsoft Windows NT, Novell NetWare, etc.')
hpnsaSiOpSysVer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 3, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiOpSysVer.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiOpSysVer.setDescription('Operating system version number string., e.g., 3.1.')
hpnsaSiSystemName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiSystemName.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiSystemName.setDescription('Network name of the system, e.g., PAPAYA.')
hpnsaSiSystemID = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 3, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiSystemID.setStatus('optional')
if mibBuilder.loadTexts: hpnsaSiSystemID.setDescription('System ID string that uniquely identifies the system.')
hpnsaSiKbdType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 3, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiKbdType.setStatus('optional')
if mibBuilder.loadTexts: hpnsaSiKbdType.setDescription('Type of keyboard installed, e.g., U.S., French, German, etc.')
hpnsaSiMouseType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 3, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiMouseType.setStatus('optional')
if mibBuilder.loadTexts: hpnsaSiMouseType.setDescription('Type of mouse installed, e.g., Microsoft or compatible, etc.')
hpnsaSiVideoType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 3, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiVideoType.setStatus('optional')
if mibBuilder.loadTexts: hpnsaSiVideoType.setDescription('Type of video installed, e.g., Ultra VGA, Ultra VGA+ etc.')
hpnsaSiNumISASlots = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 3, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiNumISASlots.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiNumISASlots.setDescription('Number of ISA slots in the system.')
hpnsaSiModelName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 3, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiModelName.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiModelName.setDescription('System Model name')
hpnsaSiOpSysDescription = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 3, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiOpSysDescription.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiOpSysDescription.setDescription('Additional Operating System information, such as Build Number and Service pack')
hpnsaSiPowerOnPassword = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("n-a", 0), ("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiPowerOnPassword.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiPowerOnPassword.setDescription('The state of the power on password feature.')
hpnsaSiNetServerMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("n-a", 0), ("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiNetServerMode.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiNetServerMode.setDescription('The state of the network server mode feature.')
hpnsaSiKeyboardLockPassword = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("n-a", 0), ("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiKeyboardLockPassword.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiKeyboardLockPassword.setDescription('The state of the keyboard lock password feature.')
hpnsaSiVideoBlankMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("n-a", 0), ("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiVideoBlankMode.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiVideoBlankMode.setDescription('The state of the blank-screen feature.')
hpnsaSiBootDiskPriority = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("n-a", 0), ("c-then-a", 1), ("a-then-c", 2), ("c-only", 3), ("a-only", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiBootDiskPriority.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiBootDiskPriority.setDescription('Specifies the priority of disks from which the system will boot.')
hpnsaSiWriteToFloppy = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("n-a", 0), ("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiWriteToFloppy.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiWriteToFloppy.setDescription('Specifies whether one can write to a floppy.')
hpnsaSiKbdMouseInactivityTO = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("n-a", 0), ("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiKbdMouseInactivityTO.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiKbdMouseInactivityTO.setDescription('Specifies the state of the keyboard/mouse inactivity timeout feature.')
hpnsaSiPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 5, 1), )
if mibBuilder.loadTexts: hpnsaSiPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiPortTable.setDescription('A table of port informaton for the system.')
hpnsaSiPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 5, 1, 1), ).setIndexNames((0, "HPNSASINFO-MIB", "hpnsaSiPortIndex"))
if mibBuilder.loadTexts: hpnsaSiPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiPortEntry.setDescription('System port information.')
hpnsaSiPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiPortIndex.setDescription('A unique port index.')
hpnsaSiPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("serial", 1), ("parallel", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiPortType.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiPortType.setDescription('Type of port. Serial = 1, parallel = 2.')
hpnsaSiPortStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiPortStartAddress.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiPortStartAddress.setDescription('Port start address.')
hpnsaSiPortEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiPortEndAddress.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiPortEndAddress.setDescription('Port end address.')
hpnsaSiPortInterruptNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiPortInterruptNum.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiPortInterruptNum.setDescription('Interrupt number for this port.')
hpnsaSiBaseMemSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiBaseMemSize.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiBaseMemSize.setDescription('Size of base memory installed, in KB.')
hpnsaSiExtMemSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiExtMemSize.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiExtMemSize.setDescription('Size of extended memory installed, in KB.')
hpnsaSiMemType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 0), ("on-board", 1), ("singleWidthModule", 2), ("doubleWidthModule", 3), ("simm", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiMemType.setStatus('optional')
if mibBuilder.loadTexts: hpnsaSiMemType.setDescription('Type of memory installed. The value other(0) will be given if the type is not known. The value board(1) will be given if the memory module is permanently mounted (not modular) on a system board or memory expansion board.')
hpnsaSiMemSpeed = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiMemSpeed.setStatus('optional')
if mibBuilder.loadTexts: hpnsaSiMemSpeed.setDescription('Memory speed in nanoseconds. The value zero (0) will be given if the module speed cannot be determined.')
hpnsaSiNumFloppyDrives = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiNumFloppyDrives.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiNumFloppyDrives.setDescription('Number of floppy drives installed in the system.')
hpnsaSiFloppyDriveTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 8, 2), )
if mibBuilder.loadTexts: hpnsaSiFloppyDriveTable.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiFloppyDriveTable.setDescription('A table of floppy drive information.')
hpnsaSiFloppyDriveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 8, 2, 1), ).setIndexNames((0, "HPNSASINFO-MIB", "hpnsaSiFloppyDriveIndex"))
if mibBuilder.loadTexts: hpnsaSiFloppyDriveEntry.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiFloppyDriveEntry.setDescription('Floppy drive information.')
hpnsaSiFloppyDriveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiFloppyDriveIndex.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiFloppyDriveIndex.setDescription('Index of the floppy drive.')
hpnsaSiFloppyDriveType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("m-360K", 1), ("m-1-2MB", 2), ("m-1-2-MB", 3), ("m-1-44MB", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiFloppyDriveType.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiFloppyDriveType.setDescription('Type of floppy drive.')
hpnsaSiRemoteLocatorLEDSupported = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notsupported", 0), ("supported", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiRemoteLocatorLEDSupported.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiRemoteLocatorLEDSupported.setDescription('Determines if the Remote Locator LED is implemented on the server.')
hpnsaSiRemoteLocatorLEDStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ledoff", 0), ("ledon", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnsaSiRemoteLocatorLEDStatus.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiRemoteLocatorLEDStatus.setDescription('Current LED Status. Value of (0), LED is OFF, value of (1), LED is ON.')
hpnsaSiRemoteLocatorLEDSet = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 7, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ledoff", 0), ("ledon", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnsaSiRemoteLocatorLEDSet.setStatus('mandatory')
if mibBuilder.loadTexts: hpnsaSiRemoteLocatorLEDSet.setDescription('State to set LED. Value of (0), turn LED OFF, value of (1), turn LED ON.')
mibBuilder.exportSymbols("HPNSASINFO-MIB", hpnsaSiAgentDate=hpnsaSiAgentDate, hpnsaSiOpSysDescription=hpnsaSiOpSysDescription, hpnsaSiMemSpeed=hpnsaSiMemSpeed, hpnsaSiNetServerMode=hpnsaSiNetServerMode, hpnsaSystemInfo=hpnsaSystemInfo, hpnsaSiMibRevMinor=hpnsaSiMibRevMinor, hpnsaSiMibRev=hpnsaSiMibRev, hpnsaSiSystemName=hpnsaSiSystemName, hpnsaSiPortType=hpnsaSiPortType, hpnsaSiRemoteLocatorLEDSupported=hpnsaSiRemoteLocatorLEDSupported, hpnsaSiPortIndex=hpnsaSiPortIndex, hpnsaSiRemoteLocatorLEDStatus=hpnsaSiRemoteLocatorLEDStatus, hpnsaSiAgentName=hpnsaSiAgentName, hpnsaSiRemoteLocatorLED=hpnsaSiRemoteLocatorLED, hpnsaSiNumEISASlots=hpnsaSiNumEISASlots, hpnsaSiFloppyDriveEntry=hpnsaSiFloppyDriveEntry, hpnsaSiFloppyDriveType=hpnsaSiFloppyDriveType, hpnsaSiNumISASlots=hpnsaSiNumISASlots, hpnsaSiRemoteLocatorLEDSet=hpnsaSiRemoteLocatorLEDSet, hpnsaSiOpSysVer=hpnsaSiOpSysVer, hpnsaSiPort=hpnsaSiPort, hpnsaSiCPUSpeed=hpnsaSiCPUSpeed, hpnsaSiMouseType=hpnsaSiMouseType, hpnsaSiBootDiskPriority=hpnsaSiBootDiskPriority, hpnsaSiSecurity=hpnsaSiSecurity, hpnsaSiVideoType=hpnsaSiVideoType, hpnsaSiKbdType=hpnsaSiKbdType, hpnsaSiMemType=hpnsaSiMemType, hpnsaSiCPUModel=hpnsaSiCPUModel, hpnsaSiModelName=hpnsaSiModelName, hpnsaSiBIOSVersion=hpnsaSiBIOSVersion, hpnsaSiCPUEntry=hpnsaSiCPUEntry, hpnsaSiVideoBIOSVersion=hpnsaSiVideoBIOSVersion, hpnsaSiKeyboardLockPassword=hpnsaSiKeyboardLockPassword, hp=hp, hpnsaSiBaseMemSize=hpnsaSiBaseMemSize, hpnsaSiKbdMouseInactivityTO=hpnsaSiKbdMouseInactivityTO, nm=nm, hpnsaSiPortEntry=hpnsaSiPortEntry, hpnsaSiAgentIndex=hpnsaSiAgentIndex, hpnsaSiCPUTable=hpnsaSiCPUTable, hpnsaSiNumPCISlots=hpnsaSiNumPCISlots, hpnsaSiPortEndAddress=hpnsaSiPortEndAddress, hpnsaSiPortTable=hpnsaSiPortTable, hpnsaSiFloppyDriveIndex=hpnsaSiFloppyDriveIndex, hpnsaSiVideoBlankMode=hpnsaSiVideoBlankMode, hpnsaSiPowerOnPassword=hpnsaSiPowerOnPassword, hpnsaSiMibRevMajor=hpnsaSiMibRevMajor, hpnsaSiAgentTable=hpnsaSiAgentTable, hpnsaSiExtMemSize=hpnsaSiExtMemSize, hpnsaSiFloppyDriveTable=hpnsaSiFloppyDriveTable, hpnsaSiModel=hpnsaSiModel, hpnsaSiNumCPU=hpnsaSiNumCPU, hpnsaSiOpSysType=hpnsaSiOpSysType, hpnsaSiPortInterruptNum=hpnsaSiPortInterruptNum, hpnsaSiWriteToFloppy=hpnsaSiWriteToFloppy, hpnsaSiNumFloppyDrives=hpnsaSiNumFloppyDrives, hpnsaSiAgent=hpnsaSiAgent, hpnsaSiAgentEntry=hpnsaSiAgentEntry, hpnsa=hpnsa, hpnsaSiBasicInfo=hpnsaSiBasicInfo, hpnsaSiFloppyDrive=hpnsaSiFloppyDrive, hpnsaSiSCSIBIOSVersion=hpnsaSiSCSIBIOSVersion, hpnsaSiSystemID=hpnsaSiSystemID, hpnsaSiPortStartAddress=hpnsaSiPortStartAddress, hpnsaSiMemory=hpnsaSiMemory, hpnsaSiAgentVersion=hpnsaSiAgentVersion, hpnsaSiCPUIndex=hpnsaSiCPUIndex)
