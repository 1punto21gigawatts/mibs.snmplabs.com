#
# PySNMP MIB module WWP-LEOS-PORT-XCVR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-LEOS-PORT-XCVR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:38:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, ObjectIdentity, Counter64, TimeTicks, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ModuleIdentity, IpAddress, MibIdentifier, Gauge32, Unsigned32, Integer32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ObjectIdentity", "Counter64", "TimeTicks", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ModuleIdentity", "IpAddress", "MibIdentifier", "Gauge32", "Unsigned32", "Integer32", "iso")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
wwpModulesLeos, wwpModules = mibBuilder.importSymbols("WWP-SMI", "wwpModulesLeos", "wwpModules")
wwpLeosPortXcvrMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4))
wwpLeosPortXcvrMIB.setRevisions(('2011-07-06 00:00', '2011-05-24 00:00', '2011-03-08 00:00', '2010-02-01 00:00', '2006-03-15 00:00', '2001-04-03 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wwpLeosPortXcvrMIB.setRevisionsDescriptions(('Added XFP objects. ', "wwpLeosPortXcvrEventType object does not support the enumerations for 'disabled' and 'enabled' as the backend does not support it .", 'Added wwpLeosPortXcvrAdminFrequency, wwpLeosPortXcvrXfpLaserFirstFrequency, wwpLeosPortXcvrXfpLaserLastFrquency, wwpLeosPortXcvrXfpMaxGridScacing, wwpLeosPortXcvrXfpChannelNum, wwpLeosPortXcvrXfpFrequencyError', 'The MIB module for the WWP System physical transceiver devices.', 'Added notification wwpLeosPortXcvrSpeedInfoMissingNotification.', 'Initial creation.',))
if mibBuilder.loadTexts: wwpLeosPortXcvrMIB.setLastUpdated('201107060000Z')
if mibBuilder.loadTexts: wwpLeosPortXcvrMIB.setOrganization('Ciena, Inc')
if mibBuilder.loadTexts: wwpLeosPortXcvrMIB.setContactInfo(' Mib Meister 115 North Sullivan Road Spokane Valley, WA 99037 USA Phone: +1 509 242 9000 Email: support@ciena.com')
if mibBuilder.loadTexts: wwpLeosPortXcvrMIB.setDescription('Corrected Units changed watts to uW in descriptions.')
wwpLeosPortXcvrMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1))
wwpLeosPortXcvr = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1))
wwpLeosPortXcvrNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 2))
wwpLeosPortXcvrMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 2))
wwpLeosPortXcvrMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 2, 0))
wwpLeosPortXcvrMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 3))
wwpLeosPortXcvrMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 3, 1))
wwpLeosPortXcvrMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 3, 2))
wwpLeosPortXcvrTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1), )
if mibBuilder.loadTexts: wwpLeosPortXcvrTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrTable.setDescription('This table contains descriptions and settings for each of the physical transceiver devices.')
wwpLeosPortXcvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1), ).setIndexNames((0, "WWP-LEOS-PORT-XCVR-MIB", "wwpLeosPortXcvrId"))
if mibBuilder.loadTexts: wwpLeosPortXcvrEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrEntry.setDescription('The Transciever Device Entry.')
wwpLeosPortXcvrId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrId.setDescription('The ID for the transceiver.')
wwpLeosPortXcvrOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("loopback", 3), ("notPresent", 4), ("faulted", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrOperState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrOperState.setDescription('The operational state of the transceiver.')
wwpLeosPortXcvrIdentiferType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("unknown", 1), ("gbic", 2), ("solderedType", 3), ("sfp", 4), ("reserved", 5), ("vendorSpecific", 6), ("xbi", 7), ("xenpak", 8), ("xfp", 9), ("xff", 10), ("xfpe", 11), ("xpak", 12), ("x2", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrIdentiferType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrIdentiferType.setDescription('Type for the transceiver.')
wwpLeosPortXcvrExtIdentiferType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unknown", 1), ("sfp-gbic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrExtIdentiferType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrExtIdentiferType.setDescription('Extended identifier type for this transceiver.')
wwpLeosPortXcvrConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrConnectorType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrConnectorType.setDescription('Type of connector. unknown(1), sc(2), fiberChannelStyle1(3), fiberChannelStyle2(4), bnc/tnc(5), coaxialHeader(6), fiberJack(7), lc(8), mt-rj(9), mu(10), sg(11), opticalPitTail(12), reserved(13..32), hssdc(33), copperPitTail(34), reserved(35..128), vendorSpecific(129..256).')
wwpLeosPortXcvrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrType.setDescription('Type of Transceiver.')
wwpLeosPortXcvrVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrVendorName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrVendorName.setDescription("String containing this transceiver's vendor name.")
wwpLeosPortXcvrVendorOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrVendorOUI.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrVendorOUI.setDescription("String containing this transceiver's vendor OUI.")
wwpLeosPortXcvrVendorPN = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrVendorPN.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrVendorPN.setDescription("String containing this transceiver's vendor OUI.")
wwpLeosPortXcvrRevNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrRevNum.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrRevNum.setDescription("String containing this transceiver's part revision number.")
wwpLeosPortXcvrSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrSerialNum.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrSerialNum.setDescription("String containing this transceiver's part serial number.")
wwpLeosPortXcvrEncodingType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrEncodingType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrEncodingType.setDescription('If wwpLeosPortXcvrIdentiferType is SFP, then the following values is defined for the encoding type: unspecified(1), 8B10B(2), 4b5b(3), NRZ(4), Manchester(5), SONET(6), reserved(7-256) If wwpLeosPortXcvrIdentiferType is XFP, then the following values is defined for the encoding type: Bit 7: 64B/66B (yes/no) Bit 6: 8B10B (yes/no) Bit 5: Sonet Scrambled (yes/no) Bit 4: NRZ (yes/no) Bit 3: RZ (yes/no) Bit 2: Tx Dither Support (yes/no) Bit 1: Reserved Bit 0: Reserved Multiple bits can be set at once in the case of XFP. For instance, to indicate support for NRZ(4) and Sonet scrambled (5), the user would see this object with the value of 16 + 32 = 48')
wwpLeosPortXcvrMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrMfgDate.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrMfgDate.setDescription("The transceiver's manufacture date in string.")
wwpLeosPortXcvrComplianceVer = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrComplianceVer.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrComplianceVer.setDescription('This represents the compliance version. Value 1 means digital diagnostic functionality not included or undefined Value 2 means includes functionality defined in Rev 9.0 SFF-8472 Value 3 means TBD Value 4 means TBD.')
wwpLeosPortXcvrWaveLength = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrWaveLength.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrWaveLength.setDescription('This represents the wavelength of the transceiver. Units are nano meter.')
wwpLeosPortXcvrTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrTemperature.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrTemperature.setDescription('This represents the temperature of the transceiver. Units are in degrees C ')
wwpLeosPortXcvrVcc = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrVcc.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrVcc.setDescription('This represents the voltage of the transceiver.')
wwpLeosPortXcvrBias = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrBias.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrBias.setDescription('This represents the bias of the transceiver.')
wwpLeosPortXcvrRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('uW').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrRxPower.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrRxPower.setDescription('This represents the measured receive power of the transceiver. Units are micro Watts.')
wwpLeosPortXcvrTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrTxState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrTxState.setDescription('Indicates whether this transceiver is currently set to transmit.')
wwpLeosPortXcvrTxFaultStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fault", 1), ("noFault", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrTxFaultStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrTxFaultStatus.setDescription('Indicates the fault status of this transceiver.')
wwpLeosPortXcvrRxRateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrRxRateStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrRxRateStatus.setDescription('Indicates the Rx rate status of this transceiver.')
wwpLeosPortXcvr9by125um = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvr9by125um.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvr9by125um.setDescription('Indicates the link length for 9/125um fiber.')
wwpLeosPortXcvr50by125um = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvr50by125um.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvr50by125um.setDescription('Indicates the link length for 50/125um fiber.')
wwpLeosPortXcvr62dot5by125um = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvr62dot5by125um.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvr62dot5by125um.setDescription('Indicates the link length for 62.5/125um fiber.')
wwpLeosPortXcvrCu = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrCu.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrCu.setDescription('Indicates the link length for copper.')
wwpLeosPortXcvrTxOutputPw = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('uW').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrTxOutputPw.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrTxOutputPw.setDescription('Indicates the Tx Output power for the transceiver. Units are micro Watts.')
wwpLeosPortXcvrLosState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 28), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrLosState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrLosState.setDescription("Indicates the Loss Of Signal State for the optical transceiver. Ports without optical transceiver will always report 'false'.")
wwpLeosPortXcvrDiagSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 29), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrDiagSupported.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrDiagSupported.setDescription('Indicates if diagnostics are supported on this transceiver.')
wwpLeosPortXcvrEnhDiagAlarmSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 30), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrEnhDiagAlarmSupported.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrEnhDiagAlarmSupported.setDescription('Indicates if enhanced diagnostics alarms / warnings implemented.')
wwpLeosPortXcvrEnhDiagSoftTxDisableSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 31), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrEnhDiagSoftTxDisableSupported.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrEnhDiagSoftTxDisableSupported.setDescription('Indicates if enhanced diagnostics soft Tx disable control is implemented.')
wwpLeosPortXcvrEnhDiagSoftTxFaultSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 32), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrEnhDiagSoftTxFaultSupported.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrEnhDiagSoftTxFaultSupported.setDescription('Indicates if enhanced diagnostics soft Tx fault monitoring is implemented.')
wwpLeosPortXcvrEnhDiagRxLosSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 33), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrEnhDiagRxLosSupported.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrEnhDiagRxLosSupported.setDescription('Indicates if enhanced diagnostics Rx LOS monitoring is implemented.')
wwpLeosPortXcvrHighTempAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrHighTempAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrHighTempAlarmThreshold.setDescription('Indicates the higher threshold for temperature alarm.')
wwpLeosPortXcvrLowTempAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrLowTempAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrLowTempAlarmThreshold.setDescription('Indicates the lower threshold for temperature alarm.')
wwpLeosPortXcvrHighVccAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrHighVccAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrHighVccAlarmThreshold.setDescription('Indicates the higher threshold for voltage alarm.')
wwpLeosPortXcvrLowVccAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrLowVccAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrLowVccAlarmThreshold.setDescription('Indicates the lower threshold for voltage alarm.')
wwpLeosPortXcvrHighBiasAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrHighBiasAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrHighBiasAlarmThreshold.setDescription('Indicates the higher threshold for bias alarm.')
wwpLeosPortXcvrLowBiasAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrLowBiasAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrLowBiasAlarmThreshold.setDescription('Indicates the lower threshold for bias alarm.')
wwpLeosPortXcvrHighTxPwAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 40), Integer32()).setUnits('uW').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrHighTxPwAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrHighTxPwAlarmThreshold.setDescription('Indicates the higher threshold for Tx power alarm. Units are micro watts')
wwpLeosPortXcvrLowTxPwAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 41), Integer32()).setUnits('uW').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrLowTxPwAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrLowTxPwAlarmThreshold.setDescription('Indicates the lower threshold for Tx power alarm. Units are micro watts.')
wwpLeosPortXcvrHighRxPwAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 42), Integer32()).setUnits('uW').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrHighRxPwAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrHighRxPwAlarmThreshold.setDescription('Indicates the higher threshold for Rx power alarm. Units are micro watts.')
wwpLeosPortXcvrLowRxPwAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 43), Integer32()).setUnits('uW').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrLowRxPwAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrLowRxPwAlarmThreshold.setDescription('Indicates the lower threshold for Rx power alarm. Units are micro watts.')
wwpLeosPortXcvrEnhDiagRateSelectSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 44), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrEnhDiagRateSelectSupported.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrEnhDiagRateSelectSupported.setDescription('Indicates if enhanced diagnostics soft rate select control is implemented.')
wwpLeosPortXcvrAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("loopback", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosPortXcvrAdminState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrAdminState.setDescription('The admin state of the transceiver.')
wwpLeosPortXcvrXfpMinBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpMinBitRate.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpMinBitRate.setDescription('This represents the minimum bit rate.')
wwpLeosPortXcvrXfpMaxBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpMaxBitRate.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpMaxBitRate.setDescription('This represents the maximum bit rate.')
wwpLeosPortXcvrXfpLinkLenSmf1km = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpLinkLenSmf1km.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpLinkLenSmf1km.setDescription('This represents the length (SMF fiber) 1km.')
wwpLeosPortXcvrXfpLinkLenE50u2m = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpLinkLenE50u2m.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpLinkLenE50u2m.setDescription('This represents the length (ext. BW MMF) 2m.')
wwpLeosPortXcvrXfpLinkLen50u1m = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 74), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpLinkLen50u1m.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpLinkLen50u1m.setDescription('This represents the length (50um) 1m.')
wwpLeosPortXcvrXfpLinkLen62dot5u1m = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpLinkLen62dot5u1m.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpLinkLen62dot5u1m.setDescription('This represents the length (62.5um) 1m.')
wwpLeosPortXcvrXfpLinkLenCopper1m = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpLinkLenCopper1m.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpLinkLenCopper1m.setDescription('This represents the length (copper) 1m.')
wwpLeosPortXcvrXfpDevTech = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("vcsel850nm", 1), ("vcsel1310nm", 2), ("vcsel1550nm", 3), ("fp1310nm", 4), ("dfb1310nm", 5), ("dfb1550nm", 6), ("eml1310nm", 7), ("eml1550nm", 8), ("copperOrOther", 9), ("tunable1550nm", 10), ("reserved", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpDevTech.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpDevTech.setDescription('This represents the device technology.')
wwpLeosPortXcvrXfpTransmitterTech = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpTransmitterTech.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpTransmitterTech.setDescription('This represents the device transmitter technology: Bit 3: Wavelength Control (active/none) Bit 2: Transmitter Cooling (cooled/uncooled) Bit 1: Detector Type (apd/pin) Bit 0: Transmitter Tuning (Tunable/non-Tunable) ')
wwpLeosPortXcvrXfpCdrSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 79), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpCdrSupport.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpCdrSupport.setDescription('This represents the CDR support: Bit 7: 9.95 Gb/s (yes/no) Bit 6: 10.3 Gb/s (yes/no) Bit 5: 10.5 Gb/s (yes/no) Bit 4: 10.7 Gb/s (yes/no) Bit 3: 11.1 Gb/s (yes/no) Bit 2: N/A Bit 1: Lineside Loopback (yes/no) Bit 0: XFI Loopback (yes/no) ')
wwpLeosPortXcvrXfpWaveLengthTol = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 80), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpWaveLengthTol.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpWaveLengthTol.setDescription('This represents the wavelength tolerance.')
wwpLeosPortXcvrXfpMaxCaseTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 81), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpMaxCaseTemp.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpMaxCaseTemp.setDescription('This represents the maximum case temperature.')
wwpLeosPortXcvrXfpMaxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 82), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpMaxPower.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpMaxPower.setDescription('This represents the maximum power dissipation.')
wwpLeosPortXcvrXfpMax5vCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 83), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpMax5vCurrent.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpMax5vCurrent.setDescription('This represents the 5.0 Volt Max Current.')
wwpLeosPortXcvrXfpMax3p3vCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpMax3p3vCurrent.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpMax3p3vCurrent.setDescription('This represents the 3.3 Volt Max Current.')
wwpLeosPortXcvrXfpMax1p8vCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 85), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpMax1p8vCurrent.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpMax1p8vCurrent.setDescription('This represents the 1.8 Volt Max Current.')
wwpLeosPortXcvrXfpMaxNeg5p2vCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 86), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpMaxNeg5p2vCurrent.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpMaxNeg5p2vCurrent.setDescription('This represents the -5.2 Volt Max Current.')
wwpLeosPortXcvrXfpDiagMonitorType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 87), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpDiagMonitorType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpDiagMonitorType.setDescription('This represents the diag monitor type: Bit 4 indicates BER support. Bit 3 indidates the Rx Power Meas. type of Avg or OMA.')
wwpLeosPortXcvrXfpEnhancedOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 88), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpEnhancedOptions.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpEnhancedOptions.setDescription('This represents the enhanced options: Bit 7: VPS Support (yes/no) Bit 6: Soft TX_DISABLE (yes/no) Bit 5: Soft P_down (yes/no) Bit 4: VPS LV Regulator Mode (yes/no) Bit 3: VPS bypassed Reg. Mode (yes/no) Bit 2: Active FEC Ctrl (yes/no) Bit 1: Wavelength or frequency Tunability (yes/no) Bit 0: CMU Support Mode (yes/no) ')
wwpLeosPortXcvrXfpAuxMonitoringInput1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("none", 1), ("aPDBiasVoltage", 2), ("reserved", 3), ("tECCurrentMa", 4), ("laserTemp", 5), ("laserWavelength", 6), ("voltage5V", 7), ("voltage3p3V", 8), ("voltage1p8V", 9), ("voltageNeg5p2V", 10), ("voltage5VCurrent", 11), ("voltage3p3VCurrent", 12), ("voltage1p8VCurrent", 13), ("voltageNeg5p2VCurrent", 14), ("unknown", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpAuxMonitoringInput1.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpAuxMonitoringInput1.setDescription('This represents the Aux monitoring of A/D input 1.')
wwpLeosPortXcvrXfpAuxMonitoringInput2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("none", 1), ("aPDBiasVoltage", 2), ("reserved", 3), ("tECCurrentMa", 4), ("laserTemp", 5), ("laserWavelength", 6), ("voltage5V", 7), ("voltage3p3V", 8), ("voltage1p8V", 9), ("voltageNeg5p2V", 10), ("voltage5VCurrent", 11), ("voltage3p3VCurrent", 12), ("voltage1p8VCurrent", 13), ("voltageNeg5p2VCurrent", 14), ("unknown", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpAuxMonitoringInput2.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpAuxMonitoringInput2.setDescription('This represents the Aux monitoring of A/D input 2.')
wwpLeosPortXcvrAdminFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 91), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosPortXcvrAdminFrequency.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrAdminFrequency.setDescription('The admin frequency of the transceiver in GHz')
wwpLeosPortXcvrXfpLaserFirstFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 92), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpLaserFirstFrequency.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpLaserFirstFrequency.setDescription('This represents the first frequency in GHz')
wwpLeosPortXcvrXfpLaserLastFrquency = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 93), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpLaserLastFrquency.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpLaserLastFrquency.setDescription('This represents the last frequency in GHz')
wwpLeosPortXcvrXfpMaxGridScacing = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 94), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpMaxGridScacing.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpMaxGridScacing.setDescription('This represents the maximun support grid spacing in GHz')
wwpLeosPortXcvrXfpChannelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 95), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpChannelNum.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpChannelNum.setDescription('This represents the channel number')
wwpLeosPortXcvrXfpFrequencyError = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 96), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpFrequencyError.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpFrequencyError.setDescription('This represents the frequency error')
wwpLeosPortXcvrAdminWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 97), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosPortXcvrAdminWavelength.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrAdminWavelength.setDescription('The admin wavelength of the transceiver in pico-meter')
wwpLeosPortXcvrAdminChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 98), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosPortXcvrAdminChannel.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrAdminChannel.setDescription('The admin channel number of the transceiver')
wwpLeosPortXcvrXfpLaserFirstWavelenth = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 99), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpLaserFirstWavelenth.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpLaserFirstWavelenth.setDescription('This represents the first wavelength in pico meter')
wwpLeosPortXcvrXfpLaserLastWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 100), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpLaserLastWavelength.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpLaserLastWavelength.setDescription('This represents the last wavelength in pico meter')
wwpLeosPortXcvrXfpLaserFirstChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 101), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpLaserFirstChannel.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpLaserFirstChannel.setDescription('This represents the first channel number')
wwpLeosPortXcvrXfpLaserLastChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 102), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpLaserLastChannel.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrXfpLaserLastChannel.setDescription('This represents the last channel number')
wwpLeosPortXcvrOperFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 103), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrOperFrequency.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrOperFrequency.setDescription('The operational frequency of the transceiver in GHz')
wwpLeosPortXcvrOperWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 104), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrOperWavelength.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrOperWavelength.setDescription('The operational wavelength of the transceiver in pico-meter')
wwpLeosPortXcvrRxDbmPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 105), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrRxDbmPower.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrRxDbmPower.setDescription('Indicates the Rx power level in dBm after scaling and conversion to an integer. To convert back to dBm, convert this value to floating point and divide by 10,000.')
wwpLeosPortXcvrTxDbmPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 106), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrTxDbmPower.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrTxDbmPower.setDescription('Indicates the Tx power level in dBm after scaling and conversion to an integer. To convert back to dBm, convert this value to floating point and divide by 10,000.')
wwpLeosPortXcvrHighTxDbmPwAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 107), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrHighTxDbmPwAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrHighTxDbmPwAlarmThreshold.setDescription('Indicates the higher threshold for Tx power alarm in dBm after scaling and conversion to an integer. To convert back to dBm, convert this value to floating point and divide by 10,000.')
wwpLeosPortXcvrLowTxDbmPwAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 108), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrLowTxDbmPwAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrLowTxDbmPwAlarmThreshold.setDescription('Indicates the lower threshold for Tx power alarm in dBm after scaling and conversion to an integer. To convert back to dBm, convert this value to floating point and divide by 10,000.')
wwpLeosPortXcvrHighRxDbmPwAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 109), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrHighRxDbmPwAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrHighRxDbmPwAlarmThreshold.setDescription('Indicates the higher threshold for Rx power alarm in dBm after scaling and conversion to an integer. To convert back to dBm, convert this value to floating point and divide by 10,000.')
wwpLeosPortXcvrLowRxDbmPwAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 1, 1, 1, 110), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrLowRxDbmPwAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrLowRxDbmPwAlarmThreshold.setDescription('Indicates the lower threshold for Rx power alarm in dBm after scaling and conversion to an integer. To convert back to dBm, convert this value to floating point and divide by 10,000.')
wwpLeosPortXcvrEventType = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inserted", 1), ("removed", 2), ("enabled", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrEventType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrEventType.setDescription('Indicates if the Xcvr specified by the wwpLeosPortXcvrId has come up, gone down or has been selected.')
wwpLeosPortXcvrErrorType = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("chksumFailed", 1), ("opticalFault", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortXcvrErrorType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrErrorType.setDescription('Indicates if the Xcvr specified by the wwpLeosPortXcvrId is faulted because of checksum failure or optical fault. This object only makes sense if transceiver has been detected faulted otherwise it returns none.')
wwpLeosPortXcvrLinkStateChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 2, 0, 4)).setObjects(("WWP-LEOS-PORT-XCVR-MIB", "wwpLeosPortXcvrId"), ("WWP-LEOS-PORT-XCVR-MIB", "wwpLeosPortXcvrEventType"))
if mibBuilder.loadTexts: wwpLeosPortXcvrLinkStateChangeNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrLinkStateChangeNotification.setDescription('A wwpLeosPortXcvrLinkStateChangeNotification is sent if the Xcvr state has changed.')
wwpLeosPortXcvrErrorTypeNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 2, 0, 5)).setObjects(("WWP-LEOS-PORT-XCVR-MIB", "wwpLeosPortXcvrId"), ("WWP-LEOS-PORT-XCVR-MIB", "wwpLeosPortXcvrErrorType"))
if mibBuilder.loadTexts: wwpLeosPortXcvrErrorTypeNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrErrorTypeNotification.setDescription('A wwpLeosPortXcvrErrorTypeNotification is sent if the Xcvr is detected faulted because of some reason. Reason of failure is specified by wwpLeosPortXcvrErrorType.')
wwpLeosPortXcvrTempHighNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 2, 0, 6)).setObjects(("WWP-LEOS-PORT-XCVR-MIB", "wwpLeosPortXcvrId"))
if mibBuilder.loadTexts: wwpLeosPortXcvrTempHighNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrTempHighNotification.setDescription('A wwpLeosPortXcvrTempHighNotification is sent if the Xcvr temperature exceeds the threshold.')
wwpLeosPortXcvrTempLowNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 2, 0, 7)).setObjects(("WWP-LEOS-PORT-XCVR-MIB", "wwpLeosPortXcvrId"))
if mibBuilder.loadTexts: wwpLeosPortXcvrTempLowNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrTempLowNotification.setDescription('A wwpLeosPortXcvrTempLowNotification is sent if the Xcvr temperature decreases the threshold.')
wwpLeosPortXcvrTempNormalNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 2, 0, 8)).setObjects(("WWP-LEOS-PORT-XCVR-MIB", "wwpLeosPortXcvrId"))
if mibBuilder.loadTexts: wwpLeosPortXcvrTempNormalNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrTempNormalNotification.setDescription('A wwpLeosPortXcvrTempNormalNotification is sent if the Xcvr temperature returns back to normal state.')
wwpLeosPortXcvrVoltageHighNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 2, 0, 9)).setObjects(("WWP-LEOS-PORT-XCVR-MIB", "wwpLeosPortXcvrId"))
if mibBuilder.loadTexts: wwpLeosPortXcvrVoltageHighNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrVoltageHighNotification.setDescription('A wwpLeosPortXcvrVoltageHighNotification is sent if the Xcvr voltage exceeds the threshold.')
wwpLeosPortXcvrVoltageLowNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 2, 0, 10)).setObjects(("WWP-LEOS-PORT-XCVR-MIB", "wwpLeosPortXcvrId"))
if mibBuilder.loadTexts: wwpLeosPortXcvrVoltageLowNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrVoltageLowNotification.setDescription('A wwpLeosPortXcvrVoltageLowNotification is sent if the Xcvr voltage decreases the threshold.')
wwpLeosPortXcvrVoltageNormalNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 2, 0, 11)).setObjects(("WWP-LEOS-PORT-XCVR-MIB", "wwpLeosPortXcvrId"))
if mibBuilder.loadTexts: wwpLeosPortXcvrVoltageNormalNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrVoltageNormalNotification.setDescription('A wwpLeosPortXcvrVoltageNormalNotification is sent if the Xcvr voltage returns back to normal state.')
wwpLeosPortXcvrBiasHighNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 2, 0, 12)).setObjects(("WWP-LEOS-PORT-XCVR-MIB", "wwpLeosPortXcvrId"))
if mibBuilder.loadTexts: wwpLeosPortXcvrBiasHighNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrBiasHighNotification.setDescription('A wwpLeosPortXcvrBiasHighNotification is sent if the Xcvr Bias exceeds the threshold.')
wwpLeosPortXcvrBiasLowNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 2, 0, 13)).setObjects(("WWP-LEOS-PORT-XCVR-MIB", "wwpLeosPortXcvrId"))
if mibBuilder.loadTexts: wwpLeosPortXcvrBiasLowNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrBiasLowNotification.setDescription('A wwpLeosPortXcvrBiasLowNotification is sent if the Xcvr voltage decreases the threshold.')
wwpLeosPortXcvrBiasNormalNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 2, 0, 14)).setObjects(("WWP-LEOS-PORT-XCVR-MIB", "wwpLeosPortXcvrId"))
if mibBuilder.loadTexts: wwpLeosPortXcvrBiasNormalNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrBiasNormalNotification.setDescription('A wwpLeosPortXcvrBiasNormalNotification is sent if the Xcvr Bias returns back to normal state.')
wwpLeosPortXcvrTxPowerHighNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 2, 0, 15)).setObjects(("WWP-LEOS-PORT-XCVR-MIB", "wwpLeosPortXcvrId"))
if mibBuilder.loadTexts: wwpLeosPortXcvrTxPowerHighNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrTxPowerHighNotification.setDescription('A wwpLeosPortXcvrTxPowerHighNotification is sent if the Xcvr TxPower exceeds the threshold.')
wwpLeosPortXcvrTxPowerLowNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 2, 0, 16)).setObjects(("WWP-LEOS-PORT-XCVR-MIB", "wwpLeosPortXcvrId"))
if mibBuilder.loadTexts: wwpLeosPortXcvrTxPowerLowNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrTxPowerLowNotification.setDescription('A wwpLeosPortXcvrTxPowerLowNotification is sent if the Xcvr voltage decreases the threshold.')
wwpLeosPortXcvrTxPowerNormalNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 2, 0, 17)).setObjects(("WWP-LEOS-PORT-XCVR-MIB", "wwpLeosPortXcvrId"))
if mibBuilder.loadTexts: wwpLeosPortXcvrTxPowerNormalNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrTxPowerNormalNotification.setDescription('A wwpLeosPortXcvrTxPowerNormalNotification is sent if the Xcvr TxPower returns back to normal state.')
wwpLeosPortXcvrRxPowerHighNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 2, 0, 18)).setObjects(("WWP-LEOS-PORT-XCVR-MIB", "wwpLeosPortXcvrId"))
if mibBuilder.loadTexts: wwpLeosPortXcvrRxPowerHighNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrRxPowerHighNotification.setDescription('A wwpLeosPortXcvrRxPowerHighNotification is sent if the Xcvr RxPower exceeds the threshold.')
wwpLeosPortXcvrRxPowerLowNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 2, 0, 19)).setObjects(("WWP-LEOS-PORT-XCVR-MIB", "wwpLeosPortXcvrId"))
if mibBuilder.loadTexts: wwpLeosPortXcvrRxPowerLowNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrRxPowerLowNotification.setDescription('A wwpLeosPortXcvrRxPowerLowNotification is sent if the Xcvr voltage decreases the threshold.')
wwpLeosPortXcvrRxPowerNormalNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 2, 0, 20)).setObjects(("WWP-LEOS-PORT-XCVR-MIB", "wwpLeosPortXcvrId"))
if mibBuilder.loadTexts: wwpLeosPortXcvrRxPowerNormalNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrRxPowerNormalNotification.setDescription('A wwpLeosPortXcvrRxPowerNormalNotification is sent if the Xcvr RxPower returns back to normal state.')
wwpLeosPortXcvrSpeedInfoMissingNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 2, 0, 21)).setObjects(("WWP-LEOS-PORT-XCVR-MIB", "wwpLeosPortXcvrId"))
if mibBuilder.loadTexts: wwpLeosPortXcvrSpeedInfoMissingNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrSpeedInfoMissingNotification.setDescription('A wwpLeosPortXcvrSpeedInfoMissingNotification is sent if the Xcvr speed information is not found.')
wwpLeosPortXcvrBiasHighWarningNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 2, 0, 22)).setObjects(("WWP-LEOS-PORT-XCVR-MIB", "wwpLeosPortXcvrId"))
if mibBuilder.loadTexts: wwpLeosPortXcvrBiasHighWarningNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrBiasHighWarningNotification.setDescription('A wwpLeosPortXcvrBiasHighNotification is sent if the Xcvr Bias exceeds the warning threshold.')
wwpLeosPortXcvrBiasLowWarningNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 2, 0, 23)).setObjects(("WWP-LEOS-PORT-XCVR-MIB", "wwpLeosPortXcvrId"))
if mibBuilder.loadTexts: wwpLeosPortXcvrBiasLowWarningNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrBiasLowWarningNotification.setDescription('A wwpLeosPortXcvrBiasLowNotification is sent if the Xcvr voltage decreases below the warning threshold.')
wwpLeosPortXcvrTempHighWarningNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 2, 0, 24)).setObjects(("WWP-LEOS-PORT-XCVR-MIB", "wwpLeosPortXcvrId"))
if mibBuilder.loadTexts: wwpLeosPortXcvrTempHighWarningNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrTempHighWarningNotification.setDescription('A wwpLeosPortXcvrTempHighNotification is sent if the Xcvr temperature exceeds the warning threshold.')
wwpLeosPortXcvrTempLowWarningNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 2, 0, 25)).setObjects(("WWP-LEOS-PORT-XCVR-MIB", "wwpLeosPortXcvrId"))
if mibBuilder.loadTexts: wwpLeosPortXcvrTempLowWarningNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrTempLowWarningNotification.setDescription('A wwpLeosPortXcvrTempLowNotification is sent if the Xcvr temperature decreases below the warning threshold.')
wwpLeosPortXcvrVoltageHighWarningNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 2, 0, 26)).setObjects(("WWP-LEOS-PORT-XCVR-MIB", "wwpLeosPortXcvrId"))
if mibBuilder.loadTexts: wwpLeosPortXcvrVoltageHighWarningNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrVoltageHighWarningNotification.setDescription('A wwpLeosPortXcvrVoltageHighNotification is sent if the Xcvr voltage exceeds the warning threshold.')
wwpLeosPortXcvrVoltageLowWarningNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 2, 0, 27)).setObjects(("WWP-LEOS-PORT-XCVR-MIB", "wwpLeosPortXcvrId"))
if mibBuilder.loadTexts: wwpLeosPortXcvrVoltageLowWarningNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrVoltageLowWarningNotification.setDescription('A wwpLeosPortXcvrVoltageLowNotification is sent if the Xcvr voltage decreases below the warning threshold.')
wwpLeosPortXcvrTxPowerHighWarningNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 2, 0, 28)).setObjects(("WWP-LEOS-PORT-XCVR-MIB", "wwpLeosPortXcvrId"))
if mibBuilder.loadTexts: wwpLeosPortXcvrTxPowerHighWarningNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrTxPowerHighWarningNotification.setDescription('A wwpLeosPortXcvrTxPowerHighNotification is sent if the Xcvr TxPower exceeds the warning threshold.')
wwpLeosPortXcvrTxPowerLowWarningNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 2, 0, 29)).setObjects(("WWP-LEOS-PORT-XCVR-MIB", "wwpLeosPortXcvrId"))
if mibBuilder.loadTexts: wwpLeosPortXcvrTxPowerLowWarningNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrTxPowerLowWarningNotification.setDescription('A wwpLeosPortXcvrTxPowerLowNotification is sent if the Xcvr TxPower decreases below the warning threshold.')
wwpLeosPortXcvrRxPowerHighWarningNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 2, 0, 30)).setObjects(("WWP-LEOS-PORT-XCVR-MIB", "wwpLeosPortXcvrId"))
if mibBuilder.loadTexts: wwpLeosPortXcvrRxPowerHighWarningNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrRxPowerHighWarningNotification.setDescription('A wwpLeosPortXcvrRxPowerHighNotification is sent if the Xcvr RxPower exceeds the warning threshold.')
wwpLeosPortXcvrRxPowerLowWarningNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 4, 2, 0, 31)).setObjects(("WWP-LEOS-PORT-XCVR-MIB", "wwpLeosPortXcvrId"))
if mibBuilder.loadTexts: wwpLeosPortXcvrRxPowerLowWarningNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPortXcvrRxPowerLowWarningNotification.setDescription('A wwpLeosPortXcvrRxPowerLowNotification is sent if the Xcvr RxPower decreases below the warning threshold.')
mibBuilder.exportSymbols("WWP-LEOS-PORT-XCVR-MIB", wwpLeosPortXcvrXfpLinkLenCopper1m=wwpLeosPortXcvrXfpLinkLenCopper1m, wwpLeosPortXcvrConnectorType=wwpLeosPortXcvrConnectorType, wwpLeosPortXcvrAdminWavelength=wwpLeosPortXcvrAdminWavelength, wwpLeosPortXcvr=wwpLeosPortXcvr, wwpLeosPortXcvrVoltageNormalNotification=wwpLeosPortXcvrVoltageNormalNotification, wwpLeosPortXcvrAdminChannel=wwpLeosPortXcvrAdminChannel, wwpLeosPortXcvrLinkStateChangeNotification=wwpLeosPortXcvrLinkStateChangeNotification, wwpLeosPortXcvrLowTxPwAlarmThreshold=wwpLeosPortXcvrLowTxPwAlarmThreshold, wwpLeosPortXcvrHighTempAlarmThreshold=wwpLeosPortXcvrHighTempAlarmThreshold, wwpLeosPortXcvrTxPowerHighWarningNotification=wwpLeosPortXcvrTxPowerHighWarningNotification, wwpLeosPortXcvrXfpDevTech=wwpLeosPortXcvrXfpDevTech, wwpLeosPortXcvrErrorType=wwpLeosPortXcvrErrorType, wwpLeosPortXcvrEnhDiagAlarmSupported=wwpLeosPortXcvrEnhDiagAlarmSupported, wwpLeosPortXcvrXfpLaserLastChannel=wwpLeosPortXcvrXfpLaserLastChannel, wwpLeosPortXcvrXfpMaxGridScacing=wwpLeosPortXcvrXfpMaxGridScacing, wwpLeosPortXcvrRxPowerHighNotification=wwpLeosPortXcvrRxPowerHighNotification, wwpLeosPortXcvrXfpMaxCaseTemp=wwpLeosPortXcvrXfpMaxCaseTemp, wwpLeosPortXcvrXfpDiagMonitorType=wwpLeosPortXcvrXfpDiagMonitorType, wwpLeosPortXcvrVoltageHighNotification=wwpLeosPortXcvrVoltageHighNotification, wwpLeosPortXcvrHighRxDbmPwAlarmThreshold=wwpLeosPortXcvrHighRxDbmPwAlarmThreshold, wwpLeosPortXcvrMIBGroups=wwpLeosPortXcvrMIBGroups, wwpLeosPortXcvrDiagSupported=wwpLeosPortXcvrDiagSupported, wwpLeosPortXcvrBiasNormalNotification=wwpLeosPortXcvrBiasNormalNotification, wwpLeosPortXcvrXfpMax5vCurrent=wwpLeosPortXcvrXfpMax5vCurrent, wwpLeosPortXcvrLowBiasAlarmThreshold=wwpLeosPortXcvrLowBiasAlarmThreshold, wwpLeosPortXcvrMIBCompliances=wwpLeosPortXcvrMIBCompliances, wwpLeosPortXcvrXfpLaserLastFrquency=wwpLeosPortXcvrXfpLaserLastFrquency, wwpLeosPortXcvrTable=wwpLeosPortXcvrTable, wwpLeosPortXcvrBiasLowWarningNotification=wwpLeosPortXcvrBiasLowWarningNotification, PYSNMP_MODULE_ID=wwpLeosPortXcvrMIB, wwpLeosPortXcvrTxPowerHighNotification=wwpLeosPortXcvrTxPowerHighNotification, wwpLeosPortXcvrHighRxPwAlarmThreshold=wwpLeosPortXcvrHighRxPwAlarmThreshold, wwpLeosPortXcvrVoltageHighWarningNotification=wwpLeosPortXcvrVoltageHighWarningNotification, wwpLeosPortXcvrXfpTransmitterTech=wwpLeosPortXcvrXfpTransmitterTech, wwpLeosPortXcvrEntry=wwpLeosPortXcvrEntry, wwpLeosPortXcvrBias=wwpLeosPortXcvrBias, wwpLeosPortXcvrTxFaultStatus=wwpLeosPortXcvrTxFaultStatus, wwpLeosPortXcvrExtIdentiferType=wwpLeosPortXcvrExtIdentiferType, wwpLeosPortXcvrTxPowerLowNotification=wwpLeosPortXcvrTxPowerLowNotification, wwpLeosPortXcvrTxPowerLowWarningNotification=wwpLeosPortXcvrTxPowerLowWarningNotification, wwpLeosPortXcvrAdminFrequency=wwpLeosPortXcvrAdminFrequency, wwpLeosPortXcvrLowTempAlarmThreshold=wwpLeosPortXcvrLowTempAlarmThreshold, wwpLeosPortXcvrMIBConformance=wwpLeosPortXcvrMIBConformance, wwpLeosPortXcvrXfpMinBitRate=wwpLeosPortXcvrXfpMinBitRate, wwpLeosPortXcvrXfpLinkLen50u1m=wwpLeosPortXcvrXfpLinkLen50u1m, wwpLeosPortXcvrMIBObjects=wwpLeosPortXcvrMIBObjects, wwpLeosPortXcvrEventType=wwpLeosPortXcvrEventType, wwpLeosPortXcvrRxPowerHighWarningNotification=wwpLeosPortXcvrRxPowerHighWarningNotification, wwpLeosPortXcvrXfpChannelNum=wwpLeosPortXcvrXfpChannelNum, wwpLeosPortXcvrXfpMaxBitRate=wwpLeosPortXcvrXfpMaxBitRate, wwpLeosPortXcvrXfpLinkLenE50u2m=wwpLeosPortXcvrXfpLinkLenE50u2m, wwpLeosPortXcvrOperFrequency=wwpLeosPortXcvrOperFrequency, wwpLeosPortXcvrXfpLaserFirstWavelenth=wwpLeosPortXcvrXfpLaserFirstWavelenth, wwpLeosPortXcvrErrorTypeNotification=wwpLeosPortXcvrErrorTypeNotification, wwpLeosPortXcvrTempNormalNotification=wwpLeosPortXcvrTempNormalNotification, wwpLeosPortXcvrHighTxPwAlarmThreshold=wwpLeosPortXcvrHighTxPwAlarmThreshold, wwpLeosPortXcvrId=wwpLeosPortXcvrId, wwpLeosPortXcvrXfpMaxNeg5p2vCurrent=wwpLeosPortXcvrXfpMaxNeg5p2vCurrent, wwpLeosPortXcvrVendorOUI=wwpLeosPortXcvrVendorOUI, wwpLeosPortXcvrMIBNotificationPrefix=wwpLeosPortXcvrMIBNotificationPrefix, wwpLeosPortXcvrVcc=wwpLeosPortXcvrVcc, wwpLeosPortXcvrComplianceVer=wwpLeosPortXcvrComplianceVer, wwpLeosPortXcvrXfpLaserLastWavelength=wwpLeosPortXcvrXfpLaserLastWavelength, wwpLeosPortXcvrEnhDiagRxLosSupported=wwpLeosPortXcvrEnhDiagRxLosSupported, wwpLeosPortXcvrRxPowerLowNotification=wwpLeosPortXcvrRxPowerLowNotification, wwpLeosPortXcvrTempLowWarningNotification=wwpLeosPortXcvrTempLowWarningNotification, wwpLeosPortXcvrXfpMaxPower=wwpLeosPortXcvrXfpMaxPower, wwpLeosPortXcvrMfgDate=wwpLeosPortXcvrMfgDate, wwpLeosPortXcvrVoltageLowNotification=wwpLeosPortXcvrVoltageLowNotification, wwpLeosPortXcvrLowVccAlarmThreshold=wwpLeosPortXcvrLowVccAlarmThreshold, wwpLeosPortXcvrEncodingType=wwpLeosPortXcvrEncodingType, wwpLeosPortXcvrBiasLowNotification=wwpLeosPortXcvrBiasLowNotification, wwpLeosPortXcvrOperWavelength=wwpLeosPortXcvrOperWavelength, wwpLeosPortXcvrXfpFrequencyError=wwpLeosPortXcvrXfpFrequencyError, wwpLeosPortXcvrEnhDiagSoftTxDisableSupported=wwpLeosPortXcvrEnhDiagSoftTxDisableSupported, wwpLeosPortXcvrXfpAuxMonitoringInput1=wwpLeosPortXcvrXfpAuxMonitoringInput1, wwpLeosPortXcvrOperState=wwpLeosPortXcvrOperState, wwpLeosPortXcvrRxPowerNormalNotification=wwpLeosPortXcvrRxPowerNormalNotification, wwpLeosPortXcvrXfpAuxMonitoringInput2=wwpLeosPortXcvrXfpAuxMonitoringInput2, wwpLeosPortXcvrRxRateStatus=wwpLeosPortXcvrRxRateStatus, wwpLeosPortXcvrEnhDiagRateSelectSupported=wwpLeosPortXcvrEnhDiagRateSelectSupported, wwpLeosPortXcvr50by125um=wwpLeosPortXcvr50by125um, wwpLeosPortXcvrTempHighWarningNotification=wwpLeosPortXcvrTempHighWarningNotification, wwpLeosPortXcvrTxState=wwpLeosPortXcvrTxState, wwpLeosPortXcvrVoltageLowWarningNotification=wwpLeosPortXcvrVoltageLowWarningNotification, wwpLeosPortXcvrIdentiferType=wwpLeosPortXcvrIdentiferType, wwpLeosPortXcvrType=wwpLeosPortXcvrType, wwpLeosPortXcvrTemperature=wwpLeosPortXcvrTemperature, wwpLeosPortXcvrWaveLength=wwpLeosPortXcvrWaveLength, wwpLeosPortXcvrAdminState=wwpLeosPortXcvrAdminState, wwpLeosPortXcvrLowTxDbmPwAlarmThreshold=wwpLeosPortXcvrLowTxDbmPwAlarmThreshold, wwpLeosPortXcvrTxPowerNormalNotification=wwpLeosPortXcvrTxPowerNormalNotification, wwpLeosPortXcvrSerialNum=wwpLeosPortXcvrSerialNum, wwpLeosPortXcvrHighBiasAlarmThreshold=wwpLeosPortXcvrHighBiasAlarmThreshold, wwpLeosPortXcvrXfpCdrSupport=wwpLeosPortXcvrXfpCdrSupport, wwpLeosPortXcvrTempLowNotification=wwpLeosPortXcvrTempLowNotification, wwpLeosPortXcvrHighTxDbmPwAlarmThreshold=wwpLeosPortXcvrHighTxDbmPwAlarmThreshold, wwpLeosPortXcvrBiasHighNotification=wwpLeosPortXcvrBiasHighNotification, wwpLeosPortXcvrLosState=wwpLeosPortXcvrLosState, wwpLeosPortXcvrLowRxDbmPwAlarmThreshold=wwpLeosPortXcvrLowRxDbmPwAlarmThreshold, wwpLeosPortXcvrTempHighNotification=wwpLeosPortXcvrTempHighNotification, wwpLeosPortXcvrVendorPN=wwpLeosPortXcvrVendorPN, wwpLeosPortXcvrXfpLinkLen62dot5u1m=wwpLeosPortXcvrXfpLinkLen62dot5u1m, wwpLeosPortXcvrCu=wwpLeosPortXcvrCu, wwpLeosPortXcvrXfpWaveLengthTol=wwpLeosPortXcvrXfpWaveLengthTol, wwpLeosPortXcvr9by125um=wwpLeosPortXcvr9by125um, wwpLeosPortXcvrNotif=wwpLeosPortXcvrNotif, wwpLeosPortXcvrEnhDiagSoftTxFaultSupported=wwpLeosPortXcvrEnhDiagSoftTxFaultSupported, wwpLeosPortXcvrXfpLinkLenSmf1km=wwpLeosPortXcvrXfpLinkLenSmf1km, wwpLeosPortXcvrSpeedInfoMissingNotification=wwpLeosPortXcvrSpeedInfoMissingNotification, wwpLeosPortXcvrRxPowerLowWarningNotification=wwpLeosPortXcvrRxPowerLowWarningNotification, wwpLeosPortXcvrMIB=wwpLeosPortXcvrMIB, wwpLeosPortXcvrXfpMax3p3vCurrent=wwpLeosPortXcvrXfpMax3p3vCurrent, wwpLeosPortXcvrXfpEnhancedOptions=wwpLeosPortXcvrXfpEnhancedOptions, wwpLeosPortXcvrXfpLaserFirstFrequency=wwpLeosPortXcvrXfpLaserFirstFrequency, wwpLeosPortXcvrMIBNotifications=wwpLeosPortXcvrMIBNotifications, wwpLeosPortXcvrRxPower=wwpLeosPortXcvrRxPower, wwpLeosPortXcvrXfpLaserFirstChannel=wwpLeosPortXcvrXfpLaserFirstChannel, wwpLeosPortXcvrLowRxPwAlarmThreshold=wwpLeosPortXcvrLowRxPwAlarmThreshold, wwpLeosPortXcvrBiasHighWarningNotification=wwpLeosPortXcvrBiasHighWarningNotification, wwpLeosPortXcvrTxDbmPower=wwpLeosPortXcvrTxDbmPower, wwpLeosPortXcvrHighVccAlarmThreshold=wwpLeosPortXcvrHighVccAlarmThreshold, wwpLeosPortXcvrXfpMax1p8vCurrent=wwpLeosPortXcvrXfpMax1p8vCurrent, wwpLeosPortXcvr62dot5by125um=wwpLeosPortXcvr62dot5by125um, wwpLeosPortXcvrVendorName=wwpLeosPortXcvrVendorName, wwpLeosPortXcvrRxDbmPower=wwpLeosPortXcvrRxDbmPower, wwpLeosPortXcvrTxOutputPw=wwpLeosPortXcvrTxOutputPw, wwpLeosPortXcvrRevNum=wwpLeosPortXcvrRevNum)
