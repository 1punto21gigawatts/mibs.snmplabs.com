#
# PySNMP MIB module WWP-GENERIC-IGMP-SNOOP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-GENERIC-IGMP-SNOOP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:37:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, IpAddress, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, iso, Bits, Unsigned32, Integer32, TimeTicks, NotificationType, Gauge32, Counter64, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "IpAddress", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "iso", "Bits", "Unsigned32", "Integer32", "TimeTicks", "NotificationType", "Gauge32", "Counter64", "ObjectIdentity")
TruthValue, DateAndTime, DisplayString, RowStatus, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DateAndTime", "DisplayString", "RowStatus", "MacAddress", "TextualConvention")
wwpModules, = mibBuilder.importSymbols("WWP-SMI", "wwpModules")
wwpGenIgmpSnoopMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 19))
wwpGenIgmpSnoopMIB.setRevisions(('2005-05-24 00:00', '2003-05-02 00:00', '2001-04-03 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wwpGenIgmpSnoopMIB.setRevisionsDescriptions(('This MIB specifies the managed objects for IGMP per vlan Snooping specific to the WWP products.', 'A new object for igmp snoop packet priority is added.', 'Initial creation.',))
if mibBuilder.loadTexts: wwpGenIgmpSnoopMIB.setLastUpdated('200104031700Z')
if mibBuilder.loadTexts: wwpGenIgmpSnoopMIB.setOrganization('World Wide Packets, Inc')
if mibBuilder.loadTexts: wwpGenIgmpSnoopMIB.setContactInfo(' Mib Meister Postal: World Wide Packets P.O. Box 950 Veradale, WA 99037 USA Phone: +1 509 242 9000 Email: mib.meister@worldwidepackets.com')
if mibBuilder.loadTexts: wwpGenIgmpSnoopMIB.setDescription('Revised with 2 new objects added, wwpGenIgmpSnoopLeaveMode wwpGenIgmpSnoopInqLeaveTimeout.0')
class PortList(TextualConvention, OctetString):
    description = "Each octet within this value specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the bridge is represented by a single bit within the value of this object. If that bit has a value of '1' then that port is included in the set of ports; the port is not included if its bit has a value of '0'."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class VlanId(TextualConvention, Integer32):
    description = 'A 12-bit VLAN ID used in the VLAN Tag header.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4094)

wwpGenIgmpSnoopMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 19, 1))
wwpGenIgmpSnoop = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 19, 1, 1))
wwpGenIgmpSnoopMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 19, 2))
wwpGenIgmpSnoopMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 19, 2, 0))
wwpGenIgmpSnoopMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 19, 3))
wwpGenIgmpSnoopMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 19, 3, 1))
wwpGenIgmpSnoopMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 19, 3, 2))
wwpGenIgmpSnoopGlobalActivate = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 19, 1, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpGenIgmpSnoopGlobalActivate.setStatus('current')
if mibBuilder.loadTexts: wwpGenIgmpSnoopGlobalActivate.setDescription('Activate the GenIgmp Box wide Snooping operation with a value of True(1) or stop it with False(2).')
wwpGenIgmpSnoopActTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 19, 1, 1, 2), )
if mibBuilder.loadTexts: wwpGenIgmpSnoopActTable.setStatus('current')
if mibBuilder.loadTexts: wwpGenIgmpSnoopActTable.setDescription('The (conceptual) table listing the vlans on which the igmp snoping is enabled/disabled.')
wwpGenIgmpSnoopActEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 19, 1, 1, 2, 1), ).setIndexNames((0, "WWP-GENERIC-IGMP-SNOOP-MIB", "wwpGenIgmpSnoopActVlanId"))
if mibBuilder.loadTexts: wwpGenIgmpSnoopActEntry.setStatus('current')
if mibBuilder.loadTexts: wwpGenIgmpSnoopActEntry.setDescription('An entry (conceptual row) in the wwpGenIgmpSnoopActTable.')
wwpGenIgmpSnoopActVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 19, 1, 1, 2, 1, 1), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpGenIgmpSnoopActVlanId.setStatus('current')
if mibBuilder.loadTexts: wwpGenIgmpSnoopActVlanId.setDescription('The vlan for which this igmp snooping can be enabled/disabled.')
wwpGenIgmpSnoopRouterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 19, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpGenIgmpSnoopRouterPort.setStatus('current')
if mibBuilder.loadTexts: wwpGenIgmpSnoopRouterPort.setDescription('The router port from which the igmp query messages are received, and joins/leaves messages are sent. If there is no router port associated, the object will return 0.')
wwpGenIgmpSnoopActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 19, 1, 1, 2, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpGenIgmpSnoopActivate.setStatus('current')
if mibBuilder.loadTexts: wwpGenIgmpSnoopActivate.setDescription('Activate the GenIgmp Snooping operation with a value of True(1) or stop it with False(2).')
wwpGenIgmpSnoopTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 19, 1, 1, 3), )
if mibBuilder.loadTexts: wwpGenIgmpSnoopTable.setStatus('current')
if mibBuilder.loadTexts: wwpGenIgmpSnoopTable.setDescription('The (conceptual) table listing the IP multicast groups for which there are members on particular vlans.')
wwpGenIgmpSnoopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 19, 1, 1, 3, 1), ).setIndexNames((0, "WWP-GENERIC-IGMP-SNOOP-MIB", "wwpGenIgmpSnoopVlanId"), (0, "WWP-GENERIC-IGMP-SNOOP-MIB", "wwpGenIgmpSnoopGroupAddress"))
if mibBuilder.loadTexts: wwpGenIgmpSnoopEntry.setStatus('current')
if mibBuilder.loadTexts: wwpGenIgmpSnoopEntry.setDescription('An entry (conceptual row) in the wwpGenIgmpSnoopTable.')
wwpGenIgmpSnoopVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 19, 1, 1, 3, 1, 1), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpGenIgmpSnoopVlanId.setStatus('current')
if mibBuilder.loadTexts: wwpGenIgmpSnoopVlanId.setDescription('The vlan for which this entry contains information for an IP multicast group address.')
wwpGenIgmpSnoopGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 19, 1, 1, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpGenIgmpSnoopGroupAddress.setStatus('current')
if mibBuilder.loadTexts: wwpGenIgmpSnoopGroupAddress.setDescription('The IP multicast group address for which this entry contains information.')
wwpGenIgmpSnoopActivePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 19, 1, 1, 3, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpGenIgmpSnoopActivePorts.setStatus('current')
if mibBuilder.loadTexts: wwpGenIgmpSnoopActivePorts.setDescription('The Port Map of the active ports for the igmp filter indexed by wwpGenIgmpSnoopVlanId and wwpGenIgmpSnoopGroupAddress.')
wwpGenIgmpSnoopQueryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 19, 1, 1, 3, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpGenIgmpSnoopQueryTime.setStatus('current')
if mibBuilder.loadTexts: wwpGenIgmpSnoopQueryTime.setDescription('The time at which the last activity was observed on this stream.')
wwpGenIgmpSnoopNoOfHosts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 19, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpGenIgmpSnoopNoOfHosts.setStatus('deprecated')
if mibBuilder.loadTexts: wwpGenIgmpSnoopNoOfHosts.setDescription('The number of hosts associated with this entry.')
wwpGenIgmpSnoopStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 19, 1, 1, 4), )
if mibBuilder.loadTexts: wwpGenIgmpSnoopStatsTable.setStatus('current')
if mibBuilder.loadTexts: wwpGenIgmpSnoopStatsTable.setDescription('The (conceptual) table listing the igmp snoop stats per vlan.')
wwpGenIgmpSnoopStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 19, 1, 1, 4, 1), ).setIndexNames((0, "WWP-GENERIC-IGMP-SNOOP-MIB", "wwpGenIgmpSnoopStatsVlanId"))
if mibBuilder.loadTexts: wwpGenIgmpSnoopStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wwpGenIgmpSnoopStatsEntry.setDescription('An entry (conceptual row) in the wwpGenIgmpSnoopStatsTable.')
wwpGenIgmpSnoopStatsVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 19, 1, 1, 4, 1, 1), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpGenIgmpSnoopStatsVlanId.setStatus('current')
if mibBuilder.loadTexts: wwpGenIgmpSnoopStatsVlanId.setDescription('The vlan Id for which this igmp snooping can be enabled/disabled.')
wwpGenIgmpSnoopQueryMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 19, 1, 1, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpGenIgmpSnoopQueryMessages.setStatus('current')
if mibBuilder.loadTexts: wwpGenIgmpSnoopQueryMessages.setDescription('The total number of query messages snooped.')
wwpGenIgmpSnoopJoinMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 19, 1, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpGenIgmpSnoopJoinMessages.setStatus('current')
if mibBuilder.loadTexts: wwpGenIgmpSnoopJoinMessages.setDescription('The total number of Join messages snooped.')
wwpGenIgmpSnoopLeaveMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 19, 1, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpGenIgmpSnoopLeaveMessages.setStatus('current')
if mibBuilder.loadTexts: wwpGenIgmpSnoopLeaveMessages.setDescription('The total number of leave messages snooped.')
wwpGenIgmpSnoopRouterDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 19, 1, 1, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpGenIgmpSnoopRouterDiscards.setStatus('current')
if mibBuilder.loadTexts: wwpGenIgmpSnoopRouterDiscards.setDescription('The total number of messages discarded by the Router.')
wwpGenIgmpSnoopLingerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 19, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(20)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpGenIgmpSnoopLingerTimeout.setStatus('current')
if mibBuilder.loadTexts: wwpGenIgmpSnoopLingerTimeout.setDescription('This value specifies the amount of time that a multicast filter will be in place after the last host has left. In essence it configures how long to filter the stream after all the hosts have left the group. This can tune the system as to how long the router has to remove the stream from the subnet. The minimum value is 1 second, with no maximum value.')
wwpGenIgmpSnoopExpiryTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 19, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(30)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpGenIgmpSnoopExpiryTimeout.setStatus('current')
if mibBuilder.loadTexts: wwpGenIgmpSnoopExpiryTimeout.setDescription('The interval of time for which an igmp protocol entry, is allowed to remain valid without any activity.')
wwpGenIgmpSnoopQueryRespTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 19, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpGenIgmpSnoopQueryRespTimeout.setStatus('current')
if mibBuilder.loadTexts: wwpGenIgmpSnoopQueryRespTimeout.setDescription('The interval of time for which an igmp protocol entry, is allowed to wait for any igmp query. This refers to the default minimum query timeout on WWP devices.')
wwpGenIgmpSnoopFilterActivate = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 19, 1, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpGenIgmpSnoopFilterActivate.setStatus('current')
if mibBuilder.loadTexts: wwpGenIgmpSnoopFilterActivate.setDescription('Activate the GenIgmp Snoop Filtering operation with a value of True(1) or stop it with False(2).')
wwpGenExtIgmpSnoopActEntryTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 19, 1, 1, 9), )
if mibBuilder.loadTexts: wwpGenExtIgmpSnoopActEntryTable.setStatus('current')
if mibBuilder.loadTexts: wwpGenExtIgmpSnoopActEntryTable.setDescription('A table that contains Vlan Specific igmp config information maintained by each Vlan.')
wwpGenExtIgmpSnoopActEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 19, 1, 1, 9, 1), )
wwpGenIgmpSnoopActEntry.registerAugmentions(("WWP-GENERIC-IGMP-SNOOP-MIB", "wwpGenExtIgmpSnoopActEntry"))
wwpGenExtIgmpSnoopActEntry.setIndexNames(*wwpGenIgmpSnoopActEntry.getIndexNames())
if mibBuilder.loadTexts: wwpGenExtIgmpSnoopActEntry.setStatus('current')
if mibBuilder.loadTexts: wwpGenExtIgmpSnoopActEntry.setDescription('A list of Vlan specific IGMP config parameters maintained by each Vlan.')
wwpGenIgmpSnoopMinQueryTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 19, 1, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(5)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpGenIgmpSnoopMinQueryTimeout.setStatus('current')
if mibBuilder.loadTexts: wwpGenIgmpSnoopMinQueryTimeout.setDescription('The minimum interval of time for which an igmp protocol entry associated with this vlan is allowed to wait for any igmp query.')
wwpGenIgmpSnoopUnresolvedMcastFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 19, 1, 1, 9, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpGenIgmpSnoopUnresolvedMcastFilter.setStatus('current')
if mibBuilder.loadTexts: wwpGenIgmpSnoopUnresolvedMcastFilter.setDescription("Setting this object to 'true' will enable the Unresolved Multicast Filtering for the vlan specified by wwpGenIgmpSnoopActVlanId.")
wwpGenIgmpSnoopPktPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 19, 1, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpGenIgmpSnoopPktPriority.setStatus('current')
if mibBuilder.loadTexts: wwpGenIgmpSnoopPktPriority.setDescription('The 802.1p Priority value for the igmp snoop pkts on this vlan.')
wwpGenIgmpSnoopLeaveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 19, 1, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fast", 1), ("inquisitive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpGenIgmpSnoopLeaveMode.setStatus('current')
if mibBuilder.loadTexts: wwpGenIgmpSnoopLeaveMode.setDescription("Setting the igmp leave mode to 'fast(1)' will cause the multicast stream to be pruned as soon as a leave is received. If this object is set to 'inquisitive(2)', then a Group Specific Query is created for the multicast stream for which the leave was received. If no membership report is received in the time interval configured by the wwpGenIgmpSnoopInqLeaveTimeout, then the multicast stream is pruned.")
wwpGenIgmpSnoopInqLeaveTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 19, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpGenIgmpSnoopInqLeaveTimeout.setStatus('current')
if mibBuilder.loadTexts: wwpGenIgmpSnoopInqLeaveTimeout.setDescription("The interval of time in units of 0.1 ( tenth ) seconds for which the Group Specific Query, is allowed to wait for any response. The inquisitive leave timer is started only when the wwpIgmpSnoopLeaveMode is set to 'inquisitive(2)'.")
wwpGenIgmpSnoopUMFFilterGlobal = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 19, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpGenIgmpSnoopUMFFilterGlobal.setStatus('current')
if mibBuilder.loadTexts: wwpGenIgmpSnoopUMFFilterGlobal.setDescription("Setting this object to 'true' will enable the Unresolved Multicast Filtering (UMF) for the device. When 'true' unresolved multicast packets will not be forwarded. When 'false' unresolved multicast packets will be forwarded to the other ports in the VLAN. If the device supports per-VLAN UMF, when this object is set to 'true' then the per-VLAN UMF setting will take effect. When this object is set to 'false' then unresolved multicast filtering is inhibited on all VLANs.")
mibBuilder.exportSymbols("WWP-GENERIC-IGMP-SNOOP-MIB", wwpGenIgmpSnoopUnresolvedMcastFilter=wwpGenIgmpSnoopUnresolvedMcastFilter, wwpGenIgmpSnoopActivate=wwpGenIgmpSnoopActivate, wwpGenIgmpSnoopMIBGroups=wwpGenIgmpSnoopMIBGroups, wwpGenIgmpSnoopVlanId=wwpGenIgmpSnoopVlanId, wwpGenIgmpSnoopEntry=wwpGenIgmpSnoopEntry, wwpGenIgmpSnoopTable=wwpGenIgmpSnoopTable, wwpGenIgmpSnoopLingerTimeout=wwpGenIgmpSnoopLingerTimeout, wwpGenIgmpSnoopInqLeaveTimeout=wwpGenIgmpSnoopInqLeaveTimeout, wwpGenIgmpSnoopMIBNotificationPrefix=wwpGenIgmpSnoopMIBNotificationPrefix, wwpGenIgmpSnoopRouterPort=wwpGenIgmpSnoopRouterPort, wwpGenIgmpSnoopMIBObjects=wwpGenIgmpSnoopMIBObjects, PortList=PortList, wwpGenIgmpSnoopActVlanId=wwpGenIgmpSnoopActVlanId, wwpGenIgmpSnoopActEntry=wwpGenIgmpSnoopActEntry, wwpGenIgmpSnoopStatsVlanId=wwpGenIgmpSnoopStatsVlanId, wwpGenIgmpSnoopActivePorts=wwpGenIgmpSnoopActivePorts, wwpGenIgmpSnoopQueryTime=wwpGenIgmpSnoopQueryTime, wwpGenIgmpSnoopStatsTable=wwpGenIgmpSnoopStatsTable, wwpGenIgmpSnoopLeaveMessages=wwpGenIgmpSnoopLeaveMessages, wwpGenIgmpSnoopRouterDiscards=wwpGenIgmpSnoopRouterDiscards, wwpGenIgmpSnoopQueryMessages=wwpGenIgmpSnoopQueryMessages, wwpGenIgmpSnoopLeaveMode=wwpGenIgmpSnoopLeaveMode, wwpGenExtIgmpSnoopActEntry=wwpGenExtIgmpSnoopActEntry, wwpGenIgmpSnoopMinQueryTimeout=wwpGenIgmpSnoopMinQueryTimeout, wwpGenExtIgmpSnoopActEntryTable=wwpGenExtIgmpSnoopActEntryTable, wwpGenIgmpSnoop=wwpGenIgmpSnoop, wwpGenIgmpSnoopMIBNotifications=wwpGenIgmpSnoopMIBNotifications, wwpGenIgmpSnoopMIB=wwpGenIgmpSnoopMIB, wwpGenIgmpSnoopUMFFilterGlobal=wwpGenIgmpSnoopUMFFilterGlobal, wwpGenIgmpSnoopStatsEntry=wwpGenIgmpSnoopStatsEntry, VlanId=VlanId, wwpGenIgmpSnoopGroupAddress=wwpGenIgmpSnoopGroupAddress, wwpGenIgmpSnoopActTable=wwpGenIgmpSnoopActTable, wwpGenIgmpSnoopQueryRespTimeout=wwpGenIgmpSnoopQueryRespTimeout, wwpGenIgmpSnoopFilterActivate=wwpGenIgmpSnoopFilterActivate, wwpGenIgmpSnoopNoOfHosts=wwpGenIgmpSnoopNoOfHosts, wwpGenIgmpSnoopPktPriority=wwpGenIgmpSnoopPktPriority, wwpGenIgmpSnoopMIBCompliances=wwpGenIgmpSnoopMIBCompliances, wwpGenIgmpSnoopExpiryTimeout=wwpGenIgmpSnoopExpiryTimeout, wwpGenIgmpSnoopJoinMessages=wwpGenIgmpSnoopJoinMessages, wwpGenIgmpSnoopGlobalActivate=wwpGenIgmpSnoopGlobalActivate, PYSNMP_MODULE_ID=wwpGenIgmpSnoopMIB, wwpGenIgmpSnoopMIBConformance=wwpGenIgmpSnoopMIBConformance)
