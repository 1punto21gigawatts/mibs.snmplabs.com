#
# PySNMP MIB module CISCO-IMAGE-TC (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-IMAGE-TC
# Produced by pysmi-0.3.4 at Wed May  1 11:56:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, Integer32, IpAddress, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Bits, NotificationType, ObjectIdentity, MibIdentifier, Counter32, iso, ModuleIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Integer32", "IpAddress", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Bits", "NotificationType", "ObjectIdentity", "MibIdentifier", "Counter32", "iso", "ModuleIdentity", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ciscoImageTc = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 455))
ciscoImageTc.setRevisions(('2005-01-12 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoImageTc.setRevisionsDescriptions(('Initial draft version.',))
if mibBuilder.loadTexts: ciscoImageTc.setLastUpdated('200501120000Z')
if mibBuilder.loadTexts: ciscoImageTc.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoImageTc.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-core-mibs@cisco.com')
if mibBuilder.loadTexts: ciscoImageTc.setDescription('This MIB module defines the textual conventions used in the enhanced image MIB. Glossary: Base Image Essential part of the operating system, which forms base functionality on top of which patches can be added. MBI (Minimum bootable image) A small image which contains the smallest possible amount of functionality required to bootstrap and load a full image. This image typically contains the kernel, the file system drivers, and some hardware initialization code. It is executed at boot-up, and initializes just enough to access the rest of the code, and run it. Modular operating system An operating system that exhibits runtime modularity characteristics, such as multiple address spaces, fault isolation between processes, and modularity delivery and replacement of image components. Patch/Package/SMU (software maintenance upgrade) A modular replacement for some piece of on-box content, such as a binary shared object, or a text file. This entity is meant to replace or augment something that is already part of the base image. Composite package Group of packages delivered as a bundle. It is meant to be loaded on MBI. Script A non-binary piece of on-box content, typically a TCL script for use by the TCL interpreter, or some other form of interpreted router content. Installable An installable can be a patch, package, composite package, SMU or script. It is a piece of software which can be loaded on to the base image on a system. ')
class CeImageInstallableStatus(TextualConvention, Integer32):
    description = "Current state of the installable : | | install | \\/ +-----------------+ | 'pendingInstall'| +-----------------+ | | activate | \\/ (needs reload) ----------------------- | | | | | \\/ | +----------------------+ | |'installPendingReload'| | +----------------------+ | | \\/ | +--------+ \\/ |'active'| <---------------- +--------+ (reload) | | | | rollback | \\/ +----------------+ |'pendingRemoval'| +----------------+ | | activate | \\/ (needs reload) --------------------- | | | | \\/ \\/ +----------------------+ (removed) |'removedPendingReload'| +----------------------+ | | (reload) | (removed) 'active' Installable is active in the system. It has been activated and currently is running in the system. 'pendingInstall' Installable is installed on the system, but it needs to be activated by issuing activate command before it becomes active on the system. 'pendingRemoval' Rollback command has been issued on the installable to remove it from the system, but it is not yet removed from the system. For the rollback to take effect and remove the installable from the system, it has to be confirmed with activate command. 'installPendingReload' Installable is activated, but is not yet running on the system because system needs a reload to run this installable. On the next reload, it will become 'active'. 'removedPendingReload' The removal of this installable has been committed, but it has not yet taken effect. This typically means that it is pending a reload, so it is not actually removed yet. On the next reload this installable is removed completely from the system. 'installPendingReloadPendingRemoval' Installable is both pending a reload and also pending removal. It means installable has been installed but it needs reload, before reload is done installable is removed. If an activate is done on the installable both the conditions cancel each other and installable will become 'active'. If a reload is done then installable will go into 'pendingReload' state. 'removedPendingReloadPendingInstall' Installable is both pending a reload and also pending install. It means installable has been removed but it needs reload, before reload is done installable is installed again. If an activate is done on the installable both the conditions cancel each other and installable will become 'active'. If a reload is done then installable will go into 'pendingInstall' state. 'pruned' Installable is in pruned state. When a tag is removed from the system and a installable under the tag is not in running state it is put in pruned state. This represents a temporary state and the installable will be removed from the system. 'inactive' Loaded but is not currently active. "
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("active", 1), ("pendingInstall", 2), ("pendingRemoval", 3), ("installPendingReload", 4), ("removedPendingReload", 5), ("installPendingReloadPendingRemoval", 6), ("removedPendingReloadPendingInstall", 7), ("pruned", 8), ("inactive", 9))

class CeImageInstallableType(TextualConvention, Integer32):
    description = "The type of software. Modular Operating Systems can have different type of software loaded like base image or minimum bootable image(MBI), a patch, a package or a script. This TC will describe what type of software is loaded. 'base' Base image or minimum bootable image 'patch' Piece of software which can be loaded on to base image, usually to fix bugs in base image 'script' A user written program which can be loaded on the base image, usually to monitor and notify system activities 'package' Piece of software which can be loaded on minimum bootable image, used by some operating systems to provide new features. 'compositePackage' Collection of Packages bundled together 'softwareMaintenanceUpgrade' SMU, Same as Patch used to provide point fixes for bugs. "
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("base", 1), ("patch", 2), ("script", 3), ("package", 4), ("compositePackage", 5), ("softwareMaintenanceUpgrade", 6))

mibBuilder.exportSymbols("CISCO-IMAGE-TC", ciscoImageTc=ciscoImageTc, CeImageInstallableType=CeImageInstallableType, CeImageInstallableStatus=CeImageInstallableStatus, PYSNMP_MODULE_ID=ciscoImageTc)
