#
# PySNMP MIB module RackMonitor-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RackMonitor-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:59:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, Integer32, NotificationType, Bits, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Unsigned32, IpAddress, TimeTicks, Gauge32, Counter32, ModuleIdentity, NotificationType, iso, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Integer32", "NotificationType", "Bits", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Unsigned32", "IpAddress", "TimeTicks", "Gauge32", "Counter32", "ModuleIdentity", "NotificationType", "iso", "enterprises")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
powerware = MibIdentifier((1, 3, 6, 1, 4, 1, 534))
product = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6))
dataCenter = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7))
environmentalMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1))
insObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1))
rmTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2))
rmIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 1))
rmConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2))
sensorMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 3))
sensorConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4))
insIdentManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: insIdentManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: insIdentManufacturer.setDescription('The name of the RackMonitor manufacturer.')
insIdentModel = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: insIdentModel.setStatus('mandatory')
if mibBuilder.loadTexts: insIdentModel.setDescription('The RackMonitor Model designation.')
insIdentAgentSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: insIdentAgentSoftwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: insIdentAgentSoftwareVersion.setDescription('The RackMonitor software/firmware version. This variable may or may not have the same value as upsIdentUPSSoftwareVersion in some implementations.')
insIdentName = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: insIdentName.setStatus('mandatory')
if mibBuilder.loadTexts: insIdentName.setDescription('A string identifying the RackMonitor. This object should be set by the administrator.')
rmConfigMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rmConfigMibVersion.setStatus('mandatory')
if mibBuilder.loadTexts: rmConfigMibVersion.setDescription('The version of MIB spec.')
rmConfigNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 2))
rmConfigIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: rmConfigIpAddress.setDescription(' The ip address that NMS can identify the managed device')
rmConfigGateway = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigGateway.setStatus('mandatory')
if mibBuilder.loadTexts: rmConfigGateway.setDescription(' The default gateway that allow device managed through routers ')
rmConfigSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: rmConfigSubnetMask.setDescription(' Internet address subnet mask')
rmConfigDateTime = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 3))
rmConfigDate = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigDate.setStatus('mandatory')
if mibBuilder.loadTexts: rmConfigDate.setDescription('The date in Environmental Rack Monitor, format is (dd/mm/yyyy)')
rmConfigTime = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigTime.setStatus('mandatory')
if mibBuilder.loadTexts: rmConfigTime.setDescription('The time in Environmental Rack Monitor, format is (hh:mm:ss)')
rmConfigTimeFromNtp = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigTimeFromNtp.setStatus('mandatory')
if mibBuilder.loadTexts: rmConfigTimeFromNtp.setDescription('Enable/disable update of the date and time from the NTP server.')
rmConfigNtpIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 3, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigNtpIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: rmConfigNtpIpAddress.setDescription('NTP IP address.')
rmConfigNtpTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))).clone(namedValues=NamedValues(("gMT-1200", 1), ("gMT-1100", 2), ("gMT-1000", 3), ("gMT-0900", 4), ("gMT-0800", 5), ("gMT-0700", 6), ("gMT-0600", 7), ("gMT-0500", 8), ("gMT-0400", 9), ("gMT-0330", 10), ("gMT-0300", 11), ("gMT-0200", 12), ("gMT-0100", 13), ("gMT-0000", 14), ("gMT0100", 15), ("gMT0200", 16), ("gMT0300", 17), ("gMT0330", 18), ("gMT0400", 19), ("gMT0500", 20), ("gMT0530", 21), ("gMT0600", 22), ("gMT0700", 23), ("gMT0800", 24), ("gMT0900", 25), ("gMT1000", 26), ("gMT1100", 27), ("gMT1200", 28)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigNtpTimeZone.setStatus('mandatory')
if mibBuilder.loadTexts: rmConfigNtpTimeZone.setDescription(' Enable/disable update of the date and time from the NTP server.')
rmConfigDayLightSaving = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigDayLightSaving.setStatus('mandatory')
if mibBuilder.loadTexts: rmConfigDayLightSaving.setDescription('Enable/disable daylight saving for NTP time, if enabled, the time obtained from the NTP will be set one hour in advance to reflect daylight saving status.')
rmConfigLog = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 4))
rmConfigHistoryLogFrequency = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigHistoryLogFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: rmConfigHistoryLogFrequency.setDescription('The frequency of the history log update. The value is in seconds')
rmConfigExtHistoryLogFrequency = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigExtHistoryLogFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: rmConfigExtHistoryLogFrequency.setDescription('The frequency of the extended history log update. The value is in seconds')
rmConfigConfigurationLog = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigConfigurationLog.setStatus('mandatory')
if mibBuilder.loadTexts: rmConfigConfigurationLog.setDescription(' Enable/Disable Environmental Rack Monitor parameters change logging.')
rmConfigDhcpStatue = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigDhcpStatue.setStatus('mandatory')
if mibBuilder.loadTexts: rmConfigDhcpStatue.setDescription('Enable or Disable DHCP/BootP capability')
rmConfigPingStatue = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigPingStatue.setStatus('mandatory')
if mibBuilder.loadTexts: rmConfigPingStatue.setDescription('Enable or Disable Ping Echo capability')
rmConfigTftpStatue = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigTftpStatue.setStatus('mandatory')
if mibBuilder.loadTexts: rmConfigTftpStatue.setDescription('Enable or Disable TFTP network upgrade capability')
rmConfigTelnet = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 8))
rmConfigTelnetStatue = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigTelnetStatue.setStatus('mandatory')
if mibBuilder.loadTexts: rmConfigTelnetStatue.setDescription('Enable or Disable telnet access')
rmConfigTelnetPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigTelnetPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: rmConfigTelnetPortNumber.setDescription('Setting the server port for telnet.')
rmConfigHttp = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 9))
rmConfigHttpStatue = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigHttpStatue.setStatus('mandatory')
if mibBuilder.loadTexts: rmConfigHttpStatue.setDescription('Enable or Disable HTTP access')
rmConfigHttpPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigHttpPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: rmConfigHttpPortNumber.setDescription('Setting the server port of HTTP.')
rmConfigHttpSecurity = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigHttpSecurity.setStatus('mandatory')
if mibBuilder.loadTexts: rmConfigHttpSecurity.setDescription('Enable/Disable HTTP access for read-only users')
rmConfigSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 10))
rmConfigSnmpStatue = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigSnmpStatue.setStatus('mandatory')
if mibBuilder.loadTexts: rmConfigSnmpStatue.setDescription('Enable or Disable SNMP access')
rmConfigSnmpPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 10, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigSnmpPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: rmConfigSnmpPortNumber.setDescription('Setting the server port for SNMP.')
rmConfigControl = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 11))
rmConfigResetToDefault = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigResetToDefault.setStatus('mandatory')
if mibBuilder.loadTexts: rmConfigResetToDefault.setDescription('Reset all parameters of Environmental Rack Monitor to default values')
rmConfigRestart = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("nothing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigRestart.setStatus('mandatory')
if mibBuilder.loadTexts: rmConfigRestart.setDescription('Restart rm')
rmConfigTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 12))
rmConfigTrapRetryCount = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 12, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigTrapRetryCount.setStatus('mandatory')
if mibBuilder.loadTexts: rmConfigTrapRetryCount.setDescription('The count of repeat traps to send to NMS before trap acknowledge received.')
rmConfigTrapRetryTime = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 12, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigTrapRetryTime.setStatus('mandatory')
if mibBuilder.loadTexts: rmConfigTrapRetryTime.setDescription('The time between retry traps sent to NMS.')
rmConfigTrapAckSignature = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 12, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigTrapAckSignature.setStatus('mandatory')
if mibBuilder.loadTexts: rmConfigTrapAckSignature.setDescription('The signature of trap acknowledge.')
rmConfigPollRate = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigPollRate.setStatus('mandatory')
if mibBuilder.loadTexts: rmConfigPollRate.setDescription(' The frequency that the Rack Monitor will read from sensors (unit : second).')
rmConfigTrapsReceiversTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 14), )
if mibBuilder.loadTexts: rmConfigTrapsReceiversTable.setStatus('mandatory')
if mibBuilder.loadTexts: rmConfigTrapsReceiversTable.setDescription('A list of managers to send traps to. The number of entries is given by the value of rmConfigNumTrapReceivers')
rmConfigTrapsReceiversEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 14, 1), ).setIndexNames((0, "RackMonitor-MIB", "trapsIndex"))
if mibBuilder.loadTexts: rmConfigTrapsReceiversEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rmConfigTrapsReceiversEntry.setDescription('The managers to send traps to.')
trapsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: trapsIndex.setDescription('The index to a trap receiver entry.')
trapsReceiverAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 14, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapsReceiverAddr.setStatus('mandatory')
if mibBuilder.loadTexts: trapsReceiverAddr.setDescription('The IP address of the manager to send a trap to.')
receiverCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 14, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverCommunityString.setStatus('mandatory')
if mibBuilder.loadTexts: receiverCommunityString.setDescription('The community name to use in the trap when sent to the manager.')
receiverSeverityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("informational", 1), ("warning", 2), ("severe", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverSeverityLevel.setStatus('mandatory')
if mibBuilder.loadTexts: receiverSeverityLevel.setDescription('The severity level of traps to be received by this manager.')
receiverDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 14, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: receiverDescription.setStatus('mandatory')
if mibBuilder.loadTexts: receiverDescription.setDescription('Description of trap receivers')
rmConfigAccessControlTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 15), )
if mibBuilder.loadTexts: rmConfigAccessControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: rmConfigAccessControlTable.setDescription('A list of managers which can access rm with private community string.')
rmConfigAccessControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 15, 1), ).setIndexNames((0, "RackMonitor-MIB", "accessIndex"))
if mibBuilder.loadTexts: rmConfigAccessControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rmConfigAccessControlEntry.setDescription('The managers.')
accessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: accessIndex.setStatus('mandatory')
if mibBuilder.loadTexts: accessIndex.setDescription('The index to a access control entry.')
accessControlAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 15, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessControlAddr.setStatus('mandatory')
if mibBuilder.loadTexts: accessControlAddr.setDescription('The IP address of the manager to access RackMonitor')
accessCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 15, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessCommunityString.setStatus('mandatory')
if mibBuilder.loadTexts: accessCommunityString.setDescription('The community name to use in the manager when access RackMonitor')
accessControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("readOnly", 1), ("read-write", 2), ("notAccess", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: accessControlMode.setStatus('mandatory')
if mibBuilder.loadTexts: accessControlMode.setDescription('Access type, only read/Write access type can change parameter of RackMonitor')
rmConfigTemperatureUnit = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigTemperatureUnit.setStatus('mandatory')
if mibBuilder.loadTexts: rmConfigTemperatureUnit.setDescription('The temperature unit of the system, can be Celsius or Fahrenheit')
rmConfigDateFormat = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mm-dd-yyyy", 1), ("dd-mm-yyyy", 2), ("yyyy-mm-dd", 3), ("dd-mmm-yyyy", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rmConfigDateFormat.setStatus('mandatory')
if mibBuilder.loadTexts: rmConfigDateFormat.setDescription('The date format of the system, can be dd/mm/yyyy or mm/dd/yyyy')
smSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smSensorNumber.setStatus('mandatory')
if mibBuilder.loadTexts: smSensorNumber.setDescription('The number of sensors that can be monitored.')
smSensorTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 3, 2), )
if mibBuilder.loadTexts: smSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: smSensorTable.setDescription('A list of sensor devices to be monitored.')
smSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 3, 2, 1), ).setIndexNames((0, "RackMonitor-MIB", "smDeviceIndex"))
if mibBuilder.loadTexts: smSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: smSensorEntry.setDescription('The sensor device.')
smDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: smDeviceIndex.setDescription('The index to a sensor device entry.')
smDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknow", 1), ("disabled", 2), ("eMD-HT", 3), ("eMD-T", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smDeviceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: smDeviceStatus.setDescription('The device type plugged into RackMonitor.')
smDeviceTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smDeviceTemperature.setStatus('mandatory')
if mibBuilder.loadTexts: smDeviceTemperature.setDescription('The temperature of sensor on device RackMonitor, the unit is 0.1 degree.')
smDeviceTemperatureAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknow", 1), ("disabled", 2), ("normal", 3), ("lowWarning", 4), ("lowCritical", 5), ("highWarning", 6), ("highCritical", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smDeviceTemperatureAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: smDeviceTemperatureAlarm.setDescription('The status of temperature sensor on device RackMonitor.')
smDeviceHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smDeviceHumidity.setStatus('mandatory')
if mibBuilder.loadTexts: smDeviceHumidity.setDescription('The humidity of sensor on device RackMonitor, the unit is 0.1%.')
smDeviceHumidityAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknow", 1), ("disabled", 2), ("normal", 3), ("lowWarning", 4), ("lowCritical", 5), ("highWarning", 6), ("highCritical", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smDeviceHumidityAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: smDeviceHumidityAlarm.setDescription('The device type plugged into RackMonitor.')
smAlarm1 = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknow", 1), ("disabled", 2), ("active", 3), ("inactive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smAlarm1.setStatus('mandatory')
if mibBuilder.loadTexts: smAlarm1.setDescription('The device type plugged into RackMonitor.')
smAlarm2 = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknow", 1), ("disabled", 2), ("active", 3), ("inactive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smAlarm2.setStatus('mandatory')
if mibBuilder.loadTexts: smAlarm2.setDescription('The device type plugged into RackMonitor.')
scSensorNumber = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scSensorNumber.setStatus('mandatory')
if mibBuilder.loadTexts: scSensorNumber.setDescription('The number of sensors that can be plugged into RackMonitor.')
scSensorTable = MibTable((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 2), )
if mibBuilder.loadTexts: scSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: scSensorTable.setDescription('A list of sensor devices to be configured.')
scSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 2, 1), ).setIndexNames((0, "RackMonitor-MIB", "scDeviceIndex"))
if mibBuilder.loadTexts: scSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: scSensorEntry.setDescription('The sensor device.')
scDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: scDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: scDeviceIndex.setDescription('The index to a sensor device entry.')
scDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: scDeviceName.setDescription('The name of the sensor device for identification.')
scDeviceState = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scDeviceState.setStatus('mandatory')
if mibBuilder.loadTexts: scDeviceState.setDescription('The setup of sensor device type.')
scSensor1 = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3))
scSensor1DeviceName = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1DeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor1DeviceName.setDescription('The name of sensor device.')
scSensor1DeviceState = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1DeviceState.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor1DeviceState.setDescription('The setup of sensor device type.')
scSensor1Temperature = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 3))
scSensor1TemperatureName = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1TemperatureName.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor1TemperatureName.setDescription('The temperature sensor name.')
scSensor1TemperatureLowWarning = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1TemperatureLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor1TemperatureLowWarning.setDescription('The set point to trigger low warning alarm.')
scSensor1TemperatureLowCritical = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1TemperatureLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor1TemperatureLowCritical.setDescription('The threshold to trigger low critical alarm.')
scSensor1TemperatureHighWarning = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1TemperatureHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor1TemperatureHighWarning.setDescription('The threshold to trigger high warning alarm.')
scSensor1TemperatureHighCritical = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1TemperatureHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor1TemperatureHighCritical.setDescription('The threshold to trigger high critical alarm.')
scSensor1TemperatureHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1TemperatureHysteresis.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor1TemperatureHysteresis.setDescription('The set value to prevent too many alarms when temperature is hovering around the set threshold.')
scSensor1TemperatureCalibration = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("temperatureIncrease0Point0", 1), ("temperatureIncrease0Point5", 2), ("temperatureIncrease1Point0", 3), ("temperatureIncrease1Point5", 4), ("temperatureIncrease2Point0", 5), ("temperatureIncrease2Point5", 6), ("temperatureIncrease3Point0", 7), ("temperatureMinus0Point5", 8), ("temperatureMinus1Point0", 9), ("temperatureMinus1Point5", 10), ("temperatureMinus2Point0", 11), ("temperatureMinus2Point5", 12), ("temperatureMinusPoint0", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1TemperatureCalibration.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor1TemperatureCalibration.setDescription('The set value to get the correct temperature according to the reference temperature.')
scSensor1TemperatureLowWarningStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1TemperatureLowWarningStatus.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor1TemperatureLowWarningStatus.setDescription('Enable/Disable the set point to trigger low warning alarm.')
scSensor1TemperatureLowCriticalStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1TemperatureLowCriticalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor1TemperatureLowCriticalStatus.setDescription('Enable/Disable the set point to trigger low critical alarm.')
scSensor1TemperatureHighWarningStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1TemperatureHighWarningStatus.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor1TemperatureHighWarningStatus.setDescription('Enable/Disable the set point to trigger high warning alarm.')
scSensor1TemperatureHighCriticalStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1TemperatureHighCriticalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor1TemperatureHighCriticalStatus.setDescription('Enable/disable the set point to trigger high critical alarm.')
scSensor1Humidity = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 4))
scSensor1HumdityName = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1HumdityName.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor1HumdityName.setDescription('The humidity sensor name.')
scSensor1HumidityLowWarning = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1HumidityLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor1HumidityLowWarning.setDescription('The set point to trigger low warning alarm.')
scSensor1HumidityLowCritical = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1HumidityLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor1HumidityLowCritical.setDescription('The threshold to trigger low critical alarm.')
scSensor1HumidityHighWarning = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1HumidityHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor1HumidityHighWarning.setDescription('The threshold to trigger high warning alarm.')
scSensor1HumidityHighCritical = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1HumidityHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor1HumidityHighCritical.setDescription('The threshold to trigger high critical alarm.')
scSensor1HumidityHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1HumidityHysteresis.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor1HumidityHysteresis.setDescription('The set value to prevent too many alarms when Humidity is hovering around the set threshold.')
scSensor1HumidityCalibration = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("humidityIncrease0Point0", 1), ("humidityIncrease1Point0", 2), ("humidityIncrease2Point0", 3), ("humidityIncrease3Point0", 4), ("humidityIncrease4Point0", 5), ("humidityIncrease5Point0", 6), ("humidityIncrease6Point0", 7), ("humidityMinus1Point0", 8), ("humidityMinus2Point0", 9), ("humidityMinus3Point0", 10), ("humidityMinus4Point0", 11), ("humidityMinus5Point0", 12), ("humidityMinus6Point0", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1HumidityCalibration.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor1HumidityCalibration.setDescription('The set value to get the correct temperature according to your reference temperature.')
scSensor1HumidityLowWarningStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1HumidityLowWarningStatus.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor1HumidityLowWarningStatus.setDescription('Enable/Disable the set point to trigger low warning alarm.')
scSensor1HumidityLowCriticalStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1HumidityLowCriticalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor1HumidityLowCriticalStatus.setDescription('Enable/Disable the set point to trigger low critical alarm.')
scSensor1HumidityHighWarningStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1HumidityHighWarningStatus.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor1HumidityHighWarningStatus.setDescription('Enable/Disable the set point to trigger high warning alarm.')
scSensor1HumidityHighCriticalStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1HumidityHighCriticalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor1HumidityHighCriticalStatus.setDescription('Enable/Disable the set point to trigger high critical alarm.')
scSensor1Alarm1 = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 5))
scSensor1Alarm1Name = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1Alarm1Name.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor1Alarm1Name.setDescription('The name of alarm-1.')
scSensor1Alarm1State = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("normalOpen", 2), ("normalClose", 3), ("highActive", 4), ("lowActive", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1Alarm1State.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor1Alarm1State.setDescription('Setup the signal type to trigger alarm.')
scSensor1Alarm1Hysteresis = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1Alarm1Hysteresis.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor1Alarm1Hysteresis.setDescription('The set value to delay the alarm triggered when event occurs.')
scSensor1Alarm2 = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 6))
scSensor1Alarm2Name = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1Alarm2Name.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor1Alarm2Name.setDescription('The name of alarm-1.')
scSensor1Alarm2State = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("normalOpen", 2), ("normalClose", 3), ("highActive", 4), ("lowActive", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1Alarm2State.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor1Alarm2State.setDescription('Setup the signal type to trigger alarm.')
scSensor1Alarm2Hysteresis = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 3, 6, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor1Alarm2Hysteresis.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor1Alarm2Hysteresis.setDescription('The set value to delay the alarm triggered when event occurs.')
scSensor2 = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4))
scSensor2DeviceName = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2DeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor2DeviceName.setDescription('The name of sensor device.')
scSensor2DeviceState = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2DeviceState.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor2DeviceState.setDescription('The setup of sensor device type.')
scSensor2Temperature = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 3))
scSensor2TemperatureName = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2TemperatureName.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor2TemperatureName.setDescription('The temperature sensor name.')
scSensor2TemperatureLowWarning = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2TemperatureLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor2TemperatureLowWarning.setDescription('The set point to trigger low warning alarm.')
scSensor2TemperatureLowCritical = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2TemperatureLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor2TemperatureLowCritical.setDescription('The threshold to trigger low critical alarm.')
scSensor2TemperatureHighWarning = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2TemperatureHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor2TemperatureHighWarning.setDescription('The threshold to trigger high warning alarm.')
scSensor2TemperatureHighCritical = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2TemperatureHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor2TemperatureHighCritical.setDescription('The threshold to trigger high critical alarm.')
scSensor2TemperatureHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2TemperatureHysteresis.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor2TemperatureHysteresis.setDescription('The set value to prevent too many alarms when temperature is hovering around the set threshold.')
scSensor2TemperatureCalibration = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("temperatureIncrease0Point0", 1), ("temperatureIncrease0Point5", 2), ("temperatureIncrease1Point0", 3), ("temperatureIncrease1Point5", 4), ("temperatureIncrease2Point0", 5), ("temperatureIncrease2Point5", 6), ("temperatureIncrease3Point0", 7), ("temperatureMinus0Point5", 8), ("temperatureMinus1Point0", 9), ("temperatureMinus1Point5", 10), ("temperatureMinus2Point0", 11), ("temperatureMinus2Point5", 12), ("temperatureMinusPoint0", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2TemperatureCalibration.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor2TemperatureCalibration.setDescription('The set value to get the correct temperature according to your reference temperature.')
scSensor2TemperatureLowWarningStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2TemperatureLowWarningStatus.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor2TemperatureLowWarningStatus.setDescription('Enable/Disable the set point to trigger low warning alarm.')
scSensor2TemperatureLowCriticalStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2TemperatureLowCriticalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor2TemperatureLowCriticalStatus.setDescription('Enable/Disable the set point to trigger low critical alarm.')
scSensor2TemperatureHighWarningStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2TemperatureHighWarningStatus.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor2TemperatureHighWarningStatus.setDescription('Enable/Disable the set point to trigger high warning alarm.')
scSensor2TemperatureHighCriticalStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2TemperatureHighCriticalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor2TemperatureHighCriticalStatus.setDescription('Enable/Disable the set point to trigger high critical alarm.')
scSensor2Humidity = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 4))
scSensor2HumdityName = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2HumdityName.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor2HumdityName.setDescription('The humidity sensor name.')
scSensor2HumidityLowWarning = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2HumidityLowWarning.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor2HumidityLowWarning.setDescription('The set point to trigger low warning alarm.')
scSensor2HumidityLowCritical = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2HumidityLowCritical.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor2HumidityLowCritical.setDescription('The threshold to trigger low critical alarm.')
scSensor2HumidityHighWarning = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2HumidityHighWarning.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor2HumidityHighWarning.setDescription('The threshold to trigger high warning alarm.')
scSensor2HumidityHighCritical = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2HumidityHighCritical.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor2HumidityHighCritical.setDescription('The threshold to trigger high critical alarm.')
scSensor2HumidityHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2HumidityHysteresis.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor2HumidityHysteresis.setDescription('The set value to prevent too many alarms when Humidity is hovering around the set threshold.')
scSensor2HumidityCalibration = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("humidityIncrease0Point0", 1), ("humidityIncrease1Point0", 2), ("humidityIncrease2Point0", 3), ("humidityIncrease3Point0", 4), ("humidityIncrease4Point0", 5), ("humidityIncrease5Point0", 6), ("humidityIncrease6Point0", 7), ("humidityMinus1Point0", 8), ("humidityMinus2Point0", 9), ("humidityMinus3Point0", 10), ("humidityMinus4Point0", 11), ("humidityMinus5Point0", 12), ("humidityMinus6Point0", 13)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2HumidityCalibration.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor2HumidityCalibration.setDescription('The set value to get the correct temperature according to the reference temperature.')
scSensor2HumidityLowWarningStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2HumidityLowWarningStatus.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor2HumidityLowWarningStatus.setDescription('Enable/Disable the set point to trigger low warning alarm.')
scSensor2HumidityLowCriticalStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2HumidityLowCriticalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor2HumidityLowCriticalStatus.setDescription('Enable/Disable the set point to trigger low critical alarm.')
scSensor2HumidityHighWarningStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2HumidityHighWarningStatus.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor2HumidityHighWarningStatus.setDescription('Enable/Disable the set point to trigger high warning alarm.')
scSensor2HumidityHighCriticalStatus = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2HumidityHighCriticalStatus.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor2HumidityHighCriticalStatus.setDescription('Enable/Disable the set point to trigger high critical alarm.')
scSensor2Alarm1 = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 5))
scSensor2Alarm1Name = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2Alarm1Name.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor2Alarm1Name.setDescription('The name of alarm-1.')
scSensor2Alarm1State = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("normalOpen", 2), ("normalClose", 3), ("highActive", 4), ("lowActive", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2Alarm1State.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor2Alarm1State.setDescription('Setup the signal type to trigger alarm.')
scSensor2Alarm1Hysteresis = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 5, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2Alarm1Hysteresis.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor2Alarm1Hysteresis.setDescription('The set value to delay the alarm triggered when event occurs.')
scSensor2Alarm2 = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 6))
scSensor2Alarm2Name = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2Alarm2Name.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor2Alarm2Name.setDescription('The name of alarm-1.')
scSensor2Alarm2State = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("normalOpen", 2), ("normalClose", 3), ("highActive", 4), ("lowActive", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2Alarm2State.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor2Alarm2State.setDescription('Setup the signal type to trigger alarm.')
scSensor2Alarm2Hysteresis = MibScalar((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 1, 4, 4, 6, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scSensor2Alarm2Hysteresis.setStatus('mandatory')
if mibBuilder.loadTexts: scSensor2Alarm2Hysteresis.setDescription('The set value to delay the alarm triggered when event occurs.')
rmCommunicationRestored = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2) + (0,1))
if mibBuilder.loadTexts: rmCommunicationRestored.setDescription('INFORMATION: Communication between RackMonitor and sensor had established.')
rmCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2) + (0,2))
if mibBuilder.loadTexts: rmCommunicationLost.setDescription('WARNING: Communication between RackMonitor and sensor had lost.')
rmAlarm1Inactive = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2) + (0,3))
if mibBuilder.loadTexts: rmAlarm1Inactive.setDescription('INFORMATION: Alarm1 of sensor had return from active state.')
rmAlarm1Active = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2) + (0,4))
if mibBuilder.loadTexts: rmAlarm1Active.setDescription('WARNING: Alarm1 has become active.')
rmAlarm2Inactive = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2) + (0,5))
if mibBuilder.loadTexts: rmAlarm2Inactive.setDescription('INFORMATION: Alarm2 of sensor has returned to normal state.')
rmAlarm2Active = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2) + (0,6))
if mibBuilder.loadTexts: rmAlarm2Active.setDescription('WARNING: Alarm2 had became active.')
rmTemperatureNotHighWarning = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2) + (0,7))
if mibBuilder.loadTexts: rmTemperatureNotHighWarning.setDescription('INFORMATION: The temperature of sensor had return from High warning to normal.')
rmTemperatureHighWarning = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2) + (0,8))
if mibBuilder.loadTexts: rmTemperatureHighWarning.setDescription('WARNING: The temperature of sensor was higher than High warning set point.')
rmTemperatureNotLowWarning = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2) + (0,9))
if mibBuilder.loadTexts: rmTemperatureNotLowWarning.setDescription('INFORMATION: The temperature of sensor had return from low warning to normal.')
rmTemperatureLowWarning = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2) + (0,10))
if mibBuilder.loadTexts: rmTemperatureLowWarning.setDescription('WARNING: The temperature of sensor was lower than low warning set point.')
rmTemperatureNotHighCritical = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2) + (0,11))
if mibBuilder.loadTexts: rmTemperatureNotHighCritical.setDescription('INFORMATION: The temperature of sensor lower than high critical set point.')
rmTemperatureHighCritical = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2) + (0,12))
if mibBuilder.loadTexts: rmTemperatureHighCritical.setDescription('CRITICAL: The temperature of sensor was higher than high critical set point.')
rmTemperatureNotLowCritical = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2) + (0,13))
if mibBuilder.loadTexts: rmTemperatureNotLowCritical.setDescription('INFORMATION: The temperature of sensor was higher than low critical set point.')
rmTemperatureLowCritical = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2) + (0,14))
if mibBuilder.loadTexts: rmTemperatureLowCritical.setDescription('CRITICAL: The temperature of sensor was lower than low critical set point.')
rmHumidityNotHighWarning = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2) + (0,15))
if mibBuilder.loadTexts: rmHumidityNotHighWarning.setDescription('INFORMATION: The humidity of sensor had return from High warning to normal.')
rmHumidityHighWarning = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2) + (0,16))
if mibBuilder.loadTexts: rmHumidityHighWarning.setDescription('WARNING: The humidity of sensor was higher than High warning set point.')
rmHumidityNotLowWarning = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2) + (0,17))
if mibBuilder.loadTexts: rmHumidityNotLowWarning.setDescription('INFORMATION: The humidity of sensor had return from low warning to normal.')
rmHumidityLowWarning = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2) + (0,18))
if mibBuilder.loadTexts: rmHumidityLowWarning.setDescription('WARNING: The humidity of sensor was lower than low warning set point.')
rmHumidityNotHighCritical = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2) + (0,19))
if mibBuilder.loadTexts: rmHumidityNotHighCritical.setDescription('INFORMATION: The humidity of sensor lower than high critical set point.')
rmHumidityHighCritical = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2) + (0,20))
if mibBuilder.loadTexts: rmHumidityHighCritical.setDescription('CRITICAL: The humidity of sensor was higher than high critical set point.')
rmHumidityNotLowCritical = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2) + (0,21))
if mibBuilder.loadTexts: rmHumidityNotLowCritical.setDescription('INFORMATION: The humidity of sensor was higher than low critical set point.')
rmHumidityLowCritical = NotificationType((1, 3, 6, 1, 4, 1, 534, 6, 7, 1, 2) + (0,22))
if mibBuilder.loadTexts: rmHumidityLowCritical.setDescription('CRITICAL: The humidity of sensor was lower than low critical set point.')
mibBuilder.exportSymbols("RackMonitor-MIB", insIdentAgentSoftwareVersion=insIdentAgentSoftwareVersion, scSensor1Alarm2=scSensor1Alarm2, rmConfigConfigurationLog=rmConfigConfigurationLog, rmConfigNtpIpAddress=rmConfigNtpIpAddress, scSensor1=scSensor1, scSensor2HumidityLowWarningStatus=scSensor2HumidityLowWarningStatus, rmAlarm2Active=rmAlarm2Active, rmHumidityNotLowCritical=rmHumidityNotLowCritical, insObjects=insObjects, sensorConfig=sensorConfig, scSensor1HumidityCalibration=scSensor1HumidityCalibration, rmConfigAccessControlEntry=rmConfigAccessControlEntry, rmConfigLog=rmConfigLog, rmHumidityLowWarning=rmHumidityLowWarning, scSensor1TemperatureHighWarningStatus=scSensor1TemperatureHighWarningStatus, rmConfigDayLightSaving=rmConfigDayLightSaving, scSensor2DeviceName=scSensor2DeviceName, rmConfigRestart=rmConfigRestart, rmConfigTrapsReceiversEntry=rmConfigTrapsReceiversEntry, scSensor1TemperatureHighWarning=scSensor1TemperatureHighWarning, scSensor1HumidityHysteresis=scSensor1HumidityHysteresis, scSensor1Alarm2State=scSensor1Alarm2State, rmConfigTrapsReceiversTable=rmConfigTrapsReceiversTable, scSensor1Alarm2Hysteresis=scSensor1Alarm2Hysteresis, rmConfigDhcpStatue=rmConfigDhcpStatue, rmConfigTelnetPortNumber=rmConfigTelnetPortNumber, rmConfigTrap=rmConfigTrap, scSensor1DeviceName=scSensor1DeviceName, scSensor2HumdityName=scSensor2HumdityName, rmConfigTrapRetryCount=rmConfigTrapRetryCount, rmTraps=rmTraps, trapsReceiverAddr=trapsReceiverAddr, scSensor1TemperatureLowWarningStatus=scSensor1TemperatureLowWarningStatus, scSensor1HumidityHighWarning=scSensor1HumidityHighWarning, rmHumidityNotLowWarning=rmHumidityNotLowWarning, rmConfigHttpPortNumber=rmConfigHttpPortNumber, insIdentManufacturer=insIdentManufacturer, scSensor2=scSensor2, environmentalMonitor=environmentalMonitor, receiverDescription=receiverDescription, scSensor1HumidityLowWarning=scSensor1HumidityLowWarning, rmConfigGateway=rmConfigGateway, rmTemperatureNotHighCritical=rmTemperatureNotHighCritical, rmConfigResetToDefault=rmConfigResetToDefault, scSensor1TemperatureLowCritical=scSensor1TemperatureLowCritical, scSensor2HumidityLowWarning=scSensor2HumidityLowWarning, scSensor2HumidityCalibration=scSensor2HumidityCalibration, scSensor2TemperatureHighWarningStatus=scSensor2TemperatureHighWarningStatus, rmCommunicationLost=rmCommunicationLost, scSensor2Alarm2Name=scSensor2Alarm2Name, scSensor2Alarm1Name=scSensor2Alarm1Name, scSensor2TemperatureLowCritical=scSensor2TemperatureLowCritical, accessControlMode=accessControlMode, scSensor2HumidityLowCritical=scSensor2HumidityLowCritical, scSensorEntry=scSensorEntry, insIdentModel=insIdentModel, smDeviceTemperatureAlarm=smDeviceTemperatureAlarm, trapsIndex=trapsIndex, rmConfigHistoryLogFrequency=rmConfigHistoryLogFrequency, scDeviceState=scDeviceState, scDeviceName=scDeviceName, rmConfigExtHistoryLogFrequency=rmConfigExtHistoryLogFrequency, scSensor1HumidityHighCritical=scSensor1HumidityHighCritical, smSensorEntry=smSensorEntry, scSensor2Alarm1=scSensor2Alarm1, rmConfigAccessControlTable=rmConfigAccessControlTable, rmConfigHttpStatue=rmConfigHttpStatue, accessIndex=accessIndex, scSensor2DeviceState=scSensor2DeviceState, rmHumidityNotHighWarning=rmHumidityNotHighWarning, rmConfigDate=rmConfigDate, rmTemperatureNotLowCritical=rmTemperatureNotLowCritical, scSensor2TemperatureHighWarning=scSensor2TemperatureHighWarning, scSensor1HumidityLowWarningStatus=scSensor1HumidityLowWarningStatus, smSensorNumber=smSensorNumber, scSensor2Alarm2=scSensor2Alarm2, scSensor2TemperatureHighCritical=scSensor2TemperatureHighCritical, rmConfigIpAddress=rmConfigIpAddress, rmAlarm1Inactive=rmAlarm1Inactive, scSensor2HumidityHighCritical=scSensor2HumidityHighCritical, scSensor2TemperatureCalibration=scSensor2TemperatureCalibration, scSensor1Humidity=scSensor1Humidity, scSensor2Temperature=scSensor2Temperature, scSensor1DeviceState=scSensor1DeviceState, scSensor2TemperatureHysteresis=scSensor2TemperatureHysteresis, rmHumidityLowCritical=rmHumidityLowCritical, rmIdent=rmIdent, scSensor1Alarm1Name=scSensor1Alarm1Name, scSensor1TemperatureHighCritical=scSensor1TemperatureHighCritical, scSensor1TemperatureHysteresis=scSensor1TemperatureHysteresis, rmConfigSnmp=rmConfigSnmp, scSensor2TemperatureHighCriticalStatus=scSensor2TemperatureHighCriticalStatus, rmTemperatureNotHighWarning=rmTemperatureNotHighWarning, scSensor2HumidityHighWarningStatus=scSensor2HumidityHighWarningStatus, rmConfigControl=rmConfigControl, scSensor2TemperatureName=scSensor2TemperatureName, smDeviceTemperature=smDeviceTemperature, rmConfigPollRate=rmConfigPollRate, scSensorTable=scSensorTable, scSensor2HumidityHighWarning=scSensor2HumidityHighWarning, sensorMonitor=sensorMonitor, rmConfigTrapRetryTime=rmConfigTrapRetryTime, scSensor2Alarm1Hysteresis=scSensor2Alarm1Hysteresis, rmHumidityNotHighCritical=rmHumidityNotHighCritical, rmConfigTelnetStatue=rmConfigTelnetStatue, dataCenter=dataCenter, smDeviceIndex=smDeviceIndex, smDeviceHumidity=smDeviceHumidity, rmConfigHttpSecurity=rmConfigHttpSecurity, scSensor1Alarm1=scSensor1Alarm1, scSensor2HumidityHighCriticalStatus=scSensor2HumidityHighCriticalStatus, rmConfigHttp=rmConfigHttp, smDeviceHumidityAlarm=smDeviceHumidityAlarm, powerware=powerware, accessControlAddr=accessControlAddr, scDeviceIndex=scDeviceIndex, rmAlarm2Inactive=rmAlarm2Inactive, receiverSeverityLevel=receiverSeverityLevel, rmTemperatureNotLowWarning=rmTemperatureNotLowWarning, insIdentName=insIdentName, rmTemperatureHighCritical=rmTemperatureHighCritical, smAlarm2=smAlarm2, scSensor1TemperatureHighCriticalStatus=scSensor1TemperatureHighCriticalStatus, scSensor1Alarm1Hysteresis=scSensor1Alarm1Hysteresis, rmConfigPingStatue=rmConfigPingStatue, rmConfigSnmpPortNumber=rmConfigSnmpPortNumber, rmConfigNtpTimeZone=rmConfigNtpTimeZone, scSensor1HumidityLowCriticalStatus=scSensor1HumidityLowCriticalStatus, rmConfigTime=rmConfigTime, rmHumidityHighWarning=rmHumidityHighWarning, scSensorNumber=scSensorNumber, scSensor1HumidityLowCritical=scSensor1HumidityLowCritical, rmConfigNetwork=rmConfigNetwork, scSensor1TemperatureCalibration=scSensor1TemperatureCalibration, smSensorTable=smSensorTable, rmConfigSubnetMask=rmConfigSubnetMask, rmConfigTrapAckSignature=rmConfigTrapAckSignature, rmConfig=rmConfig, product=product, scSensor1TemperatureLowWarning=scSensor1TemperatureLowWarning, scSensor2Humidity=scSensor2Humidity, rmConfigTftpStatue=rmConfigTftpStatue, rmHumidityHighCritical=rmHumidityHighCritical, scSensor1Alarm1State=scSensor1Alarm1State, scSensor1Temperature=scSensor1Temperature, rmTemperatureHighWarning=rmTemperatureHighWarning, rmConfigTelnet=rmConfigTelnet, scSensor1HumdityName=scSensor1HumdityName, scSensor2TemperatureLowWarningStatus=scSensor2TemperatureLowWarningStatus, scSensor2HumidityHysteresis=scSensor2HumidityHysteresis, scSensor2Alarm1State=scSensor2Alarm1State, scSensor2Alarm2Hysteresis=scSensor2Alarm2Hysteresis, scSensor1Alarm2Name=scSensor1Alarm2Name, rmTemperatureLowCritical=rmTemperatureLowCritical, accessCommunityString=accessCommunityString, rmConfigTemperatureUnit=rmConfigTemperatureUnit, scSensor2Alarm2State=scSensor2Alarm2State, smDeviceStatus=smDeviceStatus, rmConfigDateTime=rmConfigDateTime, rmConfigDateFormat=rmConfigDateFormat, scSensor1TemperatureName=scSensor1TemperatureName, scSensor1TemperatureLowCriticalStatus=scSensor1TemperatureLowCriticalStatus, smAlarm1=smAlarm1, scSensor1HumidityHighWarningStatus=scSensor1HumidityHighWarningStatus, scSensor2TemperatureLowCriticalStatus=scSensor2TemperatureLowCriticalStatus, rmConfigSnmpStatue=rmConfigSnmpStatue, rmAlarm1Active=rmAlarm1Active, scSensor2HumidityLowCriticalStatus=scSensor2HumidityLowCriticalStatus, rmConfigMibVersion=rmConfigMibVersion, scSensor1HumidityHighCriticalStatus=scSensor1HumidityHighCriticalStatus, rmCommunicationRestored=rmCommunicationRestored, receiverCommunityString=receiverCommunityString, rmConfigTimeFromNtp=rmConfigTimeFromNtp, rmTemperatureLowWarning=rmTemperatureLowWarning, scSensor2TemperatureLowWarning=scSensor2TemperatureLowWarning)
