#
# PySNMP MIB module HP-ICF-USER-PROFILE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-USER-PROFILE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:35:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
HpicfUsrProfilePortSpeed, = mibBuilder.importSymbols("CONFIG-MIB", "HpicfUsrProfilePortSpeed")
hpicfCommonSecurity, = mibBuilder.importSymbols("HP-ICF-OID", "hpicfCommonSecurity")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
VlanIndex, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Counter32, Unsigned32, iso, Integer32, ObjectIdentity, MibIdentifier, TimeTicks, Counter64, NotificationType, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ModuleIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Unsigned32", "iso", "Integer32", "ObjectIdentity", "MibIdentifier", "TimeTicks", "Counter64", "NotificationType", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ModuleIdentity", "Bits")
TextualConvention, DisplayString, TruthValue, RowStatus, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue", "RowStatus", "MacAddress")
hpicfUsrProfileMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1))
hpicfUsrProfileMIB.setRevisions(('2013-06-12 22:48', '2008-03-17 15:39', '2007-07-16 21:10', '2007-06-19 21:40', '2007-03-14 23:35', '2007-02-06 20:28', '2005-10-12 00:00', '2005-10-05 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfUsrProfileMIB.setRevisionsDescriptions(('Version 1.7 Added textual convetion HpicfUsrProfilePortSpeed and objects hpicfUsrProfilePortSpeedOverRidden, hpicfUsrProfileStatsPortSpeedVSA. Deprecated group hpicfUsrProfileStatsGroup and added hpicfUsrProfileStatsGroup1. Deprecated hpicfUsrProfileCompliance and added hpicfUsrProfileCompliance3.', "Version 1.6 Created hpicfUsrProfileConfigNasRulesIpv6 to enable or disable IPv6 ACEs. When enabled, destinations of 'any' will be treated as both IPv4 and IPv6. When disabled all destinations will be treated as IPv4 only.", 'Version 1.5 Created hpicfUsrProfileConfigFilterListTable and hpicfUsrProfileConfigFilterRuleTable. Removed hpicfUsrProfileConfigFilterTable. These changes allow for the requirement that a filter list not be in an active state in order for filter rules to be added/removed/modified.', "Version 1.4 Added comment to hpicfUsrProfileConfigBindEntryRowStatus. Changed hpicfUserProfileConfigListEnable to hpicfUserProfileConfigEntryRowStatus. Moved VlanIndex from section Groups in HP-ICF-USER-PROFILE-MIb up to the Import section. Added variable hpicfUsrProfileConfigEntryRowStatus to the HpicfUsrProfileConfigEntry table. Added comment to the Description clause of hpicfUsrProfileConfigPvid. Added comment to the Description clause of hpicfUsrProfileConfigTaggedEgressVlanMap1k Changed range of hpicfUsrProfileSelector from 0..16384 to 1..16384 and added comment to the variable's Description clause.", 'Version 1.3 Added to hpicfUsrProfileStatsAccessMode to hpicfUsrProfileStatsEntry.', 'Version 1.2 Added hpicfUsrProfileConfigBindEntryRowStatus to hpicfUsrProfileConfigBindTable.', 'Version 1.1', 'Initial version.',))
if mibBuilder.loadTexts: hpicfUsrProfileMIB.setLastUpdated('201306121539Z')
if mibBuilder.loadTexts: hpicfUsrProfileMIB.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpicfUsrProfileMIB.setContactInfo('Hewlett Packard Company, 8000 Foothills Blvd. Roseville, CA 95747.')
if mibBuilder.loadTexts: hpicfUsrProfileMIB.setDescription('This MIB module contains the definitions of Managed Objects for user access profiles.')
hpicfUsrProfileCapability = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 0))
hpicfUsrProfileConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 1))
hpicfUsrProfileStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 2))
hpicfUsrProfileConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 3))
hpicfUsrProfileCapabilityByPortMap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 0, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrProfileCapabilityByPortMap.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileCapabilityByPortMap.setDescription("A string of octets containing on bit per access profile primitive as follows: bit 0 - PVID/native/untagged ingress VLAN bit 1 - Tagged Egress VLAN bit 2 - Ingress VLAN Filter bit 3 - Priority Regeneration bit 4 - Max. Ingress Bandwidth bit 5 - Max. Egress Bandwidth bit 6 - Filter List bit 7 - Hitcount Support bit 8 - through 64 - reserved When a bit is set to one, it indicates that device supports the selected access profile primitive only on a per port ('hpicfUsrProfileUserPortNumber') basis. The consequence is that the device can only enforce the same access primitive setting for all users ('hpicfUsrProfileUserMacAddr') on a given port.")
hpicfUsrProfileCapabilityByUserMap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 0, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrProfileCapabilityByUserMap.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileCapabilityByUserMap.setDescription("A string of octets containing one bit per access profile primitive as follows: bit 0 - PVID/native/untagged ingress VLAN bit 1 - Tagged Egress VLAN bit 2 - Ingress VLAN Filter bit 3 - Priority Regeneration bit 4 - Max. Ingress Bandwidth bit 5 - Max. Egress Bandwidth bit 6 - Filter List bit 7 - Hitcount Support bit 8 - through 64 - reserved When a bit is set to one, it indicates that device supports the selected access profile primitive on a per 'hpicfUsrProfileUserMacAddr' basis. The consequence is that the device can enforce unique per user access profile primitives for each user on a given port ('hpicfUsrProfileUserPortNumber').")
hpicfUsrProfileConfigFilterListTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 1, 1), )
if mibBuilder.loadTexts: hpicfUsrProfileConfigFilterListTable.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileConfigFilterListTable.setDescription('A table that contains configuration objects for filter lists.')
hpicfUsrProfileConfigFilterListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 1, 1, 1), ).setIndexNames((0, "HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileFilterListIndex"))
if mibBuilder.loadTexts: hpicfUsrProfileConfigFilterListEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileConfigFilterListEntry.setDescription("The configuration information for a user's filtering profile.")
hpicfUsrProfileFilterListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16384)))
if mibBuilder.loadTexts: hpicfUsrProfileFilterListIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileFilterListIndex.setDescription('The identifier used to select a list of filter rules. A filter list entry must be created before a filter rule entry can be added.')
hpicfUsrProfileConfigFilterListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfUsrProfileConfigFilterListRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileConfigFilterListRowStatus.setDescription("This object indicates the status of this entry. Must NOT be active in order to modify an hpicfUsrProfileConfigFilterRuleEntry that is indexed on this entry's hpicfUsrProfileListIndex. This object must be in the notReady or notInService states in order for an hpicfUsrProfileConfigFilterRuleEntry to be added, removed, or modified. In order to be changed to an active rowStatus, at least one rule sharing the list index must have an active hpicfUsrProfileConfigFilterRuleRowStatus.")
hpicfUsrProfileConfigNasRulesIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfUsrProfileConfigNasRulesIpv6.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileConfigNasRulesIpv6.setDescription('Setting this attribute to enabled(1) enables the usage of IPv6 destinations in ACEs. When set to disabled(2) any implicit IP destinations will be translated as IPv4 only.')
hpicfUsrProfileConfigFilterRuleTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 1, 2), )
if mibBuilder.loadTexts: hpicfUsrProfileConfigFilterRuleTable.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileConfigFilterRuleTable.setDescription('A table that contains configuration objects for filter lists.')
hpicfUsrProfileConfigFilterRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 1, 2, 1), ).setIndexNames((0, "HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileFilterRuleListIndex"), (0, "HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileFilterRuleIndex"))
if mibBuilder.loadTexts: hpicfUsrProfileConfigFilterRuleEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileConfigFilterRuleEntry.setDescription("The configuration information for a user's filtering profile.")
hpicfUsrProfileFilterRuleListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16384)))
if mibBuilder.loadTexts: hpicfUsrProfileFilterRuleListIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileFilterRuleListIndex.setDescription('The identifier used to select a list of filter rules. This filter rule list index must correspond to a created but not active filter list index in order for a rule entry to be created.')
hpicfUsrProfileFilterRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16384)))
if mibBuilder.loadTexts: hpicfUsrProfileFilterRuleIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileFilterRuleIndex.setDescription('A numeric value assigned to each rule within a list belong to the same hpicfUsrProfileFilterListIndex. Rules within a given list will be evaluated in ascending order.')
hpicfUsrProfileConfigFilterRule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfUsrProfileConfigFilterRule.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileConfigFilterRule.setDescription('Specifies a single filter rule using the same syntax used for the hp-nas-filter-rule RADIUS attribute.')
hpicfUsrProfileConfigFilterRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 1, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfUsrProfileConfigFilterRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileConfigFilterRuleRowStatus.setDescription('This object indicates the status of this entry. Must NOT be active in order to modify an hpicfUsrProfileConfigFilterRuleEntry. However, if an hpicfUsrProfileConfigFilterListRowStatus is set to destroy, all HpicfUsrProfileConfigFilterRuleEntry entries sharing the common hpicfUsrProfileFilterListIndex will also be destroyed regardless of the value of hpicfUsrProfileConfigFilterRuleRowStatus.')
hpicfUsrProfileConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 1, 3), )
if mibBuilder.loadTexts: hpicfUsrProfileConfigTable.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileConfigTable.setDescription('A table that contains configuration objects for access profiles.')
hpicfUsrProfileConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 1, 3, 1), ).setIndexNames((0, "HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileConfigIndex"))
if mibBuilder.loadTexts: hpicfUsrProfileConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileConfigEntry.setDescription('The configuration information for an access profile.')
hpicfUsrProfileConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16384)))
if mibBuilder.loadTexts: hpicfUsrProfileConfigIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileConfigIndex.setDescription('A unique numeric value assigned to each access profile in this table.')
hpicfUsrProfileConfigPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 1, 3, 1, 2), VlanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfUsrProfileConfigPvid.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileConfigPvid.setDescription('Specifies the port VID (PVID), also known, as native VLAN to be used with this access profile. To specify no pvid, set value to 4095, not 0.')
hpicfUsrProfileConfigPvidEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 1, 3, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfUsrProfileConfigPvidEnable.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileConfigPvidEnable.setDescription("Setting this attribute TRUE enables the usage of 'hpicfUsrProfilePvid' when this access profile is active.")
hpicfUsrProfileConfigTaggedEgressVlanMap1k = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 1, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfUsrProfileConfigTaggedEgressVlanMap1k.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileConfigTaggedEgressVlanMap1k.setDescription("A string of octets containing one bit per VLAN for VLANS with 'VlanIndex' values of 0 through 1023. The first octet corresponds to VLANs with 'VlanIndex' values of 0 through 7, the second octet to VLANs 8 through 15, etc. The most significant bit of each octet corresponds to the lowest 'VlanIndex' value in that octet. Bit 0 in the 1K map is ignored/discarded. If variable hpicfUsrProfileConfigPvidEnable is TRUE, some bit other than bit 0 in the 1K map must be set. To specify an empty tagged vlan map, vlanIndex value 4095 in the 4K map must be set. Setting a bit to '1' specifies the usage the corresponding VLAN with this access profile.")
hpicfUsrProfileConfigTaggedEgressVlanMap2k = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 1, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfUsrProfileConfigTaggedEgressVlanMap2k.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileConfigTaggedEgressVlanMap2k.setDescription("A string of octets containing one bit per VLAN for VLANS with 'VlanIndex' values of 1024 through 2047. The first octet corresponds to VLANs with 'VlanIndex' values of 1024 through 1031, the second octet to VLANs 1032 through 1039, etc. The most significant bit of each octet corresponds to the lowest 'VlanIndex' value in that octet. Setting a bit to '1' specifies the usage the corresponding VLAN with this access profile.")
hpicfUsrProfileConfigTaggedEgressVlanMap3k = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 1, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfUsrProfileConfigTaggedEgressVlanMap3k.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileConfigTaggedEgressVlanMap3k.setDescription("A string of octets containing one bit per VLAN for VLANS with 'VlanIndex' values of 2048 through 3071. The first octet corresponds to VLANs with 'VlanIndex' values of 2048 through 3071, the second octet to VLANs 2056 through 2063, etc. The most significant bit of each octet corresponds to the lowest 'VlanIndex' value in that octet. Setting a bit to '1' specifies the usage the corresponding VLAN with this access profile.")
hpicfUsrProfileConfigTaggedEgressVlanMap4k = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 1, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfUsrProfileConfigTaggedEgressVlanMap4k.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileConfigTaggedEgressVlanMap4k.setDescription("A string of octets containing one bit per VLAN for VLANS with 'VlanIndex' values of 3072 through 4095. The first octet corresponds to VLANs with 'VlanIndex' values of 3072 through 3079, the second octet to VLANs 3080 through 3087, etc. The most significant bit of each octet corresponds to the lowest 'VlanIndex' value in that octet. Setting a bit to '1' specifies the usage the corresponding VLAN with this access profile.")
hpicfUsrProfileConfigTaggedEgressVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 1, 3, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfUsrProfileConfigTaggedEgressVlanEnable.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileConfigTaggedEgressVlanEnable.setDescription("Setting this attribute TRUE enables the usage of 'hpicfUsrProfileTaggedVlanMapXXX' when this access profile is being enforced.")
hpicfUsrProfileConfigIngressVlanFilterEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 1, 3, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfUsrProfileConfigIngressVlanFilterEnable.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileConfigIngressVlanFilterEnable.setDescription('Setting this attribute TRUE causes the system to only allow ingress traffic from those VLANs on which egress traffic is permitted.')
hpicfUsrProfileConfigPriorityRegenTable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 1, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfUsrProfileConfigPriorityRegenTable.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileConfigPriorityRegenTable.setDescription("Specifies the IEEE 802 priority regeneration table for this access profile. Syntax of octet string is same as for 'User-Priority-Table' RADIUS attribute as defined in RFC4675.")
hpicfUsrProfileConfigPriorityRegenTableEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 1, 3, 1, 11), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfUsrProfileConfigPriorityRegenTableEnable.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileConfigPriorityRegenTableEnable.setDescription("Setting this attribute TRUE enables the usage of the 'hpicfUsrProfilePriorityRegenTable' when this access profile is active.")
hpicfUsrProfileConfigMaxIngressBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 1, 3, 1, 12), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfUsrProfileConfigMaxIngressBandwidth.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileConfigMaxIngressBandwidth.setDescription('Specifies the maximum ingress bandwidth for this access profile. Bandwidth value is specified in Kbps.')
hpicfUsrProfileConfigMaxIngressBandwidthEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 1, 3, 1, 13), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfUsrProfileConfigMaxIngressBandwidthEnable.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileConfigMaxIngressBandwidthEnable.setDescription("Setting this attribute TRUE enables the usage of the 'hpicfUsrProfileMaxIngressBandwidth' when this access profile is active.")
hpicfUsrProfileConfigMaxEgressBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 1, 3, 1, 14), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfUsrProfileConfigMaxEgressBandwidth.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileConfigMaxEgressBandwidth.setDescription('Specifies the maximum egress bandwidth for this access profile. Bandwidth value is specified in Kbps.')
hpicfUsrProfileConfigMaxEgressBandwidthEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 1, 3, 1, 15), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfUsrProfileConfigMaxEgressBandwidthEnable.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileConfigMaxEgressBandwidthEnable.setDescription("Setting this attribute TRUE enables the usage of 'hpicfUsrProfileMaxEgressBandwidth' when this access profile is active.")
hpicfUsrProfileConfigFilterListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 1, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16384))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfUsrProfileConfigFilterListIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileConfigFilterListIndex.setDescription("Selects the filter from 'hpicfUsrProfileConfigFilterTable' to associate with this access profile. The rowStatus of the filter must be in an active state.")
hpicfUsrProfileConfigFilterListEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 1, 3, 1, 17), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfUsrProfileConfigFilterListEnable.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileConfigFilterListEnable.setDescription("Setting this attribute TRUE enables the usage of 'hpicfUsrProfileConfigFilterListIndex' when this access profile is active.")
hpicfUsrProfileConfigEntryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 1, 3, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfUsrProfileConfigEntryRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileConfigEntryRowStatus.setDescription('This object indicates the status of this entry. Must NOT be active in order to change some other column of this config entry.')
hpicfUsrProfileConfigBindTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 1, 4), )
if mibBuilder.loadTexts: hpicfUsrProfileConfigBindTable.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileConfigBindTable.setDescription('A table that contains configuration objects for the access profile-to-user bindings.')
hpicfUsrProfileConfigBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 1, 4, 1), ).setIndexNames((0, "HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileUserPortNumber"), (0, "HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileUserMacAddr"))
if mibBuilder.loadTexts: hpicfUsrProfileConfigBindEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileConfigBindEntry.setDescription('The configuration information for a access profile-to-user binding.')
hpicfUsrProfileUserPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 1, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hpicfUsrProfileUserPortNumber.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileUserPortNumber.setDescription('The interface index associated with this user. On wired HP products, the interface index is the physical port. On wireless products it is the instance (whether real or virtual) of an AP.')
hpicfUsrProfileUserMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 1, 4, 1, 2), MacAddress())
if mibBuilder.loadTexts: hpicfUsrProfileUserMacAddr.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileUserMacAddr.setDescription('The 48-bit IEEE media access control address of the user.')
hpicfUsrProfileSelector = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16384))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfUsrProfileSelector.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileSelector.setDescription("Setting this attribute to a value between 1 and 16384 selects an access profile from 'hpicfUsrProfileConfigTable' to apply to the user.")
hpicfUsrProfileConfigBindEntryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 1, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfUsrProfileConfigBindEntryRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileConfigBindEntryRowStatus.setDescription('This object indicates the status of this entry. Must NOT be active in order to change some other column of this bind entry.')
hpicfUsrProfileConfigConflictResolveQoS = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("non-strict", 0), ("strict", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrProfileConfigConflictResolveQoS.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileConfigConflictResolveQoS.setDescription("This object controls how a device behaves when QoS conflicts arise. A conflict can arise if a device only supports the QoS access primitive on a per-port basis, but device is being configured with profiles that have per-user unique setting. Applying these profiles to the same port will cause the conflict to arise because the device cannot enforce a per-user unique QoS setting. This object specifies two alternatives, as follows: 'non-strict' - Device does not signal errors when multiple access profiles are applied to a port. The device will apply the QoS settings specified in the last profile applied to the port. 'strict' - Device does signal an error when an attempt to apply an access profile to a port that already has an active access profile with a different QoS setting. Device will not activate the access profile in question after error is signaled. ")
hpicfUsrProfileConfigConflictResolveMaxIngressBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("non-strict", 0), ("strict", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrProfileConfigConflictResolveMaxIngressBandwidth.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileConfigConflictResolveMaxIngressBandwidth.setDescription("This object controls how a device behaves when ingress BW conflicts arise. A conflict can arise if a device only supports the ingress BW access primitive on a per-port basis, but device is being configured with profiles that have per-user unique setting. Applying these profiles to the same port will cause the conflict to arise because the device cannot enforce a per-user unique ingress BW setting. This object specifies two alternatives, as follows: 'non-strict' - Device does not signal errors when multiple access profiles are applied to a port. The device will apply the ingress BW settings specified in the last profile applied to the port. 'strict' - Device does signal an error when an attempt to apply an access profile to a port that already has an active access profile with a different ingress BW setting. Device will not activate the access profile in question after error is signaled. ")
hpicfUsrProfileConfigConflictResolveMaxEgressBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("non-strict", 0), ("strict", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUsrProfileConfigConflictResolveMaxEgressBandwidth.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileConfigConflictResolveMaxEgressBandwidth.setDescription("This object controls how a device behaves when egress BW conflicts arise. A conflict can arise if a device only supports the egress BW access primitive on a per-port basis, but device is being configured with profiles that have per-user unique setting. Applying these profiles to the same port will cause the conflict to arise because the device cannot enforce a per-user egress BW setting. This object specifies two alternatives, as follows: 'non-strict' - Device does not signal errors when multiple access profiles are applied to a port. The device will apply the egress BW settings specified in the last profile applied to the port. 'strict' - Device does signal an error when an attempt to apply an access profile to a port that already has an active access profile with a different egress BW setting. Device will not activate the access profile in question after error is signaled. ")
hpicfUsrProfileLastUpdate = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 2, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrProfileLastUpdate.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileLastUpdate.setDescription('A snapshot of the module sysUpTime at the time of the last update to the access profiles in effect. A value of 0 indicates that the hpicfUsrProfileLastUpdate object is not supported by the device and a fresh copy of the hpicfUsrProfileTable will always need to be obtained by the management application.')
hpicfUsrProfileStatsFilterTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 2, 2), )
if mibBuilder.loadTexts: hpicfUsrProfileStatsFilterTable.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileStatsFilterTable.setDescription('A table that contains statistic objects for filter lists.')
hpicfUsrProfileStatsFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 2, 2, 1), ).setIndexNames((0, "HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileFilterListIndex"), (0, "HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileFilterRuleIndex"))
if mibBuilder.loadTexts: hpicfUsrProfileStatsFilterEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileStatsFilterEntry.setDescription("Statistic information for a user's filtering profile.")
hpicfUsrProfileStatsFilterRule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 2, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrProfileStatsFilterRule.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileStatsFilterRule.setDescription('Specifies a single filter rule using the same syntax used for the hp-nas-filter-rule RADIUS attribute.')
hpicfUsrProfileStatsFilterRuleHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 2, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrProfileStatsFilterRuleHitCount.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileStatsFilterRuleHitCount.setDescription("Specifies the number of times (hit count) the user's traffic has matched this rule.")
hpicfUsrProfileStatsFilterRuleHitCountEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 2, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrProfileStatsFilterRuleHitCountEnabled.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileStatsFilterRuleHitCountEnabled.setDescription("When this attribute is TRUE it signifies the 'hpicfUsrProfileStatsFilterRuleHitCount' contains a valid value. A FALSE value signifies it does not contain a valid value.")
hpicfUsrProfileStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 2, 3), )
if mibBuilder.loadTexts: hpicfUsrProfileStatsTable.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileStatsTable.setDescription('This table describes the access profiles currently in effect.')
hpicfUsrProfileStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 2, 3, 1), ).setIndexNames((0, "HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileUserPortNumber"), (0, "HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileUserMacAddr"))
if mibBuilder.loadTexts: hpicfUsrProfileStatsEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileStatsEntry.setDescription('An entry in the user access profile table.')
hpicfUsrProfileStatsPvid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 2, 3, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrProfileStatsPvid.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileStatsPvid.setDescription('Active port VID (PVID) for this user.')
hpicfUsrProfileStatsTaggedEgressVlanMap1k = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 2, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrProfileStatsTaggedEgressVlanMap1k.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileStatsTaggedEgressVlanMap1k.setDescription("A string of octets containing one bit per VLAN for VLANS with 'VlanIndex' values of 0 through 1023. The first octet corresponds to VLANs with 'VlanIndex' values of 0 through 7, the second octet to VLANs 8 through 15, etc. The most significant bit of each octet corresponds to the lowest 'VlanIndex' value in that octet. When a bit is set to '1', it means the corresponding tagged VLAN as active for this user.")
hpicfUsrProfileStatsTaggedEgressVlanMap2k = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 2, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrProfileStatsTaggedEgressVlanMap2k.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileStatsTaggedEgressVlanMap2k.setDescription("A string of octets containing one bit per VLAN for VLANS with 'VlanIndex' values of 1024 through 2047. The first octet corresponds to VLANs with 'VlanIndex' values of 1024 through 1031, the second octet to VLANs 1032 through 1039, etc. The most significant bit of each octet corresponds to the lowest 'VlanIndex' value in that octet. When a bit is set to '1', it indicates the corresponding tagged VLAN as active for this user.")
hpicfUsrProfileStatsTaggedEgressVlanMap3k = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 2, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrProfileStatsTaggedEgressVlanMap3k.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileStatsTaggedEgressVlanMap3k.setDescription("A string of octets containing one bit per VLAN for VLANS with 'VlanIndex' values of 2048 through 3071. The first octet corresponds to VLANs with 'VlanIndex' values of 2048 through 2055, the second octet to VLANs 2056 through 2063, etc. The most significant bit of each octet corresponds to the lowest 'VlanIndex' value in that octet. When a bit is set to '1', it indicates the corresponding tagged VLAN as active for this user.")
hpicfUsrProfileStatsTaggedEgressVlanMap4k = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 2, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrProfileStatsTaggedEgressVlanMap4k.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileStatsTaggedEgressVlanMap4k.setDescription("A string of octets containing one bit per VLAN for VLANS with 'VlanIndex' values of 3072 through 4095. The first octet corresponds to VLANs with 'VlanIndex' values of 3072 through 3079, the second octet to VLANs 3080 through 3087, etc. The most significant bit of each octet corresponds to the lowest 'VlanIndex' value in that octet. When a bit is set to '1', it indicates the corresponding tagged VLAN as active for this user.")
hpicfUsrProfileStatsIngressVlanFilterEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 2, 3, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrProfileStatsIngressVlanFilterEnable.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileStatsIngressVlanFilterEnable.setDescription('When this attribute is TRUE causes the system is only allowing ingress traffic from those VLANs on which egress traffic is permitted.')
hpicfUsrProfileStatsPriorityRegenTable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 2, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrProfileStatsPriorityRegenTable.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileStatsPriorityRegenTable.setDescription("Specifies the IEEE 802 priority regeneration table active for this access profile. Syntax of octet string is same as for 'User-Priority-Table' RADIUS attribute as defined in RFC4675.")
hpicfUsrProfileStatsMaxIngressBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 2, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrProfileStatsMaxIngressBandwidth.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileStatsMaxIngressBandwidth.setDescription('Specifies the maximum ingress bandwidth for this access profile. Bandwidth value is specified in Kbps.')
hpicfUsrProfileStatsMaxEgressBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 2, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrProfileStatsMaxEgressBandwidth.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileStatsMaxEgressBandwidth.setDescription('Specifies the maximum egress bandwidth for this access profile. Bandwidth value is specified in Kbps.')
hpicfUsrProfileStatsFilterListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrProfileStatsFilterListIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileStatsFilterListIndex.setDescription("A value of 0 indicates that no filter rule set is active for the user. A value between 1 and 16384 selects the active filter rule set from 'hpicfUsrProfileStatsFilterTable'.")
hpicfUsrProfileStatsAccessMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("snmp", 1), ("dot8021x", 2), ("webauth", 3), ("macauth", 4), ("webmacauth", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrProfileStatsAccessMode.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileStatsAccessMode.setDescription('Indicates whether profile was applied via SNMP or via RADIUS. Application by SNMP has precedence over RADIUS. Where there are no attribute conflicts, profile attributes may be a combination of those applied by both SNMP and RADIUS. In such case, the variable value will still be SNMP.')
hpicfUsrProfilePortSpeedOverRidden = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 2, 3, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrProfilePortSpeedOverRidden.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfilePortSpeedOverRidden.setDescription("When this attribute is TRUE it signifies the 'hpicfUsrProfileStatsPortSpeedVSA' is a RADIUS over-ridden. A FALSE value signifies it is not RADIUS over-ridden value.")
hpicfUsrProfileStatsPortSpeedVSA = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 2, 3, 1, 13), HpicfUsrProfilePortSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUsrProfileStatsPortSpeedVSA.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileStatsPortSpeedVSA.setDescription('This attribute signifies at what speed the port is operating at.')
hpicfUsrProfileGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 3, 1))
hpicfUsrProfileCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 3, 2))
hpicfUsrProfileCapabilityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 3, 1, 1)).setObjects(("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileCapabilityByPortMap"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileCapabilityByUserMap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrProfileCapabilityGroup = hpicfUsrProfileCapabilityGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileCapabilityGroup.setDescription('A collection of objects providing device capability information for user access profiles.')
hpicfUsrProfileConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 3, 1, 2)).setObjects(("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileConfigFilterListRowStatus"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileConfigFilterRule"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileConfigFilterRuleRowStatus"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileConfigPvid"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileConfigPvidEnable"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileConfigTaggedEgressVlanMap1k"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileConfigTaggedEgressVlanMap2k"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileConfigTaggedEgressVlanMap3k"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileConfigTaggedEgressVlanMap4k"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileConfigTaggedEgressVlanEnable"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileConfigIngressVlanFilterEnable"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileConfigPriorityRegenTable"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileConfigPriorityRegenTableEnable"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileConfigMaxIngressBandwidth"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileConfigMaxIngressBandwidthEnable"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileConfigMaxEgressBandwidth"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileConfigMaxEgressBandwidthEnable"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileConfigFilterListIndex"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileConfigFilterListEnable"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileConfigEntryRowStatus"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileConfigConflictResolveQoS"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileConfigConflictResolveMaxIngressBandwidth"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileConfigConflictResolveMaxEgressBandwidth"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileConfigNasRulesIpv6"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrProfileConfigGroup = hpicfUsrProfileConfigGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileConfigGroup.setDescription('A collection of objects providing configuration of user access profiles.')
hpicfUsrProfileStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 3, 1, 3)).setObjects(("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileLastUpdate"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileStatsFilterRule"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileStatsFilterRuleHitCount"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileStatsFilterRuleHitCountEnabled"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileStatsPvid"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileStatsTaggedEgressVlanMap1k"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileStatsTaggedEgressVlanMap2k"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileStatsTaggedEgressVlanMap3k"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileStatsTaggedEgressVlanMap4k"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileStatsIngressVlanFilterEnable"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileStatsPriorityRegenTable"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileStatsMaxIngressBandwidth"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileStatsMaxEgressBandwidth"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileStatsFilterListIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrProfileStatsGroup = hpicfUsrProfileStatsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfUsrProfileStatsGroup.setDescription('A collection of objects providing statistics of user access profiles.')
hpicfUsrProfileConfigGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 3, 1, 4)).setObjects(("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileSelector"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileConfigBindEntryRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrProfileConfigGroup2 = hpicfUsrProfileConfigGroup2.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileConfigGroup2.setDescription('A collection of objects providing configuration of user access profiles.')
hpicfUsrProfileStatsGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 3, 1, 5)).setObjects(("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileLastUpdate"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileStatsFilterRule"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileStatsFilterRuleHitCount"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileStatsFilterRuleHitCountEnabled"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileStatsPvid"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileStatsTaggedEgressVlanMap1k"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileStatsTaggedEgressVlanMap2k"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileStatsTaggedEgressVlanMap3k"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileStatsTaggedEgressVlanMap4k"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileStatsIngressVlanFilterEnable"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileStatsPriorityRegenTable"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileStatsMaxIngressBandwidth"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileStatsMaxEgressBandwidth"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileStatsFilterListIndex"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileStatsAccessMode"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileStatsPortSpeedVSA"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfilePortSpeedOverRidden"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrProfileStatsGroup1 = hpicfUsrProfileStatsGroup1.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileStatsGroup1.setDescription('A collection of objects providing statistics of user access profiles.')
hpicfUsrProfileCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 3, 2, 1)).setObjects(("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileCapabilityGroup"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileConfigGroup"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrProfileCompliance = hpicfUsrProfileCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfUsrProfileCompliance.setDescription('The compliance statement for devices support of HP-USER-PROFILE-MIB.')
hpicfUsrProfileCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 3, 2, 2)).setObjects(("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileCapabilityGroup"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileConfigGroup"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileStatsGroup"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileConfigGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrProfileCompliance2 = hpicfUsrProfileCompliance2.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfUsrProfileCompliance2.setDescription('The compliance statement for devices support of HP-USER-PROFILE-MIB.')
hpicfUsrProfileCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 3, 2, 3)).setObjects(("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileCapabilityGroup"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileConfigGroup"), ("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileStatsGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrProfileCompliance3 = hpicfUsrProfileCompliance3.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileCompliance3.setDescription('The compliance statement for devices support of HP-USER-PROFILE-MIB.')
hpicfUsrProfileCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 12, 1, 3, 2, 4)).setObjects(("HP-ICF-USER-PROFILE-MIB", "hpicfUsrProfileConfigGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUsrProfileCompliance4 = hpicfUsrProfileCompliance4.setStatus('current')
if mibBuilder.loadTexts: hpicfUsrProfileCompliance4.setDescription('The compliance statement for devices support of HP-USER-PROFILE-MIB.')
mibBuilder.exportSymbols("HP-ICF-USER-PROFILE-MIB", hpicfUsrProfileLastUpdate=hpicfUsrProfileLastUpdate, hpicfUsrProfileConfigIndex=hpicfUsrProfileConfigIndex, hpicfUsrProfileStatsMaxEgressBandwidth=hpicfUsrProfileStatsMaxEgressBandwidth, hpicfUsrProfileStatsFilterRule=hpicfUsrProfileStatsFilterRule, hpicfUsrProfileFilterRuleListIndex=hpicfUsrProfileFilterRuleListIndex, hpicfUsrProfileStatsMaxIngressBandwidth=hpicfUsrProfileStatsMaxIngressBandwidth, hpicfUsrProfileConfigFilterRuleRowStatus=hpicfUsrProfileConfigFilterRuleRowStatus, hpicfUsrProfileStatsFilterListIndex=hpicfUsrProfileStatsFilterListIndex, hpicfUsrProfileConfigTable=hpicfUsrProfileConfigTable, hpicfUsrProfileCompliance2=hpicfUsrProfileCompliance2, hpicfUsrProfileConfigFilterListIndex=hpicfUsrProfileConfigFilterListIndex, hpicfUsrProfileConfigConflictResolveQoS=hpicfUsrProfileConfigConflictResolveQoS, hpicfUsrProfileConfigBindEntryRowStatus=hpicfUsrProfileConfigBindEntryRowStatus, hpicfUsrProfileStatsFilterEntry=hpicfUsrProfileStatsFilterEntry, hpicfUsrProfileStatsTaggedEgressVlanMap4k=hpicfUsrProfileStatsTaggedEgressVlanMap4k, hpicfUsrProfileStatsGroup1=hpicfUsrProfileStatsGroup1, hpicfUsrProfileConfigFilterRuleTable=hpicfUsrProfileConfigFilterRuleTable, hpicfUsrProfileConfigTaggedEgressVlanMap1k=hpicfUsrProfileConfigTaggedEgressVlanMap1k, hpicfUsrProfileConfigGroup=hpicfUsrProfileConfigGroup, hpicfUsrProfileCompliance=hpicfUsrProfileCompliance, hpicfUsrProfileCompliances=hpicfUsrProfileCompliances, hpicfUsrProfileConfigFilterListRowStatus=hpicfUsrProfileConfigFilterListRowStatus, hpicfUsrProfileConfigIngressVlanFilterEnable=hpicfUsrProfileConfigIngressVlanFilterEnable, hpicfUsrProfileConfigConflictResolveMaxEgressBandwidth=hpicfUsrProfileConfigConflictResolveMaxEgressBandwidth, hpicfUsrProfileConfigMaxEgressBandwidth=hpicfUsrProfileConfigMaxEgressBandwidth, hpicfUsrProfileStatsFilterRuleHitCount=hpicfUsrProfileStatsFilterRuleHitCount, hpicfUsrProfileConfigPriorityRegenTableEnable=hpicfUsrProfileConfigPriorityRegenTableEnable, hpicfUsrProfileCompliance4=hpicfUsrProfileCompliance4, hpicfUsrProfileFilterListIndex=hpicfUsrProfileFilterListIndex, hpicfUsrProfileConfigBindEntry=hpicfUsrProfileConfigBindEntry, hpicfUsrProfileCapabilityByUserMap=hpicfUsrProfileCapabilityByUserMap, hpicfUsrProfileMIB=hpicfUsrProfileMIB, hpicfUsrProfileConfigNasRulesIpv6=hpicfUsrProfileConfigNasRulesIpv6, hpicfUsrProfileUserPortNumber=hpicfUsrProfileUserPortNumber, hpicfUsrProfileStatsPortSpeedVSA=hpicfUsrProfileStatsPortSpeedVSA, hpicfUsrProfileCapability=hpicfUsrProfileCapability, hpicfUsrProfileConfigTaggedEgressVlanEnable=hpicfUsrProfileConfigTaggedEgressVlanEnable, hpicfUsrProfileConformance=hpicfUsrProfileConformance, hpicfUsrProfileConfigFilterListEnable=hpicfUsrProfileConfigFilterListEnable, hpicfUsrProfileCapabilityByPortMap=hpicfUsrProfileCapabilityByPortMap, hpicfUsrProfileConfigMaxIngressBandwidth=hpicfUsrProfileConfigMaxIngressBandwidth, hpicfUsrProfileStatsFilterTable=hpicfUsrProfileStatsFilterTable, hpicfUsrProfileConfigTaggedEgressVlanMap2k=hpicfUsrProfileConfigTaggedEgressVlanMap2k, hpicfUsrProfileConfigMaxEgressBandwidthEnable=hpicfUsrProfileConfigMaxEgressBandwidthEnable, hpicfUsrProfileSelector=hpicfUsrProfileSelector, hpicfUsrProfileStatsGroup=hpicfUsrProfileStatsGroup, hpicfUsrProfileStatsAccessMode=hpicfUsrProfileStatsAccessMode, hpicfUsrProfileStatsIngressVlanFilterEnable=hpicfUsrProfileStatsIngressVlanFilterEnable, hpicfUsrProfileConfigEntry=hpicfUsrProfileConfigEntry, hpicfUsrProfileCompliance3=hpicfUsrProfileCompliance3, hpicfUsrProfileCapabilityGroup=hpicfUsrProfileCapabilityGroup, hpicfUsrProfileConfigFilterRuleEntry=hpicfUsrProfileConfigFilterRuleEntry, hpicfUsrProfileConfigBindTable=hpicfUsrProfileConfigBindTable, hpicfUsrProfileConfigFilterListEntry=hpicfUsrProfileConfigFilterListEntry, hpicfUsrProfileConfigMaxIngressBandwidthEnable=hpicfUsrProfileConfigMaxIngressBandwidthEnable, hpicfUsrProfileConfigEntryRowStatus=hpicfUsrProfileConfigEntryRowStatus, hpicfUsrProfileConfigTaggedEgressVlanMap3k=hpicfUsrProfileConfigTaggedEgressVlanMap3k, hpicfUsrProfileConfigFilterListTable=hpicfUsrProfileConfigFilterListTable, hpicfUsrProfileConfigPriorityRegenTable=hpicfUsrProfileConfigPriorityRegenTable, hpicfUsrProfileConfig=hpicfUsrProfileConfig, hpicfUsrProfileConfigFilterRule=hpicfUsrProfileConfigFilterRule, hpicfUsrProfileConfigPvid=hpicfUsrProfileConfigPvid, hpicfUsrProfileStatsPriorityRegenTable=hpicfUsrProfileStatsPriorityRegenTable, hpicfUsrProfileFilterRuleIndex=hpicfUsrProfileFilterRuleIndex, hpicfUsrProfileGroup=hpicfUsrProfileGroup, hpicfUsrProfileStatsEntry=hpicfUsrProfileStatsEntry, hpicfUsrProfileStats=hpicfUsrProfileStats, hpicfUsrProfileConfigConflictResolveMaxIngressBandwidth=hpicfUsrProfileConfigConflictResolveMaxIngressBandwidth, hpicfUsrProfilePortSpeedOverRidden=hpicfUsrProfilePortSpeedOverRidden, hpicfUsrProfileStatsTable=hpicfUsrProfileStatsTable, PYSNMP_MODULE_ID=hpicfUsrProfileMIB, hpicfUsrProfileStatsPvid=hpicfUsrProfileStatsPvid, hpicfUsrProfileStatsTaggedEgressVlanMap1k=hpicfUsrProfileStatsTaggedEgressVlanMap1k, hpicfUsrProfileConfigGroup2=hpicfUsrProfileConfigGroup2, hpicfUsrProfileUserMacAddr=hpicfUsrProfileUserMacAddr, hpicfUsrProfileConfigPvidEnable=hpicfUsrProfileConfigPvidEnable, hpicfUsrProfileStatsTaggedEgressVlanMap2k=hpicfUsrProfileStatsTaggedEgressVlanMap2k, hpicfUsrProfileStatsTaggedEgressVlanMap3k=hpicfUsrProfileStatsTaggedEgressVlanMap3k, hpicfUsrProfileConfigTaggedEgressVlanMap4k=hpicfUsrProfileConfigTaggedEgressVlanMap4k, hpicfUsrProfileStatsFilterRuleHitCountEnabled=hpicfUsrProfileStatsFilterRuleHitCountEnabled)
