#
# PySNMP MIB module HP-ICF-LINKTEST (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-LINKTEST
# Produced by pysmi-0.3.4 at Wed May  1 13:34:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
hpicfCommon, hpicfObjectModules = mibBuilder.importSymbols("HP-ICF-OID", "hpicfCommon", "hpicfObjectModules")
OwnerString, = mibBuilder.importSymbols("RMON-MIB", "OwnerString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Counter64, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, MibIdentifier, Gauge32, NotificationType, TimeTicks, Unsigned32, ModuleIdentity, ObjectIdentity, Bits, iso, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "MibIdentifier", "Gauge32", "NotificationType", "TimeTicks", "Unsigned32", "ModuleIdentity", "ObjectIdentity", "Bits", "iso", "Integer32")
TimeInterval, TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TimeInterval", "TextualConvention", "DisplayString", "RowStatus")
hpicfLinkTestMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 7))
hpicfLinkTestMib.setRevisions(('2000-11-03 22:25', '1997-03-06 03:38', '1996-09-06 22:18',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfLinkTestMib.setRevisionsDescriptions(('Updated division name.', "Added 'destroyWhenDone' capability.", 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: hpicfLinkTestMib.setLastUpdated('200011032225Z')
if mibBuilder.loadTexts: hpicfLinkTestMib.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpicfLinkTestMib.setContactInfo('Hewlett Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpicfLinkTestMib.setDescription('This MIB module describes objects for managing the link test features of devices in the HP Integrated Communication Facility product line.')
hpicfLinktest = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 6))
hpicfLinkTestNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfLinkTestNextIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfLinkTestNextIndex.setDescription("A currently unassigned value of hpicfLinkTestIndex. The value 0 indicates that no unassigned values are available. In order to cause a non-zero value of this object to be assigned for use as the hpicfLinkTestIndex of a future link test, it must be successfully modified by a set operation. When modified by a set operation, the new value must precisely match the value presently held by the object. If not, the management protocol set operation will fail. Immediately after the completion of a successful set operation, the agent must modify the value of this object. The algorithm for modifying the value is implementation-dependent, and may use a subset of values within the legal range. However, the agent must guarantee that the new value is not assigned to any in-use value of hpicfLinkTestIndex. A management station creates a new link test using this algorithm: - issue a management protocol retrieval operation to obtain the value of hpicfLinkTestNextIndex; if the retrieved value is zero, a new link test cannot be created at this time; - issue a management protocol set operation for hpicfLinkTestNextIndex, supplying the same value as obtained in the previous step; - if the set operation succeeds, use the supplied value as the hpicfLinkTestIndex of the new link test; if the set operation fails, go back to the first step and obtain a new value for hpicfLinkTestNextIndex; - issue a management protocol set operation to create an instance of the hpicfLinkTestStatus object setting its value to 'createAndGo' or 'createAndWait' (as specified in the description of the RowStatus textual convention). Note that the set of hpicfLinkTestNextIndex and the instance of hpicfLinkTestStatus may occur in the same set operation if desired.")
hpicfLinkTestTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 6, 2), )
if mibBuilder.loadTexts: hpicfLinkTestTable.setStatus('current')
if mibBuilder.loadTexts: hpicfLinkTestTable.setDescription('A table of in-progress link tests.')
hpicfLinkTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 6, 2, 1), ).setIndexNames((0, "HP-ICF-LINKTEST", "hpicfLinkTestIndex"))
if mibBuilder.loadTexts: hpicfLinkTestEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfLinkTestEntry.setDescription('A row in the table, containing information about a single link test.')
hpicfLinkTestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hpicfLinkTestIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfLinkTestIndex.setDescription('The value of this object uniquely identifies this link test.')
hpicfLinkTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("icmpEcho", 1), ("ieee8022Test", 2), ("ipxDiagnostic", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfLinkTestType.setStatus('current')
if mibBuilder.loadTexts: hpicfLinkTestType.setDescription('The type of test to run.')
hpicfLinkTestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 6, 2, 1, 3), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(4, 4), ValueSizeConstraint(6, 6), ValueSizeConstraint(10, 10), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfLinkTestAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfLinkTestAddress.setDescription("The destination address used for sending link test packets, formatted according to the value of the corresponding instance of hpicfLinkTestType. When hpicfLinkTestType is equal to 'icmpEcho', this object will be four octets long, and contain an IP address in network byte order. When hpicfLinkTestType is equal to 'ieee8022Test', this object will be six octets long, and contain an IEEE MAC address in canonical order. When hpicfLinkTestType is equal to 'ipxDiagnostic', this object will be ten octets long, and will contain the IPX network number in network byte order, followed by the IPX node number in network byte order.")
hpicfLinkTestIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 6, 2, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfLinkTestIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfLinkTestIfIndex.setDescription('The local interface to send the link test packets on. The value of this object must correspond to an ifIndex value for an interface capable of supporting the requested link test. The value 0 is used to indicate that the agent should determine the interface using local routing information.')
hpicfLinkTestTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 6, 2, 1, 5), TimeInterval().clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfLinkTestTimeout.setStatus('current')
if mibBuilder.loadTexts: hpicfLinkTestTimeout.setDescription('The time interval over which a link test response must be received, or the test is counted as failed.')
hpicfLinkTestRepetitions = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfLinkTestRepetitions.setStatus('current')
if mibBuilder.loadTexts: hpicfLinkTestRepetitions.setDescription('The total number of times that the agent should send link test packets to the destination host.')
hpicfLinkTestAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfLinkTestAttempts.setStatus('current')
if mibBuilder.loadTexts: hpicfLinkTestAttempts.setDescription("The number of times we have sent link test packets to the destination during the current test. This object will start at zero when the corresponding instance of hpicfLinkTestStatus is set to 'active'. It will increment at the completion of each iteration of the test until either it reaches the value of hpicfLinkTestRepetitions, or the corresponding instance of hpicfLinkTestStatus is set to a value other than 'active'. Note that it is incremented at the completion of each iteration, not when the link test packet is sent, so that the number of failures can be calculated accurately.")
hpicfLinkTestSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfLinkTestSuccesses.setStatus('current')
if mibBuilder.loadTexts: hpicfLinkTestSuccesses.setDescription("The number of times that we have recieved a response to a link test packet during the current test. This object will start at zero when the corresponding instance of hpicfLinkTestStatus is set to 'active'. It will increment each time the agent recieves a response from the destination of this test. Note that the number of failed attempts is given by hpicfLinkTestAttempts - hpicfLinkTestSuccesses.")
hpicfLinkTestMinRespTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 6, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfLinkTestMinRespTime.setStatus('current')
if mibBuilder.loadTexts: hpicfLinkTestMinRespTime.setDescription('The shortest time (in milliseconds) between request and response for all of the link tests that have been attempted as part of this test.')
hpicfLinkTestMaxRespTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 6, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfLinkTestMaxRespTime.setStatus('current')
if mibBuilder.loadTexts: hpicfLinkTestMaxRespTime.setDescription('The longest time (in milliseconds) between request and response for all of the link tests that have been attempted as part of this test.')
hpicfLinkTestTotalRespTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 6, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfLinkTestTotalRespTime.setStatus('current')
if mibBuilder.loadTexts: hpicfLinkTestTotalRespTime.setDescription('The sum of all of the response times (in milliseconds) for all of the link tests that have been attempted as part of this test. This value can be used in conjunction with hpicfLinkTestSuccesses to calculate the average response time.')
hpicfLinkTestOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 6, 2, 1, 12), OwnerString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfLinkTestOwner.setStatus('current')
if mibBuilder.loadTexts: hpicfLinkTestOwner.setDescription('The entity that configured this test and is therefore using the resources assigned to it.')
hpicfLinkTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 6, 2, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfLinkTestStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfLinkTestStatus.setDescription('The status of this entry.')
hpicfLinkTestDeleteMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 1, 6, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("keepWhenDone", 1), ("destroyWhenDone", 2))).clone('keepWhenDone')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfLinkTestDeleteMode.setStatus('current')
if mibBuilder.loadTexts: hpicfLinkTestDeleteMode.setDescription("When the value of this object is 'keepWhenDone', the associated instance of the hpicfLinkTestStatus object will be changed to 'notInService' upon completion of the test. It will then be timed out by the agent after 5 minutes in the 'notInService' state. When the value of this object is 'destroyWhenDone', the associated instance of the hpicfLinkTestStatus object will be changed to 'destroy' upon completion of the test. This will remove the row from the table immediately after the test completes.")
hpicfLinkTestConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 7, 1))
hpicfLinkTestCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 7, 1, 1))
hpicfLinkTestGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 7, 1, 2))
hpicfLinkTestCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 7, 1, 1, 1)).setObjects(("HP-ICF-LINKTEST", "hpicfLinkTestGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfLinkTestCompliance = hpicfLinkTestCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfLinkTestCompliance.setDescription('The compliance statement for ICF devices that provide a connectivity test facility.')
hpicfLinkTestCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 7, 1, 1, 2)).setObjects(("HP-ICF-LINKTEST", "hpicfLinkTestGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfLinkTestCompliance2 = hpicfLinkTestCompliance2.setStatus('current')
if mibBuilder.loadTexts: hpicfLinkTestCompliance2.setDescription('The compliance statement for ICF devices that provide a connectivity test facility.')
hpicfLinkTestGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 7, 1, 2, 1)).setObjects(("HP-ICF-LINKTEST", "hpicfLinkTestNextIndex"), ("HP-ICF-LINKTEST", "hpicfLinkTestType"), ("HP-ICF-LINKTEST", "hpicfLinkTestAddress"), ("HP-ICF-LINKTEST", "hpicfLinkTestIfIndex"), ("HP-ICF-LINKTEST", "hpicfLinkTestTimeout"), ("HP-ICF-LINKTEST", "hpicfLinkTestRepetitions"), ("HP-ICF-LINKTEST", "hpicfLinkTestAttempts"), ("HP-ICF-LINKTEST", "hpicfLinkTestSuccesses"), ("HP-ICF-LINKTEST", "hpicfLinkTestMinRespTime"), ("HP-ICF-LINKTEST", "hpicfLinkTestMaxRespTime"), ("HP-ICF-LINKTEST", "hpicfLinkTestTotalRespTime"), ("HP-ICF-LINKTEST", "hpicfLinkTestOwner"), ("HP-ICF-LINKTEST", "hpicfLinkTestStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfLinkTestGroup = hpicfLinkTestGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfLinkTestGroup.setDescription('A collection of objects for initiating and monitoring network connectivity tests on ICF devices.')
hpicfLinkTestGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 10, 2, 7, 1, 2, 2)).setObjects(("HP-ICF-LINKTEST", "hpicfLinkTestNextIndex"), ("HP-ICF-LINKTEST", "hpicfLinkTestType"), ("HP-ICF-LINKTEST", "hpicfLinkTestAddress"), ("HP-ICF-LINKTEST", "hpicfLinkTestIfIndex"), ("HP-ICF-LINKTEST", "hpicfLinkTestTimeout"), ("HP-ICF-LINKTEST", "hpicfLinkTestRepetitions"), ("HP-ICF-LINKTEST", "hpicfLinkTestAttempts"), ("HP-ICF-LINKTEST", "hpicfLinkTestSuccesses"), ("HP-ICF-LINKTEST", "hpicfLinkTestMinRespTime"), ("HP-ICF-LINKTEST", "hpicfLinkTestMaxRespTime"), ("HP-ICF-LINKTEST", "hpicfLinkTestTotalRespTime"), ("HP-ICF-LINKTEST", "hpicfLinkTestOwner"), ("HP-ICF-LINKTEST", "hpicfLinkTestStatus"), ("HP-ICF-LINKTEST", "hpicfLinkTestDeleteMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfLinkTestGroup2 = hpicfLinkTestGroup2.setStatus('current')
if mibBuilder.loadTexts: hpicfLinkTestGroup2.setDescription('A collection of objects for initiating and monitoring network connectivity tests on ICF devices.')
mibBuilder.exportSymbols("HP-ICF-LINKTEST", hpicfLinktest=hpicfLinktest, hpicfLinkTestRepetitions=hpicfLinkTestRepetitions, hpicfLinkTestMinRespTime=hpicfLinkTestMinRespTime, hpicfLinkTestGroup=hpicfLinkTestGroup, hpicfLinkTestGroup2=hpicfLinkTestGroup2, hpicfLinkTestOwner=hpicfLinkTestOwner, hpicfLinkTestDeleteMode=hpicfLinkTestDeleteMode, hpicfLinkTestStatus=hpicfLinkTestStatus, hpicfLinkTestMaxRespTime=hpicfLinkTestMaxRespTime, hpicfLinkTestSuccesses=hpicfLinkTestSuccesses, hpicfLinkTestConformance=hpicfLinkTestConformance, hpicfLinkTestTotalRespTime=hpicfLinkTestTotalRespTime, hpicfLinkTestIfIndex=hpicfLinkTestIfIndex, hpicfLinkTestMib=hpicfLinkTestMib, hpicfLinkTestAttempts=hpicfLinkTestAttempts, hpicfLinkTestTimeout=hpicfLinkTestTimeout, hpicfLinkTestGroups=hpicfLinkTestGroups, hpicfLinkTestEntry=hpicfLinkTestEntry, hpicfLinkTestCompliance2=hpicfLinkTestCompliance2, hpicfLinkTestCompliances=hpicfLinkTestCompliances, hpicfLinkTestType=hpicfLinkTestType, hpicfLinkTestCompliance=hpicfLinkTestCompliance, hpicfLinkTestNextIndex=hpicfLinkTestNextIndex, PYSNMP_MODULE_ID=hpicfLinkTestMib, hpicfLinkTestTable=hpicfLinkTestTable, hpicfLinkTestAddress=hpicfLinkTestAddress, hpicfLinkTestIndex=hpicfLinkTestIndex)
