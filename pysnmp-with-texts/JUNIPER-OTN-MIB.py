#
# PySNMP MIB module JUNIPER-OTN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-OTN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:00:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
ifIndex, ifDescr = mibBuilder.importSymbols("IF-MIB", "ifIndex", "ifDescr")
jnxOtnNotifications, jnxOtnMibRoot = mibBuilder.importSymbols("JUNIPER-SMI", "jnxOtnNotifications", "jnxOtnMibRoot")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, NotificationType, iso, Unsigned32, Bits, Gauge32, Counter64, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ModuleIdentity, Integer32, TimeTicks, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "NotificationType", "iso", "Unsigned32", "Bits", "Gauge32", "Counter64", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ModuleIdentity", "Integer32", "TimeTicks", "MibIdentifier")
DateAndTime, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TextualConvention", "DisplayString")
jnxOtnMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1))
jnxOtnMib.setRevisions(('2015-06-17 00:00', '2008-07-10 00:00', '2008-07-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxOtnMib.setRevisionsDescriptions(('This MIB module defines objects used for managing the OTN interfaces of Juniper products.', 'Added OTN Alarms and PM data.', 'Initial revision.',))
if mibBuilder.loadTexts: jnxOtnMib.setLastUpdated('201506171138Z')
if mibBuilder.loadTexts: jnxOtnMib.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxOtnMib.setContactInfo(' Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net')
if mibBuilder.loadTexts: jnxOtnMib.setDescription('Changed jnxOtnIntervalOdu15minIntervalNumber, jnxOtnIntervalOtu15minIntervalNumber, jnxOtnIntervalOtuFec15minIntervalNumber from read-only to not-accessible')
class JnxOtnAlarmId(TextualConvention, Bits):
    description = 'Identifies specific sonet/sdh alarms that may exist on an interface.'
    status = 'current'
    namedValues = NamedValues(("otnLosAlarm", 0), ("otnLofAlarm", 1), ("otnLomAlarm", 2), ("otnWavelengthlockAlarm", 3), ("otnOtuAisAlarm", 4), ("otnOtuBdiAlarm", 5), ("otnOtuTtimAlarm", 6), ("otnOtuIaeAlarm", 7), ("otnOtuSdAlarm", 8), ("otnOtuSfAlarm", 9), ("otnOtuFecExcessiveErrsAlarm", 10), ("otnOtuFecDegradedErrsAlarm", 11), ("otnOtuBbeThreholdAlarm", 12), ("otnOtuEsThreholdAlarm", 13), ("otnOtuSesThreholdAlarm", 14), ("otnOtuUasThreholdAlarm", 15), ("otnOduAisAlarm", 16), ("otnOduOciAlarm", 17), ("otnOduLckAlarm", 18), ("otnOduBdiAlarm", 19), ("otnOduTtimAlarm", 20), ("otnOduSdAlarm", 21), ("otnOduSfAlarm", 22), ("otnOduRxApsChange", 23), ("otnOduBbeThreholdAlarm", 24), ("otnOduEsThreholdAlarm", 25), ("otnOduSesThreholdAlarm", 26), ("otnOduUasThreholdAlarm", 27), ("otnOpuPMTAlarm", 28))

jnxOtnAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 1))
jnxOtnAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 1, 1), )
if mibBuilder.loadTexts: jnxOtnAlarmTable.setStatus('current')
if mibBuilder.loadTexts: jnxOtnAlarmTable.setDescription('Information about alarms on all the sonet/sdh physical interfaces on this router.')
jnxOtnAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxOtnAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: jnxOtnAlarmEntry.setDescription('Information about alarms on a sonet/sdh physical interface on this router.')
jnxOtnCurrentAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 1, 1, 1, 1), JnxOtnAlarmId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnCurrentAlarms.setStatus('current')
if mibBuilder.loadTexts: jnxOtnCurrentAlarms.setDescription('This object identifies all the active OTN alarms on this interface.')
jnxOtnLastAlarmId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 1, 1, 1, 2), JnxOtnAlarmId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnLastAlarmId.setStatus('current')
if mibBuilder.loadTexts: jnxOtnLastAlarmId.setDescription('The object identifies the OTN alarm that most recently was set or cleared.')
jnxOtnLastAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 1, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnLastAlarmTime.setStatus('current')
if mibBuilder.loadTexts: jnxOtnLastAlarmTime.setDescription('The value of sysUpTime when the management subsystem learned of the last alarm event.')
jnxOtnLastAlarmDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 1, 1, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnLastAlarmDate.setStatus('current')
if mibBuilder.loadTexts: jnxOtnLastAlarmDate.setDescription('The system date and time when the management subsystem learned of the last alarm event.')
jnxOtnLastAlarmEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("set", 2), ("cleared", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnLastAlarmEvent.setStatus('current')
if mibBuilder.loadTexts: jnxOtnLastAlarmEvent.setDescription('This indicates whether the last alarm event set a new alarm or cleared an existing alarm.')
jnxOtnPerformanceMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2))
jnxOtnCurrentOdu15minTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 1), )
if mibBuilder.loadTexts: jnxOtnCurrentOdu15minTable.setStatus('current')
if mibBuilder.loadTexts: jnxOtnCurrentOdu15minTable.setDescription('Information about ODU Performance monitoring for this interfaces on this router.')
jnxOtnCurrentOdu15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxOtnCurrentOdu15minEntry.setStatus('current')
if mibBuilder.loadTexts: jnxOtnCurrentOdu15minEntry.setDescription('Performance data about ia 15 minute interface on this router')
jnxOtnCurrentOdu15minBIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnCurrentOdu15minBIP.setStatus('current')
if mibBuilder.loadTexts: jnxOtnCurrentOdu15minBIP.setDescription(' Current 15 minute BIP counter')
jnxOtnCurrentOdu15minBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnCurrentOdu15minBBE.setStatus('current')
if mibBuilder.loadTexts: jnxOtnCurrentOdu15minBBE.setDescription(' Current 15 minute BBE counter')
jnxOtnCurrentOdu15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnCurrentOdu15minES.setStatus('current')
if mibBuilder.loadTexts: jnxOtnCurrentOdu15minES.setDescription(' Current 15 minute ES counter')
jnxOtnCurrentOdu15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnCurrentOdu15minSES.setStatus('current')
if mibBuilder.loadTexts: jnxOtnCurrentOdu15minSES.setDescription(' Current 15 minute SES counter')
jnxOtnCurrentOdu15minUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnCurrentOdu15minUAS.setStatus('current')
if mibBuilder.loadTexts: jnxOtnCurrentOdu15minUAS.setDescription(' Current 15 minute UAS counter')
jnxOtnCurrentOdu15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnCurrentOdu15minElapsedTime.setStatus('current')
if mibBuilder.loadTexts: jnxOtnCurrentOdu15minElapsedTime.setDescription(' Time elapsed for this 15 minute interval')
jnxOtnIntervalOdu15minTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 2), )
if mibBuilder.loadTexts: jnxOtnIntervalOdu15minTable.setStatus('current')
if mibBuilder.loadTexts: jnxOtnIntervalOdu15minTable.setDescription('Information about ODU Performance monitoring for this interfaces on this router.')
jnxOtnIntervalOdu15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JUNIPER-OTN-MIB", "jnxOtnIntervalOdu15minIntervalNumber"))
if mibBuilder.loadTexts: jnxOtnIntervalOdu15minEntry.setStatus('current')
if mibBuilder.loadTexts: jnxOtnIntervalOdu15minEntry.setDescription('Performance data in a 15 minute interface on this router.')
jnxOtnIntervalOdu15minIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: jnxOtnIntervalOdu15minIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: jnxOtnIntervalOdu15minIntervalNumber.setDescription('A number between 1 and 96, where 1 is the most recently completed 15 minute interval and 96 is the 15 minutes interval completed 23 hours and 45 minutes prior to interval 1.')
jnxOtnIntervalOdu15minBIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnIntervalOdu15minBIP.setStatus('current')
if mibBuilder.loadTexts: jnxOtnIntervalOdu15minBIP.setDescription(" Interval 'n' 15 minute BIP counter")
jnxOtnIntervalOdu15minBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnIntervalOdu15minBBE.setStatus('current')
if mibBuilder.loadTexts: jnxOtnIntervalOdu15minBBE.setDescription(" Interval 'n' 15 minute BBE counter")
jnxOtnIntervalOdu15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnIntervalOdu15minES.setStatus('current')
if mibBuilder.loadTexts: jnxOtnIntervalOdu15minES.setDescription(" Interval 'n' 15 minute ES counter")
jnxOtnIntervalOdu15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnIntervalOdu15minSES.setStatus('current')
if mibBuilder.loadTexts: jnxOtnIntervalOdu15minSES.setDescription(" Interval 'n' 15 minute SES counter")
jnxOtnIntervalOdu15minUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnIntervalOdu15minUAS.setStatus('current')
if mibBuilder.loadTexts: jnxOtnIntervalOdu15minUAS.setDescription(' Interval 15 minute UAS counter')
jnxOtnIntervalOdu15minInvalidData = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnIntervalOdu15minInvalidData.setStatus('current')
if mibBuilder.loadTexts: jnxOtnIntervalOdu15minInvalidData.setDescription(' Time elapsed for this 15 minute interval')
jnxOtnIntervalODdu15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 2, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnIntervalODdu15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: jnxOtnIntervalODdu15minTimeStamp.setDescription(' Time elapsed for this 15 minute interval')
jnxOtnTotalOduTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 3), )
if mibBuilder.loadTexts: jnxOtnTotalOduTable.setStatus('current')
if mibBuilder.loadTexts: jnxOtnTotalOduTable.setDescription('Information about ODU Performance monitoring for this interfaces on this router.')
jnxOtnTotalOduEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxOtnTotalOduEntry.setStatus('current')
if mibBuilder.loadTexts: jnxOtnTotalOduEntry.setDescription('Performance data about ia 15 minute interface on this router.')
jnxOtnTotalOduDayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnTotalOduDayNumber.setStatus('current')
if mibBuilder.loadTexts: jnxOtnTotalOduDayNumber.setDescription(" Day 'n'number -- currently only one day is supported ")
jnxOtnTotalOduBIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnTotalOduBIP.setStatus('current')
if mibBuilder.loadTexts: jnxOtnTotalOduBIP.setDescription(' Total (1 day) BIP counter')
jnxOtnTotalOduBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnTotalOduBBE.setStatus('current')
if mibBuilder.loadTexts: jnxOtnTotalOduBBE.setDescription(' Total (1 day) BBE counter in an OTN ODU frame in the in the previous 24 hour interval. Invalid 15 minute intervals count as 0.')
jnxOtnTotalOduES = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnTotalOduES.setStatus('current')
if mibBuilder.loadTexts: jnxOtnTotalOduES.setDescription(' Total (1 day) ES counter in an OTN ODU frame in the in the previous 24 hour interval. Invalid 15 minute intervals count as 0.')
jnxOtnTotalOduSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnTotalOduSES.setStatus('current')
if mibBuilder.loadTexts: jnxOtnTotalOduSES.setDescription(' Total (1 day) SES counter in an OTN ODU frame in the in the previous 24 hour interval. Invalid 15 minute intervals count as 0.')
jnxOtnTotalOduUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnTotalOduUAS.setStatus('current')
if mibBuilder.loadTexts: jnxOtnTotalOduUAS.setDescription(' Total (1 day) UAS counter in an OTN ODU frame in the in the previous 24 hour interval. Invalid 15 minute intervals count as 0.')
jnxOtnCurrentOtu15minTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 4), )
if mibBuilder.loadTexts: jnxOtnCurrentOtu15minTable.setStatus('current')
if mibBuilder.loadTexts: jnxOtnCurrentOtu15minTable.setDescription('Information about ODU Performance monitoring for this interfaces on this router.')
jnxOtnCurrentOtu15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxOtnCurrentOtu15minEntry.setStatus('current')
if mibBuilder.loadTexts: jnxOtnCurrentOtu15minEntry.setDescription('Performance data about ia 15 minute interface on this router')
jnxOtnCurrentOtu15minBIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnCurrentOtu15minBIP.setStatus('current')
if mibBuilder.loadTexts: jnxOtnCurrentOtu15minBIP.setDescription(' Current 15 minute BIP counter')
jnxOtnCurrentOtu15minBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnCurrentOtu15minBBE.setStatus('current')
if mibBuilder.loadTexts: jnxOtnCurrentOtu15minBBE.setDescription(' Current 15 minute BBE counter')
jnxOtnCurrentOtu15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnCurrentOtu15minES.setStatus('current')
if mibBuilder.loadTexts: jnxOtnCurrentOtu15minES.setDescription(' Current 15 minute ES counter')
jnxOtnCurrentOtu15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnCurrentOtu15minSES.setStatus('current')
if mibBuilder.loadTexts: jnxOtnCurrentOtu15minSES.setDescription(' Current 15 minute SES counter')
jnxOtnCurrentOtu15minUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnCurrentOtu15minUAS.setStatus('current')
if mibBuilder.loadTexts: jnxOtnCurrentOtu15minUAS.setDescription(' Current 15 minute UAS counter')
jnxOtnCurrentOtu15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnCurrentOtu15minElapsedTime.setStatus('current')
if mibBuilder.loadTexts: jnxOtnCurrentOtu15minElapsedTime.setDescription(' Time elapsed for this 15 minute interval')
jnxOtnIntervalOtu15minTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 5), )
if mibBuilder.loadTexts: jnxOtnIntervalOtu15minTable.setStatus('current')
if mibBuilder.loadTexts: jnxOtnIntervalOtu15minTable.setDescription('Information about ODU Performance monitoring for this interfaces on this router.')
jnxOtnIntervalOtu15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JUNIPER-OTN-MIB", "jnxOtnIntervalOtu15minIntervalNumber"))
if mibBuilder.loadTexts: jnxOtnIntervalOtu15minEntry.setStatus('current')
if mibBuilder.loadTexts: jnxOtnIntervalOtu15minEntry.setDescription('Performance data about ia 15 minute interface on this router.')
jnxOtnIntervalOtu15minIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: jnxOtnIntervalOtu15minIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: jnxOtnIntervalOtu15minIntervalNumber.setDescription('A number between 1 and 96, where 1 is the most recently completed 15 minute interval and 96 is the 15 minutes interval completed 23 hours and 45 minutes prior to interval 1.')
jnxOtnIntervalOtu15minBIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnIntervalOtu15minBIP.setStatus('current')
if mibBuilder.loadTexts: jnxOtnIntervalOtu15minBIP.setDescription(" Interval 'n' 15 minute BIP counter")
jnxOtnIntervalOtu15minBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnIntervalOtu15minBBE.setStatus('current')
if mibBuilder.loadTexts: jnxOtnIntervalOtu15minBBE.setDescription(" Interval 'n' 15 minute BBE counter")
jnxOtnIntervalOtu15minES = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 5, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnIntervalOtu15minES.setStatus('current')
if mibBuilder.loadTexts: jnxOtnIntervalOtu15minES.setDescription(" Interval 'n' 15 minute ES counter")
jnxOtnIntervalOtu15minSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnIntervalOtu15minSES.setStatus('current')
if mibBuilder.loadTexts: jnxOtnIntervalOtu15minSES.setDescription(" Interval 'n' 15 minute SES counter")
jnxOtnIntervalOtu15minUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnIntervalOtu15minUAS.setStatus('current')
if mibBuilder.loadTexts: jnxOtnIntervalOtu15minUAS.setDescription(' Interval 15 minute UAS counter')
jnxOtnIntervalOtu15minInvalidData = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnIntervalOtu15minInvalidData.setStatus('current')
if mibBuilder.loadTexts: jnxOtnIntervalOtu15minInvalidData.setDescription(' Time elapsed for this 15 minute interval')
jnxOtnIntervalOtu15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 5, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnIntervalOtu15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: jnxOtnIntervalOtu15minTimeStamp.setDescription(' Time elapsed for this 15 minute interval')
jnxOtnTotalOtuTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 6), )
if mibBuilder.loadTexts: jnxOtnTotalOtuTable.setStatus('current')
if mibBuilder.loadTexts: jnxOtnTotalOtuTable.setDescription('Information about ODU Performance monitoring for this interfaces on this router.')
jnxOtnTotalOtuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxOtnTotalOtuEntry.setStatus('current')
if mibBuilder.loadTexts: jnxOtnTotalOtuEntry.setDescription('Performance data about ia 15 minute interface on this router.')
jnxOtnTotalOtuDayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnTotalOtuDayNumber.setStatus('current')
if mibBuilder.loadTexts: jnxOtnTotalOtuDayNumber.setDescription(" Day 'n'number -- currently only one day is supported ")
jnxOtnTotalOtuBIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 6, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnTotalOtuBIP.setStatus('current')
if mibBuilder.loadTexts: jnxOtnTotalOtuBIP.setDescription(' Total (1 day) BIP counter in an OTN OTU frame in the in the previous 24 hour interval. Invalid 15 minute intervals count as 0.')
jnxOtnTotalOtuBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 6, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnTotalOtuBBE.setStatus('current')
if mibBuilder.loadTexts: jnxOtnTotalOtuBBE.setDescription(' Total (1 day) BBE counter in an OTN OTU frame in the in the previous 24 hour interval. Invalid 15 minute intervals count as 0.')
jnxOtnTotalOtuES = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 6, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnTotalOtuES.setStatus('current')
if mibBuilder.loadTexts: jnxOtnTotalOtuES.setDescription(' Total (1 day) ES counter in an OTN OTU frame in the in the previous 24 hour interval. Invalid 15 minute intervals count as 0.')
jnxOtnTotalOtuSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 6, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnTotalOtuSES.setStatus('current')
if mibBuilder.loadTexts: jnxOtnTotalOtuSES.setDescription(' Total (1 day) SES counter in an OTN OTU frame in the in the previous 24 hour interval. Invalid 15 minute intervals count as 0.')
jnxOtnTotalOtuUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 6, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnTotalOtuUAS.setStatus('current')
if mibBuilder.loadTexts: jnxOtnTotalOtuUAS.setDescription(' Total (1 day) counter in an OTN OTU frame in the in the previous 24 hour interval. Invalid 15 minute intervals count as 0.')
jnxOtnCurrentOtuFec15minTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 7), )
if mibBuilder.loadTexts: jnxOtnCurrentOtuFec15minTable.setStatus('current')
if mibBuilder.loadTexts: jnxOtnCurrentOtuFec15minTable.setDescription('Information about ODU Performance monitoring for this interfaces on this router.')
jnxOtnCurrentOtuFec15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxOtnCurrentOtuFec15minEntry.setStatus('current')
if mibBuilder.loadTexts: jnxOtnCurrentOtuFec15minEntry.setDescription('Performance data about ia 15 minute interface on this router')
jnxOtnCurrentOtuFec15minCorrectedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 7, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnCurrentOtuFec15minCorrectedErrors.setStatus('current')
if mibBuilder.loadTexts: jnxOtnCurrentOtuFec15minCorrectedErrors.setDescription(' Current 15 minute FEC Corrected Errors counter')
jnxOtnCurrentOtuFec15minCorrectedErrorRatioX = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 7, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnCurrentOtuFec15minCorrectedErrorRatioX.setStatus('current')
if mibBuilder.loadTexts: jnxOtnCurrentOtuFec15minCorrectedErrorRatioX.setDescription(' Current 15 minute CorrectedErrorRatioX counter')
jnxOtnCurrentOtuFec15minCorrectedErrorRatioY = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 7, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnCurrentOtuFec15minCorrectedErrorRatioY.setStatus('current')
if mibBuilder.loadTexts: jnxOtnCurrentOtuFec15minCorrectedErrorRatioY.setDescription(' Current 15 minute CorrectedErrorRatioY exponent')
jnxOtnCurrentOtuFec15minUncorrectedWords = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 7, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnCurrentOtuFec15minUncorrectedWords.setStatus('current')
if mibBuilder.loadTexts: jnxOtnCurrentOtuFec15minUncorrectedWords.setDescription(' Current 15 minute FEC UnCorrected Words counter')
jnxOtnCurrentOtuFec15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 7, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnCurrentOtuFec15minElapsedTime.setStatus('current')
if mibBuilder.loadTexts: jnxOtnCurrentOtuFec15minElapsedTime.setDescription(' Time elapsed for this 15 minute interval')
jnxOtnIntervalOtuFec15minTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 8), )
if mibBuilder.loadTexts: jnxOtnIntervalOtuFec15minTable.setStatus('current')
if mibBuilder.loadTexts: jnxOtnIntervalOtuFec15minTable.setDescription('Information about ODU Performance monitoring for this interfaces on this router.')
jnxOtnIntervalOtuFec15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "JUNIPER-OTN-MIB", "jnxOtnIntervalOtuFec15minIntervalNumber"))
if mibBuilder.loadTexts: jnxOtnIntervalOtuFec15minEntry.setStatus('current')
if mibBuilder.loadTexts: jnxOtnIntervalOtuFec15minEntry.setDescription('Performance data about ia 15 minute interface on this router')
jnxOtnIntervalOtuFec15minIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: jnxOtnIntervalOtuFec15minIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: jnxOtnIntervalOtuFec15minIntervalNumber.setDescription('A number between 1 and 96, where 1 is the most recently completed 15 minute interval and 96 is the 15 minutes interval completed 23 hours and 45 minutes prior to interval 1.')
jnxOtnIntervalOtuFec15minCorrectedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 8, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnIntervalOtuFec15minCorrectedErrors.setStatus('current')
if mibBuilder.loadTexts: jnxOtnIntervalOtuFec15minCorrectedErrors.setDescription(' Interval 15 minute FEC Corrected Errors counter')
jnxOtnIntervalOtuFec15minCorrectedErrorRatioX = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 8, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnIntervalOtuFec15minCorrectedErrorRatioX.setStatus('current')
if mibBuilder.loadTexts: jnxOtnIntervalOtuFec15minCorrectedErrorRatioX.setDescription(' Interval 15 minute CorrectedErrorRatioX counter')
jnxOtnIntervalOtuFec15minCorrectedErrorRatioY = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 8, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnIntervalOtuFec15minCorrectedErrorRatioY.setStatus('current')
if mibBuilder.loadTexts: jnxOtnIntervalOtuFec15minCorrectedErrorRatioY.setDescription(' Interval 15 minute CorrectedErrorRatioY exponent')
jnxOtnIntervalOtuFec15minUncorrectedWords = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 8, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnIntervalOtuFec15minUncorrectedWords.setStatus('current')
if mibBuilder.loadTexts: jnxOtnIntervalOtuFec15minUncorrectedWords.setDescription(' Interval 15 minute FEC UnCorrected Words counter')
jnxOtnIntervalOtuFec15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 8, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnIntervalOtuFec15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: jnxOtnIntervalOtuFec15minTimeStamp.setDescription(' Time elapsed for this 15 minute interval')
jnxOtnTotalOtuFecTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 9), )
if mibBuilder.loadTexts: jnxOtnTotalOtuFecTable.setStatus('current')
if mibBuilder.loadTexts: jnxOtnTotalOtuFecTable.setDescription('Information about ODU Performance monitoring for this interfaces on this router.')
jnxOtnTotalOtuFecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 9, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxOtnTotalOtuFecEntry.setStatus('current')
if mibBuilder.loadTexts: jnxOtnTotalOtuFecEntry.setDescription('Performance data about ia 15 minute interface on this router')
jnxOtnTotalOtuFecDayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnTotalOtuFecDayNumber.setStatus('current')
if mibBuilder.loadTexts: jnxOtnTotalOtuFecDayNumber.setDescription('A number between 1 and 96, where 1 is the most recently completed 15 minute interval and 96 is the 15 minutes interval completed 23 hours and 45 minutes prior to interval 1.')
jnxOtnTotalOtuFecCorrectedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 9, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnTotalOtuFecCorrectedErrors.setStatus('current')
if mibBuilder.loadTexts: jnxOtnTotalOtuFecCorrectedErrors.setDescription(' Interval 15 minute FEC Corrected Errors counter in an OTN frame in the in the previous 24 hour interval. Invalid 15 minute intervals count as 0')
jnxOtnTotalOtuFecUncorrectedWords = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 56, 1, 2, 9, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxOtnTotalOtuFecUncorrectedWords.setStatus('current')
if mibBuilder.loadTexts: jnxOtnTotalOtuFecUncorrectedWords.setDescription(' Interval 15 minute FEC UnCorrected Words counter in an OTN frame in the in the previous 24 hour interval. Invalid 15 minute intervals count as 0.')
jnxOtnNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 4, 15, 0))
jnxOtnAlarmSet = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 15, 0, 1)).setObjects(("IF-MIB", "ifDescr"), ("JUNIPER-OTN-MIB", "jnxOtnLastAlarmId"), ("JUNIPER-OTN-MIB", "jnxOtnCurrentAlarms"), ("JUNIPER-OTN-MIB", "jnxOtnLastAlarmDate"))
if mibBuilder.loadTexts: jnxOtnAlarmSet.setStatus('current')
if mibBuilder.loadTexts: jnxOtnAlarmSet.setDescription('Notification of a recently set Otn alarm.')
jnxOtnAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 2636, 4, 15, 0, 2)).setObjects(("IF-MIB", "ifDescr"), ("JUNIPER-OTN-MIB", "jnxOtnLastAlarmId"), ("JUNIPER-OTN-MIB", "jnxOtnCurrentAlarms"), ("JUNIPER-OTN-MIB", "jnxOtnLastAlarmDate"))
if mibBuilder.loadTexts: jnxOtnAlarmCleared.setStatus('current')
if mibBuilder.loadTexts: jnxOtnAlarmCleared.setDescription('Notification of a recently cleared Otn alarm.')
mibBuilder.exportSymbols("JUNIPER-OTN-MIB", jnxOtnIntervalOdu15minEntry=jnxOtnIntervalOdu15minEntry, jnxOtnAlarms=jnxOtnAlarms, jnxOtnTotalOduTable=jnxOtnTotalOduTable, jnxOtnTotalOtuBIP=jnxOtnTotalOtuBIP, jnxOtnIntervalOdu15minInvalidData=jnxOtnIntervalOdu15minInvalidData, jnxOtnCurrentOtuFec15minCorrectedErrors=jnxOtnCurrentOtuFec15minCorrectedErrors, jnxOtnIntervalOtu15minTable=jnxOtnIntervalOtu15minTable, jnxOtnIntervalOtu15minEntry=jnxOtnIntervalOtu15minEntry, jnxOtnTotalOduBBE=jnxOtnTotalOduBBE, jnxOtnIntervalOdu15minBIP=jnxOtnIntervalOdu15minBIP, jnxOtnIntervalOtu15minInvalidData=jnxOtnIntervalOtu15minInvalidData, jnxOtnCurrentOtuFec15minCorrectedErrorRatioX=jnxOtnCurrentOtuFec15minCorrectedErrorRatioX, jnxOtnCurrentOtuFec15minEntry=jnxOtnCurrentOtuFec15minEntry, jnxOtnCurrentAlarms=jnxOtnCurrentAlarms, jnxOtnIntervalOtuFec15minTimeStamp=jnxOtnIntervalOtuFec15minTimeStamp, jnxOtnIntervalOtuFec15minUncorrectedWords=jnxOtnIntervalOtuFec15minUncorrectedWords, jnxOtnIntervalOtu15minUAS=jnxOtnIntervalOtu15minUAS, jnxOtnCurrentOtu15minBIP=jnxOtnCurrentOtu15minBIP, jnxOtnIntervalOdu15minIntervalNumber=jnxOtnIntervalOdu15minIntervalNumber, jnxOtnTotalOtuDayNumber=jnxOtnTotalOtuDayNumber, jnxOtnTotalOtuSES=jnxOtnTotalOtuSES, PYSNMP_MODULE_ID=jnxOtnMib, jnxOtnLastAlarmEvent=jnxOtnLastAlarmEvent, jnxOtnCurrentOdu15minBIP=jnxOtnCurrentOdu15minBIP, jnxOtnCurrentOtu15minSES=jnxOtnCurrentOtu15minSES, JnxOtnAlarmId=JnxOtnAlarmId, jnxOtnIntervalOtu15minSES=jnxOtnIntervalOtu15minSES, jnxOtnCurrentOtu15minBBE=jnxOtnCurrentOtu15minBBE, jnxOtnCurrentOdu15minES=jnxOtnCurrentOdu15minES, jnxOtnAlarmTable=jnxOtnAlarmTable, jnxOtnCurrentOdu15minEntry=jnxOtnCurrentOdu15minEntry, jnxOtnAlarmCleared=jnxOtnAlarmCleared, jnxOtnMib=jnxOtnMib, jnxOtnIntervalODdu15minTimeStamp=jnxOtnIntervalODdu15minTimeStamp, jnxOtnCurrentOtu15minUAS=jnxOtnCurrentOtu15minUAS, jnxOtnCurrentOdu15minTable=jnxOtnCurrentOdu15minTable, jnxOtnIntervalOtu15minBBE=jnxOtnIntervalOtu15minBBE, jnxOtnIntervalOdu15minTable=jnxOtnIntervalOdu15minTable, jnxOtnIntervalOtuFec15minIntervalNumber=jnxOtnIntervalOtuFec15minIntervalNumber, jnxOtnTotalOtuES=jnxOtnTotalOtuES, jnxOtnTotalOtuFecEntry=jnxOtnTotalOtuFecEntry, jnxOtnTotalOtuUAS=jnxOtnTotalOtuUAS, jnxOtnCurrentOdu15minUAS=jnxOtnCurrentOdu15minUAS, jnxOtnIntervalOtuFec15minCorrectedErrors=jnxOtnIntervalOtuFec15minCorrectedErrors, jnxOtnCurrentOtu15minTable=jnxOtnCurrentOtu15minTable, jnxOtnTotalOduDayNumber=jnxOtnTotalOduDayNumber, jnxOtnIntervalOtuFec15minCorrectedErrorRatioX=jnxOtnIntervalOtuFec15minCorrectedErrorRatioX, jnxOtnCurrentOtuFec15minElapsedTime=jnxOtnCurrentOtuFec15minElapsedTime, jnxOtnTotalOtuFecTable=jnxOtnTotalOtuFecTable, jnxOtnPerformanceMonitoring=jnxOtnPerformanceMonitoring, jnxOtnTotalOtuEntry=jnxOtnTotalOtuEntry, jnxOtnCurrentOdu15minElapsedTime=jnxOtnCurrentOdu15minElapsedTime, jnxOtnCurrentOtu15minEntry=jnxOtnCurrentOtu15minEntry, jnxOtnIntervalOtu15minBIP=jnxOtnIntervalOtu15minBIP, jnxOtnCurrentOtuFec15minUncorrectedWords=jnxOtnCurrentOtuFec15minUncorrectedWords, jnxOtnIntervalOdu15minSES=jnxOtnIntervalOdu15minSES, jnxOtnTotalOtuTable=jnxOtnTotalOtuTable, jnxOtnLastAlarmDate=jnxOtnLastAlarmDate, jnxOtnIntervalOtuFec15minEntry=jnxOtnIntervalOtuFec15minEntry, jnxOtnTotalOduUAS=jnxOtnTotalOduUAS, jnxOtnLastAlarmTime=jnxOtnLastAlarmTime, jnxOtnIntervalOtuFec15minTable=jnxOtnIntervalOtuFec15minTable, jnxOtnCurrentOdu15minSES=jnxOtnCurrentOdu15minSES, jnxOtnTotalOduEntry=jnxOtnTotalOduEntry, jnxOtnTotalOtuFecDayNumber=jnxOtnTotalOtuFecDayNumber, jnxOtnIntervalOtu15minIntervalNumber=jnxOtnIntervalOtu15minIntervalNumber, jnxOtnIntervalOdu15minBBE=jnxOtnIntervalOdu15minBBE, jnxOtnAlarmEntry=jnxOtnAlarmEntry, jnxOtnAlarmSet=jnxOtnAlarmSet, jnxOtnLastAlarmId=jnxOtnLastAlarmId, jnxOtnTotalOduES=jnxOtnTotalOduES, jnxOtnTotalOtuFecUncorrectedWords=jnxOtnTotalOtuFecUncorrectedWords, jnxOtnIntervalOdu15minUAS=jnxOtnIntervalOdu15minUAS, jnxOtnTotalOduBIP=jnxOtnTotalOduBIP, jnxOtnCurrentOtuFec15minCorrectedErrorRatioY=jnxOtnCurrentOtuFec15minCorrectedErrorRatioY, jnxOtnCurrentOtuFec15minTable=jnxOtnCurrentOtuFec15minTable, jnxOtnNotificationPrefix=jnxOtnNotificationPrefix, jnxOtnTotalOtuBBE=jnxOtnTotalOtuBBE, jnxOtnIntervalOtuFec15minCorrectedErrorRatioY=jnxOtnIntervalOtuFec15minCorrectedErrorRatioY, jnxOtnIntervalOtu15minES=jnxOtnIntervalOtu15minES, jnxOtnIntervalOtu15minTimeStamp=jnxOtnIntervalOtu15minTimeStamp, jnxOtnCurrentOtu15minElapsedTime=jnxOtnCurrentOtu15minElapsedTime, jnxOtnCurrentOtu15minES=jnxOtnCurrentOtu15minES, jnxOtnCurrentOdu15minBBE=jnxOtnCurrentOdu15minBBE, jnxOtnTotalOtuFecCorrectedErrors=jnxOtnTotalOtuFecCorrectedErrors, jnxOtnTotalOduSES=jnxOtnTotalOduSES, jnxOtnIntervalOdu15minES=jnxOtnIntervalOdu15minES)
