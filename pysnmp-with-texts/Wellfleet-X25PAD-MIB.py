#
# PySNMP MIB module Wellfleet-X25PAD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-X25PAD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:42:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Gauge32, iso, Bits, Counter32, NotificationType, IpAddress, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Counter64, ModuleIdentity, Unsigned32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Gauge32", "iso", "Bits", "Counter32", "NotificationType", "IpAddress", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Counter64", "ModuleIdentity", "Unsigned32", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfX25PadGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfX25PadGroup")
wfX25PadDefaultCfgTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 1), )
if mibBuilder.loadTexts: wfX25PadDefaultCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadDefaultCfgTable.setDescription('Table of X25 PAD Config Objects')
wfX25PadDefaultCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 1, 1), ).setIndexNames((0, "Wellfleet-X25PAD-MIB", "wfX25PadDefaultCfgSlot"), (0, "Wellfleet-X25PAD-MIB", "wfX25PadDefaultCfgConnector"))
if mibBuilder.loadTexts: wfX25PadDefaultCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadDefaultCfgEntry.setDescription('An entry in the X25 Pad Config Table')
wfX25PadDefaultCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadDefaultCfgDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadDefaultCfgDelete.setDescription('Create/Delete parameter')
wfX25PadDefaultCfgDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadDefaultCfgDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadDefaultCfgDisable.setDescription('Enable/Disable parameter')
wfX25PadDefaultCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadDefaultCfgState.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadDefaultCfgState.setDescription('Current state of X.25 PAD sofware on the I-SDB')
wfX25PadDefaultCfgSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadDefaultCfgSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadDefaultCfgSlot.setDescription('Instance ID Slot, filled in by ISDB mib gate')
wfX25PadDefaultCfgConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadDefaultCfgConnector.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadDefaultCfgConnector.setDescription("Instance ID Connector, filled in by ISDB mib gate. For the ASN this attribute is an encoded value and is equal to 'module'*10 + 'connector'. Where 'module' is defined in attribute 86 and 'connector' is defined in attribute 78 of this table. For non-ASN platforms this attribute is the physical connector number on the slot.")
wfX25PadDefaultCfgCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadDefaultCfgCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadDefaultCfgCircuit.setDescription('Circuit number, filled in by ISDB mib gate')
wfX25PadDefaultCfgX121Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadDefaultCfgX121Addr.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadDefaultCfgX121Addr.setDescription('X.121 address of the X.25 Pad')
wfX25PadDefaultCfgDNIC = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadDefaultCfgDNIC.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadDefaultCfgDNIC.setDescription('Data Network Identification Code')
wfX25PadDefaultCfgLenSubAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadDefaultCfgLenSubAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadDefaultCfgLenSubAddress.setDescription('Length of X.121 subaddress ')
wfX25PadDefaultCfgLCNLow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadDefaultCfgLCNLow.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadDefaultCfgLCNLow.setDescription('Lower range for logical channel numbers')
wfX25PadDefaultCfgLCNHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadDefaultCfgLCNHigh.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadDefaultCfgLCNHigh.setDescription('Upper range for logical channel numbers ')
wfX25PadCurrentCfgTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 2), )
if mibBuilder.loadTexts: wfX25PadCurrentCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadCurrentCfgTable.setDescription('Table of X25 PAD Config Objects')
wfX25PadCurrentCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 2, 1), ).setIndexNames((0, "Wellfleet-X25PAD-MIB", "wfX25PadCurrentCfgSlot"), (0, "Wellfleet-X25PAD-MIB", "wfX25PadCurrentCfgConnector"))
if mibBuilder.loadTexts: wfX25PadCurrentCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadCurrentCfgEntry.setDescription('An entry in the X25 Pad Config Table')
wfX25PadCurrentCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadCurrentCfgState.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadCurrentCfgState.setDescription('Current state of X.25 PAD sofware on the I-SDB')
wfX25PadCurrentCfgSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadCurrentCfgSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadCurrentCfgSlot.setDescription('Instance ID Slot, filled in by ISDB mib gate')
wfX25PadCurrentCfgConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadCurrentCfgConnector.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadCurrentCfgConnector.setDescription("Instance ID Connector, filled in by ISDB mib gate. For the ASN this attribute is an encoded value and is equal to 'module'*10 + 'connector'. Where 'module' is defined in attribute 86 and 'connector' is defined in attribute 78 of this table. For non-ASN platforms this attribute is the physical connector number on the slot.")
wfX25PadCurrentCfgCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadCurrentCfgCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadCurrentCfgCircuit.setDescription('Circuit number, filled in by ISDB mib gate')
wfX25PadCurrentCfgX121Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadCurrentCfgX121Addr.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadCurrentCfgX121Addr.setDescription('X.121 address of the X.25 Pad')
wfX25PadCurrentCfgDNIC = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadCurrentCfgDNIC.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadCurrentCfgDNIC.setDescription('Data Network Identification Code')
wfX25PadCurrentCfgLenSubAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadCurrentCfgLenSubAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadCurrentCfgLenSubAddress.setDescription('Length of X.121 subaddress')
wfX25PadCurrentCfgLCNLow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadCurrentCfgLCNLow.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadCurrentCfgLCNLow.setDescription('Lower range for logical channel numbers')
wfX25PadCurrentCfgLCNHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadCurrentCfgLCNHigh.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadCurrentCfgLCNHigh.setDescription('Upper range for logical channel numbers ')
wfX25PadStatTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 3), )
if mibBuilder.loadTexts: wfX25PadStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadStatTable.setDescription('Table of X25 PAD Stat Objects')
wfX25PadStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 3, 1), ).setIndexNames((0, "Wellfleet-X25PAD-MIB", "wfX25PadStatSlot"), (0, "Wellfleet-X25PAD-MIB", "wfX25PadStatConnector"))
if mibBuilder.loadTexts: wfX25PadStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadStatEntry.setDescription('An entry in the X25 Pad Config Table')
wfX25PadStatState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadStatState.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadStatState.setDescription('Current state of X.25 PAD sofware on the I-SDB')
wfX25PadStatSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadStatSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadStatSlot.setDescription('Instance ID Slot, filled in by ISDB mib gate')
wfX25PadStatConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadStatConnector.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadStatConnector.setDescription("Instance ID Connector, filled in by ISDB mib gate. For the ASN this attribute is an encoded value and is equal to 'module'*10 + 'connector'. Where 'module' is defined in attribute 86 and 'connector' is defined in attribute 78 of this table. For non-ASN platforms this attribute is the physical connector number on the slot.")
wfX25PadStatTotalConnCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadStatTotalConnCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadStatTotalConnCount.setDescription('Total number of connections made to the X.25 Pad ')
wfX25PadStatRxRR = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadStatRxRR.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadStatRxRR.setDescription('Number of receiver ready packets received')
wfX25PadStatTxRR = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadStatTxRR.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadStatTxRR.setDescription('Number of receiver ready packets transmitted')
wfX25PadStatRxRNR = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadStatRxRNR.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadStatRxRNR.setDescription('Number of receiver not ready packets received')
wfX25PadStatTxRNR = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadStatTxRNR.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadStatTxRNR.setDescription('Number of receiver not ready packets transmitted')
wfX25PadStatRxRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadStatRxRestart.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadStatRxRestart.setDescription('Number of restart packets received')
wfX25PadStatTxRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadStatTxRestart.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadStatTxRestart.setDescription('Number of restart packets transmitted')
wfX25PadPortDefaultCfgTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4), )
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgTable.setDescription('Table of X25 PAD Port Config Objects')
wfX25PadPortDefaultCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1), ).setIndexNames((0, "Wellfleet-X25PAD-MIB", "wfX25PadPortDefaultCfgSlot"), (0, "Wellfleet-X25PAD-MIB", "wfX25PadPortDefaultCfgConnector"), (0, "Wellfleet-X25PAD-MIB", "wfX25PadPortDefaultCfgNumber"))
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgEntry.setDescription('An entry in the X25 Pad Port Config Table')
wfX25PadPortDefaultCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgDelete.setDescription('Create/Delete parameter')
wfX25PadPortDefaultCfgDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgDisable.setDescription('Enable/Disable parameter')
wfX25PadPortDefaultCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgState.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgState.setDescription('Current state of X.25 PAD sofware on the I-SDB')
wfX25PadPortDefaultCfgSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgSlot.setDescription('Instance ID Slot, filled in by ISDB mib gate')
wfX25PadPortDefaultCfgConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgConnector.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgConnector.setDescription("Instance ID Connector, filled in by ISDB mib gate. For the ASN this attribute is an encoded value and is equal to 'module'*10 + 'connector'. Where 'module' is defined in attribute 86 and 'connector' is defined in attribute 78 of this table. For non-ASN platforms this attribute is the physical connector number on the slot.")
wfX25PadPortDefaultCfgNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgNumber.setDescription('Instance ID Async Port, filled in by ISDB mib gate')
wfX25PadPortDefaultCfgSubAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgSubAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgSubAddress.setDescription('Subaddress portion of an X.121 address that is used by an application and is transparent to the network ')
wfX25PadPortDefaultCfgLenSubAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgLenSubAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgLenSubAddress.setDescription('Size of the Subaddress portion of an X.121 address ')
wfX25PadPortDefaultCfgX3escape = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 126)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3escape.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3escape.setDescription('PAD recall using a character')
wfX25PadPortDefaultCfgX3echo = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3echo.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3echo.setDescription('PAD echo')
wfX25PadPortDefaultCfgX3forward = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 126)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3forward.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3forward.setDescription('Selection of the data forwarding characters')
wfX25PadPortDefaultCfgX3idle = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3idle.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3idle.setDescription('Selection of the idle timer delay')
wfX25PadPortDefaultCfgX3device = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3device.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3device.setDescription('Ancillary device control')
wfX25PadPortDefaultCfgX3signals = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3signals.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3signals.setDescription('Control of PAD service signals')
wfX25PadPortDefaultCfgX3break = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 21)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3break.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3break.setDescription('Selection of operation of the PAD on receipt of the break signal')
wfX25PadPortDefaultCfgX3discard = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3discard.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3discard.setDescription('Discard output')
wfX25PadPortDefaultCfgX3CRpad = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3CRpad.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3CRpad.setDescription('Padding after carriage return')
wfX25PadPortDefaultCfgX3folding = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(80)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3folding.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3folding.setDescription('Line folding')
wfX25PadPortDefaultCfgX3speed = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 18)).clone(14)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3speed.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3speed.setDescription('Binary speed')
wfX25PadPortDefaultCfgX3flow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3flow.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3flow.setDescription('Flow Control of the PAD by the start-stop mode DTE')
wfX25PadPortDefaultCfgX3LFinsert = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3LFinsert.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3LFinsert.setDescription('Linefeed insertion after carriage return')
wfX25PadPortDefaultCfgX3LFpad = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3LFpad.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3LFpad.setDescription('Linefeed padding')
wfX25PadPortDefaultCfgX3Edit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3Edit.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3Edit.setDescription('Editing')
wfX25PadPortDefaultCfgX3Cdelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(127)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3Cdelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3Cdelete.setDescription('Character delete')
wfX25PadPortDefaultCfgX3Ldelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(24)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3Ldelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3Ldelete.setDescription('Line delete')
wfX25PadPortDefaultCfgX3Ldisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(18)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3Ldisplay.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3Ldisplay.setDescription('Line display')
wfX25PadPortDefaultCfgX3Esignals = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 126)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3Esignals.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3Esignals.setDescription('Editing PAD service signals')
wfX25PadPortDefaultCfgX3Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3Mask.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3Mask.setDescription('Echo mask')
wfX25PadPortDefaultCfgX3parity = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3parity.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3parity.setDescription('Parity treatment')
wfX25PadPortDefaultCfgX3page = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3page.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgX3page.setDescription('Page wait')
wfX25PadPortDefaultCfgLenUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgLenUserData.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgLenUserData.setDescription('Length of the user defined data ')
wfX25PadPortDefaultCfgUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 32), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgUserData.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgUserData.setDescription('User defined data field represented in hexadecimal')
wfX25PadPortDefaultCfgLenRawFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgLenRawFacilities.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgLenRawFacilities.setDescription('Length of the user defined facilities')
wfX25PadPortDefaultCfgRawFacilitiesData = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 34), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgRawFacilitiesData.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgRawFacilitiesData.setDescription('User defined facilities filed represented in hexadecimal')
wfX25PadPortDefaultCfgReverseCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 35), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgReverseCharge.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgReverseCharge.setDescription('If subscribed to, authorizes the DCE to transmit to the DTE incoming calls which request the reverse charging facility. In absence of this facility the DCE will not transmit to the DTE incoming calls which request the reverse charging facility. ')
wfX25PadPortDefaultCfgThruClassNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 36), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgThruClassNegotiation.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgThruClassNegotiation.setDescription('This facility, if subscribed to, allows negotiation on a per call basis of the throughput classes. The throughput classes are considered independently for each direction of data transmission. ')
wfX25PadPortDefaultCfgPacketSizeNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 37), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgPacketSizeNegotiation.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgPacketSizeNegotiation.setDescription('This facility, if subscribed to, will cause the DTE to request packet sizes for both directions of data transmission ')
wfX25PadPortDefaultCfgWindowSizeNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 38), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgWindowSizeNegotiation.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgWindowSizeNegotiation.setDescription('This facility, if subscribed to, will cause the DTE to request window sizes for both directions of data transmission ')
wfX25PadPortDefaultCfgIntervalTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgIntervalTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgIntervalTimer.setDescription('Time (where 1 equals 10 milliseconds) that the X.25 PAD will wait before forwarding packets with characters in them ')
wfX25PadPortDefaultCfgFullAddressing = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 4, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgFullAddressing.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortDefaultCfgFullAddressing.setDescription('Determines whether calling addresses should be included or not')
wfX25PadPortCurrentCfgTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5), )
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgTable.setDescription('Table of X25 PAD Port Config Objects')
wfX25PadPortCurrentCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1), ).setIndexNames((0, "Wellfleet-X25PAD-MIB", "wfX25PadPortCurrentCfgSlot"), (0, "Wellfleet-X25PAD-MIB", "wfX25PadPortCurrentCfgConnector"), (0, "Wellfleet-X25PAD-MIB", "wfX25PadPortCurrentCfgNumber"))
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgEntry.setDescription('An entry in the X25 Pad Port Config Table')
wfX25PadPortCurrentCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgState.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgState.setDescription('Current state of X.25 PAD sofware on the I-SDB')
wfX25PadPortCurrentCfgSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgSlot.setDescription('Instance ID Slot, filled in by ISDB mib gate')
wfX25PadPortCurrentCfgConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgConnector.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgConnector.setDescription("Instance ID Connector, filled in by ISDB mib gate. For the ASN this attribute is an encoded value and is equal to 'module'*10 + 'connector'. Where 'module' is defined in attribute 86 and 'connector' is defined in attribute 78 of this table. For non-ASN platforms this attribute is the physical connector number on the slot.")
wfX25PadPortCurrentCfgNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgNumber.setDescription('Instance ID Async Port, filled in by ISDB mib gate')
wfX25PadPortCurrentCfgSubAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgSubAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgSubAddress.setDescription('Subaddress portion of an X.121 address that is used by an application and is transparent to the network ')
wfX25PadPortCurrentCfgLenSubAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgLenSubAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgLenSubAddress.setDescription('Size of the Subaddress portion of an X.121 address ')
wfX25PadPortCurrentCfgX3escape = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 126))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3escape.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3escape.setDescription('PAD recall using a character')
wfX25PadPortCurrentCfgX3echo = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3echo.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3echo.setDescription('PAD echo')
wfX25PadPortCurrentCfgX3forward = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 126))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3forward.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3forward.setDescription('Selection of the data forwarding characters')
wfX25PadPortCurrentCfgX3idle = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3idle.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3idle.setDescription('Selection of the idle timer delay')
wfX25PadPortCurrentCfgX3device = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3device.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3device.setDescription('Ancillary device control')
wfX25PadPortCurrentCfgX3signals = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3signals.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3signals.setDescription('Control of PAD service signals')
wfX25PadPortCurrentCfgX3break = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3break.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3break.setDescription('Selection of operation of the PAD on receipt of the break signal')
wfX25PadPortCurrentCfgX3discard = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3discard.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3discard.setDescription('Discard output')
wfX25PadPortCurrentCfgX3CRpad = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3CRpad.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3CRpad.setDescription('Padding after carriage return')
wfX25PadPortCurrentCfgX3folding = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3folding.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3folding.setDescription('Line folding')
wfX25PadPortCurrentCfgX3speed = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3speed.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3speed.setDescription('Binary speed')
wfX25PadPortCurrentCfgX3flow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3flow.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3flow.setDescription('Flow Control of the PAD by the start-stop mode DTE')
wfX25PadPortCurrentCfgX3LFinsert = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3LFinsert.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3LFinsert.setDescription('Linefeed insertion after carriage return')
wfX25PadPortCurrentCfgX3LFpad = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3LFpad.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3LFpad.setDescription('Linefeed padding')
wfX25PadPortCurrentCfgX3Edit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3Edit.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3Edit.setDescription('Editing')
wfX25PadPortCurrentCfgX3Cdelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3Cdelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3Cdelete.setDescription('Character delete')
wfX25PadPortCurrentCfgX3Ldelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3Ldelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3Ldelete.setDescription('Line delete')
wfX25PadPortCurrentCfgX3Ldisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3Ldisplay.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3Ldisplay.setDescription('Line display')
wfX25PadPortCurrentCfgX3Esignals = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 126))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3Esignals.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3Esignals.setDescription('Editing PAD service signals')
wfX25PadPortCurrentCfgX3Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3Mask.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3Mask.setDescription('Echo mask')
wfX25PadPortCurrentCfgX3parity = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3parity.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3parity.setDescription('Parity treatment')
wfX25PadPortCurrentCfgX3page = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3page.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgX3page.setDescription('Page wait')
wfX25PadPortCurrentCfgLenUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgLenUserData.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgLenUserData.setDescription('Length of the user defined data ')
wfX25PadPortCurrentCfgUserData = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 30), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgUserData.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgUserData.setDescription('User defined data field represented in hexadecimal')
wfX25PadPortCurrentCfgLenRawFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgLenRawFacilities.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgLenRawFacilities.setDescription('Length of the user defined facilities')
wfX25PadPortCurrentCfgRawFacilitiesData = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 32), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgRawFacilitiesData.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgRawFacilitiesData.setDescription('User defined facilities filed represented in hexadecimal')
wfX25PadPortCurrentCfgReverseCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 33), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgReverseCharge.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgReverseCharge.setDescription('If subscribed to, authorizes the DCE to transmit to the DTE incoming calls which request the reverse charging facility. In absence of this facility the DCE will not transmit to the DTE incoming calls which request the reverse charging facility. ')
wfX25PadPortCurrentCfgThruClassNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 34), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgThruClassNegotiation.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgThruClassNegotiation.setDescription('This facility, if subscribed to, allows negotiation on a per call basis of the throughput classes. The throughput classes are considered independently for each direction of data transmission. ')
wfX25PadPortCurrentCfgPacketSizeNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 35), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgPacketSizeNegotiation.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgPacketSizeNegotiation.setDescription('This facility, if subscribed to, will cause the DTE to request packet sizes for both directions of data transmission. ')
wfX25PadPortCurrentCfgWindowSizeNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 36), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgWindowSizeNegotiation.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgWindowSizeNegotiation.setDescription('This facility, if subscribed to, will cause the DTE to request window sizes for both directions of data transmission. ')
wfX25PadPortCurrentCfgIntervalTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgIntervalTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgIntervalTimer.setDescription('Time (where 1 equals 10 milliseconds) that the X.25 PAD will wait before forwarding packets with characters in them ')
wfX25PadPortCurrentCfgFullAddressing = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 5, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgFullAddressing.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortCurrentCfgFullAddressing.setDescription('Determines whether calling addresses should be included or not')
wfX25PadPortStatTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6), )
if mibBuilder.loadTexts: wfX25PadPortStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortStatTable.setDescription('Table of X25 PAD Port Stat Objects')
wfX25PadPortStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1), ).setIndexNames((0, "Wellfleet-X25PAD-MIB", "wfX25PadPortStatSlot"), (0, "Wellfleet-X25PAD-MIB", "wfX25PadPortStatConnector"), (0, "Wellfleet-X25PAD-MIB", "wfX25PadPortStatNumber"))
if mibBuilder.loadTexts: wfX25PadPortStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortStatEntry.setDescription('An entry in the X25 Pad Port Stat Table')
wfX25PadPortStatState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatState.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortStatState.setDescription('Current state of X.25 PAD sofware on the I-SDB')
wfX25PadPortStatSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortStatSlot.setDescription('Instance ID Slot, filled in by ISDB mib gate')
wfX25PadPortStatConnector = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatConnector.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortStatConnector.setDescription("Instance ID Connector, filled in by ISDB mib gate. For the ASN this attribute is an encoded value and is equal to 'module'*10 + 'connector'. Where 'module' is defined in attribute 86 and 'connector' is defined in attribute 78 of this table. For non-ASN platforms this attribute is the physical connector number on the slot.")
wfX25PadPortStatNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortStatNumber.setDescription('Instance ID Async Port, filled in by ISDB mib gate')
wfX25PadPortStatRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatRxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortStatRxOctets.setDescription('Number of octets received on this async port')
wfX25PadPortStatTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatTxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortStatTxOctets.setDescription('Number of octets transmitted on this async port')
wfX25PadPortStatRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatRxPackets.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortStatRxPackets.setDescription('Number of packets received on this async port ')
wfX25PadPortStatTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatTxPackets.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortStatTxPackets.setDescription('Number of packets transmitted on this async port')
wfX25PadPortStatRemoteX121Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatRemoteX121Addr.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortStatRemoteX121Addr.setDescription('Remote X.121 address')
wfX25PadPortStatLCN = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatLCN.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortStatLCN.setDescription("Current connection's logical channel number")
wfX25PadPortStatDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatDuration.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortStatDuration.setDescription('Time in seconds of the call')
wfX25PadPortStatRxRR = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatRxRR.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortStatRxRR.setDescription('Number of receiver ready packets received')
wfX25PadPortStatTxRR = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatTxRR.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortStatTxRR.setDescription('Number of receiver ready packets transmitted')
wfX25PadPortStatRxRNR = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatRxRNR.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortStatRxRNR.setDescription('Number of receiver not ready packets received')
wfX25PadPortStatTxRNR = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatTxRNR.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortStatTxRNR.setDescription('Number of receiver not ready packets transmitted')
wfX25PadPortStatRxClr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatRxClr.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortStatRxClr.setDescription('Number of call clear packets received')
wfX25PadPortStatTxClr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatTxClr.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortStatTxClr.setDescription('Number of call clear packets transmitted')
wfX25PadPortStatRxReset = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatRxReset.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortStatRxReset.setDescription('Number of reset packets received')
wfX25PadPortStatTxReset = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatTxReset.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortStatTxReset.setDescription('Number of reset packets transmitted')
wfX25PadPortStatRxCall = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatRxCall.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortStatRxCall.setDescription('Number of call request packets received')
wfX25PadPortStatTxCall = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatTxCall.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortStatTxCall.setDescription('Number of call request packets transmitted')
wfX25PadPortStatConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatConnections.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortStatConnections.setDescription('Number of connections made')
wfX25PadPortStatDisconnects = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatDisconnects.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortStatDisconnects.setDescription('Number of disconnects made')
wfX25PadPortStatLastCause = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatLastCause.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortStatLastCause.setDescription('Last cause code')
wfX25PadPortStatLastDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 12, 6, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfX25PadPortStatLastDiag.setStatus('mandatory')
if mibBuilder.loadTexts: wfX25PadPortStatLastDiag.setDescription('Last diag code')
mibBuilder.exportSymbols("Wellfleet-X25PAD-MIB", wfX25PadPortDefaultCfgThruClassNegotiation=wfX25PadPortDefaultCfgThruClassNegotiation, wfX25PadPortDefaultCfgX3Mask=wfX25PadPortDefaultCfgX3Mask, wfX25PadPortStatSlot=wfX25PadPortStatSlot, wfX25PadPortDefaultCfgLenRawFacilities=wfX25PadPortDefaultCfgLenRawFacilities, wfX25PadDefaultCfgDNIC=wfX25PadDefaultCfgDNIC, wfX25PadPortStatTxPackets=wfX25PadPortStatTxPackets, wfX25PadPortDefaultCfgSlot=wfX25PadPortDefaultCfgSlot, wfX25PadPortDefaultCfgX3Cdelete=wfX25PadPortDefaultCfgX3Cdelete, wfX25PadPortStatRxPackets=wfX25PadPortStatRxPackets, wfX25PadDefaultCfgConnector=wfX25PadDefaultCfgConnector, wfX25PadStatTxRNR=wfX25PadStatTxRNR, wfX25PadPortCurrentCfgX3Ldisplay=wfX25PadPortCurrentCfgX3Ldisplay, wfX25PadPortCurrentCfgSubAddress=wfX25PadPortCurrentCfgSubAddress, wfX25PadPortCurrentCfgX3page=wfX25PadPortCurrentCfgX3page, wfX25PadPortStatRemoteX121Addr=wfX25PadPortStatRemoteX121Addr, wfX25PadPortCurrentCfgX3speed=wfX25PadPortCurrentCfgX3speed, wfX25PadPortStatTable=wfX25PadPortStatTable, wfX25PadPortCurrentCfgNumber=wfX25PadPortCurrentCfgNumber, wfX25PadDefaultCfgCircuit=wfX25PadDefaultCfgCircuit, wfX25PadPortDefaultCfgReverseCharge=wfX25PadPortDefaultCfgReverseCharge, wfX25PadPortDefaultCfgState=wfX25PadPortDefaultCfgState, wfX25PadPortCurrentCfgState=wfX25PadPortCurrentCfgState, wfX25PadPortCurrentCfgX3Cdelete=wfX25PadPortCurrentCfgX3Cdelete, wfX25PadStatTable=wfX25PadStatTable, wfX25PadDefaultCfgTable=wfX25PadDefaultCfgTable, wfX25PadStatRxRestart=wfX25PadStatRxRestart, wfX25PadPortDefaultCfgX3break=wfX25PadPortDefaultCfgX3break, wfX25PadPortCurrentCfgX3folding=wfX25PadPortCurrentCfgX3folding, wfX25PadPortCurrentCfgRawFacilitiesData=wfX25PadPortCurrentCfgRawFacilitiesData, wfX25PadPortStatRxOctets=wfX25PadPortStatRxOctets, wfX25PadPortStatNumber=wfX25PadPortStatNumber, wfX25PadPortStatRxRNR=wfX25PadPortStatRxRNR, wfX25PadDefaultCfgDelete=wfX25PadDefaultCfgDelete, wfX25PadPortDefaultCfgX3escape=wfX25PadPortDefaultCfgX3escape, wfX25PadCurrentCfgTable=wfX25PadCurrentCfgTable, wfX25PadCurrentCfgConnector=wfX25PadCurrentCfgConnector, wfX25PadStatEntry=wfX25PadStatEntry, wfX25PadPortStatRxCall=wfX25PadPortStatRxCall, wfX25PadDefaultCfgLCNHigh=wfX25PadDefaultCfgLCNHigh, wfX25PadPortCurrentCfgX3LFpad=wfX25PadPortCurrentCfgX3LFpad, wfX25PadDefaultCfgLenSubAddress=wfX25PadDefaultCfgLenSubAddress, wfX25PadPortCurrentCfgSlot=wfX25PadPortCurrentCfgSlot, wfX25PadPortCurrentCfgConnector=wfX25PadPortCurrentCfgConnector, wfX25PadCurrentCfgState=wfX25PadCurrentCfgState, wfX25PadCurrentCfgDNIC=wfX25PadCurrentCfgDNIC, wfX25PadPortDefaultCfgX3idle=wfX25PadPortDefaultCfgX3idle, wfX25PadDefaultCfgX121Addr=wfX25PadDefaultCfgX121Addr, wfX25PadPortDefaultCfgX3echo=wfX25PadPortDefaultCfgX3echo, wfX25PadPortCurrentCfgX3Mask=wfX25PadPortCurrentCfgX3Mask, wfX25PadPortStatConnections=wfX25PadPortStatConnections, wfX25PadPortStatDuration=wfX25PadPortStatDuration, wfX25PadPortDefaultCfgDisable=wfX25PadPortDefaultCfgDisable, wfX25PadPortCurrentCfgX3CRpad=wfX25PadPortCurrentCfgX3CRpad, wfX25PadPortDefaultCfgNumber=wfX25PadPortDefaultCfgNumber, wfX25PadCurrentCfgCircuit=wfX25PadCurrentCfgCircuit, wfX25PadPortDefaultCfgUserData=wfX25PadPortDefaultCfgUserData, wfX25PadPortCurrentCfgX3Ldelete=wfX25PadPortCurrentCfgX3Ldelete, wfX25PadPortStatLastCause=wfX25PadPortStatLastCause, wfX25PadDefaultCfgEntry=wfX25PadDefaultCfgEntry, wfX25PadPortStatTxReset=wfX25PadPortStatTxReset, wfX25PadPortDefaultCfgX3LFinsert=wfX25PadPortDefaultCfgX3LFinsert, wfX25PadStatState=wfX25PadStatState, wfX25PadPortDefaultCfgX3parity=wfX25PadPortDefaultCfgX3parity, wfX25PadPortStatTxRR=wfX25PadPortStatTxRR, wfX25PadPortStatDisconnects=wfX25PadPortStatDisconnects, wfX25PadPortCurrentCfgX3discard=wfX25PadPortCurrentCfgX3discard, wfX25PadPortStatTxRNR=wfX25PadPortStatTxRNR, wfX25PadPortCurrentCfgIntervalTimer=wfX25PadPortCurrentCfgIntervalTimer, wfX25PadPortCurrentCfgX3break=wfX25PadPortCurrentCfgX3break, wfX25PadCurrentCfgEntry=wfX25PadCurrentCfgEntry, wfX25PadPortDefaultCfgLenUserData=wfX25PadPortDefaultCfgLenUserData, wfX25PadPortStatLCN=wfX25PadPortStatLCN, wfX25PadPortStatRxReset=wfX25PadPortStatRxReset, wfX25PadCurrentCfgX121Addr=wfX25PadCurrentCfgX121Addr, wfX25PadStatRxRR=wfX25PadStatRxRR, wfX25PadDefaultCfgState=wfX25PadDefaultCfgState, wfX25PadPortCurrentCfgX3LFinsert=wfX25PadPortCurrentCfgX3LFinsert, wfX25PadDefaultCfgLCNLow=wfX25PadDefaultCfgLCNLow, wfX25PadStatTxRestart=wfX25PadStatTxRestart, wfX25PadPortDefaultCfgX3signals=wfX25PadPortDefaultCfgX3signals, wfX25PadPortDefaultCfgFullAddressing=wfX25PadPortDefaultCfgFullAddressing, wfX25PadPortCurrentCfgFullAddressing=wfX25PadPortCurrentCfgFullAddressing, wfX25PadPortDefaultCfgX3Ldisplay=wfX25PadPortDefaultCfgX3Ldisplay, wfX25PadPortDefaultCfgWindowSizeNegotiation=wfX25PadPortDefaultCfgWindowSizeNegotiation, wfX25PadStatTotalConnCount=wfX25PadStatTotalConnCount, wfX25PadPortCurrentCfgX3forward=wfX25PadPortCurrentCfgX3forward, wfX25PadPortCurrentCfgWindowSizeNegotiation=wfX25PadPortCurrentCfgWindowSizeNegotiation, wfX25PadCurrentCfgLCNLow=wfX25PadCurrentCfgLCNLow, wfX25PadPortDefaultCfgX3Edit=wfX25PadPortDefaultCfgX3Edit, wfX25PadPortStatRxRR=wfX25PadPortStatRxRR, wfX25PadPortCurrentCfgThruClassNegotiation=wfX25PadPortCurrentCfgThruClassNegotiation, wfX25PadDefaultCfgDisable=wfX25PadDefaultCfgDisable, wfX25PadPortDefaultCfgDelete=wfX25PadPortDefaultCfgDelete, wfX25PadPortStatEntry=wfX25PadPortStatEntry, wfX25PadPortCurrentCfgX3idle=wfX25PadPortCurrentCfgX3idle, wfX25PadPortCurrentCfgX3parity=wfX25PadPortCurrentCfgX3parity, wfX25PadPortStatTxOctets=wfX25PadPortStatTxOctets, wfX25PadPortDefaultCfgRawFacilitiesData=wfX25PadPortDefaultCfgRawFacilitiesData, wfX25PadPortDefaultCfgX3forward=wfX25PadPortDefaultCfgX3forward, wfX25PadStatRxRNR=wfX25PadStatRxRNR, wfX25PadPortStatTxCall=wfX25PadPortStatTxCall, wfX25PadStatTxRR=wfX25PadStatTxRR, wfX25PadPortDefaultCfgEntry=wfX25PadPortDefaultCfgEntry, wfX25PadPortCurrentCfgLenUserData=wfX25PadPortCurrentCfgLenUserData, wfX25PadPortCurrentCfgPacketSizeNegotiation=wfX25PadPortCurrentCfgPacketSizeNegotiation, wfX25PadPortDefaultCfgLenSubAddress=wfX25PadPortDefaultCfgLenSubAddress, wfX25PadPortCurrentCfgX3Esignals=wfX25PadPortCurrentCfgX3Esignals, wfX25PadPortDefaultCfgX3page=wfX25PadPortDefaultCfgX3page, wfX25PadPortDefaultCfgTable=wfX25PadPortDefaultCfgTable, wfX25PadPortDefaultCfgConnector=wfX25PadPortDefaultCfgConnector, wfX25PadPortCurrentCfgEntry=wfX25PadPortCurrentCfgEntry, wfX25PadPortDefaultCfgIntervalTimer=wfX25PadPortDefaultCfgIntervalTimer, wfX25PadPortDefaultCfgX3CRpad=wfX25PadPortDefaultCfgX3CRpad, wfX25PadPortCurrentCfgX3flow=wfX25PadPortCurrentCfgX3flow, wfX25PadPortStatConnector=wfX25PadPortStatConnector, wfX25PadStatConnector=wfX25PadStatConnector, wfX25PadPortCurrentCfgX3signals=wfX25PadPortCurrentCfgX3signals, wfX25PadDefaultCfgSlot=wfX25PadDefaultCfgSlot, wfX25PadPortDefaultCfgSubAddress=wfX25PadPortDefaultCfgSubAddress, wfX25PadPortCurrentCfgReverseCharge=wfX25PadPortCurrentCfgReverseCharge, wfX25PadPortDefaultCfgPacketSizeNegotiation=wfX25PadPortDefaultCfgPacketSizeNegotiation, wfX25PadPortCurrentCfgTable=wfX25PadPortCurrentCfgTable, wfX25PadPortStatLastDiag=wfX25PadPortStatLastDiag, wfX25PadPortDefaultCfgX3LFpad=wfX25PadPortDefaultCfgX3LFpad, wfX25PadCurrentCfgLCNHigh=wfX25PadCurrentCfgLCNHigh, wfX25PadPortDefaultCfgX3folding=wfX25PadPortDefaultCfgX3folding, wfX25PadPortCurrentCfgUserData=wfX25PadPortCurrentCfgUserData, wfX25PadPortDefaultCfgX3Esignals=wfX25PadPortDefaultCfgX3Esignals, wfX25PadPortCurrentCfgX3escape=wfX25PadPortCurrentCfgX3escape, wfX25PadPortCurrentCfgX3device=wfX25PadPortCurrentCfgX3device, wfX25PadPortDefaultCfgX3Ldelete=wfX25PadPortDefaultCfgX3Ldelete, wfX25PadPortStatRxClr=wfX25PadPortStatRxClr, wfX25PadCurrentCfgSlot=wfX25PadCurrentCfgSlot, wfX25PadCurrentCfgLenSubAddress=wfX25PadCurrentCfgLenSubAddress, wfX25PadPortCurrentCfgLenRawFacilities=wfX25PadPortCurrentCfgLenRawFacilities, wfX25PadPortDefaultCfgX3device=wfX25PadPortDefaultCfgX3device, wfX25PadPortCurrentCfgX3Edit=wfX25PadPortCurrentCfgX3Edit, wfX25PadPortStatState=wfX25PadPortStatState, wfX25PadPortDefaultCfgX3discard=wfX25PadPortDefaultCfgX3discard, wfX25PadPortCurrentCfgX3echo=wfX25PadPortCurrentCfgX3echo, wfX25PadPortDefaultCfgX3speed=wfX25PadPortDefaultCfgX3speed, wfX25PadPortDefaultCfgX3flow=wfX25PadPortDefaultCfgX3flow, wfX25PadPortCurrentCfgLenSubAddress=wfX25PadPortCurrentCfgLenSubAddress, wfX25PadPortStatTxClr=wfX25PadPortStatTxClr, wfX25PadStatSlot=wfX25PadStatSlot)
