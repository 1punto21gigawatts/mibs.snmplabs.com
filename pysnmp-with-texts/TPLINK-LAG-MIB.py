#
# PySNMP MIB module TPLINK-LAG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TPLINK-LAG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:25:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Integer32, iso, IpAddress, MibIdentifier, Counter64, NotificationType, Gauge32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ObjectIdentity, TimeTicks, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Integer32", "iso", "IpAddress", "MibIdentifier", "Counter64", "NotificationType", "Gauge32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ObjectIdentity", "TimeTicks", "Bits")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
tplinkMgmt, = mibBuilder.importSymbols("TPLINK-MIB", "tplinkMgmt")
tplinkLagMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11863, 6, 9))
tplinkLagMIB.setRevisions(('2012-12-13 09:30',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: tplinkLagMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: tplinkLagMIB.setLastUpdated('201212130930Z')
if mibBuilder.loadTexts: tplinkLagMIB.setOrganization('TPLINK')
if mibBuilder.loadTexts: tplinkLagMIB.setContactInfo('www.tplink.com.cn')
if mibBuilder.loadTexts: tplinkLagMIB.setDescription('Private MIB for system time configuration.')
tplinkLagMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 9, 1))
tplinkLagNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 9, 2))
tplinkLagMIBGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 9, 1, 1))
tplinkLagTable = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 9, 1, 2))
tplinkLagLacpManage = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 9, 1, 3))
tpLagMaxEntryNum = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpLagMaxEntryNum.setStatus('current')
if mibBuilder.loadTexts: tpLagMaxEntryNum.setDescription('This object indicates the max number of entries in the lag configuration table.')
tpLagLoadBalance = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("mac-source", 0), ("mac-dest", 1), ("mac-source-dest", 2), ("ip-source", 3), ("ip-dest", 4), ("ip-source-dest", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpLagLoadBalance.setStatus('current')
if mibBuilder.loadTexts: tpLagLoadBalance.setDescription('This object configures scope of Aggregate Arithmetic, which results in choosing a port to transfer the packets. mac-source-dest: When this option is selected, the Aggregate Arithmetic will apply to the source and destination MAC addresses of the packets. ip-source-dest: When this option is selected, the Aggregate Arithmetic will apply to the source and destination IP addresses of the packets.')
tpLagTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 9, 1, 2, 3), )
if mibBuilder.loadTexts: tpLagTable.setStatus('current')
if mibBuilder.loadTexts: tpLagTable.setDescription('A table that contains informatin about every static lag. LAG (Link Aggregation Group) is to combine a number of ports together to make a single high-bandwidth data path, which can highly extend the bandwidth. The bandwidth of the LAG is the sum of bandwidth of its member port.')
tpLagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 9, 1, 2, 3, 1), ).setIndexNames((0, "TPLINK-LAG-MIB", "tpLagIndex"))
if mibBuilder.loadTexts: tpLagEntry.setStatus('current')
if mibBuilder.loadTexts: tpLagEntry.setDescription('A list of information for every lag.')
tpLagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 9, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpLagIndex.setStatus('current')
if mibBuilder.loadTexts: tpLagIndex.setDescription('This object indicates the index of the lag entry.')
tpLagType = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 9, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("on", 1), ("active", 2), ("passive", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpLagType.setStatus('current')
if mibBuilder.loadTexts: tpLagType.setDescription('This object indicates the type of the lag entry.')
tpLagMember = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 9, 1, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpLagMember.setStatus('current')
if mibBuilder.loadTexts: tpLagMember.setDescription("This object indicates how many ports are included in this lag. The maximum number of ports is eight for 'on' type lag, sixteen for 'active' or 'passive' type lag.")
tpLagRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 9, 1, 2, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpLagRowStatus.setStatus('current')
if mibBuilder.loadTexts: tpLagRowStatus.setDescription('')
tpLacpSystemPriority = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 9, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpLacpSystemPriority.setStatus('current')
if mibBuilder.loadTexts: tpLacpSystemPriority.setDescription('This object indicates the system priority of the lacp.')
tpLacpTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 9, 1, 3, 2), )
if mibBuilder.loadTexts: tpLacpTable.setStatus('current')
if mibBuilder.loadTexts: tpLacpTable.setDescription('A table that contains the lacp information of every port. LACP (Link Aggregation Control Protocol) is defined in IEEE802.3ad and enables the dynamic link aggregation and disaggregation by exchanging LACP packets with its partner. The switch can dynamically group similarly configured ports into a single logical link, which will highly extend the bandwidth and flexibly balance the load.')
tpLacpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 9, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: tpLacpEntry.setStatus('current')
if mibBuilder.loadTexts: tpLacpEntry.setDescription('A list of lacp information for every port.')
tpLacpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 9, 1, 3, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpLacpPort.setStatus('current')
if mibBuilder.loadTexts: tpLacpPort.setDescription('This object indicates the port number.')
tpLacpAdminKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 9, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpLacpAdminKey.setStatus('current')
if mibBuilder.loadTexts: tpLacpAdminKey.setDescription('This object indicates the Admin Key of the port. The member ports in a dynamic aggregation group must have the same Admin Key.')
tpLacpPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 9, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpLacpPortPriority.setStatus('current')
if mibBuilder.loadTexts: tpLacpPortPriority.setDescription('This object indicates the port priority of the port. This value determines the priority of the port to be selected as the dynamic aggregation group member. The port with smaller Port Priority will be considered as the preferred one. If the two port priorities are equal; the port with smaller port number is preferred.')
tpLacpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 9, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("active", 1), ("passive", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpLacpMode.setStatus('current')
if mibBuilder.loadTexts: tpLacpMode.setDescription('This object indicates the lacp mode of the port.')
tpLacpChan = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 9, 1, 3, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpLacpChan.setStatus('current')
if mibBuilder.loadTexts: tpLacpChan.setDescription('This object indicates the lag number of the port.')
mibBuilder.exportSymbols("TPLINK-LAG-MIB", tpLacpMode=tpLacpMode, tpLacpAdminKey=tpLacpAdminKey, tpLagRowStatus=tpLagRowStatus, tpLacpSystemPriority=tpLacpSystemPriority, tplinkLagMIB=tplinkLagMIB, tplinkLagMIBGlobalConfig=tplinkLagMIBGlobalConfig, tplinkLagTable=tplinkLagTable, tpLagType=tpLagType, tplinkLagNotifications=tplinkLagNotifications, tpLagMaxEntryNum=tpLagMaxEntryNum, PYSNMP_MODULE_ID=tplinkLagMIB, tpLagLoadBalance=tpLagLoadBalance, tpLagIndex=tpLagIndex, tplinkLagLacpManage=tplinkLagLacpManage, tpLacpPort=tpLacpPort, tplinkLagMIBObjects=tplinkLagMIBObjects, tpLagMember=tpLagMember, tpLagTable=tpLagTable, tpLacpChan=tpLacpChan, tpLagEntry=tpLagEntry, tpLacpEntry=tpLacpEntry, tpLacpTable=tpLacpTable, tpLacpPortPriority=tpLacpPortPriority)
