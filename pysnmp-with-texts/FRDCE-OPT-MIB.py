#
# PySNMP MIB module FRDCE-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FRDCE-OPT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:16:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, TimeTicks, Integer32, ModuleIdentity, Counter64, IpAddress, mgmt, ObjectIdentity, Bits, NotificationType, Unsigned32, MibIdentifier, Counter32, Gauge32, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "TimeTicks", "Integer32", "ModuleIdentity", "Counter64", "IpAddress", "mgmt", "ObjectIdentity", "Bits", "NotificationType", "Unsigned32", "MibIdentifier", "Counter32", "Gauge32", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1))
cdx6500PCTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1))
cdx6500PCTStationProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1))
cdx6500PSTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1))
cdx6500PSTStationProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3))
cdx6500Controls = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4))
class Counter16(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class DisplayString(OctetString):
    pass

class PhysAddress(OctetString):
    pass

cdx6500PCTFRDCEPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6), )
if mibBuilder.loadTexts: cdx6500PCTFRDCEPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PCTFRDCEPortTable.setDescription('All of the configuration parameters relevant to the Frame Relay DCE Port table.')
cdx6500PCTFRDCEPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1), ).setIndexNames((0, "FRDCE-OPT-MIB", "cdx6500frdcepCfgPortNum"))
if mibBuilder.loadTexts: cdx6500PCTFRDCEPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PCTFRDCEPortEntry.setDescription('A row of SDLC Port configuration parameters.')
cdx6500frdcepCfgPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepCfgPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcepCfgPortNum.setDescription('Port Number.')
cdx6500frdcepConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 50))).clone(namedValues=NamedValues(("simp", 0), ("newvalSimp", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepConnectionType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcepConnectionType.setDescription("Specify the control signal handshake and clocking required for a connection to be made to this port: simp - simple, no control signals required. newvalSimp - same functionality as 'simp', new enumeration added for RFC1155 compatibility.")
cdx6500frdcepClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 50))).clone(namedValues=NamedValues(("int", 0), ("ext", 1), ("extint", 2), ("extlp", 3), ("newvalInt", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcepClockSource.setDescription("int - internal clock source. ext - external clock source. extint - Internal receive and external transmit clock source (DCE only). extlp - external receive and loopback transmit clock source (DTE only). EXTLP must be configured in conjunction with EXTINT. newvalInt - same functionality as 'int', new enumeration added for RFC1155 compatibility.")
cdx6500frdcepClockSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1200, 2048000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepClockSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcepClockSpeed.setDescription('This is the speed of the port in bits per second, when using internal clocking. Note that the maximum port speed is dependent on the type of hardware installed. Consult the users manual for details.')
cdx6500frdcepMaxStations = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepMaxStations.setStatus('deprecated')
if mibBuilder.loadTexts: cdx6500frdcepMaxStations.setDescription('The highest station number to be configured on this FRA port. It is used to limit the configuration of stations.')
cdx6500frdcepCtrlProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 50))).clone(namedValues=NamedValues(("annexD", 0), ("none", 1), ("lmi", 2), ("annexA", 3), ("newvalAnnexD", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepCtrlProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcepCtrlProtocol.setDescription("Whether ANSI T1.617 Annex D or LMI Support is enabled none - None is enabled. annexD - Annex D is enabled. lmi - LMI is enabled. annexA - Annex A is enabled. newvalAnnexD - same functionality as 'annexD', new enumeration added for RFC1155 compatibility.")
cdx6500frdcepT391 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepT391.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcepT391.setDescription('This parameter is the Link Integrity Verification Timer polling period. When operating in bi-directional mode, FRA port sends status enquiry messages to network every T391/nT1 seconds.')
cdx6500frdcepT392 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepT392.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcepT392.setDescription('This parameter is the Polling Cycle Verification Timer priod. The FRA port expects status enquiry messages every T392/nT2 seconds. This parameter must be set to a value greater than N391/nT1.')
cdx6500frdcepN391 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepN391.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcepN391.setDescription('This parameter is the Full Status Polling Cycle count. When operating in bi-directional mode, the FRA port sends Full status enquiry messages to network every N391/nN1 polls.')
cdx6500frdcepN392 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepN392.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcepN392.setDescription('This parameter is the Error Inactivity Threshold. The data link is declared to be up after receiving N392/nN2 consecutive events without error. The data link is declared to be down when any N392/nN2 of the previous N393/nN3 events were received in error. This parameter must be set to a value less than or equal to N393/nN3.')
cdx6500frdcepN393 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepN393.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcepN393.setDescription('This parameter is the Monitored Events Count for measuring N392. The data link is declared to be down when any N392/nN2 of the previous N393/nN3 events were received in error. This parameter must be set to a value greater than or equal to N392/nN2.')
cdx6500frdcepNT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepNT1.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcepNT1.setDescription('This parameter is the Link Integrity Verification Timer polling period. When operating in bi-directional mode, FRA port sends status enquiry messages to network every T391/nT1 seconds.')
cdx6500frdcepNT2 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepNT2.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcepNT2.setDescription('This parameter is the Polling Cycle Verification Timer priod. The FRA port expects status enquiry messages every T392/nT2 seconds. This parameter must be set to a value greater than N391/nT1.')
cdx6500frdcepNN1 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepNN1.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcepNN1.setDescription('This parameter is the Full Status Polling Cycle count. When operating in bi-directional mode, the FRA port sends Full status enquiry messages to network every N391/nN1 polls.')
cdx6500frdcepNN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepNN2.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcepNN2.setDescription('This parameter is the Error Inactivity Threshold. The data link is declared to be up after receiving N392/nN2 consecutive events without error. The data link is declared to be down when any N392/nN2 of the previous N393/nN3 events were received in error. This parameter must be set to a value less than or equal to N393/nN3.')
cdx6500frdcepNN3 = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepNN3.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcepNN3.setDescription('This parameter is the Monitored Events Count for measuring N392. The data link is declared to be down when any N392/nN2 of the previous N393/nN3 events were received in error. This parameter must be set to a value greater than or equal to N392/nN2.')
cdx6500frdcepSubaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepSubaddress.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcepSubaddress.setDescription('Calls addressed to this node and with this subaddress will be routed to this port.')
cdx6500frdcepBiDirAnnexD = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("bi", 0), ("uni", 1), ("newvalBi", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepBiDirAnnexD.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcepBiDirAnnexD.setDescription("Whether ANSI T1.617 Annex D bi-directional procedures are enabled bi - Bi-directional procedures are enabled. uni - Uni-directional procedures are enabled. newvalBi - same functionality as 'bi', new enumeration added for RFC1155 compatibility.")
cdx6500frdcepInvertTXClock = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepInvertTXClock.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcepInvertTXClock.setDescription("This parameter specifies whether the phase of the transmit clock should be inverted. Note: This parameter is primarily for X.21 electrical interfaces. no - Don't invert. yes - Invert.")
cdx6500frdcepControlProtocolOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepControlProtocolOptions.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcepControlProtocolOptions.setDescription('These options control the PVC management protocol none - No option selected async - The port will send/receive asynchronous A-bit if it is performing Network side protocol functionality nbit - The port will send and accept N-bit messages dbit - The port will send and accept D-bit messages This forces ASYNC to be specified (dbit+async)')
cdx6500frdcepDiscardControlOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("debit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepDiscardControlOptions.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcepDiscardControlOptions.setDescription('This parameter controls the discard frame options none - No option selected debit - DE marked frames are discarded before non-DE frames')
cdx6500frdcepElectricalInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v24", 1), ("v35", 2), ("v36", 3), ("x21", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepElectricalInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcepElectricalInterfaceType.setDescription('Specify the Electrical Interface Type: V.24 - V.24 Electrical Interface Type V.35 - V.35 Electrical Interface Type V.36 - V.36 Electrical Interface Type X.21 - X.21 Electrical Interface Type NONE - Electrically disabled')
cdx6500frdcepV24ElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ri", 1), ("tm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepV24ElectricalInterfaceOption.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcepV24ElectricalInterfaceOption.setDescription('Specify the Pin 22 option: RI - V.24 uses Pin 22 for Ring Indicator output signal TM - V.24 uses Pin 22 for Test Mode input signal')
cdx6500frdcepHighSpeedElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 6, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("xover", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepHighSpeedElectricalInterfaceOption.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcepHighSpeedElectricalInterfaceOption.setDescription('Specify the cable type: NONE - V.35/V.36/X.21 DCE with straight through cable XOVER - V.35/V.36/X.21 DCE with crossover adapter cable')
cdx6500PPSTFRDCEPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 6), )
if mibBuilder.loadTexts: cdx6500PPSTFRDCEPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPSTFRDCEPortTable.setDescription('All of the statistics parameters relevant to the Frame Relay DCE Port table.')
cdx6500PPSTFRDCEPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 6, 1), ).setIndexNames((0, "FRDCE-OPT-MIB", "cdx6500frdcepStatsPortNum"))
if mibBuilder.loadTexts: cdx6500PPSTFRDCEPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPSTFRDCEPortEntry.setDescription('A row of Frame Relay DCE Port statistics parameters.')
cdx6500frdcepStatsPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepStatsPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcepStatsPortNum.setDescription('Port Number.')
cdx6500frdcepPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("busyOut", 2), ("up", 3), ("down", 4), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcepPortStatus.setDescription("Port Status indicates whether or not the port is switched on and is ready for operation. This value may be one of : up - Port is up and running. down - Port is down. disabled - Port has been disabled. enabled - port has been enabled, but is not yet Up. busyOut - port has been set to be disabled as soon as last active call is disestablished. No new calls will be established. newvalDisabled - same functionality as 'disabled', new enumeration added for RFC1155 compatibility.")
cdx6500frdcepPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcepPortSpeed.setDescription('This is the speed of the port if clock is internal. If clock is external, this is the detected clock speed. If Port Speed is 0, clock is external, but clocking is not being received from attatched device.')
cdx6500frdcepUtilizationIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepUtilizationIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcepUtilizationIn.setDescription('Pertcentage of Port input bandwidth in use.')
cdx6500frdcepUtilizationOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepUtilizationOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcepUtilizationOut.setDescription('Pertcentage of Port output bandwidth in use.')
cdx6500frdcepCharInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepCharInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcepCharInTotal.setDescription('Number of message received since last node, port, or statistics reset.')
cdx6500frdcepCharOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepCharOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcepCharOutTotal.setDescription('Number of message sent since last node, port, or statistics reset.')
cdx6500frdcepCharsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepCharsInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcepCharsInPerSec.setDescription('Number of characters received per second.')
cdx6500frdcepCharsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepCharsOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcepCharsOutPerSec.setDescription('Number of characters received per second.')
cdx6500frdcepFrameInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepFrameInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcepFrameInTotal.setDescription('Number of frames received since last node, port, or statistics reset.')
cdx6500frdcepFrameOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 6, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepFrameOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcepFrameOutTotal.setDescription('Number of frames sent since last node, port, or statistics reset.')
cdx6500frdcepFramesInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepFramesInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcepFramesInPerSec.setDescription('Average number of frames received per second during the previous minute')
cdx6500frdcepFramesOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepFramesOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcepFramesOutPerSec.setDescription('Average number of frames transmitted per second during the previous minute')
cdx6500frdcepOverrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 6, 1, 14), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepOverrunErrors.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcepOverrunErrors.setDescription('Total number of overrun errors counted by the I/O driver.')
cdx6500frdcepUnderrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 6, 1, 15), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepUnderrunErrors.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcepUnderrunErrors.setDescription('Total number of underrun errors counted by the I/O driver.')
cdx6500frdcepCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 6, 1, 16), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcepCRCErrors.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcepCRCErrors.setDescription('Total number of CRC errors counted by the I/O driver.')
cdx6500SPCTFRDCEStationTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 3), )
if mibBuilder.loadTexts: cdx6500SPCTFRDCEStationTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500SPCTFRDCEStationTable.setDescription('All of the configuration parameters relevant to the Frame Relay DCE Station table.')
cdx6500SPCTFRDCEStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 3, 1), ).setIndexNames((0, "FRDCE-OPT-MIB", "cdx6500frdcesCfgPortNum"), (0, "FRDCE-OPT-MIB", "cdx6500frdcesCfgDLCI"))
if mibBuilder.loadTexts: cdx6500SPCTFRDCEStationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500SPCTFRDCEStationEntry.setDescription('A row of Frame Relay DCE station configuration parameters.')
cdx6500frdcesCfgPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesCfgPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcesCfgPortNum.setDescription('Station number.')
cdx6500frdcesCfgDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1007))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesCfgDLCI.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcesCfgDLCI.setDescription('The Data Link Connection Identifier (dlci) is the unique identifier for the station on the FRA Port. Its valid range is 16 - 1007. It must match the DLCI configured on the attached FRAD.')
cdx6500frdcesAutocallMnem = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesAutocallMnem.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcesAutocallMnem.setDescription('This is the mnemonic name used for auto calling. A blank indicates auto calling is disabled.')
cdx6500frdcesAutocallTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesAutocallTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcesAutocallTimeout.setDescription('This is the time interval in seconds between call attempts when auto calling.')
cdx6500frdcesMaxAutocalls = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesMaxAutocalls.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcesMaxAutocalls.setDescription('This parameter is used to specify the number of times that this FRA station will attempt to call when auto calling is enabled. A value of zero will allow unlimited attempts.')
cdx6500frdcesRemoteConnID = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesRemoteConnID.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcesRemoteConnID.setDescription('This parameter specifies the number of the remote LAN Connection or the number of the remote FRA station that this FRA station will attempt to connect to if configured for autocall.')
cdx6500frdcesPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 50))).clone(namedValues=NamedValues(("low", 0), ("medium", 1), ("high", 2), ("expedite", 3), ("newvalLow", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesPriority.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcesPriority.setDescription("This parameter specifies the Traffic Priority of this FRA station. newvalLow - same functionality as 'low', new enumeration added for RFC1155 compatibility.")
cdx6500frdcesBillingRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesBillingRecords.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcesBillingRecords.setDescription("This controls whether billing (accounting) records will be created for calls on this FRA station. newvalDisabled : same functionality as 'disabled', new enumeration added for RFC1155 compliance.")
cdx6500frdcesStationNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesStationNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcesStationNum.setDescription('The number of the logical link on the line. This is the value of Sxx for routing purposes.')
cdx6500frdcesMaxInboundQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 2500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesMaxInboundQueue.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcesMaxInboundQueue.setDescription("This specifies the maximum number of frames which may be queued in the station's inbound queue. A smaller value may be choosen for applications which experience objectionable delays, if due to excessive growth of the station's inbound queue.")
cdx6500SPSTFRDCEStationTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3), )
if mibBuilder.loadTexts: cdx6500SPSTFRDCEStationTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500SPSTFRDCEStationTable.setDescription('All of the statistics parameters relevant to the Frame Relay DCE Station (DLCI) table.')
cdx6500SPSTFRDCEStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1), ).setIndexNames((0, "FRDCE-OPT-MIB", "cdx6500frdcesStatsPortNum"), (0, "FRDCE-OPT-MIB", "cdx6500frdcesStatsDLCI"))
if mibBuilder.loadTexts: cdx6500SPSTFRDCEStationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500SPSTFRDCEStationEntry.setDescription('A row of Frame Relay DCE station (DLCI) Statistics parameters.')
cdx6500frdcesStatsPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesStatsPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcesStatsPortNum.setDescription('Port Number.')
cdx6500frdcesStatsDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1007))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesStatsDLCI.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcesStatsDLCI.setDescription('The Data Link Connection Identifier (dlci) is the unique identifier for the station on the FRA Port.')
cdx6500frdcesUtilizationIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesUtilizationIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcesUtilizationIn.setDescription('The quantity of user bytes received on the line as a percentage of the maximum number of bytes that could have been received.')
cdx6500frdcesUtilizationOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesUtilizationOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcesUtilizationOut.setDescription('The quantity of user bytes sent on the line as a percentage of the maximum number of bytes that could have been received.')
cdx6500frdcesMaxSVCCount = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesMaxSVCCount.setStatus('deprecated')
if mibBuilder.loadTexts: cdx6500frdcesMaxSVCCount.setDescription('Maximum number of SVCs available in the network.')
cdx6500frdcesCurrentSVCCount = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesCurrentSVCCount.setStatus('deprecated')
if mibBuilder.loadTexts: cdx6500frdcesCurrentSVCCount.setDescription('Number of SVCs currently in use.')
cdx6500frdcesCharInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesCharInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcesCharInTotal.setDescription('Total number of characters received since last node, port, or station boot or statistics reset.')
cdx6500frdcesCharOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesCharOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcesCharOutTotal.setDescription('Total number of characters sent since last node, port, or station boot or statistics reset.')
cdx6500frdcesCharsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesCharsInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcesCharsInPerSec.setDescription('Average number of characters received per second.')
cdx6500frdcesCharsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesCharsOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcesCharsOutPerSec.setDescription('Average number of characters transmitted per second.')
cdx6500frdcesPktInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesPktInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcesPktInTotal.setDescription('Total number of Packets received since last node, port, or station boot or statistics reset.')
cdx6500frdcesPktOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesPktOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcesPktOutTotal.setDescription('Total number of Packets sent since last node, port, or station boot or statistics reset.')
cdx6500frdcesPktsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesPktsInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcesPktsInPerSec.setDescription('Average number of Packets received per second.')
cdx6500frdcesPktsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesPktsOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcesPktsOutPerSec.setDescription('Average number of Packets transmitted per second.')
cdx6500frdcesPacketsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesPacketsQueued.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcesPacketsQueued.setDescription('Current number of packets buffered since since last node, port, or station boot or statistics reset.')
cdx6500frdcesFrameInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesFrameInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcesFrameInTotal.setDescription('Total number of frames received since last node, port, or station boot or statistics reset.')
cdx6500frdcesFrameOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesFrameOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcesFrameOutTotal.setDescription('Total number of frames sent since last node, port, or station boot or statistics reset.')
cdx6500frdcesFramesInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesFramesInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcesFramesInPerSec.setDescription('Average number of frames received per second.')
cdx6500frdcesFramesOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesFramesOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcesFramesOutPerSec.setDescription('Average number of frames transmitted per second.')
cdx6500frdcesInfoFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesInfoFramesIn.setStatus('deprecated')
if mibBuilder.loadTexts: cdx6500frdcesInfoFramesIn.setDescription('Number of data frames received since last node, port, or station boot or statistics reset.')
cdx6500frdcesInfoFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesInfoFramesOut.setStatus('deprecated')
if mibBuilder.loadTexts: cdx6500frdcesInfoFramesOut.setDescription('Number of data frames sent since last node, port, or station boot or statistics reset.')
cdx6500frdcesRNRFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesRNRFramesIn.setStatus('deprecated')
if mibBuilder.loadTexts: cdx6500frdcesRNRFramesIn.setDescription('Number of RNR frames received since last node, port, or station boot or statistics reset.')
cdx6500frdcesRNRFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesRNRFramesOut.setStatus('deprecated')
if mibBuilder.loadTexts: cdx6500frdcesRNRFramesOut.setDescription('Number of RNR frames sent since last node, port, or station boot or statistics reset.')
cdx6500frdcesRRFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesRRFramesIn.setStatus('deprecated')
if mibBuilder.loadTexts: cdx6500frdcesRRFramesIn.setDescription('Number of RR frames received since last node, port, or station boot or statistics reset.')
cdx6500frdcesRRFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesRRFramesOut.setStatus('deprecated')
if mibBuilder.loadTexts: cdx6500frdcesRRFramesOut.setDescription('Number of RR frames sent since last node, port, or station boot or statistics reset.')
cdx6500frdcesREJFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesREJFramesIn.setStatus('deprecated')
if mibBuilder.loadTexts: cdx6500frdcesREJFramesIn.setDescription('Number of REJ frames received since last node, port, or station boot or statistics reset.')
cdx6500frdcesREJFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesREJFramesOut.setStatus('deprecated')
if mibBuilder.loadTexts: cdx6500frdcesREJFramesOut.setDescription('Number of REJ frames sent since last node, port, or station boot or statistics reset.')
cdx6500frdcesDataPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesDataPktsIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcesDataPktsIn.setDescription('Number of data packets received since last node, port, or station boot or statistics reset.')
cdx6500frdcesDataPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500frdcesDataPktsOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcesDataPktsOut.setDescription('Number of data packets sent since last node, port, or station boot or statistics reset.')
cdx6500frdcesResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noReset", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500frdcesResetStats.setStatus('obsolete')
if mibBuilder.loadTexts: cdx6500frdcesResetStats.setDescription('reset : Resets the specified Frame Relay station statistics. noReset : Do not reset the specified Frame Relay station statistics.')
cdx6500frdcesBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("boot", 1), ("noBoot", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500frdcesBoot.setStatus('obsolete')
if mibBuilder.loadTexts: cdx6500frdcesBoot.setDescription('boot : Boots the specified Frame Relay station. noBoot : Do not boot the specified Frame Relay station.')
cdx6500frdcesDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("noDisable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500frdcesDisable.setStatus('obsolete')
if mibBuilder.loadTexts: cdx6500frdcesDisable.setDescription('disable : Disables the specified Frame Relay station. noDisable : Do not disable the specified Frame Relay station.')
cdx6500frdcesEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 3, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("noEnable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500frdcesEnable.setStatus('obsolete')
if mibBuilder.loadTexts: cdx6500frdcesEnable.setDescription('enable : Enable the specified Frame Relay station. noEnable : Do not enable the specified Frame Relay station.')
cdx6500ContFRATable = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 17))
cdx6500frdcepPContTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 17, 1), )
if mibBuilder.loadTexts: cdx6500frdcepPContTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcepPContTable.setDescription('Control parameters for FRA ports.')
cdx6500frdcepPContEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 17, 1, 1), ).setIndexNames((0, "FRDCE-OPT-MIB", "cdx6500frdcepContPortNumber"))
if mibBuilder.loadTexts: cdx6500frdcepPContEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcepPContEntry.setDescription('A row of FRA port control.')
cdx6500frdcepContPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: cdx6500frdcepContPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcepContPortNumber.setDescription('Port number of the FRA port.')
cdx6500frdcepContPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 17, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("boot", 1), ("enable", 2), ("disable", 3), ("resetstats", 4)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500frdcepContPortControl.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcepContPortControl.setDescription('Control operations for the specified FRA port. boot - Boots the FRA port enable - Enables the FRA port disable - Disables the FRA port resetstats - Resets the FRA port statistics.')
cdx6500frdcesSContTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 17, 2), )
if mibBuilder.loadTexts: cdx6500frdcesSContTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcesSContTable.setDescription('Control parameter for Fra stations')
cdx6500frdcesSContEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 17, 2, 1), ).setIndexNames((0, "FRDCE-OPT-MIB", "cdx6500frdcesStationPortNumber"), (0, "FRDCE-OPT-MIB", "cdx6500frdcesStationDLCI"))
if mibBuilder.loadTexts: cdx6500frdcesSContEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcesSContEntry.setDescription('A row of FRA Station control')
cdx6500frdcesStationPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 17, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: cdx6500frdcesStationPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcesStationPortNumber.setDescription('Fra Station Port number')
cdx6500frdcesStationDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 17, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1007)))
if mibBuilder.loadTexts: cdx6500frdcesStationDLCI.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcesStationDLCI.setDescription('Fra Station DLCI number')
cdx6500frdcesStationControl = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 17, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("boot", 1), ("enable", 2), ("disable", 3), ("resetstats", 4)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500frdcesStationControl.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500frdcesStationControl.setDescription('Control operations for the specified FRA station. boot - Boot the FRA station enable - Enables the FRA station disable - Disables the FRA station resetstats - Resets the FRA station statistics.')
mibBuilder.exportSymbols("FRDCE-OPT-MIB", cdx6500frdcesFramesOutPerSec=cdx6500frdcesFramesOutPerSec, cdx6500frdcepCharsOutPerSec=cdx6500frdcepCharsOutPerSec, cdx6500frdcesFrameOutTotal=cdx6500frdcesFrameOutTotal, cdx6500frdcesDataPktsIn=cdx6500frdcesDataPktsIn, cdx6500frdcesCfgDLCI=cdx6500frdcesCfgDLCI, cdx6500frdcepFrameInTotal=cdx6500frdcepFrameInTotal, cdx6500frdcesAutocallMnem=cdx6500frdcesAutocallMnem, cdx6500PCTPortProtocolGroup=cdx6500PCTPortProtocolGroup, cdx6500frdcepFramesOutPerSec=cdx6500frdcepFramesOutPerSec, cdx6500frdcepN393=cdx6500frdcepN393, cdx6500frdcepPContEntry=cdx6500frdcepPContEntry, cdx6500frdcesPktsInPerSec=cdx6500frdcesPktsInPerSec, cdx6500frdcepNN2=cdx6500frdcepNN2, PhysAddress=PhysAddress, cdx6500frdcesRNRFramesOut=cdx6500frdcesRNRFramesOut, cdx6500frdcepOverrunErrors=cdx6500frdcepOverrunErrors, cdx6500frdcesStationControl=cdx6500frdcesStationControl, cdx6500frdcesCharInTotal=cdx6500frdcesCharInTotal, cdx6500frdcesStatsPortNum=cdx6500frdcesStatsPortNum, cdx6500frdcesStationNum=cdx6500frdcesStationNum, cdx6500frdcepN392=cdx6500frdcepN392, cdx6500frdcepCRCErrors=cdx6500frdcepCRCErrors, cdx6500PCTFRDCEPortTable=cdx6500PCTFRDCEPortTable, cdx6500frdcesUtilizationIn=cdx6500frdcesUtilizationIn, cdx6500frdcesCharsOutPerSec=cdx6500frdcesCharsOutPerSec, cdx6500frdcesPktInTotal=cdx6500frdcesPktInTotal, cdx6500frdcepUnderrunErrors=cdx6500frdcepUnderrunErrors, cdx6500frdcepCharInTotal=cdx6500frdcepCharInTotal, cdx6500Configuration=cdx6500Configuration, cdx6500Controls=cdx6500Controls, cdx6500=cdx6500, cdx6500frdcepElectricalInterfaceType=cdx6500frdcepElectricalInterfaceType, cdx6500frdcesMaxAutocalls=cdx6500frdcesMaxAutocalls, Counter16=Counter16, cdx6500frdcepControlProtocolOptions=cdx6500frdcepControlProtocolOptions, cdx6500frdcepV24ElectricalInterfaceOption=cdx6500frdcepV24ElectricalInterfaceOption, cdx6500frdcesPktOutTotal=cdx6500frdcesPktOutTotal, cdx6500frdcepCharOutTotal=cdx6500frdcepCharOutTotal, cdx6500frdcesUtilizationOut=cdx6500frdcesUtilizationOut, cdx6500frdcesRRFramesOut=cdx6500frdcesRRFramesOut, cdx6500SPSTFRDCEStationTable=cdx6500SPSTFRDCEStationTable, cdx6500frdcesFrameInTotal=cdx6500frdcesFrameInTotal, cdx6500frdcepStatsPortNum=cdx6500frdcepStatsPortNum, cdx6500frdcesPriority=cdx6500frdcesPriority, cdx6500frdcepConnectionType=cdx6500frdcepConnectionType, cdx6500frdcesRemoteConnID=cdx6500frdcesRemoteConnID, cdx6500frdcepHighSpeedElectricalInterfaceOption=cdx6500frdcepHighSpeedElectricalInterfaceOption, cdx6500frdcepDiscardControlOptions=cdx6500frdcepDiscardControlOptions, cdx6500CfgProtocolGroup=cdx6500CfgProtocolGroup, cdx6500frdcesMaxInboundQueue=cdx6500frdcesMaxInboundQueue, cdx6500frdcepNT1=cdx6500frdcepNT1, cdx6500SPSTFRDCEStationEntry=cdx6500SPSTFRDCEStationEntry, cdx6500frdcesCharOutTotal=cdx6500frdcesCharOutTotal, cdx6500frdcesPktsOutPerSec=cdx6500frdcesPktsOutPerSec, cdx6500frdcesRNRFramesIn=cdx6500frdcesRNRFramesIn, cdx6500StatProtocolGroup=cdx6500StatProtocolGroup, cdx6500frdcepNT2=cdx6500frdcepNT2, cdx6500frdcesCharsInPerSec=cdx6500frdcesCharsInPerSec, cdx6500frdcepPortSpeed=cdx6500frdcepPortSpeed, cdx6500frdcepPortStatus=cdx6500frdcepPortStatus, cdx6500frdcesBoot=cdx6500frdcesBoot, cdx6500PSTStationProtocolGroup=cdx6500PSTStationProtocolGroup, cdx6500frdcesSContEntry=cdx6500frdcesSContEntry, cdx6500PPSTFRDCEPortTable=cdx6500PPSTFRDCEPortTable, cdx6500frdcesCurrentSVCCount=cdx6500frdcesCurrentSVCCount, cdx6500frdcepNN1=cdx6500frdcepNN1, cdx6500frdcepCfgPortNum=cdx6500frdcepCfgPortNum, cdx6500PSTPortProtocolGroup=cdx6500PSTPortProtocolGroup, cdx6500frdcepClockSpeed=cdx6500frdcepClockSpeed, cdx6500frdcesInfoFramesIn=cdx6500frdcesInfoFramesIn, cdx6500frdcesStationDLCI=cdx6500frdcesStationDLCI, cdx6500frdcesEnable=cdx6500frdcesEnable, cdx6500SPCTFRDCEStationEntry=cdx6500SPCTFRDCEStationEntry, cdx6500frdcesSContTable=cdx6500frdcesSContTable, cdx6500frdcepContPortControl=cdx6500frdcepContPortControl, cdx6500frdcesFramesInPerSec=cdx6500frdcesFramesInPerSec, cdx6500frdcesRRFramesIn=cdx6500frdcesRRFramesIn, cdx6500PCTFRDCEPortEntry=cdx6500PCTFRDCEPortEntry, cdx6500frdcepT392=cdx6500frdcepT392, cdx6500frdcesREJFramesOut=cdx6500frdcesREJFramesOut, cdx6500frdcepMaxStations=cdx6500frdcepMaxStations, cdx6500frdcesStatsDLCI=cdx6500frdcesStatsDLCI, cdx6500frdcesREJFramesIn=cdx6500frdcesREJFramesIn, cdx6500frdcepSubaddress=cdx6500frdcepSubaddress, cdx6500frdcesInfoFramesOut=cdx6500frdcesInfoFramesOut, cdx6500frdcepCharsInPerSec=cdx6500frdcepCharsInPerSec, cdx6500PCTStationProtocolGroup=cdx6500PCTStationProtocolGroup, cdx6500frdcepUtilizationOut=cdx6500frdcepUtilizationOut, cdx6500frdcepPContTable=cdx6500frdcepPContTable, cdx6500Statistics=cdx6500Statistics, cdx6500frdcesBillingRecords=cdx6500frdcesBillingRecords, cdx6500frdcesResetStats=cdx6500frdcesResetStats, cdx6500frdcepNN3=cdx6500frdcepNN3, cdx6500frdcesPacketsQueued=cdx6500frdcesPacketsQueued, cdx6500frdcesAutocallTimeout=cdx6500frdcesAutocallTimeout, cdx6500frdcesMaxSVCCount=cdx6500frdcesMaxSVCCount, cdxProductSpecific=cdxProductSpecific, cdx6500frdcepFramesInPerSec=cdx6500frdcepFramesInPerSec, cdx6500frdcepBiDirAnnexD=cdx6500frdcepBiDirAnnexD, cdx6500ContFRATable=cdx6500ContFRATable, cdx6500frdcepClockSource=cdx6500frdcepClockSource, cdx6500frdcepContPortNumber=cdx6500frdcepContPortNumber, cdx6500frdcesDataPktsOut=cdx6500frdcesDataPktsOut, cdx6500frdcepN391=cdx6500frdcepN391, codex=codex, cdx6500frdcepInvertTXClock=cdx6500frdcepInvertTXClock, cdx6500frdcepT391=cdx6500frdcepT391, cdx6500frdcesDisable=cdx6500frdcesDisable, cdx6500SPCTFRDCEStationTable=cdx6500SPCTFRDCEStationTable, cdx6500frdcepCtrlProtocol=cdx6500frdcepCtrlProtocol, cdx6500frdcepUtilizationIn=cdx6500frdcepUtilizationIn, cdx6500frdcepFrameOutTotal=cdx6500frdcepFrameOutTotal, cdx6500frdcesCfgPortNum=cdx6500frdcesCfgPortNum, DisplayString=DisplayString, cdx6500PPSTFRDCEPortEntry=cdx6500PPSTFRDCEPortEntry, cdx6500frdcesStationPortNumber=cdx6500frdcesStationPortNumber)
