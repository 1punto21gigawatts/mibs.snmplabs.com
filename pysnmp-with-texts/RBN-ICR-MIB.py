#
# PySNMP MIB module RBN-ICR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RBN-ICR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:52:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
InetPortNumber, InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddressType", "InetAddress")
rbnMgmt, = mibBuilder.importSymbols("RBN-SMI", "rbnMgmt")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter32, ObjectIdentity, Integer32, Bits, iso, Counter64, Gauge32, IpAddress, MibIdentifier, TimeTicks, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter32", "ObjectIdentity", "Integer32", "Bits", "iso", "Counter64", "Gauge32", "IpAddress", "MibIdentifier", "TimeTicks", "NotificationType")
RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention")
rbnIcrMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2352, 2, 101))
rbnIcrMIB.setRevisions(('2011-01-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rbnIcrMIB.setRevisionsDescriptions(('Initial Version.',))
if mibBuilder.loadTexts: rbnIcrMIB.setLastUpdated('201101100000Z')
if mibBuilder.loadTexts: rbnIcrMIB.setOrganization('Ericsson AB.')
if mibBuilder.loadTexts: rbnIcrMIB.setContactInfo(' Ericsson, Inc. Postal: 100 Headquarters Drive San Jose, CA 95134-1370 USA Phone: +1 408 750 5000 Fax: +1 408 750 5599')
if mibBuilder.loadTexts: rbnIcrMIB.setDescription('This MIB describes objects used for managing Inter Chassis Resilience(ICR).')
rbnIcrNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 101, 0))
rbnIcrMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 101, 1))
rbnIcrMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 101, 2))
rbnIcrTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 101, 1, 1), )
if mibBuilder.loadTexts: rbnIcrTable.setStatus('current')
if mibBuilder.loadTexts: rbnIcrTable.setDescription('This table consists of ICR management objects.')
rbnIcrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 101, 1, 1, 1), ).setIndexNames((0, "RBN-ICR-MIB", "rbnIcrId"))
if mibBuilder.loadTexts: rbnIcrEntry.setStatus('current')
if mibBuilder.loadTexts: rbnIcrEntry.setDescription('Each entry contains management objects of an ICR node.')
rbnIcrId = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 101, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: rbnIcrId.setStatus('current')
if mibBuilder.loadTexts: rbnIcrId.setDescription('The unique identifier of the ICR node.')
rbnIcrLocalAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 101, 1, 1, 1, 2), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnIcrLocalAddressType.setStatus('current')
if mibBuilder.loadTexts: rbnIcrLocalAddressType.setDescription("This object indicates the type of 'rbnIcrLocalAddress'.")
rbnIcrLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 101, 1, 1, 1, 3), InetAddress().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnIcrLocalAddress.setStatus('current')
if mibBuilder.loadTexts: rbnIcrLocalAddress.setDescription("This object indicates the local address used to send/receive ICR messages. The type of the address is determined by the corresponding 'rbnIcrLocalAddressType'.")
rbnIcrLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 101, 1, 1, 1, 4), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnIcrLocalPort.setStatus('current')
if mibBuilder.loadTexts: rbnIcrLocalPort.setDescription('This object indicates the local port number used to send/receive ICR messages.')
rbnIcrPeerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 101, 1, 1, 1, 5), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnIcrPeerAddressType.setStatus('current')
if mibBuilder.loadTexts: rbnIcrPeerAddressType.setDescription("This object indicates the type of 'rbnIcrPeerAddress'.")
rbnIcrPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 101, 1, 1, 1, 6), InetAddress().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnIcrPeerAddress.setStatus('current')
if mibBuilder.loadTexts: rbnIcrPeerAddress.setDescription("This object indicates the address used by the peer ICR node to send/receive ICR messages. The type of the address is determined by the corresponding 'rbnIcrPeerAddressType'.")
rbnIcrPeerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 101, 1, 1, 1, 7), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnIcrPeerPort.setStatus('current')
if mibBuilder.loadTexts: rbnIcrPeerPort.setDescription('This object indicates the port number used by the peer ICR node to send/receive ICR messages.')
rbnIcrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 101, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("low", 1), ("high", 2))).clone('low')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnIcrPriority.setStatus('current')
if mibBuilder.loadTexts: rbnIcrPriority.setDescription('This object indicates the ICR priority. The priority is used for setting the initial preference level when the prefixes are advertised and is used for tie-break in case both the local ICR node and its peer node are booted up at the same time. The local and the peer ICR nodes MUST configure different priorities')
rbnIcrKeepAliveInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 101, 1, 1, 1, 9), Integer32().clone(1)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnIcrKeepAliveInterval.setStatus('current')
if mibBuilder.loadTexts: rbnIcrKeepAliveInterval.setDescription('This object indicates the interval that the node sends ICR keep alive messages to its peer node.')
rbnIcrHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 101, 1, 1, 1, 10), Integer32().clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnIcrHoldTime.setStatus('current')
if mibBuilder.loadTexts: rbnIcrHoldTime.setDescription('This object indicates the time, after which, if the node has not received a ICR keep alive message from its peer node, it declares the peer loss.')
rbnIcrState = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 101, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("initialize", 1), ("active", 2), ("standby", 3), ("pendingStandby", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnIcrState.setStatus('current')
if mibBuilder.loadTexts: rbnIcrState.setDescription("The current ICR state: - 'initialize', which indicates that the node is in the process of deciding its role(active or standby). - 'active', which indicates that the node operates as ICR active node. - 'standby', which indicates that the node operates as ICR standby node. - 'pendingStandby', which indicates that the node(previously in 'active' state) is waiting for operator intervention to transit to 'standby' state after ICR switchover.")
rbnIcrAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 101, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnIcrAdminStatus.setStatus('current')
if mibBuilder.loadTexts: rbnIcrAdminStatus.setDescription("This object controls ICR node. Setting this object to 'up' will enable the ICR node. The node will transition from 'initialize' state to 'active' or 'standby' state depending on the value of 'rbnIcrPriority'. Setting this object to 'down' will disable the ICR node. The node will transition from its current state to 'initialize'. To modify other 'read-create' objects in the conceptual row, the 'rbnIcrAdminStatus' object must be set to 'down'. The value of the 'rbnIcrRowStatus' object must be 'active' in order for this object to be set to 'up'.")
rbnIcrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 101, 1, 1, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnIcrRowStatus.setStatus('current')
if mibBuilder.loadTexts: rbnIcrRowStatus.setDescription("The object is used to create and delete 'rbnIcrEntry' conceptual rows. Except 'rbnIcrAdminStatus', 'read-create' objects in the conceptual row cannot be modified when rbnIcrRowStatus is set to active(1). To change 'rbnIcrRowStatus' from 'active' to a different value, the 'rbnIcrAdminStatus' object must be 'down'. To create a row in this table, 'rbnIcrRowStatus' could be set to either 'createAndGo(4)' or 'createAndWait(5)'. Until all objects in the conceptual row are appropriately configured, 'rbnIcrRowStatus' will transit to 'notReady(3)'.")
rbnIcrInconsistencyError = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 101, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("peerLoss", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rbnIcrInconsistencyError.setStatus('current')
if mibBuilder.loadTexts: rbnIcrInconsistencyError.setDescription('This object indicates the ICR inconsistency error code.')
rbnIcrNewActive = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 101, 0, 1)).setObjects(("RBN-ICR-MIB", "rbnIcrLocalAddressType"), ("RBN-ICR-MIB", "rbnIcrLocalAddress"), ("RBN-ICR-MIB", "rbnIcrLocalPort"), ("RBN-ICR-MIB", "rbnIcrState"))
if mibBuilder.loadTexts: rbnIcrNewActive.setStatus('current')
if mibBuilder.loadTexts: rbnIcrNewActive.setDescription('This notification is sent when the state of the ICR node has changed to active.')
rbnIcrNewStandby = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 101, 0, 2)).setObjects(("RBN-ICR-MIB", "rbnIcrLocalAddressType"), ("RBN-ICR-MIB", "rbnIcrLocalAddress"), ("RBN-ICR-MIB", "rbnIcrLocalPort"), ("RBN-ICR-MIB", "rbnIcrPeerAddressType"), ("RBN-ICR-MIB", "rbnIcrPeerAddress"), ("RBN-ICR-MIB", "rbnIcrPeerPort"), ("RBN-ICR-MIB", "rbnIcrState"))
if mibBuilder.loadTexts: rbnIcrNewStandby.setStatus('current')
if mibBuilder.loadTexts: rbnIcrNewStandby.setDescription('This notification is sent when the state of the ICR node has changed to standby.')
rbnIcrNewPendingStandby = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 101, 0, 3)).setObjects(("RBN-ICR-MIB", "rbnIcrLocalAddressType"), ("RBN-ICR-MIB", "rbnIcrLocalAddress"), ("RBN-ICR-MIB", "rbnIcrLocalPort"), ("RBN-ICR-MIB", "rbnIcrPeerAddressType"), ("RBN-ICR-MIB", "rbnIcrPeerAddress"), ("RBN-ICR-MIB", "rbnIcrPeerPort"), ("RBN-ICR-MIB", "rbnIcrState"))
if mibBuilder.loadTexts: rbnIcrNewPendingStandby.setStatus('current')
if mibBuilder.loadTexts: rbnIcrNewPendingStandby.setDescription('This notification is sent when the state of the ICR node has changed to pendingStandby.')
rbnIcrInconsistency = NotificationType((1, 3, 6, 1, 4, 1, 2352, 2, 101, 0, 4)).setObjects(("RBN-ICR-MIB", "rbnIcrLocalAddressType"), ("RBN-ICR-MIB", "rbnIcrLocalAddress"), ("RBN-ICR-MIB", "rbnIcrLocalPort"), ("RBN-ICR-MIB", "rbnIcrPeerAddressType"), ("RBN-ICR-MIB", "rbnIcrPeerAddress"), ("RBN-ICR-MIB", "rbnIcrPeerPort"), ("RBN-ICR-MIB", "rbnIcrInconsistencyError"))
if mibBuilder.loadTexts: rbnIcrInconsistency.setStatus('current')
if mibBuilder.loadTexts: rbnIcrInconsistency.setDescription('This notification is sent when an ICR inconsistency error is encountered.')
rbnIcrMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 101, 2, 1))
rbnIcrMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 101, 2, 2))
rbnIcrMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 101, 2, 1, 1)).setObjects(("RBN-ICR-MIB", "rbnIcrGroup"), ("RBN-ICR-MIB", "rbnIcrNotificationObjectGroup"), ("RBN-ICR-MIB", "rbnIcrNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnIcrMIBCompliance = rbnIcrMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: rbnIcrMIBCompliance.setDescription('The compliance statement for ICR MIB implementations.')
rbnIcrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 101, 2, 2, 1)).setObjects(("RBN-ICR-MIB", "rbnIcrLocalAddressType"), ("RBN-ICR-MIB", "rbnIcrLocalAddress"), ("RBN-ICR-MIB", "rbnIcrLocalPort"), ("RBN-ICR-MIB", "rbnIcrPeerAddressType"), ("RBN-ICR-MIB", "rbnIcrPeerAddress"), ("RBN-ICR-MIB", "rbnIcrPeerPort"), ("RBN-ICR-MIB", "rbnIcrPriority"), ("RBN-ICR-MIB", "rbnIcrKeepAliveInterval"), ("RBN-ICR-MIB", "rbnIcrHoldTime"), ("RBN-ICR-MIB", "rbnIcrState"), ("RBN-ICR-MIB", "rbnIcrAdminStatus"), ("RBN-ICR-MIB", "rbnIcrRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnIcrGroup = rbnIcrGroup.setStatus('current')
if mibBuilder.loadTexts: rbnIcrGroup.setDescription('Conformance group for ICR objects.')
rbnIcrNotificationObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 101, 2, 2, 2)).setObjects(("RBN-ICR-MIB", "rbnIcrInconsistencyError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnIcrNotificationObjectGroup = rbnIcrNotificationObjectGroup.setStatus('current')
if mibBuilder.loadTexts: rbnIcrNotificationObjectGroup.setDescription('Conformance group for objects contained in ICR notifications.')
rbnIcrNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2352, 2, 101, 2, 2, 3)).setObjects(("RBN-ICR-MIB", "rbnIcrNewActive"), ("RBN-ICR-MIB", "rbnIcrNewStandby"), ("RBN-ICR-MIB", "rbnIcrNewPendingStandby"), ("RBN-ICR-MIB", "rbnIcrInconsistency"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnIcrNotificationGroup = rbnIcrNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: rbnIcrNotificationGroup.setDescription('Conformance group for ICR notifications.')
mibBuilder.exportSymbols("RBN-ICR-MIB", rbnIcrPeerAddress=rbnIcrPeerAddress, rbnIcrRowStatus=rbnIcrRowStatus, rbnIcrNotificationObjectGroup=rbnIcrNotificationObjectGroup, rbnIcrInconsistencyError=rbnIcrInconsistencyError, rbnIcrTable=rbnIcrTable, rbnIcrLocalPort=rbnIcrLocalPort, rbnIcrInconsistency=rbnIcrInconsistency, rbnIcrPriority=rbnIcrPriority, rbnIcrEntry=rbnIcrEntry, rbnIcrAdminStatus=rbnIcrAdminStatus, rbnIcrNewPendingStandby=rbnIcrNewPendingStandby, rbnIcrPeerPort=rbnIcrPeerPort, rbnIcrMIB=rbnIcrMIB, rbnIcrLocalAddressType=rbnIcrLocalAddressType, rbnIcrMIBGroups=rbnIcrMIBGroups, rbnIcrMIBCompliances=rbnIcrMIBCompliances, rbnIcrGroup=rbnIcrGroup, rbnIcrHoldTime=rbnIcrHoldTime, rbnIcrNewStandby=rbnIcrNewStandby, rbnIcrMIBConformance=rbnIcrMIBConformance, rbnIcrNotificationGroup=rbnIcrNotificationGroup, rbnIcrId=rbnIcrId, rbnIcrMIBObjects=rbnIcrMIBObjects, rbnIcrKeepAliveInterval=rbnIcrKeepAliveInterval, rbnIcrState=rbnIcrState, rbnIcrLocalAddress=rbnIcrLocalAddress, rbnIcrNewActive=rbnIcrNewActive, rbnIcrMIBCompliance=rbnIcrMIBCompliance, PYSNMP_MODULE_ID=rbnIcrMIB, rbnIcrNotifications=rbnIcrNotifications, rbnIcrPeerAddressType=rbnIcrPeerAddressType)
