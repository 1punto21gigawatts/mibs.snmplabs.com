#
# PySNMP MIB module CISCO-DMN-DSG-TUNING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-DMN-DSG-TUNING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:55:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
ciscoDSGUtilities, = mibBuilder.importSymbols("CISCO-DMN-DSG-ROOT-MIB", "ciscoDSGUtilities")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Counter32, ObjectIdentity, Counter64, TimeTicks, NotificationType, Integer32, IpAddress, iso, Bits, Unsigned32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ObjectIdentity", "Counter64", "TimeTicks", "NotificationType", "Integer32", "IpAddress", "iso", "Bits", "Unsigned32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ciscoDSGTuning = ModuleIdentity((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5))
ciscoDSGTuning.setRevisions(('2012-11-19 08:00', '2010-10-13 08:00', '2010-08-03 09:00', '2010-06-17 06:00', '2010-05-03 11:00', '2010-04-12 09:00', '2010-03-22 05:00', '2010-02-12 15:00', '2010-01-18 15:00', '2009-12-20 15:00', '2009-11-22 15:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoDSGTuning.setRevisionsDescriptions(('V01.00.10 2012-11-19 Updated to support MOIP Input.', 'V01.00.09 2010-10-13 Updated for migrating D985X/D9865 MIB to generic logic.', 'V01.00.08 2010-08-03 New items inputStatusAsiLock, inputStatusAsiLinkError and inputStatusAsiPacketSize added in Input Status Table.', 'V01.00.07 2010-06-17 The enum options of satSignalFecRate, satSignalPolar and siInfoRxType and the description of satSignalAFC are updated.', 'V01.00.06 2010-05-03 Packet Error Count item name updated.', 'V01.00.05 2010-04-12 New MIB objects are added.', 'V01.00.04 2010-03-22 The Syntax of Unsigned32 MIB objects whose range is within the range of Integer32, is updated to Integer32.', 'V01.00.03 2010-02-12 The Syntax of read-only objects is updated to DisplayString.', 'V01.00.02 2010-01-18 Changed the enumerated value of object siRcvOptionStatusFreqSel from preset(2) to userCfg(2).', 'V01.00.01 2009-12-20 Added new object, activeTuningValidateOrbPos under activeTuning Group.', 'V01.00.00 2009-11-22 Initial Version.',))
if mibBuilder.loadTexts: ciscoDSGTuning.setLastUpdated('201211190800Z')
if mibBuilder.loadTexts: ciscoDSGTuning.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoDSGTuning.setContactInfo('Cisco Systems, Inc. Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553 NETS E-mail: cs-ipsla@cisco.com')
if mibBuilder.loadTexts: ciscoDSGTuning.setDescription('Cisco DSG Tuning MIB.')
activeTuning = MibIdentifier((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 1))
activeTuningTable = MibIdentifier((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 2))
tuningStatusTable = MibIdentifier((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3))
siRcvTable = MibIdentifier((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4))
activeTuningInput = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 255))).clone(namedValues=NamedValues(("asi", 1), ("rf1", 2), ("rf2", 3), ("rf3", 4), ("rf4", 5), ("ipi", 6), ("none", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeTuningInput.setStatus('current')
if mibBuilder.loadTexts: activeTuningInput.setDescription('Select Input for tuning.')
activeTuningValidateOrbPos = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("writeOnly", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeTuningValidateOrbPos.setStatus('current')
if mibBuilder.loadTexts: activeTuningValidateOrbPos.setDescription('Command used to validate orbital position. Set this object to yes( 2 ) to validate Orbital position.')
activeTuningChScan = MibScalar((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("scan", 1), ("writeOnly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeTuningChScan.setStatus('current')
if mibBuilder.loadTexts: activeTuningChScan.setDescription('Channel Scan command. Setting scan( 1 ) triggers the channel scanning process. ')
activeTunerTable = MibTable((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 2, 1), )
if mibBuilder.loadTexts: activeTunerTable.setStatus('current')
if mibBuilder.loadTexts: activeTunerTable.setDescription('Active Tuner Table.')
activeTunerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 2, 1, 1), ).setIndexNames((0, "CISCO-DMN-DSG-TUNING-MIB", "activeTunerIndex"))
if mibBuilder.loadTexts: activeTunerEntry.setStatus('current')
if mibBuilder.loadTexts: activeTunerEntry.setDescription('Entry for Active Tuner Table.')
activeTunerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: activeTunerIndex.setStatus('current')
if mibBuilder.loadTexts: activeTunerIndex.setDescription('Active Tuner Index.')
activeTunerRFInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("rf1", 2), ("rf2", 3), ("rf3", 4), ("rf4", 5), ("none", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeTunerRFInput.setStatus('current')
if mibBuilder.loadTexts: activeTunerRFInput.setDescription('Active Tuner RF Input.')
activeTunerFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeTunerFreq.setStatus('current')
if mibBuilder.loadTexts: activeTunerFreq.setDescription('The Satellite Downlink frequency in the range of 0 to 15000000 KHz in steps of 1 KHz.')
activeTunerSymbolRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10000, 450000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeTunerSymbolRate.setStatus('current')
if mibBuilder.loadTexts: activeTunerSymbolRate.setDescription('Data rate on the transport stream in millions of symbols per second. Range is from 10000 to 450000 hectoSym/second in steps of 1 hectoSym/second. ( 1 hecto = 10^2 ).')
activeTunerDVBSFEC = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 6, 7, 10))).clone(namedValues=NamedValues(("oneHalf", 1), ("twoThirds", 3), ("threeQuarters", 4), ("fiveSixths", 6), ("sevenEigths", 7), ("auto", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeTunerDVBSFEC.setStatus('current')
if mibBuilder.loadTexts: activeTunerDVBSFEC.setDescription('Forward Error Correction Rate. For DVB-S2 modulation only auto is applicable. For DVB-S modulation all options are applicable.')
activeTunerModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dvbs", 1), ("dvbs2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeTunerModulation.setStatus('current')
if mibBuilder.loadTexts: activeTunerModulation.setDescription('Signal Modulation type.')
activeTunerRollOff = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("f35", 1), ("f25", 2), ("f20", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeTunerRollOff.setStatus('current')
if mibBuilder.loadTexts: activeTunerRollOff.setDescription('Alpha filtering - for DVB-S: 0.20/0.35, for DVB-S2: 0.20/0.25/0.35. Roll off with scaling factor of 1/100.')
activeTunerIQ = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inverted", 1), ("nonInverted", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeTunerIQ.setStatus('current')
if mibBuilder.loadTexts: activeTunerIQ.setDescription('Spectrum Inversion.')
activeInputTable = MibTable((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 2, 2), )
if mibBuilder.loadTexts: activeInputTable.setStatus('current')
if mibBuilder.loadTexts: activeInputTable.setDescription('Active Input Table.')
activeInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 2, 2, 1), ).setIndexNames((0, "CISCO-DMN-DSG-TUNING-MIB", "activeInputRFIndex"))
if mibBuilder.loadTexts: activeInputEntry.setStatus('current')
if mibBuilder.loadTexts: activeInputEntry.setDescription('Entry for Active Input Table.')
activeInputRFIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rf1", 1), ("rf2", 2), ("rf3", 3), ("rf4", 4))))
if mibBuilder.loadTexts: activeInputRFIndex.setStatus('current')
if mibBuilder.loadTexts: activeInputRFIndex.setDescription('Selection of RF Input.')
activeInputLNBType = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("cBand", 1), ("singleKuBand", 2), ("dualKuBand", 3), ("advanced", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeInputLNBType.setStatus('current')
if mibBuilder.loadTexts: activeInputLNBType.setDescription('LNB Type: C-Band/Single Ku/Dual Ku/Advanced. For simplified setup select C-Band or Ku-Band. If there is a need to configure LO, select Advanced.')
activeInputLNBTrim = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeInputLNBTrim.setStatus('current')
if mibBuilder.loadTexts: activeInputLNBTrim.setDescription('Low Noise Block Trim Level 1 when type is not advanced. It has a range of 0 to 15000000 KHz in steps of 1KHz.')
activeInputLNBTrim2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeInputLNBTrim2.setStatus('current')
if mibBuilder.loadTexts: activeInputLNBTrim2.setDescription('Low Noise Block Trim Level 2 when type is not advanced. It has a range of 0 to 15000000 KHz in steps of 1KHz.')
activeInputLocalOscFreq1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeInputLocalOscFreq1.setStatus('current')
if mibBuilder.loadTexts: activeInputLocalOscFreq1.setDescription('RW, only when LNB Type is Advanced. Local Oscillator #1 Frequency when type is advanced. It has a range of 0 to 15000000 KHz in steps of 1KHz.')
activeInputLocalOscFreq2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeInputLocalOscFreq2.setStatus('current')
if mibBuilder.loadTexts: activeInputLocalOscFreq2.setDescription('RW, only when LNB Type is Advanced. Local Oscillator #2 Frequency when type is advanced. It has a range of 0 to 15000000 KHz in steps of 1KHz.')
activeInputCrossOver = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeInputCrossOver.setStatus('current')
if mibBuilder.loadTexts: activeInputCrossOver.setDescription('Crossover Frequency for Local Oscillator. It has a range of 0 to 15000000 KHz in steps of 1KHz.')
activeInputLocalOscControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeInputLocalOscControl.setStatus('current')
if mibBuilder.loadTexts: activeInputLocalOscControl.setDescription('22KHz Local Osillator Control.')
activeInputOrbitalPos = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeInputOrbitalPos.setStatus('current')
if mibBuilder.loadTexts: activeInputOrbitalPos.setDescription('Orbital location Azimuth.The range is from 0 to 3600 in steps of 1. The scaling factor is 1/10th of a degree.')
activeInputEastWestFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("east", 1), ("west", 2), ("notApplicable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeInputEastWestFlag.setStatus('current')
if mibBuilder.loadTexts: activeInputEastWestFlag.setDescription('RF Mapping Location East/West Flag.')
activeInputPolarization = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("horizontal", 1), ("vertical", 2), ("automatic", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeInputPolarization.setStatus('current')
if mibBuilder.loadTexts: activeInputPolarization.setDescription('RF Mapping Polarization.')
activeInputSatName = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 2, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeInputSatName.setStatus('current')
if mibBuilder.loadTexts: activeInputSatName.setDescription('Satellite Name Matching the Orbital Position + E/W Flag. Enter Satellite/Transponder Name to fill in Azimuth and E/W Flag automatically.')
activeInputLastLNBConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeInputLastLNBConfig.setStatus('current')
if mibBuilder.loadTexts: activeInputLastLNBConfig.setDescription('LNB configuration last applied.')
activeInputDiSeqCEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeInputDiSeqCEnable.setStatus('current')
if mibBuilder.loadTexts: activeInputDiSeqCEnable.setDescription('DiSeqC On/Off.')
activeInputDiSeqCSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("off", 1), ("a", 2), ("b", 3), ("c", 4), ("d", 5), ("e", 6), ("f", 7), ("g", 8), ("h", 9), ("i", 10), ("j", 11), ("k", 12), ("l", 13), ("m", 14), ("n", 15), ("o", 16), ("p", 17)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeInputDiSeqCSwitch.setStatus('current')
if mibBuilder.loadTexts: activeInputDiSeqCSwitch.setDescription('DiSeqC switch selection.')
lnbPowerTable = MibTable((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 2, 3), )
if mibBuilder.loadTexts: lnbPowerTable.setStatus('current')
if mibBuilder.loadTexts: lnbPowerTable.setDescription('LNB power Table.')
lnbPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 2, 3, 1), ).setIndexNames((0, "CISCO-DMN-DSG-TUNING-MIB", "lnbPowerIndex"))
if mibBuilder.loadTexts: lnbPowerEntry.setStatus('current')
if mibBuilder.loadTexts: lnbPowerEntry.setDescription('Entry for LNB power Table.')
lnbPowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: lnbPowerIndex.setStatus('current')
if mibBuilder.loadTexts: lnbPowerIndex.setDescription('Low Noise Block Power Index.')
lnbPowerInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("rf1", 2), ("rf2", 3), ("rf3", 4), ("rf4", 5), ("none", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lnbPowerInput.setStatus('current')
if mibBuilder.loadTexts: lnbPowerInput.setDescription('Low Noise Block Power Input.')
lnbPowerControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("thirteenV", 2), ("eighteenH", 3), ("hNIT", 4), ("vNIT", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lnbPowerControl.setStatus('current')
if mibBuilder.loadTexts: lnbPowerControl.setDescription('Active LNB Power setting.13/18V is to control dual polarity LNB. The convention is: Horizontal-18V; Vertical-13V. Valid settings are, Off 13V ( 13V always, ignore polarity in NIT ) 18V ( 18V always, ignore polarity in NIT ) 13V-NIT ( 13V initially, over-ride by polarity in NIT ) 18V-NIT ( 18V initially, over-ride by polarity in NIT ).')
lnbPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notApplicable", 1), ("normal", 2), ("noLoad", 3), ("overTemperature", 4), ("overLoad", 5), ("shortCircuit", 6), ("disabled", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lnbPowerStatus.setStatus('current')
if mibBuilder.loadTexts: lnbPowerStatus.setDescription('Low Noise Block Power Supply Status.')
satSignalTable = MibTable((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 1), )
if mibBuilder.loadTexts: satSignalTable.setStatus('current')
if mibBuilder.loadTexts: satSignalTable.setDescription('Satellite Signal Table.')
satSignalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 1, 1), ).setIndexNames((0, "CISCO-DMN-DSG-TUNING-MIB", "satSignalIndex"))
if mibBuilder.loadTexts: satSignalEntry.setStatus('current')
if mibBuilder.loadTexts: satSignalEntry.setDescription('Entry for Satellite Signal Table.')
satSignalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: satSignalIndex.setStatus('current')
if mibBuilder.loadTexts: satSignalIndex.setDescription('Satellite Signal Table Index.')
satSignalPvBer = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: satSignalPvBer.setStatus('current')
if mibBuilder.loadTexts: satSignalPvBer.setDescription('Status: DVB-S Post-Viterbi Bit Error Rate.')
satSignalQPSKBer = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: satSignalQPSKBer.setStatus('current')
if mibBuilder.loadTexts: satSignalQPSKBer.setDescription('Status: Quadrature phase-shift keying ( QPSK ) Bit error rate.')
satSignalLdpCber = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: satSignalLdpCber.setStatus('current')
if mibBuilder.loadTexts: satSignalLdpCber.setDescription('Status: DVB-S2 Low Density Parity Check Bit Error Rate.')
satSignalCndisp = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: satSignalCndisp.setStatus('current')
if mibBuilder.loadTexts: satSignalCndisp.setDescription('Status: Carrier to Noise Ratio.')
satSignalCnMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: satSignalCnMargin.setStatus('current')
if mibBuilder.loadTexts: satSignalCnMargin.setDescription('Status: Carrier to Noise Ratio Link Margin.')
satSignalLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: satSignalLevel.setStatus('current')
if mibBuilder.loadTexts: satSignalLevel.setDescription('Status: Signal Level.')
satSignalSatDishCnMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: satSignalSatDishCnMargin.setStatus('current')
if mibBuilder.loadTexts: satSignalSatDishCnMargin.setDescription('Status: SatDish CN Margin in dB Displays the margin in dB to a threshold level at which failure occurs. The range is 0dB to 10dB.')
satSignalSatDishSigLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: satSignalSatDishSigLevel.setStatus('current')
if mibBuilder.loadTexts: satSignalSatDishSigLevel.setDescription('Status: SatDish Signal level( in dBm ) plus some kind of graphical signal level meter on the LCD (the range is -75 dBm to +-20 dBm).')
satSignalPerDisp = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: satSignalPerDisp.setStatus('current')
if mibBuilder.loadTexts: satSignalPerDisp.setDescription('Status: DVB-S2 Packet Error Rate.')
satSignalAfc = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: satSignalAfc.setStatus('current')
if mibBuilder.loadTexts: satSignalAfc.setDescription('Status: Tuner Frequency Offset. The range is from -51.0 to 51.0 in steps of 0.1 MHz.')
satSignalUncorErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: satSignalUncorErrCnt.setStatus('current')
if mibBuilder.loadTexts: satSignalUncorErrCnt.setDescription('Status: Uncorrected Error Counter. The range is from 0 to 4294967295.')
satSignalCorErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: satSignalCorErrCnt.setStatus('current')
if mibBuilder.loadTexts: satSignalCorErrCnt.setDescription('Status: DVB-S Reed-Solomon Corrected Error Counter.')
satSignalRfLock = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noLock", 1), ("lock", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: satSignalRfLock.setStatus('current')
if mibBuilder.loadTexts: satSignalRfLock.setDescription('Status: RF Lock Status.')
satSignalDnLkFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: satSignalDnLkFreq.setStatus('current')
if mibBuilder.loadTexts: satSignalDnLkFreq.setDescription('Status: Downlink Frequency in the range of 0.000000 to 15.000000 GHz in steps of 0.000001 GHz.')
satSignalLbandFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: satSignalLbandFreq.setStatus('current')
if mibBuilder.loadTexts: satSignalLbandFreq.setDescription('Status: L-Band Frequency in the range of 950.000 to 2150.000 MHz in steps of 0.001 MHz.')
satSignalSymbolRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: satSignalSymbolRate.setStatus('current')
if mibBuilder.loadTexts: satSignalSymbolRate.setDescription('Status: Symbol Rate in the Range of 1.0000 to 45.0000 MegaSym/second in steps of 0.0001 MegaSym/second.')
satSignalFecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("notApplicable", 1), ("half", 2), ("threeFifth", 3), ("twoThird", 4), ("threeQuater", 5), ("fourFifth", 6), ("fiveSixth", 7), ("sevenEight", 8), ("eightNinth", 9), ("nineTenth", 10), ("auto", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: satSignalFecRate.setStatus('current')
if mibBuilder.loadTexts: satSignalFecRate.setDescription('Status: Forward Error Correction Rate.')
satSignalPolarization = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("horizontal", 1), ("vertical", 2), ("leftCircular", 3), ("rightCircular", 4), ("auto", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: satSignalPolarization.setStatus('current')
if mibBuilder.loadTexts: satSignalPolarization.setDescription('Status: Signal Polarization.')
satSignalModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("qpskDvbs", 2), ("qpskDvbs2", 3), ("eightPskDvbs2", 4), ("sixteenQamDvbs2", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: satSignalModulation.setStatus('current')
if mibBuilder.loadTexts: satSignalModulation.setDescription('Status: Signal Modulation Type.')
satSignalIQ = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inverted", 1), ("nonlnverted", 2), ("auto", 3), ("notApplicable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: satSignalIQ.setStatus('current')
if mibBuilder.loadTexts: satSignalIQ.setDescription('Status: Spectrum Inversion.')
satSignalLnbPsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notApplicable", 1), ("normal", 2), ("noLoad", 3), ("overTemperature", 4), ("overLoad", 5), ("shortCircuit", 6), ("disabled", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: satSignalLnbPsStatus.setStatus('current')
if mibBuilder.loadTexts: satSignalLnbPsStatus.setDescription('Status: Low Noise Block Power Supply Status.')
satSignalPilots = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: satSignalPilots.setStatus('current')
if mibBuilder.loadTexts: satSignalPilots.setDescription('Status: Presence of Pilot Symbols.')
satSignalLoSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("auto", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: satSignalLoSelect.setStatus('current')
if mibBuilder.loadTexts: satSignalLoSelect.setDescription('Status: LO Select.')
satSignalPolar = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("horizontal", 1), ("vertical", 2), ("leftCircular", 3), ("rightCircular", 4), ("auto", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: satSignalPolar.setStatus('current')
if mibBuilder.loadTexts: satSignalPolar.setDescription('Status: Polarization.')
satSignalClearSigErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("writeOnly", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: satSignalClearSigErrCnt.setStatus('current')
if mibBuilder.loadTexts: satSignalClearSigErrCnt.setDescription('Set this variable to yes( 2 ) to clear signal error counter.')
satSignalValidateOrbPosDate = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 1, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: satSignalValidateOrbPosDate.setStatus('current')
if mibBuilder.loadTexts: satSignalValidateOrbPosDate.setDescription('Status: Last Orbital Position Validate Date.')
satSignalValidateOrbPosStat = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 1, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: satSignalValidateOrbPosStat.setStatus('current')
if mibBuilder.loadTexts: satSignalValidateOrbPosStat.setDescription('Status: Orbital Position Validation Status.')
satSignalChScanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("scanning", 2), ("done", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: satSignalChScanStatus.setStatus('current')
if mibBuilder.loadTexts: satSignalChScanStatus.setDescription(' Channel Scanning Status :Off/Scanning/Done.')
satSignalSigLevelRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 1, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: satSignalSigLevelRaw.setStatus('current')
if mibBuilder.loadTexts: satSignalSigLevelRaw.setDescription('Signal Level - RAW Register Value.')
satSignalP1DStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 1, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: satSignalP1DStatus.setStatus('current')
if mibBuilder.loadTexts: satSignalP1DStatus.setDescription('P1 DSTATUS.')
satSignalDvbS2FrameLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("shortFrame", 1), ("longFrame", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: satSignalDvbS2FrameLen.setStatus('current')
if mibBuilder.loadTexts: satSignalDvbS2FrameLen.setDescription('DVB-S2 Frame Length.')
satSignalCnMarginRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 1, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: satSignalCnMarginRaw.setStatus('current')
if mibBuilder.loadTexts: satSignalCnMarginRaw.setDescription('C/N Margin - RAW Register Value.')
satSignalDvbSQpskErrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 1, 1, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: satSignalDvbSQpskErrCount.setStatus('current')
if mibBuilder.loadTexts: satSignalDvbSQpskErrCount.setDescription('DVB-S QPSK Error Count.')
satSignalDvbS2LdpcErrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 1, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: satSignalDvbS2LdpcErrCount.setStatus('current')
if mibBuilder.loadTexts: satSignalDvbS2LdpcErrCount.setDescription('DVB-S2 LPDC Error Count.')
satSignalPvErrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 1, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: satSignalPvErrCount.setStatus('current')
if mibBuilder.loadTexts: satSignalPvErrCount.setDescription('DVB-S PV Error Count.')
satSignalFecSyncStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: satSignalFecSyncStatus.setStatus('current')
if mibBuilder.loadTexts: satSignalFecSyncStatus.setDescription('FEC SYNC Status for DVB-S PV Decoder.')
satSignalPktErrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 1, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: satSignalPktErrCount.setStatus('current')
if mibBuilder.loadTexts: satSignalPktErrCount.setDescription(' DVB-S/DVB-S2 Packet Error Count.')
inputStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 2), )
if mibBuilder.loadTexts: inputStatusTable.setStatus('current')
if mibBuilder.loadTexts: inputStatusTable.setDescription('Input Status Table.')
inputStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 2, 1), ).setIndexNames((0, "CISCO-DMN-DSG-TUNING-MIB", "inputStatusIndex"))
if mibBuilder.loadTexts: inputStatusEntry.setStatus('current')
if mibBuilder.loadTexts: inputStatusEntry.setDescription('Entry for Input Status Table.')
inputStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: inputStatusIndex.setStatus('current')
if mibBuilder.loadTexts: inputStatusIndex.setDescription('Status: Index for inputStatus Table.')
inputStatusCurInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("rf", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputStatusCurInput.setStatus('current')
if mibBuilder.loadTexts: inputStatusCurInput.setDescription('Status: Current Input for D9865 only.')
inputStatusSatLock = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nolock", 1), ("lockminussignal", 2), ("lockplussignal", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputStatusSatLock.setStatus('current')
if mibBuilder.loadTexts: inputStatusSatLock.setDescription('Status: Satellite Lock: No Lock/Lock+Sig/Lock-Sig.')
inputStatusMpgIpLock = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nolock", 1), ("lock", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputStatusMpgIpLock.setStatus('current')
if mibBuilder.loadTexts: inputStatusMpgIpLock.setDescription('Signal Validity.MPEG over IP Lock.')
inputStatusInputRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputStatusInputRate.setStatus('current')
if mibBuilder.loadTexts: inputStatusInputRate.setDescription('Status: Input Rate in Mega bauds per second ( Mbps ). The range is from 0.000000 to 4294.967295 Mbps in steps of 0.000001 Mbps.')
inputStatusNetworkName = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputStatusNetworkName.setStatus('current')
if mibBuilder.loadTexts: inputStatusNetworkName.setDescription('Status: Network Name.')
inputStatusNetworkId = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputStatusNetworkId.setStatus('current')
if mibBuilder.loadTexts: inputStatusNetworkId.setDescription('Status: Network ID.')
inputStatusTransportId = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputStatusTransportId.setStatus('current')
if mibBuilder.loadTexts: inputStatusTransportId.setDescription('Status: Transport ID.')
inputStatusScramblingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("des", 2), ("dvb", 3), ("biss1", 4), ("biss2", 5), ("biss3", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputStatusScramblingMode.setStatus('current')
if mibBuilder.loadTexts: inputStatusScramblingMode.setDescription('Status: Scrambling mode.')
inputStatusTransportError = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("ok", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputStatusTransportError.setStatus('current')
if mibBuilder.loadTexts: inputStatusTransportError.setDescription('Status: Transport Error.')
inputStatusAsiLock = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nolock", 1), ("lock", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputStatusAsiLock.setStatus('current')
if mibBuilder.loadTexts: inputStatusAsiLock.setDescription('Status: ASI Lock.')
inputStatusAsiLinkError = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("ok", 2), ("error", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputStatusAsiLinkError.setStatus('current')
if mibBuilder.loadTexts: inputStatusAsiLinkError.setDescription('Status: ASI Link Error.')
inputStatusAsiPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("oneHundredAndEightyEight", 2), ("twoHundredAndFour", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputStatusAsiPacketSize.setStatus('current')
if mibBuilder.loadTexts: inputStatusAsiPacketSize.setDescription('Status: ASI Packet Size.')
inputStatusLastTuneReason = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputStatusLastTuneReason.setStatus('current')
if mibBuilder.loadTexts: inputStatusLastTuneReason.setDescription('Status: Reason for the last tune.')
inputStatusCurD985xInput = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 2, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputStatusCurD985xInput.setStatus('current')
if mibBuilder.loadTexts: inputStatusCurD985xInput.setDescription('Status: Current Input for all IRD models.')
inputStatusIpiLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 2, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputStatusIpiLinkStatus.setStatus('current')
if mibBuilder.loadTexts: inputStatusIpiLinkStatus.setDescription('Status: IPI Ethernet Link Status.')
inputStatusIpiSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 2, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputStatusIpiSignal.setStatus('current')
if mibBuilder.loadTexts: inputStatusIpiSignal.setDescription('Status: IPI Signal Encapsulation Lock Status.')
inputStatusIpiFecLock = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 2, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputStatusIpiFecLock.setStatus('current')
if mibBuilder.loadTexts: inputStatusIpiFecLock.setDescription('Status: FEC Lock Status.')
inputStatusIpiPcrLock = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 2, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputStatusIpiPcrLock.setStatus('current')
if mibBuilder.loadTexts: inputStatusIpiPcrLock.setDescription('Status: Indicates if PCR is received without errors or not.')
inputStatusIpiDelLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 2, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputStatusIpiDelLatency.setStatus('current')
if mibBuilder.loadTexts: inputStatusIpiDelLatency.setDescription('Status: Dejitter Buffer Latency.')
inputStatusIpiData1SrcIP = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 2, 1, 21), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputStatusIpiData1SrcIP.setStatus('current')
if mibBuilder.loadTexts: inputStatusIpiData1SrcIP.setDescription('Status: DATA1 Source IP Selected.')
inputStatusIpiData2SrcIP = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 2, 1, 22), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputStatusIpiData2SrcIP.setStatus('current')
if mibBuilder.loadTexts: inputStatusIpiData2SrcIP.setDescription('Status: DATA2 Source IP Selected.')
inputStatusIpiData1TsType = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 2, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputStatusIpiData1TsType.setStatus('current')
if mibBuilder.loadTexts: inputStatusIpiData1TsType.setDescription('Status: DATA1 Source Transport Type.')
inputStatusIpiData2TsType = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 3, 2, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputStatusIpiData2TsType.setStatus('current')
if mibBuilder.loadTexts: inputStatusIpiData2TsType.setDescription('Status: DATA2 Source Transport Type.')
siRcvOptionTable = MibTable((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 1), )
if mibBuilder.loadTexts: siRcvOptionTable.setStatus('current')
if mibBuilder.loadTexts: siRcvOptionTable.setDescription('Rcv Option Table.')
siRcvOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 1, 1), ).setIndexNames((0, "CISCO-DMN-DSG-TUNING-MIB", "siRcvOptionInstance"))
if mibBuilder.loadTexts: siRcvOptionEntry.setStatus('current')
if mibBuilder.loadTexts: siRcvOptionEntry.setDescription('Entry for Rcv Option Table.')
siRcvOptionInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: siRcvOptionInstance.setStatus('current')
if mibBuilder.loadTexts: siRcvOptionInstance.setDescription('Instance for siRcvOptionTable.')
siRcvOptionAcqMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("basic", 1), ("auto", 2), ("custom", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siRcvOptionAcqMode.setStatus('current')
if mibBuilder.loadTexts: siRcvOptionAcqMode.setDescription('Custom Tuning Mode: Acquisition Mode.')
siRcvOptionReacq = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("writeOnly", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siRcvOptionReacq.setStatus('current')
if mibBuilder.loadTexts: siRcvOptionReacq.setDescription('Set this variable to yes( 2 ) to reacquire signal.')
siRcvOptionNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siRcvOptionNetID.setStatus('current')
if mibBuilder.loadTexts: siRcvOptionNetID.setDescription('Network ID.')
siRcvOptionInputSel = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("userCfg", 1), ("swMap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siRcvOptionInputSel.setStatus('current')
if mibBuilder.loadTexts: siRcvOptionInputSel.setDescription("UserCfg locks to RF input set by the user and SW Map uses Orbital Position settings to select RF input. It is recommended to set Validate Orbital Position to 'Yes' for SW Mapped option.")
siRcvOptionFreqSel = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nit", 1), ("userCfg", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siRcvOptionFreqSel.setStatus('current')
if mibBuilder.loadTexts: siRcvOptionFreqSel.setDescription('Custom Tuning Mode: Frequency Tuning Mode: NIT/Preset.')
siRcvOptionServListMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rigorous", 1), ("degraded", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siRcvOptionServListMode.setStatus('current')
if mibBuilder.loadTexts: siRcvOptionServListMode.setDescription('Custom Tuning Mode: Service List Mode: Rigorous/Degraded.')
siRcvOptionUseBAT = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: siRcvOptionUseBAT.setStatus('current')
if mibBuilder.loadTexts: siRcvOptionUseBAT.setDescription('Custom Tuning Mode:Bouquet Association Table in Service List.')
siRcvOptionUseNIT = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siRcvOptionUseNIT.setStatus('current')
if mibBuilder.loadTexts: siRcvOptionUseNIT.setDescription('Custom Tuning Mode:Network Information Table in Service List.')
siRcvOptionUseSDT = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siRcvOptionUseSDT.setStatus('current')
if mibBuilder.loadTexts: siRcvOptionUseSDT.setDescription('Custom Tuning Mode:Service Description Table in Service List.')
siRcvOptionUsePAT = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siRcvOptionUsePAT.setStatus('current')
if mibBuilder.loadTexts: siRcvOptionUsePAT.setDescription('Custom Tuning Mode:Program Association Table in Service List.')
siRcvOptionStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 2), )
if mibBuilder.loadTexts: siRcvOptionStatusTable.setStatus('current')
if mibBuilder.loadTexts: siRcvOptionStatusTable.setDescription('Rcv Option Status Table.')
siRcvOptionStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 2, 1), ).setIndexNames((0, "CISCO-DMN-DSG-TUNING-MIB", "siRcvOptionStatusInstance"))
if mibBuilder.loadTexts: siRcvOptionStatusEntry.setStatus('current')
if mibBuilder.loadTexts: siRcvOptionStatusEntry.setDescription('Entry for Rcv Option Status Table.')
siRcvOptionStatusInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: siRcvOptionStatusInstance.setStatus('current')
if mibBuilder.loadTexts: siRcvOptionStatusInstance.setDescription('Instance of siRcv Option Status Table.')
siRcvOptionLastChanReas = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("nit", 1), ("uplinkForceRetune", 2), ("userEntry", 3), ("preset", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: siRcvOptionLastChanReas.setStatus('current')
if mibBuilder.loadTexts: siRcvOptionLastChanReas.setDescription('Source of the last tuning.')
siRcvOptionLastActivated = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: siRcvOptionLastActivated.setStatus('current')
if mibBuilder.loadTexts: siRcvOptionLastActivated.setDescription('Last Preset Activated number.The range is from 0 to 64.')
siRcvOptionStatusFreqSel = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nit", 1), ("userCfg", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: siRcvOptionStatusFreqSel.setStatus('current')
if mibBuilder.loadTexts: siRcvOptionStatusFreqSel.setDescription('Status of Frequency tuning mode.')
siRcvOptionStatusServListMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rigorous", 1), ("degraded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: siRcvOptionStatusServListMode.setStatus('current')
if mibBuilder.loadTexts: siRcvOptionStatusServListMode.setDescription('Status of Service list mode.')
siRcvOptionStatusUseBAT = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: siRcvOptionStatusUseBAT.setStatus('current')
if mibBuilder.loadTexts: siRcvOptionStatusUseBAT.setDescription('Status of Bouquet Association Table in Service List.')
siRcvOptionStatusUseNIT = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: siRcvOptionStatusUseNIT.setStatus('current')
if mibBuilder.loadTexts: siRcvOptionStatusUseNIT.setDescription('Status of Network Information Table in Service List.')
siRcvOptionStatusUseSDT = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: siRcvOptionStatusUseSDT.setStatus('current')
if mibBuilder.loadTexts: siRcvOptionStatusUseSDT.setDescription('Status of Service Description Table in Service List.')
siRcvOptionStatusUsePAT = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: siRcvOptionStatusUsePAT.setStatus('current')
if mibBuilder.loadTexts: siRcvOptionStatusUsePAT.setDescription('Status of Program Association Table in Service List.')
siInfoRxTable = MibTable((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 3), )
if mibBuilder.loadTexts: siInfoRxTable.setStatus('current')
if mibBuilder.loadTexts: siInfoRxTable.setDescription('Service information Receive table.')
siInfoRxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 3, 1), ).setIndexNames((0, "CISCO-DMN-DSG-TUNING-MIB", "siInfoRxInstance"), (0, "CISCO-DMN-DSG-TUNING-MIB", "siInfoRxIdx"))
if mibBuilder.loadTexts: siInfoRxEntry.setStatus('current')
if mibBuilder.loadTexts: siInfoRxEntry.setDescription('Entry for Service Information Received.')
siInfoRxInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: siInfoRxInstance.setStatus('current')
if mibBuilder.loadTexts: siInfoRxInstance.setDescription('Instance of SI Info Receive table.')
siInfoRxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: siInfoRxIdx.setStatus('current')
if mibBuilder.loadTexts: siInfoRxIdx.setDescription('Service Information Receive Table Index.')
siInfoRxType = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32))).clone(namedValues=NamedValues(("pat", 1), ("cat", 2), ("pmt", 3), ("tsdt", 4), ("nit", 5), ("nitother", 6), ("sdt", 7), ("sdtother", 8), ("bat", 9), ("aeitpf", 10), ("oeitpf", 11), ("aeitES0", 12), ("aeitES1", 13), ("oeitES", 14), ("tdt", 15), ("rst", 16), ("st", 17), ("tot", 18), ("dit", 19), ("sit", 20), ("ecmodd", 21), ("ecmeven", 22), ("emm", 23), ("mpe", 24), ("dpi", 25), ("drt", 26), ("cdt", 27), ("mct", 28), ("mat", 29), ("mit", 30), ("ect", 31), ("invalidtableid", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: siInfoRxType.setStatus('current')
if mibBuilder.loadTexts: siInfoRxType.setDescription('Service Information Receive Table Type.')
siInfoRxIDExt = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: siInfoRxIDExt.setStatus('current')
if mibBuilder.loadTexts: siInfoRxIDExt.setDescription('Service Information Receive Table ID Extension. The range is from 0 to 4294967295.')
siInfoRxUid = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: siInfoRxUid.setStatus('current')
if mibBuilder.loadTexts: siInfoRxUid.setDescription('Service Information Receive Unique ID. The range is from 1 to 32.')
siInfoRxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("partial", 2), ("full", 3), ("update", 4), ("timeout", 5), ("lost", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: siInfoRxStatus.setStatus('current')
if mibBuilder.loadTexts: siInfoRxStatus.setDescription('Service Information Receive Status.')
siInfoRxVer = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: siInfoRxVer.setStatus('current')
if mibBuilder.loadTexts: siInfoRxVer.setDescription('Service Information Version. The range is from 0 to 4294967295.')
siInfoRxPID = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: siInfoRxPID.setStatus('current')
if mibBuilder.loadTexts: siInfoRxPID.setDescription('Service Information Program ID. The range is from 0 to 8192.')
siInfoRxSections = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: siInfoRxSections.setStatus('current')
if mibBuilder.loadTexts: siInfoRxSections.setDescription('Service Information Number of Sections. The range is from 0 to 4294967295.')
siInfoTsTable = MibTable((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 4), )
if mibBuilder.loadTexts: siInfoTsTable.setStatus('current')
if mibBuilder.loadTexts: siInfoTsTable.setDescription('Transport Stream table.')
siInfoTsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 4, 1), ).setIndexNames((0, "CISCO-DMN-DSG-TUNING-MIB", "siInfoTsInstance"), (0, "CISCO-DMN-DSG-TUNING-MIB", "siInfoTsIdx"))
if mibBuilder.loadTexts: siInfoTsEntry.setStatus('current')
if mibBuilder.loadTexts: siInfoTsEntry.setDescription('Entry for Transport stream table.')
siInfoTsInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: siInfoTsInstance.setStatus('current')
if mibBuilder.loadTexts: siInfoTsInstance.setDescription(' Transport Stream Table Instance.')
siInfoTsIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: siInfoTsIdx.setStatus('current')
if mibBuilder.loadTexts: siInfoTsIdx.setDescription(' Service Information Transport Stream Index.')
siInfoTsId = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: siInfoTsId.setStatus('current')
if mibBuilder.loadTexts: siInfoTsId.setDescription('Frequency Plan: Service Information Transport Stream ID. The range is from 0 to 4294967295.')
siInfoTsFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: siInfoTsFreq.setStatus('current')
if mibBuilder.loadTexts: siInfoTsFreq.setDescription('Frequency Plan: Service Information Frequency The range is from 0.000000 to 15.000000 GHz in steps of 0.000001 GHz.')
siInfoTsSymRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: siInfoTsSymRate.setStatus('current')
if mibBuilder.loadTexts: siInfoTsSymRate.setDescription('Frequency Plan: Service Information Symbol Rate. The range is from 1.0000 to 45.0000 Megasym/second in steps of 0.0001 Megasym.')
siInfoTsOrbPosn = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: siInfoTsOrbPosn.setStatus('current')
if mibBuilder.loadTexts: siInfoTsOrbPosn.setDescription('Frequency Plan: Service Information Orbital Position. The range is from 0.0 to 360.0 .')
siInfoTsPolar = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("horizontal", 1), ("vertical", 2), ("leftCircular", 3), ("rightCircular", 4), ("auto", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: siInfoTsPolar.setStatus('current')
if mibBuilder.loadTexts: siInfoTsPolar.setDescription('Frequency Plan: Service Information Polarization.')
siInfoTsFEC = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("notApplicable", 1), ("half", 2), ("threeFifth", 3), ("twoThird", 4), ("threeQuarter", 5), ("fourFifth", 6), ("fiveSixth", 7), ("sevenEighth", 8), ("eightNinth", 9), ("nineTenth", 10), ("auto", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: siInfoTsFEC.setStatus('current')
if mibBuilder.loadTexts: siInfoTsFEC.setDescription('Frequency Plan: Service Information Forward Error Correction Rate.')
siInfoTsModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notapplicable", 1), ("qpskDvbS", 2), ("qpskDvbS2", 3), ("eightPskDvbS2", 4), ("sixteenQamDvbsS2", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: siInfoTsModulation.setStatus('current')
if mibBuilder.loadTexts: siInfoTsModulation.setDescription('Frequency Plan: Service Information Modulation.')
siInfoTsOrgNetID = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 4, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: siInfoTsOrgNetID.setStatus('current')
if mibBuilder.loadTexts: siInfoTsOrgNetID.setDescription('Frequency Plan: Service Information Original Network ID. The range is from 0 to 4294967295.')
siInfoTsEastWestFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("east", 1), ("west", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: siInfoTsEastWestFlag.setStatus('current')
if mibBuilder.loadTexts: siInfoTsEastWestFlag.setDescription('Frequency Plan: Service Information East West flag.')
siInfoVCInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 5), )
if mibBuilder.loadTexts: siInfoVCInfoTable.setStatus('current')
if mibBuilder.loadTexts: siInfoVCInfoTable.setDescription('VC table.')
siInfoVCInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 5, 1), ).setIndexNames((0, "CISCO-DMN-DSG-TUNING-MIB", "siInfoVCInfoInstance"), (0, "CISCO-DMN-DSG-TUNING-MIB", "siInfoVCInfoIdx"))
if mibBuilder.loadTexts: siInfoVCInfoEntry.setStatus('current')
if mibBuilder.loadTexts: siInfoVCInfoEntry.setDescription('Entry for VC information.')
siInfoVCInfoInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: siInfoVCInfoInstance.setStatus('current')
if mibBuilder.loadTexts: siInfoVCInfoInstance.setDescription('Virtual Channel Info table Instance.')
siInfoVCInfoIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 262144)))
if mibBuilder.loadTexts: siInfoVCInfoIdx.setStatus('current')
if mibBuilder.loadTexts: siInfoVCInfoIdx.setDescription('Virtual Channel Info table Index.')
siInfoVCInfoId = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: siInfoVCInfoId.setStatus('current')
if mibBuilder.loadTexts: siInfoVCInfoId.setDescription('Service Information VC Service ID. The range is from 0 to 4294967295.')
siInfoVCInfoTxID = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: siInfoVCInfoTxID.setStatus('current')
if mibBuilder.loadTexts: siInfoVCInfoTxID.setDescription('Service Information VC Transport Stream ID. The range is from 0 to 4294967295.')
siInfoVCInfoProgName = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: siInfoVCInfoProgName.setStatus('current')
if mibBuilder.loadTexts: siInfoVCInfoProgName.setDescription('Service Information VC Programme Name.')
siInfoVCInfoPMTPID = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: siInfoVCInfoPMTPID.setStatus('current')
if mibBuilder.loadTexts: siInfoVCInfoPMTPID.setDescription('Service Information VC Program Map Table Program ID.')
siInfoVCInfoCHType = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tv", 1), ("radio", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: siInfoVCInfoCHType.setStatus('current')
if mibBuilder.loadTexts: siInfoVCInfoCHType.setDescription('Service Type:TV service/ Radio service.')
siInfoVCInfoECMPID = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 5, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: siInfoVCInfoECMPID.setStatus('current')
if mibBuilder.loadTexts: siInfoVCInfoECMPID.setDescription('Service Information VC Entitlement Control Message Program ID.')
siInfoVCInfoAuthorized = MibTableColumn((1, 3, 6, 1, 4, 1, 1429, 2, 2, 5, 5, 4, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: siInfoVCInfoAuthorized.setStatus('current')
if mibBuilder.loadTexts: siInfoVCInfoAuthorized.setDescription('Service List: Channel Authorized: Yes/No.')
mibBuilder.exportSymbols("CISCO-DMN-DSG-TUNING-MIB", satSignalLbandFreq=satSignalLbandFreq, inputStatusCurInput=inputStatusCurInput, inputStatusSatLock=inputStatusSatLock, siRcvOptionReacq=siRcvOptionReacq, satSignalPvErrCount=satSignalPvErrCount, siInfoRxIDExt=siInfoRxIDExt, activeInputLocalOscFreq2=activeInputLocalOscFreq2, activeInputPolarization=activeInputPolarization, satSignalClearSigErrCnt=satSignalClearSigErrCnt, activeInputEntry=activeInputEntry, siRcvOptionLastChanReas=siRcvOptionLastChanReas, siInfoVCInfoTable=siInfoVCInfoTable, siInfoVCInfoPMTPID=siInfoVCInfoPMTPID, satSignalSatDishSigLevel=satSignalSatDishSigLevel, siRcvOptionTable=siRcvOptionTable, siRcvOptionInputSel=siRcvOptionInputSel, satSignalDvbS2LdpcErrCount=satSignalDvbS2LdpcErrCount, siInfoRxInstance=siInfoRxInstance, inputStatusMpgIpLock=inputStatusMpgIpLock, inputStatusIpiLinkStatus=inputStatusIpiLinkStatus, inputStatusNetworkId=inputStatusNetworkId, siInfoRxIdx=siInfoRxIdx, satSignalPolar=satSignalPolar, siRcvOptionStatusServListMode=siRcvOptionStatusServListMode, satSignalPolarization=satSignalPolarization, siRcvOptionServListMode=siRcvOptionServListMode, activeInputTable=activeInputTable, activeTunerRFInput=activeTunerRFInput, satSignalValidateOrbPosStat=satSignalValidateOrbPosStat, satSignalSigLevelRaw=satSignalSigLevelRaw, siInfoRxUid=siInfoRxUid, siInfoTsFreq=siInfoTsFreq, activeInputDiSeqCEnable=activeInputDiSeqCEnable, satSignalCorErrCnt=satSignalCorErrCnt, siRcvOptionStatusInstance=siRcvOptionStatusInstance, lnbPowerTable=lnbPowerTable, inputStatusIpiDelLatency=inputStatusIpiDelLatency, siInfoTsIdx=siInfoTsIdx, satSignalQPSKBer=satSignalQPSKBer, activeInputOrbitalPos=activeInputOrbitalPos, inputStatusEntry=inputStatusEntry, siInfoTsEntry=siInfoTsEntry, siInfoVCInfoEntry=siInfoVCInfoEntry, siInfoTsInstance=siInfoTsInstance, activeTunerFreq=activeTunerFreq, satSignalAfc=satSignalAfc, activeTuningInput=activeTuningInput, activeTunerModulation=activeTunerModulation, activeInputLNBTrim2=activeInputLNBTrim2, satSignalChScanStatus=satSignalChScanStatus, satSignalTable=satSignalTable, inputStatusIpiData2TsType=inputStatusIpiData2TsType, siRcvOptionFreqSel=siRcvOptionFreqSel, siRcvOptionStatusTable=siRcvOptionStatusTable, siRcvOptionStatusFreqSel=siRcvOptionStatusFreqSel, lnbPowerStatus=lnbPowerStatus, siRcvOptionStatusEntry=siRcvOptionStatusEntry, siInfoRxSections=siInfoRxSections, inputStatusTransportError=inputStatusTransportError, satSignalLoSelect=satSignalLoSelect, activeTunerEntry=activeTunerEntry, inputStatusScramblingMode=inputStatusScramblingMode, siInfoTsOrbPosn=siInfoTsOrbPosn, inputStatusIndex=inputStatusIndex, activeTuningTable=activeTuningTable, activeInputLNBType=activeInputLNBType, satSignalLnbPsStatus=satSignalLnbPsStatus, siRcvOptionAcqMode=siRcvOptionAcqMode, satSignalLdpCber=satSignalLdpCber, satSignalPktErrCount=satSignalPktErrCount, activeTunerSymbolRate=activeTunerSymbolRate, inputStatusTable=inputStatusTable, satSignalDnLkFreq=satSignalDnLkFreq, inputStatusAsiLock=inputStatusAsiLock, lnbPowerControl=lnbPowerControl, siInfoRxVer=siInfoRxVer, ciscoDSGTuning=ciscoDSGTuning, inputStatusIpiData2SrcIP=inputStatusIpiData2SrcIP, satSignalPerDisp=satSignalPerDisp, lnbPowerInput=lnbPowerInput, inputStatusNetworkName=inputStatusNetworkName, siInfoTsOrgNetID=siInfoTsOrgNetID, inputStatusIpiData1TsType=inputStatusIpiData1TsType, siRcvOptionUseNIT=siRcvOptionUseNIT, activeInputLocalOscControl=activeInputLocalOscControl, siInfoRxEntry=siInfoRxEntry, activeTuningValidateOrbPos=activeTuningValidateOrbPos, activeTunerTable=activeTunerTable, satSignalPvBer=satSignalPvBer, satSignalP1DStatus=satSignalP1DStatus, siRcvOptionNetID=siRcvOptionNetID, satSignalSymbolRate=satSignalSymbolRate, activeTunerIQ=activeTunerIQ, satSignalLevel=satSignalLevel, siInfoVCInfoIdx=siInfoVCInfoIdx, siInfoRxPID=siInfoRxPID, satSignalSatDishCnMargin=satSignalSatDishCnMargin, activeInputSatName=activeInputSatName, inputStatusInputRate=inputStatusInputRate, siRcvOptionUsePAT=siRcvOptionUsePAT, activeInputEastWestFlag=activeInputEastWestFlag, siInfoRxType=siInfoRxType, siRcvOptionUseBAT=siRcvOptionUseBAT, inputStatusCurD985xInput=inputStatusCurD985xInput, siInfoTsModulation=siInfoTsModulation, activeTuningChScan=activeTuningChScan, siInfoTsFEC=siInfoTsFEC, satSignalIQ=satSignalIQ, satSignalIndex=satSignalIndex, siInfoVCInfoCHType=siInfoVCInfoCHType, satSignalValidateOrbPosDate=satSignalValidateOrbPosDate, siRcvOptionInstance=siRcvOptionInstance, siInfoVCInfoId=siInfoVCInfoId, activeInputCrossOver=activeInputCrossOver, satSignalDvbS2FrameLen=satSignalDvbS2FrameLen, activeTuning=activeTuning, siRcvOptionUseSDT=siRcvOptionUseSDT, satSignalPilots=satSignalPilots, satSignalRfLock=satSignalRfLock, activeInputLNBTrim=activeInputLNBTrim, siRcvOptionStatusUseNIT=siRcvOptionStatusUseNIT, satSignalDvbSQpskErrCount=satSignalDvbSQpskErrCount, satSignalFecSyncStatus=satSignalFecSyncStatus, satSignalFecRate=satSignalFecRate, siInfoTsEastWestFlag=siInfoTsEastWestFlag, siInfoVCInfoECMPID=siInfoVCInfoECMPID, siRcvOptionStatusUsePAT=siRcvOptionStatusUsePAT, inputStatusIpiFecLock=inputStatusIpiFecLock, satSignalCnMarginRaw=satSignalCnMarginRaw, siInfoVCInfoInstance=siInfoVCInfoInstance, activeInputDiSeqCSwitch=activeInputDiSeqCSwitch, siInfoVCInfoTxID=siInfoVCInfoTxID, activeTunerDVBSFEC=activeTunerDVBSFEC, satSignalUncorErrCnt=satSignalUncorErrCnt, siRcvOptionStatusUseSDT=siRcvOptionStatusUseSDT, inputStatusIpiPcrLock=inputStatusIpiPcrLock, inputStatusAsiPacketSize=inputStatusAsiPacketSize, activeInputLocalOscFreq1=activeInputLocalOscFreq1, lnbPowerIndex=lnbPowerIndex, inputStatusIpiData1SrcIP=inputStatusIpiData1SrcIP, siInfoTsSymRate=siInfoTsSymRate, satSignalCndisp=satSignalCndisp, inputStatusIpiSignal=inputStatusIpiSignal, siInfoRxStatus=siInfoRxStatus, inputStatusLastTuneReason=inputStatusLastTuneReason, siInfoTsPolar=siInfoTsPolar, activeTunerIndex=activeTunerIndex, tuningStatusTable=tuningStatusTable, activeInputRFIndex=activeInputRFIndex, siInfoTsTable=siInfoTsTable, siRcvTable=siRcvTable, inputStatusTransportId=inputStatusTransportId, siInfoVCInfoProgName=siInfoVCInfoProgName, siRcvOptionEntry=siRcvOptionEntry, satSignalEntry=satSignalEntry, lnbPowerEntry=lnbPowerEntry, activeTunerRollOff=activeTunerRollOff, activeInputLastLNBConfig=activeInputLastLNBConfig, satSignalCnMargin=satSignalCnMargin, siRcvOptionStatusUseBAT=siRcvOptionStatusUseBAT, siInfoRxTable=siInfoRxTable, inputStatusAsiLinkError=inputStatusAsiLinkError, PYSNMP_MODULE_ID=ciscoDSGTuning, satSignalModulation=satSignalModulation, siInfoVCInfoAuthorized=siInfoVCInfoAuthorized, siInfoTsId=siInfoTsId, siRcvOptionLastActivated=siRcvOptionLastActivated)
