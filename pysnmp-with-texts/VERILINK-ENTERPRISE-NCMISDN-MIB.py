#
# PySNMP MIB module VERILINK-ENTERPRISE-NCMISDN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VERILINK-ENTERPRISE-NCMISDN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:33:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Integer32, ModuleIdentity, Counter64, TimeTicks, Bits, iso, Unsigned32, IpAddress, MibIdentifier, Counter32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Integer32", "ModuleIdentity", "Counter64", "TimeTicks", "Bits", "iso", "Unsigned32", "IpAddress", "MibIdentifier", "Counter32", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ncm_isdn, = mibBuilder.importSymbols("VERILINK-ENTERPRISE-NCMALARM-MIB", "ncm-isdn")
ncmPRIPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8000), )
if mibBuilder.loadTexts: ncmPRIPortConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRIPortConfigTable.setDescription('The PRI Port Configuration table .')
ncmPRIPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8000, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMISDN-MIB", "ncmPRIPortNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMISDN-MIB", "ncmPRIPortLineIndex"))
if mibBuilder.loadTexts: ncmPRIPortConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRIPortConfigEntry.setDescription('An entry in the PRI Port Configuration table .')
ncmPRIPortNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8000, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIPortNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRIPortNIDIndex.setDescription('The object specifies the node id of the node.')
ncmPRIPortLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8000, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIPortLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRIPortLineIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable.')
ncmPRIPortInService = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8000, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRIPortInService.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRIPortInService.setDescription('The object specifies whether the PRI Port is in service or not.')
ncmPRIPortNFASMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8000, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-nFas", 1), ("nFas", 2), ("nFas-on-4", 3), ("nFas-w-D", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRIPortNFASMode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRIPortNFASMode.setDescription('The variable specifies the Pri NFAS mode. For DPRI card, it has selections of 1)No Nfas, 2)Nfas For QPRI card, it has selections of 1)No Nfas, 2)Nfas on 4, 3)Nfas w/D WARNING: The card must be reset for this change to take effect !')
ncmPRIPortDChanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8000, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("inverted", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRIPortDChanMode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRIPortDChanMode.setDescription('The variable specifies the pri D-channel mode.')
ncmPRIPortDChanBits = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8000, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("chan-8-Bit", 1), ("chan-7-Bit", 2), ("chan-6-Bit", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRIPortDChanBits.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRIPortDChanBits.setDescription('The variable specifies the pri D-channel bits.')
ncmPRIPortTimeslotMap = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8000, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRIPortTimeslotMap.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRIPortTimeslotMap.setDescription('The variable specifies the timeslot map.')
ncmPRIPortSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8000, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("sw-Unspecified", 1), ("sw-Att-4Ess", 2), ("sw-Att-5Ess", 3), ("sw-Att-Reserved", 4), ("sw-Nti-Dms100", 5), ("sw-Ni-2", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRIPortSwitchType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRIPortSwitchType.setDescription('The variable specifies the pri switch type.')
ncmPRIPortOwnNumPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8000, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 10))).clone(namedValues=NamedValues(("unkn-NumPlan", 1), ("isdn-E164", 2), ("telephony-E163", 3), ("private", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRIPortOwnNumPlan.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRIPortOwnNumPlan.setDescription('The variable specifies the pri own numbering plan.')
ncmPRIPortOwnNumType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8000, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5))).clone(namedValues=NamedValues(("unkn-NumType", 1), ("international", 2), ("national", 3), ("local", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRIPortOwnNumType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRIPortOwnNumType.setDescription('The variable specifies the pri own numbering type.')
ncmPRIPortSecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8000, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-Checks", 1), ("own-Numbers", 2), ("ext-Numbers", 3), ("both-Numbers", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRIPortSecurityLevel.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRIPortSecurityLevel.setDescription('The variable specifies the fdl mode which is bit 0 of fdl Parameter1.')
ncmPRIPortConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8000, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("configuration-OK", 1), ("configuration-Error", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIPortConfigStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRIPortConfigStatus.setDescription('The variable specifies the configuration result.')
ncmPRIPortSetConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8000, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("set-Config", 1), ("not-in-use", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRIPortSetConfig.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRIPortSetConfig.setDescription('The set configuration operation that involves sending out the ACP message to set the configuration with the setup parameters')
ncmPRICallProfCallRefCount = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8000, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICallProfCallRefCount.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICallProfCallRefCount.setDescription('The variable specifies the number of valid call reference numbers')
ncmPRIL2AutoEstablish = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8000, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRIL2AutoEstablish.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRIL2AutoEstablish.setDescription('The object specifies whether the PRI Port has an Auto establishment for Layer-2 or not.')
ncmPRIResetCard = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8000, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset-Card", 1), ("not-in-use", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRIResetCard.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRIResetCard.setDescription('The reset card operation that involves sending out the ACP message to reset the card')
ncmPRICallProfileTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8001), )
if mibBuilder.loadTexts: ncmPRICallProfileTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICallProfileTable.setDescription('The PRI Call Profile table .')
ncmPRICallProfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8001, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMISDN-MIB", "ncmPRICallProfNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMISDN-MIB", "ncmPRICallProfLineIndex"), (0, "VERILINK-ENTERPRISE-NCMISDN-MIB", "ncmPRICPCallProfileRef"))
if mibBuilder.loadTexts: ncmPRICallProfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICallProfEntry.setDescription('An entry in the PRI Call Profile table .')
ncmPRICallProfNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8001, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICallProfNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICallProfNIDIndex.setDescription('The object specifies the node id of the node.')
ncmPRICallProfLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8001, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICallProfLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICallProfLineIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable.')
ncmPRICPCallProfileRef = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8001, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRICPCallProfileRef.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICPCallProfileRef.setDescription('The variable specifies the number of the call profile in the list (starting from one, then two and so on).')
ncmPRICallProfCallDir = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8001, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("no-Direction", 1), ("incoming", 2), ("outgoing", 3), ("both-Directions", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRICallProfCallDir.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICallProfCallDir.setDescription('The variable specifies the call direction.')
ncmPRICallProfNumOwnDigit = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8001, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRICallProfNumOwnDigit.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICallProfNumOwnDigit.setDescription('The variable specifies the number of own digits.')
ncmPRICallProfOwnCallNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8001, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRICallProfOwnCallNum.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICallProfOwnCallNum.setDescription('The variable specifies the own call number.')
ncmPRICallProfExtNumPlan = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8001, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 10))).clone(namedValues=NamedValues(("unkn-NumPlan", 1), ("isdn-E164", 2), ("telephony-E163", 3), ("private", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRICallProfExtNumPlan.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICallProfExtNumPlan.setDescription('The variable specifies the external numbering plan.')
ncmPRICallProfExtNumType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8001, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5))).clone(namedValues=NamedValues(("unkn-NumType", 1), ("international", 2), ("national", 3), ("local", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRICallProfExtNumType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICallProfExtNumType.setDescription('The variable specifies the external numbering type.')
ncmPRICallProfExtNumDigit = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8001, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRICallProfExtNumDigit.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICallProfExtNumDigit.setDescription('The variable specifies the external number of digits.')
ncmPRICallProfExtCallNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8001, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRICallProfExtCallNum.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICallProfExtCallNum.setDescription('The variable specifies the external call number.')
ncmPRICallProfTransferMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8001, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8, 9))).clone(namedValues=NamedValues(("unrestricted-digital", 8), ("restricted-digital", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRICallProfTransferMode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICallProfTransferMode.setDescription('The variable specifies the transfer mode.')
ncmPRICallProfCallBandWth = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8001, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 19, 21, 23, 24))).clone(namedValues=NamedValues(("b1-64K", 16), ("h0-6X64K", 19), ("h11-24X64K", 21), ("h12-30X64K", 23), ("multiRate", 24)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRICallProfCallBandWth.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICallProfCallBandWth.setDescription('The variable specifies the call bandwidth.')
ncmPRICallProfMultiRateCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8001, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4, 6, 8, 12, 23, 24, 30, 31))).clone(namedValues=NamedValues(("mR-2", 2), ("mR-4", 4), ("mR-6", 6), ("mR-8", 8), ("mR-12", 12), ("mR-23", 23), ("mR-24", 24), ("mR-30", 30), ("mR-31", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRICallProfMultiRateCnt.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICallProfMultiRateCnt.setDescription('The variable specifies the multirate count.')
ncmPRICallProfRateAdaptn = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8001, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no-Adapt", 1), ("adapt-56K", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRICallProfRateAdaptn.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICallProfRateAdaptn.setDescription('The variable specifies the rate adaptation.')
ncmPRICallProfTestCallIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8001, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRICallProfTestCallIntvl.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICallProfTestCallIntvl.setDescription('The variable specifies the test call interval.')
ncmPRICallProfCallStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8001, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fail-Takedown-Idle", 1), ("successful-Setup", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICallProfCallStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICallProfCallStatus.setDescription('The variable specifies the get call profile call status.')
ncmPRICallProfCallAction = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8001, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("setup-Call", 1), ("takedown-Call", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRICallProfCallAction.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICallProfCallAction.setDescription('The variable specifies the call profile call action.')
ncmPRICPSetCallProf = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8001, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("set-CallProf", 1), ("not-in-use", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRICPSetCallProf.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICPSetCallProf.setDescription('The variable specifies the call profile call action.')
ncmPRICPSetCallProfResp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8001, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("configuration-OK", 1), ("configuration-Error", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICPSetCallProfResp.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICPSetCallProfResp.setDescription('The variable specifies the set call profile result')
ncmPRICPCallActionResp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8001, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("configuration-OK", 1), ("configuration-Error", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICPCallActionResp.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICPCallActionResp.setDescription('The variable specifies the call action result')
ncmPRICallProfListTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8002), )
if mibBuilder.loadTexts: ncmPRICallProfListTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICallProfListTable.setDescription('The PRI Call Profile List table .')
ncmPRICallProfListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8002, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMISDN-MIB", "ncmPRICPListNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMISDN-MIB", "ncmPRICPListLineIndex"), (0, "VERILINK-ENTERPRISE-NCMISDN-MIB", "ncmPRICPListIndex"))
if mibBuilder.loadTexts: ncmPRICallProfListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICallProfListEntry.setDescription('An entry in the PRI Call Profile List table .')
ncmPRICPListNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8002, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICPListNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICPListNIDIndex.setDescription('The object specifies the node id of the node of the call profile list group.')
ncmPRICPListLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8002, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICPListLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICPListLineIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable.')
ncmPRICPListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8002, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICPListIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICPListIndex.setDescription('The call profile list call reference index.')
ncmPRICPListValidCPRefNum = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8002, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICPListValidCPRefNum.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICPListValidCPRefNum.setDescription('The variable is the valid call reference number.')
ncmPRICurrentTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003), )
if mibBuilder.loadTexts: ncmPRICurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICurrentTable.setDescription('The PRI Current Interval table .')
ncmPRICurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMISDN-MIB", "ncmPRICurrNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMISDN-MIB", "ncmPRICurrLineIndex"), (0, "VERILINK-ENTERPRISE-NCMISDN-MIB", "ncmPRICurrEndType"))
if mibBuilder.loadTexts: ncmPRICurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICurrentEntry.setDescription('An entry in the PRI Current Interval table .')
ncmPRICurrNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICurrNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICurrNIDIndex.setDescription('The object specifies the node id of the node.')
ncmPRICurrLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICurrLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICurrLineIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable.')
ncmPRICurrEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICurrEndType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICurrEndType.setDescription('The variable specifies the End Type .')
ncmPRICurrTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICurrTimestamp.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICurrTimestamp.setDescription('The object specifies the timestamp in seconds.')
ncmPRICurrSecsInCurrIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICurrSecsInCurrIntvl.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICurrSecsInCurrIntvl.setDescription('The object specifies the seconds in current interval.')
ncmPRICurrInfoRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICurrInfoRx.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICurrInfoRx.setDescription('The object specifies the current INFOs received.')
ncmPRICurrInfoTx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICurrInfoTx.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICurrInfoTx.setDescription('The object specifies the current INFOs transmitted.')
ncmPRICurrCRCErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICurrCRCErrRx.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICurrCRCErrRx.setDescription('The object specifies the current CRC errors received.')
ncmPRICurrInvalidFrameRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICurrInvalidFrameRx.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICurrInvalidFrameRx.setDescription('The object specifies the current invalid frames received.')
ncmPRICurrFrameAbortRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICurrFrameAbortRx.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICurrFrameAbortRx.setDescription('The object specifies the current frame aborts received.')
ncmPRICurrDISCSRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICurrDISCSRx.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICurrDISCSRx.setDescription('The object specifies the current DISCs received.')
ncmPRICurrDISCSTx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICurrDISCSTx.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICurrDISCSTx.setDescription('The object specifies the current DISCs transmitted.')
ncmPRICurrFramerRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICurrFramerRx.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICurrFramerRx.setDescription('The object specifies the current framer received.')
ncmPRICurrFramerTx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICurrFramerTx.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICurrFramerTx.setDescription('The object specifies the current framer transmitted.')
ncmPRICurrLyr3ProtErr = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICurrLyr3ProtErr.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICurrLyr3ProtErr.setDescription('The object specifies the current Layer 3 protocol errors.')
ncmPRICurrCallSetupSent = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICurrCallSetupSent.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICurrCallSetupSent.setDescription('The object specifies the current call setup sent.')
ncmPRICurrCallSetupSentnFail = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICurrCallSetupSentnFail.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICurrCallSetupSentnFail.setDescription('The object specifies the current call setup sent and failed.')
ncmPRICurrCallSetupRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICurrCallSetupRx.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICurrCallSetupRx.setDescription('The object specifies the current call setup received.')
ncmPRICurrCallSetupRxnFail = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICurrCallSetupRxnFail.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICurrCallSetupRxnFail.setDescription('The object specifies the current call setup received and failed.')
ncmPRICurrUnSupportMsgRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICurrUnSupportMsgRx.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICurrUnSupportMsgRx.setDescription('The object specifies the current unsupported message received.')
ncmPRICurrTstCalSetupSentnFail = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICurrTstCalSetupSentnFail.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICurrTstCalSetupSentnFail.setDescription('The object specifies the current test call setups sent and failed.')
ncmPRICurrValidIntvls = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRICurrValidIntvls.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICurrValidIntvls.setDescription('A number between 1 and 96')
ncmPRICurrStatisticReset = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8003, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("statistic-Reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmPRICurrStatisticReset.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRICurrStatisticReset.setDescription('The variable specifies the statistic reset operation.')
ncmPRIIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004), )
if mibBuilder.loadTexts: ncmPRIIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRIIntervalTable.setDescription('The PRI Interval table .')
ncmPRIIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMISDN-MIB", "ncmPRIntvlNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMISDN-MIB", "ncmPRIntvlLineIndex"), (0, "VERILINK-ENTERPRISE-NCMISDN-MIB", "ncmPRIntvlEndType"), (0, "VERILINK-ENTERPRISE-NCMISDN-MIB", "ncmPRIntvlIndex"))
if mibBuilder.loadTexts: ncmPRIIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRIIntervalEntry.setDescription('An entry in the PRI Interval table .')
ncmPRIntvlNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIntvlNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRIntvlNIDIndex.setDescription('The object specifies the node id of the node.')
ncmPRIntvlLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIntvlLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRIntvlLineIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable.')
ncmPRIntvlEndType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("near-End", 1), ("far-End", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIntvlEndType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRIntvlEndType.setDescription('The variable specifies the End Type .')
ncmPRIntvlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIntvlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRIntvlIndex.setDescription('The interval index.')
ncmPRIntvlTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIntvlTimestamp.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRIntvlTimestamp.setDescription('The object specifies the interval timestamp in seconds.')
ncmPRIntvlSecsInCurrIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIntvlSecsInCurrIntvl.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRIntvlSecsInCurrIntvl.setDescription('The object specifies the interval seconds in current interval.')
ncmPRIntvlInfoRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIntvlInfoRx.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRIntvlInfoRx.setDescription('The object specifies the interval INFOs received.')
ncmPRIntvlInfoTx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIntvlInfoTx.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRIntvlInfoTx.setDescription('The object specifies the interval INFOs transmitted.')
ncmPRIntvlCRCErrRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIntvlCRCErrRx.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRIntvlCRCErrRx.setDescription('The object specifies the interval CRC errors received.')
ncmPRIntvlInvalidFrameRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIntvlInvalidFrameRx.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRIntvlInvalidFrameRx.setDescription('The object specifies the interval invalid frames received.')
ncmPRIntvlFrameAbortRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIntvlFrameAbortRx.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRIntvlFrameAbortRx.setDescription('The object specifies the interval frame aborts received.')
ncmPRIntvlDISCSRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIntvlDISCSRx.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRIntvlDISCSRx.setDescription('The object specifies the interval DISCs received.')
ncmPRIntvlDISCSTx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIntvlDISCSTx.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRIntvlDISCSTx.setDescription('The object specifies the interval DISCs transmitted.')
ncmPRIntvlFramerRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIntvlFramerRx.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRIntvlFramerRx.setDescription('The object specifies the interval framer received.')
ncmPRIntvlFramerTx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIntvlFramerTx.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRIntvlFramerTx.setDescription('The object specifies the interval framer transmitted.')
ncmPRIntvlLyr3ProtErr = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIntvlLyr3ProtErr.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRIntvlLyr3ProtErr.setDescription('The object specifies the interval Layer 3 protocol errors.')
ncmPRIntvlCallSetupSent = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIntvlCallSetupSent.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRIntvlCallSetupSent.setDescription('The object specifies the interval call setup sent.')
ncmPRIntvlCallSetupSentnFail = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIntvlCallSetupSentnFail.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRIntvlCallSetupSentnFail.setDescription('The object specifies the interval call setup sent and failed.')
ncmPRIntvlCallSetupRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIntvlCallSetupRx.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRIntvlCallSetupRx.setDescription('The object specifies the interval call setup received.')
ncmPRIntvlCallSetupRxnFail = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIntvlCallSetupRxnFail.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRIntvlCallSetupRxnFail.setDescription('The object specifies the interval call setup received and failed.')
ncmPRIntvlUnSupportMsgRx = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIntvlUnSupportMsgRx.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRIntvlUnSupportMsgRx.setDescription('The object specifies the interval unsupported message received.')
ncmPRIntvlTstCalSetupSentnFail = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3031, 8004, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmPRIntvlTstCalSetupSentnFail.setStatus('mandatory')
if mibBuilder.loadTexts: ncmPRIntvlTstCalSetupSentnFail.setDescription('The object specifies the interval test call setups sent and failed.')
mibBuilder.exportSymbols("VERILINK-ENTERPRISE-NCMISDN-MIB", ncmPRICurrInfoTx=ncmPRICurrInfoTx, ncmPRICallProfCallBandWth=ncmPRICallProfCallBandWth, ncmPRICallProfMultiRateCnt=ncmPRICallProfMultiRateCnt, ncmPRIntvlNIDIndex=ncmPRIntvlNIDIndex, ncmPRICallProfExtCallNum=ncmPRICallProfExtCallNum, ncmPRIPortLineIndex=ncmPRIPortLineIndex, ncmPRICPListLineIndex=ncmPRICPListLineIndex, ncmPRICallProfCallAction=ncmPRICallProfCallAction, ncmPRICurrentEntry=ncmPRICurrentEntry, ncmPRICurrCallSetupSentnFail=ncmPRICurrCallSetupSentnFail, ncmPRICallProfExtNumDigit=ncmPRICallProfExtNumDigit, ncmPRICallProfExtNumType=ncmPRICallProfExtNumType, ncmPRICurrEndType=ncmPRICurrEndType, ncmPRICallProfileTable=ncmPRICallProfileTable, ncmPRICPSetCallProf=ncmPRICPSetCallProf, ncmPRICallProfNIDIndex=ncmPRICallProfNIDIndex, ncmPRICurrFramerTx=ncmPRICurrFramerTx, ncmPRIPortDChanBits=ncmPRIPortDChanBits, ncmPRIPortConfigStatus=ncmPRIPortConfigStatus, ncmPRICPListValidCPRefNum=ncmPRICPListValidCPRefNum, ncmPRICurrStatisticReset=ncmPRICurrStatisticReset, ncmPRIIntervalTable=ncmPRIIntervalTable, ncmPRIPortNFASMode=ncmPRIPortNFASMode, ncmPRIPortTimeslotMap=ncmPRIPortTimeslotMap, ncmPRIPortSecurityLevel=ncmPRIPortSecurityLevel, ncmPRICPSetCallProfResp=ncmPRICPSetCallProfResp, ncmPRIntvlSecsInCurrIntvl=ncmPRIntvlSecsInCurrIntvl, ncmPRICallProfCallRefCount=ncmPRICallProfCallRefCount, ncmPRIntvlEndType=ncmPRIntvlEndType, ncmPRICurrCallSetupRx=ncmPRICurrCallSetupRx, ncmPRIIntervalEntry=ncmPRIIntervalEntry, ncmPRICurrLyr3ProtErr=ncmPRICurrLyr3ProtErr, ncmPRIPortConfigTable=ncmPRIPortConfigTable, ncmPRICurrDISCSTx=ncmPRICurrDISCSTx, ncmPRICurrCallSetupRxnFail=ncmPRICurrCallSetupRxnFail, ncmPRIntvlCallSetupSent=ncmPRIntvlCallSetupSent, ncmPRICallProfEntry=ncmPRICallProfEntry, ncmPRIntvlIndex=ncmPRIntvlIndex, ncmPRIPortDChanMode=ncmPRIPortDChanMode, ncmPRICurrUnSupportMsgRx=ncmPRICurrUnSupportMsgRx, ncmPRICurrCRCErrRx=ncmPRICurrCRCErrRx, ncmPRICurrInvalidFrameRx=ncmPRICurrInvalidFrameRx, ncmPRIntvlCallSetupRx=ncmPRIntvlCallSetupRx, ncmPRIntvlLineIndex=ncmPRIntvlLineIndex, ncmPRIL2AutoEstablish=ncmPRIL2AutoEstablish, ncmPRICallProfExtNumPlan=ncmPRICallProfExtNumPlan, ncmPRIPortInService=ncmPRIPortInService, ncmPRIntvlFramerRx=ncmPRIntvlFramerRx, ncmPRICurrSecsInCurrIntvl=ncmPRICurrSecsInCurrIntvl, ncmPRICurrTstCalSetupSentnFail=ncmPRICurrTstCalSetupSentnFail, ncmPRICurrNIDIndex=ncmPRICurrNIDIndex, ncmPRIPortSetConfig=ncmPRIPortSetConfig, ncmPRICallProfCallDir=ncmPRICallProfCallDir, ncmPRICurrFramerRx=ncmPRICurrFramerRx, ncmPRICPListIndex=ncmPRICPListIndex, ncmPRIntvlDISCSRx=ncmPRIntvlDISCSRx, ncmPRICurrFrameAbortRx=ncmPRICurrFrameAbortRx, ncmPRICPListNIDIndex=ncmPRICPListNIDIndex, ncmPRIntvlUnSupportMsgRx=ncmPRIntvlUnSupportMsgRx, ncmPRIntvlCRCErrRx=ncmPRIntvlCRCErrRx, ncmPRIntvlInfoRx=ncmPRIntvlInfoRx, ncmPRICurrCallSetupSent=ncmPRICurrCallSetupSent, ncmPRICallProfListTable=ncmPRICallProfListTable, ncmPRIntvlInvalidFrameRx=ncmPRIntvlInvalidFrameRx, ncmPRICallProfNumOwnDigit=ncmPRICallProfNumOwnDigit, ncmPRIPortOwnNumType=ncmPRIPortOwnNumType, ncmPRICallProfTestCallIntvl=ncmPRICallProfTestCallIntvl, ncmPRICurrentTable=ncmPRICurrentTable, ncmPRICallProfLineIndex=ncmPRICallProfLineIndex, ncmPRICurrInfoRx=ncmPRICurrInfoRx, ncmPRIPortSwitchType=ncmPRIPortSwitchType, ncmPRIntvlFramerTx=ncmPRIntvlFramerTx, ncmPRIntvlCallSetupRxnFail=ncmPRIntvlCallSetupRxnFail, ncmPRICallProfCallStatus=ncmPRICallProfCallStatus, ncmPRICallProfRateAdaptn=ncmPRICallProfRateAdaptn, ncmPRIntvlLyr3ProtErr=ncmPRIntvlLyr3ProtErr, ncmPRIPortNIDIndex=ncmPRIPortNIDIndex, ncmPRICurrTimestamp=ncmPRICurrTimestamp, ncmPRIntvlTstCalSetupSentnFail=ncmPRIntvlTstCalSetupSentnFail, ncmPRICallProfOwnCallNum=ncmPRICallProfOwnCallNum, ncmPRICallProfTransferMode=ncmPRICallProfTransferMode, ncmPRICallProfListEntry=ncmPRICallProfListEntry, ncmPRIPortConfigEntry=ncmPRIPortConfigEntry, ncmPRIntvlInfoTx=ncmPRIntvlInfoTx, ncmPRIntvlCallSetupSentnFail=ncmPRIntvlCallSetupSentnFail, ncmPRIResetCard=ncmPRIResetCard, ncmPRIntvlDISCSTx=ncmPRIntvlDISCSTx, ncmPRICurrValidIntvls=ncmPRICurrValidIntvls, ncmPRIntvlFrameAbortRx=ncmPRIntvlFrameAbortRx, ncmPRICurrLineIndex=ncmPRICurrLineIndex, ncmPRIPortOwnNumPlan=ncmPRIPortOwnNumPlan, ncmPRICurrDISCSRx=ncmPRICurrDISCSRx, ncmPRICPCallProfileRef=ncmPRICPCallProfileRef, ncmPRICPCallActionResp=ncmPRICPCallActionResp, ncmPRIntvlTimestamp=ncmPRIntvlTimestamp)
