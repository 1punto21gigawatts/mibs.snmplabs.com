#
# PySNMP MIB module CISCO-VOICE-ATM-DIAL-CONTROL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-VOICE-ATM-DIAL-CONTROL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:19:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
cCallHistoryIndex, = mibBuilder.importSymbols("CISCO-DIAL-CONTROL-MIB", "cCallHistoryIndex")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
CvcSpeechCoderRate, CvcInBandSignaling, CvcGUid, CvcFaxTransmitRate = mibBuilder.importSymbols("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", "CvcSpeechCoderRate", "CvcInBandSignaling", "CvcGUid", "CvcFaxTransmitRate")
callActiveSetupTime, callActiveIndex = mibBuilder.importSymbols("DIAL-CONTROL-MIB", "callActiveSetupTime", "callActiveIndex")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
NotificationType, Bits, Counter64, ObjectIdentity, IpAddress, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, iso, ModuleIdentity, Counter32, TimeTicks, Integer32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Bits", "Counter64", "ObjectIdentity", "IpAddress", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "iso", "ModuleIdentity", "Counter32", "TimeTicks", "Integer32", "Unsigned32")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
ciscoVoiceAtmDialControlMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 35))
ciscoVoiceAtmDialControlMIB.setRevisions(('2002-11-17 00:00', '1999-03-20 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoVoiceAtmDialControlMIB.setRevisionsDescriptions(('Modify the following objects: [1] Add a new enum definition in CvAtmSessionProtocol [2] Change the default value in cvAtmPeerCfgInBandSignaling ', 'Add new objects for handling the following: [1] Call History object ids 6-17 to bring MIB inline with stored Call History record. [2] Added Call Active Entry objects [3] Added Dialpeer Objects for VoATM ',))
if mibBuilder.loadTexts: ciscoVoiceAtmDialControlMIB.setLastUpdated('200211170000Z')
if mibBuilder.loadTexts: ciscoVoiceAtmDialControlMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoVoiceAtmDialControlMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-voice@cisco.com')
if mibBuilder.loadTexts: ciscoVoiceAtmDialControlMIB.setDescription('This MIB module enhances the IETF Dial Control MIB (RFC2128) by providing ATM management information over a data network.')
ciscoVoiceAtmDialControlMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 35, 1))
cvAtmCallHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 35, 1, 1))
cvAtmCallActive = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 35, 1, 2))
cvAtmDialPeer = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 35, 1, 3))
class CvAtmSessionProtocol(TextualConvention, Integer32):
    description = 'Represents a Session Protocol used by Voice calls between a local and remote router via the ATM backbone. other - none of the following. ciscoSwitched - cisco proprietary ATM session protocol. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("ciscoSwitched", 2), ("aal2Trunk", 3))

cvAtmCallHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 35, 1, 1, 1), )
if mibBuilder.loadTexts: cvAtmCallHistoryTable.setStatus('current')
if mibBuilder.loadTexts: cvAtmCallHistoryTable.setDescription('This table is the ATM extension to the call history table of IETF Dial Control MIB. It contains ATM call leg information about specific voice over ATM call.')
cvAtmCallHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 35, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-DIAL-CONTROL-MIB", "cCallHistoryIndex"))
if mibBuilder.loadTexts: cvAtmCallHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: cvAtmCallHistoryEntry.setDescription('The information regarding a single ATM call leg. An entry of this table is created when its associated call history entry in the IETF Dial Control MIB is created and the call history entry contains information for the call establishment to the peer on the data network backbone via a voice over ATM peer. Th the IETF Dial Control MIB is deleted.')
cvAtmCallHistoryConnectionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 35, 1, 1, 1, 1, 1), CvcGUid()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvAtmCallHistoryConnectionId.setStatus('current')
if mibBuilder.loadTexts: cvAtmCallHistoryConnectionId.setDescription('The global call identifier for the ATM call.')
cvAtmCallHistoryVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 35, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvAtmCallHistoryVpi.setStatus('current')
if mibBuilder.loadTexts: cvAtmCallHistoryVpi.setDescription('The VPI used for this ATM connection.')
cvAtmCallHistoryVci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 35, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvAtmCallHistoryVci.setStatus('current')
if mibBuilder.loadTexts: cvAtmCallHistoryVci.setDescription('The VCI used for this ATM connection.')
cvAtmCallHistoryLowerIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 35, 1, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvAtmCallHistoryLowerIfName.setStatus('current')
if mibBuilder.loadTexts: cvAtmCallHistoryLowerIfName.setDescription('The ifName of the ATM interface associated with this call.')
cvAtmCallHistorySessionTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 35, 1, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvAtmCallHistorySessionTarget.setStatus('current')
if mibBuilder.loadTexts: cvAtmCallHistorySessionTarget.setDescription('The object indicates the session target of the peer that was used for the voice over ATM call. A zero length string indicates that the value is unavailable.')
cvAtmCallHistorySubchannelID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 35, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvAtmCallHistorySubchannelID.setStatus('current')
if mibBuilder.loadTexts: cvAtmCallHistorySubchannelID.setDescription('The subchannel used for this ATM connection.')
cvAtmCallHistorySessionProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 35, 1, 1, 1, 1, 7), CvAtmSessionProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvAtmCallHistorySessionProtocol.setStatus('current')
if mibBuilder.loadTexts: cvAtmCallHistorySessionProtocol.setDescription('Indicates the session protocol used on this call.')
cvAtmCallHistoryCalledNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 35, 1, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvAtmCallHistoryCalledNumber.setStatus('current')
if mibBuilder.loadTexts: cvAtmCallHistoryCalledNumber.setDescription('Indicates the called party number for trunk connection calls. A zero length string indicates that this data is unavailable.')
cvAtmCallHistoryDtmfRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 35, 1, 1, 1, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvAtmCallHistoryDtmfRelay.setStatus('current')
if mibBuilder.loadTexts: cvAtmCallHistoryDtmfRelay.setDescription('Indicates if Dtmf Relay was enabled for the call.')
cvAtmCallHistoryUseSeqNumbers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 35, 1, 1, 1, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvAtmCallHistoryUseSeqNumbers.setStatus('current')
if mibBuilder.loadTexts: cvAtmCallHistoryUseSeqNumbers.setDescription('Indicates if Sequence Numbers were used on the voice data packets.')
cvAtmCallActiveTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 35, 1, 2, 1), )
if mibBuilder.loadTexts: cvAtmCallActiveTable.setStatus('current')
if mibBuilder.loadTexts: cvAtmCallActiveTable.setDescription('This table is the ATM extension to the active call table of IETF Dial Control MIB. It contains ATM call leg information about specific voice over ATM call.')
cvAtmCallActiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 35, 1, 2, 1, 1), ).setIndexNames((0, "DIAL-CONTROL-MIB", "callActiveSetupTime"), (0, "DIAL-CONTROL-MIB", "callActiveIndex"))
if mibBuilder.loadTexts: cvAtmCallActiveEntry.setStatus('current')
if mibBuilder.loadTexts: cvAtmCallActiveEntry.setDescription('The information regarding a single ATM call leg. An entry of this table is created when its associated call active entry in the IETF Dial Control MIB is created. The call active entry contains information for the call establishment to the peer on the data network backbone via a voice over ATM peer. The entry is deleted when its associated call active entry in the IETF Dial Control MIB is deleted.')
cvAtmCallActiveConnectionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 35, 1, 2, 1, 1, 1), CvcGUid()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvAtmCallActiveConnectionId.setStatus('current')
if mibBuilder.loadTexts: cvAtmCallActiveConnectionId.setDescription('The global call identifier for the ATM call.')
cvAtmCallActiveVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 35, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvAtmCallActiveVpi.setStatus('current')
if mibBuilder.loadTexts: cvAtmCallActiveVpi.setDescription('The VPI used for this ATM connection.')
cvAtmCallActiveVci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 35, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvAtmCallActiveVci.setStatus('current')
if mibBuilder.loadTexts: cvAtmCallActiveVci.setDescription('The VCI used for this ATM connection.')
cvAtmCallActiveLowerIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 35, 1, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvAtmCallActiveLowerIfName.setStatus('current')
if mibBuilder.loadTexts: cvAtmCallActiveLowerIfName.setDescription('The ifName of the ATM interface associated with this call.')
cvAtmCallActiveSessionTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 35, 1, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvAtmCallActiveSessionTarget.setStatus('current')
if mibBuilder.loadTexts: cvAtmCallActiveSessionTarget.setDescription('The object indicates the session target of the peer that is used for the voice over ATM call. A null string indicates that the value is unavailable.')
cvAtmCallActiveSubchannelID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 35, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvAtmCallActiveSubchannelID.setStatus('current')
if mibBuilder.loadTexts: cvAtmCallActiveSubchannelID.setDescription('The subchannel used for this ATM connection.')
cvAtmCallActiveSessionProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 35, 1, 2, 1, 1, 7), CvAtmSessionProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvAtmCallActiveSessionProtocol.setStatus('current')
if mibBuilder.loadTexts: cvAtmCallActiveSessionProtocol.setDescription('Indicates the session protocol being used on this call.')
cvAtmCallActiveCalledNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 35, 1, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvAtmCallActiveCalledNumber.setStatus('current')
if mibBuilder.loadTexts: cvAtmCallActiveCalledNumber.setDescription('Indicates the called party number for trunk connection calls. A null string indicates that this data is unavailable.')
cvAtmCallActiveDtmfRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 35, 1, 2, 1, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvAtmCallActiveDtmfRelay.setStatus('current')
if mibBuilder.loadTexts: cvAtmCallActiveDtmfRelay.setDescription('Indicates if Dtmf Relay is enabled for the call.')
cvAtmCallActiveUseSeqNumbers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 35, 1, 2, 1, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvAtmCallActiveUseSeqNumbers.setStatus('current')
if mibBuilder.loadTexts: cvAtmCallActiveUseSeqNumbers.setDescription('Indicates if Sequence Numbers are used on the voice data packets.')
cvAtmPeerCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 35, 1, 3, 1), )
if mibBuilder.loadTexts: cvAtmPeerCfgTable.setStatus('current')
if mibBuilder.loadTexts: cvAtmPeerCfgTable.setDescription('The table contains the Voice over ATM (ATM) peer specific information that is required to accept or place voice calls via the ATM backbone with the session protocol specified in cvAtmPeerCfgSessionProtocol.')
cvAtmPeerCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 35, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cvAtmPeerCfgEntry.setStatus('current')
if mibBuilder.loadTexts: cvAtmPeerCfgEntry.setDescription("A single ATM specific Peer. One entry per ATM encapsulation. The entry is created when its associated 'voiceOverATM(152)' encapsulation ifEntry is created. This entry is deleted when its associated ifEntry is deleted.")
cvAtmPeerCfgSessionProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 35, 1, 3, 1, 1, 1), CvAtmSessionProtocol().clone('ciscoSwitched')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvAtmPeerCfgSessionProtocol.setStatus('current')
if mibBuilder.loadTexts: cvAtmPeerCfgSessionProtocol.setDescription('The object specifies the session protocol to be used for Internet call between local and remote router via ATM backbone.')
cvAtmPeerCfgInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 35, 1, 3, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvAtmPeerCfgInterfaceName.setStatus('current')
if mibBuilder.loadTexts: cvAtmPeerCfgInterfaceName.setDescription('The object specifies the ifName on which the call will go out. A zero length string indicates that no interface has been assigned.')
cvAtmPeerCfgVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 35, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvAtmPeerCfgVpi.setStatus('current')
if mibBuilder.loadTexts: cvAtmPeerCfgVpi.setDescription('The VPI used for this ATM connection.')
cvAtmPeerCfgVci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 35, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvAtmPeerCfgVci.setStatus('current')
if mibBuilder.loadTexts: cvAtmPeerCfgVci.setDescription('The VCI used for this ATM connection.')
cvAtmPeerCfgVcName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 35, 1, 3, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvAtmPeerCfgVcName.setStatus('current')
if mibBuilder.loadTexts: cvAtmPeerCfgVcName.setDescription('The VC Name used for this ATM connection.')
cvAtmPeerCfgCoderRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 35, 1, 3, 1, 1, 6), CvcSpeechCoderRate().clone('g729Ar8000')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvAtmPeerCfgCoderRate.setStatus('current')
if mibBuilder.loadTexts: cvAtmPeerCfgCoderRate.setDescription('This object specifies the default voice coder rate of speech for the ATM peer.')
cvAtmPeerCfgCodecBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 35, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvAtmPeerCfgCodecBytes.setStatus('current')
if mibBuilder.loadTexts: cvAtmPeerCfgCodecBytes.setDescription('This object specifies the payload size for the voice packets to be transmitted during the call.')
cvAtmPeerCfgFaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 35, 1, 3, 1, 1, 8), CvcFaxTransmitRate().clone('voiceRate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvAtmPeerCfgFaxRate.setStatus('current')
if mibBuilder.loadTexts: cvAtmPeerCfgFaxRate.setDescription("This object specifies the default transmit rate of FAX for the ATM peer. If the value of this object is 'none', then the Fax relay feature is disabled; otherwise the Fax relay feature is enabled.")
cvAtmPeerCfgFaxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 35, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvAtmPeerCfgFaxBytes.setStatus('current')
if mibBuilder.loadTexts: cvAtmPeerCfgFaxBytes.setDescription('This object specifies the payload size for the fax packets to be transmitted during the call.')
cvAtmPeerCfgInBandSignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 35, 1, 3, 1, 1, 10), CvcInBandSignaling().clone('cas')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvAtmPeerCfgInBandSignaling.setStatus('current')
if mibBuilder.loadTexts: cvAtmPeerCfgInBandSignaling.setDescription('This object specifies the type of in-band signaling used between the two end points of the call and is used by the router to determine how to interpret the ABCD signaling bits sent as part of the voice payload data.')
cvAtmPeerCfgVADEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 35, 1, 3, 1, 1, 11), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvAtmPeerCfgVADEnable.setStatus('current')
if mibBuilder.loadTexts: cvAtmPeerCfgVADEnable.setDescription("This object specifies whether or not VAD (Voice Activity Detection) is enabled. If the object value is 'false', then the voice data is continuously transmitted to ATM backbone.")
cvAtmPeerCfgUseSeqNumbers = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 35, 1, 3, 1, 1, 12), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvAtmPeerCfgUseSeqNumbers.setStatus('current')
if mibBuilder.loadTexts: cvAtmPeerCfgUseSeqNumbers.setDescription('This object specifies whether or not Sequence Numbers are generated on voice packets.')
cvAtmPeerCfgDtmfRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 35, 1, 3, 1, 1, 13), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cvAtmPeerCfgDtmfRelay.setStatus('current')
if mibBuilder.loadTexts: cvAtmPeerCfgDtmfRelay.setDescription('This object specifies whether or not Dtmf Relay is enabled. If it is then dtmf digits are transported as FRF11 Annex C packets, instead of being encoded as speech.')
ciscoVoiceAtmDialControlMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 35, 2))
ciscoVoiceAtmDialControlMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 35, 2, 0))
ciscoVoiceAtmDialControlMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 35, 3))
ciscoVoiceAtmDialControlMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 35, 3, 1))
ciscoVoiceAtmDialControlMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 35, 3, 2))
ciscoVoiceAtmDialControlMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 35, 3, 1, 1)).setObjects(("CISCO-VOICE-ATM-DIAL-CONTROL-MIB", "cvAtmCallHistoryGroup"), ("CISCO-VOICE-ATM-DIAL-CONTROL-MIB", "cvAtmCallActiveGroup"), ("CISCO-VOICE-ATM-DIAL-CONTROL-MIB", "cvAtmPeerCfgGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVoiceAtmDialControlMIBCompliance = ciscoVoiceAtmDialControlMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoVoiceAtmDialControlMIBCompliance.setDescription('The compliance statement for entities which implement the CISCO VOICE ATM DIAL CONTROL MIB')
cvAtmCallHistoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 35, 3, 2, 1)).setObjects(("CISCO-VOICE-ATM-DIAL-CONTROL-MIB", "cvAtmCallHistoryConnectionId"), ("CISCO-VOICE-ATM-DIAL-CONTROL-MIB", "cvAtmCallHistoryVpi"), ("CISCO-VOICE-ATM-DIAL-CONTROL-MIB", "cvAtmCallHistoryVci"), ("CISCO-VOICE-ATM-DIAL-CONTROL-MIB", "cvAtmCallHistoryLowerIfName"), ("CISCO-VOICE-ATM-DIAL-CONTROL-MIB", "cvAtmCallHistorySessionTarget"), ("CISCO-VOICE-ATM-DIAL-CONTROL-MIB", "cvAtmCallHistorySubchannelID"), ("CISCO-VOICE-ATM-DIAL-CONTROL-MIB", "cvAtmCallHistorySessionProtocol"), ("CISCO-VOICE-ATM-DIAL-CONTROL-MIB", "cvAtmCallHistoryCalledNumber"), ("CISCO-VOICE-ATM-DIAL-CONTROL-MIB", "cvAtmCallHistoryDtmfRelay"), ("CISCO-VOICE-ATM-DIAL-CONTROL-MIB", "cvAtmCallHistoryUseSeqNumbers"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvAtmCallHistoryGroup = cvAtmCallHistoryGroup.setStatus('current')
if mibBuilder.loadTexts: cvAtmCallHistoryGroup.setDescription('A collection of objects providing the ATM Call History entry capability.')
cvAtmCallActiveGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 35, 3, 2, 2)).setObjects(("CISCO-VOICE-ATM-DIAL-CONTROL-MIB", "cvAtmCallActiveConnectionId"), ("CISCO-VOICE-ATM-DIAL-CONTROL-MIB", "cvAtmCallActiveVpi"), ("CISCO-VOICE-ATM-DIAL-CONTROL-MIB", "cvAtmCallActiveVci"), ("CISCO-VOICE-ATM-DIAL-CONTROL-MIB", "cvAtmCallActiveLowerIfName"), ("CISCO-VOICE-ATM-DIAL-CONTROL-MIB", "cvAtmCallActiveSessionTarget"), ("CISCO-VOICE-ATM-DIAL-CONTROL-MIB", "cvAtmCallActiveSubchannelID"), ("CISCO-VOICE-ATM-DIAL-CONTROL-MIB", "cvAtmCallActiveSessionProtocol"), ("CISCO-VOICE-ATM-DIAL-CONTROL-MIB", "cvAtmCallActiveCalledNumber"), ("CISCO-VOICE-ATM-DIAL-CONTROL-MIB", "cvAtmCallActiveDtmfRelay"), ("CISCO-VOICE-ATM-DIAL-CONTROL-MIB", "cvAtmCallActiveUseSeqNumbers"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvAtmCallActiveGroup = cvAtmCallActiveGroup.setStatus('current')
if mibBuilder.loadTexts: cvAtmCallActiveGroup.setDescription('A collection of objects providing the ATM Call Active entry capability.')
cvAtmPeerCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 35, 3, 2, 3)).setObjects(("CISCO-VOICE-ATM-DIAL-CONTROL-MIB", "cvAtmPeerCfgSessionProtocol"), ("CISCO-VOICE-ATM-DIAL-CONTROL-MIB", "cvAtmPeerCfgInterfaceName"), ("CISCO-VOICE-ATM-DIAL-CONTROL-MIB", "cvAtmPeerCfgVpi"), ("CISCO-VOICE-ATM-DIAL-CONTROL-MIB", "cvAtmPeerCfgVci"), ("CISCO-VOICE-ATM-DIAL-CONTROL-MIB", "cvAtmPeerCfgVcName"), ("CISCO-VOICE-ATM-DIAL-CONTROL-MIB", "cvAtmPeerCfgCoderRate"), ("CISCO-VOICE-ATM-DIAL-CONTROL-MIB", "cvAtmPeerCfgCodecBytes"), ("CISCO-VOICE-ATM-DIAL-CONTROL-MIB", "cvAtmPeerCfgFaxRate"), ("CISCO-VOICE-ATM-DIAL-CONTROL-MIB", "cvAtmPeerCfgFaxBytes"), ("CISCO-VOICE-ATM-DIAL-CONTROL-MIB", "cvAtmPeerCfgInBandSignaling"), ("CISCO-VOICE-ATM-DIAL-CONTROL-MIB", "cvAtmPeerCfgVADEnable"), ("CISCO-VOICE-ATM-DIAL-CONTROL-MIB", "cvAtmPeerCfgUseSeqNumbers"), ("CISCO-VOICE-ATM-DIAL-CONTROL-MIB", "cvAtmPeerCfgDtmfRelay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cvAtmPeerCfgGroup = cvAtmPeerCfgGroup.setStatus('current')
if mibBuilder.loadTexts: cvAtmPeerCfgGroup.setDescription('A collection of objects providing the ATM Dialpeer capability. These objects have been implemented as read-only.')
mibBuilder.exportSymbols("CISCO-VOICE-ATM-DIAL-CONTROL-MIB", cvAtmPeerCfgFaxRate=cvAtmPeerCfgFaxRate, cvAtmCallActiveSessionTarget=cvAtmCallActiveSessionTarget, cvAtmCallHistoryGroup=cvAtmCallHistoryGroup, cvAtmCallHistoryUseSeqNumbers=cvAtmCallHistoryUseSeqNumbers, ciscoVoiceAtmDialControlMIBConformance=ciscoVoiceAtmDialControlMIBConformance, cvAtmPeerCfgGroup=cvAtmPeerCfgGroup, cvAtmCallHistoryVpi=cvAtmCallHistoryVpi, cvAtmCallActiveVpi=cvAtmCallActiveVpi, cvAtmCallActiveDtmfRelay=cvAtmCallActiveDtmfRelay, cvAtmCallHistorySessionTarget=cvAtmCallHistorySessionTarget, cvAtmCallActiveSubchannelID=cvAtmCallActiveSubchannelID, cvAtmCallHistoryEntry=cvAtmCallHistoryEntry, cvAtmCallActiveUseSeqNumbers=cvAtmCallActiveUseSeqNumbers, cvAtmPeerCfgTable=cvAtmPeerCfgTable, cvAtmCallHistoryConnectionId=cvAtmCallHistoryConnectionId, cvAtmCallActiveSessionProtocol=cvAtmCallActiveSessionProtocol, cvAtmCallActive=cvAtmCallActive, cvAtmPeerCfgVci=cvAtmPeerCfgVci, ciscoVoiceAtmDialControlMIBNotifications=ciscoVoiceAtmDialControlMIBNotifications, cvAtmCallActiveLowerIfName=cvAtmCallActiveLowerIfName, cvAtmCallHistoryTable=cvAtmCallHistoryTable, cvAtmCallActiveEntry=cvAtmCallActiveEntry, cvAtmCallActiveCalledNumber=cvAtmCallActiveCalledNumber, cvAtmPeerCfgInterfaceName=cvAtmPeerCfgInterfaceName, cvAtmCallActiveTable=cvAtmCallActiveTable, ciscoVoiceAtmDialControlMIB=ciscoVoiceAtmDialControlMIB, cvAtmCallHistorySessionProtocol=cvAtmCallHistorySessionProtocol, cvAtmPeerCfgVcName=cvAtmPeerCfgVcName, cvAtmCallHistoryDtmfRelay=cvAtmCallHistoryDtmfRelay, ciscoVoiceAtmDialControlMIBCompliance=ciscoVoiceAtmDialControlMIBCompliance, cvAtmPeerCfgEntry=cvAtmPeerCfgEntry, cvAtmPeerCfgCoderRate=cvAtmPeerCfgCoderRate, ciscoVoiceAtmDialControlMIBObjects=ciscoVoiceAtmDialControlMIBObjects, cvAtmCallActiveConnectionId=cvAtmCallActiveConnectionId, cvAtmPeerCfgSessionProtocol=cvAtmPeerCfgSessionProtocol, CvAtmSessionProtocol=CvAtmSessionProtocol, cvAtmDialPeer=cvAtmDialPeer, cvAtmPeerCfgInBandSignaling=cvAtmPeerCfgInBandSignaling, cvAtmPeerCfgFaxBytes=cvAtmPeerCfgFaxBytes, cvAtmPeerCfgVpi=cvAtmPeerCfgVpi, cvAtmCallHistoryVci=cvAtmCallHistoryVci, cvAtmPeerCfgUseSeqNumbers=cvAtmPeerCfgUseSeqNumbers, cvAtmPeerCfgVADEnable=cvAtmPeerCfgVADEnable, cvAtmPeerCfgDtmfRelay=cvAtmPeerCfgDtmfRelay, cvAtmCallActiveVci=cvAtmCallActiveVci, cvAtmCallHistoryCalledNumber=cvAtmCallHistoryCalledNumber, ciscoVoiceAtmDialControlMIBNotificationPrefix=ciscoVoiceAtmDialControlMIBNotificationPrefix, cvAtmPeerCfgCodecBytes=cvAtmPeerCfgCodecBytes, ciscoVoiceAtmDialControlMIBGroups=ciscoVoiceAtmDialControlMIBGroups, cvAtmCallHistoryLowerIfName=cvAtmCallHistoryLowerIfName, cvAtmCallActiveGroup=cvAtmCallActiveGroup, PYSNMP_MODULE_ID=ciscoVoiceAtmDialControlMIB, ciscoVoiceAtmDialControlMIBCompliances=ciscoVoiceAtmDialControlMIBCompliances, cvAtmCallHistory=cvAtmCallHistory, cvAtmCallHistorySubchannelID=cvAtmCallHistorySubchannelID)
