#
# PySNMP MIB module HUAWEI-BLS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-BLS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:43:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
mplsVpnVrfName, = mibBuilder.importSymbols("MPLS-VPN-MIB", "mplsVpnVrfName")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
NotificationType, Counter64, IpAddress, Gauge32, ObjectIdentity, TimeTicks, ModuleIdentity, Integer32, Bits, Unsigned32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter64", "IpAddress", "Gauge32", "ObjectIdentity", "TimeTicks", "ModuleIdentity", "Integer32", "Bits", "Unsigned32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter32")
TextualConvention, RowStatus, TruthValue, DateAndTime, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "TruthValue", "DateAndTime", "DisplayString")
hwBLS = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 8))
if mibBuilder.loadTexts: hwBLS.setLastUpdated('200304111150Z')
if mibBuilder.loadTexts: hwBLS.setOrganization('Huawei Technologies co.,Ltd.')
if mibBuilder.loadTexts: hwBLS.setContactInfo(' R&D BeiJing, Huawei Technologies co.,Ltd. Huawei Bld.,NO.3 Xinxi Rd., Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China Zip:100085 Http://www.huawei.com E-mail:support@huawei.com ')
if mibBuilder.loadTexts: hwBLS.setDescription(' V1.00 The blacklist mib is for all datacomm product. ')
class BlsAddReason(TextualConvention, Integer32):
    description = ' Descript the blacklist item added by manual or by system. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("reasonUnknow", 1), ("reasonManual", 2), ("reasonIPSweep", 3), ("reasonPortScan", 4))

hwBlsMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 8, 1))
hwBlsEnableFlag = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 8, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBlsEnableFlag.setStatus('current')
if mibBuilder.loadTexts: hwBlsEnableFlag.setDescription(' The blacklist function switch. 1: true(on) 2: false(off) ')
hwBlsBlackListTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 8, 1, 2), )
if mibBuilder.loadTexts: hwBlsBlackListTable.setStatus('current')
if mibBuilder.loadTexts: hwBlsBlackListTable.setDescription(' The blacklist table. ')
hwBlsBlackListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 8, 1, 2, 1), ).setIndexNames((0, "MPLS-VPN-MIB", "mplsVpnVrfName"), (0, "HUAWEI-BLS-MIB", "hwBlsItemIPAddress"))
if mibBuilder.loadTexts: hwBlsBlackListEntry.setStatus('current')
if mibBuilder.loadTexts: hwBlsBlackListEntry.setDescription(' The blacklist entry. ')
hwBlsItemIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 8, 1, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBlsItemIPAddress.setStatus('current')
if mibBuilder.loadTexts: hwBlsItemIPAddress.setDescription(' The packet source IP address. If match, drop the packet. ')
hwBlsItemAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 8, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBlsItemAge.setStatus('current')
if mibBuilder.loadTexts: hwBlsItemAge.setDescription(' The blacklist item aging time. This item will be deleted when overtime. The default value is 0, no aging. (unit:minutes)')
hwBlsItemAddReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 8, 1, 2, 1, 3), BlsAddReason()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBlsItemAddReason.setStatus('current')
if mibBuilder.loadTexts: hwBlsItemAddReason.setDescription(' The blacklist item is added by manual or by system. 1: manual 2: dynamic(system) ')
hwBlsItemAddTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 8, 1, 2, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBlsItemAddTime.setStatus('current')
if mibBuilder.loadTexts: hwBlsItemAddTime.setDescription(" The system time when add this blacklist item. It's automatically appended by system when create the item. (the seconds since 1970.)")
hwBlsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 8, 1, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwBlsRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwBlsRowStatus.setDescription(' Only support CreateAndGo and Destroy. ')
hwBlsFilterTypeSet = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 8, 1, 3))
hwBlsFilterType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 8, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBlsFilterType.setStatus('current')
if mibBuilder.loadTexts: hwBlsFilterType.setDescription(' The blacklist filter type. none(0x00) icmp(0x01) tcp(0x02) udp(0x04) others(0x08) all(0x0F) ')
hwBlsMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 8, 2))
hwBlsMibGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 8, 2, 1))
hwBlsEnableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 8, 2, 1, 1)).setObjects(("HUAWEI-BLS-MIB", "hwBlsEnableFlag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwBlsEnableGroup = hwBlsEnableGroup.setStatus('current')
if mibBuilder.loadTexts: hwBlsEnableGroup.setDescription('Blacklist function switch.')
hwBlsBlackListTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 8, 2, 1, 2)).setObjects(("HUAWEI-BLS-MIB", "hwBlsItemIPAddress"), ("HUAWEI-BLS-MIB", "hwBlsItemAge"), ("HUAWEI-BLS-MIB", "hwBlsItemAddReason"), ("HUAWEI-BLS-MIB", "hwBlsItemAddTime"), ("HUAWEI-BLS-MIB", "hwBlsRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwBlsBlackListTableGroup = hwBlsBlackListTableGroup.setStatus('current')
if mibBuilder.loadTexts: hwBlsBlackListTableGroup.setDescription('Blacklist table struct group.')
mibBuilder.exportSymbols("HUAWEI-BLS-MIB", BlsAddReason=BlsAddReason, hwBlsEnableFlag=hwBlsEnableFlag, PYSNMP_MODULE_ID=hwBLS, hwBlsBlackListTableGroup=hwBlsBlackListTableGroup, hwBlsItemAddTime=hwBlsItemAddTime, hwBlsItemAge=hwBlsItemAge, hwBlsRowStatus=hwBlsRowStatus, hwBlsFilterTypeSet=hwBlsFilterTypeSet, hwBlsMibConformance=hwBlsMibConformance, hwBlsMibGroup=hwBlsMibGroup, hwBlsEnableGroup=hwBlsEnableGroup, hwBlsMibObjects=hwBlsMibObjects, hwBLS=hwBLS, hwBlsBlackListTable=hwBlsBlackListTable, hwBlsFilterType=hwBlsFilterType, hwBlsItemAddReason=hwBlsItemAddReason, hwBlsItemIPAddress=hwBlsItemIPAddress, hwBlsBlackListEntry=hwBlsBlackListEntry)
