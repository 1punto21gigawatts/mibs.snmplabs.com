#
# PySNMP MIB module ACC-NOTIFICATION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ACC-NOTIFICATION-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:11:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
accCommon, = mibBuilder.importSymbols("ANDOVER-CONTROLS-MIB", "accCommon")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
iso, Bits, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Counter32, NotificationType, Gauge32, Integer32, ModuleIdentity, ObjectIdentity, MibIdentifier, IpAddress, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Bits", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Counter32", "NotificationType", "Gauge32", "Integer32", "ModuleIdentity", "ObjectIdentity", "MibIdentifier", "IpAddress", "Counter64")
RowStatus, DisplayString, StorageType, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "StorageType", "TextualConvention")
accNotificationMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 10829, 4, 1))
accNotificationMIB.setRevisions(('2002-10-30 09:46',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: accNotificationMIB.setRevisionsDescriptions(('Revision 1.0',))
if mibBuilder.loadTexts: accNotificationMIB.setLastUpdated('200210300946Z')
if mibBuilder.loadTexts: accNotificationMIB.setOrganization('Andover Controls Corporation')
if mibBuilder.loadTexts: accNotificationMIB.setContactInfo('Technical Support Andover Controls Corporation 300 Brickstone Square Andover, MA 01810 USA 978-470-0555')
if mibBuilder.loadTexts: accNotificationMIB.setDescription('This MIB module defines MIB objects which provide mechanisms to remotely configure the parameters used by an ACC NetController software for the generation of notifications.')
accNotifyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 10829, 4, 1, 1))
accNotifyList = MibIdentifier((1, 3, 6, 1, 4, 1, 10829, 4, 1, 1, 1))
accNotifyNumber = MibScalar((1, 3, 6, 1, 4, 1, 10829, 4, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: accNotifyNumber.setStatus('current')
if mibBuilder.loadTexts: accNotifyNumber.setDescription('count of entries in the Notify Table')
accNotifyTable = MibTable((1, 3, 6, 1, 4, 1, 10829, 4, 1, 1, 1, 2), )
if mibBuilder.loadTexts: accNotifyTable.setStatus('current')
if mibBuilder.loadTexts: accNotifyTable.setDescription('This table is used to select management targets which should receive notifications, as well as the type of notification which should be sent to each selected management target.')
accNotifyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10829, 4, 1, 1, 1, 2, 1), ).setIndexNames((0, "ACC-NOTIFICATION-MIB", "notifyIndex"))
if mibBuilder.loadTexts: accNotifyEntry.setStatus('current')
if mibBuilder.loadTexts: accNotifyEntry.setDescription('An entry in this table selects a set of management targets which should receive notifications, as well as the type of notification which should be sent to each selected management target.')
notifyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10829, 4, 1, 1, 1, 2, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notifyIndex.setStatus('current')
if mibBuilder.loadTexts: notifyIndex.setDescription('The locally arbitrary, but unique identifier associated with this accNotifyEntry.')
notifyAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 10829, 4, 1, 1, 1, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: notifyAddress.setStatus('current')
if mibBuilder.loadTexts: notifyAddress.setDescription('This object contains an IP Address as the destination of a notification')
notifyType = MibTableColumn((1, 3, 6, 1, 4, 1, 10829, 4, 1, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("trap", 1))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: notifyType.setStatus('current')
if mibBuilder.loadTexts: notifyType.setDescription('This object determines the type of notification to be generated. If the value of this object is none(0), then no messages will be generated. If the value of this object is trap(1), then any messages generated for selected rows will contain SNMPv2-Trap PDUs. ')
notifyStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 10829, 4, 1, 1, 1, 2, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: notifyStorageType.setStatus('current')
if mibBuilder.loadTexts: notifyStorageType.setDescription('The storage type for this conceptual row.')
notifyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10829, 4, 1, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inActive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: notifyRowStatus.setStatus('current')
if mibBuilder.loadTexts: notifyRowStatus.setDescription('The status of this conceptual row. To set a field, a manager must set the this object to inActive(2), then do the set. After finish, change it to active(1).')
accNotifyConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 10829, 4, 1, 3))
accNotifyCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 10829, 4, 1, 3, 1))
accNotifyBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 10829, 4, 1, 3, 1, 1)).setObjects(("ACC-NOTIFICATION-MIB", "accNotifyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    accNotifyBasicCompliance = accNotifyBasicCompliance.setStatus('current')
if mibBuilder.loadTexts: accNotifyBasicCompliance.setDescription('Module Compliance')
accNotifyGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 10829, 4, 1, 3, 2))
accNotifyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 10829, 4, 1, 3, 2, 1)).setObjects(("ACC-NOTIFICATION-MIB", "notifyIndex"), ("ACC-NOTIFICATION-MIB", "notifyAddress"), ("ACC-NOTIFICATION-MIB", "notifyType"), ("ACC-NOTIFICATION-MIB", "notifyStorageType"), ("ACC-NOTIFICATION-MIB", "notifyRowStatus"), ("ACC-NOTIFICATION-MIB", "accNotifyNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    accNotifyGroup = accNotifyGroup.setStatus('current')
if mibBuilder.loadTexts: accNotifyGroup.setDescription('A collection of objects for selecting which management targets are used for generating notifications, and the type of notification to be generated for each selected management target.')
mibBuilder.exportSymbols("ACC-NOTIFICATION-MIB", accNotifyNumber=accNotifyNumber, accNotificationMIB=accNotificationMIB, accNotifyObjects=accNotifyObjects, notifyType=notifyType, accNotifyConformance=accNotifyConformance, notifyAddress=notifyAddress, accNotifyGroup=accNotifyGroup, notifyIndex=notifyIndex, notifyStorageType=notifyStorageType, notifyRowStatus=notifyRowStatus, accNotifyGroups=accNotifyGroups, accNotifyList=accNotifyList, PYSNMP_MODULE_ID=accNotificationMIB, accNotifyBasicCompliance=accNotifyBasicCompliance, accNotifyTable=accNotifyTable, accNotifyEntry=accNotifyEntry, accNotifyCompliances=accNotifyCompliances)
