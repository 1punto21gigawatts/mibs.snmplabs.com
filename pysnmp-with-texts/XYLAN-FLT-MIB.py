#
# PySNMP MIB module XYLAN-FLT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XYLAN-FLT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:45:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
MacAddress, = mibBuilder.importSymbols("BRIDGE-MIB", "MacAddress")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, Counter64, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter32, ObjectIdentity, TimeTicks, NotificationType, Unsigned32, Gauge32, Integer32, Bits, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter64", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter32", "ObjectIdentity", "TimeTicks", "NotificationType", "Unsigned32", "Gauge32", "Integer32", "Bits", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
xylanFltArch, = mibBuilder.importSymbols("XYLAN-BASE-MIB", "xylanFltArch")
xylanFltStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 22, 1))
xylanFltStaticConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 22, 2))
xylanFltActiveConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 22, 3))
xylanFltTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 22, 4))
xylanFltActiveAdminState = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 22, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltActiveAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltActiveAdminState.setDescription('The current administrative state of the HRE-X filtering software.')
xylanFltActiveOperState = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 22, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("initializing", 0), ("active", 1), ("deactivating", 2), ("inactive", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltActiveOperState.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltActiveOperState.setDescription('The current operational state of the HRE-X filtering software. This is independent of the administrative state.')
xylanFltConfigAdminState = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanFltConfigAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltConfigAdminState.setDescription('The current configured administrative state of the HRE-X filtering software.')
xylanFltCommit = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 22, 1, 4), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: xylanFltCommit.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltCommit.setDescription('Commits the current configuration.')
xylanFltGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 22, 2, 1))
xylanFltServices = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 22, 2, 2))
xylanFltGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 22, 2, 3))
xylanFltGroupTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 22, 2, 1, 1), )
if mibBuilder.loadTexts: xylanFltGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltGroupTable.setDescription('Group entry for HRE-X filtering feature. This object contains a collection of Group objects when contain a list of filtering rules.')
xylanFltGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 22, 2, 1, 1, 1), ).setIndexNames((0, "XYLAN-FLT-MIB", "xylanFltGroupIndex"))
if mibBuilder.loadTexts: xylanFltGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltGroupEntry.setDescription('Each entry corresponds to one Group.')
xylanFltGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 2, 1, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(30, 30)).setFixedLength(30)).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltGroupIndex.setDescription('The group index which is the octet string of printable characters containing the name of the group.')
xylanFltGroupAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanFltGroupAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltGroupAdminState.setDescription('The current status of this group. active (1) means the route is functioning, delete (2) tells SNMP to delete the route ')
xylanFltGroupProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("na", 0), ("ip", 1), ("ipx", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanFltGroupProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltGroupProtocol.setDescription('The protocol type of the group. This has significance with the index of the OIDs of the rules in the group.')
xylanFltGroupAdrType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("na", 0), ("destination", 1), ("source", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanFltGroupAdrType.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltGroupAdrType.setDescription('This indicates which address is designated first. e.g. If destination is specified, the addresses the OIDs of the rules are ordered <destination> <source>. If the group is an IPX group, this indicator does not affect the OID.')
xylanFltRuleListTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 22, 2, 1, 2), )
if mibBuilder.loadTexts: xylanFltRuleListTable.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltRuleListTable.setDescription('The address and rule pairings.')
xylanFltRuleListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 22, 2, 1, 2, 1), ).setIndexNames((0, "XYLAN-FLT-MIB", "xylanFltGroupIndex"), (0, "XYLAN-FLT-MIB", "xylanFltRuleListIndex"))
if mibBuilder.loadTexts: xylanFltRuleListEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltRuleListEntry.setDescription('Each entry corresponds to one rule.')
xylanFltRuleListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 2, 1, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(47, 47)).setFixedLength(47)).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltRuleListIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltRuleListIndex.setDescription('Rule index is made up of the octets of the group name and the network addresses of the rule. It has the following format: IP - <group_name>,0,<adr-4 bytes><mask-4 bytes><adr-4bytes><mask-4 bytes> IPX - <group_name>,0,<net-4 bytes><node-6 bytes> ')
xylanFltRuleListAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanFltRuleListAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltRuleListAdminState.setDescription('The current status of this group. active (1) means the route is functioning, delete (2) tells SNMP to delete the route ')
xylanFltRuleListRule = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 2, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanFltRuleListRule.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltRuleListRule.setDescription('The rule for the address pair. 1) allows traffic for the addresses and 2) rejects all trafic for the pair.')
xylanFltServiceTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 22, 2, 2, 1), )
if mibBuilder.loadTexts: xylanFltServiceTable.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltServiceTable.setDescription('Service entry for HRE-X filtering feature. This object contains a collection of IP port numbers and filtering Group objects. Thus rules for different service such as FTP or Telnet may be defined.')
xylanFltServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 22, 2, 2, 1, 1), ).setIndexNames((0, "XYLAN-FLT-MIB", "xylanFltServiceIndex"))
if mibBuilder.loadTexts: xylanFltServiceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltServiceEntry.setDescription('Each entry corresponds to one service.')
xylanFltServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 2, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltServiceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltServiceIndex.setDescription('The index is made up of an octet string of ASCII characters containing the name of the service.')
xylanFltServiceAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanFltServiceAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltServiceAdminState.setDescription('The current status of this group. active (1) means the route is functioning, delete (2) tells SNMP to delete the route ')
xylanFltServiceNumberTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 22, 2, 2, 2), )
if mibBuilder.loadTexts: xylanFltServiceNumberTable.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltServiceNumberTable.setDescription('This table contains the port numbers associated with a particular service.')
xylanFltServiceNumberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 22, 2, 2, 2, 1), ).setIndexNames((0, "XYLAN-FLT-MIB", "xylanFltServiceIndex"), (0, "XYLAN-FLT-MIB", "xylanFltServiceNumberIndex"))
if mibBuilder.loadTexts: xylanFltServiceNumberEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltServiceNumberEntry.setDescription('Each entry corresponds to one port number.')
xylanFltServiceNumberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 2, 2, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(24, 24)).setFixedLength(24)).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltServiceNumberIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltServiceNumberIndex.setDescription('Service number index is made up of the octets of the group name and the port number: <service_name>,0,<port number-4 bytes>')
xylanFltServiceNumberAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanFltServiceNumberAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltServiceNumberAdminState.setDescription('The current status of this group. active (1) means the route is functioning, delete (2) tells SNMP to delete the route ')
xylanFltServiceGroupTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 22, 2, 2, 3), )
if mibBuilder.loadTexts: xylanFltServiceGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltServiceGroupTable.setDescription('This table contains the groups associated with a particular service.')
xylanFltServiceGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 22, 2, 2, 3, 1), ).setIndexNames((0, "XYLAN-FLT-MIB", "xylanFltServiceIndex"), (0, "XYLAN-FLT-MIB", "xylanFltServiceGroupIndex"))
if mibBuilder.loadTexts: xylanFltServiceGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltServiceGroupEntry.setDescription('Each entry corresponds to one group.')
xylanFltServiceGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 2, 2, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(44, 44)).setFixedLength(44)).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltServiceGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltServiceGroupIndex.setDescription('Service group index is made up of the octets of the service name and the group name: <service_name>,0,<group name>')
xylanFltServiceGroupAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 2, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanFltServiceGroupAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltServiceGroupAdminState.setDescription('The current status of this group. active (1) means the route is functioning, delete (2) tells SNMP to delete the route ')
xylanFltGlobalIPRule = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 22, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanFltGlobalIPRule.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltGlobalIPRule.setDescription('Global IP rule.')
xylanFltGlobalIPXRule = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 22, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanFltGlobalIPXRule.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltGlobalIPXRule.setDescription('Global IPX rule.')
xylanFltGlobalPrecedence = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 22, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("destination", 1), ("source", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanFltGlobalPrecedence.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltGlobalPrecedence.setDescription('Global rule precedence (tie breaker).')
xylanFltGlobalGroupTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 22, 2, 3, 4), )
if mibBuilder.loadTexts: xylanFltGlobalGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltGlobalGroupTable.setDescription('List of active groups.')
xylanFltGlobalGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 22, 2, 3, 4, 1), ).setIndexNames((0, "XYLAN-FLT-MIB", "xylanFltGlobalGroupIndex"))
if mibBuilder.loadTexts: xylanFltGlobalGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltGlobalGroupEntry.setDescription('Each entry corresponds to one group.')
xylanFltGlobalGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 2, 3, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(44, 44)).setFixedLength(44)).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltGlobalGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltGlobalGroupIndex.setDescription('Global group index is made up of the octets of the group name.')
xylanFltGlobalGroupAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 2, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanFltGlobalGroupAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltGlobalGroupAdminState.setDescription('The current status of this group. active (1) means the route is functioning, delete (2) tells SNMP to delete the route ')
xylanFltGlobalServiceTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 22, 2, 3, 5), )
if mibBuilder.loadTexts: xylanFltGlobalServiceTable.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltGlobalServiceTable.setDescription('List of active services.')
xylanFltGlobalServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 22, 2, 3, 5, 1), ).setIndexNames((0, "XYLAN-FLT-MIB", "xylanFltGlobalServiceIndex"))
if mibBuilder.loadTexts: xylanFltGlobalServiceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltGlobalServiceEntry.setDescription('Each entry corresponds to one service.')
xylanFltGlobalServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 2, 3, 5, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(44, 44)).setFixedLength(44)).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltGlobalServiceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltGlobalServiceIndex.setDescription('Global service index is made up of the octets of the service name.')
xylanFltGlobalServiceAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 2, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanFltGlobalServiceAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltGlobalServiceAdminState.setDescription('The current status of this service. active (1) means the route is functioning, delete (2) tells SNMP to delete the route ')
xylanFltIpServicePortTbl = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 22, 3, 1), )
if mibBuilder.loadTexts: xylanFltIpServicePortTbl.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltIpServicePortTbl.setDescription('Table that maps a service name to the list of TCP ports it represents.')
xylanFltIpServicePortTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 22, 3, 1, 1), ).setIndexNames((0, "XYLAN-FLT-MIB", "xylanFltIpServicePortName"), (0, "XYLAN-FLT-MIB", "xylanFltIpServicePortNumber"))
if mibBuilder.loadTexts: xylanFltIpServicePortTblEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltIpServicePortTblEntry.setDescription('Entry in table that maps a service name to the list of TCP ports it represents.')
xylanFltIpServicePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltIpServicePortName.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltIpServicePortName.setDescription('Name of service for HRE-X Filtering Engine.')
xylanFltIpServicePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltIpServicePortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltIpServicePortNumber.setDescription('TCP port number assigned to a service for HRE-X Filtering Engine.')
xylanFltIpServiceRuleTbl = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 22, 3, 2), )
if mibBuilder.loadTexts: xylanFltIpServiceRuleTbl.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltIpServiceRuleTbl.setDescription('Table that maps a service name to the list of filtering rules. This includes the special service, GLOBAL, which is comprised of the global rules.')
xylanFltIpServiceRuleTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 22, 3, 2, 1), ).setIndexNames((0, "XYLAN-FLT-MIB", "xylanFltIpServiceRuleName"), (0, "XYLAN-FLT-MIB", "xylanFltIpServiceRuleID"))
if mibBuilder.loadTexts: xylanFltIpServiceRuleTblEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltIpServiceRuleTblEntry.setDescription('Entry in table that maps a service name (or GLOBAL for global rules to its list of filtering rules.')
xylanFltIpServiceRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 3, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltIpServiceRuleName.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltIpServiceRuleName.setDescription('Name of service (or Global for global rules) for HRE-X Filtering Engine.')
xylanFltIpServiceRuleID = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltIpServiceRuleID.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltIpServiceRuleID.setDescription('Rule ID for filtering rule.')
xylanFltIpServiceRuleDest = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 3, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltIpServiceRuleDest.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltIpServiceRuleDest.setDescription('Destination address for the filtering rule.')
xylanFltIpServiceRuleDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 3, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltIpServiceRuleDestMask.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltIpServiceRuleDestMask.setDescription('The destination address mask.')
xylanFltIpServiceRuleSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 3, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltIpServiceRuleSrc.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltIpServiceRuleSrc.setDescription('Source address for the filtering rule.')
xylanFltIpServiceRuleSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 3, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltIpServiceRuleSrcMask.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltIpServiceRuleSrcMask.setDescription('The source address mask.')
xylanFltIpServiceRuleDisp = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltIpServiceRuleDisp.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltIpServiceRuleDisp.setDescription('The disposition for the filtering rule.')
xylanFltIpServiceRuleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltIpServiceRuleCount.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltIpServiceRuleCount.setDescription('The number of times the filtering rule has been applied.')
xylanFltIpServiceRuleGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 3, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltIpServiceRuleGroup.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltIpServiceRuleGroup.setDescription('Name of group in which the filtering rule is defined.')
xylanFltIpxRuleTbl = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 22, 3, 3), )
if mibBuilder.loadTexts: xylanFltIpxRuleTbl.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltIpxRuleTbl.setDescription('Table of IPX filtering rules.')
xylanFltIpxRuleTblEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 22, 3, 3, 1), ).setIndexNames((0, "XYLAN-FLT-MIB", "xylanFltIpxRuleType"), (0, "XYLAN-FLT-MIB", "xylanFltIpxRuleID"))
if mibBuilder.loadTexts: xylanFltIpxRuleTblEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltIpxRuleTblEntry.setDescription('Entry in table of IPX filtering rules.')
xylanFltIpxRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 0), ("full-address", 1), ("node", 2), ("network", 3), ("global", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltIpxRuleType.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltIpxRuleType.setDescription('IPX rules are categorized into four types: Full Address - both the network number and node must match for the rule to be applied Node - only the node must match for the rule to be applied Network - only the network number must match for the rule to be applied Global - this rule type always matches Full Address has the highest precedence, followed by Node, Network, and then Global.')
xylanFltIpxRuleID = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 3, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltIpxRuleID.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltIpxRuleID.setDescription('Rule ID for filtering rule.')
xylanFltIpxRuleNet = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 3, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltIpxRuleNet.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltIpxRuleNet.setDescription('Destination IPX network.')
xylanFltIpxRuleNode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 3, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltIpxRuleNode.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltIpxRuleNode.setDescription('Destination IPX node.')
xylanFltIpxRuleDisp = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltIpxRuleDisp.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltIpxRuleDisp.setDescription('The disposition for the filtering rule.')
xylanFltIpxRuleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltIpxRuleCount.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltIpxRuleCount.setDescription('The number of times the filtering rule has been applied.')
xylanFltIpxRuleGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 3, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltIpxRuleGroup.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltIpxRuleGroup.setDescription('Name of group in which the filtering rule is defined.')
xylanFltIpQueries = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 22, 3, 4), )
if mibBuilder.loadTexts: xylanFltIpQueries.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltIpQueries.setDescription('IP flow result queries.')
xylanFltIpQuery = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 22, 3, 4, 1), ).setIndexNames((0, "XYLAN-FLT-MIB", "xylanFltIpQueryDest"), (0, "XYLAN-FLT-MIB", "xylanFltIpQuerySrc"), (0, "XYLAN-FLT-MIB", "xylanFltIpQueryPort"))
if mibBuilder.loadTexts: xylanFltIpQuery.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltIpQuery.setDescription('IP flow result query.')
xylanFltIpQueryDest = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 3, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltIpQueryDest.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltIpQueryDest.setDescription('Destination IP address to be used in the query.')
xylanFltIpQuerySrc = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 3, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltIpQuerySrc.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltIpQuerySrc.setDescription('Source IP address to be used in the query.')
xylanFltIpQueryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltIpQueryPort.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltIpQueryPort.setDescription('Destination TCP port to be used in the query. 0 is an indication to not use the port.')
xylanFltIpQueryDisp = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltIpQueryDisp.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltIpQueryDisp.setDescription('The disposition that results from the query.')
xylanFltIpQueryService = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 3, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltIpQueryService.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltIpQueryService.setDescription('Service that contains the rule that is applied to determine the disposition of the query. The empty string indicates no rule applied.')
xylanFltIpQueryRuleID = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 3, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltIpQueryRuleID.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltIpQueryRuleID.setDescription('Rule ID used to determine the disposition for the query. -1 indicates no rule applied.')
xylanFltIpxQueries = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 22, 3, 5), )
if mibBuilder.loadTexts: xylanFltIpxQueries.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltIpxQueries.setDescription('IPX flow result queries.')
xylanFltIpxQuery = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 22, 3, 5, 1), ).setIndexNames((0, "XYLAN-FLT-MIB", "xylanFltIpxQueryNetwork"), (0, "XYLAN-FLT-MIB", "xylanFltIpxQueryNode"))
if mibBuilder.loadTexts: xylanFltIpxQuery.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltIpxQuery.setDescription('IPX flow result query.')
xylanFltIpxQueryNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 3, 5, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltIpxQueryNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltIpxQueryNetwork.setDescription('Destination IPX network for query.')
xylanFltIpxQueryNode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 3, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltIpxQueryNode.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltIpxQueryNode.setDescription('Destination IPX node for query.')
xylanFltIpxQueryDisp = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltIpxQueryDisp.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltIpxQueryDisp.setDescription('The disposition that results from the query.')
xylanFltIpxQueryRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("no-rule-applies", 0), ("full-address", 1), ("node", 2), ("network", 3), ("global", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltIpxQueryRuleType.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltIpxQueryRuleType.setDescription('IPX rules are categorized into four types: Full Address - both the network number and node must match for the rule to be applied Node - only the node must match for the rule to be applied Network - only the network number must match for the rule to be applied Global - this rule type always matches Full Address has the highest precedence, followed by Node, Network, and then Global.')
xylanFltIpxQueryRuleID = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 22, 3, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltIpxQueryRuleID.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltIpxQueryRuleID.setDescription('Rule ID used to determine the disposition for the query. -1 is used when no rule applied.')
xylanFltActDefaultIpDisp = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 22, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltActDefaultIpDisp.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltActDefaultIpDisp.setDescription('The current default IP disposition if no other rule applies.')
xylanFltActIpPrecedence = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 22, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("destination", 1), ("source", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltActIpPrecedence.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltActIpPrecedence.setDescription('The current precedence for IP rules.')
xylanFltActDefaultIpxDisp = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 22, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltActDefaultIpxDisp.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltActDefaultIpxDisp.setDescription('The current default IPX disposition if no other rule applies.')
xylanFltIpTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 22, 4, 1))
xylanFltLastIpDenySrc = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 22, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltLastIpDenySrc.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltLastIpDenySrc.setDescription('Source IP address for last denied route by HRE-X Filtering.')
xylanFltLastIpDenyDest = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 22, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltLastIpDenyDest.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltLastIpDenyDest.setDescription('Destination IP address for last denied route by HRE-X Filtering.')
xylanFltLastIpDenyPort = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 22, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltLastIpDenyPort.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltLastIpDenyPort.setDescription('Destination IP address for last denied route by HRE-X Filtering.')
xylanFltIpxTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 22, 4, 2))
xylanFltLastIpxDenyNet = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 22, 4, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltLastIpxDenyNet.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltLastIpxDenyNet.setDescription('Destination IPX network for last denied route by HRE-X Filtering.')
xylanFltLastIpxDenyNode = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 22, 4, 2, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltLastIpxDenyNode.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltLastIpxDenyNode.setDescription('Destination IPX node for last denied route by HRE-X Filtering.')
xylanFltCommitTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 22, 4, 3))
xylanFltLastCommitTrapReason = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 22, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("no-trap-sent", 0), ("service-not-found", 1), ("group-not-found", 2), ("ipx-in-non-global-group", 3), ("port-in-two-services", 4), ("duplicate-service-names", 5), ("same-ipx-address-for-two-rules", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltLastCommitTrapReason.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltLastCommitTrapReason.setDescription('The reason for the last HRE-X Filtering COMMIT trap; the valid reasons are: 0 - No trap has been sent. 1 - A service that was referenced from the global configuration could not be found. 2 - A group that was referenced from the GLOBAL level or some other service could not be found. 3 - An IPX rule was found in a group assigned to a service rather than the GLOBAL level. 4 - The same port was assigned to two services. 5 - The same service name appears twice. 6 - The same IPX address has two rules associated with it.')
xylanFltLastCommitTrapEntity1 = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 22, 4, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltLastCommitTrapEntity1.setStatus('mandatory')
if mibBuilder.loadTexts: xylanFltLastCommitTrapEntity1.setDescription('An entity associated with the last HRE-X Filtering COMMIT trap; the value depends on the value of the last xylanFltLastCommitTrapReason. These are: 0 - The data is invalid. 1 - The name of the service that was referenced. 2 - The name of the service that referenced the group. 3 - The name of the service that contained the IPX rule. 4 - The name of the first service to include the port. This service will retain the port. 5 - The service name that appears twice. 6 - The name of the group that contains the second rule for the same IPX address.')
xylanFltLastCommitTrapEntity2 = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 22, 4, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltLastCommitTrapEntity2.setStatus('optional')
if mibBuilder.loadTexts: xylanFltLastCommitTrapEntity2.setDescription('An entity associated with the last HRE-X Filtering COMMIT trap; the value depends on the value of the last xylanFltLastCommitTrapReason. These are: 0 - The data is invalid. 1 - This data item is unused. 2 - The name of the group that could not be found. 3 - The name of the group that contained the IPX rule. 4 - The name of the second service to include the port. This service will not retain the port. 5 - This data item is unused. 6 - The name of the group that contains the first rule for an IPX address for which there is a duplicate.')
xylanFltLastCommitTrapPort = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 22, 4, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltLastCommitTrapPort.setStatus('optional')
if mibBuilder.loadTexts: xylanFltLastCommitTrapPort.setDescription('The port number associated with the last HRE-X Filtering COMMIT trap; the value depends on the value of the last xylanFltLastCommitTrapReason. These are: 0 - The data is invalid. 1 - This data item is unused. 2 - This data item is unused. 3 - This data item is unused. 4 - The port that was assigned to two services. 5 - This data item is unused. 6 - This data item is unused.')
xylanFltLastCommitTrapIpxNet = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 22, 4, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltLastCommitTrapIpxNet.setStatus('optional')
if mibBuilder.loadTexts: xylanFltLastCommitTrapIpxNet.setDescription('Destination IPX network for last HRE-X Filtering COMMIT trap; the value depends on the value of the last xylanFltLastCommitTrapReason. These are: 0 - The data is invalid. 1 - This data item is unused. 2 - This data item is unused. 3 - This data item is unused. 4 - This data item is unused. 5 - This data item is unused. 6 - Contains the IPX network number for which there was a duplicate rule.')
xylanFltLastCommitTrapIpxNode = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 22, 4, 3, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanFltLastCommitTrapIpxNode.setStatus('optional')
if mibBuilder.loadTexts: xylanFltLastCommitTrapIpxNode.setDescription('Destination IPX node for last HRE-X Filtering COMMIT trap; the value depends on the value of the last xylanFltLastCommitTrapReason. These are: 0 - The data is invalid. 1 - This data item is unused. 2 - This data item is unused. 3 - This data item is unused. 4 - This data item is unused. 5 - This data item is unused. 6 - Contains the IPX node address for which there was a duplicate rule.')
mibBuilder.exportSymbols("XYLAN-FLT-MIB", xylanFltLastIpDenySrc=xylanFltLastIpDenySrc, xylanFltIpQuerySrc=xylanFltIpQuerySrc, xylanFltStatus=xylanFltStatus, xylanFltServiceNumberIndex=xylanFltServiceNumberIndex, xylanFltServiceAdminState=xylanFltServiceAdminState, xylanFltLastCommitTrapReason=xylanFltLastCommitTrapReason, xylanFltIpxQueries=xylanFltIpxQueries, xylanFltGroupTable=xylanFltGroupTable, xylanFltServiceGroupAdminState=xylanFltServiceGroupAdminState, xylanFltServiceNumberTable=xylanFltServiceNumberTable, xylanFltActiveAdminState=xylanFltActiveAdminState, xylanFltRuleListRule=xylanFltRuleListRule, xylanFltGroups=xylanFltGroups, xylanFltGlobalGroupEntry=xylanFltGlobalGroupEntry, xylanFltServiceNumberAdminState=xylanFltServiceNumberAdminState, xylanFltLastCommitTrapIpxNet=xylanFltLastCommitTrapIpxNet, xylanFltGroupEntry=xylanFltGroupEntry, xylanFltIpServiceRuleSrcMask=xylanFltIpServiceRuleSrcMask, xylanFltLastIpxDenyNode=xylanFltLastIpxDenyNode, xylanFltIpQueryRuleID=xylanFltIpQueryRuleID, xylanFltIpServiceRuleTblEntry=xylanFltIpServiceRuleTblEntry, xylanFltGlobalServiceAdminState=xylanFltGlobalServiceAdminState, xylanFltConfigAdminState=xylanFltConfigAdminState, xylanFltGlobalPrecedence=xylanFltGlobalPrecedence, xylanFltGlobalServiceTable=xylanFltGlobalServiceTable, xylanFltGlobalServiceIndex=xylanFltGlobalServiceIndex, xylanFltIpServicePortNumber=xylanFltIpServicePortNumber, xylanFltIpxQueryRuleType=xylanFltIpxQueryRuleType, xylanFltIpxQuery=xylanFltIpxQuery, xylanFltIpxRuleNode=xylanFltIpxRuleNode, xylanFltServiceTable=xylanFltServiceTable, xylanFltGlobalGroupTable=xylanFltGlobalGroupTable, xylanFltIpQueryService=xylanFltIpQueryService, xylanFltIpxQueryRuleID=xylanFltIpxQueryRuleID, xylanFltIpxRuleGroup=xylanFltIpxRuleGroup, xylanFltIpxRuleCount=xylanFltIpxRuleCount, xylanFltServiceGroupIndex=xylanFltServiceGroupIndex, xylanFltLastCommitTrapPort=xylanFltLastCommitTrapPort, xylanFltGlobalIPXRule=xylanFltGlobalIPXRule, xylanFltIpServiceRuleTbl=xylanFltIpServiceRuleTbl, xylanFltIpQueryDest=xylanFltIpQueryDest, xylanFltIpxQueryDisp=xylanFltIpxQueryDisp, xylanFltGroupAdminState=xylanFltGroupAdminState, xylanFltIpxQueryNode=xylanFltIpxQueryNode, xylanFltIpxTrapInfo=xylanFltIpxTrapInfo, xylanFltIpxRuleID=xylanFltIpxRuleID, xylanFltIpServiceRuleName=xylanFltIpServiceRuleName, xylanFltIpxRuleTbl=xylanFltIpxRuleTbl, xylanFltLastIpDenyPort=xylanFltLastIpDenyPort, xylanFltServices=xylanFltServices, xylanFltCommitTrapInfo=xylanFltCommitTrapInfo, xylanFltServiceIndex=xylanFltServiceIndex, xylanFltIpQueryPort=xylanFltIpQueryPort, xylanFltIpxRuleNet=xylanFltIpxRuleNet, xylanFltIpxQueryNetwork=xylanFltIpxQueryNetwork, xylanFltIpServiceRuleCount=xylanFltIpServiceRuleCount, xylanFltGlobalGroupAdminState=xylanFltGlobalGroupAdminState, xylanFltGroupIndex=xylanFltGroupIndex, xylanFltGroupProtocol=xylanFltGroupProtocol, xylanFltIpQuery=xylanFltIpQuery, xylanFltIpServiceRuleSrc=xylanFltIpServiceRuleSrc, xylanFltServiceEntry=xylanFltServiceEntry, xylanFltIpServicePortName=xylanFltIpServicePortName, xylanFltLastIpDenyDest=xylanFltLastIpDenyDest, xylanFltGlobalIPRule=xylanFltGlobalIPRule, xylanFltActDefaultIpxDisp=xylanFltActDefaultIpxDisp, xylanFltIpQueries=xylanFltIpQueries, xylanFltGlobals=xylanFltGlobals, xylanFltRuleListEntry=xylanFltRuleListEntry, xylanFltIpxRuleTblEntry=xylanFltIpxRuleTblEntry, xylanFltIpServicePortTbl=xylanFltIpServicePortTbl, xylanFltRuleListTable=xylanFltRuleListTable, xylanFltStaticConfig=xylanFltStaticConfig, xylanFltIpServiceRuleID=xylanFltIpServiceRuleID, xylanFltIpServiceRuleDisp=xylanFltIpServiceRuleDisp, xylanFltServiceGroupTable=xylanFltServiceGroupTable, xylanFltActDefaultIpDisp=xylanFltActDefaultIpDisp, xylanFltActIpPrecedence=xylanFltActIpPrecedence, xylanFltIpxRuleDisp=xylanFltIpxRuleDisp, xylanFltIpTrapInfo=xylanFltIpTrapInfo, xylanFltServiceNumberEntry=xylanFltServiceNumberEntry, xylanFltIpxRuleType=xylanFltIpxRuleType, xylanFltActiveConfig=xylanFltActiveConfig, xylanFltLastCommitTrapEntity2=xylanFltLastCommitTrapEntity2, xylanFltIpServiceRuleDestMask=xylanFltIpServiceRuleDestMask, xylanFltGroupAdrType=xylanFltGroupAdrType, xylanFltIpQueryDisp=xylanFltIpQueryDisp, xylanFltLastCommitTrapEntity1=xylanFltLastCommitTrapEntity1, xylanFltActiveOperState=xylanFltActiveOperState, xylanFltCommit=xylanFltCommit, xylanFltLastIpxDenyNet=xylanFltLastIpxDenyNet, xylanFltLastCommitTrapIpxNode=xylanFltLastCommitTrapIpxNode, xylanFltServiceGroupEntry=xylanFltServiceGroupEntry, xylanFltIpServicePortTblEntry=xylanFltIpServicePortTblEntry, xylanFltRuleListIndex=xylanFltRuleListIndex, xylanFltTraps=xylanFltTraps, xylanFltRuleListAdminState=xylanFltRuleListAdminState, xylanFltGlobalServiceEntry=xylanFltGlobalServiceEntry, xylanFltIpServiceRuleGroup=xylanFltIpServiceRuleGroup, xylanFltGlobalGroupIndex=xylanFltGlobalGroupIndex, xylanFltIpServiceRuleDest=xylanFltIpServiceRuleDest)
