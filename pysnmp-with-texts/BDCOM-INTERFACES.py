#
# PySNMP MIB module BDCOM-INTERFACES (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BDCOM-INTERFACES
# Produced by pysmi-0.3.4 at Wed May  1 11:36:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
bdlocal, = mibBuilder.importSymbols("BDCOM-SMI", "bdlocal")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Gauge32, ObjectIdentity, Counter32, IpAddress, iso, ModuleIdentity, NotificationType, Bits, Unsigned32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Gauge32", "ObjectIdentity", "Counter32", "IpAddress", "iso", "ModuleIdentity", "NotificationType", "Bits", "Unsigned32", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
bdlinterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 3320, 2, 2))
bdlifTable = MibTable((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1), )
if mibBuilder.loadTexts: bdlifTable.setStatus('mandatory')
if mibBuilder.loadTexts: bdlifTable.setDescription('A list of interface entries.')
bdlifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: bdlifEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bdlifEntry.setDescription('A collection of additional objects in the BDCom interface.')
bdlocIfHardType = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfHardType.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfHardType.setDescription('Returns the type of interface.')
bdlocIfLineProt = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfLineProt.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfLineProt.setDescription('Boolean whether interface line protocol is up or not.')
bdlocIfLastIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfLastIn.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfLastIn.setDescription('Elapsed time in milliseconds since last line protocol input packet was received.')
bdlocIfLastOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfLastOut.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfLastOut.setDescription('Elapsed time in milliseconds since last line protocol output packet was transmitted.')
bdlocIfLastOutHang = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfLastOutHang.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfLastOutHang.setDescription('Elapsed time in milliseconds since last line protocol output packet could not be successfully transmitted.')
bdlocIfInBitsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfInBitsSec.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfInBitsSec.setDescription('Five minute exponentially-decayed moving average of input bits per second.')
bdlocIfInPktsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfInPktsSec.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfInPktsSec.setDescription('Five minute exponentially-decayed moving average of input packets per second.')
bdlocIfOutBitsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfOutBitsSec.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfOutBitsSec.setDescription('Five minute exponentially-decayed moving average of output bits per second.')
bdlocIfOutPktsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfOutPktsSec.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfOutPktsSec.setDescription('Five minute exponentially-decayed moving average of output packets per second.')
bdlocIfInRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfInRunts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfInRunts.setDescription('Number of packets input which were smaller then the allowable physical media permitted.')
bdlocIfInGiants = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfInGiants.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfInGiants.setDescription('Number of input packets which were larger then the physical media permitted.')
bdlocIfInCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfInCRC.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfInCRC.setDescription('Number of input packets which had cyclic redundancy checksum errors.')
bdlocIfInFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfInFrame.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfInFrame.setDescription('Number of input packet which were misaligned.')
bdlocIfInOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfInOverrun.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfInOverrun.setDescription('Count of input which arrived too quickly for the to hardware receive.')
bdlocIfInIgnored = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfInIgnored.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfInIgnored.setDescription('Number of input packets which were simply ignored by this interface.')
bdlocIfInAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfInAbort.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfInAbort.setDescription('Number of input packets which were aborted.')
bdlocIfResets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfResets.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfResets.setDescription('Number of times the interface internally reset.')
bdlocIfRestarts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfRestarts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfRestarts.setDescription('Number of times interface needed to be completely restarted.')
bdlocIfKeep = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfKeep.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfKeep.setDescription('Boolean whether keepalives are enabled on this interface.')
bdlocIfReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfReason.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfReason.setDescription('Reason for interface last status change.')
bdlocIfCarTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfCarTrans.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfCarTrans.setDescription('Number of times interface saw the carrier signal transition.')
bdlocIfReliab = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfReliab.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfReliab.setDescription('The reliability of the interface. Used by IGRP.')
bdlocIfDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfDelay.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfDelay.setDescription('The amount of delay in microseconds of the interface. Used by IGRP.')
bdlocIfLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfLoad.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfLoad.setDescription('The loading factor of the interface. Used by IGRP.')
bdlocIfCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfCollisions.setDescription('The number of output collisions detected on this interface.')
bdlocIfInputQueueDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfInputQueueDrops.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfInputQueueDrops.setDescription('The number of packets dropped because the input queue was full.')
bdlocIfOutputQueueDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfOutputQueueDrops.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfOutputQueueDrops.setDescription('The number of packets dropped because the output queue was full.')
bdlocIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bdlocIfDescr.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfDescr.setDescription('User configurable interface description.')
bdlocIfSlowInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfSlowInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfSlowInPkts.setDescription('Packet count for Inbound traffic routed with slow switching')
bdlocIfSlowOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfSlowOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfSlowOutPkts.setDescription('Packet count for Outbound traffic routed with slow switching')
bdlocIfSlowInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfSlowInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfSlowInOctets.setDescription('Octet count for Inbound traffic routed with slow switching')
bdlocIfSlowOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfSlowOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfSlowOutOctets.setDescription('Octet count for Outbound traffic routed with slow switching')
bdlocIfFastInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfFastInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfFastInPkts.setDescription('Packet count for Inbound traffic routed with fast switching')
bdlocIfFastOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfFastOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfFastOutPkts.setDescription('Packet count for Outbound traffic routed with fast switching')
bdlocIfFastInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfFastInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfFastInOctets.setDescription('Octet count for Inbound traffic routed with fast switching')
bdlocIfFastOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfFastOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfFastOutOctets.setDescription('Octet count for Outbound traffic routed with fast switching')
bdlocIfotherInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfotherInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfotherInPkts.setDescription('Other protocol input packet count')
bdlocIfotherOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfotherOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfotherOutPkts.setDescription('Other protocol output packet count')
bdlocIfotherInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfotherInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfotherInOctets.setDescription('Other protocol input octet count')
bdlocIfotherOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfotherOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfotherOutOctets.setDescription('Other protocol output octet count')
bdlocIfipInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfipInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfipInPkts.setDescription('ip protocol input packet count')
bdlocIfipOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfipOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfipOutPkts.setDescription('ip protocol output packet count')
bdlocIfipInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfipInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfipInOctets.setDescription('ip protocol input octet count')
bdlocIfipOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfipOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfipOutOctets.setDescription('ip protocol output octet count')
bdlocIfdecnetInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfdecnetInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfdecnetInPkts.setDescription('Decnet protocol input packet count')
bdlocIfdecnetOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfdecnetOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfdecnetOutPkts.setDescription('Decnet protocol output packet count')
bdlocIfdecnetInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfdecnetInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfdecnetInOctets.setDescription('Decnet protocol input byte count')
bdlocIfdecnetOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfdecnetOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfdecnetOutOctets.setDescription('Decnet protocol output byte count')
bdlocIfxnsInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfxnsInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfxnsInPkts.setDescription('XNS protocol input packet count')
bdlocIfxnsOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfxnsOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfxnsOutPkts.setDescription('XNS protocol output packet count')
bdlocIfxnsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfxnsInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfxnsInOctets.setDescription('XNS protocol input byte count')
bdlocIfxnsOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfxnsOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfxnsOutOctets.setDescription('XNS protocol output byte count')
bdlocIfclnsInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfclnsInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfclnsInPkts.setDescription('CLNS protocol input packet count')
bdlocIfclnsOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfclnsOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfclnsOutPkts.setDescription('CLNS protocol output packet count')
bdlocIfclnsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfclnsInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfclnsInOctets.setDescription('CLNS protocol input byte count')
bdlocIfclnsOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfclnsOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfclnsOutOctets.setDescription('CLNS protocol output byte count')
bdlocIfappletalkInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfappletalkInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfappletalkInPkts.setDescription('Appletalk protocol input packet count')
bdlocIfappletalkOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfappletalkOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfappletalkOutPkts.setDescription('Appletalk protocol output packet count')
bdlocIfappletalkInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfappletalkInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfappletalkInOctets.setDescription('Appletalk protocol input octet count')
bdlocIfappletalkOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfappletalkOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfappletalkOutOctets.setDescription('Appletalk protocol output octet count')
bdlocIfnovellInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfnovellInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfnovellInPkts.setDescription('Novell protocol input packet count')
bdlocIfnovellOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfnovellOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfnovellOutPkts.setDescription('Novell protocol output packet count')
bdlocIfnovellInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfnovellInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfnovellInOctets.setDescription('Novell protocol input octet count')
bdlocIfnovellOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfnovellOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfnovellOutOctets.setDescription('Novell protocol output octet count')
bdlocIfapolloInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfapolloInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfapolloInPkts.setDescription('Apollo protocol input packet count')
bdlocIfapolloOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfapolloOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfapolloOutPkts.setDescription('Apollo protocol output packet count')
bdlocIfapolloInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfapolloInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfapolloInOctets.setDescription('Apollo protocol input octet count')
bdlocIfapolloOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfapolloOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfapolloOutOctets.setDescription('Apollo protocol output octet count')
bdlocIfvinesInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfvinesInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfvinesInPkts.setDescription('Vines protocol input packet count')
bdlocIfvinesOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfvinesOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfvinesOutPkts.setDescription('Vines protocol output packet count')
bdlocIfvinesInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfvinesInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfvinesInOctets.setDescription('Vines protocol input octet count')
bdlocIfvinesOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfvinesOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfvinesOutOctets.setDescription('Vines protocol output octet count')
bdlocIfbridgedInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfbridgedInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfbridgedInPkts.setDescription('Bridged protocol input packet count')
bdlocIfbridgedOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfbridgedOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfbridgedOutPkts.setDescription('Bridged protocol output packet count')
bdlocIfbridgedInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 76), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfbridgedInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfbridgedInOctets.setDescription('Bridged protocol input octet count')
bdlocIfbridgedOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 77), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfbridgedOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfbridgedOutOctets.setDescription('Bridged protocol output octet count')
bdlocIfsrbInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 78), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfsrbInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfsrbInPkts.setDescription('SRB protocol input packet count')
bdlocIfsrbOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 79), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfsrbOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfsrbOutPkts.setDescription('SRB protocol output packet count')
bdlocIfsrbInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 80), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfsrbInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfsrbInOctets.setDescription('SRB protocol input octet count')
bdlocIfsrbOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 81), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfsrbOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfsrbOutOctets.setDescription('SRB protocol output octet count')
bdlocIfchaosInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 82), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfchaosInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfchaosInPkts.setDescription('Choas protocol input packet count')
bdlocIfchaosOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 83), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfchaosOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfchaosOutPkts.setDescription('Choas protocol output packet count')
bdlocIfchaosInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 84), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfchaosInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfchaosInOctets.setDescription('Choas protocol input octet count')
bdlocIfchaosOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 85), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfchaosOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfchaosOutOctets.setDescription('Choas protocol output octet count')
bdlocIfpupInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 86), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfpupInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfpupInPkts.setDescription('PUP protocol input packet count')
bdlocIfpupOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 87), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfpupOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfpupOutPkts.setDescription('PUP protocol output packet count')
bdlocIfpupInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 88), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfpupInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfpupInOctets.setDescription('PUP protocol input octet count')
bdlocIfpupOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 89), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfpupOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfpupOutOctets.setDescription('PUP protocol output octet count')
bdlocIfmopInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 90), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfmopInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfmopInPkts.setDescription('MOP protocol input packet count')
bdlocIfmopOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 91), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfmopOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfmopOutPkts.setDescription('MOP protocol output packet count')
bdlocIfmopInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 92), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfmopInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfmopInOctets.setDescription('MOP protocol input octet count')
bdlocIfmopOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 93), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfmopOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfmopOutOctets.setDescription('MOP protocol output octet count')
bdlocIflanmanInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 94), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIflanmanInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIflanmanInPkts.setDescription('LanMan protocol input packet count')
bdlocIflanmanOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 95), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIflanmanOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIflanmanOutPkts.setDescription('LanMan protocol output packet count')
bdlocIflanmanInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 96), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIflanmanInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIflanmanInOctets.setDescription('LanMan protocol input octet count')
bdlocIflanmanOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 97), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIflanmanOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIflanmanOutOctets.setDescription('LanMan protocol output octet count')
bdlocIfstunInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 98), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfstunInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfstunInPkts.setDescription('STUN protocol input packet count')
bdlocIfstunOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 99), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfstunOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfstunOutPkts.setDescription('STUN protocol output packet count')
bdlocIfstunInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 100), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfstunInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfstunInOctets.setDescription('STUN protocol input octet count')
bdlocIfstunOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 101), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfstunOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfstunOutOctets.setDescription('STUN protocol output octet count')
bdlocIfspanInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 102), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfspanInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfspanInPkts.setDescription('Spanning tree input protocol packet count')
bdlocIfspanOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 103), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfspanOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfspanOutPkts.setDescription('Spanning tree output protocol packet count')
bdlocIfspanInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 104), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfspanInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfspanInOctets.setDescription('Spanning tree input octet packet count')
bdlocIfspanOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 105), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfspanOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfspanOutOctets.setDescription('Spanning tree output octet packet count')
bdlocIfarpInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 106), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfarpInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfarpInPkts.setDescription('Arp protocol input packet count')
bdlocIfarpOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 107), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfarpOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfarpOutPkts.setDescription('Arp protocol output packet count')
bdlocIfarpInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 108), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfarpInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfarpInOctets.setDescription('Arp protocol input octet count')
bdlocIfarpOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 109), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfarpOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfarpOutOctets.setDescription('Arp protocol output octet count')
bdlocIfprobeInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 110), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfprobeInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfprobeInPkts.setDescription('Probe protocol input packet count')
bdlocIfprobeOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 111), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfprobeOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfprobeOutPkts.setDescription('Probe protocol output packet count')
bdlocIfprobeInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 112), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfprobeInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfprobeInOctets.setDescription('Probe protocol input octet count')
bdlocIfprobeOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 113), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfprobeOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfprobeOutOctets.setDescription('Probe protocol output octet count')
bdlocIfDribbleInputs = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 1, 1, 114), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfDribbleInputs.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfDribbleInputs.setDescription('The number of good packets received with the dribble condition present')
bdlFSIPTable = MibTable((1, 3, 6, 1, 4, 1, 3320, 2, 2, 2), )
if mibBuilder.loadTexts: bdlFSIPTable.setStatus('mandatory')
if mibBuilder.loadTexts: bdlFSIPTable.setDescription('A list of card entries for 4T, HSSI, Mx serial or FSIP.')
bdlFSIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3320, 2, 2, 2, 1), ).setIndexNames((0, "BDCOM-INTERFACES", "bdlocIfFSIPIndex"))
if mibBuilder.loadTexts: bdlFSIPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: bdlFSIPEntry.setDescription('A collection of objects specific to 4T, HSSI, Mx serial or FSIP.')
bdlocIfFSIPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfFSIPIndex.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfFSIPIndex.setDescription('Interface index of this card corresponding to its ifIndex')
bdlocIfFSIPtype = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("dte", 2), ("dce", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfFSIPtype.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfFSIPtype.setDescription('Is this FSIP line DCE or DTE')
bdlocIfFSIPrts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfFSIPrts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfFSIPrts.setDescription('Is the RTS signal up or down')
bdlocIfFSIPcts = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfFSIPcts.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfFSIPcts.setDescription('Is the CTS signal up or down')
bdlocIfFSIPdtr = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfFSIPdtr.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfFSIPdtr.setDescription('Is the DTR signal up or down')
bdlocIfFSIPdcd = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfFSIPdcd.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfFSIPdcd.setDescription('Is the DCD signal up or down')
bdlocIfFSIPdsr = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfFSIPdsr.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfFSIPdsr.setDescription('Is the DSR signal up or down')
bdlocIfFSIPrxClockrate = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfFSIPrxClockrate.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfFSIPrxClockrate.setDescription('Received clock rate')
bdlocIfFSIPrxClockrateHi = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfFSIPrxClockrateHi.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfFSIPrxClockrateHi.setDescription('Use when received clock rate is greater than 2^32 (gigabits).')
bdlocIfFSIPportType = MibTableColumn((1, 3, 6, 1, 4, 1, 3320, 2, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noCable", 1), ("rs232", 2), ("rs422", 3), ("rs423", 4), ("v35", 5), ("x21", 6), ("rs449", 7), ("rs530", 8), ("hssi", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bdlocIfFSIPportType.setStatus('mandatory')
if mibBuilder.loadTexts: bdlocIfFSIPportType.setDescription('Cable Type of 4T, HSSI, Mx serial or FSIP')
mibBuilder.exportSymbols("BDCOM-INTERFACES", bdlocIfxnsInPkts=bdlocIfxnsInPkts, bdlocIfipInOctets=bdlocIfipInOctets, bdlocIfxnsOutPkts=bdlocIfxnsOutPkts, bdlocIfipInPkts=bdlocIfipInPkts, bdlocIfvinesOutOctets=bdlocIfvinesOutOctets, bdlifEntry=bdlifEntry, bdlocIflanmanOutPkts=bdlocIflanmanOutPkts, bdlocIfmopInPkts=bdlocIfmopInPkts, bdlocIfInPktsSec=bdlocIfInPktsSec, bdlocIfCollisions=bdlocIfCollisions, bdlocIfnovellInOctets=bdlocIfnovellInOctets, bdlocIfOutputQueueDrops=bdlocIfOutputQueueDrops, bdlocIfsrbOutOctets=bdlocIfsrbOutOctets, bdlocIfFastOutPkts=bdlocIfFastOutPkts, bdlocIfsrbOutPkts=bdlocIfsrbOutPkts, bdlocIfInAbort=bdlocIfInAbort, bdlocIfclnsInPkts=bdlocIfclnsInPkts, bdlocIfsrbInOctets=bdlocIfsrbInOctets, bdlocIfpupInOctets=bdlocIfpupInOctets, bdlocIfprobeOutPkts=bdlocIfprobeOutPkts, bdlocIfstunInOctets=bdlocIfstunInOctets, bdlocIfchaosOutOctets=bdlocIfchaosOutOctets, bdlocIfclnsInOctets=bdlocIfclnsInOctets, bdlocIfmopOutOctets=bdlocIfmopOutOctets, bdlocIfxnsInOctets=bdlocIfxnsInOctets, bdlocIfpupInPkts=bdlocIfpupInPkts, bdlocIfFastInPkts=bdlocIfFastInPkts, bdlocIfdecnetInPkts=bdlocIfdecnetInPkts, bdlocIfSlowOutOctets=bdlocIfSlowOutOctets, bdlocIfnovellOutOctets=bdlocIfnovellOutOctets, bdlocIfInOverrun=bdlocIfInOverrun, bdlFSIPEntry=bdlFSIPEntry, bdlocIfResets=bdlocIfResets, bdlocIfappletalkOutOctets=bdlocIfappletalkOutOctets, bdlocIfLastOut=bdlocIfLastOut, bdlocIfnovellInPkts=bdlocIfnovellInPkts, bdlocIfReason=bdlocIfReason, bdlocIfsrbInPkts=bdlocIfsrbInPkts, bdlocIfprobeInOctets=bdlocIfprobeInOctets, bdlocIfprobeInPkts=bdlocIfprobeInPkts, bdlocIfarpOutOctets=bdlocIfarpOutOctets, bdlocIfFSIPcts=bdlocIfFSIPcts, bdlocIfFastOutOctets=bdlocIfFastOutOctets, bdlocIfvinesOutPkts=bdlocIfvinesOutPkts, bdlocIfInGiants=bdlocIfInGiants, bdlocIfbridgedInPkts=bdlocIfbridgedInPkts, bdlocIfSlowInOctets=bdlocIfSlowInOctets, bdlocIfchaosInPkts=bdlocIfchaosInPkts, bdlocIfInFrame=bdlocIfInFrame, bdlocIfotherOutOctets=bdlocIfotherOutOctets, bdlocIfclnsOutOctets=bdlocIfclnsOutOctets, bdlocIfOutBitsSec=bdlocIfOutBitsSec, bdlocIfarpInOctets=bdlocIfarpInOctets, bdlocIfapolloOutPkts=bdlocIfapolloOutPkts, bdlocIfdecnetOutPkts=bdlocIfdecnetOutPkts, bdlocIfotherInPkts=bdlocIfotherInPkts, bdlinterfaces=bdlinterfaces, bdlifTable=bdlifTable, bdlocIfFSIPIndex=bdlocIfFSIPIndex, bdlocIfDescr=bdlocIfDescr, bdlocIfarpInPkts=bdlocIfarpInPkts, bdlocIfappletalkOutPkts=bdlocIfappletalkOutPkts, bdlocIfipOutOctets=bdlocIfipOutOctets, bdlocIfmopOutPkts=bdlocIfmopOutPkts, bdlocIflanmanInPkts=bdlocIflanmanInPkts, bdlocIfchaosInOctets=bdlocIfchaosInOctets, bdlocIfLoad=bdlocIfLoad, bdlocIfFastInOctets=bdlocIfFastInOctets, bdlocIfprobeOutOctets=bdlocIfprobeOutOctets, bdlocIflanmanInOctets=bdlocIflanmanInOctets, bdlocIfnovellOutPkts=bdlocIfnovellOutPkts, bdlocIfSlowInPkts=bdlocIfSlowInPkts, bdlocIfmopInOctets=bdlocIfmopInOctets, bdlocIfLineProt=bdlocIfLineProt, bdlocIfSlowOutPkts=bdlocIfSlowOutPkts, bdlocIfpupOutOctets=bdlocIfpupOutOctets, bdlocIfvinesInPkts=bdlocIfvinesInPkts, bdlocIfclnsOutPkts=bdlocIfclnsOutPkts, bdlocIfdecnetOutOctets=bdlocIfdecnetOutOctets, bdlocIfInputQueueDrops=bdlocIfInputQueueDrops, bdlocIfotherInOctets=bdlocIfotherInOctets, bdlocIfDribbleInputs=bdlocIfDribbleInputs, bdlocIfFSIPrxClockrateHi=bdlocIfFSIPrxClockrateHi, bdlocIfReliab=bdlocIfReliab, bdlocIfbridgedOutPkts=bdlocIfbridgedOutPkts, bdlocIfvinesInOctets=bdlocIfvinesInOctets, bdlocIfspanInPkts=bdlocIfspanInPkts, bdlocIfchaosOutPkts=bdlocIfchaosOutPkts, bdlocIfapolloInPkts=bdlocIfapolloInPkts, bdlocIfCarTrans=bdlocIfCarTrans, bdlocIfLastOutHang=bdlocIfLastOutHang, bdlocIfFSIPdcd=bdlocIfFSIPdcd, bdlocIfapolloInOctets=bdlocIfapolloInOctets, bdlocIfstunOutPkts=bdlocIfstunOutPkts, bdlocIfOutPktsSec=bdlocIfOutPktsSec, bdlocIfInCRC=bdlocIfInCRC, bdlocIfapolloOutOctets=bdlocIfapolloOutOctets, bdlocIfRestarts=bdlocIfRestarts, bdlocIfstunInPkts=bdlocIfstunInPkts, bdlocIfFSIPrxClockrate=bdlocIfFSIPrxClockrate, bdlocIfFSIPportType=bdlocIfFSIPportType, bdlocIfspanInOctets=bdlocIfspanInOctets, bdlocIfKeep=bdlocIfKeep, bdlocIfFSIPrts=bdlocIfFSIPrts, bdlocIfHardType=bdlocIfHardType, bdlocIfxnsOutOctets=bdlocIfxnsOutOctets, bdlocIfFSIPdtr=bdlocIfFSIPdtr, bdlocIfstunOutOctets=bdlocIfstunOutOctets, bdlocIflanmanOutOctets=bdlocIflanmanOutOctets, bdlocIfarpOutPkts=bdlocIfarpOutPkts, bdlocIfdecnetInOctets=bdlocIfdecnetInOctets, bdlocIfbridgedOutOctets=bdlocIfbridgedOutOctets, bdlocIfappletalkInOctets=bdlocIfappletalkInOctets, bdlocIfLastIn=bdlocIfLastIn, bdlocIfotherOutPkts=bdlocIfotherOutPkts, bdlocIfInRunts=bdlocIfInRunts, bdlocIfpupOutPkts=bdlocIfpupOutPkts, bdlocIfappletalkInPkts=bdlocIfappletalkInPkts, bdlocIfFSIPdsr=bdlocIfFSIPdsr, bdlocIfDelay=bdlocIfDelay, bdlocIfipOutPkts=bdlocIfipOutPkts, bdlocIfFSIPtype=bdlocIfFSIPtype, bdlFSIPTable=bdlFSIPTable, bdlocIfInBitsSec=bdlocIfInBitsSec, bdlocIfspanOutPkts=bdlocIfspanOutPkts, bdlocIfInIgnored=bdlocIfInIgnored, bdlocIfspanOutOctets=bdlocIfspanOutOctets, bdlocIfbridgedInOctets=bdlocIfbridgedInOctets)
