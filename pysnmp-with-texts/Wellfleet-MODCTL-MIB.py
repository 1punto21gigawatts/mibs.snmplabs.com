#
# PySNMP MIB module Wellfleet-MODCTL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-MODCTL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:40:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, iso, Counter64, MibIdentifier, NotificationType, Unsigned32, Bits, ModuleIdentity, Gauge32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "iso", "Counter64", "MibIdentifier", "NotificationType", "Unsigned32", "Bits", "ModuleIdentity", "Gauge32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter32", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfModCtlGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfModCtlGroup")
wfModCtlBase = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 1, 1))
wfModCtlPrimarySlot = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfModCtlPrimarySlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfModCtlPrimarySlot.setDescription('The slot number of the CPR slot acting as the primary MCD')
wfModCtlState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 20))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("config", 4), ("notpresent", 20))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfModCtlState.setStatus('mandatory')
if mibBuilder.loadTexts: wfModCtlState.setDescription('The current state of the Module Control Driver')
wfModCtlActiveMask = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfModCtlActiveMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfModCtlActiveMask.setDescription('Bit mask indicating which slots are operational')
wfModCtlCfgSlotDisableMask = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 1, 1, 4), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModCtlCfgSlotDisableMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfModCtlCfgSlotDisableMask.setDescription('Bit mask indicating which slots are prevented from entering the active state.')
wfModCtlCfgHeartbeatPeriod = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModCtlCfgHeartbeatPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: wfModCtlCfgHeartbeatPeriod.setDescription('The timer period, in seconds, which defines how often heartbeat messages are sent to active Co-processors.')
wfModCtlCfgHeartbeatDisableMask = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 1, 1, 6), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModCtlCfgHeartbeatDisableMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfModCtlCfgHeartbeatDisableMask.setDescription('Bit mask indicating which slots participate in heartbeat checks from the primary SSP.')
wfModCtlCfgBoflFailPeriod = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModCtlCfgBoflFailPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: wfModCtlCfgBoflFailPeriod.setDescription('The timer period, in seconds, which defines how long to wait following a Bofl failure before taking more drastic action to establish a valid DPI path.')
wfModCtlCfgBoflDisableMask = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 1, 1, 8), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModCtlCfgBoflDisableMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfModCtlCfgBoflDisableMask.setDescription('Bit mask indicating which L3 slots participate in BOFL checks for a valid DPI path from the primary SSP.')
wfModCtlCfgRspImageType = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("trace", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModCtlCfgRspImageType.setStatus('mandatory')
if mibBuilder.loadTexts: wfModCtlCfgRspImageType.setDescription('Type of image to be loaded on the RSP by the IFP driver.')
wfModCtlDbgMsgLevel = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2031616, 65536, 131072, 262144, 524288, 1048576))).clone(namedValues=NamedValues(("all", 2031616), ("debug", 65536), ("info", 131072), ("warning", 262144), ("fault", 524288), ("trace", 1048576))).clone('all')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModCtlDbgMsgLevel.setStatus('mandatory')
if mibBuilder.loadTexts: wfModCtlDbgMsgLevel.setDescription('MCD log messages level To control certain level of log messages MCD_DBG_MSG_ALL 0x001f0000 - 2031616 MCD_DBG_MSG_DEBUG 0x00010000 - 65536 MCD_DBG_MSG_INFO 0x00020000 - 131072 MCD_DBG_MSG_WARNING 0x00040000 - 262144 MCD_DBG_MSG_FAULT 0x00080000 - 524288 MCD_DBG_MSG_TRACE 0x00100000 - 1048576')
wfModCtlScdLogMask = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModCtlScdLogMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfModCtlScdLogMask.setDescription('The log mask is a bit mask used by the SCD to enable various log levels. SCD_LOG_MASK_NONE 0x00000000 SCD_LOG_MASK_INST 0x00000001 SCD_LOG_MASK_DCI 0x00000002 SCD_LOG_MASK_R4 0x00000004 SCD_LOG_MASK_DBG_DISPLAY 0x00000008 SCD_LOG_MASK_SCI 0x00000010 SCD_LOG_MASK_STATS 0x00000020')
wfModCtlScdDbgMask = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 4, 34, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModCtlScdDbgMask.setStatus('mandatory')
if mibBuilder.loadTexts: wfModCtlScdDbgMask.setDescription('The debug log mask is used to control the SCD ability to execute and log debug specific functions')
mibBuilder.exportSymbols("Wellfleet-MODCTL-MIB", wfModCtlCfgHeartbeatDisableMask=wfModCtlCfgHeartbeatDisableMask, wfModCtlState=wfModCtlState, wfModCtlDbgMsgLevel=wfModCtlDbgMsgLevel, wfModCtlActiveMask=wfModCtlActiveMask, wfModCtlCfgSlotDisableMask=wfModCtlCfgSlotDisableMask, wfModCtlPrimarySlot=wfModCtlPrimarySlot, wfModCtlCfgBoflFailPeriod=wfModCtlCfgBoflFailPeriod, wfModCtlCfgRspImageType=wfModCtlCfgRspImageType, wfModCtlScdLogMask=wfModCtlScdLogMask, wfModCtlScdDbgMask=wfModCtlScdDbgMask, wfModCtlCfgBoflDisableMask=wfModCtlCfgBoflDisableMask, wfModCtlCfgHeartbeatPeriod=wfModCtlCfgHeartbeatPeriod, wfModCtlBase=wfModCtlBase)
